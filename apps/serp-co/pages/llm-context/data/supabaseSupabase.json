[
  {
    "owner": "supabase",
    "repo": "supabase",
    "content": "TITLE: Webhook Payload Type Definitions\nDESCRIPTION: TypeScript type definitions for the webhook payload structure, covering INSERT, UPDATE, and DELETE events. Each type includes the event type, table information, and affected records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/webhooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype InsertPayload = {\n  type: 'INSERT'\n  table: string\n  schema: string\n  record: TableRecord<T>\n  old_record: null\n}\ntype UpdatePayload = {\n  type: 'UPDATE'\n  table: string\n  schema: string\n  record: TableRecord<T>\n  old_record: TableRecord<T>\n}\ntype DeletePayload = {\n  type: 'DELETE'\n  table: string\n  schema: string\n  record: null\n  old_record: TableRecord<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client and Querying 'todos' Table in JavaScript\nDESCRIPTION: JavaScript code to initialize the Supabase client using the API URL and anonymous key, then perform a SELECT query on the 'todos' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the JS client\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)\n\n// Make a request\nconst { data: todos, error } = await supabase.from('todos').select('*')\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Triggers for Embedding Enqueue\nDESCRIPTION: The SQL snippet defines triggers and associated functions to enqueue embedding jobs for the 'documents' table when content is inserted or updated. It includes 'after insert' and 'after update' triggers that utilize the 'util.queue_embeddings' function. Changes to 'title' or 'content' lead to re-generation of embeddings, requiring the 'embedding_input' function for input generation and specifying 'embedding' as the destination storage column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- Customize the input for embedding generation\n-- e.g. Concatenate title and content with a markdown header\ncreate or replace function embedding_input(doc documents)\nreturns text\nlanguage plpgsql\nimmutable\nas $$\nbegin\n  return '# ' || doc.title || E'\\n\\n' || doc.content;\nend;\n$$;\n\n-- Trigger for insert events\ncreate trigger embed_documents_on_insert\n  after insert\n  on documents\n  for each row\n  execute function util.queue_embeddings('embedding_input', 'embedding');\n\n-- Trigger for update events\ncreate trigger embed_documents_on_update\n  after update of title, content -- must match the columns in embedding_input()\n  on documents\n  for each row\n  execute function util.queue_embeddings('embedding_input', 'embedding');\n```\n\n----------------------------------------\n\nTITLE: Disabling Sequential Scans for Testing PGroonga Index\nDESCRIPTION: SQL command to disable sequential scans, forcing the use of the PGroonga index for testing purposes. Not recommended for production use.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- For testing only. Don't do this in production\nset enable_seqscan = off;\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Auth Session Management in Next.js Middleware\nDESCRIPTION: Creates a utility function for the middleware that handles authentication token refresh and manages cookies. Ensures proper synchronization between browser and server authentication state and handles potential redirection for unauthenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/login'\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Supavisor Transaction Mode Connection String\nDESCRIPTION: This snippet shows an example of a Supavisor transaction mode connection string to a Supabase Postgres database via a proxy which serves as a connection pooler.  This is ideal for serverless or edge functions, requiring many transient connections. Replace `[YOUR-PASSWORD]` and `[REGION]` with the actual values. Prepared statements are not supported in transaction mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npostgres://postgres.apbkobhfnmcqqzqeeqss:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Creating a Documents Table with Vector Embeddings Support\nDESCRIPTION: SQL script to create a table for storing documents with vector embeddings. The table includes columns for document content and a specialized column for storing vector embeddings, along with an HNSW index for efficient vector similarity search.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n-- Table to store documents with embeddings\ncreate table documents (\n  id integer primary key generated always as identity,\n  title text not null,\n  content text not null,\n  embedding halfvec(1536),\n  created_at timestamp with time zone default now()\n);\n\n-- Index for vector search over document embeddings\ncreate index on documents using hnsw (embedding halfvec_cosine_ops);\n```\n\n----------------------------------------\n\nTITLE: Signing in with Magic Link using JavaScript\nDESCRIPTION: Demonstrates signing in a user via a magic link using Supabase JavaScript client. Requires Supabase JS library and a valid Supabase URL and key. Inputs: a user's email. Automatically signs up an unsigned user unless specified otherwise.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('url', 'anonKey')\n\n// ---cut---\nasync function signInWithEmail() {\n  const { data, error } = await supabase.auth.signInWithOtp({\n    email: 'valid.email@supabase.io',\n    options: {\n      // set this to false if you do not want the user to be automatically signed up\n      shouldCreateUser: false,\n      emailRedirectTo: 'https://example.com/welcome',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RLS Policy for Object Deletion in Supabase Storage\nDESCRIPTION: This SQL snippet creates a Row Level Security (RLS) policy that allows authenticated users to delete only their own objects in Supabase Storage. It compares the object's owner_id with the user's auth.uid() to enforce ownership-based access control.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/ownership.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"User can delete their own objects\"\non storage.objects\nfor delete\nto authenticated\nusing (\n    owner_id = (select auth.uid())\n);\n```\n\n----------------------------------------\n\nTITLE: Handling MFA Verification Process in React\nDESCRIPTION: The AuthMFA component manages the MFA verification process. It lists available MFA factors, presents a challenge to the user, and verifies the code provided through the authenticator app. Dependencies include React hooks and Supabase auth methods.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/totp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AuthMFA() {\n  const [verifyCode, setVerifyCode] = useState('')\n  const [error, setError] = useState('')\n\n  const onSubmitClicked = () => {\n    setError('')\n    ;(async () => {\n      const factors = await supabase.auth.mfa.listFactors()\n      if (factors.error) {\n        throw factors.error\n      }\n\n      const totpFactor = factors.data.totp[0]\n\n      if (!totpFactor) {\n        throw new Error('No TOTP factors found!')\n      }\n\n      const factorId = totpFactor.id\n\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n      if (challenge.error) {\n        setError(challenge.error.message)\n        throw challenge.error\n      }\n\n      const challengeId = challenge.data.id\n\n      const verify = await supabase.auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      })\n      if (verify.error) {\n        setError(verify.error.message)\n        throw verify.error\n      }\n    })()\n  }\n\n  return (\n    <>\n      <div>Please enter the code from your authenticator app.</div>\n      {error && <div className=\"error\">{error}</div>}\n      <input\n        type=\"text\"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      <input type=\"button\" value=\"Submit\" onClick={onSubmitClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Updates using Postgres Changes in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to stream updated rows in a table using Postgres Changes with the Supabase client. It initializes the Supabase client, creates a channel, and subscribes to 'postgres_changes' events with the 'UPDATE' event type and a specified schema. Whenever a row is updated, the payload is logged to the console.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// @noImplicitAny: false\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst channel = supabase\n  .channel('schema-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'UPDATE',\n      schema: 'public',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SELECT Policy\nDESCRIPTION: Example of creating a simple RLS policy for allowing users to view their own todos.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Individuals can view their own todos.\"\non todos for select\nusing ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Creating Rate Limiting Table in PostgreSQL\nDESCRIPTION: Creates a table and index in the private schema to store rate limit data including IP addresses and request timestamps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table private.rate_limits (\n  ip inet,\n  request_at timestamp\n);\n\n-- add an index so that lookups are fast\ncreate index rate_limits_ip_request_at_idx on private.rate_limits (ip, request_at desc);\n```\n\n----------------------------------------\n\nTITLE: Protected API Route in JavaScript\nDESCRIPTION: This JavaScript code creates a protected API route using Supabase. It retrieves the logged-in user's session and responds with data from the 'test' table if the user is authenticated, otherwise it sends a 401 error response.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPagesServerClient } from '@supabase/auth-helpers-nextjs'\n\nconst ProtectedRoute = async (req, res) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient({ req, res })\n  // Check if we have a user\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user)\n    return res.status(401).json({\n      error: 'not_authenticated',\n      description: 'The user does not have an active session or is not authenticated',\n    })\n\n  // Run queries with RLS on the server\n  const { data } = await supabase.from('test').select('*')\n  res.json(data)\n}\n\nexport default ProtectedRoute\n```\n\n----------------------------------------\n\nTITLE: Checking SSL enforcement status with Supabase CLI\nDESCRIPTION: Command to check whether SSL is currently being enforced on your Supabase project database using the CLI. Requires Supabase CLI version 1.37.0+ and appropriate project permissions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase ssl-enforcement --project-ref {ref} get --experimental\n```\n\n----------------------------------------\n\nTITLE: Using Typed Supabase Client with useSupabaseClient in Next.js\nDESCRIPTION: This snippet shows how to use the useSupabaseClient hook with TypeScript in Next.js to get a typed Supabase client. It demonstrates how to pass CLI-generated types for enhanced type safety.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSupabaseClient } from '@supabase/auth-helpers-react'\nimport { Database } from '../database.types'\n\nconst supabaseClient = useSupabaseClient<Database>()\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Sign-In in JavaScript with Supabase\nDESCRIPTION: This snippet demonstrates how to implement GitHub sign-in functionality using Supabase's JavaScript client. It utilizes the `signInWithOAuth` method and requires a Supabase client created with your project URL and anon key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signInWithGithub() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'github',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a POST Route Handler with Supabase in Next.js (JavaScript)\nDESCRIPTION: Implements a Next.js route handler that creates a Supabase client to insert a todo item. It uses createRouteHandlerClient to initialize Supabase with cookie-based authentication, processes the POST request data, and returns the inserted record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\n\nexport async function POST(request) {\n  const { title } = await request.json()\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })\n  const { data } = await supabase.from('todos').insert({ title }).select()\n  return NextResponse.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up blocking authentication functions in Node.js for Supabase role assignment\nDESCRIPTION: This TypeScript code creates blocking Firebase Authentication functions that add a role custom claim to users when they sign up or sign in. This role will be used by Supabase to assign the authenticated Postgres role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeUserCreated, beforeUserSignedIn } from 'firebase-functions/v2/identity'\n\nexport const beforecreated = beforeUserCreated((event) => {\n  return {\n    customClaims: {\n      // The Supabase project will use this role to assign the `authenticated`\n      // Postgres role.\n      role: 'authenticated',\n    },\n  }\n})\n\nexport const beforesignedin = beforeUserSignedIn((event) => {\n  return {\n    customClaims: {\n      // The Supabase project will use this role to assign the `authenticated`\n      // Postgres role.\n      role: 'authenticated',\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Policy for MFA Enforcement\nDESCRIPTION: SQL policy that enforces MFA requirement for all authenticated users by restricting access to tables based on the authentication assurance level (aal) claim in the JWT.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Policy name.\"\n  on table_name\n  as restrictive\n  to authenticated\n  using ((select auth.jwt()->>'aal') = 'aal2');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Public Profiles Table with RLS\nDESCRIPTION: Complete example of creating a profiles table with RLS and a public access policy.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- 1. Create table\ncreate table profiles (\n  id uuid primary key,\n  user_id references auth.users,\n  avatar_url text\n);\n\n-- 2. Enable RLS\nalter table profiles enable row level security;\n\n-- 3. Create Policy\ncreate policy \"Public profiles are visible to everyone.\"\non profiles for select\nto anon         -- the Postgres Role (recommended)\nusing ( true ); -- the actual Policy\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Search with OpenAI Embeddings and GPT-3 in Supabase Edge Function\nDESCRIPTION: This Edge Function extends the simple search by using OpenAI embeddings to find relevant documents, then using GPT-3 to generate a comprehensive answer based on the matched documents. It includes token counting to manage context size within OpenAI's limits.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.170.0/http/server.ts'\nimport 'https://deno.land/x/xhr@0.2.1/mod.ts'\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\nimport GPT3Tokenizer from 'https://esm.sh/gpt3-tokenizer@1.1.5'\nimport { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.1.0'\nimport { oneLine, stripIndent } from 'https://esm.sh/common-tags@1.8.2'\nimport { supabaseClient } from './lib/supabase'\n\nexport const corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) => {\n  // Handle CORS\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  // Search query is passed in request payload\n  const { query } = await req.json()\n\n  // OpenAI recommends replacing newlines with spaces for best results\n  const input = query.replace(/\\n/g, ' ')\n\n  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })\n  const openai = new OpenAIApi(configuration)\n\n  // Generate a one-time embedding for the query itself\n  const embeddingResponse = await openai.createEmbedding({\n    model: 'text-embedding-ada-002',\n    input,\n  })\n\n  const [{ embedding }] = embeddingResponse.data.data\n\n  // Fetching whole documents for this simple example.\n  //\n  // Ideally for context injection, documents are chunked into\n  // smaller sections at earlier pre-processing/embedding step.\n  const { data: documents } = await supabaseClient.rpc('match_documents', {\n    query_embedding: embedding,\n    match_threshold: 0.78, // Choose an appropriate threshold for your data\n    match_count: 10, // Choose the number of matches\n  })\n\n  const tokenizer = new GPT3Tokenizer({ type: 'gpt3' })\n  let tokenCount = 0\n  let contextText = ''\n\n  // Concat matched documents\n  for (let i = 0; i < documents.length; i++) {\n    const document = documents[i]\n    const content = document.content\n    const encoded = tokenizer.encode(content)\n    tokenCount += encoded.text.length\n\n    // Limit context to max 1500 tokens (configurable)\n    if (tokenCount > 1500) {\n      break\n    }\n\n    contextText += `${content.trim()}\\n---\\n`\n  }\n\n  const prompt = stripIndent`${oneLine`\n    You are a very enthusiastic Supabase representative who loves\n    to help people! Given the following sections from the Supabase\n    documentation, answer the question using only that information,\n    outputted in markdown format. If you are unsure and the answer\n    is not explicitly written in the documentation, say\n    \"Sorry, I don't know how to help with that.\"`}\n\n    Context sections:\n    ${contextText}\n\n    Question: \"\"\"\n    ${query}\n    \"\"\"\n\n    Answer as markdown (including related code snippets if available):\n  `\n\n  // In production we should handle possible errors\n  const completionResponse = await openai.createCompletion({\n    model: 'text-davinci-003',\n    prompt,\n    max_tokens: 512, // Choose the max allowed tokens in completion\n    temperature: 0, // Set to 0 for deterministic results\n  })\n\n  const {\n    id,\n    choices: [{ text }],\n  } = completionResponse.data\n\n  return new Response(JSON.stringify({ id, text }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Security Check Function for API Requests\nDESCRIPTION: SQL function that implements custom security checks to run before each API request. This function can be configured to run automatically with every Data API request.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.check_request()\n  returns void\n  language plpgsql\n  security definer\n  as $$\nbegin\n  -- your logic here\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing User Management with Security Definer in Supabase\nDESCRIPTION: Complete example of setting up a secure user management system with proper table structure, trigger function with security definer, and trigger creation for handling new users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/dashboard-errors-when-managing-users-N1ls4A.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  id uuid references auth.users on delete cascade not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Listening to UPDATE Events in Dart with Supabase Realtime\nDESCRIPTION: Creates a channel to listen specifically for UPDATE events in the public schema of a Supabase database using Dart. The code establishes a subscription that prints payload data whenever database updates occur.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('schema-db-changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.update, // Listen only to UPDATEs\n        schema: 'public',\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Optimized RLS Policy without Join\nDESCRIPTION: Improved version of the RLS policy that avoids table joins by using a subquery with IN clause.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"rls_test_select\" on test_table\nto authenticated\nusing (\n  team_id in (\n    select team_id\n    from team_user\n    where user_id = (select auth.uid()) -- no join\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Documents Table with Vector Embedding Column in SQL\nDESCRIPTION: This SQL snippet shows how to create a table for storing documents with their embeddings. It includes a vector column for storing the embeddings and creates an HNSW index for efficient vector similarity search.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Table to store documents with embeddings\ncreate table documents (\n  id integer primary key generated always as identity,\n  title text not null,\n  content text not null,\n  embedding halfvec(1536),\n  created_at timestamp with time zone default now()\n);\n\n-- Index for vector search over document embeddings\ncreate index on documents using hnsw (embedding halfvec_cosine_ops);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Claims in JavaScript Client\nDESCRIPTION: JavaScript code to access custom claims from the JWT in a client-side application using the jwt-decode package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { jwtDecode } from 'jwt-decode'\n\nconst { subscription: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {\n  if (session) {\n    const jwt = jwtDecode(session.access_token)\n    const userRole = jwt.user_role\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Specific Table Events in JavaScript with Supabase Realtime\nDESCRIPTION: Creates a channel to listen for all event types on a specific table ('todos') in the public schema of a Supabase database. The code uses the 'table' parameter to specify which table to monitor.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst changes = supabase\n  .channel('table-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: '*',\n      schema: 'public',\n      table: 'todos',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Search Function in PostgreSQL\nDESCRIPTION: SQL function that combines full-text and semantic search using reciprocal rank fusion (RRF). Accepts query text, embedding, and various parameters for customizing search behavior.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function hybrid_search(\n  query_text text,\n  query_embedding vector(512),\n  match_count int,\n  full_text_weight float = 1,\n  semantic_weight float = 1,\n  rrf_k int = 50\n)\nreturns setof documents\nlanguage sql\nas $$\nwith full_text as (\n  select\n    id,\n    -- Note: ts_rank_cd is not indexable but will only rank matches of the where clause\n    -- which shouldn't be too big\n    row_number() over(order by ts_rank_cd(fts, websearch_to_tsquery(query_text)) desc) as rank_ix\n  from\n    documents\n  where\n    fts @@ websearch_to_tsquery(query_text)\n  order by rank_ix\n  limit least(match_count, 30) * 2\n),\nsemantic as (\n  select\n    id,\n    row_number() over (order by embedding <#> query_embedding) as rank_ix\n  from\n    documents\n  order by rank_ix\n  limit least(match_count, 30) * 2\n)\nselect\n  documents.*\nfrom\n  full_text\n  full outer join semantic\n    on full_text.id = semantic.id\n  join documents\n    on coalesce(full_text.id, semantic.id) = documents.id\norder by\n  coalesce(1.0 / (rrf_k + full_text.rank_ix), 0.0) * full_text_weight +\n  coalesce(1.0 / (rrf_k + semantic.rank_ix), 0.0) * semantic_weight\n  desc\nlimit\n  least(match_count, 30)\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Restrictive RLS Policy for Universal MFA Enforcement in SQL\nDESCRIPTION: SQL policy that enforces MFA for all authenticated users by checking if the JWT's 'aal' claim equals 'aal2'. This restrictive policy ensures that only users who have completed MFA verification can access the table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Enforce MFA for all end users.\"\n  on table_name\n  as restrictive\n  to authenticated\n  using ( (select auth.jwt()->>'aal') = 'aal2' );\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hello World Function in PostgreSQL\nDESCRIPTION: Creates a simple PostgreSQL function that returns 'hello world'. Demonstrates basic function structure including declaration, return type, language specification, and function body.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function hello_world()\nreturns text\nlanguage sql\nas $$\n  select 'hello world';\n$$;\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security in Postgres\nDESCRIPTION: Basic SQL command to enable Row Level Security on a table in a specific schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter table <schema_name>.<table_name>\nenable row level security;\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Next.js TypeScript Server Components\nDESCRIPTION: TypeScript implementation for using Supabase in a Next.js Server Component. This approach provides type safety when fetching data server-side using the createServerComponentClient function with database type definitions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs'\n\nimport type { Database } from '@/lib/database.types'\n\nexport default async function ServerComponent() {\n  const cookieStore = cookies()\n  const supabase = createServerComponentClient<Database>({ cookies: () => cookieStore })\n  const { data } = await supabase.from('todos').select()\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Team-based Authorization using JWT\nDESCRIPTION: Example of using auth.jwt() function to implement team-based access control\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"User is in team\"\non my_table\nto authenticated\nusing ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));\n```\n\n----------------------------------------\n\nTITLE: Verifying a JWT using pgjwt in PostgreSQL\nDESCRIPTION: Example of using the verify function from the pgjwt extension to parse and validate a JWT. The function takes the token, secret, and algorithm as parameters and returns the decoded contents with metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgjwt.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  extensions.verify(\n    token := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiRm9vIn0.Q8hKjuadCEhnCPuqIj9bfLhTh_9QSxshTRsA5Aq4IuM',\n    secret    := 'secret',\n    algorithm := 'HS256'\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Next.js TypeScript Client Components\nDESCRIPTION: TypeScript implementation for using Supabase in a Next.js Client Component. This example shows how to fetch todos with proper TypeScript types for the database, providing type safety throughout the component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs'\nimport { useEffect, useState } from 'react'\n\nimport type { Database } from '@/lib/database.types'\n\ntype Todo = Database['public']['Tables']['todos']['Row']\n\nexport default function Page() {\n  const [todos, setTodos] = useState<Todo[] | null>(null)\n  const supabase = createClientComponentClient<Database>()\n\n  useEffect(() => {\n    const getData = async () => {\n      const { data } = await supabase.from('todos').select()\n      setTodos(data)\n    }\n\n    getData()\n  }, [])\n\n  return todos ? <pre>{JSON.stringify(todos, null, 2)}</pre> : <p>Loading todos...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a POST Route Handler with Supabase in Next.js (TypeScript)\nDESCRIPTION: TypeScript implementation of a Next.js route handler that creates a typed Supabase client to insert a todo item. It uses createRouteHandlerClient with database types for type safety, processes the POST request data, and returns the inserted record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\n\nimport type { Database } from '@/lib/database.types'\n\nexport async function POST(request: Request) {\n  const { title } = await request.json()\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })\n  const { data } = await supabase.from('todos').insert({ title }).select()\n  return NextResponse.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Constraint with CASCADE Option\nDESCRIPTION: Example of creating a foreign key constraint using the CASCADE option, which deletes related child records when parent record is deleted.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter table child_table\nadd constraint fk_parent foreign key (parent_id) references parent_table (id)\n  on delete cascade;\n```\n\n----------------------------------------\n\nTITLE: Sign In with Facebook using Supabase\nDESCRIPTION: This JavaScript snippet demonstrates how to sign in a user with Facebook using Supabase's `signInWithOAuth` method. It imports the `createClient` function from the `@supabase/supabase-js` library, initializes a Supabase client, and then calls the `signInWithOAuth` method with the `facebook` provider. This function returns a promise that resolves with the authentication data or rejects with an error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signInWithFacebook() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'facebook',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Adaptive Retrieval Function with Supabase Client\nDESCRIPTION: This TypeScript snippet shows how to use the match_documents_adaptive function from a Supabase client application to perform a similarity search.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// ... first initialize your supabase client\n// and generate your query embedding\n\nconst { error: matchError, data: pageSections } = await supabase.rpc('match_documents_adaptive', {\n  query_embedding: embedding,\n  match_count: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Signing In with Spotify - Kotlin\nDESCRIPTION: This snippet illustrates how to use Spotify OAuth for signing in a user in a Kotlin application. It leverages Supabase's `signInWith` method to initiate the authentication process with Spotify as the provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithSpotify() {\\n\\tsupabase.auth.signInWith(Spotify)\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Database User Password in SQL\nDESCRIPTION: SQL command to update the Prisma database user password if needed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- alter prisma password if needed\nalter user \"prisma\" with password 'new_password';\n```\n\n----------------------------------------\n\nTITLE: Enabling RLS and Creating Policies for Direct Postgres Connection\nDESCRIPTION: Sets up Row Level Security on a document_sections table with a policy that restricts users to only see document sections that belong to documents they own. Uses a custom session variable 'app.current_user_id' to identify the current user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- enable row level security\nalter table document_sections enable row level security;\n\n-- setup RLS for select operations\ncreate policy \"Users can query their own document sections\"\non document_sections for select to authenticated using (\n  document_id in (\n    select id\n    from external.documents\n    where owner_id = current_setting('app.current_user_id')::bigint\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Row-Level Security Policy in PostgreSQL\nDESCRIPTION: SQL command to create a row-level security policy that allows users to update only their own posts in a 'posts' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow update for owners\" on posts for\nupdate\n  using ((select auth.uid()) = user_id);\n```\n\n----------------------------------------\n\nTITLE: Enabling PostGIS Extension in Postgres via SQL\nDESCRIPTION: SQL commands to create a dedicated schema and enable the PostGIS extension for geo-spatial data handling in Postgres. The example also shows how to disable the extension if needed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a dedicated separate schema\ncreate schema if not exists \"gis\";\n\n-- Example: enable the \"postgis\" extension\ncreate extension postgis with schema \"gis\";\n\n-- Example: disable the \"postgis\" extension\ndrop extension if exists postgis;\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index on Vector Column in SQL\nDESCRIPTION: SQL command template for creating an HNSW index on a vectorized column in Supabase. The syntax includes options for different search types: Euclidean distance, negative inner product, or cosine distance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX <custom name of index> ON <table name> USING hnsw (<vectorized column> <search type>);\n```\n\n----------------------------------------\n\nTITLE: Creating API Key Validation Table\nDESCRIPTION: Creates a table in the private schema to store application API keys for request validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate table private.anon_api_keys (\n  id uuid primary key,\n  -- other relevant fields\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Supabase Project with CLI\nDESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Streaming Inserts using Postgres Changes in JavaScript\nDESCRIPTION: This JavaScript code shows how to stream new rows inserted into a table using Postgres Changes and the Supabase client. It initializes the Supabase client, creates a channel, and subscribes to 'postgres_changes' events with the 'INSERT' event type and a specified schema. When a new row is inserted, the payload is logged to the console.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// @noImplicitAny: false\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst channel = supabase\n  .channel('schema-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Querying Vectors with Filtering in PostgreSQL\nDESCRIPTION: SQL query example for searching vectors with filtering. This query may return fewer than the requested number of rows due to index limitations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items WHERE category_id = 123 ORDER BY embedding <-> '[3,1,2]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Search Function with Cosine Distance\nDESCRIPTION: SQL function to perform semantic search using cosine distance operator with configurable threshold and match count\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function match_documents (\n  query_embedding vector(512),\n  match_threshold float,\n  match_count int\n)\nreturns setof documents\nlanguage sql\nas $$\n  select *\n  from documents\n  where documents.embedding <=> query_embedding < 1 - match_threshold\n  order by documents.embedding <=> query_embedding asc\n  limit least(match_count, 200);\n$$;\n```\n\n----------------------------------------\n\nTITLE: Next.js Middleware for Supabase Session Management\nDESCRIPTION: Implements middleware to handle session refreshes, authentication checks, and potential redirects for protected routes\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest } from 'next/server'\nimport { updateSession } from '@/utils/supabase/middleware'\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Vector Column in SQL\nDESCRIPTION: SQL command to create a table with a vector column for storing embeddings. The vector size is specified to match the dimensions of the embedding model output.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id serial primary key,\n  title text not null,\n  body text not null,\n  embedding vector(384)\n);\n```\n\n----------------------------------------\n\nTITLE: Optimized RLS Policy with Role Specification\nDESCRIPTION: Improved RLS policy that includes role specification to prevent unnecessary policy evaluation for unauthorized users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"rls_test_select\" on rls_test\nto authenticated\nusing ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Executing Similarity Search using Supabase JavaScript Client\nDESCRIPTION: JavaScript code to call the similarity search function using Supabase client's RPC method. This allows querying for similar documents based on a given embedding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: documents } = await supabaseClient.rpc('match_documents', {\n  query_embedding: embedding, // Pass the embedding you want to compare\n  match_threshold: 0.78, // Choose an appropriate threshold for your data\n  match_count: 10, // Choose the number of matches\n})\n```\n\n----------------------------------------\n\nTITLE: Storing Vector Embeddings using JavaScript and Transformers.js\nDESCRIPTION: JavaScript code using Transformers.js to generate embeddings and store them in a Supabase table using the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pipeline } from '@xenova/transformers'\nconst generateEmbedding = await pipeline('feature-extraction', 'Supabase/gte-small')\n\nconst title = 'First post!'\nconst body = 'Hello world!'\n\n// Generate a vector using Transformers.js\nconst output = await generateEmbedding(body, {\n  pooling: 'mean',\n  normalize: true,\n})\n\n// Extract the embedding output\nconst embedding = Array.from(output.data)\n\n// Store the vector in Postgres\nconst { data, error } = await supabase.from('documents').insert({\n  title,\n  body,\n  embedding,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Signed URL for Private Supabase Storage Asset\nDESCRIPTION: Shows how to generate a time-limited signed URL for accessing a private asset in Supabase Storage. This method uses the 'createSignedUrl' function, specifying the bucket, file path, and expiration time in seconds.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/downloads.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nconst { data, error } = await supabase.storage\n  .from('bucket')\n  .createSignedUrl('private-document.pdf', 3600)\n\nif (data) {\n  console.log(data.signedUrl)\n}\n```\n\n----------------------------------------\n\nTITLE: Equality Search Using Dart Supabase Client\nDESCRIPTION: Dart implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .eq('title', 'Harry');\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client for API Routes in Next.js\nDESCRIPTION: Utility function to create a Supabase client for use in Next.js API routes, handling server-side cookie management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient, serializeCookieHeader } from '@supabase/ssr'\nimport { type NextApiRequest, type NextApiResponse } from 'next'\n\nexport default function createClient(req: NextApiRequest, res: NextApiResponse) {\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return Object.keys(req.cookies).map((name) => ({ name, value: req.cookies[name] || '' }))\n        },\n        setAll(cookiesToSet) {\n          res.setHeader(\n            'Set-Cookie',\n            cookiesToSet.map(({ name, value, options }) =>\n              serializeCookieHeader(name, value, options)\n            )\n          )\n        },\n      },\n    }\n  )\n\n  return supabase\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Supabase Middleware Implementation in JavaScript\nDESCRIPTION: JavaScript implementation for handling Supabase authentication session updates in Next.js middleware with cookie management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { NextResponse } from 'next/server'\n\nexport async function updateSession(request) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // refreshing the auth token\n  await supabase.auth.getUser()\n\n  return supabaseResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UPDATE Policy for Profiles\nDESCRIPTION: Example of creating an UPDATE policy that allows users to update their own profiles using both USING and WITH CHECK clauses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- 1. Create table\ncreate table profiles (\n  id uuid primary key,\n  user_id uuid references auth.users,\n  avatar_url text\n);\n\n-- 2. Enable RLS\nalter table profiles enable row level security;\n\n-- 3. Create Policy\ncreate policy \"Users can update their own profile.\"\non profiles for update\nto authenticated                    -- the Postgres Role (recommended)\nusing ( (select auth.uid()) = user_id )       -- checks if the existing row complies with the policy expression\nwith check ( (select auth.uid()) = user_id ); -- checks if the new row complies with the policy expression\n```\n\n----------------------------------------\n\nTITLE: Adding NPM Script for Updating Types\nDESCRIPTION: Adds an NPM script to package.json for updating Supabase types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"update-types\": \"npx supabase gen types --lang=typescript --project-id \\\"$PROJECT_REF\\\" > database.types.ts\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Embedding Triggers for Automatic Updates in SQL\nDESCRIPTION: This SQL snippet creates two triggers that automatically queue embedding generation jobs when documents are inserted or updated. These triggers use the util.queue_embeddings function to handle the asynchronous processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Trigger for insert events\ncreate trigger embed_documents_on_insert\n  after insert\n  on documents\n  for each row\n  execute function util.queue_embeddings('embedding_input', 'embedding');\n\n-- Trigger for update events\ncreate trigger embed_documents_on_update\n  after update of title, content -- must match the columns in embedding_input()\n  on documents\n  for each row\n  execute function util.queue_embeddings('embedding_input', 'embedding');\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Client with TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a Supabase client within SvelteKit, configured with specific typings for Handle. It includes functions for safely retrieving session data with JWT validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/hooks.server.ts\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\nimport { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'\nimport type { Handle } from '@sveltejs/kit'\n\nexport const handle: Handle = async ({ event, resolve }) => {\n  event.locals.supabase = createSupabaseServerClient({\n    supabaseUrl: PUBLIC_SUPABASE_URL,\n    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n    event,\n  })\n\n  /**\n   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it\n   * doesn't validate the JWT, this function validates the JWT by first calling\n   * `getUser` and aborts early if the JWT signature is invalid.\n   */\n  event.locals.safeGetSession = async () => {\n    const {\n      data: { user },\n      error,\n    } = await supabase.auth.getUser()\n    if (error) {\n      return { session: null, user: null }\n    }\n\n    const {\n      data: { session },\n    } = await event.locals.supabase.auth.getSession()\n    return { session, user }\n  }\n\n  return resolve(event, {\n    filterSerializedResponseHeaders(name) {\n      return name === 'content-range' || name === 'x-supabase-api-version'\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Salary Update Trigger Function in PostgreSQL\nDESCRIPTION: This example creates a trigger function that logs salary changes and a corresponding trigger. The function inserts a record into a salary_log table whenever an employee's salary is updated.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: Update salary_log when salary is updated\ncreate function update_salary_log()\nreturns trigger\nlanguage plpgsql\nas $$\nbegin\n  insert into salary_log(employee_id, old_salary, new_salary)\n  values (new.id, old.salary, new.salary);\n  return new;\nend;\n$$;\n\ncreate trigger salary_update_trigger\nafter update on employees\nfor each row\nexecute function update_salary_log();\n```\n\n----------------------------------------\n\nTITLE: Using explain() Method with Supabase Query\nDESCRIPTION: Example of how to chain the explain() method to a Supabase query to get the execution plan for a select operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst { data, error } = await supabase\n  .from('instruments')\n  .select()\n  .explain()\n```\n\n----------------------------------------\n\nTITLE: Rendering App with MFA in React\nDESCRIPTION: This React component conditionally renders the MFA challenge screen or the main app based on the user's authenticator assurance level (AAL). It utilizes Supabase's `getAuthenticatorAssuranceLevel()` API to determine if an MFA step is necessary, updating the component's state accordingly. Dependencies include Supabase's authentication library and React hooks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/phone.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction AppWithMFA() {\n  const [readyToShow, setReadyToShow] = useState(false)\n  const [showMFAScreen, setShowMFAScreen] = useState(false)\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()\n        if (error) {\n          throw error\n        }\n\n        console.log(data)\n\n        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {\n          setShowMFAScreen(true)\n        }\n      } finally {\n        setReadyToShow(true)\n      }\n    })()\n  }, [])\n\n  if (readyToShow) {\n    if (showMFAScreen) {\n      return <AuthMFA />\n    }\n\n    return <App />\n  }\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Documents for Embedding Generation\nDESCRIPTION: This SQL snippet inserts a new document and updates its content in the 'documents' table. It demonstrates how embedding columns are asynchronously generated and reset to 'null' upon content updates. The example showcases executing select queries to check embedding states as a response to document manipulations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n-- Insert a new document\ninsert into documents (title, content)\nvalues\n  ('Understanding Vector Databases', 'Vector databases are specialized...');\n\n-- Immediately check the embedding column\nselect id, embedding\nfrom documents\nwhere title = 'Understanding Vector Databases';\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect id, embedding\nfrom documents\nwhere title = 'Understanding Vector Databases';\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- Update the content of the document\nupdate documents\nset content = 'Vector databases allow you to query...'\nwhere title = 'Understanding Vector Databases';\n\n-- Immediately check the embedding column\nselect id, embedding\nfrom documents\nwhere title = 'Understanding Vector Databases';\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- Update the title of the document\nupdate documents\nset title = 'Understanding Vector Databases with Supabase'\nwhere title = 'Understanding Vector Databases';\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect id, embedding\nfrom documents\nwhere title = 'Understanding Vector Databases with Supabase';\n```\n\n----------------------------------------\n\nTITLE: Realtime Multiplayer Channel Implementation\nDESCRIPTION: Shows how to implement Realtime Multiplayer features including broadcast events, presence tracking, and channel subscription.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal channel = Supabase.instance.client.channel('my_channel');\n\n// listen to `location` broadcast events\nchannel.on(\n    RealtimeListenTypes.broadcast,\n    ChannelFilter(\n      event: 'location',\n    ), (payload, [ref]) {\n\t// Do something exciting with the broadcast event\n});\n\n// send `location` broadcast events\nchannel.send(\n  type: RealtimeListenTypes.broadcast,\n  event: 'location',\n  payload: {'lat': 1.3521, 'lng': 103.8198},\n);\n\n// listen to presence states\nchannel.on(RealtimeListenTypes.presence, ChannelFilter(event: 'sync'),\n    (payload, [ref]) {\n\t// Do something exciting with the presence state\n});\n\n// subscribe to the above changes\nchannel.subscribe((status) async {\n  if (status == 'SUBSCRIBED') {\n    // if subscribed successfully, send presence event\n    final status = await channel.track({'user_id': myUserId});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating and Storing Embeddings using Transformer.js and Supabase\nDESCRIPTION: JavaScript code demonstrating how to generate a vector embedding using Transformer.js and store it in a PostgreSQL database using the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pipeline } from '@xenova/transformers'\nconst generateEmbedding = await pipeline('feature-extraction', 'Supabase/gte-small')\n\nconst title = 'First post!'\nconst body = 'Hello world!'\n\n// Generate a vector using Transformers.js\nconst output = await generateEmbedding(body, {\n  pooling: 'mean',\n  normalize: true,\n})\n\n// Extract the embedding output\nconst embedding = Array.from(output.data)\n\n// Store the vector in Postgres\nconst { data, error } = await supabase.from('posts').insert({\n  title,\n  body,\n  embedding,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Callback Route Handler in TypeScript\nDESCRIPTION: TypeScript version of the route handler for processing authentication code exchange with type safety.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nimport type { NextRequest } from 'next/server'\nimport type { Database } from '@/lib/database.types'\n\nexport async function GET(request: NextRequest) {\n  const requestUrl = new URL(request.url)\n  const code = requestUrl.searchParams.get('code')\n\n  if (code) {\n    const cookieStore = await cookies()\n    const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })\n    await supabase.auth.exchangeCodeForSession(code)\n  }\n\n  return NextResponse.redirect(requestUrl.origin)\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with Next.js Server Actions and Supabase\nDESCRIPTION: Example of using Supabase authentication within a Next.js Server Action. This shows how to create a sign-in function that runs on the server but can be called from a client form submission.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const signIn = async () => {\n    'use server'\n    supabase.auth.signInWithOAuth({...})\n  }\n\n  return (\n    <form action={signIn}>\n      <button>Sign in with GitHub</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the email sending handler function in TypeScript\nDESCRIPTION: TypeScript implementation of a Supabase Edge Function that sends emails using the Resend API. The function handles HTTP requests, forwards them to the Resend API endpoint, and returns the response to the client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')\n\nconst handler = async (_request: Request): Promise<Response> => {\n  const res = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${RESEND_API_KEY}`,\n    },\n    body: JSON.stringify({\n      from: 'onboarding@resend.dev',\n      to: 'delivered@resend.dev',\n      subject: 'hello world',\n      html: '<strong>it works!</strong>',\n    }),\n  })\n\n  const data = await res.json()\n\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n\nDeno.serve(handler)\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security Using SQL\nDESCRIPTION: SQL command to enable Row Level Security (RLS) on a database table named 'todos'. This prevents unauthorized access to the table data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter table\n  todos enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Implement OAuth and Linking Handlers in React Native\nDESCRIPTION: This TypeScript code snippet shows how to implement OAuth and deep linking handlers in a React Native application using Expo and Supabase. It covers initializing the Supabase client, performing OAuth with Github, handling magic links, and processing incoming URLs to create user sessions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"react-native\";\nimport { makeRedirectUri } from \"expo-auth-session\";\nimport * as QueryParams from \"expo-auth-session/build/QueryParams\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport * as Linking from \"expo-linking\";\nimport { supabase } from \"app/utils/supabase\";\n\nWebBrowser.maybeCompleteAuthSession(); // required for web only\nconst redirectTo = makeRedirectUri();\n\nconst createSessionFromUrl = async (url: string) => {\n  const { params, errorCode } = QueryParams.getQueryParams(url);\n\n  if (errorCode) throw new Error(errorCode);\n  const { access_token, refresh_token } = params;\n\n  if (!access_token) return;\n\n  const { data, error } = await supabase.auth.setSession({\n    access_token,\n    refresh_token,\n  });\n  if (error) throw error;\n  return data.session;\n};\n\nconst performOAuth = async () => {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: \"github\",\n    options: {\n      redirectTo,\n      skipBrowserRedirect: true,\n    },\n  });\n  if (error) throw error;\n\n  const res = await WebBrowser.openAuthSessionAsync(\n    data?.url ?? \"\",\n    redirectTo\n  );\n\n  if (res.type === \"success\") {\n    const { url } = res;\n    await createSessionFromUrl(url);\n  }\n};\n\nconst sendMagicLink = async () => {\n  const { error } = await supabase.auth.signInWithOtp({\n    email: \"valid.email@supabase.io\",\n    options: {\n      emailRedirectTo: redirectTo,\n    },\n  });\n\n  if (error) throw error;\n  // Email sent.\n};\n\nexport default function Auth() {\n  // Handle linking into app from email app.\n  const url = Linking.useURL();\n  if (url) createSessionFromUrl(url);\n\n  return (\n    <>\n      <Button onPress={performOAuth} title=\"Sign in with Github\" />\n      <Button onPress={sendMagicLink} title=\"Send Magic Link\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Set up server-side hooks in SvelteKit\nDESCRIPTION: This code defines server-side hooks for SvelteKit using TypeScript. These hooks create a Supabase client specific to the request, check user authentication, and protect pages based on the authentication status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { type Handle, redirect } from '@sveltejs/kit'\nimport { sequence } from '@sveltejs/kit/hooks'\n\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\n\nconst supabase: Handle = async ({ event, resolve }) => {\n  /**\n   * Creates a Supabase client specific to this server request.\n   *\n   * The Supabase client gets the Auth token from the request cookies.\n   */\n  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n    cookies: {\n      getAll: () => event.cookies.getAll(),\n      /**\n       * SvelteKit's cookies API requires `path` to be explicitly set in\n       * the cookie options. Setting `path` to `/` replicates previous/\n       * standard behavior.\n       */\n      setAll: (cookiesToSet) => {\n        cookiesToSet.forEach(({ name, value, options }) => {\n          event.cookies.set(name, value, { ...options, path: '/' })\n        })\n      },\n    },\n  })\n\n  /**\n   * Unlike `supabase.auth.getSession()`, which returns the session _without_\n   * validating the JWT, this function also calls `getUser()` to validate the\n   * JWT before returning the session.\n   */\n  event.locals.safeGetSession = async () => {\n    const {\n      data: { session },\n    } = await event.locals.supabase.auth.getSession()\n    if (!session) {\n      return { session: null, user: null }\n    }\n\n    const {\n      data: { user },\n      error,\n    } = await event.locals.supabase.auth.getUser()\n    if (error) {\n      // JWT validation has failed\n      return { session: null, user: null }\n    }\n\n    return { session, user }\n  }\n\n  return resolve(event, {\n    filterSerializedResponseHeaders(name) {\n      /**\n       * Supabase libraries use the `content-range` and `x-supabase-api-version`\n       * headers, so we need to tell SvelteKit to pass it through.\n       */\n      return name === 'content-range' || name === 'x-supabase-api-version'\n    },\n  })\n}\n\nconst authGuard: Handle = async ({ event, resolve }) => {\n  const { session, user } = await event.locals.safeGetSession()\n  event.locals.session = session\n  event.locals.user = user\n\n  if (!event.locals.session && event.url.pathname.startsWith('/private')) {\n    redirect(303, '/auth')\n  }\n\n  if (event.locals.session && event.url.pathname === '/auth') {\n    redirect(303, '/private')\n  }\n\n  return resolve(event)\n}\n\nexport const handle: Handle = sequence(supabase, authGuard)\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Next.js Server Actions\nDESCRIPTION: Example of using Supabase within Next.js Server Actions to perform data mutations server-side. This approach uses the createServerActionClient function to insert a new todo, and revalidates the path after the insertion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { createServerActionClient } from '@supabase/auth-helpers-nextjs'\nimport { revalidatePath } from 'next/cache'\n\nexport default async function NewTodo() {\n  const addTodo = async (formData) => {\n    'use server'\n\n    const title = formData.get('title')\n    const supabase = createServerActionClient({ cookies })\n    await supabase.from('todos').insert({ title })\n    revalidatePath('/')\n  }\n\n  return (\n    <form action={addTodo}>\n      <input name=\"title\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with JavaScript Supabase Client\nDESCRIPTION: This JavaScript code uses the Supabase client to query and extract nested JSON values from a 'books' table. The query demonstrates how to access nested JSON properties and array elements using the PostgreSQL JSON path syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('books').select(`\n    title,\n    description:  metadata->description,\n    price:        metadata->price,\n    low_age:      metadata->ages->0,\n    high_age:     metadata->ages->1\n  `)\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_graphql Extension in Supabase\nDESCRIPTION: Demonstrates how to enable the pg_graphql extension in a Supabase database using SQL. This command creates the extension, enabling GraphQL support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension pg_graphql;\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Server Client for Next.js\nDESCRIPTION: Utility function to create a Supabase server client with cookie handling for authentication in a Next.js application. This handles cookie operations for server-side rendering and server components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Login Component in React\nDESCRIPTION: A TypeScript version of the login component that renders a form with email and password fields, along with buttons for signing in and signing up. The form submits to authentication endpoints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Login() {\n  return (\n    <form action=\"/auth/login\" method=\"post\">\n      <label htmlFor=\"email\">Email</label>\n      <input name=\"email\" />\n      <label htmlFor=\"password\">Password</label>\n      <input type=\"password\" name=\"password\" />\n      <button>Sign In</button>\n      <button formAction=\"/auth/sign-up\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tables to an Existing Publication in SQL\nDESCRIPTION: Modifies an existing publication to include an additional table, allowing you to expand your replication scope without recreating the publication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nalter publication publication_name\nadd table table_name;\n```\n\n----------------------------------------\n\nTITLE: Updating getServerSideProps with createPagesServerClient in Next.js\nDESCRIPTION: This snippet shows how to replace the deprecated withPageAuth function with createPagesServerClient in a Next.js page's getServerSideProps. It demonstrates creating an authenticated Supabase client, checking for an active session, and redirecting if no user is found.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPagesServerClient, User } from '@supabase/auth-helpers-nextjs'\nimport { GetServerSidePropsContext } from 'next'\n\nexport default function Profile({ user }: { user: User }) {\n  return <pre>{JSON.stringify(user, null, 2)}</pre>\n}\n\nexport const getServerSideProps = async (ctx: GetServerSidePropsContext) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient(ctx)\n  // Check if we have a session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user)\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n\n  return {\n    props: {\n      initialSession: session,\n      user: session.user,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Hook Function in PL/pgSQL\nDESCRIPTION: PL/pgSQL function to implement a custom access token hook for adding user roles to JWT claims.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plpgsql\nstable\nas $$\n  declare\n    claims jsonb;\n    user_role public.app_role;\n  begin\n    -- Fetch the user role in the user_roles table\n    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;\n\n    claims := event->'claims';\n\n    if user_role is not null then\n      -- Set the claim\n      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));\n    else\n      claims := jsonb_set(claims, '{user_role}', 'null');\n    end if;\n\n    -- Update the 'claims' object in the original event\n    event := jsonb_set(event, '{claims}', claims);\n\n    -- Return the modified or original event\n    return event;\n  end;\n$$;\n\ngrant usage on schema public to supabase_auth_admin;\n\ngrant execute\n  on function public.custom_access_token_hook\n  to supabase_auth_admin;\n\nrevoke execute\n  on function public.custom_access_token_hook\n  from authenticated, anon, public;\n\ngrant all\n  on table public.user_roles\nto supabase_auth_admin;\n\nrevoke all\n  on table public.user_roles\n  from authenticated, anon, public;\n\ncreate policy \"Allow auth admin to read user roles\" ON public.user_roles\nas permissive for select\nto supabase_auth_admin\nusing (true)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase in Next.js\nDESCRIPTION: Creates a .env.local file to store the Supabase project URL and anonymous key required for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n```\n\n----------------------------------------\n\nTITLE: Creating a Route Handler with Edge Runtime in Next.js (TypeScript)\nDESCRIPTION: TypeScript implementation of a Next.js route handler running on the Edge runtime that inserts a todo in Supabase. It uses typed createRouteHandlerClient for type safety, configures the handler for edge runtime, and returns the inserted data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\n\nimport type { Database } from '@/lib/database.types'\n\nexport const runtime = 'edge'\nexport const dynamic = 'force-dynamic'\n\nexport async function POST(request: Request) {\n  const { title } = await request.json()\n  const cookieStore = cookies()\n\n  const supabase = createRouteHandlerClient<Database>({\n    cookies: () => cookieStore,\n  })\n\n  const { data } = await supabase.from('todos').insert({ title }).select()\n  return NextResponse.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Supabase Query With Filter\nDESCRIPTION: Example of an optimized Supabase query with explicit user_id filter for better performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = supabase\n  .from('table')\n  .select()\n  .eq('user_id', userId)\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Books Table in PostgreSQL\nDESCRIPTION: SQL script to create a 'books' table with sample data for demonstrating full text search functionality. The table includes columns for id, title, author, and description.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table books (\n  id serial primary key,\n  title text,\n  author text,\n  description text\n);\n\ninsert into books\n  (title, author, description)\nvalues\n  (\n    'The Poky Little Puppy',\n    'Janette Sebring Lowrey',\n    'Puppy is slower than other, bigger animals.'\n  ),\n  ('The Tale of Peter Rabbit', 'Beatrix Potter', 'Rabbit eats some vegetables.'),\n  ('Tootle', 'Gertrude Crampton', 'Little toy train has big dreams.'),\n  (\n    'Green Eggs and Ham',\n    'Dr. Seuss',\n    'Sam has changing food preferences and eats unusually colored food.'\n  ),\n  (\n    'Harry Potter and the Goblet of Fire',\n    'J.K. Rowling',\n    'Fourth year of school starts, big drama ensues.'\n  );\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and disable the pgvector extension in PostgreSQL. The extension is named 'vector' in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"vector\" extension.\ncreate extension vector\nwith\n  schema extensions;\n\n-- Example: disable the \"vector\" extension\ndrop\n  extension if exists vector;\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL RPC for Location Data Insertion\nDESCRIPTION: SQL function that validates user sessions and inserts location data into the locations table. Uses PostGIS st_point function to store geographical coordinates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-04-postgres-realtime-location-sharing-with-maplibre.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.location_insert(_timestamp bigint, _lat double precision, _long double precision, _user_id bigint)\nRETURNS void AS $$\ndeclare active_event_id uuid;\nbegin\n  select event_id into active_event_id from public.sessions where user_id = _user_id and status = 'ACTIVE'::session_status;\n\n  INSERT INTO public.locations(event_id, user_id, created_at, lat, long, location)\n  VALUES (active_event_id, _user_id, to_timestamp(_timestamp), _lat, _long, st_point(_long, _lat));\nend;\n$$ LANGUAGE plpgsql VOLATILE;\n```\n\n----------------------------------------\n\nTITLE: Direct SQL Query for Semantic Search\nDESCRIPTION: Example of directly calling the semantic search function using SQL\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom match_documents(\n  '[...]'::vector(512), -- pass the query embedding\n  0.78, -- chose an appropriate threshold for your data\n  10 -- choose the number of matches\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Component with Edge Runtime in Next.js (TypeScript)\nDESCRIPTION: TypeScript implementation of a Next.js server component running on the Edge runtime that fetches todos from Supabase. It uses typed createServerComponentClient for type safety, configures the component for edge runtime, and renders the fetched data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs'\n\nimport type { Database } from '@/lib/database.types'\n\nexport const runtime = 'edge'\nexport const dynamic = 'force-dynamic'\n\nexport default async function Page() {\n  const cookieStore = cookies()\n\n  const supabase = createServerComponentClient<Database>({\n    cookies: () => cookieStore,\n  })\n\n  const { data } = await supabase.from('todos').select()\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Match Page Sections Function in SQL for ChatGPT Retrieval Plugin\nDESCRIPTION: SQL function to query and find relevant information based on embedding similarity. This function is used to retrieve context for ChatGPT responses from the vector database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function match_page_sections(\n\tin_embedding vector(1536),\n\tin_match_count int default 3,\n\tin_document_id text default '%%',\n\tin_source_id text default '%%',\n\tin_source text default '%%',\n\tin_author text default '%%',\n\tin_start_date timestamptz default '-infinity',\n\tin_end_date timestamptz default 'infinity'\n)\nreturns table (\n\tid text,\n\tsource text,\n\tsource_id text,\n\tdocument_id text,\n\turl text,\n\tcreated_at timestamptz,\n\tauthor text,\n\tcontent text,\n\tembedding vector(1536),\n\tsimilarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_variable\nbegin\nreturn query\n\nselect\n\tdocuments.id,\n\tdocuments.source,\n\tdocuments.source_id,\n\tdocuments.document_id,\n\tdocuments.url,\n\tdocuments.created_at,\n\tdocuments.author,\n\tdocuments.content,\n\tdocuments.embedding,\n\t(documents.embedding <#> in_embedding) * -1 as similarity\nfrom\n\tdocuments\nwhere\n\tin_start_date <= documents.created_at and\n  documents.created_at <= in_end_date and\n  (documents.source_id like in_source_id or documents.source_id is null) and\n  (documents.source like in_source or documents.source is null) and\n  (documents.author like in_author or documents.author is null) and\n  (documents.document_id like in_document_id or documents.document_id is null)\norder by\n\tdocuments.embedding <#> in_embedding\nlimit\n\tin_match_count;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Usage Permissions\nDESCRIPTION: Grants usage permissions on the api schema to both anonymous and authenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/hardening-data-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ngrant usage on schema api to anon, authenticated;\n```\n\n----------------------------------------\n\nTITLE: Enabling RLS with JWT Authentication for REST API\nDESCRIPTION: Sets up Row Level Security on a document_sections table with a policy that uses Supabase's auth.uid() function to get the user ID from a JWT token. This approach works with the auto-generated REST API and external auth providers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- enable row level security\nalter table document_sections enable row level security;\n\n-- setup RLS for select operations\ncreate policy \"Users can query their own document sections\"\non document_sections for select to authenticated using (\n  document_id in (\n    select id\n    from documents\n    where (owner_id = (select auth.uid()))\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating PGMQ Queue for Embeddings\nDESCRIPTION: Creates a pgmq queue named 'embedding_jobs' to handle embedding generation requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect pgmq.create('embedding_jobs');\n```\n\n----------------------------------------\n\nTITLE: Resulting Claims in User's Identity (JSON)\nDESCRIPTION: This JSON snippet shows the resulting claims in the user's identity after successful attribute mapping from a SAML 2.0 assertion. The `email` is directly mapped, and custom attributes like `first_name` are placed within the `custom_claims` object. This represents the data stored in the database and JWT.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"email\\\": \\\"valid.email@supabase.io\\\",\n  \\\"custom_claims\\\": {\n    \\\"first_name\\\": \\\"Jane Doe\\\"\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Searchable Column with PostgreSQL\nDESCRIPTION: Creates a tsvector column 'fts' using PostgreSQL Generated Columns to store searchable index of title and description. Includes creating a GIN index for improved search performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nalter table\n  books\nadd column\n  fts tsvector generated always as (to_tsvector('english', description || ' ' || title)) stored;\n\ncreate index books_fts on books using gin (fts);\n\nselect id, fts\nfrom books;\n```\n\n----------------------------------------\n\nTITLE: Creating a Function for Sorting Restaurants by Distance\nDESCRIPTION: SQL function that returns restaurants sorted by distance from a given point. It uses the PostGIS <-> operator for nearest-neighbor sorting and returns geographic coordinates in human-readable format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function nearby_restaurants(lat float, long float)\nreturns table (id public.restaurants.id%TYPE, name public.restaurants.name%TYPE, lat float, long float, dist_meters float)\nset search_path = ''\nlanguage sql\nas $$\n  select id, name, gis.st_y(location::gis.geometry) as lat, gis.st_x(location::gis.geometry) as long, gis.st_distance(location, gis.st_point(long, lat)::gis.geography) as dist_meters\n  from public.restaurants\n  order by location operator(gis.<->) gis.st_point(long, lat)::gis.geography;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing MFA-Based RLS Policy\nDESCRIPTION: Creates a restrictive policy that only allows profile updates when multi-factor authentication level is set to aal2.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict updates.\"\non profiles\nas restrictive\nfor update\nto authenticated using (\n  (select auth.jwt()->>'aal') = 'aal2'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a RUM Index with Attached Column using rum_tsvector_addon_ops\nDESCRIPTION: Example of creating a table and RUM index with rum_tsvector_addon_ops, which allows attaching an additional column (timestamp in this case) to the index for combined text search and timestamp-based ordering.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tsts (id int, t tsvector, d timestamp);\nCREATE INDEX tsts_idx ON tsts USING rum (t rum_tsvector_addon_ops, d)\n    WITH (attach = 'd', to = 't');\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Collections with Vecs\nDESCRIPTION: Python code demonstrating vector queries using Vecs library with cosine similarity and metadata filtering\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# cosine similarity\ndocs.query(query_vector=[0.4,0.5,0.6], limit=5)\n\n# metadata filtering\ndocs.query(\n    query_vector=[0.4,0.5,0.6],\n    limit=5,\n    filters={\"year\": {\"$eq\": 2012}}, # metadata filters\n)\n```\n\n----------------------------------------\n\nTITLE: ZIP File Processing with Background Tasks and Ephemeral Storage in JSX\nDESCRIPTION: This code uses background tasks and ephemeral storage to process large ZIP files efficiently. It writes the uploaded ZIP to temporary storage, then processes it in a background task to avoid memory limitations when handling large archives.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-03-edge-functions-background-tasks-websockets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlobWriter, ZipReader, ZipReaderStream } from 'https://deno.land/x/zipjs/index.js'\n\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL'),\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')\n)\n\nlet numFilesUploaded = 0\n\nasync function processZipFile(uploadId, filepath) {\n  const file = await Deno.open(filepath, { read: true })\n  const zipReader = new ZipReader(file.readable)\n  const entries = await zipReader.getEntries()\n\n  await supabase.storage.createBucket(uploadId, {\n    public: false,\n  })\n\n  await Promise.all(\n    entries.map(async (entry) => {\n      // read file entry\n      const blobWriter = new BlobWriter()\n      const blob = await entry.getData(blobWriter)\n\n      if (entry.directory) {\n        return\n      }\n\n      // write file to Supabase Storage\n      await supabase.storage.from(uploadId).upload(entry.filename, blob, {})\n\n      numFilesUploaded += 1\n      console.log('uploaded', entry.filename)\n    })\n  )\n\n  await zipReader.close()\n}\n\n// you can add a `beforeunload` event listener to be notified\n// when Function Worker is about to terminate.\n// use this to do any logging, save states.\nglobalThis.addEventListener('beforeunload', (ev) => {\n  console.log('function about to terminate: ', ev.detail.reason)\n  console.log('number of files uploaded: ', numFilesUploaded)\n})\n\nasync function writeZipFile(filepath, stream) {\n  await Deno.writeFile(filepath, stream)\n}\n\nDeno.serve(async (req) => {\n  const uploadId = crypto.randomUUID()\n  await writeZipFile('/tmp/' + uploadId, req.body)\n\n  // process zip file in a background task\n  // calling EdgeRuntime.waitUntil() would ensure\n  // function worker wouldn't exit until the promise is completed.\n  EdgeRuntime.waitUntil(processZipFile(uploadId, '/tmp/' + uploadId))\n\n  return new Response(\n    JSON.stringify({\n      uploadId,\n    }),\n    {\n      headers: {\n        'content-type': 'application/json',\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Signing in with Email and Password using Supabase in JavaScript\nDESCRIPTION: This snippet demonstrates how to sign in a user with their email and password using the Supabase JavaScript client. It uses the signInWithPassword() method from the auth module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\nasync function signInWithEmail() {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email: 'valid.email@supabase.io',\n    password: 'example-password',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorize Function for RLS Policies\nDESCRIPTION: SQL function to authorize user permissions based on their role for use in Row Level Security policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.authorize(\n  requested_permission app_permission\n)\nreturns boolean as $$\ndeclare\n  bind_permissions int;\n  user_role public.app_role;\nbegin\n  -- Fetch user role once and store it to reduce number of calls\n  select (auth.jwt() ->> 'user_role')::public.app_role into user_role;\n\n  select count(*)\n  into bind_permissions\n  from public.role_permissions\n  where role_permissions.permission = requested_permission\n    and role_permissions.role = user_role;\n\n  return bind_permissions > 0;\nend;\n$$ language plpgsql stable security definer set search_path = '';\n```\n\n----------------------------------------\n\nTITLE: Simple POST Request Using the HTTP Extension\nDESCRIPTION: Makes a POST request to create a new resource on an external API. The example sends JSON data with a specified content type and returns the response status and content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/http.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  \"status\", \"content\"::jsonb\nfrom\n  http_post(\n    'https://jsonplaceholder.typicode.com/posts',\n    '{ \"title\": \"foo\", \"body\": \"bar\", \"userId\": 1 }',\n    'application/json'\n  );\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase stack with Homebrew\nDESCRIPTION: This command starts the local Supabase stack using the globally installed Supabase CLI. It initializes all required services for local development, such as the database, auth, and storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Supabase in Next.js\nDESCRIPTION: Creates a login page component with Supabase authentication, including sign-in and sign-up functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouter } from 'next/router'\nimport { useState } from 'react'\n\nimport { createClient } from '@/utils/supabase/component'\n\nexport default function LoginPage() {\n  const router = useRouter()\n  const supabase = createClient()\n\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  async function logIn() {\n    const { error } = await supabase.auth.signInWithPassword({ email, password })\n    if (error) {\n      console.error(error)\n    }\n    router.push('/')\n  }\n\n  async function signUp() {\n    const { error } = await supabase.auth.signUp({ email, password })\n    if (error) {\n      console.error(error)\n    }\n    router.push('/')\n  }\n\n  return (\n    <main>\n      <form>\n        <label htmlFor=\"email\">Email:</label>\n        <input id=\"email\" type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n        <label htmlFor=\"password\">Password:</label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button type=\"button\" onClick={logIn}>\n          Log in\n        </button>\n        <button type=\"button\" onClick={signUp}>\n          Sign up\n        </button>\n      </form>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vector Data with Supabase JS Client\nDESCRIPTION: Demonstrates how to query vector data from the frontend using the Supabase JavaScript client library. This allows filtering and selecting specific fields from the vector collection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('docs')\n  .select('id, embedding, metadata')\n  .eq('url', '/hello-world')\n```\n\n----------------------------------------\n\nTITLE: Sending State in Dart\nDESCRIPTION: This snippet shows how to send user status in Dart after subscribing to a channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal roomOne = supabase.channel('room_01');\n\nfinal userStatus = {\n  'user': 'user-1',\n  'online_at': DateTime.now().toIso8601String(),\n};\n\nroomOne.subscribe((status, error) async {\n  if (status != RealtimeSubscribeStatus.subscribed) return;\n\n  final presenceTrackStatus = await roomOne.track(userStatus);\n  print(presenceTrackStatus);\n});\n```\n\n----------------------------------------\n\nTITLE: Equal To Filter Implementation\nDESCRIPTION: Demonstrates how to listen for database changes when a column equals a specific value using the 'eq' filter. Uses Postgres's = operator to filter messages table updates where body equals 'hey'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'UPDATE',\n      schema: 'public',\n      table: 'messages',\n      filter: 'body=eq.hey',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.update,\n        schema: 'public',\n        table: 'messages',\n        filter: PostgresChangeFilter(\n          type: PostgresChangeFilterType.eq,\n          column: 'body',\n          value: 'hey',\n        ),\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  UpdateAction.self,\n  schema: \"public\",\n  table: \"messages\",\n  filter: .eq(\"body\", value: \"hey\")\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"messages\"\n    filter = \"body=eq.hey\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"UPDATE\",\n  schema=\"public\",\n  table=\"messages\",\n  filter=\"body=eq.hey\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI GPT Completion in TypeScript Edge Function\nDESCRIPTION: This TypeScript code implements an edge function that uses OpenAI's API to generate GPT completions. It takes a user query via a POST request and returns the AI-generated response.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from 'https://deno.land/x/openai@v4.24.0/mod.ts'\n\nDeno.serve(async (req) => {\n  const { query } = await req.json()\n  const apiKey = Deno.env.get('OPENAI_API_KEY')\n  const openai = new OpenAI({\n    apiKey: apiKey,\n  })\n\n  // Documentation here: https://github.com/openai/openai-node\n  const chatCompletion = await openai.chat.completions.create({\n    messages: [{ role: 'user', content: query }],\n    // Choose model from here: https://platform.openai.com/docs/models\n    model: 'gpt-3.5-turbo',\n    stream: false,\n  })\n\n  const reply = chatCompletion.choices[0].message.content\n\n  return new Response(reply, {\n    headers: { 'Content-Type': 'text/plain' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for Inner Product in SQL\nDESCRIPTION: SQL command to create an IVFFlat index using the vector_ip_ops operator class for inner product distance. The index is created on the 'column_name' of the 'items' table with 100 lists.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using ivfflat (column_name vector_ip_ops) with (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Set up Supabase environment variables\nDESCRIPTION: This code snippet shows how to define Supabase URL and Anon Key in the `.env.local` file. These variables are necessary for initializing the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nPUBLIC_SUPABASE_URL=<your_supabase_project_url>\nPUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Server Component with Supabase in Next.js (TypeScript)\nDESCRIPTION: TypeScript implementation of a Next.js static server component that fetches data from Supabase at build time. It uses the typed createClient from supabase-js for type safety, and renders the fetched todos data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nimport type { Database } from '@/lib/database.types'\n\nexport default async function Page() {\n  const supabase = createClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n\n  const { data } = await supabase.from('todos').select()\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase SSR Client in Remix Loader\nDESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in a Remix loader function, handling cookie management for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LoaderFunctionArgs } from '@remix-run/node'\nimport { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const headers = new Headers()\n\n  const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {\n    cookies: {\n      getAll() {\n        return parseCookieHeader(request.headers.get('Cookie') ?? '')\n      },\n      setAll(cookiesToSet) {\n        cookiesToSet.forEach(({ name, value, options }) =>\n          headers.append('Set-Cookie', serializeCookieHeader(name, value, options))\n        )\n      },\n    },\n  })\n\n  return new Response('...', {\n    headers,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Ollama Integration for LLM Inference\nDESCRIPTION: Implements a streaming interface for large language model inference using Ollama with the Mistral model. Handles prompt processing and stream response.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\nconst session = new Supabase.ai.Session('mistral')\n\nDeno.serve(async (req: Request) => {\n  const params = new URL(req.url).searchParams\n  const prompt = params.get('prompt') ?? ''\n\n  const output = await session.run(prompt, { stream: true })\n\n  const headers = new Headers({\n    'Content-Type': 'text/event-stream',\n    Connection: 'keep-alive',\n  })\n\n  const stream = new ReadableStream({\n    async start(controller) {\n      const encoder = new TextEncoder()\n\n      try {\n        for await (const chunk of output) {\n          controller.enqueue(encoder.encode(chunk.response ?? ''))\n        }\n      } catch (err) {\n        console.error('Stream error:', err)\n      } finally {\n        controller.close()\n      }\n    },\n  })\n\n  return new Response(stream, {\n    headers,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Spaces in Search Queries\nDESCRIPTION: SQL example showing how to handle multi-word search terms using + as space placeholder\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nselect * from search_books_by_title_prefix('Little+Puppy');\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Schema for User Profiles with Row Level Security\nDESCRIPTION: SQL script that creates a profiles table with row level security policies for user management. The script sets up table constraints, access policies, realtime publication, and storage bucket for avatars.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/solid-user-management/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for Public Profiles\ncreate table\n\tprofiles (\n\t\tid uuid references auth.users not null,\n\t\tupdated_at timestamp\n\t\twith\n\t\t\ttime zone,\n\t\t\tusername text unique,\n\t\t\tavatar_url text,\n\t\t\twebsite text,\n\t\t\tprimary key (id),\n\t\t\tunique (username),\n\t\t\tconstraint username_length check (char_length(username) >= 3)\n\t);\n\nalter table\n\tprofiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles for\nselect\n\tusing (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles for insert\nwith\n\tcheck ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles for\nupdate\n\tusing ((select auth.uid()) = id);\n\n-- Set up Realtime!\nbegin;\n\ndrop\n\tpublication if exists supabase_realtime;\n\ncreate publication supabase_realtime;\n\ncommit;\n\nalter\n\tpublication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into\n\tstorage.buckets (id, name)\nvalues\n\t('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects for\nselect\n\tusing (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects for insert\nwith\n\tcheck (bucket_id = 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP using Python\nDESCRIPTION: Showcases the OTP verification to create a user session using Python in Supabase. Inputs necessary are user's email and OTP token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nresponse = supabase.auth.verify_otp({\n  'email': email,\n  'token': '123456',\n  'type': 'email',\n})\n```\n\n----------------------------------------\n\nTITLE: Initiating Password Reset in JavaScript with Supabase\nDESCRIPTION: JavaScript function that uses Supabase client to initiate a password reset flow by sending a reset password email to the user's email address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function resetPassword() {\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email)\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User JavaScript\nDESCRIPTION: The JavaScript snippet demonstrates how to sign out a user using the Supabase client library. It shows the basic sign-out method and how to invoke it from the client-side, effectively ending the active session. Requires '@supabase/supabase-js' package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\\n\\n// ---cut---\\nasync function signOut() {\\n  const { error } = await supabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MFA Enrollment Component in React\nDESCRIPTION: A React component that handles the MFA enrollment flow using Supabase Auth. It manages QR code display, verification code input, and the challenge-verify process. The component uses useState for state management and useEffect for initialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/totp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * EnrollMFA shows a simple enrollment dialog. When shown on screen it calls\n * the `enroll` API. Each time a user clicks the Enable button it calls the\n * `challenge` and `verify` APIs to check if the code provided by the user is\n * valid.\n * When enrollment is successful, it calls `onEnrolled`. When the user clicks\n * Cancel the `onCancelled` callback is called.\n */\nexport function EnrollMFA({\n  onEnrolled,\n  onCancelled,\n}: {\n  onEnrolled: () => void\n  onCancelled: () => void\n}) {\n  const [factorId, setFactorId] = useState('')\n  const [qr, setQR] = useState('') // holds the QR code image SVG\n  const [verifyCode, setVerifyCode] = useState('') // contains the code entered by the user\n  const [error, setError] = useState('') // holds an error message\n\n  const onEnableClicked = () => {\n    setError('')\n    ;(async () => {\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n      if (challenge.error) {\n        setError(challenge.error.message)\n        throw challenge.error\n      }\n\n      const challengeId = challenge.data.id\n\n      const verify = await supabase.auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      })\n      if (verify.error) {\n        setError(verify.error.message)\n        throw verify.error\n      }\n\n      onEnrolled()\n    })()\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      const { data, error } = await supabase.auth.mfa.enroll({\n        factorType: 'totp',\n      })\n      if (error) {\n        throw error\n      }\n\n      setFactorId(data.id)\n\n      // Supabase Auth returns an SVG QR code which you can convert into a data\n      // URL that you can place in an <img> tag.\n      setQR(data.totp.qr_code)\n    })()\n  }, [])\n\n  return (\n    <>\n      {error && <div className=\"error\">{error}</div>}\n      <img src={qr} />\n      <input\n        type=\"text\"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      <input type=\"button\" value=\"Enable\" onClick={onEnableClicked} />\n      <input type=\"button\" value=\"Cancel\" onClick={onCancelled} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component with Authentication Logic\nDESCRIPTION: This TypeScript code implements the login page component with reactive forms for authentication. It includes user subscription, form validation, and handling the login process through the AuthService.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from './../../services/auth.service'\nimport { Component } from '@angular/core'\nimport { FormBuilder, Validators } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { LoadingController, AlertController } from '@ionic/angular'\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage {\n  credentials = this.fb.nonNullable.group({\n    email: ['', Validators.required],\n    password: ['', Validators.required],\n  })\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private loadingController: LoadingController,\n    private alertController: AlertController,\n    private router: Router\n  ) {\n    this.authService.getCurrentUser().subscribe((user) => {\n      if (user) {\n        this.router.navigateByUrl('/groups', { replaceUrl: true })\n      }\n    })\n  }\n\n  get email() {\n    return this.credentials.controls.email\n  }\n\n  get password() {\n    return this.credentials.controls.password\n  }\n\n  async login() {\n    const loading = await this.loadingController.create()\n    await loading.present()\n\n    this.authService.signIn(this.credentials.getRawValue()).then(async (data) => {\n      await loading.dismiss()\n\n      if (data.error) {\n        this.showAlert('Login failed', data.error.message)\n      }\n    })\n  }\n\n  async showAlert(title, msg) {\n    const alert = await this.alertController.create({\n      header: title,\n      message: msg,\n      buttons: ['OK'],\n    })\n    await alert.present()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Functions for Edge Function Integration\nDESCRIPTION: Implementation of utility functions for managing project URL, invoking edge functions, and handling column updates in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate schema util;\n\ncreate function util.project_url()\nreturns text\nlanguage plpgsql\nsecurity definer\nas $$\ndeclare\n  secret_value text;\nbegin\n  select decrypted_secret into secret_value from vault.decrypted_secrets where name = 'project_url';\n  return secret_value;\nend;\n$$;\n\ncreate or replace function util.invoke_edge_function(\n  name text,\n  body jsonb,\n  timeout_milliseconds int = 5 * 60 * 1000\n)\nreturns void\nlanguage plpgsql\nas $$\ndeclare\n  headers_raw text;\n  auth_header text;\nbegin\n  headers_raw := current_setting('request.headers', true);\n\n  auth_header := case\n    when headers_raw is not null then\n      (headers_raw::json->>'authorization')\n    else\n      null\n  end;\n\n  perform net.http_post(\n    url => util.project_url() || '/functions/v1/' || name,\n    headers => jsonb_build_object(\n      'Content-Type', 'application/json',\n      'Authorization', auth_header\n    ),\n    body => body,\n    timeout_milliseconds => timeout_milliseconds\n  );\nend;\n$$;\n\ncreate or replace function util.clear_column()\nreturns trigger\nlanguage plpgsql as $$\ndeclare\n    clear_column text := TG_ARGV[0];\nbegin\n    NEW := NEW #= hstore(clear_column, NULL);\n    return NEW;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: RLS Policy for Organization Admin Access in SQL\nDESCRIPTION: This SQL snippet defines a Row Level Security policy that allows only organization admins to insert data into a table, using Clerk session token claims.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Only organization admins can insert in table\"\n  on table_name\n  for insert\n  to authenticated\n  with check (\n    ((select auth.jwt()->>'org_role') = 'org:admin')\n      and\n    (organization_id = (select auth.jwt()->>'org_id'))\n  );\n```\n\n----------------------------------------\n\nTITLE: Revoking and Granting Column-Level Privileges in PostgreSQL\nDESCRIPTION: SQL commands to revoke table-level UPDATE privilege and grant column-level UPDATE privilege on specific columns for the 'authenticated' role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nrevoke\nupdate\n  on table public.posts\nfrom\n  authenticated;\n\ngrant\nupdate\n  (title, content) on table public.posts to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Similarity Search Function in PostgreSQL\nDESCRIPTION: This SQL function creates a Postgres function for similarity searching of image embeddings. It takes a query embedding vector, a similarity threshold, and a maximum result count as parameters. The function uses pgvector's cosine similarity operator (<=>), orders by similarity score, and returns matches above the specified threshold.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate function match_images (\n    query_embedding vector(512),\n    match_threshold float,\n    match_count int\n)\nreturns setof images\nlanguage sql stable\nas $$\n\tselect *, 1 - (image_embedding <=> query_embedding) as similarity\n\tfrom images\n\twhere 1 - (image_embedding <=> query_embedding) > match_threshold\n\torder by similarity desc\n\tlimit match_count;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Storing CLIP Embeddings in Supabase Vector Database\nDESCRIPTION: Python code for storing CLIP embeddings in a Supabase vector database using the vecs package. It creates or accesses a collection of vectors and upserts the embeddings with filenames as identifiers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://postgres:[password]@[host]:[port]/[database]\"\n\nvx = vecs.create_client(DB_CONNECTION)\n\n# create a collection of vectors with 3 dimensions\nimages = vx.get_or_create_collection(name=\"image_vectors\", dimension=512)\n\nfor result in results:\n    image = result[\"filename\"]\n    embeddings = result[\"embeddings\"][0]\n\n    # insert a vector into the collection\n    images.upsert(\n        records=[\n            (\n                image,\n                embeddings,\n                {} # metadata\n            )\n        ]\n    )\n\nimages.create_index()\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with OpenAI in TypeScript Edge Function\nDESCRIPTION: This TypeScript function shows the implementation of embedding generation using OpenAI's API. It sends the text to OpenAI's embedding model and returns the resulting vector, which will be stored in the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Generates an embedding for the given text.\n */\nasync function generateEmbedding(text: string) {\n  const response = await openai.embeddings.create({\n    model: 'text-embedding-3-small',\n    input: text,\n  })\n  const [data] = response.data\n  if (!data) {\n    throw new Error('failed to generate embedding')\n  }\n  return data.embedding\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Pre-Request Security Function\nDESCRIPTION: SQL command that configures a custom security function to run before each Data API request by setting the pgrst.db_pre_request parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nalter role authenticator\n  set pgrst.db_pre_request = 'public.check_request';\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Users RLS Policy\nDESCRIPTION: SQL policy to allow access to the profiles table for authenticated users only.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow access to authenticated users\" on profiles to authenticated for\nselect\n  using (true);\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request Using the HTTP Extension\nDESCRIPTION: Makes a GET request to retrieve a JSON object from an external API and casts the content to JSONB for easier manipulation within PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/http.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  \"status\", \"content\"::jsonb\nfrom\n  http_get('https://jsonplaceholder.typicode.com/todos/1');\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships via REST URL\nDESCRIPTION: REST URL example showing how to query teams with their related users directly using the Supabase REST API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nGET https://[REF].supabase.co/rest/v1/teams?select=id,team_name,users(id,name)\n```\n\n----------------------------------------\n\nTITLE: Creating a Function with Error Handling\nDESCRIPTION: A PostgreSQL function that safely performs division with error handling to prevent division by zero errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function my_schema.safe_divide(numerator numeric, denominator numeric)\nreturns numeric\nlanguage plpgsql\nsecurity invoker\nset search_path = ''\nas $$\nbegin\n  if denominator = 0 then\n    raise exception 'Division by zero is not allowed';\n  end if;\n\n  return numerator / denominator;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: WebSocket Relay to OpenAI Realtime API with Authentication in JSX\nDESCRIPTION: This code creates an authenticated WebSocket relay to OpenAI's Realtime API. It uses Supabase Auth to authenticate users via JWT, establishes a WebSocket connection with the client, and forwards messages to and from OpenAI's API while protecting the API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-03-edge-functions-background-tasks-websockets.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL'),\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')\n)\nconst OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')\n\nDeno.serve(async (req) => {\n  const upgrade = req.headers.get('upgrade') || ''\n\n  if (upgrade.toLowerCase() != 'websocket') {\n    return new Response(\"request isn't trying to upgrade to websocket.\")\n  }\n\n  // WebSocket browser clients does not support sending custom headers.\n  // We have to use the URL query params to provide user's JWT.\n  // Please be aware query params may be logged in some logging systems.\n  const url = new URL(req.url)\n  const jwt = url.searchParams.get('jwt')\n  if (!jwt) {\n    console.error('Auth token not provided')\n    return new Response('Auth token not provided', { status: 403 })\n  }\n  const { error, data } = await supabase.auth.getUser(jwt)\n  if (error) {\n    console.error(error)\n    return new Response('Invalid token provided', { status: 403 })\n  }\n  if (!data.user) {\n    console.error('user is not authenticated')\n    return new Response('User is not authenticated', { status: 403 })\n  }\n\n  const { socket, response } = Deno.upgradeWebSocket(req)\n\n  socket.onopen = () => {\n    // initiate an outbound WebSocket connection to OpenAI\n    const url = 'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01'\n\n    // openai-insecure-api-key isn't a problem since this code runs in an Edge Function\n    const openaiWS = new WebSocket(url, [\n      'realtime',\n      `openai-insecure-api-key.${OPENAI_API_KEY}`,\n      'openai-beta.realtime-v1',\n    ])\n\n    openaiWS.onopen = () => {\n      console.log('Connected to OpenAI server.')\n\n      socket.onmessage = (e) => {\n        console.log('socket message:', e.data)\n        // only send the message if openAI ws is open\n        if (openaiWS.readyState === 1) {\n          openaiWS.send(e.data)\n        } else {\n          socket.send(\n            JSON.stringify({\n              type: 'error',\n              msg: 'openAI connection not ready',\n            })\n          )\n        }\n      }\n    }\n\n    openaiWS.onmessage = (e) => {\n      console.log(e.data)\n      socket.send(e.data)\n    }\n\n    openaiWS.onerror = (e) => console.log('OpenAI error: ', e.message)\n    openaiWS.onclose = (e) => console.log('OpenAI session closed')\n  }\n\n  socket.onerror = (e) => console.log('socket errored:', e.message)\n  socket.onclose = () => console.log('socket closed')\n\n  return response // 101 (Switching Protocols)\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP to Create Session in JavaScript\nDESCRIPTION: Details verifying OTP for login session creation using JavaScript client in Supabase. Essential inputs are user's email and the OTP code along with the type 'email'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('url', 'anonKey')\n\n// ---cut---\nconst {\n  data: { session },\n  error,\n} = await supabase.auth.verifyOtp({\n  email: 'email@example.com',\n  token: '123456',\n  type: 'email',\n})\n```\n\n----------------------------------------\n\nTITLE: Testing PostgreSQL Table Existence\nDESCRIPTION: Basic pgTAP test to verify the existence of a table in the database. Uses the has_table() function within a transaction block.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nselect plan( 1 );\n\nselect has_table( 'profiles' );\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Setting Replica Identity for Receiving Old Records in Supabase\nDESCRIPTION: SQL command to set replica identity to 'full' on a table, which enables receiving old record values when records are updated or deleted. For DELETE operations with RLS enabled, only primary keys will be included in the old record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nalter table\n  messages replica identity full;\n```\n\n----------------------------------------\n\nTITLE: Revoking Function Execution Privileges\nDESCRIPTION: Examples of revoking function execution permissions from specific roles and public access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nrevoke execute on function public.hello_world from public;\nrevoke execute on function public.hello_world from anon;\n```\n\n----------------------------------------\n\nTITLE: Creating INSERT Policy for Profiles\nDESCRIPTION: Example of creating an INSERT policy that allows authenticated users to create their own profiles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- 1. Create table\ncreate table profiles (\n  id uuid primary key,\n  user_id uuid references auth.users,\n  avatar_url text\n);\n\n-- 2. Enable RLS\nalter table profiles enable row level security;\n\n-- 3. Create Policy\ncreate policy \"Users can create a profile.\"\non profiles for insert\nto authenticated                          -- the Postgres Role (recommended)\nwith check ( (select auth.uid()) = user_id );      -- the actual Policy\n```\n\n----------------------------------------\n\nTITLE: React Component for MFA Factor Management\nDESCRIPTION: A React component that displays enrolled MFA factors and provides functionality to unenroll them. The component fetches factors on mount and renders them in a table with unenroll capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * UnenrollMFA shows a simple table with the list of factors together with a button to unenroll.\n * When a user types in the factorId of the factor that they wish to unenroll and clicks unenroll\n * the corresponding factor will be unenrolled.\n */\nexport function UnenrollMFA() {\n  const [factorId, setFactorId] = useState('')\n  const [factors, setFactors] = useState([])\n  const [error, setError] = useState('') // holds an error message\n\n  useEffect(() => {\n    ;(async () => {\n      const { data, error } = await supabase.auth.mfa.listFactors()\n      if (error) {\n        throw error\n      }\n\n      setFactors([...data.totp, ...data.phone])\n    })()\n  }, [])\n\n  return (\n    <>\n      {error && <div className=\"error\">{error}</div>}\n      <tbody>\n        <tr>\n          <td>Factor ID</td>\n          <td>Friendly Name</td>\n          <td>Factor Status</td>\n          <td>Phone Number</td>\n        </tr>\n        {factors.map((factor) => (\n          <tr>\n            <td>{factor.id}</td>\n            <td>{factor.friendly_name}</td>\n            <td>{factor.factor_type}</td>\n            <td>{factor.status}</td>\n            <td>{factor.phone}</td>\n          </tr>\n        ))}\n      </tbody>\n      <input type=\"text\" value={verifyCode} onChange={(e) => setFactorId(e.target.value.trim())} />\n      <button onClick={() => supabase.auth.mfa.unenroll({ factorId })}>Unenroll</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Similar Images with CLIP Embeddings in Supabase\nDESCRIPTION: Python code for semantic image search using CLIP text embeddings. It generates a text embedding for a search term and queries the vector database to find the most similar image.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ninfer_clip_payload = {\n    \"text\": \"cat\",\n}\n\nres = requests.post(\n    f\"{SERVER_URL}/clip/embed_text?api_key={API_KEY}\",\n    json=infer_clip_payload,\n)\n\nembeddings = res.json()['embeddings']\n\nresult = images.query(\n    data=embeddings[0],\n    limit=1\n)\n\nprint(result[0])\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Route Handler in TypeScript\nDESCRIPTION: This TypeScript code provides an example of setting up a server-side route handler for user logout in a Next.js application with Supabase. By calling signOut on a typed Supabase client, it signs out the user and subsequently redirects them to a login page. Required dependencies are @supabase/auth-helpers-nextjs and next/headers, using TypeScript type support for enhanced safety.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nimport type { Database } from '@/lib/database.types'\n\nexport async function POST(request: Request) {\n  const requestUrl = new URL(request.url)\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })\n\n  await supabase.auth.signOut()\n\n  return NextResponse.redirect(`${requestUrl.origin}/login`, {\n    status: 301,\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Database Webhook Trigger in SQL\nDESCRIPTION: SQL command to create a database trigger that sends webhook requests on table inserts. Uses the supabase_functions.http_request function to make POST requests to a specified endpoint.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/webhooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger \"my_webhook\" after insert\non \"public\".\"my_table\" for each row\nexecute function \"supabase_functions\".\"http_request\"(\n  'http://host.docker.internal:3000',\n  'POST',\n  '{\"Content-Type\":\"application/json\"}',\n  '{}',\n  '1000'\n);\n```\n\n----------------------------------------\n\nTITLE: Recreating a Publication in SQL Transaction\nDESCRIPTION: Safely recreates a publication within a transaction to ensure atomicity. The publication is first dropped if it exists, then recreated without enabling it for any tables initially.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\n  -- remove the realtime publication\n  drop publication if exists publication_name;\n\n  -- re-create the publication but don't enable it for any tables\n  create publication publication_name;\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Creating Signed URL for Private Bucket File\nDESCRIPTION: Shows how to generate a temporary signed URL for a file in a private bucket, allowing time-limited access without permanent public exposure\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/fundamentals.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create signed URL for limited-time access\nconst { data, error } = await supabase.storage\n  .from('private-bucket')\n  .createSignedUrl('path/to/file', 60) // URL valid for 60 seconds\n```\n\n----------------------------------------\n\nTITLE: Optimized Security Definer Function Implementation\nDESCRIPTION: Implementation of a security definer function that improves performance by bypassing RLS checks when validating user roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ncreate function private.has_good_role()\nreturns boolean\nlanguage plpgsql\nsecurity definer -- will run as the creator\nas $$\nbegin\n  return exists (\n    select 1 from roles_table\n    where (select auth.uid()) = user_id and role = 'good_role'\n  );\nend;\n$$;\n\n-- Update our policy to use this function:\ncreate policy \"rls_test_select\"\non test_table\nto authenticated\nusing ( private.has_good_role() );\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Search Edge Function with OpenAI and Supabase\nDESCRIPTION: TypeScript/JavaScript code for implementing a Deno Edge Function that generates embeddings using OpenAI and executes hybrid search using Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\nimport OpenAI from 'npm:openai'\n\nconst supabaseUrl = Deno.env.get('SUPABASE_URL')!\nconst supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\nconst openaiApiKey = Deno.env.get('OPENAI_API_KEY')!\n\nDeno.serve(async (req) => {\n  // Grab the user's query from the JSON payload\n  const { query } = await req.json()\n\n  // Instantiate OpenAI client\n  const openai = new OpenAI({ apiKey: openaiApiKey })\n\n  // Generate a one-time embedding for the user's query\n  const embeddingResponse = await openai.embeddings.create({\n    model: 'text-embedding-3-large',\n    input: query,\n    dimensions: 512,\n  })\n\n  const [{ embedding }] = embeddingResponse.data\n\n  // Instantiate the Supabase client\n  // (replace service role key with user's JWT if using Supabase auth and RLS)\n  const supabase = createClient(supabaseUrl, supabaseServiceRoleKey)\n\n  // Call hybrid_search Postgres function via RPC\n  const { data: documents } = await supabase.rpc('hybrid_search', {\n    query_text: query,\n    query_embedding: embedding,\n    match_count: 10,\n  })\n\n  return new Response(JSON.stringify(documents), {\n    headers: { 'Content-Type': 'application/json' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase SSR Client in Express\nDESCRIPTION: Sets up a Supabase client for server-side rendering in an Express application, handling cookie management for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createServerClient, parseCookieHeader, serializeCookieHeader } = require('@supabase/ssr')\n\nexports.createClient = (context) => {\n  return createServerClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY, {\n    cookies: {\n      getAll() {\n        return parseCookieHeader(context.req.headers.cookie ?? '')\n      },\n      setAll(cookiesToSet) {\n        cookiesToSet.forEach(({ name, value, options }) =>\n          context.res.appendHeader('Set-Cookie', serializeCookieHeader(name, value, options))\n        )\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in React Native\nDESCRIPTION: TypeScript code for initializing the Supabase client with AsyncStorage integration for session management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport 'react-native-url-polyfill/auto'\n\nimport { createClient } from '@supabase/supabase-js'\n\nconst url = process.env.EXPO_PUBLIC_SUPABASE_URL\nconst key = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY\n\n// Initialize the Supabase client\nexport const supabase = createClient(url, key, {\n  auth: {\n    storage: AsyncStorage,\n    detectSessionInUrl: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic B-Tree Index in PostgreSQL\nDESCRIPTION: Creates a B-Tree index on the age column of the persons table. This improves query performance when filtering by age by allowing PostgreSQL to find matching rows without scanning the entire table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_persons_age on persons (age);\n```\n\n----------------------------------------\n\nTITLE: Error Page Display in Next.js\nDESCRIPTION: This snippet renders a client-side error page with a simple message. Designed for use when redirections redirect users due to authentication errors. The page does not require any specific dependencies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nexport default function ErrorPage() {\n  return <p>Sorry, something went wrong</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bypass RLS Privilege\nDESCRIPTION: Alters a database role to bypass Row Level Security, useful for system-level access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nalter role \"role_name\" with bypassrls;\n```\n\n----------------------------------------\n\nTITLE: Authorized Channel Access Example\nDESCRIPTION: TypeScript example demonstrating successful connection to a private channel with an authenticated user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// With an authenticated user\nsupabase.realtime.setAuth(token)\n\nsupabase.realtime\n  .channel('locked', { config: { private: true } })\n  .subscribe((status: string, err: any) => {\n    if (status === 'SUBSCRIBED') {\n      console.log('Connected!')\n    } else {\n      console.error(err.message)\n    }\n  })\n\n// Outputs the following code:\n// \"Connected!\"\n```\n\n----------------------------------------\n\nTITLE: Sending Single Message\nDESCRIPTION: Sends a single JSON message to a specified queue with optional delay.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.send('my_queue', '{\"hello\": \"world\"}');\n```\n\n----------------------------------------\n\nTITLE: Creating Document Tables with Vector Storage in PostgreSQL\nDESCRIPTION: Creates tables for storing documents and their vector embeddings with basic ownership structure. Includes a documents table for metadata and document_sections table for content chunks with embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id bigint primary key generated always as identity,\n  name text not null,\n  owner_id uuid not null references auth.users (id) default auth.uid(),\n  created_at timestamp with time zone not null default now()\n);\n\ncreate table document_sections (\n  id bigint primary key generated always as identity,\n  document_id bigint not null references documents (id),\n  content text not null,\n  embedding vector (384)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddings Table with pgvector Extension in SQL\nDESCRIPTION: SQL migration that creates a vector extension, defines an embeddings table with a vector column, enables row level security, and adds an HNSW index for efficient vector similarity searches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists vector with schema extensions;\n\ncreate table embeddings (\n  id bigint primary key generated always as identity,\n  content text not null,\n  embedding vector (384)\n);\nalter table embeddings enable row level security;\n\ncreate index on embeddings using hnsw (embedding vector_ip_ops);\n```\n\n----------------------------------------\n\nTITLE: Creating an Index on Embeddings Column in Supabase\nDESCRIPTION: SQL command to create an HNSW index on the 'embedding' column in the 'documents' table to optimize vector similarity searches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on documents\nusing hnsw (embedding vector_ip_ops)\nwith (lists = 10);\n```\n\n----------------------------------------\n\nTITLE: Querying Postgres Vector Function from the Browser with supabase-js\nDESCRIPTION: This JavaScript snippet shows how to call a Postgres vector similarity search function directly from the browser using the supabase-js client. It passes the query embedding, match threshold, and count parameters and receives matching image records sorted by similarity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet { data: images, error } = await supabase.rpc('match_images', {\n  query_embedding,\n  match_threshold,\n  match_count,\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Multiple Changes in JavaScript with Supabase Realtime\nDESCRIPTION: Creates a channel that listens to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: '*',\n      schema: 'public',\n      table: 'messages',\n    },\n    (payload) => console.log(payload)\n  )\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'users',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Creating a Traditional Reservations Table with Separate Date Columns\nDESCRIPTION: This SQL snippet creates a table using separate columns for start and end times, demonstrating the traditional approach to storing time-based data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table reservations (\n  id serial primary key,\n  title text,\n  start_at timestamptz,\n  end_at timestamptz\n);\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Columns in PostgreSQL\nDESCRIPTION: SQL query to search through multiple columns by concatenating them and using tsvector/tsquery for full text search\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description || ' ' || title)\n  @@ to_tsquery('little');\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Auth Dependencies\nDESCRIPTION: Command to install required Supabase authentication packages for Next.js integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/auth-helpers-nextjs @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Server Supabase Client\nDESCRIPTION: Configures a Supabase server client in Next.js with cookie management for server-side rendering and authentication\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {}\n        },\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating OpenAI API in Edge Function\nDESCRIPTION: This code snippet shows how to use the OpenAI API within an Edge Function. It sets up a Deno server, initializes an OpenAI client with an API key, and creates a chat completion using the GPT-3.5-turbo model.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-12-edge-functions-faster-smaller.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport OpenAI from 'npm:openai@4.57.3'\n\nconst client = new OpenAI({\n  apiKey: Deno.env.get('OPEN_AI_KEY'),\n})\n\nDeno.serve(async (req) => {\n  const { query } = await req.json()\n\n  const chatCompletion = await client.chat.completions.create({\n    messages: [{ role: 'user', content: 'Say this is a test' }],\n    model: 'gpt-3.5-turbo',\n  })\n\n  return new Response(chatCompletion)\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase stack with yarn\nDESCRIPTION: This command starts the local Supabase stack using yarn. It initializes all required services for local development, such as the database, auth, and storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn supabase start\n```\n\n----------------------------------------\n\nTITLE: Implementing Register Page in Flutter with Supabase Authentication\nDESCRIPTION: This code creates a registration page with email, password, and username fields. It uses Supabase for user authentication and includes form validation and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:my_chat_app/pages/chat_page.dart';\nimport 'package:my_chat_app/pages/login_page.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage({Key? key, required this.isRegistering}) : super(key: key);\n\n  static Route<void> route({bool isRegistering = false}) {\n    return MaterialPageRoute(\n      builder: (context) => RegisterPage(isRegistering: isRegistering),\n    );\n  }\n\n  final bool isRegistering;\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final bool _isLoading = false;\n\n  final _formKey = GlobalKey<FormState>();\n\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n  final _usernameController = TextEditingController();\n\n  Future<void> _signUp() async {\n    final isValid = _formKey.currentState!.validate();\n    if (!isValid) {\n      return;\n    }\n    final email = _emailController.text;\n    final password = _passwordController.text;\n    final username = _usernameController.text;\n    try {\n      await supabase.auth.signUp(\n          email: email, password: password, data: {'username': username});\n      Navigator.of(context)\n          .pushAndRemoveUntil(ChatPage.route(), (route) => false);\n    } on AuthException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: unexpectedErrorMessage);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Register'),\n      ),\n      body: Form(\n        key: _formKey,\n        child: ListView(\n          padding: formPadding,\n          children: [\n            TextFormField(\n              controller: _emailController,\n              decoration: const InputDecoration(\n                label: Text('Email'),\n              ),\n              validator: (val) {\n                if (val == null || val.isEmpty) {\n                  return 'Required';\n                }\n                return null;\n              },\n              keyboardType: TextInputType.emailAddress,\n            ),\n            formSpacer,\n            TextFormField(\n              controller: _passwordController,\n              obscureText: true,\n              decoration: const InputDecoration(\n                label: Text('Password'),\n              ),\n              validator: (val) {\n                if (val == null || val.isEmpty) {\n                  return 'Required';\n                }\n                if (val.length < 6) {\n                  return '6 characters minimum';\n                }\n                return null;\n              },\n            ),\n            formSpacer,\n            TextFormField(\n              controller: _usernameController,\n              decoration: const InputDecoration(\n                label: Text('Username'),\n              ),\n              validator: (val) {\n                if (val == null || val.isEmpty) {\n                  return 'Required';\n                }\n                final isValid = RegExp(r'^[A-Za-z0-9_]{3,24}$').hasMatch(val);\n                if (!isValid) {\n                  return '3-24 long with alphanumeric or underscore';\n                }\n                return null;\n              },\n            ),\n            formSpacer,\n            ElevatedButton(\n              onPressed: _isLoading ? null : _signUp,\n              child: const Text('Register'),\n            ),\n            formSpacer,\n            TextButton(\n              onPressed: () {\n                Navigator.of(context).push(LoginPage.route());\n              },\n              child: const Text('I already have an account'),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Account Management Component in Ionic Vue\nDESCRIPTION: Vue component for user profile management that allows viewing and updating profile details, fetching profile data from Supabase, and handling user sign-out. Includes form handling and session management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Account</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <form @submit.prevent=\"updateProfile\">\n        <ion-item>\n          <ion-label>\n            <p>Email</p>\n            <p>{{ user?.email }}</p>\n          </ion-label>\n        </ion-item>\n\n        <ion-item>\n          <ion-label position=\"stacked\">Name</ion-label>\n          <ion-input type=\"text\" v-model=\"profile.username\" />\n        </ion-item>\n\n        <ion-item>\n          <ion-label position=\"stacked\">Website</ion-label>\n          <ion-input type=\"url\" v-model=\"profile.website\" />\n        </ion-item>\n\n        <div class=\"ion-text-center\">\n          <ion-button type=\"submit\" fill=\"clear\">Update Profile</ion-button>\n        </div>\n      </form>\n\n      <div class=\"ion-text-center\">\n        <ion-button fill=\"clear\" @click=\"signOut\">Log Out</ion-button>\n      </div>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script lang=\"ts\">\n  import {\n    IonPage,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonButton,\n    toastController,\n    loadingController,\n  } from '@ionic/vue'\n  import { defineComponent, onMounted, ref } from 'vue'\n  import { useRouter } from 'vue-router'\n  import { supabase } from '@/supabase'\n  import type { User } from '@supabase/supabase-js'\n\n  export default defineComponent({\n    name: 'AccountPage',\n    components: {\n      IonPage,\n      IonHeader,\n      IonToolbar,\n      IonTitle,\n      IonContent,\n      IonItem,\n      IonLabel,\n      IonInput,\n      IonButton,\n    },\n    setup() {\n      const router = useRouter()\n      const user = ref<User | null>(null)\n\n      const profile = ref({\n        username: '',\n        website: '',\n        avatar_url: '',\n      })\n\n      const getProfile = async () => {\n        const loader = await loadingController.create()\n        const toast = await toastController.create({ duration: 5000 })\n        await loader.present()\n\n        try {\n          const { data, error, status } = await supabase\n            .from('profiles')\n            .select('username, website, avatar_url')\n            .eq('id', user.value?.id)\n            .single()\n\n          if (error && status !== 406) throw error\n\n          if (data) {\n            profile.value = {\n              username: data.username,\n              website: data.website,\n              avatar_url: data.avatar_url,\n            }\n          }\n        } catch (error: any) {\n          toast.message = error.message\n          await toast.present()\n        } finally {\n          await loader.dismiss()\n        }\n      }\n\n      const updateProfile = async () => {\n        const loader = await loadingController.create()\n        const toast = await toastController.create({ duration: 5000 })\n        await loader.present()\n\n        try {\n          const updates = {\n            id: user.value?.id,\n            ...profile.value,\n            updated_at: new Date(),\n          }\n\n          const { error } = await supabase.from('profiles').upsert(updates, {\n            returning: 'minimal',\n          })\n\n          if (error) throw error\n        } catch (error: any) {\n          toast.message = error.message\n          await toast.present()\n        } finally {\n          await loader.dismiss()\n        }\n      }\n\n      const signOut = async () => {\n        const loader = await loadingController.create()\n        const toast = await toastController.create({ duration: 5000 })\n        await loader.present()\n\n        try {\n          const { error } = await supabase.auth.signOut()\n          if (error) throw error\n          router.push('/')\n        } catch (error: any) {\n          toast.message = error.message\n          await toast.present()\n        } finally {\n          await loader.dismiss()\n        }\n      }\n\n      onMounted(async () => {\n        const loader = await loadingController.create()\n        await loader.present()\n\n        const { data } = await supabase.auth.getSession()\n        user.value = data.session?.user ?? null\n\n        if (!user.value) {\n          router.push('/')\n        } else {\n          await getProfile()\n        }\n\n        await loader.dismiss()\n      })\n\n      return {\n        user,\n        profile,\n        updateProfile,\n        signOut,\n      }\n    },\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with UUID Primary Key in PostgreSQL\nDESCRIPTION: SQL command to create a table with a UUID primary key that is automatically generated using the uuid_generate_v4() function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/uuid-ossp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table contacts (\n  id uuid default uuid_generate_v4(),\n  first_name text,\n  last_name text,\n  primary key (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Method for Logging Request Headers in Edge Functions\nDESCRIPTION: Proper technique for logging request headers in Edge Functions using Object.fromEntries to convert the Headers object into a standard JavaScript object that can be properly stringified and logged.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/logging.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(async (req) => {\n  let headersObject = Object.fromEntries(req.headers)\n  let requestHeaders = JSON.stringify(headersObject, null, 2)\n  console.log(`Request headers: ${requestHeaders}`)\n  return new Response('ok', {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    status: 200,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Granting Function Execution Permission\nDESCRIPTION: Example of granting execution permission for a specific function to an authenticated role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ngrant execute on function public.hello_world to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Table with Row and Column-Level Security in PostgreSQL\nDESCRIPTION: SQL commands to create a 'posts' table with row-level security policy and column-level privilege restrictions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table\nposts (\nid bigint primary key generated always as identity,\nuser_id text,\ntitle text,\ncontent text,\ncreated_at timestamptz default now()\nupdated_at timestamptz default now()\n);\n\n-- Add row-level security\ncreate policy \"Allow update for owners\" on posts for\nupdate\nusing ((select auth.uid()) = user_id);\n\n-- Add column-level security\nrevoke\nupdate\n(title) on table public.posts\nfrom\nauthenticated;\n```\n\n----------------------------------------\n\nTITLE: Setting Auth Context in Edge Function\nDESCRIPTION: Demonstrates how to set up authentication context in a Supabase Edge Function by extracting and using the Authorization header token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nDeno.serve(async (req: Request) => {\n\n  const supabaseClient = createClient(\n    Deno.env.get('SUPABASE_URL') ?? '',\n    Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n  );\n\n  // Get the session or user object\n  const authHeader = req.headers.get('Authorization')!;\n  const token = authHeader.replace('Bearer ', '');\n  const { data } = await supabaseClient.auth.getUser(token);\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Embedding Input Function in SQL\nDESCRIPTION: This function customizes the input text for embedding generation by concatenating the title and content fields with markdown formatting. This allows for more meaningful embeddings that incorporate multiple text fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Customize the input for embedding generation\n-- e.g. Concatenate title and content with a markdown header\ncreate or replace function embedding_input(doc documents)\nreturns text\nlanguage plpgsql\nimmutable\nas $$\nbegin\n  return '# ' || doc.title || E'\\n\\n' || doc.content;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client and Signing In with Google OAuth in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Supabase client and use it to sign in a user with Google OAuth. It includes an option to request offline access and prompt for consent to obtain a refresh token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('url', 'anonKey')\n\n// ---cut---\nsupabase.auth.signInWithOAuth({\n  provider: 'google',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nconst { data, error } = await supabase.auth.signInWithOAuth({\n  provider: 'google',\n  options: {\n    queryParams: {\n      access_type: 'offline',\n      prompt: 'consent',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Component\nDESCRIPTION: Creates a login component with email, GitHub authentication, and logout functionality using the Supabase client instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Login() {\n  const { supabase } = useOutletContext()\n\n  const handleEmailLogin = async () => {\n    await supabase.auth.signInWithPassword({\n      email: 'valid.email@supabase.io',\n      password: 'password',\n    })\n  }\n\n  const handleGitHubLogin = async () => {\n    await supabase.auth.signInWithOAuth({\n      provider: 'github',\n      options: {\n        redirectTo: 'http://localhost:3000/auth/callback',\n      },\n    })\n  }\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n  }\n\n  return (\n    <>\n      <button onClick={handleEmailLogin}>Email Login</button>\n      <button onClick={handleGitHubLogin}>GitHub Login</button>\n      <button onClick={handleLogout}>Logout</button>\n    </>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Login() {\n  const { supabase } = useOutletContext<{ supabase: SupabaseClient<Database> }>()\n\n  const handleEmailLogin = async () => {\n    await supabase.auth.signInWithPassword({\n      email: 'valid.email@supabase.io',\n      password: 'password',\n    })\n  }\n\n  const handleGitHubLogin = async () => {\n    await supabase.auth.signInWithOAuth({\n      provider: 'github',\n      options: {\n        redirectTo: 'http://localhost:3000/auth/callback',\n      },\n    })\n  }\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n  }\n\n  return (\n    <>\n      <button onClick={handleEmailLogin}>Email Login</button>\n      <button onClick={handleGitHubLogin}>GitHub Login</button>\n      <button onClick={handleLogout}>Logout</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Full Text Search on Description Using Kotlin\nDESCRIPTION: Kotlin implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        textSearch(\"description\", \"'big'\", TextSearchType.NONE)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Type for Uploads in Supabase Storage with JavaScript\nDESCRIPTION: This snippet demonstrates how to specify the content type when uploading a file to Supabase Storage using JavaScript. It uses the 'contentType' option to set the MIME type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst file = new Blob()\n\n// Create Supabase client\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nawait supabase.storage.from('bucket_name').upload('file_path', file, {\n  contentType: 'image/jpeg',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Index for Vector Similarity Search in PostgreSQL\nDESCRIPTION: SQL command to create an index on the embedding column using the IVFFLAT algorithm, which improves performance for similarity searches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on documents using ivfflat (embedding vector_cosine_ops)\nwith\n  (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Route Handler with Supabase in Next.js (JavaScript)\nDESCRIPTION: Implements a Next.js static route handler that inserts data into Supabase. It uses the standard createClient from supabase-js since there's no user context at build time, processes the POST request data, and returns the inserted record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { NextResponse } from 'next/server'\n\nexport async function POST(request) {\n  const { title } = await request.json()\n\n  const supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  )\n\n  const { data } = await supabase.from('todos').insert({ title }).select()\n  return NextResponse.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Securing User Profiles with PostgreSQL Row Level Security in Supabase\nDESCRIPTION: SQL script for setting up a profiles table with proper row-level security policies. It creates a table linked to auth.users, adds security policies for viewing, inserting, and updating profiles, configures Supabase Realtime, and sets up Storage for avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/sveltekit-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for Public Profiles\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\nalter table profiles enable row level security;\ncreate policy \"Public profiles are viewable by everyone.\"\n  on profiles for select\n  using ( true );\ncreate policy \"Users can insert their own profile.\"\n  on profiles for insert\n  with check ( (select auth.uid()) = id );\ncreate policy \"Users can update own profile.\"\n  on profiles for update\n  using ( (select auth.uid()) = id );\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues ('avatars', 'avatars');\ncreate policy \"Avatar images are publicly accessible.\"\n  on storage.objects for select\n  using ( bucket_id = 'avatars' );\ncreate policy \"Anyone can upload an avatar.\"\n  on storage.objects for insert\n  with check ( bucket_id = 'avatars' );\n```\n\n----------------------------------------\n\nTITLE: Email Notification System for Failed Password Attempts\nDESCRIPTION: SQL implementation for tracking login attempts and sending email notifications when suspicious activity is detected.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.password_sign_in_attempts (\n  user_id uuid not null,\n  attempt_id uuid not null,\n  last_attempt_at timestamp not null default now(),\n  attempt_successful boolean not null,\n  primary key (user_id, attempt_id)\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.hook_notify_user_on_failed_attempts(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\n  declare\n    user_id uuid;\n    server_token text;\n    user_email_address text;\n    email_body jsonb;\n    response_id int;\n    http_code int;\n    error_message jsonb;\n    attempt_count int;\n    max_attempts int := 5;\n  begin\n    user_id := (event->>'user_id')::uuid;\n\n    insert into public.password_sign_in_attempts (user_id, attempt_id, last_attempt_at, attempt_successful)\n    values (user_id, (event->>'attempt_id')::uuid, now(), (event->>'valid')::boolean)\n    on conflict (user_id, attempt_id)\n    do update set last_attempt_at = now(), attempt_successful = (event->>'valid')::boolean;\n\n    select count(*), u.email into attempt_count, user_email_address\n    from public.password_sign_in_attempts a\n    join auth.users u on a.user_id = u.id\n    where a.user_id = user_id and attempt_successful = false and last_attempt_at > (now() - interval '1 day');\n\n    if attempt_count >= max_attempts then\n      select decrypted_secret into server_token from vault.decrypted_secrets where name = 'my_api_key_name';\n\n      email_body := format('{\n        \"from\": \"yoursenderemail@example.com\",\n        \"to\": \"%s\",\n        \"subject\": \"Security Alert: Repeated Login Attempts Detected\",\n        \"textbody\": \"We have detected repeated login attempts for your account. If this was not you, please secure your account.\",\n        \"htmlbody\": \"<html><body><strong>Security Alert:</strong> We have detected repeated login attempts for your account. If this was not you, please secure your account.</body></html>\",\n        \"messagestream\": \"outbound\"\n      }', user_email_address)::jsonb;\n\n      select id into response_id from net.http_post(\n        'https://api.youremailprovider.com/email',\n        email_body,\n        'application/json',\n        array['Accept: application/json', 'X-Postmark-Server-Token: ' || server_token]\n      );\n\n      select status_code, content into http_code, error_message from net._http_response where id = response_id;\n\n      if http_code is null or (http_code < 200 or http_code >= 300) then\n        return jsonb_build_object(\n          'error', jsonb_build_object(\n            'http_code', coalesce(http_code, 0),\n            'message', coalesce(error_message ->> 'message', 'error sending email')\n          )\n        );\n      end if;\n    end if;\n\n    return jsonb_build_object('decision', 'continue');\n  end;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Handler Activity\nDESCRIPTION: Kotlin implementation of DeepLinkHandlerActivity that processes OAuth callbacks using Supabase client. Handles successful authentication and displays user information in a success screen.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\n@AndroidEntryPoint\nclass DeepLinkHandlerActivity : ComponentActivity() {\n\n    @Inject\n    lateinit var supabaseClient: SupabaseClient\n\n    private lateinit var callback: (String, String) -> Unit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        supabaseClient.handleDeeplinks(intent = intent,\n            onSessionSuccess = { userSession ->\n                Log.d(\"LOGIN\", \"Log in successfully with user info: ${userSession.user}\")\n                userSession.user?.apply {\n                    callback(email ?: \"\", createdAt.toString())\n                }\n            })\n        setContent {\n            val navController = rememberNavController()\n            val emailState = remember { mutableStateOf(\"\") }\n            val createdAtState = remember { mutableStateOf(\"\") }\n            LaunchedEffect(Unit) {\n                callback = { email, created ->\n                    emailState.value = email\n                    createdAtState.value = created\n                }\n            }\n            ManageProductsTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    SignInSuccessScreen(\n                        modifier = Modifier.padding(20.dp),\n                        navController = navController,\n                        email = emailState.value,\n                        createdAt = createdAtState.value,\n                        onClick = { navigateToMainApp() }\n                    )\n                }\n            }\n        }\n    }\n\n    private fun navigateToMainApp() {\n        val intent = Intent(this, MainActivity::class.java).apply {\n            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\n        }\n        startActivity(intent)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route Handler in Next.js\nDESCRIPTION: A Next.js API route handler that handles user sign-out. It first verifies if a user is logged in, performs the sign-out operation using Supabase, and then redirects to the login page. It also revalidates the page layout for updated UI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@/utils/supabase/server'\nimport { revalidatePath } from 'next/cache'\nimport { NextResponse } from 'next/server'\n\nexport async function POST(req) {\n  const supabase = await createClient()\n\n  // Check if a user's logged in\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (user) {\n    await supabase.auth.signOut()\n  }\n\n  revalidatePath('/', 'layout')\n  return NextResponse.redirect(new URL('/login', req.url), {\n    status: 302,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Spatial Index for Geographic Data\nDESCRIPTION: SQL command to create a spatial GiST index on a geographic column to improve query performance. This index is essential for efficient geo-spatial operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate index restaurants_geo_index\n  on public.restaurants\n  using GIST (location);\n```\n\n----------------------------------------\n\nTITLE: Archiving Queue Messages\nDESCRIPTION: Function to move a specific message from the queue table to its archive table. Requires queue name and message ID as parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\npgmq_public.archive(queue_name text, message_id bigint)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres using Drizzle ORM\nDESCRIPTION: Example of using Drizzle ORM with Postgres.js to connect to a database and perform queries in Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\nimport { countries } from '../_shared/schema.ts'\n\nconst connectionString = Deno.env.get('SUPABASE_DB_URL')!\n\nDeno.serve(async (_req) => {\n  const client = postgres(connectionString, { prepare: false })\n  const db = drizzle(client)\n  const allCountries = await db.select().from(countries)\n\n  return Response.json(allCountries)\n})\n```\n\n----------------------------------------\n\nTITLE: Request Handler with Background Task in TypeScript\nDESCRIPTION: Shows how to initiate a background task within a request handler using EdgeRuntime.waitUntil for non-blocking operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/background-tasks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchAndLog(url: string) {\n  const response = await fetch(url)\n  console.log(response)\n}\n\nDeno.serve(async (req) => {\n  // this will not block the request,\n  // instead it will run in the background\n  EdgeRuntime.waitUntil(fetchAndLog('https://httpbin.org/json'))\n\n  return new Response('ok')\n})\n```\n\n----------------------------------------\n\nTITLE: Scheduling Weekly Data Deletion in Supabase\nDESCRIPTION: This SQL snippet schedules a cron job to delete old data every Saturday at 3:30 AM (GMT). It demonstrates how to use the cron.schedule function with a specific schedule and SQL command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.schedule (\n  'saturday-cleanup', -- name of the cron job\n  '30 3 * * 6', -- Saturday at 3:30AM (GMT)\n  $$ delete from events where event_time < now() - interval '1 week' $$\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Layout Load Function with Supabase\nDESCRIPTION: Sets up a client-side layout load function that creates the appropriate Supabase client (browser or server) and ensures session data is available throughout the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/+layout.ts\nimport { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'\nimport { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'\nimport type { LayoutLoad } from './$types'\n\nexport const load: LayoutLoad = async ({ fetch, data, depends }) => {\n  depends('supabase:auth')\n\n  const supabase = isBrowser()\n    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n        global: {\n          fetch,\n        },\n      })\n    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n        global: {\n          fetch,\n        },\n        cookies: {\n          getAll() {\n            return data.cookies\n          },\n        },\n      })\n\n  /**\n   * It's fine to use `getSession` here, because on the client, `getSession` is\n   * safe, and on the server, it reads `session` from the `LayoutData`, which\n   * safely checked the session using `safeGetSession`.\n   */\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  return { supabase, session }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for UPDATE Operations\nDESCRIPTION: Shows how to create an RLS policy for UPDATE operations using both USING and WITH CHECK clauses. This policy ensures that users can only update their own records in the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow user to edit their stuff\"\non \"public\".\"<SOME TABLE NAME>\"\nas RESTRICTIVE\nfor UPDATE\nto authenticated\nusing (\n  (select auth.uid()) = user_id\n)\nwith check(\n  (select auth.uid()) = user_id\n);\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage in Swift\nDESCRIPTION: This snippet illustrates how to upload a file to Supabase Storage using the standard upload method in Swift. It creates a Supabase client and performs the upload operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Supabase\n\n// Create Supabase client\nlet supabase = SupabaseClient(supabaseURL: URL(string: \"your_project_url\")!, supabaseKey: \"your_supabase_api_key\")\n\ntry await supabase.storage.from(\"bucket_name\").upload(path: \"file_path\", file: file)\n```\n\n----------------------------------------\n\nTITLE: Combining Data Fetching and Mutations with Next.js Server Actions\nDESCRIPTION: Example showing how to use both data fetching and mutations within the same Next.js component using Supabase. This demonstrates fetching data with Server Components and adding server-side mutation logic using Server Actions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const { data } = await supabase.from('...').select()\n\n  const createNote = async () => {\n    'use server'\n    await supabase.from('...').insert({...})\n  }\n\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue 3 App with Vite\nDESCRIPTION: Commands to create a new Vue 3 project using Vite and install the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm 6.x\nnpm create vite@latest supabase-vue-3 --template vue\n\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest supabase-vue-3 -- --template vue\n\ncd supabase-vue-3\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Executing Vector Search Query via Supabase Edge Function\nDESCRIPTION: cURL command to perform a semantic search request against a Supabase Edge Function endpoint. The request requires a Supabase anonymous key for authentication and accepts a JSON payload with a search term.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/edge-functions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i --location --request POST 'https://<PROJECT-REF>.supabase.co/functions/v1/search' \\\n    --header 'Authorization: Bearer <SUPABASE_ANON_KEY>' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"search\":\"vehicles\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone MFA Enrollment Component in React with Supabase\nDESCRIPTION: A React component that handles phone MFA enrollment flow using Supabase Auth. It manages phone number input, verification code entry, and implements the complete enrollment process including factor enrollment, challenge creation, and code verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/phone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function EnrollMFA({\n  onEnrolled,\n  onCancelled,\n}: {\n  onEnrolled: () => void\n  onCancelled: () => void\n}) {\n  const [phoneNumber, setPhoneNumber] = useState('')\n  const [factorId, setFactorId] = useState('')\n  const [verifyCode, setVerifyCode] = useState('')\n  const [error, setError] = useState('')\n  const [challengeId, setChallengeId] = useState('')\n\n  const onEnableClicked = () => {\n    setError('')\n    ;(async () => {\n      const verify = await auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      })\n      if (verify.error) {\n        setError(verify.error.message)\n        throw verify.error\n      }\n\n      onEnrolled()\n    })()\n  }\n  const onEnrollClicked = async () => {\n    setError('')\n    try {\n      const factor = await auth.mfa.enroll({\n        phone: phoneNumber,\n        factorType: 'phone',\n      })\n      if (factor.error) {\n        setError(factor.error.message)\n        throw factor.error\n      }\n\n      setFactorId(factor.data.id)\n    } catch (error) {\n      setError('Failed to Enroll the Factor.')\n    }\n  }\n\n  const onSendOTPClicked = async () => {\n    setError('')\n    try {\n      const challenge = await auth.mfa.challenge({ factorId })\n      if (challenge.error) {\n        setError(challenge.error.message)\n        throw challenge.error\n      }\n\n      setChallengeId(challenge.data.id)\n    } catch (error) {\n      setError('Failed to resend the code.')\n    }\n  }\n\n  return (\n    <>\n      {error && <div className=\"error\">{error}</div>}\n      <input\n        type=\"text\"\n        placeholder=\"Phone Number\"\n        value={phoneNumber}\n        onChange={(e) => setPhoneNumber(e.target.value.trim())}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Verification Code\"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      <input type=\"button\" value=\"Enroll\" onClick={onEnrollClicked} />\n      <input type=\"button\" value=\"Submit Code\" onClick={onEnableClicked} />\n      <input type=\"button\" value=\"Send OTP Code\" onClick={onSendOTPClicked} />\n      <input type=\"button\" value=\"Cancel\" onClick={onCancelled} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Many-to-Many Relationships in PostgreSQL\nDESCRIPTION: SQL commands to create tables representing users, teams, and a many-to-many joining table for team members.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users (\n  \"id\" serial primary key,\n  \"name\" text\n);\n\ncreate table teams (\n  \"id\" serial primary key,\n  \"team_name\" text\n);\n\ncreate table members (\n  \"user_id\" int references users,\n  \"team_id\" int references teams,\n  primary key (user_id, team_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Dart Implementation of Bounding Box Search\nDESCRIPTION: Dart example showing how to call the PostGIS bounding box search function using Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.rpc('restaurants_in_view', params: {\n  'min_lat': 40.807,\n  'min_long': -73.946,\n  'max_lat': 40.808,\n  'max_long': -73.945,\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Anonymous User to Existing Account with Supabase JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates linking an anonymous user to an existing account in Supabase. It includes signing in anonymously, attempting to update with an existing email, handling potential conflicts, and resolving data conflicts through reassignment. It requires Supabase JS client as a dependency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Sign in anonymously (assuming the user is already signed in anonymously)\nconst { data: anonData, error: anonError } = await supabase.auth.getSession()\n\n// 2. Attempt to update the user with the existing email\nconst { data: updateData, error: updateError } = await supabase.auth.updateUser({\n  email: 'valid.email@supabase.io',\n})\n\n// 3. Handle the error (since the email belongs to an existing user)\nif (updateError) {\n  console.log('This email belongs to an existing user. Please sign in to that account.')\n\n  // 4. Sign in to the existing account\n  const {\n    data: { user: existingUser },\n    error: signInError,\n  } = await supabase.auth.signInWithPassword({\n    email: 'valid.email@supabase.io',\n    password: 'user_password',\n  })\n\n  if (existingUser) {\n    // 5. Reassign entities tied to the anonymous user\n    // This step will vary based on your specific use case and data model\n    const { data: reassignData, error: reassignError } = await supabase\n      .from('your_table')\n      .update({ user_id: existingUser.id })\n      .eq('user_id', anonData.session.user.id)\n\n    // 6. Implement your chosen conflict resolution strategy\n    // This could involve merging data, overwriting, or other custom logic\n    await resolveDataConflicts(anonData.session.user.id, existingUser.id)\n  }\n}\n\n// Helper function to resolve data conflicts (implement based on your strategy)\nasync function resolveDataConflicts(anonymousUserId, existingUserId) {\n  // Implement your conflict resolution logic here\n  // This could involve ignoring the anonymous user's metadata, overwriting the existing user's metadata, or merging the data of both the anonymous and existing user.\n}\n```\n\n----------------------------------------\n\nTITLE: Signing in with Magic Link using Dart\nDESCRIPTION: Demonstrates how to sign in a user with a magic link using Dart in Supabase. Requires the user's email address to execute the sign-in process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signInWithEmail() async {\n  final AuthResponse res = await supabase.auth.signinwithotp(email: 'valid.email@supabase.io');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client for Components in Next.js\nDESCRIPTION: Utility function to create a Supabase client for use in client-side components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  const supabase = createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n\n  return supabase\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Schema with Row Level Security for User Profiles\nDESCRIPTION: SQL script to set up a user profiles table with Postgres Row Level Security policies. This creates the profiles table, sets up security policies, configures Realtime, and initializes Storage for avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/svelte-user-management/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for Public Profiles\ncreate table\n\tprofiles (\n\t\tid uuid references auth.users not null,\n\t\tupdated_at timestamp\n\t\twith\n\t\t\ttime zone,\n\t\t\tusername text unique,\n\t\t\tavatar_url text,\n\t\t\twebsite text,\n\t\t\tprimary key (id),\n\t\t\tunique (username),\n\t\t\tconstraint username_length check (char_length(username) >= 3)\n\t);\n\nalter table\n\tprofiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles for\nselect\n\tusing (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles for insert\nwith\n\tcheck ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles for\nupdate\n\tusing ((select auth.uid()) = id);\n\n-- Set up Realtime!\nbegin;\n\ndrop\n\tpublication if exists supabase_realtime;\n\ncreate publication supabase_realtime;\n\ncommit;\n\nalter\n\tpublication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into\n\tstorage.buckets (id, name)\nvalues\n\t('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects for\nselect\n\tusing (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects for insert\nwith\n\tcheck (bucket_id = 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in SQL\nDESCRIPTION: SQL command to enable the pgvector extension in the Supabase database, which is necessary for vector operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable pgvector extension\ncreate extension if not exists vector with schema public;\n```\n\n----------------------------------------\n\nTITLE: Initializing Email Internationalization with Supabase Auth Hooks\nDESCRIPTION: This snippet sets up the necessary imports, constants, and email templates for internationalized email sending using Supabase Auth Hooks and Postmark.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'\nimport { readAll } from 'https://deno.land/std/io/read_all.ts'\n\nconst postmarkEndpoint = 'https://api.postmarkapp.com/email'\n// Replace this with your email\nconst FROM_EMAIL = 'myemail@gmail.com'\n\n// Email Subjects\nconst subjects = {\n  en: {\n    signup: 'Confirm Your Email',\n    recovery: 'Reset Your Password',\n    invite: 'You have been invited',\n    magic_link: 'Your Magic Link',\n    email_change: 'Confirm Email Change',\n    email_change_new: 'Confirm New Email Address',\n    reauthentication: 'Confirm Reauthentication',\n  },\n  es: {\n    signup: 'Confirma tu correo electrónico',\n    recovery: 'Restablece tu contraseña',\n    invite: 'Has sido invitado',\n    magic_link: 'Tu enlace mágico',\n    email_change: 'Confirma el cambio de correo electrónico',\n    email_change_new: 'Confirma la Nueva Dirección de Correo',\n    reauthentication: 'Confirma la reautenticación',\n  },\n  fr: {\n    signup: 'Confirmez votre adresse e-mail',\n    recovery: 'Réinitialisez votre mot de passe',\n    invite: 'Vous avez été invité',\n    magic_link: 'Votre Lien Magique',\n    email_change: 'Confirmez le changement d'adresse e-mail',\n    email_change_new: 'Confirmez la nouvelle adresse e-mail',\n    reauthentication: 'Confirmez la réauthentification',\n  },\n}\n\n// HTML Body\nconst templates = {\n  en: {\n    signup: `<h2>Confirm your email</h2><p>Follow this link to confirm your email:</p><p><a href=\"{{confirmation_url}}\">Confirm your email address</a></p><p>Alternatively, enter the code: {{token}}</p>`,\n    recovery: `<h2>Reset password</h2><p>Follow this link to reset the password for your user:</p><p><a href=\"{{confirmation_url}}\">Reset password</a></p><p>Alternatively, enter the code: {{token}}</p>`,\n    invite: `<h2>You have been invited</h2><p>You have been invited to create a user on {{site_url}}. Follow this link to accept the invite:</p><p><a href=\"{{confirmation_url}}\">Accept the invite</a></p><p>Alternatively, enter the code: {{token}}</p>`,\n    magic_link: `<h2>Magic Link</h2><p>Follow this link to login:</p><p><a href=\"{{confirmation_url}}\">Log In</a></p><p>Alternatively, enter the code: {{token}}</p>`,\n    email_change: `<h2>Confirm email address change</h2><p>Follow this link to confirm the update of your email address from {{old_email}} to {{new_email}}:</p><p><a href=\"{{confirmation_url}}\">Change email address</a></p><p>Alternatively, enter the codes: {{token}} and {{new_token}}</p>`,\n    email_change_new: `<h2>Confirm New Email Address</h2><p>Follow this link to confirm your new email address:</p><p><a href=\"{{confirmation_url}}\">Confirm new email address</a></p><p>Alternatively, enter the code: {{new_token}}</p>`,\n    reauthentication: `<h2>Confirm reauthentication</h2><p>Enter the code: {{token}}</p>`,\n  },\n  es: {\n    signup: `<h2>Confirma tu correo electrónico</h2><p>Sigue este enlace para confirmar tu correo electrónico:</p><p><a href=\"{{confirmation_url}}\">Confirma tu correo electrónico</a></p><p>Alternativamente, ingresa el código: {{token}}</p>`,\n    recovery: `<h2>Restablece tu contraseña</h2><p>Sigue este enlace para restablecer la contraseña de tu usuario:</p><p><a href=\"{{confirmation_url}}\">Restablece tu contraseña</a></p><p>Alternativamente, ingresa el código: {{token}}</p>`,\n\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Remix for Supabase Auth\nDESCRIPTION: Implementation of a Remix loader function to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and manages cookie headers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { redirect, type LoaderFunctionArgs } from '@remix-run/node'\nimport { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'\nimport { type EmailOtpType } from '@supabase/supabase-js'\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const requestUrl = new URL(request.url)\n  const token_hash = requestUrl.searchParams.get('token_hash')\n  const type = requestUrl.searchParams.get('type') as EmailOtpType | null\n  const next = requestUrl.searchParams.get('next') || '/'\n  const headers = new Headers()\n\n  if (token_hash && type) {\n    const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {\n      cookies: {\n        getAll() {\n          return parseCookieHeader(request.headers.get('Cookie') ?? '')\n        },\n        setAll(key, value, options) {\n          headers.append('Set-Cookie', serializeCookieHeader(key, value, options))\n        },\n      },\n    })\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n\n    if (!error) {\n      return redirect(next, { headers })\n    }\n  }\n\n  // return the user to an error page with instructions\n  return redirect('/auth/auth-code-error', { headers })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index with Inner Product Distance in SQL\nDESCRIPTION: Creates an HNSW index on a vector column using inner product distance operator class. This index type is optimal for similarity search using dot product calculations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/hnsw-indexes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using hnsw (column_name vector_ip_ops);\n```\n\n----------------------------------------\n\nTITLE: Text Embeddings Generation with GTE-Small Model\nDESCRIPTION: Demonstrates how to generate text embeddings using the gte-small model in an Edge Function. Handles request parameters and returns normalized embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst model = new Supabase.ai.Session('gte-small')\n\nDeno.serve(async (req: Request) => {\n  const params = new URL(req.url).searchParams\n  const input = params.get('input')\n  const output = await model.run(input, { mean_pool: true, normalize: true })\n  return new Response(JSON.stringify(output), {\n    headers: {\n      'Content-Type': 'application/json',\n      Connection: 'keep-alive',\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Granting Execute Permission to Auth Admin Role\nDESCRIPTION: SQL command to grant execution permission on a custom hook function to the supabase_auth_admin role, allowing the Auth service to access the hook.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ngrant execute\n  on function public.custom_access_token_hook\n  to supabase_auth_admin;\n```\n\n----------------------------------------\n\nTITLE: Using Assert for Value Checking\nDESCRIPTION: Example showing the assert keyword usage for condition checking in functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate function assert_example(name text)\nreturns uuid\nlanguage plpgsql\nas $$\ndeclare\n  student_id uuid;\nbegin\n  -- save a user's id into the user_id variable\n  select\n    id into student_id\n  from attendance_table\n  where student = name;\n\n  -- throw an error if the student_id is null\n  assert student_id is not null, 'assert_example() ERROR: student not found';\n\n  -- otherwise, return the user's id\n  return student_id;\nend;\n$$;\n\nselect assert_example('Harry Potter');\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Functions with GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration that automatically deploys Edge Functions when code is merged to the main branch. Uses the official Supabase CLI setup action and requires a Supabase access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cicd-workflow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Function\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}\n      PROJECT_ID: your-project-id\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n\n      - run: supabase functions deploy --project-ref $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Nested Queries in Supabase\nDESCRIPTION: Example of how to define TypeScript types for nested join queries in Supabase, making response data strongly typed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'\n\nconst sectionsWithInstrumentsQuery = supabase.from('orchestral_sections').select(`\n  id,\n  name,\n  instruments (\n    id,\n    name\n  )\n`)\ntype SectionsWithInstruments = QueryData<typeof sectionsWithInstrumentsQuery>\n\nconst { data, error } = await sectionsWithInstrumentsQuery\nif (error) throw error\nconst sectionsWithInstruments: SectionsWithInstruments = data\n```\n\n----------------------------------------\n\nTITLE: Disabling PGAudit Monitoring\nDESCRIPTION: SQL commands to disable both object level and global/user level logging for specific roles\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n  -- Use to disable object level logging\n  alter role \"<role name>\" set pgaudit.role to '';\n\n  -- Use to disable global and user level logging\n  alter role \"<role name>\" set pgaudit.log to 'none';\n```\n\n----------------------------------------\n\nTITLE: Finding Critical Path in Project Tasks using pgRouting's Dijkstra Algorithm\nDESCRIPTION: This code demonstrates how to use pgRouting's implementation of Dijkstra's algorithm to find the longest path through task dependencies, which represents the critical path in project management. It shows how to set up the extension and execute the query.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate schema if not exists extensions;\ncreate extension pgrouting schema extensions cascade;\n\n-- find the longest path using pgr_dijkstra()\n-- (as it calculates shortest path, use negative weights)\nselect * FROM extensions.pgr_dijkstra(\n    'select id, source, target, duration as cost from dependencies',\n    1,  -- Start Project (Task ID 1)\n    6   -- End Project (Task ID 6)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Array Column in SQL\nDESCRIPTION: This SQL snippet creates a table named 'arraytest' with an integer 'id' column and a text array column named 'textarray'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table arraytest (\n  id integer not null,\n  textarray text array\n);\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Data with pg_jsonschema Extension in PostgreSQL\nDESCRIPTION: This SQL code demonstrates how to set up JSON validation in PostgreSQL using the pg_jsonschema extension. It creates a table with a JSON column and adds a check constraint that validates the JSON data against a JSON Schema document, ensuring the 'tags' property is an array of strings with a maximum length of 16 characters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate table customers (\n  id serial primary key,\n  metadata json\n);\n\nalter table customers\nadd constraint check_metadata check (\n  json_matches_schema(\n    '{\n        \"type\": \"object\",\n        \"properties\": {\n            \"tags\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\",\n                    \"maxLength\": 16\n                }\n            }\n        }\n    }',\n    metadata\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security Policy for SSO\nDESCRIPTION: SQL code demonstrating how to create a restrictive RLS policy that scopes data access based on the user's SSO provider ID from their JWT.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"View organization settings.\"\n  ON organization_settings\n  AS RESTRICTIVE\n  USING (\n    sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger for New User - SQL\nDESCRIPTION: Sets up a trigger function to automatically insert new user details into the public.profiles table when a user is created in auth.users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- inserts a row into public.profiles\ncreate function public.handle_new_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = ''\nas $$\nbegin\n  insert into public.profiles (id, first_name, last_name)\n  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');\n  return new;\nend;\n$$;\n\n-- trigger the function every time a user is created\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Privileges\nDESCRIPTION: SQL command to grant create privileges on public schema to a role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> grant create on schema public to junior_dev;\nGRANT\n```\n\n----------------------------------------\n\nTITLE: Signing Out with Supabase Flutter\nDESCRIPTION: This Dart code snippet shows how to sign out a user using Supabase's `signOut` method in a Flutter application. It removes the authentication session from the browser and localStorage. Make sure the necessary Supabase Dart package is included.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Client with JavaScript\nDESCRIPTION: This JavaScript code snippet sets up the Supabase client by using environment variables and injects it into the SvelteKit server event for authentication. It includes safe session retrieval logic by validating the JWT via `getUser`.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/hooks.server.js\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\nimport { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'\n\nexport const handle = async ({ event, resolve }) => {\n  event.locals.supabase = createSupabaseServerClient({\n    supabaseUrl: PUBLIC_SUPABASE_URL,\n    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n    event,\n  })\n\n  /**\n   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it\n   * doesn't validate the JWT, this function validates the JWT by first calling\n   * `getUser` and aborts early if the JWT signature is invalid.\n   */\n  event.locals.safeGetSession = async () => {\n    const {\n      data: { user },\n      error,\n    } = await supabase.auth.getUser()\n    if (error) {\n      return { session: null, user: null }\n    }\n\n    const {\n      data: { session },\n    } = await event.locals.supabase.auth.getSession()\n    return { session, user }\n  }\n\n  return resolve(event, {\n    filterSerializedResponseHeaders(name) {\n      return name === 'content-range' || name === 'x-supabase-api-version'\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Tables with Foreign Keys\nDESCRIPTION: Creates a categories table and adds a foreign key reference in the movies table to establish a one-to-many relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table categories (\n  id bigint generated always as identity primary key,\n  name text -- category name\n);\n\nalter table movies\n  add column category_id bigint references categories;\n```\n\n----------------------------------------\n\nTITLE: Querying Live Connections in PostgreSQL\nDESCRIPTION: This SQL query retrieves information about all live connections to the database, including connection ID, SSL usage, connected database, user role, application name, IP address, last query, query start time, connection state, and connection start time. It joins pg_stat_ssl and pg_stat_activity tables to provide comprehensive connection details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connection-management.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  pg_stat_activity.pid as connection_id,\n  ssl,\n  datname as database,\n  usename as connected_role,\n  application_name,\n  client_addr as IP,\n  query,\n  query_start,\n  state,\n  backend_start\nFROM pg_stat_ssl\nJOIN pg_stat_activity\nON pg_stat_ssl.pid = pg_stat_activity.pid;\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Projects Table with RLS in SQL\nDESCRIPTION: This snippet shows a more complex example of a 'projects' table with row-level security policies and a public view. It includes table creation, RLS policies, and a view definition.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table private.projects (\n  id              bigint    not null,\n  name            text      not null,\n  organization_id bigint    not null,\n  inserted_at     timestamp not null,\n  updated_at      timestamp not null\n);\n\nalter table private.projects\nenable row level security;\n\ncreate policy projects_insert\n  on private.projects\n  for insert\n  to authenticated\nwith check auth.can_write(project_id);\n\ncreate policy projects_select\n  on private.projects\n  for select\n  to authenticated\nusing auth.can_read(project_id);\n\n-- Users can only view the projects that they have access to\ncreate view public.projects as select\n  projects.id,\n  projects.name,\n  projects.organization_id,\n  projects.inserted_at,\n  projects.updated_at\nfrom private.projects\nwhere auth.can_read(projects.id);\n```\n\n----------------------------------------\n\nTITLE: Amazon Bedrock Image Generation Implementation\nDESCRIPTION: TypeScript implementation of an Edge Function that generates images using Amazon Bedrock and stores them in Supabase Storage. Includes AWS SDK setup, image generation, and storage upload logic.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// We need to mock the file system for the AWS SDK to work.\nimport { prepareVirtualFile } from 'https://deno.land/x/mock_file@v1.1.2/mod.ts'\n\nimport { BedrockRuntimeClient, InvokeModelCommand } from 'npm:@aws-sdk/client-bedrock-runtime'\nimport { createClient } from 'npm:@supabase/supabase-js'\nimport { decode } from 'npm:base64-arraybuffer'\n\nconsole.log('Hello from Amazon Bedrock!')\n\nDeno.serve(async (req) => {\n  prepareVirtualFile('./aws/config')\n  prepareVirtualFile('./aws/credentials')\n\n  const client = new BedrockRuntimeClient({\n    region: Deno.env.get('AWS_DEFAULT_REGION') ?? 'us-west-2',\n    credentials: {\n      accessKeyId: Deno.env.get('AWS_ACCESS_KEY_ID') ?? '',\n      secretAccessKey: Deno.env.get('AWS_SECRET_ACCESS_KEY') ?? '',\n      sessionToken: Deno.env.get('AWS_SESSION_TOKEN') ?? '',\n    },\n  })\n\n  const { prompt, seed } = await req.json()\n  console.log(prompt)\n  const input = {\n    contentType: 'application/json',\n    accept: '*/*',\n    modelId: 'amazon.titan-image-generator-v1',\n    body: JSON.stringify({\n      taskType: 'TEXT_IMAGE',\n      textToImageParams: { text: prompt },\n      imageGenerationConfig: {\n        numberOfImages: 1,\n        quality: 'standard',\n        cfgScale: 8.0,\n        height: 512,\n        width: 512,\n        seed: seed ?? 0,\n      },\n    }),\n  }\n\n  const command = new InvokeModelCommand(input)\n  const response = await client.send(command)\n  console.log(response)\n\n  if (response.$metadata.httpStatusCode === 200) {\n    const { body, $metadata } = response\n\n    const textDecoder = new TextDecoder('utf-8')\n    const jsonString = textDecoder.decode(body.buffer)\n    const parsedData = JSON.parse(jsonString)\n    console.log(parsedData)\n    const image = parsedData.images[0]\n\n    const supabaseClient = createClient(\n      // Supabase API URL - env var exported by default.\n      Deno.env.get('SUPABASE_URL')!,\n      // Supabase API ANON KEY - env var exported by default.\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n    )\n\n    const { data: upload, error: uploadError } = await supabaseClient.storage\n      .from('images')\n      .upload(`${$metadata.requestId ?? ''}.png`, decode(image), {\n        contentType: 'image/png',\n        cacheControl: '3600',\n        upsert: false,\n      })\n    if (!upload) {\n      return Response.json(uploadError)\n    }\n    const { data } = supabaseClient.storage.from('images').getPublicUrl(upload.path!)\n    return Response.json(data)\n  }\n\n  return Response.json(response)\n})\n```\n\n----------------------------------------\n\nTITLE: Indexing and Attaching Chat Partitions in PostgreSQL\nDESCRIPTION: Procedure for setting up indexes and attaching partition tables to the parent table. Implements optimized locking strategy using check constraints to avoid table scans during attachment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE PROCEDURE app.index_and_attach_chats_partition(partition_day date)\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    EXECUTE format(\n    $i$\n        -- now that any bulk data is loaded, setup the new partition table's pks\n        ALTER TABLE app.\"chats_%1$s\" ADD PRIMARY KEY (id, created_at);\n\n        -- adding these check constraints means postgres can\n        -- attach partitions without locking and having to scan them.\n        ALTER TABLE app.\"chats_%1$s\" ADD CONSTRAINT\n               \"chats_partition_by_range_check_%1$s\"\n           CHECK ( created_at >= DATE %1$L AND created_at < DATE %2$L );\n\n        -- add more partition indexes here if necessary\n        CREATE INDEX \"chats_%1$s_created_at\"\n            ON app.\"chats_%1$s\"\n            USING btree(created_at)\n            WITH (fillfactor=100);\n\n        -- by \"attaching\" the new tables and indexes *after* the pk,\n        -- indexing and check constraints verify all rows,\n        -- no scan checks or locks are necessary, attachment is very fast,\n        -- and queries to parent are not blocked.\n        ALTER TABLE app.chats\n            ATTACH PARTITION app.\"chats_%1$s\"\n        FOR VALUES FROM (%1$L) TO (%2$L);\n\n        -- You now also \"attach\" any indexes you made at this point\n        ALTER INDEX app.\"chats_created_at\"\n            ATTACH PARTITION app.\"chats_%1$s_created_at\";\n\n        -- Dropping the now unnecessary check constraint they were just needed\n        -- to prevent the attachment from forcing a scan to do the same check\n        ALTER TABLE app.\"chats_%1$s\" DROP CONSTRAINT\n            \"chats_partition_by_range_check_%1$s\";\n    $i$,\n    partition_day, (partition_day + interval '1 day')::date);\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Selective MFA Enforcement via RLS in SQL\nDESCRIPTION: SQL policy that enforces MFA only for users who have set up MFA factors. It checks the auth.mfa_factors table to determine if a user has verified MFA factors, and enforces 'aal2' level authentication only for those users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow access on table only if user has gone through MFA\"\n  on table_name\n  as restrictive -- very important!\n  to authenticated\n  using (\n    array[auth.jwt()->>'aal'] <@ (\n      select\n          case\n            when count(id) > 0 then array['aal2']\n            else array['aal1', 'aal2']\n          end as aal\n        from auth.mfa_factors\n        where (select auth.uid()) = user_id and status = 'verified'\n    ));\n```\n\n----------------------------------------\n\nTITLE: Complex Boolean Logic - OR AND OR\nDESCRIPTION: Shows how to implement a complex WHERE clause combining OR and AND conditions for team_id and age filtering using both SQL and JavaScript approaches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom players\nwhere ((team_id = 'CHN' or team_id is null) and (age > 35 or age is null));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('players')\n  .select() // or .select('*')\n  .or('team_id.eq.CHN,team_id.is.null')\n  .or('age.gt.35,age.is.null') // additional filters imply \"AND\"\n```\n\n----------------------------------------\n\nTITLE: Testing Supabase Edge Functions with Deno Test\nDESCRIPTION: Example TypeScript test script for Edge Functions that validates both Supabase client functionality and specific function behavior using Deno's assertion utilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import required libraries and modules\nimport { assert, assertEquals } from 'jsr:@std/assert@1'\nimport { createClient, SupabaseClient } from 'jsr:@supabase/supabase-js@2'\n\n// Will load the .env file to Deno.env\nimport 'jsr:@std/dotenv/load'\n\n// Set up the configuration for the Supabase client\nconst supabaseUrl = Deno.env.get('SUPABASE_URL') ?? ''\nconst supabaseKey = Deno.env.get('SUPABASE_ANON_KEY') ?? ''\nconst options = {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false,\n    detectSessionInUrl: false,\n  },\n}\n\n// Test the creation and functionality of the Supabase client\nconst testClientCreation = async () => {\n  var client: SupabaseClient = createClient(supabaseUrl, supabaseKey, options)\n\n  // Verify if the Supabase URL and key are provided\n  if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n  if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n  // Test a simple query to the database\n  const { data: table_data, error: table_error } = await client\n    .from('my_table')\n    .select('*')\n    .limit(1)\n  if (table_error) {\n    throw new Error('Invalid Supabase client: ' + table_error.message)\n  }\n  assert(table_data, 'Data should be returned from the query.')\n}\n\n// Test the 'hello-world' function\nconst testHelloWorld = async () => {\n  var client: SupabaseClient = createClient(supabaseUrl, supabaseKey, options)\n\n  // Invoke the 'hello-world' function with a parameter\n  const { data: func_data, error: func_error } = await client.functions.invoke('hello-world', {\n    body: { name: 'bar' },\n  })\n\n  // Check for errors from the function invocation\n  if (func_error) {\n    throw new Error('Invalid response: ' + func_error.message)\n  }\n\n  // Log the response from the function\n  console.log(JSON.stringify(func_data, null, 2))\n\n  // Assert that the function returned the expected result\n  assertEquals(func_data.message, 'Hello bar!')\n}\n\n// Register and run the tests\nDeno.test('Client Creation Test', testClientCreation)\nDeno.test('Hello-world Function Test', testHelloWorld)\n```\n\n----------------------------------------\n\nTITLE: Signing Up New User using Supabase in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to sign up a new user with email and password using Supabase. Optionally, a redirect URL can be specified to direct the user after confirmation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signUpNewUser() {\n  const { data, error } = await supabase.auth.signUp({\n    email: 'valid.email@supabase.io',\n    password: 'example-password',\n    options: {\n      emailRedirectTo: 'https://example.com/welcome',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Email Verification in SvelteKit\nDESCRIPTION: Server-side handler for email verification. Processes the verification token and redirects accordingly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { EmailOtpType } from '@supabase/supabase-js'\nimport { redirect } from '@sveltejs/kit'\n\nimport type { RequestHandler } from './$types'\n\nexport const GET: RequestHandler = async ({ url, locals: { supabase } }) => {\n  const token_hash = url.searchParams.get('token_hash')\n  const type = url.searchParams.get('type') as EmailOtpType | null\n  const next = url.searchParams.get('next') ?? '/'\n\n  /**\n   * Clean up the redirect URL by deleting the Auth flow parameters.\n   *\n   * `next` is preserved for now, because it's needed in the error case.\n   */\n  const redirectTo = new URL(url)\n  redirectTo.pathname = next\n  redirectTo.searchParams.delete('token_hash')\n  redirectTo.searchParams.delete('type')\n\n  if (token_hash && type) {\n    const { error } = await supabase.auth.verifyOtp({ type, token_hash })\n    if (!error) {\n      redirectTo.searchParams.delete('next')\n      redirect(303, redirectTo)\n    }\n  }\n\n  redirectTo.pathname = '/auth/error'\n  redirect(303, redirectTo)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in JavaScript with Supabase\nDESCRIPTION: JavaScript implementation that creates a Supabase client and uses it to update a user's password after they have received a reset password email.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('url', 'anonKey')\n\n// ---cut---\nawait supabase.auth.updateUser({ password: 'new_password' })\n```\n\n----------------------------------------\n\nTITLE: Initiating Password Reset in Python with Supabase\nDESCRIPTION: Python implementation to initiate a password reset flow using Supabase client by sending a reset password email to the specified email address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nsupabase.auth.reset_password_email('valid.email@supabase.io')\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Supabase in JavaScript\nDESCRIPTION: This snippet shows how to use the Supabase client to fetch user data on the server side within a Next.js page. It authenticates the user and returns their email and associated data from the 'users' table, handling the session validation and redirection if not authenticated.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPagesServerClient } from '@supabase/auth-helpers-nextjs'\n\nexport default function ProtectedPage({ user, data }) {\n  return (\n    <>\n      <div>Protected content for {user.email}</div>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n    </>\n  )\n}\n\nexport const getServerSideProps = async (ctx) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient(ctx)\n  // Check if we have a session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!session)\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n\n  // Run queries with RLS on the server\n  const { data } = await supabase.from('users').select('*')\n\n  return {\n    props: {\n      user,\n      data: data ?? [],\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Registration Page with Email Confirmation in Flutter\nDESCRIPTION: A Flutter widget that handles user registration with email confirmation. It includes form validation, Supabase authentication, and state management for redirecting users after email confirmation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:my_chat_app/pages/login_page.dart';\nimport 'package:my_chat_app/pages/rooms_page.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass RegisterPage extends StatefulWidget {\n  const RegisterPage(\n      {Key? key, required this.isRegistering})\n      : super(key: key);\n\n  static Route<void> route({bool isRegistering = false}) {\n    return MaterialPageRoute(\n      builder: (context) =>\n          RegisterPage(isRegistering: isRegistering),\n    );\n  }\n\n  final bool isRegistering;\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\n// ... rest of the RegisterPage implementation\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Usage Permission to Auth Admin Role\nDESCRIPTION: SQL command to grant usage permission on the public schema to the supabase_auth_admin role, enabling access to objects within the schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ngrant usage on schema public to supabase_auth_admin;\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Callback Route Handler in JavaScript\nDESCRIPTION: Route handler for processing authentication code exchange in JavaScript.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request) {\n  const requestUrl = new URL(request.url)\n  const code = requestUrl.searchParams.get('code')\n\n  if (code) {\n    const cookieStore = cookies()\n    const supabase = createRouteHandlerClient({ cookies: () => cookieStore })\n    await supabase.auth.exchangeCodeForSession(code)\n  }\n\n  return NextResponse.redirect(requestUrl.origin)\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Prisma Migrations with bun\nDESCRIPTION: This snippet demonstrates how to synchronize Prisma migrations using bun. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbunx prisma db pull\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init_supabase\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx prisma migrate diff \\\n--from-empty \\\n--to-schema-datamodel prisma/schema.prisma \\\n--script > prisma/migrations/0_init_supabase/migration.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx prisma migrate resolve --applied 0_init_supabase\n```\n\n----------------------------------------\n\nTITLE: Protecting API Routes - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to protect an API route by validating the user's session. If the session is invalid, it responds with a 401 Unauthorized error. Otherwise, it retrieves data from a protected resource using Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/api/protected-route/+server.ts\nimport { json, error } from '@sveltejs/kit'\n\nexport const GET = async ({ locals: { supabase, safeGetSession } }) => {\n  const { session } = await safeGetSession()\n  if (!session) {\n    // the user is not signed in\n    throw error(401, { message: 'Unauthorized' })\n  }\n  const { data } = await supabase.from('test').select('*')\n\n  return json({ data })\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Embeddings with Vecs\nDESCRIPTION: Python code to store the generated embeddings in a Postgres database using vecs client, creating a collection and index\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/amazon-bedrock.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.Client(DB_CONNECTION)\n\n# create a collection named 'sentences' with 1536 dimensional vectors\n# to match the default dimension of the Titan Embeddings G1 - Text model\nsentences = vx.get_or_create_collection(name=\"sentences\", dimension=1536)\n\n# upsert the embeddings into the 'sentences' collection\nsentences.upsert(records=embeddings)\n\n# create an index for the 'sentences' collection\nsentences.create_index()\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Cron Postgres Module via SQL\nDESCRIPTION: SQL commands to create the pg_cron extension and grant necessary privileges. This enables the Supabase Cron functionality for scheduling recurring Jobs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/install.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension pg_cron with schema pg_catalog;\n\ngrant usage on schema cron to postgres;\ngrant all privileges on all tables in schema cron to postgres;\n```\n\n----------------------------------------\n\nTITLE: Adding Store Method to StoresService\nDESCRIPTION: A TypeScript method that handles adding a new store to Supabase, including uploading an associated image. It formats the coordinates using the PostGIS POINT syntax and stores the data in the 'stores' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  async addStore(info: StoreEntry) {\n    // Add a new database entry using the POINT() syntax for the coordinates\n    const { data } = await this.supabase\n      .from('stores')\n      .insert({\n        name: info.name,\n        description: info.description,\n        location: `POINT(${info.long} ${info.lat})`,\n      })\n      .select()\n      .single();\n\n    if (data && info.image) {\n      // Upload the image to Supabase\n      const foo = await this.supabase.storage\n        .from('stores')\n        .upload(`/images/${data.id}.png`, info.image);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Realtime Client Component\nDESCRIPTION: Implements a client component that subscribes to realtime database changes using Supabase channels.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useEffect, useState } from 'react'\nimport supabase from '../../utils/supabase'\n\nexport default function RealtimePosts({ serverPosts }: { serverPosts: any }) {\n  const [posts, setPosts] = useState(serverPosts)\n\n  useEffect(() => {\n    setPosts(serverPosts)\n  }, [serverPosts])\n\n  useEffect(() => {\n    const channel = supabase\n      .channel('*')\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'posts' }, (payload) =>\n        setPosts((posts: any) => [...posts, payload.new])\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [serverPosts])\n\n  return <pre>{JSON.stringify(posts, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Querying pg_stat_statements to Identify Expensive Queries\nDESCRIPTION: SQL query that identifies frequently executed and slow queries using the pg_stat_statements view. The query filters for calls greater than 50, mean execution time over 2ms, total execution time over one minute, and applies a table-specific filter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_stat_statements.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n\tcalls,\n\tmean_exec_time,\n\tmax_exec_time,\n\ttotal_exec_time,\n\tstddev_exec_time,\n\tquery\nfrom\n\tpg_stat_statements\nwhere\n    calls > 50                   -- at least 50 calls\n    and mean_exec_time > 2.0     -- averaging at least 2ms/call\n    and total_exec_time > 60000  -- at least one minute total server time spent\n    and query ilike '%user_in_organization%' -- filter to queries that touch the user_in_organization table\norder by\n\tcalls desc\n```\n\n----------------------------------------\n\nTITLE: User Signup - JavaScript\nDESCRIPTION: Creates a new user in Supabase with additional metadata like first_name and age during signup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)\n\n// ---cut---\nconst { data, error } = await supabase.auth.signUp({\n  email: 'valid.email@supabase.io',\n  password: 'example-password',\n  options: {\n    data: {\n      first_name: 'John',\n      age: 27,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reset Supabase Database (CLI)\nDESCRIPTION: This command resets the local Supabase database, reapplying all migrations and seeding data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db reset\n```\n\n----------------------------------------\n\nTITLE: PGroonga Full-Text Search with Multiple Words (AND)\nDESCRIPTION: SQL command showing how to perform a full-text search for multiple words using PGroonga, where all specified words must be present in the result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * from memos where content &@~ 'postgres pgroonga';\n```\n\n----------------------------------------\n\nTITLE: Running FTS Queries in Postgres\nDESCRIPTION: JavaScript function to execute Full Text Search queries against a Postgres database. It uses websearch_to_tsquery with English language configuration and returns an array of matching document IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Querying search phrases\nasync function query({ phrase, pool }) {\n  const results = await pool.query(sql`\nselect id, title\nfrom movies\nwhere fts_doc_en @@ websearch_to_tsquery('english', ${phrase}::text)\n`)\n  const ids = results.rows.map((r) => r.id)\n  return ids\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Queue Messages with pgmq_public.pop\nDESCRIPTION: Function to retrieve and delete the next available message from a specified queue. Takes a queue name as input and returns the message while removing it from the queue.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\npgmq_public.pop(queue_name text)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Request Function\nDESCRIPTION: SQL commands to configure the pre-request function for the authenticator role and reload the PostgREST configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nalter role authenticator\n  set pgrst.db_pre_request = 'public.check_request';\n\nnotify pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Project with Supabase Template\nDESCRIPTION: Command to set up a new Next.js project with the official Supabase template. This provides the fastest way to start building an application with Next.js 14 and Supabase integration already configured.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Creating Object Deletion Policy in Supabase with SQL\nDESCRIPTION: This SQL snippet establishes a policy allowing authenticated users to delete their objects. It checks ownership by matching the object owner with the authenticated user ID. The policy is applied to the delete operation on the storage.objects table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/delete-objects.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"User can delete their own objects\"\non storage.objects\nfor delete\nTO authenticated\nUSING (\n    owner = (select auth.uid()::text)\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Queue Messages with Optional Delay\nDESCRIPTION: Function to add a message to a specified queue with an optional visibility delay. Takes queue name, message payload (JSONB), and optional sleep seconds as parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\npgmq_public.send(queue_name text, message jsonb, sleep_seconds integer)\n```\n\n----------------------------------------\n\nTITLE: Protected Route Implementation - v0.7.x\nDESCRIPTION: Implementation of a protected route using Supabase authentication in SvelteKit v0.7.x.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { PageData } from './$types'\n\n  export let data: PageData\n  $: ({ tableData, user } = data)\n</script>\n\n<div>Protected content for {user.email}</div>\n<p>server-side fetched data with RLS:</p>\n<pre>{JSON.stringify(tableData, null, 2)}</pre>\n<p>user:</p>\n<pre>{JSON.stringify(user, null, 2)}</pre>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAuth } from '@supabase/auth-helpers-sveltekit'\nimport { redirect } from '@sveltejs/kit'\nimport type { PageLoad } from './$types'\n\nexport const load: PageLoad = withAuth(async ({ session, getSupabaseClient }) => {\n  if (!session.user) {\n    redirect(303, '/')\n  }\n\n  const { data: tableData } = await getSupabaseClient().from('test').select('*')\n  return { tableData, user: session.user }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Server Client for Next.js Server Components\nDESCRIPTION: Defines a utility function that creates a Supabase client for use in Server Components, Server Actions, and Route Handlers. Configures cookie handling to manage authentication state on the server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector Database Schema in PostgreSQL\nDESCRIPTION: SQL setup for enabling pgvector extension, creating documents table with vector support, and defining a similarity search function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Create Schema Diff Migration (CLI)\nDESCRIPTION: This command generates a migration file by diffing the current database schema against the schema defined in the Supabase dashboard.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db diff -f create_cities_table\n```\n\n----------------------------------------\n\nTITLE: Basic Text Search Implementation\nDESCRIPTION: Demonstrates basic text search implementation across multiple languages using the created fts column to search for specific terms.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  fts @@ to_tsquery('little & big');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('books').select().textSearch('fts', `'little' & 'big'`)\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .textSearch('fts', \"'little' & 'big'\");\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await client\n  .from(\"books\")\n  .select()\n  .textSearch(\"fts\", value: \"'little' & 'big'\")\n  .execute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        textSearch(\"fts\", \"'title' & 'big'\", TextSearchType.NONE)\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = client.from_('books').select().text_search('fts', \"'little' & 'big'\").execute()\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Session Storage for Supabase\nDESCRIPTION: Custom implementation of SyncSupportedStorage class to handle session management for Supabase authentication using Flask sessions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom gotrue import SyncSupportedStorage\nfrom flask import session\n\nclass FlaskSessionStorage(SyncSupportedStorage):\n    def __init__(self):\n        self.storage = session\n\n    def get_item(self, key: str) -> str | None:\n        if key in self.storage:\n            return self.storage[key]\n\n    def set_item(self, key: str, value: str) -> None:\n        self.storage[key] = value\n\n    def remove_item(self, key: str) -> None:\n        if key in self.storage:\n            self.storage.pop(key, None)\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Hook Function in JavaScript (PLV8)\nDESCRIPTION: JavaScript function using PLV8 to implement a custom access token hook for adding user roles to JWT claims.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"plv8\" extension\ncreate extension plv8;\n\n-- Create the auth hook function\ncreate or replace function custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plv8\nas $$\n  var user_role;\n\n  // Fetch the current user's user_role from the public user_roles table.\n  var result = plv8.execute(\"select role from public.user_roles where user_id = $1\", [event.user_id]);\n  if (result.length > 0) {\n    user_role = result[0].role;\n  } else {\n    // Assign null\n    user_role = null;\n  }\n\n  // Check if 'claims' exists in the event object; if not, initialize it\n  if (!event.claims) {\n    event.claims = {};\n  }\n\n  // Update the level in the claims\n  event.claims.user_role = user_role;\n\n  return event;\n$$;\n\ngrant usage on schema public to supabase_auth_admin;\n\ngrant execute\n  on function public.custom_access_token_hook\n  to supabase_auth_admin;\n\nrevoke execute\n  on function public.custom_access_token_hook\n  from authenticated, anon, public;\n\ngrant all\n  on table public.user_roles\nto supabase_auth_admin;\n\nrevoke all\n  on table public.user_roles\n  from authenticated, anon, public;\n\ncreate policy \"Allow auth admin to read user roles\" ON public.user_roles\nas permissive for select\nto supabase_auth_admin\nusing (true)\n```\n\n----------------------------------------\n\nTITLE: Basic RLS Policy with Join Example\nDESCRIPTION: Example of a basic RLS policy that uses a potentially slow join operation to check user roles against a roles table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"rls_test_select\" on test_table\nto authenticated\nusing (\n  exists (\n    select 1 from roles_table\n    where (select auth.uid()) = user_id and role = 'good_role'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security Policies for Supabase Trello Clone\nDESCRIPTION: This SQL script sets up row level security policies for boards, user_boards, lists, and cards tables. It ensures that users can only access and modify data they are authorized to.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- boards row level security\nalter table boards enable row level security;\n\n-- Policies\ncreate policy \"Users can create boards\" on boards for\n  insert to authenticated with CHECK (true);\n\ncreate policy \"Users can view their boards\" on boards for\n    select using (\n      id in (\n        select get_boards_for_authenticated_user()\n      )\n    );\n\ncreate policy \"Users can update their boards\" on boards for\n    update using (\n      id in (\n        select get_boards_for_authenticated_user()\n      )\n    );\n\ncreate policy \"Users can delete their created boards\" on boards for\n    delete using ((select auth.uid()) = creator);\n\n-- user_boards row level security\nalter table user_boards enable row level security;\n\ncreate policy \"Users can add their boards\" on user_boards for\n    insert to authenticated with check (true);\n\ncreate policy \"Users can view boards\" on user_boards for\n    select using ((select auth.uid()) = user_id);\n\ncreate policy \"Users can delete their boards\" on user_boards for\n    delete using ((select auth.uid()) = user_id);\n\n-- lists row level security\nalter table lists enable row level security;\n\n-- Policies\ncreate policy \"Users can edit lists if they are part of the board\" on lists for\n    all using (\n      board_id in (\n        select get_boards_for_authenticated_user()\n      )\n    );\n\n-- cards row level security\nalter table cards enable row level security;\n\n-- Policies\ncreate policy \"Users can edit cards if they are part of the board\" on cards for\n    all using (\n      board_id in (\n        select get_boards_for_authenticated_user()\n      )\n    );\n```\n\n----------------------------------------\n\nTITLE: Listening to Multiple Changes in Python with Supabase Realtime\nDESCRIPTION: Establishes a Python channel to listen to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"*\",\n  schema=\"public\",\n  table=\"messages\"\n  callback=lambda payload: print(payload)\n).on_postgres_changes(\n  \"INSERT\",\n  schema=\"public\",\n  table=\"users\",\n  callback=lambda payload: print(payload)\n).subscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigger for New User Profile Creation in SQL\nDESCRIPTION: Creates a function and trigger to automatically generate a profile entry when a new user signs up via Supabase Auth. Extracts full name and avatar URL from user metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger\nset search_path = ''\nas $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Auth SignUp with Email Redirect\nDESCRIPTION: Example of using the Supabase signUp function with email redirect configuration pointing to the auth callback route handler. Shows how to properly set up email redirection for authentication flows.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nsupabase.auth.signUp({\n  email: 'valid.email@supabase.io',\n  password: 'sup3rs3cur3',\n  options: {\n    emailRedirectTo: 'http://localhost:3000/auth/callback',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Function to Production\nDESCRIPTION: Commands to link and deploy the image manipulation function to a hosted Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/image-manipulation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link\nsupabase functions deploy image-blur\n```\n\n----------------------------------------\n\nTITLE: Implementing PhotosPicker in SwiftUI ProfileView\nDESCRIPTION: This snippet shows how to add a PhotosPicker to a SwiftUI ProfileView, allowing users to select and upload profile pictures. It includes UI updates, image selection handling, and integration with Supabase storage for uploading and downloading avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport PhotosUI\nimport Storage\nimport Supabase\nimport SwiftUI\n\nstruct ProfileView: View {\n  @State var username = \"\"\n  @State var fullName = \"\"\n  @State var website = \"\"\n\n  @State var isLoading = false\n\n  @State var imageSelection: PhotosPickerItem?\n  @State var avatarImage: AvatarImage?\n\n  var body: some View {\n    NavigationStack {\n      Form {\n        Section {\n          HStack {\n            Group {\n              if let avatarImage {\n                avatarImage.image.resizable()\n              } else {\n                Color.clear\n              }\n            }\n            .scaledToFit()\n            .frame(width: 80, height: 80)\n\n            Spacer()\n\n            PhotosPicker(selection: $imageSelection, matching: .images) {\n              Image(systemName: \"pencil.circle.fill\")\n                .symbolRenderingMode(.multicolor)\n                .font(.system(size: 30))\n                .foregroundColor(.accentColor)\n            }\n          }\n        }\n\n        Section {\n          TextField(\"Username\", text: $username)\n            .textContentType(.username)\n            .textInputAutocapitalization(.never)\n          TextField(\"Full name\", text: $fullName)\n            .textContentType(.name)\n          TextField(\"Website\", text: $website)\n            .textContentType(.URL)\n            .textInputAutocapitalization(.never)\n        }\n\n        Section {\n          Button(\"Update profile\") {\n            updateProfileButtonTapped()\n          }\n          .bold()\n\n          if isLoading {\n            ProgressView()\n          }\n        }\n      }\n      .navigationTitle(\"Profile\")\n      .toolbar(content: {\n        ToolbarItem {\n          Button(\"Sign out\", role: .destructive) {\n            Task {\n              try? await supabase.auth.signOut()\n            }\n          }\n        }\n      })\n      .onChange(of: imageSelection) { _, newValue in\n        guard let newValue else { return }\n        loadTransferable(from: newValue)\n      }\n    }\n    .task {\n      await getInitialProfile()\n    }\n  }\n\n  func getInitialProfile() async {\n    do {\n      let currentUser = try await supabase.auth.session.user\n\n      let profile: Profile =\n      try await supabase\n        .from(\"profiles\")\n        .select()\n        .eq(\"id\", value: currentUser.id)\n        .single()\n        .execute()\n        .value\n\n      username = profile.username ?? \"\"\n      fullName = profile.fullName ?? \"\"\n      website = profile.website ?? \"\"\n\n      if let avatarURL = profile.avatarURL, !avatarURL.isEmpty {\n        try await downloadImage(path: avatarURL)\n      }\n\n    } catch {\n      debugPrint(error)\n    }\n  }\n\n  func updateProfileButtonTapped() {\n    Task {\n      isLoading = true\n      defer { isLoading = false }\n      do {\n        let imageURL = try await uploadImage()\n\n        let currentUser = try await supabase.auth.session.user\n\n        let updatedProfile = Profile(\n          username: username,\n          fullName: fullName,\n          website: website,\n          avatarURL: imageURL\n        )\n\n        try await supabase\n          .from(\"profiles\")\n          .update(updatedProfile)\n          .eq(\"id\", value: currentUser.id)\n          .execute()\n      } catch {\n        debugPrint(error)\n      }\n    }\n  }\n\n  private func loadTransferable(from imageSelection: PhotosPickerItem) {\n    Task {\n      do {\n        avatarImage = try await imageSelection.loadTransferable(type: AvatarImage.self)\n      } catch {\n        debugPrint(error)\n      }\n    }\n  }\n\n  private func downloadImage(path: String) async throws {\n    let data = try await supabase.storage.from(\"avatars\").download(path: path)\n    avatarImage = AvatarImage(data: data)\n  }\n\n  private func uploadImage() async throws -> String? {\n    guard let data = avatarImage?.data else { return nil }\n\n    let filePath = \"\\(UUID().uuidString).jpeg\"\n\n    try await supabase.storage\n      .from(\"avatars\")\n      .upload(\n        filePath,\n        data: data,\n        options: FileOptions(contentType: \"image/jpeg\")\n      )\n\n    return filePath\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sign in with Apple JS Direct Integration\nDESCRIPTION: Implementation of Sign in with Apple JS using Supabase's signInWithIdToken method. This code handles the authentication flow after user consent is received from Apple's authentication service.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signIn() {\n  const data = await AppleID.auth.signIn()\n\n  await supabase.auth.signInWithIdToken({\n    provider: 'apple',\n    token: data.id_token,\n    nonce: '<nonce used in AppleID.auth.init>',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Example\nDESCRIPTION: This JavaScript code snippet shows the structure of a JWT payload. The payload contains claims about the user and the token itself.  This example shows claims such as `sub` (subject), `name`, `iat` (issued at), and `exp` (expiration time).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"0001\",\n  \"name\": \"Sam Vimes\",\n  \"iat\": 1516239022,\n  \"exp\": 1518239022\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Firebase Auth in TypeScript\nDESCRIPTION: Creates a Supabase client for web applications using TypeScript, passing an async function to retrieve the Firebase Auth JWT of the current user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n  accessToken: async () => {\n    return (await firebase.auth().currentUser?.getIdToken(/* forceRefresh */ false)) ?? null\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an HNSW Index for Vector Similarity Search with pgvector\nDESCRIPTION: SQL command to create a Hierarchical Navigable Small World (HNSW) index on a vector column for improved performance with inner product distance function. This index type is available in pgvector v0.5.0 and later.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-09-06-increase-performance-pgvector-hnsw.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Add a HNSW index for the inner product distance function\nCREATE INDEX ON documents\nUSING hnsw (embedding vector_ip_ops);\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with RLS Policy in JavaScript\nDESCRIPTION: Example showing simplified user data query after implementing Row Level Security policy. The database policy handles the filtering automatically based on the authenticated user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-05-supabase-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet user = await supabase.from('users').select('user_id, name')\n// Still returns { id: 'd0714948', name: 'Jane' }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Schema in Supabase\nDESCRIPTION: SQL command to create a custom schema in your Supabase database. Replace 'myschema' with your preferred schema name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA myschema;\n```\n\n----------------------------------------\n\nTITLE: Reindexing All Indexes on a Table Concurrently in PostgreSQL\nDESCRIPTION: Rebuilds all indexes on the persons table without blocking concurrent operations. This is useful for maintaining overall query performance as the table data changes over time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nreindex table concurrently persons;\n```\n\n----------------------------------------\n\nTITLE: Basic RLS Policy Without Role Specification\nDESCRIPTION: Example of a basic RLS policy without role specification, which can lead to unnecessary policy evaluation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"rls_test_select\" on rls_test\nusing ( auth.uid() = user_id );\n```\n\n----------------------------------------\n\nTITLE: Creating Secrets in Vault using SQL\nDESCRIPTION: Demonstrates how to create secrets using the vault.create_secret() function. The function accepts the secret value and optional name and description parameters, returning a UUID for the new secret.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect vault.create_secret('my_s3kre3t');\n```\n\n----------------------------------------\n\nTITLE: Generating and Storing OpenAI Embeddings in PostgreSQL\nDESCRIPTION: TypeScript function to generate embeddings using OpenAI's API and store them in a PostgreSQL database using Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { Configuration, OpenAIApi } from 'openai'\nimport { supabaseClient } from './lib/supabase'\n\nasync function generateEmbeddings() {\n  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })\n  const openAi = new OpenAIApi(configuration)\n\n  const documents = await getDocuments() // Your custom function to load docs\n\n  // Assuming each document is a string\n  for (const document of documents) {\n    // OpenAI recommends replacing newlines with spaces for best results\n    const input = document.replace(/\\n/g, ' ')\n\n    const embeddingResponse = await openai.createEmbedding({\n      model: 'text-embedding-ada-002',\n      input,\n    })\n\n    const [{ embedding }] = embeddingResponse.data.data\n\n    // In production we should handle possible errors\n    await supabaseClient.from('documents').insert({\n      content: document,\n      embedding,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Google Sign-In Response and Authenticating with Supabase in JavaScript\nDESCRIPTION: This function handles the Google Sign-In response and uses the credential to authenticate with Supabase. It can optionally include a nonce for added security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handleSignInWithGoogle(response) {\n  const { data, error } = await supabase.auth.signInWithIdToken({\n    provider: 'google',\n    token: response.credential,\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handleSignInWithGoogle(response) {\n  const { data, error } = await supabase.auth.signInWithIdToken({\n    provider: 'google',\n    token: response.credential,\n    nonce: '<NONCE>',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SemVer Domain with Validation Rules in SQL\nDESCRIPTION: Defines a domain 'semver' based on 'semver_components' with check constraints to enforce SemVer rules.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate domain semver\n    as semver_components\n    check (\n        -- major: non-null positive integer\n        (value).major is not null and (value).major >= 0\n        -- minor: non-null positive integer\n        and (value).minor is not null and (value).minor >= 0\n        -- patch: non-null positive integer\n        and (value).patch is not null and (value).patch >= 0\n        and semver_elements_match_regex(\n            (value).pre_release,\n            '^[A-z0-9]{1,255}$'\n        )\n        and semver_elements_match_regex(\n            (value).build_metadata,\n            '^[A-z0-9\\.]{1,255}$'\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Database Functions and Triggers\nDESCRIPTION: SQL functions for managing driver status and finding available drivers within proximity\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate function update_driver_status()\n    returns trigger\n    language plpgsql\n    as $$\n        begin\n            if new.status = 'completed' then\n                update public.drivers\n                set is_available = true\n                where id = new.driver_id;\n            else\n                update public.drivers\n                set is_available = false\n                where id = new.driver_id;\n            end if;\n            return new;\n    end $$;\n\ncreate trigger driver_status_update_trigger\nafter insert or update on rides\nfor each row\nexecute function update_driver_status();\n\ncreate function public.find_driver(origin geography(POINT), destination geography(POINT), fare int)\n    returns table(driver_id uuid, ride_id uuid)\n    language plpgsql\n    as $$\n        declare\n            v_driver_id uuid;\n            v_ride_id uuid;\n        begin\n            select\n                drivers.id into v_driver_id\n            from public.drivers\n            where is_available = true\n                and st_dwithin(origin, location, 3000)\n            order by drivers.location <-> origin\n            limit 1;\n\n            -- return null if no available driver is found\n            if v_driver_id is null then\n                return;\n            end if;\n\n            insert into public.rides (driver_id, passenger_id, origin, destination, fare)\n            values (v_driver_id, auth.uid(), origin, destination, fare)\n            returning id into v_ride_id;\n\n            return query\n                select v_driver_id as driver_id, v_ride_id as ride_id;\n    end $$ security definer;\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function\nDESCRIPTION: Deploys the Supabase function to production environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy\n```\n\n----------------------------------------\n\nTITLE: Flutter MFA Factor Management Page\nDESCRIPTION: Dart code implementing a Flutter page for listing and managing MFA factors, including the ability to unenroll factors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:mfa_app/main.dart';\nimport 'package:mfa_app/pages/auth/register_page.dart';\n\n/// A page that lists the currently signed in user's MFA methods.\n///\n/// The user can unenroll the factors.\nclass ListMFAPage extends StatelessWidget {\n  static const route = '/list-mfa';\n  ListMFAPage({super.key});\n\n  final _factorListFuture = supabase.auth.mfa.listFactors();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('List of MFA Factors')),\n      body: FutureBuilder(\n        future: _factorListFuture,\n        builder: (context, snapshot) {\n          if (snapshot.hasError) {\n            return Center(child: Text(snapshot.error.toString()));\n          }\n          if (!snapshot.hasData) {\n            return const Center(child: CircularProgressIndicator());\n          }\n\n          final response = snapshot.data!;\n          final factors = response.all;\n          return ListView.builder(\n            itemCount: factors.length,\n            itemBuilder: (context, index) {\n              final factor = factors[index];\n              return ListTile(\n                title: Text(factor.friendlyName ?? factor.factorType.name),\n                subtitle: Text(factor.status.name),\n                trailing: IconButton(\n                  onPressed: () {\n                    showDialog(\n                        context: context,\n                        builder: (context) {\n                          return AlertDialog(\n                            title: const Text(\n                              'Are you sure you want to delete this factor? You will be signed out of the app upon removing the factor.',\n                            ),\n                            actions: [\n                              TextButton(\n                                onPressed: () {\n                                  context.pop();\n                                },\n                                child: const Text('cancel'),\n                              ),\n                              TextButton(\n                                onPressed: () async {\n                                  await supabase.auth.mfa.unenroll(factor.id);\n                                  await supabase.auth.signOut();\n                                  if (context.mounted) {\n                                    context.go(RegisterPage.route);\n                                  }\n                                },\n                                child: const Text('delete'),\n                              ),\n                            ],\n                          );\n                        });\n                  },\n                  icon: const Icon(Icons.delete_outline),\n                ),\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a New Git Branch for Supabase Migration\nDESCRIPTION: This snippet demonstrates how to create a new Git branch for a Supabase migration, add the migration file, commit changes, and push to GitHub. It's part of the process for opening a pull request with a new migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feat/employee\ngit add supabase/migrations/<timestamp>_new_employee.sql\ngit commit -m \"Add employee table\"\ngit push --set-upstream origin feat/employee\n```\n\n----------------------------------------\n\nTITLE: API Key Validation Pre-Request Function\nDESCRIPTION: Implements a pre-request function that validates custom API keys for anonymous role requests, blocking unauthorized access with HTTP 403.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.check_request()\n  returns void\n  language plpgsql\n  security definer\n  as $$\ndeclare\n  req_app_api_key text := current_setting('request.headers', true)::json->>'x-app-api-key';\n  is_app_api_key_registered boolean;\n  jwt_role text := current_setting('request.jwt.claims', true)::json->>'role';\nbegin\n  if jwt_role <> 'anon' then\n    -- not `anon` role, allow the request to pass\n    return;\n  end if;\n\n  select\n    true into is_app_api_key_registered\n  from private.anon_api_keys\n  where\n    id = req_app_api_key::uuid\n  limit 1;\n\n  if is_app_api_key_registered is true then\n    -- api key is registered, allow the request to pass\n    return;\n  end if;\n\n  raise sqlstate 'PGRST' using\n    message = json_build_object(\n      'message', 'No registered API key found in x-app-api-key header.')::text,\n    detail = json_build_object(\n      'status', 403)::text;\nend;\n  $$;\n```\n\n----------------------------------------\n\nTITLE: Allowing Authenticated Uploads to User-Specific Folder in SQL\nDESCRIPTION: This policy allows authenticated users to upload files to a folder named after their user ID inside a specific bucket.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow authenticated uploads\"\non storage.objects\nfor insert\nto authenticated\nwith check (\n  bucket_id = 'my_bucket_id' and\n  (storage.foldername(name))[1] = (select auth.uid()::text)\n);\n```\n\n----------------------------------------\n\nTITLE: Database Security Policies\nDESCRIPTION: SQL commands implementing row level security policies for the database tables\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter table public.drivers enable row level security;\ncreate policy \"Any authenticated users can select drivers.\" on public.drivers for select to authenticated using (true);\ncreate policy \"Drivers can update their own status.\" on public.drivers for update to authenticated using (auth.uid() = id);\n\nalter table public.rides enable row level security;\ncreate policy \"The driver or the passenger can select the ride.\" on public.rides for select to authenticated using (driver_id = auth.uid() or passenger_id = auth.uid());\ncreate policy \"The driver can update the status. \" on public.rides for update to authenticated using (auth.uid() = driver_id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Telegram Bot Logic in TypeScript with Supabase Edge Functions\nDESCRIPTION: This TypeScript code implements the core functionality of the Telegram bot using the grammY framework. It handles incoming messages, processes audio and video files, interacts with the ElevenLabs API for transcription, and logs results to Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-transcribe-speech.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bot, webhookCallback } from 'https://deno.land/x/grammy@v1.34.0/mod.ts'\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\nimport { ElevenLabsClient } from 'npm:elevenlabs@1.50.5'\n\nconsole.log(`Function \"elevenlabs-scribe-bot\" up and running!`)\n\nconst elevenLabsClient = new ElevenLabsClient({\n  apiKey: Deno.env.get('ELEVENLABS_API_KEY') || '',\n})\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL') || '',\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''\n)\n\nasync function scribe({\n  fileURL,\n  fileType,\n  duration,\n  chatId,\n  messageId,\n  username,\n}: {\n  fileURL: string\n  fileType: string\n  duration: number\n  chatId: number\n  messageId: number\n  username: string\n}) {\n  let transcript: string | null = null\n  let languageCode: string | null = null\n  let errorMsg: string | null = null\n  try {\n    const sourceFileArrayBuffer = await fetch(fileURL).then((res) => res.arrayBuffer())\n    const sourceBlob = new Blob([sourceFileArrayBuffer], {\n      type: fileType,\n    })\n\n    const scribeResult = await elevenLabsClient.speechToText.convert({\n      file: sourceBlob,\n      model_id: 'scribe_v1',\n      tag_audio_events: false,\n    })\n\n    transcript = scribeResult.text\n    languageCode = scribeResult.language_code\n\n    // Reply to the user with the transcript\n    await bot.api.sendMessage(chatId, transcript, {\n      reply_parameters: { message_id: messageId },\n    })\n  } catch (error) {\n    errorMsg = error.message\n    console.log(errorMsg)\n    await bot.api.sendMessage(chatId, 'Sorry, there was an error. Please try again.', {\n      reply_parameters: { message_id: messageId },\n    })\n  }\n  // Write log to Supabase.\n  const logLine = {\n    file_type: fileType,\n    duration,\n    chat_id: chatId,\n    message_id: messageId,\n    username,\n    language_code: languageCode,\n    error: errorMsg,\n  }\n  console.log({ logLine })\n  await supabase.from('transcription_logs').insert({ ...logLine, transcript })\n}\n\nconst telegramBotToken = Deno.env.get('TELEGRAM_BOT_TOKEN')\nconst bot = new Bot(telegramBotToken || '')\nconst startMessage = `Welcome to the ElevenLabs Scribe Bot\\! I can transcribe speech in 99 languages with super high accuracy\\!\n    \\nTry it out by sending or forwarding me a voice message, video, or audio file\\!\n    \\n[Learn more about Scribe](https://elevenlabs.io/speech-to-text) or [build your own bot](https://elevenlabs.io/docs/cookbooks/speech-to-text/telegram-bot)\\!\n  `\nbot.command('start', (ctx) => ctx.reply(startMessage.trim(), { parse_mode: 'MarkdownV2' }))\n\nbot.on([':voice', ':audio', ':video'], async (ctx) => {\n  try {\n    const file = await ctx.getFile()\n    const fileURL = `https://api.telegram.org/file/bot${telegramBotToken}/${file.file_path}`\n    const fileMeta = ctx.message?.video ?? ctx.message?.voice ?? ctx.message?.audio\n\n    if (!fileMeta) {\n      return ctx.reply('No video|audio|voice metadata found. Please try again.')\n    }\n\n    // Run the transcription in the background.\n    EdgeRuntime.waitUntil(\n      scribe({\n        fileURL,\n        fileType: fileMeta.mime_type!,\n        duration: fileMeta.duration,\n        chatId: ctx.chat.id,\n        messageId: ctx.message?.message_id!,\n        username: ctx.from?.username || '',\n      })\n    )\n\n    // Reply to the user immediately to let them know we received their file.\n    return ctx.reply('Received. Scribing...')\n  } catch (error) {\n    console.error(error)\n    return ctx.reply(\n      'Sorry, there was an error getting the file. Please try again with a smaller file!'\n    )\n  }\n})\n\nconst handleUpdate = webhookCallback(bot, 'std/http')\n\nDeno.serve(async (req) => {\n  try {\n    const url = new URL(req.url)\n    if (url.searchParams.get('secret') !== Deno.env.get('FUNCTION_SECRET')) {\n      return new Response('not allowed', { status: 405 })\n    }\n\n    return await handleUpdate(req)\n  } catch (err) {\n    console.error(err)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Schema for Semantic Search (JavaScript)\nDESCRIPTION: Defines functions to create a PGlite database instance, initialize the schema with a vector extension, and perform basic database operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\nimport { vector } from '@electric-sql/pglite/vector'\n\nlet dbInstance\n// Implement a singleton pattern to make sure we only create one database instance.\nexport async function getDB() {\n  if (dbInstance) {\n    return dbInstance\n  }\n  const metaDb = new PGlite('idb://supa-semantic-search', {\n    extensions: {\n      vector,\n    },\n  })\n  await metaDb.waitReady\n  dbInstance = metaDb\n  return metaDb\n}\n\n// Initialize the database schema.\nexport const initSchema = async (db) => {\n  return await db.exec(`\n    create extension if not exists vector;\n    -- drop table if exists embeddings; -- Uncomment this line to reset the database\n    create table if not exists embeddings (\n      id bigint primary key generated always as identity,\n      content text not null,\n      embedding vector (384)\n    );\n    \n    create index on embeddings using hnsw (embedding vector_ip_ops);\n  `)\n}\n\n// Helper method to count the rows in a table.\nexport const countRows = async (db, table) => {\n  const res = await db.query(`SELECT COUNT(*) FROM ${table};`)\n  return res.rows[0].count\n}\n\n// [...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase data fetching in SolidJS\nDESCRIPTION: Creates a Supabase client using project credentials and implements a function to fetch instrument data from the database. The component uses SolidJS's createResource to handle the async data fetching and renders a list of instruments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/solidjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from \"@supabase/supabase-js\";\nimport { createResource, For } from \"solid-js\";\n\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>');\n\nasync function getInstruments() {\n  const { data } = await supabase.from(\"instruments\").select();\n  return data;\n}\n\nfunction App() {\n  const [instruments] = createResource(getInstruments);\n\n  return (\n    <ul>\n      <For each={instruments()}>{(instrument) => <li>{instrument.name}</li>}</For>\n    </ul>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Auth in Supabase using TOML\nDESCRIPTION: This snippet shows how to configure third-party authentication with Auth0 in a Supabase project using TOML. It involves updating the 'supabase/config.toml' file to enable Auth0 support by setting tenant and tenant region details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[auth.third_party.auth0]\nenabled = true\ntenant = \"<id>\"\ntenant_region = \"<region>\" # if your tenant has a region\n```\n\n----------------------------------------\n\nTITLE: Adding Messages to a Queue using SQL\nDESCRIPTION: This SQL snippet demonstrates how to add a message to a queue named 'foo' using the pgmq.send function. The message payload is a JSON object containing a 'hello' key with the value 'world'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-05-supabase-queues.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.send(\n  queue_name  => 'foo',\n  msg         => '{ \"hello\": \"world\" }'\n);\n```\n\n----------------------------------------\n\nTITLE: MFA Challenge Component in React\nDESCRIPTION: This component allows users to verify their identity via multi-factor authentication (MFA) using a phone factor. It interfaces with Supabase's MFA APIs to start and verify challenges. Key variables include the phone number and error states, and it requires a valid phone factor to initiate challenges. Utilize this component to facilitate user input for MFA verification codes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/phone.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction AuthMFA() {\n  const [verifyCode, setVerifyCode] = useState('')\n  const [error, setError] = useState('')\n  const [factorId, setFactorId] = useState('')\n  const [challengeId, setChallengeId] = useState('')\n  const [phoneNumber, setPhoneNumber] = useState('')\n\n  const startChallenge = async () => {\n    setError('')\n    try {\n      const factors = await supabase.auth.mfa.listFactors()\n      if (factors.error) {\n        throw factors.error\n      }\n\n      const phoneFactor = factors.data.phone[0]\n\n      if (!phoneFactor) {\n        throw new Error('No phone factors found!')\n      }\n\n      const factorId = phoneFactor.id\n      setFactorId(factorId)\n      setPhoneNumber(phoneFactor.phone)\n\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n      if (challenge.error) {\n        setError(challenge.error.message)\n        throw challenge.error\n      }\n\n      setChallengeId(challenge.data.id)\n    } catch (error) {\n      setError(error.message)\n    }\n  }\n\n  const verifyCode = async () => {\n    setError('')\n    try {\n      const verify = await supabase.auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      })\n      if (verify.error) {\n        setError(verify.error.message)\n        throw verify.error\n      }\n    } catch (error) {\n      setError(error.message)\n    }\n  }\n\n  return (\n    <>\n      <div>Please enter the code sent to your phone.</div>\n      {phoneNumber && <div>Phone number: {phoneNumber}</div>}\n      {error && <div className=\"error\">{error}</div>}\n      <input\n        type=\"text\"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      {!challengeId ? (\n        <input type=\"button\" value=\"Start Challenge\" onClick={startChallenge} />\n      ) : (\n        <input type=\"button\" value=\"Verify Code\" onClick={verifyCode} />\n      )}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Full Text Search in SQL with PostgreSQL\nDESCRIPTION: SQL query using PostgreSQL's full text search capabilities to find books where the title contains 'Harry'. Uses to_tsvector() and to_tsquery() with the @@ match operator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom books\nwhere to_tsvector(title) @@ to_tsquery('Harry');\n```\n\n----------------------------------------\n\nTITLE: Querying First Row per Group in PostgreSQL\nDESCRIPTION: This SQL query selects the first row for each distinct team from the 'seasons' table, ordered by points in descending order. It uses the DISTINCT ON clause to return a single row per team with the highest points.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/first-row-in-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct\n  on (team) id,\n  team,\n  points\nfrom\n  seasons\norder BY\n  id,\n  points desc,\n  team;\n```\n\n----------------------------------------\n\nTITLE: Implementing InfiniteList Component with Supabase in React\nDESCRIPTION: A reusable component that handles infinite scrolling for Supabase tables. It uses the Intersection Observer API to detect when the user has scrolled to the bottom and automatically fetches the next page of data. The component includes customizable renderers for items, loading states, empty states, and end-of-list messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { cn } from '@/lib/utils'\nimport {\n  SupabaseQueryHandler,\n  SupabaseTableData,\n  SupabaseTableName,\n  useInfiniteQuery,\n} from '@/hooks/use-infinite-query'\nimport * as React from 'react'\n\ninterface InfiniteListProps<TableName extends SupabaseTableName> {\n  tableName: TableName\n  columns?: string\n  pageSize?: number\n  trailingQuery?: SupabaseQueryHandler<TableName>\n  renderItem: (item: SupabaseTableData<TableName>, index: number) => React.ReactNode\n  className?: string\n  renderNoResults?: () => React.ReactNode\n  renderEndMessage?: () => React.ReactNode\n  renderSkeleton?: (count: number) => React.ReactNode\n}\n\nconst DefaultNoResults = () => (\n  <div className=\"text-center text-muted-foreground py-10\">No results.</div>\n)\n\nconst DefaultEndMessage = () => (\n  <div className=\"text-center text-muted-foreground py-4 text-sm\">You&apos;ve reached the end.</div>\n)\n\nconst defaultSkeleton = (count: number) => (\n  <div className=\"flex flex-col gap-2 px-4\">\n    {Array.from({ length: count }).map((_, index) => (\n      <div key={index} className=\"h-4 w-full bg-muted animate-pulse\" />\n    ))}\n  </div>\n)\n\nexport function InfiniteList<TableName extends SupabaseTableName>({\n  tableName,\n  columns = '*',\n  pageSize = 20,\n  trailingQuery,\n  renderItem,\n  className,\n  renderNoResults = DefaultNoResults,\n  renderEndMessage = DefaultEndMessage,\n  renderSkeleton = defaultSkeleton,\n}: InfiniteListProps<TableName>) {\n  const { data, isFetching, hasMore, fetchNextPage, isSuccess } = useInfiniteQuery({\n    tableName,\n    columns,\n    pageSize,\n    trailingQuery,\n  })\n\n  // Ref for the scrolling container\n  const scrollContainerRef = React.useRef<HTMLDivElement>(null)\n\n  // Intersection observer logic - target the last rendered *item* or a dedicated sentinel\n  const loadMoreSentinelRef = React.useRef<HTMLDivElement>(null)\n  const observer = React.useRef<IntersectionObserver | null>(null)\n\n  React.useEffect(() => {\n    if (observer.current) observer.current.disconnect()\n\n    observer.current = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && hasMore && !isFetching) {\n          fetchNextPage()\n        }\n      },\n      {\n        root: scrollContainerRef.current, // Use the scroll container for scroll detection\n        threshold: 0.1, // Trigger when 10% of the target is visible\n        rootMargin: '0px 0px 100px 0px', // Trigger loading a bit before reaching the end\n      }\n    )\n\n    if (loadMoreSentinelRef.current) {\n      observer.current.observe(loadMoreSentinelRef.current)\n    }\n\n    return () => {\n      if (observer.current) observer.current.disconnect()\n    }\n  }, [isFetching, hasMore, fetchNextPage])\n\n  return (\n    <div ref={scrollContainerRef} className={cn('relative h-full overflow-auto', className)}>\n      <div>\n        {isSuccess && data.length === 0 && renderNoResults()}\n\n        {data.map((item, index) => renderItem(item, index))}\n\n        {isFetching && renderSkeleton && renderSkeleton(pageSize)}\n\n        <div ref={loadMoreSentinelRef} style={{ height: '1px' }} />\n\n        {!hasMore && data.length > 0 && renderEndMessage()}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Driver Assignment and Real-time Location Tracking in Flutter\nDESCRIPTION: Flutter implementation for finding nearby drivers and subscribing to real-time updates of driver location and ride status using Supabase streams.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n  Future<void> _findDriver() async {\n    try {\n      final response = await supabase.rpc('find_driver', params: {\n        'origin':\n            'POINT(${_currentLocation!.longitude} ${_currentLocation!.latitude})',\n        'destination':\n            'POINT(${_selectedDestination!.longitude} ${_selectedDestination!.latitude})',\n        'fare': _fare,\n      }) as List<dynamic>;\n\n      if (response.isEmpty) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n                content: Text('No driver found. Please try again later.')),\n          );\n        }\n        return;\n      }\n      String driverId = response.first['driver_id'];\n      String rideId = response.first['ride_id'];\n\n      _driverSubscription = supabase\n          .from('drivers')\n          .stream(primaryKey: ['id'])\n          .eq('id', driverId)\n          .listen((List<Map<String, dynamic>> data) {\n            if (data.isNotEmpty) {\n              setState(() {\n                _driver = Driver.fromJson(data[0]);\n              });\n              _updateDriverMarker(_driver!);\n              _adjustMapView(\n                  target: _appState == AppState.waitingForPickup\n                      ? _currentLocation!\n                      : _selectedDestination!);\n            }\n          });\n\n      _rideSubscription = supabase\n          .from('rides')\n          .stream(primaryKey: ['id'])\n          .eq('id', rideId)\n          .listen((List<Map<String, dynamic>> data) {\n            if (data.isNotEmpty) {\n              setState(() {\n                final ride = Ride.fromJson(data[0]);\n                if (ride.status == RideStatus.riding &&\n                    _appState != AppState.riding) {\n                  _appState = AppState.riding;\n                } else if (ride.status == RideStatus.completed &&\n                    _appState != AppState.postRide) {\n                  _appState = AppState.postRide;\n                  _cancelSubscriptions();\n                  _showCompletionModal();\n                }\n              });\n            }\n          });\n\n      _goToNextState();\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error: ${e.toString()}')),\n        );\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables and Functions in SQL for Supabase Trello Clone\nDESCRIPTION: This SQL script creates tables for boards, lists, cards, users, and user_boards. It also defines a function to get boards for authenticated users and sets up replica identity for realtime functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndrop table if exists user_boards;\ndrop table if exists cards;\ndrop table if exists lists;\ndrop table if exists boards;\ndrop table if exists users;\n\n-- Create boards table\ncreate table boards (\n  id bigint generated by default as identity primary key,\n  creator uuid references auth.users not null default auth.uid(),\n  title text default 'Untitled Board',\n  created_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n\n-- Create lists table\ncreate table lists (\n  id bigint generated by default as identity primary key,\n  board_id bigint references boards ON DELETE CASCADE not null,\n  title text default '',\n  position int not null default 0,\n  created_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n\n-- Create Cards table\ncreate table cards (\n  id bigint generated by default as identity primary key,\n  list_id bigint references lists ON DELETE CASCADE not null,\n  board_id bigint references boards ON DELETE CASCADE not null,\n  position int not null default 0,\n  title text default '',\n  description text check (char_length(description) > 0),\n  assigned_to uuid references auth.users,\n  done boolean default false,\n  created_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n\n-- Many to many table for user <-> boards relationship\ncreate table user_boards (\n  id bigint generated by default as identity primary key,\n  user_id uuid references auth.users ON DELETE CASCADE not null default auth.uid(),\n  board_id bigint references boards ON DELETE CASCADE\n);\n\n-- User ID lookup table\ncreate table users (\n  id uuid not null primary key,\n  email text\n);\n\n-- Make sure deleted records are included in realtime\nalter table cards replica identity full;\nalter table lists replica identity full;\n\n-- Function to get all user boards\ncreate or replace function get_boards_for_authenticated_user()\nreturns setof bigint\nlanguage sql\nsecurity definer\nset search_path = ''\nstable\nas $$\n    select board_id\n    from public.user_boards\n    where user_id = auth.uid()\n$$;\n```\n\n----------------------------------------\n\nTITLE: Calculating RRF Score with Math Formula\nDESCRIPTION: Mathematical formula showing how to calculate the Reciprocal Ranked Fusion score for a record that appears in both keyword and semantic search results.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\dfrac{1}{3} + \\dfrac{1}{9} = 0.444\n```\n\n----------------------------------------\n\nTITLE: Importing JSR Module\nDESCRIPTION: Example of importing a module from JSR (JavaScript Registry) using the jsr: specifier.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'jsr:@std/path@1.0.8'\n```\n\n----------------------------------------\n\nTITLE: Setting Table-Level Permissions\nDESCRIPTION: Example of granting specific CRUD permissions on tables within the api schema to different user roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/hardening-data-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ngrant select on table api.<your_table> to anon;\ngrant select, insert, update, delete on table api.<your_table> to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Reindexing a Single Index Concurrently in PostgreSQL\nDESCRIPTION: Rebuilds a specific index without blocking concurrent operations. This is useful for maintaining index performance over time without locking the table for writes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nreindex index concurrently idx_persons_age;\n```\n\n----------------------------------------\n\nTITLE: Implementing HyperLogLog for Tracking Post Views in PostgreSQL\nDESCRIPTION: SQL script that adds a HyperLogLog column to the posts table for probabilistic counting of unique viewers. This approach uses the citus/postgresql-hll extension to efficiently track large numbers of unique viewers with a small memory footprint.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nCREATE EXTENSION IF NOT EXISTS hll;\n\nALTER TABLE posts ADD COLUMN seen_count_hll hll\n  NOT NULL DEFAULT hll_empty();\n\nCOMMENT ON COLUMN posts.seen_count_hll\n  IS 'HyperLogLog storing user IDs';\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket using JavaScript in Supabase Storage\nDESCRIPTION: This JavaScript snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It utilizes the `supabase.storage.createBucket()` method to create a bucket named 'avatars'. The function returns a promise that resolves with the data or an error if the operation fails.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the JS library to create a bucket.\n\nconst { data, error } = await supabase.storage.createBucket('avatars')\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions with Embedded Resources in Supabase.js\nDESCRIPTION: This snippet shows how to use aggregate functions with embedded resources to find the newest and oldest movie years for each director using the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst { data, error } = await supabase.from('directors').select(`name,\n\t\tmovies(\n\t\t\tnewest_movie_year:release_year.max(),\n\t\t\toldest_movie_year:release_year.min()\n\t\t)`)\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Supabase CLI\nDESCRIPTION: Demonstrates how to use the Supabase CLI to generate TypeScript types for your database schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase gen types typescript --local > DatabaseDefinitions.ts\n```\n\n----------------------------------------\n\nTITLE: Minimal JWT Access Token Hook\nDESCRIPTION: SQL function that implements a minimal JWT token hook to only include essential claims and reduce token size. Uses Postgres JSON functions to manipulate claims.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\n  declare\n    original_claims jsonb;\n    new_claims jsonb;\n    claim text;\n  begin\n    original_claims = event->'claims';\n    new_claims = '{}'::jsonb;\n\n    foreach claim in array array[\n      -- add claims you want to keep here\n      'iss',\n      'aud', \n      'exp',\n      'iat',\n      'sub',\n      'role',\n      'aal',\n      'session_id'\n   ] loop\n      if original_claims ? claim then\n        -- original_claims contains one of the listed claims, set it on new_claims\n        new_claims = jsonb_set(new_claims, array[claim], original_claims->claim);\n      end if;\n    end loop;\n\n    return jsonb_build_object('claims', new_claims);\n  end\n$$;\n```\n\n----------------------------------------\n\nTITLE: Listening for Postgres Changes with Supabase Realtime JavaScript\nDESCRIPTION: This snippet shows how to listen for Postgres database changes using Supabase Realtime.  It creates a channel and then uses the `on` method to subscribe to 'postgres_changes' events for a specific schema. The code requires a Supabase client initialized with the project URL and API key, and appropriate Row Level Security policies set up in the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst allChanges = supabase\n  .channel('schema-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: '*',\n      schema: 'public',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client and Setting Custom JWT in JavaScript\nDESCRIPTION: This JavaScript snippet initializes a Supabase client and then sets a custom JWT for Realtime authentication. The `setAuth` method is used to provide the custom token. A Realtime channel is then set up to listen for Postgres changes on a specific table with a filter applied, and then subscribed to.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_49\n\nLANGUAGE: js\nCODE:\n```\nconst { createClient } = require('@supabase/supabase-js')\n\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY, {})\n\n// Set your custom JWT here\nsupabase.realtime.setAuth('your-custom-jwt')\n\nconst channel = supabase\n  .channel('db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: '*',\n      schema: 'public',\n      table: 'messages',\n      filter: 'body=eq.bye',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client with Custom Storage (Cookies) in Typescript\nDESCRIPTION: This code snippet demonstrates how to override the default storage mechanism of the Supabase client to use a custom storage object, typically for storing tokens in cookies on the server-side. It uses the `createClient` function from `@supabase/supabase-js` and configures the `auth.storage` option with a custom object that implements `getItem`, `setItem`, and `removeItem` methods, mimicking the `Storage` interface. This is suitable for server-side applications where HTTP-only cookies are desired.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('SUPABASE_URL', 'SUPABASE_ANON_KEY', {\n  auth: {\n    storage: {\n      getItem: () => {\n        return Promise.resolve('FETCHED_COOKIE')\n      },\n      setItem: () => {},\n      removeItem: () => {},\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Basic Aggregate Functions with cURL in PostgREST\nDESCRIPTION: This snippet demonstrates how to use max() and min() aggregate functions on the release_year column from a movies table using a cURL request to the PostgREST API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://postgrest/movies?select=release_year.max(),release_year.min()'\n```\n\n----------------------------------------\n\nTITLE: Creating a Table for Storing Vectors in PostgreSQL\nDESCRIPTION: SQL command to create a table named 'posts' with a vector column for storing embeddings. The vector column is defined with a dimension of 384.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table posts (\n  id serial primary key,\n  title text not null,\n  body text not null,\n  embedding vector(384)\n);\n```\n\n----------------------------------------\n\nTITLE: Dropping a Trigger in PostgreSQL\nDESCRIPTION: This SQL command demonstrates how to remove an existing trigger from a table. It uses the 'DROP TRIGGER' statement to delete a trigger named 'trigger_name' from 'table_name'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ndrop trigger \"trigger_name\" on \"table_name\";\n```\n\n----------------------------------------\n\nTITLE: Image Embedding Generation and Storage\nDESCRIPTION: Python function to create embeddings for images using CLIP model and store them in Supabase Vector\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef seed():\n    # create vector store client\n    vx = vecs.create_client(DB_CONNECTION)\n\n    # create a collection of vectors with 3 dimensions\n    images = vx.get_or_create_collection(name=\"image_vectors\", dimension=512)\n\n    # Load CLIP model\n    model = SentenceTransformer('clip-ViT-B-32')\n\n    # Encode an image:\n    img_emb1 = model.encode(Image.open('./images/one.jpg'))\n    img_emb2 = model.encode(Image.open('./images/two.jpg'))\n    img_emb3 = model.encode(Image.open('./images/three.jpg'))\n    img_emb4 = model.encode(Image.open('./images/four.jpg'))\n\n    # add records to the *images* collection\n    images.upsert(\n        records=[\n            (\n                \"one.jpg\",        # the vector's identifier\n                img_emb1,          # the vector. list or np.array\n                {\"type\": \"jpg\"}   # associated  metadata\n            ), (\n                \"two.jpg\",\n                img_emb2,\n                {\"type\": \"jpg\"}\n            ), (\n                \"three.jpg\",\n                img_emb3,\n                {\"type\": \"jpg\"}\n            ), (\n                \"four.jpg\",\n                img_emb4,\n                {\"type\": \"jpg\"}\n            )\n        ]\n    )\n    print(\"Inserted images\")\n\n    # index the collection for fast search performance\n    images.create_index()\n    print(\"Created index\")\n```\n\n----------------------------------------\n\nTITLE: Creating Planet Insert Function with Parameters\nDESCRIPTION: Creates a PL/pgSQL function that accepts a name parameter, inserts a new planet into the planets table, and returns the new planet's ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function add_planet(name text)\nreturns bigint\nlanguage plpgsql\nas $$\ndeclare\n  new_row bigint;\nbegin\n  insert into planets(name)\n  values (add_planet.name)\n  returning id into new_row;\n\n  return new_row;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling the HTTP Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable the 'http' extension within a separate schema and to disable it if needed. Creating the extension in a separate schema helps keep the 'public' schema clean.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/http.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"http\" extension\ncreate extension http with schema extensions;\n\n-- Example: disable the \"http\" extension\ndrop extension if exists http;\n```\n\n----------------------------------------\n\nTITLE: Initiating Password Reset in Kotlin with Supabase\nDESCRIPTION: Kotlin implementation to initiate a password reset flow by sending a recovery email using the Supabase GoTrue client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nsupabase.gotrue.sendRecoveryEmail(\n    email = \"valid.email@supabase.io\",\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Maintenance Work Memory for Indexing\nDESCRIPTION: SQL command to increase the maintenance_work_mem parameter, which controls the maximum memory allocation for operations like indexing. This can significantly improve index creation performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nset maintenance_work_mem to <several Gb's>; -- '#GB'\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Audit Tracking Implementation Functions\nDESCRIPTION: Core implementation of enable_tracking and disable_tracking functions that manage audit triggers. The enable_tracking function creates a trigger for insert, update, and delete operations, while disable_tracking removes the trigger. Includes validation for primary key requirement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function audit.enable_tracking(regclass)\n    returns void\n    volatile\n    security definer\n    language plpgsql\nas $$\ndeclare\n    statement_row text = format('\n        create trigger audit_i_u_d\n            before insert or update or delete\n            on %I\n            for each row\n            execute procedure audit.insert_update_delete_trigger();',\n        $1\n    );\n\n    pkey_cols text[] = audit.primary_key_columns($1);\nbegin\n    if pkey_cols = array[]::text[] then\n        raise exception 'Table % can not be audited because it has no primary key', $1;\n    end if;\n\n    if not exists(select 1 from pg_trigger where tgrelid = $1 and tgname = 'audit_i_u_d') then\n        execute statement_row;\n    end if;\nend;\n$$;\n\ncreate or replace function audit.disable_tracking(regclass)\n    returns void\n    volatile\n    security definer\n    language plpgsql\nas $$\ndeclare\n    statement_row text = format(\n        'drop trigger if exists audit_i_u_d on %I;',\n        $1\n    );\nbegin\n    execute statement_row;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware in TypeScript\nDESCRIPTION: TypeScript version of the Next.js middleware for Supabase authentication with type safety.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\n\nimport type { NextRequest } from 'next/server'\nimport type { Database } from '@/lib/database.types'\n\nexport async function middleware(req: NextRequest) {\n  const res = NextResponse.next()\n\n  // Create a Supabase client configured to use cookies\n  const supabase = createMiddlewareClient<Database>({ req, res })\n\n  // Refresh session if expired - required for Server Components\n  await supabase.auth.getSession()\n\n  return res\n}\n\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Unenrolling MFA Factor with Supabase JS Client\nDESCRIPTION: Example of how to unenroll an MFA factor using the Supabase JavaScript client. The code initializes a Supabase client and calls the unenroll method with a factor ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nsupabase.auth.mfa.unenroll({ factorId: 'd30fd651-184e-4748-a928-0a4b9be1d429' })\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Realtime Channel with JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a Supabase Realtime client and create a channel with a specific topic.  The channel object can then be used to send and receive messages. The code imports the `createClient` function from `@supabase/supabase-js` to establish a connection with your Supabase project using the project URL and anon key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n\nconst roomOne = supabase.channel('room-one') // set your topic here\n```\n\n----------------------------------------\n\nTITLE: Identity Column Creation in Postgres 10+\nDESCRIPTION: Shows the standards-compliant way to create auto-incrementing columns using IDENTITY\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE (\n  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  email citext NOT NULL CHECK (LENGTH(email) < 255),\n  name text NOT NULL\n)\n```\n\n----------------------------------------\n\nTITLE: Listening only to 'INSERT' events in Python\nDESCRIPTION: This Python snippet configures a Supabase client to listen only for INSERT events in the 'public' schema. It uses the channel to bind a callback that logs specific changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nchanges = supabase.channel('schema-db-changes').on_postgres_changes(\n  \"INSERT\", # Listen only to INSERTs\n  schema=\"public\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Signing Out with Supabase JavaScript\nDESCRIPTION: This JavaScript code provides a method for signing out users from a Supabase project using the `signOut` function. It clears the user session from the browser and localStorage. Ensure the `@supabase/supabase-js` library is installed and configured.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Pre-Request Function\nDESCRIPTION: Implements a pre-request function that checks if an IP has made more than 100 requests in the last 5 minutes. Only applies to modifying requests (POST, PUT, PATCH, DELETE).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.check_request()\n  returns void\n  language plpgsql\n  security definer\n  as $$\ndeclare\n  req_method text := current_setting('request.method', true);\n  req_ip inet := split_part(\n    current_setting('request.headers', true)::json->>'x-forwarded-for',\n    ',', 1)::inet;\n  count_in_five_mins integer;\nbegin\n  if req_method = 'GET' or req_method = 'HEAD' or req_method is null then\n    -- rate limiting can't be done on GET and HEAD requests\n    return;\n  end if;\n\n  select\n    count(*) into count_in_five_mins\n  from private.rate_limits\n  where\n    ip = req_ip and request_at between now() - interval '5 minutes' and now();\n\n  if count_in_five_mins > 100 then\n    raise sqlstate 'PGRST' using\n      message = json_build_object(\n        'message', 'Rate limit exceeded, try again after a while')::text,\n      detail = json_build_object(\n        'status',  420,\n        'status_text', 'Enhance Your Calm')::text;\n  end if;\n\n  insert into private.rate_limits (ip, request_at) values (req_ip, now());\nend;\n  $$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Logging\nDESCRIPTION: Example of implementing different logging severity levels in PostgreSQL functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate function logging_example(\n  log_message text,\n  warning_message text,\n  error_message text\n)\nreturns void\nlanguage plpgsql\nas $$\nbegin\n  raise log 'logging message: %', log_message;\n  raise warning 'logging warning: %', warning_message;\n\n  -- immediately ends function and reverts transaction\n  raise exception 'logging error: %', error_message;\nend;\n$$;\n\nselect logging_example('LOGGED MESSAGE', 'WARNING MESSAGE', 'ERROR MESSAGE');\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Bucket Storage Size\nDESCRIPTION: SQL query to aggregate and list total storage size for each bucket in megabytes, sorted in descending order\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-size.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    bucket_id,\n    (sum((metadata->>'size')::int) / 1048576.0)::numeric(10, 2) as total_size_megabyte\nfrom\n    storage.objects\ngroup by\n    bucket_id\norder by\n    total_size_megabyte desc;\n```\n\n----------------------------------------\n\nTITLE: Resetting PostgreSQL Sequence Value\nDESCRIPTION: SQL command to reset a sequence to the next available value after the maximum existing primary key value in the table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inserting-into-sequenceserial-table-causes-duplicate-key-violates-unique-constraint-error-pi6DnC.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SETVAL('public.<table_name>_<column_nam>_seq', (SELECT MAX(<column_name>) FROM <table_name>)+1);\n```\n\n----------------------------------------\n\nTITLE: Raising Custom HTTP Error Response\nDESCRIPTION: SQL code that demonstrates how to raise a custom HTTP error response with status code, custom message, hint, and additional headers from within a security function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nraise sqlstate 'PGRST' using\n  message = json_build_object(\n    'code',    '123',\n    'message', 'Payment Required',\n    'details', 'Quota exceeded',\n    'hint',    'Upgrade your plan')::text,\n  detail = json_build_object(\n    'status',  402,\n    'headers', json_build_object(\n      'X-Powered-By', 'Nerd Rage'))::text;\n```\n\n----------------------------------------\n\nTITLE: RLS Policies for Anonymous Users in Supabase\nDESCRIPTION: Creates SQL row-level security policies that differentiate between anonymous and permanent users. Uses the 'is_anonymous' JWT claim to restrict certain operations (like posting) while allowing others (like viewing).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Only permanent users can post to the news feed\"\non news_feed as restrictive for insert\nto authenticated\nwith check ((select (auth.jwt()->>'is_anonymous')::boolean) is false );\n\ncreate policy \"Anonymous and permanent users can view the news feed\"\non news_feed for select\nto authenticated\nusing ( true );\n```\n\n----------------------------------------\n\nTITLE: Listening to UPDATE Events in Kotlin with Supabase Realtime\nDESCRIPTION: Sets up a Kotlin channel to listen for UPDATE events in the public schema of a Supabase database. The code creates a flow of PostgresAction.Update events and processes them in a coroutine scope.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\")\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Inserting Role Permissions in SQL\nDESCRIPTION: SQL commands to insert role permissions for admin and moderator roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into public.role_permissions (role, permission)\nvalues\n  ('admin', 'channels.delete'),\n  ('admin', 'messages.delete'),\n  ('moderator', 'messages.delete');\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Column Search Function\nDESCRIPTION: SQL function that concatenates title and description columns for full text search capability\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\ncreate function title_description(books) returns text as $$\n  select $1.title || ' ' || $1.description;\n$$ language sql immutable;\n```\n\n----------------------------------------\n\nTITLE: Setting Refreshed JWT Token in Swift\nDESCRIPTION: This Swift snippet demonstrates setting a refreshed JWT token for Supabase Realtime authentication using the `setAuth` method. This assumes that supabase client has already been initialised.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_56\n\nLANGUAGE: swift\nCODE:\n```\nawait supabase.realtime.setAuth(\"fresh-token\")\n```\n\n----------------------------------------\n\nTITLE: Signing in with Email and Password using Supabase in Python\nDESCRIPTION: This snippet shows how to sign in a user with their email and password using the Supabase Python client. It uses the sign_in_with_password() method from the auth module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndata = client.auth.sign_in_with_password({\n  'email': 'valid.email@supabase.io',\n  'password': 'example-password',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables\nDESCRIPTION: Environment variable configuration for connecting your Next.js app to Supabase. These variables should be placed in the .env.local file with your project's URL and anonymous key from the Supabase dashboard.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=your-project-url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\n```\n\n----------------------------------------\n\nTITLE: Importing Database to Supabase Using psql\nDESCRIPTION: This snippet illustrates how to import the previously exported database file into the Supabase project using the psql command. It provides a straightforward method to migrate data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/neon.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npsql -d \"$NEW_DB_URL\" -f dump.sql\n```\n\n----------------------------------------\n\nTITLE: Listening to Multiple Changes in Dart with Supabase Realtime\nDESCRIPTION: Creates a Dart channel that listens to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('db-changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.all,\n        schema: 'public',\n        table: 'messages',\n        callback: (payload) => print(payload))\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        table: 'users',\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Creating Star Wars Database Schema\nDESCRIPTION: Creates sample tables for planets and people with Star Wars data, including primary keys and foreign key relationships.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table planets (\n  id serial primary key,\n  name text\n);\n\ninsert into planets\n  (id, name)\nvalues\n  (1, 'Tattoine'),\n  (2, 'Alderaan'),\n  (3, 'Kashyyyk');\n\ncreate table people (\n  id serial primary key,\n  name text,\n  planet_id bigint references planets\n);\n\ninsert into people\n  (id, name, planet_id)\nvalues\n  (1, 'Anakin Skywalker', 1),\n  (2, 'Luke Skywalker', 1),\n  (3, 'Princess Leia', 2),\n  (4, 'Chewbacca', 3);\n```\n\n----------------------------------------\n\nTITLE: Creating Team-Based RLS Policy with JWT\nDESCRIPTION: Creates a policy that checks if a user belongs to a team by accessing the teams array stored in app_metadata through auth.jwt().\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"User is in team\"\non my_table\nto authenticated\nusing ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migration File\nDESCRIPTION: Command to generate a migration file from local database changes using the Supabase CLI db diff feature.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db diff -f \"add_employees_table\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Supabase Auth Helper Packages\nDESCRIPTION: This snippet shows how to uninstall Supabase Auth Helper packages for different frameworks, preparing for migration to the SSR package. It is necessary to remove existing packages before installing the SSR package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/migrating-to-ssr-from-auth-helpers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @supabase/auth-helpers-nextjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @supabase/auth-helpers-sveltekit\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @supabase/auth-helpers-remix\n```\n\n----------------------------------------\n\nTITLE: Scheduling Daily Vacuum in Supabase\nDESCRIPTION: This SQL snippet schedules a daily vacuum operation at 3:00 AM (GMT) using the cron.schedule function. It demonstrates how to schedule a maintenance task in Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.schedule('nightly-vacuum', '0 3 * * *', 'VACUUM');\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data in Edge Function\nDESCRIPTION: Shows how to fetch and return user data from an authenticated Supabase Edge Function request.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nDeno.serve(async (req: Request) => {\n\n  const supabaseClient = createClient(\n    Deno.env.get('SUPABASE_URL') ?? '',\n    Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n  )\n\n  // Get the session or user object\n  const authHeader = req.headers.get('Authorization')!\n  const token = authHeader.replace('Bearer ', '')\n  const { data } = await supabaseClient.auth.getUser(token)\n  const user = data.user\n\n  return new Response(JSON.stringify({ user }), {\n    headers: { 'Content-Type': 'application/json' },\n    status: 200,\n  })\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policies for Authorized Delete Access\nDESCRIPTION: SQL commands to create Row Level Security policies for authorized delete access on channels and messages tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow authorized delete access\" on public.channels for delete to authenticated using ( (SELECT authorize('channels.delete')) );\ncreate policy \"Allow authorized delete access\" on public.messages for delete to authenticated using ( (SELECT authorize('messages.delete')) );\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_net Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable or disable the pg_net extension in PostgreSQL. When enabled, the extension creates its own schema/namespace named 'net' to avoid naming conflicts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"pg_net\" extension.\ncreate extension pg_net;\n-- Note: The extension creates its own schema/namespace named \"net\" to avoid naming conflicts.\n\n-- Example: disable the \"pg_net\" extension\ndrop extension if exists pg_net;\ndrop schema net;\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL from SQL in Supabase\nDESCRIPTION: Demonstrates how to execute a GraphQL query using the graphql.resolve function within a SQL statement. This query retrieves account information including nested address data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect graphql.resolve($$\n    {\n      accountCollection(first: 1) {\n        edges {\n          node {\n            id\n            firstName\n            address {\n              countryCode\n            }\n          }\n        }\n      }\n    }\n$$);\n```\n\n----------------------------------------\n\nTITLE: Filtering Supabase Realtime with 'Contained in List' (in) Operator\nDESCRIPTION: Examples of using the 'in' filter to listen for changes when a column's value equals any of the specified values in a list. This uses Postgres's '= ANY' operator and allows up to 100 values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'colors',\n      filter: 'name=in.(red, blue, yellow)',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        table: 'colors',\n        filter: PostgresChangeFilter(\n          type: PostgresChangeFilterType.lte,\n          column: 'name',\n          value: ['red', 'blue', 'yellow'],\n        ),\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"products\",\n  filter: .in(\"name\", values: [\"red\", \"blue\", \"yellow\"])\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"products\"\n    filter = \"name=in.(red, blue, yellow)\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"UPDATE\",\n  schema=\"public\",\n  table=\"products\",\n  filter=\"name=in.(red, blue, yellow)\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Service in Angular\nDESCRIPTION: Creating a SupabaseService to initialize the Supabase client and implement methods for authentication and profile management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core'\nimport {\n  AuthChangeEvent,\n  AuthSession,\n  createClient,\n  Session,\n  SupabaseClient,\n  User,\n} from '@supabase/supabase-js'\nimport { environment } from '../environments/environment'\n\nexport interface Profile {\n  id?: string\n  username: string\n  website: string\n  avatar_url: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient\n  _session: AuthSession | null = null\n\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n  }\n\n  get session() {\n    this.supabase.auth.getSession().then(({ data }) => {\n      this._session = data.session\n    })\n    return this._session\n  }\n\n  profile(user: User) {\n    return this.supabase\n      .from('profiles')\n      .select(`username, website, avatar_url`)\n      .eq('id', user.id)\n      .single()\n  }\n\n  authChanges(callback: (event: AuthChangeEvent, session: Session | null) => void) {\n    return this.supabase.auth.onAuthStateChange(callback)\n  }\n\n  signIn(email: string) {\n    return this.supabase.auth.signInWithOtp({ email })\n  }\n\n  signOut() {\n    return this.supabase.auth.signOut()\n  }\n\n  updateProfile(profile: Profile) {\n    const update = {\n      ...profile,\n      updated_at: new Date(),\n    }\n\n    return this.supabase.from('profiles').upsert(update)\n  }\n\n  downLoadImage(path: string) {\n    return this.supabase.storage.from('avatars').download(path)\n  }\n\n  uploadAvatar(filePath: string, file: File) {\n    return this.supabase.storage.from('avatars').upload(filePath, file)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing in with Magic Link using Kotlin\nDESCRIPTION: Shows the process for signing in with a Magic Link using Kotlin in Supabase. Input required is the user's email address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signInWithEmail() {\n\tsupabase.auth.signInWith(OTP) {\n\t\temail = \"valid.email@supabase.io\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Time-Series Data\nDESCRIPTION: Example of inserting temperature readings from multiple sensors with timestamps into the hypertable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/timescaledb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into temperatures (time, sensor_id, temperature)\nvalues\n    ('2023-02-14 09:00:00', 1, 23.5),\n    ('2023-02-14 09:00:00', 2, 21.2),\n    ('2023-02-14 09:05:00', 1, 24.5),\n    ('2023-02-14 09:05:00', 2, 22.3),\n    ('2023-02-14 09:10:00', 1, 25.1),\n    ('2023-02-14 09:10:00', 2, 23.9),\n    ('2023-02-14 09:15:00', 1, 24.9),\n    ('2023-02-14 09:15:00', 2, 22.7),\n    ('2023-02-14 09:20:00', 1, 24.7),\n    ('2023-02-14 09:20:00', 2, 23.5);\n```\n\n----------------------------------------\n\nTITLE: Granting Service Role Table Access\nDESCRIPTION: SQL command to grant select privileges on auth.users table to the service_role for administrative tasks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ngrant\nselect\n  on table auth.users to service_role;\n```\n\n----------------------------------------\n\nTITLE: Signing In with Twitter OAuth - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Supabase JavaScript client to initiate the Twitter OAuth flow. It imports the createClient function, initializes the Supabase client, and then calls signInWithOAuth with 'twitter' as the provider. The function returns a data and error object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signInWithTwitter() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema for Supabase Postgres\nDESCRIPTION: Prisma schema configuration to use Supabase Postgres database connection environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Authenticated User Uploads in SQL\nDESCRIPTION: This example shows how to create a policy that allows authenticated users to upload files to a folder named 'private' using the storage.foldername() function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/helper-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow authenticated uploads\"\non storage.objects\nfor insert\nto authenticated\nwith check (\n  (storage.foldername(name))[1] = 'private'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RLS Policies for SupaSecureSlack in SQL\nDESCRIPTION: SQL commands to create Row Level Security (RLS) policies for the public schema tables and the realtime.messages table. These policies control user access to rooms and Broadcast/Presence functionality based on entries in the rooms_users table.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"authenticated can view all profiles\"\nON \"public\".\"profiles\"\nAS PERMISSIVE FOR SELECT\nTO authenticated\nUSING (true);\n\nCREATE POLICY \"supabase_auth_admin can insert profile\"\nON \"public\".\"profiles\"\nAS PERMISSIVE FOR INSERT\nTO supabase_auth_admin\nWITH CHECK (true);\n\nCREATE POLICY \"authenticated can read rooms\"\nON \"public\".\"rooms\"\nAS PERMISSIVE FOR SELECT\nTO authenticated\nUSING (TRUE);\n\nCREATE POLICY \"authenticated can add rooms\"\nON \"public\".\"rooms\"\nAS PERMISSIVE FOR INSERT\nTO authenticated\nWITH CHECK (TRUE);\n\nCREATE POLICY \"authenticated can read rooms_users\"\nON \"public\".\"rooms_users\"\nAS PERMISSIVE FOR SELECT\nTO authenticated\nUSING (TRUE);\n\nCREATE POLICY \"authenticated can add rooms_users\"\nON \"public\".\"rooms_users\"\nAS PERMISSIVE FOR INSERT\nTO authenticated\nWITH CHECK (TRUE);\n\nCREATE POLICY \"authenticated can read broadcast and presence state\"\nON \"realtime\".\"messages\"\nAS PERMISSIVE FOR SELECT\nTO authenticated\nUSING (\n  EXISTS (\n    SELECT 1\n    FROM public.rooms_users\n    WHERE user_id = (select auth.uid())\n    AND room_topic = realtime.topic()\n    AND realtime.messages.extension in ('broadcast', 'presence')\n  )\n);\n\nCREATE POLICY \"authenticated can send broadcast and track presence\"\nON \"realtime\".\"messages\"\nAS PERMISSIVE FOR INSERT\nTO authenticated\nWITH CHECK (\n  EXISTS (\n    SELECT 1\n    FROM public.rooms_users\n    WHERE user_id = (select auth.uid())\n    AND room_topic = realtime.topic()\n    AND realtime.messages.extension in ('broadcast', 'presence')\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Supabase Login (CLI)\nDESCRIPTION: This command logs in to the Supabase CLI using a Personal Access Token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsupabase login\n```\n\n----------------------------------------\n\nTITLE: Making a Supabase API request using curl with Anon Key\nDESCRIPTION: This bash code snippet demonstrates how to make a request to a Supabase database using the `curl` command-line tool. It sends a `GET` request to retrieve the `name` column from the `colors` table. It uses the `anon key` in the `apikey` header for authentication. The URL and API key are specific to a Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \\\n-H \"apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Role in Supabase Storage\nDESCRIPTION: This SQL snippet demonstrates how to create a new role named 'manager' and grant role-based permissions for access control using Supabase Storage. It also shows granting the newly created role to existing roles, 'authenticator' and 'anon', to ensure proper access rights.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate role 'manager';\n\n-- Important to grant the role to the authenticator and anon role\ngrant manager to authenticator;\ngrant anon to manager;\n```\n\n----------------------------------------\n\nTITLE: Move object across buckets using Supabase\nDESCRIPTION: Moves an object from one bucket to another using the Supabase storage API. This snippet demonstrates how to specify the destination bucket using the `destinationBucket` option. The original object is deleted after the move. Requires `@supabase/supabase-js` and a valid Supabase client instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nawait supabase.storage.from('avatars').move('public/avatar1.png', 'private/avatar2.png', {\n  destinationBucket: 'avatars2',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Type for Uploads in Supabase Storage with Python\nDESCRIPTION: This snippet shows how to specify the content type when uploading a file to Supabase Storage using Python. It uses the 'content-type' option to set the MIME type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.storage.from_('bucket_name').upload('file_path', file, {\n  'content-type': 'image/jpeg',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Documents Table with Full-text and Vector Search Columns\nDESCRIPTION: SQL code to create a documents table with columns for content, full-text search (tsvector), and semantic search (vector). Includes auto-generated ID and computed columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id bigint primary key generated always as identity,\n  content text,\n  fts tsvector generated always as (to_tsvector('english', content)) stored,\n  embedding vector(512)\n);\n```\n\n----------------------------------------\n\nTITLE: Partial Search Implementation\nDESCRIPTION: SQL query demonstrating partial text search using the :* syntax with to_tsquery\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nselect title from books where to_tsvector(title) @@ to_tsquery('Lit:*');\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component in Account Component Template\nDESCRIPTION: This HTML snippet shows how to integrate the AvatarComponent within the AccountComponent's form, allowing users to update their profile picture.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"updateProfileForm\" (ngSubmit)=\"updateProfile()\" class=\"form-widget\">\n  <app-avatar [avatarUrl]=\"this.avatarUrl\" (upload)=\"updateAvatar($event)\"> </app-avatar>\n  <!-- input fields -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Flutter\nDESCRIPTION: Configuration code to initialize Supabase client with custom URL and anonymous key. Sets up realtime client options with 40 events per second for game synchronization.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/flutter-multiplayer-shooting-game/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  await Supabase.initialize(\n    url: 'supabaseUrl',\n    anonKey: 'supabaseAnonKey',\n    realtimeClientOptions: const RealtimeClientOptions(eventsPerSecond: 40),\n  );\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading a file using JavaScript in Supabase Storage\nDESCRIPTION: This JavaScript snippet demonstrates how to upload a file to Supabase Storage. It retrieves a file from an event target (`event.target.files[0]`), and then uploads it to the 'avatars' bucket with the path 'public/avatar1.png' using the `supabase.storage.from('avatars').upload()` method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst avatarFile = event.target.files[0]\nconst { data, error } = await supabase.storage\n  .from('avatars')\n  .upload('public/avatar1.png', avatarFile)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Edge Function with Supabase CLI\nDESCRIPTION: Command to create a new Edge Function named 'embed' using the Supabase CLI. This function will be responsible for generating vector embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new embed\n```\n\n----------------------------------------\n\nTITLE: Configuring View Security in PostgreSQL\nDESCRIPTION: Demonstrates how to modify view security settings using security_invoker and how to create a new view with security_invoker enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- alter a security_definer view to be security_invoker\nalter view <view name>\nset (security_invoker = true);\n\n-- create a view with the security_invoker modifier\ncreate view <view name> with(security_invoker=true) as (\n  select * from <some table>\n);\n```\n\n----------------------------------------\n\nTITLE: Listening to Multiple Changes in Swift with Supabase Realtime\nDESCRIPTION: Uses Swift to create a channel that listens to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet messageChanges = await myChannel.postgresChange(AnyAction.self, schema: \"public\", table: \"messages\")\nlet userChanges = await myChannel.postgresChange(InsertAction.self, schema: \"public\", table: \"users\")\n\nawait myChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing an Edge Function for Vector Embedding Generation with OpenAI\nDESCRIPTION: Complete implementation of an Edge Function that processes embedding generation jobs. It connects to OpenAI's API to generate embeddings for database content and updates the corresponding rows in the database. The function handles multiple jobs, tracks successes and failures, and manages a job queue.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Setup type definitions for built-in Supabase Runtime APIs\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\n\n// We'll use the OpenAI API to generate embeddings\nimport OpenAI from 'jsr:@openai/openai'\n\nimport { z } from 'npm:zod'\n\n// We'll make a direct Postgres connection to update the document\nimport postgres from 'https://deno.land/x/postgresjs@v3.4.5/mod.js'\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  // We'll need to manually set the `OPENAI_API_KEY` environment variable\n  apiKey: Deno.env.get('OPENAI_API_KEY'),\n})\n\n// Initialize Postgres client\nconst sql = postgres(\n  // `SUPABASE_DB_URL` is a built-in environment variable\n  Deno.env.get('SUPABASE_DB_URL')!\n)\n\nconst jobSchema = z.object({\n  jobId: z.number(),\n  id: z.number(),\n  schema: z.string(),\n  table: z.string(),\n  contentFunction: z.string(),\n  embeddingColumn: z.string(),\n})\n\nconst failedJobSchema = jobSchema.extend({\n  error: z.string(),\n})\n\ntype Job = z.infer<typeof jobSchema>\ntype FailedJob = z.infer<typeof failedJobSchema>\n\ntype Row = {\n  id: string\n  content: unknown\n}\n\nconst QUEUE_NAME = 'embedding_jobs'\n\n// Listen for HTTP requests\nDeno.serve(async (req) => {\n  if (req.method !== 'POST') {\n    return new Response('expected POST request', { status: 405 })\n  }\n\n  if (req.headers.get('content-type') !== 'application/json') {\n    return new Response('expected json body', { status: 400 })\n  }\n\n  // Use Zod to parse and validate the request body\n  const parseResult = z.array(jobSchema).safeParse(await req.json())\n\n  if (parseResult.error) {\n    return new Response(`invalid request body: ${parseResult.error.message}`, {\n      status: 400,\n    })\n  }\n\n  const pendingJobs = parseResult.data\n\n  // Track jobs that completed successfully\n  const completedJobs: Job[] = []\n\n  // Track jobs that failed due to an error\n  const failedJobs: FailedJob[] = []\n\n  async function processJobs() {\n    let currentJob: Job | undefined\n\n    while ((currentJob = pendingJobs.shift()) !== undefined) {\n      try {\n        await processJob(currentJob)\n        completedJobs.push(currentJob)\n      } catch (error) {\n        failedJobs.push({\n          ...currentJob,\n          error: error instanceof Error ? error.message : JSON.stringify(error),\n        })\n      }\n    }\n  }\n\n  try {\n    // Process jobs while listening for worker termination\n    await Promise.race([processJobs(), catchUnload()])\n  } catch (error) {\n    // If the worker is terminating (e.g. wall clock limit reached),\n    // add pending jobs to fail list with termination reason\n    failedJobs.push(\n      ...pendingJobs.map((job) => ({\n        ...job,\n        error: error instanceof Error ? error.message : JSON.stringify(error),\n      }))\n    )\n  }\n\n  // Log completed and failed jobs for traceability\n  console.log('finished processing jobs:', {\n    completedJobs: completedJobs.length,\n    failedJobs: failedJobs.length,\n  })\n\n  return new Response(\n    JSON.stringify({\n      completedJobs,\n      failedJobs,\n    }),\n    {\n      // 200 OK response\n      status: 200,\n\n      // Custom headers to report job status\n      headers: {\n        'content-type': 'application/json',\n        'x-completed-jobs': completedJobs.length.toString(),\n        'x-failed-jobs': failedJobs.length.toString(),\n      },\n    }\n  )\n})\n\n/**\n * Generates an embedding for the given text.\n */\nasync function generateEmbedding(text: string) {\n  const response = await openai.embeddings.create({\n    model: 'text-embedding-3-small',\n    input: text,\n  })\n  const [data] = response.data\n\n  if (!data) {\n    throw new Error('failed to generate embedding')\n  }\n\n  return data.embedding\n}\n\n/**\n * Processes an embedding job.\n */\nasync function processJob(job: Job) {\n  const { jobId, id, schema, table, contentFunction, embeddingColumn } = job\n\n  // Fetch content for the schema/table/row combination\n  const [row]: [Row] = await sql`\n    select\n      id,\n      ${sql(contentFunction)}(t) as content\n    from\n      ${sql(schema)}.${sql(table)} t\n    where\n      id = ${id}\n  `\n\n  if (!row) {\n    throw new Error(`row not found: ${schema}.${table}/${id}`)\n  }\n\n  if (typeof row.content !== 'string') {\n    throw new Error(`invalid content - expected string: ${schema}.${table}/${id}`)\n  }\n\n  const embedding = await generateEmbedding(row.content)\n\n  await sql`\n    update\n      ${sql(schema)}.${sql(table)}\n    set\n      ${sql(embeddingColumn)} = ${JSON.stringify(embedding)}\n    where\n      id = ${id}\n  `\n\n  await sql`\n    select pgmq.delete(${QUEUE_NAME}, ${jobId}::bigint)\n  `\n}\n\n/**\n * Returns a promise that rejects if the worker is terminating.\n */\nfunction catchUnload() {\n  return new Promise((reject) => {\n    addEventListener('beforeunload', (ev: any) => {\n      reject(new Error(ev.detail?.reason))\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cal.com Booking with Postgres INSERT\nDESCRIPTION: SQL to create a booking in Cal.com by inserting a record into the foreign table. It demonstrates how to provide booking details like start time, event type ID, and attendee information as a JSON object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- make a 15 minutes meeting with Elon Musk\ninsert into cal.bookings(attrs)\nvalues (\n  '{\n     \"start\": \"2025-01-01T23:30:00.000Z\",\n     \"eventTypeId\": 1398027,\n     \"attendee\": {\n       \"name\": \"Elon Musk\",\n       \"email\": \"elon.musk@x.com\",\n       \"timeZone\": \"America/New_York\"\n     }\n  }'::jsonb\n);\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Local Supabase Development\nDESCRIPTION: Generates TypeScript types for a local Supabase development environment using the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase gen types typescript --local > database.types.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Custom Metadata in Supabase Auth (Admin)\nDESCRIPTION: This code snippet demonstrates how to create a new user in Supabase Auth with custom metadata using the admin API. It utilizes the `createUser` method, passing in the user's email, `user_metadata`, and `app_metadata`.  It requires the `@supabase/supabase-js` library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst { data, error } = await supabase.auth.admin.createUser({\n  email: 'valid.email@supabase.io',\n  user_metadata: {\n    full_name: 'Foo Bar',\n  },\n  app_metadata: {\n    role: 'admin',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client for getStaticProps in Next.js\nDESCRIPTION: Utility function to create a Supabase client for use in getStaticProps, without cookie handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient as createClientPrimitive } from '@supabase/supabase-js'\n\nexport function createClient() {\n  const supabase = createClientPrimitive(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n\n  return supabase\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Change Trigger Function\nDESCRIPTION: SQL function that broadcasts database changes using realtime.broadcast_changes, handling INSERT, UPDATE, and DELETE operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.your_table_changes()\nreturns trigger\nas $$\nbegin\n    perform realtime.broadcast_changes(\n\t    'topic:' || new.id::text,   -- topic\n\t\t   tg_op,                          -- event\n\t\t   tg_op,                          -- operation\n\t\t   tg_table_name,                  -- table\n\t\t   tg_table_schema,                -- schema\n\t\t   new,                            -- new record\n\t\t   old                             -- old record\n\t\t);\n    return null;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Inserting Array Data with JavaScript Supabase Client\nDESCRIPTION: This JavaScript snippet uses the Supabase client to insert a record into the 'arraytest' table with an id of 2 and a text array containing four elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('arraytest')\n  .insert([{ id: 2, textarray: ['one', 'two', 'three', 'four'] }])\n```\n\n----------------------------------------\n\nTITLE: Implementing Similarity Search Function in PostgreSQL\nDESCRIPTION: SQL function to perform similarity search on document embeddings. It uses cosine distance to find similar documents based on a query embedding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function match_documents (\n  query_embedding vector(1536),\n  match_threshold float,\n  match_count int\n)\nreturns table (\n  id bigint,\n  content text,\n  similarity float\n)\nlanguage sql stable\nas $$\n  select\n    documents.id,\n    documents.content,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where documents.embedding <=> query_embedding < 1 - match_threshold\n  order by documents.embedding <=> query_embedding\n  limit match_count;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Terminating Database Connections in PostgreSQL\nDESCRIPTION: SQL query to terminate a specific database connection using its process ID (pid). Used when needing to forcefully close problematic connections.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/monitor-supavisor-postgres-connections.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_terminate_backend(pid)\nfrom pg_stat_activity\nwhere pid = <connection_id>;\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions on Custom Schema in Supabase\nDESCRIPTION: SQL commands to grant necessary permissions on a custom schema to Supabase's default roles (anon, authenticated, service_role). This enables access to the schema through Supabase's data APIs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT USAGE ON SCHEMA myschema TO anon, authenticated, service_role;\nGRANT ALL ON ALL TABLES IN SCHEMA myschema TO anon, authenticated, service_role;\nGRANT ALL ON ALL ROUTINES IN SCHEMA myschema TO anon, authenticated, service_role;\nGRANT ALL ON ALL SEQUENCES IN SCHEMA myschema TO anon, authenticated, service_role;\nALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON TABLES TO anon, authenticated, service_role;\nALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON ROUTINES TO anon, authenticated, service_role;\nALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Vue\nDESCRIPTION: Create a Supabase client instance with project URL and anonymous API key, allowing the Vue application to connect to Supabase services.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nexport const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n```\n\n----------------------------------------\n\nTITLE: Scheduling Webhook Cron Job in Postgres\nDESCRIPTION: This SQL command schedules a cron job to send a POST request to a webhook URL every minute using the pg_cron and pgsql-http extensions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cron.schedule(\n    'webhook-every-minute', -- name of the cron job\n    '* * * * *', -- every minute\n    $$\n    select status\n    from\n      http_post(\n        'https://webhook.site/223c8a43-725b-4cbd-b1fe-d0da73353a6b', -- webhook URL, replace the ID(223c8..) with your own\n        '{\"hello\": \"world\"}', -- payload\n        'application/json'\n      )\n    $$\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth and Magic Link Authentication in React Native\nDESCRIPTION: This code snippet demonstrates how to implement OAuth (with GitHub) and magic link authentication in a React Native app using Supabase. It includes functions for handling deep linking and creating sessions from URL parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native'\nimport { makeRedirectUri } from 'expo-auth-session'\nimport * as QueryParams from 'expo-auth-session/build/QueryParams'\nimport * as WebBrowser from 'expo-web-browser'\nimport * as Linking from 'expo-linking'\nimport { supabase } from 'app/utils/supabase'\n\nWebBrowser.maybeCompleteAuthSession() // required for web only\nconst redirectTo = makeRedirectUri()\n\nconst createSessionFromUrl = async (url: string) => {\n  const { params, errorCode } = QueryParams.getQueryParams(url)\n\n  if (errorCode) throw new Error(errorCode)\n  const { access_token, refresh_token } = params\n\n  if (!access_token) return\n\n  const { data, error } = await supabase.auth.setSession({\n    access_token,\n    refresh_token,\n  })\n  if (error) throw error\n  return data.session\n}\n\nconst performOAuth = async () => {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'github',\n    options: {\n      redirectTo,\n      skipBrowserRedirect: true,\n    },\n  })\n  if (error) throw error\n\n  const res = await WebBrowser.openAuthSessionAsync(data?.url ?? '', redirectTo)\n\n  if (res.type === 'success') {\n    const { url } = res\n    await createSessionFromUrl(url)\n  }\n}\n\nconst sendMagicLink = async () => {\n  const { error } = await supabase.auth.signInWithOtp({\n    email: 'example@email.com',\n    options: {\n      emailRedirectTo: redirectTo,\n    },\n  })\n\n  if (error) throw error\n  // Email sent.\n}\n\nexport default function Auth() {\n  // Handle linking into app from email app.\n  const url = Linking.useURL()\n  if (url) createSessionFromUrl(url)\n\n  return (\n    <>\n      <Button onPress={performOAuth} title=\"Sign in with Github\" />\n      <Button onPress={sendMagicLink} title=\"Send Magic Link\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Negation Text Search Implementation\nDESCRIPTION: Demonstrates how to implement text search with negation to exclude specific terms from the search results.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description) @@ to_tsquery('big & !little');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'big' & !'little'`)\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big' & !'little'\");\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await client\n  .from(\"books\")\n  .select()\n  .textSearch(\"description\", value: \"'big' & !'little'\")\n  .execute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        textSearch(\"description\", \"'big' & !'little'\", TextSearchType.NONE)\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = client.from_('books').select().text_search('description', \"'big' & !'little'\").execute()\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Index in PostgreSQL\nDESCRIPTION: Creates an index that only includes rows where the deceased column is false. This is more efficient when frequently querying only a subset of rows matching a specific condition.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_living_persons_age on persons (age)\nwhere deceased is false;\n```\n\n----------------------------------------\n\nTITLE: Setting up Foreign Data Wrapper Connection\nDESCRIPTION: SQL commands to set up a foreign data wrapper connection to a remote vector database\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension postgres_fdw;\n\ncreate server docs_server\nforeign data wrapper postgres_fdw\noptions (host 'db.xxx.supabase.co', port '5432', dbname 'postgres');\n\ncreate user mapping for docs_user\nserver docs_server\noptions (user 'postgres', password 'password');\n```\n\n----------------------------------------\n\nTITLE: Resetting Password with Supabase in Python\nDESCRIPTION: This snippet demonstrates how to initiate a password reset process using the Supabase Python client. It sends a reset password email to the user's email address with a redirect URL for updating the password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclient.auth.reset_password_email(\n  'valid.email@supabase.io',\n  {'redirect_to':'http://example.com/account/update-password'}\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Prisma API Connection in TypeScript\nDESCRIPTION: This snippet provides a TypeScript example for testing the Prisma API connection. It demonstrates how to create a PrismaClient instance, query a table, and handle the connection lifecycle.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client');\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  //change to reference a table in your schema\n  const val = await prisma.<SOME_TABLE_NAME>.findMany({\n    take: 10,\n  });\n  console.log(val);\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect();\n  })\n  .catch(async (e) => {\n    console.error(e);\n    await prisma.$disconnect();\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Index for RLS Performance\nDESCRIPTION: Creates a btree index on the user_id column to improve RLS policy performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate index userid\non test_table\nusing btree (user_id);\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Cron Job using SQL in Supabase\nDESCRIPTION: This SQL snippet demonstrates how to schedule a cron job in Supabase using the cron.schedule function. It takes a job name, schedule interval, and the SQL command to execute.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Cron Job name cannot be edited\nselect cron.schedule('permanent-cron-job-name', '30 seconds', 'CALL do_something()');\n```\n\n----------------------------------------\n\nTITLE: Serving Functions Locally without JWT Verification\nDESCRIPTION: Bash command to start a Supabase Edge Function locally without JWT verification, suitable for hooks that run before JWT issuance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve send-sms --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Cloud Messaging (FCM) in Supabase Edge Function\nDESCRIPTION: This edge function sends push notifications using Firebase Cloud Messaging. It retrieves the user's FCM token from the profiles table, generates a Google authentication token, and sends a notification with content from the newly inserted notification record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'npm:@supabase/supabase-js@2'\nimport { JWT } from 'npm:google-auth-library@9'\nimport serviceAccount from '../service-account.json' with { type: 'json' }\n\ninterface Notification {\n  id: string\n  user_id: string\n  body: string\n}\n\ninterface WebhookPayload {\n  type: 'INSERT'\n  table: string\n  record: Notification\n  schema: 'public'\n}\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL')!,\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n)\n\nDeno.serve(async (req) => {\n  const payload: WebhookPayload = await req.json()\n\n  const { data } = await supabase\n    .from('profiles')\n    .select('fcm_token')\n    .eq('id', payload.record.user_id)\n    .single()\n\n  const fcmToken = data!.fcm_token as string\n\n  const accessToken = await getAccessToken({\n    clientEmail: serviceAccount.client_email,\n    privateKey: serviceAccount.private_key,\n  })\n\n  const res = await fetch(\n    `https://fcm.googleapis.com/v1/projects/${serviceAccount.project_id}/messages:send`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        message: {\n          token: fcmToken,\n          notification: {\n            title: `Notification from Supabase`,\n            body: payload.record.body,\n          },\n        },\n      }),\n    }\n  )\n\n  const resData = await res.json()\n  if (res.status < 200 || 299 < res.status) {\n    throw resData\n  }\n\n  return new Response(JSON.stringify(resData), {\n    headers: { 'Content-Type': 'application/json' },\n  })\n})\n\nconst getAccessToken = ({\n  clientEmail,\n  privateKey,\n}: {\n  clientEmail: string\n  privateKey: string\n}): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const jwtClient = new JWT({\n      email: clientEmail,\n      key: privateKey,\n      scopes: ['https://www.googleapis.com/auth/firebase.messaging'],\n    })\n    jwtClient.authorize((err, tokens) => {\n      if (err) {\n        reject(err)\n        return\n      }\n      resolve(tokens!.access_token!)\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Function Logging\nDESCRIPTION: Comprehensive example of advanced logging techniques including variable formatting and row logging.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function advanced_example(num int default 10)\nreturns text\nlanguage plpgsql\nas $$\ndeclare\n    var1 int := 20;\n    var2 text;\nbegin\n    -- Logging start of function\n    raise log 'logging start of function call: (%)', (select now());\n\n    -- Logging a variable from a SELECT query\n    select\n      col_1 into var1\n    from some_table\n    limit 1;\n    raise log 'logging a variable (%)', var1;\n\n    -- It is also possible to avoid using variables, by returning the values of your query to the log\n    raise log 'logging a query with a single return value(%)', (select col_1 from some_table limit 1);\n\n    -- If necessary, you can even log an entire row as JSON\n    raise log 'logging an entire row as JSON (%)', (select to_jsonb(some_table.*) from some_table limit 1);\n\n    -- When using INSERT or UPDATE, the new value(s) can be returned\n    -- into a variable.\n    -- When using DELETE, the deleted value(s) can be returned.\n    -- All three operations use \"RETURNING value(s) INTO variable(s)\" syntax\n    insert into some_table (col_2)\n    values ('new val')\n    returning col_2 into var2;\n\n    raise log 'logging a value from an INSERT (%)', var2;\n\n    return var1 || ',' || var2;\nexception\n    -- Handle exceptions here if needed\n    when others then\n        raise exception 'An error occurred in function <advanced_example>: %', sqlerrm;\nend;\n$$;\n\nselect advanced_example();\n```\n\n----------------------------------------\n\nTITLE: Protected API Route Implementation with Supabase Auth\nDESCRIPTION: Server-side API route implementation with authentication protection and database queries using Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { supabaseServerClient, withApiAuth } from '@supabase/auth-helpers-sveltekit'\nimport type { RequestHandler } from './__types/protected-route'\n\ninterface TestTable {\n  id: string\n  created_at: string\n}\n\ninterface GetOutput {\n  data: TestTable[]\n}\n\nexport const GET: RequestHandler<GetOutput> = async ({ locals, request }) =>\n  withApiAuth({ user: locals.user }, async () => {\n    // Run queries with RLS on the server\n    const { data } = await supabaseServerClient(request).from('test').select('*')\n\n    return {\n      status: 200,\n      body: { data },\n    }\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from './$types';\nimport { withAuth } from '@supabase/auth-helpers-sveltekit';\nimport { json, redirect } from '@sveltejs/kit';\n\ninterface TestTable {\n  id: string;\n  created_at: string;\n}\n\nexport const GET: RequestHandler = withAuth(async ({ session, getSupabaseClient }) => {\n  if (!session.user) {\n    redirect(303, '/');\n  }\n\n  const { data } = await getSupabaseClient()\n    .from<TestTable>('test')\n    .select('*');\n\n  return json({ data });\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Index in PostgreSQL\nDESCRIPTION: Creating a partial index that only includes specific rows matching a WHERE clause condition.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_orders_status on orders (status)\nwhere status = 'shipped';\n```\n\n----------------------------------------\n\nTITLE: Inspecting Cron Job Runs using SQL in Supabase\nDESCRIPTION: This SQL query retrieves the run history of a specific cron job from the cron.job_run_details table, ordered by start time in descending order and limited to the last 10 runs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom cron.job_run_details\nwhere jobid = (select jobid from cron.job where jobname = 'permanent-cron-job-name')\norder by start_time desc\nlimit 10;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Profiles Table with Row Level Security in PostgreSQL\nDESCRIPTION: This SQL snippet creates a 'profiles' table, sets up row level security policies, and creates a trigger for automatically creating profile entries for new users. It also configures storage buckets and policies for avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nextjs-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using ((select auth.uid()) = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update their own avatar.\" on storage.objects\n  for update using ( auth.uid() = owner ) with check (bucket_id = 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Enabling Realtime Connection Logging in JavaScript\nDESCRIPTION: JavaScript code snippet demonstrating how to enable Realtime connection logging when instantiating the Supabase client. This allows logging of new WebSocket connections and Channel joins.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst options = {\n  realtime: {\n    params: {\n      log_level: 'info',\n    },\n  },\n}\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', options)\n```\n\n----------------------------------------\n\nTITLE: Basic index_advisor Usage Example\nDESCRIPTION: A complete example showing how to install the extension, create a table, and get index recommendations for a query with a filter on an unindexed column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists index_advisor cascade;\n\ncreate table book(\n  id int primary key,\n  title text not null\n);\n\nselect\n  *\nfrom\n  index_advisor('select book.id from book where title = $1');\n\n startup_cost_before | startup_cost_after | total_cost_before | total_cost_after |                  index_statements                   | errors\n---------------------+--------------------+-------------------+------------------+-----------------------------------------------------+--------\n 0.00                | 1.17               | 25.88             | 6.40             | {\"CREATE INDEX ON public.book USING btree (title)\"},| {}\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Search Function with Inner Product\nDESCRIPTION: SQL function to perform semantic search using negative inner product operator for normalized vectors\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function match_documents (\n  query_embedding vector(512),\n  match_threshold float,\n  match_count int\n)\nreturns setof documents\nlanguage sql\nas $$\n  select *\n  from documents\n  where documents.embedding <#> query_embedding < -match_threshold\n  order by documents.embedding <#> query_embedding asc\n  limit least(match_count, 200);\n$$;\n```\n\n----------------------------------------\n\nTITLE: Combined Presence and Broadcast Policies\nDESCRIPTION: SQL policies that handle both presence and broadcast authorization in a single policy.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"authenticated can listen to broadcast and presence on topic\"\non \"realtime\".\"messages\"\nfor select\nto authenticated\nusing (\n  exists (\n    select\n      user_id\n    from\n      rooms_users\n    where\n      user_id = (select auth.uid())\n      and topic = (select realtime.topic())\n      and realtime.messages.extension in ('broadcast', 'presence')\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Listening only to 'INSERT' events in Kotlin\nDESCRIPTION: This Kotlin snippet configures a Supabase client to listen only for INSERT events in the 'public' schema using a flow. It logs specific changes to console. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = \"public\")\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Posts Table with Supabase CLI\nDESCRIPTION: Bash command to create a new migration file for the posts table using Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration new create_posts_table\n```\n\n----------------------------------------\n\nTITLE: Creating a Covering Index in SQL\nDESCRIPTION: This snippet shows how to create a covering index in Postgres, which includes additional columns directly in the index for faster data retrieval.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX a_b_idx ON x (a,b) INCLUDE (c);\n```\n\n----------------------------------------\n\nTITLE: Downloading a file using JavaScript in Supabase Storage\nDESCRIPTION: This JavaScript snippet shows how to download a file from Supabase Storage. It uses the `supabase.storage.from('avatars').download('public/avatar1.png')` method to download the file located at 'public/avatar1.png' within the 'avatars' bucket. The function returns a promise that resolves with the file data or an error if the download fails.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the JS library to download a file.\n\nconst { data, error } = await supabase.storage.from('avatars').download('public/avatar1.png')\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client with bun\nDESCRIPTION: This snippet demonstrates how to install the Prisma client and generate its model using bun.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nbun install @prisma/client\nbunx prisma generate\n```\n\n----------------------------------------\n\nTITLE: JSON Response from GraphQL Query in PostgreSQL\nDESCRIPTION: Example JSON response returned by the graphql.resolve function when querying the 'Blog' table. It includes the id and name of the first blog entry.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_graphql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"blogCollection\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": 1\n            \"name\": \"My Blog\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Web Worker for Embedding Generation with Transformers.js\nDESCRIPTION: This worker script sets up a Transformers.js pipeline for generating embeddings from text. It uses the Singleton pattern to lazily instantiate the pipeline and communicates with the main thread via postMessage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pipeline } from '@huggingface/transformers'\n\n// Use the Singleton pattern to enable lazy construction of the pipeline.\nclass PipelineSingleton {\n  static task = 'feature-extraction'\n  static model = 'Supabase/gte-small'\n  static instance = null\n\n  static async getInstance(progress_callback = null) {\n    if (this.instance === null) {\n      this.instance = pipeline(this.task, this.model, {\n        progress_callback,\n        dtype: 'fp32',\n        device: !!navigator.gpu ? 'webgpu' : 'wasm',\n      })\n    }\n    return this.instance\n  }\n}\n\n// Listen for messages from the main thread\nself.addEventListener('message', async (event) => {\n  // Retrieve the classification pipeline. When called for the first time,\n  // this will load the pipeline and save it for future use.\n  let classifier = await PipelineSingleton.getInstance((x) => {\n    // We also add a progress callback to the pipeline so that we can\n    // track model loading.\n    self.postMessage(x)\n  })\n\n  // Actually perform the classification\n  let output = await classifier(event.data.text, {\n    pooling: 'mean',\n    normalize: true,\n  })\n\n  // Extract the embedding output\n  const embedding = Array.from(output.data)\n\n  // Send the output back to the main thread\n  self.postMessage({\n    status: 'complete',\n    embedding,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a PGroonga Full-Text Search Index\nDESCRIPTION: SQL command to create a PGroonga index on the 'content' column of the 'memos' table for full-text search capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate index ix_memos_content ON memos USING pgroonga(content);\n```\n\n----------------------------------------\n\nTITLE: Complex Query Example in PostgreSQL\nDESCRIPTION: Shows a complex query joining multiple tables with a WHERE clause to exclude specific courses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  students.name,\n  students.type,\n  courses.title,\n  courses.code,\n  grades.result\nfrom\n  grades\n  left join students on grades.student_id = students.id\n  left join courses on grades.course_id = courses.id\nwhere courses.code != 'PG101';\n```\n\n----------------------------------------\n\nTITLE: Overwriting Files in Supabase Storage with JavaScript\nDESCRIPTION: This code snippet demonstrates how to overwrite an existing file in Supabase Storage using JavaScript. It sets the 'upsert' option to true to allow overwriting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst file = new Blob()\n\n// Create Supabase client\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nawait supabase.storage.from('bucket_name').upload('file_path', file, {\n  upsert: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication for Specific Tables in SQL\nDESCRIPTION: Creates a publication that only tracks changes to the specified tables (table_one and table_two), allowing for more selective replication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate publication publication_name\nfor table table_one, table_two;\n```\n\n----------------------------------------\n\nTITLE: Enabling Table Audit Tracking in PostgreSQL\nDESCRIPTION: SQL function call to enable audit tracking on a specified schema and table combination. Takes a regclass parameter representing the fully qualified table name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect audit.enable_tracking('<schema>.<table>'::regclass);\n```\n\n----------------------------------------\n\nTITLE: Listening to all Postgres schema changes in JavaScript\nDESCRIPTION: This JavaScript snippet configures a Supabase client to listen for any database changes in the 'public' schema. It defines a channel and logs any payload received. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst channelA = supabase\n  .channel('schema-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: '*',\n      schema: 'public',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Admin Role Access Token Hook\nDESCRIPTION: SQL implementation of a custom hook that adds an admin role claim to tokens for users marked as admins in a profiles table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  user_id uuid not null primary key references auth.users (id),\n  is_admin boolean not null default false\n);\n\ncreate or replace function public.custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\n  declare\n    claims jsonb;\n    is_admin boolean;\n  begin\n    -- Check if the user is marked as admin in the profiles table\n    select is_admin into is_admin from profiles where user_id = (event->>'user_id')::uuid;\n\n    -- Proceed only if the user is an admin \n    if is_admin then\n      claims := event->'claims';\n\n      -- Check if 'app_metadata' exists in claims\n      if jsonb_typeof(claims->'app_metadata') is null then\n        -- If 'app_metadata' does not exist, create an empty object\n        claims := jsonb_set(claims, '{app_metadata}', '{}');\n      end if;\n\n      -- Set a claim of 'admin'\n      claims := jsonb_set(claims, '{app_metadata, admin}', 'true');\n\n      -- Update the 'claims' object in the original event\n      event := jsonb_set(event, '{claims}', claims);\n    end if;\n\n    -- Return the modified or original event\n    return event;\n  end;\n$$;\n\ngrant all\n  on table public.profiles\n  to supabase_auth_admin;\n\nrevoke all\n  on table public.profiles\n  from authenticated, anon, public;\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication for All Tables in SQL\nDESCRIPTION: Creates a publication that includes changes to all tables in the database. This is the broadest form of replication configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate publication publication_name\nfor all tables;\n```\n\n----------------------------------------\n\nTITLE: Listening to UPDATE Events in JavaScript with Supabase Realtime\nDESCRIPTION: Creates a channel to listen specifically for UPDATE events in the public schema of a Supabase database. The code establishes a subscription that logs payload data whenever database updates occur.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst changes = supabase\n  .channel('schema-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'UPDATE', // Listen only to UPDATEs\n      schema: 'public',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Simple index_advisor Query Example\nDESCRIPTION: Demonstrates using index_advisor with a simple query that filters an unindexed column. The extension recommends creating an index for the 'title' column to improve query performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    *\nfrom\n  index_advisor('select book.id from book where title = $1');\n\n startup_cost_before | startup_cost_after | total_cost_before | total_cost_after |                  index_statements                   | errors\n---------------------+--------------------+-------------------+------------------+-----------------------------------------------------+--------\n 0.00                | 1.17               | 25.88             | 6.40             | {\"CREATE INDEX ON public.book USING btree (title)\"},| {}\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Export Heroku Database using pg_dump\nDESCRIPTION: This command uses `pg_dump` to export a Heroku Postgres database to a SQL file. It requires Heroku credentials (host, user, database) to connect to the database. The `--clean`, `--if-exists`, and `--quote-all-identifiers` options ensure a clean and consistent export. The `--no-owner` and `--no-privileges` flags prevent migration issues related to different user privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/heroku.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npg_dump --clean --if-exists --quote-all-identifiers \\\n -h $HEROKU_HOST -U $HEROKU_USER -d $HEROKU_DATABASE \\\n --no-owner --no-privileges > heroku_dump.sql\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Firebase Auth in Flutter\nDESCRIPTION: Creates a Supabase client for Flutter applications using Dart, passing an async function to retrieve the Firebase Auth JWT of the current user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: supabaseUrl,\n  anonKey: supabaseKey,\n  debug: false,\n  accessToken: () async {\n    final token = await FirebaseAuth.instance.currentUser?.getIdToken();\n    return token;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Express\nDESCRIPTION: This Express.js snippet creates a route that processes token exchanges. It retrieves the necessary parameters from the request, verifies the OTP with Supabase, and handles user redirection based on the verification result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// The client you created from the Server-Side Auth instructions\nconst { createClient } = require(\"./lib/supabase\")\n...\napp.get(\"/auth/confirm\", async function (req, res) {\n  const token_hash = req.query.token_hash\n  const type = req.query.type\n  const next = req.query.next ?? \"/\"\n\n  if (token_hash && type) {\n    const supabase = createClient({ req, res })\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n    if (!error) {\n      res.redirect(303, `/${next.slice(1)}`)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  res.redirect(303, '/auth/auth-code-error')\n})\n```\n\n----------------------------------------\n\nTITLE: Complex index_advisor Query Example with Multiple Tables\nDESCRIPTION: A more complex example demonstrating the extension's ability to recommend multiple indexes for queries involving joins across several tables. The extension identifies foreign key relationships that would benefit from indexing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists index_advisor cascade;\n\ncreate table author(\n    id serial primary key,\n    name text not null\n);\n\ncreate table publisher(\n    id serial primary key,\n    name text not null,\n    corporate_address text\n);\n\ncreate table book(\n    id serial primary key,\n    author_id int not null references author(id),\n    publisher_id int not null references publisher(id),\n    title text\n);\n\ncreate table review(\n    id serial primary key,\n    book_id int references book(id),\n    body text not null\n);\n\nselect\n    *\nfrom\n    index_advisor('\n        select\n            book.id,\n            book.title,\n            publisher.name as publisher_name,\n            author.name as author_name,\n            review.body review_body\n        from\n            book\n            join publisher\n                on book.publisher_id = publisher.id\n            join author\n                on book.author_id = author.id\n            join review\n                on book.id = review.book_id\n        where\n            author.id = $1\n            and publisher.id = $2\n    ');\n\n startup_cost_before | startup_cost_after | total_cost_before | total_cost_after |                  index_statements                         | errors\n---------------------+--------------------+-------------------+------------------+-----------------------------------------------------------+--------\n 27.26               | 12.77              | 68.48             | 42.37            | {\"CREATE INDEX ON public.book USING btree (author_id)\",   | {}\n                                                                                    \"CREATE INDEX ON public.book USING btree (publisher_id)\",\n                                                                                    \"CREATE INDEX ON public.review USING btree (book_id)\"}\n(3 rows)\n```\n\n----------------------------------------\n\nTITLE: Row Level Security Policy Definition in Postgres\nDESCRIPTION: Example SQL policy that demonstrates how to implement row-level security in Postgres to restrict users to viewing only their own records in a todos table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-vec2pg.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Individuals can view their own todos.\"\n  on public.todos\n  for select\n  using\n    ( ( select auth.uid() ) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication View - React - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the authentication view to either sign in or sign up using the 'view' prop in the Supabase Auth component. This allows for flexible user flow depending on the desired authentication method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Auth\\n  supabaseClient={supabase}\\n  view=\"sign_up\"/\\n/>\n```\n\n----------------------------------------\n\nTITLE: Inserting Reservations with Exclusion Constraint\nDESCRIPTION: These SQL statements demonstrate how the exclusion constraint prevents overlapping reservations from being inserted.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Add a first reservation\ninsert into reservations (title, duration)\nvalues ('Tyler Dinner', '[2024-07-04 18:00, 2024-07-04 21:00)');\n\n-- The following insert fails because the duration overlaps with the above\ninsert into reservations (title, duration)\nvalues ('Thor Dinner', '[2024-07-04 20:00, 2024-07-04 22:00)');\n```\n\n----------------------------------------\n\nTITLE: Batch Processing HTTP Requests for Multiple Table Rows\nDESCRIPTION: Demonstrates how to aggregate multiple table rows into a single JSON payload and send them in one HTTP request using pg_net. Includes a recommended LIMIT practice for performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nwith \"selected_table_rows\" as (\n    select\n        -- Converts all the rows into a JSONB array\n        jsonb_agg(to_jsonb(<table_name>.*)) as JSON_payload\n    from <table_name>\n    -- good practice to LIMIT the max amount of rows\n)\nselect\n    net.http_post(\n        url := 'https://postman-echo.com/post'::text,\n        body := JSON_payload\n    ) AS request_id\nFROM \"selected_table_rows\";\n```\n\n----------------------------------------\n\nTITLE: Application-Level Testing with TypeScript\nDESCRIPTION: End-to-end testing implementation using TypeScript and Supabase client library to test RLS policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { beforeAll, describe, expect, it } from 'vitest'\nimport crypto from 'crypto'\n\ndescribe('Todos RLS', () => {\n  // Generate unique IDs for this test suite to avoid conflicts with other tests\n  const USER_1_ID = crypto.randomUUID()\n  const USER_2_ID = crypto.randomUUID()\n\n  const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!)\n\n  beforeAll(async () => {\n    // Setup test data specific to this test suite\n    const adminSupabase = createClient(process.env.SUPABASE_URL!, process.env.SERVICE_ROLE_KEY!)\n\n    // Create test users with unique IDs\n    await adminSupabase.auth.admin.createUser({\n      id: USER_1_ID,\n      email: `user1-${USER_1_ID}@test.com`,\n      password: 'password123',\n      // We want the user to be usable right away without email confirmation\n      email_confirm: true,\n    })\n    await adminSupabase.auth.admin.createUser({\n      id: USER_2_ID,\n      email: `user2-${USER_2_ID}@test.com`,\n      password: 'password123',\n      email_confirm: true,\n    })\n\n    // Create initial todos\n    await adminSupabase.from('todos').insert([\n      { task: 'User 1 Task 1', user_id: USER_1_ID },\n      { task: 'User 1 Task 2', user_id: USER_1_ID },\n      { task: 'User 2 Task 1', user_id: USER_2_ID },\n    ])\n  })\n\n  it('should allow User 1 to only see their own todos', async () => {\n    // Sign in as User 1\n    await supabase.auth.signInWithPassword({\n      email: `user1-${USER_1_ID}@test.com`,\n      password: 'password123',\n    })\n\n    const { data: todos } = await supabase.from('todos').select('*')\n\n    expect(todos).toHaveLength(2)\n    todos?.forEach((todo) => {\n      expect(todo.user_id).toBe(USER_1_ID)\n    })\n  })\n\n  it('should allow User 1 to create their own todo', async () => {\n    await supabase.auth.signInWithPassword({\n      email: `user1-${USER_1_ID}@test.com`,\n      password: 'password123',\n    })\n\n    const { error } = await supabase.from('todos').insert({ task: 'New Task', user_id: USER_1_ID })\n\n    expect(error).toBeNull()\n  })\n\n  it('should allow User 2 to only see their own todos', async () => {\n    // Sign in as User 2\n    await supabase.auth.signInWithPassword({\n      email: `user2-${USER_2_ID}@test.com`,\n      password: 'password123',\n    })\n\n    const { data: todos } = await supabase.from('todos').select('*')\n    expect(todos).toHaveLength(1)\n    todos?.forEach((todo) => {\n      expect(todo.user_id).toBe(USER_2_ID)\n    })\n  })\n\n  it('should prevent User 2 from modifying User 1 todos', async () => {\n    await supabase.auth.signInWithPassword({\n      email: `user2-${USER_2_ID}@test.com`,\n      password: 'password123',\n    })\n\n    // Attempt to update the todos we shouldn't have access to\n    // result will be a no-op\n    await supabase.from('todos').update({ task: 'Hacked!' }).eq('user_id', USER_1_ID)\n\n    // Log back in as User 1 to verify their todos weren't changed\n    await supabase.auth.signInWithPassword({\n      email: `user1-${USER_1_ID}@test.com`,\n      password: 'password123',\n    })\n\n    // Fetch User 1's todos\n    const { data: todos } = await supabase.from('todos').select('*')\n\n    // Verify that none of the todos were changed to \"Hacked!\"\n    expect(todos).toBeDefined()\n    todos?.forEach((todo) => {\n      expect(todo.task).not.toBe('Hacked!')\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting Password with Supabase in JavaScript\nDESCRIPTION: This snippet demonstrates how to initiate a password reset process using the Supabase JavaScript client. It sends a reset password email to the user's email address with a redirect URL for updating the password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\nawait supabase.auth.resetPasswordForEmail('valid.email@supabase.io', {\n  redirectTo: 'http://example.com/account/update-password',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a 'todos' Table in Supabase SQL\nDESCRIPTION: SQL command to create a 'todos' table with an auto-incrementing id and a task column with a length check constraint.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table\n  todos (\n    id bigint generated by default as identity primary key,\n    task text check (char_length(task) > 3)\n  );\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Provider Refresh Token (Kotlin)\nDESCRIPTION: This Kotlin snippet shows how to request a provider refresh token during the Azure OAuth sign-in process by adding the offline access scope.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithAzure() {\n    supabase.auth.signInWith(Azure) {\n        scopes.add(\"offline_access\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Route Handler with Edge Runtime in Next.js (JavaScript)\nDESCRIPTION: Implements a Next.js route handler running on the Edge runtime that inserts a todo in Supabase. It uses createRouteHandlerClient to initialize Supabase with cookie-based authentication, configures the handler for edge runtime, and returns the inserted data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\n\nexport const runtime = 'edge'\nexport const dynamic = 'force-dynamic'\n\nexport async function POST(request) {\n  const { title } = await request.json()\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })\n\n  const { data } = await supabase.from('todos').insert({ title }).select()\n  return NextResponse.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Database Timeout\nDESCRIPTION: Sets a global statement timeout of 4 seconds for the postgres database that applies to all roles and sessions without explicit timeouts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nalter database postgres set statement_timeout TO '4s';\n```\n\n----------------------------------------\n\nTITLE: Stop Tracking Presence in Dart\nDESCRIPTION: This snippet outlines how to stop tracking presence in Dart by calling the untrack method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal roomOne = supabase.channel('room_01');\n\nuntrackPresence() async {\n  final presenceUntrackStatus = await roomOne.untrack();\n  print(presenceUntrackStatus);\n}\n\nuntrackPresence();\n```\n\n----------------------------------------\n\nTITLE: Next.js Middleware for Authentication\nDESCRIPTION: This TypeScript snippet shows how to implement Next.js middleware to protect routes. It checks if a user is signed in and redirects to the home page if not, while allowing requests from users whose email ends with '@gmail.com'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport async function middleware(req: NextRequest) {\n  // We need to create a response and hand it to the supabase client to be able to modify the response headers.\n  const res = NextResponse.next()\n  // Create authenticated Supabase Client.\n  const supabase = createMiddlewareClient({ req, res })\n  // Check if we have a session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  // Check auth condition\n  if (user?.email?.endsWith('@gmail.com')) {\n    // Authentication successful, forward request to protected route.\n    return res\n  }\n\n  // Auth condition not met, redirect to home page.\n  const redirectUrl = req.nextUrl.clone()\n  redirectUrl.pathname = '/' \n  redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname)\n  return NextResponse.redirect(redirectUrl)\n}\n\nexport const config = {\n  matcher: '/middleware-protected/:path*',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Route Handler in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a server-side route handler for user login in a Next.js application using Supabase. It extracts form data from a POST request to authenticate the user with Supabase, and then redirects the user using Next.js utilities. Dependencies include @supabase/auth-helpers-nextjs and next/headers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nexport async function POST(request) {\n  const requestUrl = new URL(request.url)\n  const formData = await request.formData()\n  const email = formData.get('email')\n  const password = formData.get('password')\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })\n\n  await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n\n  return NextResponse.redirect(requestUrl.origin, {\n    status: 301,\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Chat Service in TypeScript with Supabase\nDESCRIPTION: This code snippet shows the implementation of a DataService class that handles realtime chat functionality using Supabase. It includes methods for retrieving group information, adding messages, and listening to realtime updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Injectable } from '@angular/core'\nimport { SupabaseClient, createClient, RealtimeChannel } from '@supabase/supabase-js'\nimport { Subject } from 'rxjs'\nimport { environment } from 'src/environments/environment'\n\nconst GROUPS_DB = 'groups'\nconst MESSAGES_DB = 'messages'\n\nexport interface Message {\n  created_at: string\n  group_id: number\n  id: number\n  text: string\n  user_id: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  private supabase: SupabaseClient\n  // ADD\n  private realtimeChannel: RealtimeChannel\n\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n  }\n\n  getGroups() {\n    return this.supabase\n      .from(GROUPS_DB)\n      .select(`title,id, users:creator ( email )`)\n      .then((result) => result.data)\n  }\n\n  async createGroup(title) {\n    const newgroup = {\n      creator: (await this.supabase.auth.getUser()).data.user.id,\n      title,\n    }\n\n    return this.supabase.from(GROUPS_DB).insert(newgroup).select().single()\n  }\n\n  // ADD NEW FUNCTIONS\n  getGroupById(id) {\n    return this.supabase\n      .from(GROUPS_DB)\n      .select(`created_at, title, id, users:creator ( email, id )`)\n      .match({ id })\n      .single()\n      .then((result) => result.data)\n  }\n\n  async addGroupMessage(groupId, message) {\n    const newMessage = {\n      text: message,\n      user_id: (await this.supabase.auth.getUser()).data.user.id,\n      group_id: groupId,\n    }\n\n    return this.supabase.from(MESSAGES_DB).insert(newMessage)\n  }\n\n  getGroupMessages(groupId) {\n    return this.supabase\n      .from(MESSAGES_DB)\n      .select(`created_at, text, id, users:user_id ( email, id )`)\n      .match({ group_id: groupId })\n      .limit(25) // Limit to 25 messages for our app\n      .then((result) => result.data)\n  }\n\n  listenToGroup(groupId) {\n    const changes = new Subject()\n\n    this.realtimeChannel = this.supabase\n      .channel('public:messages')\n      .on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'messages' },\n        async (payload) => {\n          console.log('DB CHANGE: ', payload)\n\n          if (payload.new && (payload.new as Message).group_id === +groupId) {\n            const msgId = (payload.new as any).id\n\n            const msg = await this.supabase\n              .from(MESSAGES_DB)\n              .select(`created_at, text, id, users:user_id ( email, id )`)\n              .match({ id: msgId })\n              .single()\n              .then((result) => result.data)\n            changes.next(msg)\n          }\n        }\n      )\n      .subscribe()\n\n    return changes.asObservable()\n  }\n\n  unsubscribeGroupChanges() {\n    if (this.realtimeChannel) {\n      this.supabase.removeChannel(this.realtimeChannel)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing In with Password Using New Auth Methods in TypeScript\nDESCRIPTION: Demonstrates the new explicit signInWithPassword() method in supabase-js v2 for authenticating users with email and password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst { data } = await supabase.auth.signInWithPassword({\n  email: 'hello@example',\n  password: 'pass',\n})\n\n// v1\nconst { data } = await supabase.auth.signIn({\n  email: 'hello@example',\n  password: 'pass',\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Specific Table Events in Swift with Supabase Realtime\nDESCRIPTION: Uses Swift to create a channel that listens for all event types on a specific table ('todos') in the public schema of a Supabase database. The code handles different action types using a switch statement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(AnyAction.self, schema: \"public\", table: \"todos\")\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  switch change {\n  case .insert(let action): print(action)\n  case .update(let action): print(action)\n  case .delete(let action): print(action)\n  case .select(let action): print(action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Google Sign-in with Flutter and Supabase for iOS and Android\nDESCRIPTION: A Flutter implementation for native Google Sign-in on iOS and Android using the google_sign_in package with Supabase Auth. It obtains an ID token and access token from Google and uses them to authenticate with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\n...\nFuture<void> _nativeGoogleSignIn() async {\n  /// TODO: update the Web client ID with your own.\n  ///\n  /// Web Client ID that you registered with Google Cloud.\n  const webClientId = 'my-web.apps.googleusercontent.com';\n\n  /// TODO: update the iOS client ID with your own.\n  ///\n  /// iOS Client ID that you registered with Google Cloud.\n  const iosClientId = 'my-ios.apps.googleusercontent.com';\n\n  final GoogleSignIn googleSignIn = GoogleSignIn(\n    clientId: iosClientId,\n    serverClientId: webClientId,\n  );\n  final googleUser = await googleSignIn.signIn();\n  final googleAuth = await googleUser!.authentication;\n  final accessToken = googleAuth.accessToken;\n  final idToken = googleAuth.idToken;\n\n  if (accessToken == null) {\n    throw 'No Access Token found.';\n  }\n  if (idToken == null) {\n    throw 'No ID Token found.';\n  }\n\n  await supabase.auth.signInWithIdToken(\n    provider: OAuthProvider.google,\n    idToken: idToken,\n    accessToken: accessToken,\n  );\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client for Server-Side with Cookies\nDESCRIPTION: Configuration code to set up Supabase client to use cookies instead of localStorage for session management when running on the server. This allows Supabase to work in server environments like Server Components and Server Actions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    flowType: 'pkce',\n    autoRefreshToken: false,\n    detectSessionInUrl: false,\n    persistSession: true,\n    storage: {\n      getItem: async (key: string) => {\n        cookieStore.get(key)\n      },\n      setItem: async (key: string, value: string) => {\n        cookieStore.set(key, value)\n      },\n      removeItem: async (key: string) => {\n        cookieStore.remove(key)\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Phone Number Sign In with Password\nDESCRIPTION: Authenticates users using their phone number and password combination. Returns a session upon successful authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\nconst { data, error } = await supabase.auth.signInWithPassword({\n  phone: '+13334445555',\n  password: 'some-password',\n})\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.signIn(\n  phone: \"+13334445555\",\n  password: \"some-password\"\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.signInWith(Phone) {\n    phone = \"+13334445555\"\n    password = \"some-password\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nsupabase.auth.sign_in_with_password({\n  'phone': \"+13334445555\"\n  'password': \"some-password\"\n})\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://cvwawazfelidkloqmbma.supabase.co/auth/v1/token?grant_type=password' \\\n-H \"apikey: SUPABASE_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"phone\": \"+13334445555\",\n  \"password\": \"some-password\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Page with Profile Management\nDESCRIPTION: Creates a complete account management page that includes profile data management, avatar upload integration, and sign-out functionality. Handles profile updates and displays user information using Supabase as the backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/components/avatar.dart';\nimport 'package:supabase_quickstart/main.dart';\nimport 'package:supabase_quickstart/pages/login_page.dart';\n\nclass AccountPage extends StatefulWidget {\n  const AccountPage({super.key});\n\n  @override\n  State<AccountPage> createState() => _AccountPageState();\n}\n\nclass _AccountPageState extends State<AccountPage> {\n  final _usernameController = TextEditingController();\n  final _websiteController = TextEditingController();\n\n  String? _avatarUrl;\n  var _loading = true;\n\n  Future<void> _getProfile() async {\n    setState(() {\n      _loading = true;\n    });\n\n    try {\n      final userId = supabase.auth.currentSession!.user.id;\n      final data =\n          await supabase.from('profiles').select().eq('id', userId).single();\n      _usernameController.text = (data['username'] ?? '') as String;\n      _websiteController.text = (data['website'] ?? '') as String;\n      _avatarUrl = (data['avatar_url'] ?? '') as String;\n    } on PostgrestException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _loading = false;\n        });\n      }\n    }\n  }\n\n  Future<void> _updateProfile() async {\n    setState(() {\n      _loading = true;\n    });\n    final userName = _usernameController.text.trim();\n    final website = _websiteController.text.trim();\n    final user = supabase.auth.currentUser;\n    final updates = {\n      'id': user!.id,\n      'username': userName,\n      'website': website,\n      'updated_at': DateTime.now().toIso8601String(),\n    };\n    try {\n      await supabase.from('profiles').upsert(updates);\n      if (mounted) context.showSnackBar('Successfully updated profile!');\n    } on PostgrestException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _loading = false;\n        });\n      }\n    }\n  }\n\n  Future<void> _signOut() async {\n    try {\n      await supabase.auth.signOut();\n    } on AuthException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    } finally {\n      if (mounted) {\n        Navigator.of(context).pushReplacement(\n          MaterialPageRoute(builder: (_) => const LoginPage()),\n        );\n      }\n    }\n  }\n\n  Future<void> _onUpload(String imageUrl) async {\n    try {\n      final userId = supabase.auth.currentUser!.id;\n      await supabase.from('profiles').upsert({\n        'id': userId,\n        'avatar_url': imageUrl,\n      });\n      if (mounted) {\n        const SnackBar(\n          content: Text('Updated your profile image!'),\n        );\n      }\n    } on PostgrestException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    }\n    if (!mounted) {\n      return;\n    }\n\n    setState(() {\n      _avatarUrl = imageUrl;\n    });\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _getProfile();\n  }\n\n  @override\n  void dispose() {\n    _usernameController.dispose();\n    _websiteController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Profile')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),\n        children: [\n          Avatar(\n            imageUrl: _avatarUrl,\n            onUpload: _onUpload,\n          ),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _usernameController,\n            decoration: const InputDecoration(labelText: 'User Name'),\n          ),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _websiteController,\n            decoration: const InputDecoration(labelText: 'Website'),\n          ),\n          const SizedBox(height: 18),\n          ElevatedButton(\n            onPressed: _loading ? null : _updateProfile,\n            child: Text(_loading ? 'Saving...' : 'Update'),\n          ),\n          const SizedBox(height: 18),\n          TextButton(onPressed: _signOut, child: const Text('Sign Out')),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security in SQL for Supabase Chat App\nDESCRIPTION: This SQL code defines Row Level Security policies for the chat application's database tables. It includes a function to check if a user is a room participant and policies for profiles, rooms, room participants, and messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\n-- Returns true if the signed in user is a participant of the room\ncreate or replace function is_room_participant(room_id uuid)\nreturns boolean as $$\n  select exists(\n    select 1\n    from room_participants\n    where room_id = is_room_participant.room_id and profile_id = auth.uid()\n  );\n$$ language sql security definer;\n\n\n-- *** Row level security polities ***\n\n\nalter table public.profiles enable row level security;\ncreate policy \"Public profiles are viewable by everyone.\"\n  on public.profiles for select using (true);\n\n\nalter table public.rooms enable row level security;\ncreate policy \"Users can view rooms that they have joined\"\n  on public.rooms for select using (is_room_participant(id));\n\n\nalter table public.room_participants enable row level security;\ncreate policy \"Participants of the room can view other participants.\"\n  on public.room_participants for select using (is_room_participant(room_id));\n\n\nalter table public.messages enable row level security;\ncreate policy \"Users can view messages on rooms they are in.\"\n  on public.messages for select using (is_room_participant(room_id));\ncreate policy \"Users can insert messages on rooms they are in.\"\n  on public.messages for insert with check (is_room_participant(room_id) and profile_id = auth.uid());\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Access Token Hook in PLV8\nDESCRIPTION: This function is used to create a custom access token hook that sets the user's role level in claims based on the user's ID retrieved from the profiles table. It initializes default claims if not present and requires the PLV8 language for execution.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: plv8\nCODE:\n```\ncreate or replace function custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plv8\nas $$\n  var user_level;\n\n  -- Fetch the current user's level from the profiles table\n  var result = plv8.execute(\"select level from public.profiles where user_id = $1\", [event.user_id]);\n  if (result.length > 0) {\n    user_level = result[0].level;\n  } else {\n    -- Assign a default level of 0 if no level is found\n    user_level = 0;\n  }\n\n  -- Check if 'claims' exists in the event object; if not, initialize it\n  if (!event.claims) {\n    event.claims = {};\n  }\n\n  -- Update the level in the claims\n  event.claims.level = user_level;\n\n  return event;\n$$;\n\ngrant all\n  on table public.profiles\n  to supabase_auth_admin;\n\nrevoke all\n  on table public.profiles\n  from authenticated, anon, public;\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema Models with Drizzle ORM\nDESCRIPTION: Creates a schema.ts file that defines a 'users' table model with id, fullName, and phone columns using Drizzle's pgTable function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/drizzle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\n\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  fullName: text('full_name'),\n  phone: varchar('phone', { length: 256 }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Function and Trigger for User Profile Creation\nDESCRIPTION: This SQL script creates a function to handle new user registration by inserting a row into the profiles table. It also sets up a trigger to automatically call this function when a new user is created in the auth.users table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n-- Function to create a new row in profiles table upon signup\n-- Also copies the username value from metadata\ncreate or replace function handle_new_user() returns trigger as $$\n    begin\n        insert into public.profiles(id, username)\n        values(new.id, new.raw_user_meta_data->>'username');\n\n        return new;\n    end;\n$$ language plpgsql security definer;\n\n-- Trigger to call `handle_new_user` when new user signs up\ncreate trigger on_auth_user_created\n    after insert on auth.users\n    for each row\n    execute function handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security in SQL\nDESCRIPTION: This SQL snippet demonstrates how to enable Row Level Security on the 'todos' table and allow anonymous access. This is useful for development purposes but should be properly secured in production environments. You must have access to modify table policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- Turn on security\nalter table \"todos\"\nenable row level security;\n\n-- Allow anonymous access\ncreate policy \"Allow anonymous access\"\non todos\nfor select\nto anon\nusing (true);\n```\n\n----------------------------------------\n\nTITLE: Inserting data into the 'todos' table in SQL\nDESCRIPTION: This SQL snippet inserts a sample task into the 'todos' table. By executing this query, any setup listeners will trigger on detected changes to the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into todos (task)\nvalues\n  ('Change!');\n```\n\n----------------------------------------\n\nTITLE: macOS Deep Link Configuration (Flutter)\nDESCRIPTION: This XML snippet demonstrates how to configure custom URL schemes in the Info.plist file for a macOS Flutter application. This configuration allows the application to be opened using a custom URL scheme.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... other tags -->\n<plist version=\"1.0\">\n<dict>\n  <!-- ... other tags -->\n  <key>CFBundleURLTypes</key>\n  <array>\n      <dict>\n          <key>CFBundleURLName</key>\n          <!-- abstract name for this URL type (you can leave it blank) -->\n          <string>sample_name</string>\n          <key>CFBundleURLSchemes</key>\n          <array>\n              <!-- your schemes -->\n              <string>sample</string>\n          </array>\n      </dict>\n  </array>\n  <!-- ... other tags -->\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Enabling Required PostgreSQL Extensions\nDESCRIPTION: SQL commands to enable necessary PostgreSQL extensions for vector operations, queueing, HTTP requests, scheduling, and data management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists vector with schema extensions;\ncreate extension if not exists pgmq;\ncreate extension if not exists pg_net with schema extensions;\ncreate extension if not exists pg_cron;\ncreate extension if not exists hstore with schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships via REST URL\nDESCRIPTION: REST URL example showing how to query orchestral sections with their related instruments directly using the Supabase REST API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGET https://[REF].supabase.co/rest/v1/orchestral_sections?select=id,name,instruments(id,name)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth Users Table Monitoring\nDESCRIPTION: SQL commands to create and configure audit logging for the auth.users table\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- create logging role\ncreate role \"auth_auditor\" noinherit;\n\n-- give role permission to observe relevant table events\ngrant select on auth.users to \"auth_auditor\";\ngrant delete on auth.users to \"auth_auditor\";\n\n-- assign auth_auditor to pgaudit.role\nalter role \"postgres\" set pgaudit.role to 'auth_auditor';\n```\n\n----------------------------------------\n\nTITLE: Querying Array Data with JavaScript Supabase Client\nDESCRIPTION: This JavaScript snippet uses the Supabase client to select the entire 'textarray' column from the 'arraytest' table and logs the result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('arraytest').select('textarray')\nconsole.log(JSON.stringify(data, null, 2))\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Exchange Route in JavaScript\nDESCRIPTION: This JavaScript code snippet implements a server-side route to exchange an authentication code for a user's session using SvelteKit with Supabase. It redirects to the root once the session is acquired.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit'\n\nexport const GET = async ({ url, locals: { supabase } }) => {\n  const code = url.searchParams.get('code')\n\n  if (code) {\n    await supabase.auth.exchangeCodeForSession(code)\n  }\n\n  redirect(303, '/')\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data by Age in PostgreSQL\nDESCRIPTION: A simple SQL query that selects name from the persons table where age equals 32. Without an index, this query would require a sequential scan of the entire table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect name from persons where age = 32;\n```\n\n----------------------------------------\n\nTITLE: Signing In with LinkedIn using Supabase JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to authenticate a user with LinkedIn OAuth using Supabase's `signInWithOAuth` function. It requires the `@supabase/supabase-js` library and a Supabase project URL with an anonymous key. Parameters include the `provider` set to `linkedin_oidc`, returning the user's authentication data upon success.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithLinkedIn() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'linkedin_oidc',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Llamafile Function with OpenAI Deno SDK\nDESCRIPTION: TypeScript code for the Llamafile Edge Function using the OpenAI Deno SDK to interact with the Llamafile server, supporting both streaming and non-streaming responses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from 'https://deno.land/x/openai@v4.53.2/mod.ts'\n\nDeno.serve(async (req) => {\n  const client = new OpenAI()\n  const { prompt } = await req.json()\n  const stream = true\n\n  const chatCompletion = await client.chat.completions.create({\n    model: 'LLaMA_CPP',\n    stream,\n    messages: [\n      {\n        role: 'system',\n        content:\n          'You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.',\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ],\n  })\n\n  if (stream) {\n    const headers = new Headers({\n      'Content-Type': 'text/event-stream',\n      Connection: 'keep-alive',\n    })\n\n    // Create a stream\n    const stream = new ReadableStream({\n      async start(controller) {\n        const encoder = new TextEncoder()\n\n        try {\n          for await (const part of chatCompletion) {\n            controller.enqueue(encoder.encode(part.choices[0]?.delta?.content || ''))\n          }\n        } catch (err) {\n          console.error('Stream error:', err)\n        } finally {\n          controller.close()\n        }\n      },\n    })\n\n    // Return the stream to the user\n    return new Response(stream, {\n      headers,\n    })\n  }\n\n  return Response.json(chatCompletion)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Handlers in SvelteKit\nDESCRIPTION: Server-side handlers for user signup and login using Supabase authentication. Includes error handling and redirection logic.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst password = formData.get('password') as string\n\nconst { error } = await supabase.auth.signUp({ email, password })\nif (error) {\n  console.error(error)\n  redirect(303, '/auth/error')\n} else {\n  redirect(303, '/')\n}\n},\nlogin: async ({ request, locals: { supabase } }) => {\nconst formData = await request.formData()\nconst email = formData.get('email') as string\nconst password = formData.get('password') as string\n\nconst { error } = await supabase.auth.signInWithPassword({ email, password })\nif (error) {\n  console.error(error)\n  redirect(303, '/auth/error')\n} else {\n  redirect(303, '/private')\n}\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table Structure in PostgreSQL\nDESCRIPTION: This SQL creates a sample 'persons' table with columns for id, age, height, weight, name, and deceased status. The id field uses the BIGINT type with an identity generator as the primary key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table persons (\n  id bigint generated by default as identity primary key,\n  age int,\n  height int,\n  weight int,\n  name text,\n  deceased boolean\n);\n```\n\n----------------------------------------\n\nTITLE: Querying JSONB Data with Supabase JavaScript Client\nDESCRIPTION: Example of querying JSONB data from Supabase using the JavaScript client. This demonstrates how to use the arrow operator to access nested JSONB fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('https://<your-project>.supabase.co', '<your-api-key>')\n\nconst { data, error } = await supabase.from('users').select(`\n    user:  metadata->user\n  `)\n// the -> operator returns values as jsonb for the user collection\n\nif (error) console.error(error)\nelse console.log(data)\n```\n\n----------------------------------------\n\nTITLE: Sending Session to Client in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to forward session information to the client side in SvelteKit, utilizing async load functions for session retrieval.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/+layout.server.ts\nexport const load = async ({ locals: { safeGetSession } }) => {\n  const { session, user } = await safeGetSession()\n\n  return {\n    session,\n    user,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Chat Page UI Implementation\nDESCRIPTION: Implements the chat page UI with message bubbles, input field, and state management integration using BlocConsumer for real-time updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:my_chat_app/components/user_avatar.dart';\nimport 'package:my_chat_app/cubits/chat/chat_cubit.dart';\n\nimport 'package:my_chat_app/models/message.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:timeago/timeago.dart';\n\nclass ChatPage extends StatelessWidget {\n  const ChatPage({Key? key}) : super(key: key);\n\n  static Route<void> route(String roomId) {\n    return MaterialPageRoute(\n      builder: (context) => BlocProvider<ChatCubit>(\n        create: (context) => ChatCubit()..setMessagesListener(roomId),\n        child: const ChatPage(),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Chat')),\n      body: BlocConsumer<ChatCubit, ChatState>(\n        listener: (context, state) {\n          if (state is ChatError) {\n            context.showErrorSnackBar(message: state.message);\n          }\n        },\n        builder: (context, state) {\n          if (state is ChatInitial) {\n            return preloader;\n          } else if (state is ChatLoaded) {\n            final messages = state.messages;\n            return Column(\n              children: [\n                Expanded(\n                  child: ListView.builder(\n                    padding: const EdgeInsets.symmetric(vertical: 8),\n                    reverse: true,\n                    itemCount: messages.length,\n                    itemBuilder: (context, index) {\n                      final message = messages[index];\n                      return _ChatBubble(message: message);\n                    },\n                  ),\n                ),\n                const _MessageBar(),\n              ],\n            );\n          } else if (state is ChatEmpty) {\n            return Column(\n              children: const [\n                Expanded(\n                  child: Center(\n                    child: Text('Start your conversation now :)'),\n                  ),\n                ),\n                _MessageBar(),\n              ],\n            );\n          } else if (state is ChatError) {\n            return Center(child: Text(state.message));\n          }\n          throw UnimplementedError();\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging HTTP Requests with Postman Echo API\nDESCRIPTION: Example of using the Postman Echo API to debug HTTP requests by sending a POST request and then inspecting the response content to verify the request body.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    net.http_post(\n        url := 'https://postman-echo.com/post',\n        body := '{\"key1\": \"value\", \"key2\": 5}'::jsonb\n    ) as request_id;\n```\n\n----------------------------------------\n\nTITLE: Video Search Implementation\nDESCRIPTION: Python function to perform semantic video search using text queries through Mixpeek embeddings and Supabase Vector.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef search():\n    # Initialize Supabase and Mixpeek clients\n    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)\n    mixpeek = Mixpeek(MIXPEEK_API_KEY)\n\n    # Generate embedding for text query\n    query_string = \"a car chase scene\"\n    text_emb = mixpeek.embed.video(\n        model_id=\"vuse-generic-v1\",\n        input=query_string,\n        input_type=\"text\"\n    )\n\n    # Query the collection\n    results = supabase.rpc(\n        'match_video_chunks',\n        {\n            'query_embedding': text_emb['embedding'],\n            'match_threshold': 0.8,\n            'match_count': 5\n        }\n    ).execute()\n\n    # Display the results\n    if results.data:\n        for result in results.data:\n            print(f\"Matched chunk from {result['start_time']} to {result['end_time']} seconds\")\n            print(f\"Video URL: {result['metadata']['video_url']}\")\n            print(f\"Similarity: {result['similarity']}\")\n            print(\"---\")\n    else:\n        print(\"No matching video chunks found\")\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships in Python\nDESCRIPTION: Python example showing how to query teams with their related users through a many-to-many relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.from_('teams').select('id, team_name, users(id, name)').execute()\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Messages\nDESCRIPTION: Removes multiple messages from the queue by their message IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.delete('my_queue', array[2, 3]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.delete('my_queue', array[6, 999]);\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Prisma Migrations with npm\nDESCRIPTION: This snippet shows how to synchronize Prisma migrations using npm. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff \\\n--from-empty \\\n--to-schema-datamodel prisma/schema.prisma \\\n--script > prisma/migrations/0_init_supabase/migration.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init_supabase\n```\n\n----------------------------------------\n\nTITLE: Decompressing Gzip Requests in TypeScript Edge Function\nDESCRIPTION: Example showing how to decompress Gzip encoded request bodies using node:zlib's gunzipSync. The code checks for Gzip encoding, decompresses the body, converts it to a string, and parses it as JSON. Includes error handling and a warning about the 150MB memory limit.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/compression.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gunzipSync } from 'node:zlib'\n\nDeno.serve(async (req) => {\n  try {\n    // Check if the request body is gzip compressed\n    const contentEncoding = req.headers.get('content-encoding')\n    if (contentEncoding !== 'gzip') {\n      return new Response('Request body is not gzip compressed', {\n        status: 400,\n      })\n    }\n\n    // Read the compressed body\n    const compressedBody = await req.arrayBuffer()\n\n    // Decompress the body\n    const decompressedBody = gunzipSync(new Uint8Array(compressedBody))\n\n    // Convert the decompressed body to a string\n    const decompressedString = new TextDecoder().decode(decompressedBody)\n    const data = JSON.parse(decompressedString)\n\n    // Process the decompressed body as needed\n    console.log(`Received: ${JSON.stringify(data)}`)\n\n    return new Response('ok', {\n      headers: { 'Content-Type': 'text/plain' },\n    })\n  } catch (error) {\n    console.error('Error:', error)\n    return new Response('Error processing request', { status: 500 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Columns in SQL\nDESCRIPTION: SQL query to create a new table named 'movies' with columns for id, name, and description. The id column is set as the primary key with auto-incrementing values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n```\n\n----------------------------------------\n\nTITLE: Adding CASCADE Delete Constraint Example\nDESCRIPTION: Adds a new column with CASCADE delete constraint and updates existing data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nalter table child\nadd column mother integer references parent (id)\n  on delete cascade;\n\nupdate child\nset mother = 2\nwhere id = 1;\n```\n\n----------------------------------------\n\nTITLE: Updating Table Statistics in PostgreSQL\nDESCRIPTION: Using ANALYZE command to update table statistics for better query planning.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nanalyze customers;\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Pipeline for Edge Functions\nDESCRIPTION: GitLab CI pipeline configuration that sets up Node.js environment and deploys Edge Functions. Includes stages for setup and deployment, with Docker service integration for function deployment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cicd-workflow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:20\n\nstages:\n  - setup\n  - deploy\n\nsetup-npm:\n  stage: setup\n  script:\n    - npm i supabase\n  cache:\n    paths:\n      - node_modules/\n  artifacts:\n    paths:\n      - node_modules/\n\ndeploy-function:\n  stage: deploy\n  script:\n    - npx supabase init\n    - npx supabase functions deploy --debug\n  services:\n    - docker:dind\n  variables:\n    DOCKER_HOST: tcp://docker:2375\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Component with Magic Links\nDESCRIPTION: A Svelte component that implements passwordless authentication using Supabase's magic link functionality. Users can sign in by receiving an email with a login link.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { supabase } from '../supabaseClient'\n\n  let loading = false\n  let email = ''\n\n  const handleLogin = async () => {\n    try {\n      loading = true\n      const { error } = await supabase.auth.signInWithOtp({ email })\n      if (error) throw error\n      alert('Check your email for login link!')\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<div class=\"row flex-center flex\">\n  <div class=\"col-6 form-widget\" aria-live=\"polite\">\n    <h1 class=\"header\">Supabase + Svelte</h1>\n    <p class=\"description\">Sign in via magic link with your email below</p>\n    <form class=\"form-widget\" on:submit|preventDefault=\"{handleLogin}\">\n      <div>\n        <label for=\"email\">Email</label>\n        <input\n          id=\"email\"\n          class=\"inputField\"\n          type=\"email\"\n          placeholder=\"Your email\"\n          bind:value=\"{email}\"\n        />\n      </div>\n      <div>\n        <button type=\"submit\" class=\"button block\" aria-live=\"polite\" disabled=\"{loading}\">\n          <span>{loading ? 'Loading' : 'Send magic link'}</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Vue\nDESCRIPTION: TypeScript helper file to initialize the Supabase client using environment variables, making it available throughout the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n```\n\n----------------------------------------\n\nTITLE: Adding Exclusion Constraint to Prevent Overlapping Reservations\nDESCRIPTION: This SQL statement adds an exclusion constraint to the reservations table to prevent overlapping reservations using the GiST index.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter table reservations\n\tadd constraint exclude_duration exclude\n\tusing gist (duration with &&)\n```\n\n----------------------------------------\n\nTITLE: Altering Default Function Privileges\nDESCRIPTION: SQL commands to modify default function execution privileges for new functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nalter default privileges in schema public revoke execute on functions from public;\nalter default privileges in schema public revoke execute on functions from anon, authenticated;\n```\n\n----------------------------------------\n\nTITLE: Creating a JWT Payload in JavaScript\nDESCRIPTION: This JavaScript code snippet shows an example of a JSON object representing the payload of a JWT (JSON Web Token). It includes standard claims such as `sub` (subject), `name`, `iat` (issued at), and `exp` (expiration time). The `sub` is typically the user's UUID, `iat` is the token creation timestamp, and `exp` is the token expiration timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"0001\",\n  \"name\": \"Sam Vimes\",\n  \"iat\": 1516239022,\n  \"exp\": 1518239022\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Types for Database Tables\nDESCRIPTION: Shows the structure of generated TypeScript types for the 'movies' table, including Row, Insert, and Update interfaces.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]\n\nexport interface Database {\n  public: {\n    Tables: {\n      movies: {\n        Row: {\n          // the data expected from .select()\n          id: number\n          name: string\n          data: Json | null\n        }\n        Insert: {\n          // the data to be passed to .insert()\n          id?: never // generated columns must not be supplied\n          name: string // `not null` columns with no default must be supplied\n          data?: Json | null // nullable columns can be omitted\n        }\n        Update: {\n          // the data to be passed to .update()\n          id?: never\n          name?: string // `not null` columns are optional on .update()\n          data?: Json | null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Supabase Posts Table\nDESCRIPTION: SQL script to create a posts table with UUID primary key and timestamps, then populate it with example data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists posts (\n  id uuid default gen_random_uuid() primary key,\n  created_at timestamp with time zone default timezone('utc'::text, now()) not null,\n  title text,\n  content text\n);\n\ninsert into posts(title, content)\nvalues\n  ('My first post', 'Wow! What a great post.'),\n  ('My second post', 'This one needs a little work!');\n```\n\n----------------------------------------\n\nTITLE: Creating Embedding Processing Function with Batch Support\nDESCRIPTION: Implements a function to process queued embedding jobs in batches, with configurable batch size, request limits, and timeout settings. Includes pg_cron scheduling for automatic processing every 10 seconds.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_6\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function util.process_embeddings(\n  batch_size int = 10,\n  max_requests int = 10,\n  timeout_milliseconds int = 5 * 60 * 1000 -- default 5 minute timeout\n)\nreturns void\nlanguage plpgsql\nas $$\ndeclare\n  job_batches jsonb[];\n  batch jsonb;\nbegin\n  with\n    -- First get jobs and assign batch numbers\n    numbered_jobs as (\n      select\n        message || jsonb_build_object('jobId', msg_id) as job_info,\n        (row_number() over (order by 1) - 1) / batch_size as batch_num\n      from pgmq.read(\n        queue_name => 'embedding_jobs',\n        vt => timeout_milliseconds / 1000,\n        qty => max_requests * batch_size\n      )\n    ),\n    -- Then group jobs into batches\n    batched_jobs as (\n      select\n        jsonb_agg(job_info) as batch_array,\n        batch_num\n      from numbered_jobs\n      group by batch_num\n    )\n  -- Finally aggregate all batches into array\n  select array_agg(batch_array)\n  from batched_jobs\n  into job_batches;\n\n  -- Invoke the embed edge function for each batch\n  foreach batch in array job_batches loop\n    perform util.invoke_edge_function(\n      name => 'embed',\n      body => batch,\n      timeout_milliseconds => timeout_milliseconds\n    );\n  end loop;\nend;\n$$;\n\n-- Schedule the embedding processing\nselect\n  cron.schedule(\n    'process-embeddings',\n    '10 seconds',\n    $$\n    select util.process_embeddings();\n    $$\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase client in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a Supabase client that can be used to interact with the Supabase service and listen to Postgres changes. The function requires the project URL and an anonymous API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n  'https://<project>.supabase.co',\n  '<your-anon-key>'\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Server-Side with React Query and Supabase in Next.js\nDESCRIPTION: This code demonstrates how to prefetch data on the server using React Query and Supabase in a Next.js server component. It uses the prefetchQuery method to fetch country data and passes it to a client component via HydrationBoundary.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dehydrate, HydrationBoundary, QueryClient } from '@tanstack/react-query'\nimport { prefetchQuery } from '@supabase-cache-helpers/postgrest-react-query'\nimport useSupabaseServer from '@/utils/supabase-server'\nimport { cookies } from 'next/headers'\nimport Country from '../country'\nimport { getCountryById } from '@/queries/get-country-by-id'\n\nexport default async function CountryPage({ params }: { params: { id: number } }) {\n  const queryClient = new QueryClient()\n  const cookieStore = cookies()\n  const supabase = useSupabaseServer(cookieStore)\n\n  await prefetchQuery(queryClient, getCountryById(supabase, params.id))\n\n  return (\n    // Neat! Serialization is now as easy as passing props.\n    // HydrationBoundary is a Client Component, so hydration will happen there.\n    <HydrationBoundary state={dehydrate(queryClient)}>\n      <Country id={params.id} />\n    </HydrationBoundary>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Email Handler Implementation\nDESCRIPTION: Core implementation of the email sending function that processes webhook requests and sends emails using Resend. Handles authentication validation and email template rendering.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/auth-send-email-hook-react-email-resend.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'npm:react@18.3.1'\nimport { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'\nimport { Resend } from 'npm:resend@4.0.0'\nimport { renderAsync } from 'npm:@react-email/components@0.0.22'\nimport { MagicLinkEmail } from './_templates/magic-link.tsx'\n\nconst resend = new Resend(Deno.env.get('RESEND_API_KEY') as string)\nconst hookSecret = Deno.env.get('SEND_EMAIL_HOOK_SECRET') as string\n\nDeno.serve(async (req) => {\n  if (req.method !== 'POST') {\n    return new Response('not allowed', { status: 400 })\n  }\n\n  const payload = await req.text()\n  const headers = Object.fromEntries(req.headers)\n  const wh = new Webhook(hookSecret)\n  try {\n    const {\n      user,\n      email_data: { token, token_hash, redirect_to, email_action_type },\n    } = wh.verify(payload, headers) as {\n      user: {\n        email: string\n      }\n      email_data: {\n        token: string\n        token_hash: string\n        redirect_to: string\n        email_action_type: string\n        site_url: string\n        token_new: string\n        token_hash_new: string\n      }\n    }\n\n    const html = await renderAsync(\n      React.createElement(MagicLinkEmail, {\n        supabase_url: Deno.env.get('SUPABASE_URL') ?? '',\n        token,\n        token_hash,\n        redirect_to,\n        email_action_type,\n      })\n    )\n\n    const { error } = await resend.emails.send({\n      from: 'welcome <onboarding@resend.dev>',\n      to: [user.email],\n      subject: 'Supa Custom MagicLink!',\n      html,\n    })\n    if (error) {\n      throw error\n    }\n  } catch (error) {\n    console.log(error)\n    return new Response(\n      JSON.stringify({\n        error: {\n          http_code: error.code,\n          message: error.message,\n        },\n      }),\n      {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    )\n  }\n\n  const responseHeaders = new Headers()\n  responseHeaders.set('Content-Type', 'application/json')\n  return new Response(JSON.stringify({}), {\n    status: 200,\n    headers: responseHeaders,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages via REST API using cURL\nDESCRIPTION: This snippet demonstrates how to send a broadcast message using cURL to make an HTTP request to Supabase Realtime servers. It includes the necessary headers and JSON payload structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \\\n-H 'apikey: <SUPABASE_TOKEN>' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\n  \"messages\": [\n    {\n      \"topic\": \"test\",\n      \"event\": \"event\",\n      \"payload\": { \"test\": \"test\" }\n    }\n  ]\n}' \\\n'https://<PROJECT_REF>.supabase.co/realtime/v1/api/broadcast'\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Trigger to Execute Function in SQL\nDESCRIPTION: This SQL code creates a trigger that executes the `your_table_changes` function after any changes (insert, update, or delete) to the `public.your_table` table. The trigger is defined to execute for each row affected by the change.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger handle_your_table_changes\nafter insert or update or delete\non public.your_table\nfor each row\nexecute function your_table_changes ();\n```\n\n----------------------------------------\n\nTITLE: Vector Distance Operators Table in Markdown\nDESCRIPTION: Markdown table showing the three distance operators supported by pgvector (<->), (<#>), and (<=>) along with their descriptions and operator classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Operator | Description            | [**Operator class**](https://www.postgresql.org/docs/current/sql-createopclass.html) |\n| -------- | ---------------------- | ------------------------------------------------------------------------------------ |\n| `<->`    | Euclidean distance     | `vector_l2_ops`                                                                      |\n| `<#>`    | negative inner product | `vector_ip_ops`                                                                      |\n| `<=>`    | cosine distance        | `vector_cosine_ops`                                                                  |\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Query Plan Analysis\nDESCRIPTION: Command for analyzing query execution plans in PostgreSQL, showing how to use EXPLAIN and EXPLAIN ANALYZE for query optimization\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nexplain analyze <query-statement-here>;\n```\n\n----------------------------------------\n\nTITLE: Multi-Word Search with OR Operator\nDESCRIPTION: SQL query showing how to search for multiple words using the OR operator (|) in tsquery\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description)\n  @@ to_tsquery('little | big');\n```\n\n----------------------------------------\n\nTITLE: Listening to DELETE Events in Python with Supabase Realtime\nDESCRIPTION: Establishes a Python channel to listen for DELETE events in the public schema of a Supabase database. The code creates a subscription that calls a lambda function to print the payload whenever database deletions occur.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('schema-db-changes').on_postgres_changes(\n  \"DELETE\", # Listen only to DELETEs\n  schema=\"public\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing MFA Verification Page in Flutter with Supabase\nDESCRIPTION: This snippet defines an MFAVerifyPage widget that handles the verification of a Time-based One-Time Password (TOTP) for Multi-Factor Authentication. It uses Supabase to verify the TOTP and redirects to the home page upon successful verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:mfa_app/main.dart';\nimport 'package:mfa_app/pages/auth/register_page.dart';\nimport 'package:mfa_app/pages/home_page.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MFAVerifyPage extends StatefulWidget {\n  static const route = '/mfa/verify';\n  const MFAVerifyPage({super.key});\n\n  @override\n  State<MFAVerifyPage> createState() => _MFAVerifyPageState();\n}\n\nclass _MFAVerifyPageState extends State<MFAVerifyPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Verify MFA'),\n        actions: [\n          TextButton(\n            onPressed: () {\n              supabase.auth.signOut();\n              context.go(RegisterPage.route);\n            },\n            child: Text(\n              'Logout',\n              style: TextStyle(color: Theme.of(context).colorScheme.onPrimary),\n            ),\n          ),\n        ],\n      ),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(\n          horizontal: 20,\n          vertical: 24,\n        ),\n        children: [\n          Text(\n            'Verification Required',\n            style: Theme.of(context).textTheme.titleLarge,\n          ),\n          const SizedBox(height: 16),\n          const Text('Enter the code shown in your authentication app.'),\n          const SizedBox(height: 16),\n          TextFormField(\n            decoration: const InputDecoration(\n              hintText: '000000',\n            ),\n            style: const TextStyle(fontSize: 24),\n            textAlign: TextAlign.center,\n            keyboardType: TextInputType.number,\n            onChanged: (value) async {\n              if (value.length != 6) return;\n\n              // kick off the verification process once 6 characters are entered\n              try {\n                final factorsResponse = await supabase.auth.mfa.listFactors();\n                final factor = factorsResponse.totp.first;\n                final factorId = factor.id;\n\n                final challenge =\n                    await supabase.auth.mfa.challenge(factorId: factorId);\n                await supabase.auth.mfa.verify(\n                  factorId: factorId,\n                  challengeId: challenge.id,\n                  code: value,\n                );\n                await supabase.auth.refreshSession();\n                if (mounted) {\n                  context.go(HomePage.route);\n                }\n              } on AuthException catch (error) {\n                ScaffoldMessenger.of(context)\n                    .showSnackBar(SnackBar(content: Text(error.message)));\n              } catch (error) {\n                ScaffoldMessenger.of(context).showSnackBar(\n                    const SnackBar(content: Text('Unexpected error occurred')));\n              }\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket using Python in Supabase Storage\nDESCRIPTION: This Python snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It calls the `create_bucket` method on the `storage` property of the `supabase` object, creating a bucket named 'avatars'. The response object will contain the result of the operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.storage.create_bucket('avatars')\n```\n\n----------------------------------------\n\nTITLE: Signing Up New User using Supabase in Dart\nDESCRIPTION: This Dart snippet shows how to sign up a new user with an email address and password using Supabase's Dart client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signUpNewUser() async {\n  final AuthResponse res = await supabase.auth.signUp(\n    email: 'valid.email@supabase.io',\n    password: 'example-password'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Image Resizing with Supabase Storage JavaScript API\nDESCRIPTION: Demonstrates how to use the Supabase Storage API to get a public URL for a resized image with specified dimensions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-13-storage-image-resizing-smart-cdn.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.storage.from('bucket').getPublicUrl('image.jpg', {\n  transform: {\n    width: 500,\n    height: 600,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Expo Push Notification Handler in Supabase Edge Function\nDESCRIPTION: This edge function handles database webhooks to send push notifications via Expo's service. It retrieves the user's Expo push token from the profiles table and sends a notification with the content from the newly inserted notification record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nconsole.log('Hello from Functions!')\n\ninterface Notification {\n  id: string\n  user_id: string\n  body: string\n}\n\ninterface WebhookPayload {\n  type: 'INSERT' | 'UPDATE' | 'DELETE'\n  table: string\n  record: Notification\n  schema: 'public'\n  old_record: null | Notification\n}\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL')!,\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n)\n\nDeno.serve(async (req) => {\n  const payload: WebhookPayload = await req.json()\n  const { data } = await supabase\n    .from('profiles')\n    .select('expo_push_token')\n    .eq('id', payload.record.user_id)\n    .single()\n\n  const res = await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${Deno.env.get('EXPO_ACCESS_TOKEN')}`,\n    },\n    body: JSON.stringify({\n      to: data?.expo_push_token,\n      sound: 'default',\n      body: payload.record.body,\n    }),\n  }).then((res) => res.json())\n\n  return new Response(JSON.stringify(res), {\n    headers: { 'Content-Type': 'application/json' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Revoking Execute Permission from Client Roles\nDESCRIPTION: SQL command to revoke execution permission on a hook function from authenticated and anonymous roles for security purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nrevoke execute\n  on function public.custom_access_token_hook\n  from authenticated, anon;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metrics for All Queues in PGMQ with SQL\nDESCRIPTION: The metrics_all function returns metrics for all existing queues, including queue length, message ages, and total message count for each queue.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.metrics_all();\n      queue_name      | queue_length | newest_msg_age_sec | oldest_msg_age_sec | total_messages |          scrape_time\n----------------------+--------------+--------------------+--------------------+----------------+-------------------------------\n my_queue             |           16 |               2563 |               2565 |             35 | 2023-10-28 20:25:07.016413-05\n my_partitioned_queue |            1 |                 11 |                 11 |              1 | 2023-10-28 20:25:07.016413-05\n my_unlogged          |            1 |                  3 |                  3 |              1 | 2023-10-28 20:25:07.016413-05\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL RLS Policy for Selective Access\nDESCRIPTION: A SQL example showing how to create a Row Level Security policy on a todos table that restricts users to only select their own todos based on user_id matching the authenticated user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy todo_select_policy\n    on todos for select\n    using ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Link Email to Anonymous User in JavaScript\nDESCRIPTION: Updates an anonymous user to add an email address and password in Supabase. This converts an anonymous user to a permanent user by linking an email identity. The email must be verified before setting a password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: updateEmailData, error: updateEmailError } = await supabase.auth.updateUser({\n  email: 'valid.email@supabase.io',\n})\n\n// verify the user's email by clicking on the email change link\n// or entering the 6-digit OTP sent to the email address\n\n// once the user has been verified, update the password\nconst { data: updatePasswordData, error: updatePasswordError } = await supabase.auth.updateUser({\n  password: 'password',\n})\n```\n\n----------------------------------------\n\nTITLE: Full Text Search on Description Using Python\nDESCRIPTION: Python implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.from_('books').select().text_search('description', \"'big'\").execute()\n```\n\n----------------------------------------\n\nTITLE: Restrict Application Access in PLPGSQL\nDESCRIPTION: This function restricts application access based on authentication methods and the user's email claim. It is implemented in PLPGSQL and checks if the user belongs to allowed domains or has specific allowed emails to grant access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function public.restrict_application_access(event jsonb)\n returns jsonb\n language plpgsql\nas $function$\ndeclare\n    authentication_method text;\n    email_claim text;\n    allowed_emails text[] := array['myemail@company.com', 'example@company.com'];\nbegin\n    -- Extract email claim and authentication method\n    email_claim = event->'claims'->>'email';\n    authentication_method = event->'authentication_method';\n    -- Authentication methods come double quoted (e.g. \"otp\")\n    authentication_method = replace(authentication_method, '\"', '');\n\n    if email_claim ilike '%@supabase.io' or authentication_method = 'sso/saml' or email_claim = any(allowed_emails) then\n        return event;\n    end if;\n\n    -- If none of the conditions are met, return an error\n    return jsonb_build_object(\n        'error', jsonb_build_object(\n            'http_code', 403,\n            'message', 'Staging access is only allowed to team members. Please use your @company.com account instead'\n        )\n    );\nend;\n$function$\n;\n-- manually added\ngrant execute\n  on function public.restrict_application_access\n  to supabase_auth_admin;\n\nrevoke execute\n  on function public.restrict_application_access\n  from authenticated, anon, public;\n```\n\n----------------------------------------\n\nTITLE: Creating Secret Retrieval SQL Function for Supabase Edge Functions\nDESCRIPTION: This SQL function securely retrieves secrets from Vault, ensuring only authorized roles can access sensitive environment variables. It's used to manage secrets for dynamic JavaScript execution in Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION edge.get_secret(secret_name text) RETURNS text\n    LANGUAGE \"plpgsql\"\n    AS $$\nDECLARE\n    decrypted text;\nBEGIN\n    IF current_setting('request.jwt.claims', true)::jsonb->>'role' = 'service_role' OR current_user = 'postgres' THEN\n        SELECT decrypted_secret\n        INTO decrypted\n        FROM vault.decrypted_secrets\n        WHERE name = secret_name;\n        RETURN decrypted;\n    ELSE\n        RAISE EXCEPTION 'Access denied: only service_role or postgres user can execute this function.';\n    END IF;\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Scheduled ETL with pg_cron\nDESCRIPTION: SQL query to schedule nightly ETL jobs using pg_cron to copy data from production to warehouse.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.schedule(\n  'nightly-etl',\n  '0 3 * * *',\n  $$\n    insert into warehouse.analytics\n    select * from public.analytics\n    where ts > (now() - interval '1 DAY');\n  $$\n);\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships in JavaScript\nDESCRIPTION: JavaScript example showing how to query orchestral sections with their related instruments using Supabase's automatic relationship detection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('orchestral_sections').select(`\n  id,\n  name,\n  instruments ( id, name )\n`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In with Supabase in Flutter (iOS and macOS)\nDESCRIPTION: This snippet shows how to implement Apple sign-in for iOS and macOS using the sign_in_with_apple package and Supabase Auth in a Flutter application. It generates a nonce, retrieves the Apple ID credential, and signs in with Supabase using the ID token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:sign_in_with_apple/sign_in_with_apple.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:crypto/crypto.dart';\n\n/// Performs Apple sign in on iOS or macOS\nFuture<AuthResponse> signInWithApple() async {\n  final rawNonce = supabase.auth.generateRawNonce();\n  final hashedNonce = sha256.convert(utf8.encode(rawNonce)).toString();\n\n  final credential = await SignInWithApple.getAppleIDCredential(\n    scopes: [\n      AppleIDAuthorizationScopes.email,\n      AppleIDAuthorizationScopes.fullName,\n    ],\n    nonce: hashedNonce,\n  );\n\n  final idToken = credential.identityToken;\n  if (idToken == null) {\n    throw const AuthException(\n        'Could not find ID Token from generated credential.');\n  }\n\n  return supabase.auth.signInWithIdToken(\n    provider: OAuthProvider.apple,\n    idToken: idToken,\n    nonce: rawNonce,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Most Frequent SQL Statements\nDESCRIPTION: SQL query to analyze most frequently called queries with execution statistics and performance metrics\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  auth.rolname,\n  statements.query,\n  statements.calls,\n  statements.total_exec_time + statements.total_plan_time as total_time,\n  statements.min_exec_time + statements.min_plan_time as min_time,\n  statements.max_exec_time + statements.max_plan_time as max_time,\n  statements.mean_exec_time + statements.mean_plan_time as mean_time,\n  statements.rows / statements.calls as avg_rows\nfrom\n  pg_stat_statements as statements\n  inner join pg_authid as auth on statements.userid = auth.oid\norder by statements.calls desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Creating Search RPC Function\nDESCRIPTION: SQL function creation for implementing partial search through RPC calls\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function search_books_by_title_prefix(prefix text)\nreturns setof books AS $$\nbegin\n  return query\n  select * from books where to_tsvector('english', title) @@ to_tsquery(prefix || ':*');\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Listening only to 'INSERT' events in Swift\nDESCRIPTION: This Swift snippet configures a Supabase client to listen only for INSERT events in the 'public' schema using async/await. It logs specific changes by printing action records. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"schema-db-changes\")\n\nlet changes = await myChannel.postgresChange(InsertAction.self, schema: \"public\")\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Supabase client in JavaScript using the provided project URL and anonymous API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst SUPABASE_URL = 'https://<project>.supabase.co'\nconst SUPABASE_KEY = '<your-anon-key>'\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_KEY)\n```\n\n----------------------------------------\n\nTITLE: Searching for Specific Timezones in Postgres SQL\nDESCRIPTION: This SQL query demonstrates how to search for specific timezones using the 'ilike' operator for case-insensitive matching. It searches for timezones with 'york' in their name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/configuration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom pg_timezone_names()\nwhere name ilike '%york%';\n```\n\n----------------------------------------\n\nTITLE: Creating a Paddle Foreign Server using Wasm FDW in SQL\nDESCRIPTION: This SQL snippet creates a Paddle foreign server using the Wasm FDW. It specifies the Wasm package URL, version, checksum, and Paddle API credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- create Paddle foreign server\ncreate server paddle_server\n  foreign data wrapper wasm_wrapper\n  options (\n    -- check all available versions at\n    -- https://fdw.dev/catalog/paddle/#available-versions\n    fdw_package_url 'https://github.com/supabase/wrappers/releases/download/wasm_paddle_fdw_v0.1.1/paddle_fdw.wasm',\n    fdw_package_name 'supabase:paddle-fdw',\n    fdw_package_version '0.1.1',\n    fdw_package_checksum 'c5ac70bb2eef33693787b7d4efce9a83cde8d4fa40889d2037403a51263ba657',\n\n    -- save your Paddle credentials\n    api_url 'https://sandbox-api.paddle.com',\n    api_key '<your Paddle sandbox API key>'\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating a Products Table with Declarative Schema in SQL\nDESCRIPTION: This snippet demonstrates how to create a 'products' table using a declarative schema approach. It includes column definitions, primary key, and enables row-level security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"products\" (\n  id         bigint generated by default as identity,\n  name       text not null,\n  category   text,\n  price      numeric(10, 2) not null,\n  created_at timestamptz default now()\n);\n\nalter table \"products\"\nenable row level security;\n```\n\n----------------------------------------\n\nTITLE: User Avatar Component with Supabase Storage Integration in Svelte\nDESCRIPTION: A Svelte component for handling profile picture uploads using Supabase Storage. It allows users to upload, download, and display avatar images, with real-time previews and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- src/routes/account/Avatar.svelte -->\n<script lang=\"ts\">\n\timport type { SupabaseClient } from '@supabase/supabase-js'\n\timport { createEventDispatcher } from 'svelte'\n\n\texport let size = 10\n\texport let url: string\n\texport let supabase: SupabaseClient\n\n\tlet avatarUrl: string | null = null\n\tlet uploading = false\n\tlet files: FileList\n\n\tconst dispatch = createEventDispatcher()\n\n\tconst downloadImage = async (path: string) => {\n\t\ttry {\n\t\t\tconst { data, error } = await supabase.storage.from('avatars').download(path)\n\n\t\t\tif (error) {\n\t\t\t\tthrow error\n\t\t\t}\n\n\t\t\tconst url = URL.createObjectURL(data)\n\t\t\tavatarUrl = url\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.log('Error downloading image: ', error.message)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst uploadAvatar = async () => {\n\t\ttry {\n\t\t\tuploading = true\n\n\t\t\tif (!files || files.length === 0) {\n\t\t\t\tthrow new Error('You must select an image to upload.')\n\t\t\t}\n\n\t\t\tconst file = files[0]\n\t\t\tconst fileExt = file.name.split('.').pop()\n\t\t\tconst filePath = `${Math.random()}.${fileExt}`\n\n\t\t\tconst { error } = await supabase.storage.from('avatars').upload(filePath, file)\n\n\t\t\tif (error) {\n\t\t\t\tthrow error\n\t\t\t}\n\n\t\t\turl = filePath\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch('upload')\n\t\t\t}, 100)\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\talert(error.message)\n\t\t\t}\n\t\t} finally {\n\t\t\tuploading = false\n\t\t}\n\t}\n\n\t$: if (url) downloadImage(url)\n</script>\n\n<div>\n\t{#if avatarUrl}\n\t\t<img\n\t\t\tsrc={avatarUrl}\n\t\t\talt={avatarUrl ? 'Avatar' : 'No image'}\n\t\t\tclass=\"avatar image\"\n\t\t\tstyle=\"height: {size}em; width: {size}em;\"\n\t\t/>\n\t{:else}\n\t\t<div class=\"avatar no-image\" style=\"height: {size}em; width: {size}em;\" />\n\t{/if}\n\t<input type=\"hidden\" name=\"avatarUrl\" value={url} />\n\n\t<div style=\"width: {size}em;\">\n\t\t<label class=\"button primary block\" for=\"single\">\n\t\t\t{uploading ? 'Uploading ...' : 'Upload'}\n\t\t</label>\n\t\t<input\n\t\t\tstyle=\"visibility: hidden; position:absolute;\"\n\t\t\ttype=\"file\"\n\t\t\tid=\"single\"\n\t\t\taccept=\"image/*\"\n\t\t\tbind:files\n\t\t\ton:change={uploadAvatar}\n\t\t\tdisabled={uploading}\n\t\t/>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Orchestral Sections and Instruments in PostgreSQL\nDESCRIPTION: SQL commands to create and populate sample tables representing orchestral sections and instruments with a one-to-many relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table orchestral_sections (\n  \"id\" serial primary key,\n  \"name\" text\n);\n\ninsert into orchestral_sections\n  (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\n\ncreate table instruments (\n  \"id\" serial primary key,\n  \"name\" text,\n  \"section_id\" int references \"orchestral_sections\"\n);\n\ninsert into instruments\n  (name, section_id)\nvalues\n  ('violin', 1),\n  ('viola', 1),\n  ('flute', 2),\n  ('oboe', 2);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims to JWT using Auth0 Actions\nDESCRIPTION: This JavaScript snippet utilizes an Auth0 Action to assign a custom role claim to JWTs upon login. It requires implementing the onExecutePostLogin Action in Auth0's dashboard to modify access tokens and include a 'role' claim.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecutePostLogin = async (event, api) => {\n  api.accessToken.setCustomClaim('role', 'authenticated')\n}\n```\n\n----------------------------------------\n\nTITLE: Full Text Search Using JavaScript Supabase Client\nDESCRIPTION: JavaScript implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('books').select().textSearch('title', `'Harry'`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Edge Function in TypeScript\nDESCRIPTION: TypeScript edge function that handles semantic search operations. It takes a search term, generates an embedding using the gte-small model, then queries the database using the query_embeddings RPC function with a similarity threshold to find relevant content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst model = new Supabase.ai.Session('gte-small')\n\nDeno.serve(async (req) => {\n  const { search } = await req.json()\n  if (!search) return new Response('Please provide a search param!')\n  // Generate embedding for search term.\n  const embedding = await model.run(search, {\n    mean_pool: true,\n    normalize: true,\n  })\n\n  // Query embeddings.\n  const { data: result, error } = await supabase\n    .rpc('query_embeddings', {\n      embedding,\n      match_threshold: 0.8,\n    })\n    .select('content')\n    .limit(3)\n  if (error) {\n    return Response.json(error)\n  }\n\n  return Response.json({ search, result })\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling PGAudit Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable or disable the PGAudit extension in a Supabase PostgreSQL database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pgaudit\" extension\ncreate extension pgaudit;\n\n-- Disable the \"pgaudit\" extension\ndrop extension if exists pgaudit;\n```\n\n----------------------------------------\n\nTITLE: Configuring App.tsx with routes for instruments resource\nDESCRIPTION: React component setup that configures refine with Supabase data provider and defines routes for the CRUD operations (list, create, edit, show) on the instruments resource.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Refine, WelcomePage } from \"@refinedev/core\";\nimport { RefineKbar, RefineKbarProvider } from \"@refinedev/kbar\";\nimport routerBindings, {\n  DocumentTitleHandler,\n  NavigateToResource,\n  UnsavedChangesNotifier,\n} from \"@refinedev/react-router-v6\";\nimport { dataProvider, liveProvider } from \"@refinedev/supabase\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport authProvider from \"./authProvider\";\nimport { supabaseClient } from \"./utility\";\nimport { InstrumentsCreate, InstrumentsEdit, InstrumentsList, InstrumentsShow } from \"./pages/instruments\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <Refine\n          dataProvider={dataProvider(supabaseClient)}\n          liveProvider={liveProvider(supabaseClient)}\n          authProvider={authProvider}\n          routerProvider={routerBindings}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n          resources={[{\n            name: \"instruments\",\n            list: \"/instruments\",\n            create: \"/instruments/create\",\n            edit: \"/instruments/edit/:id\",\n            show: \"/instruments/show/:id\"\n          }]}>\n          <Routes>\n            <Route index\n              element={<NavigateToResource resource=\"instruments\" />}\n            />\n            <Route path=\"/instruments\">\n              <Route index element={<InstrumentsList />} />\n              <Route path=\"create\" element={<InstrumentsCreate />} />\n              <Route path=\"edit/:id\" element={<InstrumentsEdit />} />\n              <Route path=\"show/:id\" element={<InstrumentsShow />} />\n            </Route>\n          </Routes>\n          <RefineKbar />\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initiating Sign-In with SSO (Swift)\nDESCRIPTION: This Swift snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWithSSO` method to start the SP Initiated Flow. The Supabase client must be initialized before using this function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n\"try await supabase.auth.signInWithSSO(\n  domain: \\\"company.com\\\"\n)\"\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN for Query Plan Analysis in SQL\nDESCRIPTION: This snippet demonstrates how to use the EXPLAIN keyword to view the query execution plan in Postgres, which is useful for understanding index usage and query optimization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN <your query>\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres.js Database Connection\nDESCRIPTION: Setup of database connection using environment variables and Postgres.js client initialization. Creates a reusable database connection instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres-js.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// db.js\nimport postgres from 'postgres'\n\nconst connectionString = process.env.DATABASE_URL\nconst sql = postgres(connectionString)\n\nexport default sql\n```\n\n----------------------------------------\n\nTITLE: Storing Authentication Credentials in Supabase Vault\nDESCRIPTION: SQL commands to securely store the project URL and anonymous key in Supabase Vault for later use in scheduled function calls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/schedule-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect vault.create_secret('https://project-ref.supabase.co', 'project_url');\nselect vault.create_secret('YOUR_SUPABASE_ANON_KEY', 'anon_key');\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase and Seeding Data\nDESCRIPTION: Commands for starting the Supabase service and running the seed script to generate and store embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/aws_bedrock_image_search/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\npoetry run seed\n```\n\n----------------------------------------\n\nTITLE: Defining SvelteKit TypeScript Types for Supabase Auth\nDESCRIPTION: Type definitions for SvelteKit application interfaces including user session handling and authentication. Shows both pre-0.7.0 and post-0.7.0 implementations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@sveltejs/kit\" />\n// See https://kit.svelte.dev/docs/types#app\n// for information about these interfaces\ndeclare namespace App {\n  interface UserSession {\n    user: import('@supabase/supabase-js').User\n    accessToken?: string\n  }\n\n  interface Locals extends UserSession {\n    error: import('@supabase/supabase-js').ApiError\n  }\n\n  interface Session extends UserSession {}\n\n  // interface Platform {}\n  // interface Stuff {}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@sveltejs/kit\" />\n\n// See https://kit.svelte.dev/docs/types#app\n// for information about these interfaces\n// and what to do when importing types\ndeclare namespace App {\n  interface Locals {\n    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession\n  }\n\n  interface PageData {\n    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession\n  }\n\n  // interface Error {}\n  // interface Platform {}\n}\n```\n\n----------------------------------------\n\nTITLE: Signing In a User\nDESCRIPTION: This snippet demonstrates how to sign a user in to the Supabase auth system using their email and password. It handles authentication and returns data and error states, which are critical for managing user sessions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data, error} = await supabase.auth.signInWithPassword({\n      email: 'user-1@email.com',\n      password: 'example-password-1',\n    })\n```\n\n----------------------------------------\n\nTITLE: User Authentication Actions - TypeScript\nDESCRIPTION: Similar to the JavaScript snippet, this TypeScript snippet implements login and signup actions for user authentication with Supabase. Type definitions are provided for email and password. It manages form submissions in a strongly typed manner.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/login/+page.server.ts\nimport { fail } from '@sveltejs/kit'\n\nexport const actions = {\n  default: async ({ request, url, locals: { supabase } }) => {\n    const formData = await request.formData()\n    const email = formData.get('email') as string\n    const password = formData.get('password') as string\n\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        emailRedirectTo: `${url.origin}/auth/callback`,\n      },\n    })\n\n    if (error) {\n      return fail(500, { message: 'Server error. Try again later.', success: false, email })\n    }\n\n    return {\n      message: 'Please check your email for a magic link to log into the website.',\n      success: true,\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Render Database Using pg_dump\nDESCRIPTION: This snippet demonstrates how to use the pg_dump command to export your Render Postgres database to a SQL file. It requires the Render database host, user, and database name to be set as environment variables. The output is a SQL file named 'render_dump.sql'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/render.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npg_dump --clean --if-exists --quote-all-identifiers \\n-h $RENDER_HOST -U $RENDER_USER -d $RENDER_DATABASE \\n--no-owner --no-privileges > render_dump.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Relationship Tables\nDESCRIPTION: Sets up a many-to-many relationship between movies and actors using a junction table called performances.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n\ncreate table actors (\n  id bigint generated by default as identity primary key,\n  name text\n);\n\ncreate table performances (\n  id bigint generated by default as identity primary key,\n  movie_id bigint not null references movies,\n  actor_id bigint not null references actors\n);\n```\n\n----------------------------------------\n\nTITLE: Calling plv8 Functions in JavaScript with Supabase\nDESCRIPTION: Example of calling a plv8 function from JavaScript using the Supabase client library's RPC method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { data, error } = supabase.rpc('function_name')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Database for Figma Clone\nDESCRIPTION: SQL commands to create the necessary table and set up Row Level Security policies for the Figma clone app in Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table canvas_objects (\n    id uuid primary key default gen_random_uuid() not null,\n    \"object\" jsonb not null,\n    created_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n\nalter table canvas_objects enable row level security;\ncreate policy select_canvas_objects on canvas_objects as permissive for select to anon using (true);\ncreate policy insert_canvas_objects on canvas_objects as permissive for insert to anon with check (true);\ncreate policy update_canvas_objects on canvas_objects as permissive for update to anon using (true);\n```\n\n----------------------------------------\n\nTITLE: Add Timestamp in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates adding a timestamp of when a record was dumped from Firestore.  It adds a `dump_time` field to the document with the current date and time in ISO string format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (collectionName, doc, recordCounters, writeRecord) => {\n  doc.dump_time = new Date().toISOString()\n  return doc\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local Postgres Database\nDESCRIPTION: Example of connecting to a local Postgres instance using the Supabase CLI with a connection string\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsupabase --db-url postgresql://postgres:postgres@localhost:5432/postgres inspect db bloat\n```\n\n----------------------------------------\n\nTITLE: Invoking Edge Function with cURL\nDESCRIPTION: Example of invoking a deployed Edge Function using cURL with authorization header and JSON payload.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST 'https://<project_id>.supabase.co/functions/v1/hello-world' \\\n  --header 'Authorization: Bearer ANON_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '{ \"name\":\"Functions\" }'\n```\n\n----------------------------------------\n\nTITLE: Filtering Out Routine Postgres Log Events in SQL\nDESCRIPTION: SQL WHERE clause to exclude common routine events like cron jobs, PgBouncer events, checkpoints, and successful connections when analyzing logs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n...query\nwhere\n  -- Excluding routine events related to cron, PgBouncer, checkpoints, and successful connections\n  not regexp_contains(event_message, '^cron|PgBouncer|checkpoint|connection received|authenticated|authorized';\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Remix\nDESCRIPTION: In this Remix snippet, an API endpoint is created to handle token exchanges. It checks the parameters, verifies the OTP with Supabase, and responds by redirecting the user appropriately.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect, type LoaderFunctionArgs } from '@remix-run/node'\nimport { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'\nimport { type EmailOtpType } from '@supabase/supabase-js'\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const requestUrl = new URL(request.url)\n  const token_hash = requestUrl.searchParams.get('token_hash')\n  const type = requestUrl.searchParams.get('type') as EmailOtpType | null\n  const next = requestUrl.searchParams.get('next') || '/'  \n  const headers = new Headers()\n\n  if (token_hash && type) {\n    const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {\n      cookies: {\n        getAll() {\n          return parseCookieHeader(request.headers.get('Cookie') ?? '')\n        },\n        setAll(key, value, options) {\n          headers.append('Set-Cookie', serializeCookieHeader(key, value, options))\n        },\n      },\n    })\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n\n    if (!error) {\n      return redirect(next, { headers })\n    }\n  }\n\n  // return the user to an error page with instructions\n  return redirect('/auth/auth-code-error', { headers })\n}\n```\n\n----------------------------------------\n\nTITLE: Database Schema with Row Level Security for Todo List in SQL\nDESCRIPTION: SQL schema for creating a todos table with row-level security policies. Defines the table structure with user references and implements policies for CRUD operations that restrict users to accessing only their own todos.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table todos (\n  id bigint generated by default as identity primary key,\n  user_id uuid references auth.users not null,\n  task text check (char_length(task) > 3),\n  is_complete boolean default false,\n  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n\nalter table todos enable row level security;\n\ncreate policy \"Individuals can create todos.\" on todos for\n    insert with check ((select auth.uid()) = user_id);\n\ncreate policy \"Individuals can view their own todos. \" on todos for\n    select using ((select auth.uid()) = user_id);\n\ncreate policy \"Individuals can update their own todos.\" on todos for\n    update using ((select auth.uid()) = user_id);\n\ncreate policy \"Individuals can delete their own todos.\" on todos for\n    delete using ((select auth.uid()) = user_id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Connection URL for Vercel Edge Functions\nDESCRIPTION: Sets up the Postgres connection URL as an environment variable for Vercel Edge Functions, including the necessary suffix for Supabase pooler compatibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres/serverless-drivers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOSTGRES_URL=\"postgres://postgres.cfcxynqnhdybqtbhjemm:[YOUR-PASSWORD]@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?workaround=supabase-pooler.vercel\"\n```\n\n----------------------------------------\n\nTITLE: Listening to Broadcast Events on Client Side in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to listen to broadcast events on the client side using the Supabase client. It initializes the Supabase client, sets the authentication token, and subscribes to a channel with a specific topic. The code listens for 'INSERT', 'UPDATE', and 'DELETE' events on the channel and logs the payload to the console.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst gameId = 'id'\nawait supabase.realtime.setAuth() // Needed for Realtime Authorization\nconst changes = supabase\n  .channel(`topic:${gameId}`, {\n    config: { private: true },\n  })\n  .on('broadcast', { event: 'INSERT' }, (payload) => console.log(payload))\n  .on('broadcast', { event: 'UPDATE' }, (payload) => console.log(payload))\n  .on('broadcast', { event: 'DELETE' }, (payload) => console.log(payload))\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Magic Link Authentication in Flutter\nDESCRIPTION: Dart code for a Flutter widget that handles user login using Supabase magic link authentication. It includes email input, magic link sending, and auth state management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/main.dart';\nimport 'package:supabase_quickstart/pages/account_page.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  bool _isLoading = false;\n  bool _redirecting = false;\n  late final TextEditingController _emailController = TextEditingController();\n  late final StreamSubscription<AuthState> _authStateSubscription;\n\n  Future<void> _signIn() async {\n    try {\n      setState(() {\n        _isLoading = true;\n      });\n      await supabase.auth.signInWithOtp(\n        email: _emailController.text.trim(),\n        emailRedirectTo:\n            kIsWeb ? null : 'io.supabase.flutterquickstart://login-callback/',\n      );\n      if (mounted) {\n        context.showSnackBar('Check your email for a login link!');\n\n        _emailController.clear();\n      }\n    } on AuthException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  void initState() {\n    _authStateSubscription = supabase.auth.onAuthStateChange.listen(\n      (data) {\n        if (_redirecting) return;\n        final session = data.session;\n        if (session != null) {\n          _redirecting = true;\n          Navigator.of(context).pushReplacement(\n            MaterialPageRoute(builder: (context) => const AccountPage()),\n          );\n        }\n      },\n      onError: (error) {\n        if (error is AuthException) {\n          context.showSnackBar(error.message, isError: true);\n        } else {\n          context.showSnackBar('Unexpected error occurred', isError: true);\n        }\n      },\n    );\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    _authStateSubscription.cancel();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sign In')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),\n        children: [\n          const Text('Sign in via the magic link with your email below'),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _emailController,\n            decoration: const InputDecoration(labelText: 'Email'),\n          ),\n          const SizedBox(height: 18),\n          ElevatedButton(\n            onPressed: _isLoading ? null : _signIn,\n            child: Text(_isLoading ? 'Sending...' : 'Send Magic Link'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PGMQ Extension\nDESCRIPTION: Creates the PGMQ extension in the Postgres database to enable message queue functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension pgmq;\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address from Request Headers\nDESCRIPTION: SQL query that extracts the client IP address from the X-Forwarded-For HTTP header in the request metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT split_part(\n  current_setting('request.headers', true)::json->>'x-forwarded-for',\n  ',', 1); -- takes the client IP before the first comma (,)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Users Table with Integer Primary Key\nDESCRIPTION: Demonstrates creating a users table with an integer primary key and email uniqueness constraint using citext extension\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS citext;\n\nCREATE TABLE users (\n  id integer PRIMARY KEY,\n  email citext NOT NULL CHECK (LENGTH(email) < 255),\n  name text NOT NULL\n);\n\nCREATE UNIQUE INDEX users_email_uniq ON users USING BTREE (email);\n```\n\n----------------------------------------\n\nTITLE: Using NOTIFY and LISTEN in Postgres SQL for event communication\nDESCRIPTION: Example showing how to use Postgres' NOTIFY and LISTEN commands to send and receive messages on a specific channel via psql.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-09-elixir-clustering-using-postgres.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npostgres=# LISTEN channel;\nLISTEN\npostgres=# NOTIFY channel, 'payload';\nNOTIFY\nAsynchronous notification \"channel\" with payload \"payload\" received from server process with PID 326.\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variable in Function\nDESCRIPTION: Example of accessing an environment variable within a Deno Edge Function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(Deno.env.get('MY_NAME'))\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Queue Messages with Visibility Timeout\nDESCRIPTION: Function to read multiple messages from a queue with a specified visibility timeout. Takes queue name, visibility timeout in seconds, and maximum number of messages to read as parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\npgmq_public.read(queue_name text, sleep_seconds integer, n integer)\n```\n\n----------------------------------------\n\nTITLE: Authenticating WebSocket Connections with JWT via Custom Protocol\nDESCRIPTION: An example of authenticating WebSocket connections by extracting and validating a JWT from the Sec-WebSocket-Protocol header. This approach uses a custom protocol prefix 'jwt-' to embed the authentication token directly in the WebSocket protocol header.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"jsr:@supabase/supabase-js@2\";\n\nconst supabase = createClient(\nDeno.env.get(\"SUPABASE_URL\"),\nDeno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\"),\n);\nDeno.serve(req => {\nconst upgrade = req.headers.get(\"upgrade\") || \"\";\n\n    if (upgrade.toLowerCase() != \"WebSocket\") {\n        return new Response(\"request isn't trying to upgrade to WebSocket.\", { status: 400 });\n    }\n\n// Sec-WebScoket-Protocol may return multiple protocol values `jwt-TOKEN, value1, value 2`\nconst customProtocols = (req.headers.get(\"Sec-WebSocket-Protocol\") ?? '').split(',').map(p => p.trim())\nconst jwt = customProtocols.find(p => p.startsWith('jwt')).replace('jwt-', '')\nif (!jwt) {\nconsole.error(\"Auth token not provided\");\nreturn new Response(\"Auth token not provided\", { status: 403 });\n}\nconst { error, data } = await supabase.auth.getUser(jwt);\nif (error) {\nconsole.error(error);\nreturn new Response(\"Invalid token provided\", { status: 403 });\n}\nif (!data.user) {\nconsole.error(\"user is not authenticated\");\nreturn new Response(\"User is not authenticated\", { status: 403 });\n}\n\n    const { socket, response } = Deno.upgradeWebSocket(req);\n\n    socket.onopen = () => console.log(\"socket opened\");\n    socket.onmessage = (e) => {\n        console.log(\"socket message:\", e.data);\n        socket.send(new Date().toString());\n    };\n\n    socket.onerror = e => console.log(\"socket errored:\", e.message);\n    socket.onclose = () => console.log(\"socket closed\");\n\n    return response;\n\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Similarity Search Function in SQL\nDESCRIPTION: SQL function that performs vector similarity search on embeddings. It accepts a vector and match threshold parameter, returning matching embeddings ordered by similarity. The function leverages inner product distance for faster computation with normalized embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Matches document sections using vector similarity search on embeddings\n--\n-- Returns a setof embeddings so that we can use PostgREST resource embeddings (joins with other tables)\n-- Additional filtering like limits can be chained to this function call\ncreate or replace function query_embeddings(embedding vector(384), match_threshold float)\nreturns setof embeddings\nlanguage plpgsql\nas $$\nbegin\n  return query\n  select *\n  from embeddings\n\n  -- The inner product is negative, so we negate match_threshold\n  where embeddings.embedding <#> embedding < -match_threshold\n\n  -- Our embeddings are normalized to length 1, so cosine similarity\n  -- and inner product will produce the same query results.\n  -- Using inner product which can be computed faster.\n  --\n  -- For the different distance functions, see https://github.com/pgvector/pgvector\n  order by embeddings.embedding <#> embedding;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Stripe Products Table with Postgres FDW\nDESCRIPTION: Example showing how to create a foreign table that connects to Stripe's products API and query it using SQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Connect Postgres to Stripe\ncreate foreign table products (\n  id text,\n  name text,\n  description text,\n  default_price text\n)\nserver my_stripe_server\noptions ( object 'products' );\n\n-- Fetch all your Stripe products in Postgres\nselect * from products limit 10;\n```\n\n----------------------------------------\n\nTITLE: Creating PostGIS Bounding Box Search Function in SQL\nDESCRIPTION: SQL function that finds restaurants within a geographic bounding box using PostGIS. Takes minimum and maximum latitude/longitude coordinates as parameters and returns restaurant details including location coordinates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function restaurants_in_view(min_lat float, min_long float, max_lat float, max_long float)\nreturns table (id public.restaurants.id%TYPE, name public.restaurants.name%TYPE, lat float, long float)\nset search_path to ''\nlanguage sql\nas $$\n\tselect id, name, gis.st_y(location::gis.geometry) as lat, gis.st_x(location::gis.geometry) as long\n\tfrom public.restaurants\n\twhere location operator(gis.&&) gis.ST_SetSRID(gis.ST_MakeBox2D(gis.ST_Point(min_long, min_lat), gis.ST_Point(max_long, max_lat)), 4326)\n$$;\n```\n\n----------------------------------------\n\nTITLE: Signing a JWT using jsonwebtoken library in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to sign a JWT using the `jsonwebtoken` library. It uses the `jwt.sign()` method to create a signed token with a payload containing the user's name and a secret key (`some-secret`). The library must be installed as a dependency to use this code.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// from https://replit.com/@awalias/jsonwebtokens#index.js\nlet token = jwt.sign({ name: 'Sam Vimes' }, 'some-secret')\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Worker Request Handler\nDESCRIPTION: Example showing how to implement a Main Worker that handles incoming requests by creating and delegating to User Workers. Includes configuration for memory limits, timeouts, and environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-11-edge-runtime-self-hosted-deno-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nserve(async (req: Request) => {\n  const memoryLimitMb = 150\n  const workerTimeoutMs = 1 * 60 * 1000\n  const noModuleCache = false\n  const importMapPath = null\n  const envVars = [\n    ['USER', 'foo'],\n    ['PASSWORD', 'BAR'],\n  ]\n\n  try {\n    const worker = await EdgeRuntime.userWorkers.create({\n      servicePath,\n      memoryLimitMb,\n      workerTimeoutMs,\n      noModuleCache,\n      importMapPath,\n      envVars,\n    })\n    return await worker.fetch(req)\n  } catch (e) {\n    const error = { msg: e.toString() }\n    return new Response(JSON.stringify(error), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting User ID Session Variable for RLS\nDESCRIPTION: Sets the app.current_user_id session variable with the current user's ID at the beginning of a database session. This value will be used by RLS policies to determine data access permissions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nset app.current_user_id = '<current-user-id>';\n```\n\n----------------------------------------\n\nTITLE: Signing In with Notion in Flutter using Supabase\nDESCRIPTION: This snippet explains how to sign in with Notion using Supabase in a Flutter application by calling signInWithOAuth() with OAuthProvider.notion. Key parameters include redirectTo and authScreenLaunchMode, which are used for configuring deep linking and launching the auth screen, respectively.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signInWithNotion() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.notion,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Unstructured Vector Embeddings Table in SQL\nDESCRIPTION: Creates a table for storing vector embeddings with unstructured metadata using a JSONB column. Shows how to insert sample data with metadata stored in JSON format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table docs (\n  id uuid primary key,\n  embedding vector(3),\n  meta jsonb\n);\n\ninsert into docs\n  (id, embedding, meta)\nvalues\n  (\n    '79409372-7556-4ccc-ab8f-5786a6cfa4f7',\n    array[0.1, 0.2, 0.3],\n    '{\"content\": \"Hello world\", \"url\": \"/hello-world\"}'\n  );\n```\n\n----------------------------------------\n\nTITLE: Push Database Migrations with Seed (CLI)\nDESCRIPTION: This command pushes the local database migrations and seed data to the remote Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db push --include-seed\n```\n\n----------------------------------------\n\nTITLE: Sign Out using Supabase\nDESCRIPTION: This JavaScript snippet demonstrates how to sign out a user using Supabase's `signOut` method. It initializes a Supabase client and then calls the `signOut` method. This removes the user from the browser session and any objects from localStorage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table and Function for Record Return Example\nDESCRIPTION: SQL code that creates an Account table, inserts sample data, and defines a function to search accounts by email domain. The function returns a set of accounts matching the search criteria.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"Account\"(\n  id serial primary key,\n  email varchar(255) not null\n);\n\ninsert into \"Account\"(email)\nvalues\n  ('a@foo.com'),\n  ('b@bar.com'),\n  ('c@foo.com');\n\ncreate function \"accountsByEmailDomain\"(\"domainToSearch\" text)\n  returns setof \"Account\"\n  stable\n  language sql\nas $$\n\tselect\n\t\tid, email\n\tfrom\n\t\t\"Account\"\n\twhere\n\t\temail ilike ('%@' || \"domainToSearch\");\n$$;\n```\n\n----------------------------------------\n\nTITLE: Updating JWT Token per Channel in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to update the JWT token for a specific Realtime channel. It uses the `updateAuth` method on the channel object to set the new token. This approach is necessary in Kotlin for refreshing tokens.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_57\n\nLANGUAGE: kotlin\nCODE:\n```\nmyChannel.updateAuth(\"fresh-token\")\n```\n\n----------------------------------------\n\nTITLE: Installing Vecs Python Package\nDESCRIPTION: Installs the Supabase Vector client (Vecs) using pip package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/google-colab.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install vecs\n```\n\n----------------------------------------\n\nTITLE: Dropping All Tables in PostgreSQL Schema using PL/pgSQL\nDESCRIPTION: A PL/pgSQL script that iterates through all tables in a specified schema and drops them using CASCADE. The script uses pg_tables system catalog to identify tables and quote_ident for proper identifier escaping. Requires schema name as input parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/dropping-all-tables-in-schema.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndo $$ declare\n    r record;\nbegin\n    for r in (select tablename from pg_tables where schemaname = 'my-schema-name') loop\n        execute 'drop table if exists ' || quote_ident(r.tablename) || ' cascade';\n    end loop;\nend $$;\n```\n\n----------------------------------------\n\nTITLE: Changing Table Ownership in Supabase\nDESCRIPTION: This SQL command changes the ownership of a table to the postgres role. It's used to resolve permission issues when pushing migrations to staging or production databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users OWNER TO postgres;\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Server with Node.js in Edge Functions\nDESCRIPTION: An example of setting up a WebSocket server using Node.js and the 'ws' package. This code creates an HTTP server, configures WebSocket handling, and manages connection events. The server listens on port 8080 and responds to messages with the current timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from \"node:http\";\nimport { WebSocketServer } from \"npm:ws\";\n\nconst server = createServer();\n// Since we manually created the HTTP server,\n// turn on the noServer mode.\nconst wss = new WebSocketServer({ noServer: true });\n\nwss.on(\"connection\", ws => {\nconsole.log(\"socket opened\");\nws.on(\"message\", (data /** Buffer \\*/, isBinary /** bool \\*/) => {\nif (isBinary) {\nconsole.log(\"socket message:\", data);\n} else {\nconsole.log(\"socket message:\", data.toString());\n}\n\n        ws.send(new Date().toString());\n    });\n\n    ws.on(\"error\", err => {\n        console.log(\"socket errored:\", err.message);\n    });\n\n    ws.on(\"close\", () => console.log(\"socket closed\"));\n\n});\n\nserver.on(\"upgrade\", (req, socket, head) => {\nwss.handleUpgrade(req, socket, head, ws => {\nwss.emit(\"connection\", ws, req);\n});\n});\n\nserver.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Creating a RUM Index with rum_tsvector_ops\nDESCRIPTION: Example showing how to create a table with text search capabilities, set up a trigger for automatic tsvector updates, and create a RUM index using the rum_tsvector_ops operator class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_rum(t text, a tsvector);\n\nCREATE TRIGGER tsvectorupdate\nBEFORE UPDATE OR INSERT ON test_rum\nFOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('a', 'pg_catalog.english', 't');\n\nINSERT INTO test_rum(t) VALUES ('The situation is most beautiful');\nINSERT INTO test_rum(t) VALUES ('It is a beautiful');\nINSERT INTO test_rum(t) VALUES ('It looks like a beautiful place');\n\nCREATE INDEX rumidx ON test_rum USING rum (a rum_tsvector_ops);\n```\n\n----------------------------------------\n\nTITLE: RLS Policy Role Assignment for Authenticated Users\nDESCRIPTION: Examples of creating policies with different role assignments for authenticated and anonymous users\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Profiles are viewable by everyone\"\non profiles\nfor select\nto authenticated, anon\nusing ( true );\n\ncreate policy \"Public profiles are viewable only by authenticated users\"\non profiles\nfor select\nto authenticated\nusing ( true );\n```\n\n----------------------------------------\n\nTITLE: Signing in with Phone OTP\nDESCRIPTION: Demonstrates how to initiate phone authentication by sending an OTP to a user's phone number. This generates a 6-digit pin that must be verified within 60 seconds.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/phone-login.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.signInWithOtp({\n  phone: '+13334445555',\n})\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.signInWithOTP(\n  phone: \"+13334445555\"\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.signInWith(OTP) {\n    phone = \"+13334445555\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.sign_in_with_otp({\n  'phone': '+13334445555',\n})\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://cvwawazfelidkloqmbma.supabase.co/auth/v1/otp' \\\n-H \"apikey: SUPABASE_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"phone\": \"+13334445555\"\n}'\n```\n\n----------------------------------------\n\nTITLE: SendGrid Email Request Body Construction\nDESCRIPTION: Constructs the request body for SendGrid API with email content, recipient, and sender details. The body is formatted as JSON with HTML content type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n        body: JSON.stringify({\n            personalizations: [{\n                to: [{\n                    email: user.email\n                }],\n                subject: subject\n            }],\n            from: {\n                email: FROM_EMAIL\n            },\n            content: [{\n                type: \"text/html\",\n                value: htmlBody\n            }]\n        })\n```\n\n----------------------------------------\n\nTITLE: Querying Decrypted Secrets from Vault\nDESCRIPTION: Demonstrates how to query the vault.decrypted_secrets view to access decrypted secret values. This view automatically decrypts the stored secrets on-the-fly when queried.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * \nfrom vault.decrypted_secrets \norder by created_at desc \nlimit 3;\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Sign-In in Swift with Supabase\nDESCRIPTION: This code snippet provides the implementation of the GitHub sign-in process in a Swift application using Supabase. It employs the `signInWithOAuth` function while allowing for a custom redirect URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc signInWithGithub() async throws {\n  try await supabase.auth.signInWithOAuth(\n    provider: .github,\n    redirectTo: URL(string: \"my-custom-scheme://my-app-host\")\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User Kotlin\nDESCRIPTION: The Kotlin function demonstrates using suspending functions to sign out a user via Supabase's client library. It terminates the user session client-side. Make sure the Supabase Kotlin library is set up.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun logout() {\\n\\tsupabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Access Token Hook in Supabase Auth\nDESCRIPTION: Defines a Postgres function that acts as an Auth Hook to customize JWT claims. This example adds a user's level as a custom claim to the access token for a gamified application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-auth-identity-linking-hooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate function custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\ndeclare\n  user_level jsonb;\nbegin\n  -- fetch the current user's level\n  select\n    to_jsonb(level) into user_level\n  from profiles\n  where\n    user_id = event->>'user_id'::uuid;\n\n  -- change the event.claims.level\n  return jsonb_set(\n\t\tevent,\n\t\t'{claims,level}',\n\t\tuser_level);\n\nend;\n$$\n```\n\n----------------------------------------\n\nTITLE: Creating Profiles Table - SQL\nDESCRIPTION: Defines a new table in the public schema to store user profiles, referencing the auth.users table with cascading deletions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.profiles (\n  id uuid not null references auth.users on delete cascade,\n  first_name text,\n  last_name text,\n\n  primary key (id)\n);\n\nalter table public.profiles enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Different Delete Constraints\nDESCRIPTION: Creates a set of related tables (grandparent, parent, child) with different foreign key constraints and populates them with sample data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table grandparent (\n  id serial primary key,\n  name text\n);\n\ncreate table parent (\n  id serial primary key,\n  name text,\n  parent_id integer references grandparent (id)\n    on delete cascade\n);\n\ncreate table child (\n  id serial primary key,\n  name text,\n  father integer references parent (id)\n    on delete restrict\n);\n\ninsert into grandparent\n  (id, name)\nvalues\n  (1, 'Elizabeth');\n\ninsert into parent\n  (id, name, parent_id)\nvalues\n  (1, 'Charles', 1);\n\ninsert into parent\n  (id, name, parent_id)\nvalues\n  (2, 'Diana', 1);\n\n-- We'll just link the father for now\ninsert into child\n  (id, name, father)\nvalues\n  (1, 'William', 1);\n```\n\n----------------------------------------\n\nTITLE: Web Application Authentication Configuration\nDESCRIPTION: Detailed instructions for setting up web application authentication with Google OAuth in Supabase, including client ID and secret management\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to the [API Credentials page](https://console.cloud.google.com/apis/credentials).\n2. Click `Create credentials` and choose `OAuth Client ID`.\n3. For application type, choose `Web application`.\n4. Under **Authorized JavaScript origins**, add your site URL.\n5. Under **Authorized redirect URLs**, enter the callback URL from the [Supabase dashboard](/dashboard/project/_/auth/providers).\n```\n\n----------------------------------------\n\nTITLE: Enabling PgBouncer for Prisma\nDESCRIPTION: Shows how to add the pgbouncer=true parameter to the Prisma connection string to address prepared statement issues.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n.../postgres?pgbouncer=true\n```\n\n----------------------------------------\n\nTITLE: Sign In with Slack using Supabase Auth\nDESCRIPTION: This Kotlin snippet demonstrates how to sign in a user with Slack OAuth using the Supabase client library. It calls the signInWith function with the `SlackOIDC` provider.  This suspends the execution of the current coroutine until the sign-in process is complete.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithSlack() {\n\tsupabase.auth.signInWith(SlackOIDC)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Function for SemVer Validation in SQL\nDESCRIPTION: Implements a helper function 'semver_elements_match_regex' to validate array elements against a regex pattern.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function semver_elements_match_regex(\n    parts text[],\n    regex text\n)\nreturns bool\nlanguage sql\nas $$\n    -- validates that *parts* nullable array of non-empty strings\n    -- where each element of *parts* matches *regex*\n    select\n        $1 is null\n        or (\n            (\n                select (\n                    bool_and(pr_arr.elem is not null)\n                    and bool_and(pr_arr.elem ~ $2)\n                )\n                from\n                    unnest($1) pr_arr(elem)\n            )\n            and array_length($1, 1) > 0\n        )\n$$;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with PKCE Configuration - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Supabase client for PKCE flow. It shows the configuration of authentication options including automatic session detection in the URL and specifying a custom storage approach.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions/pkce-flow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// ---cut---\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', {\n  // ...\n  auth: {\n    // ...\n    detectSessionInUrl: true,\n    flowType: 'pkce',\n    storage: {\n      getItem: () => Promise.resolve('FETCHED_TOKEN'),\n      setItem: () => {},\n      removeItem: () => {},\n    },\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Template in TOML\nDESCRIPTION: Example of configuring an invite email template using config.toml file. Defines the email subject and content path.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[auth.email.template.invite]\nsubject = \"You are invited to Acme Inc\"\ncontent_path = \"./supabase/templates/invite.html\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-Time Chat Page in Flutter with Supabase\nDESCRIPTION: This code snippet creates a ChatPage widget that displays real-time messages using Supabase's stream() method. It includes functionality for loading user profiles, displaying chat bubbles, and sending new messages. The widget uses StreamBuilder to handle real-time updates and implements a message input bar.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\n\nimport 'package:my_chat_app/models/message.dart';\nimport 'package:my_chat_app/models/profile.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:timeago/timeago.dart';\n\n/// Page to chat with someone.\n///\n/// Displays chat bubbles as a ListView and TextField to enter new chat.\nclass ChatPage extends StatefulWidget {\n  const ChatPage({Key? key}) : super(key: key);\n\n  static Route<void> route() {\n    return MaterialPageRoute(\n      builder: (context) => const ChatPage(),\n    );\n  }\n\n  @override\n  State<ChatPage> createState() => _ChatPageState();\n}\n\nclass _ChatPageState extends State<ChatPage> {\n  late final Stream<List<Message>> _messagesStream;\n  final Map<String, Profile> _profileCache = {};\n\n  @override\n  void initState() {\n    final myUserId = supabase.auth.currentUser!.id;\n    _messagesStream = supabase\n        .from('messages')\n        .stream(primaryKey: ['id'])\n        .order('created_at')\n        .map((maps) => maps\n            .map((map) => Message.fromMap(map: map, myUserId: myUserId))\n            .toList());\n    super.initState();\n  }\n\n  Future<void> _loadProfileCache(String profileId) async {\n    if (_profileCache[profileId] != null) {\n      return;\n    }\n    final data =\n        await supabase.from('profiles').select().eq('id', profileId).single();\n    final profile = Profile.fromMap(data);\n    setState(() {\n      _profileCache[profileId] = profile;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Chat')),\n      body: StreamBuilder<List<Message>>(\n        stream: _messagesStream,\n        builder: (context, snapshot) {\n          if (snapshot.hasData) {\n            final messages = snapshot.data!;\n            return Column(\n              children: [\n                Expanded(\n                  child: messages.isEmpty\n                      ? const Center(\n                          child: Text('Start your conversation now :)'),\n                        )\n                      : ListView.builder(\n                          reverse: true,\n                          itemCount: messages.length,\n                          itemBuilder: (context, index) {\n                            final message = messages[index];\n\n                            /// I know it's not good to include code that is not related\n                            /// to rendering the widget inside build method, but for\n                            /// creating an app quick and dirty, it's fine 😂\n                            _loadProfileCache(message.profileId);\n\n                            return _ChatBubble(\n                              message: message,\n                              profile: _profileCache[message.profileId],\n                            );\n                          },\n                        ),\n                ),\n                const _MessageBar(),\n              ],\n            );\n          } else {\n            return preloader;\n          }\n        },\n      ),\n    );\n  }\n}\n\n/// Set of widget that contains TextField and Button to submit message\nclass _MessageBar extends StatefulWidget {\n  const _MessageBar({\n    Key? key,\n  }) : super(key: key);\n\n  @override\n  State<_MessageBar> createState() => _MessageBarState();\n}\n\nclass _MessageBarState extends State<_MessageBar> {\n  late final TextEditingController _textController;\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      color: Colors.grey[200],\n      child: SafeArea(\n        child: Padding(\n          padding: const EdgeInsets.all(8.0),\n          child: Row(\n            children: [\n              Expanded(\n                child: TextFormField(\n                  keyboardType: TextInputType.text,\n                  maxLines: null,\n                  autofocus: true,\n                  controller: _textController,\n                  decoration: const InputDecoration(\n                    hintText: 'Type a message',\n                    border: InputBorder.none,\n                    focusedBorder: InputBorder.none,\n                    contentPadding: EdgeInsets.all(8),\n                  ),\n                ),\n              ),\n              TextButton(\n                onPressed: () => _submitMessage(),\n                child: const Text('Send'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    _textController = TextEditingController();\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _textController.dispose();\n    super.dispose();\n  }\n\n  void _submitMessage() async {\n    final text = _textController.text;\n    final myUserId = supabase.auth.currentUser!.id;\n    if (text.isEmpty) {\n      return;\n    }\n    _textController.clear();\n    try {\n      await supabase.from('messages').insert({\n        'profile_id': myUserId,\n        'content': text,\n      });\n    } on PostgrestException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (_) {\n      context.showErrorSnackBar(message: unexpectedErrorMessage);\n    }\n  }\n}\n\nclass _ChatBubble extends StatelessWidget {\n  const _ChatBubble({\n    Key? key,\n    required this.message,\n    required this.profile,\n  }) : super(key: key);\n\n  final Message message;\n  final Profile? profile;\n\n  @override\n  Widget build(BuildContext context) {\n    List<Widget> chatContents = [\n      if (!message.isMine)\n        CircleAvatar(\n          child: profile == null\n              ? preloader\n              : Text(profile!.username.substring(0, 2)),\n        ),\n      const SizedBox(width: 12),\n      Flexible(\n        child: Container(\n          padding: const EdgeInsets.symmetric(\n            vertical: 8,\n            horizontal: 12,\n          ),\n          decoration: BoxDecoration(\n            color: message.isMine\n                ? Theme.of(context).primaryColor\n                : Colors.grey[300],\n            borderRadius: BorderRadius.circular(8),\n          ),\n          child: Text(message.content),\n        ),\n      ),\n      const SizedBox(width: 12),\n      Text(format(message.createdAt, locale: 'en_short')),\n      const SizedBox(width: 60),\n    ];\n    if (message.isMine) {\n      chatContents = chatContents.reversed.toList();\n    }\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 18),\n      child: Row(\n        mainAxisAlignment:\n            message.isMine ? MainAxisAlignment.end : MainAxisAlignment.start,\n        children: chatContents,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Bounding Box Search\nDESCRIPTION: JavaScript example showing how to call the PostGIS bounding box search function using Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.rpc('restaurants_in_view', {\n  min_lat: 40.807,\n  min_long: -73.946,\n  max_lat: 40.808,\n  max_long: -73.945,\n})\n```\n\n----------------------------------------\n\nTITLE: Signing in with OTP using Kotlin\nDESCRIPTION: Provides direction for executing a sign-in using OTP with Kotlin in Supabase. Inputs involve the user's email for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signInWithEmailOtp() {\n\tsupabase.auth.signInWith(OTP) {\n\t\temail = \"valid.email@supabase.io\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSSQL to Postgres Migration Script\nDESCRIPTION: Configuration file for pgloader to migrate data from MSSQL to Supabase Postgres. Includes connection string setup and performance optimization parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/mssql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nLOAD DATABASE\n    FROM mssql://USER:PASSWORD@HOST/SOURCE_DB\n    INTO postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres\nALTER SCHEMA 'public' OWNER TO 'postgres';\nset wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Exchange Route in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a SvelteKit route for exchanging an auth code for a session using Supabase. It requires capturing the code from URL and leveraging Supabase's function for code exchange.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit'\n\nexport const GET = async ({ url, locals: { supabase } }) => {\n  const code = url.searchParams.get('code')\n\n  if (code) {\n    await supabase.auth.exchangeCodeForSession(code)\n  }\n\n  redirect(303, '/')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SignInViewModel with Authentication Repository in Kotlin\nDESCRIPTION: A ViewModel implementation using Hilt for dependency injection that handles sign-in functionality. It manages email and password state using Kotlin Flows and provides methods for email/password sign-in and Google authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n@HiltViewModel\nclass SignInViewModel @Inject constructor(\n    private val authenticationRepository: AuthenticationRepository\n) : ViewModel() {\n\n    private val _email = MutableStateFlow(\"\")\n    val email: Flow<String> = _email\n\n    private val _password = MutableStateFlow(\"\")\n    val password = _password\n\n    fun onEmailChange(email: String) {\n        _email.value = email\n    }\n\n    fun onPasswordChange(password: String) {\n        _password.value = password\n    }\n\n    fun onSignIn() {\n        viewModelScope.launch {\n            authenticationRepository.signIn(\n                email = _email.value,\n                password = _password.value\n            )\n        }\n    }\n\n    fun onGoogleSignIn() {\n        viewModelScope.launch {\n            authenticationRepository.signInWithGoogle()\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Access for SSO Users in JavaScript\nDESCRIPTION: This JavaScript function is a webhook that restricts access to employees logging in through SSO. It verifies the authentication method and checks against an allowlist of emails to determine if access should be granted or denied. It also uses the Deno runtime and requires a secret for payload verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'\nimport { readAll } from 'https://deno.land/std/io/read_all.ts'\nimport * as base64 from 'https://denopkg.com/chiefbiiko/base64/mod.ts'\n\nDeno.serve(async (req) => {\n  const payload = await req.text()\n  const base64_secret = Deno.env.get('CUSTOM_ACCESS_TOKEN_SECRET').replace('v1,whsec_', '')\n  const headers = Object.fromEntries(req.headers)\n  const wh = new Webhook(base64_secret)\n  try {\n    const { user_id, claims, authentication_method } = wh.verify(payload, headers)\n\n    // Check the condition\n    const allowedEmails = ['myemail@company.com', 'example@company.com']\n    if (authentication_method === 'sso/saml' || allowedEmails.includes(claims.email)) {\n      return new Response(\n        JSON.stringify({\n          claims,\n        }),\n        {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n    } else {\n      return new Response(\n        JSON.stringify({\n          error: 'Unauthorized',\n        }),\n        {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n    }\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: `Failed to process the request: ${error}`,\n      }),\n      {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Films Database Schema with Vector Support\nDESCRIPTION: Creates a films table with vector support using pgvector extension, includes columns for movie details and embeddings, and sets up row level security policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable pgvector extension\ncreate extension vector\nwith\n  schema extensions;\n\n-- Create table\ncreate table public.films (\n  id integer primary key,\n  title text,\n  overview text,\n  release_date date,\n  backdrop_path text,\n  embedding vector(1536)\n);\n\n-- Enable row level security\nalter table public.films enable row level security;\n\n-- Create policy to allow anyone to read the films table\ncreate policy \"Fils are public.\" on public.films for select using (true);\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Service Configuration (JSON)\nDESCRIPTION: This JSON configuration file contains the connection parameters to the Supabase Postgres database instance, essential for the migration process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"database.server.com\",\n  \"password\": \"secretpassword\",\n  \"user\": \"postgres\",\n  \"database\": \"postgres\",\n  \"port\": 5432\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CORS Headers in TypeScript\nDESCRIPTION: Creates reusable CORS headers configuration in a shared file. These headers allow cross-origin requests and specify allowed headers for authorization and API communication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cors.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting User Data - SQL\nDESCRIPTION: Queries the auth.users table to select all user data that can be exported as CSV.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect * from auth.users;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Management API Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Supabase Management API client using the supabase-management-js library. It requires an access token obtained through the OAuth process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SupabaseManagementAPI } from 'supabase-management-js'\n\nconst client = new SupabaseManagementAPI({ accessToken: '<access token>' })\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Component with Edge Runtime in Next.js (JavaScript)\nDESCRIPTION: Implements a Next.js server component running on the Edge runtime that fetches todos from Supabase. It uses createServerComponentClient to initialize Supabase with cookie-based authentication, configures the component for edge runtime, and renders the fetched data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs'\n\nexport const runtime = 'edge'\nexport const dynamic = 'force-dynamic'\n\nexport default async function Page() {\n  const cookieStore = cookies()\n\n  const supabase = createServerComponentClient({\n    cookies: () => cookieStore,\n  })\n\n  const { data } = await supabase.from('todos').select()\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Sign-In in Flutter with Supabase\nDESCRIPTION: This snippet shows how to integrate GitHub sign-in for a Flutter application using Supabase. It uses the `signInWithOAuth` method and provides options for handling redirect links and launching modes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithGithub() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.github,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Restrictive RLS Policy for Firebase Auth in SQL\nDESCRIPTION: Defines a restrictive Row-Level Security policy in SQL to restrict access to only authenticated users from the specified Supabase and Firebase projects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict access to Supabase Auth and Firebase Auth for project ID <firebase-project-id>\"\n  on table_name\n  as restrictive\n  to authenticated\n  using (\n    (auth.jwt()->>'iss' = 'https://<project-ref>.supabase.co/auth/v1')\n    or\n    (\n        auth.jwt()->>'iss' = 'https://securetoken.google.com/<firebase-project-id>'\n        and\n        auth.jwt()->>'aud' = '<firebase-project-id>'\n     )\n  );\n```\n\n----------------------------------------\n\nTITLE: Revoking All Function Permissions\nDESCRIPTION: Commands to revoke execution permissions for all functions in the public schema from multiple roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nrevoke execute on all functions in schema public from public;\nrevoke execute on all functions in schema public from anon, authenticated;\n```\n\n----------------------------------------\n\nTITLE: Supabase Storage: Set Insert Policy\nDESCRIPTION: SQL policy that allows authenticated users to insert objects into their own folders within any bucket. Verifies that the folder name matches the user's ID using `storage.folder(name)` and `auth.uid()`.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"User can upload in their own folders (in any buckets)\"\non storage.objects\nfor insert\nto authenticated\nwith check (\n    (storage.folder(name))[1] = (select auth.uid())\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Postgres Logs by Query Content in SQL\nDESCRIPTION: SQL WHERE clause using regex to find specific queries in the logs, with a case-insensitive search for queries targeting a specific table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- find queries executed by the Dashboard\n...query\nwhere\n  regexp_contains(parsed.query, '(?i)select . <some table>')\n```\n\n----------------------------------------\n\nTITLE: Benchmarking ID Generation Speed with pg_idkit\nDESCRIPTION: A SQL query to benchmark the generation speed of various ID formats using the idkit_ksuid_generate() function with generate_series to create 1 million IDs and count them. This demonstrates how to measure performance for ID generation mechanisms.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n\\timing -- enable psql timing mode\n\n-- Generate IDs 1 million times with ksuid\nSELECT COUNT(idkit_ksuid_generate()) FROM generate_series(1, 1000000);\n```\n\n----------------------------------------\n\nTITLE: Pulling storage schema from Supabase\nDESCRIPTION: This command pulls RLS policies on storage buckets from your Supabase project to your local environment by specifying the storage schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db pull --schema storage\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Postgres Extensions with SQL\nDESCRIPTION: This snippet demonstrates how to enable the 'pgtap' extension and ensure it is installed in the 'extensions' schema, as well as how to disable the extension using SQL commands.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n -- Example: enable the \"pgtap\" extension and ensure it is installed\ncreate extension pgtap\nwith\n  schema extensions;\n\n-- Example: disable the \"pgtap\" extension\ndrop\n  extension pgtap;\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Opt-in Policy in PostgreSQL\nDESCRIPTION: Sets a restrictive policy for users who have opted-in to MFA. Users with at least one verified MFA factor require 'aal2'; otherwise, 'aal1' or 'aal2' is allowed. This SQL policy ensures security by applying the most restrictive rule on the table, regardless of other existing policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Policy name.\"\n  on table_name\n  as restrictive -- very important!\n  to authenticated\n  using (\n    array[(select auth.jwt()->>'aal')] <@ (\n      select\n          case\n            when count(id) > 0 then array['aal2']\n            else array['aal1', 'aal2']\n          end as aal\n        from auth.mfa_factors\n        where ((select auth.uid()) = user_id) and status = 'verified'\n    ));\n```\n\n----------------------------------------\n\nTITLE: Signing in with Email and Password using Supabase in Kotlin\nDESCRIPTION: This snippet demonstrates how to sign in a user with their email and password using the Supabase Kotlin client. It uses the signInWith(Email) method from the auth module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithEmail() {\n\tsupabase.auth.signInWith(Email) {\n\t\temail = \"valid.email@supabase.io\"\n\t\tpassword = \"example-password\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Statement Timeouts for Different Roles in SQL\nDESCRIPTION: SQL commands to set different statement timeout limits for anon, authenticated, and service_role users, followed by a config reload notification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter role anon set statement_timeout = '100ms';\n\nalter role authenticated set statement_timeout = '5s';\n\nalter role service_role set statement_timeout = '15s';\n```\n\n----------------------------------------\n\nTITLE: Executing Full Text Search Query\nDESCRIPTION: Example of performing a full text search query using websearch_to_tsquery function in Postgres.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n\t* from movies\nwhere doc_en @@ websearch_to_tsquery('english', 'Avengers');\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Schema with JavaScript Supabase Client\nDESCRIPTION: JavaScript code showing how to initialize the Supabase client with a custom schema and query data from it. Demonstrates both global schema configuration and per-query schema selection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the JS client\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, { db: { schema: 'myschema' } })\n\n// Make a request\nconst { data: todos, error } = await supabase.from('todos').select('*')\n\n// You can also change the target schema on a per-query basis\nconst { data: todos, error } = await supabase.schema('myschema').from('todos').select('*')\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Confirmation in Next.js\nDESCRIPTION: This snippet implements a server-side route handler in Next.js for auth confirmation via email link using Supabase capabilities. It interacts with Supabase to verify OTP tokens from confirmation URLs and redirects upon success or failure of verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EmailOtpType } from '@supabase/supabase-js'\nimport { type NextRequest } from 'next/server'\n\nimport { createClient } from '@/utils/supabase/server'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url)\n  const token_hash = searchParams.get('token_hash')\n  const type = searchParams.get('type') as EmailOtpType | null\n  const next = searchParams.get('next') ?? '/'\n\n  if (token_hash && type) {\n    const supabase = await createClient()\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n    if (!error) {\n      // redirect user to specified redirect URL or root of app\n      redirect(next)\n    }\n  }\n\n  // redirect the user to an error page with some instructions\n  redirect('/error')\n}\n```\n\n----------------------------------------\n\nTITLE: Running pgloader for Data Import in Supabase\nDESCRIPTION: Command to execute pgloader with a configuration file for importing data into Supabase. This initiates the data transfer process based on the specified configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\npgloader config.load\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for User Profiles with Supabase in SQL\nDESCRIPTION: SQL script that sets up the database schema for a user profile system with Supabase. It creates a profiles table with row-level security policies, configures Supabase Realtime for the profiles table, and sets up storage policies for avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/swift-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for public \"profiles\"\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\"\n  on profiles for select\n  using ( true );\n\ncreate policy \"Users can insert their own profile.\"\n  on profiles for insert\n  with check ( (select auth.uid()) = id );\n\ncreate policy \"Users can update own profile.\"\n  on profiles for update\n  using ( (select auth.uid()) = id );\n\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\"\n  on storage.objects for select\n  using ( bucket_id = 'avatars' );\n\ncreate policy \"Anyone can upload an avatar.\"\n  on storage.objects for insert\n  with check ( bucket_id = 'avatars' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Client State Sync\nDESCRIPTION: Handles authentication state synchronization between server and client using Remix's useRevalidator hook and Supabase's auth state change listener.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nuseEffect(() => {\n  const {\n    data: { subscription },\n  } = supabase.auth.onAuthStateChange((event, session) => {\n    if (session?.access_token !== serverAccessToken) {\n      // server and client are out of sync.\n      revalidate()\n    }\n  })\n\n  return () => {\n    subscription.unsubscribe()\n  }\n}, [serverAccessToken, supabase, revalidate])\n```\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  const {\n    data: { subscription },\n  } = supabase.auth.onAuthStateChange((event, session) => {\n    if (event !== 'INITIAL_SESSION' && session?.access_token !== serverAccessToken) {\n      // server and client are out of sync.\n      revalidate()\n    }\n  })\n\n  return () => {\n    subscription.unsubscribe()\n  }\n}, [serverAccessToken, supabase, revalidate])\n```\n\n----------------------------------------\n\nTITLE: Deno Webhook: Twilio SMS Messaging with Error Handling\nDESCRIPTION: JavaScript implementation for sending SMS messages using Twilio, with comprehensive error handling and base64 authentication\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendTextMessage = async (\n  messageBody: string,\n  accountSid: string | undefined,\n  authToken: string | undefined,\n  fromNumber: string,\n  toNumber: string\n): Promise<any> => {\n  if (!accountSid || !authToken) {\n    console.log('Your Twilio account credentials are missing. Please add them.')\n    return\n  }\n  const url: string = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`\n\n  const encodedCredentials: string = base64.fromUint8Array(\n    new TextEncoder().encode(`${accountSid}:${authToken}`)\n  )\n\n  const body: URLSearchParams = new URLSearchParams({\n    To: `+${toNumber}`,\n    From: fromNumber,\n    Body: messageBody,\n  })\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${encodedCredentials}`,\n    },\n    body,\n  })\n\n  return response.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddings with Amazon Titan\nDESCRIPTION: Python code to initialize Amazon Bedrock client and generate embeddings for text sentences using Titan Embedding G1 model\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/amazon-bedrock.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport vecs\nimport json\n\nclient = boto3.client(\n    'bedrock-runtime',\n    region_name='us-east-1',\n\t# Credentials from your AWS account\n    aws_access_key_id='<replace_your_own_credentials>',\n    aws_secret_access_key='<replace_your_own_credentials>',\n    aws_session_token='<replace_your_own_credentials>',\n)\n\ndataset = [\n    \"The cat sat on the mat.\",\n    \"The quick brown fox jumps over the lazy dog.\",\n    \"Friends, Romans, countrymen, lend me your ears\",\n    \"To be or not to be, that is the question.\",\n]\n\nembeddings = []\n\nfor sentence in dataset:\n    # invoke the embeddings model for each sentence\n    response = client.invoke_model(\n        body= json.dumps({\"inputText\": sentence}),\n        modelId= \"amazon.titan-embed-text-v1\",\n        accept = \"application/json\",\n        contentType = \"application/json\"\n    )\n    # collect the embedding from the response\n    response_body = json.loads(response[\"body\"].read())\n    # add the embedding to the embedding list\n    embeddings.append((sentence, response_body.get(\"embedding\"), {}))\n```\n\n----------------------------------------\n\nTITLE: MFA Verification Input JSON Schema\nDESCRIPTION: JSON Schema definition for the MFA verification hook input payload structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"user_id\": {\n      \"type\": \"string\",\n      \"x-faker\": \"random.uuid\"\n    },\n    \"valid\": {\n      \"type\": \"boolean\",\n      \"x-faker\": \"random.boolean\"\n    }\n  },\n  \"required\": [\"user_id\", \"valid\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Native Sign in with Apple Implementation in Flutter\nDESCRIPTION: Simple implementation of native Apple sign-in using the Supabase Flutter SDK. Requires iOS Bundle ID configuration in the project dashboard.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal AuthResponse response = await supabase.auth.signInWithApple();\n```\n\n----------------------------------------\n\nTITLE: Purging Messages from a Queue in PGMQ with SQL\nDESCRIPTION: The purge_queue function permanently deletes all messages in a specified queue. It takes a queue name as a parameter and returns the number of messages deleted.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.purge_queue('my_queue');\n purge_queue\n-------------\n           8\n```\n\n----------------------------------------\n\nTITLE: Creating Restricted Access RLS Policy\nDESCRIPTION: SQL policy to disallow public access to the profiles table for the anon role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Disallow public access\" on profiles to anon for\nselect\n  using (false);\n```\n\n----------------------------------------\n\nTITLE: Implementing WatermelonDB Synchronization with Supabase\nDESCRIPTION: Sets up the synchronization function to sync local WatermelonDB data with Supabase backend using RPC calls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SyncDatabaseChangeSet, synchronize } from '@nozbe/watermelondb/sync'\n\nawait synchronize({\n  database,\n  pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {\n    const { data, error } = await supabase.rpc('pull', {\n      last_pulled_at: lastPulledAt,\n    })\n\n    const { changes, timestamp } = data as {\n      changes: SyncDatabaseChangeSet\n      timestamp: number\n    }\n\n    return { changes, timestamp }\n  },\n  pushChanges: async ({ changes, lastPulledAt }) => {\n    const { error } = await supabase.rpc('push', { changes })\n  },\n  sendCreatedAsUpdated: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Server-side Authentication Link in HTML\nDESCRIPTION: A custom email link template that redirects users to a server-side endpoint for authentication. This approach allows server-side access to authentication tokens rather than using client-side fragments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a\n  href=\"https://api.example.com/v1/authenticate?token_hash={{ .TokenHash }}&type=invite&redirect_to={{ .RedirectTo }}\"\n  >Accept the invite\n</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a 'todos' table in SQL\nDESCRIPTION: This SQL snippet is used to create a basic 'todos' table in the Supabase database. The table includes an 'id' as the primary key and a 'task' column for storing task descriptions. Run this SQL command within the Supabase SQL Editor or similar tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Create a table called \"todos\"\n-- with a column to store tasks.\ncreate table todos (\n  id serial primary key,\n  task text\n);\n```\n\n----------------------------------------\n\nTITLE: Static Posts Component with Revalidation\nDESCRIPTION: Implements a server component that fetches and displays posts from Supabase with static revalidation every 60 seconds.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\nimport supabase from '../../utils/supabase'\n\nexport const revalidate = 60\n\nexport default async function Posts() {\n  const { data: posts } = await supabase.from('posts').select('id, title')\n\n  if (!posts) {\n    return <p>No posts found.</p>\n  }\n\n  return posts.map((post) => (\n    <p key={post.id}>\n      <Link href={`/static/${post.id}`}>{post.title}</Link>\n    </p>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Python Vecs Library for Unstructured Embeddings\nDESCRIPTION: Demonstrates how to use the Python vecs library to create and interact with vector embeddings in Supabase. Shows collection creation and vector insertion with metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\nimport vecs\n\n# In practice, do not hard-code your password. Use environment variables.\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n\ndocs = vx.get_or_create_collection(name=\"docs\", dimension=1536)\n\ndocs.upsert(vectors=[\n  ('79409372-7556-4ccc-ab8f-5786a6cfa4f7', [100, 200, 300], { url: '/hello-world' })\n])\n\n```\n\n----------------------------------------\n\nTITLE: Registering Discord Slash Command using cURL\nDESCRIPTION: This bash script uses cURL to register a 'hello' slash command with Discord's API. It requires the bot token and client ID from the Discord Developer Portal.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/discord-bot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBOT_TOKEN='replace_me_with_bot_token'\nCLIENT_ID='replace_me_with_client_id'\ncurl -X POST \\\n-H 'Content-Type: application/json' \\\n-H \"Authorization: Bot $BOT_TOKEN\" \\\n-d '{\"name\":\"hello\",\"description\":\"Greet a person\",\"options\":[{\"name\":\"name\",\"description\":\"The name of the person\",\"type\":3,\"required\":true}]}' \\\n\"https://discord.com/api/v8/applications/$CLIENT_ID/commands\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Storage for Supabase with Encryption\nDESCRIPTION: Advanced implementation using AES encryption with Expo's SecureStore for encrypted session storage. This approach addresses the 2048 byte size limitation of SecureStore by using a hybrid approach.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@supabase/supabase-js\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as SecureStore from 'expo-secure-store';\nimport * as aesjs from 'aes-js';\nimport 'react-native-get-random-values';\n\n// As Expo's SecureStore does not support values larger than 2048\n// bytes, an AES-256 key is generated and stored in SecureStore, while\n// it is used to encrypt/decrypt values stored in AsyncStorage.\nclass LargeSecureStore {\n  private async _encrypt(key: string, value: string) {\n    const encryptionKey = crypto.getRandomValues(new Uint8Array(256 / 8));\n\n    const cipher = new aesjs.ModeOfOperation.ctr(encryptionKey, new aesjs.Counter(1));\n    const encryptedBytes = cipher.encrypt(aesjs.utils.utf8.toBytes(value));\n\n    await SecureStore.setItemAsync(key, aesjs.utils.hex.fromBytes(encryptionKey));\n\n    return aesjs.utils.hex.fromBytes(encryptedBytes);\n  }\n\n  private async _decrypt(key: string, value: string) {\n    const encryptionKeyHex = await SecureStore.getItemAsync(key);\n    if (!encryptionKeyHex) {\n      return encryptionKeyHex;\n    }\n\n    const cipher = new aesjs.ModeOfOperation.ctr(aesjs.utils.hex.toBytes(encryptionKeyHex), new aesjs.Counter(1));\n    const decryptedBytes = cipher.decrypt(aesjs.utils.hex.toBytes(value));\n\n    return aesjs.utils.utf8.fromBytes(decryptedBytes);\n  }\n\n  async getItem(key: string) {\n    const encrypted = await AsyncStorage.getItem(key);\n    if (!encrypted) { return encrypted; }\n\n    return await this._decrypt(key, encrypted);\n  }\n\n  async removeItem(key: string) {\n    await AsyncStorage.removeItem(key);\n    await SecureStore.deleteItemAsync(key);\n  }\n\n  async setItem(key: string, value: string) {\n    const encrypted = await this._encrypt(key, value);\n\n    await AsyncStorage.setItem(key, encrypted);\n  }\n}\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: new LargeSecureStore(),\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Signup with JavaScript\nDESCRIPTION: JavaScript code snippet for signing up a new user with email and password authentication in Supabase. This example uses the implicit flow and includes an optional redirect URL for after email confirmation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signUpNewUser() {\n  const { data, error } = await supabase.auth.signUp({\n    email: 'valid.email@supabase.io',\n    password: 'example-password',\n    options: {\n      emailRedirectTo: 'https://example.com/welcome',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP DELETE with pg_net\nDESCRIPTION: Example of making an asynchronous HTTP DELETE request to a REST API endpoint using the net.http_delete function. The function returns a request ID for tracking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    net.http_delete(\n        'https://dummy.restapiexample.com/api/v1/delete/2'\n    ) as request_id;\n----------\n         1\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSONB Column in PostgreSQL\nDESCRIPTION: SQL query demonstrating how to create a table with a JSONB column for storing unstructured metadata alongside structured data. The table includes basic book information with a flexible metadata field.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table books (\n  id serial primary key,\n  title text,\n  author text,\n  metadata jsonb\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Array Data in SQL\nDESCRIPTION: This SQL snippet inserts a record into the 'arraytest' table with an id of 1 and a text array containing three elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO arraytest (id, textarray) VALUES (1, ARRAY['Harry', 'Larry', 'Moe']);\n```\n\n----------------------------------------\n\nTITLE: Deploying Single Edge Function\nDESCRIPTION: Command to deploy a specific Edge Function by name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy hello-world\n```\n\n----------------------------------------\n\nTITLE: HNSW 384-Dimension Performance Metrics\nDESCRIPTION: Benchmark data for 384-dimension vectors using gte-small embeddings across different compute sizes. Shows performance metrics including QPS, latency, and RAM usage for 100k to 1M vectors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/choosing-compute-addon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Compute Size | Vectors   | m   | ef_construction | ef_search | QPS  | Latency Mean | Latency p95 | RAM Usage  | RAM    |\n| ------------ | --------- | --- | --------------- | --------- | ---- | ------------ | ----------- | ---------- | ------ |\n| Micro        | 100,000   | 16  | 64              | 60        | 580  | 0.017 sec    | 0.024 sec   | 1.2 (Swap) | 1 GB   |\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT with Filtering and Ordering\nDESCRIPTION: Demonstrates how to select specific columns with WHERE, ORDER BY, and LIMIT clauses using both SQL and JavaScript. The query filters players by age range and team, then orders results by name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect first_name, last_name, team_id, age\nfrom players\nwhere age between 20 and 24 and team_id != 'STL'\norder by last_name, first_name desc\nlimit 20;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('players')\n  .select('first_name,last_name,team_id,age')\n  .gte('age', 20)\n  .lte('age', 24)\n  .not('team_id', 'eq', 'STL')\n  .order('last_name', { ascending: true }) // or just .order('last_name')\n  .order('first_name', { ascending: false })\n  .limit(20)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Prisma Database User with Appropriate Permissions in SQL\nDESCRIPTION: SQL commands to create a dedicated 'prisma' database user with the necessary permissions for database operations. This separation of privileges provides better security control and monitoring capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create custom user\ncreate user \"prisma\" with password 'custom_password' bypassrls createdb;\n\n-- extend prisma's privileges to postgres (necessary to view changes in Dashboard)\ngrant \"prisma\" to \"postgres\";\n\n-- Grant it necessary permissions over the relevant schemas (public)\ngrant usage on schema public to prisma;\ngrant create on schema public to prisma;\ngrant all on all tables in schema public to prisma;\ngrant all on all routines in schema public to prisma;\ngrant all on all sequences in schema public to prisma;\nalter default privileges for role postgres in schema public grant all on tables to prisma;\nalter default privileges for role postgres in schema public grant all on routines to prisma;\nalter default privileges for role postgres in schema public grant all on sequences to prisma;\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data Using SQL\nDESCRIPTION: Direct SQL insertion of book records with JSON metadata into the books table. Uses SQL's native JSON string format for the metadata column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into books\n  (title, author, metadata)\nvalues\n  (\n    'The Poky Little Puppy',\n    'Janette Sebring Lowrey',\n    '{\"description\":\"Puppy is slower than other, bigger animals.\",\"price\":5.95,\"ages\":[3,6]}'\n  ),\n  (\n    'The Tale of Peter Rabbit',\n    'Beatrix Potter',\n    '{\"description\":\"Rabbit eats some vegetables.\",\"price\":4.49,\"ages\":[2,5]}'\n  ),\n  (\n    'Tootle',\n    'Gertrude Crampton',\n    '{\"description\":\"Little toy train has big dreams.\",\"price\":3.99,\"ages\":[2,5]}'\n  ),\n  (\n    'Green Eggs and Ham',\n    'Dr. Seuss',\n    '{\"description\":\"Sam has changing food preferences and eats unusually colored food.\",\"price\":7.49,\"ages\":[4,8]}'\n  ),\n  (\n    'Harry Potter and the Goblet of Fire',\n    'J.K. Rowling',\n    '{\"description\":\"Fourth year of school starts, big drama ensues.\",\"price\":24.95,\"ages\":[10,99]}'\n  );\n```\n\n----------------------------------------\n\nTITLE: Enabling Real-time Updates for Messages Table\nDESCRIPTION: SQL command to enable real-time functionality for the messages table in Supabase. This allows the application to subscribe to changes and update the UI when new messages are added to the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- *** Add tables to the publication to enable real time subscription ***\nalter publication supabase_realtime add table public.messages;\n```\n\n----------------------------------------\n\nTITLE: Filtering for Specific Changes in Swift with Supabase Realtime\nDESCRIPTION: Uses Swift to create a channel that listens for INSERT events on the 'todos' table with a specific filter. The filter parameter '.eq(\"id\", value: 1)' ensures only changes where id equals 1 are monitored.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"todos\",\n  filter: .eq(\"id\", value: 1)\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Functions\nDESCRIPTION: Implementation of custom error handling for null value validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function error_if_null(some_val text)\nreturns text\nlanguage plpgsql\nas $$\nbegin\n  -- error if some_val is null\n  if some_val is null then\n    raise exception 'some_val should not be NULL';\n  end if;\n  -- return some_val if it is not null\n  return some_val;\nend;\n$$;\n\nselect error_if_null(null);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Key in Supabase Vault using SQL\nDESCRIPTION: Shows how to create a custom key in Supabase Vault using the pgsodium.create_key() function. This allows for more granular control over encryption keys.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgsodium.create_key('This is a comment for the new key');\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDv4 in PostgreSQL\nDESCRIPTION: Demonstrates how to generate a version 4 UUID in PostgreSQL using the gen_random_uuid() function. UUIDv4 uses 122 bits of randomness, making it highly unlikely to produce collisions and ideal for globally unique identifiers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT gen_random_uuid();\n\n           uuid_generate_v4\n--------------------------------------\n 6ca93dde-81d4-4ea0-bfe1-92ecb4d81ee4\n\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Filtering for Specific Changes in Dart with Supabase Realtime\nDESCRIPTION: Creates a Dart channel that listens for INSERT events on the 'todos' table with a specific filter. The filter parameter ensures only changes where id equals 1 are monitored using the PostgresChangeFilter object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n  supabase\n      .channel('table-filter-changes')\n      .onPostgresChanges(\n          event: PostgresChangeEvent.insert,\n          schema: 'public',\n          table: 'todos',\n          filter: PostgresChangeFilter(\n            type: PostgresChangeFilterType.eq,\n            column: 'id',\n            value: 1,\n          ),\n          callback: (payload) => print(payload))\n      .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Database Schema for Users and Posts\nDESCRIPTION: SQL migration to set up the initial database schema with users and posts tables, including necessary extensions and email domain validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS uuid-ossp;\nCREATE EXTENSION IF NOT EXISTS citext;\n\nCREATE DOMAIN email\nAS citext\nCHECK ( LENGTH(VALUE) <= 255 AND value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' );\n\nCOMMENT ON DOMAIN email is 'lightly validated email address';\n\nCREATE TABLE users (\n    id bigserial PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    uuid uuid NOT NULL DEFAULT uuid_nonmc_v1(),\n\n    email email NOT NULL,\n    name text,\n    about_html text,\n\n    created_at timestamptz NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE posts (\n    id bigserial PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    uuid uuid NOT NULL DEFAULT uuid_nonmc_v1(),\n\n    title text,\n    content text,\n    main_image_src text,\n    main_link_src text,\n\n    created_by bigint REFERENCES users(id),\n\n    last_hidden_at timestamptz,\n    last_updated_at timestamptz,\n    created_at timestamptz NOT NULL DEFAULT NOW()\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Edge Functions with Regional Specification Using JavaScript\nDESCRIPTION: This snippet shows how to use the Supabase JavaScript client to invoke an Edge Function with a specified region (eu-west-3). It creates a client connection and calls the function with custom headers and a body parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/regional-invocation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// https://supabase.com/docs/reference/javascript/installing\nimport { createClient } from '@supabase/supabase-js'\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n\n// https://supabase.com/docs/reference/javascript/functions-invoke\nconst { data, error } = await supabase.functions.invoke('hello-world', {\n  body: { name: 'Functions' },\n  headers: { 'x-region': 'eu-west-3' },\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data Using JavaScript\nDESCRIPTION: Uses Supabase JavaScript client to insert book records with structured JSON metadata. The metadata is passed as a JavaScript object which gets automatically converted to JSON.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('books').insert([\n  {\n    title: 'The Poky Little Puppy',\n    author: 'Janette Sebring Lowrey',\n    metadata: {\n      description: 'Puppy is slower than other, bigger animals.',\n      price: 5.95,\n      ages: [3, 6],\n    },\n  },\n  {\n    title: 'The Tale of Peter Rabbit',\n    author: 'Beatrix Potter',\n    metadata: {\n      description: 'Rabbit eats some vegetables.',\n      price: 4.49,\n      ages: [2, 5],\n    },\n  },\n  {\n    title: 'Tootle',\n    author: 'Gertrude Crampton',\n    metadata: {\n      description: 'Little toy train has big dreams.',\n      price: 3.99,\n      ages: [2, 5],\n    },\n  },\n  {\n    title: 'Green Eggs and Ham',\n    author: 'Dr. Seuss',\n    metadata: {\n      description: 'Sam has changing food preferences and eats unusually colored food.',\n      price: 7.49,\n      ages: [4, 8],\n    },\n  },\n  {\n    title: 'Harry Potter and the Goblet of Fire',\n    author: 'J.K. Rowling',\n    metadata: {\n      description: 'Fourth year of school starts, big drama ensues.',\n      price: 24.95,\n      ages: [10, 99],\n    },\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP on Server-side with TypeScript\nDESCRIPTION: Server-side code that handles verification of email One-Time-Password (OTP) by extracting parameters from the URL and using Supabase's verifyOtp method. This allows session management on the server side.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, type EmailOtpType } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nconst { token_hash, type } = Object.fromEntries(new URLSearchParams(window.location.search))\nconst {\n  data: { session },\n  error,\n} = await supabase.auth.verifyOtp({ token_hash, type: type as EmailOtpType })\n\n// subsequently redirect the user back to the client using the redirect_to param\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Deep Links\nDESCRIPTION: Add deep linking configuration to Android manifest file for handling authentication callbacks\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n    <!-- ... other tags -->\n    <application ...>\n      <activity ...>\n        <!-- ... other tags -->\n\n        <!-- Deep Links -->\n\t\t\t\t<meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"true\" />\n        <intent-filter>\n          <action android:name=\"android.intent.action.VIEW\" />\n          <category android:name=\"android.intent.category.DEFAULT\" />\n          <category android:name=\"android.intent.category.BROWSABLE\" />\n          <data\n            android:scheme=\"mfa-app\"\n            android:host=\"callback\" />\n        </intent-filter>\n        <!-- END Deep Links -->\n\n      </activity>\n    </application>\n  </manifest>\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Restricting File Type Uploads in SQL\nDESCRIPTION: This snippet illustrates how to create a policy that restricts uploads to only PNG files within a specific bucket named 'cats' using the storage.extension() function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/helper-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Only allow PNG uploads\"\non storage.objects\nfor insert\nto authenticated\nwith check (\n  bucket_id = 'cats' and storage.extension(name) = 'png'\n);\n```\n\n----------------------------------------\n\nTITLE: Cleanup Anonymous Users in Supabase Database with SQL\nDESCRIPTION: A SQL snippet to delete anonymous users from the Supabase database who were created over 30 days ago. This helps manage database size by removing outdated, anonymous user records. Suitable for use in automated maintenance tasks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n-- deletes anonymous users created more than 30 days ago\ndelete from auth.users\nwhere is_anonymous is true and created_at < now() - interval '30 days';\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase SSR Client in Astro Server Endpoint\nDESCRIPTION: Sets up a Supabase client for server-side rendering in an Astro server endpoint, handling cookie management for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient, parseCookieHeader } from \"@supabase/ssr\";\nimport type { APIContext } from \"astro\";\n\nexport async function GET(context: APIContext) {\n  const supabase = createServerClient(\n    import.meta.env.PUBLIC_SUPABASE_URL,\n    import.meta.env.PUBLIC_SUPABASE_ANON_KEY,\n    {\n      cookies: {\n        getAll() {\n          return parseCookieHeader(context.request.headers.get('Cookie') ?? '')\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            context.cookies.set(name, value, options))\n        },\n      },\n    }\n  );\n\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Todos Table in SQL\nDESCRIPTION: Creates a new table called 'todos' with id and task columns to store tasks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table todos (\n  id serial primary key,\n  task text\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Function for Automatic User Data Insertion in Supabase\nDESCRIPTION: SQL script that creates a trigger function to automatically insert user data into a custom users table after registration. This is needed because the Supabase auth table is an internal table with limited access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Function for handling new users\ncreate or replace function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.users (id, email)\n  values (new.id, new.email);\n  return new;\nend;\n$$ language plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Enabling Wasm Wrappers Extension in Supabase SQL\nDESCRIPTION: This SQL code enables the Wasm Wrapper feature in Supabase. It installs the Wrappers extension and creates a Wasm foreign data wrapper.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- install Wrappers extension\ncreate extension if not exists wrappers with schema extensions;\n\n-- create Wasm foreign data wrapper\ncreate foreign data wrapper wasm_wrapper\n  handler wasm_fdw_handler\n  validator wasm_fdw_validator;\n```\n\n----------------------------------------\n\nTITLE: Restricting INSERT Policy to Authenticated Users and Specific Bucket in SQL\nDESCRIPTION: This snippet shows how to modify the INSERT policy to only allow authenticated users to upload assets to a specific bucket.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"policy_name\"\non storage.objects for insert to authenticated with check (\n    -- restrict bucket\n    bucket_id = 'my_bucket_id'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security in Edge Function\nDESCRIPTION: Demonstrates how to implement Row Level Security in a Supabase Edge Function when querying data with authentication context.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nDeno.serve(async (req: Request) => {\n\n  const supabaseClient = createClient(\n    Deno.env.get('SUPABASE_URL') ?? '',\n    Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n  );\n\n  // Get the session or user object\n  const authHeader = req.headers.get('Authorization')!;\n  const token = authHeader.replace('Bearer ', '');\n  const { data: userData } = await supabaseClient.auth.getUser(token);\n  const { data, error } = await supabaseClient.from('profiles').select('*');\n\n  return new Response(JSON.stringify({ data }), {\n    headers: { 'Content-Type': 'application/json' },\n    status: 200,\n  })\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing PostgreSQL Query Results\nDESCRIPTION: pgTAP test to verify query results match expected values. Uses results_eq() to compare actual and expected results.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nselect plan( 1 );\n\nselect results_eq(\n    'select * from profiles()',\n    $$VALUES ( 1, 'Anna'), (2, 'Bruce'), (3, 'Caryn')$$,\n    'profiles() should return all users'\n);\n\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Initialize and Start Supabase Project\nDESCRIPTION: Commands to initialize a new Supabase project and start the local development stack.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsupabase init\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policies for Realtime Authorization\nDESCRIPTION: SQL commands to create Row Level Security policies that control access to Broadcast and Presence features for authenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"authenticated user listen to all\"\non \"realtime\".\"messages\"\nas permissive\nfor select -- receive\nto authenticated\nusing ( true );\n\ncreate policy \"authenticated user write to all\"\non \"realtime\".\"messages\"\nas permissive\nfor insert -- send\nto authenticated\nwith check ( true );\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase Transaction Mode Pooler\nDESCRIPTION: Example connection string format for connecting to Supabase's transaction mode pooler on port 6543.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example transaction mode string:\npostgres://[db-user].[project-ref]:[db-password]@aws-0-[aws-region].pooler.supabase.com:6543\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigger Functions for View Updates in SQL\nDESCRIPTION: This snippet demonstrates how to create trigger functions to update views from PostgREST. It includes a function definition and a trigger creation for the 'projects' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.public_projects_on_insert() returns trigger\nas $$\nbegin\n  insert into private.projects(\n    name,\n    organization_id,\n    inserted_at,\n    updated_at\n  ) values (\n    NEW.name,\n    NEW.organization_id,\n    coalesce(NEW.inserted_at, now()),\n    coalesce(NEW.updated_at, now())\n  ) returning * into NEW;\n  return NEW;\nend\n$$ language plpgsql;\n\ncreate trigger public_projects_on_insert\n  instead of insert\n  on public.projects\n  for each row\nexecute function public.public_projects_on_insert();\n```\n\n----------------------------------------\n\nTITLE: Sign In with Figma OAuth - Flutter\nDESCRIPTION: This Flutter snippet shows how to sign in a user with Figma OAuth using the Supabase client library. It calls the signInWithOAuth method with OAuthProvider.figma as the provider. Optionally sets the redirect link for deeplinking and configures how the auth screen is launched.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithFigma() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.figma,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Postgres Configuration with Supabase CLI\nDESCRIPTION: This snippet demonstrates how to update Postgres configurations using the Supabase CLI. It shows the basic command structure and an example of updating the shared_buffers parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --experimental \\\n--project-ref <project-ref> \\\npostgres-config update --config shared_buffers=250MB\n```\n\n----------------------------------------\n\nTITLE: Checking table-specific autovacuum settings in PostgreSQL\nDESCRIPTION: This SQL query shows the custom storage options for a specific table, including any table-level autovacuum settings that override the global configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nSELECT relname, reloptions FROM pg_class WHERE relname='mytable';\n```\n\n----------------------------------------\n\nTITLE: Auth UI with Social Providers\nDESCRIPTION: Implementation of Auth UI with social authentication providers like Google, Facebook, and Twitter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { Auth } from '@supabase/auth-ui-react'\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n\nconst App = () => (\n  <Auth\n    supabaseClient={supabase}\n    appearance={{ theme: ThemeSupa }}\n    providers={['google', 'facebook', 'twitter']}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase SSR Client in Next.js\nDESCRIPTION: Sets up a Supabase client for server-side rendering in Next.js, handling cookie management for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = cookies()\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        },\n      },\n    }\n  )\n\n  const { data } = await supabase.from('countries').select()\n\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Password with Supabase in Swift\nDESCRIPTION: This snippet shows how to initiate a password reset process using the Supabase Swift client. It sends a reset password email to the user's email address with a redirect URL for updating the password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.resetPasswordForEmail(\n   \"valid.email@supabase.io\",\n   redirectTo: URL(string: \"http://example.com/account/update-password\")\n)\n```\n\n----------------------------------------\n\nTITLE: Streaming LLM Responses with Supabase.ai API in Edge Functions\nDESCRIPTION: This code shows how to create a streaming response from an LLM model (Mistral) using Supabase.ai API in an Edge Function. It accepts a prompt via query parameter and returns the model's output as a server-sent event stream.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-16-ai-inference-now-available-in-supabase-edge-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst session = new Supabase.ai.Session('mistral')\n\nDeno.serve(async (req: Request) => {\n  // Get the prompt from the query string\n  const params = new URL(req.url).searchParams\n  const prompt = params.get('prompt') ?? ''\n\n  // Get the output as a stream\n  const output = await session.run(prompt, { stream: true })\n\n  // Create a stream\n  const stream = new ReadableStream({\n    async start(controller) {\n      const encoder = new TextEncoder()\n      for await (const chunk of output) {\n        controller.enqueue(encoder.encode(chunk.response ?? ''))\n      }\n    },\n  })\n\n  // Return the stream to the user\n  return new Response(stream, {\n    headers: new Headers({\n      'Content-Type': 'text/event-stream',\n      Connection: 'keep-alive',\n    }),\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Android Kotlin App\nDESCRIPTION: Code to create a Supabase client instance that will be used for API calls. This initialization requires the Supabase URL and anonymous key from the project settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport ...\n\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"your_public_anon_key\"\n  ) {\n    install(Postgrest)\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Vecs Client Connection in Python\nDESCRIPTION: Establishes connection to Supabase database using vecs library. Requires PostgreSQL connection string with proper authentication details. Uses SQLAlchemy-compatible connection format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/hello-world.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n```\n\n----------------------------------------\n\nTITLE: Basic PGroonga Full-Text Search Query\nDESCRIPTION: SQL command demonstrating a basic full-text search query using PGroonga's &@~ operator, which performs case-insensitive matching.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect * from memos where content &@~ 'groonga';\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Supabase Project\nDESCRIPTION: Generates TypeScript types for a Supabase project using the CLI and saves them to a file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase gen types typescript --project-id \"$PROJECT_REF\" --schema public > database.types.ts\n```\n\n----------------------------------------\n\nTITLE: Import Postgres Database using psql\nDESCRIPTION: This command imports a Postgres database from a file (dump.sql) into a Supabase project using psql. It connects to the Supabase database using the provided connection string and executes the SQL commands in the dump file. This assumes the dump file exists and is accessible.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"psql -d \\\"$YOUR_CONNECTION_STRING\\\" -f dump.sql\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Schema with cURL in Supabase\nDESCRIPTION: cURL commands demonstrating how to access a custom schema via Supabase's REST API. Shows different header usage for GET/HEAD requests (Accept-Profile) versus POST/PATCH/PUT/DELETE requests (Content-Profile).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Append /rest/v1/ to your URL, and then use the table name as the route.\n\n# for GET or HEAD request use Accept-Profile\ncurl '<SUPABASE_URL>/rest/v1/todos' \\\n  -H \"apikey: <SUPABASE_ANON_KEY>\" \\\n  -H \"Authorization: Bearer <SUPABASE_ANON_KEY>\" \\\n  -H \"Accept-Profile: myschema\"\n\n# for POST, PATCH, PUT and DELETE Request use Content-Profile\ncurl -X POST '<SUPABASE_URL>/rest/v1/todos' \\\n  -H \"apikey: <SUPABASE_ANON_KEY>\" \\\n  -H \"Authorization: Bearer <SUPABASE_ANON_KEY>\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Content-Profile: myschema\" \\\n  -d '{\"column_name\": \"value\"}'\n```\n\n----------------------------------------\n\nTITLE: Configure URL Scheme in React Native (Expo)\nDESCRIPTION: This JSON snippet demonstrates how to configure a custom URL scheme for a React Native (Expo) application.  Adding a scheme allows the app to be opened via a deep link. The scheme should be added to the app.json or app.config.js file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"com.supabase\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription on External Postgres Database\nDESCRIPTION: Sets up a subscription on the external database that connects to the Supabase database and subscribes to the publication. This subscription will receive all changes published to example_pub.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SUBSCRIPTION example_sub\nCONNECTION 'host=db.oaguxblfdassqxvvwtfe.supabase.co user=postgres password=YOUR_PASS dbname=postgres'\nPUBLICATION example_pub\nWITH (copy_data = true, create_slot=false, slot_name=example_slot);\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Task with Event Listener in TypeScript\nDESCRIPTION: Demonstrates how to set up a long-running background task using EdgeRuntime.waitUntil and handle function shutdown events with beforeunload listener.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/background-tasks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function longRunningTask() {\n  // do work here\n}\n\n// Mark the longRunningTask's returned promise as a background task.\n// note: we are not using await because we don't want it to block.\nEdgeRuntime.waitUntil(longRunningTask())\n\n// Use beforeunload event handler to be notified when function is about to shutdown\naddEventListener('beforeunload', (ev) => {\n  console.log('Function will be shutdown due to', ev.detail?.reason)\n\n  // save state or log the current progress\n})\n\n// Invoke the function using a HTTP request.\n// This will start the background task\nDeno.serve(async (req) => {\n  return new Response('ok')\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Custom Domain in JavaScript\nDESCRIPTION: Initialize the Supabase client in JavaScript using the custom domain as the Supabase URL. This code snippet demonstrates how to use the custom domain in client-side applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Use a custom domain as the supabase URL\nconst supabase = createClient('https://api.example.com', 'public-anon-key')\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Deep Link in Manifest\nDESCRIPTION: XML configuration for Android manifest to enable deep linking through intent filters. Defines the scheme and hostname for handling authentication callbacks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  <!-- ... other tags -->\n  <application ...>\n    <activity ...>\n      <!-- ... other tags -->\n\n      <!-- Deep Links -->\n      <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST -->\n        <data\n          android:scheme=\"YOUR_SCHEME\"\n          android:host=\"YOUR_HOSTNAME\" />\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding New Column with Desired Data Type in Postgres\nDESCRIPTION: This SQL command adds a new column with the desired data type to the target table. It's the first step in the alternative approach for changing column types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/slow-execution-of-alter-table-on-large-table-when-changing-column-type-qmZRpZ.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"table_name\" ADD COLUMN \"new_column_name\" new_data_type;\n```\n\n----------------------------------------\n\nTITLE: Searching for pg_cron Errors in Postgres Logs\nDESCRIPTION: This SQL query searches the postgres_logs table for error events specifically related to pg_cron. It parses the log metadata to extract detailed error information including severity, username, query details, and error codes to help diagnose pg_cron issues.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(postgres_logs.timestamp as datetime) as timestamp,\n  event_message,\n  parsed.error_severity,\n  parsed.user_name,\n  parsed.query,\n  parsed.detail,\n  parsed.hint,\n  parsed.sql_state_code,\n  parsed.backend_type,\n  parsed.application_name\nfrom\n  postgres_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(metadata.parsed) as parsed\nwhere\n  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')\n  and regexp_contains(parsed.application_name, 'pg_cron')\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Unscheduling a Cron Job using SQL in Supabase\nDESCRIPTION: This SQL snippet shows how to unschedule (delete) a cron job in Supabase using the cron.unschedule function. It permanently removes the job from the cron.job table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.unschedule('permanent-cron-job-name');\n```\n\n----------------------------------------\n\nTITLE: Using Response Types for Complex Supabase Queries\nDESCRIPTION: Demonstrates how to use response types for complex Supabase queries with nested relations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'\n\nconst countriesWithCitiesQuery = supabase.from('countries').select(`\n  id,\n  name,\n  cities (\n    id,\n    name\n  )\n`)\ntype CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>\n\nconst { data, error } = await countriesWithCitiesQuery\nif (error) throw error\nconst countriesWithCities: CountriesWithCities = data\n```\n\n----------------------------------------\n\nTITLE: Enabling TimescaleDB Extension in SQL\nDESCRIPTION: SQL commands to enable or disable the TimescaleDB extension in a Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/timescaledb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"timescaledb\" extension\ncreate extension timescaledb;\n\n-- Disable the \"timescaledb\" extension\ndrop extension if exists timescaledb;\n```\n\n----------------------------------------\n\nTITLE: Writing RLS Tests with pgTAP\nDESCRIPTION: Comprehensive pgTAP test suite for testing RLS policies including setup, user access controls, and data modification restrictions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\n-- install tests utilities\n-- install pgtap extension for testing\ncreate extension if not exists pgtap with schema extensions;\n-- Start declare we'll have 4 test cases in our test suite\nselect plan(4);\n\n-- Setup our testing data\n-- Set up auth.users entries\ninsert into auth.users (id, email) values\n\t('123e4567-e89b-12d3-a456-426614174000', 'user1@test.com'),\n\t('987fcdeb-51a2-43d7-9012-345678901234', 'user2@test.com');\n\n-- Create test todos\ninsert into public.todos (task, user_id) values\n\t('User 1 Task 1', '123e4567-e89b-12d3-a456-426614174000'),\n\t('User 1 Task 2', '123e4567-e89b-12d3-a456-426614174000'),\n\t('User 2 Task 1', '987fcdeb-51a2-43d7-9012-345678901234');\n\n-- as User 1\nset local role authenticated;\nset local request.jwt.claim.sub = '123e4567-e89b-12d3-a456-426614174000';\n\n-- Test 1: User 1 should only see their own todos\nselect results_eq(\n\t'select count(*) from todos',\n\tARRAY[2::bigint],\n\t'User 1 should only see their 2 todos'\n);\n\n-- Test 2: User 1 can create their own todo\nselect lives_ok(\n\t$$insert into todos (task, user_id) values ('New Task', '123e4567-e89b-12d3-a456-426614174000'::uuid)$$,\n\t'User 1 can create their own todo'\n);\n\n-- as User 2\nset local request.jwt.claim.sub = '987fcdeb-51a2-43d7-9012-345678901234';\n\n-- Test 3: User 2 should only see their own todos\nselect results_eq(\n\t'select count(*) from todos',\n\tARRAY[1::bigint],\n\t'User 2 should only see their 1 todo'\n);\n\n-- Test 4: User 2 cannot modify User 1's todo\nSELECT results_ne(\n\t$$ update todos set task = 'Hacked!' where user_id = '123e4567-e89b-12d3-a456-426614174000'::uuid returning 1 $$,\n\t$$ values(1) $$,\n\t'User 2 cannot modify User 1 todos'\n);\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Creating Job Queue Table for Email Messaging - SQL\nDESCRIPTION: Defines a SQL table structure for a job queue utilized in handling email messages efficiently. This structure supports storing metadata about each job, including its status, priority, and retry information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table job_queue (\n  job_id uuid primary key default gen_random_uuid(),\n  job_data jsonb not null,\n  created_at timestamp default now(),\n  status text default 'pending',\n  priority int default 0,\n  retry_count int default 0,\n  \n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component into Account Form\nDESCRIPTION: Code snippet showing how to integrate the Avatar component into the AccountForm. It adds the avatar upload functionality to the user profile form, allowing for profile picture management alongside other user information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// Import the new component\nimport Avatar from './avatar'\n\n// ...\n\nreturn (\n  <div className=\"form-widget\">\n    {/* Add to the body */}\n    <Avatar\n      uid={user?.id}\n      url={avatar_url}\n      size={150}\n      onUpload={(url) => {\n        setAvatarUrl(url)\n        updateProfile({ fullname, username, website, avatar_url: url })\n      }}\n    />\n    {/* ... */}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Node Tables for Categories and Videos in SQL\nDESCRIPTION: This snippet demonstrates how to create tables for categories and videos, which serve as nodes in the recommendation graph. It also includes sample data insertion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table categories (\n  id serial primary key,\n  name text\n);\n\ninsert into categories (name)\nvalues\n  ('Graph Theory'),\n  ('AI & Machine Learning'),\n  ('Python Programming');\n\ncreate table videos (\n  id serial primary key,\n  title text,\n  category_id int references categories (id)\n);\n\ninsert into videos (title, category_id)\nvalues\n  ('Intro to Graph Theory', 1),\n  ('Advanced Graph Algorithms', 1),\n  ('Graph Neural Networks', 2),\n  ('Beginner Python Tutorial', 3),\n  ('Advanced Python Techniques', 3);\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI Embeddings in TypeScript\nDESCRIPTION: Demonstrates how to generate embeddings from user questions using OpenAI's API by making a POST request to the embeddings endpoint with proper authentication and input sanitization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${openAiKey}`,\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    model: 'text-embedding-ada-002',\n    input: sanitizedQuery.replaceAll('\\n', ' '),\n  }),\n})\n\nif (embeddingResponse.status !== 200) {\n  throw new ApplicationError('Failed to create embedding for question', embeddingResponse)\n}\n\nconst {\n  data: [{ embedding }],\n} = await embeddingResponse.json()\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with Supabase Client instance\nDESCRIPTION: Example of initializing Sentry with an already initialized Supabase Client instance. Configures tracing, breadcrumbs, and error tracking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Sentry from '@sentry/browser'\nimport { createClient } from '@supabase/supabase-js'\nimport { supabaseIntegration } from '@supabase/sentry-js-integration'\n\nconst supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY)\n\nSentry.init({\n  dsn: SENTRY_DSN,\n  integrations: [\n    supabaseIntegration(supabaseClient, Sentry, {\n      tracing: true,\n      breadcrumbs: true,\n      errors: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JWT for Realtime in Dart\nDESCRIPTION: This Dart snippet demonstrates setting a custom JWT token for Supabase Realtime authentication. The `setAuth` method is used to provide the token before subscribing to a Realtime channel.  It listens for Postgres changes on a specific table with a filter applied, and then subscribed to.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_50\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.realtime.setAuth('your-custom-jwt');\n\nsupabase\n    .channel('db-changes')\n    .onPostgresChanges(\n      event: PostgresChangeEvent.all,\n      schema: 'public',\n      table: 'messages',\n      filter: PostgresChangeFilter(\n        type: PostgresChangeFilterType.eq,\n        column: 'body',\n        value: 'bye',\n      ),\n      callback: (payload) => print(payload),\n    )\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security and Creating Access Policies in PostgreSQL\nDESCRIPTION: SQL commands to enable Row Level Security on the profiles table and create a policy that restricts the exporter user to only access specific rows by ID (1, 2, and 3).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Turn on Row Level Security\nalter table profiles\n  enable row level security;\n\n-- Only dump data for internal team members 1, 2, 3\ncreate policy \"Data dump rule\" on profiles\n  for select\n  to exporter\n  using (\n    id in (1, 2, 3)\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Float16 Vector Table\nDESCRIPTION: Demonstrates how to create a table with float16 vectors and copy data from an existing float32 table, reducing memory usage by 50%.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table embedding_half (\n  id serial,\n  vector halfvec(1536),\n  primary key (id)\n);\n\ninsert into embedding_half (vector)\nselect\n  vector::halfvec(1536)\nfrom\n  embedding_full;\n```\n\n----------------------------------------\n\nTITLE: Setting IVFFlat Probes for Transaction in SQL\nDESCRIPTION: SQL commands to set the number of probes for IVFFlat index only for the current transaction. This example sets the number of probes to 10 within a transaction block.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nset local ivfflat.probes = 10;\nselect ...\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Granting Select Privilege as Table Owner in PostgreSQL\nDESCRIPTION: This snippet shows how the table owner (junior_dev) can successfully grant select privilege on the table to another role (senior_dev).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> grant select on public.apps to senior_dev;\nGRANT\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter Routing with go_router for MFA Authentication Flow\nDESCRIPTION: This code snippet demonstrates how to structure the main.dart file with go_router to manage navigation paths and implement authentication redirects. It handles complex MFA flows including redirecting unauthenticated users to registration, users without MFA setup to the enrollment page, and users with MFA but not verified to the verification page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:mfa_app/pages/auth/login_page.dart';\nimport 'package:mfa_app/pages/auth/register_page.dart';\nimport 'package:mfa_app/pages/home_page.dart';\nimport 'package:mfa_app/pages/list_mfa_page.dart';\nimport 'package:mfa_app/pages/mfa/verify_page.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:mfa_app/pages/mfa/enroll_page.dart';\n\nvoid main() async {\n  await Supabase.initialize(\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_ANON_KEY',\n  );\n  runApp(const MyApp());\n}\n\n/// Extract SupabaseClient instance in a handy variable\nfinal supabase = Supabase.instance.client;\n\nfinal _router = GoRouter(\n  routes: [\n    GoRoute(\n      path: HomePage.route,\n      builder: (context, state) => const HomePage(),\n    ),\n    GoRoute(\n      path: ListMFAPage.route,\n      builder: (context, state) => ListMFAPage(),\n    ),\n    GoRoute(\n      path: LoginPage.route,\n      builder: (context, state) => const LoginPage(),\n    ),\n    GoRoute(\n      path: RegisterPage.route,\n      builder: (context, state) => const RegisterPage(),\n    ),\n    GoRoute(\n      path: MFAEnrollPage.route,\n      builder: (context, state) => const MFAEnrollPage(),\n    ),\n    GoRoute(\n      path: MFAVerifyPage.route,\n      builder: (context, state) => const MFAVerifyPage(),\n    ),\n  ],\n  redirect: (context, state) async {\n    // Any users can visit the /auth route\n    if (state.location.contains('/auth') == true) {\n      return null;\n    }\n\n    final session = supabase.auth.currentSession;\n    // A user without a session should be redirected to the register page\n    if (session == null) {\n      return RegisterPage.route;\n    }\n\n    final assuranceLevelData =\n        supabase.auth.mfa.getAuthenticatorAssuranceLevel();\n\n    // The user has not setup MFA yet, so send them to enroll MFA page.\n    if (assuranceLevelData.currentLevel == AuthenticatorAssuranceLevels.aal1) {\n      await supabase.auth.refreshSession();\n      final nextLevel =\n          supabase.auth.mfa.getAuthenticatorAssuranceLevel().nextLevel;\n      if (nextLevel == AuthenticatorAssuranceLevels.aal2) {\n        // The user has already setup MFA, but haven't login via MFA\n        // Redirect them to the verify page\n        return MFAVerifyPage.route;\n      } else {\n        // The user has not yet setup MFA\n        // Redirect them to the enrollment page\n        return MFAEnrollPage.route;\n      }\n    }\n\n    // The user has signed invia MFA, and is allowed to view any page.\n    return null;\n  },\n);\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      title: 'MFA App',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData.light().copyWith(\n        inputDecorationTheme: const InputDecorationTheme(\n          border: OutlineInputBorder(),\n        ),\n      ),\n      routerConfig: _router,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Encrypted Authentication Storage in React Native with Supabase\nDESCRIPTION: Implementation of a secure storage solution that encrypts user session data using AES-256 encryption with Expo SecureStore and AsyncStorage for Supabase authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-url-polyfill/auto'\nimport { createClient } from '@supabase/supabase-js'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport * as SecureStore from 'expo-secure-store'\nimport * as aesjs from 'aes-js'\nimport 'react-native-get-random-values'\n\n// As Expo's SecureStore does not support values larger than 2048\n// bytes, an AES-256 key is generated and stored in SecureStore, while\n// it is used to encrypt/decrypt values stored in AsyncStorage.\nclass LargeSecureStore {\n  private async _encrypt(key: string, value: string) {\n    const encryptionKey = crypto.getRandomValues(new Uint8Array(256 / 8))\n\n    const cipher = new aesjs.ModeOfOperation.ctr(encryptionKey, new aesjs.Counter(1))\n    const encryptedBytes = cipher.encrypt(aesjs.utils.utf8.toBytes(value))\n\n    await SecureStore.setItemAsync(key, aesjs.utils.hex.fromBytes(encryptionKey))\n\n    return aesjs.utils.hex.fromBytes(encryptedBytes)\n  }\n\n  private async _decrypt(key: string, value: string) {\n    const encryptionKeyHex = await SecureStore.getItemAsync(key)\n    if (!encryptionKeyHex) {\n      return encryptionKeyHex\n    }\n\n    const cipher = new aesjs.ModeOfOperation.ctr(\n      aesjs.utils.hex.toBytes(encryptionKeyHex),\n      new aesjs.Counter(1)\n    )\n    const decryptedBytes = cipher.decrypt(aesjs.utils.hex.toBytes(value))\n\n    return aesjs.utils.utf8.fromBytes(decryptedBytes)\n  }\n\n  async getItem(key: string) {\n    const encrypted = await AsyncStorage.getItem(key)\n    if (!encrypted) {\n      return encrypted\n    }\n\n    return await this._decrypt(key, encrypted)\n  }\n\n  async removeItem(key: string) {\n    await AsyncStorage.removeItem(key)\n    await SecureStore.deleteItemAsync(key)\n  }\n\n  async setItem(key: string, value: string) {\n    const encrypted = await this._encrypt(key, value)\n\n    await AsyncStorage.setItem(key, encrypted)\n  }\n}\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: new LargeSecureStore(),\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch Sign-In Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the sign-in functionality using Twitch OAuth in a Supabase JavaScript client application. It initializes the Supabase client and uses the signInWithOAuth method with 'twitch' as the provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\\n\\n// ---cut---\\nasync function signInWithTwitch() {\\n  const { data, error } = await supabase.auth.signInWithOAuth({\\n    provider: 'twitch',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships in Kotlin\nDESCRIPTION: Kotlin example showing how to query orchestral sections with their related instruments using Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"orchestral_sections\").select(Columns.raw(\"id, name, instruments(id, name)\"))\n```\n\n----------------------------------------\n\nTITLE: Creating DELETE Policy for Profiles\nDESCRIPTION: Example of creating a DELETE policy that allows users to delete their own profiles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- 1. Create table\ncreate table profiles (\n  id uuid primary key,\n  user_id uuid references auth.users,\n  avatar_url text\n);\n\n-- 2. Enable RLS\nalter table profiles enable row level security;\n\n-- 3. Create Policy\ncreate policy \"Users can delete a profile.\"\non profiles for delete\nto authenticated                     -- the Postgres Role (recommended)\nusing ( (select auth.uid()) = user_id );      -- the actual Policy\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Environment Variables in Next.js\nDESCRIPTION: Creates a .env.local file with Supabase URL and anonymous key for a Next.js project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Page with Notes in Svelte\nDESCRIPTION: Svelte component for the private page. Displays user email, lists notes, and provides a form to add new notes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { invalidate } from '$app/navigation'\n  import type { EventHandler } from 'svelte/elements'\n\n  import type { PageData } from './$types'\n\n  let { data } = $props()\n  let { notes, supabase, user } = $derived(data)\n\n  const handleSubmit: EventHandler<SubmitEvent, HTMLFormElement> = async (evt) => {\n    evt.preventDefault()\n    if (!evt.target) return\n\n    const form = evt.target as HTMLFormElement\n\n    const note = (new FormData(form).get('note') ?? '') as string\n    if (!note) return\n\n    const { error } = await supabase.from('notes').insert({ note })\n    if (error) console.error(error)\n\n    invalidate('supabase:db:notes')\n    form.reset()\n  }\n</script>\n\n<h1>Private page for user: {user?.email}</h1>\n<h2>Notes</h2>\n<ul>\n  {#each notes as note}\n    <li>{note.note}</li>\n  {/each}\n</ul>\n<form onsubmit={handleSubmit}>\n  <label>\n    Add a note\n    <input name=\"note\" type=\"text\" />\n  </label>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in SvelteKit for Supabase Auth\nDESCRIPTION: Implementation of a SvelteKit server route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and manages redirects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit'\nimport { type EmailOtpType } from '@supabase/supabase-js'\n\nexport const GET = async (event) => {\n  const {\n    url,\n    locals: { supabase },\n  } = event\n  const token_hash = url.searchParams.get('token_hash') as string\n  const type = url.searchParams.get('type') as EmailOtpType | null\n  const next = url.searchParams.get('next') ?? '/'\n\n  /**\n   * Clean up the redirect URL by deleting the Auth flow parameters.\n   *\n   * `next` is preserved for now, because it's needed in the error case.\n   */\n  const redirectTo = new URL(url)\n  redirectTo.pathname = next\n  redirectTo.searchParams.delete('token_hash')\n  redirectTo.searchParams.delete('type')\n\n  if (token_hash && type) {\n    const { error } = await supabase.auth.verifyOtp({ token_hash, type })\n    if (!error) {\n      redirectTo.searchParams.delete('next')\n      redirect(303, redirectTo)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  redirectTo.pathname = '/auth/error'\n  redirect(303, redirectTo)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Terminal command to start the Next.js development server. After running this command, you can access your application at http://localhost:3000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase project with npm\nDESCRIPTION: This command initializes a Supabase project in the current repository using npx. It sets up the necessary configuration files for local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx supabase init\n```\n\n----------------------------------------\n\nTITLE: Adding Complex Exclusion Constraint with Table ID\nDESCRIPTION: These SQL statements enable the btree_gist extension and add an exclusion constraint that prevents overlapping reservations for the same table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the btree_gist index required for the constraint.\ncreate extension btree_gist\n\n-- Add a constraint to prevent overlaps with the same table_id\nalter table reservations\n  add constraint exclude_duration\n  exclude using gist (table_id WITH =, duration WITH &&);\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships in JavaScript\nDESCRIPTION: JavaScript example showing how to query teams with their related users through a many-to-many relationship using Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('teams').select(`\n  id,\n  team_name,\n  users ( id, name )\n`)\n```\n\n----------------------------------------\n\nTITLE: Inserting Car Vector Embedding\nDESCRIPTION: SQL insert statement containing a 300-dimensional vector embedding representing the semantic features of a 'Car' concept. The values are floating point numbers that capture various learned features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n('Car', '[-0.013675096,0.027324528,0.06942244,0.0013266953,-0.020453496,0.061512772,0.07301235,0.04290585,0.0023934839,-0.0186373,0.012499963,-0.093231946,0.028258853,0.07755444,0.025344418,-0.013358756,0.023283212,0.027902517,-0.032629456,-0.018587576,0.022121359,-0.01931578,-0.020892585,-0.07198824,0.0230901,0.058177892,-0.020588726,-0.020963376,-0.05223263,-0.13351677,-0.020541323,-0.034604687,0.05377937,0.015278223,-0.059128493,-0.054362193,-0.06885301,0.028906692,-0.052341137,0.01598179,0.027373223,0.015316855,-0.07678603,-0.053560868,-0.013568181,-0.0028432393,0.0071754334,0.020171847,0.07315126,-0.07514821,0.034036174,-0.017486328,0.014351431,0.004913182,-0.03727606,0.022707878,0.04719973,0.012032776,0.04482492,0.024352394,0.022039536,0.0637522,-0.22861159,0.055107087,0.07447692,0.0291307,-0.041218065,-0.040351745,0.047432993,0.054303292,-0.023342311,-0.016348358,0.0017851957,0.08988982,0.02769922,-0.049907178,-0.027979424,-0.042212185,-0.020770581,-0.021024825,0.029763328,-0.053642657,-0.066037476,-0.026011113,-0.010575339,-0.047937546,0.012322384,-0.056541797,0.029350977,0.014430247,-0.045942552,0.02386634,0.0029833463,0.0141003905,-0.05075455,-0.014572922,-0.008882929,-0.032623354,-0.050203778,0.26171875,-0.021519234,0.049280297,0.04079181,-0.028314121,-0.013227541,-0.012881829,-0.035419036,0.013379328,-0.030239435,0.04186359,0.017268283,-0.000105469044,0.0125124715,-0.082406625,0.034267884,-0.016504455,0.038922243,0.06633839,0.006251055,0.00037995656,-0.001207575,0.02512416,0.02109219,-0.02958561,0.0013164878,-0.103339866,0.04863308,0.11800187,0.034086462,0.037300617,0.056644727,-0.037418414,-0.061853807,-0.022136258,-0.019294702,0.017083716,0.012703508,0.015861439,-0.022639215,-0.007921711,-0.0544705,-0.12781276,-0.01872742,-0.123899914,-0.037989907,0.039830185,-0.05202418,0.05241696,-0.056093507,0.0136191305,-0.026056947,0.048660703,-0.0140545815,-0.0027107827,0.026319232,0.0021281333,0.04325188,0.058733158,-0.04723551,0.0404873,-0.034551904,-0.03205584,-0.053433474,0.06742306,-0.01232912,-0.08600591,-0.017429007,0.029419081,0.0026076722,0.013392961,0.03677887,0.031694457,-0.0720888,0.051425304,0.08350261,0.0315462,-0.004771196,0.034244526,-0.010683566,0.0025684177,0.028690292,0.010577877,-0.052667093,0.06373304,0.059627198,-0.019951789,-0.052819874,-0.0048726257,0.013962882,0.054299265,0.040887468,0.061755426,0.007373504,-0.0075591686,-0.062904865,-0.007323224,-0.016505266,-0.033703998,0.0016645732,-0.021243243,0.037611052,-0.020470953,-0.023737112,0.039098095,-0.0017488332,-0.038300857,-0.045891576,-0.016960371,0.022000503,0.043613117,-0.05976287,-0.0041191196,0.0744647,-0.0018894378,-0.03981402,0.012990376,-0.045962907,0.04994432,0.028742177,0.05744724,0.0009102008,-0.08285415,-0.03267054,-0.2337071,0.0072381077,-0.032779843,-0.024238953,0.041009203,-0.05101638,0.03943452,-0.02855554,0.04525813,0.046112273,0.05932983,-0.022565039,-0.009743857,0.061256465,-0.03037518,0.05372682,-0.010801566,0.01609313,-0.0061583905,0.042392224,-0.021107364,0.0141626885,-0.047603372,-0.057255138,0.040890433,-0.011722571,0.24564229,0.027296212,0.019367144,-0.016961388,0.06517703,0.043743007,-0.036653895,-0.055930916,0.013116146,-0.016756361,0.0140022235,-0.002970313,-0.070724085,-0.057791047,-0.013434504,0.029526964,-0.00938867,-0.05977423,0.00040445486,-0.014813439,-0.029890385,0.009259244,-0.027084075,0.041800242,0.06727153,-0.0014996758,-0.00021284568,0.016413646,0.0063286186,-0.019270584,-0.06787658,0.029184967,0.0017431147,0.0158079,-0.019558495,-0.04962892,0.017410701,-0.034534313,0.019038094,0.006610072,-0.04343159,-0.031567868,-0.009124138,-0.036709126,-0.015360762,0.10293102,-0.010821659,-0.015772903,0.07758905,-0.015194392,0.060196437,0.010410943,-0.021493688,-0.06867113,0.0474313,-0.017747577,0.042234425,0.05141044,0.057146773,0.006755126,0.049838375,-0.043111365,0.0029671746,-0.026369067,0.03549969,0.0017129052,-0.028317036,-0.05324385,0.039201375,-0.017168764,-0.2772981,0.04778095,-0.0069068763,0.06153518,-0.041531466,-0.0171643,0.013447191,0.03850731,-0.07578842,-0.029888023,0.012730036,0.03311835,0.059252515,0.040407978,-0.0048704417,0.043922015,0.05727722,-0.019122923,0.06540934,-0.008338455,0.010299639,0.053547956,0.20795242,-0.013018652,0.056953296,0.025129227,-0.018750485,0.008330987,0.02540996,-0.0045585097,0.038341187,0.035392124,0.0776931,-0.032675825,0.01839246,0.008414822,-0.07650357,0.07460887,0.015999481,-0.0143431565,-0.03775232,0.073541395,-0.029160045,-0.033645444,0.05769379,-0.037698034,-0.022761138,-0.066397525,0.013602807,0.005004625,-0.012167106,-0.0090219155,-0.07229144,-0.007818199,0.055839863,-0.023012608,-0.058479514,-0.023438398,0.007111039,-0.039270334,-0.007022913,-0.03873911,-0.016563078,0.015775386,0.025728563]')\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Turnstile React Package\nDESCRIPTION: Command to install the Cloudflare Turnstile React component package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @marsidev/react-turnstile\n```\n\n----------------------------------------\n\nTITLE: Querying Connection Statistics in PostgreSQL\nDESCRIPTION: SQL query to observe database roles and servers connecting to the database by joining pg_stat_ssl and pg_stat_activity views. Shows detailed connection information including SSL status, connected roles, and query states.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/monitor-supavisor-postgres-connections.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   pg_stat_activity.pid,\n   ssl AS ssl_connection,\n   datname AS database,\n   usename AS connected_role,\n   application_name,\n   client_addr,\n   query,\n   query_start,\n   state,\n   backend_start\nFROM pg_stat_ssl\nJOIN pg_stat_activity\n ON pg_stat_ssl.pid = pg_stat_activity.pid;\n```\n\n----------------------------------------\n\nTITLE: Sending State in Python\nDESCRIPTION: This snippet shows how to track a user's status in Python after subscribing to a channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nroom_one = supabase.channel('room_01')\n\nuser_status = {\n  \"user\": 'user-1',\n  \"online_at\": datetime.datetime.now().isoformat(),\n}\n\ndef on_subscribe(status, err):\n  if status != RealtimeSubscribeStates.SUBSCRIBED:\n    return\n\n  room_one.track(user_status)\n\nroom_one.subscribe(on_subscribe)\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware with createMiddlewareClient in Next.js\nDESCRIPTION: This snippet demonstrates how to replace the deprecated withMiddlewareAuth function with createMiddlewareClient in a Next.js middleware file. It shows how to create an authenticated Supabase client, check for an active session, and implement custom authentication logic.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport async function middleware(req: NextRequest) {\n  // We need to create a response and hand it to the supabase client to be able to modify the response headers.\n  const res = NextResponse.next()\n  // Create authenticated Supabase Client.\n  const supabase = createMiddlewareClient({ req, res })\n  // Check if we have a session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  // Check auth condition\n  if (user?.email?.endsWith('@gmail.com')) {\n    // Authentication successful, forward request to protected route.\n    return res\n  }\n\n  // Auth condition not met, redirect to home page.\n  const redirectUrl = req.nextUrl.clone()\n  redirectUrl.pathname = '/'\n  redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname)\n  return NextResponse.redirect(redirectUrl)\n}\n\nexport const config = {\n  matcher: '/middleware-protected',\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Transformed Image in JavaScript\nDESCRIPTION: This snippet demonstrates how to download a transformed image using the Supabase JavaScript client, specifying transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nsupabase.storage.from('bucket').download('image.jpg', {\n  transform: {\n    width: 800,\n    height: 300,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Update Supabase Network Restrictions via CLI\nDESCRIPTION: This command updates the network restrictions for a Supabase project using the Supabase CLI. It sets the allowed IPv4 and IPv6 CIDR ranges, replacing any existing restrictions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/network-restrictions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> supabase network-restrictions --project-ref {ref} update --db-allow-cidr 183.12.1.1/24 --db-allow-cidr 2001:db8:3333:4444:5555:6666:7777:8888/64 --experimental\nDB Allowed IPv4 CIDRs: &[183.12.1.1/24]\nDB Allowed IPv6 CIDRs: &[2001:db8:3333:4444:5555:6666:7777:8888/64]\nRestrictions applied successfully: true\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Projects Billing Example in Markdown\nDESCRIPTION: A markdown table illustrating a billing example for multiple Supabase projects, each with a custom domain activated for the entire billing cycle. It shows line items and costs for each project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/custom-domains.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Line Item                     | Hours | Costs   |\n| ----------------------------- | ----- | ------- |\n| Pro Plan                      | -     | $25     |\n|                               |       |         |\n| Compute Hours Micro Project 1 | 744   | $10     |\n| Custom Domain Hours Project 1 | 744   | $10     |\n|                               |       |         |\n| Compute Hours Micro Project 2 | 744   | $10     |\n| Custom Domain Hours Project 2 | 744   | $10     |\n|                               |       |         |\n| **Subtotal**                  |       | **$65** |\n| Compute Credits               |       | -$10    |\n| **Total**                     |       | **$55** |\n```\n\n----------------------------------------\n\nTITLE: Filtering Supabase Realtime with Greater Than (gt) Operator\nDESCRIPTION: Examples of using the 'greater than' filter to listen for changes when a column's value exceeds a specified threshold. This uses Postgres's '>' operator and works for both numeric and non-numeric types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'products',\n      filter: 'quantity=gt.10',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        table: 'products',\n        filter: PostgresChangeFilter(\n          type: PostgresChangeFilterType.gt,\n          column: 'quantity',\n          value: 10,\n        ),\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"products\",\n  filter: .gt(\"quantity\", value: 10)\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"products\"\n    filter = \"quantity=gt.10\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"UPDATE\",\n  schema=\"public\",\n  table=\"products\",\n  filter=\"quantity=gt.10\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Using Realtime Channels in Supabase.js v2\nDESCRIPTION: Examples of using the new channel() method for Realtime functionality in Supabase.js v2, including presence and postgres changes subscriptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nsupabase\n  .channel('any_string_you_want')\n  .on('presence', { event: 'track' }, (payload) => {\n    console.log(payload)\n  })\n  .subscribe()\n\nsupabase\n  .channel('any_string_you_want')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'movies',\n    },\n    (payload) => {\n      console.log(payload)\n    }\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Inserting Reservations with Complex Exclusion Constraint\nDESCRIPTION: These SQL statements demonstrate how the complex exclusion constraint prevents overlapping reservations for the same table while allowing non-overlapping reservations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Add a first reservation\ninsert into reservations (title, table_id, duration)\nvalues ('Tyler Dinner', 1, '[2024-07-04 18:00, 2024-07-04 21:00)');\n\n-- Insert fails, because table 1 is taken from 18:00 - 21:00\ninsert into reservations (title, table_id, duration)\nvalues ('Thor Dinner', 1, '[2024-07-04 20:00, 2024-07-04 22:00)');\n\n-- Insert succeeds because table 2 is not taken by anyone\ninsert into reservations (title, table_id, duration)\nvalues ('Thor Dinner', 2, '[2024-07-04 20:00, 2024-07-04 22:00)');\n```\n\n----------------------------------------\n\nTITLE: Querying Tables with Multiple Foreign Keys with GraphQL\nDESCRIPTION: GraphQL query example showing how to query shifts with their related scan records for both start and end times.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst Query = `\n  query {\n    shiftsCollection {\n      edges {\n        node {\n          id\n          user_id\n          attendance_status\n          scan_id_start {\n            id\n            user_id\n            badge_scan_time\n          }\n          scan_id_end {\n            id\n            user_id\n            badge_scan_time\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Upload Component with Supabase Storage\nDESCRIPTION: A React component for uploading and displaying user profile avatars using Supabase Storage. It manages downloading existing images, uploading new ones, and handling image state. The component provides a full UI for the avatar selection experience.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport React, { useEffect, useState } from 'react'\nimport { createClient } from '@/utils/supabase/client'\nimport Image from 'next/image'\n\nexport default function Avatar({ uid, url, size, onUpload }) {\n  const supabase = createClient()\n  const [avatarUrl, setAvatarUrl] = useState(url)\n  const [uploading, setUploading] = useState(false)\n\n  useEffect(() => {\n    async function downloadImage(path) {\n      try {\n        const { data, error } = await supabase.storage.from('avatars').download(path)\n        if (error) {\n          throw error\n        }\n\n        const url = URL.createObjectURL(data)\n        setAvatarUrl(url)\n      } catch (error) {\n        console.log('Error downloading image: ', error)\n      }\n    }\n\n    if (url) downloadImage(url)\n  }, [url, supabase])\n\n  const uploadAvatar = async (event) => {\n    try {\n      setUploading(true)\n\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const filePath = `${uid}-${Math.random()}.${fileExt}`\n\n      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      onUpload(filePath)\n    } catch (error) {\n      alert('Error uploading avatar!')\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div>\n      {avatarUrl ? (\n        <Image\n          width={size}\n          height={size}\n          src={avatarUrl}\n          alt=\"Avatar\"\n          className=\"avatar image\"\n          style={{ height: size, width: size }}\n        />\n      ) : (\n        <div className=\"avatar no-image\" style={{ height: size, width: size }} />\n      )}\n      <div style={{ width: size }}>\n        <label className=\"button primary block\" htmlFor=\"single\">\n          {uploading ? 'Uploading ...' : 'Upload'}\n        </label>\n        <input\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n          }}\n          type=\"file\"\n          id=\"single\"\n          accept=\"image/*\"\n          onChange={uploadAvatar}\n          disabled={uploading}\n        />\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Domain with Supabase CLI\nDESCRIPTION: Use the Supabase CLI to register a custom domain and retrieve verification records. This command initiates the process of setting up a custom domain for a Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase domains create --project-ref abcdefghijklmnopqrst --custom-hostname api.example.com\n```\n\n----------------------------------------\n\nTITLE: Data Manipulation with OrioleDB\nDESCRIPTION: Example of inserting data and querying from an OrioleDB table with sample output formatting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO blog_post (id, title, body, author, views)\nVALUES (1, 'Hello, World!', 'This is my first blog post.', 'John Doe', 1000);\n\nSELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;\n id │     title     │            body             │  author  │         published_at          │ views\n────┼───────────────┼─────────────────────────────┼──────────┼───────────────────────────────┼───────\n  1 │ Hello, World! │ This is my first blog post. │ John Doe │ 2024-11-15 12:04:18.756824+01 │  1000\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page in Flutter with Supabase\nDESCRIPTION: A Flutter widget that handles user login using Supabase authentication. It provides a simple form interface for email and password input with basic error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({Key? key}) : super(key: key);\n\n  static Route<void> route() {\n    return MaterialPageRoute(\n        builder: (context) => const LoginPage());\n  }\n\n  @override\n  _LoginPageState createState() => _LoginPageState();\n}\n\n// ... rest of the LoginPage implementation\n```\n\n----------------------------------------\n\nTITLE: Creating Serializable Data Model for Supabase Table\nDESCRIPTION: Definition of a Kotlin data class that represents the 'instruments' table in Supabase. The @Serializable annotation enables automatic serialization/deserialization of database results to Kotlin objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Instrument(\n    val id: Int,\n    val name: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration Page in Flutter with Supabase Auth\nDESCRIPTION: Creates a registration page with email and password fields. Implements Supabase signUp method with email redirect configuration for MFA enrollment. Includes error handling and loading states.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:mfa_app/main.dart';\nimport 'package:mfa_app/pages/auth/login_page.dart';\nimport 'package:mfa_app/pages/mfa/enroll_page.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass RegisterPage extends StatefulWidget {\n  static const route = '/auth/register';\n\n  const RegisterPage({super.key});\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Register')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 24),\n        children: [\n          TextFormField(\n            controller: _emailController,\n            decoration: const InputDecoration(\n              label: Text('Email'),\n            ),\n          ),\n          const SizedBox(height: 16),\n          TextFormField(\n            controller: _passwordController,\n            decoration: const InputDecoration(\n              label: Text('Password'),\n            ),\n            obscureText: true,\n          ),\n          const SizedBox(height: 16),\n          ElevatedButton(\n            onPressed: () async {\n              try {\n                setState(() {\n                  _isLoading = true;\n                });\n                final email = _emailController.text.trim();\n                final password = _passwordController.text.trim();\n                await supabase.auth.signUp(\n                  email: email,\n                  password: password,\n                  emailRedirectTo:\n                      'mfa-app://callback${MFAEnrollPage.route}',\n                );\n                if (mounted) {\n                  ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Check your inbox.')));\n                }\n              } on AuthException catch (error) {\n                ScaffoldMessenger.of(context)\n                    .showSnackBar(SnackBar(content: Text(error.message)));\n              } catch (error) {\n                ScaffoldMessenger.of(context).showSnackBar(\n                    const SnackBar(content: Text('Unexpected error occurred')));\n              }\n              if (mounted) {\n                setState(() {\n                  _isLoading = false;\n                });\n              }\n            },\n            child: _isLoading\n                ? const SizedBox(\n                    height: 24,\n                    width: 24,\n                    child: Center(\n                        child: CircularProgressIndicator(color: Colors.white)),\n                  )\n                : const Text('Register'),\n          ),\n          const SizedBox(height: 16),\n          TextButton(\n            onPressed: () => context.push(LoginPage.route),\n            child: const Text('I already have an account'),\n          )\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to all Postgres schema changes in Dart\nDESCRIPTION: This Dart snippet configures a Supabase client to listen for any database changes in the 'public' schema, using `onPostgresChanges` for event handling. It logs any payload received. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nsupabase\n    .channel('schema-db-changes')\n    .onPostgresChanges(\n        schema: 'public', // Subscribes to the \"public\" schema in Postgres\n        event: PostgresChangeEvent.all, // Listen to all changes\n\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Broadcast Authorization Policies\nDESCRIPTION: SQL policies for controlling broadcast message access and sending capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"authenticated can receive broadcast\"\non \"realtime\".\"messages\"\nfor select\nto authenticated\nusing (\nexists (\n    select\n      user_id\n    from\n      rooms_users\n    where\n      user_id = (select auth.uid())\n      and topic = (select realtime.topic())\n      and realtime.messages.extension in ('broadcast')\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Sending State in JavaScript\nDESCRIPTION: This snippet demonstrates how to send the current user's state to all subscribers in JavaScript using the track method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst roomOne = supabase.channel('room_01')\n\nconst userStatus = {\n  user: 'user-1',\n  online_at: new Date().toISOString(),\n}\n\nroomOne.subscribe(async (status) => {\n  if (status !== 'SUBSCRIBED') { return }\n\n  const presenceTrackStatus = await roomOne.track(userStatus)\n  console.log(presenceTrackStatus)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Table for Traveling Salesperson Problem\nDESCRIPTION: SQL code to create a table with X, Y coordinates for solving the traveling salesperson problem. The table structure includes id, x, y, and geometry columns, followed by the insertion of 29 coordinate points.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgrouting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table wi29 (\n  id bigint,\n  x float,\n  y float,\n  geom geometry\n);\n\ninsert into wi29 (id, x, y)\nvalues\n  (1,20833.3333,17100.0000),\n  (2,20900.0000,17066.6667),\n  (3,21300.0000,13016.6667),\n  (4,21600.0000,14150.0000),\n  (5,21600.0000,14966.6667),\n  (6,21600.0000,16500.0000),\n  (7,22183.3333,13133.3333),\n  (8,22583.3333,14300.0000),\n  (9,22683.3333,12716.6667),\n  (10,23616.6667,15866.6667),\n  (11,23700.0000,15933.3333),\n  (12,23883.3333,14533.3333),\n  (13,24166.6667,13250.0000),\n  (14,25149.1667,12365.8333),\n  (15,26133.3333,14500.0000),\n  (16,26150.0000,10550.0000),\n  (17,26283.3333,12766.6667),\n  (18,26433.3333,13433.3333),\n  (19,26550.0000,13850.0000),\n  (20,26733.3333,11683.3333),\n  (21,27026.1111,13051.9444),\n  (22,27096.1111,13415.8333),\n  (23,27153.6111,13203.3333),\n  (24,27166.6667,9833.3333),\n  (25,27233.3333,10450.0000),\n  (26,27233.3333,11783.3333),\n  (27,27266.6667,10383.3333),\n  (28,27433.3333,12400.0000),\n  (29,27462.5000,12992.2222);\n```\n\n----------------------------------------\n\nTITLE: Hono Framework Routing Implementation\nDESCRIPTION: Example of implementing routing in Edge Functions using Hono framework with GET and POST endpoints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'jsr:@hono/hono';\n\nconst app = new Hono();\n\napp.post('/hello-world', async (c) => {\n  const { name } = await c.req.json();\n  return new Response(`Hello ${name}!`)\n});\n\napp.get('/hello-world', (c) => {\n  return new Response('Hello World!')\n});\n\nDeno.serve(app.fetch);\n```\n\n----------------------------------------\n\nTITLE: Edge Function for Gzip Compressed Log Drain (TypeScript)\nDESCRIPTION: TypeScript code for an edge function that receives, decompresses, and processes gzip compressed log drain data from Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/log-drains.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gunzipSync } from 'node:zlib'\n\nDeno.serve(async (req) => {\n  try {\n    // Check if the request body is gzip compressed\n    const contentEncoding = req.headers.get('content-encoding')\n    if (contentEncoding !== 'gzip') {\n      return new Response('Request body is not gzip compressed', {\n        status: 400,\n      })\n    }\n\n    // Read the compressed body\n    const compressedBody = await req.arrayBuffer()\n\n    // Decompress the body\n    const decompressedBody = gunzipSync(new Uint8Array(compressedBody))\n\n    // Convert the decompressed body to a string\n    const decompressedString = new TextDecoder().decode(decompressedBody)\n    const data = JSON.parse(decompressedString)\n    // Process the decompressed body as needed\n    console.log(`Received: ${data.length} logs.`)\n\n    return new Response('ok', {\n      headers: { 'Content-Type': 'text/plain' },\n    })\n  } catch (error) {\n    console.error('Error:', error)\n    return new Response('Error processing request', { status: 500 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component into Account Page in React\nDESCRIPTION: This snippet shows how to import and use the Avatar component within an existing Account page component. It passes necessary props including the avatar URL, size, and an update function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Import the new component\nimport Avatar from './Avatar'\n\n// ...\n\nreturn (\n  <form onSubmit={updateProfile} className=\"form-widget\">\n    {/* Add to the body */}\n    <Avatar\n      url={avatar_url}\n      size={150}\n      onUpload={(event, url) => {\n        updateProfile(event, url)\n      }}\n    />\n    {/* ... */}\n  </form>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Flutter App with Supabase Authentication\nDESCRIPTION: Sets up a Flutter application with Supabase authentication and conditional rendering based on user authentication status. It initializes Supabase client, applies custom theming, and provides a utility extension for displaying snackbars throughout the app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/pages/account_page.dart';\nimport 'package:supabase_quickstart/pages/login_page.dart';\n\nFuture<void> main() async {\n  await Supabase.initialize(\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_SUPABASE_ANON_KEY',\n  );\n  runApp(const MyApp());\n}\n\nfinal supabase = Supabase.instance.client;\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Supabase Flutter',\n      theme: ThemeData.dark().copyWith(\n        primaryColor: Colors.green,\n        textButtonTheme: TextButtonThemeData(\n          style: TextButton.styleFrom(\n            foregroundColor: Colors.green,\n          ),\n        ),\n        elevatedButtonTheme: ElevatedButtonThemeData(\n          style: ElevatedButton.styleFrom(\n            foregroundColor: Colors.white,\n            backgroundColor: Colors.green,\n          ),\n        ),\n      ),\n      home: supabase.auth.currentSession == null\n          ? const LoginPage()\n          : const AccountPage(),\n    );\n  }\n}\n\nextension ContextExtension on BuildContext {\n  void showSnackBar(String message, {bool isError = false}) {\n    ScaffoldMessenger.of(this).showSnackBar(\n      SnackBar(\n        content: Text(message),\n        backgroundColor: isError\n            ? Theme.of(this).colorScheme.error\n            : Theme.of(this).snackBarTheme.backgroundColor,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing User Access to Own Uploaded Files in SQL\nDESCRIPTION: This policy allows a user to access files that were previously uploaded by the same user, based on the owner_id.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Individual user Access\"\non storage.objects for select\nto authenticated\nusing ( (select auth.uid()) = owner_id::uuid );\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-up Route Handler in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to create a server-side route handler for user sign-up in a Next.js application with Supabase. It processes form data from a POST request and utilizes Supabase to register a new user, followed by redirecting the user using Next.js' response utilities. Essential dependencies include @supabase/auth-helpers-nextjs and next/headers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nexport async function POST(request) {\n  const requestUrl = new URL(request.url)\n  const formData = await request.formData()\n  const email = formData.get('email')\n  const password = formData.get('password')\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })\n\n  await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      emailRedirectTo: `${requestUrl.origin}/auth/callback`,\n    },\n  })\n\n  return NextResponse.redirect(requestUrl.origin, {\n    status: 301,\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in SQL for GraphQL Schema Reflection\nDESCRIPTION: Demonstrates how to create a SQL table that will be automatically reflected as a GraphQL type. This example creates an Account table with id, email, and timestamp fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"Account\" (\n  \"id\" serial primary key,\n  \"email\" varchar(255) not null,\n  \"createdAt\" timestamp not null,\n  \"updatedAt\" timestamp not null\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table for PGroonga Full-Text Search\nDESCRIPTION: SQL command to create a table with a text column that will be used for full-text search indexing with PGroonga.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table memos (\n  id serial primary key,\n  content text\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Hybrid Search with cURL\nDESCRIPTION: Example cURL command to test the hybrid search endpoint with a sample query.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncurl -i --location --request POST \\\n  'http://127.0.0.1:54321/functions/v1/hybrid-search' \\\n  --header 'Authorization: Bearer <anonymous key>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"Italian recipes with tomato sauce\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing ChatGPT Plugin API with Deno Oak Router in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of a ChatGPT plugin API using the Deno Oak router. It includes route definitions, JSDoc annotations for OpenAPI, and serves the OpenAPI JSON file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts'\nimport openapi from './openapi.json' with { type: 'json' }\n\nconsole.log('Hello from `chatgpt-plugin` Function!')\n\nconst _TODOS: { [key: string]: Array<string> } = {\n  user: ['Build your own ChatGPT Plugin!'],\n}\n\n/**\n * @openapi\n * components:\n *   schemas:\n *     getTodosResponse:\n *       type: object\n *       properties:\n *         todos:\n *           type: array\n *           items:\n *             type: string\n *           description: The list of todos.\n */\n\nconst router = new Router()\nrouter\n  .get('/chatgpt-plugin', (ctx) => {\n    ctx.response.body = 'Building ChatGPT plugins with Deno!'\n  })\n  /**\n   * @openapi\n   * /chatgpt-plugin/todos/{username}:\n   *   get:\n   *     operationId: getTodos\n   *     summary: Get the list of todos\n   *     parameters:\n   *     - in: path\n   *       name: username\n   *       schema:\n   *         type: string\n   *       required: true\n   *       description: The name of the user.\n   *     responses:\n   *       200:\n   *         description: OK\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/getTodosResponse'\n   */\n  .get('/chatgpt-plugin/todos/:username', (ctx) => {\n    const username = ctx.params.username.toLowerCase()\n    ctx.response.body = _TODOS[username] ?? []\n  })\n  .get('/chatgpt-plugin/openapi.json', (ctx) => {\n    ctx.response.body = JSON.stringify(openapi)\n    ctx.response.headers.set('Content-Type', 'application/json')\n  })\n\nconst app = new Application()\napp.use(router.routes())\napp.use(router.allowedMethods())\n\nawait app.listen({ port: 8000 })\n```\n\n----------------------------------------\n\nTITLE: Database Schema Setup\nDESCRIPTION: SQL commands for creating PostGIS tables and defining schema for drivers and rides\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension postgis with schema extensions;\n\ncreate table if not exists public.drivers (\n\tid uuid primary key default gen_random_uuid(),\n\tmodel text not null,\n  number text not null,\n  is_available boolean not null default false,\n\tlocation geography(POINT) not null,\n  latitude double precision generated always as (st_y(location::geometry)) stored,\n  longitude double precision generated always as (st_x(location::geometry)) stored\n);\n\ncreate type ride_status as enum ('picking_up', 'riding', 'completed');\n\ncreate table if not exists public.rides (\n  id uuid primary key default gen_random_uuid(),\n  driver_id uuid not null references public.drivers(id),\n  passenger_id uuid not null references auth.users(id),\n  origin geography(POINT) not null,\n  destination geography(POINT) not null,\n  fare integer not null,\n  status ride_status not null default 'picking_up'\n);\n```\n\n----------------------------------------\n\nTITLE: Sign Out User with Supabase Auth\nDESCRIPTION: This Flutter snippet demonstrates how to sign out a user using the Supabase client library. It calls the signOut method, which removes the user session and any stored objects. The function is asynchronous and uses `async` and `await` to handle the operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Upload Component with Image Picker\nDESCRIPTION: Component for handling profile image uploads using expo-image-picker and Supabase Storage. Includes image preview, upload functionality, and styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\nimport { supabase } from '../lib/supabase'\nimport { StyleSheet, View, Alert, Image, Button } from 'react-native'\nimport * as ImagePicker from 'expo-image-picker'\n\ninterface Props {\n  size: number\n  url: string | null\n  onUpload: (filePath: string) => void\n}\n\nexport default function Avatar({ url, size = 150, onUpload }: Props) {\n  const [uploading, setUploading] = useState(false)\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(null)\n  const avatarSize = { height: size, width: size }\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path: string) {\n    try {\n      const { data, error } = await supabase.storage.from('avatars').download(path)\n\n      if (error) {\n        throw error\n      }\n\n      const fr = new FileReader()\n      fr.readAsDataURL(data)\n      fr.onload = () => {\n        setAvatarUrl(fr.result as string)\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log('Error downloading image: ', error.message)\n      }\n    }\n  }\n\n  async function uploadAvatar() {\n    try {\n      setUploading(true)\n\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsMultipleSelection: false,\n        allowsEditing: true,\n        quality: 1,\n        exif: false,\n      })\n\n      if (result.canceled || !result.assets || result.assets.length === 0) {\n        console.log('User cancelled image picker.')\n        return\n      }\n\n      const image = result.assets[0]\n      console.log('Got image', image)\n\n      if (!image.uri) {\n        throw new Error('No image uri!')\n      }\n\n      const arraybuffer = await fetch(image.uri).then((res) => res.arrayBuffer())\n\n      const fileExt = image.uri?.split('.').pop()?.toLowerCase() ?? 'jpeg'\n      const path = `${Date.now()}.${fileExt}`\n      const { data, error: uploadError } = await supabase.storage\n        .from('avatars')\n        .upload(path, arraybuffer, {\n          contentType: image.mimeType ?? 'image/jpeg',\n        })\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      onUpload(data.path)\n    } catch (error) {\n      if (error instanceof Error) {\n        Alert.alert(error.message)\n      } else {\n        throw error\n      }\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <View>\n      {avatarUrl ? (\n        <Image\n          source={{ uri: avatarUrl }}\n          accessibilityLabel=\"Avatar\"\n          style={[avatarSize, styles.avatar, styles.image]}\n        />\n      ) : (\n        <View style={[avatarSize, styles.avatar, styles.noImage]} />\n      )}\n      <View>\n        <Button\n          title={uploading ? 'Uploading ...' : 'Upload'}\n          onPress={uploadAvatar}\n          disabled={uploading}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  avatar: {\n    borderRadius: 5,\n    overflow: 'hidden',\n    maxWidth: '100%',\n  },\n  image: {\n    objectFit: 'cover',\n    paddingTop: 0,\n  },\n  noImage: {\n    backgroundColor: '#333',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: 'rgb(200, 200, 200)',\n    borderRadius: 5,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: index_advisor Function Signature Definition\nDESCRIPTION: The index_advisor function accepts a SQL query text and returns recommendations for indexes. The return table contains cost metrics, recommended index statements, and any errors encountered.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nindex_advisor(query text)\nreturns\n    table  (\n        startup_cost_before jsonb,\n        startup_cost_after jsonb,\n        total_cost_before jsonb,\n        total_cost_after jsonb,\n        index_statements text[],\n        errors text[]\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection in Python\nDESCRIPTION: Creates a new collection called 'docs' with 3-dimensional vectors using the Vecs client\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\n# create vector store client\nvx = vecs.create_client(\"postgresql://postgres:postgres@localhost:54322/postgres\")\n\n# create a collection of vectors with 3 dimensions\ndocs = vx.get_or_create_collection(name=\"docs\", dimension=3)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Postgres Trigger in SQL\nDESCRIPTION: This snippet demonstrates the basic syntax for creating a trigger in PostgreSQL. It shows how to define a trigger that executes after an insert operation on a specified table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger \"trigger_name\"\nafter insert on \"table_name\"\nfor each row\nexecute function trigger_function();\n```\n\n----------------------------------------\n\nTITLE: Testing SMTP Email Function Locally\nDESCRIPTION: Commands to copy the example environment file and serve the function locally for testing purposes. This allows you to validate the email functionality before deployment.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-smtp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp ./supabase/.env.local.example ./supabase/.env.local\nsupabase functions serve --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Installing and Using the Index Advisor Extension to Optimize PostgreSQL Queries\nDESCRIPTION: Demonstrates how to install and use the olirice-index_advisor extension to analyze a SQL query and recommend indexes that would improve query performance. The example includes creating a test table and then getting index recommendations for a simple query.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect dbdev.install('olirice-index_advisor');\ncreate extension if not exists hypopg;\ncreate extension \"olirice-index_advisor\";\n\n-- Create a dummy table\ncreate table account(\n\tid int primary key,\n\tname text\n);\n\n-- Search for indexes to optimize \"select id from account where name = 'adsf'\"\nselect\n\t*\nfrom\n\tindex_advisor($$select id from account where name = 'Foo'$$)\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Policy for New Users in PostgreSQL\nDESCRIPTION: This SQL snippet creates a restrictive policy to enforce different AAL (Authenticator Assurance Levels) based on user creation date. Users created after 12th December 2022 require 'aal2' for database access, while earlier users can use either 'aal1' or 'aal2'. The policy ensures this is the most restrictive rule applied, overriding other policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Policy name.\"\n  on table_name\n  as restrictive -- very important!\n  to authenticated\n  using\n    (array[(select auth.jwt()->>'aal')] <@ (\n       select\n         case\n           when created_at >= '2022-12-12T00:00:00Z' then array['aal2']\n           else array['aal1', 'aal2']\n         end as aal\n       from auth.users\n       where (select auth.uid()) = id));\n```\n\n----------------------------------------\n\nTITLE: Correct Supabase Auth Cookie Handling Implementation\nDESCRIPTION: The correct pattern for cookie handling in Supabase Auth implementation using the getAll and setAll methods, which must be used instead of individual cookie operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ ALWAYS GENERATE THIS EXACT PATTERN\n{\n  cookies: {\n    getAll() {\n      return cookieStore.getAll()\n    },\n    setAll(cookiesToSet) {\n      const response = NextResponse.next({\n        request,\n      })\n      \n      cookiesToSet.forEach(({ name, value, options }) => {\n        response.cookies.set(name, value, options)\n      })\n      \n      return response\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading PostgREST Configuration\nDESCRIPTION: SQL command to notify PostgREST to reload its configuration after making changes to the pre-request function setting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nnotify pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Create a login page\nDESCRIPTION: This code snippet defines a SvelteKit server action for handling user signup. It retrieves the email from the form data and calls `supabase.auth.signUp` to register the user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit'\n\nimport type { Actions } from './$types'\n\nexport const actions: Actions = {\n  signup: async ({ request, locals: { supabase } }) => {\n    const formData = await request.formData()\n    const email = formData.get('email') as string\n```\n\n----------------------------------------\n\nTITLE: Implementing Resumable Uploads with @uppy/tus in React\nDESCRIPTION: This snippet shows how to use @uppy/tus to implement resumable uploads in a React application. It includes a custom hook for configuring Uppy with Supabase authentication and TUS resumable uploads.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport Uppy from \"@uppy/core\";\nimport Tus from \"@uppy/tus\";\nimport Dashboard from \"@uppy/dashboard\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\n\nfunction App() {\n    // Initialize Uppy instance with the 'sample' bucket specified for uploads\n    const uppy = useUppyWithSupabase({ bucketName: \"sample\" });\n\n    useEffect(() => {\n        // Set up Uppy Dashboard to display as an inline component within a specified target\n        uppy.use(Dashboard, {\n            inline: true, // Ensures the dashboard is rendered inline\n            target: \"#drag-drop-area\", // HTML element where the dashboard renders\n            showProgressDetails: true, // Show progress details for file uploads\n        });\n    }, []);\n\n    return (\n        <div id=\"drag-drop-area\">\n        </div>\n        {/* Target element for the Uppy Dashboard */}\n    );\n}\n\nexport default App;\n\n/**\n * Custom hook for configuring Uppy with Supabase authentication and TUS resumable uploads\n * @param {Object} options - Configuration options for the Uppy instance.\n * @param {string} options.bucketName - The bucket name in Supabase where files are stored.\n * @returns {Object} uppy - Uppy instance with configured upload settings.\n */\nexport const useUppyWithSupabase = ({ bucketName }: { bucketName: string }) => {\n    // Initialize Uppy instance only once\n    const [uppy] = useState(() => new Uppy());\n    // Initialize Supabase client with project URL and anon key\n    const supabase = createClient(projectURL, anonKey);\n\n    useEffect(() => {\n        const initializeUppy = async () => {\n        // Retrieve the current user's session for authentication\n        const {\n            data: { session },\n        } = await supabase.auth.getSession();\n\n        uppy.use(Tus, {\n                endpoint: `${projectURL}/storage/v1/upload/resumable`, // Supabase TUS endpoint\n                retryDelays: [0, 3000, 5000, 10000, 20000], // Retry delays for resumable uploads\n                headers: {\n                    authorization: `Bearer ${session?.access_token}`, // User session access token\n                    apikey: anonKey, // API key for Supabase\n                },\n                uploadDataDuringCreation: true, // Send metadata with file chunks\n                removeFingerprintOnSuccess: true, // Remove fingerprint after successful upload\n                chunkSize: 6 * 1024 * 1024, // Chunk size for TUS uploads (6MB)\n                allowedMetaFields: [\n                    \"bucketName\",\n                    \"objectName\",\n                    \"contentType\",\n                    \"cacheControl\",\n                ], // Metadata fields allowed for the upload\n                onError: (error) => console.error(\"Upload error:\", error), // Error handling for uploads\n            }).on(\"file-added\", (file) => {\n                // Attach metadata to each file, including bucket name and content type\n                file.meta = {\n                    ...file.meta,\n                    bucketName, // Bucket specified by the user of the hook\n                    objectName: file.name, // Use file name as object name\n                    contentType: file.type, // Set content type based on file MIME type\n                };\n            });\n        };\n\n        // Initialize Uppy with Supabase settings\n        initializeUppy();\n    }, [uppy, bucketName]);\n\n    // Return the configured Uppy instance\n    return uppy;\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating Supabase Management API Request using cURL\nDESCRIPTION: Example of making an authenticated request to the Supabase Management API using cURL. The request demonstrates how to include the personal access token in the Authorization header to fetch projects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/api/api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://api.supabase.com/v1/projects \\\n-H \"Authorization: Bearer sbp_bdd0••••••••••••••••••••••••••••••••4f23\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase Datastore in ChatGPT Retrieval Plugin\nDESCRIPTION: Bash commands to export the necessary environment variables for using Supabase as the datastore in the ChatGPT Retrieval Plugin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=<open_ai_api_key>\nexport DATASTORE=supabase\nexport SUPABASE_URL=<supabase_url>\nexport SUPABASE_SERVICE_ROLE_KEY=<supabase_key>\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Provider Refresh Token (JavaScript)\nDESCRIPTION: In this JavaScript snippet, the `signInWithOAuth` method is called with 'azure' as the provider and requests the offline access scope to obtain the provider refresh token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signInWithAzure() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'azure',\n    options: {\n      scopes: 'offline_access',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Login and Signup Actions Server-Side\nDESCRIPTION: This snippet contains server-side logic for login and signup actions using Supabase in a Next.js environment. It depends on 'next/cache', 'next/navigation', and '@/utils/supabase/server'. It accepts form data and attempts user authentication or registration with Supabase, redirecting on success or failure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\n\nimport { createClient } from '@/utils/supabase/server'\n\nexport async function login(formData: FormData) {\n  const supabase = await createClient()\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n  }\n\n  const { error } = await supabase.auth.signInWithPassword(data)\n\n  if (error) {\n    redirect('/error')\n  }\n\n  revalidatePath('/', 'layout')\n  redirect('/')\n}\n\nexport async function signup(formData: FormData) {\n  const supabase = await createClient()\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n  }\n\n  const { error } = await supabase.auth.signUp(data)\n\n  if (error) {\n    redirect('/error')\n  }\n\n  revalidatePath('/', 'layout')\n  redirect('/')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductRepositoryImpl with Supabase in Kotlin\nDESCRIPTION: This class implements the ProductRepository interface using Supabase's Postgrest for database operations and Storage for image files. It includes methods for product CRUD operations and image handling with proper URL construction.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProductRepositoryImpl @Inject constructor(\n    private val postgrest: Postgrest,\n    private val storage: Storage,\n) : ProductRepository {\n    override suspend fun createProduct(product: Product): Boolean {\n        return try {\n            withContext(Dispatchers.IO) {\n                val productDto = ProductDto(\n                    name = product.name,\n                    price = product.price,\n                )\n                postgrest.from(\"products\").insert(productDto)\n                true\n            }\n            true\n        } catch (e: java.lang.Exception) {\n            throw e\n        }\n    }\n\n    override suspend fun getProducts(): List<ProductDto>? {\n        return withContext(Dispatchers.IO) {\n            val result = postgrest.from(\"products\")\n                .select().decodeList<ProductDto>()\n            result\n        }\n    }\n\n\n    override suspend fun getProduct(id: String): ProductDto {\n        return withContext(Dispatchers.IO) {\n            postgrest.from(\"products\").select {\n                filter {\n                    eq(\"id\", id)\n                }\n            }.decodeSingle<ProductDto>()\n        }\n    }\n\n    override suspend fun deleteProduct(id: String) {\n        return withContext(Dispatchers.IO) {\n            postgrest.from(\"products\").delete {\n                filter {\n                    eq(\"id\", id)\n                }\n            }\n        }\n    }\n\n    override suspend fun updateProduct(\n        id: String,\n        name: String,\n        price: Double,\n        imageName: String,\n        imageFile: ByteArray\n    ) {\n        withContext(Dispatchers.IO) {\n            if (imageFile.isNotEmpty()) {\n                val imageUrl =\n                    storage.from(\"Product%20Image\").upload(\n                        path = \"$imageName.png\",\n                        data = imageFile,\n                        upsert = true\n                    )\n                postgrest.from(\"products\").update({\n                    set(\"name\", name)\n                    set(\"price\", price)\n                    set(\"image\", buildImageUrl(imageFileName = imageUrl))\n                }) {\n                    filter {\n                        eq(\"id\", id)\n                    }\n                }\n            } else {\n                postgrest.from(\"products\").update({\n                    set(\"name\", name)\n                    set(\"price\", price)\n                }) {\n                    filter {\n                        eq(\"id\", id)\n                    }\n                }\n            }\n        }\n    }\n\n    // Because I named the bucket as \"Product Image\" so when it turns to an url, it is \"%20\"\n    // For better approach, you should create your bucket name without space symbol\n    private fun buildImageUrl(imageFileName: String) =\n        \"${BuildConfig.SUPABASE_URL}/storage/v1/object/public/${imageFileName}\".replace(\" \", \"%20\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Edge Function in TypeScript\nDESCRIPTION: Defines an Edge Function that accepts a name in the request and responds with a greeting. It uses Deno.serve for handling HTTP requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nDeno.serve(async (req) => {\n  const { name } = await req.json()\n  const data = {\n    message: `Hello ${name}!`,\n  }\n\n  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })\n})\n```\n\n----------------------------------------\n\nTITLE: Link OAuth Identity to Anonymous User in Flutter\nDESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Flutter. This converts an anonymous user to a permanent user by associating it with the OAuth identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.linkIdentity(OAuthProvider.google);\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Supabase Project\nDESCRIPTION: Command to generate TypeScript type definitions from storage and public schemas in a Supabase project. The generated types are saved to the huggingface-image-captioning function directory and will be used to ensure type safety when working with database records.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/huggingface-image-captioning/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase gen types typescript --project-id=your-project-ref --schema=storage,public > supabase/functions/huggingface-image-captioning/types.ts\n```\n\n----------------------------------------\n\nTITLE: Creating React Application\nDESCRIPTION: Command to create a new React application using create-react-app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Sign-Out in JavaScript with Supabase\nDESCRIPTION: This code snippet demonstrates how to implement user sign-out from a Supabase application using the JavaScript client. The `signOut` method removes user session data from the browser.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Singleton Supabase Client in Next.js Client Component\nDESCRIPTION: Demonstrates how to create a Supabase client instance in a Next.js client component using createClientComponentClient. The function automatically handles singleton instance management across components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\n\nexport default function() {\n  const supabase = createClientComponentClient();\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Performing online VACUUM FULL with pg_repack CLI\nDESCRIPTION: This example demonstrates how to use pg_repack to perform an online VACUUM FULL operation on specific tables in a Postgres database. It includes connection details and table specifications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_repack.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npg_repack -k -h db.<PROJECT_REF>.supabase.co -p 5432 -U postgres -d postgres --no-order --table public.foo --table public.bar\n```\n\n----------------------------------------\n\nTITLE: Reading Messages\nDESCRIPTION: Reads messages from a queue with visibility timeout to prevent duplicate processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.read('my_queue', 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Generating Migration for Schema Update\nDESCRIPTION: Creates a new migration file for the added 'age' column using Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db diff -f add_age\n```\n\n----------------------------------------\n\nTITLE: Full Text Search on Description Using JavaScript\nDESCRIPTION: JavaScript implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('books').select().textSearch('description', `'big'`)\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Nonce for Google Sign-In in JavaScript\nDESCRIPTION: This code generates a secure nonce and its hashed version for use with Google Sign-In and Supabase authentication. It uses the Web Crypto API for secure random number generation and hashing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Adapted from https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest#converting_a_digest_to_a_hex_string\n\nconst nonce = btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))))\nconst encoder = new TextEncoder()\nconst encodedNonce = encoder.encode(nonce)\ncrypto.subtle.digest('SHA-256', encodedNonce).then((hashBuffer) => {\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  const hashedNonce = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('')\n})\n\n// Use 'hashedNonce' when making the authentication request to Google\n// Use 'nonce' when invoking the supabase.auth.signInWithIdToken() method\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Swift\nDESCRIPTION: Creates a new Supabase client instance using project URL and anonymous API key for authentication. This client instance will be used for all database interactions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ios-swiftui.mdx#2025-04-21_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Supabase\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"YOUR_SUPABASE_URL\")!,\n  supabaseKey: \"YOUR_SUPABASE_ANON_KEY\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Supabase Edge Functions Deployment\nDESCRIPTION: A GitHub Actions workflow file that automatically deploys Supabase Edge Functions when changes are pushed to the main branch. It uses the Supabase CLI with an access token and project ID as environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/github-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Function\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    env:\n      SUPABASE_ACCESS_TOKEN: YOUR_SUPABASE_ACCESS_TOKEN\n      PROJECT_ID: YOUR_SUPABASE_PROJECT_ID\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n\n      - run: supabase functions deploy --project-ref $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Creating ORDER BY Column Index in PostgreSQL\nDESCRIPTION: Creating index for column used in ORDER BY clause to optimize sorting operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_orders_date_of_purchase on orders (date_of_purchase);\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Supabase Branch\nDESCRIPTION: CLI command to create a persistent branch in Supabase with interactive prompt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --experimental branches create --persistent\n# Do you want to create a branch named develop? [Y/n]\n```\n\n----------------------------------------\n\nTITLE: Overwriting Files in Supabase Storage with Dart\nDESCRIPTION: This snippet shows how to overwrite an existing file in Supabase Storage using Dart. It uses the 'upsert' option in FileOptions to enable overwriting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.storage.from('bucket_name').upload(\n      'file_path',\n      file,\n      fileOptions: const FileOptions(upsert: true),\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Foreign Data Wrapper for External Database Integration\nDESCRIPTION: Creates external schema and configures PostgreSQL foreign data wrapper to connect with an external database storing user and document data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate schema external;\ncreate extension postgres_fdw with schema extensions;\n\ncreate server foreign_server\n  foreign data wrapper postgres_fdw\n  options (host '<db-host>', port '<db-port>', dbname '<db-name>');\n\ncreate user mapping for authenticated\n  server foreign_server\n  options (user 'postgres', password '<user-password>');\n\nimport foreign schema public limit to (users, documents)\n  from server foreign_server into external;\n```\n\n----------------------------------------\n\nTITLE: Setting Message Visibility Timeout in PGMQ with SQL\nDESCRIPTION: The set_vt function sets the visibility timeout of a message to a specified time duration in the future. It takes queue name, message ID, and visibility timeout offset as parameters and returns the updated message record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.set_vt('my_queue', 11, 30);\n msg_id | read_ct |          enqueued_at          |              vt               |       message\n--------+---------+-------------------------------+-------------------------------+----------------------\n     1 |       0 | 2023-10-28 19:42:21.778741-05 | 2023-10-28 19:59:34.286462-05 | {\"hello\": \"world_0\"}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User in Supabase using JavaScript\nDESCRIPTION: This code snippet shows how to sign out a user from Supabase. It's a simple method call that terminates the user's current session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-sso.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {error} = await supabase.auth.signOut()\n```\n\n----------------------------------------\n\nTITLE: Deleting Queue Messages\nDESCRIPTION: Function to permanently delete a specific message from a queue. Takes queue name and message ID as parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\npgmq_public.delete(queue_name text, message_id bigint)\n```\n\n----------------------------------------\n\nTITLE: Executing pgloader Migration Command\nDESCRIPTION: Command line instruction to run the pgloader migration using the configuration file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/mssql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npgloader config.load\n```\n\n----------------------------------------\n\nTITLE: Deploying the Edge Function with Environment Variables\nDESCRIPTION: Commands to deploy the Upstash Redis counter function to Supabase and set the required environment variables using secrets from the .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy upstash-redis-counter --no-verify-jwt\nsupabase secrets set --env-file supabase/functions/upstash-redis-counter/.env\n```\n\n----------------------------------------\n\nTITLE: Calculating CLIP Embeddings with Roboflow Inference API\nDESCRIPTION: Python code for calculating CLIP embeddings for a directory of images using the Roboflow Inference HTTP API. It processes each image in a directory, converts it to base64, and sends it to the CLIP embedding endpoint.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport cv2\nimport supervision as sv\nimport requests\nimport base64\nimport os\n\nIMAGE_DIR = \"images/train/images/\"\nAPI_KEY = \"\"\nSERVER_URL = \"http://localhost:9001\"\n\nresults = []\n\nfor i, image in enumerate(os.listdir(IMAGE_DIR)):\n    print(f\"Processing image {image}\")\n    infer_clip_payload = {\n        \"image\": {\n            \"type\": \"base64\",\n            \"value\": base64.b64encode(open(IMAGE_DIR + image, \"rb\").read()).decode(\"utf-8\"),\n        },\n    }\n\n    res = requests.post(\n        f\"{SERVER_URL}/clip/embed_image?api_key={API_KEY}\",\n        json=infer_clip_payload,\n    )\n\n    embeddings = res.json()['embeddings']\n\n    results.append({\n        \"filename\": image,\n        \"embeddings\": embeddings\n    })\n```\n\n----------------------------------------\n\nTITLE: Filtering for Specific Changes in Python with Supabase Realtime\nDESCRIPTION: Establishes a Python channel to listen for INSERT events on the 'todos' table with a specific filter. The filter parameter 'filter=\"id=eq.1\"' ensures only changes where id equals 1 are monitored.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"INSERT\",\n  schema=\"public\",\n  table=\"todos\",\n  filter=\"id=eq.1\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Adaptive Retrieval Vector Search Configuration\nDESCRIPTION: Optimal configuration parameters for implementing Adaptive Retrieval with text-embedding-3-large model. Uses a two-pass approach with 512d vectors in first pass and 3072d vectors in second pass for 99% accuracy.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- First Pass Configuration\nef_construction=400\nm=32\nef_search=200\nfirst_pass_limit=final_top_k * 8\nfirst_pass_dimensions=512\n\n-- Second Pass Configuration\nsecond_pass_dimensions=3072\n```\n\n----------------------------------------\n\nTITLE: Querying Star Wars API using Postgres HTTP Extension\nDESCRIPTION: This SQL query demonstrates how to use the pgsql-http extension to make a GET request to the Star Wars API and retrieve a list of people.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect content::json->'results'\nfrom http_get('https://swapi.dev/api/people');\n```\n\n----------------------------------------\n\nTITLE: Querying Tables with Multiple Foreign Keys in JavaScript\nDESCRIPTION: JavaScript example showing how to query shifts with explicit ON clause definitions for multiple foreign keys to the same table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('shifts').select(\n  `\n    *,\n    start_scan:scans!scan_id_start (\n      id,\n      user_id,\n      badge_scan_time\n    ),\n   end_scan:scans!scan_id_end (\n     id,\n     user_id,\n     badge_scan_time\n    )\n  `\n)\n```\n\n----------------------------------------\n\nTITLE: Express.js Routing Implementation\nDESCRIPTION: Example of implementing routing in Edge Functions using Express.js framework. Handles GET and POST requests with JSON body parsing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'npm:express@4.18.2'\n\nconst app = express()\napp.use(express.json())\n// If you want a payload larger than 100kb, then you can tweak it here:\n// app.use( express.json({ limit : \"300kb\" }));\n\nconst port = 3000\n\napp.get('/hello-world', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.post('/hello-world', (req, res) => {\n  const { name } = req.body\n  res.send(`Hello ${name}!`)\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records in Multiple Languages\nDESCRIPTION: Demonstrates inserting multiple movie records using different programming languages and the Supabase client libraries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into movies\n  (name, description)\nvalues\n  (\n    'The Empire Strikes Back',\n    'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n  ),\n  (\n    'Return of the Jedi',\n    'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n  );\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('movies').insert([\n  {\n    name: 'The Empire Strikes Back',\n    description:\n      'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.',\n  },\n  {\n    name: 'Return of the Jedi',\n    description:\n      'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.',\n  },\n])\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase\n  .from('movies')\n  .insert([{\n    name: 'The Empire Strikes Back',\n    description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n  }, {\n    name: 'Return of the Jedi',\n    description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n  }]);\n```\n\n----------------------------------------\n\nTITLE: Setting up and running RLS tests with Supabase in SQL\nDESCRIPTION: This SQL script sets up and runs various RLS tests using the Supabase testing framework. Dependencies include the presence of setup scripts such as '000-setup-tests-hooks.sql'. Key operations involve creating test users and profiles, testing role-based permissions for different actions (like updating organizations or viewing posts), and ensuring plan limitations (like post creation limits) are respected. Inputs involve role authentication and test data setup, while outputs include test validations and potential RLS policy violations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Assuming we already have: 000-setup-tests-hooks.sql file we can use tests helpers\nbegin;\n-- Declare total number of tests\nselect plan(10);\n\n-- Create test users\nselect tests.create_supabase_user('org_owner', 'owner@test.com');\nselect tests.create_supabase_user('org_admin', 'admin@test.com');\nselect tests.create_supabase_user('org_editor', 'editor@test.com');\nselect tests.create_supabase_user('premium_user', 'premium@test.com');\nselect tests.create_supabase_user('free_user', 'free@test.com');\nselect tests.create_supabase_user('scheduler', 'scheduler@test.com');\nselect tests.create_supabase_user('free_author', 'free_author@test.com');\n\n-- Create profiles for test users\ninsert into profiles (id, username, full_name)\nvalues\n  (tests.get_supabase_uid('org_owner'), 'org_owner', 'Organization Owner'),\n  (tests.get_supabase_uid('org_admin'), 'org_admin', 'Organization Admin'),\n  (tests.get_supabase_uid('org_editor'), 'org_editor', 'Organization Editor'),\n  (tests.get_supabase_uid('premium_user'), 'premium_user', 'Premium User'),\n  (tests.get_supabase_uid('free_user'), 'free_user', 'Free User'),\n  (tests.get_supabase_uid('scheduler'), 'scheduler', 'Scheduler User'),\n  (tests.get_supabase_uid('free_author'), 'free_author', 'Free Author');\n\n-- First authenticate as service role to bypass RLS for initial setup\nselect tests.authenticate_as_service_role();\n\n-- Create test organizations and setup data\nwith new_org as (\n  insert into organizations (name, slug, plan_type, max_posts)\n  values\n    ('Test Org', 'test-org', 'pro', 100),\n    ('Premium Org', 'premium-org', 'enterprise', 1000),\n    ('Schedule Org', 'schedule-org', 'pro', 100),\n    ('Free Org', 'free-org', 'free', 2)\n  returning id, slug\n),\n-- Setup members and posts\nmember_setup as (\n  insert into org_members (org_id, user_id, role)\n  select\n    org.id,\n    user_id,\n    role\n  from new_org org cross join (\n    values\n      (tests.get_supabase_uid('org_owner'), 'owner'),\n      (tests.get_supabase_uid('org_admin'), 'admin'),\n      (tests.get_supabase_uid('org_editor'), 'editor'),\n      (tests.get_supabase_uid('premium_user'), 'viewer'),\n      (tests.get_supabase_uid('scheduler'), 'editor'),\n      (tests.get_supabase_uid('free_author'), 'editor')\n  ) as members(user_id, role)\n  where org.slug = 'test-org'\n     or (org.slug = 'premium-org' and role = 'viewer')\n     or (org.slug = 'schedule-org' and role = 'editor')\n     or (org.slug = 'free-org' and role = 'editor')\n)\n-- Setup initial posts\ninsert into posts (title, content, org_id, author_id, status, is_premium, scheduled_for)\nselect\n  title,\n  content,\n  org.id,\n  author_id,\n  status,\n  is_premium,\n  scheduled_for\nfrom new_org org cross join (\n  values\n    ('Premium Post', 'Premium content', tests.get_supabase_uid('premium_user'), 'published', true, null),\n    ('Free Post', 'Free content', tests.get_supabase_uid('premium_user'), 'published', false, null),\n    ('Future Post', 'Future content', tests.get_supabase_uid('scheduler'), 'published', false, '2024-01-02 12:00:00+00'::timestamptz)\n) as posts(title, content, author_id, status, is_premium, scheduled_for)\nwhere org.slug in ('premium-org', 'schedule-org');\n\n-- Test owner privileges\nselect tests.authenticate_as('org_owner');\nselect lives_ok(\n  $$\n    update organizations\n    set name = 'Updated Org'\n    where id = (select id from organizations limit 1)\n  $$,\n  'Owner can update organization'\n);\n\n-- Test admin privileges\nselect tests.authenticate_as('org_admin');\nselect results_eq(\n    $$select count(*) from org_members$$,\n    ARRAY[6::bigint],\n    'Admin can view all members'\n);\n\n-- Test editor restrictions\nselect tests.authenticate_as('org_editor');\nselect throws_ok(\n  $$\n    insert into org_members (org_id, user_id, role)\n    values (\n      (select id from organizations limit 1),\n      (select tests.get_supabase_uid('org_editor')),\n      'viewer'\n    )\n  $$,\n  '42501',\n  'new row violates row-level security policy for table \"org_members\"',\n  'Editor cannot manage members'\n);\n\n-- Premium Content Access Tests\nselect tests.authenticate_as('premium_user');\nselect results_eq(\n    $$select count(*) from posts where org_id = (select id from organizations where slug = 'premium-org')$$,\n    ARRAY[3::bigint],\n    'Premium user can see all posts'\n);\n\nselect tests.clear_authentication();\nselect results_eq(\n    $$select count(*) from posts where org_id = (select id from organizations where slug = 'premium-org')$$,\n    ARRAY[2::bigint],\n    'Anonymous users can only see free posts'\n);\n\n-- Time-Based Publishing Tests\nselect tests.authenticate_as('scheduler');\nselect tests.freeze_time('2024-01-01 12:00:00+00'::timestamptz);\n\nselect results_eq(\n    $$select count(*) from posts where scheduled_for > now() and org_id = (select id from organizations where slug = 'schedule-org')$$,\n    ARRAY[1::bigint],\n    'Can see scheduled posts'\n);\n\nselect tests.freeze_time('2024-01-02 13:00:00+00'::timestamptz);\n\nselect results_eq(\n    $$select count(*) from posts where scheduled_for < now() and org_id = (select id from organizations where slug = 'schedule-org')$$,\n    ARRAY[1::bigint],\n    'Can see posts after schedule time'\n);\n\nselect tests.unfreeze_time();\n\n-- Plan Limit Tests\nselect tests.authenticate_as('free_author');\n\nselect lives_ok(\n  $$\n    insert into posts (title, content, org_id, author_id, status)\n    select 'Post 1', 'Content 1', id, auth.uid(), 'draft'\n    from organizations where slug = 'free-org' limit 1\n  $$,\n  'First post creates successfully'\n);\n\nselect lives_ok(\n  $$\n    insert into posts (title, content, org_id, author_id, status)\n    select 'Post 2', 'Content 2', id, auth.uid., 'draft'\n    from organizations where slug = 'free-org' limit 1\n  $$,\n  'Second post creates successfully'\n);\n\nselect throws_ok(\n  $$\n    insert into posts (title, content, org_id, author_id, status)\n    select 'Post 3', 'Content 3', id, auth.uid., 'draft'\n    from organizations where slug = 'free-org' limit 1\n  $$,\n  '42501',\n  'new row violates row-level security policy for table \"posts\"',\n  'Cannot exceed free plan post limit'\n);\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: RRF Score with Smoothing Constant Formula\nDESCRIPTION: Mathematical formula demonstrating how to calculate the RRF score with a smoothing constant k to prevent extremely high scores for top-ranked items.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\dfrac{1}{k+rank}\n```\n\n----------------------------------------\n\nTITLE: Creating Invited Users Table in Postgres\nDESCRIPTION: SQL command to create a table for storing invited users in a Supabase organization with columns for ID, SSO provider ID, email, and name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-17-what-is-saml-authentication.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table invited_users (\n  id uuid not null primary key,\n  sso_provider_id uuid,\n  email text,\n  name text\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Local Development Environment for ChatGPT Retrieval Plugin\nDESCRIPTION: Bash command to start a local Supabase development environment using the Supabase CLI, which includes pgvector for vector operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase Connection\nDESCRIPTION: Environment variables setup for connecting to Supabase database using transaction and session mode connection strings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Transaction mode connection string used for migrations\nDATABASE_URL=\"postgres://postgres.[project-ref]:[db-password]@xxx.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1\"\n\n# Session mode connection string — used by Prisma Client\nDIRECT_URL=\"postgres://postgres.[project-ref]:[db-password]@xxx.pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Social Login Providers using React and Supabase\nDESCRIPTION: This code snippet demonstrates how to render a grid of social login provider options using React components and data from Supabase. It uses a NavData component to iterate through social login items and creates clickable IconPanel components for each provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-12 xs:gap-x-10 gap-y-10 not-prose py-8\">\n  <NavData data=\"socialLoginItems\">\n    {(data) =>\n      data.map((item) => (\n        <Link\n          href={`${item.url}`}\n          key={item.name}\n          passHref\n          className=\"col-span-12 xs:col-span-6 lg:col-span-4 xl:col-span-3\"\n        >\n          <IconPanel\n            title={item.name}\n            span=\"col-span-6\"\n            icon={item.icon}\n            isDarkMode={item.isDarkMode}\n            hasLightIcon={item.hasLightIcon}\n          >\n            {item.description}\n          </IconPanel>\n        </Link>\n      ))\n    }\n  </NavData>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listening to Specific Table Events in Dart with Supabase Realtime\nDESCRIPTION: Creates a channel to listen for all event types on a specific table ('todos') in the public schema of a Supabase database using Dart. The code uses the 'table' parameter to specify which table to monitor.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('table-db-changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.all,\n        schema: 'public',\n        table: 'todos',\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Sign In with Facebook using Supabase\nDESCRIPTION: This Dart snippet demonstrates how to sign in a user with Facebook using Supabase's `signInWithOAuth` method. It calls the `signInWithOAuth` function with `OAuthProvider.facebook` as the provider, and optionally sets a redirect URI and authScreenLaunchMode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithFacebook() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.facebook,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nearby Restaurants with Swift\nDESCRIPTION: Swift code to call the nearby_restaurants function, including a response struct to properly type the returned data. The struct maps the database column names to Swift properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct Response: Codable {\n  let id: Int\n  let name: String\n  let lat: Double\n  let long: Double\n  let distance: Double\n\n  enum CodingKeys: String, CodingKey {\n    case id, name, lat, long\n    case distance = \"dist_meters\"\n  }\n}\n\nlet response: Response = try await supabase.rpc(\n  \"nearby_restaurants\",\n  params: [\n    \"lat\": 40.807313,\n    \"long\": -73.946713\n  ]\n)\n.execute()\n.value\n```\n\n----------------------------------------\n\nTITLE: Creating Custom API Schema in Postgres\nDESCRIPTION: Creates a new schema named 'api' and grants usage permissions to anon and authenticated roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/hardening-data-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate schema if not exists api;\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Seed Paths in TOML\nDESCRIPTION: Configuration example for including all SQL files in a specific folder using glob patterns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[db.seed]\nenabled = true\nsql_paths = ['./seeds/*.sql']\n```\n\n----------------------------------------\n\nTITLE: Installing the Supabase JavaScript client\nDESCRIPTION: This Bash command installs the Supabase client library for JavaScript using npm. Ensure Node.js and npm are installed on your machine.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Building Svelte App for Production\nDESCRIPTION: Command to build the Svelte application for production deployment. This will create optimized files in the dist folder with hashed filenames.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/svelte-user-management/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Component in React\nDESCRIPTION: A React component that renders a login form with email and password fields, along with buttons for signing in, signing up, and signing out. The form submits to authentication endpoints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Login() {\n  return (\n    <form action=\"/auth/login\" method=\"post\">\n      <label htmlFor=\"email\">Email</label>\n      <input name=\"email\" />\n      <label htmlFor=\"password\">Password</label>\n      <input type=\"password\" name=\"password\" />\n      <button>Sign In</button>\n      <button formAction=\"/auth/sign-up\">Sign Up</button>\n      <button formAction=\"/auth/logout\">Sign Out</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a UUID Using uuid_generate_v4() in PostgreSQL\nDESCRIPTION: SQL query to generate a UUID using the uuid_generate_v4() function provided by the uuid-ossp extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/uuid-ossp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect uuid_generate_v4();\n```\n\n----------------------------------------\n\nTITLE: Kotlin Implementation of Bounding Box Search\nDESCRIPTION: Kotlin example showing how to call the PostGIS bounding box search function using Supabase client with JSON parameter building.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.postgrest.rpc(\n    function = \"restaurants_in_view\",\n    parameters = buildJsonObject { //You can put here any serializable object including your own classes\n        put(\"min_lat\", 40.807)\n        put(\"min_lon\", -73.946)\n        put(\"max_lat\", 40.808)\n        put(\"max_lon\", -73.945)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Signup Actions with Supabase in Next.js\nDESCRIPTION: This code snippet shows the implementation of login and signup actions using Supabase in a Next.js application. It handles form submission, authenticates users, and manages redirects based on the authentication result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\n\nimport { createClient } from '@/utils/supabase/server'\n\nexport async function login(formData) {\n  const supabase = await createClient()\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get('email'),\n    password: formData.get('password'),\n  }\n\n  const { error } = await supabase.auth.signInWithPassword(data)\n\n  if (error) {\n    redirect('/error')\n  }\n\n  revalidatePath('/', 'layout')\n  redirect('/account')\n}\n\nexport async function signup(formData) {\n  const supabase = await createClient()\n\n  const data = {\n    email: formData.get('email'),\n    password: formData.get('password'),\n  }\n\n  const { error } = await supabase.auth.signUp(data)\n\n  if (error) {\n    redirect('/error')\n  }\n\n  revalidatePath('/', 'layout')\n  redirect('/account')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Immutable Function for Better Optimization\nDESCRIPTION: A PostgreSQL function marked as IMMUTABLE for better query optimization that concatenates first and last names to create a full name.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function my_schema.full_name(first_name text, last_name text)\nreturns text\nlanguage sql\nsecurity invoker\nset search_path = ''\nimmutable\nas $$\n  select first_name || ' ' || last_name;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Listen to Auth events in SvelteKit\nDESCRIPTION: This Svelte component sets up a listener for Supabase authentication events.  The `onAuthStateChange` function is used to detect session refreshes and signouts, invalidating the 'supabase:auth' dependency to trigger a reload of the layout and update the UI accordingly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { invalidate } from '$app/navigation'\n  import { onMount } from 'svelte'\n\n  let { data, children } = $props()\n  let { session, supabase } = $derived(data)\n\n  onMount(() => {\n    const { data } = supabase.auth.onAuthStateChange((_, newSession) => {\n      if (newSession?.expires_at !== session?.expires_at) {\n        invalidate('supabase:auth')\n      }\n    })\n\n    return () => data.subscription.unsubscribe()\n  })\n</script>\n\n{@render children()}\n```\n\n----------------------------------------\n\nTITLE: Altering Default Access Privileges in PostgreSQL\nDESCRIPTION: This snippet shows how to alter default access privileges to automatically grant select privilege on newly created tables to a specific role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> alter default privileges in schema public grant select on tables to senior_dev;\nALTER DEFAULT PRIVILEGES\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Client Component in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates a client-side component for user authentication in a Next.js application using Supabase. It includes methods for user sign-up, sign-in, and sign-out, utilizing a typed Supabase client and React hooks for state management. Dependencies include @supabase/auth-helpers-nextjs, next/navigation, and TypeScript types for the database are specified for type safety.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use client'\n\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs'\nimport { useRouter } from 'next/navigation'\nimport { useState } from 'react'\n\nimport type { Database } from '@/lib/database.types'\n\nexport default function Login() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const router = useRouter()\n  const supabase = createClientComponentClient<Database>()\n\n  const handleSignUp = async () => {\n    await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        emailRedirectTo: `${location.origin}/auth/callback`,\n      },\n    })\n    router.refresh()\n  }\n\n  const handleSignIn = async () => {\n    await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n    router.refresh()\n  }\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut()\n    router.refresh()\n  }\n\n  return (\n    <>\n      <input name=\"email\" onChange={(e) => setEmail(e.target.value)} value={email} />\n      <input\n        type=\"password\"\n        name=\"password\"\n        onChange={(e) => setPassword(e.target.value)}\n        value={password}\n      />\n      <button onClick={handleSignUp}>Sign up</button>\n      <button onClick={handleSignIn}>Sign in</button>\n      <button onClick={handleSignOut}>Sign out</button>\n    </>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Enum Column Values\nDESCRIPTION: Shows how to update an enum column value to a different valid enum value.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nupdate person\nset current_mood = 'excited'\nwhere name = 'Alice';\n```\n\n----------------------------------------\n\nTITLE: Initial Data Fetching with Next.js and Supabase\nDESCRIPTION: Sets up the Supabase client and fetches the first batch of tickets using getServerSideProps in Next.js. This ensures the page doesn't start empty.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('supabase-url', 'supabase-key')\n\nexport default function TicketsPage({ tickets }) {\n  const [loadedTickets, setLoadedTickets] = useState(tickets)\n\n  return (\n    <div>\n      {loadedTickets.map((ticket, index) => (\n        {/* We'll get to this part later */}\n      ))}\n    </div>\n  )\n\nexport const getServerSideProps: GetServerSideProps = async ({ req, res }) => {\n  const { data: tickets } = await supabase!\n    .from('my_tickets_table')\n    .select('*')\n    .order('createdAt', { ascending: false })\n    .limit(20)\n\n  return {\n    props: {\n      tickets,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Clerk Authentication\nDESCRIPTION: JavaScript/TypeScript code showing how to initialize the Supabase client with Clerk authentication token integration. The code sets up the connection to Supabase and configures the access token to be retrieved from the Clerk session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-31-clerk-tpa-pricing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst SUPABASE_URL = 'https://<supabase-project>.supabase.co'\nconst SUPABASE_ANON_KEY = '<SUPABASE_ANON_KEY>'\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n  accessToken: () => {\n    return Clerk.session?.getToken()\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Origin Authentication with Supabase SSO\nDESCRIPTION: TypeScript code snippet demonstrating how to use the signInWithSSO method to implement cross-origin authentication within the same site. It includes the redirectTo option to specify a custom callback URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nconst { data, error } = await supabase.auth.signInWithSSO({\n  domain: 'company.com',\n  options: {\n    redirectTo: `https://app.company.com/callback`,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Named Secrets in Vault\nDESCRIPTION: Shows how to create a secret with a unique name and description using vault.create_secret(). This version includes all optional parameters for full secret configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect vault.create_secret('another_s3kre3t', 'unique_name', 'This is the description');\n```\n\n----------------------------------------\n\nTITLE: Signing Out - JavaScript\nDESCRIPTION: This code snippet is for signing out a user from the Supabase session in a JavaScript application. The `signOut` function removes the user from the browser session and clears any relevant local storage objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\\n\\n// ---cut---\\nasync function signOut() {\\n  const { error } = await supabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client - JavaScript\nDESCRIPTION: This snippet initializes a Supabase client in a SvelteKit application using JavaScript. It creates an async load function that fetches the session information and returns both the client and session to the parent layout. Dependencies include '@supabase/auth-helpers-sveltekit' and environment variables for Supabase URL and anon key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes/+layout.js\nimport { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'\nimport { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'\n\nexport const load = async ({ fetch, data, depends }) => {\n  depends('supabase:auth')\n\n  const supabase = createSupabaseLoadClient({\n    supabaseUrl: PUBLIC_SUPABASE_URL,\n    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n    event: { fetch },\n    serverSession: data.session,\n  })\n\n  /**\n   * It's fine to use `getSession` here, because on the client, `getSession` is\n   * safe, and on the server, it reads `session` from the `LayoutData`, which\n   * safely checked the session using `safeGetSession`.\n   */\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  return { supabase, session }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex SQL Stored Function in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates how to create a stored function that performs a complex query with multiple joins. The function takes a parameter and returns a table with specified columns, allowing complex database operations to be encapsulated in a reusable function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/certain-operations-are-too-complex-to-perform-directly-using-the-client-libraries-8JaphH.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION IF EXISTS get_my_complex_query;\nCREATE FUNCTION get_my_complex_query(parameter INT)\nRETURNS TABLE (column1 INTEGER, column2 VARCHAR, column3 DATE) AS\n$$\nBEGIN\n    RETURN QUERY\n    SELECT t1.column1, t1.column2, t2.column3\n    FROM \"TableName1\" AS t1\n    INNER JOIN \"TableName2\" AS t2 ON t1.column = t2.column\n    INNER JOIN \"TableName3\" AS t3 ON t2.another_column = t3.another_column\n    LEFT JOIN \"TableName4\" AS t4 ON t3.some_column = t4.some_column\n    WHERE t2.column = parameter\n    AND t3.column_name = 'some_value';\nEND;\n$$\nLANGUAGE plpgsql VOLATILE;\n```\n\n----------------------------------------\n\nTITLE: Querying Similar Vectors in Python\nDESCRIPTION: Demonstrates how to search for vectors similar to a query vector with optional filtering based on metadata. The query can be customized with distance measures, limits, and return preferences for metadata and distance values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocs.query(\n    query_vector=[0.10,0.21,0.29],   # required\n    limit=1,                         # (optional) number of records to return\n    filters={\"year\": {\"$eq\": 1973}}, # (optional) metadata filters\n    measure=\"cosine_distance\",       # (optional) distance measure to use\n    include_value=False,             # (optional) should distance measure values be returned?\n    include_metadata=False,          # (optional) should record metadata be returned?\n)\n```\n\n----------------------------------------\n\nTITLE: Complex Query Execution Plan Structure\nDESCRIPTION: Example showing the hierarchical structure of a complex query execution plan with multiple nodes including aggregation, sorting, and joins.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nAggregate Node (Top Node)\n│\n└──> Sort Node\n    │\n    └──> Hash Join Node\n        │\n        ├──> Seq Scan on users (Filtered)\n        │\n        └──> Hash\n            │\n            └──> Seq Scan on activities\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy with WITH CHECK for INSERT Operations\nDESCRIPTION: Demonstrates how to create an RLS policy using the WITH CHECK clause for INSERT operations. This policy ensures that users can only insert rows where their user_id matches their JWT token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow user to add posts\"\non \"public\".\"posts\"\nas PERMISSIVE\nfor INSERT\nto authenticated\nwith check(\n  (select auth.uid()) = user_id\n);\n\n-- Example: failing insert\nINSERT INTO posts\nVALUES (<false id>, <comment>);\n\n-- Example: successful insert\nINSERT INTO posts\nVALUES (<real id>, <comment>);\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Signup with Python\nDESCRIPTION: Python code snippet for signing up a new user with email and password authentication in Supabase. This example includes an optional email_redirect_to parameter for after confirmation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = await supabase.auth.sign_up({\n  'email': 'valid.email@supabase.io',\n  'password': 'example-password',\n  'options': {\n    'email_redirect_to': 'https://example.com/welcome',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships with GraphQL\nDESCRIPTION: GraphQL query example showing how to query teams with their related users through a many-to-many relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst Query = `\n  query {\n    teamsCollection {\n      edges {\n        node {\n          id\n          team_name\n          users {\n            id,\n            name\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Indexing Vector Collection in Python\nDESCRIPTION: Shows how to create an index on a vector collection to optimize query performance. This is a recommended practice after inserting data and before performing similarity searches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocs.index()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Slowest SQL Queries\nDESCRIPTION: SQL query to identify and analyze the slowest queries by execution time with detailed performance metrics\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  auth.rolname,\n  statements.query,\n  statements.calls,\n  statements.total_exec_time + statements.total_plan_time as total_time,\n  statements.min_exec_time + statements.min_plan_time as min_time,\n  statements.max_exec_time + statements.max_plan_time as max_time,\n  statements.mean_exec_time + statements.mean_plan_time as mean_time,\n  statements.rows / statements.calls as avg_rows\nfrom\n  pg_stat_statements as statements\n  inner join pg_authid as auth on statements.userid = auth.oid\norder by max_time desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Overriding Generated TypeScript Types\nDESCRIPTION: Shows how to override generated types using type-fest's MergeDeep utility type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MergeDeep } from 'type-fest'\nimport { Database as DatabaseGenerated } from './database-generated.types'\nexport { Json } from './database-generated.types'\n\n// Override the type for a specific column in a view:\nexport type Database = MergeDeep<\n  DatabaseGenerated,\n  {\n    public: {\n      Views: {\n        movies_view: {\n          Row: {\n            // id is a primary key in public.movies, so it must be `not null`\n            id: number\n          }\n        }\n      }\n    }\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Customizing autovacuum scale factor for large PostgreSQL tables\nDESCRIPTION: This SQL command modifies the autovacuum_vacuum_scale_factor for a specific table, making autovacuum run more frequently on large tables by reducing the threshold percentage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nALTER TABLE mytable SET autovacuum_vacuum_scale_factor to 0.05;\n```\n\n----------------------------------------\n\nTITLE: Listening to UPDATE Events in Swift with Supabase Realtime\nDESCRIPTION: Uses Swift to create a channel that listens for UPDATE events in the public schema of a Supabase database. The code specifies UpdateAction.self as the event type and processes changes using an async iterator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"schema-db-changes\")\n\nlet changes = await myChannel.postgresChange(UpdateAction.self, schema: \"public\")\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.oldRecord, change.record)\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to UPDATE Events in Python with Supabase Realtime\nDESCRIPTION: Establishes a Python channel to listen for UPDATE events in the public schema of a Supabase database. The code creates a subscription that calls a lambda function to print the payload whenever database updates occur.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('schema-db-changes').on_postgres_changes(\n  \"UPDATE\", # Listen only to UPDATEs\n  schema=\"public\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Stop Tracking Presence in JavaScript\nDESCRIPTION: This snippet demonstrates how to stop tracking presence state in JavaScript using the untrack method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\nconst roomOne = supabase.channel('room_01')\n\n// ---cut---\nconst untrackPresence = async () => {\n  const presenceUntrackStatus = await roomOne.untrack()\n  console.log(presenceUntrackStatus)\n}\n\nuntrackPresence()\n```\n\n----------------------------------------\n\nTITLE: Phone Number OTP Verification\nDESCRIPTION: Verifies a one-time password (OTP) sent via SMS for phone number authentication. The OTP must be verified within 60 seconds of receipt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\nconst {\n  data: { session },\n  error,\n} = await supabase.auth.verifyOtp({\n  phone: '+13334445555',\n  token: '123456',\n  type: 'sms',\n})\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.verifyOTP(\n  phone: \"+13334445555\",\n  token: \"123456\",\n  type: .sms\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.verifyPhoneOtp(\n    type = OtpType.Phone.SMS,\n    phone = \"+13334445555\",\n    token = \"123456\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nsupabase.auth.verify_otp({\n  'phone': \"+13334445555\",\n  'token': \"123456\",\n  'type': \"sms\"\n})\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://<PROJECT_REF>.supabase.co/auth/v1/verify' \\\n-H \"apikey: <SUPABASE_KEY>\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"type\": \"sms\",\n  \"phone\": \"+13334445555\",\n  \"token\": \"123456\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Table for HypoPG Demonstration\nDESCRIPTION: SQL commands to create a sample 'account' table and insert test data for demonstrating HypoPG functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table account (\n  id int,\n  address text\n);\n\ninsert into account(id, address)\nselect\n  id,\n  id || ' main street'\nfrom\n  generate_series(1, 10000) id;\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling pg_hashids Extension in SQL\nDESCRIPTION: SQL commands to enable the pg_hashids extension within a separate schema and disable it if needed. Creating the extension within a separate schema helps keep the public schema clean.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_hashids.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pg_hashids\" extension\ncreate extension pg_hashids with schema extensions;\n\n-- Disable the \"pg_hashids\" extension\ndrop extension if exists pg_hashids;\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog Component\nDESCRIPTION: Example implementation of an alert dialog component with header, description, and action buttons using the imported components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<AlertDialog>\n  <AlertDialogTrigger>Open</AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account and remove your data\n        from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Type for Uploads in Supabase Storage with Swift\nDESCRIPTION: This snippet illustrates how to specify the content type when uploading a file to Supabase Storage using Swift. It uses the 'contentType' option in FileOptions to set the MIME type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport Supabase\n\n// Create Supabase client\nlet supabase = SupabaseClient(supabaseURL: URL(string: \"your_project_url\")!, supabaseKey: \"your_supabase_api_key\")\n\ntry await supabase.storage.from(\"bucket_name\")\n  .upload(\n    path: \"file_path\",\n    file: file,\n    options: FileOptions(\n      contentType: \"image/jpeg\"\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Raw Postgres Connection using Deno Postgres Driver\nDESCRIPTION: Shows how to establish a direct connection to Postgres using the Deno Postgres driver, implementing connection pooling and raw SQL queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as postgres from 'https://deno.land/x/postgres@v0.17.0/mod.ts'\n\nconst databaseUrl = Deno.env.get('SUPABASE_DB_URL')!\n\nconst pool = new postgres.Pool(databaseUrl, 3, true)\n\nDeno.serve(async (_req) => {\n  try {\n    const connection = await pool.connect()\n\n    try {\n      const result = await connection.queryObject`SELECT * FROM animals`\n      const animals = result.rows\n\n      const body = JSON.stringify(\n        animals,\n        (key, value) => (typeof value === 'bigint' ? value.toString() : value),\n        2\n      )\n\n      return new Response(body, {\n        status: 200,\n        headers: { 'Content-Type': 'application/json; charset=utf-8' },\n      })\n    } finally {\n      connection.release()\n    }\n  } catch (err) {\n    console.error(err)\n    return new Response(String(err?.message ?? err), { status: 500 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Vector Collection\nDESCRIPTION: Creates a new vector collection with 3-dimensional vectors and inserts sample vectors with associated metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/google-colab.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection = vx.get_or_create_collection(name=\"colab_collection\", dimension=3)\n\ncollection.upsert(\n    vectors=[\n        (\n         \"vec0\",           # the vector's identifier\n         [0.1, 0.2, 0.3],  # the vector. list or np.array\n         {\"year\": 1973}    # associated  metadata\n        ),\n        (\n         \"vec1\",\n         [0.7, 0.8, 0.9],\n         {\"year\": 2012}\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Task API with Route Parameters in Vanilla Deno\nDESCRIPTION: A vanilla Deno implementation for a task management API without using any frameworks. This example uses a router map and manual URL parsing to handle different routes and HTTP methods, demonstrating how to extract and utilize route parameters directly from the URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Task {\n  id: string\n  name: string\n}\n\nlet tasks: Task[] = []\n\nconst router = new Map<string, (req: Request) => Promise<Response>>()\n\nasync function getAllTasks(): Promise<Response> {\n  return new Response(JSON.stringify(tasks))\n}\n\nasync function getTask(id: string): Promise<Response> {\n  const task = tasks.find((t) => t.id === id)\n  if (task) {\n    return new Response(JSON.stringify(task))\n  } else {\n    return new Response('Task not found', { status: 404 })\n  }\n}\n\nasync function createTask(req: Request): Promise<Response> {\n  const id = Math.random().toString(36).substring(7)\n  const task = { id, name: '' }\n  tasks.push(task)\n  return new Response(JSON.stringify(task), { status: 201 })\n}\n\nasync function updateTask(id: string, req: Request): Promise<Response> {\n  const index = tasks.findIndex((t) => t.id === id)\n  if (index !== -1) {\n    tasks[index] = { ...tasks[index] }\n    return new Response(JSON.stringify(tasks[index]))\n  } else {\n    return new Response('Task not found', { status: 404 })\n  }\n}\n\nasync function deleteTask(id: string): Promise<Response> {\n  const index = tasks.findIndex((t) => t.id === id)\n  if (index !== -1) {\n    tasks.splice(index, 1)\n    return new Response('Task deleted successfully')\n  } else {\n    return new Response('Task not found', { status: 404 })\n  }\n}\n\nDeno.serve(async (req) => {\n  const url = new URL(req.url)\n  const method = req.method\n  // Extract the last part of the path as the command\n  const command = url.pathname.split('/').pop()\n  // Assuming the last part of the path is the task ID\n  const id = command\n  try {\n    switch (method) {\n      case 'GET':\n        if (id) {\n          return getTask(id)\n        } else {\n          return getAllTasks()\n        }\n      case 'POST':\n        return createTask(req)\n      case 'PUT':\n        if (id) {\n          return updateTask(id, req)\n        } else {\n          return new Response('Bad Request', { status: 400 })\n        }\n      case 'DELETE':\n        if (id) {\n          return deleteTask(id)\n        } else {\n          return new Response('Bad Request', { status: 400 })\n        }\n      default:\n        return new Response('Method Not Allowed', { status: 405 })\n    }\n  } catch (error) {\n    return new Response(`Internal Server Error: ${error}`, { status: 500 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Data and Displaying in Android Compose UI\nDESCRIPTION: Implementation of an Android activity and Composable function that queries the 'instruments' table from Supabase and displays the results in a LazyColumn. This uses Kotlin Coroutines to handle asynchronous API calls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            SupabaseTutorialTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    InstrumentsList()\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun InstrumentsList() {\n    var instruments by remember { mutableStateOf<List<Instrument>>(listOf()) }\n    LaunchedEffect(Unit) {\n        withContext(Dispatchers.IO) {\n            instruments = supabase.from(\"instruments\")\n                              .select().decodeList<Instrument>()\n        }\n    }\n    LazyColumn {\n        items(\n            instruments,\n            key = { instrument -> instrument.id },\n        ) { instrument ->\n            Text(\n                instrument.name,\n                modifier = Modifier.padding(8.dp),\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Database with Supabase CLI - Bash\nDESCRIPTION: This snippet details the commands required to restore a previously backed-up Supabase database using the Supabase CLI. It emphasizes the need for inputting the correct connection string for the new project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql \\\n  --single-transaction \\\n  --variable ON_ERROR_STOP=1 \\\n  --file roles.sql \\\n  --file schema.sql \\\n  --command 'SET session_replication_role = replica' \\\n  --file data.sql \\\n  --dbname [CONNECTION_STRING]\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport OLD_PROJECT_REF=\"<old_project_ref>\"\\nexport NEW_PROJECT_REF=\"<new_project_ref>\"\\nexport SUPABASE_ACCESS_TOKEN=\"<personal_access_token>\"\\n\\ncurl \"https://api.supabase.com/v1/projects/$OLD_PROJECT_REF/pgsodium\" \\\n  -H \"Authorization: Bearer $SUPABASE_ACCESS_TOKEN\" |\\ncurl \"https://api.supabase.com/v1/projects/$NEW_PROJECT_REF/pgsodium\" \\\n  -H \"Authorization: Bearer $SUPABASE_ACCESS_TOKEN\" \\\n  -X PUT --json @-\n```\n\n----------------------------------------\n\nTITLE: Loading Notes Data in SvelteKit\nDESCRIPTION: Server-side load function to fetch notes data from Supabase for the private page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad } from './$types'\n\nexport const load: PageServerLoad = async ({ depends, locals: { supabase } }) => {\n  depends('supabase:db:notes')\n  const { data: notes } = await supabase.from('notes').select('id,note').order('id')\n  return { notes: notes ?? [] }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Function\nDESCRIPTION: Command to create a new Supabase Edge Function for email handling\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/auth-send-email-hook-react-email-resend.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new send-email\n```\n\n----------------------------------------\n\nTITLE: Enabling Realtime Functionality for Messages in Supabase\nDESCRIPTION: SQL script to enable realtime functionality for the messages table. It reconfigures the realtime publication to only publish inserts and adds the messages table to the publication for instant updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\n  -- remove the supabase_realtime publication\n  drop publication if exists supabase_realtime;\n\n  -- re-create the supabase_realtime publication with no tables and only for insert\n  create publication supabase_realtime with (publish = 'insert');\ncommit;\n\n-- add a table to the publication\nalter publication supabase_realtime add table messages;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Vector Column\nDESCRIPTION: SQL commands to create a new table with a vector column or add a vector column to an existing table\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id bigint primary key generated always as identity,\n  content text,\n  embedding vector(512)\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nalter table documents\nadd column embedding vector(512);\n```\n\n----------------------------------------\n\nTITLE: Supabase Database Connection String Format\nDESCRIPTION: Example format of a Supabase database connection string using the Session pooler.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\npostgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Querying Failed HTTP Requests in pg_net\nDESCRIPTION: Query to find all failed HTTP requests in the net._http_response table, filtering for status codes >= 400 or requests with error messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom net._http_response\nwhere \"status_code\" >= 400 or \"error_msg\" is not null\norder by \"created\" desc;\n```\n\n----------------------------------------\n\nTITLE: Exporting Database Using pg_dump\nDESCRIPTION: This code snippet demonstrates how to export a database from Neon using the pg_dump command. It outlines the command options to ensure a full migration of the database schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/neon.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npg_dump \"$OLD_DB_URL\" \\\n  --clean \\\n  --if-exists \\\n  --quote-all-identifiers \\\n  --no-owner \\\n  --no-privileges \\\n  > dump.sql\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Identity to Anonymous User in Supabase JS\nDESCRIPTION: JavaScript code to link an OAuth provider (Google) to an anonymous user, converting them to a permanent user with the same user ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .auth\n  .linkIdentity({ provider: 'google' })\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Provider in TOML\nDESCRIPTION: Example of enabling the Apple OAuth provider for local development by adding configuration to the config.toml file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/managing-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[auth.external.apple]\nenabled = false\nclient_id = \"\"\nsecret = \"\"\nredirect_uri = \"\" # Overrides the default auth redirectUrl.\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Flutter Main Function\nDESCRIPTION: Dart code to initialize the Supabase client in the main function of a Flutter app, setting up the connection with the Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nFuture<void> main() async {\n  await Supabase.initialize(\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_SUPABASE_ANON_KEY',\n  );\n  runApp(const MyApp());\n}\n\nfinal supabase = Supabase.instance.client;\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Supabase Flutter');\n  }\n}\n\nextension ContextExtension on BuildContext {\n  void showSnackBar(String message, {bool isError = false}) {\n    ScaffoldMessenger.of(this).showSnackBar(\n      SnackBar(\n        content: Text(message),\n        backgroundColor: isError\n            ? Theme.of(this).colorScheme.error\n            : Theme.of(this).snackBarTheme.backgroundColor,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAI Text Completion Request Handler\nDESCRIPTION: Implements the OpenAI completion API request with streaming response handling, including prompt construction and error management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst prompt = codeBlock`\n  ${oneLine`\n    You are a very enthusiastic Supabase representative who loves\n    to help people! Given the following sections from the Supabase\n    documentation, answer the question using only that information,\n    outputted in markdown format. If you are unsure and the answer\n    is not explicitly written in the documentation, say\n    \"Sorry, I don't know how to help with that.\"\n  `}\n\n  Context sections:\n  ${contextText}\n\n  Question: \"\"\"\n  ${sanitizedQuery}\n  \"\"\"\n\n  Answer as markdown (including related code snippets if available):\n`\n\nconst completionOptions: CreateCompletionRequest = {\n  model: 'gpt-3.5-turbo-instruct',\n  prompt,\n  max_tokens: 512,\n  temperature: 0,\n  stream: true,\n}\n\nconst response = await fetch('https://api.openai.com/v1/completions', {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${openAiKey}`,\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(completionOptions),\n})\n\nif (!response.ok) {\n  const error = await response.json()\n  throw new ApplicationError('Failed to generate completion', error)\n}\n\nreturn new Response(response.body, {\n  headers: {\n    'Content-Type': 'text/event-stream',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Nested JSON in PostgreSQL 14\nDESCRIPTION: Demonstrates how to use JSON subscripting to access nested JSON fields in PostgreSQL 14. This new feature allows for quick traversal of nested JSON structures to retrieve values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect (\n  '{ \"PostgreSQL\": { \"release\": 14 }}'::jsonb\n)['PostgreSQL']['release'];\n\n jsonb\n-------\n 14\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Data in Flutter App\nDESCRIPTION: This Dart code demonstrates how to query data from Supabase in a Flutter app, displaying the results in a ListView using a FutureBuilder.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Instruments',\n      home: HomePage(),\n    );\n  }\n}\n\nclass HomePage extends StatefulWidget {\n  const HomePage({super.key});\n\n  @override\n  State<HomePage> createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  final _future = Supabase.instance.client\n      .from('instruments')\n      .select();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: FutureBuilder(\n        future: _future,\n        builder: (context, snapshot) {\n          if (!snapshot.hasData) {\n            return const Center(child: CircularProgressIndicator());\n          }\n          final instruments = snapshot.data!;\n          return ListView.builder(\n            itemCount: instruments.length,\n            itemBuilder: ((context, index) {\n              final instrument = instruments[index];\n              return ListTile(\n                title: Text(instrument['name']),\n              );\n            }),\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Dog Features - Python\nDESCRIPTION: This snippet defines a tuple for a dog that consists of an identifier and its associated feature vector encapsulated as an array of values. The feature vector can be used for classification or regression models in data tasks involving animal characteristics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n('Dog', '[-0.03398106,-0.04587913,0.05834977,-0.012510896,-0.020966545,0.024606809,0.06725803,0.04614885,0.021671712,0.0028234783,0.024777666,-0.13095815,0.050201364,0.04163673,-0.0073551466,-0.007788209,0.02349543,0.045571007,-0.101046406,0.026413035,0.006283169,-0.029844765,-0.018307583,-0.067260414,0.0071734344,0.040144853,-0.022258174,-0.035064206,-0.038951498,-0.10791707,0.012508958,-0.029608397,0.01737361,-0.0048551173,-0.0137116825,-0.021252109,0.016257621,0.030800447,-0.010203598,0.05779155,0.03410912,-0.014027831,-0.06014225,-0.0737464,-0.00296503,-0.02995635,-0.048784822,-0.04322933,0.04992729,-0.054626375,0.020585917,-0.02869352,0.027270662,0.028178928,0.023035508,0.027372012,0.07144182,0.027457833,0.006989782,0.026272165,0.020677378,0.1046711,-0.18369348,0.10478375,0.06709782,0.031876415,-0.080784984,-0.0318658,0.0068611726,0.04296069,-0.014369754,0.025120066,0.0064320723,0.07627709,0.009385011,-0.046717513,0.02942915,-0.011798346,0.0024966802,-0.0011040273,-0.01837801,-0.024898572,-0.056603655,-0.0049853246,-0.018484253,-0.047932703,0.005165957,-0.07251493,0.015559436,0.06264581,-0.039077364,-0.02403875,0.013444196,0.014436731,-0.056333177,-0.015642889,0.021741007,-0.013120397,-0.033021655,0.20736612,-0.06262082,0.042408913,0.063680306,-0.047230907,0.07333769,-0.0058781966,-0.019491186,0.001866874,-0.04809916,0.038134225,0.004091026,-0.02022125,0.0114840185,-0.066682085,0.03792327,-0.00015499585,0.027070496,0.049177293,-0.0024667126,-0.01676147,0.005352208,0.03228254,0.020419393,-0.023925079,0.027801491,-0.08195105,0.02263024,0.1127984,-0.01773959,0.013458586,0.023056736,-0.0405365,-0.019467505,-0.007438755,0.014741418,0.019221041,-0.002969519,0.0063020405,0.0050163977,-0.019422691,-0.042474356,-0.11976022,-0.0031393368,-0.09801484,-0.0063687935,0.054927953,-0.034576423,0.018661322,-0.06695973,0.018426672,-0.041533604,0.012827635,-0.0216872,0.029161893,0.035417113,0.014812438,-0.0005086224,0.047981005,-0.033724055,0.02964084,-0.011219084,-0.030708553,-0.05478525,0.061196856,-0.01044451,-0.06580756,-0.071939655,0.028023727,0.019572273,-0.0066324784,0.03371536,0.03889294,-0.043447196,0.023165302,0.02749916,0.036996223,-0.017910937,0.0034960753,-0.017619846,-0.01682099,0.07389422,-0.022559106,-0.075324185,0.068171635,0.039252345,-0.01228445,-0.019303845,0.0061936406,0.0069038905,0.05486719,0.021220824,0.06319413,-0.00862464,-0.07810823,-0.06715591,0.01653162,-0.074353494,-0.0055483994,-0.00432403,-0.029376648,0.044267535,-0.02766178,0.015305978,0.041949403,0.05040478,0.03711134,-0.006646276,-0.024122963,0.04387694,0.042191654,0.0040298956,0.026687108,0.026858974,5.975888e-05,-0.042856377,0.02719497,-0.015184606,0.017931797,0.051872507,0.040260497,0.034908403,-0.10133825,-0.035800662,-0.21634497,0.026843634,-0.0035379566,-0.026145559,0.03874843,-0.0072357524,0.03432515,-0.01789197,0.05520025,0.056067273,0.06292914,-0.0063916366,-0.0250232,0.029002182,0.0048547084,0.09028735,0.063608915,-0.013629017,0.007837473,0.030949071,-0.0305201,-0.016705323,-0.029566336,-0.041564044,0.020007666,-0.029416997,0.24585131,0.071520805,0.027776815,-0.010154821,0.019156493,0.026060665,-0.05332598,-0.117831856,0.05576698,0.0611754,0.023893401,-0.03997265,-0.042899795,-0.053757526,-0.03657568,0.07664591,-0.032604933,-0.07631975,-0.024680613,0.0060682655,-0.0018964773,0.012901344,-0.042611003,0.02288525,0.031216914,-0.034108605,0.022518663,0.01629285,-0.029234616,-0.015426959,-0.034897357,-0.021540005,0.0015016403,0.033357877,0.0284842,-0.092373185,0.02815136,-0.034993514,0.037112426,-0.023349721,-0.03801536,-0.03301411,0.007879143,-0.037546758,-0.010365928,0.07326524,0.048820004,-0.030361317,0.056599807,-0.006202554,0.05078459,-0.046470087,-0.022375962,-0.027263056,0.04430895,-0.066588804,0.048946578,-0.008054631,0.056988873,-0.022817664,0.05487547,-0.00850563,0.06884496,-0.056825235,0.013956117,-2.8598519e-05,-0.008391312,-0.07403139,-0.02054572,0.00740269,-0.28785047,0.035514876,0.018872637,0.016709069,-0.022526452,0.04546725,0.0036777765,0.010296626,-0.07546051,-0.045812447,0.010187619,0.027719049,0.031793963,-0.013236095,-0.020754311,0.03627473,0.011115101,0.014774947,0.04622976,-0.029250441,0.020287355,0.017993618,0.24138238,-0.07568645,0.07751866,0.012238281,-0.041065767,0.051694304,0.04204503,-0.028650045,0.07694258,-0.021129774,0.10736998,-0.045513943,0.010340816,0.046329513,-0.046585277,0.09469313,-0.012459904,-0.055962075,-0.015606321,0.033765897,0.0049535953,-0.07884165,0.08479913,-0.035221465,-0.04052622,-0.02334385,0.022412961,0.017682377,-0.044773374,-0.06094265,-0.044896785,0.022461157,0.039271295,0.01423678,0.011286046,-0.05645138,-0.055751275,-0.06402218,-0.0047324076,-0.059572853,-0.025109097,0.03716784,0.05244787]'\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client\nDESCRIPTION: Setup of Supabase client with PKCE flow type and custom session storage for Flask application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom flask import g\nfrom werkzeug.local import LocalProxy\nfrom supabase.client import Client, ClientOptions\nfrom flask_storage import FlaskSessionStorage\n\nurl = os.environ.get(\"SUPABASE_URL\", \"\")\nkey = os.environ.get(\"SUPABASE_KEY\", \"\")\n\ndef get_supabase() -> Client:\n    if \"supabase\" not in g:\n        g.supabase = Client(\n            url,\n            key,\n            options=ClientOptions(\n                storage=FlaskSessionStorage(),\n                flow_type=\"pkce\"\n            ),\n        )\n    return g.supabase\n\nsupabase: Client = LocalProxy(get_supabase)\n```\n\n----------------------------------------\n\nTITLE: Creating Search Indexes for Full-text and Vector Columns\nDESCRIPTION: SQL commands to create GIN index for full-text search and HNSW index for vector search to optimize query performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Create an index for the full-text search\ncreate index on documents using gin(fts);\n\n-- Create an index for the semantic vector search\ncreate index on documents using hnsw (embedding vector_ip_ops);\n```\n\n----------------------------------------\n\nTITLE: Query Performance Statistics Analysis in PostgreSQL\nDESCRIPTION: SQL query to analyze query performance statistics by showing the most time-consuming queries, their frequency, total execution time, and percentage of total execution time by role\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  auth.rolname,\n  statements.query,\n  statements.calls,\n  statements.total_exec_time + statements.total_plan_time as total_time,\n  to_char(\n    (\n      (statements.total_exec_time + statements.total_plan_time) / sum(\n        statements.total_exec_time + statements.total_plan_time\n      ) over ()\n    ) * 100,\n    'FM90D0'\n  ) || '%' as prop_total_time\nfrom\n  pg_stat_statements as statements\n  inner join pg_authid as auth on statements.userid = auth.oid\norder by total_time desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Creating Email Sending JSON Schema - JSON\nDESCRIPTION: Defines the schema for the JSON payload used in email sending, including the structure for user data, app metadata, and email data attributes. It ensures the data adheres to the specified types and constraints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"user\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"x-faker\": \"random.uuid\"\n        },\n        \"aud\": {\n          \"type\": \"string\",\n          \"enum\": [\"authenticated\"]\n        },\n        \"role\": {\n          \"type\": \"string\",\n          \"enum\": [\"anon\", \"authenticated\"]\n        },\n        \"email\": {\n          \"type\": \"string\",\n          \"x-faker\": \"internet.email\"\n        },\n        \"phone\": {\n          \"type\": \"string\",\n          \"x-faker\": {\n            \"fake\": \"{{phone.phoneNumber('+1##########')}}\"\n          }\n        },\n        \"app_metadata\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"provider\": {\n              \"type\": \"string\",\n              \"enum\": [\"email\"]\n            },\n            \"providers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\",\n                \"enum\": [\"email\"]\n              },\n              \"minItems\": 1,\n              \"maxItems\": 1\n            }\n          }\n        },\n        \"user_metadata\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"email\": {\n              \"type\": \"string\",\n              \"x-faker\": \"internet.email\"\n            },\n            \"email_verified\": {\n              \"type\": \"boolean\",\n              \"x-faker\": \"random.boolean\"\n            },\n            \"phone_verified\": {\n              \"type\": \"boolean\",\n              \"x-faker\": \"random.boolean\"\n            },\n            \"sub\": {\n              \"type\": \"string\",\n              \"x-faker\": \"random.uuid\"\n            }\n          }\n        },\n        \"identities\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"identity_id\": {\n                \"type\": \"string\",\n                \"x-faker\": \"random.uuid\"\n              },\n              \"id\": {\n                \"type\": \"string\",\n                \"x-faker\": \"random.uuid\"\n              },\n              \"user_id\": {\n                \"type\": \"string\",\n                \"x-faker\": \"random.uuid\"\n              },\n              \"identity_data\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"email\": {\n                    \"type\": \"string\",\n                    \"x-faker\": \"internet.email\"\n                  },\n                  \"email_verified\": {\n                    \"type\": \"boolean\",\n                    \"x-faker\": \"random.boolean\"\n                  },\n                  \"phone_verified\": {\n                    \"type\": \"boolean\",\n                    \"x-faker\": \"random.boolean\"\n                  },\n                  \"sub\": {\n                    \"type\": \"string\",\n                    \"x-faker\": \"random.uuid\"\n                  }\n                }\n              },\n              \"provider\": {\n                \"type\": \"string\",\n                \"enum\": [\"email\"]\n              },\n              \"last_sign_in_at\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"x-faker\": \"date.recent\"\n              },\n              \"created_at\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"x-faker\": \"date.recent\"\n              },\n              \"updated_at\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"x-faker\": \"date.recent\"\n              },\n              \"email\": {\n                \"type\": \"string\",\n                \"x-faker\": \"internet.email\"\n              }\n            },\n            \"required\": [\n              \"identity_id\",\n              \"id\",\n              \"user_id\",\n              \"identity_data\",\n              \"provider\",\n              \"last_sign_in_at\",\n              \"created_at\",\n              \"updated_at\",\n              \"email\"\n            ]\n          }\n        },\n        \"created_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"updated_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"is_anonymous\": {\n          \"type\": \"boolean\",\n          \"x-faker\": \"random.boolean\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"aud\",\n        \"role\",\n        \"email\",\n        \"phone\",\n        \"app_metadata\",\n        \"user_metadata\",\n        \"identities\",\n        \"created_at\",\n        \"updated_at\",\n        \"is_anonymous\"\n      ]\n    },\n    \"email_data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"token\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[0-9]{6}$\",\n          \"x-faker\": {\n            \"fake\": \"{{helpers.replaceSymbols('######')}}\"\n          }\n        },\n        \"token_hash\": {\n          \"type\": \"string\",\n          \"minLength\": 16,\n          \"maxLength\": 30,\n          \"x-faker\": {\n            \"fake\": \"{{random.alphaNumeric(30)}}\"\n          }\n        },\n        \"redirect_to\": {\n          \"type\": \"string\",\n          \"x-faker\": \"internet.url\"\n        },\n        \"email_action_type\": {\n          \"type\": \"string\",\n          \"enum\": [\"signup\", \"invite\", \"magiclink\", \"recovery\", \"email_change\", \"email\"]\n        },\n        \"site_url\": {\n          \"type\": \"string\",\n          \"x-faker\": \"internet.url\"\n        },\n        \"token_new\": {\n          \"type\": \"string\",\n          \"minLength\": 16,\n          \"maxLength\": 30,\n          \"x-faker\": {\n            \"fake\": \"{{random.alphaNumeric(30)}}\"\n          }\n        },\n        \"token_hash_new\": {\n          \"type\": \"string\",\n          \"minLength\": 16,\n          \"maxLength\": 30,\n          \"x-faker\": {\n            \"fake\": \"{{random.alphaNumeric(30)}}\"\n          }\n        }\n      },\n      \"required\": [\n        \"token\",\n        \"token_hash\",\n        \"redirect_to\",\n        \"email_action_type\",\n        \"site_url\",\n        \"token_new\",\n        \"token_hash_new\"\n      ]\n    }\n  },\n  \"required\": [\"user\", \"email_data\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Notifications in Supabase\nDESCRIPTION: SQL commands to create the necessary tables for storing user profiles with FCM tokens and notifications in Supabase. This schema enables the push notification functionality by storing the necessary user tokens and notification content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.profiles (\n  id uuid references auth.users(id) not null primary key,\n  fcm_token text\n);\n\ncreate table public.notifications (\n  id uuid not null default gen_random_uuid(),\n  user_id uuid references auth.users(id) not null,\n  created_at timestamp with time zone not null default now(),\n  body text not null\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Model in Swift for Supabase Integration\nDESCRIPTION: This snippet shows the updated Profile model struct used for both request and response calls in the Supabase-integrated SwiftUI application. It includes properties for username, full name, website, and avatar URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct Profile: Codable {\n  let username: String?\n  let fullName: String?\n  let website: String?\n  let avatarURL: String?\n\n  enum CodingKeys: String, CodingKey {\n    case username\n    case fullName = \"full_name\"\n    case website\n    case avatarURL = \"avatar_url\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with AWS Cognito in Swift\nDESCRIPTION: This Swift code illustrates setting up a Supabase client with AWS Amplify for iOS. It uses AWSPluginsCore and requires the implementation of an access token retrieval strategy, utilizing 'Amplify.Auth.fetchAuthSession'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Supabase\nimport AWSPluginsCore\n\nstruct UnexpectedAuthSessionError: Error {}\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://<supabase-project>.supabase.co\")!,\n  supabaseKey: \"SUPABASE_ANON_KEY\",\n  options: SupabaseClientOptions(\n    auth: SupabaseClientOptions.AuthOptions(\n      accessToken: {\n        let session = try await Amplify.Auth.fetchAuthSession()\n\n        guard let cognitoTokenProvider = session as? AuthCognitoTokensProvider else {\n          throw UnexpectedAuthSessionError()\n        }\n\n        let tokens = try cognitoTokenProvider.getCognitoTokens().get()\n        return tokens.idToken\n      }\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Parallel Maintenance Workers for Indexing\nDESCRIPTION: SQL command to configure max_parallel_maintenance_workers, which controls how many CPU cores can be utilized during maintenance operations like index creation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nset max_parallel_maintenance_workers to <integer>;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Storage Bucket with JavaScript\nDESCRIPTION: Creates a public storage bucket named 'avatars' using the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)\n\n// Use the JS library to create a bucket.\n\nconst { data, error } = await supabase.storage.createBucket('avatars', {\n  public: true, // default: false\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Postgres Settings in Supabase\nDESCRIPTION: This SQL query retrieves all Postgres settings and their descriptions from the pg_settings view.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pg_settings;\n```\n\n----------------------------------------\n\nTITLE: Creating Login Page with Supabase Authentication in Flutter\nDESCRIPTION: This snippet defines a LoginPage widget that allows users to sign in with their email and password using Supabase authentication. Upon successful login, users are redirected to the MFA verification page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:mfa_app/main.dart';\nimport 'package:mfa_app/pages/mfa/verify_page.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass LoginPage extends StatefulWidget {\n  static const route = '/auth/login';\n\n  const LoginPage({super.key});\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Login')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 24),\n        children: [\n          TextFormField(\n            controller: _emailController,\n            decoration: const InputDecoration(\n              label: Text('Email'),\n            ),\n          ),\n          const SizedBox(height: 16),\n          TextFormField(\n            controller: _passwordController,\n            decoration: const InputDecoration(\n              label: Text('Password'),\n            ),\n            obscureText: true,\n          ),\n          const SizedBox(height: 16),\n          ElevatedButton(\n            onPressed: () async {\n              try {\n                final email = _emailController.text.trim();\n                final password = _passwordController.text.trim();\n                await supabase.auth.signInWithPassword(\n                  email: email,\n                  password: password,\n                );\n                if (mounted) {\n                  context.go(MFAVerifyPage.route);\n                }\n              } on AuthException catch (error) {\n                ScaffoldMessenger.of(context)\n                    .showSnackBar(SnackBar(content: Text(error.message)));\n              } catch (error) {\n                ScaffoldMessenger.of(context).showSnackBar(\n                    const SnackBar(content: Text('Unexpected error occurred')));\n              }\n            },\n            child: const Text('Login'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Paddle Customer Data with Postgres FDW\nDESCRIPTION: This SQL query selects customer information from the Paddle foreign table. It retrieves the id, name, email, and status of customers using the paddle.customers table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect id, name, email, status\nfrom paddle.customers;\n```\n\n----------------------------------------\n\nTITLE: Listing Supabase Functions\nDESCRIPTION: Lists all Functions in the linked Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions list\n```\n\n----------------------------------------\n\nTITLE: Querying Stripe Products Data in PostgreSQL\nDESCRIPTION: SQL query to fetch Stripe products directly from the foreign table in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Fetch all your stripe products in Postgres\nselect *\nfrom products\nlimit 10;\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Embeddings to Collection\nDESCRIPTION: Inserts vector embeddings with metadata into the 'docs' collection using the upsert() method\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\n# create vector store client\ndocs = vecs.get_or_create_collection(name=\"docs\", dimension=3)\n\n# a collection of vectors with 3 dimensions\nvectors=[\n  (\"vec0\", [0.1, 0.2, 0.3], {\"year\": 1973}),\n  (\"vec1\", [0.7, 0.8, 0.9], {\"year\": 2012})\n]\n\n# insert our vectors\ndocs.upsert(vectors=vectors)\n```\n\n----------------------------------------\n\nTITLE: Importing MongoDB JSON Data into Supabase\nDESCRIPTION: JavaScript script using the Supabase JavaScript client to import MongoDB JSON data into a Supabase table. It reads the JSON file and inserts each document as a row in the specified table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport fs from 'fs'\n\nconst supabaseUrl = 'YOUR_SUPABASE_URL'\nconst supabaseKey = 'YOUR_SUPABASE_API_KEY'\nconst tableName = 'YOUR_TABLE_NAME'\nconst jsonFilePath = './filename.json'\n\nconst supabase = createClient(supabaseUrl, supabaseKey)\n\nasync function loadDocumentsToSupabase() {\n  try {\n    // Read JSON file\n    const rawData = fs.readFileSync(jsonFilePath)\n    const dataArray = JSON.parse(rawData).map((data) => ({ data }))\n\n    // Insert data into Supabase\n    const { error } = await supabase.from(tableName).insert(dataArray)\n\n    if (error) {\n      console.error('Error inserting data:', error)\n      return\n    }\n\n    console.log(`Successfully inserted ${dataArray.length} records into ${tableName}`)\n  } catch (error) {\n    console.error('Error in process:', error)\n  }\n}\n\nloadDocumentsToSupabase()\n```\n\n----------------------------------------\n\nTITLE: Android Deep Link Configuration (Flutter)\nDESCRIPTION: This XML snippet demonstrates how to configure deep linking in the AndroidManifest.xml file for a Flutter application.  It sets up an intent filter to handle URIs with a specific scheme and host, allowing the app to be opened via deep links.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  <!-- ... other tags -->\n  <application ...>\n    <activity ...>\n      <!-- ... other tags -->\n\n      <!-- Deep Links -->\n      <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST -->\n        <data\n          android:scheme=\"YOUR_SCHEME\"\n          android:host=\"YOUR_HOSTNAME\" />\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Enabling PostGIS Extension in Supabase\nDESCRIPTION: This SQL command enables the PostGIS extension in the Supabase project, allowing for advanced geospatial functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension postgis with schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma for Postgres on Supabase in TypeScript\nDESCRIPTION: This snippet shows how to configure Prisma to work with Postgres databases hosted on Supabase, including connection string setup and multi-schema support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"POSTGRES_PRISMA_URL\")\n  directUrl = env(\"POSTGRES_URL_NON_POOLING\")\n  schemas   = [\"prisma\"] // see multi-schema support below\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"multiSchema\"]\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  // ...\n\n  @@schema(\"prisma\")\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Against Schema with pg_jsonschema\nDESCRIPTION: Example of using the json_matches_schema function to validate a JSON object against a schema that requires the instance to be an object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_jsonschema.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  extensions.json_matches_schema(\n    schema := '{\"type\": \"object\"}',\n    instance := '{}'\n  );\n```\n\n----------------------------------------\n\nTITLE: Email Template Configuration for Redirect URLs\nDESCRIPTION: Example of updating email templates to support custom redirect URLs by replacing SiteURL with RedirectTo variable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/redirect-urls.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Old -->\n<a href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email\">Confirm your mail</a>\n\n<!-- New -->\n<a href=\"{{ .RedirectTo }}/auth/confirm?token_hash={{ .TokenHash }}&type=email\">Confirm your mail</a>\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase Data in SvelteKit Component\nDESCRIPTION: Svelte component that renders the list of instruments fetched from Supabase as an unordered list.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { data } = $props();\n</script>\n\n<ul>\n  {#each data.instruments as instrument}\n    <li>{instrument.name}</li>\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Querying with Text Distance Ranking Using RUM Index\nDESCRIPTION: Example of a SELECT query that uses a RUM index for full-text search, with results ordered by the text distance operator (<=>), which measures relevance between tsvector and tsquery.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT t, a `<=>` to_tsquery('english', 'beautiful | place') AS rank\n    FROM test_rum\n    WHERE a @@ to_tsquery('english', 'beautiful | place')\n    ORDER BY a `<=>` to_tsquery('english', 'beautiful | place');\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with Supabase Client constructor\nDESCRIPTION: Example of initializing Sentry with the Supabase Client constructor for error monitoring. Configures tracing, breadcrumbs, and error tracking functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Sentry from '@sentry/browser'\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { supabaseIntegration } from '@supabase/sentry-js-integration'\n\nSentry.init({\n  dsn: SENTRY_DSN,\n  integrations: [\n    supabaseIntegration(SupabaseClient, Sentry, {\n      tracing: true,\n      breadcrumbs: true,\n      errors: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Function Secret for Ollama Server\nDESCRIPTION: Sets the AI_INFERENCE_API_HOST environment secret for the Supabase function to point to the deployed Ollama server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set AI_INFERENCE_API_HOST=https://path-to-your-llm-server/\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In and Sign Out Actions in SvelteKit\nDESCRIPTION: This snippet shows how to implement sign in and sign out actions in SvelteKit using Supabase authentication. It includes error handling and redirection after successful authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fail, redirect } from '@sveltejs/kit'\nimport { AuthApiError } from '@supabase/supabase-js'\n\nexport const actions = {\n  signin: async ({ request, locals: { supabase } }) => {\n    const formData = await request.formData()\n\n    const email = formData.get('email') as string\n    const password = formData.get('password') as string\n\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n\n    if (error) {\n      if (error instanceof AuthApiError && error.status === 400) {\n        return fail(400, {\n          error: 'Invalid credentials.',\n          values: {\n            email,\n          },\n        })\n      }\n      return fail(500, {\n        error: 'Server error. Try again later.',\n        values: {\n          email,\n        },\n      })\n    }\n\n    redirect(303, '/dashboard')\n  },\n\n  signout: async ({ locals: { supabase } }) => {\n    await supabase.auth.signOut()\n    redirect(303, '/')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Select Privilege with Grant Option in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to grant select privilege with the 'grant option', allowing the grantee to further grant this privilege to others.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> grant select on public.apps to postgres with grant option;\nGRANT\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase Inspect DB Help Command\nDESCRIPTION: Shows the help command for the 'supabase inspect db' CLI tool, which provides various utilities for inspecting and debugging Postgres databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nsupabase inspect db --help\nTools to inspect your Supabase database\n\nUsage:\n  supabase inspect db [command]\n\nAvailable Commands:\n  bloat                Estimates space allocated to a relation that is full of dead tuples\n  blocking             Show queries that are holding locks and the queries that are waiting for them to be released\n  cache-hit            Show cache hit rates for tables and indices\n  calls                Show queries from pg_stat_statements ordered by total times called\n  index-sizes          Show index sizes of individual indexes\n  index-usage          Show information about the efficiency of indexes\n  locks                Show queries which have taken out an exclusive lock on a relation\n  long-running-queries Show currently running queries running for longer than 5 minutes\n  outliers             Show queries from pg_stat_statements ordered by total execution time\n  replication-slots    Show information about replication slots on the database\n  role-connections     Show number of active connections for all database roles\n  seq-scans            Show number of sequential scans recorded against all tables\n  table-index-sizes    Show index sizes of individual tables\n  table-record-counts  Show estimated number of rows per table\n  table-sizes          Show table sizes of individual tables without their index sizes\n  total-index-size     Show total size of all indexes\n  total-table-sizes    Show total table sizes, including table index sizes\n  unused-indexes       Show indexes with low usage\n  vacuum-stats         Show statistics related to vacuum operations per table\n```\n```\n\n----------------------------------------\n\nTITLE: Supabase Config with Import Map\nDESCRIPTION: Configuration in config.toml for specifying import map location.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[functions.my-function]\nimport_map = \"./supabase/functions/my-function/import_map.json\"\n```\n\n----------------------------------------\n\nTITLE: Pulling Database Migrations\nDESCRIPTION: Commands to pull existing database schema and migrations from a Supabase project using the database connection string\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase db pull --db-url <db_connection_string>\n\n# Your Database connection string will look like this:\n# postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Viewing global autovacuum settings in PostgreSQL\nDESCRIPTION: This SQL query retrieves all autovacuum-related global settings from the PostgreSQL configuration system, showing current parameter values that affect vacuum behavior.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nSELECT * from pg_settings where category like 'Autovacuum';\n```\n\n----------------------------------------\n\nTITLE: Sample SQL Query for Books with Filtering, Ordering, and Pagination\nDESCRIPTION: This SQL query selects the title and description from a books table, filters for descriptions containing 'cheese', orders results by title in descending order, and implements pagination with a limit of 5 records starting from offset 10.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-rest.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  title,\n  description\nfrom\n  books\nwhere\n  description ilike '%cheese%'\norder by\n  title desc\nlimit\n  5\noffset\n  10\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JWT for Realtime in Swift\nDESCRIPTION: This Swift snippet illustrates how to set a custom JWT token for Supabase Realtime authentication. The `setAuth` method is called to apply the custom token.  A Realtime channel is then set up to listen for Postgres changes on a specific table with a filter applied, and then subscribed to. It then iterates through the changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_51\n\nLANGUAGE: swift\nCODE:\n```\nawait supabase.realtime.setAuth(\"your-custom-jwt\")\n\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  UpdateAction.self,\n  schema: \"public\",\n  table: \"products\",\n  filter: \"name=in.(red, blue, yellow)\"\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Foreign Table for Stripe Products in PostgreSQL\nDESCRIPTION: SQL command to create a foreign table that maps to Stripe products data, defining the table structure with columns for product details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a foreign table for your Stripe products\ncreate foreign table products (\n  id text,\n  name text,\n  description text,\n  default_price text\n)\nserver my_stripe_server\noptions ( object 'products' );\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships in Dart\nDESCRIPTION: Dart example showing how to query teams with their related users through a many-to-many relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.from('teams').select('id, team_name, users(id, name)');\n```\n\n----------------------------------------\n\nTITLE: Tracking Presence with Supabase Realtime JavaScript\nDESCRIPTION: This snippet demonstrates how to track a user's presence in a Supabase Realtime channel. It uses the `track` method on the channel object to set the user's state. The code assumes that a Supabase client has already been initialized and a channel has been created.  It also shows how to store a timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\nconst roomOne = supabase.channel('room-one') // set your topic here\n\n// ---cut---\nconst presenceTrackStatus = await roomOne.track({\n  user: 'user-1',\n  online_at: new Date().toISOString(),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security for SSO Tenants\nDESCRIPTION: SQL policy definition for implementing multi-tenant access control using Row Level Security in PostgreSQL, utilizing the provider's identifier from the user's JWT.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Only allow read-write access to tenants\" on tablename as restrictive to authenticated using (\n  tenant_id = (select auth.jwt() -> 'app_metadata' ->> 'provider')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Widget\nDESCRIPTION: Implementation of password reset functionality using SupaResetPassword widget.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nSupaResetPassword(\n  accessToken: supabase.auth.currentSession?.accessToken,\n  onSuccess: (UserResponse response) {},\n  onError: (error) {},\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Supabase Services\nDESCRIPTION: This process outlines how to update the Supabase services by modifying the version number in the Docker compose file followed by pulling the latest images and restarting the services. Useful for applying patches and new features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\n docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Database Role and Secrets Query Commands\nDESCRIPTION: SQL commands to view database roles and query the secrets table after assuming the devotee role. Demonstrates privilege escalation through role switching.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pg_roles;\nSET ROLE devotee;\nSELECT * FROM secrets;\n```\n\n----------------------------------------\n\nTITLE: Defining Community Supported Projects\nDESCRIPTION: This JavaScript code defines an array of objects named `community`. Each object represents a community-driven project that helps users deploy Supabase. The objects contain the project's name, a brief description, and a link to the project's repository or documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const community = [\n  {\n    name: 'Kubernetes',\n    description: 'Helm charts to deploy a Supabase on Kubernetes.',\n    href: 'https://github.com/supabase-community/supabase-kubernetes',\n  },\n  {\n    name: 'Terraform',\n    description: 'A community-driven Terraform Provider for Supabase.',\n    href: 'https://github.com/supabase-community/supabase-terraform',\n  },\n  {\n    name: 'Traefik',\n    description: 'A self-hosted Supabase setup with Traefik as a reverse proxy.',\n    href: 'https://github.com/supabase-community/supabase-traefik',\n  },\n  {\n    name: 'AWS',\n    description: 'A CloudFormation template for Supabase.',\n    href: 'https://github.com/supabase-community/supabase-on-aws',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Foreign Table in Postgres\nDESCRIPTION: SQL command to query a foreign table after it has been imported from the remote database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from \"<foreign_table>\"\n```\n\n----------------------------------------\n\nTITLE: Deploy Edge Function Commands\nDESCRIPTION: Series of commands to deploy the Edge Function to a hosted Supabase project and set environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link\nsupabase functions deploy amazon-bedrock\nsupabase secrets set --env-file supabase/.env\n```\n\n----------------------------------------\n\nTITLE: Execute pgloader Migration Command\nDESCRIPTION: Bash command to execute the database migration using pgloader with a configuration file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npgloader config.load\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket using SQL in Supabase Storage\nDESCRIPTION: This SQL snippet demonstrates how to create a new bucket in Supabase Storage named 'avatars'. It inserts a new row into the `storage.buckets` table, specifying the bucket's ID and name. This allows users to organize their files within distinct containers with specific security and access rules.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Use Postgres to create a bucket.\n\ninsert into storage.buckets\n  (id, name)\nvalues\n  ('avatars', 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Regular Expressions for Log Filtering\nDESCRIPTION: Demonstrates the use of the period (.) wildcard operator to match any character in a pattern. This example will match strings like 'helloworld', 'hello-world', etc.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- find event_messages like \"hello<anything>world\"\nregexp_contains(event_message, 'hello.world')\n```\n\n----------------------------------------\n\nTITLE: Staging Deployment GitHub Action\nDESCRIPTION: GitHub Actions workflow for deploying database migrations to staging environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Migrations to Staging\n\non:\n  push:\n    branches:\n      - develop\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}\n      SUPABASE_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}\n      SUPABASE_PROJECT_ID: ${{ secrets.STAGING_PROJECT_ID }}\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n\n      - run: supabase link --project-ref $SUPABASE_PROJECT_ID\n      - run: supabase db push\n```\n\n----------------------------------------\n\nTITLE: Sign In Anonymously with JavaScript in Supabase\nDESCRIPTION: Creates an anonymous user authentication session using the Supabase JavaScript client. This allows users to access authenticated features without providing personal information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.signInAnonymously()\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Routes with Expo Router and Supabase Auth\nDESCRIPTION: This layout component manages authentication-based navigation in a React Native app using Expo Router. It automatically redirects users based on their authentication status - authenticated users to the list page and unauthenticated users to the login page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, useRouter, useSegments } from 'expo-router'\nimport { useEffect } from 'react'\nimport { AuthProvider, useAuth } from '../provider/AuthProvider'\n\n// Makes sure the user is authenticated before accessing protected pages\nconst InitialLayout = () => {\n  const { session, initialized } = useAuth()\n  const segments = useSegments()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (!initialized) return\n\n    // Check if the path/url is in the (auth) group\n    const inAuthGroup = segments[0] === '(auth)'\n\n    if (session && !inAuthGroup) {\n      // Redirect authenticated users to the list page\n      router.replace('/list')\n    } else if (!session) {\n      // Redirect unauthenticated users to the login page\n      router.replace('/')\n    }\n  }, [session, initialized])\n\n  return <Slot />\n}\n\n// Wrap the app with the AuthProvider\nconst RootLayout = () => {\n  return (\n    <AuthProvider>\n      <InitialLayout />\n    </AuthProvider>\n  )\n}\n\nexport default RootLayout\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Sparse Vector Table\nDESCRIPTION: Demonstrates creation and population of a table using sparse vectors to save storage space for vectors with many zero components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate embedding_sparse (\n  id serial,\n  vector sparsevec(1536),\n  primary key (id)\n)\n\ninsert into embedding_sparse (embedding) values ('{1:0.1,3:0.2,5:0.3}/1536'), ('{1:0.4,3:0.5,5:0.6}/1536');\n```\n\n----------------------------------------\n\nTITLE: Simple Metadata Filtering in LangChain\nDESCRIPTION: Demonstration of using metadata filtering with Supabase vector store for more targeted similarity searches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SupabaseVectorStore } from 'langchain/vectorstores/supabase'\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai'\nimport { createClient } from '@supabase/supabase-js'\n\nconst privateKey = process.env.SUPABASE_SERVICE_ROLE_KEY\nif (!privateKey) throw new Error(`Expected env var SUPABASE_SERVICE_ROLE_KEY`)\n\nconst url = process.env.SUPABASE_URL\nif (!url) throw new Error(`Expected env var SUPABASE_URL`)\n\nexport const run = async () => {\n  const client = createClient(url, privateKey)\n\n  const vectorStore = await SupabaseVectorStore.fromTexts(\n    ['Hello world', 'Hello world', 'Hello world'],\n    [{ user_id: 2 }, { user_id: 1 }, { user_id: 3 }],\n    new OpenAIEmbeddings(),\n    {\n      client,\n      tableName: 'documents',\n      queryName: 'match_documents',\n    }\n  )\n\n  const result = await vectorStore.similaritySearch('Hello world', 1, {\n    user_id: 3,\n  })\n\n  console.log(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding FCM Token Column to Existing Profiles Table\nDESCRIPTION: SQL command to alter an existing profiles table by adding a column for storing Firebase Cloud Messaging tokens. This enables existing Supabase implementations to add push notification capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE public.profiles\nADD COLUMN fcm_token text;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication View in SwiftUI\nDESCRIPTION: Creates a login view with email authentication using magic links and deep linking support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport Supabase\n\nstruct AuthView: View {\n  @State var email = \"\"\n  @State var isLoading = false\n  @State var result: Result<Void, Error>?\n\n  var body: some View {\n    Form {\n      Section {\n        TextField(\"Email\", text: $email)\n          .textContentType(.emailAddress)\n          .textInputAutocapitalization(.never)\n          .autocorrectionDisabled()\n      }\n\n      Section {\n        Button(\"Sign in\") {\n          signInButtonTapped()\n        }\n\n        if isLoading {\n          ProgressView()\n        }\n      }\n\n      if let result {\n        Section {\n          switch result {\n          case .success:\n            Text(\"Check your inbox.\")\n          case .failure(let error):\n            Text(error.localizedDescription).foregroundStyle(.red)\n          }\n        }\n      }\n    }\n    .onOpenURL(perform: { url in\n      Task {\n        do {\n          try await supabase.auth.session(from: url)\n        } catch {\n          self.result = .failure(error)\n        }\n      }\n    })\n  }\n\n  func signInButtonTapped() {\n    Task {\n      isLoading = true\n      defer { isLoading = false }\n\n      do {\n        try await supabase.auth.signInWithOTP(\n            email: email,\n            redirectTo: URL(string: \"io.supabase.user-management://login-callback\")\n        )\n        result = .success(())\n      } catch {\n        result = .failure(error)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SSO Callback in SvelteKit\nDESCRIPTION: SvelteKit code for handling the SSO callback. It exchanges the authorization code for a session and handles errors. This is necessary when redirecting to a URL other than the Site URL in cross-origin authentication scenarios.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { error, redirect } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\nexport const GET: RequestHandler = async ({ url, locals }) => {\n  const code = url.searchParams.get('code')\n\n  if (!code) {\n    error(400, 'No authorization code provided')\n  }\n\n  const { error: tokenExchangeError } = await locals.supabase.auth.exchangeCodeForSession(code)\n\n  if (tokenExchangeError) {\n    error(400, 'Failed to exchange authorization code for session')\n  }\n\n  redirect(303, '/')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Specific Logging in PGAudit\nDESCRIPTION: SQL commands to set up and remove PGAudit logging for a specific database user, using 'zapier' as an example.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate user \"zapier\" with password '<new password>';\n\nalter role \"zapier\" set pgaudit.log to 'all';\n\n-- disables role's log\nalter role \"zapier\" set pgaudit.log to 'none';\n\n-- check to make sure the changes are finalized:\nselect\n  rolname,\n  rolconfig\nfrom pg_roles\nwhere rolname = 'zapier';\n-- should return a rolconfig path with \"pgaudit.log=none\" present\n```\n\n----------------------------------------\n\nTITLE: Basic LangChain Vector Store Usage with Supabase\nDESCRIPTION: Example showing how to initialize and use Supabase vector store with LangChain for similarity search operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SupabaseVectorStore } from 'langchain/vectorstores/supabase'\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY\nif (!supabaseKey) throw new Error(`Expected SUPABASE_SERVICE_ROLE_KEY`)\n\nconst url = process.env.SUPABASE_URL\nif (!url) throw new Error(`Expected env var SUPABASE_URL`)\n\nexport const run = async () => {\n  const client = createClient(url, supabaseKey)\n\n  const vectorStore = await SupabaseVectorStore.fromTexts(\n    ['Hello world', 'Bye bye', \"What's this?\"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings(),\n    {\n      client,\n      tableName: 'documents',\n      queryName: 'match_documents',\n    }\n  )\n\n  const resultOne = await vectorStore.similaritySearch('Hello world', 1)\n\n  console.log(resultOne)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Seed Data in Supabase\nDESCRIPTION: SQL files placed in ./supabase/seed.sql will be used to populate Preview Branches with initial data. This provides isolated test environments without using production data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_7\n\nLANGUAGE: filepath\nCODE:\n```\n./supabase/seed.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in SvelteKit\nDESCRIPTION: This SvelteKit snippet sets up an API endpoint to confirm token exchanges. It cleans up the redirect URL, verifies the OTP via Supabase, and either redirects users to a specified location or an error page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit'\nimport { type EmailOtpType } from '@supabase/supabase-js'\n\nexport const GET = async (event) => {\n  const {\n    url,\n    locals: { supabase },\n  } = event\n  const token_hash = url.searchParams.get('token_hash') as string\n  const type = url.searchParams.get('type') as EmailOtpType | null\n  const next = url.searchParams.get('next') ?? '/'\n\n  /**\n   * Clean up the redirect URL by deleting the Auth flow parameters.\n   *\n   * `next` is preserved for now, because it's needed in the error case.\n   */\n  const redirectTo = new URL(url)\n  redirectTo.pathname = next\n  redirectTo.searchParams.delete('token_hash')\n  redirectTo.searchParams.delete('type')\n\n  if (token_hash && type) {\n    const { error } = await supabase.auth.verifyOtp({ token_hash, type })\n    if (!error) {\n      redirectTo.searchParams.delete('next')\n      redirect(303, redirectTo)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  redirectTo.pathname = '/auth/error'\n  redirect(303, redirectTo)\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating OAuth Sign In with WorkOS in Supabase using JavaScript\nDESCRIPTION: This snippet demonstrates how to implement OAuth sign-in using WorkOS in a Supabase project. It initializes a Supabase client and defines a function that calls the signInWithOAuth method with the WorkOS provider. The redirect URL must be set in the Supabase dashboard. The function handles the response by redirecting the user if login is successful.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-workos.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\nconst supabase = createClient('<your-project-url>', '<your-anon-key>');\nconst redirect = (url: string) => {}\n\n// ---cut---\nasync function signInWithWorkOS() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'workos',\n    options: {\n      redirectTo: 'http://example.com/auth/v1/callback', // Make sure your redirect URL is configured in the Supabase Dashboard Auth settings\n      queryParams: {\n        connection: '<connection_id>',\n      },\n    },\n  })\n\n  if (data.url) {\n    redirect(data.url) // use the redirect API for your server or framework\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Configuration for Edge Functions\nDESCRIPTION: TOML configuration file example for setting function-specific options like JWT verification and import map location.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cicd-workflow.mdx#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[functions.hello-world]\nverify_jwt = false\n```\n\n----------------------------------------\n\nTITLE: Handling ZIP File Upload with Deno Edge Function\nDESCRIPTION: Example showing how to write a user-uploaded ZIP file to temporary storage using Deno's file system APIs. The function checks the content type, generates a unique ID, and writes the file to the /tmp directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ephemeral-storage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDeno.serve(async (req) => {\n  if (req.headers.get('content-type') !== 'application/zip') {\n    return new Response('file must be a zip file', {\n      status: 400,\n    })\n  }\n\n  const uploadId = crypto.randomUUID()\n  await Deno.writeFile('/tmp/' + uploadId, req.body)\n\n  // do something with the written zip file\n\n  return new Response('ok')\n})\n```\n\n----------------------------------------\n\nTITLE: Query Pushdown Example with Stripe Customers\nDESCRIPTION: Demonstrates how to use query pushdown functionality with Stripe FDW to efficiently query customer data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom stripe.customers\nwhere id = 'cus_N5WMk7pvQPkY3B';\n```\n\n----------------------------------------\n\nTITLE: Refreshing Materialized View in PostgreSQL\nDESCRIPTION: Shows how to refresh a materialized view to update its stored data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nrefresh materialized view transcripts;\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client with npm\nDESCRIPTION: This snippet shows how to install the Prisma client and generate its model using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/client\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Creating Sample SQL Schema for Complex Queries\nDESCRIPTION: Creates sample SQL schema for countries and cities tables with a relation between them.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ncreate table countries (\n  \"id\" serial primary key,\n  \"name\" text\n);\n\ncreate table cities (\n  \"id\" serial primary key,\n  \"name\" text,\n  \"country_id\" int references \"countries\"\n);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Database Stored Procedure Call in Supabase\nDESCRIPTION: This SQL snippet shows how to schedule a cron job to call a database stored procedure every 5 minutes using the cron.schedule function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.schedule('call-db-procedure', '*/5 * * * *', 'CALL my_procedure()');\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Policy using SQL in Supabase\nDESCRIPTION: This SQL snippet creates a policy named \"Public Access\" on the `storage.objects` table in Supabase. It grants `SELECT` permissions, allowing anyone to download files, but only if the `bucket_id` is 'public'. This policy enables public read access to files within the 'public' bucket.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n-- Use SQL to create a policy.\n\ncreate policy \"Public Access\"\n  on storage.objects for select\n  using ( bucket_id = 'public' );\n```\n\n----------------------------------------\n\nTITLE: Defining ChatMessage Type Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of a `ChatMessage`, which includes an `id`, `content`, `user` details, and `createdAt` timestamp. This type is crucial for maintaining type safety when managing chat messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChatMessage {\n  id: string\n  content: string\n  user: {\n    name: string\n  }\n  createdAt: string\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component in Svelte Account Page\nDESCRIPTION: Shows how to add an Avatar component to a form widget in a Svelte account page. The component is configured with Supabase integration, two-way URL binding, and a upload completion handler that triggers form submission.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- src/routes/account/+page.svelte -->\n<script lang=\"ts\">\n  // Import the new component\n  import Avatar from './Avatar.svelte'\n</script>\n\n<div class=\"form-widget\">\n  <form\n    class=\"form-widget\"\n    method=\"post\"\n    action=\"?/update\"\n    use:enhance={handleSubmit}\n    bind:this={profileForm}\n  >\n    <!-- Add to body -->\n    <Avatar\n        {supabase}\n        bind:url={avatarUrl}\n        size={10}\n        on:upload={() => {\n          profileForm.requestSubmit();\n        }}\n      />\n\n    <!-- Other form elements -->\n  </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Completed and Failed Embedding Jobs in JSON\nDESCRIPTION: This JSON snippet represents the structure of the response received from the 'embed' Edge Function after processing embedding jobs. It details successful and failed job data and is used for debugging purposes, with headers indicating job completion metrics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"completedJobs\": [\n    {\n      \"jobId\": \"1\",\n      \"id\": \"1\",\n      \"schema\": \"public\",\n      \"table\": \"documents\",\n      \"contentFunction\": \"embedding_input\",\n      \"embeddingColumn\": \"embedding\"\n    }\n  ],\n  \"failedJobs\": [\n    {\n      \"jobId\": \"2\",\n      \"id\": \"2\",\n      \"schema\": \"public\",\n      \"table\": \"documents\",\n      \"contentFunction\": \"embedding_input\",\n      \"embeddingColumn\": \"embedding\",\n      \"error\": \"error connecting to openai api\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Batch Messages\nDESCRIPTION: Sends multiple JSON messages to a queue in a single operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.send_batch(\n    'my_queue',\n    array[\n      '{\"hello\": \"world_0\"}'::jsonb,\n      '{\"hello\": \"world_1\"}'::jsonb\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security Policies in Supabase\nDESCRIPTION: Sets up Row Level Security for the database schema including helper functions for role checking and post limit verification. Defines policies for profiles, organizations, org members, posts, and comments based on user roles and membership status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a private schema to store all security definer functions utils\n-- As such functions should never be in a API exposed schema\ncreate schema if not exists private;\n-- Helper function for role checks\ncreate or replace function private.get_user_org_role(org_id bigint, user_id uuid)\nreturns text\nset search_path = ''\nas $$\n  select role from public.org_members\n  where org_id = $1 and user_id = $2;\n-- Note the use of security definer to avoid RLS checking recursion issue\n-- see: https://supabase.com/docs/guides/database/postgres/row-level-security#use-security-definer-functions\n$$ language sql security definer;\n-- Helper utils to check if an org is below the max post limit\ncreate or replace function private.can_add_post(org_id bigint)\nreturns boolean\nset search_path = ''\nas $$\n  select (select count(*)\n          from public.posts p\n          where p.org_id = $1) < o.max_posts\n  from public.organizations o\n  where o.id = $1\n$$ language sql security definer;\n\n\n-- Enable RLS for all tables\nalter table public.profiles enable row level security;\nalter table public.organizations enable row level security;\nalter table public.org_members enable row level security;\nalter table public.posts enable row level security;\nalter table public.comments enable row level security;\n\n-- Profiles policies\ncreate policy \"Public profiles are viewable by everyone\"\n  on public.profiles for select using (true);\n\ncreate policy \"Users can insert their own profile\"\n  on public.profiles for insert with check ((select auth.uid()) = id);\n\ncreate policy \"Users can update their own profile\"\n  on public.profiles for update using ((select auth.uid()) = id)\n  with check ((select auth.uid()) = id);\n\n-- Organizations policies\ncreate policy \"Public org info visible to all\"\n  on public.organizations for select using (true);\n\ncreate policy \"Org management restricted to owners\"\n  on public.organizations for all using (\n    private.get_user_org_role(id, (select auth.uid())) = 'owner'\n  );\n\n-- Org Members policies\ncreate policy \"Members visible to org members\"\n  on public.org_members for select using (\n    private.get_user_org_role(org_id, (select auth.uid())) is not null\n  );\n\ncreate policy \"Member management restricted to admins and owners\"\n  on public.org_members for all using (\n    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')\n  );\n\n-- Posts policies\ncreate policy \"Complex post visibility\"\n  on public.posts for select using (\n    -- Published non-premium posts are visible to all\n    (status = 'published' and not is_premium)\n    or\n    -- Premium posts visible to org members only\n    (status = 'published' and is_premium and\n    private.get_user_org_role(org_id, (select auth.uid())) is not null)\n    or\n    -- All posts visible to editors and above\n    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')\n  );\n\ncreate policy \"Post creation rules\"\n  on public.posts for insert with check (\n    -- Must be org member with appropriate role\n    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')\n    and\n    -- Check org post limits for free plans\n    (\n      (select o.plan_type != 'free'\n      from organizations o\n      where o.id = org_id)\n      or\n      (select private.can_add_post(org_id))\n    )\n  );\n\ncreate policy \"Post update rules\"\n  on public.posts for update using (\n    exists (\n      select 1\n      where\n        -- Editors can update non-published posts\n        (private.get_user_org_role(org_id, (select auth.uid())) = 'editor' and status != 'published')\n        or\n        -- Admins and owners can update any post\n        private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')\n    )\n  );\n\n-- Comments policies\ncreate policy \"Comments on published posts are viewable by everyone\"\n  on public.comments for select using (\n    exists (\n      select 1 from public.posts\n      where id = post_id\n      and status = 'published'\n    )\n    and not is_deleted\n  );\n\ncreate policy \"Authenticated users can create comments\"\n  on public.comments for insert with check ((select auth.uid()) = author_id);\n\ncreate policy \"Users can update their own comments\"\n  on public.comments for update using (author_id = (select auth.uid()));\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security Policy\nDESCRIPTION: Creates a Row Level Security policy that restricts users to only insert their own messages using auth.uid() function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"Individuals can only write their own messages.\" ON messages FOR\n    INSERT WITH CHECK ((select auth.uid()) = user_id);\n```\n\n----------------------------------------\n\nTITLE: Generating a model and running database migrations in Rails\nDESCRIPTION: Creates an Article model with title and body fields, then runs the migration to set up the corresponding database table. The first command generates the model and migration files, while the second executes the migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate model Article title:string body:text\nbin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Context Provider for React Native with Supabase\nDESCRIPTION: This code creates a React Context for handling authentication state across the app. It subscribes to Supabase's auth state changes, manages the user session, and provides a sign-out function that can be accessed throughout the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState, useEffect, createContext, PropsWithChildren } from 'react'\nimport { Session, User } from '@supabase/supabase-js'\nimport { supabase } from '../config/initSupabase'\n\ntype AuthProps = {\n  user: User | null\n  session: Session | null\n  initialized?: boolean\n  signOut?: () => void\n}\n\nexport const AuthContext = createContext<Partial<AuthProps>>({})\n\n// Custom hook to read the context values\nexport function useAuth() {\n  return React.useContext(AuthContext)\n}\n\nexport const AuthProvider = ({ children }: PropsWithChildren) => {\n  const [user, setUser] = useState<User | null>()\n  const [session, setSession] = useState<Session | null>(null)\n  const [initialized, setInitialized] = useState<boolean>(false)\n\n  useEffect(() => {\n    // Listen for changes to authentication state\n    const { data } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session)\n      setUser(session ? session.user : null)\n      setInitialized(true)\n    })\n    return () => {\n      data.subscription.unsubscribe()\n    }\n  }, [])\n\n  // Log out the user\n  const signOut = async () => {\n    await supabase.auth.signOut()\n  }\n\n  const value = {\n    user,\n    session,\n    initialized,\n    signOut,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Framework Links Component in JSX\nDESCRIPTION: A React/JSX component that renders a grid of framework quickstart guides, including links to Next.js and SvelteKit documentation with descriptive panels and icons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{[\n    {\n      title: 'Next.js',\n      href: '/guides/auth/server-side/nextjs',\n      description:\n        'Automatically configure Supabase in Next.js to use cookies, making your user and their session available on the client and server.',\n      icon: '/docs/img/icons/nextjs-icon',\n    },\n    {\n      title: 'SvelteKit',\n      href: '/guides/auth/server-side/sveltekit',\n      description:\n        'Automatically configure Supabase in SvelteKit to use cookies, making your user and their session available on the client and server.',\n      icon: '/docs/img/icons/svelte-icon',\n    },\n  ].map((item) => {\n    return (\n      <Link href={`${item.href}`} key={item.title} passHref>\n        <GlassPanel title={item.title} background={false} icon={item.icon}>\n          {item.description}\n        </GlassPanel>\n      </Link>\n    )\n  })}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Trigger Function for Queueing Embeddings\nDESCRIPTION: Implements a PL/pgSQL trigger function that queues embedding jobs when content is inserted or updated. Takes content function name and embedding column name as arguments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_5\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function util.queue_embeddings()\nreturns trigger\nlanguage plpgsql\nas $$\ndeclare\n  content_function text = TG_ARGV[0];\n  embedding_column text = TG_ARGV[1];\nbegin\n  perform pgmq.send(\n    queue_name => 'embedding_jobs',\n    msg => jsonb_build_object(\n      'id', NEW.id,\n      'schema', TG_TABLE_SCHEMA,\n      'table', TG_TABLE_NAME,\n      'contentFunction', content_function,\n      'embeddingColumn', embedding_column\n    )\n  );\n  return NEW;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating Wasm Foreign Data Wrapper in Supabase\nDESCRIPTION: SQL command to create the Wasm foreign data wrapper that will be used to connect to Cal.com services. This is the foundation for the Cal.com integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign data wrapper wasm_wrapper\n  handler wasm_fdw_handler\n  validator wasm_fdw_validator;\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript definitions for event.locals\nDESCRIPTION: This code snippet defines TypeScript interfaces to extend the `event.locals` object in SvelteKit with Supabase-related properties like `supabase`, `safeGetSession`, `session`, and `user`. This prevents TypeScript errors by providing type information for these properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Session, SupabaseClient, User } from '@supabase/supabase-js'\nimport type { Database } from './database.types.ts' // import generated types\n\ndeclare global {\n  namespace App {\n    // interface Error {}\n    interface Locals {\n      supabase: SupabaseClient<Database>\n      safeGetSession: () => Promise<{ session: Session | null; user: User | null }>\n      session: Session | null\n      user: User | null\n    }\n    interface PageData {\n      session: Session | null\n    }\n    // interface PageState {}\n    // interface Platform {}\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Using pg_repack to reorganize PostgreSQL tables without exclusive locks\nDESCRIPTION: The pg_repack extension provides an alternative to VACUUM FULL that doesn't require exclusive table locks, making it less disruptive for production environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npg_repack --table mytable test\n```\n\n----------------------------------------\n\nTITLE: Modifying Constraint to NO ACTION\nDESCRIPTION: Changes the foreign key constraint from RESTRICT to NO ACTION.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter table child\ndrop constraint child_father_fkey;\n\nalter table child\nadd constraint child_father_fkey foreign key (father) references parent (id)\n  on delete no action;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using WebAssembly Module in Edge Function\nDESCRIPTION: This TypeScript code for a Supabase Edge Function imports a WebAssembly module from a local file, instantiates it, and exposes an HTTP endpoint that calls the 'add' function with query parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/wasm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\n// Import the Wasm module\nconst wasmCode = await Deno.readFile(\"./add-wasm/pkg/add_wasm_bg.wasm\");\nconst wasmModule = new WebAssembly.Module(wasmCode);\nconst wasmInstance = new WebAssembly.Instance(wasmModule);\n\nserve(async (req) => {\n  const url = new URL(req.url);\n  const a = parseInt(url.searchParams.get(\"a\") || \"0\");\n  const b = parseInt(url.searchParams.get(\"b\") || \"0\");\n\n  // Call the add function from the Wasm module\n  const result = wasmInstance.exports.add(a, b);\n\n  return new Response(JSON.stringify({ result }), {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Phone Number Signup with Supabase Authentication\nDESCRIPTION: Demonstrates how to sign up users with a phone number and password using Supabase authentication. Creates a new user account with the provided credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\nconst { data, error } = await supabase.auth.signUp({\n  phone: '+13334445555',\n  password: 'some-password',\n})\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.signUp(\n  phone: \"+13334445555\",\n  password: \"some-password\"\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.signUpWith(Phone) {\n    phone = \"+13334445555\"\n    password = \"some-password\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nsupabase.auth.sign_up({\n  'phone': \"+13334445555\",\n  'password': \"some-password\"\n})\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://cvwawazfelidkloqmbma.supabase.co/auth/v1/signup' \\\n-H \"apikey: SUPABASE_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"phone\": \"+13334445555\",\n  \"password\": \"some-password\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Listing Production Secrets\nDESCRIPTION: Command to list all secrets set in the remote environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets list\n```\n\n----------------------------------------\n\nTITLE: Multipart File Upload to S3 using Upload class in JavaScript\nDESCRIPTION: This snippet shows how to perform a multipart upload of a large file to Supabase Storage using the S3 protocol. It utilizes the Upload class from @aws-sdk/lib-storage to split the file into parts and upload them in parallel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/s3-uploads.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { S3Client } from '@aws-sdk/client-s3'\nimport { Upload } from '@aws-sdk/lib-storage'\n\nconst s3Client = new S3Client({...})\n\nconst file = fs.createReadStream('path/to/very-large-file')\n\nconst upload = new Upload(s3Client, {\n  Bucket: 'bucket-name',\n  Key: 'path/to/file',\n  ContentType: 'image/jpeg',\n  Body: file,\n})\n\nawait uploader.done()\n```\n\n----------------------------------------\n\nTITLE: Querying Time-Series Data with Time Bucket\nDESCRIPTION: Example query using TimescaleDB's time_bucket function to aggregate temperature readings into hourly averages for a specific sensor.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/timescaledb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    time_bucket('1 hour', time) AS hour,\n    avg(temperature) AS average_temperature\nfrom\n    temperatures\nwhere\n    sensor_id = 1\n    and time > NOW() - interval '1 hour'\ngroup by\n    hour;\n```\n\n----------------------------------------\n\nTITLE: Handling Card Realtime Updates in Angular Board Component\nDESCRIPTION: This function processes realtime updates for card data. It subscribes to the table changes and handles different event types (INSERT, UPDATE, DELETE) to keep the local card data synchronized with the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n  handleRealtimeUpdates() {\n    this.dataService.getTableChanges().subscribe((update: any) => {\n      const record = update.new?.id ? update.new : update.old;\n      const event = update.eventType;\n\n      if (!record) return;\n\n      if (update.table == 'cards') {\n        if (event === 'INSERT') {\n          this.listCards[record.list_id].push(record);\n        } else if (event === 'UPDATE') {\n          const newArr = [];\n\n          for (let card of this.listCards[record.list_id]) {\n            if (card.id == record.id) {\n              card = record;\n            }\n            newArr.push(card);\n          }\n          this.listCards[record.list_id] = newArr;\n        } else if (event === 'DELETE') {\n          this.listCards[record.list_id] = this.listCards[\n            record.list_id\n          ].filter((card: any) => card.id !== record.id);\n        }\n      } else if (update.table == 'lists') {\n        // TODO\n      }\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Supabase Authentication with CAPTCHA Token\nDESCRIPTION: Implementation of Supabase signUp function with CAPTCHA token integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nawait supabase.auth.signUp({\n  email,\n  password,\n  options: { captchaToken },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Users to Supabase Auth (Node.js)\nDESCRIPTION: This command imports user data from a specified JSON file into Supabase's 'auth.users' table. The path to the JSON file and the optional batch size can be provided.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-auth.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnode import_users.js <path_to_json_file> [<batch_size>]\n```\n\n----------------------------------------\n\nTITLE: Managing Group Admin Privileges\nDESCRIPTION: Shows granting admin privileges to group members.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> grant developers to junior_dev with admin option;\nGRANT ROLE\n\n# as junior_dev\npostgres=> revoke developers from senior_dev;\nREVOKE ROLE\n```\n\n----------------------------------------\n\nTITLE: Creating ProductDetailsViewModel with Hilt and State Management - Kotlin\nDESCRIPTION: Defines a ViewModel for managing detailed product data, using Hilt for dependency injection. It handles loading of specific product details based on a product ID and allows updating the product’s information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\n@HiltViewModel\nclass ProductDetailsViewModel @Inject constructor(\n    private val productRepository: ProductRepository,\n    savedStateHandle: SavedStateHandle,\n    ) : ViewModel() {\n\n    private val _product = MutableStateFlow<Product?>(null)\n    val product: Flow<Product?> = _product\n\n    private val _name = MutableStateFlow(\"\")\n    val name: Flow<String> = _name\n\n    private val _price = MutableStateFlow(0.0)\n    val price: Flow<Double> = _price\n\n    private val _imageUrl = MutableStateFlow(\"\")\n    val imageUrl: Flow<String> = _imageUrl\n\n    init {\n        val productId = savedStateHandle.get<String>(ProductDetailsDestination.productId)\n        productId?.let {\n            getProduct(productId = it)\n        }\n    }\n\n    private fun getProduct(productId: String) {\n        viewModelScope.launch {\n           val result = productRepository.getProduct(productId).asDomainModel()\n            _product.emit(result)\n            _name.emit(result.name)\n            _price.emit(result.price)\n        }\n    }\n\n    fun onNameChange(name: String) {\n        _name.value = name\n    }\n\n    fun onPriceChange(price: Double) {\n        _price.value = price\n    }\n\n    fun onSaveProduct(image: ByteArray) {\n        viewModelScope.launch {\n            productRepository.updateProduct(\n                id = _product.value?.id,\n                price = _price.value,\n                name = _name.value,\n                imageFile = image,\n                imageName = \"image_${_product.value.id}\",\n            )\n        }\n    }\n\n    fun onImageChange(url: String) {\n        _imageUrl.value = url\n    }\n\n    private fun ProductDto.asDomainModel(): Product {\n        return Product(\n            id = this.id,\n            name = this.name,\n            price = this.price,\n            image = this.image\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Example Instruments Table\nDESCRIPTION: SQL commands to create an instruments table with id and name columns, and insert sample data for demonstrating the explain() functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table instruments (\n  id int8 primary key,\n  name text\n);\n\ninsert into books\n  (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n\n----------------------------------------\n\nTITLE: Invoking the Cloudflare Turnstile Function from Client-Side\nDESCRIPTION: JavaScript code example showing how to invoke the deployed Cloudflare Turnstile validation function from a client application using Supabase's function invocation API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {\n  body: { token },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Service for Supabase Integration in Angular\nDESCRIPTION: A service that handles database interactions with Supabase tables. It includes constants for table names and functions for basic board operations such as creating a new board and retrieving all boards for a user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core'\nimport { SupabaseClient, createClient } from '@supabase/supabase-js'\nimport { environment } from 'src/environments/environment'\n\nexport const BOARDS_TABLE = 'boards'\nexport const USER_BOARDS_TABLE = 'user_boards'\nexport const LISTS_TABLE = 'lists'\nexport const CARDS_TABLE = 'cards'\nexport const USERS_TABLE = 'users'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  private supabase: SupabaseClient\n\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n  }\n\n  async startBoard() {\n    // Minimal return will be the default in the next version and can be removed here!\n    return await this.supabase.from(BOARDS_TABLE).insert({}, { returning: 'minimal' })\n  }\n\n  async getBoards() {\n    const boards = await this.supabase.from(USER_BOARDS_TABLE).select(`\n    boards:board_id ( title, id )\n  `)\n    return boards.data || []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users in Supabase Auth Using Plaintext Password - TypeScript\nDESCRIPTION: This snippet shows how to create a user in Supabase Auth using a plaintext password. Similar to the hashed password approach, it requires the '@supabase/supabase-js' library and uses the 'createUser' method, taking the user's email and plaintext password, which Supabase will hash before storing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\\n\\n// ---cut---\\nconst { data, error } = await supabase.auth.admin.createUser({\\n  email: 'valid.email@supabase.io',\\n  password: 'supersecurepassword123!',\\n})\n```\n\n----------------------------------------\n\nTITLE: Chrome Extension Manifest Configuration\nDESCRIPTION: Manifest configuration for enabling Google sign-in in Chrome extensions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"identity\"],\n  \"oauth2\": {\n    \"client_id\": \"<client ID>\",\n    \"scopes\": [\"openid\", \"email\", \"profile\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a pre-test hook for pgTAP in PostgreSQL\nDESCRIPTION: This SQL snippet shows how to create a setup file that runs first in pgTAP tests. It installs shared extensions, dependencies, and common test utilities, and includes a simple test to verify the setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- install tests utilities\n-- install pgtap extension for testing\ncreate extension if not exists pgtap with schema extensions;\n/*\n---------------------\n---- install dbdev ----\n----------------------\nRequires:\n  - pg_tle: https://github.com/aws/pg_tle\n  - pgsql-http: https://github.com/pramsey/pgsql-http\n*/\ncreate extension if not exists http with schema extensions;\ncreate extension if not exists pg_tle;\ndrop extension if exists \"supabase-dbdev\";\nselect pgtle.uninstall_extension_if_exists('supabase-dbdev');\nselect\n    pgtle.install_extension(\n        'supabase-dbdev',\n        resp.contents ->> 'version',\n        'PostgreSQL package manager',\n        resp.contents ->> 'sql'\n    )\nfrom http(\n    (\n        'GET',\n        'https://api.database.dev/rest/v1/'\n        || 'package_versions?select=sql,version'\n        || '&package_name=eq.supabase-dbdev'\n        || '&order=version.desc'\n        || '&limit=1',\n        array[\n            ('apiKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtdXB0cHBsZnZpaWZyYndtbXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODAxMDczNzIsImV4cCI6MTk5NTY4MzM3Mn0.z2CN0mvO2No8wSi46Gw59DFGCTJrzM0AQKsu_5k134s')::http_header\n        ],\n        null,\n        null\n    )\n) x,\nlateral (\n    select\n        ((row_to_json(x) -> 'content') #>> '{}')::json -> 0\n) resp(contents);\ncreate extension \"supabase-dbdev\";\nselect dbdev.install('supabase-dbdev');\ndrop extension if exists \"supabase-dbdev\";\ncreate extension \"supabase-dbdev\";\n-- Install test helpers\nselect dbdev.install('basejump-supabase_test_helpers');\ncreate extension if not exists \"basejump-supabase_test_helpers\" version '0.0.6';\n\n-- Verify setup with a no-op test\nbegin;\nselect plan(1);\nselect ok(true, 'Pre-test hook completed successfully');\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with SQL\nDESCRIPTION: SQL script to create the profiles and messages tables in Supabase. The profiles table stores user information, while the messages table stores chat content with references to user profiles. Includes constraints for validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists public.profiles (\n    id uuid references auth.users on delete cascade not null primary key,\n    username varchar(24) not null unique,\n    created_at timestamp with time zone default timezone('utc' :: text, now()) not null,\n\n    -- username should be 3 to 24 characters long containing alphabets, numbers and underscores\n    constraint username_validation check (username ~* '^[A-Za-z0-9_]{3,24}$')\n);\ncomment on table public.profiles is 'Holds all of users profile information';\n\ncreate table if not exists public.messages (\n    id uuid not null primary key default gen_random_uuid(),\n    profile_id uuid default auth.uid() references public.profiles(id) on delete cascade not null,\n    content varchar(500) not null,\n    created_at timestamp with time zone default timezone('utc' :: text, now()) not null\n);\ncomment on table public.messages is 'Holds individual messages sent on the app.';\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase client with service_role secret for server-side use in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a separate Supabase client using the createClient method from @supabase/supabase-js, providing it with the service_role secret. It also disables certain auth properties to ensure proper functionality in a server environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/performing-administration-tasks-on-the-server-side-with-the-servicerole-secret-BYM4Fa.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(supabaseUrl, serviceRoleSecret, {\n  auth: {\n    persistSession: false,\n    autoRefreshToken: false,\n    detectSessionInUrl: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Management Page Component\nDESCRIPTION: Angular component for the account page that allows users to view and update their profile information, as well as sign out from the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { Profile, SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-account',\n  template: `\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Account</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <form>\n        <ion-item>\n          <ion-label position=\"stacked\">Email</ion-label>\n          <ion-input type=\"email\" name=\"email\" [(ngModel)]=\"email\" readonly></ion-input>\n        </ion-item>\n\n        <ion-item>\n          <ion-label position=\"stacked\">Name</ion-label>\n          <ion-input type=\"text\" name=\"username\" [(ngModel)]=\"profile.username\"></ion-input>\n        </ion-item>\n\n        <ion-item>\n          <ion-label position=\"stacked\">Website</ion-label>\n          <ion-input type=\"url\" name=\"website\" [(ngModel)]=\"profile.website\"></ion-input>\n        </ion-item>\n        <div class=\"ion-text-center\">\n          <ion-button fill=\"clear\" (click)=\"updateProfile()\">Update Profile</ion-button>\n        </div>\n      </form>\n\n      <div class=\"ion-text-center\">\n        <ion-button fill=\"clear\" (click)=\"signOut()\">Log Out</ion-button>\n      </div>\n    </ion-content>\n  `,\n  styleUrls: ['./account.page.scss'],\n})\nexport class AccountPage implements OnInit {\n  profile: Profile = {\n    username: '',\n    avatar_url: '',\n    website: '',\n  }\n\n  email = ''\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private router: Router\n  ) {}\n  ngOnInit() {\n    this.getEmail()\n    this.getProfile()\n  }\n\n  async getEmail() {\n    this.email = await this.supabase.user.then((user) => user?.email || '')\n  }\n\n  async getProfile() {\n    try {\n      const { data: profile, error, status } = await this.supabase.profile\n      if (error && status !== 406) {\n        throw error\n      }\n      if (profile) {\n        this.profile = profile\n      }\n    } catch (error: any) {\n      alert(error.message)\n    }\n  }\n\n  async updateProfile(avatar_url: string = '') {\n    const loader = await this.supabase.createLoader()\n    await loader.present()\n    try {\n      const { error } = await this.supabase.updateProfile({ ...this.profile, avatar_url })\n      if (error) {\n        throw error\n      }\n      await loader.dismiss()\n      await this.supabase.createNotice('Profile updated!')\n    } catch (error: any) {\n      await loader.dismiss()\n      await this.supabase.createNotice(error.message)\n    }\n  }\n\n  async signOut() {\n    console.log('testing?')\n    await this.supabase.signOut()\n    this.router.navigate(['/'], { replaceUrl: true })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Supabase in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the same functionality as the JavaScript version, but with type annotations for better type safety. It retrieves user information and related data, ensuring session validation before querying.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User, createPagesServerClient } from '@supabase/auth-helpers-nextjs'\nimport { GetServerSidePropsContext } from 'next'\n\nexport default function ProtectedPage({ user, data }: { user: User; data: any }) {\n  return (\n    <>\n      <div>Protected content for {user.email}</div>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n    </>\n  )\n}\n\nexport const getServerSideProps = async (ctx: GetServerSidePropsContext) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient(ctx)\n  // Check if we have a session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user)\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n\n  // Run queries with RLS on the server\n  const { data } = await supabase.from('users').select('*')\n\n  return {\n    props: {\n      user,\n      data: data ?? [],\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with Supabase.ai API in Edge Functions\nDESCRIPTION: This code demonstrates how to instantiate a new inference session with the 'gte-small' model and run inference on a text prompt to generate embeddings that can be stored in pgvector.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-16-ai-inference-now-available-in-supabase-edge-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Instantiate a new inference session\nconst session = new Supabase.ai.Session('gte-small')\n\n// then use the session to run inference on a prompt\nconst output = await session.run('Luke, I am your father')\n\nconsole.log(output)\n// [ -0.047715719789266586, -0.006132732145488262, ...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth with Email Scope\nDESCRIPTION: Example of how to properly configure Google OAuth signin with explicit email scope for Google Suite users\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/google-auth-fails-for-some-users-XcFXEu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.signInWithOAuth({\n  provider: 'google'\n  options: {\n    scopes: 'https://www.googleapis.com/auth/userinfo.email'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Profiles Table with Row Level Security in PostgreSQL\nDESCRIPTION: SQL script to create a profiles table with Row Level Security policies for user management. Includes table creation, security policies for viewing, inserting, and updating profiles, and setup for Supabase Realtime and Storage features.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/angular-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for Public Profiles\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\nalter table profiles enable row level security;\ncreate policy \"Public profiles are viewable by everyone.\"\n  on profiles for select\n  using ( true );\ncreate policy \"Users can insert their own profile.\"\n  on profiles for insert\n  with check ( (select auth.uid()) = id );\ncreate policy \"Users can update own profile.\"\n  on profiles for update\n  using ( (select auth.uid()) = id );\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues ('avatars', 'avatars');\ncreate policy \"Avatar images are publicly accessible.\"\n  on storage.objects for select\n  using ( bucket_id = 'avatars' );\ncreate policy \"Anyone can upload an avatar.\"\n  on storage.objects for insert\n  with check ( bucket_id = 'avatars' );\n```\n\n----------------------------------------\n\nTITLE: Creating User Profiles Table with Row Level Security in SQL\nDESCRIPTION: Creates a 'profiles' table with user details and implements Row Level Security policies for viewing, inserting, and updating profiles. Includes constraints and references to auth.users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/database/postgres/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using ((select auth.uid()) = id);\n```\n\n----------------------------------------\n\nTITLE: Encrypting User Emails with pgcrypto in SQL\nDESCRIPTION: Demonstrates the use of pgcrypto to encrypt user emails in a PostgreSQL database. This snippet shows the limitations of pgcrypto, where raw encryption keys are exposed in SQL queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension pgcrypto;\n\ncreate table users (\n  id serial primary key,\n  email varchar not null unique\n);\n\ninsert into users\n  (email)\nvalues\n  (pgp_sym_encrypt('alice@supabase.io', 's3kr3t_k3y')),\n  (pgp_sym_encrypt('bob@supabase.io', 's3kr3t_key'));\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information in a Secure Next.js Page\nDESCRIPTION: This snippet defines an async server-side component in Next.js that retrieves user information securely using Supabase. It requires users to be authenticated to access the page. Dependencies include 'next/navigation' and '@/utils/supabase/server'. Redirects unauthorized users to '/login'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'next/navigation'\n\nimport { createClient } from '@/utils/supabase/server'\n\nexport default async function PrivatePage() {\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect('/login')\n  }\n\n  return <p>Hello {data.user.email}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Out in Flutter\nDESCRIPTION: This code snippet demonstrates how to sign out a user using the Supabase Flutter client library. It calls the `signOut` function. The function returns a Future that completes when the sign-out process is finished.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Astro\nDESCRIPTION: This snippet for Astro creates a token exchange endpoint. It handles the request, verifies the OTP against Supabase, and redirects users based on verification success or failure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient, parseCookieHeader } from '@supabase/ssr'\nimport { type EmailOtpType } from '@supabase/supabase-js'\nimport { type APIRoute } from 'astro'\n\nexport const GET: APIRoute = async ({ request, cookies, redirect }) => {\n  const requestUrl = new URL(request.url)\n  const token_hash = requestUrl.searchParams.get('token_hash')\n  const type = requestUrl.searchParams.get('type') as EmailOtpType | null\n  const next = requestUrl.searchParams.get('next') || '/'\n\n  if (token_hash && type) {\n    const supabase = createServerClient(\n      import.meta.env.PUBLIC_SUPABASE_URL,\n      import.meta.env.PUBLIC_SUPABASE_ANON_KEY,\n      {\n        cookies: {\n          getAll() {\n            return parseCookieHeader(request.headers.get('Cookie') ?? '')\n          },\n          setAll(cookiesToSet) {\n            cookiesToSet.forEach(({ name, value, options }) => cookies.set(name, value, options))\n          },\n        },\n      }\n    )\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n\n    if (!error) {\n      return redirect(next)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  return redirect('/auth/auth-code-error')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Similarity Search Function in SQL\nDESCRIPTION: SQL function to perform similarity search on embeddings using pgvector, returning relevant page sections based on input embedding and parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Create embedding similarity search functions\ncreate or replace function match_page_sections(\n    embedding vector(1536),\n    match_threshold float,\n    match_count int,\n    min_content_length int\n)\nreturns table (\n    id bigint,\n    page_id bigint,\n    slug text,\n    heading text,\n    content text,\n    similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_variable\nbegin\n  return query\n  select\n    nods_page_section.id,\n    nods_page_section.page_id,\n    nods_page_section.slug,\n    nods_page_section.heading,\n    nods_page_section.content,\n    (nods_page_section.embedding <#> embedding) * -1 as similarity\n  from nods_page_section\n\n  -- We only care about sections that have a useful amount of content\n  where length(nods_page_section.content) >= min_content_length\n\n  -- The dot product is negative because of a Postgres limitation, so we negate it\n  and (nods_page_section.embedding <#> embedding) * -1 > match_threshold\n\n  -- OpenAI embeddings are normalized to length 1, so\n  -- cosine similarity and dot product will produce the same results.\n  -- Using dot product which can be computed slightly faster.\n  --\n  -- For the different syntaxes, see https://github.com/pgvector/pgvector\n  order by nods_page_section.embedding <#> embedding\n\n  limit match_count;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Update Logic in Account Component\nDESCRIPTION: This TypeScript code snippet adds avatar update functionality to the AccountComponent, including a getter for the avatar URL and a method to handle avatar updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css'],\n})\nexport class AccountComponent implements OnInit {\n  // ...\n  get avatarUrl() {\n    return this.updateProfileForm.value.avatar_url as string\n  }\n\n  async updateAvatar(event: string): Promise<void> {\n    this.updateProfileForm.patchValue({\n      avatar_url: event,\n    })\n    await this.updateProfile()\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Broadcast Messages\nDESCRIPTION: Methods for sending broadcast messages using client libraries before and after subscription\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChannel = supabase.channel('test-channel')\n\nmyChannel\n  .send({\n    type: 'broadcast',\n    event: 'shout',\n    payload: { message: 'Hi' },\n  })\n  .then((resp) => console.log(resp))\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  realtime.send(\n    jsonb_build_object('hello', 'world'),\n    'event',\n    'topic',\n    false\n  );\n```\n\n----------------------------------------\n\nTITLE: Initiating Sign-In with SSO (Dart)\nDESCRIPTION: This Dart snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWithSSO` method to start the SP Initiated Flow. The Supabase client must be initialized before using this function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"await supabase.auth.signInWithSSO(\n  domain: 'company.com',\n);\"\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command to start the React development server. This launches the application on http://localhost:5173 where you can view the list of instruments fetched from Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Quality with Supabase Storage in JavaScript\nDESCRIPTION: This code demonstrates how to download an image from Supabase Storage with a reduced quality setting of 50%. It requires the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nsupabase.storage.from('bucket').download('image.jpg', {\n  transform: {\n    quality: 50,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Collection\nDESCRIPTION: Performs a similarity search on the vector collection using cosine distance measure with specified parameters for limit and metadata inclusion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/google-colab.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncollection.query(\n    query_vector=[0.4,0.5,0.6],  # required\n    limit=5,                     # number of records to return\n    filters={},                  # metadata filters\n    measure=\"cosine_distance\",   # distance measure to use\n    include_value=False,         # should distance measure values be returned?\n    include_metadata=False,      # should record metadata be returned?\n)\n```\n\n----------------------------------------\n\nTITLE: Overwriting Files in Supabase Storage with Python\nDESCRIPTION: This code shows how to overwrite an existing file in Supabase Storage using Python. It uses the 'upsert' option set to 'true' to allow file overwriting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.storage.from_('bucket_name').upload('file_path', file, {\n  'upsert': 'true',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Secure Function for FDW Access\nDESCRIPTION: SQL function creation with security definer to safely expose FDW data through the API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.get_stripe_products(name_prefix text)\nreturns table (\n  id text,\n  name text,\n  active boolean,\n  default_price text,\n  description text\n)\nlanguage plpgsql\nsecurity definer set search_path = ''\nas $$\nbegin\n  return query\n  select\n    t.id,\n    t.name,\n    t.active,\n    t.default_price,\n    t.description\n  from\n    stripe.stripe_products t\n  where\n    t.name like name_prefix || '%'\n  ;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Identity with Kotlin\nDESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Kotlin client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.linkIdentity(Google)\n```\n\n----------------------------------------\n\nTITLE: Stopping Local Supabase Database\nDESCRIPTION: Stops the local Supabase development environment before updating schema files.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase stop\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Vector Search\nDESCRIPTION: SQL queries to create two tables: 'nods_page' for storing page metadata and 'nods_page_section' for storing embeddings and content sections.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Stores the checksum of our pages.\n-- This ensures that we only regenerate embeddings\n-- when the page content has changed.\ncreate table \"public\".\"nods_page\" (\n  id bigserial primary key,\n  parent_page_id bigint references public.nods_page,\n  path text not null unique,\n  checksum text,\n  meta jsonb,\n  type text,\n  source text\n);\nalter table \"public\".\"nods_page\"\n  enable row level security;\n\n-- Stores the actual embeddings with some metadata\ncreate table \"public\".\"nods_page_section\" (\n  id bigserial primary key,\n  page_id bigint not null references public.nods_page on delete cascade,\n  content text,\n  token_count int,\n  embedding vector(1536),\n  slug text,\n  heading text\n);\nalter table \"public\".\"nods_page_section\"\n  enable row level security;\n```\n\n----------------------------------------\n\nTITLE: CI GitHub Action Workflow\nDESCRIPTION: GitHub Actions workflow for CI pipeline to test database changes and verify generated types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n\n      - name: Start Supabase local development setup\n        run: supabase db start\n\n      - name: Verify generated types are checked in\n        run: |\n          supabase gen types typescript --local > types.gen.ts\n          if ! git diff --ignore-space-at-eol --exit-code --quiet types.gen.ts; then\n            echo \"Detected uncommitted changes after build. See status below:\"\n            git diff\n            exit 1\n          fi\n```\n\n----------------------------------------\n\nTITLE: Demonstrating to_tsvector() Function in PostgreSQL\nDESCRIPTION: Example showing how to_tsvector() converts text into searchable tokens. The function normalizes words and removes common words, returning stemmed tokens with their positions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect to_tsvector('green eggs and ham');\n-- Returns 'egg':2 'green':1 'ham':4\n```\n\n----------------------------------------\n\nTITLE: Signing Out from Supabase (Kotlin)\nDESCRIPTION: This Kotlin snippet illustrates how to sign out a user from a Supabase application. It calls the `signOut` method to remove the user session from the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres with verify-full SSL mode\nDESCRIPTION: Example of connecting to a Supabase Postgres database using psql with verify-full SSL mode for maximum security. This verifies both the connection encryption and server certificate.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npsql \"postgresql://aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=verify-full\" -U postgres.<user>\n```\n\n----------------------------------------\n\nTITLE: Starting the Rails console\nDESCRIPTION: Launches the interactive Rails console for directly interacting with models and the database. This provides a Ruby REPL with the Rails environment loaded.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails console\n```\n\n----------------------------------------\n\nTITLE: Building Auth Component with Sign In and Sign Up Functionality\nDESCRIPTION: React Native component that handles user authentication with email and password, including session management, form inputs, and error handling. It also configures auto-refresh for authentication state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport { Alert, StyleSheet, View, AppState } from 'react-native'\nimport { supabase } from '../lib/supabase'\nimport { Button, Input } from '@rneui/themed'\n\n// Tells Supabase Auth to continuously refresh the session automatically if\n// the app is in the foreground. When this is added, you will continue to receive\n// `onAuthStateChange` events with the `TOKEN_REFRESHED` or `SIGNED_OUT` event\n// if the user's session is terminated. This should only be registered once.\nAppState.addEventListener('change', (state) => {\n  if (state === 'active') {\n    supabase.auth.startAutoRefresh()\n  } else {\n    supabase.auth.stopAutoRefresh()\n  }\n})\n\nexport default function Auth() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  async function signInWithEmail() {\n    setLoading(true)\n    const { error } = await supabase.auth.signInWithPassword({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    setLoading(false)\n  }\n\n  async function signUpWithEmail() {\n    setLoading(true)\n    const {\n      data: { session },\n      error,\n    } = await supabase.auth.signUp({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    if (!session) Alert.alert('Please check your inbox for email verification!')\n    setLoading(false)\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Input\n          label=\"Email\"\n          leftIcon={{ type: 'font-awesome', name: 'envelope' }}\n          onChangeText={(text) => setEmail(text)}\n          value={email}\n          placeholder=\"email@address.com\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input\n          label=\"Password\"\n          leftIcon={{ type: 'font-awesome', name: 'lock' }}\n          onChangeText={(text) => setPassword(text)}\n          value={password}\n          secureTextEntry={true}\n          placeholder=\"Password\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Button title=\"Sign in\" disabled={loading} onPress={() => signInWithEmail()} />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Button title=\"Sign up\" disabled={loading} onPress={() => signUpWithEmail()} />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 40,\n    padding: 12,\n  },\n  verticallySpaced: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    alignSelf: 'stretch',\n  },\n  mt20: {\n    marginTop: 20,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Resumable Uploads with tus-js-client in JavaScript\nDESCRIPTION: This snippet demonstrates how to use tus-js-client to implement resumable uploads to Supabase Storage. It includes error handling, progress tracking, and configuration for the TUS protocol.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tus = require('tus-js-client')\n\nconst projectId = ''\n\nasync function uploadFile(bucketName, fileName, file) {\n    const { data: { session } } = await supabase.auth.getSession()\n\n    return new Promise((resolve, reject) => {\n        var upload = new tus.Upload(file, {\n            endpoint: `https://${projectId}.supabase.co/storage/v1/upload/resumable`,\n            retryDelays: [0, 3000, 5000, 10000, 20000],\n            headers: {\n                authorization: `Bearer ${session.access_token}`,\n                'x-upsert': 'true', // optionally set upsert to true to overwrite existing files\n            },\n            uploadDataDuringCreation: true,\n            removeFingerprintOnSuccess: true, // Important if you want to allow re-uploading the same file https://github.com/tus/tus-js-client/blob/main/docs/api.md#removefingerprintonsuccess\n            metadata: {\n                bucketName: bucketName,\n                objectName: fileName,\n                contentType: 'image/png',\n                cacheControl: 3600,\n            },\n            chunkSize: 6 * 1024 * 1024, // NOTE: it must be set to 6MB (for now) do not change it\n            onError: function (error) {\n                console.log('Failed because: ' + error)\n                reject(error)\n            },\n            onProgress: function (bytesUploaded, bytesTotal) {\n                var percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2)\n                console.log(bytesUploaded, bytesTotal, percentage + '%')\n            },\n            onSuccess: function () {\n                console.log('Download %s from %s', upload.file.name, upload.url)\n                resolve()\n            },\n        })\n\n\n        // Check if there are any previous uploads to continue.\n        return upload.findPreviousUploads().then(function (previousUploads) {\n            // Found previous uploads so we select the first one.\n            if (previousUploads.length) {\n                upload.resumeFromPreviousUpload(previousUploads[0])\n            }\n\n            // Start the upload\n            upload.start()\n        })\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Loading More Tickets with Supabase Range Method\nDESCRIPTION: Implements the logic to load more tickets based on the current offset using Supabase's range method for efficient pagination.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TicketsPage() {\n  const PAGE_COUNT = 20\n  const [offset, setOffset] = useState(1)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isInView, setIsInView] = useState(false)\n\n  useEffect(() => {\n    if (isInView) {\n      loadMoreTickets(offset)\n    }\n  }, [isInView])\n\n  const loadMoreTickets = async (offset: number) => {\n    setIsLoading(true)\n    // Every time we fetch, we want to increase\n    // the offset to load fresh tickets\n    setOffset((prev) => prev + 1)\n    const { data: newTickets } = await fetchTickets(offset, PAGE_COUNT)\n    // Merge new tickets with all previously loaded\n    setLoadedTickets((prevTickets) => [...prevTickets, ...newTickets])\n    setIsLoading(false)\n  }\n\n  const fetchTickets = async (offset, limit) => {\n    const from = offset * PAGE_COUNT\n    const to = from + PAGE_COUNT - 1\n\n    const { data } = await supabase!\n        .from('my_tickets_table')\n        .select('*')\n        .range(from, to)\n        .order('createdAt', { ascending: false })\n\n\n    return data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Functions for Supabase Database in Angular\nDESCRIPTION: Extended data service methods that handle CRUD operations for boards, lists, and cards in the Supabase database. These methods perform basic SQL operations like select, insert, update, and delete for different entities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// CRUD Board\n  async getBoardInfo(boardId: string) {\n    return await this.supabase\n      .from(BOARDS_TABLE)\n      .select('*')\n      .match({ id: boardId })\n      .single();\n  }\n\n  async updateBoard(board: any) {\n    return await this.supabase\n      .from(BOARDS_TABLE)\n      .update(board)\n      .match({ id: board.id });\n  }\n\n  async deleteBoard(board: any) {\n    return await this.supabase\n      .from(BOARDS_TABLE)\n      .delete()\n      .match({ id: board.id });\n  }\n\n  // CRUD Lists\n  async getBoardLists(boardId: string) {\n    const lists = await this.supabase\n      .from(LISTS_TABLE)\n      .select('*')\n      .eq('board_id', boardId)\n      .order('position');\n\n    return lists.data || [];\n  }\n\n  async addBoardList(boardId: string, position = 0) {\n    return await this.supabase\n      .from(LISTS_TABLE)\n      .insert({ board_id: boardId, position, title: 'New List' })\n      .select('*')\n      .single();\n  }\n\n  async updateBoardList(list: any) {\n    return await this.supabase\n      .from(LISTS_TABLE)\n      .update(list)\n      .match({ id: list.id });\n  }\n\n  async deleteBoardList(list: any) {\n    return await this.supabase\n      .from(LISTS_TABLE)\n      .delete()\n      .match({ id: list.id });\n  }\n\n  // CRUD Cards\n  async addListCard(listId: string, boardId: string, position = 0) {\n    return await this.supabase\n      .from(CARDS_TABLE)\n      .insert(\n        { board_id: boardId, list_id: listId, position }\n      )\n      .select('*')\n      .single();\n  }\n\n  async getListCards(listId: string) {\n    const lists = await this.supabase\n      .from(CARDS_TABLE)\n      .select('*')\n      .eq('list_id', listId)\n      .order('position');\n\n    return lists.data || [];\n  }\n\n  async updateCard(card: any) {\n    return await this.supabase\n      .from(CARDS_TABLE)\n      .update(card)\n      .match({ id: card.id });\n  }\n\n  async deleteCard(card: any) {\n    return await this.supabase\n      .from(CARDS_TABLE)\n      .delete()\n      .match({ id: card.id });\n  }\n```\n\n----------------------------------------\n\nTITLE: Dumping Production Schema to File Using Supabase CLI\nDESCRIPTION: Exports the current production schema to a local file for setting up declarative schemas.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db dump > supabase/schemas/prod.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Chat Partition Procedure in PostgreSQL\nDESCRIPTION: Stored procedure that creates a partition table for chats on a given date. Uses dynamic SQL execution with formatting to create child tables that inherit constraints and defaults from the parent table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE PROCEDURE app.create_chats_partition(partition_day date)\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    EXECUTE format(\n    $i$\n        CREATE TABLE IF NOT EXISTS app.\"chats_%1$s\"\n        (LIKE app.chats INCLUDING DEFAULTS INCLUDING CONSTRAINTS);\n    $i$, partition_day);\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table with Serial Primary Key\nDESCRIPTION: Demonstrates creating a users table using serial type for auto-incrementing primary key\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users (\n  id serial primary key,\n  email citext not null check (length(email) < 255),\n  name text not null\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Supabase Migration Versions\nDESCRIPTION: This command lists the migration versions for both local and remote Supabase databases. It's used to verify that migrations have been successfully applied.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nsupabase migration list\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Postgres connection in Laravel .env file\nDESCRIPTION: Sets up environment variables in the .env file to connect Laravel to a Supabase Postgres database using the connection string from Supabase's Session Pooler.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTION=pgsql\nDB_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Error Page for Authentication in Svelte\nDESCRIPTION: Simple Svelte component to display a login error message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<p>Login error</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Refreshed JWT Token in Dart\nDESCRIPTION: This Dart snippet demonstrates how to set a refreshed JWT token for Supabase Realtime authentication. The `setAuth` method is used to update the token. This assumes that supabase client has already been initialised.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_55\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.realtime.setAuth('fresh-token');\n```\n\n----------------------------------------\n\nTITLE: MFA Verification Hook Implementation\nDESCRIPTION: SQL function implementing the MFA verification hook with rate limiting logic for failed attempts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.hook_mfa_verification_attempt(event jsonb)\n  returns jsonb\n  language plpgsql\nas $$\n  declare\n    last_failed_at timestamp;\n  begin\n    if event->'valid' is true then\n      -- code is valid, accept it\n      return jsonb_build_object('decision', 'continue');\n    end if;\n\n    select last_failed_at into last_failed_at\n      from public.mfa_failed_verification_attempts\n      where\n        user_id = event->'user_id'\n          and\n        factor_id = event->'factor_id';\n\n    if last_failed_at is not null and now() - last_failed_at < interval '2 seconds' then\n      -- last attempt was done too quickly\n      return jsonb_build_object(\n        'error', jsonb_build_object(\n          'http_code', 429,\n          'message',   'Please wait a moment before trying again.'\n        )\n      );\n    end if;\n\n    -- record this failed attempt\n    insert into public.mfa_failed_verification_attempts\n      (\n        user_id,\n        factor_id,\n        last_refreshed_at\n      )\n      values\n      (\n        event->'user_id',\n        event->'factor_id',\n        now()\n      )\n      on conflict do update\n        set last_refreshed_at = now();\n\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n    return jsonb_build_object('decision', 'continue');\n  end;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Setting up Supabase connection strings in .env file\nDESCRIPTION: This snippet demonstrates how to set up the necessary Supabase connection strings in the .env file for use with Prisma.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPOSTGRES_PRISMA_URL=\"postgres://postgres.YOUR-PROJECT-REF:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1\" # Transaction Mode\nPOSTGRES_URL_NON_POOLING=\"postgres://postgres.YOUR-PROJECT-REF:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres\"  # Session Mode\n```\n\n----------------------------------------\n\nTITLE: Signing In with Spotify - JavaScript\nDESCRIPTION: This snippet demonstrates how to sign in a user using Spotify OAuth in a JavaScript Supabase client application. It utilizes the `signInWithOAuth` method provided by Supabase to handle the authentication flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\\n\\n// ---cut---\\nasync function signInWithSpotify() {\\n  const { data, error } = await supabase.auth.signInWithOAuth({\\n    provider: 'spotify',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables\nDESCRIPTION: Setting up environment variables in a .env file to store Supabase URL and anonymous key for API authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SUPABASE_URL=YOUR_SUPABASE_URL\nVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS in Edge Function Handler\nDESCRIPTION: Demonstrates a complete Edge Function implementation with CORS support, including preflight request handling, request processing, and error handling. The function accepts JSON input with a name parameter and returns a greeting message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cors.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { corsHeaders } from '../_shared/cors.ts'\n\nconsole.log(`Function \"browser-with-cors\" up and running!`)\n\nDeno.serve(async (req) => {\n  // This is needed if you're planning to invoke your function from a browser.\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    const { name } = await req.json()\n    const data = {\n      message: `Hello ${name}!`,\n    }\n\n    return new Response(JSON.stringify(data), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      status: 200,\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      status: 400,\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating signIn with phone OTP in TypeScript\nDESCRIPTION: Example of how to update the signIn method for phone OTP authentication in supabase-js v2. The new version uses signInWithOtp and verifyOtp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .auth\n  .signInWithOtp({ phone })\n\n// After receiving a SMS with a OTP.\nconst { data, error } = await supabase\n.auth\n.verifyOtp({ phone, token })\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Interface Event Handler\nDESCRIPTION: JavaScript code for handling search queries and streaming responses from the Supabase Edge Function. Implements EventSource to handle streamed responses from OpenAI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/headless-vector-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst onSubmit = (e: Event) => {\n  e.preventDefault()\n  answer.value = \"\"\n  isLoading.value = true\n\n  const query = new URLSearchParams({ query: inputRef.current!.value })\n  const projectUrl = `https://your-project-ref.supabase.co/functions/v1`\n  const queryURL = `${projectURL}/${query}`\n  const eventSource = new EventSource(queryURL)\n\n  eventSource.addEventListener(\"error\", (err) => {\n    isLoading.value = false\n    console.error(err)\n  })\n\n  eventSource.addEventListener(\"message\", (e: MessageEvent) => {\n    isLoading.value = false\n\n    if (e.data === \"[DONE]\") {\n      eventSource.close()\n      return\n    }\n\n    const completionResponse: CreateCompletionResponse = JSON.parse(e.data)\n    const text = completionResponse.choices[0].text\n\n    answer.value += text\n  });\n\n  isLoading.value = true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Definition with swagger-jsdoc in TypeScript\nDESCRIPTION: This code snippet shows how to use swagger-jsdoc to generate an OpenAPI definition from JSDoc comments. It sets up the configuration options and writes the generated specification to a file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport swaggerJsdoc from 'npm:swagger-jsdoc@6.2.8'\n\nconst options = {\n  definition: {\n    openapi: '3.0.1',\n    info: {\n      title: 'TODO Plugin',\n      description: `A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user's username, ask them first before making queries to the plugin. Otherwise, use the username \"global\".`,\n      version: '1.0.0',\n    },\n    servers: [{ url: 'http://localhost:8000' }],\n  },\n  apis: ['./functions/chatgpt-plugin/index.ts'], // files containing annotations as above\n}\n\nconst openapiSpecification = swaggerJsdoc(options)\nconst openapiString = JSON.stringify(openapiSpecification, null, 2)\nconst encoder = new TextEncoder()\nconst data = encoder.encode(openapiString)\nawait Deno.writeFile('./functions/chatgpt-plugin/openapi.json', data)\nconsole.log(openapiString)\n```\n\n----------------------------------------\n\nTITLE: Authentication Component Implementation\nDESCRIPTION: Vue component for handling user authentication with magic link login functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst supabase = useSupabaseClient()\n\nconst loading = ref(false)\nconst email = ref('')\n\nconst handleLogin = async () => {\n  try {\n    loading.value = true\n    const { error } = await supabase.auth.signInWithOtp({ email: email.value })\n    if (error) throw error\n    alert('Check your email for the login link!')\n  } catch (error) {\n    alert(error.error_description || error.message)\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n\n<template>\n  <form class=\"row flex-center flex\" @submit.prevent=\"handleLogin\">\n    <div class=\"col-6 form-widget\">\n      <h1 class=\"header\">Supabase + Nuxt 3</h1>\n      <p class=\"description\">Sign in via magic link with your email below</p>\n      <div>\n        <input class=\"inputField\" type=\"email\" placeholder=\"Your email\" v-model=\"email\" />\n      </div>\n      <div>\n        <input\n          type=\"submit\"\n          class=\"button block\"\n          :value=\"loading ? 'Loading' : 'Send magic link'\"\n          :disabled=\"loading\"\n        />\n      </div>\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Anonymous Sign-in with Supabase Auth in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement anonymous sign-in using Supabase Auth. It checks for an existing session and signs in the user anonymously if no session exists.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-09-meetup-kahoot-alternative.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: sessionData, error: sessionError } = await supabase.auth.getSession()\n\nlet userId: string | null = null\n\nif (sessionData.session) {\n  userId = sessionData.session?.user.id ?? null\n} else {\n  const { data, error } = await supabase.auth.signInAnonymously()\n  userId = data?.user?.id ?? null\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for LLM Integration\nDESCRIPTION: Environment variables configuration for enabling Large Language Model integration with Snaplet.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=<your_openai_api_key>\nGROQ_API_KEY=<your_groq_api_key>\n```\n\n----------------------------------------\n\nTITLE: Implementing Slack Bot Mention Handler in TypeScript\nDESCRIPTION: TypeScript Edge Function that handles Slack events including URL verification challenges and app mentions. It imports the Slack Web API client, processes incoming requests, and responds to mentions with a greeting message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/slack-bot-mention.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebClient } from 'https://deno.land/x/slack_web_api@6.7.2/mod.js'\n\nconst slackBotToken = Deno.env.get('SLACK_TOKEN') ?? ''\nconst botClient = new WebClient(slackBotToken)\n\nconsole.log(`Slack URL verification function up and running!`)\nDeno.serve(async (req) => {\n  try {\n    const reqBody = await req.json()\n    console.log(JSON.stringify(reqBody, null, 2))\n    const { token, challenge, type, event } = reqBody\n\n    if (type == 'url_verification') {\n      return new Response(JSON.stringify({ challenge }), {\n        headers: { 'Content-Type': 'application/json' },\n        status: 200,\n      })\n    } else if (event.type == 'app_mention') {\n      const { user, text, channel, ts } = event\n      // Here you should process the text received and return a response:\n      const response = await botClient.chat.postMessage({\n        channel: channel,\n        text: `Hello <@${user}>!`,\n        thread_ts: ts,\n      })\n      return new Response('ok', { status: 200 })\n    }\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      headers: { 'Content-Type': 'application/json' },\n      status: 500,\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using pg_hashids to Create Short IDs for Database Records\nDESCRIPTION: Example demonstrating how to create a table with sequential IDs and use the id_encode function to generate short, non-sequential identifiers for those IDs. The example shows creating an orders table, inserting data, and querying with both original and encoded IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_hashids.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table orders (\n  id serial primary key,\n  description text,\n  price_cents bigint\n);\n\ninsert into orders (description, price_cents)\nvalues ('a book', 9095);\n\nselect\n  id,\n  id_encode(id) as short_id,\n  description,\n  price_cents\nfrom\n  orders;\n\n  id | short_id | description | price_cents\n----+----------+-------------+-------------\n  1 | jR       | a book      |        9095\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Initializing React App with Vite\nDESCRIPTION: Commands to create a new React application using Vite and install the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest supabase-react -- --template react\ncd supabase-react\n\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Setting up environment variable for Hugging Face access token\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nHUGGING_FACE_ACCESS_TOKEN=<your-token-here>\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Functions without Docker using Supabase CLI\nDESCRIPTION: Command to deploy Edge Functions using the Supabase CLI with the --use-api flag, which enables deployment without requiring Docker installation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-supabase-edge-functions-deploy-dashboard-deno-2-1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy MY_FUNCTION --use-api\n```\n\n----------------------------------------\n\nTITLE: Selecting All Fields from Logs Table\nDESCRIPTION: A query that shows the recommended approach for selecting all fields from a log table, as the wildcard operator (*) is not supported. It explicitly selects timestamp, event_message, and the entire metadata object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(postgres_logs.timestamp as datetime) as timestamp,\n  event_message,\n  metadata\nfrom\n  <log_table_name>\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Implementing SSO Sign-In with Supabase JS\nDESCRIPTION: Example of implementing Single Sign-On authentication using the supabase-js library. Shows how to initiate the SSO flow with a specific domain and handle the redirect URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await supabase.auth.signInWithSSO({ domain: 'acme.corp' })\n\nif (data.url) window.location.href = data.url\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation in JavaScript\nDESCRIPTION: Logout method to remove user session and clear local storage in Supabase authentication\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Auth0 in Swift\nDESCRIPTION: This Swift snippet sets up the Supabase client with Auth0 integration for iOS. It uses 'Auth0' and 'Supabase' libraries, managing credentials with Auth0's credentials manager to retrieve the id token as an access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Auth0\nimport Supabase\n\nextension CredentialsManager {\n  static let shared = Auth0.CredentialsManager(authentication: Auth0.authentication())\n}\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://<supabase-project>.supabase.co\")!,\n  supabaseKey: \"SUPABASE_ANON_KEY\",\n  options: SupabaseClientOptions(\n    auth: SupabaseClientOptions.AuthOptions(\n      accessToken: {\n        try await CredentialsManager.shared.credentials().idToken\n      }\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nearby Places Component with Geolocation\nDESCRIPTION: A TypeScript component that fetches nearby store locations using Capacitor's geolocation and the StoresService. It displays a loading indicator while fetching the data and stores the results for display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core'\nimport { Geolocation } from '@capacitor/geolocation'\nimport { StoresService, StoreResult } from '../services/stores.service'\nimport { LoadingController, ModalController } from '@ionic/angular'\n\n@Component({\n  selector: 'app-nearby',\n  templateUrl: './nearby.page.html',\n  styleUrls: ['./nearby.page.scss'],\n})\nexport class NearbyPage implements OnInit {\n  stores: StoreResult[] = []\n\n  constructor(\n    private storesService: StoresService,\n    public modalCtrl: ModalController,\n    private loadingCtrl: LoadingController\n  ) {}\n\n  async ngOnInit() {\n    // Show loading while getting data from Supabase\n    const loading = await this.loadingCtrl.create({\n      message: 'Loading nearby places...',\n    })\n    loading.present()\n\n    const coordinates = await Geolocation.getCurrentPosition()\n\n    if (coordinates) {\n      // Get nearby places sorted by distance using PostGIS\n      this.stores = await this.storesService.getNearbyStores(\n        coordinates.coords.latitude,\n        coordinates.coords.longitude\n      )\n      loading.dismiss()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Sign-in Route\nDESCRIPTION: Flask route handler for initiating GitHub OAuth sign-in process using Supabase authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/signin/github\")\ndef signin_with_github():\n    res = supabase.auth.sign_in_with_oauth(\n        {\n            \"provider\": \"github\",\n            \"options\": {\n\t            \"redirect_to\": f\"{request.host_url}callback\"\n\t        },\n        }\n    )\n    return redirect(res.url)\n```\n\n----------------------------------------\n\nTITLE: Signing In with Twitter OAuth - Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to authenticate using Twitter OAuth with Supabase. It calls the signInWith(Provider) function on the auth object, passing Twitter as the provider. This initiates the OAuth flow for Twitter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithTwitter() {\n\tsupabase.auth.signInWith(Twitter)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SSR Package\nDESCRIPTION: This command installs the new Supabase SSR package, which consolidates functions for creating clients compatible with server languages or frameworks. It is the final step after uninstalling previous packages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/migrating-to-ssr-from-auth-helpers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/ssr\n```\n\n----------------------------------------\n\nTITLE: Replacing auth.role() with TO clause in Postgres RLS Policy\nDESCRIPTION: This snippet demonstrates how to replace the deprecated auth.role() function with the native TO clause in Postgres when creating an RLS policy for public profile viewing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/deprecated-rls-features-Pm77Zs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- DEPRECATED\ncreate policy \"Public profiles are viewable by everyone.\"\non profiles for select using (\n  auth.role() = 'authenticated' or auth.role() = 'anon'\n);\n\n-- RECOMMENDED\ncreate policy \"Public profiles are viewable by everyone.\"\non profiles for select\nto authenticated, anon\nusing (\n  true\n);\n```\n\n----------------------------------------\n\nTITLE: Altering view owner in PostgreSQL\nDESCRIPTION: SQL command to change the owner of a view, which is critical for Row Level Security to work with views.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER VIEW my_view OWNER TO authenticated;\n```\n\n----------------------------------------\n\nTITLE: Enabling HypoPG Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable or disable the HypoPG extension in PostgreSQL. It's recommended to create the extension in a separate schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"hypopg\" extension\ncreate extension hypopg with schema extensions;\n\n-- Disable the \"hypopg\" extension\ndrop extension if exists hypopg;\n```\n\n----------------------------------------\n\nTITLE: Initializing Keycloak OAuth in Flutter\nDESCRIPTION: Sign in with Keycloak provider in Flutter using Supabase auth method, with optional redirect handling and launch mode configuration\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithKeycloak() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.keycloak,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host',\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Due Tasks and Updating Status in PostgreSQL\nDESCRIPTION: This PostgreSQL function checks due tasks, updates their status, and sends Slack notifications for unresolved tickets. It uses advisory locks to prevent concurrent execution and integrates with external services to check ticket status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-25-exploring-support-tooling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION \"public\".\"check_due_tasks_and_update\"() RETURNS \"void\"\n    LANGUAGE \"plpgsql\"\n    AS $$\nDECLARE\n    _task RECORD;\n    _response JSONB;\n    _response_row JSONB;\n    _ticket_id text;\n    _have_replied BOOLEAN;\n    _ticket_array text;\n    _lock_key CONSTANT int := 42;\n    _lock_acquired boolean;\nBEGIN\n    -- Try to acquire the advisory lock\n    _lock_acquired := pg_try_advisory_lock(_lock_key);\n    IF NOT _lock_acquired THEN\n        RAISE NOTICE 'Could not acquire lock. Another instance is running. Exiting function...';\n        RETURN;\n    END IF;\n\n    -- Call create_ticket_array()\n    RAISE NOTICE 'Calling create_ticket_array()';\n    _ticket_array := public.create_ticket_array();\n\n    -- Check IF _ticket_array is '[]'\n    IF _ticket_array = '[]' THEN\n        RAISE NOTICE 'No tickets to process. Exiting function...';\n        -- Release the advisory lock\n        PERFORM pg_advisory_unlock(_lock_key);\n        RETURN;\n    END IF;\n\n    -- Call help_plataform_wrapper() using _ticket_array\n    RAISE NOTICE 'Calling help_plataform_wrapper()';\n    _response := public.help_plataform_wrapper(_ticket_array);\n\n    -- Check IF _response is NULL\n    IF _response IS NULL THEN\n        RAISE NOTICE 'Response is NULL. Exiting function...';\n        -- Release the advisory lock\n        PERFORM pg_advisory_unlock(_lock_key);\n        RETURN;\n    END IF;\n\n    -- Process the response\n    FOR _response_row IN SELECT * FROM jsonb_array_elements(_response)\n    LOOP\n        _ticket_id := _response_row->>'ticket_id';\n        _have_replied := (_response_row->>'have_replied')::BOOLEAN;\n        RAISE NOTICE 'Processing response for ticket_id: %, have_replied: %', _ticket_id, _have_replied;\n        IF _have_replied THEN\n            RAISE NOTICE 'Ticket % has a reply. Updating...', _ticket_id;\n            -- Perform actions for replied tickets\n            UPDATE public.checking_tasks_queue\n            SET replied_at = NOW(), replied = TRUE\n            WHERE payload->>'ticket_id' = _ticket_id;\n        ELSE\n            RAISE NOTICE 'Ticket % has no reply. Taking actions...', _ticket_id;\n            -- Perform actions for no reply\n            SELECT * INTO _task FROM public.checking_tasks_queue\n            WHERE payload->>'ticket_id' = _ticket_id AND status = '' AND due_time <= NOW()\n            ORDER BY due_time ASC\n            LIMIT 1;\n\n            IF FOUND THEN\n                RAISE NOTICE 'Sending Slack notification for ticket %', _ticket_id;\n                -- Use EXCEPTION to handle duplicate keys\n                BEGIN\n                    INSERT INTO post_to_slack_log(payload) VALUES (_task.payload);\n                    PERFORM slack_post_wrapper(_task.payload);\n                EXCEPTION\n                    WHEN unique_violation THEN\n                        RAISE NOTICE 'Duplicate entry for ticket %. Skipping...', _ticket_id;\n                    WHEN OTHERS THEN\n                        RAISE NOTICE 'Error while inserting into post_to_slack_log. Skipping...';\n                        RAISE NOTICE '% %', SQLERRM, SQLSTATE;\n                END;\n                -- Update the status to 'sent' after calling slack_post_wrapper\n                UPDATE public.checking_tasks_queue\n                SET status = 'sent'\n                WHERE id = _task.id;\n            ELSE\n                RAISE NOTICE 'Task for ticket % not found!', _ticket_id;\n            END IF;\n        END IF;\n    END LOOP;\n    -- Release the advisory lock\n    PERFORM pg_advisory_unlock(_lock_key);\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: User Authentication Actions - JavaScript\nDESCRIPTION: This JavaScript snippet defines login and signup actions for Supabase authentication through form submissions. It extracts email and password from the form data, handles user sign-up, and manages redirects using Supabase client. Includes error handling for server-side operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes/login/+page.server.js\nimport { fail } from '@sveltejs/kit'\n\nexport const actions = {\n  default: async ({ request, url, locals: { supabase } }) => {\n    const formData = await request.formData()\n    const email = formData.get('email')\n    const password = formData.get('password')\n\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        emailRedirectTo: `${url.origin}/auth/callback`,\n      },\n    })\n\n    if (error) {\n      return fail(500, { message: 'Server error. Try again later.', success: false, email })\n    }\n\n    return {\n      message: 'Please check your email for a magic link to log into the website.',\n      success: true,\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Quality with Supabase Storage in Dart\nDESCRIPTION: This code shows how to download an image from Supabase Storage with quality transformation set to 50% using the Dart client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_23\n\nLANGUAGE: Dart\nCODE:\n```\nfinal data = await supabase.storage.from('bucket').download(\n      'image.jpg',\n      transform: const TransformOptions(\n        quality: 50,\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Implementing Google One Tap Sign-in with Supabase Auth\nDESCRIPTION: Example code showing how to handle Google One Tap authentication response and sign in using Supabase Auth's signInWithIdToken method. The code demonstrates the callback function that processes the credential received from Google's authentication button.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-06-27-native-mobile-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleSignInWithGoogle(response) {\n  const { data, error } = await supabase.auth.signInWithIdToken({\n    token: response.credential,\n    nonce: 'NONCE', // must be the same one as provided in data-nonce (if any)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Identify and Migrate Roles Using md5 to scram-sha-256 in SQL\nDESCRIPTION: This SQL snippet identifies roles with md5 password hashing and demonstrates how to migrate them to scram-sha-256 for enhanced security. Ensure roles have proper login permissions, and update their passwords to align with the latest safe authentication methods. No external dependencies are required apart from the SQL environment in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/upgrading.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- List roles using md5 hashing method\nSELECT\n  rolname\nFROM pg_authid\nWHERE rolcanlogin = true\n  AND rolpassword LIKE 'md5%';\n\n-- Migrate a role's password to scram-sha-256\nALTER ROLE <role_name> WITH PASSWORD '<password>';\n```\n\n----------------------------------------\n\nTITLE: Creating the Main Activity with Hilt\nDESCRIPTION: Sets up the main activity with the AndroidEntryPoint annotation for Hilt injection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    //This will come later\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Hook Structure in JavaScript\nDESCRIPTION: This JavaScript snippet shows the basic structure of a custom hook used to modify Firestore documents during the migration process. The hook takes parameters like `collectionName`, `doc`, `recordCounters`, and `writeRecord` to customize data transformation and writing to JSON files.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (collectionName, doc, recordCounters, writeRecord) => {\n  // modify the doc here\n  return doc\n}\n```\n\n----------------------------------------\n\nTITLE: Full Text Search Using Dart Supabase Client\nDESCRIPTION: Dart implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .textSearch('title', \"'Harry'\");\n```\n\n----------------------------------------\n\nTITLE: Unscheduling a Cron Job in Postgres\nDESCRIPTION: This SQL command stops a running cron job by unscheduling it using the cron.unschedule function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.unschedule('webhook-every-minute'); -- pass the name of the cron job\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Scaffold and Running Migrations\nDESCRIPTION: Commands to generate a scaffold for the Article model and run database migrations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate scaffold Article title:string body:text\nbin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing semantic image search with text queries\nDESCRIPTION: Python function that implements text-to-image search by converting a text query to an embedding via Amazon Titan and using Supabase Vector to find the most similar image.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef search(query_term: Optional[str] = None):\n    if query_term is None:\n        query_term = sys.argv[1]\n\n    # create vector store client\n    vx = vecs.create_client(DB_CONNECTION)\n    images = vx.get_or_create_collection(name=\"image_vectors\", dimension=1024)\n\n    # Encode text query\n    text_emb = get_embedding_from_titan_multimodal(json.dumps(\n        {\n            \"inputText\": query_term,\n            \"embeddingConfig\": {\"outputEmbeddingLength\": 1024},\n        }\n    ))\n\n    # query the collection filtering metadata for \"type\" = \"jpg\"\n    results = images.query(\n        data=text_emb,                      # required\n        limit=1,                            # number of records to return\n        filters={\"type\": {\"$eq\": \"jpg\"}},   # metadata filters\n    )\n    result = results[0]\n    print(result)\n    plt.title(result)\n    image = mpimg.imread('./images/' + result)\n    plt.imshow(image)\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating OG Image Handler with React and Deno\nDESCRIPTION: A React component handler that generates an Open Graph image using the ImageResponse API from og_edge. The component creates a simple centered text display with a lavender background.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/og-image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'https://esm.sh/react@18.2.0'\nimport { ImageResponse } from 'https://deno.land/x/og_edge@0.0.4/mod.ts'\n\nexport default function handler(req: Request) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 128,\n          background: 'lavender',\n        }}\n      >\n        Hello OG Image!\n      </div>\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Webhook for Embedding Generation in TypeScript\nDESCRIPTION: TypeScript edge function that serves as a database webhook to automatically generate embeddings for text content added to the database. It uses the gte-small model to generate embeddings and updates the corresponding record in the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst model = new Supabase.ai.Session('gte-small')\n\nDeno.serve(async (req) => {\n  const payload: WebhookPayload = await req.json()\n  const { content, id } = payload.record\n\n  // Generate embedding.\n  const embedding = await model.run(content, {\n    mean_pool: true,\n    normalize: true,\n  })\n\n  // Store in database.\n  const { error } = await supabase\n    .from('embeddings')\n    .update({ embedding: JSON.stringify(embedding) })\n    .eq('id', id)\n  if (error) console.warn(error.message)\n\n  return new Response('ok')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SvelteKit Layout Component with Auth State Change Listener\nDESCRIPTION: Creates a layout component that provides the application container and sets up a listener for authentication state changes to keep the session in sync across page transitions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- src/routes/+layout.svelte -->\n<script lang=\"ts\">\n\timport '../styles.css'\n\timport { invalidate } from '$app/navigation'\n\timport { onMount } from 'svelte'\n\n\texport let data\n\n\tlet { supabase, session } = data\n\t$: ({ supabase, session } = data)\n\n\tonMount(() => {\n\t\tconst { data } = supabase.auth.onAuthStateChange((event, newSession) => {\n\t\t\tif (newSession?.expires_at !== session?.expires_at) {\n\t\t\t\tinvalidate('supabase:auth')\n\t\t\t}\n\t\t})\n\n\t\treturn () => data.subscription.unsubscribe()\n\t})\n</script>\n\n<svelte:head>\n\t<title>User Management</title>\n</svelte:head>\n\n<div class=\"container\" style=\"padding: 50px 0 100px 0\">\n\t<slot />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Resumable Uploads in Kotlin\nDESCRIPTION: This snippet demonstrates how to use Kotlin's native support for resumable uploads with Supabase Storage. It includes examples for uploading files and byte arrays with progress tracking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun uploadFile(file: File) {\n    val upload: ResumableUpload = supabase.storage.from(\"bucket_name\")\n        .resumable.createOrContinueUpload(\"file_path\", file)\n    upload.stateFlow\n        .onEach {\n            println(it.progress)\n        }\n        .launchIn(yourCoroutineScope)\n    upload.startOrResumeUploading()\n}\n\n// On other platforms you might have to give the bytes directly and specify a source if you want to continue it later:\nsuspend fun uploadData(bytes: ByteArray) {\n    val upload: ResumableUpload = supabase.storage.from(\"bucket_name\")\n        .resumable.createOrContinueUpload(bytes, \"source\", \"file_path\")\n\n    upload.stateFlow\n        .onEach {\n            println(it.progress)\n        }\n        .launchIn(yourCoroutineScope)\n    upload.startOrResumeUploading()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Bit Vector Index\nDESCRIPTION: Shows how to create and query an HNSW index using binary quantization for efficient pre-selection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on embedding\n  using hnsw ((binary_quantize(vector)::bit(1000)) bit_hamming_ops);\n\nselect\n  *\nfrom\n  embedding\norder by\n  binary_quantize(vector)::bit(3) <~> binary_quantize('[1,-2,3]')\nlimit 5;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flutter Project\nDESCRIPTION: Command to create a fresh Flutter project called 'myauthapp' which will serve as the foundation for our authentication implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create myauthapp\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage in Kotlin\nDESCRIPTION: This code demonstrates how to upload a file to Supabase Storage using the standard upload method in Kotlin. It provides two options: uploading bytes directly or streaming from a file on JVM/Android.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.storage.from(\"bucket_name\").upload(\"file_path\", bytes)\n\n//Or on JVM/Android: (This will stream the data from the file to supabase)\nsupabase.storage.from(\"bucket_name\").upload(\"file_path\", file)\n```\n\n----------------------------------------\n\nTITLE: Proximity Text Search Implementation\nDESCRIPTION: Shows how to implement proximity-based text search to find terms within a specific distance of each other.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description) @@ to_tsquery('big <-> dreams');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'big' <-> 'dreams'`)\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big' <-> 'dreams'\");\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await client\n  .from(\"books\")\n  .select()\n  .textSearch(\"description\", value: \"'big' <-> 'dreams'\")\n  .execute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        textSearch(\"description\", \"'big' <-> 'dreams'\", TextSearchType.NONE)\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = client.from_('books').select().text_search('description', \"'big' <-> 'dreams'\").execute()\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Functions\nDESCRIPTION: Example of capturing and modifying error messages using exception handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ncreate function error_example()\nreturns void\nlanguage plpgsql\nas $$\nbegin\n  -- fails: cannot read from nonexistent table\n  select * from table_that_does_not_exist;\n\n  exception\n      when others then\n          raise exception 'An error occurred in function <function name>: %', sqlerrm;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Testing OpenAI Edge Function with cURL\nDESCRIPTION: This cURL command sends a POST request to the locally served edge function to test the OpenAI integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i --location --request POST http://localhost:54321/functions/v1/openai \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"What is Supabase?\"}'\n```\n\n----------------------------------------\n\nTITLE: Native Google Sign-in with Expo React Native and Supabase\nDESCRIPTION: A React Native component for native Google Sign-in on Android using the react-native-google-signin library with Supabase Auth. It configures the Google Sign-in client, handles the authentication flow, and sends the ID token to Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  GoogleSignin,\n  GoogleSigninButton,\n  statusCodes,\n} from '@react-native-google-signin/google-signin'\nimport { supabase } from '../utils/supabase'\n\nexport default function () {\n  GoogleSignin.configure({\n    scopes: ['https://www.googleapis.com/auth/drive.readonly'],\n    webClientId: 'YOUR CLIENT ID FROM GOOGLE CONSOLE',\n  })\n\n  return (\n    <GoogleSigninButton\n      size={GoogleSigninButton.Size.Wide}\n      color={GoogleSigninButton.Color.Dark}\n      onPress={async () => {\n        try {\n          await GoogleSignin.hasPlayServices()\n          const userInfo = await GoogleSignin.signIn()\n          if (userInfo.data.idToken) {\n            const { data, error } = await supabase.auth.signInWithIdToken({\n              provider: 'google',\n              token: userInfo.data.idToken,\n            })\n            console.log(error, data)\n          } else {\n            throw new Error('no ID token present!')\n          }\n        } catch (error: any) {\n          if (error.code === statusCodes.SIGN_IN_CANCELLED) {\n            // user cancelled the login flow\n          } else if (error.code === statusCodes.IN_PROGRESS) {\n            // operation (e.g. sign in) is in progress already\n          } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {\n            // play services not available or outdated\n          } else {\n            // some other error happened\n          }\n        }\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Permissions in PostgreSQL\nDESCRIPTION: Removes specific permissions from a role for a database object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE permission_type ON object_name FROM role_name;\n```\n\n----------------------------------------\n\nTITLE: Link OAuth Identity to Anonymous User in JavaScript\nDESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase. This converts an anonymous user to a permanent user by associating it with the OAuth identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })\n```\n\n----------------------------------------\n\nTITLE: Querying dead rows count in PostgreSQL tables\nDESCRIPTION: This SQL query shows the number of dead tuples in a specific table, which helps identify tables that might need vacuum maintenance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- number of dead rows\nSELECT\n\tn_dead_tup\nFROM\n\tpg_stat_user_tables\nWHERE\n\trelname = 'mytable';\n```\n\n----------------------------------------\n\nTITLE: Listening to all Postgres schema changes in Python\nDESCRIPTION: This Python snippet configures a Supabase client to listen for any database changes in the 'public' schema. It uses the channel to bind a callback function that prints any received payload. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nchanges = supabase.channel('schema-db-changes').on_postgres_changes(\n  \"*\",\n  schema=\"public\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Restoring Backup with psql Command in SQL\nDESCRIPTION: This snippet shows how to use the psql command to restore a PostgreSQL database backup. The connection string must be replaced with the relevant database connection information, and the file path must be specified for the backup file. This command is intended for use within terminal or command-line interfaces when connected to the desired PostgreSQL instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/dashboard-restore.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\npsql -d [CONNECTION_STRING] -f /file/path\n```\n\n----------------------------------------\n\nTITLE: Optimizing Server Routing with pgRouting's A* Algorithm\nDESCRIPTION: This code uses pgRouting's A* algorithm to find the most efficient path between servers in a network, optimizing for latency or other costs. The A* algorithm is especially effective for spatial data with coordinates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Query to find the most efficient path (using pgr_astar)\nselect *\nfrom\n  extensions.pgr_astar(\n    'select id, source, target, cost, x1, y1, x2, y2 from server_latency',\n    1,\n    3 -- Start from Server A (id=1) to Server C (id=3)\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes for Record Identification in PostgreSQL\nDESCRIPTION: Sets up indexes on the record_id and old_record_id columns to enable fast querying of a record's history over time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- index record_id for fast searching\ncreate index record_version_record_id on audit.record_version (record_id)\nwhere record_id is not null;\n\n-- index old_record_id for fast searching\ncreate index record_version_old_record_id on audit.record_version (record_id)\nwhere old_record_id is not null;\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset and Magic Link Authentication Methods\nDESCRIPTION: Additional methods for the login page component that handle password reset and magic link authentication. Each function creates an alert with an input field for the user's email and handles the API calls to Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n  async forgotPw() {\n    const alert = await this.alertController.create({\n      header: \"Receive a new password\",\n      message: \"Please insert your email\",\n      inputs: [\n        {\n          type: \"email\",\n          name: \"email\",\n        },\n      ],\n      buttons: [\n        {\n          text: \"Cancel\",\n          role: \"cancel\",\n        },\n        {\n          text: \"Reset password\",\n          handler: async (result) => {\n            const loading = await this.loadingController.create();\n            await loading.present();\n            const { data, error } = await this.authService.sendPwReset(\n              result.email\n            );\n            await loading.dismiss();\n\n            if (error) {\n              this.showAlert(\"Failed\", error.message);\n            } else {\n              this.showAlert(\n                \"Success\",\n                \"Please check your emails for further instructions!\"\n              );\n            }\n          },\n        },\n      ],\n    });\n    await alert.present();\n  }\n\n  async getMagicLink() {\n    const alert = await this.alertController.create({\n      header: \"Get a Magic Link\",\n      message: \"We will send you a link to magically log in!\",\n      inputs: [\n        {\n          type: \"email\",\n          name: \"email\",\n        },\n      ],\n      buttons: [\n        {\n          text: \"Cancel\",\n          role: \"cancel\",\n        },\n        {\n          text: \"Get Magic Link\",\n          handler: async (result) => {\n            const loading = await this.loadingController.create();\n            await loading.present();\n            const { data, error } = await this.authService.signInWithEmail(\n              result.email\n            );\n            await loading.dismiss();\n\n            if (error) {\n              this.showAlert(\"Failed\", error.message);\n            } else {\n              this.showAlert(\n                \"Success\",\n                \"Please check your emails for further instructions!\"\n              );\n            }\n          },\n        },\n      ],\n    });\n    await alert.present();\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Page with Avatar Upload in Vue.js for Supabase\nDESCRIPTION: This Vue.js component creates an Account page with profile management features. It includes functionality for loading user data, updating profiles, uploading avatars, and signing out. The component interacts with Supabase for data storage and authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst supabase = useSupabaseClient()\n\nconst loading = ref(true)\nconst username = ref('')\nconst website = ref('')\nconst avatar_path = ref('')\n\nloading.value = true\nconst user = useSupabaseUser()\n\nconst { data } = await supabase\n  .from('profiles')\n  .select(`username, website, avatar_url`)\n  .eq('id', user.value.id)\n  .single()\n\nif (data) {\n  username.value = data.username\n  website.value = data.website\n  avatar_path.value = data.avatar_url\n}\n\nloading.value = false\n\nasync function updateProfile() {\n  try {\n    loading.value = true\n    const user = useSupabaseUser()\n\n    const updates = {\n      id: user.value.id,\n      username: username.value,\n      website: website.value,\n      avatar_url: avatar_path.value,\n      updated_at: new Date(),\n    }\n\n    const { error } = await supabase.from('profiles').upsert(updates, {\n      returning: 'minimal', // Don't return the value after inserting\n    })\n\n    if (error) throw error\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    loading.value = false\n  }\n}\n\nasync function signOut() {\n  try {\n    loading.value = true\n    const { error } = await supabase.auth.signOut()\n    if (error) throw error\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n\n<template>\n  <form class=\"form-widget\" @submit.prevent=\"updateProfile\">\n    <Avatar v-model:path=\"avatar_path\" @upload=\"updateProfile\" />\n    <div>\n      <label for=\"email\">Email</label>\n      <input id=\"email\" type=\"text\" :value=\"user.email\" disabled />\n    </div>\n    <div>\n      <label for=\"username\">Name</label>\n      <input id=\"username\" type=\"text\" v-model=\"username\" />\n    </div>\n    <div>\n      <label for=\"website\">Website</label>\n      <input id=\"website\" type=\"url\" v-model=\"website\" />\n    </div>\n\n    <div>\n      <input\n        type=\"submit\"\n        class=\"button primary block\"\n        :value=\"loading ? 'Loading ...' : 'Update'\"\n        :disabled=\"loading\"\n      />\n    </div>\n\n    <div>\n      <button class=\"button block\" @click=\"signOut\" :disabled=\"loading\">Sign Out</button>\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv with pnpm\nDESCRIPTION: Installs the dotenv package using pnpm for loading environment variables from a .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm add dotenv\n```\n\n----------------------------------------\n\nTITLE: Inserting Geographic Point Data with Swift\nDESCRIPTION: Swift code using Supabase client to insert restaurant data with geographic points. It defines a Restaurant struct for type safety before inserting the data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct Restaurant: Codable {\n    let name: String\n    let location: String // You could also use a custom type with a custom `Encodable` conformance for convenience.\n}\n\ntry await supabase.from(\"restaurants\")\n  .insert(\n    [\n      Restaurant(name: \"Supa Burger\", location: \"POINT(-73.946823 40.807416)\"),\n      Restaurant(name: \"Supa Pizza\", location: \"POINT(-73.94581 40.807475)\"),\n      Restaurant(name: \"Supa Taco\", location: \"POINT(-73.945826 40.80629)\"),\n    ]\n  )\n  .execute()\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables in local.properties\nDESCRIPTION: Creates a local properties file to securely store Supabase credentials that should not be committed to source control.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nSUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\nSUPABASE_URL=YOUR_SUPABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Configuring Supavisor Transaction Mode Connection String for Prisma\nDESCRIPTION: Example of a Supavisor connection string in transaction mode for Prisma, recommended for horizontally auto-scaling servers and edge/serverless deployments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\npostgres://[DB-USER].[PROJECT REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Testing PostgreSQL Functions\nDESCRIPTION: pgTAP tests to verify function return types and results. Includes preparation of test data and multiple function tests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nprepare hello_expr as select 'hello'\n\nbegin;\nselect plan(3);\n-- You'll need to create a hello_world and is_even function\nselect function_returns( 'hello_world', 'text' );                   -- test if the function \"hello_world\" returns text\nselect function_returns( 'is_even', ARRAY['integer'], 'boolean' );  -- test if the function \"is_even\" returns a boolean\nselect results_eq('select * from hello_world()', 'hello_expr');          -- test if the function \"hello_world\" returns \"hello\"\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Managing MFA Challenge Screen State in React\nDESCRIPTION: The AppWithMFA component manages the display of the MFA challenge screen based on the user's authenticator assurance level. It checks the MFA state upon mount and determines whether to show the MFA screen or the main application. Dependencies include React hooks and Supabase auth methods.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/totp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AppWithMFA() {\n  const [readyToShow, setReadyToShow] = useState(false)\n  const [showMFAScreen, setShowMFAScreen] = useState(false)\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()\n        if (error) {\n          throw error\n        }\n\n        console.log(data)\n\n        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {\n          setShowMFAScreen(true)\n        }\n      } finally {\n        setReadyToShow(true)\n      }\n    })()\n  }, [])\n\n  if (readyToShow) {\n    if (showMFAScreen) {\n      return <AuthMFA />\n    }\n\n    return <App />\n  }\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Deno Postgres Driver for Kysely\nDESCRIPTION: Implementation of a PostgresDriver that allows Kysely to connect to Postgres using the Deno Postgres library. Handles connection pooling, transactions, and query execution.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/kysely-postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CompiledQuery,\n  DatabaseConnection,\n  Driver,\n  PostgresCursorConstructor,\n  QueryResult,\n  TransactionSettings,\n} from 'https://esm.sh/kysely@0.23.4'\nimport { freeze, isFunction } from 'https://esm.sh/kysely@0.23.4/dist/esm/util/object-utils.js'\nimport { extendStackTrace } from 'https://esm.sh/kysely@0.23.4/dist/esm/util/stack-trace-utils.js'\nimport { Pool, PoolClient } from 'https://deno.land/x/postgres@v0.17.0/mod.ts'\n\nexport interface PostgresDialectConfig {\n  pool: Pool | (() => Promise<Pool>)\n  cursor?: PostgresCursorConstructor\n  onCreateConnection?: (connection: DatabaseConnection) => Promise<void>\n}\n\nconst PRIVATE_RELEASE_METHOD = Symbol()\n\nexport class PostgresDriver implements Driver {\n  readonly #config: PostgresDialectConfig\n  readonly #connections = new WeakMap<PoolClient, DatabaseConnection>()\n  #pool?: Pool\n\n  constructor(config: PostgresDialectConfig) {\n    this.#config = freeze({ ...config })\n  }\n\n  async init(): Promise<void> {\n    this.#pool = isFunction(this.#config.pool) ? await this.#config.pool() : this.#config.pool\n  }\n\n  async acquireConnection(): Promise<DatabaseConnection> {\n    const client = await this.#pool!.connect()\n    let connection = this.#connections.get(client)\n\n    if (!connection) {\n      connection = new PostgresConnection(client, {\n        cursor: this.#config.cursor ?? null,\n      })\n      this.#connections.set(client, connection)\n\n      // The driver must take care of calling `onCreateConnection` when a new\n      // connection is created. The `pg` module doesn't provide an async hook\n      // for the connection creation. We need to call the method explicitly.\n      if (this.#config?.onCreateConnection) {\n        await this.#config.onCreateConnection(connection)\n      }\n    }\n\n    return connection\n  }\n\n  async beginTransaction(\n    connection: DatabaseConnection,\n    settings: TransactionSettings\n  ): Promise<void> {\n    if (settings.isolationLevel) {\n      await connection.executeQuery(\n        CompiledQuery.raw(`start transaction isolation level ${settings.isolationLevel}`)\n      )\n    } else {\n      await connection.executeQuery(CompiledQuery.raw('begin'))\n    }\n  }\n\n  async commitTransaction(connection: DatabaseConnection): Promise<void> {\n    await connection.executeQuery(CompiledQuery.raw('commit'))\n  }\n\n  async rollbackTransaction(connection: DatabaseConnection): Promise<void> {\n    await connection.executeQuery(CompiledQuery.raw('rollback'))\n  }\n\n  async releaseConnection(connection: PostgresConnection): Promise<void> {\n    connection[PRIVATE_RELEASE_METHOD]()\n  }\n\n  async destroy(): Promise<void> {\n    if (this.#pool) {\n      const pool = this.#pool\n      this.#pool = undefined\n      await pool.end()\n    }\n  }\n}\n\ninterface PostgresConnectionOptions {\n  cursor: PostgresCursorConstructor | null\n}\n\nclass PostgresConnection implements DatabaseConnection {\n  #client: PoolClient\n  #options: PostgresConnectionOptions\n\n  constructor(client: PoolClient, options: PostgresConnectionOptions) {\n    this.#client = client\n    this.#options = options\n  }\n\n  async executeQuery<O>(compiledQuery: CompiledQuery): Promise<QueryResult<O>> {\n    try {\n      const result = await this.#client.queryObject<O>(compiledQuery.sql, [\n        ...compiledQuery.parameters,\n      ])\n\n      if (\n        result.command === 'INSERT' ||\n        result.command === 'UPDATE' ||\n        result.command === 'DELETE'\n      ) {\n        const numAffectedRows = BigInt(result.rowCount || 0)\n\n        return {\n          numUpdatedOrDeletedRows: numAffectedRows,\n          numAffectedRows,\n          rows: result.rows ?? [],\n        } as any\n      }\n\n      return {\n        rows: result.rows ?? [],\n      }\n    } catch (err) {\n      throw extendStackTrace(err, new Error())\n    }\n  }\n\n  async *streamQuery<O>(\n    _compiledQuery: CompiledQuery,\n    chunkSize: number\n  ): AsyncIterableIterator<QueryResult<O>> {\n    if (!this.#options.cursor) {\n      throw new Error(\n        \"'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres.\"\n      )\n    }\n\n    if (!Number.isInteger(chunkSize) || chunkSize <= 0) {\n      throw new Error('chunkSize must be a positive integer')\n    }\n\n    // stream not available\n    return null\n  }\n\n  [PRIVATE_RELEASE_METHOD](): void {\n    this.#client.release()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket using Dart in Supabase Storage\nDESCRIPTION: This Dart snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It initializes a `SupabaseClient` and then calls the `createBucket` method on the `storage` property, creating a bucket named 'avatars'. The `async` keyword is used to handle the asynchronous operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');\n\n  final storageResponse = await supabase\n      .storage\n      .createBucket('avatars');\n}\n```\n\n----------------------------------------\n\nTITLE: Push Database Migrations (CLI)\nDESCRIPTION: This command pushes the local database migrations to the remote Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: Updating User Phone Number\nDESCRIPTION: Demonstrates how to update a logged-in user's phone number. After updating, the user receives an SMS with a 6-digit pin that must be verified within 60 seconds.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/phone-login.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.updateUser({\n  phone: '123456789',\n})\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.updateUser(\n  user: UserAttributes(\n    phone: \"123456789\"\n  )\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.updateUser {\n    phone = \"123456789\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.update_user({\n  'phone': '123456789',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Route Layout in Svelte\nDESCRIPTION: Svelte layout component for private routes. Includes a logout button and renders child components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { data, children } = $props()\n  let { supabase } = $derived(data)\n\n  const logout = async () => {\n    const { error } = await supabase.auth.signOut()\n    if (error) {\n      console.error(error)\n    }\n  }\n</script>\n\n<header>\n  <nav>\n    <a href=\"/\">Home</a>\n  </nav>\n  <button onclick={logout}>Logout</button>\n</header>\n<main>\n  {@render children()}\n</main>\n```\n\n----------------------------------------\n\nTITLE: Creating Email Sending JSON Payload - JSON\nDESCRIPTION: Constructs a JSON payload containing user information and email metadata for email sending. It includes user identifiers, app and user metadata, as well as data related to the email action being performed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"valid.email@supabase.io\",\n    \"phone\": \"\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\"email\"]\n    },\n    \"user_metadata\": {\n      \"email\": \"valid.email@supabase.io\",\n      \"email_verified\": false,\n      \"phone_verified\": false,\n      \"sub\": \"8484b834-f29e-4af2-bf42-80644d154f76\"\n    },\n    \"identities\": [\n      {\n        \"identity_id\": \"bc26d70b-517d-4826-bce4-413a5ff257e7\",\n        \"id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\n        \"user_id\": \"8484b834-f29e-4af2-bf42-80644d154f76\",\n        \"identity_data\": {\n          \"email\": \"valid.email@supabase.io\",\n          \"email_verified\": false,\n          \"phone_verified\": false,\n          \"sub\": \"8484b834-f29e-4af2-bf42-80644d154f76\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-05-14T12:56:33.824231484Z\",\n        \"created_at\": \"2024-05-14T12:56:33.824261Z\",\n        \"updated_at\": \"2024-05-14T12:56:33.824261Z\",\n        \"email\": \"valid.email@supabase.io\"\n      }\n    ],\n    \"created_at\": \"2024-05-14T12:56:33.821567Z\",\n    \"updated_at\": \"2024-05-14T12:56:33.825595Z\",\n    \"is_anonymous\": false\n  },\n  \"email_data\": {\n    \"token\": \"305805\",\n    \"token_hash\": \"7d5b7b1964cf5d388340a7f04f1dbb5eeb6c7b52ef8270e1737a58d0\",\n    \"redirect_to\": \"http://localhost:3000/\",\n    \"email_action_type\": \"signup\",\n    \"site_url\": \"http://localhost:9999\",\n    \"token_new\": \"\",\n    \"token_hash_new\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Supabase Directory\nDESCRIPTION: Git commands to commit and push the Supabase directory to a remote repository\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add supabase\ngit commit -m \"Initial migration\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Configuring AppComponent for User Session Management in Angular\nDESCRIPTION: This snippet shows how to set up the AppComponent to handle user sessions using the SupabaseService. It initializes the session and listens for auth changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core'\nimport { SupabaseService } from './supabase.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title = 'angular-user-management'\n\n  session = this.supabase.session\n\n  constructor(private readonly supabase: SupabaseService) {}\n\n  ngOnInit() {\n    this.supabase.authChanges((_, session) => (this.session = session))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Secrets in Vault\nDESCRIPTION: Shows how to update an existing secret using vault.update_secret(). The function takes the secret's UUID and allows updating the secret value, name, and description.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  vault.update_secret(\n    '7095d222-efe5-4cd5-b5c6-5755b451e223',\n    'n3w_upd@ted_s3kret',\n    'updated_unique_name',\n    'This is the updated description'\n  );\n```\n\n----------------------------------------\n\nTITLE: Regional Invocation with JavaScript SDK\nDESCRIPTION: Demonstrates how to invoke an Edge Function in a specific region using the Supabase JavaScript client. Uses the supabase.functions.invoke method with x-region header.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// https://supabase.com/docs/reference/javascript/installing\nimport { createClient } from '@supabase/supabase-js'\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n\n// https://supabase.com/docs/reference/javascript/functions-invoke\nconst { data, error } = await supabase.functions.invoke('hello-world', {\n  body: { name: 'Functions' },\n  headers: { 'x-region': 'eu-west-3' },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling List Realtime Updates in Angular Board Component\nDESCRIPTION: This code block handles realtime updates for list data. It processes INSERT, UPDATE, and DELETE events to maintain synchronized lists data across all connected clients, completing the realtime functionality of the Trello clone.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nelse if (update.table == 'lists') {\n  if (event === 'INSERT') {\n    this.lists.push(record);\n    this.listCards[record.id] = [];\n  } else if (event === 'UPDATE') {\n    this.lists.filter((list: any) => list.id === record.id)[0] = record;\n\n    const newArr = [];\n\n    for (let list of this.lists) {\n      if (list.id == record.id) {\n        list = record;\n      }\n      newArr.push(list);\n    }\n    this.lists = newArr;\n  } else if (event === 'DELETE') {\n    this.lists = this.lists.filter((list: any) => list.id !== record.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Supabase Edge Function\nDESCRIPTION: Command to deploy the 'resend' Edge Function to Supabase without JWT verification, which is needed for public access to the function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy resend --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Adding Function Configuration in Supabase\nDESCRIPTION: Configuration entry in supabase/config.toml to specify the entrypoint for a new function\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[functions.hello-world]\nentrypoint = \"./functions/hello-world/main.ts\"\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI via npm\nDESCRIPTION: Installs the Supabase CLI with a minimum version requirement of 1.8.1 using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i supabase@\">=1.8.1\" --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating the Application Class with Hilt\nDESCRIPTION: Defines the custom Application class with the HiltAndroidApp annotation to enable dependency injection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// ManageProductApplication.kt\n@HiltAndroidApp\nclass ManageProductApplication: Application()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic INSERT Policy for Storage Objects in SQL\nDESCRIPTION: This snippet demonstrates how to create a basic RLS policy that allows INSERT operations on the storage.objects table without any restrictions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"policy_name\"\nON storage.objects\nfor insert with check (\n  true\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationRepository Interface in Kotlin\nDESCRIPTION: This interface defines the authentication operations for user management. It includes methods for signing in with email and password, signing up new users, and signing in with Google OAuth.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface AuthenticationRepository {\n    suspend fun signIn(email: String, password: String): Boolean\n    suspend fun signUp(email: String, password: String): Boolean\n    suspend fun signInWithGoogle(): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client in SvelteKit Layout (v0.9.0)\nDESCRIPTION: Implements Supabase client setup and authentication handling for version 0.9.0 using the new load client pattern and type definitions. Includes both the loader and component implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { invalidate } from '$app/navigation'\nimport { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'\nimport { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'\nimport type { LayoutLoad } from './$types'\nimport type { Database } from '../DatabaseDefinitions'\n\nexport const load: LayoutLoad = async ({ fetch, data, depends }) => {\n  depends('supabase:auth')\n\n  const supabase = createSupabaseLoadClient<Database>({\n    supabaseUrl: PUBLIC_SUPABASE_URL,\n    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n    event: { fetch },\n    serverSession: data.session,\n  })\n\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  return { supabase, session }\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { invalidate } from '$app/navigation';\n  import { onMount } from 'svelte';\n  import type { LayoutData } from './$types';\n\n  export let data: LayoutData;\n\n  $: ({ supabase, session } = data);\n\n  onMount(() => {\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((event, _session) => {\n      if (_session?.expires_at !== session?.expires_at) {\n        invalidate('supabase:auth')\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  });\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Implementing Hugging Face Embeddings in Supabase Edge Function\nDESCRIPTION: This Deno/TypeScript Edge Function creates an API endpoint that accepts text input, generates embeddings using the Hugging Face 'Supabase/gte-small' model via the transformers.js library, and stores the resulting embedding in a Supabase table. It demonstrates full integration between Supabase and Hugging Face in a serverless environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\nimport { env, pipeline } from 'https://cdn.jsdelivr.net/npm/@xenova/transformers@2.5.0'\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\n// Preparation for Deno runtime\nenv.useBrowserCache = false\nenv.allowLocalModels = false\n\nconst supabase = createClient(\n  'https://xyzcompany.supabase.co',\n  'public-anon-key',\n)\n\n// Construct pipeline outside of serve for faster warm starts\nconst pipe = await pipeline(\n  'feature-extraction',\n  'Supabase/gte-small',\n)\n\n// Deno Handler\nserve(async (req) => {\n  const { input } = await req.json()\n\n  // Generate the embedding from the user input\n  const output = await pipe(input, {\n    pooling: 'mean',\n    normalize: true,\n  })\n\n  // Get the embedding output\n  const embedding = Array.from(output.data)\n\n  // Store the embedding\n  const { data, error } = await supabase\n    .from('collections')\n    .insert({ embedding })\n\n  // Return the embedding\n  return new Response(\n    { new_row: data },\n    { headers: { 'Content-Type': 'application/json' } },\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Custom ORM Migration\nDESCRIPTION: GitHub Actions workflow configuration that waits for Supabase Preview deployment and runs custom ORM migrations. The workflow triggers on pull request events and uses Supabase CLI to fetch branch credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n    branches:\n      - main\n    paths:\n      - 'supabase/**'\n\njobs:\n  wait:\n    runs-on: ubuntu-latest\n    outputs:\n      status: ${{ steps.check.outputs.conclusion }}\n    steps:\n      - uses: fountainhead/action-wait-for-check@v1.2.0\n        id: check\n        with:\n          checkName: Supabase Preview\n          ref: ${{ github.event.pull_request.head.sha }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n  migrate:\n    needs:\n      - wait\n    if: ${{ needs.wait.outputs.status == 'success' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n      - run: supabase --experimental branches get \"$GITHUB_HEAD_REF\" -o env >> $GITHUB_ENV\n      - name: Custom ORM migration\n        run: psql \"$POSTGRES_URL_NON_POOLING\" -c 'select 1'\n```\n\n----------------------------------------\n\nTITLE: Sign Out in JavaScript\nDESCRIPTION: This code snippet demonstrates how to sign out a user using the Supabase JavaScript client library. It initializes the Supabase client and calls the `signOut` function. The function returns a promise that resolves when the user is signed out or rejects with an error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase with AWS Cognito in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates the Supabase client setup leveraging AWS Cognito through Amplify in Kotlin applications. It shows how to implement an access token fetch function using 'suspendCoroutine'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.amplifyframework.auth.AuthSession\nimport com.amplifyframework.auth.cognito.AWSCognitoAuthSession\nimport com.amplifyframework.core.Amplify\n\nval supabase = createSupabaseClient(\n    \"https://<supabase-project>.supabase.co\",\n    \"SUPABASE_ANON_KEY\"\n) {\n    accessToken = {\n        getAccessToken()\n    }\n}\n\nsuspend fun getAccessToken(): String? {\n    return suspendCoroutine {\n        Amplify.Auth.fetchAuthSession(\n            { result: AuthSession ->\n                val cognitoAuthSession = result as AWSCognitoAuthSession\n                it.resume(cognitoAuthSession.userPoolTokensResult.value?.accessToken)\n            },\n            { _ ->\n                // Handle error\n            })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Wrapper SQL Function for Supabase Edge Functions\nDESCRIPTION: This SQL function manages HTTP requests with advanced features like retries, custom headers, and region selection. It's a key component for executing dynamic JavaScript in Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION edge.edge_wrapper(\n    url TEXT,\n    method TEXT DEFAULT 'POST',\n    headers JSONB DEFAULT '{\"Content-Type\": \"application/json\"}'::jsonb,\n    params JSONB DEFAULT '{}'::jsonb,\n    payload JSONB DEFAULT '{}'::jsonb, -- Payload as JSONB\n    timeout_ms INTEGER DEFAULT 5000,\n    max_retries INTEGER DEFAULT 0,\n    allowed_regions TEXT[] DEFAULT NULL\n) RETURNS jsonb AS $$\nDECLARE\n    retry_count INTEGER := 0;\n    retry_delays DOUBLE PRECISION[] := ARRAY[0, 0.250, 0.500, 1.000, 2.500, 5.000];\n    succeeded BOOLEAN := FALSE;\n    current_region_index INTEGER := 1; -- Start index at 1 for PostgreSQL array\n    combined_headers JSONB;\n    response_json JSONB;\nBEGIN\n    -- Validate headers, params, and payload are JSON objects\n    IF headers IS NULL OR NOT jsonb_typeof(headers) = 'object' THEN\n        RAISE EXCEPTION 'Invalid headers parameter: %', headers;\n    END IF;\n\n    IF params IS NULL OR NOT jsonb_typeof(params) = 'object' THEN\n        RAISE EXCEPTION 'Invalid params parameter: %', params;\n    END IF;\n\n    IF payload IS NULL OR NOT jsonb_typeof(payload) = 'object' THEN\n        RAISE EXCEPTION 'Invalid payload parameter: %', payload;\n    END IF;\n\n    -- Validate allowed_regions if provided\n    IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) = 0 THEN\n        RAISE EXCEPTION 'allowed_regions parameter cannot be an empty array';\n    END IF;\n\n    -- Check if retry_delays has enough elements\n    IF cardinality(retry_delays) < max_retries + 1 THEN\n        RAISE EXCEPTION 'retry_delays array must have at least % elements', max_retries + 1;\n    END IF;\n\n    -- Retry loop\n    WHILE NOT succeeded AND retry_count <= max_retries LOOP\n        combined_headers := headers;\n\n        -- Set x-region header if allowed_regions is provided\n        IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) > 0 THEN\n            combined_headers := combined_headers || jsonb_build_object('x-region', allowed_regions[current_region_index]);\n        END IF;\n\n        -- Sleep if not the first attempt\n        IF retry_count > 0 THEN\n            PERFORM pg_sleep(retry_delays[retry_count]);\n        END IF;\n\n        retry_count := retry_count + 1;\n\n        -- Increment region index, wrapping around if necessary\n        IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) > 0 THEN\n            current_region_index := current_region_index + 1;\n            IF current_region_index > cardinality(allowed_regions) THEN\n                current_region_index := 1;\n            END IF;\n        END IF;\n\n        BEGIN\n            RAISE WARNING 'headers:%s', combined_headers;\n\n            -- Call the simplified HTTP request function\n            response_json := edge.http_request(url, method, combined_headers, params, payload, timeout_ms);\n\n            -- Check the status code\n            IF (response_json->>'status_code')::INTEGER < 500 THEN\n                succeeded := TRUE;\n            END IF;\n        EXCEPTION\n            WHEN OTHERS THEN\n                IF retry_count > max_retries THEN\n                    RAISE EXCEPTION 'HTTP request failed after % retries. SQL Error: { %, % }',\n                        max_retries, SQLERRM, SQLSTATE;\n                END IF;\n        END;\n    END LOOP;\n\n    RETURN response_json;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Handling Map Marker Clicks in Ionic Angular\nDESCRIPTION: Function to handle marker click events, load store information and images from Supabase, and update the UI state for selected markers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n  addMarkerClicks() {\n    this.map.setOnMarkerClickListener(async (marker) => {\n      const info = this.activeMarkers.filter(\n        (item) => item.markerId === marker.markerId.toString()\n      );\n      if (info.length) {\n        this.selectedMarker = info[0];\n        this.selectedStore = await this.storesService.loadStoreInformation(\n          info[0].storeId\n        );\n        const img = await this.storesService.getStoreImage(\n          this.selectedStore!.id\n        );\n        if (img) {\n          this.selectedStore!.image = img;\n        }\n      }\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: HNSW 960-Dimension Performance Metrics\nDESCRIPTION: Benchmark results for 960-dimension vectors using the gist-960 dataset, showing performance across compute sizes from Micro to 16XL with varying vector counts and configuration parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/choosing-compute-addon.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Compute Size | Vectors   | m   | ef_construction | ef_search | QPS  | Latency Mean | Latency p95 | RAM Usage     | RAM    |\n| ------------ | --------- | --- | --------------- | --------- | ---- | ------------ | ----------- | ------------- | ------ |\n| Micro        | 30,000    | 16  | 64              | 65        | 430  | 0.024 sec    | 0.034 sec   | 1.2 GB (Swap) | 1 GB   |\n```\n\n----------------------------------------\n\nTITLE: Setting up Supabase Client with AsyncStorage in React Native\nDESCRIPTION: Implementation of a Supabase client using AsyncStorage for authentication persistence across all React Native platforms.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-url-polyfill/auto'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Server Client for Supabase in Next.js\nDESCRIPTION: Implementation for creating a Supabase client for server components using the createServerClient function from @supabase/ssr package with proper cookie handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Supabase OAuth Authorization URL in TypeScript\nDESCRIPTION: This code snippet demonstrates how to construct the authorization URL for Supabase OAuth and redirect the user. It uses PKCE flow for increased security and stores the code verifier in the user session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/connect-supabase/login', async (ctx) => {\n  // Construct the URL for the authorization redirect and get a PKCE codeVerifier.\n  const { uri, codeVerifier } = await oauth2Client.code.getAuthorizationUri()\n  console.log(uri.toString())\n  // console.log: https://api.supabase.com/v1/oauth/authorize?response_type=code&client_id=7673bde9-be72-4d75-bd5e-b0dba2c49b38&redirect_uri=http%3A%2F%2Flocalhost%3A54321%2Ffunctions%2Fv1%2Fconnect-supabase%2Foauth2%2Fcallback&scope=all&code_challenge=jk06R69S1bH9dD4td8mS5kAEFmEbMP5P0YrmGNAUVE0&code_challenge_method=S256\n\n  // Store the codeVerifier in the user session (cookie).\n  ctx.state.session.flash('codeVerifier', codeVerifier)\n\n  // Redirect the user to the authorization endpoint.\n  ctx.response.redirect(uri)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in .env File\nDESCRIPTION: Example of setting the OpenAI API key in a .env file for local development. This environment variable is required by the Edge Function to authenticate with OpenAI's API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nOPENAI_API_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Handling Supabase Auth Confirmation in Next.js API Route\nDESCRIPTION: Implements an API route handler for Supabase auth confirmation, exchanging a secure code for an auth token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EmailOtpType } from '@supabase/supabase-js'\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nimport createClient from '@/utils/supabase/api'\n\nfunction stringOrFirstString(item: string | string[] | undefined) {\n  return Array.isArray(item) ? item[0] : item\n}\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'GET') {\n    res.status(405).appendHeader('Allow', 'GET').end()\n    return\n  }\n\n  const queryParams = req.query\n  const token_hash = stringOrFirstString(queryParams.token_hash)\n  const type = stringOrFirstString(queryParams.type)\n\n  let next = '/error'\n\n  if (token_hash && type) {\n    const supabase = createClient(req, res)\n    const { error } = await supabase.auth.verifyOtp({\n      type: type as EmailOtpType,\n      token_hash,\n    })\n    if (error) {\n      console.error(error)\n    } else {\n      next = stringOrFirstString(queryParams.next) || '/'\n    }\n  }\n\n  res.redirect(next)\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Specific Items in JSONB Arrays in PostgreSQL\nDESCRIPTION: Shows how to search for specific items within JSONB arrays using a Common Table Expression (CTE). This example flattens the food log data into a tabular form and then filters for a specific food item ('Garlic Bread').\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nwith my_food as\n(\n  select\n    date,\n    jsonb_array_elements(food_log)->>'title' as title,\n    (jsonb_array_elements(food_log)->'calories')::integer as calories\n  from calendar\n  where user_id = 'xyz'\n    and date between '2022-01-01' and '2022-01-31'\n)\nselect\n  title,\n  calories\nfrom my_food\nwhere title = 'Garlic Bread';\n```\n\n----------------------------------------\n\nTITLE: Importing npm modules in Edge Functions\nDESCRIPTION: Demonstrates how to import npm modules directly in Supabase Edge Functions using the 'npm:' prefix. This example shows importing the drizzle ORM for PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { drizzle } from 'npm:drizzle-orm/node-postgres'\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno 2 Runtime in Supabase\nDESCRIPTION: Configuration settings in supabase/config.toml to enable Deno 2 runtime for edge functions\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[edge_runtime]\ndeno_version = 2\n```\n\n----------------------------------------\n\nTITLE: Signing Out - Flutter\nDESCRIPTION: This Flutter code snippet demonstrates how to sign out a user using the Supabase client. It calls the signOut() method on the auth object. This removes the user's session and related data from local storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Error Message - Tenant Events Limit\nDESCRIPTION: Error message returned when a project exceeds its message throughput limit, triggering automatic disconnection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/quotas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntenant_events\n```\n\n----------------------------------------\n\nTITLE: Seeding storage buckets to Supabase\nDESCRIPTION: This command uploads files from the local directory specified in config.toml to the corresponding bucket in your Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsupabase seed buckets\n```\n\n----------------------------------------\n\nTITLE: Full Text Search on Description Using Dart\nDESCRIPTION: Dart implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big'\");\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase data in Nuxt application\nDESCRIPTION: This Vue component creates a Supabase client, fetches instruments data from Supabase, and displays it in a list. It demonstrates how to integrate Supabase queries into a Nuxt application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\nconst instruments = ref([])\n\nasync function getInstruments() {\n  const { data } = await supabase.from('instruments').select()\n  instruments.value = data\n}\n\nonMounted(() => {\n  getInstruments()\n})\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"instrument in instruments\" :key=\"instrument.id\">{{ instrument.name }}</li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library as a dependency for the Ionic Vue project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Embeddings Generation\nDESCRIPTION: GitHub Actions workflow configuration for automatically generating and updating document embeddings in Supabase. Triggers on main branch changes and uses the embeddings-generator action.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/headless-vector-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'generate_embeddings'\non: # run on main branch changes\n  push:\n    branches:\n      - main\n\njobs:\n  generate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: supabase/embeddings-generator@v0.0.x # Update this to the latest version.\n        with:\n          supabase-url: 'https://your-project-ref.supabase.co' # Update this to your project URL.\n          supabase-service-role-key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\n          openai-key: ${{ secrets.OPENAI_API_KEY }}\n          docs-root-path: 'docs' # the path to the root of your md(x) files\n```\n\n----------------------------------------\n\nTITLE: Invoking Edge Function with JavaScript Supabase Client\nDESCRIPTION: Shows how to invoke the Edge Function using the Supabase JavaScript client library, including client initialization and function invocation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)\n\nconst { data, error } = await supabase.functions.invoke('hello-world', {\n  body: { name: 'Functions' },\n})\n```\n\n----------------------------------------\n\nTITLE: Signing In with LinkedIn using Supabase Flutter\nDESCRIPTION: This Dart snippet utilizes Supabase's `signInWithOAuth` function in Flutter to authenticate users via LinkedIn OAuth. It supports optional redirect URLs for deeplinking and can launch the auth screen in a new webview on mobile. Ensure Supabase Dart dependencies are included and configure `OAuthProvider.linkedinOidc` appropriately.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signInWithLinkedIn() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.linkedinOidc,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Session to Client in JavaScript\nDESCRIPTION: This JavaScript snippet modifies the SvelteKit server load function to pass the user's session and user data to the client, aiding in making session data available across the UI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/routes/+layout.server.js\nexport const load = async ({ locals: { safeGetSession } }) => {\n  const { session, user } = await safeGetSession()\n\n  return {\n    session,\n    user,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Object Detection Inference with Roboflow Python SDK\nDESCRIPTION: Python code for running object detection inference on an image using the Roboflow Inference HTTP client. It connects to a local Roboflow inference server and returns predictions for the specified model.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inference_sdk import InferenceHTTPClient\n\nimage = \"example.jpg\"\nMODEL_ID = \"rock-paper-scissors-sxsw/11\"\n\nclient = InferenceHTTPClient(\n    api_url=\"http://localhost:9001\",\n    api_key=\"ROBOFLOW_API_KEY\"\n)\nwith client.use_model(MODEL_ID):\n    predictions = client.infer(image)\n\nprint(predictions)\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Vue 3\nDESCRIPTION: Creating a helper file to initialize the Supabase client with environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n```\n\n----------------------------------------\n\nTITLE: Modifying pg_net Configuration Settings\nDESCRIPTION: Example of altering pg_net configuration settings to change the time-to-live (TTL) for responses and the batch size, followed by restarting the worker to apply changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nalter role \"postgres\" set pg_net.ttl to '24 hours';\nalter role \"postgres\" set pg_net.batch_size to 500;\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing in Ionic Angular with Supabase Auth\nDESCRIPTION: Sets up the routing module for an Ionic Angular app, including protected routes and lazy-loaded modules.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthGuard } from './guards/auth.guard'\nimport { NgModule } from '@angular/core'\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router'\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./pages/login/login.module').then((m) => m.LoginPageModule),\n  },\n  {\n    path: 'register',\n    loadChildren: () =>\n      import('./pages/register/register.module').then((m) => m.RegisterPageModule),\n  },\n  {\n    path: 'groups',\n    loadChildren: () => import('./pages/groups/groups.module').then((m) => m.GroupsPageModule),\n  },\n  {\n    path: 'groups/:groupid',\n    loadChildren: () =>\n      import('./pages/messages/messages.module').then((m) => m.MessagesPageModule),\n    canActivate: [AuthGuard],\n  },\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full',\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase client in React\nDESCRIPTION: JavaScript code snippet to create and configure a Supabase client in a React application using environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst SUPABASE_URL = 'http://localhost:8000'\nconst SUPABASE_ANON_KEY =\n  'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYwMzk2ODgzNCwiZXhwIjoyNTUwNjUzNjM0LCJyb2xlIjoiYW5vbiJ9.36fUebxgx1mcBo4s19v0SzqmzunP--hm_hep0uLX0ew'\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)\n```\n\n----------------------------------------\n\nTITLE: Full Example for Finding Errors in Postgres Logs\nDESCRIPTION: Comprehensive SQL query to find errors in Postgres logs. It filters by error severity, user name, event message content, and timestamp range. The query also excludes certain keywords and orders results by timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(postgres_logs.timestamp as datetime) as timestamp,\n  event_message,\n  parsed.error_severity,\n  parsed.user_name,\n  parsed.query,\n  parsed.detail,\n  parsed.hint,\n  parsed.sql_state_code,\n  parsed.backend_type\nfrom\n  postgres_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(metadata.parsed) as parsed\nwhere\n  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')\n  and parsed.user_name = 'postgres'\n  and regexp_contains(event_message, 'duration|operator')\n  and not regexp_contains(parsed.query, '<key words>')\n  and postgres_logs.timestamp between '2024-04-15 10:50:00' and '2024-04-15 10:50:27'\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic RLS Policy in SQL\nDESCRIPTION: Demonstrates the creation of a simple Row Level Security (RLS) policy in PostgreSQL that prevents anonymous users from reading projects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"anon can't read\"\non projects for select to anon\nusing (\n  false\n);\n```\n\n----------------------------------------\n\nTITLE: Writing pgTAP Test for Column Existence\nDESCRIPTION: SQL test using pgTAP to verify the existence of an 'id' column in the auth.users table. The test is wrapped in a transaction and includes test planning and completion functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/testing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nselect plan(1); -- only one statement to run\n\nSELECT has_column(\n    'auth',\n    'users',\n    'id',\n    'id should exist'\n);\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Import Database to Supabase using psql\nDESCRIPTION: This command uses `psql` to import a SQL file into a Supabase project. It requires a Supabase connection string to connect to the database. The `-d` option specifies the database to connect to using the connection string, and the `-f` option specifies the SQL file to execute.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/heroku.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql -d \"$YOUR_CONNECTION_STRING\" -f heroku_dump.sql\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Supabase Credentials\nDESCRIPTION: Defines essential environment variables for connecting to Supabase, including the project URL and anonymous key\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/password-based-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Modeling Server Network with Latency for Resource Allocation\nDESCRIPTION: This code creates a graph structure representing a network of servers with their spatial coordinates and the connections between them, including latency costs. This model can be used for resource allocation and routing in distributed systems.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- create the servers table representing the nodes\ncreate table servers (\n  id serial primary key,\n  name text,\n  x double precision, -- x coordinate for spatial data (latitude)\n  y double precision -- y coordinate for spatial data (longitude)\n);\n\n-- insert some sample servers\ninsert into servers (name, x, y)\nvalues\n  ('server a', 0, 0),\n  ('server b', 2, 1),\n  ('server c', 4, 3),\n  ('server d', 3, 5);\n\n-- create the server_connections table representing the edges\ncreate table server_latency (\n  id serial primary key,\n  source integer,\n  target integer,\n  cost double precision, -- cost could represent latency or bandwidth\n  x1 double precision, -- x coordinate of source\n  y1 double precision, -- y coordinate of source\n  x2 double precision, -- x coordinate of target\n  y2 double precision, -- y coordinate of target,\n  constraint fk_source foreign key (source) references servers (id),\n  constraint fk_target foreign key (target) references servers (id)\n);\n\n-- insert connections between servers\ninsert into server_latency (source, target, cost, x1, y1, x2, y2)\nvalues\n  (1, 2, 1.5, 0, 0, 2, 1), -- server a -> server b with a cost of 1.5 (could be latency)\n  (2, 3, 2.0, 2, 1, 4, 3), -- server b -> server c with a cost of 2.0\n  (2, 4, 1.8, 2, 1, 3, 5), -- server b -> server d with a cost of 1.8\n  (4, 3, 1.0, 3, 5, 4, 3);\n-- server d -> server c with a cost of 1.0\n```\n\n----------------------------------------\n\nTITLE: Calling a Stored Function using Supabase JavaScript Client\nDESCRIPTION: This JavaScript code shows how to call the previously created stored function using the Supabase client's rpc method. It passes parameters to the function and includes promise handling for both successful responses and errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/certain-operations-are-too-complex-to-perform-directly-using-the-client-libraries-8JaphH.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.rpc(\"get_my_complex_query\", { parameter: 1 })\n  .then(response => {\n    // Handle the response\n  })\n  .catch(error => {\n    // Handle errors\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Next.js\nDESCRIPTION: This snippet creates a new API endpoint in a Next.js application to handle the token exchange for authentication. It retrieves parameters from the request, verifies the OTP token with Supabase, and redirects the user based on the success of the verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EmailOtpType } from '@supabase/supabase-js'\nimport { type NextRequest } from 'next/server'\n\nimport { createClient } from '@/utils/supabase/server'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url)\n  const token_hash = searchParams.get('token_hash')\n  const type = searchParams.get('type') as EmailOtpType | null\n  const next = searchParams.get('next') ?? '/'\n\n  if (token_hash && type) {\n    const supabase = await createClient()\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n    if (!error) {\n      // redirect user to specified redirect URL or root of app\n      redirect(next)\n    }\n  }\n\n  // redirect the user to an error page with some instructions\n  redirect('/auth/auth-code-error')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google One-Tap Authentication in Next.js with Supabase\nDESCRIPTION: A Next.js component that handles Google One-Tap authentication using Supabase Auth. It generates a secure nonce, initializes the Google One-Tap UI, handles the authentication callback, and redirects users upon successful login.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport Script from 'next/script'\nimport { createClient } from '@/utils/supabase/client'\nimport { CredentialResponse } from 'google-one-tap'\nimport { useRouter } from 'next/navigation'\nimport { useEffect } from 'react'\n\nconst OneTapComponent = () => {\n  const supabase = createClient()\n  const router = useRouter()\n\n  // generate nonce to use for google id token sign-in\n  const generateNonce = async (): Promise<string[]> => {\n    const nonce = btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))))\n    const encoder = new TextEncoder()\n    const encodedNonce = encoder.encode(nonce)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', encodedNonce)\n    const hashArray = Array.from(new Uint8Array(hashBuffer))\n    const hashedNonce = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('')\n\n    return [nonce, hashedNonce]\n  }\n\n  useEffect(() => {\n    const initializeGoogleOneTap = () => {\n      console.log('Initializing Google One Tap')\n      window.addEventListener('load', async () => {\n        const [nonce, hashedNonce] = await generateNonce()\n        console.log('Nonce: ', nonce, hashedNonce)\n\n        // check if there's already an existing session before initializing the one-tap UI\n        const { data, error } = await supabase.auth.getSession()\n        if (error) {\n          console.error('Error getting session', error)\n        }\n        if (data.session) {\n          router.push('/')\n          return\n        }\n\n        /* global google */\n        google.accounts.id.initialize({\n          client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,\n          callback: async (response: CredentialResponse) => {\n            try {\n              // send id token returned in response.credential to supabase\n              const { data, error } = await supabase.auth.signInWithIdToken({\n                provider: 'google',\n                token: response.credential,\n                nonce,\n              })\n\n              if (error) throw error\n              console.log('Session data: ', data)\n              console.log('Successfully logged in with Google One Tap')\n\n              // redirect to protected page\n              router.push('/')\n            } catch (error) {\n              console.error('Error logging in with Google One Tap', error)\n            }\n          },\n          nonce: hashedNonce,\n          // with chrome's removal of third-party cookies, we need to use FedCM instead (https://developers.google.com/identity/gsi/web/guides/fedcm-migration)\n          use_fedcm_for_prompt: true,\n        })\n        google.accounts.id.prompt() // Display the One Tap UI\n      })\n    }\n    initializeGoogleOneTap()\n    return () => window.removeEventListener('load', initializeGoogleOneTap)\n  }, [])\n\n  return (\n    <>\n      <Script src=\"https://accounts.google.com/gsi/client\" />\n      <div id=\"oneTap\" className=\"fixed top-0 right-0 z-[100]\" />\n    </>\n  )\n}\n\nexport default OneTapComponent\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL View to Expose Vector Data\nDESCRIPTION: Shows how to create a SQL view that exposes vector data to make it accessible through the Supabase client libraries. The view selects relevant fields and can transform metadata into specific columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate view public.docs as\n    select\n        id,\n        embedding,\n        metadata, # Expose the metadata as JSON\n        (metadata->>'url')::text as url # Extract the URL as a string\n    from\n        vecs.docs\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Next.js Server Components and Supabase\nDESCRIPTION: Example of querying data from Supabase in a Next.js Server Component. This demonstrates the simplicity of server-side data fetching without needing to use client-side state management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const { data } = await supabase.from('...').select()\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Supabase Provider for Social Authentication\nDESCRIPTION: This code snippet demonstrates how to switch the social auth provider in the Supabase `signInWithOAuth` method. It instructs developers to update the `provider` field to the desired provider after ensuring it is enabled in the Supabase Dashboard.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/social-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Change the provider field in signInWithOAuth\nsupabase.auth.signInWithOAuth({\n    provider: 'github', // Update this to the desired provider\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Package Manager\nDESCRIPTION: Command to install Poetry, a Python dependency management tool, using pip.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Bitbucket OAuth in JavaScript\nDESCRIPTION: Create a Supabase client and implement sign-in functionality using Bitbucket OAuth provider. Requires Supabase project URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\nasync function signInWithBitbucket() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'bitbucket',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Custom Subdomain using Supabase CLI\nDESCRIPTION: This command activates and claims a custom subdomain for a Supabase project using the CLI. It requires the project reference and the desired subdomain name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase vanity-subdomains --project-ref abcdefghijklmnopqrst activate --desired-subdomain my-example-brand\n```\n\n----------------------------------------\n\nTITLE: Two-Stage Vector Search with Bit Vectors\nDESCRIPTION: Demonstrates a two-stage search approach using binary quantization for pre-selection followed by exact distance calculation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from (\n  select\n    *\n  from\n    embedding\n  order by\n    binary_quantize(vector)::bit(3) <~> binary_quantize('[1,-2,3]')\n  limit 20\n)\norder by\n  vector <=> '[1,-2,3]'\nlimit 5;\n```\n\n----------------------------------------\n\nTITLE: Board Component Header Template in HTML\nDESCRIPTION: HTML template for the board header section including back navigation, board title editing and delete functionality. Uses Tailwind CSS for styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"bg-emerald-600\">\n  <nav class=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n    <div\n      class=\"flex w-full items-center justify-between border-b border-emerald-500 py-6 lg:border-none\"\n    >\n      <div class=\"flex items-center\">\n        <a routerLink=\"/workspace\" class=\"font-semibold text-emerald-900\"> < Back </a>\n      </div>\n      <div class=\"flex gap-4\">\n        <input\n          *ngIf=\"boardInfo\"\n          (ngModelChange)=\"titleChanged = true\"\n          class=\"ml-10 space-x-4 bg-emerald-600 font-bold text-white\"\n          [(ngModel)]=\"boardInfo.title\"\n        />\n        <button class=\"font-medium\" *ngIf=\"titleChanged\" (click)=\"saveBoardTitle()\">Save</button>\n      </div>\n\n      <div class=\"flex\">\n        <button class=\"text-small font-medium text-red-700\" (click)=\"deleteBoard()\">\n          Delete board\n        </button>\n      </div>\n    </div>\n  </nav>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Firebase Auth in Swift (iOS)\nDESCRIPTION: Creates a Supabase client for iOS applications using Swift, passing an async function to retrieve the Firebase Auth JWT of the current user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Supabase\nimport FirebaseAuth\n\nstruct MissingFirebaseTokenError: Error {}\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://<supabase-project>.supabase.co\")!,\n  supabaseKey: \"SUPABASE_ANON_KEY\",\n  options: SupabaseClientOptions(\n    auth: SupabaseClientOptions.AuthOptions(\n      accessToken: {\n        guard let token = await Auth.auth().currentUser?.getIDToken() else {\n          throw MissingFirebaseTokenError()\n        }\n\n        return token\n      }\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table for Transcription Logs in SQL\nDESCRIPTION: This SQL snippet creates a table named 'transcription_logs' to store information about transcription requests, including file details, user information, and transcription results. It also enables row-level security for the table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-transcribe-speech.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS transcription_logs (\n  id BIGSERIAL PRIMARY KEY,\n  file_type VARCHAR NOT NULL,\n  duration INTEGER NOT NULL,\n  chat_id BIGINT NOT NULL,\n  message_id BIGINT NOT NULL,\n  username VARCHAR,\n  transcript TEXT,\n  language_code VARCHAR,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  error TEXT\n);\n\nALTER TABLE transcription_logs ENABLE ROW LEVEL SECURITY;\n```\n\n----------------------------------------\n\nTITLE: Embedded Resource Aggregation Response in JSON\nDESCRIPTION: This JSON response shows the result of applying aggregation functions to embedded resources, displaying the newest and oldest movie years for each director in the dataset.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Maria Gonzalez\",\n    \"movies\": [\n      {\n        \"newest_movie_year\": 2022,\n        \"oldest_movie_year\": 2018\n      }\n    ]\n  },\n  {\n    \"name\": \"John Smith\",\n    \"movies\": [\n      {\n        \"newest_movie_year\": 2022,\n        \"oldest_movie_year\": 2019\n      }\n    ]\n  },\n  {\n    \"name\": \"Amit Patel\",\n    \"movies\": [\n      {\n        \"newest_movie_year\": 2021,\n        \"oldest_movie_year\": 2019\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query Using pg_graphql in PostgreSQL\nDESCRIPTION: SQL command to execute a GraphQL query using the graphql.resolve function. This query retrieves the id and name of the first blog entry from the 'Blog' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_graphql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  graphql.resolve($$\n    {\n      blogCollection(first: 1) {\n        edges {\n          node {\n            id,\n            name\n          }\n        }\n      }\n    }\n  $$);\n```\n\n----------------------------------------\n\nTITLE: Copy object in the same bucket using Supabase\nDESCRIPTION: Copies an object within the same bucket using the Supabase storage API. This snippet shows how to use the `copy` method to duplicate an object from one path to another within the same bucket. Requires `@supabase/supabase-js` and a valid Supabase client instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nawait supabase.storage.from('avatars').copy('public/avatar1.png', 'private/avatar2.png')\n```\n\n----------------------------------------\n\nTITLE: Syncing and Tracking State in JavaScript\nDESCRIPTION: This snippet shows how to listen to presence events in JavaScript using the Supabase client. It captures state changes such as sync, join, and leave events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst roomOne = supabase.channel('room_01')\n\nroomOne\n  .on('presence', { event: 'sync' }, () => {\n    const newState = roomOne.presenceState()\n    console.log('sync', newState)\n  })\n  .on('presence', { event: 'join' }, ({ key, newPresences }) => {\n    console.log('join', key, newPresences)\n  })\n  .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {\n    console.log('leave', key, leftPresences)\n  })\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Presigned Upload URLs in Supabase Storage\nDESCRIPTION: Demonstrates how to generate and use presigned URLs for authenticated file uploads in Supabase Storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// create a signed upload url\nconst filePath = 'users.txt'\nconst { token } = await storage.from(newBucketName).createSignedUploadUrl(filePath)\n\n// this token can then be used to upload to storage\nawait storage.from(newBucketName).uploadToSignedUrl(filePath, token, file)\n```\n\n----------------------------------------\n\nTITLE: Upserting Text Data with Automatic Vector Conversion in Python\nDESCRIPTION: This code shows how to insert text data into a vector collection. The adapter configured for the collection automatically transforms the plain text input into vector embeddings during the upsert operation. The code also includes metadata in the form of a 'publish_year' field.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Upsert\ndocs.upsert(\n    records=[\n        (\n         \"vec0\",\n         \"the diameter of a 747 ...\", # <- inserting text!\n         {\"publish_year\": 2019}\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Performance with EXPLAIN ANALYZE in PostgreSQL\nDESCRIPTION: This SQL command demonstrates how to use EXPLAIN ANALYZE to get detailed execution information about a query, including actual runtime statistics and execution plan details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/canceling-statement-due-to-statement-timeout-581wFv.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nexplain analyze <query-statement-here>;\n```\n\n----------------------------------------\n\nTITLE: Installing and Using the olirice-asciiplot Package with dbdev in PostgreSQL\nDESCRIPTION: Demonstrates how to install the olirice-asciiplot package using dbdev and create an ASCII scatterplot. The example shows loading the package from the registry, enabling it as an extension, and using the scatter function to generate a visualization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Load the package from the package index\nselect\n  dbdev.install ('olirice-asciiplot');\n\n-- Enable the extension\ncreate extension \"olirice-asciiplot\" version '0.2.1';\n```\n\n----------------------------------------\n\nTITLE: Overwriting Files in Supabase Storage with Kotlin\nDESCRIPTION: This snippet illustrates how to overwrite an existing file in Supabase Storage using Kotlin. It sets the 'upsert' option to true to enable file overwriting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.storage.from(\"bucket_name\").upload(\"file_path\", bytes) {\n    upsert = true\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Tickets with Framer Motion\nDESCRIPTION: Implements animations for the loaded tickets using Framer Motion, creating a staggered appearance effect as new tickets are loaded.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { motion } from 'framer-motion'\n\n// ...\n\n{\n  loadedTickets.map((ticket, index) => {\n    // each ticket will be delayed based on it's index\n    // but we need to subtract the delay from all the previously loaded tickets\n    const recalculatedDelay = i >= PAGE_COUNT * 2 ? (i - PAGE_COUNT * (offset - 1)) / 15 : i / 15\n\n    return (\n      <motion.div\n        key={ticket.id}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{\n          duration: 0.4,\n          ease: [0.25, 0.25, 0, 1],\n          delay: recalculatedDelay,\n        }}\n      >\n        {/* Actual ticket component */}\n      </motion.div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting Files in Supabase Storage with Swift\nDESCRIPTION: This code demonstrates how to overwrite an existing file in Supabase Storage using Swift. It uses the 'upsert' option in FileOptions to allow file overwriting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Supabase\n\n// Create Supabase client\nlet supabase = SupabaseClient(supabaseURL: URL(string: \"your_project_url\")!, supabaseKey: \"your_supabase_api_key\")\n\ntry await supabase.storage.from(\"bucket_name\")\n  .upload(\n    path: \"file_path\",\n    file: file,\n    options: FileOptions(\n      upsert: true\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Regular Expressions\nDESCRIPTION: Shows how to escape special characters in regular expressions when they should be interpreted literally. This example escapes a period to match it as a literal character rather than as a wildcard.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- escapes .\nregexp_contains(event_message, 'hello world\\.')\n```\n\n----------------------------------------\n\nTITLE: Creating Association Table for Tracking Post Views in PostgreSQL\nDESCRIPTION: SQL script that creates an associative table to track which users have seen which posts. The table maintains a many-to-many relationship between posts and users with a seen count for each relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\n\ncreate table posts_seen_by_users (\n  post_id bigint references posts (id),\n  user_id bigint references users (id),\n  seen_count bigint not null default 0 check (seen_count > 0),\n  primary key (post_id, user_id)\n);\n\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Initializing Snaplet Seed Generator\nDESCRIPTION: Command to initialize Snaplet for generating seed data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @snaplet/seed init\n```\n\n----------------------------------------\n\nTITLE: Configuring AppModule with ReactiveFormsModule in Angular\nDESCRIPTION: This snippet shows how to set up the AppModule, including necessary component declarations and importing ReactiveFormsModule for form handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\n\nimport { AppComponent } from './app.component'\nimport { AuthComponent } from './auth/auth.component'\nimport { AccountComponent } from './account/account.component'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { AvatarComponent } from './avatar/avatar.component'\n\n@NgModule({\n  declarations: [AppComponent, AuthComponent, AccountComponent, AvatarComponent],\n  imports: [BrowserModule, ReactiveFormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Arithmetic Function in SQL for GraphQL\nDESCRIPTION: A simple SQL function that adds two numbers together. The function is immutable and will be exposed as a Query in the GraphQL schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate function \"addNums\"(a int, b int default 1)\nreturns int\nimmutable\nlanguage sql\nas $$\n\tselect a + b;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating a SolidJS Avatar Component with Supabase Storage Integration\nDESCRIPTION: A complete SolidJS component that handles avatar image uploads and downloads using Supabase Storage. The component displays the current avatar, provides an upload button, and handles the file selection, uploading process, and display of the uploaded image.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component, createEffect, createSignal, JSX } from 'solid-js'\nimport { supabase } from './supabaseClient'\n\ninterface Props {\n  size: number\n  url: string | null\n  onUpload: (event: Event, filePath: string) => void\n}\n\nconst Avatar: Component<Props> = (props) => {\n  const [avatarUrl, setAvatarUrl] = createSignal<string | null>(null)\n  const [uploading, setUploading] = createSignal(false)\n\n  createEffect(() => {\n    if (props.url) downloadImage(props.url)\n  })\n\n  const downloadImage = async (path: string) => {\n    try {\n      const { data, error } = await supabase.storage.from('avatars').download(path)\n      if (error) {\n        throw error\n      }\n      const url = URL.createObjectURL(data)\n      setAvatarUrl(url)\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log('Error downloading image: ', error.message)\n      }\n    }\n  }\n\n  const uploadAvatar: JSX.EventHandler<HTMLInputElement, Event> = async (event) => {\n    try {\n      setUploading(true)\n\n      const target = event.currentTarget\n      if (!target?.files || target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const fileName = `${Math.random()}.${fileExt}`\n      const filePath = `${fileName}`\n\n      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      props.onUpload(event, filePath)\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div style={{ width: `${props.size}px` }} aria-live=\"polite\">\n      {avatarUrl() ? (\n        <img\n          src={avatarUrl()!}\n          alt={avatarUrl() ? 'Avatar' : 'No image'}\n          class=\"avatar image\"\n          style={{ height: `${props.size}px`, width: `${props.size}px` }}\n        />\n      ) : (\n        <div\n          class=\"avatar no-image\"\n          style={{ height: `${props.size}px`, width: `${props.size}px` }}\n        />\n      )}\n      <div style={{ width: `${props.size}px` }}>\n        <label class=\"button primary block\" for=\"single\">\n          {uploading() ? 'Uploading ...' : 'Upload avatar'}\n        </label>\n        <span style=\"display:none\">\n          <input\n            type=\"file\"\n            id=\"single\"\n            accept=\"image/*\"\n            onChange={uploadAvatar}\n            disabled={uploading()}\n          />\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default Avatar\n```\n\n----------------------------------------\n\nTITLE: Adding View Counter to Posts Table\nDESCRIPTION: Simple SQL migration to add a basic view counter column to the posts table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nALTER TABLE posts ADD COLUMN seen_by_count;\n\nCOMMENT ON COLUMN posts.seen_by_count\n  IS 'simple count of users who have seen the post';\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Setting Production Secrets\nDESCRIPTION: Commands for setting secrets in production environment using Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file ./supabase/.env\n\n# You can also set secrets individually using:\nsupabase secrets set MY_NAME=Chewbacca\n```\n\n----------------------------------------\n\nTITLE: Google Auth Error Example\nDESCRIPTION: Example of authentication error messages when Google email scope is not properly configured\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/google-auth-fails-for-some-users-XcFXEu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nerror=server_error&error_description=Error+getting+user+email+from+external+provider\n\nMissing required authentication credential.\n\nExpected OAuth 2 access token, login cookie or other valid authentication credential.\n\nSee https://developers.google.com/identity/sign-in/web/devconsole-project.\\\",\\n \\\"status\\\": \\\"UNAUTHENTICATED\\\"\n\n }\n \"level\":\"error\",\"method\":\"GET\",\"msg\":\"500: Error getting user email from external provider\",\"path\":\"/callback\",\"referer\":\"https://accounts.google.com/\",\"remote_addr\":\"x.x.X.x\",\"time\":\"2023-06-06T21:46:11Z\",\"timestamp\":\"2023-06-06T21:46:11Z\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing StoresService with Supabase Integration in Angular\nDESCRIPTION: A TypeScript service that provides methods to interact with Supabase for store-related operations. It includes interfaces for store data structures and methods to fetch nearby stores using PostGIS spatial queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core'\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser'\nimport { SupabaseClient, User, createClient } from '@supabase/supabase-js'\nimport { environment } from 'src/environments/environment'\n\nexport interface StoreEntry {\n  lat?: number\n  long?: number\n  name: string\n  description: string\n  image?: File\n}\nexport interface StoreResult {\n  id: number\n  lat: number\n  long: number\n  name: string\n  description: string\n  image?: SafeUrl\n  dist_meters?: number\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoresService {\n  private supabase: SupabaseClient\n\n  constructor(private sanitizer: DomSanitizer) {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n  }\n\n  // Get all places with calculated distance\n  async getNearbyStores(lat: number, long: number) {\n    const { data, error } = await this.supabase.rpc('nearby_stores', {\n      lat,\n      long,\n    })\n    return data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CurrentUserAvatar Component in React\nDESCRIPTION: This code snippet demonstrates how to use the `CurrentUserAvatar` component within a React functional component. It showcases the integration of the avatar into a header layout and illustrates composition in a larger application context.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/current-user-avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { CurrentUserAvatar } from '@/components/current-user-avatar'\n\nconst CurrentUserAvatarDemo = () => {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <CurrentUserAvatar />\n    </Header>\n  )\n}\n\nexport default CurrentUserAvatarDemo\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase in Flutter\nDESCRIPTION: Setup Supabase client initialization in the main.dart file with URL and anonymous key configuration\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nvoid main() async {\n  await Supabase.initialize(\n    url: 'SUPABASE_URL',\n    anonKey: 'SUPABASE_ANONKEY',\n  );\n  runApp(const MyApp());\n}\n\n/// Extract SupabaseClient instance in a handy variable\nfinal supabase = Supabase.instance.client;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Schema Support in Prisma\nDESCRIPTION: Configuration setup for enabling multi-schema preview feature in Prisma schema file. Includes datasource configuration for multiple schemas.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"multiSchema\"]  //Add line\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n  schemas   = [\"public\", \"other_schema\"] //list out relevant schemas\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Confirmation Link in HTML\nDESCRIPTION: A custom email link template that helps avoid issues with email prefetching by redirecting users to a confirmation page rather than using the direct confirmation URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ .SiteURL }}/confirm-signup?confirmation_url={{ .ConfirmationURL }}\"\n  >Confirm your signup\n</a>\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Failed Password Attempts Implementation\nDESCRIPTION: SQL implementation for tracking and limiting failed password verification attempts with a 10-second cooldown period.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.password_failed_verification_attempts (\n  user_id uuid not null,\n  last_failed_at timestamp not null default now(),\n  primary key (user_id)\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.hook_password_verification_attempt(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\n  declare\n    last_failed_at timestamp;\n  begin\n    if event->'valid' is true then\n      -- password is valid, accept it\n      return jsonb_build_object('decision', 'continue');\n    end if;\n\n    select last_failed_at into last_failed_at\n      from public.password_failed_verification_attempts\n      where\n        user_id = event->'user_id';\n\n    if last_failed_at is not null and now() - last_failed_at < interval '10 seconds' then\n      -- last attempt was done too quickly\n      return jsonb_build_object(\n        'error', jsonb_build_object(\n          'http_code', 429,\n          'message',   'Please wait a moment before trying again.'\n        )\n      );\n    end if;\n\n    -- record this failed attempt\n    insert into public.password_failed_verification_attempts\n      (\n        user_id,\n        last_failed_at\n      )\n      values\n      (\n        event->'user_id',\n        now()\n      )\n      on conflict do update\n        set last_failed_at = now();\n\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n    return jsonb_build_object('decision', 'continue');\n  end;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Collection with Filters\nDESCRIPTION: Demonstrates how to query the vector collection with metadata filters to find relevant matches\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\ndocs = vecs.get_or_create_collection(name=\"docs\", dimension=3)\n\n# query the collection filtering metadata for \"year\" = 2012\ndocs.query(\n    data=[0.4,0.5,0.6],      # required\n    limit=1,                         # number of records to return\n    filters={\"year\": {\"$eq\": 2012}}, # metadata filters\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful Tasks with Edge Functions in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a RESTful API for tasks using Supabase Edge Functions. It supports GET, POST, PUT, PATCH, and DELETE HTTP methods.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-02-supabase-beta-update-october-2022.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example code mentioned but not provided in the text:\n// https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/restful-tasks/index.ts\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Edge Tables for Video Relationships and User Interactions in SQL\nDESCRIPTION: This snippet shows how to create tables for video relationships and user interactions, which represent edges in the recommendation graph. It includes sample data insertion and demonstrates how to assign weights to relationships.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table video_relationships (\n  source_video_id int references videos (id),\n  target_video_id int references videos (id),\n  relationship_type text, -- 'same_category', 'watched_by_same_users', etc.\n  weight int default 1 -- strength of the relationship\n);\n\ninsert into video_relationships (source_video_id, target_video_id, relationship_type, weight)\nvalues\n  (1, 2, 'same_category', 5), -- \"Intro to Graph Theory\" and \"Advanced Graph Algorithms\" are in the same category\n  (2, 3, 'watched_by_same_users', 3), -- \"Advanced Graph Algorithms\" and \"Graph Neural Networks\" are often watched together\n  (4, 5, 'same_category', 5); -- \"Beginner Python Tutorial\n\ncreate table interactions (\n  user_id int references auth.users (id),\n  video_id int references videos (id),\n  interaction_type text, -- 'liked', 'viewed', etc.\n  weight int default 1 -- strength of the interaction\n);\n\ninsert into interactions (user_id, video_id, interaction_type, weight)\nvalues\n  ('user_01', 1, 'viewed', 5), -- \"User 01\" watched \"Intro to Graph Theory\" to the end (weight = 5)\n  ('user_01', 2, 'liked', 5), -- \"User 01\" liked \"Advanced Graph Algorithms\"\n  ('user_02', 3, 'viewed', 2), -- \"User 02\" watched \"Graph Neural Networks\" and bounced halfway through (weight = 2)\n  ('user_03', 4, 'liked', 5), -- \"User 03\" liked \"Beginner Python Tutorial\"\n  ('user_03', 5, 'viewed', 2);\n-- \"User 03\" watched \"Advanced Python Techniques\" and bounced halfway through (weight = 2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Similarity Search with OpenAI Embeddings in Supabase Edge Function\nDESCRIPTION: This Edge Function performs a similarity search using OpenAI embeddings. It generates an embedding for the input query, then uses Supabase's match_documents RPC to find similar documents based on the embedding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.170.0/http/server.ts'\nimport 'https://deno.land/x/xhr@0.2.1/mod.ts'\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\nimport { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.1.0'\nimport { supabaseClient } from './lib/supabase'\n\nexport const corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) => {\n  // Handle CORS\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  // Search query is passed in request payload\n  const { query } = await req.json()\n\n  // OpenAI recommends replacing newlines with spaces for best results\n  const input = query.replace(/\\n/g, ' ')\n\n  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })\n  const openai = new OpenAIApi(configuration)\n\n  // Generate a one-time embedding for the query itself\n  const embeddingResponse = await openai.createEmbedding({\n    model: 'text-embedding-ada-002',\n    input,\n  })\n\n  const [{ embedding }] = embeddingResponse.data.data\n\n  // In production we should handle possible errors\n  const { data: documents } = await supabaseClient.rpc('match_documents', {\n    query_embedding: embedding,\n    match_threshold: 0.78, // Choose an appropriate threshold for your data\n    match_count: 10, // Choose the number of matches\n  })\n\n  return new Response(JSON.stringify(documents), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Example Result from pgr_TSPeuclidean Query\nDESCRIPTION: Sample output from the pgr_TSPeuclidean function showing the sequence, node IDs, individual segment costs, and accumulated costs for the optimal traveling salesperson path through the 29 points.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgrouting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n seq | node |       cost       |     agg_cost     \n-----+------+------------------+------------------\n   1 |    1 |                0 |                0\n   2 |    2 |  74.535614157127 |  74.535614157127\n   3 |    6 | 900.617093380362 | 975.152707537489\n   4 |   10 | 2113.77757765045 | 3088.93028518793\n   5 |   11 | 106.718669615254 | 3195.64895480319\n   6 |   12 | 1411.95293791574 | 4607.60189271893\n   7 |   13 | 1314.23824873744 | 5921.84014145637\n   8 |   14 | 1321.76283931305 | 7243.60298076942\n   9 |   17 | 1202.91366735569 |  8446.5166481251\n  10 |   18 | 683.333268292684 | 9129.84991641779\n  11 |   15 | 1108.05137466134 | 10237.9012910791\n  12 |   19 | 772.082339448903 |  11009.983630528\n  13 |   22 | 697.666150054665 | 11707.6497805827\n  14 |   23 | 220.141999627513 | 11927.7917802102\n  15 |   21 | 197.926372783442 | 12125.7181529937\n  16 |   29 | 440.456596290771 | 12566.1747492844\n  17 |   28 | 592.939989005405 | 13159.1147382898\n  18 |   26 | 648.288376333318 | 13807.4031146231\n  19 |   20 | 509.901951359278 | 14317.3050659824\n  20 |   25 | 1330.83095428717 | 15648.1360202696\n  21 |   27 |  74.535658878487 | 15722.6716791481\n  22 |   24 | 559.016994374947 |  16281.688673523\n  23 |   16 | 1243.87392358622 | 17525.5625971092\n  24 |    9 |  4088.0585364911 | 21613.6211336004\n  25 |    7 |  650.85409697993 | 22264.4752305803\n  26 |    3 | 891.004385199336 | 23155.4796157796\n  27 |    4 | 1172.36699411442 |  24327.846609894\n  28 |    8 | 994.708187806297 | 25322.5547977003\n  29 |    5 | 1188.01888359478 | 26510.5736812951\n  30 |    1 | 2266.91173136004 | 28777.4854126552\n```\n\n----------------------------------------\n\nTITLE: Creating Planet Retrieval Function\nDESCRIPTION: Creates a PostgreSQL function that returns all planets from the planets table using setof to return multiple rows.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_planets()\nreturns setof planets\nlanguage sql\nas $$\n  select * from planets;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Countries Table in Supabase\nDESCRIPTION: SQL commands to create a countries table with row level security and populate it with sample data. Creates a table with id and name columns, inserts three country records, and enables row level security.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/hono/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the table\ncreate table countries (\n  id bigint primary key generated always as identity,\n  name text not null\n);\n-- Insert some sample data into the table\ninsert into countries (name)\nvalues\n  ('Canada'),\n  ('United States'),\n  ('Mexico');\n\nalter table countries enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Querying Snowflake Data Through PostgreSQL\nDESCRIPTION: SQL query to fetch data directly from Snowflake through the foreign data wrapper connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from snowflake.order_history limit 1000;\n```\n\n----------------------------------------\n\nTITLE: Creating TimescaleDB Hypertable\nDESCRIPTION: Creates a table for temperature sensor data and converts it into a TimescaleDB hypertable using the time column for partitioning.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/timescaledb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table temperatures (\n  time timestamptz not null,\n  sensor_id int not null,\n  temperature double precision not null\n);\n\nselect create_hypertable('temperatures', 'time');\n```\n\n----------------------------------------\n\nTITLE: Type Definitions Setup for SvelteKit Auth - v0.7.x and v0.8.0\nDESCRIPTION: TypeScript type definitions for Supabase integration with SvelteKit, showing both v0.7.x and v0.8.0 approaches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@sveltejs/kit\" />\n\ndeclare namespace App {\n  interface Locals {\n    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession\n  }\n\n  interface PageData {\n    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession\n  }\n\n  // interface Error {}\n  // interface Platform {}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@sveltejs/kit\" />\n\ndeclare namespace App {\n  interface Supabase {\n    Database: import('./DatabaseDefinitions').Database\n    SchemaName: 'public'\n  }\n\n  // interface Locals {}\n  interface PageData {\n    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession\n  }\n  // interface Error {}\n  // interface Platform {}\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Remote Snowflake Data with Local PostgreSQL Tables\nDESCRIPTION: SQL query demonstrating how to join remote Snowflake data with local PostgreSQL tables to enrich existing data and count user purchase events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  users.id,\n  count(order_history.event)\nfrom\n  snowflake.order_history\n  join auth.users on auth.users.id = snowflake.order_history.user_id\nwhere order_history.event = 'purchase' and order_history.user_id = '<some_user_id>';\n```\n\n----------------------------------------\n\nTITLE: Custom Logging in Edge Functions with TypeScript\nDESCRIPTION: Example of implementing custom log events in a Supabase Edge Function. This snippet demonstrates how to use console.log, console.warn, and console.error for effective debugging, along with error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/logging.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(async (req) => {\n  try {\n    const { name } = await req.json()\n\n    if (!name) {\n      console.warn('Empty name provided')\n    }\n\n    const data = {\n      message: `Hello ${name || 'Guest'}!`, // Provide a default value if name is empty\n    }\n\n    console.log(`Name: ${name}`)\n\n    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })\n  } catch (error) {\n    console.error(`Error processing request: ${error}`)\n    return new Response(JSON.stringify({ error: 'Internal Server Error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Python\nDESCRIPTION: This snippet illustrates how to initialize a Supabase client in Python by using the necessary URL and API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom supabase import create_client\n\nSUPABASE_URL = 'https://<project>.supabase.co'\nSUPABASE_KEY = '<your-anon-key>'\n\nsupabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n```\n\n----------------------------------------\n\nTITLE: Signing in with Magic Link using Python\nDESCRIPTION: Demonstrates signing in with a Magic Link using Supabase's Python client. Key parameters include user's email and redirect URL. Automatically signs up an unsigned user unless specified.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nresponse = supabase.auth.sign_in_with_otp({\n  'email': 'valid.email@supabase.io',\n  'options': {\n    # set this to false if you do not want the user to be automatically signed up\n    'should_create_user': False,\n    'email_redirect_to': 'https://example.com/welcome',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: User Signup - Kotlin\nDESCRIPTION: Sends a signup request for a new user using Kotlin with email, password, and user data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.auth.signUpWith(Email) {\n    email = \"valid.email@supabase.io\"\n    password = \"example-password\"\n    data = buildJsonObject {\n        put(\"first_name\", \"John\")\n        put(\"age\", 27)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slack Bot Mention Handler with Deno and Supabase Edge Functions\nDESCRIPTION: TypeScript code for a Supabase Edge Function that handles Slack bot mentions. It sets up a server that processes URL verification challenges and responds to app_mention events from Slack.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/slack-bot-mention/slack-bot-mention.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.197.0/http/server.ts';\nimport { WebClient } from 'https://deno.land/x/slack_web_api@6.7.2/mod.js';\n\nconst slackBotToken = Deno.env.get(\"SLACK_TOKEN\") ?? \"\";\nconst botClient = new WebClient(slackBotToken);\n\nconsole.log(`Slack URL verification function up and running!`);\nserve(async (req) => {\n  try {\n    const reqBody = await req.json();\n    console.log(JSON.stringify(reqBody, null, 2));\n    const { token, challenge, type, event } = reqBody;\n\n    if (type == 'url_verification') {\n      return new Response(JSON.stringify({ challenge }), {\n        headers: { 'Content-Type': 'application/json' },\n        status: 200,\n      });\n    } else if (event.type == 'app_mention') {\n      const { user, text, channel, ts } = event;\n      // Here you should process the text received and return a response:\n      const response = await botClient.chat.postMessage({\n        channel: channel,\n        text: `Hello <@${user}>!`,\n        thread_ts: ts,\n      });\n      return new Response('ok', { status: 200 });\n    }\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      headers: { 'Content-Type': 'application/json' },\n      status: 500,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running the ChatGPT Retrieval Plugin\nDESCRIPTION: Command to run the ChatGPT Retrieval Plugin using Poetry, which starts the plugin on localhost:3333.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Sign-Out in Kotlin with Supabase\nDESCRIPTION: This Kotlin snippet provides the implementation of the sign-out procedure for users within a Supabase application. The `signOut` method is used to clear the session data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Supabase Client in Node.js\nDESCRIPTION: Imports the createClient method from supabase-js library to establish database connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { createClient } = require('@supabase/supabase-js')\n```\n\n----------------------------------------\n\nTITLE: Kotlin Multiplatform Auth Implementation\nDESCRIPTION: Implementation of Google sign-in using the Compose Auth plugin in a Kotlin Multiplatform application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nval authState = supabaseClient.composeAuth.rememberLoginWithGoogle(\n    onResult = {\n        when(it) { //handle errors\n            NativeSignInResult.ClosedByUser -> TODO()\n            is NativeSignInResult.Error -> TODO()\n            is NativeSignInResult.NetworkError -> TODO()\n            NativeSignInResult.Success -> TODO()\n        }\n    }\n)\n\nButton(onClick = { authState.startFlow() }) {\n    Text(\"Sign in with Google\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL schema for user profiles with row level security\nDESCRIPTION: SQL script that sets up the profiles table with proper references to auth.users, constraints, and row level security policies to control access based on user authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/expo-user-management/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for Public Profiles\ncreate table\n  profiles (\n    id uuid references auth.users not null,\n    updated_at timestamp\n    with\n      time zone,\n      username text unique,\n      avatar_url text,\n      website text,\n      primary key (id),\n      unique (username),\n      constraint username_length check (char_length(username) >= 3)\n  );\n\nalter table\n  profiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles for\nselect\n  using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles for insert\nwith\n  check ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles for\nupdate\n  using ((select auth.uid()) = id);\n\n-- Set up Realtime!\nbegin;\n\ndrop\n  publication if exists supabase_realtime;\n\ncreate publication supabase_realtime;\n\ncommit;\n\nalter\n  publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into\n  storage.buckets (id, name)\nvalues\n  ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects for\nselect\n  using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects for insert\nwith\n  check (bucket_id = 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Storing Movie Data and Embeddings in Supabase\nDESCRIPTION: Combines movie data with generated embeddings and stores them in the Supabase database using upsert operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfor(const film of films) {\n\tfilmsWithEmbeddings.push({\n\t  id: film.id,\n\t  title: film.title,\n\t  overview: film.overview,\n\t  release_date: film.release_date,\n\t  backdrop_path: film.backdrop_path,\n\t  embedding,\n\t})\n}\n\nconst { error } = await supabase.from('films').upsert(filmsWithEmbeddings)\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Function for Embeddings\nDESCRIPTION: Creates a PL/pgSQL function that wraps the edge.exec call to generate embeddings. Takes input text as parameter and returns the embedding as JSONB data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: plpgsql\nCODE:\n```\nCREATE OR REPLACE FUNCTION edge.generate_embedding(input_text TEXT) RETURNS JSONB AS $$\nDECLARE\n    response JSONB;\nBEGIN\n    -- Call the edge function to generate the embedding for the provided text\n    response := edge.exec(\n        format(\n            $js$\n            const session = new Supabase.ai.Session('gte-small');\n            return await session.run(%L);\n            $js$,\n            input_text\n        )\n    );\n    RETURN response->'response'->'data';\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating Various Distance Type Indexes\nDESCRIPTION: Shows how to create HNSW indexes using different distance metrics including L1, Hamming, and Jaccard distances.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using hnsw (embedding vector_l1_ops);\n\ncreate index on items using hnsw (embedding bit_hamming_ops);\n\ncreate index on vector using hnsw (vector bit_jaccard_ops);\n```\n\n----------------------------------------\n\nTITLE: Querying JSONB Arrays with jsonb_array_elements in PostgreSQL\nDESCRIPTION: Demonstrates how to convert JSONB arrays into tabular data using jsonb_array_elements(). The query extracts food log entries from the JSONB field and outputs them as rows with columns for title, calories, and meal type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  user_id,\n  date,\n  jsonb_array_elements(food_log)->>'title' as title,\n  jsonb_array_elements(food_log)->'calories' as calories,\n  jsonb_array_elements(food_log)->'meal' as meal\nfrom calendar\nwhere user_id = 'xyz'\n  and date between '2022-01-01' and '2022-01-31';\n```\n\n----------------------------------------\n\nTITLE: Executing EXPLAIN with supabase-js\nDESCRIPTION: Example of using the EXPLAIN function with the supabase-js library to get execution plan with analyze and verbose options enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('countries')\n  .select()\n  .explain({analyze:true,verbose:true})\n```\n\n----------------------------------------\n\nTITLE: Database Reset Command for Preview Branches\nDESCRIPTION: Command to reset a preview branch database using the Supabase CLI with a branch-specific connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-supabase-branching.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db reset --db-url <branch-connection-string>\n```\n\n----------------------------------------\n\nTITLE: Clearing Embeddings with SQL Trigger on Update\nDESCRIPTION: This SQL snippet sets up a 'before update' trigger to clear the 'embedding' column whenever either the 'title' or 'content' columns in the 'documents' table are updated. The 'util.clear_column' function is utilized to ensure accurate synchronization of embeddings but requires updates in the 'hstore' extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n-- Trigger to clear the embedding column on update\ncreate trigger clear_document_embedding_on_update\n  before update of title, content -- must match the columns in embedding_input()\n  on documents\n  for each row\n  execute function util.clear_column('embedding');\n```\n\n----------------------------------------\n\nTITLE: Using Common Table Expressions (CTE)\nDESCRIPTION: Demonstrates how to use CTEs to create temporary result sets for more readable and maintainable queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nwith ten_strumpers as (\n  select id, first_name\n  from students\n  where surname = 'Strumper'\n  order by first_name\n  limit 10\n)\nselect id\nfrom ten_strumpers\nwhere first_name like \"S%\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in TypeScript\nDESCRIPTION: Creating a helper file to initialize the Supabase client using environment variables, making it available throughout the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n```\n\n----------------------------------------\n\nTITLE: Deploying Discord Bot to Supabase Edge Functions\nDESCRIPTION: This snippet demonstrates how to deploy the Discord bot to Supabase Edge Functions and set the required environment variable for Discord's public key authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy discord-bot --no-verify-jwt\nsupabase secrets set DISCORD_PUBLIC_KEY=your_public_key\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage in Python\nDESCRIPTION: This snippet shows how to upload a file to Supabase Storage using the standard upload method in Python. It assumes a Supabase client has already been initialized.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.storage.from_('bucket_name').upload('file_path', file)\n```\n\n----------------------------------------\n\nTITLE: Querying Nearby Restaurants with Kotlin\nDESCRIPTION: Kotlin code to call the nearby_restaurants function using JSON objects to pass parameters. This demonstrates how to build a parameter object for RPC calls in Kotlin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.postgrest.rpc(\n    function = \"nearby_restaurants\",\n    parameters = buildJsonObject { //You can put here any serializable object including your own classes\n        put(\"lat\", 40.807313)\n        put(\"lon\", -73.946713)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: API Gateway Access Example\nDESCRIPTION: Example of accessing the Supabase API gateway using curl with authentication headers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://localhost:54321/rest/v1/' \\\n    -H \"apikey: <anon key>\" \\\n    -H \"Authorization: Bearer <anon key>\"\n```\n\n----------------------------------------\n\nTITLE: Finalizing Canvas Object Drawing in Flutter\nDESCRIPTION: This method handles the completion of a drawing operation. It syncs the final object position, clears the drawing state, and persists the drawn object to Supabase database using an upsert operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nvoid onPanEnd(DragEndDetails _) async {\n    if (_currentlyDrawingObjectId != null) {\n      _syncCanvasObject(_cursorPosition);\n    }\n\n    final drawnObjectId = _currentlyDrawingObjectId;\n\n    setState(() {\n      _panStartPoint = null;\n      _currentlyDrawingObjectId = null;\n    });\n\n    // Save whatever was drawn to Supabase DB\n    if (drawnObjectId == null) {\n      return;\n    }\n    await supabase.from('canvas_objects').upsert({\n      'id': drawnObjectId,\n      'object': _canvasObjects[drawnObjectId]!.toJson(),\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Signing In with Discord - Flutter\nDESCRIPTION: This Flutter snippet demonstrates how to sign in users using Discord OAuth through the Supabase client. The `signInWithOAuth()` method is called with `OAuthProvider.discord` to initiate the login process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithDiscord() async {\\n  await supabase.auth.signInWithOAuth(\\n    OAuthProvider.discord,\\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\\n    authScreenLaunchMode:\\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for AWS Credentials\nDESCRIPTION: Configuration file containing AWS credentials and region settings for Amazon Bedrock integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nAWS_DEFAULT_REGION=\"<your_region>\"\nAWS_ACCESS_KEY_ID=\"<replace_your_own_credentials>\"\nAWS_SECRET_ACCESS_KEY=\"<replace_your_own_credentials>\"\nAWS_SESSION_TOKEN=\"<replace_your_own_credentials>\"\n\n# Mocked config files\nAWS_SHARED_CREDENTIALS_FILE=\"./aws/credentials\"\nAWS_CONFIG_FILE=\"./aws/config\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Text-to-Speech Edge Function\nDESCRIPTION: Main implementation of the Edge Function that handles text-to-speech conversion, streaming, and storage using Supabase and ElevenLabs API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\nimport { ElevenLabsClient } from 'npm:elevenlabs@1.52.0'\nimport * as hash from 'npm:object-hash'\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL')!,\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n)\n\nconst client = new ElevenLabsClient({\n  apiKey: Deno.env.get('ELEVENLABS_API_KEY'),\n})\n\nasync function uploadAudioToStorage(stream: ReadableStream, requestHash: string) {\n  const { data, error } = await supabase.storage\n    .from('audio')\n    .upload(`${requestHash}.mp3`, stream, {\n      contentType: 'audio/mp3',\n    })\n\n  console.log('Storage upload result', { data, error })\n}\n\nDeno.serve(async (req) => {\n  console.log('Request origin', req.headers.get('host'))\n  const url = new URL(req.url)\n  const params = new URLSearchParams(url.search)\n  const text = params.get('text')\n  const voiceId = params.get('voiceId') ?? 'JBFqnCBsd6RMkjVDRZzb'\n\n  const requestHash = hash.MD5({ text, voiceId })\n  console.log('Request hash', requestHash)\n\n  const { data } = await supabase.storage.from('audio').createSignedUrl(`${requestHash}.mp3`, 60)\n\n  if (data) {\n    console.log('Audio file found in storage', data)\n    const storageRes = await fetch(data.signedUrl)\n    if (storageRes.ok) return storageRes\n  }\n\n  if (!text) {\n    return new Response(JSON.stringify({ error: 'Text parameter is required' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' },\n    })\n  }\n\n  try {\n    console.log('ElevenLabs API call')\n    const response = await client.textToSpeech.convertAsStream(voiceId, {\n      output_format: 'mp3_44100_128',\n      model_id: 'eleven_multilingual_v2',\n      text,\n    })\n\n    const stream = new ReadableStream({\n      async start(controller) {\n        for await (const chunk of response) {\n          controller.enqueue(chunk)\n        }\n        controller.close()\n      },\n    })\n\n    const [browserStream, storageStream] = stream.tee()\n\n    EdgeRuntime.waitUntil(uploadAudioToStorage(storageStream, requestHash))\n\n    return new Response(browserStream, {\n      headers: {\n        'Content-Type': 'audio/mpeg',\n      },\n    })\n  } catch (error) {\n    console.log('error', { error })\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Cron Jobs in Postgres\nDESCRIPTION: This SQL query retrieves a list of all scheduled cron jobs from the cron.job table in the Postgres database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect * from cron.job;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Auth0 in Flutter\nDESCRIPTION: This Dart code snippet for Flutter initializes a Supabase client integrated with Auth0. Required libraries include 'auth0_flutter', 'flutter', and 'supabase_flutter'. Auth0's credentials manager is used to acquire an access token asynchronously.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:auth0_flutter/auth0_flutter.dart';\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nFuture<void> main() async {\n  final auth0 = Auth0('AUTH0_DOMAIN', 'AUTH0_CLIENT_ID');\n  await Supabase.initialize(\n    url: 'https://<supabase-project>.supabase.co',\n    anonKey: 'SUPABASE_ANON_KEY',\n    accessToken: () async {\n      final credentials = await auth0.credentialsManager.credentials();\n      return credentials.accessToken;\n    },\n  );\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Queues in PGMQ with SQL\nDESCRIPTION: The list_queues function returns a table of all existing queues, including their names, creation timestamps, and partition/unlogged status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.list_queues();\n      queue_name      |          created_at           | is_partitioned | is_unlogged\n----------------------+-------------------------------+----------------+-------------\n my_queue             | 2023-10-28 14:13:17.092576-05 | f              | f\n my_partitioned_queue | 2023-10-28 19:47:37.098692-05 | t              | f\n my_unlogged          | 2023-10-28 20:02:30.976109-05 | f              | t\n```\n\n----------------------------------------\n\nTITLE: Unlinking Identity with JavaScript\nDESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity from a user using the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: identities, error: identitiesError } = await supabase.auth.getUserIdentities()\n\nif (!identitiesError) {\n  const googleIdentity = identities.identities.find((identity) => identity.provider === 'google')\n\n  if (googleIdentity) {\n    const { data, error } = await supabase.auth.unlinkIdentity(googleIdentity)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Account Management Component\nDESCRIPTION: A Svelte component for authenticated users to view and edit their profile information, including username and website. The component handles fetching, updating, and persisting user data in Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { onMount } from 'svelte'\n  import type { AuthSession } from '@supabase/supabase-js'\n  import { supabase } from '../supabaseClient'\n\n  export let session: AuthSession\n\n  let loading = false\n  let username: string | null = null\n  let website: string | null = null\n  let avatarUrl: string | null = null\n\n  onMount(() => {\n    getProfile()\n  })\n\n  const getProfile = async () => {\n    try {\n      loading = true\n      const { user } = session\n\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select('username, website, avatar_url')\n        .eq('id', user.id)\n        .single()\n\n      if (error && status !== 406) throw error\n\n      if (data) {\n        username = data.username\n        website = data.website\n        avatarUrl = data.avatar_url\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      loading = false\n    }\n  }\n\n  const updateProfile = async () => {\n    try {\n      loading = true\n      const { user } = session\n\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url: avatarUrl,\n        updated_at: new Date().toISOString(),\n      }\n\n      const { error } = await supabase.from('profiles').upsert(updates)\n\n      if (error) {\n        throw error\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<form on:submit|preventDefault=\"{updateProfile}\" class=\"form-widget\">\n  <div>Email: {session.user.email}</div>\n  <div>\n    <label for=\"username\">Name</label>\n    <input id=\"username\" type=\"text\" bind:value=\"{username}\" />\n  </div>\n  <div>\n    <label for=\"website\">Website</label>\n    <input id=\"website\" type=\"text\" bind:value=\"{website}\" />\n  </div>\n  <div>\n    <button type=\"submit\" class=\"button primary block\" disabled=\"{loading}\">\n      {loading ? 'Saving ...' : 'Update profile'}\n    </button>\n  </div>\n  <button type=\"button\" class=\"button block\" on:click={() => supabase.auth.signOut()}> Sign Out\n  </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in SvelteKit Layout (v0.8.x)\nDESCRIPTION: Sets up Supabase client initialization and auth state change listener in SvelteKit layout component for version 0.8.x. Handles authentication state changes and invalidates auth data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { supabaseClient } from '$lib/db'\n  import { invalidate } from '$app/navigation'\n  import { onMount } from 'svelte'\n\n  onMount(() => {\n    const {\n      data: { subscription },\n    } = supabaseClient.auth.onAuthStateChange(() => {\n      invalidate('supabase:auth')\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Static Single Post Component with Revalidation\nDESCRIPTION: Implements a server component for individual post display with static parameter generation and revalidation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport supabase from '../../../utils/supabase'\nimport { notFound } from 'next/navigation'\n\nexport const revalidate = 60\n\nexport async function generateStaticParams() {\n  const { data: posts } = await supabase.from('posts').select('id')\n\n  return posts?.map(({ id }) => ({\n    id,\n  }))\n}\n\nexport default async function Post({ params: { id } }: { params: { id: string } }) {\n  const { data: post } = await supabase.from('posts').select().match({ id }).single()\n\n  if (!post) {\n    notFound()\n  }\n\n  return <pre>{JSON.stringify(post, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Public View for Vector Collection\nDESCRIPTION: SQL code to create a public view that exposes a vector collection with metadata and URL extraction\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate view public.docs as\nselect\n  id,\n  embedding,\n  metadata, # Expose the metadata as JSON\n  (metadata->>'url')::text as url # Extract the URL as a string\nfrom vector\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Permissions for Password Sign-in Attempts in SQL\nDESCRIPTION: This SQL snippet sets up permissions for the 'password_sign_in_attempts' table in the public schema. It restricts access to authenticated users, anonymous users, and public roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\non table public.password_sign_in_attempts\nfrom authenticated, anon, public;\n```\n\n----------------------------------------\n\nTITLE: Signing in with Magic Link using Expo React Native\nDESCRIPTION: Illustrates using Supabase in an Expo React Native environment to send a magic link. Utilizes `expo-auth-session` for redirect URI configuration. Input: user email.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { makeRedirectUri } from 'expo-auth-session'\n\nconst redirectTo = makeRedirectUri()\n\nconst { error } = await supabase.auth.signInWithOtp({\n  email: 'valid.email@supabase.io',\n  options: {\n    emailRedirectTo: redirectTo,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Page with Profile Management in Flutter and Supabase\nDESCRIPTION: A StatefulWidget that allows users to view and update their profile information stored in Supabase. It includes functionality to fetch profile data, update profile details, and sign out. The widget handles various error states and loading indicators.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/main.dart';\nimport 'package:supabase_quickstart/pages/login_page.dart';\n\nclass AccountPage extends StatefulWidget {\n  const AccountPage({super.key});\n\n  @override\n  State<AccountPage> createState() => _AccountPageState();\n}\n\nclass _AccountPageState extends State<AccountPage> {\n  final _usernameController = TextEditingController();\n  final _websiteController = TextEditingController();\n\n  String? _avatarUrl;\n  var _loading = true;\n\n  /// Called once a user id is received within `onAuthenticated()`\n  Future<void> _getProfile() async {\n    setState(() {\n      _loading = true;\n    });\n\n    try {\n      final userId = supabase.auth.currentSession!.user.id;\n      final data =\n          await supabase.from('profiles').select().eq('id', userId).single();\n      _usernameController.text = (data['username'] ?? '') as String;\n      _websiteController.text = (data['website'] ?? '') as String;\n      _avatarUrl = (data['avatar_url'] ?? '') as String;\n    } on PostgrestException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _loading = false;\n        });\n      }\n    }\n  }\n\n  /// Called when user taps `Update` button\n  Future<void> _updateProfile() async {\n    setState(() {\n      _loading = true;\n    });\n    final userName = _usernameController.text.trim();\n    final website = _websiteController.text.trim();\n    final user = supabase.auth.currentUser;\n    final updates = {\n      'id': user!.id,\n      'username': userName,\n      'website': website,\n      'updated_at': DateTime.now().toIso8601String(),\n    };\n    try {\n      await supabase.from('profiles').upsert(updates);\n      if (mounted) context.showSnackBar('Successfully updated profile!');\n    } on PostgrestException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _loading = false;\n        });\n      }\n    }\n  }\n\n  Future<void> _signOut() async {\n    try {\n      await supabase.auth.signOut();\n    } on AuthException catch (error) {\n      if (mounted) context.showSnackBar(error.message, isError: true);\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    } finally {\n      if (mounted) {\n        Navigator.of(context).pushReplacement(\n          MaterialPageRoute(builder: (_) => const LoginPage()),\n        );\n      }\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _getProfile();\n  }\n\n  @override\n  void dispose() {\n    _usernameController.dispose();\n    _websiteController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Profile')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),\n        children: [\n          TextFormField(\n            controller: _usernameController,\n            decoration: const InputDecoration(labelText: 'User Name'),\n          ),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _websiteController,\n            decoration: const InputDecoration(labelText: 'Website'),\n          ),\n          const SizedBox(height: 18),\n          ElevatedButton(\n            onPressed: _loading ? null : _updateProfile,\n            child: Text(_loading ? 'Saving...' : 'Update'),\n          ),\n          const SizedBox(height: 18),\n          TextButton(onPressed: _signOut, child: const Text('Sign Out')),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing a JWT using pgjwt in PostgreSQL\nDESCRIPTION: Example of using the sign function from the pgjwt extension to create a JWT. The function takes a JSON payload, a secret, and an optional algorithm as parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgjwt.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  extensions.sign(\n    payload   := '{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"iat\":1516239022}',\n    secret    := 'secret',\n    algorithm := 'HS256'\n  );\n```\n\n----------------------------------------\n\nTITLE: Syncing and Tracking State in Python\nDESCRIPTION: This snippet illustrates how to listen to presence events in Python, handling sync, join, and leave actions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nroom_one = supabase.channel('room_01')\n\nroom_one\n  .on_presence_sync(lambda: print('sync', room_one.presenceState()))\n  .on_presence_join(lambda key, curr_presences, joined_presences: print('join', key, curr_presences, joined_presences))\n  .on_presence_leave(lambda key, curr_presences, left_presences: print('leave', key, curr_presences, left_presences))\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Removing IP Bans with Supabase CLI\nDESCRIPTION: Command to remove a specific IP address from the ban list, allowing connections from that IP to your Supabase project database again. This is useful when you've been locked out due to failed login attempts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-connection-refused-when-trying-to-connect-to-supabase-database-hwG0Dr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n% supabase network-bans remove --db-unban-ip <ip_address> --project-ref <project_reference_id> --experimental\n```\n\n----------------------------------------\n\nTITLE: Supabase Database Connection String Format\nDESCRIPTION: Example format of a Supabase database connection string using connection pooling in session mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\npostgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Creating ProductListScreen with Jetpack Compose - Kotlin\nDESCRIPTION: Implements a Compose UI screen to display a list of products with refresh functionality, using Hilt for ViewModel injection. Incorporates swipe-to-dismiss actions and navigation to an 'add product' screen using Jetpack Compose's scaffold and lists.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)\n@Composable\nfun ProductListScreen(\n    modifier: Modifier = Modifier,\n    navController: NavController,\n    viewModel: ProductListViewModel = hiltViewModel(),\n) {\n    val isLoading by viewModel.isLoading.collectAsState(initial = false)\n    val swipeRefreshState = rememberSwipeRefreshState(isRefreshing = isLoading)\n    SwipeRefresh(state = swipeRefreshState, onRefresh = { viewModel.getProducts() }) {\n        Scaffold(\n            topBar = {\n                TopAppBar(\n                    backgroundColor = MaterialTheme.colorScheme.primary,\n                    title = {\n                        Text(\n                            text = stringResource(R.string.product_list_text_screen_title),\n                            color = MaterialTheme.colorScheme.onPrimary,\n                        )\n                    },\n                )\n            },\n            floatingActionButton = {\n                AddProductButton(onClick = { navController.navigate(AddProductDestination.route) })\n            }\n        ) { padding ->\n            val productList = viewModel.productList.collectAsState(initial = listOf()).value\n            if (!productList.isNullOrEmpty()) {\n                LazyColumn(\n                    modifier = modifier.padding(padding),\n                    contentPadding = PaddingValues(5.dp)\n                ) {\n                    itemsIndexed(\n                        items = productList,\n                        key = { _, product -> product.name }) { _, item ->\n                        val state = rememberDismissState(\n                            confirmStateChange = {\n                                if (it == DismissValue.DismissedToStart) {\n                                    // Handle item removed\n                                    viewModel.removeItem(item)\n                                }\n                                true\n                            }\n                        )\n                        SwipeToDismiss(\n                            state = state,\n                            background = {\n                                val color by animateColorAsState(\n                                    targetValue = when (state.dismissDirection) {\n                                        DismissDirection.StartToEnd -> MaterialTheme.colorScheme.primary\n                                        DismissDirection.EndToStart -> MaterialTheme.colorScheme.primary.copy(\n                                            alpha = 0.2f\n                                        )\n                                        null -> Color.Transparent\n                                    }\n                                )\n                                Box(\n                                    modifier = modifier\n                                        .fillMaxSize()\n                                        .background(color = color)\n                                        .padding(16.dp),\n                                ) {\n                                    Icon(\n                                        imageVector = Icons.Filled.Delete,\n                                        contentDescription = null,\n                                        tint = MaterialTheme.colorScheme.primary,\n                                        modifier = modifier.align(Alignment.CenterEnd)\n                                    )\n                                }\n\n                            },\n                            dismissContent = {\n                                ProductListItem(\n                                    product = item,\n                                    modifier = modifier,\n                                    onClick = {\n                                        navController.navigate(\n                                            ProductDetailsDestination.createRouteWithParam(\n                                                item.id\n                                            )\n                                        )\n                                    },\n                                )\n                            },\n                            directions = setOf(DismissDirection.EndToStart),\n                        )\n                    }\n                }\n            } else {\n                Text(\"Product list is empty!\")\n            }\n\n        }\n    }\n}\n\n@Composable\nprivate fun AddProductButton(\n    modifier: Modifier = Modifier,\n    onClick: () -> Unit,\n) {\n    FloatingActionButton(\n        modifier = modifier,\n        onClick = onClick,\n        containerColor = MaterialTheme.colorScheme.primary,\n        contentColor = MaterialTheme.colorScheme.onPrimary\n    ) {\n        Icon(\n            imageVector = Icons.Filled.Add,\n            contentDescription = null,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Cubit Implementation for Real-time Message Handling\nDESCRIPTION: Implements a Cubit for managing chat state and real-time message synchronization with Supabase, including message sending and stream subscription management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:bloc/bloc.dart';\nimport 'package:meta/meta.dart';\nimport 'package:my_chat_app/models/message.dart';\nimport 'package:my_chat_app/utils/constants.dart';\n\npart 'chat_state.dart';\n\nclass ChatCubit extends Cubit<ChatState> {\n  ChatCubit() : super(ChatInitial());\n\n  StreamSubscription<List<Message>>? _messagesSubscription;\n  List<Message> _messages = [];\n\n  late final String _roomId;\n  late final String _myUserId;\n\n  void setMessagesListener(String roomId) {\n    _roomId = roomId;\n\n    _myUserId = supabase.auth.currentUser!.id;\n\n    _messagesSubscription = supabase\n        .from('messages')\n        .stream(primaryKey: ['id'])\n        .eq('room_id', roomId)\n        .order('created_at')\n        .map<List<Message>>(\n          (data) => data\n              .map<Message>(\n                  (row) => Message.fromMap(map: row, myUserId: _myUserId))\n              .toList(),\n        )\n        .listen((messages) {\n          _messages = messages;\n          if (_messages.isEmpty) {\n            emit(ChatEmpty());\n          } else {\n            emit(ChatLoaded(_messages));\n          }\n        });\n  }\n\n  Future<void> sendMessage(String text) async {\n    final message = Message(\n      id: 'new',\n      roomId: _roomId,\n      profileId: _myUserId,\n      content: text,\n      createdAt: DateTime.now(),\n      isMine: true,\n    );\n    _messages.insert(0, message);\n    emit(ChatLoaded(_messages));\n\n    try {\n      await supabase.from('messages').insert(message.toMap());\n    } catch (_) {\n      emit(ChatError('Error submitting message.'));\n      _messages.removeWhere((message) => message.id == 'new');\n      emit(ChatLoaded(_messages));\n    }\n  }\n\n  @override\n  Future<void> close() {\n    _messagesSubscription?.cancel();\n    return super.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample SQL Table\nDESCRIPTION: Creates a sample 'movies' table in the public schema with id, name, and data columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.movies (\n  id bigint generated always as identity primary key,\n  name text not null,\n  data jsonb null\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RegisterPage Component in Angular\nDESCRIPTION: Defines the RegisterPage component with form controls, validation, and account creation functionality using AuthService.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core'\nimport { Validators, FormBuilder } from '@angular/forms'\nimport { LoadingController, AlertController, NavController } from '@ionic/angular'\nimport { AuthService } from 'src/app/services/auth.service'\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage {\n  credentials = this.fb.nonNullable.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(6)]],\n  })\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private loadingController: LoadingController,\n    private alertController: AlertController,\n    private navCtrl: NavController\n  ) {}\n\n  get email() {\n    return this.credentials.controls.email\n  }\n\n  get password() {\n    return this.credentials.controls.password\n  }\n\n  async createAccount() {\n    const loading = await this.loadingController.create()\n    await loading.present()\n\n    this.authService.signUp(this.credentials.getRawValue()).then(async (data) => {\n      await loading.dismiss()\n\n      if (data.error) {\n        this.showAlert('Registration failed', data.error.message)\n      } else {\n        this.showAlert('Signup success', 'Please confirm your email now!')\n        this.navCtrl.navigateBack('')\n      }\n    })\n  }\n\n  async showAlert(title, msg) {\n    const alert = await this.alertController.create({\n      header: title,\n      message: msg,\n      buttons: ['OK'],\n    })\n    await alert.present()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Table Creation for Vector Storage\nDESCRIPTION: Shows the SQL statement that Vecs generates to create a table for storing vectors. This table includes columns for the ID, vector data, and associated metadata stored as JSONB.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table vecs.docs (\n    id text primary key,\n    vec vector(3) not null,\n    metadata jsonb not null default '{}'::jsonb\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Requests in PostgreSQL Triggers\nDESCRIPTION: Creates a trigger function that makes HTTP POST requests when table updates occur. The function sends both old and new row data to an external endpoint using pg_net.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n-- function called by trigger\ncreate or replace function <function_name>()\n    returns trigger\n    language plpgSQL\nas $$\nbegin\n    -- calls pg_net function net.http_post\n    -- sends request to postman API\n    perform \"net\".\"http_post\"(\n      'https://postman-echo.com/post'::text,\n      jsonb_build_object(\n        'old_row', to_jsonb(old.*),\n        'new_row', to_jsonb(new.*)\n      ),\n      headers:='{\"Content-Type\": \"application/json\"}'::jsonb\n    ) as request_id;\n    return new;\nEND $$;\n\n-- trigger for table update\ncreate trigger <trigger_name>\n    after update on <table_name>\n    for each row\n    execute function <function_name>();\n```\n\n----------------------------------------\n\nTITLE: Listening only to 'INSERT' events in JavaScript\nDESCRIPTION: This JavaScript snippet configures a Supabase client to listen only for INSERT events in the 'public' schema. The function logs specific changes to the console. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst changes = supabase\n  .channel('schema-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT', // Listen only to INSERTs\n      schema: 'public',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Creating Users with Admin API\nDESCRIPTION: Uses edge.exec to call the Supabase Auth Admin API for creating new users. Demonstrates setting email, password and user metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nselect edge.exec(\n$js$\n\nconst { data, error } = await supabase.auth.admin.createUser({\n  email: 'user@email.com',\n  password: 'password',\n  user_metadata: { name: 'Yoda' }\n});\n\n$js$));\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Sign-Out in Flutter with Supabase\nDESCRIPTION: This Flutter code snippet shows how to log out a user by calling the `signOut` method from the Supabase auth client, effectively terminating the user session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Public Read Access Policy for Instruments Table in SQL\nDESCRIPTION: This SQL snippet creates a row-level security policy that allows public read access to the 'instruments' table. It grants select permissions to the 'anon' role, effectively making the data publicly readable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/quickstart_db_setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"public can read instruments\"\non public.instruments\nfor select to anon\nusing (true);\n```\n\n----------------------------------------\n\nTITLE: Signing In with Spotify - Flutter\nDESCRIPTION: This snippet shows how to authenticate a user using Spotify OAuth in a Flutter application. It uses the `signInWithOAuth` method and specifies `OAuthProvider.spotify` as the provider, along with optional parameters for redirect handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithSpotify() async {\\n  await supabase.auth.signInWithOAuth(\\n    OAuthProvider.spotify,\\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\\n    authScreenLaunchMode: kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in Android Activity\nDESCRIPTION: Kotlin implementation for handling deep links in the Android activity's onCreate method using Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    supabase.handleDeeplinks(intent)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product and Vendor Data in SQL\nDESCRIPTION: This SQL query joins the Product and Vendor tables to retrieve vendor names, product names, and total employees for vendors with employees. It demonstrates how to create a custom query in Metabase for visualization purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-29-visualizing-supabase-data-using-metabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect \"Vendor\".vendor_name, product_name, \"Vendor\".total_employees\nfrom\n  \"Product\"\n  left join \"Vendor\" on \"Product\".vendor_id = \"Vendor\".vendor_id\nwhere \"Vendor\".total_employees;\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone-based MFA with Supabase Auth in TypeScript\nDESCRIPTION: This code snippet shows how to implement phone-based multi-factor authentication using Supabase Auth. It includes sending an SMS or WhatsApp message challenge and verifying the received code. The user's 'aal' claim in the JWT is upgraded to aal2 upon successful verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-14-third-party-auth-mfa-phone-send-hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Send an SMS or WhatsApp message to the user\nconst { data: { challengeId } } = await supabase.auth.mfa.challenge({\n  factorId,\n})\n\n// To verify the code received by the user\nawait supabase.auth.mfa.verify({\n  factorId,\n  challengeId,\n  code: '123456',\n})\n\n// The user's `aal` claim in the JWT \n// will be upgraded to aal2\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage in JavaScript\nDESCRIPTION: This snippet demonstrates how to upload a file to Supabase Storage using the standard upload method in JavaScript. It uses the supabase-js SDK to create a client and perform the upload.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Create Supabase client\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// Upload file using standard upload\nasync function uploadFile(file) {\n  const { data, error } = await supabase.storage.from('bucket_name').upload('file_path', file)\n  if (error) {\n    // Handle error\n  } else {\n    // Handle success\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Normalized Data with Supabase JavaScript Client\nDESCRIPTION: Example of querying normalized data from Supabase using the JavaScript client. This demonstrates the simpler syntax when working with properly structured relational data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('https://<your-project>.supabase.co', '<your-api-key>')\n\nconst { data, error } = await supabase.from('users').select('name, email')\n\nif (error) console.error(error)\nelse console.log(data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page in Flutter with Supabase Authentication\nDESCRIPTION: This code creates a login page with email and password fields. It uses Supabase for user authentication and includes error handling and navigation to the chat page upon successful login.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:my_chat_app/pages/chat_page.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({Key? key}) : super(key: key);\n\n  static Route<void> route() {\n    return MaterialPageRoute(builder: (context) => const LoginPage());\n  }\n\n  @override\n  _LoginPageState createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  bool _isLoading = false;\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n\n  Future<void> _signIn() async {\n    setState(() {\n      _isLoading = true;\n    });\n    try {\n      await supabase.auth.signInWithPassword(\n        email: _emailController.text,\n        password: _passwordController.text,\n      );\n      Navigator.of(context)\n          .pushAndRemoveUntil(ChatPage.route(), (route) => false);\n    } on AuthException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (_) {\n      context.showErrorSnackBar(message: unexpectedErrorMessage);\n    }\n    if (mounted) {\n      setState(() {\n        _isLoading = true;\n      });\n    }\n  }\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    _passwordController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sign In')),\n      body: ListView(\n        padding: formPadding,\n        children: [\n          TextFormField(\n            controller: _emailController,\n            decoration: const InputDecoration(labelText: 'Email'),\n            keyboardType: TextInputType.emailAddress,\n          ),\n          formSpacer,\n          TextFormField(\n            controller: _passwordController,\n            decoration: const InputDecoration(labelText: 'Password'),\n            obscureText: true,\n          ),\n          formSpacer,\n          ElevatedButton(\n            onPressed: _isLoading ? null : _signIn,\n            child: const Text('Login'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Info Alert Dialog Implementation\nDESCRIPTION: Text confirm dialog with info alert styling, featuring a title and descriptive text about CLI usage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/text-confirm-dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"text-confirm-dialog-with-info-alert\"\n  description=\"An alert with an icon, title and description. The title says 'Heads up!' and the description is 'You can add components to your app using the cli.'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating New Migration File - Bash\nDESCRIPTION: Command to generate a new migration file for creating the employees table using Supabase CLI\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration new create_employees_table\n```\n\n----------------------------------------\n\nTITLE: Creating Basic View in PostgreSQL\nDESCRIPTION: Creates a view named 'transcripts' that joins students, courses, and grades tables to provide a comprehensive transcript view. Includes grant permissions for authenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate view transcripts as\n    select\n        students.name,\n        students.type,\n        courses.title,\n        courses.code,\n        grades.result\n    from grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n\ngrant all on table transcripts to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Supabase\nDESCRIPTION: Configuration of environment variables in a .env.local file to store Supabase URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL\nNEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDv1 with Random MAC Address in PostgreSQL\nDESCRIPTION: Shows how to enable the uuid-ossp extension and generate a version 1 UUID with a randomized MAC address using the uuid_generate_v1mc() function. UUIDv1 contains a 60-bit date-time component and a randomized 48-bit MAC address component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION\n\nSELECT uuid_generate_v1mc();\n\n          uuid_generate_v1mc\n--------------------------------------\n dd1bbf10-0b47-11ed-80de-db48f6faaf86\n\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in Python with Supabase\nDESCRIPTION: Python implementation to update a user's password after a successful password reset flow using the Supabase authentication client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nsupabase.auth.update_user({'password': 'new_password'})\n```\n\n----------------------------------------\n\nTITLE: Exporting Collections from Fauna to Amazon S3\nDESCRIPTION: Uses the Fauna CLI to export collections to Amazon S3 in JSON format. This command specifies the database name, collection name, S3 bucket, and path for the export.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfauna export create s3 \\\n  --database <database_name> \\\n  --collection <collection_name> \\\n  --bucket <s3_bucket_name> \\\n  --path <s3_bucket_path> \\\n  --format simple\n```\n\n----------------------------------------\n\nTITLE: Running Local Supabase Development Commands\nDESCRIPTION: Common CLI commands used for local Supabase development and database management including starting the local environment, resetting the database, and generating migration diffs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-supabase-branching.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase db reset\nsupabase db diff\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling pgjwt Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and disable the pgjwt extension in PostgreSQL. It's recommended to create the extension within a separate schema to keep the public schema clean.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgjwt.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pgjwt\" extension\ncreate extension pgjwt schema extensions;\n\n-- Disable the \"pgjwt\" extension\ndrop extension if exists pgjwt;\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Callback Handler in Next.js\nDESCRIPTION: Server-side implementation of the callback endpoint that exchanges authentication code for a user session. Handles the PKCE code exchange process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// api/auth/callback\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { createServerSupabaseClient } from '@supabase/auth-helpers-nextjs'\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Create authenticated Supabase Client\n  const supabase = createServerSupabaseClient(\n    { req, res },\n    {\n      supabaseUrl: SUPABASE_URL,\n      supabaseKey: SUPABASE_ANON_KEY,\n    }\n  )\n  // check for code in url querystring\n  const code = req.query.code\n\n  if (typeof code === 'string') {\n    // exchange the auth code for user session\n    await supabase.auth.exchangeCodeForSession(code)\n  }\n\n  // redirect the user to a server-side protected area in your app\n  res.redirect('/')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating plv8 Functions in PostgreSQL\nDESCRIPTION: Template for creating PostgreSQL functions using the plv8 language. The function body contains JavaScript code that runs on the V8 engine.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function function_name()\nreturns void as $$\n    // V8 JavaScript\n    // code\n    // here\n$$ language plv8;\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Shorthands for Tables\nDESCRIPTION: This example shows how to use TypeScript shorthands for accessing table types, making the code more concise and readable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Database, Tables, Enums } from \"./database.types.ts\";\n\n// Before 😕\nlet movie: Database['public']['Tables']['movies']['Row'] = // ...\n\n// After 😍\nlet movie: Tables<'movies'>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Auth0 in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set up the Supabase client and Auth0 client together. Auth0 is used for authorization, retrieving a silent token when needed. Dependencies include '@supabase/supabase-js' and '@auth0/auth0-spa-js'. Parameters include domain, clientId, and redirect_uri for Auth0 setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport Auth0Client from '@auth0/auth0-spa-js'\n\nconst auth0 = new Auth0Client({\n  domain: '<AUTH0_DOMAIN>',\n  clientId: '<AUTH0_CLIENT_ID>',\n  authorizationParams: {\n    redirect_uri: '<MY_CALLBACK_URL>',\n  },\n})\n\nconst supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n  accessToken: async () => {\n    const accessToken = await auth0.getTokenSilently()\n\n    // Alternatively you can use (await auth0.getIdTokenClaims()).__raw to\n    // use an ID token instead.\n\n    return accessToken\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Future Concept: Async Client for Vecs\nDESCRIPTION: A conceptual example of a potential future feature that would provide asynchronous operations to avoid blocking when waiting on database or network operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# This is mock code only, not currently functional\n\nawait docs.upsert([\n    (\"id_0\", [0.1, 0.2, 0.3], {}),\n])\n```\n\n----------------------------------------\n\nTITLE: Inserting Secrets into Supabase Vault in SQL\nDESCRIPTION: Demonstrates how to insert a secret into the Supabase Vault. This method encrypts the secret before storing it in the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into vault.secrets\n  (secret, associated)\nvalues\n  ('s3kr3t_k3y', 'This is the secret API service key.');\n```\n\n----------------------------------------\n\nTITLE: Creating Inner Product Search Function with pgvector in PGlite\nDESCRIPTION: This function performs vector similarity search using pgvector's inner product operator. It takes an embedding vector, match threshold, and result limit as parameters, and returns the most similar items from the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const search = async (db, embedding, match_threshold = 0.8, limit = 3) => {\n  const res = await db.query(\n    `\n    select * from embeddings\n\n    -- The inner product is negative, so we negate match_threshold\n    where embeddings.embedding <#> $1 < $2\n\n    -- Our embeddings are normalized to length 1, so cosine similarity\n    -- and inner product will produce the same query results.\n    -- Using inner product which can be computed faster.\n    --\n    -- For the different distance functions, see https://github.com/pgvector/pgvector\n    order by embeddings.embedding <#> $1\n    limit $3;\n    `,\n    [JSON.stringify(embedding), -Number(match_threshold), Number(limit)]\n  )\n  return res.rows\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Department Column Migration - Bash\nDESCRIPTION: Command to generate a new migration file for adding department column\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration new add_department_to_employees_table\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger Function for Auditing in PostgreSQL\nDESCRIPTION: Defines a trigger function that automatically populates the audit table when data changes occur in the audited tables. It captures inserts, updates, and deletes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function audit.insert_update_delete_trigger()\n    returns trigger\n    security definer\n    language plpgsql\nas $$\ndeclare\n    pkey_cols text[] = audit.primary_key_columns(TG_RELID);\n    record_jsonb jsonb = to_jsonb(new);\n    record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, record_jsonb);\n    old_record_jsonb jsonb = to_jsonb(old);\n    old_record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, old_record_jsonb);\nbegin\n\n    insert into audit.record_version(\n        record_id,\n        old_record_id,\n        op,\n        table_oid,\n        table_schema,\n        table_name,\n        record,\n        old_record\n    )\n    select\n        record_id,\n        old_record_id,\n        TG_OP,\n        TG_RELID,\n        TG_TABLE_SCHEMA,\n        TG_TABLE_NAME,\n        record_jsonb,\n        old_record_jsonb;\n\n    return coalesce(new, old);\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropzone Component in React\nDESCRIPTION: This TypeScript code demonstrates how to incorporate the Dropzone component into a React application, allowing users to upload files directly to Supabase Storage. It uses the 'useSupabaseUpload' hook to manage upload configurations such as bucket name, path, allowed MIME types, and file size or count limits. The component also shows an empty state and content display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/dropzone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'\nimport { useSupabaseUpload } from '@/hooks/use-supabase-upload'\n\nconst FileUploadDemo = () => {\n  const props = useSupabaseUpload({\n    bucketName: 'test',\n    path: 'test',\n    allowedMimeTypes: ['image/*'],\n    maxFiles: 2,\n    maxFileSize: 1000 * 1000 * 10, // 10MB,\n  })\n\n  return (\n    <div className=\"w-[500px]\">\n      <Dropzone {...props}>\n        <DropzoneEmptyState />\n        <DropzoneContent />\n      </Dropzone>\n    </div>\n  )\n}\n\nexport { FileUploadDemo }\n```\n\n----------------------------------------\n\nTITLE: Retrieve Postgres Credentials\nDESCRIPTION: Example of retrieving Postgres credentials using environment variables to construct a psql command. It retrieves password, host, user, and database to connect to Postgres.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"%env PSQL_COMMAND=PGPASSWORD=RgaMDfTS_password_FTPa7 psql -h dpg-a_server_in.oregon-postgres.provider.com -U my_db_pxl0_user my_db_pxl0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PKCE Authentication Flow\nDESCRIPTION: Example of initializing the Supabase client with PKCE (Proof Key for Code Exchange) flow type for enhanced security in server-side rendering and mobile applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n  auth: {\n    flowType: 'pkce',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating WebSocket Connections with JWT via Query Parameters\nDESCRIPTION: An example of authenticating WebSocket connections by extracting and validating a JWT from URL query parameters. The code verifies the user's authentication status using Supabase's auth services before upgrading the connection to a WebSocket.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"jsr:@supabase/supabase-js@2\";\n\nconst supabase = createClient(\nDeno.env.get(\"SUPABASE_URL\"),\nDeno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\"),\n);\nDeno.serve(req => {\nconst upgrade = req.headers.get(\"upgrade\") || \"\";\n\n    if (upgrade.toLowerCase() != \"WebSocket\") {\n        return new Response(\"request isn't trying to upgrade to WebSocket.\", { status: 400 });\n    }\n\n// Please be aware query params may be logged in some logging systems.\nconst url = new URL(req.url);\nconst jwt = url.searchParams.get(\"jwt\");\nif (!jwt) {\nconsole.error(\"Auth token not provided\");\nreturn new Response(\"Auth token not provided\", { status: 403 });\n}\nconst { error, data } = await supabase.auth.getUser(jwt);\nif (error) {\nconsole.error(error);\nreturn new Response(\"Invalid token provided\", { status: 403 });\n}\nif (!data.user) {\nconsole.error(\"user is not authenticated\");\nreturn new Response(\"User is not authenticated\", { status: 403 });\n}\n\n    const { socket, response } = Deno.upgradeWebSocket(req);\n\n    socket.onopen = () => console.log(\"socket opened\");\n    socket.onmessage = (e) => {\n        console.log(\"socket message:\", e.data);\n        socket.send(new Date().toString());\n    };\n\n    socket.onerror = e => console.log(\"socket errored:\", e.message);\n    socket.onclose = () => console.log(\"socket closed\");\n\n    return response;\n\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tables to Publication for Replication\nDESCRIPTION: Alters the publication to include a specific table for replication. This must be done for each table you want to replicate to the external database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER PUBLICATION example_pub ADD TABLE example_table;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Dropzone with Supabase Storage in TypeScript\nDESCRIPTION: This React component uses React Dropzone for file selection and uploads the selected file to Supabase Storage using a signed URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { env } from '@/env'\nimport { createClient } from '@supabase/supabase-js'\nimport Image from 'next/image'\nimport React, { useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\n\nexport default function SupabaseReactDropzone({ userId }: { userId?: string } = {}) {\n  const supabaseBrowserClient = createClient(\n    env.NEXT_PUBLIC_SUPABASE_URL,\n    env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  )\n  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({\n    maxFiles: 1,\n    accept: {\n      'image/jpeg': [],\n      'image/png': [],\n    },\n    onDropAccepted: async (acceptedFiles) => {\n      setAvatar(null)\n      console.log(acceptedFiles)\n      const { path, token }: { path: string; token: string } = await fetch(\n        '/api/supabase/storage'\n      ).then((res) => res.json())\n\n      const { data, error } = await supabaseBrowserClient.storage\n        .from('avatars')\n        .uploadToSignedUrl(path, token, acceptedFiles[0])\n    },\n  })\n\n  return (\n    <div className=\"mx-auto mt-4 grid w-full gap-2\">\n      <div {...getRootProps({ className: 'dropzone' })}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n        <em>(Only *.jpeg and *.png images will be accepted)</em>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling HTTP Requests with pg_cron in PostgreSQL\nDESCRIPTION: Sets up a scheduled cron job to make HTTP POST requests to an Edge function endpoint every minute using pg_cron extension. Requires pg_cron and pg_net extensions to be installed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.schedule(\n\t'cron-job-name',\n\t'* * * * *', -- Executes every minute (cron syntax)\n\t$$\n\t    -- SQL query\n\t    select \"net\".\"http_post\"(\n            -- URL of Edge function\n            url:='https://project-ref.supabase.co/functions/v1/function-name',\n            headers:='{\"Authorization\": \"Bearer <YOUR_ANON_KEY>\"}'::jsonb,\n            body:='{\"name\": \"pg_net\"}'::jsonb\n\t    ) as \"request_id\";\n\t$$\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding Extensions Toggle Demo Video in HTML\nDESCRIPTION: HTML code for displaying a video that demonstrates how to enable Postgres extensions in the Supabase dashboard, sourced from Supabase storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/overview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/toggle-extensions.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Resetting Postgres Configuration to Default at Database Level\nDESCRIPTION: This SQL snippet shows how to reset Postgres configuration settings to their default values at the database level. It includes commands for resetting a single setting and all settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n-- reset a single setting at the database level\nalter database \"postgres\" set \"<setting_name>\" to default;\n\n-- reset all settings at the database level\nalter database \"postgres\" reset all;\n```\n\n----------------------------------------\n\nTITLE: Importing Foreign Schema in Postgres\nDESCRIPTION: SQL commands to import tables from a foreign database. Includes examples for importing all tables from a schema and importing specific tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nExample: Import all tables from a schema\nimport foreign schema \"<foreign_schema>\"\nfrom server \"<foreign_server>\"\ninto \"<host_schema>\";\n\nExample: Import specific tables\nimport foreign schema \"<foreign_schema>\"\nlimit to (\n    \"<table_name1>\",\n    \"<table_name2>\"\n)\nfrom server \"<foreign_server>\"\ninto \"<host_schema>\";\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Function Signature in pg_net\nDESCRIPTION: Function signature for net.http_get which creates an asynchronous HTTP GET request. This is a SECURITY DEFINER function that returns a request ID reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nnet.http_get(\n    -- url for the request\n    url text,\n    -- key/value pairs to be url encoded and appended to the `url`\n    params jsonb default '{}'::jsonb,\n    -- key/values to be included in request headers\n    headers jsonb default '{}'::jsonb,\n    -- the maximum number of milliseconds the request may take before being canceled\n    timeout_milliseconds int default 2000\n)\n    -- request_id reference\n    returns bigint\n\n    strict\n    volatile\n    parallel safe\n    language plpgsql\n```\n\n----------------------------------------\n\nTITLE: Advanced Metadata Filtering with Query Builder\nDESCRIPTION: Advanced example using query builder-style filtering with complex metadata conditions and text search capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SupabaseFilterRPCCall, SupabaseVectorStore } from 'langchain/vectorstores/supabase'\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai'\nimport { createClient } from '@supabase/supabase-js'\n\nconst privateKey = process.env.SUPABASE_SERVICE_ROLE_KEY\nif (!privateKey) throw new Error(`Expected env var SUPABASE_SERVICE_ROLE_KEY`)\n\nconst url = process.env.SUPABASE_URL\nif (!url) throw new Error(`Expected env var SUPABASE_URL`)\n\nexport const run = async () => {\n  const client = createClient(url, privateKey)\n\n  const embeddings = new OpenAIEmbeddings()\n\n  const store = new SupabaseVectorStore(embeddings, {\n    client,\n    tableName: 'documents',\n  })\n\n  const docs = [\n    {\n      pageContent:\n        'This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to expand upon the notion of quantum fluff, a theoretical concept where subatomic particles coalesce to form transient multidimensional spaces. Yet, this abstraction holds no real-world application or comprehensible meaning, reflecting a cosmic puzzle.',\n      metadata: { b: 1, c: 10, stuff: 'right' },\n    },\n    {\n      pageContent:\n        'This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to proceed by discussing the echo of virtual tweets in the binary corridors of the digital universe. Each tweet, like a pixelated canary, hums in an unseen frequency, a fascinatingly perplexing phenomenon that, while conjuring vivid imagery, lacks any concrete implication or real-world relevance, portraying a paradox of multidimensional spaces in the age of cyber folklore.',\n      metadata: { b: 2, c: 9, stuff: 'right' },\n    },\n    { pageContent: 'hello', metadata: { b: 1, c: 9, stuff: 'right' } },\n    { pageContent: 'hello', metadata: { b: 1, c: 9, stuff: 'wrong' } },\n    { pageContent: 'hi', metadata: { b: 2, c: 8, stuff: 'right' } },\n    { pageContent: 'bye', metadata: { b: 3, c: 7, stuff: 'right' } },\n    { pageContent: \"what's this\", metadata: { b: 4, c: 6, stuff: 'right' } },\n  ]\n\n  await store.addDocuments(docs)\n\n  const funcFilterA: SupabaseFilterRPCCall = (rpc) =>\n    rpc\n      .filter('metadata->b::int', 'lt', 3)\n      .filter('metadata->c::int', 'gt', 7)\n      .textSearch('content', `'multidimensional' & 'spaces'`, {\n        config: 'english',\n      })\n\n  const resultA = await store.similaritySearch('quantum', 4, funcFilterA)\n\n  const funcFilterB: SupabaseFilterRPCCall = (rpc) =>\n    rpc\n      .filter('metadata->b::int', 'lt', 3)\n      .filter('metadata->c::int', 'gt', 7)\n      .filter('metadata->>stuff', 'eq', 'right')\n\n  const resultB = await store.similaritySearch('hello', 2, funcFilterB)\n\n  console.log(resultA, resultB)\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Resend function to Supabase\nDESCRIPTION: Command to deploy the Resend email function to Supabase Edge Functions without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-resend/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsupabase functions deploy resend --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Storage with Uppy in JavaScript\nDESCRIPTION: Key configuration variables needed to connect Uppy to Supabase Storage for resumable uploads. Includes project credentials and storage bucket information.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/storage/resumable-upload-uppy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SUPABASE_ANON_KEY = '' // your project's anon key\nconst SUPABASE_PROJECT_ID = '' // your project ref\nconst STORAGE_BUCKET = '' // your storage bucket name\nconst BEARER_TOKEN = '' // your bearer token\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Auth Users\nDESCRIPTION: SQL query to select all users from the Supabase auth.users table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from auth.users;\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client on Linux\nDESCRIPTION: Bash commands to install the PostgreSQL client on Linux (Debian) systems. This is needed for external connections to handle long-running index creation operations that exceed dashboard time limits.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install postgresql-client\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project with yarn\nDESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using yarn.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn init -y\nyarn add prisma typescript ts-node @types/node --save-dev\n\nnpx tsc --init\n\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Bucket with Dart\nDESCRIPTION: Creates a storage bucket named 'avatars' using the Supabase Dart client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');\n\n  final storageResponse = await supabase\n      .storage\n      .createBucket('avatars');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toaster Position\nDESCRIPTION: Demonstrates how to set the position property on the Toaster component to control toast placement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Toaster\n  position={\n    'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center'\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Invoking Edge Function with JavaScript\nDESCRIPTION: Example of invoking a deployed Edge Function using the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n\nconst { data, error } = await supabase.functions.invoke('hello-world', {\n  body: { name: 'Functions' },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Email and Password Authentication in React Native\nDESCRIPTION: This code snippet demonstrates a React Native component for email and password authentication using Supabase. It includes functions for sign-in and sign-up, as well as form inputs for email and password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport { Alert, StyleSheet, View } from 'react-native'\nimport { supabase } from '../lib/supabase'\nimport { Button, Input } from '@rneui/themed'\n\nexport default function EmailForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  async function signInWithEmail() {\n    setLoading(true)\n    const { error } = await supabase.auth.signInWithPassword({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    setLoading(false)\n  }\n\n  async function signUpWithEmail() {\n    setLoading(true)\n    const {\n      data: { session },\n      error,\n    } = await supabase.auth.signUp({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    if (!session) Alert.alert('Please check your inbox for email verification!')\n    setLoading(false)\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Input\n          label=\"Email\"\n          leftIcon={{ type: 'font-awesome', name: 'envelope' }}\n          onChangeText={(text) => setEmail(text)}\n          value={email}\n          placeholder=\"email@address.com\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input\n          label=\"Password\"\n          leftIcon={{ type: 'font-awesome', name: 'lock' }}\n          onChangeText={(text) => setPassword(text)}\n          value={password}\n          secureTextEntry={true}\n          placeholder=\"Password\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Button title=\"Sign in\" disabled={loading} onPress={() => signInWithEmail()} />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Button title=\"Sign up\" disabled={loading} onPress={() => signUpWithEmail()} />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 40,\n    padding: 12,\n  },\n  verticallySpaced: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    alignSelf: 'stretch',\n  },\n  mt20: {\n    marginTop: 20,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Unlinking Identity with Dart\nDESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Dart client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<UserIdentity> identities = await supabase.auth.getUserIdentities();\n\nfinal UserIdentity googleIdentity =\n    identities.singleWhere((identity) => identity.provider == 'google');\n\nawait supabase.auth.unlinkIdentity(googleIdentity);\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-up Route Handler in TypeScript\nDESCRIPTION: This TypeScript code example provides a server-side route handler for signing up users in a Next.js application using Supabase. It involves processing a POST request with form data, utilizing a type-safe Supabase client to handle user registration, and redirecting the user afterward. It requires @supabase/auth-helpers-nextjs and next/headers packages, and includes TypeScript type definitions for better type checking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nimport type { Database } from '@/lib/database.types'\n\nexport async function POST(request: Request) {\n  const requestUrl = new URL(request.url)\n  const formData = await request.formData()\n  const email = String(formData.get('email'))\n  const password = String(formData.get('password'))\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })\n\n  await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      emailRedirectTo: `${requestUrl.origin}/auth/callback`,\n    },\n  })\n\n  return NextResponse.redirect(requestUrl.origin, {\n    status: 301,\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Organizing Complex Queries with CTEs in Postgres SQL\nDESCRIPTION: Example of using Common Table Expressions (CTEs) to organize complex queries in a readable, linear fashion. Includes comments for each CTE block to explain its purpose.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nwith department_employees as (\n  -- Get all employees and their departments\n  select\n    employees.department_id,\n    employees.first_name,\n    employees.last_name,\n    departments.department_name\n  from\n    employees\n  join\n    departments on employees.department_id = departments.department_id\n),\nemployee_counts as (\n  -- Count how many employees in each department\n  select\n    department_name,\n    count(*) as num_employees\n  from\n    department_employees\n  group by\n    department_name\n)\nselect\n  department_name,\n  num_employees\nfrom\n  employee_counts\norder by\n  department_name;\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships in Swift\nDESCRIPTION: Swift example showing how to query teams with their related users and parse the response into strongly-typed Swift structs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nstruct Team: Codable {\n  let id: Int\n  let name: String\n  let users: [User]\n\n  struct User: Codable {\n    let id: Int\n    let name: String\n  }\n\n  enum CodingKeys: String, CodingKey {\n    case id, users\n    case name = \"team_name\"\n  }\n}\nlet teams [Team] = try await supabase\n  .from(\"teams\")\n  .select(\n    \"\"\"\n      id,\n      team_name,\n      users ( id, name )\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index on Shortened Embeddings\nDESCRIPTION: This SQL snippet creates an HNSW index on the documents table using a subset of 512 dimensions from the original embedding, which is used for the first-pass shortlist in Adaptive Retrieval.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on documents\nusing hnsw ((sub_vector(embedding, 512)::vector(512)) vector_ip_ops)\nwith (m = 32, ef_construction = 400);\n```\n\n----------------------------------------\n\nTITLE: Implementing Board Component Logic in TypeScript\nDESCRIPTION: Angular component class that handles board, list and card operations. Includes functionality for CRUD operations on boards, lists and cards, with preparation for realtime updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataService } from './../../../services/data.service'\nimport { Component, HostListener, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss'],\n})\nexport class BoardComponent implements OnInit {\n  lists: any[] = []\n  boardId: string | null = null\n  editTitle: any = {}\n  editCard: any = {}\n  boardInfo: any = null\n  titleChanged = false\n\n  listCards: any = {}\n  addUserEmail = ''\n\n  constructor(\n    private route: ActivatedRoute,\n    private dataService: DataService,\n    private router: Router\n  ) {}\n\n  async ngOnInit() {\n    this.boardId = this.route.snapshot.paramMap.get('id')\n    if (this.boardId) {\n      // Load general board information\n      const board = await this.dataService.getBoardInfo(this.boardId)\n      this.boardInfo = board.data\n\n      // Retrieve all lists\n      this.lists = await this.dataService.getBoardLists(this.boardId)\n\n      // Retrieve cards for each list\n      for (let list of this.lists) {\n        this.listCards[list.id] = await this.dataService.getListCards(list.id)\n      }\n\n      // For later...\n      this.handleRealtimeUpdates()\n    }\n  }\n\n  //\n  // BOARD logic\n  //\n  async saveBoardTitle() {\n    await this.dataService.updateBoard(this.boardInfo)\n    this.titleChanged = false\n  }\n\n  async deleteBoard() {\n    await this.dataService.deleteBoard(this.boardInfo)\n    this.router.navigateByUrl('/workspace')\n  }\n\n  //\n  // LISTS logic\n  //\n  async addList() {\n    const newList = await this.dataService.addBoardList(this.boardId!, this.lists.length)\n  }\n\n  editingTitle(list: any, edit = false) {\n    this.editTitle[list.id] = edit\n  }\n\n  async updateListTitle(list: any) {\n    await this.dataService.updateBoardList(list)\n    this.editingTitle(list, false)\n  }\n\n  async deleteBoardList(list: any) {\n    await this.dataService.deleteBoardList(list)\n  }\n\n  //\n  // CARDS logic\n  //\n  async addCard(list: any) {\n    await this.dataService.addListCard(list.id, this.boardId!, this.listCards[list.id].length)\n  }\n\n  editingCard(card: any, edit = false) {\n    this.editCard[card.id] = edit\n  }\n\n  async updateCard(card: any) {\n    await this.dataService.updateCard(card)\n    this.editingCard(card, false)\n  }\n\n  async deleteCard(card: any) {\n    await this.dataService.deleteCard(card)\n  }\n\n  // Invites\n  async addUser() {\n    await this.dataService.addUserToBoard(this.boardId!, this.addUserEmail)\n    this.addUserEmail = ''\n  }\n\n  handleRealtimeUpdates() {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making an Authenticated Request to Supabase Management API\nDESCRIPTION: Example of making an authenticated HTTP request to the Supabase Management API using cURL. The request demonstrates how to include the authorization token in the header to fetch projects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/api/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.supabase.com/v1/projects \\\n-H \"Authorization: Bearer sbp_bdd0••••••••••••••••••••••••••••••••4f23\"\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Dependencies\nDESCRIPTION: Shell commands for creating a new Expo app and installing required dependencies for Supabase integration and file handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new Expo app\nnpx create-expo-app@latest cloudApp --template tabs@49\n\n# Install dependencies\nnpm i @supabase/supabase-js\nnpm i react-native-url-polyfill base64-arraybuffer react-native-loading-spinner-overlay @react-native-async-storage/async-storage\n\n# Install Expo packages\nnpx expo install expo-image-picker\nnpx expo install expo-file-system\n```\n\n----------------------------------------\n\nTITLE: Inspecting Echo API Response Content in pg_net\nDESCRIPTION: Query to inspect the response content from the Postman Echo API to verify that the correct request body was sent in a previous HTTP request.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    \"content\"\nfrom net._http_response\nwhere id = <request_id>\n-- returns information about the request\n-- including the body sent: {\"key\": \"value\", \"key\": 5}\n```\n\n----------------------------------------\n\nTITLE: Linking Local Project to Remote\nDESCRIPTION: Command to link a local Supabase project to its remote counterpart using the project ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link --project-ref your-project-id\n```\n\n----------------------------------------\n\nTITLE: Copy object across buckets using Supabase\nDESCRIPTION: Copies an object from one bucket to another using the Supabase storage API. This snippet demonstrates how to specify the destination bucket using the `destinationBucket` option. Requires `@supabase/supabase-js` and a valid Supabase client instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nawait supabase.storage.from('avatars').copy('public/avatar1.png', 'private/avatar2.png', {\n  destinationBucket: 'avatars2',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Seed Files in TOML\nDESCRIPTION: Configuration example for specifying multiple seed files in config.toml with explicit paths.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[db.seed]\nenabled = true\nsql_paths = ['./countries.sql', './cities.sql']\n```\n\n----------------------------------------\n\nTITLE: Implementing Game State Synchronization in Flutter\nDESCRIPTION: Handles game state synchronization between players using Supabase's broadcast feature. Manages player position updates, health tracking, and game over conditions in real-time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass GamePage extends StatefulWidget {\n  const GamePage({Key? key}) : super(key: key);\n\n  @override\n  State<GamePage> createState() => _GamePageState();\n}\n\nclass _GamePageState extends State<GamePage> {\n  late final MyGame _game;\n\n  /// Holds the RealtimeChannel to sync game states\n  RealtimeChannel? _gameChannel;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Stack(\n        fit: StackFit.expand,\n        children: [\n          Image.asset('assets/images/background.jpg', fit: BoxFit.cover),\n          GameWidget(game: _game),\n        ],\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _initialize();\n  }\n\n  Future<void> _initialize() async {\n    _game = MyGame(\n      onGameStateUpdate: (position, health) async {\n        ChannelResponse response;\n        do {\n          response = await _gameChannel!.sendBroadcastMessage(\n            event: 'game_state',\n            payload: {'x': position.x, 'y': position.y, 'health': health},\n          );\n\n          // wait for a frame to avoid infinite rate limiting loops\n          await Future.delayed(Duration.zero);\n          setState(() {});\n        } while (response == ChannelResponse.rateLimited && health <= 0);\n      },\n      onGameOver: (playerWon) async {\n        await showDialog(\n          barrierDismissible: false,\n          context: context,\n          builder: ((context) {\n            return AlertDialog(\n              title: Text(playerWon ? 'You Won!' : 'You lost...'),\n              actions: [\n                TextButton(\n                  onPressed: () async {\n                    Navigator.of(context).pop();\n                    await supabase.removeChannel(_gameChannel!);\n                    _openLobbyDialog();\n                  },\n                  child: const Text('Back to Lobby'),\n                ),\n              ],\n            );\n          }),\n        );\n      },\n    );\n\n    // await for a frame so that the widget mounts\n    await Future.delayed(Duration.zero);\n\n    if (mounted) {\n      _openLobbyDialog();\n    }\n  }\n\n  void _openLobbyDialog() {\n    showDialog(\n        context: context,\n        barrierDismissible: false,\n        builder: (context) {\n          return _LobbyDialog(\n            onGameStarted: (gameId) async {\n              // await a frame to allow subscribing to a new channel in a realtime callback\n              await Future.delayed(Duration.zero);\n\n              setState(() {});\n\n              _game.startNewGame();\n\n              _gameChannel = supabase.channel(gameId,\n                  opts: const RealtimeChannelConfig(ack: true));\n\n              _gameChannel!\n                  .onBroadcast(\n                    event: 'game_state',\n                    callback: (payload, [_]) {\n                      final position = Vector2(\n                          payload['x'] as double, payload['y'] as double);\n                      final opponentHealth = payload['health'] as int;\n                      _game.updateOpponent(\n                        position: position,\n                        health: opponentHealth,\n                      );\n\n                      if (opponentHealth <= 0) {\n                        if (!_game.isGameOver) {\n                          _game.isGameOver = true;\n                          _game.onGameOver(true);\n                        }\n                      }\n                    },\n                  )\n                  .subscribe();\n            },\n          );\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Policy for Public Uploads in SQL\nDESCRIPTION: SQL statement to create a storage policy that allows public uploads to a specific bucket. This policy is required to permit uploads from the client side.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/storage/resumable-upload-uppy/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"allow uploads\" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'your-bucket-name');\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client for Client-Side with Cookies\nDESCRIPTION: Configuration code to set up Supabase client to use cookies instead of localStorage for session management in the browser. This enables consistent authentication between server and client environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    flowType: 'pkce',\n    autoRefreshToken: true,\n    detectSessionInUrl: true,\n    persistSession: true,\n    storage: {\n      getItem: async (key: string) => {\n        return parse(document.cookie[key])\n      },\n      setItem: async (key: string, value: string) => {\n        document.cookie = serialize(key, value)\n      },\n    },\n    removeItem: async (key: string) => {\n      document.cookie = serialize(key, '', {\n        maxAge: 0,\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with Kotlin Supabase Client\nDESCRIPTION: This Kotlin code uses the Supabase client to query and extract nested JSON values from a 'books' table. It uses raw SQL column selection syntax to access JSON properties and array elements, with the trimIndent() function for clean multiline string formatting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select(Columns.raw(\"\"\"\n    title,\n    description: metadata->description,\n    price: metadata->price,\n    low_age: metadata->ages->0,\n    high_age: metadata->ages->1\n\"\"\".trimIndent()))\n```\n\n----------------------------------------\n\nTITLE: Signing in with OTP using Dart\nDESCRIPTION: Shows implementation of signing in using OTP in Dart language through Supabase. Input consists of the user's email address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signInWithEmailOtp() async {\n  final AuthResponse res = await supabase.auth.signInWithOtp(email: 'valid.email@supabase.io');\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Query and Mutation Types\nDESCRIPTION: Illustrates the automatically generated GraphQL Query and Mutation types for the Account table, including operations for querying, inserting, updating, and deleting accounts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  accountCollection(\n    first: Int\n    last: Int\n    before: Cursor\n    after: Cursor\n    filter: AccountFilter\n    orderBy: [AccountOrderBy!]\n  ): AccountConnection\n}\n\ntype Mutation {\n\tinsertIntoAccountCollection(\n\t\tobjects: [AccountInsertInput!]!\n\t): AccountInsertResponse\n\n\tupdateAccountCollection(\n    set: AccountUpdateInput!\n    filter: AccountFilter\n    atMost: Int! = 1\n  ): AccountUpdateResponse!\n\n  deleteFromAccountCollection(\n   filter: AccountFilter\n    atMost: Int! = 1\n  ): AccountDeleteResponse!\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration of Supabase environment variables for API URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=\"YOUR_SUPABASE_URL\"\nSUPABASE_KEY=\"YOUR_SUPABASE_ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Querying Users Table in Supabase\nDESCRIPTION: SQL query to select all users from the auth.users table in Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from auth.users;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Database Connection\nDESCRIPTION: Environment file containing placeholders for the database hostname, password, and SSL certificate needed to connect to a Supabase Postgres database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/kysely-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDB_HOSTNAME=\nDB_PASSWORD=\nDB_SSL_CERT=\"-----BEGIN CERTIFICATE-----\nGET YOUR CERT FROM YOUR PROJECT DASHBOARD\n-----END CERTIFICATE-----\"\n```\n\n----------------------------------------\n\nTITLE: Using HTTP POST with pg_net\nDESCRIPTION: Example of making an asynchronous HTTP POST request to httpbin.org with a JSON body using the net.http_post function. The function returns a request ID for tracking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    net.http_post(\n        url:='https://httpbin.org/post',\n        body:='{\"hello\": \"world\"}'::jsonb\n    ) as request_id;\nrequest_id\n----------\n         1\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Loader for Next.js Image Optimization\nDESCRIPTION: This snippet demonstrates how to create a custom loader function for Next.js to use Supabase Image Transformation for optimizing images.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst projectId = '' // your supabase project id\n\nexport default function supabaseLoader({ src, width, quality }) {\n  return `https://${projectId}.supabase.co/storage/v1/render/image/public/${src}?width=${width}&quality=${quality || 75}`\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the RUM Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable or disable the RUM extension in a PostgreSQL database. The extension is added with the extensions schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"rum\" extension\ncreate extension rum with schema extensions;\n\n-- Example: disable the \"rum\" extension\ndrop extension if exists rum;\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Sign-In in Kotlin with Supabase\nDESCRIPTION: This snippet illustrates how to set up GitHub sign-in in a Kotlin application using Supabase. The example shows the use of `signInWith` method specifying `Github` as the provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithGithub() {\n\tsupabase.auth.signInWith(Github)\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Timestamp Rendering in SQL Queries\nDESCRIPTION: Shows how to display timestamps in a human-readable format using the DATETIME() function to convert unix microsecond timestamps into ISO-8601 format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- timestamp column without datetime()\nselect timestamp from ....\n--  1664270180000\n\n-- timestamp column with datetime()\nselect datetime(timestamp) from ....\n-- 2022-09-27T09:17:10.439Z\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App View with Authentication State\nDESCRIPTION: Creates the main app view that handles authentication state and conditional rendering of views.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct AppView: View {\n  @State var isAuthenticated = false\n\n  var body: some View {\n    Group {\n      if isAuthenticated {\n        ProfileView()\n      } else {\n        AuthView()\n      }\n    }\n    .task {\n      for await state in supabase.auth.authStateChanges {\n        if [.initialSession, .signedIn, .signedOut].contains(state.event) {\n          isAuthenticated = state.session != nil\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an is_admin() Function in SQL\nDESCRIPTION: This function checks if the current user has an admin role. It's designed to be used in RLS policies and is implemented as a security definer function for better performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION is_admin()\n  RETURNS boolean as\n$$\nbegin\n  return exists(select from rlstest_roles where auth.uid() = user_id and role = 'admin');\nend;\n$$ language plpgsql security definer;\n```\n\n----------------------------------------\n\nTITLE: Listening to Postgres Changes with `onPostgresChanges` (Dart)\nDESCRIPTION: Demonstrates the shift from the generic `.on()` method to the more specific `.onPostgresChanges()` for listening to realtime database changes. This example highlights the improved type safety in v2, with strongly typed filters and a `PostgresChangePayload` object for accessing data before and after changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.channel('my_channel').on(\n  RealtimeListenTypes.postgresChanges,\n  ChannelFilter(\n    event: '*',\n    schema: 'public',\n    table: 'messages',\n    filter: 'room_id=eq.200',\n  ),\n  (dynamic payload, [ref]) {\n    final Map<String, dynamic> newRecord = payload['new'];\n    final Map<String, dynamic> oldRecord = payload['old'];\n  },\n).subscribe();\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.channel('my_channel')\n  .onPostgresChanges(\n    event: PostgresChangeEvent.all,\n    schema: 'public',\n    table: 'messages',\n    filter: PostgresChangeFilter(\n      type: PostgresChangeFilterType.eq,\n      column: 'room_id',\n      value: 200,\n    ),\n    callback: (PostgresChangePayload payload) {\n      final Map<String, dynamic> newRecord = payload.newRecord;\n      final Map<String, dynamic> oldRecord = payload.oldRecord;\n    })\n  .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Querying Tables with Multiple Foreign Keys in Dart\nDESCRIPTION: Dart example showing how to query shifts with explicit join definitions for multiple foreign keys to the same table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.from('shifts').select('''\n  *,\n  start_scan:scans!scan_id_start (\n    id,\n    user_id,\n    badge_scan_time\n  ),\nend_scan:scans!scan_id_end (\n    id,\n    user_id,\n    badge_scan_time\n  )\n''');\n```\n\n----------------------------------------\n\nTITLE: Logging in to Supabase CLI\nDESCRIPTION: Authenticates the user with Supabase CLI for deploying schema changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsupabase login\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with Python Supabase Client\nDESCRIPTION: This Python code uses the Supabase client to query and extract nested JSON values from a 'books' table. The query demonstrates accessing JSON properties and array elements using PostgreSQL's JSON path syntax within a multiline string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.from_('books').select(\"\"\"\n  title,\n  description: metadata->description,\n  price: metadata->price,\n  low_age: metadata->ages->0,\n  high_age: metadata->ages->1\n\"\"\"\n).execute()\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration with bun\nDESCRIPTION: Command to create and apply a Prisma migration using bun. This initializes the database schema based on your Prisma models.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbunx prisma migrate dev --name first_prisma_migration\n```\n\n----------------------------------------\n\nTITLE: Creating New Laravel Project with Composer\nDESCRIPTION: Command to scaffold a new Laravel project using Composer package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project laravel/laravel example-app\n```\n\n----------------------------------------\n\nTITLE: Running Discord Bot Locally with ngrok\nDESCRIPTION: This snippet shows how to run the Discord bot locally for development and testing, using the Supabase CLI to serve the function and ngrok to expose the local server to the internet.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve discord-bot --no-verify-jwt --env-file ./supabase/.env.local\nngrok http 54321\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase Database with Vecs in Python\nDESCRIPTION: This snippet shows how to establish a connection to a Supabase database using the Vecs library in Python. It requires the database connection string and creates a vector store client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/face-similarity.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Form Component in Next.js with Supabase\nDESCRIPTION: A React component for managing user profile data using Supabase. It retrieves profile information from the 'profiles' table and allows users to update their full name, username, website, and avatar URL. The component also includes form validation and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport { useCallback, useEffect, useState } from 'react'\nimport { createClient } from '@/utils/supabase/client'\n\nexport default function AccountForm({ user }) {\n  const supabase = createClient()\n  const [loading, setLoading] = useState(true)\n  const [fullname, setFullname] = useState(null)\n  const [username, setUsername] = useState(null)\n  const [website, setWebsite] = useState(null)\n  const [avatar_url, setAvatarUrl] = useState(null)\n\n  const getProfile = useCallback(async () => {\n    try {\n      setLoading(true)\n\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select(`full_name, username, website, avatar_url`)\n        .eq('id', user?.id)\n        .single()\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setFullname(data.full_name)\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      alert('Error loading user data!')\n    } finally {\n      setLoading(false)\n    }\n  }, [user, supabase])\n\n  useEffect(() => {\n    getProfile()\n  }, [user, getProfile])\n\n  async function updateProfile({ username, website, avatar_url }) {\n    try {\n      setLoading(true)\n\n      const { error } = await supabase.from('profiles').upsert({\n        id: user?.id,\n        full_name: fullname,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date().toISOString(),\n      })\n      if (error) throw error\n      alert('Profile updated!')\n    } catch (error) {\n      alert('Error updating the data!')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"form-widget\">\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" type=\"text\" value={user?.email} disabled />\n      </div>\n      <div>\n        <label htmlFor=\"fullName\">Full Name</label>\n        <input\n          id=\"fullName\"\n          type=\"text\"\n          value={fullname || ''}\n          onChange={(e) => setFullname(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"username\">Username</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          value={username || ''}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"website\">Website</label>\n        <input\n          id=\"website\"\n          type=\"url\"\n          value={website || ''}\n          onChange={(e) => setWebsite(e.target.value)}\n        />\n      </div>\n\n      <div>\n        <button\n          className=\"button primary block\"\n          onClick={() => updateProfile({ fullname, username, website, avatar_url })}\n          disabled={loading}\n        >\n          {loading ? 'Loading ...' : 'Update'}\n        </button>\n      </div>\n\n      <div>\n        <form action=\"/auth/signout\" method=\"post\">\n          <button className=\"button block\" type=\"submit\">\n            Sign out\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library, which provides methods for interacting with Supabase services from the SvelteKit application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Syncing and Tracking State in Dart\nDESCRIPTION: This snippet provides implementation details for tracking presence state in Dart, including responding to sync, join, and leave events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal supabase = Supabase.instance.client;\n\nfinal roomOne = supabase.channel('room_01');\n\nroomOne.onPresenceSync((_) {\n  final newState = roomOne.presenceState();\n  print('sync: $newState');\n}).onPresenceJoin((payload) {\n  print('join: $payload');\n}).onPresenceLeave((payload) {\n  print('leave: $payload');\n}).subscribe();\n```\n\n----------------------------------------\n\nTITLE: Testing Image Manipulation with cURL\nDESCRIPTION: cURL command to test the image blur function locally by uploading an image and saving the transformed output.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/image-manipulation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:54321/functions/v1/image-blur' \\\n--form 'file=@\"/path/to/image.png\"'\n--output '/path/to/output.png'\n```\n\n----------------------------------------\n\nTITLE: Deleting Postgres Configuration Without Restarting\nDESCRIPTION: This snippet demonstrates how to delete a Postgres configuration override without restarting the database using the Supabase CLI. It uses the --no-restart flag to prevent an automatic restart.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --experimental \\\n--project-ref <project-ref> \\\npostgres-config delete --config shared_buffers --no-restart\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client for getServerSideProps in Next.js\nDESCRIPTION: Utility function to create a Supabase client for use in getServerSideProps, handling server-side cookie management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetServerSidePropsContext } from 'next'\nimport { createServerClient, serializeCookieHeader } from '@supabase/ssr'\n\nexport function createClient({ req, res }: GetServerSidePropsContext) {\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return Object.keys(req.cookies).map((name) => ({ name, value: req.cookies[name] || '' }))\n        },\n        setAll(cookiesToSet) {\n          res.setHeader(\n            'Set-Cookie',\n            cookiesToSet.map(({ name, value, options }) =>\n              serializeCookieHeader(name, value, options)\n            )\n          )\n        },\n      },\n    }\n  )\n\n  return supabase\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema Tables in Supabase\nDESCRIPTION: Defines the core database tables for a content management application with user profiles, organizations, membership roles, posts, and comments. Includes foreign key relationships, constraints, and default values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.profiles (\n  id uuid references auth.users(id) primary key,\n  username text unique not null,\n  full_name text,\n  bio text,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n\ncreate table public.organizations (\n  id bigint primary key generated always as identity,\n  name text not null,\n  slug text unique not null,\n  plan_type text not null check (plan_type in ('free', 'pro', 'enterprise')),\n  max_posts int not null default 5,\n  created_at timestamptz default now()\n);\n\ncreate table public.org_members (\n  org_id bigint references public.organizations(id) on delete cascade,\n  user_id uuid references auth.users(id) on delete cascade,\n  role text not null check (role in ('owner', 'admin', 'editor', 'viewer')),\n  created_at timestamptz default now(),\n  primary key (org_id, user_id)\n);\n\ncreate table public.posts (\n  id bigint primary key generated always as identity,\n  title text not null,\n  content text not null,\n  author_id uuid references public.profiles(id) not null,\n  org_id bigint references public.organizations(id),\n  status text not null check (status in ('draft', 'published', 'archived')),\n  is_premium boolean default false,\n  scheduled_for timestamptz,\n  category text,\n  view_count int default 0,\n  published_at timestamptz,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n\ncreate table public.comments (\n  id bigint primary key generated always as identity,\n  post_id bigint references public.posts(id) on delete cascade,\n  author_id uuid references public.profiles(id),\n  content text not null,\n  is_deleted boolean default false,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n```\n\n----------------------------------------\n\nTITLE: Using ClickHouse Parameterized Views with Foreign Data Wrapper\nDESCRIPTION: This code snippet shows how to create a foreign table in Postgres that supports ClickHouse Parameterized Views, allowing for passing query parameters directly to ClickHouse.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-30-supabase-clickhouse-partnership.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table user_analytics (\n  id bigint,\n  user_id bigint,\n  _event text,\n)\nserver clickhouse_server\noptions ( table '(select * from UserAnalytics(event=${_event}))' );\n\nselect * from user_analytics where _event='button_click';\n```\n\n----------------------------------------\n\nTITLE: Signing in with Email and Password using Supabase in Dart\nDESCRIPTION: This snippet shows how to sign in a user with their email and password using the Supabase Dart client. It uses the signInWithPassword() method from the auth module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithEmail() async {\n  final AuthResponse res = await supabase.auth.signInWithPassword(\n    email: 'valid.email@supabase.io',\n    password: 'example-password'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sentry Error Monitoring in Edge Function\nDESCRIPTION: TypeScript implementation of a Supabase Edge Function with Sentry integration for error monitoring. Includes Sentry initialization, custom tag setting, and error handling with request processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/sentry-monitoring.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from 'https://deno.land/x/sentry/index.mjs'\n\nSentry.init({\n  // https://docs.sentry.io/product/sentry-basics/concepts/dsn-explainer/#where-to-find-your-dsn\n  dsn: SENTRY_DSN,\n  defaultIntegrations: false,\n  // Performance Monitoring\n  tracesSampleRate: 1.0,\n  // Set sampling rate for profiling - this is relative to tracesSampleRate\n  profilesSampleRate: 1.0,\n})\n\n// Set region and execution_id as custom tags\nSentry.setTag('region', Deno.env.get('SB_REGION'))\nSentry.setTag('execution_id', Deno.env.get('SB_EXECUTION_ID'))\n\nDeno.serve(async (req) => {\n  try {\n    const { name } = await req.json()\n    // This will throw, as `name` in our example call will be `undefined`\n    const data = {\n      message: `Hello ${name}!`,\n    }\n\n    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })\n  } catch (e) {\n    Sentry.captureException(e)\n    return new Response(JSON.stringify({ msg: 'error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket using Swift in Supabase Storage\nDESCRIPTION: This Swift snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It calls the `createBucket` method on the `storage` property of the `supabase` object, creating a bucket named \"avatars\". The `try await` keywords are used to handle the asynchronous operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.storage.createBucket(\"avatars\")\n```\n\n----------------------------------------\n\nTITLE: Creating Documents Table with Vector Embeddings\nDESCRIPTION: This SQL snippet creates a table to store documents and their corresponding 3072-dimensional vector embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id bigint primary key generated always as identity,\n  content text not null,\n  embedding vector (3072)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table for GraphQL Schema Reflection\nDESCRIPTION: This SQL snippet demonstrates how to create a table that pg_graphql will reflect into a GraphQL schema. It creates an 'account' table with id, email, and timestamp fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-pg-graphql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table account (\n  id serial primary key,\n  email varchar(255) not null,\n  created_at timestamp not null,\n  updated_at timestamp not null\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication for Update Events Only in SQL\nDESCRIPTION: Creates a publication that only tracks update operations on all tables, ignoring inserts and deletes. This focuses replication on data modifications only.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate publication publication_name\nfor all tables\nwith (publish = 'update');\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Deno Edge Functions\nDESCRIPTION: Shows how to access environment variables using Deno's built-in handler in Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDeno.env.get('MY_SECRET_NAME')\n```\n\n----------------------------------------\n\nTITLE: Creating a GIN Index on JSONB Column in SQL\nDESCRIPTION: This snippet demonstrates how to create a GIN (Generalized Inverted Index) index on a JSONB column, which is useful for efficient querying of JSON data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX some_arbitary_index_name ON some_table USING gin (data);\n```\n\n----------------------------------------\n\nTITLE: Custom Access Token Hook Input Example\nDESCRIPTION: Example JSON input showing the request format for the custom access token hook including user_id, claims, and authentication method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": \"8ccaa7af-909f-44e7-84cb-67cdccb56be6\",\n  \"claims\": {\n    \"aud\": \"authenticated\",\n    \"exp\": 1715690221,\n    \"iat\": 1715686621,\n    \"sub\": \"8ccaa7af-909f-44e7-84cb-67cdccb56be6\",\n    \"email\": \"\",\n    \"phone\": \"\",\n    \"app_metadata\": {},\n    \"user_metadata\": {},\n    \"role\": \"authenticated\",\n    \"aal\": \"aal1\",\n    \"amr\": [ { \"method\": \"anonymous\", \"timestamp\": 1715686621 } ],\n    \"session_id\": \"4b938a09-5372-4177-a314-cfa292099ea2\",\n    \"is_anonymous\": true\n  },\n  \"authentication_method\": \"anonymous\"\n}\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Query Pushdown with Order and Limit\nDESCRIPTION: Shows how to use query pushdown with ClickHouse FDW including order by and limit clauses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom clickhouse.people\norder by name\nlimit 20;\n```\n\n----------------------------------------\n\nTITLE: Querying HTTP Responses for Failed Embedding Jobs\nDESCRIPTION: This SQL snippet queries the `net._http_response` table to diagnose issues in the embedding generation process by checking for failed jobs and related HTTP responses. It is used to troubleshoot and identify errors in embedding jobs processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  net._http_response\nwhere\n  (headers->>'x-failed-jobs')::int > 0;\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Table for Vector Collection\nDESCRIPTION: SQL code to create a foreign table that connects to a remote vector collection\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table docs (\n  id text not null,\n  embedding vector(384),\n  metadata jsonb,\n  url text\n)\nserver docs_server\noptions (schema_name 'public', table_name 'docs');\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS URL Schemes for Google Sign-in\nDESCRIPTION: iOS-specific configuration in Info.plist that registers URL schemes required for Google Sign-in callback handling. The reverse client ID needs to be obtained from the Google Cloud console.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plist\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleTypeRole</key>\n    <string>Editor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <!-- TODO Replace this value: -->\n      <!-- Copied from GoogleService-Info.plist key REVERSED_CLIENT_ID -->\n      <string>com.googleusercontent.apps.my-ios</string>\n    </array>\n  </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Sign In with Zoom OAuth in Flutter\nDESCRIPTION: This code snippet demonstrates how to sign in a user with Zoom OAuth using the Supabase Flutter client library. It calls the `signInWithOAuth` function, passing in `OAuthProvider.zoom` as the provider, and optionally setting the redirect link and authScreenLaunchMode. The function returns a Future that completes when the sign-in process is finished.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithZoom() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.zoom,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Links in React\nDESCRIPTION: This snippet renders a grid of resource links for Supabase's Realtime service using React. It maps over an array of resources and displays them with titles and descriptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndiv className=\"grid md:grid-cols-12 gap-4 not-prose\">\n  {[\n    {\n      name: 'Supabase Realtime',\n      description: 'View the source code.',\n      href: 'https://github.com/supabase/realtime',\n    },\n    {\n      name: 'Realtime: Multiplayer Edition',\n      description: 'Read more about Supabase Realtime.',\n      href: 'https://supabase.com/blog/supabase-realtime-multiplayer-general-availability',\n    },\n  ].map((x) => (\n    <div className=\"col-span-6\" key={x.href}>\n      <Link href={x.href} passHref>\n        <GlassPanel title={x.name}>{x.description}</GlassPanel>\n      </Link>\n    </div>\n  ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Normalizing MongoDB Data in PostgreSQL\nDESCRIPTION: SQL commands to transform the imported MongoDB JSONB data into normalized PostgreSQL tables. The example shows extracting user information and normalizing nested order data into separate tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Example to normalize user data\nINSERT INTO users (name, email)\nSELECT\n  data->>'name' as name,\n  data->>'email' as email\nFROM mongo_users_raw;\n\n-- Example to normalize orders into a separate table\nINSERT INTO orders (user_id, product, quantity)\nSELECT\n  u.id,\n  orders->>'product',\n  (orders.value->>'quantity')::INTEGER\nFROM mongo_users_raw m\nJOIN users u ON (m.data->>'name') = u.name,\nLATERAL jsonb_array_elements(m.data->'orders') AS order_data\n```\n\n----------------------------------------\n\nTITLE: Signing in with OTP using Python\nDESCRIPTION: Implements signing in via email OTP using Python in Supabase environment. Requires user's email and options to configure automatic user creation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nresponse = supabase.auth.sign_in_with_otp({\n  'email': 'valid.email@supabase.io',\n  'options': {\n    # set this to false if you do not want the user to be automatically signed up\n    'should_create_user': False,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing PostgreSQL schema configuration in Laravel\nDESCRIPTION: Modifies the database configuration to use a custom schema in Supabase rather than the default 'public' schema. This prevents conflicts with Supabase's data API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'pgsql' => [\n    'driver' => 'pgsql',\n    'url' => env('DB_URL'),\n    'host' => env('DB_HOST', '127.0.0.1'),\n    'port' => env('DB_PORT', '5432'),\n    'database' => env('DB_DATABASE', 'laravel'),\n    'username' => env('DB_USERNAME', 'root'),\n    'password' => env('DB_PASSWORD', ''),\n    'charset' => env('DB_CHARSET', 'utf8'),\n    'prefix' => '',\n    'prefix_indexes' => true,\n    'search_path' => 'laravel',\n    'sslmode' => 'prefer',\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Endpoint with PKCE in Next.js\nDESCRIPTION: Server-side implementation of the login endpoint that initiates OTP sign-in and handles redirect. Uses Supabase client to manage authentication process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// api/auth/login\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { createServerSupabaseClient } from '@supabase/auth-helpers-nextjs'\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Create the Supabase Client\n  const supabase = createServerSupabaseClient(\n    { req, res },\n    {\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_ANON_KEY,\n    }\n  )\n\n  // Start sign in with one-time password\n  const { error } = await supabase.auth.signInWithOtp({\n    email: 'foo@example.com',\n    options: {\n      emailRedirectTo: 'http://localhost:3000/api/auth/callback',\n    },\n  })\n\n  if (error) {\n    res.json(JSON.stringify(error))\n  }\n\n  res.redirect('/')\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Explicit Select in TypeScript\nDESCRIPTION: Shows how to insert data and explicitly select the returned data in supabase-js v2, which is now required to receive the inserted data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst { data } = await supabase.from('messages').insert({ id: 1, message: 'Hello world' }).select() // select is now explicitly required\n\n// v1\nconst { data } = await supabase.from('messages').insert({ id: 1, message: 'Hello world' }) // insert would also \"select()\"\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling pgRouting Extension in SQL\nDESCRIPTION: SQL commands to enable or disable the pgRouting extension in a Supabase project. The 'create extension' command enables the extension with the cascade option to handle dependencies, while 'drop extension' disables it.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgrouting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pgRouting\" extension\ncreate extension pgrouting cascade;\n\n-- Disable the \"pgRouting\" extension\ndrop extension if exists pgRouting;\n```\n\n----------------------------------------\n\nTITLE: Creating Public Access RLS Policy\nDESCRIPTION: SQL policy to allow unauthenticated access to the profiles table using the anon role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow public access\" on profiles to anon for\nselect\n  using (true);\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase and Ktor Dependencies in Android Project\nDESCRIPTION: Configuration for adding Kotlin serialization plugin, Supabase Kotlin client, and Ktor HTTP client to an Android project's build.gradle.kts file. These dependencies enable communication with Supabase backend services.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  kotlin(\"plugin.serialization\") version \"$kotlin_version\"\n}\n...\ndependencies {\n  ...\n  implementation(platform(\"io.github.jan-tennert.supabase:bom:$supabase_version\"))\n  implementation(\"io.github.jan-tennert.supabase:postgrest-kt\")\n  implementation(\"io.ktor:ktor-client-android:$ktor_version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Upload Component with Supabase Storage in React\nDESCRIPTION: This snippet defines a React component for uploading and displaying user avatars. It uses Supabase storage for uploading and downloading images, and handles states for avatar URL and upload process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { supabase } from './supabaseClient'\n\nexport default function Avatar({ url, size, onUpload }) {\n  const [avatarUrl, setAvatarUrl] = useState(null)\n  const [uploading, setUploading] = useState(false)\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path) {\n    try {\n      const { data, error } = await supabase.storage.from('avatars').download(path)\n      if (error) {\n        throw error\n      }\n      const url = URL.createObjectURL(data)\n      setAvatarUrl(url)\n    } catch (error) {\n      console.log('Error downloading image: ', error.message)\n    }\n  }\n\n  async function uploadAvatar(event) {\n    try {\n      setUploading(true)\n\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const fileName = `${Math.random()}.${fileExt}`\n      const filePath = `${fileName}`\n\n      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      onUpload(event, filePath)\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt=\"Avatar\"\n          className=\"avatar image\"\n          style={{ height: size, width: size }}\n        />\n      ) : (\n        <div className=\"avatar no-image\" style={{ height: size, width: size }} />\n      )}\n      <div style={{ width: size }}>\n        <label className=\"button primary block\" htmlFor=\"single\">\n          {uploading ? 'Uploading ...' : 'Upload'}\n        </label>\n        <input\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n          }}\n          type=\"file\"\n          id=\"single\"\n          accept=\"image/*\"\n          onChange={uploadAvatar}\n          disabled={uploading}\n        />\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to all Postgres schema changes in Kotlin\nDESCRIPTION: This Kotlin snippet configures a Supabase client to listen for any database changes in the 'public' schema using a flow. It logs any payload received. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"schema-db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction>(schema = \"public\")\n\nchanges\n    .onEach {\n        when(it) { //You can also check for <is PostgresAction.Insert>, etc.. manually\n            is HasRecord -> println(it.record)\n            is HasOldRecord -> println(it.oldRecord)\n            else -> println(it)\n        }\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Next.js Edge Runtime Sentry Configuration with Supabase\nDESCRIPTION: Configuration for Sentry in a Next.js application's edge runtime environment. Uses winterCGFetch integration suitable for Middleware and Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport * as Sentry from '@sentry/nextjs'\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { supabaseIntegration } from '@supabase/sentry-js-integration'\n\nSentry.init({\n  dsn: SENTRY_DSN,\n  integrations: [\n    supabaseIntegration(SupabaseClient, Sentry, {\n      tracing: true,\n      breadcrumbs: true,\n      errors: true,\n    }),\n    Sentry.winterCGFetchIntegration({\n      breadcrumbs: true,\n      shouldCreateSpanForRequest: (url) => {\n        return !url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)\n      },\n    }),\n  ],\n  // Adjust this value in production, or use tracesSampler for greater control\n  tracesSampleRate: 1,\n\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\n  debug: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Index Usage in PostgreSQL using michelp-adminpack\nDESCRIPTION: This SQL snippet represents the structure of the index_usage view from the michelp-adminpack. It shows the columns available for identifying potentially unused indexes that can be dropped, including schema and table names, index details, and usage statistics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n| Column          | Type   |\n| --------------- | ------ |\n| schemaname      | name   |\n| tablename       | name   |\n| num_rows        | bigint |\n| table_size      | text   |\n| index_name      | name   |\n| index_size      | text   |\n| unique          | text   |\n| number_of_scans | bigint |\n| tuples_read     | bigint |\n| tuples_fetched  | bigint |\n```\n\n----------------------------------------\n\nTITLE: Executing Postgres Queries with Template Literals\nDESCRIPTION: Example of executing a parameterized SQL query using Postgres.js template literals. Demonstrates how to create a function that queries users based on age criteria.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres-js.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport sql from './db.js'\n\nasync function getUsersOver(age) {\n  const users = await sql`\n    select name, age\n    from users\n    where age > ${ age }\n  `\n  // users = Result [{ name: \"Walter\", age: 80 }, { name: 'Murray', age: 68 }, ...]\n  return users\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In with Slack using Supabase Auth\nDESCRIPTION: This Flutter snippet demonstrates how to sign in a user with Slack OAuth using the Supabase client library. It initializes the Supabase client and calls the signInWithOAuth method with the `OAuthProvider.slack` provider. It also handles the redirect URL for web and mobile platforms, along with the auth screen launch mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithSlack() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.slack,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Link OAuth Identity to Anonymous User in Python\nDESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Python. This converts an anonymous user to a permanent user by associating it with the OAuth identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.link_identity({'provider': 'google'})\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for Import Maps\nDESCRIPTION: VSCode configuration for using import maps with Supabase Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deno.enable\": true,\n  \"deno.unstable\": [\n    \"bare-node-builtins\",\n    \"byonm\"\n    // ... other flags ...\n  ],\n  \"deno.importMap\": \"./supabase/functions/my-function/import_map.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring PostgreSQL Logical Backup\nDESCRIPTION: Command to restore a PostgreSQL database from a logical backup SQL file using the psql utility. Executes the SQL commands in the backup file to recreate the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-17-postgresql-physical-logical-backups.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npsql -d db_name -f file_name.sql\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Supabase in SvelteKit\nDESCRIPTION: Extends the global App namespace with custom type definitions for Supabase client, session management, and user authentication in the SvelteKit application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.d.ts\n\nimport { SupabaseClient, Session } from '@supabase/supabase-js'\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      supabase: SupabaseClient\n      safeGetSession(): Promise<{ session: Session | null; user: User | null }>\n    }\n    interface PageData {\n      session: Session | null\n      user: User | null\n    }\n    // interface Error {}\n    // interface Platform {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Auth Errors\nDESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in JavaScript. All errors are wrapped by the `AuthError` class and can be further categorized into `AuthApiError` (from Supabase Auth API) and `CustomAuthError` (from client library state). `AuthApiError` includes `code` and `status` properties to identify the error and HTTP status code, respectively. Use `isAuthApiError` to check error type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Enabling Aggregate Functions in PostgREST\nDESCRIPTION: SQL commands to enable aggregate functions by modifying the PostgREST authenticator role and reloading the server configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nALTER ROLE authenticator SET pgrst.db_aggregates_enabled = 'true';\nNOTIFY pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Windows Deep Link Inclusion (Flutter)\nDESCRIPTION: This C++ code snippet includes the necessary header file for the App Links Windows plugin in `win32_window.cpp`. This inclusion is essential to utilize the plugin's functionality for handling deep links in a Flutter Windows application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"app_links_windows/app_links_windows_plugin.h\"\n```\n\n----------------------------------------\n\nTITLE: Less Than or Equal To Filter Implementation\nDESCRIPTION: Shows how to listen for database changes when a column is less than or equal to a specific value using the 'lte' filter. Uses Postgres's <= operator to filter profile updates where age is less than or equal to 65.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'UPDATE',\n      schema: 'public',\n      table: 'profiles',\n      filter: 'age=lte.65',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        table: 'profiles',\n        filter: PostgresChangeFilter(\n          type: PostgresChangeFilterType.lte,\n          column: 'age',\n          value: 65,\n        ),\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"profiles\",\n  filter: .lte(\"age\", value: 65)\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"profiles\"\n    filter = \"age=lte.65\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"UPDATE\",\n  schema=\"public\",\n  table=\"profiles\",\n  filter=\"age=lte.65\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Querying 'todos' Table Using cURL\nDESCRIPTION: cURL command to make a GET request to the 'todos' table API endpoint, including the necessary headers for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Append /rest/v1/ to your URL, and then use the table name as the route\ncurl '<SUPABASE_URL>/rest/v1/todos' \\\n-H \"apikey: <SUPABASE_ANON_KEY>\" \\\n-H \"Authorization: Bearer <SUPABASE_ANON_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Deleting and Returning Data in Supabase with TypeScript\nDESCRIPTION: Code examples showing how to delete data from a Supabase table with and without returning the deleted records. The newer version adds a .select() method to return the deleted data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('my_table')\n  .delete()\n  .eq('id', id)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('my_table')\n  .delete()\n  .eq('id', id)\n  .select()\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships in Swift\nDESCRIPTION: Swift example showing how to query orchestral sections with their related instruments and parse the response into strongly-typed Swift structs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct OrchestralSection: Codable {\n  let id: Int\n  let name: String\n  let instruments: [Instrument]\n\n  struct Instrument: Codable {\n    let id: Int\n    let name: String\n  }\n}\n\nlet orchestralSections: [OrchestralSection] = try await supabase\n  .from(\"orchestral_sections\")\n  .select(\"id, name, instruments(id, name)\")\n  .execute()\n  .value\n```\n\n----------------------------------------\n\nTITLE: Implementing Lobby Management with Supabase Presence in Flutter\nDESCRIPTION: Creates a lobby system using Supabase's presence feature to track online players and handle game initiation. Manages player waiting, game start broadcasts, and participant synchronization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass _LobbyDialogState extends State<_LobbyDialog> {\n  List<String> _userids = [];\n  bool _loading = false;\n\n  /// Unique identifier for each players to identify eachother in lobby\n  final myUserId = const Uuid().v4();\n\n  late final RealtimeChannel _lobbyChannel;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _lobbyChannel = supabase.channel(\n      'lobby',\n      opts: const RealtimeChannelConfig(self: true),\n    );\n    _lobbyChannel\n        .onPresenceSync((payload, [ref]) {\n          // Update the lobby count\n          final presenceStates = _lobbyChannel.presenceState();\n\n          setState(() {\n            _userids = presenceStates\n                .map((presenceState) => (presenceState.presences.first)\n                    .payload['user_id'] as String)\n                .toList();\n          });\n        })\n        .onBroadcast(\n            event: 'game_start',\n            callback: (payload, [_]) {\n              // Start the game if someone has started a game with you\n              final participantIds = List<String>.from(payload['participants']);\n              if (participantIds.contains(myUserId)) {\n                final gameId = payload['game_id'] as String;\n                widget.onGameStarted(gameId);\n                Navigator.of(context).pop();\n              }\n            })\n        .subscribe(\n          (status, _) async {\n            if (status == RealtimeSubscribeStatus.subscribed) {\n              await _lobbyChannel.track({'user_id': myUserId});\n            }\n          },\n        );\n  }\n\n  @override\n  void dispose() {\n    supabase.removeChannel(_lobbyChannel);\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      title: const Text('Lobby'),\n      content: _loading\n          ? const SizedBox(\n              height: 100,\n              child: Center(child: CircularProgressIndicator()),\n            )\n          : Text('${_userids.length} users waiting'),\n      actions: [\n        TextButton(\n          onPressed: _userids.length < 2\n              ? null\n              : () async {\n                  setState(() {\n                    _loading = true;\n                  });\n\n                  final opponentId =\n                      _userids.firstWhere((userId) => userId != myUserId);\n                  final gameId = const Uuid().v4();\n                  await _lobbyChannel.sendBroadcastMessage(\n                    event: 'game_start',\n                    payload: {\n                      'participants': [\n                        opponentId,\n                        myUserId,\n                      ],\n                      'game_id': gameId,\n                    },\n                  );\n                },\n          child: const Text('start'),\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Partition Loading in PostgreSQL\nDESCRIPTION: Simple SQL commands to initiate the partition loading process for both chats and chat messages tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCALL app.load_chats_partitions();\nCALL app.load_chat_messages_partitions();\n```\n\n----------------------------------------\n\nTITLE: Generating Schema Diff with Supabase CLI\nDESCRIPTION: Demonstrates how to use the 'db diff' command with the experimental '--use-migra' flag to generate a DDL script for schema changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ supabase db diff --use-migra --file file_name\n# Creates a DDL script: supabase/migrations/<datetime_string>_file_name.sql\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component with react-hook-form in Account Page\nDESCRIPTION: This code snippet shows how to integrate the Avatar component into an account management form using react-hook-form's Controller component. It handles form submission and updates the avatar_url field when a new image is uploaded, providing immediate feedback to the user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// Import the new components\nimport { Controller } from 'react-hook-form'\nimport Avatar from './avatar'\n\n// ...\n\nreturn (\n  <div className=\"container\" style={{ padding: '50px 0 100px 0' }}>\n    <form onSubmit={handleSubmit} className=\"form-widget\">\n      <Controller\n        control={control}\n        name=\"avatar_url\"\n        render={({ field }) => {\n          return (\n            <Avatar\n              url={field.value}\n              size={150}\n              onUpload={(filePath) => {\n                onFinish({\n                  ...queryResult?.data?.data,\n                  avatar_url: filePath,\n                  onMutationError: (data: { message: string }) => alert(data?.message),\n                })\n                field.onChange({\n                  target: {\n                    value: filePath,\n                  },\n                })\n              }}\n            />\n          )\n        }}\n      />\n      {/* ... */}\n    </form>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing index_advisor Postgres Extension\nDESCRIPTION: Creates the index_advisor extension in a Postgres database. This is required before using the extension to get index recommendations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension index_advisor;\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Table and Index Sizes\nDESCRIPTION: SQL query to analyze the size of tables, related indices, and total sizes in a PostgreSQL database. The query uses pg_catalog views and returns results in human-readable format using pg_size_pretty.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  relname as table_name,\n  pg_size_pretty(pg_total_relation_size(relid)) as \"Table Size\",\n  pg_size_pretty(pg_indexes_size(relid)) as \"Index Size\",\n  pg_size_pretty(pg_relation_size(relid)) as \"Total Size\"\nfrom pg_catalog.pg_statio_user_tables\norder by pg_total_relation_size(relid) desc;\n```\n\n----------------------------------------\n\nTITLE: Querying Sparse Vectors\nDESCRIPTION: Shows how to perform similarity search using sparse vector syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from embedding_sparse order by vector <-> '{1:3,3:1,5:2}/1536' limit 5;\n```\n\n----------------------------------------\n\nTITLE: Swift Implementation of Bounding Box Search\nDESCRIPTION: Swift example showing how to call the PostGIS bounding box search function using Supabase client with type-safe response handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nstruct Response: Codable {\n  let id: Int\n  let name: String\n  let lat: Double\n  let long: Double\n}\n\nlet response: Response = try await supabase.rpc(\n  \"restaurants_in_view\",\n  params: [\n    \"min_lat\": 40.807,\n    \"min_long\": -73.946,\n    \"max_long\": -73.945,\n    \"max_lat\": 40.808,\n  ]\n)\n.execute()\n.value\n```\n\n----------------------------------------\n\nTITLE: Fetching Repositories with a Provider Token in JavaScript\nDESCRIPTION: This snippet outlines the process of fetching data from a third-party API (GitHub) using a provider token. It first checks for a valid session, retrieves the provider token, and then makes a GET request to fetch repositories for the authenticated user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPagesServerClient } from '@supabase/auth-helpers-nextjs'\n\nexport default function ProtectedPage({ user, allRepos }) {\n  return (\n    <>\n      <div>Protected content for {user.email}</div>\n      <p>Data fetched with provider token:</p>\n      <pre>{JSON.stringify(allRepos, null, 2)}</pre>\n      <p>user:</p>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n    </>\n  )\n}\n\nexport const getServerSideProps = async (ctx) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient(ctx)\n  // Check if we have a session\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  if (!session)\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n\n  // Retrieve provider_token & logged in user's third-party id from metadata\n  const { provider_token, user } = session\n  const userId = user.user_metadata.user_name\n\n  const allRepos = await (\n    await fetch(`https://api.github.com/search/repositories?q=user:${userId}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `token ${provider_token}`,\n      },\n    })\n  ).json()\n\n  return { props: { user, allRepos } }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users for Passwordless Signin in Supabase Auth - TypeScript\nDESCRIPTION: This TypeScript code snippet illustrates how to create users for passwordless authentication in Supabase Auth. It verifies users' email before creation using 'email_confirm', requiring the '@supabase/supabase-js' module for Supabase client creation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\\n\\n// ---cut---\\nconst { data, error } = await supabase.auth.admin.createUser({\\n  email: 'valid.email@supabase.io',\\n  email_confirm: true,\\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Running Services Status\nDESCRIPTION: This command allows users to check the status of all Supabase services to ensure they are running correctly after starting them.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_cron Extension in Postgres\nDESCRIPTION: This SQL command enables the pg_cron extension in the Postgres database if it's not already enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists pg_cron;\n```\n\n----------------------------------------\n\nTITLE: Updating get logged-in user in TypeScript\nDESCRIPTION: Example of how to update the method to get the logged-in user in supabase-js v2. The new version uses an async getUser method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data: { user },\n} = await supabase.auth.getUser()\n```\n\n----------------------------------------\n\nTITLE: Self-hosting Supabase Image Transformations with imgproxy\nDESCRIPTION: Docker configuration for self-hosting the image transformation service using imgproxy, which is used under the hood by Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_32\n\nLANGUAGE: YAML\nCODE:\n```\nimgproxy:\n  image: darthsim/imgproxy\n  environment:\n    - IMGPROXY_ENABLE_WEBP_DETECTION=true\n    - IMGPROXY_JPEG_PROGRESSIVE=true\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter App with Terminal Command\nDESCRIPTION: This command creates a new Flutter application named 'my_app' using the Flutter CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create my_app\n```\n\n----------------------------------------\n\nTITLE: Production Deployment GitHub Action\nDESCRIPTION: GitHub Actions workflow for deploying database migrations to production environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Migrations to Production\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}\n      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}\n      SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n\n      - run: supabase link --project-ref $SUPABASE_PROJECT_ID\n      - run: supabase db push\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Identity with Python\nDESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Python client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.link_identity({'provider': 'google'})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Kysely Query in Deno Edge Function\nDESCRIPTION: Edge function that sets up a Kysely instance with the Deno PostgresDriver, defines a type-safe database schema, and executes a query to fetch animal records. It handles proper JSON serialization of bigint values and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/kysely-postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.175.0/http/server.ts'\nimport { Pool } from 'https://deno.land/x/postgres@v0.17.0/mod.ts'\nimport {\n  Kysely,\n  Generated,\n  PostgresAdapter,\n  PostgresIntrospector,\n  PostgresQueryCompiler,\n} from 'https://esm.sh/kysely@0.23.4'\nimport { PostgresDriver } from './DenoPostgresDriver.ts'\n\nconsole.log(`Function \"kysely-postgres\" up and running!`)\n\ninterface AnimalTable {\n  id: Generated<bigint>\n  animal: string\n  created_at: Date\n}\n\n// Keys of this interface are table names.\ninterface Database {\n  animals: AnimalTable\n}\n\n// Create a database pool with one connection.\nconst pool = new Pool(\n  {\n    tls: { caCertificates: [Deno.env.get('DB_SSL_CERT')!] },\n    database: 'postgres',\n    hostname: Deno.env.get('DB_HOSTNAME'),\n    user: 'postgres',\n    port: 5432,\n    password: Deno.env.get('DB_PASSWORD'),\n  },\n  1\n)\n\n// You'd create one of these when you start your app.\nconst db = new Kysely<Database>({\n  dialect: {\n    createAdapter() {\n      return new PostgresAdapter()\n    },\n    createDriver() {\n      return new PostgresDriver({ pool })\n    },\n    createIntrospector(db: Kysely<unknown>) {\n      return new PostgresIntrospector(db)\n    },\n    createQueryCompiler() {\n      return new PostgresQueryCompiler()\n    },\n  },\n})\n\nserve(async (_req) => {\n  try {\n    // Run a query\n    const animals = await db.selectFrom('animals').select(['id', 'animal', 'created_at']).execute()\n\n    // Neat, it's properly typed \\o/\n    console.log(animals[0].created_at.getFullYear())\n\n    // Encode the result as pretty printed JSON\n    const body = JSON.stringify(\n      animals,\n      (key, value) => (typeof value === 'bigint' ? value.toString() : value),\n      2\n    )\n\n    // Return the response with the correct content type header\n    return new Response(body, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n      },\n    })\n  } catch (err) {\n    console.error(err)\n    return new Response(String(err?.message ?? err), { status: 500 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Replication Status\nDESCRIPTION: Queries the pg_stat_replication system view to monitor the status of the replication process and ensure it's working correctly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pg_stat_replication;\n```\n\n----------------------------------------\n\nTITLE: New Authentication in Supabase.js 1.0\nDESCRIPTION: Demonstrates the new authentication method using the updated GoTrue implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-30-improved-dx.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { user, error } = await supabase.auth.signUp({\n  email: 'someone@email.com',\n  password: 'password',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Public File Downloads in SQL\nDESCRIPTION: This snippet demonstrates how to create a policy that allows any user to download a specific file named 'favicon.ico' using the storage.filename() function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/helper-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow public downloads\"\non storage.objects\nfor select\nto public\nusing (\n  storage.filename(name) = 'favicon.ico'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for Cosine Distance in SQL\nDESCRIPTION: SQL command to create an IVFFlat index using the vector_cosine_ops operator class for cosine distance. The index is created on the 'column_name' of the 'items' table with 100 lists.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using ivfflat (column_name vector_cosine_ops) with (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Function\nDESCRIPTION: Command to create a new Edge Function named 'embed' using Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions new embed\n```\n\n----------------------------------------\n\nTITLE: MySQL to Postgres Migration with pgloader\nDESCRIPTION: This SQL snippet configures pgloader to migrate a MySQL database to a Postgres database. It specifies the source MySQL connection string, the destination Supabase Postgres connection string, alters the schema owner, and sets WAL buffer and memory parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/amazon-rds.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nload database\n  from mysql://user:password@host/source_db\n  into postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres\nalter schema 'public' owner to 'postgres';\nset wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';\n```\n\n----------------------------------------\n\nTITLE: Bitbucket Pipeline for Edge Functions\nDESCRIPTION: Bitbucket pipeline configuration for deploying Edge Functions. Includes setup step for installing dependencies and parallel execution for function deployment with Docker service.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cicd-workflow.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:20\n\npipelines:\n  default:\n    - step:\n        name: Setup\n        caches:\n          - node\n        script:\n          - npm i supabase\n    - parallel:\n        - step:\n            name: Functions Deploy\n            script:\n              - npx supabase init\n              - npx supabase functions deploy --debug\n            services:\n              - docker\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Custom Mode in Supabase Storage in JavaScript\nDESCRIPTION: This code demonstrates how to download an image with resizing to specific dimensions (800x300) using the 'contain' resize mode in JavaScript. Other available modes are 'cover' and 'fill'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nsupabase.storage.from('bucket').download('image.jpg', {\n  transform: {\n    width: 800,\n    height: 300,\n    resize: 'contain', // 'cover' | 'fill'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping with Aggregate Functions in Supabase.js\nDESCRIPTION: This snippet shows how to use aggregate functions with implicit grouping in PostgREST, grouping max and min release years by genre using the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { data, error } = await supabase\n  .from('movies')\n  .select('genre, release_year.max(), release_year.min()')\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Deep Links\nDESCRIPTION: Add deep linking configuration to iOS info.plist file for handling authentication callbacks\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... other tags -->\n  <plist>\n  <dict>\n    <!-- ... other tags -->\n\n\t\t<!-- Deep Links -->\n\t\t<key>FlutterDeepLinkingEnabled</key>\n\t\t<true/>\n    <key>CFBundleURLTypes</key>\n    <array>\n      <dict>\n        <key>CFBundleTypeRole</key>\n        <string>Editor</string>\n        <key>CFBundleURLSchemes</key>\n        <array>\n          <string>mfa-app</string>\n        </array>\n      </dict>\n    </array>\n\t\t<!-- Deep Links -->\n\n    <!-- ... other tags -->\n  </dict>\n  </plist>\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Queue\nDESCRIPTION: Creates a new message queue with standard logging. Returns void on success.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect from pgmq.create('my_queue');\n```\n\n----------------------------------------\n\nTITLE: Creating Lock Monitor View in SQL for Supabase\nDESCRIPTION: This SQL script creates a view named 'lock_monitor' in the public schema. It joins various system tables to provide information about blocked queries, blocking queries, and their durations. The view helps in identifying and troubleshooting query blocking issues in the current database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-check-if-my-queries-are-being-blocked-by-other-queries-NSKtR1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate view\n  public.lock_monitor as\nselect\n  coalesce(\n    blockingl.relation::regclass::text,\n    blockingl.locktype\n  ) as locked_item,\n  now() - blockeda.query_start as waiting_duration,\n  blockeda.pid as blocked_pid,\n  blockeda.query as blocked_query,\n  blockedl.mode as blocked_mode,\n  blockinga.pid as blocking_pid,\n  blockinga.query as blocking_query,\n  blockingl.mode as blocking_mode\nfrom\n  pg_locks blockedl\n  join pg_stat_activity blockeda on blockedl.pid = blockeda.pid\n  join pg_locks blockingl on (\n    blockingl.transactionid = blockedl.transactionid\n    or blockingl.relation = blockedl.relation\n    and blockingl.locktype = blockedl.locktype\n  )\n  and blockedl.pid <> blockingl.pid\n  join pg_stat_activity blockinga on blockingl.pid = blockinga.pid\n  and blockinga.datid = blockeda.datid\nwhere\n  not blockedl.granted\n  and blockinga.datname = current_database();\n```\n\n----------------------------------------\n\nTITLE: Import Map Configuration for Drizzle ORM\nDESCRIPTION: Import map configuration for using Drizzle ORM with Postgres.js in Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"drizzle-orm\": \"npm:drizzle-orm@0.29.1\",\n    \"drizzle-orm/\": \"npm:/drizzle-orm@0.29.1/\",\n    \"postgres\": \"npm:postgres@3.4.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication for Insert Events Only in SQL\nDESCRIPTION: Creates a publication that only tracks insert operations on all tables, ignoring updates and deletes. This allows for more targeted replication of specific database events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate publication publication_name\nfor all tables\nwith (publish = 'insert');\n```\n\n----------------------------------------\n\nTITLE: Initiating Sign-In with SSO (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWith` method with `SSO` to start the SP Initiated Flow. The Supabase client must be initialized before using this function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n\"supabase.auth.signInWith(SSO) {\n    domain = \\\"company.com\\\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Dimension Comparison\nDESCRIPTION: Demonstrates generation and comparison of full-size, shortened, and manually truncated embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data: [{ embedding: fullEmbedding }],\n} = await openai.embeddings.create({\n  model: 'text-embedding-3-large',\n  input: 'The cat chases the mouse',\n})\n\nconst {\n  data: [{ embedding: shortenedEmbedding }],\n} = await openai.embeddings.create({\n  model: 'text-embedding-3-large',\n  input: 'The cat chases the mouse',\n  dimensions: 1024,\n})\n\nconst truncatedEmbedding = normalize(fullEmbedding.slice(0, 1024))\n```\n\n----------------------------------------\n\nTITLE: Feature Availability Matrix in Markdown\nDESCRIPTION: Markdown table displaying Supabase product features, their release stages, and self-hosted availability status. Includes GA (Generally Available), beta, and alpha features across all major Supabase products and services.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Product        | Feature                    | Stage           | Available on self-hosted                    |\n| -------------- | -------------------------- | --------------- | ------------------------------------------- |\n| Database       | Postgres                   | `GA`            | ✅                                          |\n| Database       | Vector Database            | `GA`            | ✅                                          |\n| Database       | Auto-generated Rest API    | `GA`            | ✅                                          |\n| Database       | Auto-generated GraphQL API | `GA`            | ✅                                          |\n| Database       | Webhooks                   | `beta`          | ✅                                          |\n| Database       | Vault                      | `public alpha`  | ✅                                          |\n```\n\n----------------------------------------\n\nTITLE: Setting Refreshed JWT Token in Python\nDESCRIPTION: This Python snippet demonstrates how to set a refreshed JWT token for Supabase Realtime authentication using the `set_auth` method. This assumes that supabase client has already been initialised.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nsupabase.realtime.set_auth('fresh-token')\n```\n\n----------------------------------------\n\nTITLE: Serving Edge Function Locally with Environment Variables\nDESCRIPTION: This command serves the edge function locally, using environment variables from a .env.local file and disabling JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions serve --env-file ./supabase/.env.local --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Access Token Update Format\nDESCRIPTION: Message format for updating access token on the server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"access_token\",\n   \"topic\": string,\n   \"payload\":{\n      \"access_token\": string\n   },\n   \"ref\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Data in Next.js Page Component\nDESCRIPTION: Creating a Next.js page component that fetches instrument data from a Supabase table and renders it on the page. This demonstrates server-side data fetching with Supabase in Next.js.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createClient } from '@/utils/supabase/server';\n\nexport default async function Instruments() {\n  const supabase = await createClient();\n  const { data: instruments } = await supabase.from(\"instruments\").select();\n\n  return <pre>{JSON.stringify(instruments, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Realtime Subscriptions with Supabase in TypeScript\nDESCRIPTION: This code snippet shows how to set up realtime subscriptions using Supabase. It listens for changes in the 'participants' and 'games' tables, updating the UI accordingly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-09-meetup-kahoot-alternative.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsupabase\n  .channel('game')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'participants',\n      filter: `game_id=eq.${gameId}`,\n    },\n    (payload) => {\n      setParticipants((currentParticipants) => {\n        return [...currentParticipants, payload.new as Participant]\n      })\n    }\n  )\n  .on(\n    'postgres_changes',\n    {\n      event: 'UPDATE',\n      schema: 'public',\n      table: 'games',\n      filter: `id=eq.${gameId}`,\n    },\n    (payload) => {\n      const game = payload.new as Game\n      setCurrentQuestionSequence(game.current_question_sequence)\n      setCurrentScreen(game.phase as AdminScreens)\n    }\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Access Privileges in PostgreSQL\nDESCRIPTION: This snippet shows how to view access privileges for a specific table using the \\dp command in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> \\dp public.apps\n                             Access privileges\n┌────────┬──────┬───────┬───────────────────┬───────────────────┬──────────┐\n│ Schema │ Name │ Type  │ Access privileges │ Column privileges │ Policies │\n├────────┼──────┼───────┼───────────────────┼───────────────────┼──────────┤\n│ public │ apps │ table │                   │                   │          │\n└────────┴──────┴───────┴───────────────────┴───────────────────┴──────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Generated SemVer Text Column in SQL\nDESCRIPTION: Demonstrates how to use a generated column to store the text representation of a SemVer alongside its structured form.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table package_version(\n    id bigserial primary key,\n    package_name text not null,\n    package_semver semver not null,\n  semver_text text generated always as (semver_to_text(package_semver)) stored\n);\n```\n\n----------------------------------------\n\nTITLE: Serving Edge Functions Without JWT Verification - Bash\nDESCRIPTION: Command to serve Edge Functions locally without JWT authorization checks, useful for webhook endpoints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/development-tips.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve hello-world --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Converting Anonymous User to Permanent User with Email in Supabase JS\nDESCRIPTION: JavaScript code to update an anonymous user with an email address, converting them to a permanent user while preserving their user ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .auth\n  .updateUser({ email })\n```\n\n----------------------------------------\n\nTITLE: Complete Workflow Configuration YAML\nDESCRIPTION: Complete YAML configuration combining all workflow components including email task, wait state, and database trigger handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nComment: Email users after one day\nStartAt: EmailUsers\nStates:\n  EmailUsers:\n    Type: Map\n    End: true\n    InputPath: '$.changes'\n    Iterator:\n      StartAt: CheckInsert\n      States:\n        CheckInsert:\n          Type: Choice\n          Default: Complete\n          Choices:\n            - Variable: '$.type'\n              StringEquals: INSERT\n              Next: WaitOneDay\n        WaitOneDay:\n          Type: Wait\n          Next: SendEmail\n          Seconds: 86400\n        SendEmail:\n          Type: Task\n          Next: Complete\n          Resource: send-templated-email\n          Parameters:\n            api_key: my-api-key\n            template_id: welcome-email\n            payload:\n              name.$: '$.record.name'\n              email.$: '$.record.email'\n        Complete:\n          Type: Succeed\n```\n\n----------------------------------------\n\nTITLE: Extracting Authentication Method from JWT in JSON\nDESCRIPTION: This example illustrates how to retrieve and parse the 'amr' (Authentication Methods Reference) claim from a Supabase Auth access token. It shows a JSON structure with methods and timestamps to log authentication events, useful for debugging or fine-grained security policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"amr\": [\n    {\n      \"method\": \"totp\",\n      \"timestamp\": 1666086056\n    },\n    {\n      \"method\": \"password\",\n      \"timestamp\": 1666085924\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing JSONB Data in Postgres using SQL\nDESCRIPTION: SQL commands to normalize JSONB data into structured relational tables. This example demonstrates extracting user data and nested order data from the raw JSONB structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Example normalization for users\nINSERT INTO users (name, email)\nSELECT\n  data->'data'->'name' AS name,\n  data->'data'->'email' AS email\nFROM fauna_users_raw;\n\n-- Example normalization of nested orders\nINSERT INTO orders (user_id, product, quantity)\nSELECT\n  u.id,\n  order_data->>'product',\n  (order_data->>'quantity')::INTEGER\nFROM fauna_users_raw f\nJOIN users u ON (f.data->'data'->>'email') = u.email,\nLATERAL jsonb_array_elements(f.data->'data'->'orders') AS order_data;\n```\n\n----------------------------------------\n\nTITLE: Basic Supabase Data Fetching with Retries\nDESCRIPTION: Example of using the Supabase client with integrated retry logic for data fetching\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchData() {\n  const { data, error } = await supabase.from('your_table').select('*')\n\n  if (error) {\n    console.error('Error fetching data:', error)\n  } else {\n    console.log('Fetched data:', data)\n  }\n}\n\nfetchData()\n```\n\n----------------------------------------\n\nTITLE: Creating User Role with Login in PostgreSQL\nDESCRIPTION: Creates a new role with login capabilities and password authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate role \"role_name\" with login password 'extremely_secure_password';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current pg_net Configuration Settings\nDESCRIPTION: Query to retrieve the current configuration settings for the pg_net extension from the pg_settings system catalog.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  \"name\",\n  \"setting\"\nfrom pg_settings\nwhere \"name\" like 'pg_net%';\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Express for Supabase Auth\nDESCRIPTION: Implementation of an Express route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and redirects users to appropriate pages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The client you created from the Server-Side Auth instructions\nconst { createClient } = require(\"./lib/supabase\")\n...\napp.get(\"/auth/confirm\", async function (req, res) {\n  const token_hash = req.query.token_hash\n  const type = req.query.type\n  const next = req.query.next ?? \"/\"\n\n  if (token_hash && type) {\n    const supabase = createClient({ req, res })\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n    if (!error) {\n      res.redirect(303, `/${next.slice(1)}`)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  res.redirect(303, '/auth/auth-code-error')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a RUM Index with rum_anyarray_ops for Array Types\nDESCRIPTION: Example of creating a table with an array column and a RUM index using rum_anyarray_ops, which supports array operators and distance-based ordering for arrays.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_array (i int2[]);\nINSERT INTO test_array VALUES ('{}'), ('{0}'), ('{1,2,3,4}'), ('{1,2,3}'), ('{1,2}'), ('{1}');\nCREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);\n```\n\n----------------------------------------\n\nTITLE: Writing Short Queries in Postgres SQL\nDESCRIPTION: Examples of concise SQL queries for selecting and updating data. Shows recommended formatting for simple queries that fit on a few lines with proper spacing for readability.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom employees\nwhere end_date is null;\n\nupdate employees\nset end_date = '2023-12-31'\nwhere employee_id = 1001;\n```\n\n----------------------------------------\n\nTITLE: Streaming ZIP File Extraction and Upload to Supabase Storage in JSX\nDESCRIPTION: This code demonstrates how to extract files from a ZIP archive using streams and upload them to Supabase Storage. It creates a new bucket with a random UUID and streams each file directly from the ZIP archive to storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-03-edge-functions-background-tasks-websockets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ZipReaderStream } from 'https://deno.land/x/zipjs/index.js'\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nconst supabase = createClient(\n  Deno.env.get('SUPABASE_URL'),\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')\n)\n\nDeno.serve(async (req) => {\n  const uploadId = crypto.randomUUID()\n\n  const { error } = await supabase.storage.createBucket(uploadId, {\n    public: false,\n  })\n\n  for await (const entry of await req.body.pipeThrough(new ZipReaderStream())) {\n    // write file to Supabase Storage\n    const { error } = await supabase.storage\n      .from(uploadId)\n      .upload(entry.filename, entry.readable, {})\n\n    console.log('uploaded', entry.filename)\n  }\n\n  return new Response(\n    JSON.stringify({\n      uploadId,\n    }),\n    {\n      headers: {\n        'content-type': 'application/json',\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Controls with TanStack Table in React\nDESCRIPTION: Adds pagination functionality to a data table using React Table's pagination API with next/previous buttons. The code implements the UI controls that connect to the table's pagination methods.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client in Next.js\nDESCRIPTION: TypeScript utility to create and export a Supabase client instance configured with environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nexport default createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Next.js Caching for Dynamic Data Fetching\nDESCRIPTION: These code snippets demonstrate three different approaches to disable caching in Next.js, ensuring that the latest data is always fetched from Supabase. Each option can be added to the page or component file where dynamic data is required.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/nextjs-1314-stale-data-when-changing-rls-or-table-data-85b8oQ.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const dynamic = 'force-dynamic'; // no caching\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const fetchCache = 'force-no-store' // to page.js\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const revalidate = 0\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types with Supabase Client in TypeScript\nDESCRIPTION: Shows how to use the generated TypeScript types to enhance type checking when querying the database with supabase-js v2.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Database } from './DatabaseDefinitions'\n\nconst supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)\n\nconst { data } = await supabase.from('messages').select().match({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Todo Data\nDESCRIPTION: Inserts sample todo tasks into the todos table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into todos (task)\nvalues\n  ('Create tables'),\n  ('Enable security'),\n  ('Add data'),\n  ('Fetch data from the API');\n```\n\n----------------------------------------\n\nTITLE: Creating React Native Expo App\nDESCRIPTION: Initializes a new React Native project using Expo CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-expo-app OfflineFirstWithSupabase\n```\n\n----------------------------------------\n\nTITLE: Flutter Home Page Implementation with Secure Content\nDESCRIPTION: Dart code implementing a Flutter home page that displays MFA-protected content from Supabase with user management options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:mfa_app/main.dart';\nimport 'package:mfa_app/pages/auth/register_page.dart';\nimport 'package:mfa_app/pages/list_mfa_page.dart';\n\nclass HomePage extends StatelessWidget {\n  static const route = '/';\n\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final privatePostsFuture = supabase.from('private_posts').select();\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Home'),\n        actions: [\n          PopupMenuButton(\n            itemBuilder: (context) {\n              return [\n                PopupMenuItem(\n                  child: const Text('Unenroll MFA'),\n                  onTap: () {\n                    context.push(ListMFAPage.route);\n                  },\n                ),\n                PopupMenuItem(\n                  child: const Text('Logout'),\n                  onTap: () {\n                    supabase.auth.signOut();\n                    context.go(RegisterPage.route);\n                  },\n                ),\n              ];\n            },\n          )\n        ],\n      ),\n      body: FutureBuilder<List<Map<String, dynamic>>>(\n        future: privatePostsFuture,\n        builder: (context, snapshot) {\n          if (snapshot.hasError) {\n            return Center(child: Text(snapshot.error.toString()));\n          }\n          if (!snapshot.hasData) {\n            return const Center(child: CircularProgressIndicator());\n          }\n\n          // Display the secure private content upon retrieval\n          final data = snapshot.data!;\n          return ListView.builder(\n            itemCount: data.length,\n            itemBuilder: (context, index) {\n              return ListTile(title: Text(data[index]['content']));\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Mock Testing in Dart\nDESCRIPTION: This code snippet illustrates how to set up mock testing for Supabase endpoints using Brick ORM. It demonstrates creating a mock server, handling requests and responses, and writing a test case for retrieving models.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-08-offline-first-flutter-apps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:brick_supabase/testing.dart';\nimport 'package:test/test.dart'\n\nvoid main() {\n  // Pass an instance of your model dictionary to the mock server.\n  // This permits quick generation of fields and generated responses\n  final mock = SupabaseMockServer(modelDictionary: supabaseModelDictionary);\n\n  group('MyClass', () {\n    setUp(mock.setUp);\n\n    tearDown(mock.tearDown);\n\n    test('#myMethod', () async {\n      // If your request won't exactly match the columns of MyModel, provide\n      // the query list to the `fields:` parameter\n      final req = SupabaseRequest<MyModel>();\n      final resp = SupabaseResponse([\n        // mock.serialize converts models to expected Supabase payloads\n        // but you don't need to use it - any jsonEncode-able object\n        // can be passed to SupabaseRepsonse\n        await mock.serialize(MyModel(name: 'Demo 1', id: '1')),\n        await mock.serialize(MyModel(name: 'Demo 2', id: '2')),\n      ]);\n      // This method stubs the server based on the described requests\n      // and their matched responses\n      mock.handle({req: resp});\n      final provider = SupabaseProvider(mock.client, modelDictionary: supabaseModelDictionary);\n      final retrieved = await provider.get<MyModel>();\n      expect(retrieved, hasLength(2));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Superuser Setting for Postgres Role in Supabase\nDESCRIPTION: This SQL command demonstrates how to modify a superuser setting, specifically enabling log_nested_statements for the 'postgres' role using the supautils extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter role \"postgres\" set \"auto_explain.log_nested_statements\" to 'on';\n```\n\n----------------------------------------\n\nTITLE: Reflected GraphQL Schema from PostgreSQL Table\nDESCRIPTION: This GraphQL schema is automatically generated by pg_graphql based on the 'account' table structure. It includes scalar types, PageInfo type, Query type with account and allAccounts fields, and related Account types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-pg-graphql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Cursor\nscalar DateTime\nscalar JSON\nscalar UUID\nscalar BigInt\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String!\n  endCursor: String!\n}\n\ntype Query {\n  account(nodeId: ID!): Account\n  allAccounts(after: Cursor, before: Cursor, first: Int, last: Int): AccountConnection\n}\n\ntype Account {\n  nodeId: ID!\n  id: String!\n  email: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype AccountEdge {\n  cursor: String!\n  node: Account\n}\n\ntype AccountConnection {\n  totalCount: Int!\n  pageInfo: PageInfo!\n  edges: [AccountEdge]\n}\n```\n\n----------------------------------------\n\nTITLE: Running pgAdmin Schema Diff with Docker\nDESCRIPTION: Docker command to run the pgAdmin Schema Diff tool, comparing two PostgreSQL databases and outputting the differences to a SQL file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run supabase/pgadmin-schema-diff \\\n  'postgres://user:pass@local:5432/diff_source' \\\n  'postgres://user:pass@production:5432/diff_target' \\\n  > diff_demo.sql\n\nStarting schema diff...\nComparison started......0%\nComparing Event Triggers...2%\nComparing Extensions...4%\nComparing Languages...8%\nComparing Foreign Servers...14%\nComparing Foreign Tables of schema 'public'...28%\nComparing Tables of schema 'public'...50%\nComparing Domains of schema 'test_schema_diff'...66%\nComparing Foreign Tables of schema 'test_schema_diff'...68%\nComparing FTS Templates of schema 'test_schema_diff'...76%\nComparing Functions of schema 'test_schema_diff'...78%\nComparing Procedures of schema 'test_schema_diff'...80%\nComparing Tables of schema 'test_schema_diff'...90%\nComparing Types of schema 'test_schema_diff'...92%\nComparing Materialized Views of schema 'test_schema_diff'...96%\nDone.\n\n## the diff is written to diff_demo.sql\n```\n\n----------------------------------------\n\nTITLE: Testing PostgreSQL RLS Policies\nDESCRIPTION: pgTAP test to verify the existence of specific RLS (Row Level Security) policies on a table. Tests policy names and configurations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nselect plan( 1 );\n\nselect policies_are(\n  'public',\n  'profiles',\n  ARRAY [\n    'Profiles are public', -- Test that there is a policy called  \"Profiles are public\" on the \"profiles\" table.\n    'Profiles can only be updated by the owner'  -- Test that there is a policy called  \"Profiles can only be updated by the owner\" on the \"profiles\" table.\n  ]\n);\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Creating SignUpViewModel for User Registration\nDESCRIPTION: The 'SignUpViewModel' manages the state for the signup process, using Hilt for dependency injection. It handles email and password changes and triggers the signup process through the authentication repository.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n@HiltViewModel\nclass SignUpViewModel @Inject constructor(\n    private val authenticationRepository: AuthenticationRepository\n) : ViewModel() {\n\n    private val _email = MutableStateFlow(\"\")\n    val email: Flow<String> = _email\n\n    private val _password = MutableStateFlow(\"\")\n    val password = _password\n\n    fun onEmailChange(email: String) {\n        _email.value = email\n    }\n\n    fun onPasswordChange(password: String) {\n        _password.value = password\n    }\n\n    fun onSignUp() {\n        viewModelScope.launch {\n            authenticationRepository.signUp(\n                email = _email.value,\n                password = _password.value\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Supabase Edge Function Invocation\nDESCRIPTION: This SQL snippet schedules a cron job to make a POST request to a Supabase Edge Function every 30 seconds. It uses the net.http_post function to send the request with custom headers and body.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cron.schedule(\n    'invoke-function-every-half-minute',\n    '30 seconds',\n    $$\n    select\n      net.http_post(\n          url:='https://project-ref.supabase.co/functions/v1/function-name',\n          headers:=jsonb_build_object('Content-Type','application/json', 'Authorization', 'Bearer ' || 'YOUR_ANON_KEY'),\n          body:=jsonb_build_object('time', now() ),\n          timeout_milliseconds:=5000\n      ) as request_id;\n    $$\n  );\n```\n\n----------------------------------------\n\nTITLE: VSCode Multi-root Workspace Configuration for Edge Functions\nDESCRIPTION: Example workspace configuration that separates a React app client and Supabase Edge Functions into distinct workspace folders with appropriate settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-development.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"folders\": [\n    {\n      \"name\": \"project-root\",\n      \"path\": \"./\"\n    },\n    {\n      \"name\": \"client\",\n      \"path\": \"app\"\n    },\n    {\n      \"name\": \"supabase-functions\",\n      \"path\": \"supabase/functions\"\n    }\n  ],\n  \"settings\": {\n    \"files.exclude\": {\n      \"node_modules/\": true,\n      \"app/\": true,\n      \"supabase/functions/\": true\n    },\n    \"deno.importMap\": \"./supabase/functions/import_map.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File Using Supabase CLI\nDESCRIPTION: Uses the Supabase CLI to generate a migration file by diffing against the declared schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db diff -f create_employees_table\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Supabase and Fetch-Retry\nDESCRIPTION: Command to install the required npm packages supabase-js and fetch-retry\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js fetch-retry\n```\n\n----------------------------------------\n\nTITLE: Implementing Partition Loading Procedures in PostgreSQL\nDESCRIPTION: Defines two procedures: load_chats_partition for handling individual date partitions and load_chats_partitions for processing the entire date range. The procedures create partitions, copy data, and attach tables incrementally with transaction commits between operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE PROCEDURE app.load_chats_partition(i date)\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    CALL app.create_chats_partition(i);\n    CALL app.copy_chats_partition(i);\n    CALL app.index_and_attach_chats_partition(i);\nEND;\n$$;\n\nCREATE OR REPLACE PROCEDURE app.load_chats_partitions()\n    LANGUAGE plpgsql AS\n$$\nDECLARE\n    start_date date;\n    end_date date;\n    i date;\nBEGIN\n    SELECT min(created_at)::date INTO start_date FROM chats;\n    SELECT max(created_at)::date INTO end_date FROM chats;\n    FOR i IN SELECT * FROM generate_series(end_date, start_date, interval '-1 day') LOOP\n        CALL app.load_chats_partition(i);\n        COMMIT;\n    END LOOP;\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating Task Dependencies Graph Structure in SQL\nDESCRIPTION: This code creates a graph structure for project task scheduling by setting up a tasks table for nodes and a dependencies table for directed edges with durations. This structure allows modeling project dependencies for critical path analysis.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the tasks table with dependencies\ncreate table tasks (\n  id serial primary key,\n  name text not null\n);\n\n-- insert tasks into the table\ninsert into tasks (name)\nvalues\n  ('Start Project'),\n  ('Task A'),\n  ('Task B'),\n  ('Task C'),\n  ('Task D'),\n  ('End Project');\n\n-- create the dependencies table\ncreate table dependencies (\n  id serial primary key,\n  source integer not null, -- task id where the dependency starts\n  target integer not null, -- task id where the dependency ends\n  duration integer not null, -- duration of the task in days\n  constraint fk_source foreign key (source) references tasks (id),\n  constraint fk_target foreign key (target) references tasks (id)\n);\n\n-- insert dependencies with durations (directed edges)\ninsert into dependencies (source, target, duration)\nvalues\n  (1, 2, 3), -- start project -> task a (3 days)\n  (2, 3, 4), -- task a -> task b (4 days)\n  (3, 4, 5), -- task b -> task c (5 days)\n  (4, 5, 2), -- task c -> task d (2 days)\n  (5, 6, 6);\n-- task d -> end project (6 days)\n```\n\n----------------------------------------\n\nTITLE: HTTP Hook Secret Configuration\nDESCRIPTION: Environment variable configuration for HTTP hook secrets using the Standard Webhooks specification format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nSEND_SMS_HOOK_SECRETS=v1,whsec_<base64-secret>\n```\n\n----------------------------------------\n\nTITLE: Allowing Authenticated Uploads to Private Folder in SQL\nDESCRIPTION: This example demonstrates how to create a policy that allows authenticated users to upload files to a folder called 'private' inside a specific bucket.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Allow authenticated uploads\"\non storage.objects\nfor insert\nto authenticated\nwith check (\n  bucket_id = 'my_bucket_id' and\n  (storage.foldername(name))[1] = 'private'\n);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Supabase CLI\nDESCRIPTION: Command to log in to the Supabase CLI for deployment access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase login\n```\n\n----------------------------------------\n\nTITLE: Installing pgloader for Bulk Data Import in Supabase\nDESCRIPTION: Command to install pgloader, a tool for efficiently importing data into a Postgres database. This is typically run on a local machine or server to prepare for data import.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ apt-get install pgloader\n```\n\n----------------------------------------\n\nTITLE: Adding Router Dependency\nDESCRIPTION: Install the go_router package for handling navigation and routing\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add go_router\n```\n\n----------------------------------------\n\nTITLE: Editing a Cron Job using SQL in Supabase\nDESCRIPTION: This SQL snippet shows how to edit an existing cron job in Supabase using the cron.alter_job function. It allows modification of the job schedule and other parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.alter_job(\n  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),\n  schedule := '*/5 * * * *'\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User\nDESCRIPTION: This code snippet handles signing a user out of the Supabase system. It triggers the sign-out process and returns any errors that may occur during the sign-out operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {error} = await supabase.auth.signOut()\n```\n\n----------------------------------------\n\nTITLE: Implementing Groups Page Logic in Ionic Angular with TypeScript\nDESCRIPTION: This TypeScript code defines the GroupsPage component for an Ionic Angular application. It handles group loading, creation, and user authentication. The component uses Supabase services for data management and includes methods for signing out and navigating to login.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Router } from '@angular/router'\nimport { AuthService } from './../../services/auth.service'\nimport { AlertController, NavController, LoadingController } from '@ionic/angular'\nimport { DataService } from './../../services/data.service'\nimport { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-groups',\n  templateUrl: './groups.page.html',\n  styleUrls: ['./groups.page.scss'],\n})\nexport class GroupsPage implements OnInit {\n  user = this.authService.getCurrentUser()\n  groups = []\n\n  constructor(\n    private authService: AuthService,\n    private data: DataService,\n    private alertController: AlertController,\n    private loadingController: LoadingController,\n    private navController: NavController,\n    private router: Router\n  ) {}\n\n  ngOnInit() {}\n\n  async ionViewWillEnter() {\n    this.groups = await this.data.getGroups()\n  }\n\n  async createGroup() {\n    const alert = await this.alertController.create({\n      header: 'Start Chat Group',\n      message: 'Enter a name for your group. Note that all groups are public in this app!',\n      inputs: [\n        {\n          type: 'text',\n          name: 'title',\n          placeholder: 'My cool group',\n        },\n      ],\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n        },\n        {\n          text: 'Create group',\n          handler: async (data) => {\n            const loading = await this.loadingController.create()\n            await loading.present()\n\n            const newGroup = await this.data.createGroup(data.title)\n            if (newGroup) {\n              this.groups = await this.data.getGroups()\n              await loading.dismiss()\n\n              this.router.navigateByUrl(`/groups/${newGroup.data.id}`)\n            }\n          },\n        },\n      ],\n    })\n\n    await alert.present()\n  }\n\n  signOut() {\n    this.authService.signOut()\n  }\n\n  openLogin() {\n    this.navController.navigateBack('/')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reservations Table with Range Column\nDESCRIPTION: This SQL snippet creates a table using a tstzrange column to store the duration of a reservation, demonstrating the use of range types in Postgres.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table reservations (\n  id serial primary key,\n  title text,\n  duration tstzrange\n);\n```\n\n----------------------------------------\n\nTITLE: Role Impersonation and Table Creation\nDESCRIPTION: Demonstrates role impersonation and creating objects as a group.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> set role developers;\nSET\npostgres=> create table public.apps(id serial primary key, name text);\nCREATE TABLE\n```\n\n----------------------------------------\n\nTITLE: Using Auth Admin Methods in TypeScript\nDESCRIPTION: Demonstrates the new location of server-side Auth methods under the admin namespace in supabase-js v2.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst { data: user, error } = await supabase.auth.admin.listUsers()\n\n// v1\nconst { data: user, error } = await supabase.auth.api.listUsers()\n```\n\n----------------------------------------\n\nTITLE: Fetching Sidebar Data with SWR\nDESCRIPTION: Demonstrates how to implement data fetching for a sidebar using SWR, including loading state and rendering fetched projects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NavProjects() {\n  const { data, isLoading } = useSWR(\"/api/projects\", fetcher)\n\n  if (isLoading) {\n    return (\n      <SidebarMenu>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <SidebarMenuItem key={index}>\n            <SidebarMenuSkeleton showIcon />\n          </SidebarMenuItem>\n        ))}\n      </SidebarMenu>\n    )\n  }\n\n  if (!data) {\n    return ...\n  }\n\n  return (\n    <SidebarMenu>\n      {data.map((project) => (\n        <SidebarMenuItem key={project.name}>\n          <SidebarMenuButton asChild>\n            <a href={project.url}>\n              <project.icon />\n              <span>{project.name}</span>\n            </a>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      ))}\n    </SidebarMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Logging in PGAudit\nDESCRIPTION: SQL commands to set up object-specific logging in PGAudit using a custom audit role and granting specific privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate role \"some_audit_role\" noinherit;\n\nalter role \"postgres\" set pgaudit.role to 'some_audit_role';\n\ngrant select on random_table to \"some_audit_role\";\n\n-- change pgaudit.role to no longer reference some_audit_role\nalter role \"postgres\" set pgaudit.role to '';\n\n-- view if pgaudit.role changed with the following command:\nselect\n  rolname,\n  rolconfig\nfrom pg_roles\nwhere rolname = 'postgres';\n-- should return a rolconfig path with \"pgaudit.role=\"\n```\n\n----------------------------------------\n\nTITLE: Creating Unlogged Queue\nDESCRIPTION: Creates an unlogged message queue for higher write throughput at the cost of durability.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect pgmq.create_unlogged('my_unlogged');\n```\n\n----------------------------------------\n\nTITLE: Using the Supabase Client Library with FunctionRegion Enum\nDESCRIPTION: This snippet demonstrates using the Supabase JavaScript client library with the FunctionRegion enum to specify a region. It imports the necessary components, creates a client, and invokes a function with the UsEast1 region specified.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/regional-invocation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient, FunctionRegion } from '@supabase/supabase-js'\nconst supabase = createClient('SUPABASE_URL', 'SUPABASE_ANON_KEY')\n\nconst { data: ret, error } = await supabase.functions.invoke('my-function-name', {\n  headers: { 'Content-Type': 'application/json' },\n  method: 'GET',\n  body: {},\n  region: FunctionRegion.UsEast1,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting NEW_DB_URL Environment Variable\nDESCRIPTION: Command to set the NEW_DB_URL environment variable with the Supabase connection string. Requires replacing [YOUR-PASSWORD] with the actual database password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NEW_DB_URL=\"postgresql://postgres.xxxxxxxxxxxxxxxxxxxx:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling plv8 Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable or disable the plv8 extension in PostgreSQL. Creating the extension enables JavaScript functionality, while dropping it removes the capability.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"plv8\" extension\ncreate extension plv8;\n\n-- Example: disable the \"plv8\" extension\ndrop extension if exists plv8;\n```\n\n----------------------------------------\n\nTITLE: Creating Employees Table - SQL\nDESCRIPTION: SQL migration to create the employees table with id, name, email, and timestamp columns\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table employees (\n  id bigint primary key generated always as identity,\n  name text,\n  email text,\n  created_at timestamptz default now()\n);\n```\n\n----------------------------------------\n\nTITLE: Using Sign-Out Scopes Kotlin\nDESCRIPTION: The Kotlin snippet demonstrates how to set different session termination scopes using Supabase Auth. It defaults to the local scope but can be set to end all sessions with a different parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n// defaults to the local scope\\nawait supabase.auth.signOut();\\n\\n// sign out from all sessions\\nsupabase.auth.signOut(SignOutScope.GLOBAL)\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN ANALYZE in PostgreSQL\nDESCRIPTION: Demonstrates how to analyze query execution plans using EXPLAIN ANALYZE to understand query performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN (ANALYZE) SELECT *\nFROM students\nWHERE surname = 'Krobb';\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the application, which will run on localhost:3000 where the instruments page can be accessed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Next.js\nDESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env.local file for a Next.js application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n----------------------------------------\n\nTITLE: Removing a Publication in SQL\nDESCRIPTION: Removes an existing publication if it exists. The 'if exists' clause prevents errors if the publication doesn't exist.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ndrop publication if exists publication_name;\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Extension in Postgres\nDESCRIPTION: This SQL command enables the pgsql-http extension in the Postgres database, allowing HTTP requests to be made from within the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists http;\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security for MFA\nDESCRIPTION: SQL code to enable row-level security and create a policy that only allows access to authenticated users with MFA (aal2 level).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable RLS for private_posts table\nalter table\n  public.private_posts enable row level security;\n\n-- Create a policy that only allows read if they user has signed in via MFA\ncreate policy \"Users can view private_posts if they have signed in via MFA\" on public.private_posts for\nselect\n  to authenticated using ((select auth.jwt() - >> 'aal') = 'aal2');\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-In Redirect in Next.js with Supabase Auth\nDESCRIPTION: This snippet shows how to perform a server-side redirect for OAuth sign-in using Supabase Auth in a Next.js application. It uses the NextResponse.redirect method to handle the redirection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/oauth-sign-in-isnt-redirecting-on-the-server-side-ShGMtr.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n...\nconst { data } = await supabase.auth.signInWithOAuth({\n  provider: 'github',\n})\n\nreturn NextResponse.redirect(data.url)\n```\n\n----------------------------------------\n\nTITLE: Implementing Slack Channel Monitor Bot with Python and Supabase\nDESCRIPTION: A complete Python script that implements a Slack bot for monitoring and reposting messages across channels. The bot uses Supabase for storing message history and channel configurations, and implements an infinite loop pattern similar to Arduino/PIC processors. It includes channel setup, message posting, and continuous monitoring functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport logging\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\nfrom supabase import create_client, Client\nfrom datetime import datetime\nfrom dotenv import dotenv_values\nlogger = logging.getLogger(__name__)\nconfig = dotenv_values(\".env\")\nbot_client = WebClient(token=config['SLACK_BOT_TOKEN'])\nclient = WebClient(token=config['SLACK_TOKEN'])\nSUPABASE_URL=config['SUPABASE_URL']\nSUPABASE_KEY=config['SUPABASE_KEY']\nsupabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)\nSLACK_ORG = config['SLACK_ORG']\nSLACK_ORG_LINK = f\"https://{SLACK_ORG}.slack.com/archives/\"\n############\n# Config:\n############\n# 1.4 seconds should be the minimum to avoid passing Slack API limits.\n# https://api.slack.com/docs/rate-limits#tier_t3\nPOOLING_DELAY = 1.4\n# Check if new channels were added each hour.\nSCAN_CHANNELS_DELAY = 3600.0\nBUFFER_SIZE = 20\n\nclass SlackChannel:\n  def __init__(self, id, name, p_level, dest_channel_id, dest_channel, private):\n    \"\"\"\n      Args:\n          id (str): Slack channel ID from the source channel\n          name (str): Name of the source channel (used in logging)\n          p_level (str): (Optional message) added when posting\n          dest_channel_id (str): Slack channel ID for the destination channel\n          dest_channel (str): Name of the destination channel (used in logging)\n          private (int): Integer to check if the channel is private (private==1) or public channel\n      Returns:\n          SlackChannel: object\n    \"\"\"\n    self.id = id\n    self.name = name\n    self.p_level = p_level\n    self.dest_channel = dest_channel\n    self.dest_channel_id  = dest_channel_id\n    self.private  = private\n\ndef setup():\n    \"\"\"\n        Fetches the list of channels from Supabase and returns them in a dict()\n    Returns:\n        dict: Dictionary with SlackChannel objects.\n    \"\"\"\n    channels = dict()\n    data = supabase.from_(\"slack_channels\").select(\"channel_id, channel, p_level, dest_channel, dest_channel_id, private\").execute().data\n    data_dic = data\n    for row in data_dic:\n        channels[row['channel_id']] = SlackChannel(id = row['channel_id'],\n        name = row['channel'],\n        p_level = row['p_level'],\n        dest_channel = row['dest_channel'],\n        dest_channel_id = row['dest_channel_id'],\n        private = row['private'])\n    return channels\n\ndef post(src_channel, link, message):\n    \"\"\"\n        Post a message from a source channel into the destination channel\n    Args:\n        src_channel (SlackChannel): SlackChannel object\n        link (_type_): The link of the message in slack\n        message (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    try:\n        aux_text = \"\"\n        if src_channel.private != 1:\n            aux_text = (\"Message on <#\"+src_channel.id+\n                \">. \"+src_channel.p_level+\" \\n\"+link)\n        else:\n            aux_text = (\"Message on <#\"+src_channel.id+\n                \">.\"+src_channel.p_level+\" \\n\"+message+\" \\n\"+link)\n        result = bot_client.chat_postMessage(\n                channel= src_channel.dest_channel_id,\n                text=aux_text\n                )\n        logger.info(result)\n    except SlackApiError as e:\n        logger.error(f\"Error posting message: {e}\")\n\ndef ts_to_strtime(ts):\n    \"\"\"\n        Converts the UNIX time in timestamp to ISO format.\n    Args:\n        ts (int): TS datetime\n\n    Returns:\n        str: ISO format datetime string for compatibility with Postgres.\n    \"\"\"\n    aux_ts = int(ts)\n    return str(datetime.utcfromtimestamp(aux_ts).isoformat())\n\ndef loop_through_channels(channels):\n    \"\"\"\n        Loop through the channels and post messages on postgres if they aren't cached.\n    Args:\n        channels (dict): dict() with SlackChannel objects\n    \"\"\"\n    for channel_id in channels:\n        channel = channels[channel_id]\n        conversation_history = []\n        try:\n            result = client.conversations_history(channel=channel.id, limit = BUFFER_SIZE)\n            conversation_history = result[\"messages\"]\n            logger.info(\"{} messages found in {}\".format(len(conversation_history), id))\n        except SlackApiError as e:\n            logger.error(\"Error creating conversation: {}\".format(e))\n        for message in conversation_history:\n            try:\n                msg_dic = dict()\n                msg_dic['channel_name'] = channel.name\n                msg_dic['channel_id'] = channel.id\n                aux_msg = \"<@\"+message['user']+\"> wrote: \\n\"\n                msg_dic['message'] = aux_msg + message['text']\n                ts_aux  = message['ts'].split(\".\")\n                msg_dic['ts'] = ts_to_strtime(ts_aux[0])\n                msg_dic['ts_ms'] = ts_aux[1]\n                supabase.table(\"slack_watcher\").insert(msg_dic).execute()\n                auxint = ts_aux[0]+ts_aux[1]\n                auxint = auxint.replace(\".\",\"\")\n                link = SLACK_ORG_LINK+channel.id+\"/p\"+auxint\n                post(channel, link, msg_dic['message'])\n            except Exception as e:\n                pass\n        time.sleep(POOLING_DELAY)\n\ndef main():\n    \"\"\"\n        Main loop to infinitely keep pooling data from channels and posting on Slack.\n        It also checks for new channels every hour.\n    \"\"\"\n    channels = setup()\n    start = time.time()\n    while True:\n        end = time.time()\n        if ((end - start) > SCAN_CHANNELS_DELAY):\n            start = time.time()\n            channels = setup()\n        else:\n            loop_through_channels(channels)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Batch Sending Queue Messages with Optional Delay\nDESCRIPTION: Function to add multiple messages to a specified queue in a single batch operation with optional visibility delay. Takes queue name, array of message payloads (JSONB[]), and optional sleep seconds as parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npgmq_public.send_batch(queue_name text, messages jsonb[], sleep_seconds integer)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with JSONB Fields in PostgreSQL\nDESCRIPTION: Creates a calendar table with standard SQL fields and JSONB fields for more complex data structures. The table includes fields for basic information like date and weight, plus JSONB fields for storing food, water, and exercise logs as structured data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE calendar (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    date date,\n    user_id uuid NOT NULL,\n    weight numeric,\n    notes text,\n    food_log jsonb,\n    water_log jsonb,\n    exercise_log jsonb\n);\n-- (Optional) - create a foreign key relationship for the user_id field\nALTER TABLE ONLY calendar\n    ADD CONSTRAINT calendar_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth Client Credentials\nDESCRIPTION: Step-by-step process for creating OAuth client credentials in Google Cloud Console for Supabase authentication integration\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Google Cloud console, go to the [Consent Screen configuration page](https://console.cloud.google.com/apis/credentials/consent).\n2. Under **Authorized domains**, add your Supabase project's domain, which has the form `<PROJECT_ID>.supabase.co`.\n3. Configure the following non-sensitive scopes:\n   - `.../auth/userinfo.email`\n   - `...auth/userinfo.profile`\n   - `openid`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Supabase Database Connection String\nDESCRIPTION: Shell commands to get the connection string for a local Supabase instance. This is used when configuring the Postgres MCP server for local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/mcp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsupabase status\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx supabase status\n```\n\n----------------------------------------\n\nTITLE: Conditional Email Template Based on User Language in HTML with Go Templates\nDESCRIPTION: This code shows how to create multilingual email templates using Go Templating Language. The template uses conditional statements to display different greeting messages based on the user's language preference stored in metadata. It includes examples for English, Polish, and a default fallback.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/customizing-emails-by-language-KZ_38Q.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{if eq .Data.langauge \"en\" }}\n<h1>Welcome!</h1>\n{{ else if eq .Data.langauge \"pl\" }}\n<h1>Witamy!</h1>\n{{ else }}\n<h1>chuS'ugh, tera' je (Klingon)</h1>\n{{end}}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Next.js Server Components\nDESCRIPTION: Example of using Supabase within a Next.js Server Component. This approach allows for server-side data fetching using the createServerComponentClient function, which requires cookies from the request.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs'\n\nexport default async function Page() {\n  const cookieStore = cookies()\n  const supabase = createServerComponentClient({ cookies: () => cookieStore })\n  const { data } = await supabase.from('todos').select()\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Using @skip Directive in GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates the use of the @skip directive, which allows conditionally skipping a field based on a Boolean variable. In this example, the description field is skipped if includeDetails is true.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery getBooks($includeDetails: Boolean!) {\n  booksCollection {\n    edges {\n      node {\n        id\n        title\n        description @skip(if: $includeDetails)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Supabase Function with Ollama Integration\nDESCRIPTION: Makes a curl request to the deployed function endpoint with a prompt parameter and authentication header to generate AI content using Ollama.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"https://project-ref.supabase.co/functions/v1/ollama-test\" \\\n --data-urlencode \"prompt=write a short rap song about Supabase, the Postgres Developer platform, as sung by Nicki Minaj\" \\\n -H \"Authorization: $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using LangChain's Hybrid Search with Supabase in JavaScript\nDESCRIPTION: Illustrates how to use the LangChain hybrid search functionality with Supabase in a JavaScript frontend. The code sets up a retriever that combines similarity search with keyword search to find relevant documents based on a query.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai'\nimport { createClient } from '@supabase/supabase-js'\nimport { SupabaseHybridSearch } from 'langchain/retrievers/supabase'\n\nconst privateKey = process.env.SUPABASE_PRIVATE_KEY\nif (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`)\n\nconst url = process.env.SUPABASE_URL\nif (!url) throw new Error(`Expected env var SUPABASE_URL`)\n\nexport const run = async () => {\n  const client = createClient(url, privateKey)\n\n  const embeddings = new OpenAIEmbeddings()\n\n  const retriever = new SupabaseHybridSearch(embeddings, {\n    client,\n    //  Below are the defaults, expecting that you set up your supabase table and functions according to the guide above. Please change if necessary.\n    similarityK: 2,\n    keywordK: 2,\n    tableName: 'documents',\n    similarityQueryName: 'match_documents',\n    keywordQueryName: 'kw_match_documents',\n  })\n\n  const results = await retriever.getRelevantDocuments('hello bye')\n\n  console.log(results)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Stack and Functions Locally\nDESCRIPTION: Starts the Supabase stack and initiates the Functions watcher for local development and hot-reloading.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start # start the supabase stack\nsupabase functions serve # start the Functions watcher\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Middleware for Authentication\nDESCRIPTION: Setup of the Next.js middleware file that leverages the updateSession utility to handle authentication across the application with appropriate path matching.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// middleware.ts\n\nimport { type NextRequest } from 'next/server';\nimport { updateSession } from '@/utils/supabase/middleware';\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request);\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using auth.getSession and auth.getUser in Supabase Authentication\nDESCRIPTION: This snippet explains the usage and security implications of auth.getSession and auth.getUser methods. auth.getSession reads local storage data without server verification, while auth.getUser always fetches trusted data from the Auth server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/get_session_warning.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Admonition type=\"danger\">\n\nNote that `auth.getSession` reads the auth token and the unencoded session data from the local storage medium. It _doesn't_ send a request back to the Supabase Auth server unless the local session is expired.\n\nYou should **never** trust the unencoded session data if you're writing server code, since it could be tampered with by the sender. If you need verified, trustworthy user data, call `auth.getUser` instead, which always makes a request to the Auth server to fetch trusted data.\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: PGroonga Full-Text Search with Multiple Words (OR)\nDESCRIPTION: SQL command demonstrating a full-text search for multiple words using PGroonga, where any of the specified words can be present in the result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect * from memos where content &@~ 'postgres OR pgroonga';\n```\n\n----------------------------------------\n\nTITLE: React Email Template Component\nDESCRIPTION: React component that defines the email template for magic link authentication. Includes styling and layout for the email content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/auth-send-email-hook-react-email-resend.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Body,\n  Container,\n  Head,\n  Heading,\n  Html,\n  Link,\n  Preview,\n  Text,\n} from 'npm:@react-email/components@0.0.22'\nimport * as React from 'npm:react@18.3.1'\n\ninterface MagicLinkEmailProps {\n  supabase_url: string\n  email_action_type: string\n  redirect_to: string\n  token_hash: string\n  token: string\n}\n\nexport const MagicLinkEmail = ({\n  token,\n  supabase_url,\n  email_action_type,\n  redirect_to,\n  token_hash,\n}: MagicLinkEmailProps) => (\n  <Html>\n    <Head />\n    <Preview>Log in with this magic link</Preview>\n    <Body style={main}>\n      <Container style={container}>\n        <Heading style={h1}>Login</Heading>\n        <Link\n          href={`${supabase_url}/auth/v1/verify?token=${token_hash}&type=${email_action_type}&redirect_to=${redirect_to}`}\n          target=\"_blank\"\n          style={{\n            ...link,\n            display: 'block',\n            marginBottom: '16px',\n          }}\n        >\n          Click here to log in with this magic link\n        </Link>\n        <Text style={{ ...text, marginBottom: '14px' }}>\n          Or, copy and paste this temporary login code:\n        </Text>\n        <code style={code}>{token}</code>\n        <Text\n          style={{\n            ...text,\n            color: '#ababab',\n            marginTop: '14px',\n            marginBottom: '16px',\n          }}\n        >\n          If you didn&apos;t try to login, you can safely ignore this email.\n        </Text>\n        <Text style={footer}>\n          <Link\n            href=\"https://demo.vercel.store/\"\n            target=\"_blank\"\n            style={{ ...link, color: '#898989' }}\n          >\n            ACME Corp\n          </Link>\n          , the famouse demo corp.\n        </Text>\n      </Container>\n    </Body>\n  </Html>\n)\n```\n\n----------------------------------------\n\nTITLE: Restarting pg_net Worker to Apply Configuration Changes\nDESCRIPTION: Command to restart the pg_net background worker process after changing configuration settings to ensure the changes take effect.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect net.worker_restart();\n```\n\n----------------------------------------\n\nTITLE: Creating a More Complex JWT Payload in JavaScript\nDESCRIPTION: This JavaScript code snippet shows an example of a more complex JSON object that can be used as the payload of a JWT. In addition to the standard claims like `sub`, `name`, `iat`, and `exp`, it includes a custom `theme` property with nested `primary` and `secondary` color values. This demonstrates that JWTs can store arbitrary data, although larger payloads increase the token size.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"0002\",\n  \"name\": \"Věra Hrabánková\",\n  \"iat\": 1516239022,\n  \"exp\": 1518239022,\n  \"theme\": {\n      \"primary\" : \"#D80C14\",\n      \"secondary\" : \"#FFFFFF\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Data to Chat Partitions in PostgreSQL\nDESCRIPTION: Procedure that copies data from the original large table to the new partition tables. Orders data by created_at during copy to improve cache efficiency and block density.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE PROCEDURE app.copy_chats_partition(partition_day date)\n    LANGUAGE plpgsql AS\n$$\nDECLARE\n    num_copied bigint = 0;\nBEGIN\n    EXECUTE format(\n    $i$\n        INSERT INTO app.\"chats_%1$s\" (id, created_at)\n        SELECT id, created_at FROM chats\n        WHERE created_at::date >= %1$L::date AND created_at::date < (%1$L::date + interval '1 day')\n        ORDER BY created_at\n    $i$, partition_day);\n    GET DIAGNOSTICS num_copied = ROW_COUNT;\n    RAISE NOTICE 'Copied % rows to %', num_copied, format('app.\"chats_%1$s\"', partition_day);\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Query Function with Supabase\nDESCRIPTION: TypeScript function that defines a reusable query to fetch a country by ID using the Supabase client, which can be used in both server and client components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TypedSupabaseClient } from '@/utils/types'\n\nexport function getCountryById(client: TypedSupabaseClient, countryId: number) {\n  return client\n    .from('countries')\n    .select(\n      `\n      id,\n      name\n    `\n    )\n    .eq('id', countryId)\n    .throwOnError()\n    .single()\n}\n```\n\n----------------------------------------\n\nTITLE: Recreating pg_net Extension in Supabase SQL\nDESCRIPTION: This SQL command drops and recreates the pg_net extension in the extensions schema, which can potentially resolve permission issues with the http_request_queue table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/42501--permission-denied-for-table-httprequestqueue-KnozmQ.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ndrop extension pg_net; create extension pg_net schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Defining a Supabase Model with Foreign Key in Dart\nDESCRIPTION: This snippet demonstrates how to define a Dart model class for use with Supabase and Brick ORM, including a foreign key relationship. It shows the use of Supabase-specific annotations and UUID generation for the primary key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-08-offline-first-flutter-apps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:brick_offline_first_with_supabase/brick_offline_first_with_supabase.dart';\nimport 'package:brick_sqlite/brick_sqlite.dart';\nimport 'package:brick_supabase/brick_supabase.dart';\nimport 'package:my_app/lib/src/users/user.model.dart';\nimport 'package:uuid/uuid.dart';\n\n@ConnectOfflineFirstWithSupabase(\n  supabaseConfig: SupabaseSerializable(tableName: 'orders'),\n)\nclass Order extends OfflineFirstWithSupabaseModel {\n  // Like Supabase's client, specifying a foreign_key\n  // is possible but only necessary if there are joins\n  // with multiple foreign keys\n  // @Supabase(foreignKey: 'user_id')\n  final User user;\n\n  @Supabase(unique: true)\n  @Sqlite(index: true, unique: true)\n  final String id;\n\n  Order({\n    String? id,\n    required this.user,\n  }) : this.id = id ?? const Uuid().v4();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Index for Embeddings\nDESCRIPTION: SQL command to create an IVFFlat index on the embedding column using vector_ip_ops for improved search performance. Uses 10 lists for tables with less than 1 million records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on documents\nusing ivfflat (embedding vector_ip_ops)\nwith (lists = 10);\n```\n\n----------------------------------------\n\nTITLE: Downloading a file using Python in Supabase Storage\nDESCRIPTION: This Python snippet demonstrates how to download a file from Supabase Storage. It uses the `supabase.storage.from_('avatars').download('public/avatar1.png')` method to download the file located at 'public/avatar1.png' within the 'avatars' bucket. The response object contains the result of the operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.storage.from_('avatars').download('public/avatar1.png')\n```\n\n----------------------------------------\n\nTITLE: Web-based Google Sign-in with Flutter and Supabase\nDESCRIPTION: A Flutter implementation for web-based Google Sign-in for Web, macOS, Windows, and Linux platforms using Supabase Auth's OAuth flow. It opens a browser window for authentication and handles redirects through deep linking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOAuth(\n  OAuthProvider.google,\n  redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n  authScreenLaunchMode:\n      kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregate Function Response in JSON\nDESCRIPTION: This JSON response shows the result of applying max() and min() aggregate functions to the release_year column, returning the maximum and minimum years in the dataset.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"max\": 2022,\n    \"min\": 2018\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Code Exchange Route Implementation (JavaScript)\nDESCRIPTION: Implementation of the auth callback route for handling code exchange in JavaScript.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redirect } from '@remix-run/node'\nimport { createServerClient } from '@supabase/auth-helpers-remix'\n\nexport const loader = async ({ request }) => {\n  const response = new Response()\n  const url = new URL(request.url)\n  const code = url.searchParams.get('code')\n\n  if (code) {\n    const supabaseClient = createServerClient(\n      process.env.SUPABASE_URL,\n      process.env.SUPABASE_ANON_KEY,\n      { request, response }\n    )\n    await supabaseClient.auth.exchangeCodeForSession(code)\n  }\n\n  return redirect('/', {\n    headers: response.headers,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Account Management in Ionic React\nDESCRIPTION: A React component for managing user account details after authentication. Features include fetching profile data from Supabase, updating profile information, and signing out functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  IonButton,\n  IonContent,\n  IonHeader,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonLoading,\n  useIonToast,\n  useIonRouter\n} from '@ionic/react';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../supabaseClient';\n\nexport function AccountPage() {\n  const [showLoading, hideLoading] = useIonLoading();\n  const [showToast] = useIonToast();\n  const [session] = useState(() => supabase.auth.session());\n  const router = useIonRouter();\n  const [profile, setProfile] = useState({\n    username: '',\n    website: '',\n    avatar_url: '',\n  });\n  useEffect(() => {\n    getProfile();\n  }, [session]);\n  const getProfile = async () => {\n    console.log('get');\n    await showLoading();\n    try {\n      const user = supabase.auth.user();\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', user!.id)\n        .single();\n\n      if (error && status !== 406) {\n        throw error;\n      }\n\n      if (data) {\n        setProfile({\n          username: data.username,\n          website: data.website,\n          avatar_url: data.avatar_url,\n        });\n      }\n    } catch (error: any) {\n      showToast({ message: error.message, duration: 5000 });\n    } finally {\n      await hideLoading();\n    }\n  };\n  const signOut = async () => {\n    await supabase.auth.signOut();\n    router.push('/', 'forward', 'replace');\n  }\n  const updateProfile = async (e?: any, avatar_url: string = '') => {\n    e?.preventDefault();\n\n    console.log('update ');\n    await showLoading();\n\n    try {\n      const user = supabase.auth.user();\n\n      const updates = {\n        id: user!.id,\n        ...profile,\n        avatar_url: avatar_url,\n        updated_at: new Date(),\n      };\n\n      const { error } = await supabase.from('profiles').upsert(updates, {\n        returning: 'minimal', // Don't return the value after inserting\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: any) {\n      showToast({ message: error.message, duration: 5000 });\n    } finally {\n      await hideLoading();\n    }\n  };\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Account</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent>\n        <form onSubmit={updateProfile}>\n          <IonItem>\n            <IonLabel>\n              <p>Email</p>\n              <p>{session?.user?.email}</p>\n            </IonLabel>\n          </IonItem>\n\n          <IonItem>\n            <IonLabel position=\"stacked\">Name</IonLabel>\n            <IonInput\n              type=\"text\"\n              name=\"username\"\n              value={profile.username}\n              onIonChange={(e) =>\n                setProfile({ ...profile, username: e.detail.value ?? '' })\n              }\n            ></IonInput>\n          </IonItem>\n\n          <IonItem>\n            <IonLabel position=\"stacked\">Website</IonLabel>\n            <IonInput\n              type=\"url\"\n              name=\"website\"\n              value={profile.website}\n              onIonChange={(e) =>\n                setProfile({ ...profile, website: e.detail.value ?? '' })\n              }\n            ></IonInput>\n          </IonItem>\n          <div className=\"ion-text-center\">\n            <IonButton fill=\"clear\" type=\"submit\">\n              Update Profile\n            </IonButton>\n          </div>\n        </form>\n\n        <div className=\"ion-text-center\">\n          <IonButton fill=\"clear\" onClick={signOut}>\n            Log Out\n          </IonButton>\n        </div>\n      </IonContent>\n    </IonPage>\n  );\n```\n\n----------------------------------------\n\nTITLE: Edge Function SQL Implementation\nDESCRIPTION: SQL function implementation for executing JavaScript code through the Edge Function with region restrictions and authentication headers\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION edge.exec(data text) RETURNS JSONB LANGUAGE plpgsql\nAS $function$\nDECLARE\n    custom_headers JSONB;\n-- Example restricting regions available to Europe\n    allowed_regions TEXT[] := ARRAY['eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-north-1', 'eu-central-1'];\nBEGIN\n    -- Set headers with anon key and Content-Type\n    custom_headers := jsonb_build_object(\n        'Authorization', 'Bearer ' || edge.get_secret('service_role_key'),\n        'Content-Type', 'application/json',\n        'x-region', allowed_regions\n    );\n    -- Call edge_wrapper function with default values\n    RETURN edge.edge_wrapper(\n        url := ('https://<ref>.supabase.co/functions/v1/multi-purpose'),\n        headers := custom_headers,\n        payload := jsonb_build_object('code', data),\n        max_retries := 5,\n        allowed_regions := allowed_regions\n    );\nEND;\n$function$;\n```\n\n----------------------------------------\n\nTITLE: Detecting Social Media Shares in Edge Function (JavaScript)\nDESCRIPTION: This code snippet checks the user agent to detect if the ticket was shared on Twitter or LinkedIn, and updates the corresponding fields in the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nif (userAgent?.toLocaleLowerCase().includes('twitter')) {\n  // Attendee shared on Twitter\n  await supabaseAdminClient\n    .from('lw7_tickets')\n    .update({ sharedOnTwitter: 'now' })\n    .eq('username', username)\n    .is('sharedOnTwitter', null)\n} else if (userAgent?.toLocaleLowerCase().includes('linkedin')) {\n  // Attendee shared on LinkedIn\n  await supabaseAdminClient\n    .from('lw7_tickets')\n    .update({ sharedOnLinkedIn: 'now' })\n    .eq('username', username)\n    .is('sharedOnLinkedIn', null)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with SQL in PostgreSQL\nDESCRIPTION: This SQL query demonstrates how to extract nested JSON values from a 'books' table using PostgreSQL's JSON operators. The -> operator returns values as jsonb data, while ->> returns values as text. The example shows accessing nested JSON arrays using index notation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  title,\n  metadata ->> 'description' as description, -- returned as text\n  metadata -> 'price' as price,\n  metadata -> 'ages' -> 0 as low_age,\n  metadata -> 'ages' -> 1 as high_age\nfrom books;\n```\n\n----------------------------------------\n\nTITLE: Signing In with Notion in JavaScript using Supabase\nDESCRIPTION: This snippet demonstrates how to use the Supabase JS client library to sign in with Notion via OAuth by calling the function signInWithOAuth() with 'notion' as the provider. Dependencies include the Supabase JS client library, and the function requires project URL and anon key for initialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithNotion() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'notion',\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Array Data in SQL\nDESCRIPTION: This SQL snippet selects the first item from the 'textarray' column and calculates the total length of the array using the array_length function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT textarray[1], array_length(textarray, 1) FROM arraytest;\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioGroupStacked with Multiple Options in React\nDESCRIPTION: Example demonstrating how to use the RadioGroupStacked component with multiple RadioGroupStackedItem children. The component allows selecting from mutually exclusive options with 'Comfortable' set as the default selection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group-stacked.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroupStacked defaultValue=\"comfortable\">\n  <RadioGroupStackedItem value=\"default\" id=\"r1\" label=\"Default\" />\n  <RadioGroupStackedItem value=\"comfortable\" id=\"r2\" label=\"Comfortable\" />\n  <RadioGroupStackedItem value=\"compact\" id=\"r3\" label=\"Compact\" />\n</RadioGroupStacked>\n```\n\n----------------------------------------\n\nTITLE: Creating Flag-Based RLS Policy in PostgreSQL\nDESCRIPTION: SQL code that adds an exportable flag to the profiles table and creates a Row Level Security policy that only allows access to rows where this flag is set to true.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  id serial primary key,\n  name text,\n  email text,\n  is_exportable boolean -- make this \"TRUE\" if you want to allow access\n);\nalter table profiles\n  enable row level security;\n\n-- Only dump data for internal team members 1, 2, 3\ncreate policy \"Data dump rule\" on profiles\n  for select\n  to exporter\n  using ( is_exportable = true );\n```\n\n----------------------------------------\n\nTITLE: Cancelling specific idle PostgreSQL transactions\nDESCRIPTION: This SQL command cancels a backend process for a specific transaction identified by its start time, useful for removing transactions that are blocking vacuum operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nSELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE xact_start = '<value from previous query>';\n```\n\n----------------------------------------\n\nTITLE: Querying Documents in FerretDB\nDESCRIPTION: MongoDB query to find specific player documents in FerretDB\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json5\nCODE:\n```\ndb.players.find({player_name: \"Giggs\"})\n```\n\n----------------------------------------\n\nTITLE: Helper functions for image encoding and embedding generation\nDESCRIPTION: Python utility functions for encoding images as base64 strings, constructing API request bodies, and generating embeddings using Amazon Titan multimodal model.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef readFileAsBase64(file_path):\n    \"\"\"Encode image as base64 string.\"\"\"\n    try:\n        with open(file_path, \"rb\") as image_file:\n            input_image = base64.b64encode(image_file.read()).decode(\"utf8\")\n        return input_image\n    except:\n        print(\"bad file name\")\n        sys.exit(0)\n\n\ndef construct_bedrock_image_body(base64_string):\n    \"\"\"Construct the request body.\n\n    https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-titan-embed-mm.html\n    \"\"\"\n    return json.dumps(\n        {\n            \"inputImage\": base64_string,\n            \"embeddingConfig\": {\"outputEmbeddingLength\": 1024},\n        }\n    )\n\n\ndef get_embedding_from_titan_multimodal(body):\n    \"\"\"Invoke the Amazon Titan Model via API request.\"\"\"\n    response = bedrock_client.invoke_model(\n        body=body,\n        modelId=\"amazon.titan-embed-image-v1\",\n        accept=\"application/json\",\n        contentType=\"application/json\",\n    )\n\n    response_body = json.loads(response.get(\"body\").read())\n    print(response_body)\n    return response_body[\"embedding\"]\n\n\ndef encode_image(file_path):\n    \"\"\"Generate embedding for the image at file_path.\"\"\"\n    base64_string = readFileAsBase64(file_path)\n    body = construct_bedrock_image_body(base64_string)\n    emb = get_embedding_from_titan_multimodal(body)\n    return emb\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Signup with Kotlin\nDESCRIPTION: Kotlin code snippet for signing up a new user with email and password authentication in Supabase. This example uses the signUpWith(Email) method to register users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signUpNewUser() {\n\tsupabase.auth.signUpWith(Email) {\n\t\temail = \"valid.email@supabase.io\"\n\t\tpassword = \"example-password\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting and Type Casting JSONB Array Elements in PostgreSQL\nDESCRIPTION: Shows how to extract numeric values from JSONB arrays and cast them to appropriate data types. This query extracts the calories from each food log entry and casts them to integer for further processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  date,\n  (jsonb_array_elements(food_log)->'calories')::integer as calories\nfrom calendar where user_id = 'xyz'\n  and date between '2022-01-01' and '2022-01-31';\n```\n\n----------------------------------------\n\nTITLE: Creating Error Page in Next.js\nDESCRIPTION: This snippet shows a simple error page component in Next.js. It displays a message when something goes wrong in the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ErrorPage() {\n  return <p>Sorry, something went wrong</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Boolean Logic - AND OR AND\nDESCRIPTION: Demonstrates how to implement a complex WHERE clause with nested AND and OR conditions for filtering team_id and age using both SQL and JavaScript syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom players\nwhere ((team_id = 'CHN' and age > 35) or (team_id != 'CHN' and age is not null));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('players')\n  .select() // or .select('*')\n  .or('and(team_id.eq.CHN,age.gt.35),and(team_id.neq.CHN,.not.age.is.null)')\n```\n\n----------------------------------------\n\nTITLE: Hiding Links in Supabase Auth Component - React - JavaScript\nDESCRIPTION: This snippet illustrates how to hide authentication links by setting the 'showLinks' prop to false in the Supabase Auth component. This is useful for customizing the UI based on user requirements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nimport { Auth } from '@supabase/auth-ui-react'\\n\\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\\n\\nconst App = () => <Auth supabaseClient={supabase} showLinks={false} />\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Camera and Ionic PWA Elements\nDESCRIPTION: Installs the necessary packages to interact with the user's camera. Capacitor provides native device API access, while Ionic PWA Elements offers UI polyfills for browser APIs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements @capacitor/camera\n```\n\n----------------------------------------\n\nTITLE: Populating Test Data in PostgreSQL Chat Tables\nDESCRIPTION: Generates sample data for testing by creating chat entries over a time period and corresponding messages. Creates indexes on created_at columns for both tables to improve query performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO chats (created_at)\nSELECT generate_series(\n  '2022-01-01'::timestamptz,\n  '2022-01-30 23:00:00'::timestamptz,\n  interval '1 hour'\n);\n\nINSERT INTO chat_messages (\n\tcreated_at,\n\tchat_id,\n\tchat_created_at,\n\tmessage\n)\nSELECT\n  mca,\n  chats.id,\n  chats.created_at,\n  (SELECT ($$[0:2]={'hello','goodbye','I would like a sandwich please'}$$::text[])[trunc(random() * 3)::int])\nFROM chats\nCROSS JOIN LATERAL (\n    SELECT generate_series(\n        chats.created_at,\n        chats.created_at + interval '1 day',\n        interval '1 minute'\n\t\t) AS mca\n) b;\n\nCREATE INDEX ON chats (created_at);\nCREATE INDEX ON chat_messages (created_at);\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Test Table in SQL\nDESCRIPTION: SQL commands to create a sample table named 'your_table_name' and insert 20 rows of test data. This setup is used to demonstrate the latency issue when querying via Supabase client vs. direct Postgres connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/high-latency-with-supabase-client-z0pZzR.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create table\nCREATE TABLE your_table_name (\n    id UUID PRIMARY KEY,\n    column1 TEXT,\n    column2 INT,\n    column3 BOOLEAN\n);\n\n-- Insert statements\nINSERT INTO your_table_name (id, column1, column2, column3) VALUES\n    (uuid_generate_v4(), 'value1', 10, TRUE),\n    (uuid_generate_v4(), 'value2', 20, FALSE),\n    (uuid_generate_v4(), 'value3', 15, TRUE),\n    (uuid_generate_v4(), 'value4', 8, FALSE),\n    (uuid_generate_v4(), 'value5', 25, TRUE),\n    (uuid_generate_v4(), 'value6', 12, FALSE),\n    (uuid_generate_v4(), 'value7', 18, TRUE),\n    (uuid_generate_v4(), 'value8', 30, FALSE),\n    (uuid_generate_v4(), 'value9', 22, TRUE),\n    (uuid_generate_v4(), 'value10', 5, FALSE),\n    (uuid_generate_v4(), 'value11', 17, TRUE),\n    (uuid_generate_v4(), 'value12', 9, FALSE),\n    (uuid_generate_v4(), 'value13', 14, TRUE),\n    (uuid_generate_v4(), 'value14', 28, FALSE),\n    (uuid_generate_v4(), 'value15', 11, TRUE),\n    (uuid_generate_v4(), 'value16', 7, FALSE),\n    (uuid_generate_v4(), 'value17', 19, TRUE),\n    (uuid_generate_v4(), 'value18', 26, FALSE),\n    (uuid_generate_v4(), 'value19', 16, TRUE),\n    (uuid_generate_v4(), 'value20', 21, FALSE);\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Server Actions\nDESCRIPTION: Implementation of server actions for login and signup functionality using the new Supabase server client utility function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// app/login/actions.ts\n\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\n\nimport { createClient } from '@/utils/supabase/server';\n\nexport async function login(formData: FormData) {\n  const supabase = createClient();\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n  };\n\n  const { error } = await supabase.auth.signInWithPassword(data)\n\n  if (error) {\n    redirect('/error');\n  }\n\n  revalidatePath('/', 'layout');\n  redirect('/');\n}\n\nexport async function signup(formData: FormData) {\n  const supabase = createClient();\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n  };\n\n  const { error } = await supabase.auth.signUp(data);\n\n  if (error) {\n    redirect('/error');\n  }\n\n  revalidatePath('/', 'layout');\n  redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Geographic Point Data with Dart\nDESCRIPTION: Dart code using Supabase client to insert restaurant data with geographic points as WKT strings. The POINT format follows the same convention as in other languages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.from('restaurants').insert([\n  {\n    'name': 'Supa Burger',\n    'location': 'POINT(-73.946823 40.807416)',\n  },\n  {\n    'name': 'Supa Pizza',\n    'location': 'POINT(-73.94581 40.807475)',\n  },\n  {\n    'name': 'Supa Taco',\n    'location': 'POINT(-73.945826 40.80629)',\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Realtime Cursors with React\nDESCRIPTION: This code snippet demonstrates how to use the `<RealtimeCursors />` component in a React application to render real-time cursors from other users in a specified room. It imports the component and passes the `roomName` and `username` props to configure the cursor sharing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeCursors } from '@/components/realtime-cursors'\n\nexport default function Page() {\n  return (\n    <div className=\"w-full min-h-screen\">\n      <RealtimeCursors roomName=\"macrodata_refinement_office\" username=\"Mark Scout\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Provider Refresh Token (Flutter)\nDESCRIPTION: This Flutter snippet demonstrates how to obtain the provider refresh token when signing in with Azure OAuth by including the offline access scope in the request.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithAzure() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.azure,\n    scopes: 'offline_access',\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Functions with Environment File\nDESCRIPTION: Command to serve Edge Functions locally with environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Setting up blocking authentication functions in Python for Supabase role assignment\nDESCRIPTION: This Python code creates blocking Firebase Authentication functions that add a role custom claim to users when they sign up or sign in. This role will be used by Supabase to assign the authenticated Postgres role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@identity_fn.before_user_created()\ndef set_supabase_role_sign_up(event: identity_fn.AuthBlockingEvent) -> identity_fn.BeforeCreateResponse | None:\n  return identity_fn.BeforeCreateResponse(\n    # The Supabase project will use this role to assign the `authenticated`\n    # Postgres role.\n    custom_claims={'role': 'authenticated'})\n\n@identity_fn.before_user_signed_in()\ndef set_supabase_role_sign_in(event: identity_fn.AuthBlockingEvent) -> identity_fn.BeforeSignInResponse | None:\n  return identity_fn.BeforeSignInResponse(\n    # The Supabase project will use this role to assign the `authenticated`\n    # Postgres role.\n    custom_claims={'role': 'authenticated'})\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE Request Function Signature in pg_net\nDESCRIPTION: Function signature for net.http_delete which creates an asynchronous HTTP DELETE request. This is a SECURITY DEFINER function that returns a request ID reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nnet.http_delete(\n    -- url for the request\n    url text,\n    -- key/value pairs to be url encoded and appended to the `url`\n    params jsonb default '{}'::jsonb,\n    -- key/values to be included in request headers\n    headers jsonb default '{}'::jsonb,\n    -- the maximum number of milliseconds the request may take before being canceled\n    timeout_milliseconds int default 2000\n)\n    -- request_id reference\n    returns bigint\n\n    strict\n    volatile\n    parallel safe\n    language plpgsql\n    security definer\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships in Dart\nDESCRIPTION: Dart example showing how to query orchestral sections with their related instruments using Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.from('orchestral_sections').select('id, name, instruments(id, name)');\n```\n\n----------------------------------------\n\nTITLE: Text-to-Image Edge Function Implementation\nDESCRIPTION: TypeScript implementation of an Edge Function that uses Hugging Face's Inference API to convert text prompts into images using the Stable Diffusion model\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\nimport { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2'\n\nconst hf = new HfInference(Deno.env.get('HUGGING_FACE_ACCESS_TOKEN'))\n\nserve(async (req) => {\n  const { prompt } = await req.json()\n\n  const image = await hf.textToImage(\n    {\n      inputs: prompt,\n      model: 'stabilityai/stable-diffusion-2',\n    },\n    {\n      use_cache: false,\n    }\n  )\n\n  return new Response(image)\n})\n```\n\n----------------------------------------\n\nTITLE: Querying JSONB Data with GIN Index in SQL\nDESCRIPTION: This example shows a SQL query that can utilize a GIN index on a JSONB column, using the @> operator to search for specific JSON structures.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id FROM some_table\nWHERE data @> '[ { \"itemId\": \"p11\" } ]';\n```\n\n----------------------------------------\n\nTITLE: Signing Up New User using Supabase in Swift\nDESCRIPTION: This Swift code snippet demonstrates registering a new user by providing an email address and password using the Supabase Swift client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await supabase.auth.signUp(\n  email: \"valid.email@supabase.io\",\n  password: \"example-password\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Supabase with TypeScript\nDESCRIPTION: This TypeScript definition file extends global interfaces to include Supabase client types, ensuring accurate IntelliSense and type checking when accessing session and user data in a SvelteKit application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/app.d.ts\n\nimport { SupabaseClient, Session, User } from '@supabase/supabase-js'\nimport { Database } from './DatabaseDefinitions'\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      supabase: SupabaseClient<Database>\n      safeGetSession(): Promise<{ session: Session | null; user: User | null }>\n    }\n    interface PageData {\n      session: Session | null\n      user: User | null\n    }\n    // interface Error {}\n    // interface Platform {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Guard in Angular\nDESCRIPTION: Authentication guard implementation that protects routes by checking user authentication status using RxJS operators. Shows handling of unauthorized access with toast messages and route redirection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from './../services/auth.service'\nimport { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { filter, map, take } from 'rxjs/operators'\nimport { ToastController } from '@ionic/angular'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private auth: AuthService,\n    private router: Router,\n    private toastController: ToastController\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean | UrlTree> {\n    return this.auth.getCurrentUser().pipe(\n      filter((val) => val !== null),\n      take(1),\n      map((isAuthenticated) => {\n        if (isAuthenticated) {\n          return true\n        } else {\n          this.toastController\n            .create({\n              message: 'You are not allowed to access this!',\n              duration: 2000,\n            })\n            .then((toast) => toast.present())\n\n          return this.router.createUrlTree(['/groups'])\n        }\n      })\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Role in SQL\nDESCRIPTION: This SQL command finally deletes the specified role from the database after all preparatory steps have been completed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-delete-a-role-in-postgres-8-AvxY.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP role <role>;\n```\n\n----------------------------------------\n\nTITLE: Checking Vanity Subdomain Availability with Supabase CLI\nDESCRIPTION: Use the Supabase CLI to check the availability of a desired vanity subdomain. This command helps in verifying if a specific subdomain is available for use with a Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase vanity-subdomains --project-ref abcdefghijklmnopqrst check-availability --desired-subdomain my-example-brand --experimental\n```\n\n----------------------------------------\n\nTITLE: Calling plv8 Functions in SQL\nDESCRIPTION: Example of calling a plv8 function using standard SQL syntax. This is one way to execute JavaScript functions stored in the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect function_name();\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Component with Magic Links in Ionic React\nDESCRIPTION: A React component for handling login functionality using Supabase's passwordless authentication with magic links. Uses Ionic UI components and displays toast notifications for user feedback.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport {\n  IonButton,\n  IonContent,\n  IonHeader,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  useIonToast,\n  useIonLoading,\n} from '@ionic/react';\nimport { supabase } from '../supabaseClient';\n\nexport function LoginPage() {\n  const [email, setEmail] = useState('');\n\n  const [showLoading, hideLoading] = useIonLoading();\n  const [showToast ] = useIonToast();\n  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    console.log()\n    e.preventDefault();\n    await showLoading();\n    try {\n      await supabase.auth.signIn({ email });\n      await showToast({ message: 'Check your email for the login link!' });\n    } catch (e: any) {\n      await showToast({ message: e.error_description || e.message , duration: 5000});\n    } finally {\n      await hideLoading();\n    }\n  };\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Login</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent>\n        <div className=\"ion-padding\">\n          <h1>Supabase + Ionic React</h1>\n          <p>Sign in via magic link with your email below</p>\n        </div>\n        <IonList inset={true}>\n          <form onSubmit={handleLogin}>\n            <IonItem>\n              <IonLabel position=\"stacked\">Email</IonLabel>\n              <IonInput\n                value={email}\n                name=\"email\"\n                onIonChange={(e) => setEmail(e.detail.value ?? '')}\n                type=\"email\"\n              ></IonInput>\n            </IonItem>\n            <div className=\"ion-text-center\">\n              <IonButton type=\"submit\" fill=\"clear\">\n                Login\n              </IonButton>\n            </div>\n          </form>\n        </IonList>\n      </IonContent>\n    </IonPage>\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page Component with Magic Link Authentication\nDESCRIPTION: Angular component for the login page that implements magic link authentication using Supabase. Includes form handling and error management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core'\nimport { SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-login',\n  template: `\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Login</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <div class=\"ion-padding\">\n        <h1>Supabase + Ionic Angular</h1>\n        <p>Sign in via magic link with your email below</p>\n      </div>\n      <ion-list inset=\"true\">\n        <form (ngSubmit)=\"handleLogin($event)\">\n          <ion-item>\n            <ion-label position=\"stacked\">Email</ion-label>\n            <ion-input [(ngModel)]=\"email\" name=\"email\" autocomplete type=\"email\"></ion-input>\n          </ion-item>\n          <div class=\"ion-text-center\">\n            <ion-button type=\"submit\" fill=\"clear\">Login</ion-button>\n          </div>\n        </form>\n      </ion-list>\n    </ion-content>\n  `,\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage {\n  email = ''\n\n  constructor(private readonly supabase: SupabaseService) {}\n\n  async handleLogin(event: any) {\n    event.preventDefault()\n    const loader = await this.supabase.createLoader()\n    await loader.present()\n    try {\n      const { error } = await this.supabase.signIn(this.email)\n      if (error) {\n        throw error\n      }\n      await loader.dismiss()\n      await this.supabase.createNotice('Check your email for the login link!')\n    } catch (error: any) {\n      await loader.dismiss()\n      await this.supabase.createNotice(error.error_description || error.message)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension\nDESCRIPTION: Shows how to enable the pgvector extension in a Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists vector\nwith\n  schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv with npm\nDESCRIPTION: Installs the dotenv package using npm for loading environment variables from a .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dotenv\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-In Redirect in SvelteKit with Supabase Auth\nDESCRIPTION: This snippet demonstrates how to handle server-side OAuth sign-in redirects using Supabase Auth in a SvelteKit application. It uses the redirect function from @sveltejs/kit to perform the redirection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/oauth-sign-in-isnt-redirecting-on-the-server-side-ShGMtr.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit';\n...\nconst { data } = await supabase.auth.signInWithOAuth({\n  provider: 'github',\n})\n\nthrow redirect(303, data.url)\n```\n\n----------------------------------------\n\nTITLE: Saving Roboflow Predictions to Supabase\nDESCRIPTION: Python code for saving object detection prediction results to a Supabase table. It creates a Supabase client using environment variables and inserts the predictions with the filename into a 'predictions' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom supabase import create_client, Client\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\nsupabase: Client = create_client(url, key)\n\nresult = supabase.table('predictions') \\\n    .insert({\"filename\": image, \"predictions\": predictions}) \\\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Querying Encrypted Secrets from Supabase Vault in SQL\nDESCRIPTION: Shows how to query the encrypted secrets from the Supabase Vault. This query returns the encrypted form of the secrets along with metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from vault.secrets;\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Project for Supabase Integration\nDESCRIPTION: Commands to create a new Flutter project and add the Supabase Flutter dependency in the pubspec.yaml file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create supabase_quickstart\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter: ^2.0.0\n```\n\n----------------------------------------\n\nTITLE: Edge Function Implementation - Main Handler\nDESCRIPTION: Complete implementation of the Edge Function including authentication, code execution, and error handling. Uses Supabase client and supports async operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"jsr:@supabase/functions-js/edge-runtime.d.ts\";\n\n// Import the supabase client\nimport { createClient } from \"<https://esm.sh/@supabase/supabase-js@2>\";\n\nconsole.log(\"===\\n\\tBooted Edge Worker!\\n===\\n\");\nconst supabase_url = Deno.env.get(\"SUPABASE_URL\") ?? \"\";\nconst service_role = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n// Set the permission to service_role key:\nconst supabase = createClient(supabase_url, service_role);\n// This allows us to use Supabase.ai in the function\nconst session = new Supabase.ai.Session('gte-small');\n\nDeno.serve(async (req: Request) =>\n  const authorization = req.headers.get(\"Authorization\");\n  if (!authorization) throw new Error(\"Authorization header is missing.\");\n  // Ensures that the function is called with service_role to prevent missuse\n  if (!authorization.includes(service_role)) {\n    throw new Error(\"Authorization header is invalid.\");\n  }\n\n  const { code } = await req.json();\n  try {\n    // Wrap the provided code in an async function context\n    const asyncFunction = new Function('supabase', `\n      return (async () => {\n        ${code.replace(/\\\\/g, '')}\n      })();\n    `);\n    // Pass the Supabase client as the scope for the function to use:\n    const data = await asyncFunction(supabase);\n    console.log(data);\n    return new Response(\n      JSON.stringify({ data }),\n      { headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' } },\n    );\n  } catch (error) {\n    console.error(\"Error executing user code:\", error);\n    return new Response(\n      JSON.stringify({ error: \"An error occurred -> \" + error.message }),\n      { status: 500, headers: { \"Content-Type\": \"application/json\" } }\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Trigger\nDESCRIPTION: SQL trigger that executes the broadcast function for INSERT, UPDATE, or DELETE operations on the specified table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger broadcast_changes_for_your_table_trigger\nafter insert or update or delete\non public.your_table\nfor each row\nexecute function your_table_changes();\n```\n\n----------------------------------------\n\nTITLE: Realtime Subscription - Dart Supabase\nDESCRIPTION: Updated method for creating realtime subscriptions with more explicit channel and event handling\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal subscription = supabase\n  .from('countries')\n  .on(SupabaseEventTypes.all, (payload) {\n    // Handle realtime payload\n  })\n  .subscribe();\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal channel = supabase.channel('*');\nchannel.on(\n  RealtimeListenTypes.postgresChanges,\n  ChannelFilter(event: '*', schema: '*'),\n  (payload, [ref]) {\n    // Handle realtime payload\n  },\n).subscribe();\n```\n\n----------------------------------------\n\nTITLE: Implementing React Combobox Component with TypeScript\nDESCRIPTION: A complete implementation of a Combobox component using React and TypeScript. The component combines Popover and Command components to create a searchable dropdown with framework options. It includes state management for the open/closed state and selected value, along with proper ARIA attributes for accessibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/combobox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport * as React from 'react'\nimport { Check, ChevronsUpDown } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from '@/components/ui/command'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\n\nconst frameworks = [\n  {\n    value: 'next.js',\n    label: 'Next.js',\n  },\n  {\n    value: 'sveltekit',\n    label: 'SvelteKit',\n  },\n  {\n    value: 'nuxt.js',\n    label: 'Nuxt.js',\n  },\n  {\n    value: 'remix',\n    label: 'Remix',\n  },\n  {\n    value: 'astro',\n    label: 'Astro',\n  },\n]\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState('')\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : 'Select framework...'}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? '' : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      'mr-2 h-4 w-4',\n                      value === framework.value ? 'opacity-100' : 'opacity-0'\n                    )}\n                  />\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Avatar Upload Component with Supabase Storage\nDESCRIPTION: A component that allows users to upload and display profile photos using Supabase Storage. It handles file selection, uploading to the 'avatars' bucket, and displaying the current avatar image.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { createEventDispatcher } from 'svelte'\n  import { supabase } from '../supabaseClient'\n\n  export let size: number\n  export let url: string | null = null\n\n  let avatarUrl: string | null = null\n  let uploading = false\n  let files: FileList\n\n  const dispatch = createEventDispatcher()\n\n  const downloadImage = async (path: string) => {\n    try {\n      const { data, error } = await supabase.storage.from('avatars').download(path)\n\n      if (error) {\n        throw error\n      }\n\n      const url = URL.createObjectURL(data)\n      avatarUrl = url\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log('Error downloading image: ', error.message)\n      }\n    }\n  }\n\n  const uploadAvatar = async () => {\n    try {\n      uploading = true\n\n      if (!files || files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = files[0]\n      const fileExt = file.name.split('.').pop()\n      const filePath = `${Math.random()}.${fileExt}`\n\n      const { error } = await supabase.storage.from('avatars').upload(filePath, file)\n\n      if (error) {\n        throw error\n      }\n\n      url = filePath\n      dispatch('upload')\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      uploading = false\n    }\n  }\n\n  $: if (url) downloadImage(url)\n</script>\n\n<div style=\"width: {size}px\" aria-live=\"polite\">\n  {#if avatarUrl} <img src={avatarUrl} alt={avatarUrl ? 'Avatar' : 'No image'} class=\"avatar image\"\n  style=\"height: {size}px, width: {size}px\" /> {:else}\n  <div class=\"avatar no-image\" style=\"height: {size}px, width: {size}px\" />\n  {/if}\n  <div style=\"width: {size}px\">\n    <label class=\"button primary block\" for=\"single\">\n      {uploading ? 'Uploading ...' : 'Upload avatar'}\n    </label>\n    <span style=\"display:none\">\n      <input\n        type=\"file\"\n        id=\"single\"\n        accept=\"image/*\"\n        bind:files\n        on:change={uploadAvatar}\n        disabled={uploading}\n      />\n    </span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase client library in Nuxt project\nDESCRIPTION: This command navigates to the Nuxt app directory and installs the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app && npm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up LangChain's Hybrid Search Extension with dbdev\nDESCRIPTION: Demonstrates installing the langchain-hybrid_search package using dbdev. This extension provides a Supabase backend for LangChain's document search tool that combines document embeddings and full text search capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  dbdev.install ('langchain-hybrid_search');\n\ncreate extension if not exists vector;\n\ncreate extension \"langchain-hybrid_search\" schema public version '1.0.0';\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PostgreSQL View\nDESCRIPTION: Creates a view named 'transcripts' that joins students, courses, and grades tables to provide a consolidated view of student academic records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate view transcripts as\n  select\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\n  from\n    grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Cache Hit Rate Analysis\nDESCRIPTION: Query to analyze cache efficiency by calculating index and table hit rates from PostgreSQL shared buffers, helping identify memory-related performance issues\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  'index hit rate' as name,\n  (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read), 0) * 100 as ratio\nfrom pg_statio_user_indexes\nunion all\nselect\n  'table hit rate' as name,\n  sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read), 0) * 100 as ratio\nfrom pg_statio_user_tables;\n```\n\n----------------------------------------\n\nTITLE: Querying the Embedding Status in SQL\nDESCRIPTION: This SQL query demonstrates how to check if an embedding has been generated for a document. Initially after insertion, the embedding column will be empty until the asynchronous process completes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect id, embedding\nfrom documents\nwhere title = 'Understanding Vector Databases';\n```\n\n----------------------------------------\n\nTITLE: Creating a has_role() Function in SQL\nDESCRIPTION: This security definer function checks if the current user has a specific role. It's designed to be used in RLS policies to bypass RLS on the roles table for better performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION has_role()\n    RETURNS boolean as\n$$\nbegin\n    return exists (select 1 from roles_table where auth.uid() = user_id and role = 'good_role')\nend;\n$$ language plpgsql security definer;\n```\n\n----------------------------------------\n\nTITLE: Creating Login Route Handler in TypeScript\nDESCRIPTION: This TypeScript code sample demonstrates creating a server-side route handler for user login in a Next.js application utilizing Supabase. It handles a POST request by reading form data, authenticating via a type-safe Supabase client, and redirecting the user afterward. The snippet relies on @supabase/auth-helpers-nextjs and next/headers, with type definitions enhancing the development process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nimport type { Database } from '@/lib/database.types'\n\nexport async function POST(request: Request) {\n  const requestUrl = new URL(request.url)\n  const formData = await request.formData()\n  const email = String(formData.get('email'))\n  const password = String(formData.get('password'))\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })\n\n  await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n\n  return NextResponse.redirect(requestUrl.origin, {\n    status: 301,\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Project with Management API\nDESCRIPTION: Demonstrates how to use the Management API to create a new Supabase project programmatically using a curl command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.supabase.com/v1/projects' \\\n  -H 'Authorization: Bearer <[your-access-token](https://supabase.com/dashboard/account/tokens)>' \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"my-project\", \"organization_id\": \"cool-green-pqdr0qc\", \"region\": \"us-east-1\", \"plan\": \"free\", \"db_pass\": \"********\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase database connection environment variable\nDESCRIPTION: Sets the DATABASE_URL environment variable to connect to a Supabase PostgreSQL database using the Session Pooler connection string. The URL includes the database username, password, host, and database name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Table for Document Embeddings in PostgreSQL\nDESCRIPTION: SQL command to create a table for storing documents and their embeddings. The table includes columns for content and a 1536-dimensional vector for the embedding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id bigserial primary key,\n  content text,\n  embedding vector(1536)\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Top Cache Misses in Supabase Storage Logs (SQL)\nDESCRIPTION: This SQL query retrieves the top cache misses from Supabase edge logs. It aggregates counts of requests that have a cache status indicating they missed the cache.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/cdn/metrics.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  r.path as path,\n  r.search as search,\n  count(id) as count\nfrom\n  edge_logs as f\n  cross join unnest(f.metadata) as m\n  cross join unnest(m.request) as r\n  cross join unnest(m.response) as res\n  cross join unnest(res.headers) as h\nwhere\n  starts_with(r.path, '/storage/v1/object')\n  and r.method = 'GET'\n  and h.cf_cache_status in ('MISS', 'NONE/UNKNOWN', 'EXPIRED', 'BYPASS', 'DYNAMIC')\ngroup by path, search\norder by count desc\nlimit 50;\n```\n\n----------------------------------------\n\nTITLE: Next.js Server Sentry Configuration with Supabase\nDESCRIPTION: Configuration for Sentry in a Next.js application's server environment. Sets up Supabase integration with Node-specific fetch handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Sentry from '@sentry/nextjs'\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { supabaseIntegration } from '@supabase/sentry-js-integration'\n\nSentry.init({\n  dsn: SENTRY_DSN,\n  integrations: [\n    supabaseIntegration(SupabaseClient, Sentry, {\n      tracing: true,\n      breadcrumbs: true,\n      errors: true,\n    }),\n    Sentry.nativeNodeFetchIntegration({\n      breadcrumbs: true,\n      ignoreOutgoingRequests: (url) => {\n        return url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)\n      },\n    }),\n  ],\n  // Adjust this value in production, or use tracesSampler for greater control\n  tracesSampleRate: 1,\n\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\n  debug: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Messages in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'ack' config to true and sends a broadcast message with acknowledgment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst myChannel = supabase.channel('room-3', {\n  config: {\n    broadcast: { ack: true },\n  },\n})\n\nmyChannel.subscribe(async (status) => {\n  if (status !== 'SUBSCRIBED') { return }\n\n  const serverResponse = await myChannel.send({\n    type: 'broadcast',\n    event: 'acknowledge',\n    payload: {},\n  })\n\n  console.log('serverResponse', serverResponse)\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages that End with a Phrase\nDESCRIPTION: This regex pattern uses the $ operator to match only messages that end with a specific phrase. The example matches event messages that end with 'port=12345'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- find only messages that ends with port=12345\nregexp_contains(event_message, '$port=12345')\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Email Template Structure\nDESCRIPTION: Sample HTML template for invite email showing basic structure with confirmation URL variable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <h2>Confirm your signup</h2>\n    <p><a href=\"{{ .ConfirmationURL }}\">Confirm your email</a></p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data Using Kotlin\nDESCRIPTION: Demonstrates Kotlin data classes with Serializable annotation for structured JSON insertion. Includes separate classes for Book and BookMetadata with type-safe properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class BookMetadata(\n    val description: String,\n    val price: Double,\n    val ages: List<Int>\n)\n\n@Serializable\ndata class Book(\n    val title: String,\n    val author: String,\n    val metadata: BookMetadata\n)\n\nval data = supabase.from(\"books\").insert(listOf(\n    Book(\"The Poky Little Puppy\", \"Janette Sebring Lowrey\", BookMetadata(\"Puppy is slower than other, bigger animals.\", 5.95, listOf(3, 6))),\n    Book(\"Tale of Peter Rabbit\", \"Beatrix Potter\", BookMetadata(\"Rabbit eats some vegetables.\", 4.49, listOf(2, 5))),\n    Book(\"Tootle\", \"Gertrude Crampton\", BookMetadata(\"Little toy train has big dreams.\", 3.99, listOf(2, 5))),\n    Book(\"Green Eggs and Ham\", \"Dr. Seuss\", BookMetadata(\"Sam has changing food preferences and eats unusually colored food.\", 7.49, listOf(4, 8))),\n    Book(\"Harry Potter and the Goblet of Fire\", \"J.K. Rowling\", BookMetadata(\"Fourth year of school starts, big drama ensues.\", 24.95, listOf(10, 99)))\n))\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models in Prisma Schema\nDESCRIPTION: Example Prisma schema file with User and Post models that demonstrates relationships between tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Database Setup Partial in MDX\nDESCRIPTION: Shows how to include a reusable partial for database setup instructions in Supabase documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<$Partial path=\"database_setup.mdx\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition for SMS Hook\nDESCRIPTION: Comprehensive JSON schema defining the structure and validation rules for the SMS hook input data, including user and SMS properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"user\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"x-faker\": \"random.uuid\"\n        },\n        \"aud\": {\n          \"type\": \"string\",\n          \"enum\": [\"authenticated\"]\n        },\n        \"role\": {\n          \"type\": \"string\",\n          \"enum\": [\"anon\", \"authenticated\"]\n        },\n        \"email\": {\n          \"type\": \"string\",\n          \"x-faker\": \"internet.email\"\n        },\n        \"phone\": {\n          \"type\": \"string\",\n          \"x-faker\": {\n            \"fake\": \"{{phone.phoneNumber('+1##########')}}\"\n          }\n        },\n        \"phone_confirmed_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"confirmation_sent_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"confirmed_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"phone_change_sent_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"last_sign_in_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"app_metadata\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"provider\": {\n              \"type\": \"string\",\n              \"enum\": [\"phone\"]\n            },\n            \"providers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\",\n                \"enum\": [\"phone\"]\n              }\n            }\n          }\n        },\n        \"user_metadata\": {\n          \"type\": \"object\",\n          \"x-faker\": \"random.objectElement\"\n        },\n        \"identities\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"identity_id\": {\n                \"type\": \"string\",\n                \"x-faker\": \"random.uuid\"\n              },\n              \"id\": {\n                \"type\": \"string\",\n                \"x-faker\": \"random.uuid\"\n              },\n              \"user_id\": {\n                \"type\": \"string\",\n                \"x-faker\": \"random.uuid\"\n              },\n              \"identity_data\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"email_verified\": {\n                    \"type\": \"boolean\",\n                    \"x-faker\": \"random.boolean\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\",\n                    \"x-faker\": {\n                      \"fake\": \"{{phone.phoneNumber('+1##########')}}\"\n                    }\n                  },\n                  \"phone_verified\": {\n                    \"type\": \"boolean\",\n                    \"x-faker\": \"random.boolean\"\n                  },\n                  \"sub\": {\n                    \"type\": \"string\",\n                    \"x-faker\": \"random.uuid\"\n                  }\n                }\n              },\n              \"provider\": {\n                \"type\": \"string\",\n                \"enum\": [\"phone\", \"email\", \"google\"]\n              },\n              \"last_sign_in_at\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"x-faker\": \"date.recent\"\n              },\n              \"created_at\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"x-faker\": \"date.recent\"\n              },\n              \"updated_at\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"x-faker\": \"date.recent\"\n              }\n            },\n            \"required\": [\n              \"identity_id\",\n              \"id\",\n              \"user_id\",\n              \"identity_data\",\n              \"provider\",\n              \"last_sign_in_at\",\n              \"created_at\",\n              \"updated_at\"\n            ]\n          }\n        },\n        \"created_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"updated_at\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"x-faker\": \"date.recent\"\n        },\n        \"is_anonymous\": {\n          \"type\": \"boolean\",\n          \"x-faker\": \"random.boolean\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"aud\",\n        \"role\",\n        \"email\",\n        \"phone\",\n        \"phone_confirmed_at\",\n        \"confirmation_sent_at\",\n        \"confirmed_at\",\n        \"phone_change_sent_at\",\n        \"last_sign_in_at\",\n        \"app_metadata\",\n        \"user_metadata\",\n        \"identities\",\n        \"created_at\",\n        \"updated_at\",\n        \"is_anonymous\"\n      ]\n    },\n    \"sms\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"otp\": {\n          \"type\": \"string\",\n          \"pattern\": \"^[0-9]{6}$\",\n          \"x-faker\": {\n            \"fake\": \"{{helpers.replaceSymbols(######)}}\"\n          }\n        }\n      },\n      \"required\": [\"otp\"]\n    }\n  },\n  \"required\": [\"user\", \"sms\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Completion Scoring Implementation in Rust\nDESCRIPTION: Function that implements scoring logic for autocompletion suggestions based on schema context and node position.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn check_matches_schema(\n  &mut self,\n  ctx: &CompletionContext\n) {\n  let schema_name = match ctx.schema_name.as_ref() {\n    None => return,\n    Some(n) => n,\n  };\n\n  let data_schema = self.get_schema_name();\n\n  if schema_name == data_schema {\n    self.score += 25;\n  } else {\n    self.score -= 10;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Application Component\nDESCRIPTION: Root Vue component that conditionally renders Auth or Account components based on user state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst user = useSupabaseUser()\n</script>\n\n<template>\n  <div class=\"container\" style=\"padding: 50px 0 100px 0\">\n    <Account v-if=\"user\" />\n    <Auth v-else />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing hCaptcha React Package\nDESCRIPTION: Command to install the hCaptcha React component package as a project dependency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hcaptcha/react-hcaptcha\n```\n\n----------------------------------------\n\nTITLE: Stopping Scroll Listener When All Tickets Loaded\nDESCRIPTION: Implements logic to stop listening to the scroll event once all tickets have been loaded, preventing unnecessary requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nif (newTickets.length < PAGE_COUNT) {\n  setIsLast(true)\n}\n\nuseEffect(() => {\n  const handleDebouncedScroll = debounce(() => !isLast && handleScroll(), 200)\n  window.addEventListener('scroll', handleScroll)\n  return () => {\n    window.removeEventListener('scroll', handleScroll)\n  }\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Presence Key in Swift\nDESCRIPTION: This snippet shows how to set a custom presence key while creating a channel in Swift.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet channelC = await supabase.channel(\"test\") {\n  $0.presence.key = \"userId-123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Vector Extension in PostgreSQL\nDESCRIPTION: SQL command to enable the Vector extension in PostgreSQL, which is necessary for using pgvector.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension vector;\n```\n\n----------------------------------------\n\nTITLE: Check Supabase Network Restrictions via CLI\nDESCRIPTION: This command retrieves the currently active network restrictions for a Supabase project using the Supabase CLI. It outputs the allowed IPv4 and IPv6 CIDR ranges and indicates whether restrictions are applied.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/network-restrictions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> supabase network-restrictions --project-ref {ref} get --experimental\nDB Allowed IPv4 CIDRs: &[183.12.1.1/24]\nDB Allowed IPv6 CIDRs: &[2001:db8:3333:4444:5555:6666:7777:8888/64]\nRestrictions applied successfully: true\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from Supabase Schema\nDESCRIPTION: Bash commands to use Supabase CLI for generating TypeScript types based on the linked Supabase project schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase login\nsupabase init\nsupabase link\nsupabase gen types typescript --linked --schema=public > utils/database.types.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote-Specific Settings in TOML\nDESCRIPTION: This snippet shows how to configure settings specific to a staging remote, including project ID and a custom seed script path.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[remotes.staging]\nproject_id = \"your-project-ref\"\n\n[remotes.staging.db.seed]\nsql_paths = [\"./seeds/staging.sql\"]\n```\n\n----------------------------------------\n\nTITLE: Data Loading Script with Supabase Python SDK\nDESCRIPTION: Python script that uses the Supabase SDK and Faker library to generate and insert random vendor and product data into Supabase tables. It creates vendor entries and associates multiple products with each vendor using foreign key relationships.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-15-loading-data-supabase-python.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nfrom dotenv import load_dotenv\nfrom supabase import create_client, Client\nfrom faker import Faker\nimport faker_commerce\n\n\ndef add_entries_to_vendor_table(supabase, vendor_count):\n    fake = Faker()\n    foreign_key_list = []\n    fake.add_provider(faker_commerce.Provider)\n    main_list = []\n    for i in range(vendor_count):\n        value = {'vendor_name': fake.company(), 'total_employees': fake.random_int(40, 169),\n                 'vendor_location': fake.country()}\n\n        main_list.append(value)\n    data = supabase.table('Vendor').insert(main_list).execute()\n    data_json = json.loads(data.json())\n    data_entries = data_json['data']\n    for i in range(len(data_entries)):\n        foreign_key_list.append(int(data_entries[i]['vendor_id']))\n    return foreign_key_list\n\n\ndef add_entries_to_product_table(supabase, vendor_id):\n    fake = Faker()\n    fake.add_provider(faker_commerce.Provider)\n    main_list = []\n    iterator = fake.random_int(1, 15)\n    for i in range(iterator):\n        value = {'vendor_id': vendor_id, 'product_name': fake.ecommerce_name(),\n                 'inventory_count': fake.random_int(1, 100), 'price': fake.random_int(45, 100)}\n        main_list.append(value)\n    data = supabase.table('Product').insert(main_list).execute()\n\n\ndef main():\n    vendor_count = 10\n    load_dotenv()\n    url: str = os.environ.get(\"SUPABASE_URL\")\n    key: str = os.environ.get(\"SUPABASE_KEY\")\n    supabase: Client = create_client(url, key)\n    fk_list = add_entries_to_vendor_table(supabase, vendor_count)\n    for i in range(len(fk_list)):\n        add_entries_to_product_table(supabase, fk_list[i])\n\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup for Supabase\nDESCRIPTION: Instructions for configuring environment variables in a .env file for Supabase integration in a React application. These variables are essential for connecting to the Supabase backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/social-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Viewing Webhook Response in Postgres\nDESCRIPTION: This SQL query retrieves the response details for a specific webhook request from the net._http_response table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n*\nfrom net._http_response\nwhere id = <request_id>\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security\nDESCRIPTION: Enables row level security on the todos table and creates a policy allowing public read access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nalter table \"todos\"\nenable row level security;\n\ncreate policy \"Allow public access\"\n  on todos\n  for select\n  to anon\n  using (true);\n```\n\n----------------------------------------\n\nTITLE: SvelteKit OAuth Callback Handler\nDESCRIPTION: Implementation of OAuth callback handling in SvelteKit, managing code exchange and redirect flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit';\n\nexport const GET = async (event) => {\n\tconst {\n\t\turl,\n\t\tlocals: { supabase }\n\t} = event;\n\tconst code = url.searchParams.get('code') as string;\n\tconst next = url.searchParams.get('next') ?? '/';\n\n  if (code) {\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n    if (!error) {\n      throw redirect(303, `/${next.slice(1)}`);\n    }\n  }\n\n  // return the user to an error page with instructions\n  throw redirect(303, '/auth/auth-code-error');\n};\n```\n\n----------------------------------------\n\nTITLE: SQL Offset Pagination Example\nDESCRIPTION: SQL equivalent of the offset-based pagination showing limit and offset usage\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nselect\n    *\nfrom\n    blog\nlimit\n    2\noffset\n    5\n```\n\n----------------------------------------\n\nTITLE: Rendering the Table in a Next.js Page Component\nDESCRIPTION: Server component implementation that fetches data and renders the DataTable component with the provided columns and data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Payment, columns } from './columns'\nimport { DataTable } from './data-table'\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: '728ed52f',\n      amount: 100,\n      status: 'pending',\n      email: 'm@example.com',\n    },\n    // ...\n  ]\n}\n\nexport default async function DemoPage() {\n  const data = await getData()\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTable columns={columns} data={data} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Links in React\nDESCRIPTION: React JSX code for rendering a grid of resource links. It maps over an array of resource objects to create clickable panels with icons, titles, and descriptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{[\n    {\n      name: 'Supabase CLI',\n      description:\n        'The Supabase CLI provides tools to develop manage your Supabase projects from your local machine.',\n      href: 'https://github.com/supabase/cli',\n    },\n    {\n      name: 'GitHub Action',\n      description: ' A GitHub action for interacting with your Supabase projects using the CLI.',\n      href: 'https://github.com/supabase/setup-cli',\n    },\n  ].map((x) => (\n    <div className=\"col-span-6\" key={x.href}>\n      <Link href={x.href} passHref>\n        <GlassPanel icon={'/docs/img/icons/github-icon'} hasLightIcon={true} title={x.name}>\n          {x.description}\n        </GlassPanel>\n      </Link>\n    </div>\n  ))}\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings\nDESCRIPTION: Processes the dataset in batches to create embeddings for each review, preparing them for insertion into the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Dict, Tuple\nfrom flupy import flu\nimport numpy as np\nfrom tqdm import tqdm\n\n\nbatch_size = 50\n\nrecords: List[Tuple[str, np.ndarray, Dict]] = []\n\n# Iterate over the dataset in chunks\nfor chunk_ix, chunk in tqdm(flu(data['text']).chunk(batch_size).enumerate()):\n\n    # Create embeddings for current chunk\n    embedding_chunk = model.encode(chunk)\n\n    # Enumerate the embeddings and create a record to insert into the database\n    for row_ix, (text, embedding) in enumerate(zip(chunk, embedding_chunk)):\n        record_id = chunk_ix * batch_size + row_ix\n        records.append((f\"{record_id}\", embedding, {\"text\": text}))\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Current User Avatar Component in React\nDESCRIPTION: This snippet demonstrates how to import and render the CurrentUserAvatar component within a React functional component. It displays the avatar of the current user based on Supabase Auth authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/current-user-avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CurrentUserAvatar } from '@/components/current-user-avatar'\n\nconst CurrentUserAvatarDemo = () => {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <CurrentUserAvatar />\n    </Header>\n  )\n}\n\nexport default CurrentUserAvatarDemo\n```\n\n----------------------------------------\n\nTITLE: Setting Query Cost Limits with pg_plan_filter_module\nDESCRIPTION: SQL command to set an upper limit on query execution cost for the authenticator user using the pg_plan_filter_module extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER authenticator SET plan_filter.statement_cost_limit = 1e7;\n```\n\n----------------------------------------\n\nTITLE: Installing TLE using dbdev in SQL\nDESCRIPTION: Demonstrates how to install a Trusted Language Extension named 'langchain-embedding_search' using the dbdev package registry in SQL. This simplified installation process allows developers to easily add extensions to their Postgres databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-pg-tle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect dbdev.install('langchain-embedding_search');\n```\n\n----------------------------------------\n\nTITLE: Adding GitLab Sign-In in Supabase Flutter\nDESCRIPTION: This Flutter snippet demonstrates how to authenticate users via GitLab using Supabase's `signInWithOAuth` method. It supports optional redirect links and launch modes for a more seamless user experience, especially in mobile apps. Prerequisites include the setup of Supabase client and relevant OAuth configurations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signInWithGitLab() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.gitlab,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Directory for Existing Database\nDESCRIPTION: Command to create an initial migration directory for an existing Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init_supabase\n```\n\n----------------------------------------\n\nTITLE: Sending State in Kotlin\nDESCRIPTION: This snippet provides the mechanism to send user status in Kotlin after subscribing to the channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval roomOne = supabase.channel(\"room_01\")\n\nval userStatus = UserStatus( //Your custom class\n    user = \"user-1\",\n    onlineAt = Clock.System.now().toEpochMilliseconds()\n)\n\nroomOne.subscribe(blockUntilSubscribed = true) //You can also use the roomOne.status flow instead, but this parameter will block the coroutine until the status is joined.\n\nroomOne.track(userStatus)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase PostgreSQL using PSQL with SSL verification\nDESCRIPTION: This command connects to a Supabase PostgreSQL database using SSL encryption for security. It specifies the SSL mode as 'verify-full', references the downloaded SSL root certificate, and includes the connection parameters for the pooled connection with session mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/psql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npsql \"sslmode=verify-full sslrootcert=/path/to/prod-supabase.cer host=[CLOUD_PROVIDER]-0-[REGION].pooler.supabase.com dbname=postgres user=postgres.[PROJECT_REF]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In with Supabase in Flutter (Other Platforms)\nDESCRIPTION: This snippet demonstrates how to implement Apple sign-in for Android, Web, Windows, and Linux platforms using Supabase Auth in a Flutter application. It uses the OAuth flow to open a browser window for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOAuth(\n  OAuthProvider.apple,\n  redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n  authScreenLaunchMode:\n      kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n);\n```\n\n----------------------------------------\n\nTITLE: CST Structure Example in Rust\nDESCRIPTION: Example showing the desired CST structure for a simple SELECT statement, demonstrating node hierarchy and token positioning\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nSelectStmt@0..11\n    Select@0..6 \"select\"\n    Whitespace@6..7 \" \"\n    ResTarget@7..10\n      AConst@7..10\n        Sconst@7..10 \"'1'\"\n    Ascii59@10..11 \";\"\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions to Postgres Role in Supabase\nDESCRIPTION: This SQL query grants all permissions on tables, functions, and sequences in the graphql schema to various roles. It's used to resolve permission errors when pulling the database schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on all tables in schema graphql to postgres, anon, authenticated, service_role;\ngrant all on all functions in schema graphql to postgres, anon, authenticated, service_role;\ngrant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;\n```\n\n----------------------------------------\n\nTITLE: Creating Login/Signup Form in Next.js\nDESCRIPTION: This snippet demonstrates how to create a login/signup form using Next.js. It includes input fields for email and password, along with buttons for login and signup actions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { login, signup } from './actions'\n\nexport default function LoginPage() {\n  return (\n    <form>\n      <label htmlFor=\"email\">Email:</label>\n      <input id=\"email\" name=\"email\" type=\"email\" required />\n      <label htmlFor=\"password\">Password:</label>\n      <input id=\"password\" name=\"password\" type=\"password\" required />\n      <button formAction={login}>Log in</button>\n      <button formAction={signup}>Sign up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Hono Application with Supabase\nDESCRIPTION: Command to start the Hono development server after configuring Supabase. This runs the application on http://localhost:5173.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/hono.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt 3 Project\nDESCRIPTION: Commands to create a new Nuxt 3 project and install the Supabase dependency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init nuxt-user-management\n\ncd nuxt-user-management\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Types with Supabase Client\nDESCRIPTION: Demonstrates how to use the generated TypeScript types with the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { Database } from './database.types'\n\nconst supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Testing pg_plan_filter with Successful Query\nDESCRIPTION: Loads the pg_plan_filter extension, sets a cost threshold, and demonstrates a successful query execution since its cost is below the defined threshold.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nload 'plan_filter';\nset plan_filter.statement_cost_limit = 50; -- between 2.49 and 135.0\n\nselect * from book where id = 1;\n id\n----\n  1\n(1 row)\n-- SUCCESS\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres using supabase-js in Edge Functions\nDESCRIPTION: Demonstrates how to connect to a Supabase database using the supabase-js client in an Edge Function. Includes error handling and authentication header forwarding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n\nDeno.serve(async (req) => {\n  try {\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }\n    )\n\n    const { data, error } = await supabase.from('countries').select('*')\n\n    if (error) {\n      throw error\n    }\n\n    return new Response(JSON.stringify({ data }), {\n      headers: { 'Content-Type': 'application/json' },\n      status: 200,\n    })\n  } catch (err) {\n    return new Response(String(err?.message ?? err), { status: 500 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP using Kotlin\nDESCRIPTION: Describes authenticating a user session via OTP verification in Kotlin. Requires essential OTP info like email and token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nsupabase.auth.verifyEmailOtp(type = OtpType.Email.EMAIL, email = \"email\", token = \"151345\")\n```\n\n----------------------------------------\n\nTITLE: Generating Explain Plan Without Index in PostgreSQL\nDESCRIPTION: SQL command to generate an explain plan for a simple query without an index, showing a sequential scan.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nexplain select * from account where id=1;\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Function Signature in pg_net\nDESCRIPTION: Function signature for net.http_post which creates an asynchronous HTTP POST request with a JSON body. This is a SECURITY DEFINER function that returns a request ID reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nnet.http_post(\n    -- url for the request\n    url text,\n    -- body of the POST request\n    body jsonb default '{}'::jsonb,\n    -- key/value pairs to be url encoded and appended to the `url`\n    params jsonb default '{}'::jsonb,\n    -- key/values to be included in request headers\n    headers jsonb default '{\"Content-Type\": \"application/json\"}'::jsonb,\n    -- the maximum number of milliseconds the request may take before being canceled\n    timeout_milliseconds int default 2000\n)\n    -- request_id reference\n    returns bigint\n\n    volatile\n    parallel safe\n    language plpgsql\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres with Vecs in Python\nDESCRIPTION: Demonstrates how to create a client connection to a Postgres database and create a collection of vectors. This establishes the initial connection and sets up a table in the database to store vectors with a specified dimension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n\n# create a collection of vectors with 3 dimensions\ndocs = vx.get_or_create_collection(name=\"docs\", dimension=3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Function-Level Statement Timeout\nDESCRIPTION: Shows how to set a custom statement timeout for a specific PostgreSQL function using the new hoisted settings feature. The timeout is applied per transaction when the function is called.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgrest-12-2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function special_function()\nreturns void as $$\n  select pg_sleep(3); -- simulating some long-running process\n$$\nlanguage sql\nset statement_timeout to '4s';\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Vector Embeddings Table in SQL\nDESCRIPTION: Creates a table that combines both structured and unstructured metadata approaches, using dedicated columns for known fields and a JSONB column for dynamic metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table docs (\n  id uuid primary key,\n  embedding vector(3),\n  content text,\n  url string,\n  meta jsonb\n);\n\ninsert into docs\n  (id, embedding, content, url, meta)\nvalues\n  (\n    '79409372-7556-4ccc-ab8f-5786a6cfa4f7',\n    array[0.1, 0.2, 0.3],\n    'Hello world',\n    '/hello-world',\n    '{\"key\": \"value\"}'\n  );\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Legend-State Observables in React Native\nDESCRIPTION: Demonstrates how to use the 'observer' pattern from Legend-State to fetch and automatically sync changes from Supabase. This component displays a list of todos that updates in realtime when data changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { observer } from '@legendapp/state/react'\nimport { todos$ as _todos$ } from './utils/SupaLegend'\n\nconst Todos = observer(({ todos$ }: { todos$: typeof _todos$ }) => {\n  // Get the todos from the state and subscribe to updates\n  const todos = todos$.get()\n  const renderItem = ({ item: todo }: { item: Tables<'todos'> }) => <Todo todo={todo} />\n  if (todos)\n    return <FlatList data={Object.values(todos)} renderItem={renderItem} style={styles.todos} />\n\n  return <></>\n})\n```\n\n----------------------------------------\n\nTITLE: Creating PostGIS Database Functions for Geo Queries\nDESCRIPTION: These SQL commands create two database functions: 'nearby_stores' to find stores near a given location, and 'stores_in_view' to find stores within a specific geographic bounding box.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function nearby_stores(lat float, long float)\nreturns table (id public.stores.id%TYPE, name public.stores.name%TYPE, description public.stores.description%TYPE, lat float, long float, dist_meters float)\nlanguage sql\nas $$\n  select id, name, description, st_y(location::geometry) as lat, st_x(location::geometry) as long, st_distance(location, st_point(long, lat)::geography) as dist_meters\n  from public.stores\n  order by location <-> st_point(long, lat)::geography;\n$$;\n\n\ncreate or replace function stores_in_view(min_lat float, min_long float, max_lat float, max_long float)\nreturns table (id public.stores.id%TYPE, name public.stores.name%TYPE, lat float, long float)\nlanguage sql\nas $$\n\tselect id, name, ST_Y(location::geometry) as lat, ST_X(location::geometry) as long\n\tfrom public.stores\n\twhere location && ST_SetSRID(ST_MakeBox2D(ST_Point(min_long, min_lat), ST_Point(max_long, max_lat)),4326)\n$$;\n```\n\n----------------------------------------\n\nTITLE: Quivr Tech Stack Configuration\nDESCRIPTION: The core technology stack used by Quivr to build their second brain application, including backend, frontend, database, and AI components\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_customers/quivr.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Backend: Fast API + Langchain, hosted on AWS Fargate\n- Frontend: Next.js, hosted on Vercel\n- Database: Supabase Vector, using pgvector\n- LLM: OpenAI, Anthropic, Nomic\n- Semantic search using GPT For ALL, Anthropic, and OpenAI\n- Auth: Supabase Auth\n```\n\n----------------------------------------\n\nTITLE: Signing In with Azure in Supabase (JavaScript)\nDESCRIPTION: This snippet demonstrates how to sign in users using Azure OAuth in a Supabase application. It requires the `@supabase/supabase-js` package to be installed. The `signInWithOAuth` method is called with 'azure' as the provider and requests the email scope.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signInWithAzure() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'azure',\n    options: {\n      scopes: 'email',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Execution Plan in PostgreSQL\nDESCRIPTION: Using EXPLAIN command to analyze query execution plan for performance optimization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nexplain select * from customers where sign_up_date > 25;\n```\n\n----------------------------------------\n\nTITLE: Creating Main Application Component with Session Management\nDESCRIPTION: Main SolidJS component that manages authentication state and conditionally renders either the Auth or Account component based on session status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component, createEffect, createSignal } from 'solid-js'\nimport { supabase } from './supabaseClient'\nimport { AuthSession } from '@supabase/supabase-js'\nimport Account from './Account'\nimport Auth from './Auth'\n\nconst App: Component = () => {\n  const [session, setSession] = createSignal<AuthSession | null>(null)\n\n  createEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n    })\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n  })\n\n  return (\n    <div class=\"container\" style={{ padding: '50px 0 100px 0' }}>\n      {!session() ? <Auth /> : <Account session={session()!} />}\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Setting Long Query Timeout in PostgreSQL\nDESCRIPTION: SQL command to set a long query timeout of 120 minutes for the current session in PostgreSQL, allowing for extended execution time of complex queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/avoiding-timeouts-in-long-running-queries-6nmbdN.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nset statement_timeout = '120min';\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Function Timeout in Supabase Python Client\nDESCRIPTION: This example demonstrates how to set a custom timeout for Edge Functions using the Supabase Python client. It creates a client with a 15-second function timeout and invokes a function named 'hello'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-python-support.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom supabase import create_client\nfrom supabase.lib.client_options import ClientOptions\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n\noptions = ClientOptions(function_client_timeout = 15)\nclient = create_client(url, key, options)\n\nclient.functions.url = \"http://127.0.0.1:54321/functions/v1/hello-world\"\nprint(client.functions.invoke(\"hello\"))\n\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Server with Deno in Edge Functions\nDESCRIPTION: A basic example of setting up a WebSocket server using Deno's native WebSocket API. This code handles the WebSocket upgrade, manages connection events (open, message, error, close), and responds to client messages by sending back the current timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve((req) => {\n  const upgrade = req.headers.get('upgrade') || ''\n\n  if (upgrade.toLowerCase() != 'WebSocket') {\n    return new Response(\"request isn't trying to upgrade to WebSocket.\", { status: 400 })\n  }\n\n  const { socket, response } = Deno.upgradeWebSocket(req)\n\n  socket.onopen = () => console.log('socket opened')\n  socket.onmessage = (e) => {\n    console.log('socket message:', e.data)\n    socket.send(new Date().toString())\n  }\n\n  socket.onerror = (e) => console.log('socket errored:', e.message)\n  socket.onclose = () => console.log('socket closed')\n\n  return response\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Developer Group\nDESCRIPTION: Shows creation of developers group and granting privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> create role developers nologin;\nCREATE ROLE\npostgres=> grant create on schema public to developers;\nGRANT\npostgres=> grant developers to junior_dev;\nGRANT ROLE\npostgres=> grant developers to senior_dev;\nGRANT ROLE\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Menu with Custom Commands in React\nDESCRIPTION: This code demonstrates how to set up a Command Menu with custom action and route commands, including a trigger button and the main menu structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/commandmenu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Commands() {\n  useRegisterCommands('Action commands', [\n    {\n      id: 'alert',\n      name: 'Alert',\n      action: () => alert('You triggered a command'),\n    },\n  ])\n  useRegisterCommands('Route commands', [\n    {\n      id: 'supabase-website',\n      name: 'Go to Supabase website',\n      route: 'https://supabase.com',\n    },\n  ])\n\n  return null\n}\n\nfunction CommandMenuTrigger() {\n  return (\n    <CommandMenuTriggerPrimitive>\n      <Button>Open command menu</Button>\n    </CommandMenuTriggerPrimitive>\n  )\n}\n\nexport default function CommandMenuDemo() {\n  return (\n    <CommandProvider openKey=\"j\">\n      <Commands />\n      <CommandMenu trigger={<CommandMenuTrigger />}>\n        <CommandInput />\n        <CommandList />\n      </CommandMenu>\n    </CommandProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Component\nDESCRIPTION: React component that handles user authentication using Supabase magic link login.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { supabase } from './supabaseClient'\n\nexport default function Auth() {\n  const [loading, setLoading] = useState(false)\n  const [email, setEmail] = useState('')\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n\n    setLoading(true)\n    const { error } = await supabase.auth.signInWithOtp({ email })\n\n    if (error) {\n      alert(error.error_description || error.message)\n    } else {\n      alert('Check your email for the login link!')\n    }\n    setLoading(false)\n  }\n\n  return (\n    <div className=\"row flex flex-center\">\n      <div className=\"col-6 form-widget\">\n        <h1 className=\"header\">Supabase + React</h1>\n        <p className=\"description\">Sign in via magic link with your email below</p>\n        <form className=\"form-widget\" onSubmit={handleLogin}>\n          <div>\n            <input\n              className=\"inputField\"\n              type=\"email\"\n              placeholder=\"Your email\"\n              value={email}\n              required={true}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div>\n            <button className={'button block'} disabled={loading}>\n              {loading ? <span>Loading</span> : <span>Send magic link</span>}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Querying Tables with Multiple Foreign Keys in Python\nDESCRIPTION: Python example showing how to query shifts with explicit join definitions for multiple foreign keys to the same table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.from_('shifts').select(\"\"\"\n  *,\n  start_scan:scans!scan_id_start (\n    id,\n    user_id,\n    badge_scan_time\n  ),\n  end_scan:scans!scan_id_end (\n    id,\n    user_id,\n    badge_scan_time\n  )\n\"\"\").execute()\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with JSONB Column in Supabase\nDESCRIPTION: SQL command to create a table in Supabase with a JSONB column to store raw Fauna documents. This allows preserving the original document structure while migrating.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table fauna_users_raw (\n  id uuid primary key default gen_random_uuid(),\n  data jsonb not null\n);\n```\n\n----------------------------------------\n\nTITLE: Quote Identifier Function for SQL Injection Prevention\nDESCRIPTION: Rust function that safely quotes identifiers to prevent SQL injection attacks\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn quote_ident(ident: &str) -> String {\n    format!(\"\\\"{}\\\"\", ident.replace(\"\\\"\", \"\\\"\\\"\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase with Simplified Auth State Management\nDESCRIPTION: Shows the simplified initialization process in version 1.0 which automatically handles auth state persistence without requiring SupabaseAuthState classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n...\n\nclass AuthState<T extends StatefulWidget> extends SupabaseAuthState<T> {\n  ...\n}\n\n// After\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Out in JavaScript using Supabase\nDESCRIPTION: Demonstrates logging out a user using the Supabase JS client by calling the signOut() function to remove the session and clear relevant storage. This snippet requires a Supabase client instance created with project URL and anon key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Data in Fauna using FQL\nDESCRIPTION: Example of querying user data from Fauna using Fauna Query Language (FQL). This demonstrates how to fetch name and email fields from a users collection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Client, fql } from 'fauna'\n\nconst client = new Client({ secret: '<your-fauna-secret>' })\n\nconst usersQuery = fql`\n  users.all() {\n    name,\n    email\n  }\n`\n\nclient\n  .query(usersQuery)\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error fetching users:', error))\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Google Maps and Location Permissions\nDESCRIPTION: These XML snippets add the Google Maps API key and required permissions to the Android manifest file for an Ionic Capacitor app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"YOUR_API_KEY_HERE\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Client Utility Function\nDESCRIPTION: Implementation of a utility function to create a browser-side Supabase client using the createBrowserClient function from the SSR package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/supabase/client.ts\n\nimport { createBrowserClient } from '@supabase/ssr';\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random API Requests with Autocannon in JavaScript\nDESCRIPTION: Script that generates randomized API requests for benchmarking post view tracking. Distributes requests across three operations: viewing posts (30%), getting view counts (60%), and retrieving viewer lists (10%). Uses environment variables for configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst process = require('process')\n\nconst POST_COUNT = process.env.TEST_POST_COUNT\n  ? parseInt(process.env.TEST_POST_COUNT, 10)\n  : undefined\nconst USER_COUNT = process.env.TEST_USER_COUNT\n  ? parseInt(process.env.TEST_USER_COUNT, 10)\n  : undefined\n\n/**\n * Request setup function for use with autocannon\n *\n * @param {Request} request\n * @returns {Request}\n */\nfunction setupRequest(request) {\n  // ENsure we have counts to go off of\n  if (!POST_COUNT || !USER_COUNT) {\n    throw new Error('Cannot setup request without valid post/user count!')\n  }\n\n  // Pick a random post to do an operation on\n  const postId = Math.floor(Math.random() * POST_COUNT)\n\n  // Choose pseudo-randomly whether to register a seen by or read seenby status\n  const operationChoice = Math.floor(Math.random() * 10)\n  if (operationChoice < 1) {\n    // 10% of the time, get *all* the users\n    request.method = 'GET'\n    request.path = `/posts/${postId}/seen-by/users`\n  } else if (operationChoice < 7) {\n    // 60% of the time, get the count of seenby on a post\n    request.method = 'GET'\n    request.path = `/posts/${postId}/seen-by/count`\n  } else {\n    // 30% of the time, add a new seen-by entry\n    const userId = Math.floor(Math.random() * USER_COUNT)\n\n    // Most of the time we'll be *setting* seen-by\n    // And we'll get the count (so we can show it) later as well\n    request.method = 'POST'\n    request.path = `/posts/${postId}/seen-by/${userId}`\n  }\n\n  return request\n}\n\nmodule.exports = setupRequest\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Identity with Dart\nDESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Dart client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.linkIdentity(OAuthProvider.google);\n```\n\n----------------------------------------\n\nTITLE: Finding All Errors in Supabase Edge Logs (SQL)\nDESCRIPTION: This query selects error logs from the edge_logs table, focusing on the Database API. It filters for status codes 400 and above, and includes timestamp, status code, event message, and path information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(timestamp as datetime) as timestamp,\n  status_code,\n  event_message,\n  path\nfrom\n  edge_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(response) as response\n  cross join unnest(request) as request\nwhere\n  -- find all errors\n  status_code >= 400\n  and regexp_contains(path, '^/rest/v1/');\n-- only look at DB API\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Client with Access Keys in JavaScript\nDESCRIPTION: This snippet shows how to initialize an S3 client using the AWS SDK for JavaScript, authenticating with S3 access keys. It requires the `@aws-sdk/client-s3` package. Replace `project_region`, `project_ref`, `your_access_key_id`, and `your_secret_access_key` with your actual Supabase project credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/s3/authentication.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { S3Client } from '@aws-sdk/client-s3';\n\n        const client = new S3Client({\n          forcePathStyle: true,\n          region: 'project_region',\n          endpoint: 'https://project_ref.supabase.co/storage/v1/s3',\n          credentials: {\n            accessKeyId: 'your_access_key_id',\n            secretAccessKey: 'your_secret_access_key',\n          }\n        })\n```\n\n----------------------------------------\n\nTITLE: Summing Values from JSONB Arrays Using Common Table Expressions in PostgreSQL\nDESCRIPTION: Demonstrates the correct approach to aggregate data from JSONB arrays using a Common Table Expression (CTE). This query first flattens the JSONB array data into a tabular form, then applies the sum aggregate function to calculate total calories per day.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nwith data as\n(\n  select\n    date,\n    (jsonb_array_elements(food_log)->'calories')::integer as calories\n  from calendar\n  where user_id = 'xyz'\n    and date between '2022-01-01' and '2022-01-31'\n)\nselect date, sum(calories)\nfrom data\ngroup by date;\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Location Updates with React and MapLibre\nDESCRIPTION: React component that subscribes to Supabase Realtime updates and renders location markers on a MapLibre GL JS map. Uses react-map-gl for map integration and handles real-time location updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-04-postgres-realtime-location-sharing-with-maplibre.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page({ params }: { params: { event: string } }) {\n  const supabase = createClient<Database>()\n  const [locations, setLocations] = useState<{\n    [key: string]: Tables<'locations'>\n  } | null>(null)\n  const locationsRef = useRef<{\n    [key: string]: Tables<'locations'>\n  } | null>()\n  locationsRef.current = locations\n\n  useEffect(() => {\n    // Listen to realtime updates\n    const subs = supabase\n      .channel('schema-db-changes')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT', // Listen only to INSERTs\n          schema: 'public',\n          table: 'locations',\n          filter: `event_id=eq.${params.event}`,\n        },\n        (payload) => {\n          const loc = payload.new as Tables<'locations'>\n          const updated = {\n            ...locationsRef.current,\n            [loc.user_id.toString()]: loc,\n          }\n\n          setLocations(updated)\n        }\n      )\n      .subscribe()\n    console.log('Subscribed')\n\n    return () => {\n      subs.unsubscribe()\n    }\n  }, [])\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Map\n  className=\"map\"\n  cooperativeGestures={true}\n  initialViewState={{\n    longitude: 103.852713,\n    latitude: 1.285727,\n    zoom: 13,\n  }}\n  mapStyle={{\n    version: 8,\n    glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',\n    sources: {\n      protomaps: {\n        attribution:\n          '<a href=\"https://github.com/protomaps/basemaps\">Protomaps</a> © <a href=\"https://openstreetmap.org\">OpenStreetMap</a>',\n        type: 'vector',\n        url: 'pmtiles://https://<project_ref>.supabase.co/functions/v1/maps-private/my_area.pmtiles',\n      },\n    },\n    transition: {\n      duration: 0,\n    },\n    // @ts-ignore\n    layers: layers('protomaps', 'light'),\n  }}\n  // @ts-ignore\n  mapLib={maplibregl}\n>\n  {Object.entries(locations).map(([key, value]) => (\n    <Marker key={key} longitude={value.long} latitude={value.lat} color=\"red\" />\n  ))}\n</Map>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Size for Foreign Server in Postgres\nDESCRIPTION: SQL command to set the fetch_size option for a foreign server, which determines the maximum number of rows fetched per operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nalter server \"<foreign_server_name>\"\noptions (fetch_size '10000');\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter Details Page with Vector Similarity Search\nDESCRIPTION: This code implements the DetailsPage widget that displays detailed information about a selected film and recommends similar films based on vector similarity. It calls the 'get_related_film' Supabase RPC function to retrieve films with similar embeddings and displays them in a responsive grid layout.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:filmsearch/components/film_cell.dart';\nimport 'package:filmsearch/main.dart';\nimport 'package:filmsearch/models/film.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\n\nclass DetailsPage extends StatefulWidget {\n  const DetailsPage({super.key, required this.film});\n\n  final Film film;\n\n  @override\n  State<DetailsPage> createState() => _DetailsPageState();\n}\n\nclass _DetailsPageState extends State<DetailsPage> {\n  late final Future<List<Film>> relatedFilmsFuture;\n\n  @override\n  void initState() {\n    super.initState();\n\n\t\t// Create a future that calls the get_related_film function to query\n\t\t// related movies.\n    relatedFilmsFuture = supabase.rpc('get_related_film', params: {\n      'embedding': widget.film.embedding,\n      'film_id': widget.film.id,\n    }).withConverter<List<Film>>((data) =>\n        List<Map<String, dynamic>>.from(data).map(Film.fromJson).toList());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.film.title),\n      ),\n      body: ListView(\n        children: [\n          Hero(\n            tag: widget.film.imageUrl,\n            child: Image.network(widget.film.imageUrl),\n          ),\n          Padding(\n            padding: const EdgeInsets.all(8.0),\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.stretch,\n              children: [\n                Text(\n                  DateFormat.yMMMd().format(widget.film.releaseDate),\n                  style: const TextStyle(color: Colors.grey),\n                ),\n                const SizedBox(height: 8),\n                Text(\n                  widget.film.overview,\n                  style: const TextStyle(fontSize: 16),\n                ),\n                const SizedBox(height: 24),\n                const Text(\n                  'You might also like:',\n                  style: TextStyle(\n                    fontSize: 16,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n              ],\n            ),\n          ),\n\t\t\t\t\t// Display the list of related movies\n          FutureBuilder<List<Film>>(\n              future: relatedFilmsFuture,\n              builder: (context, snapshot) {\n                if (snapshot.hasError) {\n                  return Center(\n                    child: Text(snapshot.error.toString()),\n                  );\n                }\n                if (!snapshot.hasData) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n                final films = snapshot.data!;\n                return Wrap(\n                  children: films\n                      .map((film) => InkWell(\n                            onTap: () {\n                              Navigator.of(context).push(MaterialPageRoute(\n                                  builder: (context) =>\n                                      DetailsPage(film: film)));\n                            },\n                            child: FractionallySizedBox(\n                              widthFactor: 0.5,\n                              child: FilmCell(\n                                film: film,\n                                isHeroEnabled: false,\n                                fontSize: 16,\n                              ),\n                            ),\n                          ))\n                      .toList(),\n                );\n              }),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Astro for Supabase Auth\nDESCRIPTION: Implementation of an Astro API route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens using the Supabase SSR client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createServerClient, parseCookieHeader } from '@supabase/ssr'\nimport { type EmailOtpType } from '@supabase/supabase-js'\nimport { type APIRoute } from 'astro'\n\nexport const GET: APIRoute = async ({ request, cookies, redirect }) => {\n  const requestUrl = new URL(request.url)\n  const token_hash = requestUrl.searchParams.get('token_hash')\n  const type = requestUrl.searchParams.get('type') as EmailOtpType | null\n  const next = requestUrl.searchParams.get('next') || '/'\n\n  if (token_hash && type) {\n    const supabase = createServerClient(\n      import.meta.env.PUBLIC_SUPABASE_URL,\n      import.meta.env.PUBLIC_SUPABASE_ANON_KEY,\n      {\n        cookies: {\n          getAll() {\n            return parseCookieHeader(request.headers.get('Cookie') ?? '')\n          },\n          setAll(cookiesToSet) {\n            cookiesToSet.forEach(({ name, value, options }) => cookies.set(name, value, options))\n          },\n        },\n      }\n    )\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n\n    if (!error) {\n      return redirect(next)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  return redirect('/auth/auth-code-error')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client Auth Settings in Kotlin\nDESCRIPTION: Kotlin code to configure the authentication settings in the Supabase client, specifying the scheme and host for deep linking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ninstall(Auth) {\n   host = \"login-callback\"\n   scheme = \"io.supabase.user-management\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with AWS Cognito in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to set up a Supabase client using AWS Amplify's Cognito authentication. Key dependencies include 'aws-amplify/auth'. The snippet demonstrates fetching the Cognito access token and updating the Supabase client, including setting up a listener for authentication changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchAuthSession, Hub } from 'aws-amplify/auth'\n\nconst supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n  accessToken: async () => {\n    const tokens = await fetchAuthSession()\n\n    // Alternatively you can use tokens?.idToken instead.\n    return tokens?.accessToken\n  },\n})\n\n// if you're using Realtime you also need to set up a listener for Cognito auth changes\nHub.listen('auth', () => {\n  fetchAuthSession().then((tokens) => supabase.realtime.setAuth(tokens?.accessToken))\n})\n```\n\n----------------------------------------\n\nTITLE: Using SQL to Call List Objects Function\nDESCRIPTION: Demonstrates executing the `list_objects` function using raw SQL. This requires a Supabase database connection and is primarily used for querying the database directly. It inputs the bucket identifier and pagination parameters for retrieving object listings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/production/scaling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from list_objects('bucket_id', '', 100, 0);\n```\n\n----------------------------------------\n\nTITLE: Batch Archiving Messages in PGMQ with SQL\nDESCRIPTION: The batch archive function deletes multiple messages from a specified queue and inserts them into the queue's archive. It takes queue name and an array of message IDs as parameters and returns an array of successfully archived message IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.archive('my_queue', array[1, 2]);\n archive\n---------\n       1\n       2\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.archive('my_queue', array[4, 999]);\n archive\n---------\n       4\n```\n\n----------------------------------------\n\nTITLE: React Component Template in TypeScript\nDESCRIPTION: A basic template for creating React components in TypeScript with properly typed props. Shows the recommended structure including interface declaration for props and export pattern.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/components/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Declare the prop types of your component\ninterface ComponentAProps {\n  sampleProp: string\n}\n\n// Name your component accordingly\nconst ComponentA = ({ sampleProp }: ComponentAProps) => {\n  return <div>ComponentA: {sampleProp}</div>\n}\n\nexport default ComponentA\n```\n\n----------------------------------------\n\nTITLE: Implementing Task API with Route Parameters in Oak Framework\nDESCRIPTION: An Oak framework implementation for a task management API. This code sets up a router with endpoints for managing tasks, demonstrating how to access route parameters through ctx.params and handle various HTTP methods with appropriate responses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application } from \"jsr:@oak/oak/application\";\nimport { Router } from \"jsr:@oak/oak/router\";\n\nconst router = new Router();\n\nlet tasks: { [id: string]: any } = {};\n\nrouter\n  .get(\"/tasks\", (ctx) => {\n    ctx.response.body = Object.values(tasks);\n  })\n  .post(\"/tasks\", async (ctx) => {\n    const body = ctx.request.body();\n    const { name } = await body.value;\n    const id = Math.random().toString(36).substring(7);\n    tasks[id] = { id, name };\n    ctx.response.body = tasks[id];\n  })\n  .get(\"/tasks/:id\", (ctx) => {\n    const id = ctx.params.id;\n    const task = tasks[id];\n    if (task) {\n      ctx.response.body = task;\n    } else {\n      ctx.response.status = 404;\n      ctx.response.body = 'Task not found';\n    }\n  })\n  .patch(\"/tasks/:id\", async (ctx) => {\n    const id = ctx.params.id;\n    const body = ctx.request.body();\n    const updates = await body.value;\n    const task = tasks[id];\n    if (task) {\n      tasks[id] = { ...task, ...updates };\n      ctx.response.body = tasks[id];\n    } else {\n      ctx.response.status = 404;\n      ctx.response.body = 'Task not found';\n    }\n  })\n  .delete(\"/tasks/:id\", (ctx) => {\n    const id = ctx.params.id;\n    if (tasks[id]) {\n      delete tasks[id];\n      ctx.response.body = 'Task deleted successfully';\n    } else {\n      ctx.response.status = 404;\n      ctx.response.body = 'Task not found';\n    }\n  });\n\n\nconst app = new Application();\napp.use(router.routes());\napp.use(router.allowedMethods());\n\napp.listen({ port: 3000 });\n```\n\n----------------------------------------\n\nTITLE: Creating a View for Monitoring Blocked Transactions in Postgres\nDESCRIPTION: This SQL script creates a view named 'lock_monitor' that helps in monitoring currently blocked database transactions during the ALTER TABLE process. It provides detailed information about locked items, waiting duration, and the queries involved.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/slow-execution-of-alter-table-on-large-table-when-changing-column-type-qmZRpZ.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate view  public.lock_monitor as\nselect\n  coalesce(\n    blockingl.relation::regclass::text,\n    blockingl.locktype\n  ) as locked_item,\n  now() - blockeda.query_start as waiting_duration,\n  blockeda.pid as blocked_pid,\n  blockeda.query as blocked_query,\n  blockedl.mode as blocked_mode,\n  blockinga.pid as blocking_pid,\n  blockinga.query as blocking_query,\n  blockingl.mode as blocking_mode\nfrom\n  pg_locks blockedl\n  join pg_stat_activity blockeda on blockedl.pid = blockeda.pid\n  join pg_locks blockingl on (\n    blockingl.transactionid = blockedl.transactionid\n    or blockingl.relation = blockedl.relation\n    and blockingl.locktype = blockedl.locktype\n  )\n  and blockedl.pid <> blockingl.pid\n  join pg_stat_activity blockinga on blockingl.pid = blockinga.pid\n  and blockinga.datid = blockeda.datid\nwhere\n  not blockedl.granted\n  and blockinga.datname = current_database();\n```\n\n----------------------------------------\n\nTITLE: Creating Signed URL for Transformed Image in JavaScript\nDESCRIPTION: This snippet shows how to create a signed URL for a transformed image in a private bucket using the Supabase JavaScript client, specifying expiration time and transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nsupabase.storage.from('bucket').createSignedUrl('image.jpg', 60000, {\n  transform: {\n    width: 200,\n    height: 200,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Range Partitioned Sales Table in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to create a range partitioned table for sales data based on order date. It creates a parent table and two monthly partitions for January and February 2000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table sales (\n    id bigint generated by default as identity,\n    order_date date not null,\n    customer_id bigint,\n    amount bigint,\n\n    -- We need to include all the\n    -- partitioning columns in constraints:\n    primary key (order_date, id)\n)\npartition by range (order_date);\n\ncreate table sales_2000_01\n\tpartition of sales\n  for values from ('2000-01-01') to ('2000-02-01');\n\ncreate table sales_2000_02\n\tpartition of sales\n\tfor values from ('2000-02-01') to ('2000-03-01');\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Column Headers with TanStack Table in React\nDESCRIPTION: Makes the email column header sortable by adding a button with toggling functionality. The column definition includes a custom header rendering with sort toggle controls and visual indicators.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { ColumnDef } from '@tanstack/react-table'\nimport { ArrowUpDown, MoreHorizontal } from 'lucide-react'\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: 'email',\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Send Messages in Dart\nDESCRIPTION: This Dart snippet shows how to set up a Supabase Realtime channel to receive its own broadcast messages. It configures the 'self' parameter, sets up event handling, and sends a broadcast message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal myChannel = supabase.channel(\n  'room-2',\n  opts: const RealtimeChannelConfig(\n    self: true,\n  ),\n);\n\nmyChannel.onBroadcast(\n  event: 'test-my-messages',\n  callback: (payload) => print(payload),\n);\n\nmyChannel.subscribe((status, error) {\n  if (status != RealtimeSubscribeStatus.subscribed) return;\n  // channelC.send({\n  myChannel.sendBroadcastMessage(\n    event: 'test-my-messages',\n    payload: {'message': 'talking to myself'},\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling SSL enforcement with Supabase CLI\nDESCRIPTION: Command to disable SSL enforcement on your Supabase project database using the CLI. This allows clients to connect without SSL for maximum compatibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase ssl-enforcement --project-ref {ref} update --disable-db-ssl-enforcement --experimental\n```\n\n----------------------------------------\n\nTITLE: Signing Out Users in Supabase JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to log out users and clear session data using the `signOut` method in a Supabase environment. The client must be pre-configured with project-specific details. It is a straightforward logout operation removing the authentication token from the session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Table with RLS in PostgreSQL\nDESCRIPTION: Sets up a todos table with Row Level Security enabled and creates a policy to restrict access to authenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a simple todos table\ncreate table todos (\nid uuid primary key default gen_random_uuid(),\ntask text not null,\nuser_id uuid references auth.users not null,\ncompleted boolean default false\n);\n\n-- Enable RLS\nalter table todos enable row level security;\n\n-- Create a policy\ncreate policy \"Users can only access their own todos\"\non todos for all -- this policy applies to all operations\nto authenticated\nusing ((select auth.uid()) = user_id);\n```\n\n----------------------------------------\n\nTITLE: Importing Tree View Components\nDESCRIPTION: Basic imports required for using the tree view component from UI library and react-accessible-treeview.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tree-view.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TreeView, TreeViewItem } from 'ui'\nimport { flattenTree } from 'react-accessible-treeview'\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth Sign In with Apple using Supabase\nDESCRIPTION: Code to initiate Sign in with Apple OAuth flow using the Supabase JavaScript client. This creates a client instance and triggers the Apple authentication process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\nsupabase.auth.signInWithOAuth({\n  provider: 'apple',\n})\n```\n\n----------------------------------------\n\nTITLE: Supavisor Transaction Mode Connection String\nDESCRIPTION: Example of a Supavisor connection string in transaction mode using port 6543. Always uses IPv4 address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ipv4-address.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npostgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Selection in Flutter Uber Clone\nDESCRIPTION: This snippet defines the _confirmLocation method, which is called when the user confirms their destination. It invokes a Supabase Edge Function to get route information, draws a polyline on the map, and updates the app state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _confirmLocation() async {\n    if (_selectedDestination != null && _currentLocation != null) {\n      try {\n        final response = await supabase.functions.invoke(\n          'route',\n          body: {\n            'origin': {\n              'latitude': _currentLocation!.latitude,\n              'longitude': _currentLocation!.longitude,\n            },\n            'destination': {\n              'latitude': _selectedDestination!.latitude,\n              'longitude': _selectedDestination!.longitude,\n            },\n          },\n        );\n\n        final data = response.data as Map<String, dynamic>;\n        final coordinates = data['legs'][0]['polyline']['geoJsonLinestring']\n            ['coordinates'] as List<dynamic>;\n        final duration = parseDuration(data['duration'] as String);\n        _fare = ((duration.inMinutes * 40)).ceil();\n\n        final List<LatLng> polylineCoordinates = coordinates.map((coord) {\n          return LatLng(coord[1], coord[0]);\n        }).toList();\n\n        setState(() {\n          _polylines.add(Polyline(\n            polylineId: const PolylineId('route'),\n            points: polylineCoordinates,\n            color: Colors.black,\n            width: 5,\n          ));\n\n          _markers.add(Marker(\n            markerId: const MarkerId('destination'),\n            position: _selectedDestination!,\n            icon: _pinIcon ??\n                BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n          ));\n        });\n\n        LatLngBounds bounds = LatLngBounds(\n          southwest: LatLng(\n            polylineCoordinates\n                .map((e) => e.latitude)\n                .reduce((a, b) => a < b ? a : b),\n            polylineCoordinates\n                .map((e) => e.longitude)\n                .reduce((a, b) => a < b ? a : b),\n          ),\n          northeast: LatLng(\n            polylineCoordinates\n                .map((e) => e.latitude)\n                .reduce((a, b) => a > b ? a : b),\n            polylineCoordinates\n                .map((e) => e.longitude)\n                .reduce((a, b) => a > b ? a : b),\n          ),\n        );\n        _mapController?.animateCamera(CameraUpdate.newLatLngBounds(bounds, 50));\n        _goToNextState();\n      } catch (e) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(content: Text('Error: ${e.toString()}')),\n          );\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Referencing k6 Load Generator Script for Subscription Testing\nDESCRIPTION: This code snippet references a k6 script used for testing the subscription functionality of the Realtime service. It's part of the manual testing setup for generating load against the system under test.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-21-automating-performance-tests.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Reference to: https://github.com/supabase/benchmarks/blob/main/examples/realtime/replication/terraform/k6/subs.js\n```\n\n----------------------------------------\n\nTITLE: Calculating Safe Memory-Based Connection Limit\nDESCRIPTION: SQL query to calculate the theoretical maximum connection limit based on available server memory and PostgreSQL configuration parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-change-max-database-connections-_BQ8P5.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  '(SERVER MEMORY - ' || current_setting('shared_buffers') || ' - (' || current_setting('autovacuum_max_workers') || ' * ' || current_setting('maintenance_work_mem') || ')) / ' || current_setting('work_mem');\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Type for Uploads in Supabase Storage with Dart\nDESCRIPTION: This code shows how to specify the content type when uploading a file to Supabase Storage using Dart. It uses the 'contentType' option in FileOptions to set the MIME type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.storage.from('bucket_name').upload(\n      'file_path',\n      file,\n      fileOptions: const FileOptions(contentType: 'image/jpeg'),\n    );\n```\n\n----------------------------------------\n\nTITLE: Comparing Supabase and Postgres Client Usage in JavaScript\nDESCRIPTION: Demonstrates the parallel usage patterns between the Supabase client library and the direct Postgres client library, showing how Supabase-js wraps the underlying postgres-js functionality while maintaining similar syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-15-client-libraries-v2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// supabase-js\nconst supabase = createClient('SUPABASE_URL', 'SUPABASE_KEY')\nconst { data } = supabase.from('countries').select('id, name')\n\n// postgres-js\nconst postgrest = new PostgrestClient('POSTGREST_URL')\nconst { data } = postgrest.from('countries').select('id, name')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Role for Prisma in PostgreSQL\nDESCRIPTION: SQL commands to create a new user role for Prisma with specific permissions, enhancing security and observability.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate user \"prisma\" with password 'secret_password' bypassrls createdb;\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in a Server Component for Sidebar\nDESCRIPTION: Demonstrates an async server component that fetches project data and renders it in a SidebarMenu structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nasync function NavProjects() {\n  const projects = await fetchProjects()\n\n  return (\n    <SidebarMenu>\n      {projects.map((project) => (\n        <SidebarMenuItem key={project.name}>\n          <SidebarMenuButton asChild>\n            <a href={project.url}>\n              <project.icon />\n              <span>{project.name}</span>\n            </a>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      ))}\n    </SidebarMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Bucket in Supabase\nDESCRIPTION: TOML configuration for setting up a storage bucket in Supabase with specific file limitations and mime types for audio files.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[storage.buckets.audio]\npublic = false\nfile_size_limit = \"50MiB\"\nallowed_mime_types = [\"audio/mp3\"]\nobjects_path = \"./audio\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Postgres Logs by Error Severity in SQL\nDESCRIPTION: SQL WHERE clause to find all error events with severe impact levels (ERROR, FATAL, PANIC) in the postgres_logs table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- find error events\n... query\nwhere\n  parsed.error_severity in ('ERROR', 'FATAL', 'PANIC')\n```\n\n----------------------------------------\n\nTITLE: Adding SAML Connection with Metadata URL (Supabase CLI)\nDESCRIPTION: This command adds a SAML 2.0 Identity Provider connection to Supabase Auth using the Supabase CLI. It requires a project reference and a metadata URL pointing to the SAML 2.0 metadata XML file, and optionally specifies the email domains associated with the organization's IdP. The command registers a new identity provider with the project's Auth server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase sso add --type saml --project-ref <your-project> \\\n  --metadata-url 'https://company.com/idp/saml/metadata' \\\n  --domains company.com\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Management Component in Angular\nDESCRIPTION: Creating an AccountComponent to handle user profile management, including updating profile details and signing out.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input, OnInit } from '@angular/core'\nimport { FormBuilder } from '@angular/forms'\nimport { AuthSession } from '@supabase/supabase-js'\nimport { Profile, SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css'],\n})\nexport class AccountComponent implements OnInit {\n  loading = false\n  profile!: Profile\n\n  @Input()\n  session!: AuthSession\n\n  updateProfileForm = this.formBuilder.group({\n    username: '',\n    website: '',\n    avatar_url: '',\n  })\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    await this.getProfile()\n\n    const { username, website, avatar_url } = this.profile\n    this.updateProfileForm.patchValue({\n      username,\n      website,\n      avatar_url,\n    })\n  }\n\n  async getProfile() {\n    try {\n      this.loading = true\n      const { user } = this.session\n      const { data: profile, error, status } = await this.supabase.profile(user)\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (profile) {\n        this.profile = profile\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.loading = false\n    }\n  }\n\n  async updateProfile(): Promise<void> {\n    try {\n      this.loading = true\n      const { user } = this.session\n\n      const username = this.updateProfileForm.value.username as string\n      const website = this.updateProfileForm.value.website as string\n      const avatar_url = this.updateProfileForm.value.avatar_url as string\n\n      const { error } = await this.supabase.updateProfile({\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n      })\n      if (error) throw error\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.loading = false\n    }\n  }\n\n  async signOut() {\n    await this.supabase.signOut()\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"updateProfileForm\" (ngSubmit)=\"updateProfile()\" class=\"form-widget\">\n  <div>\n    <label for=\"email\">Email</label>\n    <input id=\"email\" type=\"text\" [value]=\"session.user.email\" disabled />\n  </div>\n  <div>\n    <label for=\"username\">Name</label>\n    <input formControlName=\"username\" id=\"username\" type=\"text\" />\n  </div>\n  <div>\n    <label for=\"website\">Website</label>\n    <input formControlName=\"website\" id=\"website\" type=\"url\" />\n  </div>\n\n  <div>\n    <button type=\"submit\" class=\"button primary block\" [disabled]=\"loading\">\n      {{ loading ? 'Loading ...' : 'Update' }}\n    </button>\n  </div>\n\n  <div>\n    <button class=\"button block\" (click)=\"signOut()\">Sign Out</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Index After Data Import in Supabase\nDESCRIPTION: SQL command to create an index on a table after data import. This approach can significantly speed up the import process by building indices after the data is loaded.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Create an index on a table\ncreate index index_name on table_name (column_name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication\nDESCRIPTION: Implementation of magic link authentication using SupaMagicAuth widget.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSupaMagicAuth(\n  redirectUrl: kIsWeb ? null : 'io.mydomain.myapp://callback',\n  onSuccess: (Session response) {},\n  onError: (error) {},\n)\n```\n\n----------------------------------------\n\nTITLE: Seed Employees Table (SQL)\nDESCRIPTION: This SQL code inserts seed data into the `employees` table, adding three employee names.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ninsert into public.employees\n  (name)\nvalues\n  ('Erlich Bachman'),\n  ('Richard Hendricks'),\n  ('Monica Hall');\n```\n\n----------------------------------------\n\nTITLE: Updating supabase-flutter Package Version in pubspec.yaml\nDESCRIPTION: Update the supabase_flutter package version in the pubspec.yaml file to use version 1.0.0 or higher.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase\nDESCRIPTION: TypeScript code to set up environment variables for Supabase URL and API key in the Angular environment file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const environment = {\n  production: false,\n  supabaseUrl: 'YOUR_SUPABASE_URL',\n  supabaseKey: 'YOUR_SUPABASE_KEY',\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Send SMS Function Implementation\nDESCRIPTION: Creates a function to handle SMS sending by queueing messages with priority and scheduling logic, including permissions setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function send_sms(event jsonb) returns void as $$\ndeclare\n    job_data jsonb;\n    scheduled_time timestamp;\n    priority int;\nbegin\n    -- extract phone and otp from the event json\n    job_data := jsonb_build_object(\n        'phone', event->'user'->>'phone',\n        'otp', event->'sms'->>'otp'\n    );\n\n    -- calculate the nearest 5-minute window for scheduled_time\n    scheduled_time := date_trunc('minute', now()) + interval '5 minute' * floor(extract('epoch' from (now() - date_trunc('minute', now())) / 60) / 5);\n\n    -- assign priority dynamically (example logic: higher priority for earlier scheduled time)\n    priority := extract('epoch' from (scheduled_time - now()))::int;\n\n    -- insert the job into the job_queue table\n    insert into job_queue (job_data, priority, scheduled_at, max_retries)\n    values (job_data, priority, scheduled_time, 2);\nend;\n$$ language plpgsql;\n\ngrant all\n  on table public.job_queue\n  to supabase_auth_admin;\n\nrevoke all\n  on table public.job_queue\n  from authenticated, anon;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Browser Client\nDESCRIPTION: Creates a singleton instance of Supabase browser client using useState hook and shares it through Outlet context.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst [supabase] = useState(() => createBrowserClient(env.SUPABASE_URL, env.SUPABASE_ANON_KEY))\n\n<Outlet context={{ supabase }} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst [supabase] = useState(() =>\n  createBrowserClient<Database>(env.SUPABASE_URL, env.SUPABASE_ANON_KEY)\n)\n\n<Outlet context={{ supabase }} />\n```\n\n----------------------------------------\n\nTITLE: Creating Groups Page UI in Ionic Angular with HTML\nDESCRIPTION: This HTML template defines the UI for the Groups page in an Ionic Angular application. It includes a list of groups, a create group button, and conditional rendering based on user authentication status. The template uses Ionic components and Angular directives for dynamic content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-title>Supa Chat Groups</ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"signOut()\" *ngIf=\"user | async\">\n        <ion-icon name=\"log-out-outline\" slot=\"icon-only\"></ion-icon>\n      </ion-button>\n\n      <ion-button (click)=\"openLogin()\" *ngIf=\"(user | async) === false\"> Sign in </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list>\n    <ion-item *ngFor=\"let group of groups\" [routerLink]=\"[group.id]\" button>\n      <ion-label\n        >{{group.title }}\n        <p>By {{group.users.email}}</p>\n      </ion-label>\n    </ion-item>\n  </ion-list>\n  <ion-fab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\" *ngIf=\"user | async\">\n    <ion-fab-button (click)=\"createGroup()\">\n      <ion-icon name=\"add\"></ion-icon>\n    </ion-fab-button>\n  </ion-fab>\n</ion-content>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase in Flutter Main Function\nDESCRIPTION: This snippet shows how to initialize Supabase in the main function of a Flutter app. It sets up the Supabase client with the provided URL and anonymous key, and configures the app's theme and initial route.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:my_chat_app/pages/splash_page.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await Supabase.initialize(\n    // TODO: Replace credentials with your own\n    url: 'SUPABASE_URL',\n    anonKey: 'SUPABASE_ANON_KEY',\n  );\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'My Chat App',\n      theme: appTheme,\n      home: const SplashPage(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Routes and Authentication in a React App with Refine and Supabase\nDESCRIPTION: This snippet configures the main App component with Refine, setting up routes for authentication and account management. It uses Supabase for data and authentication providers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Authenticated, Refine } from '@refinedev/core'\nimport { RefineKbar, RefineKbarProvider } from '@refinedev/kbar'\nimport routerBindings, {\n  CatchAllNavigate,\n  DocumentTitleHandler,\n  UnsavedChangesNotifier,\n} from '@refinedev/react-router-v6'\nimport { dataProvider, liveProvider } from '@refinedev/supabase'\nimport { BrowserRouter, Outlet, Route, Routes } from 'react-router-dom'\n\nimport './App.css'\nimport authProvider from './authProvider'\nimport { supabaseClient } from './utility'\nimport Account from './components/account'\nimport Auth from './components/auth'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <Refine\n          dataProvider={dataProvider(supabaseClient)}\n          liveProvider={liveProvider(supabaseClient)}\n          authProvider={authProvider}\n          routerProvider={routerBindings}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to=\"/login\" />}>\n                  <Outlet />\n                </Authenticated>\n              }\n            >\n              <Route index element={<Account />} />\n            </Route>\n            <Route element={<Authenticated fallback={<Outlet />} />}>\n              <Route path=\"/login\" element={<Auth />} />\n            </Route>\n          </Routes>\n          <RefineKbar />\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration with yarn\nDESCRIPTION: Command to create and apply a Prisma migration using yarn. This initializes the database schema based on your Prisma models.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name first_prisma_migration\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Functions for Timestamp Conversion in Supabase\nDESCRIPTION: Implements Postgres functions to convert between epoch timestamps used by WatermelonDB and Postgres timestamps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function epoch_to_timestamp(epoch text) returns timestamp with time zone as $$ begin return timestamp with time zone 'epoch' + ((epoch::bigint) / 1000) * interval '1 second';\nend;\n$$ language plpgsql;\n\ncreate or replace function timestamp_to_epoch(ts timestamp with time zone) returns bigint as $$ begin return (\n        extract(\n            epoch\n            from ts\n        ) * 1000\n    )::bigint;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration with npm\nDESCRIPTION: Command to create and apply a Prisma migration using npm. This initializes the database schema based on your Prisma models.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name first_prisma_migration\n```\n\n----------------------------------------\n\nTITLE: Installing Aspect Ratio Component Dependencies Manually\nDESCRIPTION: This command installs the necessary dependency for the Aspect Ratio component when adding it manually to your project. It's part of the manual installation process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Manual Sequence Creation Example\nDESCRIPTION: Shows the underlying SQL operations that serial type performs automatically\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SEQUENCE tablename_colname_seq AS integer;\nCREATE TABLE tablename (\n    colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);\nALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;\n```\n\n----------------------------------------\n\nTITLE: Implementing Assistant Commands Popover with React Hooks\nDESCRIPTION: Example of implementing the AssistantCommandPopover with state management and a ref for maintaining focus on the text area while allowing keyboard interaction with the popover.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/assistant-chat.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [commandsOpen, setCommandsOpen] = useState<boolean>(false)\nconst textAreaRef = createRef<HTMLTextAreaElement>()\n\n<AssistantCommandPopover\n  open={commandsOpen}\n  setOpen={setCommandsOpen}\n  textAreaRef={textAreaRef}\n>\n  <AssistantChatForm\n    commandsOpen={commandsOpen}\n    setCommandsOpen={setCommandsOpen}\n  />\n</AssistantCommandPopover>\n```\n\n----------------------------------------\n\nTITLE: Executing Basic SQL Operations with WHERE Clauses\nDESCRIPTION: Demonstrates how to perform SELECT, UPDATE, and DELETE operations using WHERE clauses in SQL. These examples show the standard way of filtering rows in database operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- select\nselect *\nfrom some_table\nwhere id = 5;\n\n-- update\nupdate some_table\nset id = 6\nwhere id = 5;\n\n-- delete\ndelete from some_table\nwhere id = 6;\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase client library\nDESCRIPTION: Navigates to the created SolidJS app directory and installs the Supabase JavaScript client library. This library provides an interface for interacting with Supabase services from the app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/solidjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app && npm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Sign In with Facebook using Supabase\nDESCRIPTION: This Swift snippet demonstrates how to sign in a user with Facebook using Supabase's `signInWithOAuth` method. It calls the `signInWithOAuth` function with `.facebook` as the provider, and optionally sets a redirect URI and a closure to handle the OAuth flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc signInWithFacebook() async throws {\n  try await supabase.auth.signInWithOAuth(\n    provider: .facebook,\n    redirectTo: URL(string: \"my.scheme://my-host\")!, // Optionally set the redirect link to bring back the user via deeplink.\n    launchFlow: { url in\n      // use url to start OAuth flow\n      // and return a result url that contains the OAuth token.\n      // ...\n      return resultURL\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround for schema pull with empty migrations directory\nDESCRIPTION: This command sequence demonstrates how to fix the issue where --schema parameter is ignored when the local migrations directory is empty. It first performs a general pull followed by a schema-specific pull.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db pull\nsupabase db pull --schema <schema_name>\n```\n\n----------------------------------------\n\nTITLE: Advanced RLS testing example in PostgreSQL for Supabase\nDESCRIPTION: This SQL snippet demonstrates a complete example of using test helpers to verify RLS policies in a Supabase project. It includes creating test users, inserting test data, and running various tests to ensure proper RLS enforcement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\n-- Assuming 000-setup-tests-hooks.sql file is present to use tests helpers\nselect plan(4);\n\n-- Set up test data\n\n-- Create test supabase users\nselect tests.create_supabase_user('user1@test.com');\nselect tests.create_supabase_user('user2@test.com');\n\n-- Create test data\ninsert into public.todos (task, user_id) values\n  ('User 1 Task 1', tests.get_supabase_uid('user1@test.com')),\n  ('User 1 Task 2', tests.get_supabase_uid('user1@test.com')),\n  ('User 2 Task 1', tests.get_supabase_uid('user2@test.com'));\n\n-- Test as User 1\nselect tests.authenticate_as('user1@test.com');\n\n-- Test 1: User 1 should only see their own todos\nselect results_eq(\n  'select count(*) from todos',\n  ARRAY[2::bigint],\n  'User 1 should only see their 2 todos'\n);\n\n-- Test 2: User 1 can create their own todo\nselect lives_ok(\n  $$insert into todos (task, user_id) values ('New Task', tests.get_supabase_uid('user1@test.com'))$$,\n  'User 1 can create their own todo'\n);\n\n-- Test as User 2\nselect tests.authenticate_as('user2@test.com');\n\n-- Test 3: User 2 should only see their own todos\nselect results_eq(\n  'select count(*) from todos',\n  ARRAY[1::bigint],\n  'User 2 should only see their 1 todo'\n);\n\n-- Test 4: User 2 cannot modify User 1's todo\nSELECT results_ne(\n    $$ update todos set task = 'Hacked!' where user_id = tests.get_supabase_uid('user1@test.com') returning 1 $$,\n    $$ values(1) $$,\n    'User 2 cannot modify User 1 todos'\n);\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Example Customer Orders Query in PostgreSQL\nDESCRIPTION: Sample query demonstrating joins between customers and orders tables with filtering and sorting operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  a.name,\n  b.date_of_purchase\nfrom\n  customers as a\n  join orders as b on a.id = b.customer_id\nwhere a.sign_up_date > '2023-01-01' and b.status = 'shipped'\norder by b.date_of_purchase\nlimit 10;\n```\n\n----------------------------------------\n\nTITLE: Main App Component Implementation\nDESCRIPTION: React component that manages authentication state and renders either the Auth or Account component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport './App.css'\nimport { useState, useEffect } from 'react'\nimport { supabase } from './supabaseClient'\nimport Auth from './Auth'\nimport Account from './Account'\n\nfunction App() {\n  const [session, setSession] = useState(null)\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n    })\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n  }, [])\n\n  return (\n    <div className=\"container\" style={{ padding: '50px 0 100px 0' }}>\n      {!session ? <Auth /> : <Account key={session.user.id} session={session} />}\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions with Spread Embedded Resources in Supabase.js\nDESCRIPTION: This snippet shows how to use aggregate functions with spread embedded resources to calculate average box office earnings grouped by director's country using the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst { data, error } = await supabase.from('movies').select(`\n\t\tavg_earnings:box_office_earnings.avg(),\n    ...directors(country)\n\t`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Rendering for Auth and Account Components in Angular\nDESCRIPTION: This HTML template for AppComponent conditionally renders either the AccountComponent or AuthComponent based on the user's session status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\" style=\"padding: 50px 0 100px 0\">\n  <app-account *ngIf=\"session; else auth\" [session]=\"session\"></app-account>\n  <ng-template #auth>\n    <app-auth></app-auth>\n  </ng-template>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rust Implementation of Statement Identification in Postgres Language Server\nDESCRIPTION: Code showing how the Postgres Language Server uniquely identifies SQL statements within documents using a combination of document path and statement ID in Rust.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n/// Globally unique statement\n#[derive(Hash)]\npub(crate) struct Statement {\n  /// Path of the document\n  pub(crate) path: PgTPath,\n  /// Unique id within the document\n  pub(crate) id: StatementId,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migration - Bash\nDESCRIPTION: Command to reset the database and apply current migrations\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db reset\n```\n\n----------------------------------------\n\nTITLE: Signing In with LinkedIn using Supabase Kotlin\nDESCRIPTION: This Kotlin snippet illustrates signing in with LinkedIn via Supabase's authentication mechanism. It involves calling the `signInWith` function with `LinkedIn` as the provider, assuming the necessary setup and Supabase Kotlin library are in place.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signInWithKaLinkedIn() {\n\tsupabase.auth.signInWith(LinkedIn)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Supabase CLI\nDESCRIPTION: This command uses the Supabase CLI to generate TypeScript types for a specific project and output them to a file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts\n```\n\n----------------------------------------\n\nTITLE: Adding SUPABASE_ANON_KEY Secret to Cloudflare\nDESCRIPTION: Command to create a specific secret for storing the Supabase anonymous key in Cloudflare Workers. This key is found in the Supabase dashboard under Settings > API.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler secret put SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Running Oak Server Functions Locally\nDESCRIPTION: Command to serve Oak server functions locally without JWT verification for development and testing purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/oak-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthenticationRepositoryImpl with Supabase in Kotlin\nDESCRIPTION: This class implements the AuthenticationRepository interface using Supabase's Auth service. It provides methods for email/password authentication and Google OAuth, handling success and error cases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AuthenticationRepositoryImpl @Inject constructor(\n    private val auth: Auth\n) : AuthenticationRepository {\n    override suspend fun signIn(email: String, password: String): Boolean {\n        return try {\n            auth.signInWith(Email) {\n                this.email = email\n                this.password = password\n            }\n            true\n        } catch (e: Exception) {\n            false\n        }\n    }\n\n    override suspend fun signUp(email: String, password: String): Boolean {\n        return try {\n            auth.signUpWith(Email) {\n                this.email = email\n                this.password = password\n            }\n            true\n        } catch (e: Exception) {\n            false\n        }\n    }\n\n    override suspend fun signInWithGoogle(): Boolean {\n        return try {\n            auth.signInWith(Google)\n            true\n        } catch (e: Exception) {\n            false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Postgres Logs by Role in SQL\nDESCRIPTION: SQL query to filter Postgres logs by a specific role using the parsed.user_name field. This is useful for retrieving logs made by specific roles or servers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- find events based on role/server\n... query\nwhere\n  -- find events from the relevant role\n  parsed.user_name = '<ROLE>'\n...\n```\n\n----------------------------------------\n\nTITLE: Private Package Import Example\nDESCRIPTION: Example of importing a private npm package in a Supabase Edge Function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyPackage from 'npm:@myorg/private-package@v1.0.1'\n\n// use MyPackage\n```\n\n----------------------------------------\n\nTITLE: Creating Test File with Bash\nDESCRIPTION: Command to create a new SQL test file for database testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/testing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntouch ./supabase/tests/database/hello_world.test.sql\n```\n\n----------------------------------------\n\nTITLE: Accessing Public URL for Supabase Storage Asset\nDESCRIPTION: Demonstrates how to use the Supabase SDK to generate a public URL for an asset stored in a public bucket. This method uses the 'getPublicUrl' function from the storage module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/downloads.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nconst { data } = supabase.storage.from('bucket').getPublicUrl('filePath.jpg')\n\nconsole.log(data.publicUrl)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase in Next.js\nDESCRIPTION: The purpose of this snippet is to set the required environment variables for connecting a Next.js application with a Supabase project. These variables are crucial for initializing the Supabase client. Ensure that 'NEXT_PUBLIC_SUPABASE_URL' and 'NEXT_PUBLIC_SUPABASE_ANON_KEY' are set with correct values which can be obtained from the Supabase dashboard or a local instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/social-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Creating a SolidJS app with degit\nDESCRIPTION: Uses the degit command to create a new SolidJS application from a template. This creates the foundational project structure for a JavaScript-based SolidJS app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/solidjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit solidjs/templates/js my-app\n```\n\n----------------------------------------\n\nTITLE: Setting Refreshed JWT Token in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set a refreshed JWT token for Supabase Realtime authentication. It uses the `setAuth` method of the `supabase.realtime` object to update the token. This assumes the Supabase client has already been initialized.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_54\n\nLANGUAGE: js\nCODE:\n```\n// Client setup\n\nsupabase.realtime.setAuth('fresh-token')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Supabase - React\nDESCRIPTION: This snippet requires you to create a .env file containing Supabase environment variables. This is essential for connecting your React app to the Supabase backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/password-based-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Downloading Transformed Image in Kotlin\nDESCRIPTION: This snippet demonstrates how to download a transformed image using the Supabase Kotlin client, specifying transformation options. It includes examples for both in-memory download and direct file download.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.storage.from(\"bucket\").downloadAuthenticated(\"image.jpg\") {\n    transform {\n        size(800, 300)\n    }\n}\n\n//Or on JVM stream directly to a file\nval file = File(\"image.jpg\")\nsupabase.storage.from(\"bucket\").downloadAuthenticatedTo(\"image.jpg\", file) {\n    transform {\n        size(800, 300)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an After Delete Trigger in PostgreSQL\nDESCRIPTION: This example illustrates the creation of a trigger that executes after a delete operation on the 'customers' table. It shows the syntax for an 'AFTER' trigger.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger after_delete_trigger\nafter delete on customers\nfor each row\nexecute function after_delete_function();\n```\n\n----------------------------------------\n\nTITLE: Inspecting Unused Indexes with Supabase CLI\nDESCRIPTION: Command sequence for using Supabase CLI to identify unused indexes that may be unnecessarily consuming space.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/steps-to-improve-query-performance-with-indexes-q8PoC9.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase login\n\nnpx supabase link\n\nnpx supabase inspect db unused-indexes\n```\n\n----------------------------------------\n\nTITLE: Creating a new Supabase function for Resend\nDESCRIPTION: Command to create a new Supabase Edge Function named 'resend' using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new resend\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation in Flutter\nDESCRIPTION: Method to sign out users and clear browser session and local storage in a Flutter Supabase application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Geographic Point Data via SQL\nDESCRIPTION: SQL command to insert restaurant data with geographic points using the ST_Point function. Note that the longitude is passed first, followed by latitude.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into public.restaurants\n  (name, location)\nvalues\n  ('Supa Burger', gis.st_point(-73.946823, 40.807416)),\n  ('Supa Pizza', gis.st_point(-73.94581, 40.807475)),\n  ('Supa Taco', gis.st_point(-73.945826, 40.80629));\n```\n\n----------------------------------------\n\nTITLE: Create Add Department Column Migration (CLI)\nDESCRIPTION: This command generates a new migration file using the Supabase CLI, used to add a new `department` column to the existing `employees` table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration new add_department_column\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Functions for FCM Push Notifications\nDESCRIPTION: Bash commands to initialize Supabase in your working directory and create a new edge function for handling push notifications. These commands prepare the environment for implementing FCM push notifications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize Supabase in your working directory\nsupabase init\n# Create the push edge function\nsupabase functions new push\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination to TanStack Table\nDESCRIPTION: Updated DataTable component with pagination functionality using TanStack Table's getPaginationRowModel feature to automatically handle pagination.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from '@tanstack/react-table'\n\nexport function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Email Variable Usage\nDESCRIPTION: Example showing how to use the Email variable in templates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>A recovery request was sent to {{ .Email }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Signing in with OTP using JavaScript\nDESCRIPTION: Showcases sending OTP for email login using JavaScript by invoking the Supabase client. Requires JavaScript library, a proper setup of Supabase, and a user's email address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('url', 'anonKey')\n\n// ---cut---\nconst { data, error } = await supabase.auth.signInWithOtp({\n  email: 'valid.email@supabase.io',\n  options: {\n    // set this to false if you do not want the user to be automatically signed up\n    shouldCreateUser: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Ionic Vue Project with CLI\nDESCRIPTION: Commands to install the Ionic CLI, create a new Ionic Vue project, and install the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\nionic start supabase-ionic-vue blank --type vue\ncd supabase-ionic-vue\n```\n\n----------------------------------------\n\nTITLE: Testing Function Execution Permissions in PostgreSQL\nDESCRIPTION: SQL transaction demonstrating how to test function execution permissions by temporarily setting role to 'anon' and attempting to execute the function, resulting in a permission denied error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-can-i-revoke-execution-of-a-postgresql-function-2GYb0A.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nset local role anon;\nselect foo();\nERROR:  permission denied for function foo\n```\n\n----------------------------------------\n\nTITLE: Creating Hash Partitioned Products Table in PostgreSQL\nDESCRIPTION: This snippet shows how to create a hash partitioned table for product data. It creates a parent table and two partitions using a hash function on the id column for even distribution of data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table products (\n    id bigint generated by default as identity,\n    name text,\n    category text,\n    price bigint\n)\npartition by hash (id);\n\ncreate table products_one\n\tpartition of products\n  for values with (modulus 2, remainder 1);\n\ncreate table products_two\n\tpartition of products\n  for values with (modulus 2, remainder 0);\n```\n\n----------------------------------------\n\nTITLE: Checking Sequence Values in PostgreSQL\nDESCRIPTION: These SQL commands demonstrate how to check the current maximum ID in a table and the next value that will be generated by the sequence. These are useful for diagnosing sequence-related issues or before resetting a sequence.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-are-there-gaps-in-my-postgres-id-sequence-Frifus.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\npostgres=# SELECT max(id) FROM <table_name>;\n\npostgres=# SELECT nextval('{table}_{column}_seq');\n```\n\n----------------------------------------\n\nTITLE: Custom Node Handler in Rust\nDESCRIPTION: Custom handler implementation for specific node types to define their properties\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nfn custom_handlers(node: &Node) -> TokenStream {\n    match node.name.as_str() {\n\t\t\t\"SelectStmt\" => quote! {\n\t\t\t    tokens.push(TokenProperty::from(Token::Select));\n\t\t\t    if n.from_clause.len() > 0 {\n\t\t\t        tokens.push(TokenProperty::from(Token::From));\n\t\t\t    }\n\t\t\t\t\t...\n\t\t\t},\n\t\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Deno Email Service Handler Implementation\nDESCRIPTION: Main service handler that processes incoming email requests. Implements a failover system between Postmark and SendGrid, includes webhook verification, and comprehensive error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(async (req) => {\n    const payload = await req.text();\n    const postmarkServerToken = Deno.env.get(\"POSTMARK_SERVER_TOKEN\");\n    const sendGridApiKey = Deno.env.get(\"SENDGRID_API_KEY\");\n    const headers = Object.fromEntries(req.headers);\n    const base64_secret = Deno.env.get('SEND_EMAIL_HOOK_SECRET').replace('v1,whsec_', '');\n    const wh = new Webhook(base64_secret);\n    const {\n        user,\n        email_data\n    } = wh.verify(payload, headers);\n\n    try {\n        // Try sending email using Postmark\n        let response = await sendEmailWithPostmark(user, email_data, postmarkServerToken!);\n\n        if (!response.ok) {\n            // If Postmark fails, try SendGrid\n            console.error(`Primary email send failed: ${await response.text()}`);\n            response = await sendEmailWithSendGrid(user, email_data, sendGridApiKey!);\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(`Failed to send email via backup: ${errorData.errors[0].message}`);\n            }\n        }\n\n        return new Response(JSON.stringify({\n            message: \"Email sent successfully.\"\n        }), {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    } catch (error) {\n        return new Response(JSON.stringify({\n            error: `Failed to process the request: ${error.message}`\n        }), {\n            status: 500,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client-Side Utility in JavaScript\nDESCRIPTION: JavaScript utility to create a Supabase client for browser-side operations using environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  // Create a supabase client on the browser with project's credentials\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Environment File\nDESCRIPTION: Command to create a local environment file for storing development secrets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"MY_NAME=Yoda\" >> ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Retrieving GoTrue Version Using Health Check Endpoint in Bash\nDESCRIPTION: Makes a GET request to the Supabase health check endpoint to retrieve the GoTrue authentication service version. The request requires the project reference and anonymous API key as a header, and returns version information in JSON format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-do-i-check-gotrueapi-version-of-a-supabase-project-lQAnOR.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET 'https://project-ref.supabase.co/auth/v1/health' -H 'apikey: ANON_KEY'\n\n{\n    \"version\": \"v2.60.7\",\n    \"name\": \"GoTrue\",\n    \"description\": \"GoTrue is a user registration and authentication API\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in Supabase SQL\nDESCRIPTION: SQL commands to enable and disable the pgvector extension in Supabase. This allows the use of vector data types and operations in Postgres.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"vector\" extension.\ncreate extension vector\nwith\n  schema extensions;\n\n-- Example: disable the \"vector\" extension\ndrop\n  extension if exists vector;\n```\n\n----------------------------------------\n\nTITLE: Creating Employee Table Migration\nDESCRIPTION: SQL migration script for creating a basic employees table with an auto-incrementing ID and name field.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.employees (\n  id integer primary key generated always as identity,\n  name text\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a new Rails project with PostgreSQL\nDESCRIPTION: Scaffolds a new Ruby on Rails project configured to use PostgreSQL as the database backend. The -d=postgresql flag specifies that the project should use PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails new blog -d=postgresql\n```\n\n----------------------------------------\n\nTITLE: Search Function for Text-to-Image Queries\nDESCRIPTION: Python function to perform a semantic search from a text query by generating a text embedding and finding the most similar image in the vector collection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef search(query_term: Optional[str] = None):\n    if query_term is None:\n        query_term = sys.argv[1]\n\n    # create vector store client\n    vx = vecs.create_client(DB_CONNECTION)\n    images = vx.get_or_create_collection(name=\"image_vectors\", dimension=1024)\n\n    # Encode text query\n    text_emb = get_embedding_from_titan_multimodal(json.dumps(\n        {\n            \"inputText\": query_term,\n            \"embeddingConfig\": {\"outputEmbeddingLength\": 1024},\n        }\n    ))\n\n    # query the collection filtering metadata for \"type\" = \"jpg\"\n    results = images.query(\n        data=text_emb,                      # required\n        limit=1,                            # number of records to return\n        filters={\"type\": {\"$eq\": \"jpg\"}},   # metadata filters\n    )\n    result = results[0]\n    print(result)\n    plt.title(result)\n    image = mpimg.imread('./images/' + result)\n    plt.imshow(image)\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Canvas Page in Dart\nDESCRIPTION: Imports necessary packages and custom modules for implementing the canvas functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nimport 'package:canvas/canvas/canvas_object.dart';\nimport 'package:canvas/canvas/canvas_painter.dart';\nimport 'package:canvas/main.dart';\nimport 'package:canvas/utils/constants.dart';\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:uuid/uuid.dart';\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Timeout for Long-Running Operations\nDESCRIPTION: SQL command to disable the statement timeout for the current session, which is necessary for long-running index creation operations that would otherwise be terminated.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nset statement_timeout = '0';\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback and Exchanging Code for Session in TypeScript\nDESCRIPTION: This snippet shows how to handle the OAuth callback in a Next.js API route. It retrieves the 'code' query parameter, checks if it's present, and exchanges it for a user session using Supabase. The response then redirects the user based on the environment and the presence of the X-Forwarded-Host header.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-workos.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { createClient } from '@/utils/supabase/server'\n\nexport async function GET(request: Request) {\n  const { searchParams, origin } = new URL(request.url)\n  const code = searchParams.get('code')\n  // if \"next\" is in param, use it as the redirect URL\n  const next = searchParams.get('next') ?? '/' \n\n  if (code) {\n    const supabase = await createClient()\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n    if (!error) {\n      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer\n      const isLocalEnv = process.env.NODE_ENV === 'development'\n      if (isLocalEnv) {\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n        return NextResponse.redirect(`${origin}${next}`)\n      } else if (forwardedHost) {\n        return NextResponse.redirect(`https://${forwardedHost}${next}`)\n      } else {\n        return NextResponse.redirect(`${origin}${next}`)\n      }\n    }\n  }\n\n  // return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`) \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client with pnpm\nDESCRIPTION: This snippet demonstrates how to install the Prisma client and generate its model using pnpm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @prisma/client\npnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Create Employees Table Migration (CLI)\nDESCRIPTION: This command generates a new migration file using the Supabase CLI. The migration file will be used to store the SQL commands for creating the `employees` table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration new create_employees_table\n```\n\n----------------------------------------\n\nTITLE: Building Angular Workspace Component Controller\nDESCRIPTION: The TypeScript controller for the workspace component that handles loading boards, creating new boards, and user authentication. It includes logic to handle the special case where a database trigger causes a delay in authorization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from './../../../services/auth.service'\nimport { Router } from '@angular/router'\nimport { DataService } from './../../../services/data.service'\nimport { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-workspace',\n  templateUrl: './workspace.component.html',\n  styleUrls: ['./workspace.component.scss'],\n})\nexport class WorkspaceComponent implements OnInit {\n  boards: any[] = []\n  user = this.auth.currentUser\n\n  constructor(\n    private dataService: DataService,\n    private router: Router,\n    private auth: AuthService\n  ) {}\n\n  async ngOnInit() {\n    this.boards = await this.dataService.getBoards()\n  }\n\n  async startBoard() {\n    const data = await this.dataService.startBoard()\n\n    // Load all boards because we only get back minimal data\n    // Trigger needs to run first\n    // Otherwise RLS would fail\n    this.boards = await this.dataService.getBoards()\n\n    if (this.boards.length > 0) {\n      const newBoard = this.boards.pop()\n\n      if (newBoard.boards) {\n        this.router.navigateByUrl(`/workspace/${newBoard.boards.id}`)\n      }\n    }\n  }\n\n  signOut() {\n    this.auth.logout()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Basic Seed Data with SQL\nDESCRIPTION: Example of inserting initial country data using a basic SQL seed file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into countries\n  (name, code)\nvalues\n  ('United States', 'US'),\n  ('Canada', 'CA'),\n  ('Mexico', 'MX');\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno imports for Supabase\nDESCRIPTION: JSON configuration in deno.json file to specify the Supabase import from JSR. This sets up the import map for using Supabase in a Deno project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"@supabase/supabase-js\": \"jsr:@supabase/supabase-js@2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener for Supabase Auth Changes - Svelte\nDESCRIPTION: This Svelte snippet sets up an event listener in the root +layout.svelte file to manage authentication state changes. It uses the 'onMount' lifecycle function to listen for changes and calls 'invalidate' to refresh the session state accordingly. The snippet relies on the supabase client being passed in as props.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- src/routes/+layout.svelte -->\n<script lang=\"ts\">\n  import { invalidate } from '$app/navigation'\n  import { onMount } from 'svelte'\n\n  export let data\n\n  let { supabase, session } = data\n  $: ({ supabase, session } = data)\n\n  onMount(() => {\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((event, _session) => {\n      if (_session?.expires_at !== session?.expires_at) {\n        invalidate('supabase:auth')\n      }\n    })\n\n    return () => subscription.unsubscribe()\n  });\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Initializing Keycloak OAuth in Kotlin\nDESCRIPTION: Sign in with Keycloak provider in Kotlin using Supabase auth method, including openid scope\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithKeycloak() {\n\tsupabase.auth.signInWith(Keycloak) {\n\t\tscopes.add(\"openid\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Types for Movies Table\nDESCRIPTION: This TypeScript code shows the automatically generated types for the 'movies' table, including types for select, insert, and update operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]\n\nexport interface Database {\n  public: {\n    Tables: {\n      movies: {\n        Row: {               // the data expected from .select()\n          id: number\n          name: string\n          data: Json | null\n        }\n        Insert: {            // the data to be passed to .insert()\n          id?: never         // generated columns must not be supplied\n          name: string       // `not null` columns with no default must be supplied\n          data?: Json | null // nullable columns can be omitted\n        }\n        Update: {            // the data to be passed to .update()\n          id?: never\n          name?: string      // `not null` columns are optional on .update()\n          data?: Json | null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In Anonymously with Python in Supabase\nDESCRIPTION: Creates an anonymous user authentication session using the Supabase Python client. Returns a response containing session information for the anonymous user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.sign_in_anonymously()\n```\n\n----------------------------------------\n\nTITLE: Decoded Supabase User JWT Payload\nDESCRIPTION: This JavaScript code snippet shows the decoded payload of a Supabase user-specific JWT.  It includes claims about the user, such as `aud` (audience), `exp` (expiration time), `sub` (subject), `email`, `app_metadata`, `user_metadata`, and `role`. The `sub` claim represents the user's UUID, and the `role` is typically set to `authenticated`.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"aud\": \"authenticated\",\n  \"exp\": 1615824388,\n  \"sub\": \"0334744a-f2a2-4aba-8c8a-6e748f62a172\",\n  \"email\": \"valid.email@supabase.io\",\n  \"app_metadata\": {\n    \"provider\": \"email\"\n  },\n  \"user_metadata\": null,\n  \"role\": \"authenticated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in build.gradle\nDESCRIPTION: Configures the build script to read Supabase credentials from local.properties and expose them through BuildConfig for use in the app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndefaultConfig {\n   applicationId \"com.example.manageproducts\"\n   minSdkVersion 22\n   targetSdkVersion 33\n   versionCode 5\n   versionName \"1.0\"\n   testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n\n   // Set value part\n   Properties properties = new Properties()\n   properties.load(project.rootProject.file(\"local.properties\").newDataInputStream())\n   buildConfigField(\"String\", \"SUPABASE_ANON_KEY\", \"\\\"${properties.getProperty(\"SUPABASE_ANON_KEY\")}\\\"\") \n   buildConfigField(\"String\", \"SECRET\", \"\\\"${properties.getProperty(\"SECRET\")}\\\"\") \n   buildConfigField(\"String\", \"SUPABASE_URL\", \"\\\"${properties.getProperty(\"SUPABASE_URL\")}\\\"\") \n}\n```\n\n----------------------------------------\n\nTITLE: Signing Up New User using Supabase in Kotlin\nDESCRIPTION: This Kotlin snippet illustrates how to sign up a new user using the Supabase Kotlin SDK by providing their email and password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signUpNewUser() {\n\tsupabase.auth.signUpWith(Email) {\n\t\temail = \"valid.email@supabase.io\"\n\t\tpassword = \"example-password\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Endpoint for Supabase Auth in Next.js\nDESCRIPTION: This code creates a server-side endpoint to handle email confirmation for Supabase authentication in a Next.js application. It verifies the OTP token and manages user redirection after confirmation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { NextResponse } from 'next/server'\n\nimport { createClient } from '@/utils/supabase/server'\n\n// Creating a handler to a GET request to route /auth/confirm\nexport async function GET(request) {\n  const { searchParams } = new URL(request.url)\n  const token_hash = searchParams.get('token_hash')\n  const type = searchParams.get('type')\n  const next = '/account'\n\n  // Create redirect link without the secret token\n  const redirectTo = request.nextUrl.clone()\n  redirectTo.pathname = next\n  redirectTo.searchParams.delete('token_hash')\n  redirectTo.searchParams.delete('type')\n\n  if (token_hash && type) {\n    const supabase = await createClient()\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n    if (!error) {\n      redirectTo.searchParams.delete('next')\n      return NextResponse.redirect(redirectTo)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  redirectTo.pathname = '/error'\n  return NextResponse.redirect(redirectTo)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Exporter User with Limited Permissions in PostgreSQL\nDESCRIPTION: SQL commands to create a dedicated user named 'exporter' with login privileges and grant them the necessary permissions to access the public schema and select from the profiles table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a new user with login privileges\ncreate user exporter\n  with password 'exporter_secure_password';\n\n-- Allow this user to select the rows we need\ngrant usage on schema public to exporter;\ngrant select on profiles to exporter;\n```\n\n----------------------------------------\n\nTITLE: Less Than Filter Implementation\nDESCRIPTION: Demonstrates how to listen for database changes when a column is less than a specific value using the 'lt' filter. Uses Postgres's < operator to filter profile inserts where age is less than 65.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'profiles',\n      filter: 'age=lt.65',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        table: 'profiles',\n        filter: PostgresChangeFilter(\n          type: PostgresChangeFilterType.lt,\n          column: 'age',\n          value: 65,\n        ),\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"profiles\",\n  filter: .lt(\"age\", value: 65)\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = \"public\") {\n    table = \"profiles\"\n    filter = \"age=lt.65\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"INSERT\",\n  schema=\"public\",\n  table=\"profiles\",\n  filter=\"age=lt.65\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Listening to Multiple Changes in Kotlin with Supabase Realtime\nDESCRIPTION: Sets up a Kotlin channel to listen to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\nval messageChanges = myChannel.postgresChangeFlow<PostgresAction>(schema = \"public\") {\n    table = \"messages\"\n}\nval userChanges = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = \"public\") {\n    table = \"users\"\n}\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Basic ETL Query with Foreign Data Wrapper\nDESCRIPTION: SQL query demonstrating how to copy data from a production database to a data warehouse for the last 24 hours using FDW.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into warehouse.analytics\nselect * from public.analytics\nwhere ts > (now() - interval '1 DAY');\n```\n\n----------------------------------------\n\nTITLE: Disabling Prepared Statements with pgbouncer Parameter\nDESCRIPTION: Shows how to disable prepared statements by adding the pgbouncer parameter to the connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n.../postgres?pgbouncer=true\n```\n\n----------------------------------------\n\nTITLE: Serving Supabase Function Locally\nDESCRIPTION: Runs a specific Supabase function locally for testing before redeployment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve function-name\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Schema Table in Supabase JS Client\nDESCRIPTION: Example of how to properly reference a table in a custom schema using the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.schema('myschema').from('mytable').select()\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Management Component in React Native with TypeScript\nDESCRIPTION: A React Native component for managing user account details including username, website, and avatar. Uses Supabase for data storage and includes profile fetching and updating functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\nimport { supabase } from '../lib/supabase'\nimport { StyleSheet, View, Alert } from 'react-native'\nimport { Button, Input } from '@rneui/themed'\nimport { Session } from '@supabase/supabase-js'\n\nexport default function Account({ session }: { session: Session }) {\n  const [loading, setLoading] = useState(true)\n  const [username, setUsername] = useState('')\n  const [website, setWebsite] = useState('')\n  const [avatarUrl, setAvatarUrl] = useState('')\n\n  useEffect(() => {\n    if (session) getProfile()\n  }, [session])\n\n  async function getProfile() {\n    try {\n      setLoading(true)\n      if (!session?.user) throw new Error('No user on the session!')\n\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', session?.user.id)\n        .single()\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        Alert.alert(error.message)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function updateProfile({\n    username,\n    website,\n    avatar_url,\n  }: {\n    username: string\n    website: string\n    avatar_url: string\n  }) {\n    try {\n      setLoading(true)\n      if (!session?.user) throw new Error('No user on the session!')\n\n      const updates = {\n        id: session?.user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date(),\n      }\n\n      const { error } = await supabase.from('profiles').upsert(updates)\n\n      if (error) {\n        throw error\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        Alert.alert(error.message)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Input label=\"Email\" value={session?.user?.email} disabled />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input label=\"Username\" value={username || ''} onChangeText={(text) => setUsername(text)} />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input label=\"Website\" value={website || ''} onChangeText={(text) => setWebsite(text)} />\n      </View>\n\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Button\n          title={loading ? 'Loading ...' : 'Update'}\n          onPress={() => updateProfile({ username, website, avatar_url: avatarUrl })}\n          disabled={loading}\n        />\n      </View>\n\n      <View style={styles.verticallySpaced}>\n        <Button title=\"Sign Out\" onPress={() => supabase.auth.signOut()} />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 40,\n    padding: 12,\n  },\n  verticallySpaced: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    alignSelf: 'stretch',\n  },\n  mt20: {\n    marginTop: 20,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Calculating Cache Hit Ratio Over Time in Supabase Storage Logs (SQL)\nDESCRIPTION: This SQL query calculates the cache hit ratio over time for objects in Supabase Storage. It aggregates the count of cache hits and divides it by the total number of requests for each hour.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/cdn/metrics.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  timestamp_trunc(timestamp, hour) as timestamp,\n  countif(h.cf_cache_status in ('HIT', 'STALE', 'REVALIDATED', 'UPDATING')) / count(f.id) as ratio\nfrom\n  edge_logs as f\n  cross join unnest(f.metadata) as m\n  cross join unnest(m.request) as r\n  cross join unnest(m.response) as res\n  cross join unnest(res.headers) as h\nwhere starts_with(r.path, '/storage/v1/object') and r.method = 'GET'\ngroup by timestamp\norder by timestamp desc;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Initializes a Supabase project using the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase init\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Flutter Chat App with Supabase\nDESCRIPTION: This snippet defines constants used throughout the application, including Supabase client initialization, UI elements, and theme data. It also includes an extension on BuildContext for displaying snackbars.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\n/// Supabase client\nfinal supabase = Supabase.instance.client;\n\n/// Simple preloader inside a Center widget\nconst preloader =\n    Center(child: CircularProgressIndicator(color: Colors.orange));\n\n/// Simple sized box to space out form elements\nconst formSpacer = SizedBox(width: 16, height: 16);\n\n/// Some padding for all the forms to use\nconst formPadding = EdgeInsets.symmetric(vertical: 20, horizontal: 16);\n\n/// Error message to display the user when unexpected error occurs.\nconst unexpectedErrorMessage = 'Unexpected error occurred.';\n\n/// Basic theme to change the look and feel of the app\nfinal appTheme = ThemeData.light().copyWith(\n  primaryColorDark: Colors.orange,\n  appBarTheme: const AppBarTheme(\n    elevation: 1,\n    backgroundColor: Colors.white,\n    iconTheme: IconThemeData(color: Colors.black),\n    titleTextStyle: TextStyle(\n      color: Colors.black,\n      fontSize: 18,\n    ),\n  ),\n  primaryColor: Colors.orange,\n  textButtonTheme: TextButtonThemeData(\n    style: TextButton.styleFrom(\n      foregroundColor: Colors.orange,\n    ),\n  ),\n  elevatedButtonTheme: ElevatedButtonThemeData(\n    style: ElevatedButton.styleFrom(\n      foregroundColor: Colors.white,\n      backgroundColor: Colors.orange,\n    ),\n  ),\n  inputDecorationTheme: InputDecorationTheme(\n    floatingLabelStyle: const TextStyle(\n      color: Colors.orange,\n    ),\n    border: OutlineInputBorder(\n      borderRadius: BorderRadius.circular(12),\n      borderSide: const BorderSide(\n        color: Colors.grey,\n        width: 2,\n      ),\n    ),\n    focusColor: Colors.orange,\n    focusedBorder: OutlineInputBorder(\n      borderRadius: BorderRadius.circular(12),\n      borderSide: const BorderSide(\n        color: Colors.orange,\n        width: 2,\n      ),\n    ),\n  ),\n);\n\n/// Set of extension methods to easily display a snackbar\nextension ShowSnackBar on BuildContext {\n  /// Displays a basic snackbar\n  void showSnackBar({\n    required String message,\n    Color backgroundColor = Colors.white,\n  }) {\n    ScaffoldMessenger.of(this).showSnackBar(SnackBar(\n      content: Text(message),\n      backgroundColor: backgroundColor,\n    ));\n  }\n\n  /// Displays a red snackbar indicating error\n  void showErrorSnackBar({required String message}) {\n    showSnackBar(message: message, backgroundColor: Colors.red);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Supabase Edge Function with pg_net\nDESCRIPTION: Example of making a POST request to a Supabase Edge Function with authentication header and JSON payload using the net.http_post function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    net.http_post(\n        url:='https://project-ref.supabase.co/functions/v1/function-name',\n        headers:='{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer <YOUR_ANON_KEY>\"}'::jsonb,\n        body:='{\"name\": \"pg_net\"}'::jsonb\n    ) as request_id;\n```\n\n----------------------------------------\n\nTITLE: Testing POST Endpoint\nDESCRIPTION: cURL command to test the POST endpoint of the deployed Edge Function with JSON payload\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \\\n  --header 'Authorization: Bearer ANON_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '{ \"name\":\"Foo\" }'\n```\n\n----------------------------------------\n\nTITLE: Modifying Function Route Handler\nDESCRIPTION: TypeScript code to update the URL pathname handling in the function's main entry point\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (url.pathname === \"/hello-world\") {\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Job Scheduling with pg_cron\nDESCRIPTION: Configures periodic job execution using pg_cron to run job processing function every minute\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cron.schedule(\n    '* * * * *', -- this cron expression means every minute.\n    'select dequeue_and_run_jobs();'\n  );\n```\n\n----------------------------------------\n\nTITLE: Restarting PG_NET Background Worker\nDESCRIPTION: This SQL function call restarts the pg_net background worker if it has failed. It's applicable for PG_NET version 0.8 or later.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect net.worker_restart();\n```\n\n----------------------------------------\n\nTITLE: Complete Dynamic Post Page with Static Generation\nDESCRIPTION: Full implementation of a dynamic post page with static path generation, data fetching, and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport supabase from '../../../utils/supabase'\nimport { notFound } from 'next/navigation'\n\nexport async function generateStaticParams() {\n  const { data: posts } = await supabase.from('posts').select('id')\n\n  return posts?.map(({ id }) => ({\n    id,\n  }))\n}\n\nexport default async function Post({ params: { id } }: { params: { id: string } }) {\n  const { data: post } = await supabase.from('posts').select().match({ id }).single()\n\n  if (!post) {\n    notFound()\n  }\n\n  return <pre>{JSON.stringify(post, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication in RedwoodJS with Supabase\nDESCRIPTION: React component that implements email-based magic link authentication using Supabase in a RedwoodJS application. It handles user input and authentication state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { useAuth } from '@redwoodjs/auth'\n\nconst Auth = () => {\n  const { logIn } = useAuth()\n  const [loading, setLoading] = useState(false)\n  const [email, setEmail] = useState('')\n\n  const handleLogin = async (email) => {\n    try {\n      setLoading(true)\n      const { error } = await logIn({ email })\n      if (error) throw error\n      alert('Check your email for the login link!')\n    } catch (error) {\n      alert(error.error_description || error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"row flex-center flex\">\n      <div className=\"col-6 form-widget\">\n        <h1 className=\"header\">Supabase + RedwoodJS</h1>\n        <p className=\"description\">Sign in via magic link with your email below</p>\n        <div>\n          <input\n            className=\"inputField\"\n            type=\"email\"\n            placeholder=\"Your email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </div>\n        <div>\n          <button\n            onClick={(e) => {\n              e.preventDefault()\n              handleLogin(email)\n            }}\n            className={'button block'}\n            disabled={loading}\n          >\n            {loading ? <span>Loading</span> : <span>Send magic link</span>}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Auth\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Function\nDESCRIPTION: Command to generate a new Edge Function for text-to-speech functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new text-to-speech\n```\n\n----------------------------------------\n\nTITLE: Creating Stable Function for JWT Validation in SQL\nDESCRIPTION: Defines a stable PostgreSQL function to check if the JWT is from the correct Supabase or Firebase project, useful for managing complex RLS policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.is_supabase_or_firebase_project_jwt()\n  returns bool\n  language sql\n  stable\n  returns null on null input\n  return (\n    (auth.jwt()->>'iss' = 'https://<project-ref>.supabase.co/auth/v1')\n    or\n    (\n        auth.jwt()->>'iss' = concat('https://securetoken.google.com/<firebase-project-id>')\n        and\n        auth.jwt()->>'aud' = '<firebase-project-id>'\n     )\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Update Trigger Function\nDESCRIPTION: Implements an auto-updating updated_at column using a PL/pgSQL function and trigger combination.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION set_updated_at()\nRETURNS TRIGGER AS $$\nBEGIN\n  new.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER handle_updated_at\n  BEFORE UPDATE ON students\n  FOR EACH ROW\n  EXECUTE PROCEDURE set_updated_at();\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Index with MD5 Hashing\nDESCRIPTION: SQL command to create a functional index using MD5 hashing for large column values that exceed B-tree size limits.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-index-row-size-exceeds-btree-version-4-maximum-for-index-LMmoeU.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON table_name(MD5(column_name));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Claims JSON Structure\nDESCRIPTION: Example of a JSON structure for custom claims, including user role, plan, level, and other attributes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_role\": \"admin\",\n  \"plan\": \"TRIAL\",\n  \"user_level\": 100,\n  \"group_name\": \"Super Guild!\",\n  \"joined_on\": \"2022-05-20T14:28:18.217Z\",\n  \"group_manager\": false,\n  \"items\": [\"toothpick\", \"string\", \"ring\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Token Secret for Supabase Edge Function\nDESCRIPTION: Command to set the SLACK_TOKEN secret in your Supabase project using the CLI. This token is required for authenticating with the Slack API.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/slack-bot-mention/slack-bot-mention.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --project-ref nacho_slacker secrets \\\nset SLACK_TOKEN=<xoxb-0000000000-0000000000-01010101010nacho101010>\n```\n\n----------------------------------------\n\nTITLE: Initializing Kysely Query Builder with Vercel Postgres in TypeScript\nDESCRIPTION: Configures Kysely query builder for Vercel Postgres, defining a users table interface and creating a database connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres/serverless-drivers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Generated, ColumnType } from 'kysely'\nimport { createKysely } from '@vercel/postgres-kysely'\n\ninterface UserTable {\n  id: Generated<number>\n  name: string\n  email: string\n  image: string\n  createdAt: ColumnType<Date, string | undefined, never>\n}\n\nexport interface Database {\n  users: UserTable\n}\n\nexport const db = createKysely<Database>()\nexport { sql } from 'kysely'\n```\n\n----------------------------------------\n\nTITLE: Inserting Channel Data into Supabase\nDESCRIPTION: SQL insert commands to add public and private channels to the 'slack_channels' table in Supabase, specifying source and destination channels.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into slack_channels\n  (channel, channel_id, p_level, dest_channel, dest_channel_id, private)\nvalues\n  ('support-channel', 'C0000ABC02DE', 'Support msgs', 'all_them_messages', 'C0000ABC02DF', 0);\n```\n\nLANGUAGE: sql\nCODE:\n```\ninsert into slack_channels\n  (channel, channel_id, p_level, dest_channel, dest_channel_id, private)\nvalues\n  (\n    'support-enterprise',\n    'C0000ABC02DC',\n    'Enterprise Support msgs',\n    'all_them_messages',\n    'C0000ABC02DF',\n    1\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Instruments Table and Inserting Sample Data in SQL\nDESCRIPTION: This SQL snippet creates an 'instruments' table with an auto-incrementing ID and a name column. It then inserts sample data for violin, viola, and cello. Finally, it enables row-level security on the table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/quickstart_db_setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the table\ncreate table instruments (\n  id bigint primary key generated always as identity,\n  name text not null\n);\n-- Insert some sample data into the table\ninsert into instruments (name)\nvalues\n  ('violin'),\n  ('viola'),\n  ('cello');\n\nalter table instruments enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Signing In with Twitter OAuth - Flutter\nDESCRIPTION: This Flutter code snippet shows how to implement Twitter OAuth login using the Supabase client. It calls the signInWithOAuth method, specifying OAuthProvider.twitter as the provider. It includes optional parameters for redirecting the user after authentication and launching the authentication screen.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithTwitter() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.twitter,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Versioning Supabase CLI Documentation\nDESCRIPTION: Command to create a new version of the CLI documentation when releasing a new version. This example shows how to generate documentation for CLI version 1.0.1.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli:version 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Login Component Implementation for Magic Link Authentication\nDESCRIPTION: Angular component that handles the magic link login UI and logic, including email input handling and loading state management using NgxSpinner.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Router } from '@angular/router'\nimport { AuthService } from './../../services/auth.service'\nimport { Component, OnInit } from '@angular/core'\nimport { NgxSpinnerService } from 'ngx-spinner'\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  email = ''\n  linkSuccess = false\n\n  constructor(\n    private auth: AuthService,\n    private spinner: NgxSpinnerService,\n    private router: Router\n  ) {\n    this.auth.currentUser.subscribe((user) => {\n      if (user) {\n        this.router.navigateByUrl('/workspace', { replaceUrl: true })\n      }\n    })\n  }\n\n  ngOnInit(): void {}\n\n  async signIn() {\n    this.spinner.show()\n    const result = await this.auth.signInWithEmail(this.email)\n\n    this.spinner.hide()\n    if (!result.error) {\n      this.linkSuccess = true\n    } else {\n      alert(result.error.message)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prebuilding React Native project for file picker functionality\nDESCRIPTION: Command to prebuild the React Native project which is required for the file picker functionality to work properly.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/expo-user-management/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prebuild\n```\n\n----------------------------------------\n\nTITLE: Creating Main UI Widget for Uber Clone in Flutter\nDESCRIPTION: This snippet defines a StatefulWidget called UberCloneMainScreen that serves as the main interface for the Uber clone app. It manages different app states, handles map interactions, and displays UI elements based on the current state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass UberCloneMainScreen extends StatefulWidget {\n  const UberCloneMainScreen({super.key});\n\n  @override\n  UberCloneMainScreenState createState() => UberCloneMainScreenState();\n}\n\nclass UberCloneMainScreenState extends State<UberCloneMainScreen> {\n  AppState _appState = AppState.choosingLocation;\n  GoogleMapController? _mapController;\n\n  /// The default camera position is arbitrarily set to San Francisco.\n  CameraPosition _initialCameraPosition = const CameraPosition(\n    target: LatLng(37.7749, -122.4194),\n    zoom: 14.0,\n  );\n\n  /// The selected destination by the user.\n  LatLng? _selectedDestination;\n\n  /// The current location of the user.\n  LatLng? _currentLocation;\n\n  final Set<Polyline> _polylines = {};\n  final Set<Marker> _markers = {};\n\n  /// Fare in cents\n  int? _fare;\n  StreamSubscription<dynamic>? _driverSubscription;\n  StreamSubscription<dynamic>? _rideSubscription;\n  Driver? _driver;\n\n  LatLng? _previousDriverLocation;\n  BitmapDescriptor? _pinIcon;\n  BitmapDescriptor? _carIcon;\n\n  @override\n  void initState() {\n    super.initState();\n    _signInIfNotSignedIn();\n    _checkLocationPermission();\n    _loadIcons();\n  }\n\n  @override\n  void dispose() {\n    _cancelSubscriptions();\n    super.dispose();\n  }\n\n  // TODO: Add missing methods\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(_getAppBarTitle()),\n      ),\n      body: Stack(\n        children: [\n          _currentLocation == null\n              ? const Center(child: CircularProgressIndicator())\n              : GoogleMap(\n                  initialCameraPosition: _initialCameraPosition,\n                  onMapCreated: (GoogleMapController controller) {\n                    _mapController = controller;\n                  },\n                  myLocationEnabled: true,\n                  onCameraMove: _onCameraMove,\n                  polylines: _polylines,\n                  markers: _markers,\n                ),\n          if (_appState == AppState.choosingLocation)\n            Center(\n              child: Image.asset(\n                'assets/images/center-pin.png',\n                width: 96,\n                height: 96,\n              ),\n            ),\n        ],\n      ),\n      floatingActionButton: _appState == AppState.choosingLocation\n          ? FloatingActionButton.extended(\n              onPressed: _confirmLocation,\n              label: const Text('Confirm Destination'),\n              icon: const Icon(Icons.check),\n            )\n          : null,\n      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,\n      bottomSheet: _appState == AppState.confirmingFare ||\n              _appState == AppState.waitingForPickup\n          ? Container(\n              width: MediaQuery.of(context).size.width,\n              padding: const EdgeInsets.all(16)\n                  .copyWith(bottom: 16 + MediaQuery.of(context).padding.bottom),\n              decoration: BoxDecoration(\n                color: Colors.white,\n                boxShadow: [\n                  BoxShadow(\n                    color: Colors.grey.withOpacity(0.5),\n                    spreadRadius: 5,\n                    blurRadius: 7,\n                    offset: const Offset(0, 3),\n                  ),\n                ],\n              ),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  if (_appState == AppState.confirmingFare) ...[]\n                  if (_appState == AppState.waitingForPickup &&\n                      _driver != null) ...[]\n                ],\n              ),\n            )\n          : const SizedBox.shrink(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Functions Configuration - TOML\nDESCRIPTION: Configuration settings for Edge Functions in config.toml file, including JWT verification and import map settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/development-tips.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[functions.hello-world]\nverify_jwt = false\nimport_map = './import_map.json'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Database\nDESCRIPTION: The provided database connection strings demonstrate how to connect to the Supabase PostgreSQL database for both session-based and pooled transactions. Ensure to replace placeholders with actual tenant ID and password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npsql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:5432/postgres'\n```\n\nLANGUAGE: bash\nCODE:\n```\npsql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:6543/postgres'\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Auth UI Package with Flutter\nDESCRIPTION: Command to add the supabase-auth-ui package to a Flutter project using pub.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add supabase_auth_ui\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Presence Key in Kotlin\nDESCRIPTION: This snippet illustrates how to set a custom presence key while creating a channel in Kotlin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval channelC = supabase.channel(\"test\") {\n    presence {\n        key = \"userId-123\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert with Default Values Example\nDESCRIPTION: JavaScript example showing how to perform bulk insert while respecting default values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst { error } = await supabase\n  .from('foo')\n  .insert([\n\t  { \"bar\": \"val1\"\n\t  }\n\t, { \"bar\": \"val2\"\n\t  , \"baz\": 15\n\t  }\n\t], defaultToNull: false)\n  .select()\n```\n\n----------------------------------------\n\nTITLE: Installing Python dependencies with Poetry\nDESCRIPTION: Command to add required Python packages to the project using Poetry: vecs for vector operations, boto3 for AWS integration, and matplotlib for image visualization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npoetry add vecs boto3 matplotlib\n```\n\n----------------------------------------\n\nTITLE: Adding SAML Connection with Metadata File (Supabase CLI)\nDESCRIPTION: This command adds a SAML 2.0 Identity Provider connection to Supabase Auth using a local SAML metadata XML file with the Supabase CLI. It requires specifying the path to the metadata file. It also uses project reference and optionally, the email domains associated with the organization's IdP. The command registers a new identity provider with the project's Auth server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase sso add --type saml --project-ref <your-project> \\\n  --metadata-file /path/to/saml/metadata.xml \\\n  --domains company.com\"\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Realtime Events in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to subscribe to realtime events from a Supabase database within a Remix application.  It utilizes the `supabase` client from the `useOutletContext` hook to establish a channel and listen for `INSERT` events on the `posts` table. When a new post is inserted, the state is updated to reflect the change.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLoaderData, useOutletContext } from '@remix-run/react'\nimport { createServerClient } from '@supabase/auth-helpers-remix'\nimport { json } from '@remix-run/node'\nimport { useEffect, useState } from 'react'\n\nexport const loader = async ({ request }) => {\n  const response = new Response()\n  const supabase = createServerClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY, {\n    request,\n    response,\n  })\n\n  const { data } = await supabase.from('posts').select()\n\n  return json({ serverPosts: data ?? [] }, { headers: response.headers })\n}\n\nexport default function Index() {\n  const { serverPosts } = useLoaderData()\n  const [posts, setPosts] = useState(serverPosts)\n  const { supabase } = useOutletContext()\n\n  useEffect(() => {\n    setPosts(serverPosts)\n  }, [serverPosts])\n\n  useEffect(() => {\n    const channel = supabase\n      .channel('*')\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'posts' }, (payload) =>\n        setPosts([...posts, payload.new])\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [supabase, posts, setPosts])\n\n  return <pre>{JSON.stringify(posts, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client with KotlinX Serialization\nDESCRIPTION: Creates a Supabase client using KotlinX Serialization, which is the default serializer. This example demonstrates how to provide a custom Json instance with custom configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    //Already the default serializer, but you can provide a custom Json instance (optional):\n    defaultSerializer = KotlinXSerializer(Json {\n        //apply your custom config\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Realtime Cursors Component in a Room (React)\nDESCRIPTION: This snippet demonstrates how to utilize the Realtime Cursors component in a React application. It sets up a basic page that grants the added functionality of sharing cursor positions among users in the same room, identified by a unique name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeCursors } from '@/components/realtime-cursors'\n\nexport default function Page() {\n  return (\n    <div className=\"w-full min-h-screen\">\n      <RealtimeCursors roomName=\"macrodata_refinement_office\" username=\"Mark Scout\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling pgTAP Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and disable the pgTAP extension in PostgreSQL. The extension is created in a separate schema to keep the public schema clean.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pgtap\" extension\ncreate extension pgtap with schema extensions;\n\n-- Disable the \"pgtap\" extension\ndrop extension if exists pgtap;\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Edge Function for Push Notifications\nDESCRIPTION: Commands to link local Supabase project to remote and deploy the push notification function without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Link your local Supabase project to the remote Supabase project\nsupabase link\n# Deploy the function\nsupabase functions deploy push --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Launching Flutter App via Command Line\nDESCRIPTION: Commands to run the Flutter application on different platforms. The first command launches the app on Android or iOS devices, while the second command launches it on a web server with specific host and port configurations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d web-server --web-hostname localhost --web-port 3000\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase with Clerk in Flutter\nDESCRIPTION: This snippet shows how to initialize Supabase in a Flutter application using Clerk for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:clerk_flutter/clerk_flutter.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n...\n\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n  accessToken: () async {\n    final token = await ClerkAuth.of(context).sessionToken();\n    return token.jwt;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP for Supabase in Various AI Tools\nDESCRIPTION: JSON configuration for connecting Supabase to different AI tools using the Model Context Protocol (MCP). This snippet is a placeholder for the actual configuration, which is included via a partial template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/mcp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n<$Partial path=\"mcp_supabase_config.mdx\" variables={{ \"app\": \"Cursor\" }} />\n```\n\n----------------------------------------\n\nTITLE: Granting Access to Private Schemas in Supabase\nDESCRIPTION: SQL command to grant SELECT permissions on tables in private schemas to authenticated roles, allowing Realtime monitoring of changes in those tables. It's recommended to enable RLS and create policies for these tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\ngrant select on \"non_private_schema\".\"some_table\" to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Protobuf Node Definition\nDESCRIPTION: Example protobuf definition for an A_Expr node showing field structure\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage A_Expr\n{\n  A_Expr_Kind kind = 1 [json_name=\"kind\"];\n  repeated Node name = 2 [json_name=\"name\"];\n  Node lexpr = 3 [json_name=\"lexpr\"];\n  Node rexpr = 4 [json_name=\"rexpr\"];\n  int32 location = 5 [json_name=\"location\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Statement Cost Limits for Different Roles\nDESCRIPTION: SQL commands to set different cost limits for database roles using pg_plan_filter extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER anon SET plan_filter.statement_cost_limit = 10000;\n\nALTER USER authenticated SET plan_filter.statement_cost_limit = 1e6;\n\nALTER USER service_role SET plan_filter.statement_cost_limit = 0;\n\nNOTIFY pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Next.js Middleware Configuration in JavaScript\nDESCRIPTION: JavaScript middleware file for Next.js that intercepts and processes requests to handle authentication session updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { updateSession } from '@/utils/supabase/middleware'\n\nexport async function middleware(request) {\n  // update user's auth session\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)'\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Token Secret for Edge Function in Supabase CLI\nDESCRIPTION: Sets the SLACK_TOKEN environment variable for the Edge function using the Supabase CLI. This token is required for authenticating with the Slack API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/slack-bot-mention.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --project-ref nacho_slacker secrets \\\nset SLACK_TOKEN=<xoxb-0000000000-0000000000-01010101010nacho101010>\n```\n\n----------------------------------------\n\nTITLE: Implementing SAML RLS Policy in Postgres\nDESCRIPTION: SQL command to create a row-level security policy that restricts user invitations to developers within the same organization using SAML provider ID from JWT claims.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-17-what-is-saml-authentication.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Can only invite developers in the same organization\"\non invited_users\nas restrictive\nfor insert\nwith check (\n\tsso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')\n);\n```\n\n----------------------------------------\n\nTITLE: Querying View in PostgreSQL\nDESCRIPTION: Shows how to query the created view to retrieve all records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect * from transcripts;\n```\n\n----------------------------------------\n\nTITLE: Running Edge Function Tests with Deno\nDESCRIPTION: Command to execute the Edge Function tests using Deno's test runner, granting all necessary permissions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndeno test --allow-all supabase/functions/tests/function-one-test.ts\n```\n\n----------------------------------------\n\nTITLE: Syncing and Tracking State in Swift\nDESCRIPTION: This snippet demonstrates how to listen for presence changes in Swift, observing the join and leave events in a channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet roomOne = await supabase.channel(\"room_01\")\nlet presenceStream = await roomOne.presenceChange()\n\nawait roomOne.subscribe()\n\nfor await presence in presenceStream {\n  print(presence.join) // You can also use presence.decodeJoins(as: MyType.self)\n  print(presence.leaves) // You can also use presence.decodeLeaves(as: MyType.self)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Schema and Private Tables\nDESCRIPTION: Creates a private schema and demonstrates creating tables within that schema with references to public tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate schema private;\n\ncreate table private.salaries (\n  id bigint generated by default as identity primary key,\n  salary bigint not null,\n  actor_id bigint not null references public.actors\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Login Roles\nDESCRIPTION: SQL commands to create new database roles with login privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> create role junior_dev login password 'a long and secure password';\nCREATE ROLE\npostgres=> create role senior_dev login password 'another long and secure password';\nCREATE ROLE\n```\n\n----------------------------------------\n\nTITLE: Ranking Recommendations Using SQL\nDESCRIPTION: This snippet demonstrates how to rank recommendation results using an ORDER BY clause. It assumes the pgr_dijkstra() results are stored in a table called 'recommendations' and joins with the videos table to get the titles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect videos.title, sum(weight) as recommendation_score\nfrom\n  recommendations\n  join videos on recommendations.target = videos.id\ngroup by videos.title\norder by recommendation_score desc;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Database URI Format\nDESCRIPTION: Example connection string format for connecting to a Supabase Postgres database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgres://[USER].[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-SUBDOMAIN].pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Querying Total Database Size in Postgres\nDESCRIPTION: This SQL query calculates and displays the total size of all databases in the Postgres cluster using the pg_size_pretty and pg_database_size functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  pg_size_pretty(sum(pg_database_size(pg_database.datname)))\nfrom pg_database;\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Access for Client Queries\nDESCRIPTION: SQL command to grant usage permissions on the GIS schema to anonymous and authenticated users. This is necessary for client applications to access the PostGIS functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ngrant usage on schema gis to anon, authenticated;\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Movies Table\nDESCRIPTION: This SQL snippet creates a 'movies' table with an auto-incrementing id, a required name field, and an optional JSON data field.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.movies (\n  id bigint generated always as identity primary key,\n  name text not null,\n  data jsonb null\n);\n```\n\n----------------------------------------\n\nTITLE: Link OAuth Identity to Anonymous User in Kotlin\nDESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Kotlin. This converts an anonymous user to a permanent user by associating it with the OAuth identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.linkIdentity(Google)\n```\n\n----------------------------------------\n\nTITLE: Signing In with Azure in Supabase (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to authenticate users using Azure OAuth in a Supabase application. The `signInWith` method is invoked with the Azure provider, requesting the email scope.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithAzure() {\n    supabase.auth.signInWith(Azure) {\n        scopes.add(\"email\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Before Insert Trigger in PostgreSQL\nDESCRIPTION: This SQL snippet shows how to create a trigger that executes before an insert operation on the 'orders' table. It demonstrates the syntax for a 'BEFORE' trigger.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger before_insert_trigger\nbefore insert on orders\nfor each row\nexecute function before_insert_function();\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Environment Setup\nDESCRIPTION: Python code to import necessary libraries and set up environment variables for Supabase and Mixpeek integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom supabase import create_client, Client\nfrom mixpeek import Mixpeek\nimport os\n\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_KEY = os.getenv(\"SUPABASE_API_KEY\")\nMIXPEEK_API_KEY = os.getenv(\"MIXPEEK_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Creating Token Exchange Endpoint in Next.js for Supabase Auth\nDESCRIPTION: Implementation of a Next.js API route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and redirects users accordingly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type EmailOtpType } from '@supabase/supabase-js'\nimport { cookies } from 'next/headers'\nimport { NextRequest, NextResponse } from 'next/server'\n// The client you created from the Server-Side Auth instructions\nimport { createClient } from '@/utils/supabase/server'\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url)\n  const token_hash = searchParams.get('token_hash')\n  const type = searchParams.get('type') as EmailOtpType | null\n  const next = searchParams.get('next') ?? '/'\n  const redirectTo = request.nextUrl.clone()\n  redirectTo.pathname = next\n\n  if (token_hash && type) {\n    const supabase = await createClient()\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    })\n    if (!error) {\n      return NextResponse.redirect(redirectTo)\n    }\n  }\n\n  // return the user to an error page with some instructions\n  redirectTo.pathname = '/auth/auth-code-error'\n  return NextResponse.redirect(redirectTo)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Max Connections Setting in PostgreSQL\nDESCRIPTION: SQL query to check the current max_connections setting in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-change-max-database-connections-_BQ8P5.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW max_connections;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit RLS Policy in SQL Queries\nDESCRIPTION: Shows how a Row Level Security policy is implicitly added to SQL queries, effectively filtering results to only include rows where the authenticated user ID matches the user_id column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom todos\nwhere auth.uid() = todos.user_id; -- Policy is implicitly added.\n```\n\n----------------------------------------\n\nTITLE: Launching Supabase Bootstrap via CLI\nDESCRIPTION: Command to initiate the Supabase Bootstrap process using npx. This command allows users to create a new Supabase project from existing starter templates without installing the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-bootstrap.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase bootstrap\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Returning - Dart Supabase\nDESCRIPTION: Shows updated method for inserting data and retrieving inserted records in Supabase Dart library\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = await supabase\n  .from('my_table')\n  .insert(data)\n  .execute();\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal insertedData = await supabase.from('my_table').insert(data).select();\n```\n\n----------------------------------------\n\nTITLE: Filtering for Specific Changes in JavaScript with Supabase Realtime\nDESCRIPTION: Creates a channel that listens for INSERT events on the 'todos' table with a specific filter. The filter parameter 'id=eq.1' ensures only changes where id equals 1 are monitored.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst changes = supabase\n  .channel('table-filter-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'todos',\n      filter: 'id=eq.1',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy with NullPool\nDESCRIPTION: Python code showing how to configure SQLAlchemy with NullPool for transaction mode connections, which is recommended for auto-scaling deployments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.pool import NullPool\n\ncon = sqlalchemy.create_engine(url, client_encoding='utf8', poolclass=NullPool)\n```\n\n----------------------------------------\n\nTITLE: Querying JSONB Data in PostgreSQL\nDESCRIPTION: Demonstrates how to query JSONB data type using the arrow operator to access specific fields within a JSON object stored in a grades column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from students where grades->>'geography' = 'A';\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Bucket with SQL\nDESCRIPTION: Creates a public storage bucket named 'avatars' using direct SQL insertion into the storage.buckets table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into storage.buckets\n  (id, name, public)\nvalues\n  ('avatars', 'avatars', true);\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation in Kotlin\nDESCRIPTION: Logout method to remove user session and clear local storage in Supabase authentication for Kotlin\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Link Email to Anonymous User in Swift\nDESCRIPTION: Updates an anonymous user to add an email address in Supabase using Swift. This begins the process of converting an anonymous user to a permanent user by linking an email identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.updateUser(\n  user: UserAttributes(email: \"valid.email@supabase.io\")\n)\n```\n\n----------------------------------------\n\nTITLE: Updating signIn with email and password in TypeScript\nDESCRIPTION: Example of how to update the signIn method for email and password authentication in supabase-js v2. The new version uses signInWithPassword and has a slightly different return structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data: { user },\n  error,\n} = await supabase\n  .auth\n  .signInWithPassword({ email, password })\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase and Slack\nDESCRIPTION: YAML configuration for environment variables, including Supabase URL and key, Slack tokens, and organization subdomain.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSUPABASE_URL=https://XXXX.supabase.co\nSUPABASE_KEY=eyJhbGc_SUP4N4CH0_IkpXVCJ9.SUPAKEY_*\nSLACK_TOKEN=xoxp-Slack_PERSON_TOKEN\nSLACK_BOT_TOKEN=xoxb-Slack_BOT_TOKEN\nSLACK_ORG=slack_sub_domain\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication on Supabase Database for Logical Replication\nDESCRIPTION: Creates a publication named 'example_pub' on the Supabase database, which will be used to publish changes that can be consumed by subscribers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PUBLICATION example_pub;\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Request SQL Function for Supabase Edge Functions\nDESCRIPTION: This SQL function handles HTTP requests with customizable parameters and ensures consistent response formatting. It's used as a helper function for dynamic JavaScript execution in Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION edge.http_request(\n    url TEXT,\n    method TEXT DEFAULT 'POST',\n    headers JSONB DEFAULT '{\"Content-Type\": \"application/json\"}'::jsonb,\n    params JSONB DEFAULT '{}'::jsonb,\n    payload JSONB DEFAULT '{}'::jsonb,\n    timeout_ms INTEGER DEFAULT 5000\n) RETURNS jsonb AS $$\nDECLARE\n    http_response extensions.http_response;\n    status_code integer := 0;\n    response_json jsonb;\n    response_text text;\n    header_array extensions.http_header[];\n    request extensions.http_request;\nBEGIN\n    -- Set the timeout option\n    IF timeout_ms > 0 THEN\n        PERFORM http_set_curlopt('CURLOPT_TIMEOUT_MS', timeout_ms::text);\n    END IF;\n\n    -- Convert headers JSONB to http_header array\n    SELECT array_agg(extensions.http_header(key, value::text))\n    FROM jsonb_each_text(headers)\n    INTO header_array;\n\n    -- Construct the http_request composite type\n    request := ROW(method, url, header_array, 'application/json', payload::text)::extensions.http_request;\n\n    -- Make the HTTP request\n    http_response := http(request);\n    status_code := http_response.status;\n\n    -- Attempt to extract JSONB response content\n    BEGIN\n        response_json := http_response.content::jsonb;\n    EXCEPTION\n        WHEN others THEN\n            response_text := http_response.content;\n            response_json := jsonb_build_object('status_code', status_code, 'response', response_text);\n    END;\n\n    RETURN jsonb_build_object('status_code', status_code, 'response', response_json);\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index with Euclidean Distance in SQL\nDESCRIPTION: Creates an HNSW index on a vector column using Euclidean L2 distance operator class. This index type is suitable for vector similarity search using Euclidean distance metrics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/hnsw-indexes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using hnsw (column_name vector_l2_ops);\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation in JavaScript\nDESCRIPTION: Method to sign out users and clear browser session and local storage in a JavaScript Supabase application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Use Case Cards with React/JSX\nDESCRIPTION: Renders a grid of use case cards using React components and map function. Each card displays AI, payments and gallery examples with icons and descriptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n    {\n      title: 'AI, Vectors, and embeddings',\n      href: '/guides/ai#examples',\n      description: `Build AI-enabled applications using our Vector toolkit.`,\n      icon: '/docs/img/icons/openai_logo',\n      hasLightIcon: true,\n    },\n    {\n      title: 'Subscription Payments (SaaS)',\n      href: 'https://github.com/vercel/nextjs-subscription-payments#nextjs-subscription-payments-starter',\n      description: `Clone, deploy, and fully customize a SaaS subscription application with Next.js.`,\n      icon: '/docs/img/icons/nextjs-icon',\n    },\n    {\n      title: 'Partner Gallery',\n      href: 'https://github.com/supabase-community/partner-gallery-example#supabase-partner-gallery-example',\n      description: `Postgres full-text search, image storage, and more.`,\n      icon: '/docs/img/icons/nextjs-icon',\n    },\n  ].map((item) => {\n    return (\n      <Link href={`${item.href}`} key={item.title} passHref className={'col-span-4'}>\n        <GlassPanel\n          title={item.title}\n          span=\"col-span-6\"\n          background={false}\n          icon={item.icon}\n          hasLightIcon={item.hasLightIcon}\n        >\n          {item.description}\n        </GlassPanel>\n      </Link>\n    )\n  })}\n```\n\n----------------------------------------\n\nTITLE: Creating a refine app with Supabase preset\nDESCRIPTION: Command to create a new refine application with the Supabase preset, which includes the @refinedev/supabase package that supports Supabase integration out-of-the-box.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create refine-app@latest -- --preset refine-supabase my-app\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Messaging App with SQL\nDESCRIPTION: SQL script to create three tables: users for tracking registered users, groups for chat groups, and messages for all app messages. The tables include relationships with foreign key constraints and default timestamps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users (\n  id uuid not null primary key,\n  email text\n);\n\ncreate table groups (\n  id bigint generated by default as identity primary key,\n  creator uuid references public.users not null default auth.uid(),\n  title text not null,\n  created_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n\ncreate table messages (\n  id bigint generated by default as identity primary key,\n  user_id uuid references public.users not null default auth.uid(),\n  text text check (char_length(text) > 0),\n  group_id bigint references groups on delete cascade not null,\n  created_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Seed Script for Instrument Data\nDESCRIPTION: TypeScript seed script to populate the Instrument table with initial data using Prisma client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Prisma } from '@prisma/client'\nimport { db } from 'api/src/lib/db'\n\nexport default async () => {\n  try {\n    const data: Prisma.InstrumentCreateArgs['data'][] = [\n      { name: 'dulcimer' },\n      { name: 'harp' },\n      { name: 'guitar' },\n    ]\n\n    console.log('Seeding instruments ...')\n\n    const instruments = await db.instrument.createMany({ data })\n\n    console.log('Done.', instruments)\n  } catch (error) {\n    console.error(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Schema Migration\nDESCRIPTION: Comprehensive auto-generated SQL migration script for creating employees table with all necessary permissions and constraints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- This script was generated by the Schema Diff utility in pgAdmin 4\n-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated\n-- and may require manual changes to the script to ensure changes are applied in the correct order.\n-- Please report an issue for any failure with the reproduction steps.\n\nCREATE TABLE IF NOT EXISTS public.employees\n(\n    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n    name text COLLATE pg_catalog.\"default\",\n    CONSTRAINT employees_pkey PRIMARY KEY (id)\n)\n\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS public.employees\n    OWNER to postgres;\n\nGRANT ALL ON TABLE public.employees TO anon;\n\nGRANT ALL ON TABLE public.employees TO authenticated;\n\nGRANT ALL ON TABLE public.employees TO postgres;\n\nGRANT ALL ON TABLE public.employees TO service_role;\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client with Moshi Serializer\nDESCRIPTION: Creates a Supabase client using Moshi as the serialization library. This example shows how to set MoshiSerializer as the default serializer for the client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = MoshiSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Function with Associated Trigger\nDESCRIPTION: A PostgreSQL trigger function that updates a timestamp column automatically before updates, including the trigger creation statement.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function my_schema.update_updated_at()\nreturns trigger\nlanguage plpgsql\nsecurity invoker\nset search_path = ''\nas $$\nbegin\n  -- Update the \"updated_at\" column on row modification\n  new.updated_at := now();\n  return new;\nend;\n$$;\n\ncreate trigger update_updated_at_trigger\nbefore update on my_schema.my_table\nfor each row\nexecute function my_schema.update_updated_at();\n```\n\n----------------------------------------\n\nTITLE: Setting up Supabase Client with Clerk in TypeScript\nDESCRIPTION: This code demonstrates how to initialize the Supabase client using Clerk's session token for authentication in a TypeScript environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n  accessToken: () => {\n    return Clerk.session?.getToken()\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Data with RLS Policies Applied\nDESCRIPTION: Performs a vector similarity search on document sections that automatically respects Row Level Security. Only document sections owned by the current user will be returned due to the RLS policy.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Only document sections owned by the user are returned\nselect *\nfrom document_sections\nwhere document_sections.embedding <#> embedding < -match_threshold\norder by document_sections.embedding <#> embedding;\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in PostgreSQL\nDESCRIPTION: This SQL snippet enables the pgvector extension in the PostgreSQL database, which is required for vector operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension vector\nwith\n  schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Function and Trigger for User Profile in SQL\nDESCRIPTION: SQL commands to create a database function and trigger that automatically adds an entry to public.profiles whenever a new user is created. This ensures that user profiles are maintained alongside user authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION insert_user() RETURNS TRIGGER AS\n$$\n  BEGIN\n    INSERT INTO public.profiles (id, email) VALUES (NEW.id, NEW.email); RETURN NEW;\n  END;\n$$ LANGUAGE plpgsql\n   SECURITY DEFINER\n   SET search_path = public;\n\nCREATE OR REPLACE TRIGGER \"on_new_auth_create_profile\"\nAFTER INSERT ON auth.users FOR EACH ROW\nEXECUTE FUNCTION insert_user();\n\nGRANT EXECUTE ON FUNCTION insert_user () TO supabase_auth_admin;\nGRANT INSERT ON TABLE public.profiles TO supabase_auth_admin;\n```\n\n----------------------------------------\n\nTITLE: Advanced Retry Configuration with Custom Logic\nDESCRIPTION: Implementation of fine-tuned retry logic with custom conditions for specific API endpoints\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchWithRetry = fetchRetry(fetch, {\n  retryDelay: (attempt) => Math.min(1000 * 2 ** attempt, 30000),\n  retryOn: (attempt, error, response) => {\n    const shouldRetry\n      = (attempt: number, error: Error | null, response: Response | null) =>\n        attempt < 3\n          && response\n          && response.status == 520 // Cloudflare errors\n          && response.url.includes('rpc/your_stored_procedure')\n\n    if (shouldRetry(attempt, error, response)) {\n      console.log(`Retrying request... Attempt #${attempt}`, response)\n      return true\n    }\n\n    return false\n  }\n})\n\nasync function yourStoredProcedure() {\n  const { data, error } = await supabase\n    .rpc('your_stored_procedure', { param1: 'value1' });\n\n  if (error) {\n    console.log('Error executing RPC:', error);\n  } else {\n    console.log('Response:', data);\n  }\n}\n\nyourStoredProcedure();\n```\n\n----------------------------------------\n\nTITLE: Basic EXPLAIN ANALYZE Output Example\nDESCRIPTION: Sample output of EXPLAIN ANALYZE showing sequential scan performance metrics including actual execution time and filter results.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSeq Scan on users  (cost=0.00..19.00 rows=1 width=240) (actual time=0.026..0.026 rows=1 loops=1)\n  Filter: (user_id = 1)\n  Rows Removed by Filter: 999\nPlanning Time: 0.135 ms\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch Sign-In Code in Flutter\nDESCRIPTION: This snippet provides the implementation of the Twitch sign-in functionality using the Supabase Flutter client. It shows the use of signInWithOAuth with Twitch as the provider and includes options for redirect URLs and launch modes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithTwitch() async {\\n  await supabase.auth.signInWithOAuth(\\n    OAuthProvider.twitch,\\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\\n    authScreenLaunchMode:\\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Embeddings in JavaScript\nDESCRIPTION: A JavaScript function that seeds a database with pre-generated vector embeddings. This method executes a SQL query to insert a text value ('Bed') and its corresponding embedding vector into an 'embeddings' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// [...]\n\nexport const seedDb = async (db) => {\n  return await db.exec(`\n    insert into embeddings (content, embedding) values\n      ('Bed', '[-0.006822244,-0.0073390524,0.040399525,0.000736064,-0.009085903,0.03851906,0.040384453,0.046808533,0.042115353,0.0016632339,-0.0034933984,-0.08830318,0.010509381,0.058803126,-0.001959153,-0.015982354,0.0057063154,0.013070074,-0.047947004,0.049101133,0.04977712,-0.01529147,0.02679988,-0.016667083,0.02259381,-0.019300632,-0.022183467,-0.0524223,-0.05392063,-0.15442617,-0.016726814,-0.0046356786,-0.0033007693,-0.038389646,0.0034641414,-0.019414157,0.00530319,0.059465468,0.014079502,0.029850144,0.038306333,0.01192391,0.004093596,-0.08163046,-0.012357966,-0.006009865,-0.013621683,-0.02337859,0.08280816,0.010447533,0.03683234,-0.028687134,0.01815019,-0.008677378,0.042089492,0.05065854,0.07357729,0.011352438,0.034780625,0.09188656,0.017418442,0.064832725,-0.20041808,0.10360221,0.0671062,0.018502504,-0.09739072,-0.00019951521,0.022652537,0.06734662,-0.027538104,-0.016570838,0.015677454,0.053861156,0.048691154,-0.054969806,0.04112108,-0.04718161,0.025326118,-0.010980256,-0.007515454,-0.007403816,-0.042940833,-0.013452556,-0.028590562,-0.0272049,-0.018576223,-0.019168183,0.012477406,-0.010323304,-0.025437333,0.026618486,-0.04006101,0.052304097,-0.029081466,-0.020374913,-0.0058097104,0.0049184063,-0.025047028,0.24331976,-0.028509228,0.064583465,0.0582664,-0.008838904,0.029010272,-0.042640913,-0.023065887,0.0009429337,-0.03458494,0.031521663,-0.024115514,0.022468511,0.017324978,-0.021598602,0.057364237,-0.03622212,0.06522789,0.03643067,0.019802976,-0.03882662,-0.024954926,-0.00922944,0.026700335,0.0022999484,0.021236164,-0.1017225,0.034700826,0.10996454,0.015752304,-0.010611508,0.016026804,-0.008537629,-0.025187723,-0.011628215,-0.012928679,0.050661393,0.027768211,0.012645961,-0.014378526,-0.03122859,-0.054974407,-0.11988388,0.010854659,-0.113561414,-0.05754862,0.04890203,-0.074521095,0.042206623,-0.047778264,0.027690561,-0.02492779,0.04351375,-0.0042421916,-0.013825208,0.029148908,0.024689274,-0.0011065236,0.010749134,-0.02179892,0.030476885,0.005788956,-0.011307971,-0.029803434,0.047130115,-0.016205732,-0.07745564,-0.06069879,0.012738268,0.008780021,-0.04605315,0.05029989,0.051564094,-0.06556095,0.0097619705,0.07852359,0.03755774,6.385107e-05,-0.025080299,-0.00807334,0.002826086,0.029596226,-0.06858373,-0.059509,0.042350702,0.008429371,-0.056518193,-0.0038923442,0.0019655668,0.042615306,0.03156147,0.020491784,0.025043039,-0.014860392,-0.04517383,-0.05519179,-0.067039765,-0.01814679,-0.02211169,0.011379715,-0.038663853,0.074394055,-0.0033453933,-0.01922349,0.03422448,0.03382803,0.06018736,-0.040258747,-0.016005179,0.04973765,0.00047837297,-0.0032964202,-0.018018955,0.059821125,-0.02552337,-0.050962154,0.033526286,0.0015766671,0.0008125402,0.055109553,0.035740905,0.06790532,-0.10467817,-0.06608197,-0.22082354,0.04529764,0.04231412,-0.06357316,0.06083306,-0.03584259,-0.045060553,-0.034747567,-0.011515003,0.023540512,0.092857406,-0.015673747,-0.037912108,0.03791529,-0.027737431,0.075638145,0.064396635,0.00039346732,-0.054100823,-0.04585783,-0.013354809,-0.00029281477,-0.03531705,-0.013202513,0.025100702,-0.022423482,0.22803828,0.021944992,0.062074866,-0.033807088,0.063471064,0.058585603,-0.034941155,-0.153415,0.05968843,0.043823935,0.02648161,-0.035211023,-0.027928075,-0.08642302,-0.03428572,0.0782574,0.0048829336,-0.07674112,-0.014943502,-0.0026991852,-0.051111754,-0.02639702,-0.028578043,0.04409947,0.016471509,-0.0153481895,0.05080286,0.035896562,-0.026176613,-0.00410023,-0.054971956,0.0072062816,-0.010886078,0.03109176,0.0062575233,-0.059884343,0.03391246,-0.021350292,0.028362656,-0.03287903,-0.02909052,-0.054189354,0.040938597,-0.043358773,-0.0062902463,0.038029272,-0.017994935,-0.02783497,0.059119657,0.04149558,0.049971994,0.012019358,-0.034788415,-0.034991883,0.037606157,-0.07293067,0.00878965,0.020748338,0.006832928,0.014310711,0.0025819188,-0.026033923,0.063590325,-0.023910472,0.026275495,0.006421037,-0.025870698,-0.03395694,0.013277425,-0.017819595,-0.27904364,0.042438418,-0.040410627,0.060995445,-0.03024428,0.023125576,0.026820898,0.07209522,-0.045738053,0.021097308,0.018815981,0.048715215,-0.0140842525,0.01586625,-0.00600374,0.057657298,0.07749236,-0.04184785,0.04569934,-0.017640881,-0.03221387,0.040331382,0.23157857,-0.022834923,0.043734368,0.015736328,-0.018165922,0.04427944,0.031467006,0.0013029817,0.016038246,0.032582633,0.087903075,-0.0579502,0.034907967,0.056975555,-0.061623715,0.03723524,0.037153512,-0.059985436,-0.048163902,-0.005239113,-0.03370352,-0.024089405,0.082422175,-0.0325414,-0.021374922,-0.05650002,0.00010377556,-0.046514522,-0.061216045,-0.016242305,-0.02899706,0.020795047,0.03967546,0.003870585,-0.024333557,-0.022179967,-0.046025176,-0.026946675,-0.02249182,-0.07122435,-0.042746153,0.010575632,-0.0070871795]')`\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading Documentation File via cURL\nDESCRIPTION: Command to upload Postgres documentation PDF file to the datastore using the /upsert-file endpoint\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -F \"file=@./postgresql-15-US.pdf\" http://localhost:3333/upsert-file\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Definitions with Supabase Client\nDESCRIPTION: This code demonstrates how to use the generated TypeScript definitions when creating a Supabase client instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { Database } from './database.types'\n\nconst supabase = createClient<Database>(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_ANON_KEY\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Index for Vector Querying\nDESCRIPTION: Creates an index on the collection for efficient querying. Should be done after populating the collection with records.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# index the collection to be queried by cosine distance\ndocs.create_index(measure=vecs.IndexMeasure.cosine_distance)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase Connection\nDESCRIPTION: Setup of Supabase connection credentials in a .env file for React applications. Requires Supabase project URL and anonymous key for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Adding Search Functionality to InnerSideMenu in React\nDESCRIPTION: Code example showing how to implement a search input within the side menu using InnerSideBarFilters and InnerSideBarFilterSearchInput components. The search input includes state handling for the search term.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/inner-side-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<InnerSideBarFilters>\n  <InnerSideBarFilterSearchInput\n    name=\"search-input\"\n    placeholder=\"Search...\"\n    value={searchTerm}\n    onChange={(e) => setSearchTerm(e.target.value)}\n    aria-labelledby=\"Search items\"\n  />\n</InnerSideBarFilters>\n```\n\n----------------------------------------\n\nTITLE: Using Type Shorthands for Supabase Tables\nDESCRIPTION: Shows how to use type shorthands for accessing Supabase table types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Database, Tables, Enums } from \"./database.types.ts\";\n\n// Before 😕\nlet movie: Database['public']['Tables']['movies']['Row'] = // ...\n\n// After 😍\nlet movie: Tables<'movies'>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Daily PostgreSQL Backups with CRON\nDESCRIPTION: Command to create a CRON job that schedules physical backups to be performed automatically every day at midnight, improving recovery time by having more recent backups available.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"0 0 * * * postgres /usr/bin/envdir /etc/wal-g.d/env /usr/local/bin/wal-g backup-push /var/lib/postgresql/12/main\" > /etc/cron.d/pg_backup\n```\n\n----------------------------------------\n\nTITLE: Database Webhook Payload Type Definitions\nDESCRIPTION: TypeScript type definitions for the payload structure of Database Webhook events including INSERT, UPDATE, and DELETE operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype InsertPayload = {\n  type: 'INSERT'\n  table: string\n  schema: string\n  record: TableRecord<T>\n  old_record: null\n}\ntype UpdatePayload = {\n  type: 'UPDATE'\n  table: string\n  schema: string\n  record: TableRecord<T>\n  old_record: TableRecord<T>\n}\ntype DeletePayload = {\n  type: 'DELETE'\n  table: string\n  schema: string\n  record: null\n  old_record: TableRecord<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Side Layout Load Function for Session Management\nDESCRIPTION: Implements a server-side layout load function that retrieves and validates the user session, making it available to all routes in the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/+layout.server.ts\nimport type { LayoutServerLoad } from './$types'\n\nexport const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {\n  const { session, user } = await safeGetSession()\n\n  return {\n    session,\n    user,\n    cookies: cookies.getAll(),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Swift\nDESCRIPTION: This snippet outlines how to initialize a Supabase client in Swift, providing the necessary URL and API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet supabaseURL = \"https://<project>.supabase.co\"\nlet supabaseKey = \"<your-anon-key>\"\nlet supabase = SupabaseClient(supabaseURL: URL(string: supabaseURL)!, supabaseKey: supabaseKey)\n\nlet realtime = supabase.realtime\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Supabase Template\nDESCRIPTION: Command to create a new Next.js application using the with-supabase template, which comes pre-configured with cookie-based authentication, TypeScript, and Tailwind CSS.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Initializing Postgres connection for libcluster strategy\nDESCRIPTION: Elixir code for handling the initial connection to Postgres for the libcluster strategy. This function sets up Postgrex connections and begins listening on the specified channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-09-elixir-clustering-using-postgres.mdx#2025-04-22_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/cluster/strategy/postgres.ex:52\ndef handle_continue(:connect, state) do\n    with {:ok, conn} <- Postgrex.start_link(state.meta.opts.()),\n         {:ok, conn_notif} <- Postgrex.Notifications.start_link(state.meta.opts.()),\n         {_, _} <- Postgrex.Notifications.listen(conn_notif, state.config[:channel_name]) do\n      Logger.info(state.topology, \"Connected to Postgres database\")\n\n      meta = %{\n        state.meta\n        | conn: conn,\n          conn_notif: conn_notif,\n          heartbeat_ref: heartbeat(0)\n      }\n\n      {:noreply, put_in(state.meta, meta)}\n    else\n      reason ->\n        Logger.error(state.topology, \"Failed to connect to Postgres: #{inspect(reason)}\")\n        {:noreply, state}\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application with TypeScript\nDESCRIPTION: Commands to create a new TypeScript-based Next.js application using npm and navigate to the project directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --ts --use-npm supabase-nextjs\ncd supabase-nextjs\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function\nDESCRIPTION: Deploys a specific Supabase function after making local edits.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy function-name\n```\n\n----------------------------------------\n\nTITLE: Efficient Row Access Checking Query in PostgreSQL\nDESCRIPTION: A SQL query example showing how WALRUS efficiently checks if a row is visible to a subscriber by querying using the table's primary key for optimal performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect exists (select 1 from some_table where id = 806);\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Imports necessary Python modules including logging, LlamaIndex components, and utility libraries for text processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\n# Uncomment to see debug logs\n# logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n# logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))\n\nfrom llama_index.core.storage import StorageContext\nfrom llama_index.readers.web import SimpleWebPageReader\nfrom llama_index.indices.vector_store import VectorStoreIndex\nfrom llama_index.vector_stores.supabase import SupabaseVectorStore\nimport textwrap\nimport html2text\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarMenu with Projects List in React\nDESCRIPTION: This code shows how to use the SidebarMenu component to render a list of projects within a SidebarGroup. It includes SidebarMenuItem and SidebarMenuButton components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarContent>\n    <SidebarGroup>\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {projects.map((project) => (\n            <SidebarMenuItem key={project.name}>\n              <SidebarMenuButton asChild>\n                <a href={project.url}>\n                  <project.icon />\n                  <span>{project.name}</span>\n                </a>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  </SidebarContent>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Executing Hybrid Search Query\nDESCRIPTION: Example SQL query demonstrating how to call the hybrid search function with query text and embedding vector.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  hybrid_search(\n    'Italian recipes with tomato sauce', -- user query\n    '[...]'::vector(512), -- embedding generated from user query\n    10\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring CFBundleURLTypes for iOS Google Sign-In\nDESCRIPTION: Add the CFBundleURLTypes attributes to the iOS Info.plist file to enable Google Sign-In functionality. This includes specifying the bundle URL scheme based on the reversed client ID from GoogleService-Info.plist.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Put me in the [my_project]/ios/Runner/Info.plist file -->\n<!-- Google Sign-in Section -->\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleTypeRole</key>\n    <string>Editor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <!-- TODO Replace this value: -->\n      <!-- Copied from GoogleService-Info.plist key REVERSED_CLIENT_ID -->\n      <string>com.googleusercontent.apps.861823949799-vc35cprkp249096uujjn0vvnmcvjppkn</string>\n    </array>\n  </dict>\n</array>\n<!-- End of the Google Sign-in Section -->\n```\n\n----------------------------------------\n\nTITLE: Querying Todos with Client Libraries\nDESCRIPTION: Examples of querying todos using different Supabase client libraries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('todos').select()\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.from('todos').select('*');\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.table('todos').select(\"*\").execute()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await supabase.from(\"todos\").select()\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index with Cosine Distance in SQL\nDESCRIPTION: Creates an HNSW index on a vector column using cosine distance operator class. This index type is best suited for vector similarity search using cosine similarity metrics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/hnsw-indexes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using hnsw (column_name vector_cosine_ops);\n```\n\n----------------------------------------\n\nTITLE: Triggering Test Stripe Payment Event\nDESCRIPTION: Optional command to manually trigger a payment_intent.succeeded event for testing webhook handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstripe trigger payment_intent.succeeded\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Telegram Bot\nDESCRIPTION: This snippet shows the structure of the .env file needed for the Telegram bot. It includes API keys for ElevenLabs and Telegram, as well as a function secret for securing the Edge Function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-transcribe-speech.mdx#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# Find / create an API key at https://elevenlabs.io/app/settings/api-keys\nELEVENLABS_API_KEY=your_api_key\n\n# The bot token you received from the BotFather.\nTELEGRAM_BOT_TOKEN=your_bot_token\n\n# A random secret chosen by you to secure the function.\nFUNCTION_SECRET=random_secret\n```\n\n----------------------------------------\n\nTITLE: Regional Invocation with cURL\nDESCRIPTION: Shows how to invoke an Edge Function in a specific region using cURL. This includes setting the x-region header to specify which region the function should run in.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# https://supabase.com/docs/guides/functions/deploy#invoking-remote-functions\ncurl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \\\n  --header 'Authorization: Bearer ANON_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --header 'x-region: eu-west-3' \\\n  --data '{ \"name\":\"Functions\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Storage Adapter for Supabase Auth - JavaScript\nDESCRIPTION: This snippet defines a custom storage adapter for the Supabase Auth client that accommodates scenarios without localStorage availability. It implements methods to get, set, and remove items using an alternate storage solution, falling back on localStorage if supported.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions/pkce-flow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { type SupportedStorage } from '@supabase/supabase-js';\nconst supportsLocalStorage = () => true\n\n// ---cut---\nconst customStorageAdapter: SupportedStorage = {\n    getItem: (key) => {\n    if (!supportsLocalStorage()) {\n        // Configure alternate storage\n        return null\n    }\n    return globalThis.localStorage.getItem(key)\n    },\n    setItem: (key, value) => {\n    if (!supportsLocalStorage()) {\n        // Configure alternate storage here\n        return\n    }\n    globalThis.localStorage.setItem(key, value)\n    },\n    removeItem: (key) => {\n    if (!supportsLocalStorage()) {\n        // Configure alternate storage here\n        return\n    }\n    globalThis.localStorage.removeItem(key)\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Supabase.js v2\nDESCRIPTION: Example of using TypeScript with Supabase.js v2, where definitions are injected in the 'createClient()' method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Database } from './DatabaseDefinitions'\n\n// definitions are injected in `createClient()`\nconst supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)\n\nconst { data } = await supabase.from('messages').select().match({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware Utility Function\nDESCRIPTION: Implementation of a middleware utility function that creates a server client and handles session updates in Next.js middleware, including authentication flow redirects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/supabase/middleware.ts\nimport { createServerClient } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  );\n\n  // IMPORTANT: Avoid writing any logic between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone();\n    url.pathname = '/login';\n    return NextResponse.redirect(url);\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're\n  // creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Active pg_cron Jobs in PostgreSQL\nDESCRIPTION: This SQL query identifies actively running pg_cron jobs by examining the pg_stat_activity table. It returns detailed information about each job process including the process ID, database user, application name, and the actual query being executed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  pid as process_id,\n  usename as database_user,\n  application_name,\n  backend_start as when_process_began,\n  wait_event_type,\n  state,\n  query,\n  backend_type\nFROM pg_stat_activity where application_name ilike 'pg_cron';\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Authentication Service in Angular\nDESCRIPTION: Authentication service that manages Supabase client initialization, user session handling, and magic link sign-in functionality. Uses BehaviorSubject to track current user state and provides methods for sign-in and logout.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { createClient, SupabaseClient, User } from '@supabase/supabase-js'\nimport { BehaviorSubject } from 'rxjs'\nimport { environment } from 'src/environments/environment'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private supabase: SupabaseClient\n  private _currentUser: BehaviorSubject<boolean | User | any> = new BehaviorSubject(null)\n\n  constructor(private router: Router) {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n\n    const user = this.supabase.auth.user()\n    if (user) {\n      this._currentUser.next(user)\n    } else {\n      this._currentUser.next(false)\n    }\n\n    this.supabase.auth.onAuthStateChange((event, session) => {\n      if (event == 'SIGNED_IN') {\n        this._currentUser.next(session!.user)\n      } else {\n        this._currentUser.next(false)\n        this.router.navigateByUrl('/', { replaceUrl: true })\n      }\n    })\n  }\n\n  signInWithEmail(email: string) {\n    return this.supabase.auth.signIn({\n      email,\n    })\n  }\n\n  logout() {\n    this.supabase.auth.signOut()\n  }\n\n  get currentUser() {\n    return this._currentUser.asObservable()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Signup - Swift\nDESCRIPTION: Uses Swift to register a new user in Supabase with additional metadata included.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.signUp(\n  email: \"valid.email@supabase.io\",\n  password: \"example-password\",\n  data: [\n    \"first_name\": .string(\"John\"),\n    \"age\": .integer(27),\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropzone Component for File Uploads in React\nDESCRIPTION: This code snippet demonstrates how to use the Dropzone component for file uploads in a React application. It utilizes the useSupabaseUpload hook to configure upload settings and renders the Dropzone with empty state and content components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/dropzone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'\nimport { useSupabaseUpload } from '@/hooks/use-supabase-upload'\n\nconst FileUploadDemo = () => {\n  const props = useSupabaseUpload({\n    bucketName: 'test',\n    path: 'test',\n    allowedMimeTypes: ['image/*'],\n    maxFiles: 2,\n    maxFileSize: 1000 * 1000 * 10, // 10MB,\n  })\n\n  return (\n    <div className=\"w-[500px]\">\n      <Dropzone {...props}>\n        <DropzoneEmptyState />\n        <DropzoneContent />\n      </Dropzone>\n    </div>\n  )\n}\n\nexport { FileUploadDemo }\n```\n\n----------------------------------------\n\nTITLE: Creating AvatarComponent for Image Upload in Angular Ionic\nDESCRIPTION: This component handles avatar image upload and display, integrating with the device camera and Supabase storage. It includes functionality for capturing photos and uploading them as user avatars.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser'\nimport { SupabaseService } from '../supabase.service'\nimport { Camera, CameraResultType } from '@capacitor/camera'\nimport { addIcons } from 'ionicons'\nimport { person } from 'ionicons/icons'\n@Component({\n  selector: 'app-avatar',\n  template: `\n    <div class=\"avatar_wrapper\" (click)=\"uploadAvatar()\">\n      <img *ngIf=\"_avatarUrl; else noAvatar\" [src]=\"_avatarUrl\" />\n      <ng-template #noAvatar>\n        <ion-icon name=\"person\" class=\"no-avatar\"></ion-icon>\n      </ng-template>\n    </div>\n  `,\n  style: [\n    `\n    :host {\n       display: block;\n       margin: auto;\n       min-height: 150px;\n    }\n     :host .avatar_wrapper {\n       margin: 16px auto 16px;\n       border-radius: 50%;\n       overflow: hidden;\n       height: 150px;\n       aspect-ratio: 1;\n       background: var(--ion-color-step-50);\n       border: thick solid var(--ion-color-step-200);\n    }\n     :host .avatar_wrapper:hover {\n       cursor: pointer;\n    }\n     :host .avatar_wrapper ion-icon.no-avatar {\n       width: 100%;\n       height: 115%;\n    }\n     :host img {\n       display: block;\n       object-fit: cover;\n       width: 100%;\n       height: 100%;\n    }\n  `,\n  ],\n})\nexport class AvatarComponent {\n  _avatarUrl: SafeResourceUrl | undefined\n  uploading = false\n\n  @Input()\n  set avatarUrl(url: string | undefined) {\n    if (url) {\n      this.downloadImage(url)\n    }\n  }\n\n  @Output() upload = new EventEmitter<string>()\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly dom: DomSanitizer\n  ) {\n    addIcons({ person })\n  }\n\n  async downloadImage(path: string) {\n    try {\n      const { data, error } = await this.supabase.downLoadImage(path)\n      if (error) {\n        throw error\n      }\n      this._avatarUrl = this.dom.bypassSecurityTrustResourceUrl(URL.createObjectURL(data!))\n    } catch (error: any) {\n      console.error('Error downloading image: ', error.message)\n    }\n  }\n\n  async uploadAvatar() {\n    const loader = await this.supabase.createLoader()\n    try {\n      const photo = await Camera.getPhoto({\n        resultType: CameraResultType.DataUrl,\n      })\n\n      const file = await fetch(photo.dataUrl!)\n        .then((res) => res.blob())\n        .then((blob) => new File([blob], 'my-file', { type: `image/${photo.format}` }))\n\n      const fileName = `${Math.random()}-${new Date().getTime()}.${photo.format}`\n\n      await loader.present()\n      const { error } = await this.supabase.uploadAvatar(fileName, file)\n\n      if (error) {\n        throw error\n      }\n\n      this.upload.emit(fileName)\n    } catch (error: any) {\n      this.supabase.createNotice(error.message)\n    } finally {\n      loader.dismiss()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Function Entry Point for OG Image Generation\nDESCRIPTION: The main entry point for the Edge Function that imports and serves the OG image handler using Deno.serve(). It includes a console log for debugging purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/og-image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport handler from './handler.tsx'\n\nconsole.log('Hello from og-image Function!')\n\nDeno.serve(handler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Route\nDESCRIPTION: Ruby code to configure the root route to point to the articles index page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html\n\n  # Defines the root path route (\"/\")\n  root \"articles#index\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating New Poetry Project\nDESCRIPTION: Command to initialize a new Python project using Poetry.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry new video-search\n```\n\n----------------------------------------\n\nTITLE: Using Basic Aggregate Functions with Supabase.js\nDESCRIPTION: This snippet shows how to use max() and min() aggregate functions on the release_year column using the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { data, error } = await supabase\n  .from('movies')\n  .select('release_year.max(), release_year.min()')\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Collection with Supabase Client\nDESCRIPTION: JavaScript code showing how to query a vector collection using the Supabase client library\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('docs')\n  .select('id, embedding, metadata')\n  .eq('url', '/hello-world')\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Up Form UI Components in Jetpack Compose\nDESCRIPTION: A Jetpack Compose UI implementation for a sign-up form with email and password fields. It uses Material Design components with state management through a ViewModel, keyboard handling, and displays success messages via SnackBar.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nColumn(\n            modifier = modifier\n                .padding(paddingValues)\n                .padding(20.dp)\n        ) {\n            val email = viewModel.email.collectAsState(initial = \"\")\n            val password = viewModel.password.collectAsState()\n            OutlinedTextField(\n                label = {\n                    Text(\n                        text = \"Email\",\n                        color = MaterialTheme.colorScheme.primary,\n                        style = MaterialTheme.typography.titleMedium\n                    )\n                },\n                maxLines = 1,\n                shape = RoundedCornerShape(32),\n                modifier = modifier.fillMaxWidth(),\n                value = email.value,\n                onValueChange = {\n                    viewModel.onEmailChange(it)\n                },\n            )\n            OutlinedTextField(\n                label = {\n                    Text(\n                        text = \"Password\",\n                        color = MaterialTheme.colorScheme.primary,\n                        style = MaterialTheme.typography.titleMedium\n                    )\n                },\n                maxLines = 1,\n                shape = RoundedCornerShape(32),\n                modifier = modifier\n                    .fillMaxWidth()\n                    .padding(top = 12.dp),\n                value = password.value,\n                onValueChange = {\n                    viewModel.onPasswordChange(it)\n                },\n            )\n            val localSoftwareKeyboardController = LocalSoftwareKeyboardController.current\n            Button(modifier = modifier\n                .fillMaxWidth()\n                .padding(top = 12.dp),\n                onClick = {\n                    localSoftwareKeyboardController?.hide()\n                    viewModel.onSignUp()\n                    coroutineScope.launch {\n                        snackBarHostState.showSnackbar(\n                            message = \"Create account successfully. Sign in now!\",\n                            duration = SnackbarDuration.Long\n                        )\n                    }\n                }) {\n                Text(\"Sign up\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data Using Python\nDESCRIPTION: Shows how to use the Supabase Python client to insert book records with JSON metadata. Uses Python dictionaries and lists which are automatically serialized to JSON.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsupabase.from_('books').insert([\n  {\n    'title': 'The Poky Little Puppy',\n    'author': 'Janette Sebring Lowrey',\n    'metadata': {\n      'description': 'Puppy is slower than other, bigger animals.',\n      'price': 5.95,\n      'ages': [3, 6],\n    },\n  },\n  {\n    'title': 'The Tale of Peter Rabbit',\n    'author': 'Beatrix Potter',\n    'metadata': {\n      'description': 'Rabbit eats some vegetables.',\n      'price': 4.49,\n      'ages': [2, 5],\n    },\n  },\n  {\n    'title': 'Tootle',\n    'author': 'Gertrude Crampton',\n    'metadata': {\n      'description': 'Little toy train has big dreams.',\n      'price': 3.99,\n      'ages': [2, 5],\n    },\n  },\n  {\n    'title': 'Green Eggs and Ham',\n    'author': 'Dr. Seuss',\n    'metadata': {\n      'description':\n          'Sam has changing food preferences and eats unusually colored food.',\n      'price': 7.49,\n      'ages': [4, 8],\n    },\n  },\n  {\n    'title': 'Harry Potter and the Goblet of Fire',\n    'author': 'J.K. Rowling',\n    'metadata': {\n      'description': 'Fourth year of school starts, big drama ensues.',\n      'price': 24.95,\n      'ages': [10, 99],\n    },\n  },\n]).execute()\n```\n\n----------------------------------------\n\nTITLE: Equality Search Using Python Supabase Client\nDESCRIPTION: Python implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.from_('books').select().eq('title', 'Harry').execute()\n```\n\n----------------------------------------\n\nTITLE: Link Email to Anonymous User in Flutter\nDESCRIPTION: Updates an anonymous user to add an email address in Supabase using Flutter. This begins the process of converting an anonymous user to a permanent user by linking an email identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.updateUser(UserAttributes(email: 'valid.email@supabase.io'));\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Data into Supabase Using JavaScript\nDESCRIPTION: A script that reads exported JSON data from Fauna and inserts it into a Supabase table. The script uses the Supabase JavaScript client to handle the data insertion process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport fs from 'fs'\n\nconst supabaseUrl = 'YOUR_SUPABASE_URL'\nconst supabaseKey = 'YOUR_SUPABASE_API_KEY'\nconst tableName = 'YOUR_TABLE_NAME'\nconst jsonFilePath = './filename.json'\n\nconst supabase = createClient(supabaseUrl, supabaseKey)\n\nasync function loadDocumentsToSupabase() {\n  try {\n    // Read JSON file\n    const rawData = fs.readFileSync(jsonFilePath)\n    const dataArray = JSON.parse(rawData).map((data) => ({ data }))\n\n    // Insert data into Supabase\n    const { error } = await supabase.from(tableName).insert(dataArray)\n\n    if (error) {\n      console.error('Error inserting data:', error)\n      return\n    }\n\n    console.log(`Successfully inserted ${dataArray.length} records into ${tableName}`)\n  } catch (error) {\n    console.error('Error in process:', error)\n  }\n}\n\nloadDocumentsToSupabase()\n```\n\n----------------------------------------\n\nTITLE: Querying Cal.com Bookings with JSON Parsing\nDESCRIPTION: SQL query to extract booking details from Cal.com using JSON functions. It parses the booking ID, title, attendee name, and start time from the nested JSON structure returned by the Cal.com API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- extract bookings\nselect\n  bk->>'id' as id,\n  bk->>'title' as title,\n  bk->'responses'->>'name' as name,\n  bk->>'startTime' as start_time\nfrom cal.bookings t\n  cross join json_array_elements((attrs->'bookings')::json) bk;\n```\n\n----------------------------------------\n\nTITLE: Loading IMDB Dataset\nDESCRIPTION: Loads the IMDB dataset containing 25000 movie reviews using the datasets library.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndata = load_dataset(\"imdb\", split=\"train\")\ndata\n```\n\nLANGUAGE: python\nCODE:\n```\n# Look at an example review\ndata[\"text\"][5]\n```\n\n----------------------------------------\n\nTITLE: Pinecone Pod Types Comparison Table\nDESCRIPTION: Markdown table showing different Pinecone pod types with their capacities, QPS, accuracy, and pricing information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-10-pgvector-vs-pinecone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type | Capacity / Vectors                | QPS     | Accuracy | Price per unit per month |\n| ---- | --------------------------------- | ------- | -------- | ------------------------ |\n| s1   | 5,000,000 768d (~2,500,000 1536d) | Slowest | 0.98     | $80                      |\n| p1   | 1,000,000 768d (~500,000 1536d)   | Medium  | 0.99     | $80                      |\n| p2   | 1,100,000 768d (~550,000 1536d)   | Fastest | 0.94     | $120                     |\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with Supabase.ai API in Edge Function\nDESCRIPTION: This example demonstrates how to use the built-in Supabase.ai API to generate embeddings. It creates a Deno server that processes incoming requests, extracts text from query parameters, and uses the 'gte-small' model to generate embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst model = new Supabase.ai.Session('gte-small');\n\nDeno.serve(async (req: Request) => {\n\tconst params = new URL(req.url).searchParams;\n\tconst input = params.get('text');\n\tconst output = await model.run(input, { mean_pool: true, normalize: true });\n\treturn new Response(\n\t\tJSON.stringify(\n\t\t\toutput,\n\t\t),\n\t\t{\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Connection': 'keep-alive',\n\t\t\t},\n\t\t},\n\t);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Component\nDESCRIPTION: Main App component implementation with session management and authentication state handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'react-native-url-polyfill/auto'\nimport { useState, useEffect } from 'react'\nimport { supabase } from './lib/supabase'\nimport Auth from './components/Auth'\nimport { View, Text } from 'react-native'\nimport { Session } from '@supabase/supabase-js'\n\nexport default function App() {\n  const [session, setSession] = useState<Session | null>(null)\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n    })\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n  }, [])\n\n  return (\n    <View>\n      <Auth />\n      {session && session.user && <Text>{session.user.id}</Text>}\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Supabase Services with Docker Compose\nDESCRIPTION: Commands to restart all Supabase services to pick up configuration changes. This process involves stopping and removing containers before recreating and starting them again, which will result in downtime.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Stop and remove the containers\ndocker compose down\n\n# Recreate and start the containers\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Authenticator Key URI Format for TOTP in Bash\nDESCRIPTION: Example of the URI format used for TOTP authentication with Google Authenticator. The URI includes protocol, issuer, user email, and parameters for the OTP generation including algorithm, digits, period, and secret.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\notpauth://totp/supabase.io:j@supacats.io?algorithm=SHA1&digits=6&issuer=supabase.io&period=30&secret=BFSXQHFB2BGAZIOQWCDBJUF7B54A52JQ\n```\n\n----------------------------------------\n\nTITLE: Link Email to Anonymous User in Kotlin\nDESCRIPTION: Updates an anonymous user to add an email address in Supabase using Kotlin. This begins the process of converting an anonymous user to a permanent user by linking an email identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.updateUser {\n    email = \"valid.email@supabase.io\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Table Constraints in SQL\nDESCRIPTION: SQL commands to drop and optionally recreate foreign key constraints with less restrictive modifiers to resolve constraint-related authentication errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE <your table> DROP CONSTRAINT <constraint name>;\n```\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nALTER TABLE <your table> DROP CONSTRAINT <constraint name>;\n\nALTER TABLE <your table> ADD CONSTRAINT <constraint name> FOREIGN KEY (<column name>)\n          REFERENCES auth.users (<auth.users column>)\n          ON DELETE SET NULL;\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase Database with Drizzle ORM\nDESCRIPTION: Sets up a database connection using Drizzle ORM with the Supabase Connection Pooler. Creates a client with prefetch disabled for Transaction pool mode compatibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/drizzle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'dotenv/config'\n\nimport { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\n\nconst connectionString = process.env.DATABASE_URL\n\n// Disable prefetch as it is not supported for \"Transaction\" pool mode\nexport const client = postgres(connectionString, { prepare: false })\nexport const db = drizzle(client);\n```\n\n----------------------------------------\n\nTITLE: Using Explain with Supabase Client in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the explain() modifier with a Supabase client to get performance metrics for a query. It's useful for analyzing query execution plans and times.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('projects')\n  .select('*')\n  .eq('id', 1)\n  .explain({ analyze: true })\n\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Resizable Panels in React\nDESCRIPTION: Example demonstrating how to create vertical resizable panels using the direction prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/resizable.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'\n\nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"vertical\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Postgres Configuration to Default at Role Level\nDESCRIPTION: This SQL snippet demonstrates how to reset a Postgres configuration setting to its default value at the role level. It shows the command structure for resetting a specific setting for a given role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nalter role \"<role_name>\" set \"<setting_name>\" to default;\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Seed Data\nDESCRIPTION: Example of SQL statements generated by Snaplet showing user, post, and comment insertions with relationships.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- The `Post.createdBy` user with an email address ending in `\"@acme.org\"`\nINSERT INTO \"User\" (name, email) VALUES (\"John Snow\", \"snow@acme.org\")\n\n--- A `Post` with the title `\"There is a lot of snow around here!\"`\nINSERT INTO \"Post\" (title, content, createdBy) VALUES (\n  \"There is a lot of snow around here!\",\n  \"Lorem ipsum dolar\",\n  1)\n\n--- Three `Post.Comment` from three different users.\nINSERT INTO \"User\" (name, email) VALUES (\"Stephanie Shadow\", \"shadow@domain.com\")\nINSERT INTO \"Comment\" (text, userId, postId) VALUES (\"I love cheese\", 2, 1)\n\nINSERT INTO \"User\" (name, email) VALUES (\"John Rambo\", \"rambo@trymore.dev\")\nINSERT INTO \"Comment\" (text, userId, postId) VALUES (\"Lorem ipsum dolar sit\", 3, 1)\n\nINSERT INTO \"User\" (name, email) VALUES (\"Steven Plank\", \"s@plank.org\")\nINSERT INTO \"Comment\" (text, userId, postId) VALUES (\"Actually, that's not correct...\", 4, 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Real Index Based on HypoPG Analysis\nDESCRIPTION: SQL command to create a real index on the 'account' table based on the analysis from the hypothetical index created by HypoPG.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on account(id);\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component with Meta and Context in JSX\nDESCRIPTION: This code exports a default function that renders a Layout component, passing meta data, children, and context as props. It's likely part of a larger React-based application structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy-240804.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default (context) => <Layout meta={meta} children={context.children} context={context} />\n```\n\n----------------------------------------\n\nTITLE: Insert Trigger Function for New Users\nDESCRIPTION: PostgreSQL function to handle new user insertion by duplicating auth.users data into the profiles table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.handle_new_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = ''\nas $$\nbegin\n\n  -- Insert the new user's data into the 'profiles' table\n  insert into public.profiles (id, email)\n  values (new.id, new.email);\n\n  return new;     -- Return the new record\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Mixed Compute Size Billing Table in Markdown\nDESCRIPTION: Shows billing calculation for a project that changes compute size during the billing cycle.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/compute.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Line Item                     | Hours | Costs   |\n| ----------------------------- | ----- | ------- |\n| Pro Plan                      | -     | $25     |\n| Compute Hours Micro Project 1 | 233   | $3      |\n| Compute Hours Small Project 1 | 511   | $11     |\n| **Subtotal**                  |       | **$39** |\n| Compute Credits               |       | -$10    |\n| **Total**                     |       | **$29** |\n```\n\n----------------------------------------\n\nTITLE: Create Employees Table (SQL)\nDESCRIPTION: This SQL code creates the `employees` table with columns for `id`, `name`, `email`, and `created_at`. The `id` column is the primary key and is auto-generated.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists employees (\n  id bigint primary key generated always as identity,\n  name text not null,\n  email text,\n  created_at timestamptz default now()\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding Table Duplication Demo Video in HTML\nDESCRIPTION: HTML code for displaying a video that demonstrates Supabase's table duplication functionality, loading from Supabase's storage with playback controls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/duplicate-tables.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Getting User Metadata - Dart\nDESCRIPTION: Retrieves the current user's metadata in Dart after signing in.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal User? user = supabase.auth.currentUser;\nfinal Map<String, dynamic>? metadata = user?.userMetadata;\n```\n\n----------------------------------------\n\nTITLE: Fetching Todos with cURL\nDESCRIPTION: Makes an HTTP GET request to fetch todos data using cURL with required authentication headers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://<PROJECT_REF>.supabase.co/rest/v1/todos' \\\n-H \"apikey: <ANON_KEY>\" \\\n-H \"Authorization: Bearer <ANON_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Query Performance in Python\nDESCRIPTION: Python script that compares the execution time of querying the test table using a direct Postgres connection (via psycopg) and the Supabase client. It demonstrates the latency difference between the two methods.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/high-latency-with-supabase-client-z0pZzR.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom supabase import Client, create_client\n\nimport psycopg\n\n\ndef psycop_call(): #user_ids: list[str]):\n    user=\"YOUR_SUPABASE_USER\"\n    password=\"YOUR_SUPABASE_PASSWORD\"\n    host=\"SUPABASE_HOST\"\n    port=5432\n    database=\"postgres\"\n\n    with psycopg.connect(f\"host={host} port={port} dbname={database} user={user} password={password}\") as conn:\n        # Open a cursor to perform database operations\n        results = []\n        with conn.cursor() as cur:\n            start = time.time()\n            # Execute a command: this creates a new table\n            cur.execute(\"SELECT * FROM public.your_table_name\")\n            cur.fetchall()\n            for record in cur:\n                results.append(record)\n            stop = time.time()\n            return (stop - start)\n\n\ndef supabase_call():\n    supabase: Client = create_client(\"SUPABASE_URL\", \"SUPBASE_SERVICE_ROLE_KEY\")\n    start = time.time()\n    result = supabase.table(\"your_table_name\").select(\"*\").execute()\n    stop = time.time()\n    return (stop - start)\n\n\nif __name__ == \"__main__\":\n    ref = psycop_call()\n    sup = supabase_call()\n    print(f\"postgres: {ref}, supabase: {sup}, ratio: {sup/ref}\")\n```\n\n----------------------------------------\n\nTITLE: Deno Configuration File\nDESCRIPTION: Example deno.json configuration file for managing dependencies in a Supabase Edge Function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"lodash\": \"https://cdn.skypack.dev/lodash\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Seed Function for Creating and Populating Vector Collection\nDESCRIPTION: Python function to create a Supabase Vector collection, generate embeddings for sample images, and upsert them into the database with metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef seed():\n    # create vector store client\n    vx = vecs.create_client(DB_CONNECTION)\n\n    # get or create a collection of vectors with 1024 dimensions\n    images = vx.get_or_create_collection(name=\"image_vectors\", dimension=1024)\n\n    # Generate image embeddings with Amazon Titan Model\n    img_emb1 = encode_image('./images/one.jpg')\n    img_emb2 = encode_image('./images/two.jpg')\n    img_emb3 = encode_image('./images/three.jpg')\n    img_emb4 = encode_image('./images/four.jpg')\n\n    # add records to the *images* collection\n    images.upsert(\n        records=[\n            (\n                \"one.jpg\",       # the vector's identifier\n                img_emb1,        # the vector. list or np.array\n                {\"type\": \"jpg\"}  # associated  metadata\n            ), (\n                \"two.jpg\",\n                img_emb2,\n                {\"type\": \"jpg\"}\n            ), (\n                \"three.jpg\",\n                img_emb3,\n                {\"type\": \"jpg\"}\n            ), (\n                \"four.jpg\",\n                img_emb4,\n                {\"type\": \"jpg\"}\n            )\n        ]\n    )\n    print(\"Inserted images\")\n\n    # index the collection for fast search performance\n    images.create_index()\n    print(\"Created index\")\n```\n\n----------------------------------------\n\nTITLE: Using Collapsible Component in React\nDESCRIPTION: Example demonstrating how to use the Collapsible component in a React component. Shows the basic structure with a trigger element and content that can be expanded or collapsed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/collapsible.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Collapsible>\n  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n  <CollapsibleContent>\n    Yes. Free to use for personal and commercial projects. No attribution required.\n  </CollapsibleContent>\n</Collapsible>\n```\n\n----------------------------------------\n\nTITLE: Generating Seed Data with Snaplet\nDESCRIPTION: TypeScript script for generating structured seed data with relationships using Snaplet.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSeedClient } from '@snaplet/seed'\nimport { copycat } from '@snaplet/copycat'\n\nasync function main() {\n  const seed = await createSeedClient({ dryRun: true })\n\n  await seed.Post([\n    {\n      title: 'There is a lot of snow around here!',\n      createdBy: {\n        email: (ctx) =>\n          copycat.email(ctx.seed, {\n            domain: 'acme.org',\n          }),\n      },\n      Comment: (x) => x(3),\n    },\n  ])\n\n  process.exit()\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Multiple Operation RLS Policy Example\nDESCRIPTION: Demonstration of correct way to create separate policies for different operations\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Profiles can be created by any user\"\non profiles\nfor insert\nto authenticated\nwith check ( true );\n\ncreate policy \"Profiles can be deleted by any user\"\non profiles\nfor delete\nto authenticated\nusing ( true );\n```\n\n----------------------------------------\n\nTITLE: Checking vacuum statistics with Supabase CLI\nDESCRIPTION: This command uses the Supabase CLI to retrieve information about vacuum statistics, showing when tables were last vacuumed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ supabase inspect db vacuum-stats\n```\n\n----------------------------------------\n\nTITLE: Exiting PostgreSQL User and Starting the Database for Recovery\nDESCRIPTION: Commands to exit the postgres user shell and start the PostgreSQL service to begin the recovery process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ exit\n$ sudo /etc/init.d/postgresql start\n```\n\n----------------------------------------\n\nTITLE: Poetry script configuration\nDESCRIPTION: TOML configuration that adds the seed and search functions as executable scripts to the Poetry project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.scripts]\nseed = \"image_search.main:seed\"\nsearch = \"image_search.main:search\"\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Supabase in JavaScript\nDESCRIPTION: JavaScript code to query all records from an 'articles' table in Supabase. It uses the Supabase client's 'from' method to specify the table and 'select' to retrieve all columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = await supabase.from(\"articles\").select(\"*\");\n```\n\n----------------------------------------\n\nTITLE: Defining TypedSupabaseClient Type for React Query\nDESCRIPTION: TypeScript code to create a typed Supabase client type for use with React Query, ensuring proper typing across components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport type { Database } from '@/utils/database.types'\n\nexport type TypedSupabaseClient = SupabaseClient<Database>\n```\n\n----------------------------------------\n\nTITLE: Downloading Transformed Image in Dart\nDESCRIPTION: This snippet shows how to download a transformed image using the Supabase Dart client, specifying transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.storage.from('bucket').download(\n      'image.jpg',\n      transform: const TransformOptions(\n        width: 800,\n        height: 300,\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Controls\nDESCRIPTION: Simple implementation of table pagination using the DataTablePagination component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<DataTablePagination table={table} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase client with KotlinX Serialization\nDESCRIPTION: This Kotlin snippet demonstrates how to create a Supabase client with KotlinX Serialization. It shows the default configuration and how to provide a custom Json instance for serialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    //Already the default serializer, but you can provide a custom Json instance (optional):\n    defaultSerializer = KotlinXSerializer(Json {\n        //apply your custom config\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN ANALYZE with supabase-js in JavaScript\nDESCRIPTION: Shows how to use the explain() transform with the analyze option to get detailed execution information, including actual execution time and rows affected by RLS policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('projects')\n  .select('*')\n  .eq('id', 1)\n  .explain({ analyze: true })\n\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Avatar Upload Component\nDESCRIPTION: Vue component for handling profile photo uploads using Supabase Storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst props = defineProps(['path'])\nconst { path } = toRefs(props)\n\nconst emit = defineEmits(['update:path', 'upload'])\n\nconst supabase = useSupabaseClient()\n\nconst uploading = ref(false)\nconst src = ref('')\nconst files = ref()\n\nconst downloadImage = async () => {\n  try {\n    const { data, error } = await supabase.storage.from('avatars').download(path.value)\n    if (error) throw error\n    src.value = URL.createObjectURL(data)\n  } catch (error) {\n    console.error('Error downloading image: ', error.message)\n  }\n}\n\nconst uploadAvatar = async (evt) => {\n  files.value = evt.target.files\n  try {\n    uploading.value = true\n\n    if (!files.value || files.value.length === 0) {\n      throw new Error('You must select an image to upload.')\n    }\n\n    const file = files.value[0]\n    const fileExt = file.name.split('.').pop()\n    const fileName = `${Math.random()}.${fileExt}`\n    const filePath = `${fileName}`\n\n    const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)\n\n    if (uploadError) throw uploadError\n\n    emit('update:path', filePath)\n    emit('upload')\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    uploading.value = false\n  }\n}\n\ndownloadImage()\n\nwatch(path, () => {\n  if (path.value) {\n    downloadImage()\n  }\n})\n</script>\n\n<template>\n  <div>\n    <img\n      v-if=\"src\"\n      :src=\"src\"\n      alt=\"Avatar\"\n      class=\"avatar image\"\n      style=\"width: 10em; height: 10em;\"\n    />\n    <div v-else class=\"avatar no-image\" :style=\"{ height: size, width: size }\" />\n\n    <div style=\"width: 10em; position: relative;\">\n      <label class=\"button primary block\" for=\"single\">\n        {{ uploading ? 'Uploading ...' : 'Upload' }}\n      </label>\n      <input\n        style=\"position: absolute; visibility: hidden;\"\n        type=\"file\"\n        id=\"single\"\n        accept=\"image/*\"\n        @change=\"uploadAvatar\"\n        :disabled=\"uploading\"\n      />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Uploading a file using Dart in Supabase Storage\nDESCRIPTION: This Dart snippet demonstrates how to upload a file to Supabase Storage. It creates a file named `example.txt` with the content \"File content\", and then uploads it to the 'public' bucket with the same name using the `supabase.storage.from('public').upload()` method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');\n\n  // Create file `example.txt` and upload it in `public` bucket\n  final file = File('example.txt');\n  file.writeAsStringSync('File content');\n  final storageResponse = await supabase\n      .storage\n      .from('public')\n      .upload('example.txt', file);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Index for RLS Performance in SQL\nDESCRIPTION: This snippet demonstrates how to create an index on a column used in RLS to improve query performance. It can lead to significant improvements, especially on large tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate index userid on test_table using btree (user_id) tablespace pg_default;\n```\n\n----------------------------------------\n\nTITLE: Reassigning Objects Owned by Role in SQL\nDESCRIPTION: This SQL command reassigns all objects owned by the specified role to the 'postgres' user, preparing for role deletion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-delete-a-role-in-postgres-8-AvxY.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREASSIGN OWNED BY <role> TO postgres;\n```\n\n----------------------------------------\n\nTITLE: Initializing Dropzone React Component with Supabase Upload\nDESCRIPTION: Demonstrates how to configure and use the Dropzone component with Supabase upload hook, setting bucket name, path, allowed MIME types, and file upload limits.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/dropzone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'\nimport { useSupabaseUpload } from '@/hooks/use-supabase-upload'\n\nconst FileUploadDemo = () => {\n  const props = useSupabaseUpload({\n    bucketName: 'test',\n    path: 'test',\n    allowedMimeTypes: ['image/*'],\n    maxFiles: 2,\n    maxFileSize: 1000 * 1000 * 10, // 10MB,\n  })\n\n  return (\n    <div className=\"w-[500px]\">\n      <Dropzone {...props}>\n        <DropzoneEmptyState />\n        <DropzoneContent />\n      </Dropzone>\n    </div>\n  )\n}\n\nexport { FileUploadDemo }\n```\n\n----------------------------------------\n\nTITLE: Changing Database Timezone in Postgres SQL\nDESCRIPTION: This SQL command alters the timezone of the 'postgres' database to 'America/New_York'. It demonstrates how to change the default UTC timezone to a specific location.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter database postgres\nset timezone to 'America/New_York';\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Width using CSS Variables in SidebarProvider\nDESCRIPTION: Shows how to customize sidebar width by setting CSS variables through the style prop on the SidebarProvider component, which handles both width and layout spacing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarProvider\n  style={{\n    '--sidebar-width': '20rem',\n    '--sidebar-width-mobile': '20rem',\n  }}\n>\n  <Sidebar />\n</SidebarProvider>\n```\n\n----------------------------------------\n\nTITLE: Checking Parallel Maintenance Workers Configuration\nDESCRIPTION: SQL command to verify the current setting of max_parallel_maintenance_workers after configuration changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nshow max_parallel_maintenance_workers;\n```\n\n----------------------------------------\n\nTITLE: Running Local Supabase Functions Server for Stripe Webhooks\nDESCRIPTION: Starts the Supabase Functions server locally without JWT verification to test Stripe webhooks.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Authentication in RedwoodJS\nDESCRIPTION: Command to install and configure Supabase authentication in a RedwoodJS application using the built-in setup command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn redwood setup auth supabase\n```\n\n----------------------------------------\n\nTITLE: Listening to DELETE Events in Dart with Supabase Realtime\nDESCRIPTION: Creates a channel to listen specifically for DELETE events in the public schema of a Supabase database using Dart. The code establishes a subscription that prints payload data whenever database deletions occur.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('schema-db-changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.delete, // Listen only to DELETEs\n        schema: 'public',\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Retrieving User IP Addresses from Edge Logs\nDESCRIPTION: Example query that retrieves timestamps and real IP addresses from GET requests in edge logs by performing multiple unnesting operations to access deeply nested header values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect datetime(timestamp), h.x_real_ip\nfrom\n  edge_logs\n  cross join unnest(metadata) as m\n  cross join unnest(m.request) as r\n  cross join unnest(r.headers) as h\nwhere h.x_real_ip is not null and r.method = \"GET\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase CLI Commands\nDESCRIPTION: Bash commands for initializing Supabase, creating migrations, starting Supabase locally, and pushing changes to a hosted Supabase instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration new init\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link --project-ref=your-project-ref\n\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Function\nDESCRIPTION: Creates a new Edge Function named 'hello-world' within the Supabase project structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Bucket for Audio Files in Supabase\nDESCRIPTION: TOML configuration for setting up a storage bucket named 'audio' with specific permissions and limitations for storing audio files.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[storage.buckets.audio]\npublic = false\nfile_size_limit = \"50MiB\"\nallowed_mime_types = [\"audio/mp3\"]\nobjects_path = \"./audio\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Hugging Face Text Embedding Adapter in Python\nDESCRIPTION: This snippet demonstrates how to initialize a vector collection with adapter functionality in the Supabase Python client. It configures a ParagraphChunker to split large text into smaller pieces and a TextEmbedding adapter that uses the Hugging Face 'Supabase/gte-small' model to transform text into vector embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\nfrom vecs.adapter import Adapter, ParagraphChunker, TextEmbedding\n\nvx = vecs.create_client(\"postgresql://<user>:<password>@<host>:<port>/<db_name>\")\n\n# create a new collection with an associated adapter\ndocs = vx.get_or_create_collection(\n    name=\"docs\",\n    # here comes the new part\n    adapter=Adapter(\n        [\n            ParagraphChunker(skip_during_query=True),\n            TextEmbedding(model='Supabase/gte-small'),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Main App Component with Supabase Authentication\nDESCRIPTION: Main application component that handles authentication state and conditionally renders either the Account or Auth component based on session status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\nimport { supabase } from './lib/supabase'\nimport Auth from './components/Auth'\nimport Account from './components/Account'\nimport { View } from 'react-native'\nimport { Session } from '@supabase/supabase-js'\n\nexport default function App() {\n  const [session, setSession] = useState<Session | null>(null)\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n    })\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n  }, [])\n\n  return (\n    <View>\n      {session && session.user ? <Account key={session.user.id} session={session} /> : <Auth />}\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AI Model Session in TypeScript\nDESCRIPTION: Creates a new AI model inference session using Supabase.ai API. Shows basic setup and type hints import.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst model = new Supabase.ai.Session('model-name')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\n```\n\n----------------------------------------\n\nTITLE: Handling Drawing Object Updates in Flutter Canvas App\nDESCRIPTION: This snippet handles the ongoing updates when a user is drawing or modifying an object on the canvas. It updates the object's properties based on the current drawing mode and cursor position, then triggers a UI refresh.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n(_canvasObjects[_currentlyDrawingObjectId!] as Rectangle).copyWith(\n          bottomRight: details.globalPosition,\n        );\n        break;\n    }\n\n    if (_currentlyDrawingObjectId != null) {\n      setState(() {});\n    }\n    _cursorPosition = details.globalPosition;\n    _syncCanvasObject(_cursorPosition);\n```\n\n----------------------------------------\n\nTITLE: Updating Driver Location Marker in Flutter Google Maps\nDESCRIPTION: Methods for updating the driver's marker position and rotation on Google Maps based on real-time location updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n  void _updateDriverMarker(Driver driver) {\n    setState(() {\n      _markers.removeWhere((marker) => marker.markerId.value == 'driver');\n\n      double rotation = 0;\n      if (_previousDriverLocation != null) {\n        rotation =\n            _calculateRotation(_previousDriverLocation!, driver.location);\n      }\n\n      _markers.add(Marker(\n        markerId: const MarkerId('driver'),\n        position: driver.location,\n        icon: _carIcon!,\n        anchor: const Offset(0.5, 0.5),\n        rotation: rotation,\n      ));\n\n      _previousDriverLocation = driver.location;\n    });\n  }\n\n  void _adjustMapView({required LatLng target}) {\n    if (_driver != null && _selectedDestination != null) {\n      LatLngBounds bounds = LatLngBounds(\n        southwest: LatLng(\n          min(_driver!.location.latitude, target.latitude),\n          min(_driver!.location.longitude, target.longitude),\n        ),\n        northeast: LatLng(\n          max(_driver!.location.latitude, target.latitude),\n          max(_driver!.location.longitude, target.longitude),\n        ),\n      );\n      _mapController?.animateCamera(CameraUpdate.newLatLngBounds(bounds, 100));\n    }\n  }\n\n  double _calculateRotation(LatLng start, LatLng end) {\n    double latDiff = end.latitude - start.latitude;\n    double lngDiff = end.longitude - start.longitude;\n    double angle = atan2(lngDiff, latDiff);\n    return angle * 180 / pi;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Stores Table and Spatial Index with PostGIS\nDESCRIPTION: This SQL snippet creates a 'stores' table with a geography column for location, adds a spatial index for improved query performance, and sets up a storage bucket for file uploads.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists public.stores (\n\tid int generated by default as identity primary key,\n\tname text not null,\n  description text,\n\tlocation geography(POINT) not null\n);\n\ncreate index stores_geo_index\n  on public.stores\n  using GIST (location);\n\ninsert into storage.buckets (id, name)\nvalues ('stores', 'stores');\n\nCREATE POLICY \"Select images\" ON storage.objects FOR SELECT TO public USING (bucket_id = 'stores');\nCREATE POLICY \"Upload images\" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'stores');\n```\n\n----------------------------------------\n\nTITLE: Initializing a SvelteKit Application with npm\nDESCRIPTION: Command to create a new SvelteKit project using the SvelteKit Skeleton Project template. This sets up the foundation for a TypeScript-based SvelteKit application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest supabase-sveltekit\ncd supabase-sveltekit\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase and Google Maps\nDESCRIPTION: This TypeScript code sets up environment variables for the Supabase URL, API key, and Google Maps API key in an Ionic Angular project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const environment = {\n  production: false,\n  mapsKey: 'YOUR-GOOGLE-MAPS-KEY',\n  supabaseUrl: 'YOUR-URL',\n  supabaseKey: 'YOUR-ANON-KEY',\n}\n```\n\n----------------------------------------\n\nTITLE: AI Filter API Implementation\nDESCRIPTION: This code snippet shows the implementation of an API endpoint that integrates with an AI model to generate filters from natural language prompts. It uses `ai`, `openai`, and `zod` for AI interaction, schema validation, and type safety. The endpoint validates that generated property names and operators are valid before returning the filters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateObject } from 'ai'\nimport { openai } from '@ai-sdk/openai'\nimport { z } from 'zod'\n\n// Define schemas for validation\nconst FilterProperty = z.object({\n  label: z.string(),\n  name: z.string(),\n  type: z.enum(['string', 'number', 'date', 'boolean']),\n  options: z.array(z.string()).optional(),\n  operators: z.array(z.string()).optional(),\n})\n\nconst FilterCondition = z.object({\n  propertyName: z.string(),\n  value: z.union([z.string(), z.number(), z.boolean(), z.null()]),\n  operator: z.string(),\n})\n\ntype FilterGroupType = {\n  logicalOperator: 'AND' | 'OR'\n  conditions: Array<z.infer<typeof FilterCondition> | FilterGroupType>\n}\n\nconst FilterGroup: z.ZodType<FilterGroupType> = z.lazy(() =>\n  z.object({\n    logicalOperator: z.enum(['AND', 'OR']),\n    conditions: z.array(z.union([FilterCondition, FilterGroup])),\n  })\n)\n\nexport async function POST(req: Request) {\n  const { prompt, filterProperties } = await req.json()\n  const filterPropertiesString = JSON.stringify(filterProperties)\n\n  try {\n    const { object } = await generateObject({\n      model: openai('gpt-4-mini'),\n      schema: FilterGroup,\n      prompt: `Generate a filter group based on the following prompt: \"${prompt}\". \\\n              Use only these filter properties: ${filterPropertiesString}. \\\n              Each property has its own set of valid operators defined in the operators field. \\\n              Return a filter group with a logical operator ('AND'/'OR') and an array of conditions. \\\n              Each condition can be either a filter condition or another filter group. \\\n              Filter conditions should have the structure: { propertyName: string, value: string | number | boolean | null, operator: string }. \\\n              Ensure that the generated filters use only the provided property names and their corresponding operators.`, \n    })\n\n    // Validate that all propertyNames exist in filterProperties\n    const validatePropertyNames = (group: FilterGroupType): boolean => {\n      return group.conditions.every((condition) => {\n        if ('logicalOperator' in condition) {\n          return validatePropertyNames(condition as FilterGroupType)\n        }\n        const property = filterProperties.find(\n          (p: z.infer<typeof FilterProperty>) => p.name === condition.propertyName\n        )\n        if (!property) return false\n        // Validate operator is valid for this property\n        return property.operators?.includes(condition.operator) ?? false\n      })\n    }\n\n    if (!validatePropertyNames(object)) {\n      throw new Error('Invalid property names or operators in generated filter')\n    }\n\n    // Zod will throw an error if the object doesn't match the schema\n    const validatedFilters = FilterGroup.parse(object)\n    return Response.json(validatedFilters)\n  } catch (error: any) {\n    console.error('Error in AI filtering:', error)\n    return Response.json({ error: error.message || 'AI filtering failed' }, { status: 500 })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in React\nDESCRIPTION: Creating a helper file to initialize the Supabase client with environment variables for use throughout the app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with JSONB Arrays in PostgreSQL\nDESCRIPTION: Demonstrates how to insert data into a table with JSONB fields. This example shows inserting a single day's worth of data including weight, notes, and complex structured data for food, water, and exercise logs as JSON arrays.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into calendar\n  (date, user_id, weight, notes, food_log, water_log, exercise_log)\nvalues\n  (\n    '2022-01-01',\n    'xyz',\n    172.6,\n    'This new diet is awesome!',\n    '[\n      { \"title\": \"Apple\", \"calories\": 72, \"meal\": \"Breakfast\"},\n      { \"title\": \"Oatmeal\", \"calories\": 146, \"meal\": \"Breakfast\"},\n      { \"title\": \"Sandwich\", \"calories\": 445, \"meal\": \"Lunch\"},\n      { \"title\": \"Chips\", \"calories\": 280, \"meal\": \"Lunch\"},\n      { \"title\": \"Cookie\", \"calories\": 108, \"meal\": \"Lunch\"},\n      { \"title\": \"Mixed Nuts\", \"calories\": 175, \"meal\": \"Snack\"},\n      { \"title\": \"Pasta/Sauce\", \"calories\": 380, \"meal\": \"Dinner\"},\n      { \"title\": \"Garlic Bread\", \"calories\": 200, \"meal\": \"Dinner\"},\n      { \"title\": \"Broccoli\", \"calories\": 32, \"meal\": \"Dinner\"}\n     ]',\n    '[\n      {\"time\": \"08:15\", \"qty\": 1},\n      {\"time\": \"09:31\", \"qty\": 1},\n      {\"time\": \"10:42\", \"qty\": 2},\n      {\"time\": \"10:42\", \"qty\": 2},\n      {\"time\": \"12:07\", \"qty\": 1},\n      {\"time\": \"14:58\", \"qty\": 1},\n      {\"time\": \"17:15\", \"qty\": 1},\n      {\"time\": \"18:40\", \"qty\": 1},\n      {\"time\": \"19:05\", \"qty\": 1}\n    ]',\n    '[\n      {\"time\": \"11:02\", \"duration\": 0.5, \"type\": \"Walking\"}\n    ]'\n  );\n```\n\n----------------------------------------\n\nTITLE: Counting live rows in a PostgreSQL table\nDESCRIPTION: This simple count query helps determine the number of live rows in a table, which can be compared with dead row counts to assess bloat levels.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- number of live rows\nSELECT\n\tcount(*)\nFROM\n\tmytable;\n```\n\n----------------------------------------\n\nTITLE: Creating a Raw MongoDB Data Table in Supabase\nDESCRIPTION: SQL command to create a table in Supabase with a JSONB column to temporarily store the raw MongoDB documents. This serves as an intermediate step before normalizing the data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table mongo_users_raw (\n  id uuid primary key default gen_random_uuid(),\n  data jsonb not null\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Resizable Components in React\nDESCRIPTION: Example of basic usage of Resizable components to create a horizontal resizable panel group.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/resizable.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ResizablePanelGroup direction=\"horizontal\">\n  <ResizablePanel>One</ResizablePanel>\n  <ResizableHandle />\n  <ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Supabase Types in SvelteKit (v0.8.x and v0.9.0)\nDESCRIPTION: Type definitions for Supabase integration in SvelteKit, showing both v0.8.x and v0.9.0 approaches. Includes namespace declarations and interface definitions for app-wide types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// v0.8.x\n/// <reference types=\"@sveltejs/kit\" />\n\ndeclare namespace App {\n  interface Supabase {\n    Database: import('./DatabaseDefinitions').Database\n    SchemaName: 'public'\n  }\n\n  interface PageData {\n    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// v0.9.0\nimport { SupabaseClient, Session, User } from '@supabase/supabase-js'\nimport { Database } from './DatabaseDefinitions'\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      supabase: SupabaseClient<Database>\n      safeGetSession(): Promise<{ session: Session | null; user: User | null }>\n    }\n    interface PageData {\n      session: Session | null\n      user: User | null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Privacy Policy Page in JSX\nDESCRIPTION: This code snippet defines metadata for the privacy policy page, including the title and description. This information is likely used for SEO purposes and page rendering.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy-240804.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const meta = {\n  title: 'Privacy Policy | Supabase',\n  description: 'Supabase Privacy Policy',\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Employees Table Schema with New Column\nDESCRIPTION: Modifies the 'employees' table schema to add a new 'age' column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"employees\" (\n  \"id\" integer not null,\n  \"name\" text,\n  \"age\" smallint not null\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Component with Supabase Storage in RedwoodJS\nDESCRIPTION: Complete implementation of the Avatar component that handles uploading, downloading, and displaying profile photos using Supabase Storage. It provides a UI for users to upload and preview their avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { useAuth } from '@redwoodjs/auth'\n\nconst Avatar = ({ url, size, onUpload }) => {\n  const { client: supabase } = useAuth()\n\n  const [avatarUrl, setAvatarUrl] = useState(null)\n  const [uploading, setUploading] = useState(false)\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path) {\n    try {\n      const { data, error } = await supabase.storage.from('avatars').download(path)\n      if (error) {\n        throw error\n      }\n      const url = URL.createObjectURL(data)\n      setAvatarUrl(url)\n    } catch (error) {\n      console.log('Error downloading image: ', error.message)\n    }\n  }\n\n  async function uploadAvatar(event) {\n    try {\n      setUploading(true)\n\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const fileName = `${Math.random()}.${fileExt}`\n      const filePath = `${fileName}`\n\n      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      onUpload(filePath)\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt=\"Avatar\"\n          className=\"avatar image\"\n          style={{ height: size, width: size }}\n        />\n      ) : (\n        <div className=\"avatar no-image\" style={{ height: size, width: size }} />\n      )}\n      <div style={{ width: size }}>\n        <label className=\"button primary block\" htmlFor=\"single\">\n          {uploading ? 'Uploading ...' : 'Upload'}\n        </label>\n        <input\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n          }}\n          type=\"file\"\n          id=\"single\"\n          accept=\"image/*\"\n          onChange={uploadAvatar}\n          disabled={uploading}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Avatar\n```\n\n----------------------------------------\n\nTITLE: Making a Supabase API request with User JWT\nDESCRIPTION: This bash code snippet demonstrates how to make a request to a Supabase database using `curl` with a user-specific JWT. It includes both the `apikey` and the `Authorization` header with the user's JWT. The `Authorization` header is set to `Bearer` followed by the JWT.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \\\n-H \"apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c\" \\\n-H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjE1ODI0Mzg4LCJzdWIiOiIwMzM0NzQ0YS1mMmEyLTRhYmEtOGM4YS02ZTc0OGY2MmExNzIiLCJlbWFpbCI6InNvbWVvbmVAZW1haWwuY29tIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZW1haWwifSwidXNlcl9tZXRhZGF0YSI6bnVsbCwicm9sZSI6ImF1dGhlbnRpY2F0ZWQifQ.I-_oSsJamtinGxniPETBf-ezAUwDW2sY9bJIThvdX9s\"\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Log Level to WARNING in SQL\nDESCRIPTION: This SQL command sets the log_min_messages to WARNING for the postgres role, which is the recommended default level for most operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER ROLE postgres SET log_min_messages TO 'WARNING';\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Sign-ins in Supabase with TOML\nDESCRIPTION: Configuration settings for enabling anonymous sign-ins in the Supabase CLI's config.toml file for local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\nenable_anonymous_sign_ins = true\n```\n\n----------------------------------------\n\nTITLE: Adding Messages to a Queue using Supabase JavaScript Client\nDESCRIPTION: This TypeScript/JavaScript snippet shows how to use the Supabase client to add a message to a queue. It creates a client instance with the pgmq_public schema and uses the send RPC function to add a message to the 'foo' queue.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-05-supabase-queues.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst url = 'SUPABASE_URL'\nconst key = 'SUPABASE_ANON_KEY'\n\nconst queues = createClient(url, key, {\n  db: { schema: 'pgmq_public' },\n})\n\nconst { data, error } = await queues.rpc('send', {\n  queue_name: 'foo',\n  message: { hello: 'world' },\n})\n\nconsole.log('Message: ', data)\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Custom Mode in Supabase Storage in Kotlin\nDESCRIPTION: This code demonstrates two methods for downloading a resized image in Kotlin - one retrieving the data directly and another streaming to a file on JVM platforms, both using the CONTAIN resize mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\nval data = supabase.storage.from(\"bucket\").downloadAuthenticated(\"image.jpg\") {\n    transform {\n        size(800, 300)\n        resize = ImageTransformation.Resize.CONTAIN\n    }\n}\n\n//Or on JVM stream directly to a file\nval file = File(\"image.jpg\")\nsupabase.storage.from(\"bucket\").downloadAuthenticatedTo(\"image.jpg\", file) {\n    transform {\n        size(800, 300)\n        resize = ImageTransformation.Resize.CONTAIN\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Migration Guides with NavData in JSX\nDESCRIPTION: This JSX snippet renders a grid of migration guides using the NavData component. It maps over the `migrationPages` data to create Link components, each wrapped in a GlassPanel for styling. The Link components navigate to specific migration guide URLs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<NavData data=\"migrationPages\">\n  {(migrationPages) => (\n    <div className=\"grid grid-cols-[repeat(auto-fit,minmax(200px,1fr))] gap-6 mb-6 not-prose\">\n      {migrationPages.map((page) => (\n        <Link href={`${page.url}`} key={page.url} passHref>\n          <GlassPanel\n            icon={page.icon}\n            title={page.name}\n            hasLightIcon={page.hasLightIcon}\n            background={false}\n            className=\"[&>div]:p-4\"\n          />\n        </Link>\n      ))}\n    </div>\n  )}\n</NavData>\n```\n\n----------------------------------------\n\nTITLE: Creating Table with SemVer Column in SQL\nDESCRIPTION: Demonstrates how to use the 'semver' domain in a table definition for a package version tracking system.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table package_version(\n    id bigserial primary key,\n    package_name text not null,\n    package_semver semver not null -- semver column\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Presence Events with Dedicated Methods in Supabase Realtime (Dart)\nDESCRIPTION: This code showcases the newer, more streamlined approach to handling presence events in Supabase Realtime using dedicated methods. It creates a channel, sets up handlers for presence sync, join, and leave events, subscribes to the channel, and tracks the user's presence with a timestamp when successfully subscribed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal channel = supabase.channel('room1');\n\nchannel.onPresenceSync(\n  (payload) {\n    print('Synced presence state: ${channel.presenceState()}');\n  },\n).onPresenceJoin(\n  (payload) {\n    print('Newly joined presences $payload');\n  },\n).onPresenceLeave(\n  (payload) {\n    print('Newly left presences: $payload');\n  },\n).subscribe(\n  (status, error) async {\n    if (status == RealtimeSubscribeStatus.subscribed) {\n      await channel\n          .track({'online_at': DateTime.now().toIso8601String()});\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Messages in Dart\nDESCRIPTION: This Dart snippet shows how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'ack' parameter to true and sends a broadcast message with acknowledgment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal myChannel = supabase.channel('room-3',opts: const RealtimeChannelConfig(\n  ack: true,\n),\n\n);\n\nmyChannel.subscribe( (status, error) async {\n  if (status != RealtimeSubscribeStatus.subscribed) return;\n\n  final serverResponse = await myChannel.sendBroadcastMessage(\n\n    event: 'acknowledge',\n    payload: {},\n  );\n\n  print('serverResponse: $serverResponse');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Supabase Queries with Promise and Async/Await\nDESCRIPTION: Demonstrates two different syntax approaches for querying data from Supabase: Promise-based (.then) and async/await.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// .then() syntax\nsupabase.\n  .from('countries')\n  .select('*')\n  .limit(5)\n  .then(console.log)\n  .catch(console.error)\n\n// or...\n// async/await syntax\nconst main = async() => {\n  const { data, error } = supabase\n    .from('countries')\n    .select('*')\n    .limit(5)\n\n  if (error) {\n    console.log(error)\n    return\n  }\n\n  console.log(data)\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Solving Traveling Salesperson Problem with pgr_TSPeuclidean\nDESCRIPTION: SQL query that uses the pgr_TSPeuclidean function from pgRouting to find the optimal path through all points in the wi29 table. This solves the traveling salesperson problem using Euclidean distances.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgrouting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    *\nfrom\n     pgr_TSPeuclidean($$select * from wi29$$)\n```\n\n----------------------------------------\n\nTITLE: User Account Management Page in Svelte with Supabase Integration\nDESCRIPTION: A Svelte component that allows users to view and edit their profile information after authentication. It includes forms for updating profile details and signing out, with client-side form enhancement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- src/routes/account/+page.svelte -->\n<script lang=\"ts\">\n\timport { enhance } from '$app/forms';\n\timport type { SubmitFunction } from '@sveltejs/kit';\n\n\texport let data\n\texport let form\n\n\tlet { session, supabase, profile } = data\n\t$: ({ session, supabase, profile } = data)\n\n\tlet profileForm: HTMLFormElement\n\tlet loading = false\n\tlet fullName: string = profile?.full_name ?? ''\n\tlet username: string = profile?.username ?? ''\n\tlet website: string = profile?.website ?? ''\n\tlet avatarUrl: string = profile?.avatar_url ?? ''\n\n\tconst handleSubmit: SubmitFunction = () => {\n\t\tloading = true\n\t\treturn async () => {\n\t\t\tloading = false\n\t\t}\n\t}\n\n\tconst handleSignOut: SubmitFunction = () => {\n\t\tloading = true\n\t\treturn async ({ update }) => {\n\t\t\tloading = false\n\t\t\tupdate()\n\t\t}\n\t}\n</script>\n\n<div class=\"form-widget\">\n\t<form\n\t\tclass=\"form-widget\"\n\t\tmethod=\"post\"\n\t\taction=\"?/update\"\n\t\tuse:enhance={handleSubmit}\n\t\tbind:this={profileForm}\n\t>\n\t\t<div>\n\t\t\t<label for=\"email\">Email</label>\n\t\t\t<input id=\"email\" type=\"text\" value={session.user.email} disabled />\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label for=\"fullName\">Full Name</label>\n\t\t\t<input id=\"fullName\" name=\"fullName\" type=\"text\" value={form?.fullName ?? fullName} />\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label for=\"username\">Username</label>\n\t\t\t<input id=\"username\" name=\"username\" type=\"text\" value={form?.username ?? username} />\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label for=\"website\">Website</label>\n\t\t\t<input id=\"website\" name=\"website\" type=\"url\" value={form?.website ?? website} />\n\t\t</div>\n\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype=\"submit\"\n\t\t\t\tclass=\"button block primary\"\n\t\t\t\tvalue={loading ? 'Loading...' : 'Update'}\n\t\t\t\tdisabled={loading}\n\t\t\t/>\n\t\t</div>\n\t</form>\n\n\t<form method=\"post\" action=\"?/signout\" use:enhance={handleSignOut}>\n\t\t<div>\n\t\t\t<button class=\"button block\" disabled={loading}>Sign Out</button>\n\t\t</div>\n\t</form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Interfaces in AndroidX - Kotlin\nDESCRIPTION: Defines navigation destinations as Kotlin objects that implement a common interface to facilitate screen routing in an Android app with the AndroidX navigation library. Each destination specifies its route and title properties for navigation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\ninterface Destination {\n    val route: String\n    val title: String\n}\n\n\nobject ProductListDestination : Destination {\n    override val route = \"product_list\"\n    override val title = \"Product List\"\n}\n\nobject ProductDetailsDestination : Destination {\n    override val route = \"product_details\"\n    override val title = \"Product Details\"\n    const val productId = \"product_id\"\n    val arguments = listOf(navArgument(name = productId) {\n        type = NavType.StringType\n    })\n    fun createRouteWithParam(productId: String) = \"$route/${productId}\"\n}\n\nobject AddProductDestination : Destination {\n    override val route = \"add_product\"\n    override val title = \"Add Product\"\n}\n\nobject AuthenticationDestination: Destination {\n    override val route = \"authentication\"\n    override val title = \"Authentication\"\n}\n\nobject SignUpDestination: Destination {\n    override val route = \"signup\"\n    override val title = \"Sign Up\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic RLS Policy Structure in SQL\nDESCRIPTION: Basic example of creating a Row Level Security policy for books table with proper syntax\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"My descriptive policy.\" ON books FOR INSERT to authenticated USING ( (select auth.uid()) = author_id ) WITH ( true );\n```\n\n----------------------------------------\n\nTITLE: Multi-Word Search with AND Operator\nDESCRIPTION: SQL query demonstrating how to search for multiple words using the AND operator (&) in tsquery\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description)\n  @@ to_tsquery('little & big');\n```\n\n----------------------------------------\n\nTITLE: Generating AI Embeddings with Edge Function\nDESCRIPTION: Demonstrates using edge.exec to run a JavaScript AI session for generating embeddings. Uses the gte-small model to process text input.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect edge.exec(\n$js$\n\nconst session = new Supabase.ai.Session('gte-small');\nreturn await session.run('hello world');\n\n$js$);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitbucket OAuth Sign-In in Flutter\nDESCRIPTION: Set up Bitbucket OAuth authentication in a Flutter application with support for web and mobile platforms, including custom redirect handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithBitbucket() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.bitbucket,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host',\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a file using Dart in Supabase Storage\nDESCRIPTION: This Dart snippet shows how to download a file from Supabase Storage. It uses the `supabase.storage.from('public').download('example.txt')` method to download the file located at 'example.txt' within the 'public' bucket. The `async` keyword handles the asynchronous download operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');\n\n  final storageResponse = await supabase\n      .storage\n      .from('public')\n      .download('example.txt');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialog Centering in React\nDESCRIPTION: This snippet shows how to control the centering behavior of the Dialog by passing the 'centered' prop to DialogContent.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <ContextMenuTrigger>Click here</ContextMenuTrigger>\n  <DialogContent centered={false}>\n    {/*\n     * Content in here\n     */}\n  </DialogContent>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Conditions in SQL Log Queries\nDESCRIPTION: This query shows how to use SQL logical operators (AND, OR, NOT) in combination with regexp_contains for complex filtering. It finds logs containing both 'connection' and 'host', or logs that don't contain 'received'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(timestamp as datetime) as timestamp,\n  event_message,\n  metadata\nfrom postgres_logs\nwhere\n  (regexp_contains(event_message, 'connection') and regexp_contains(event_message, 'host'))\n  or not regexp_contains(event_message, 'received');\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase and Route Protection in SvelteKit Hooks\nDESCRIPTION: This snippet demonstrates how to set up Supabase server client, implement safe session retrieval, and protect multiple routes using SvelteKit's sequence helper in the hooks.server.js file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// src/hooks.server.js\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\nimport { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'\nimport { redirect, error } from '@sveltejs/kit'\nimport { sequence } from '@sveltejs/kit/hooks'\n\nasync function supabase({ event, resolve }) {\n  event.locals.supabase = createSupabaseServerClient({\n    supabaseUrl: PUBLIC_SUPABASE_URL,\n    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n    event,\n  })\n\n  /**\n   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it\n   * doesn't validate the JWT, this function validates the JWT by first calling\n   * `getUser` and aborts early if the JWT signature is invalid.\n   */\n  event.locals.safeGetSession = async () => {\n    const {\n      data: { user },\n      error,\n    } = await event.locals.supabase.auth.getUser()\n    if (error) return { session: null, user: null }\n\n    const {\n      data: { session },\n    } = await event.locals.supabase.auth.getSession()\n    return { session, user }\n  }\n\n  return resolve(event, {\n    filterSerializedResponseHeaders(name) {\n      return name === 'content-range' || name === 'x-supabase-api-version'\n    },\n  })\n}\n\nasync function authorization({ event, resolve }) {\n  // protect requests to all routes that start with /protected-routes\n  if (event.url.pathname.startsWith('/protected-routes') && event.request.method === 'GET') {\n    const { session } = await event.locals.safeGetSession()\n    if (!session) {\n      // the user is not signed in\n      redirect(303, '/')\n    }\n  }\n\n  // protect POST requests to all routes that start with /protected-posts\n  if (event.url.pathname.startsWith('/protected-posts') && event.request.method === 'POST') {\n    const { session } = await event.locals.safeGetSession()\n    if (!session) {\n      // the user is not signed in\n      throw error(303, '/')\n    }\n  }\n\n  return resolve(event)\n}\n\nexport const handle = sequence(supabase, authorization)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Command to install the necessary Python libraries vecs and boto3 using pip package manager\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/amazon-bedrock.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install vecs boto3\n```\n\n----------------------------------------\n\nTITLE: Starting the Laravel development server\nDESCRIPTION: Launches the Laravel development server, making the application accessible at http://127.0.0.1:8000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes in OrioleDB\nDESCRIPTION: Examples of creating B-tree indexes in OrioleDB, including a simple index on published_at and a conditional index on views.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate index blog_post_published_at on blog_post (published_at);\n\ncreate index blog_post_views on blog_post (views) where (views > 1000);\n```\n\n----------------------------------------\n\nTITLE: Implementing MyGame Class for FlameGame in Dart\nDESCRIPTION: Defines the MyGame class that extends FlameGame, implementing game logic for a multiplayer shooting game. Includes player and opponent management, bullet shooting, collision detection, and game state updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flame/game.dart';\nimport 'package:flame/components.dart';\nimport 'package:flame/events.dart';\nimport 'package:flame/image_composition.dart' as flame_image;\nimport 'package:flame_realtime_shooting/game/bullet.dart';\nimport 'package:flame_realtime_shooting/game/player.dart';\nimport 'package:flutter/material.dart';\n\nclass MyGame extends FlameGame with PanDetector, HasCollisionDetection {\n  MyGame({\n    required this.onGameOver,\n    required this.onGameStateUpdate,\n  });\n\n  static const _initialHealthPoints = 100;\n\n  /// Callback to notify the parent when the game ends.\n  final void Function(bool didWin) onGameOver;\n\n  /// Callback for when the game state updates.\n  final void Function(\n    Vector2 position,\n    int health,\n  ) onGameStateUpdate;\n\n  /// `Player` instance of the player\n  late Player _player;\n\n  /// `Player` instance of the opponent\n  late Player _opponent;\n\n  bool isGameOver = true;\n\n  int _playerHealthPoint = _initialHealthPoints;\n\n  late final flame_image.Image _playerBulletImage;\n  late final flame_image.Image _opponentBulletImage;\n\n  @override\n  Color backgroundColor() {\n    return Colors.transparent;\n  }\n\n  @override\n  Future<void>? onLoad() async {\n    final playerImage = await images.load('player.png');\n    _player = Player(isMe: true);\n    final spriteSize = Vector2.all(Player.radius * 2);\n    _player.add(SpriteComponent(sprite: Sprite(playerImage), size: spriteSize));\n    add(_player);\n\n    final opponentImage = await images.load('opponent.png');\n    _opponent = Player(isMe: false);\n    _opponent.add(SpriteComponent.fromImage(opponentImage, size: spriteSize));\n    add(_opponent);\n\n    _playerBulletImage = await images.load('player-bullet.png');\n    _opponentBulletImage = await images.load('opponent-bullet.png');\n\n    await super.onLoad();\n  }\n\n  @override\n  void onPanUpdate(DragUpdateInfo info) {\n    _player.move(info.delta.global);\n    final mirroredPosition = _player.getMirroredPercentPosition();\n    onGameStateUpdate(mirroredPosition, _playerHealthPoint);\n    super.onPanUpdate(info);\n  }\n\n  @override\n  void update(double dt) {\n    super.update(dt);\n    if (isGameOver) {\n      return;\n    }\n    for (final child in children) {\n      if (child is Bullet && child.hasBeenHit && !child.isMine) {\n        _playerHealthPoint = _playerHealthPoint - child.damage;\n        final mirroredPosition = _player.getMirroredPercentPosition();\n        onGameStateUpdate(mirroredPosition, _playerHealthPoint);\n        _player.updateHealth(_playerHealthPoint / _initialHealthPoints);\n      }\n    }\n    if (_playerHealthPoint <= 0) {\n      endGame(false);\n    }\n  }\n\n  void startNewGame() {\n    isGameOver = false;\n    _playerHealthPoint = _initialHealthPoints;\n\n    for (final child in children) {\n      if (child is Player) {\n        child.position = child.initialPosition;\n      } else if (child is Bullet) {\n        child.removeFromParent();\n      }\n    }\n\n    _shootBullets();\n  }\n\n  /// shoots out bullets form both the player and the opponent.\n  ///\n  /// Calls itself every 500 milliseconds\n  Future<void> _shootBullets() async {\n    await Future.delayed(const Duration(milliseconds: 500));\n\n    /// Player's bullet\n    final playerBulletInitialPosition = Vector2.copy(_player.position)\n      ..y -= Player.radius;\n    final playerBulletVelocities = [\n      Vector2(0, -100),\n      Vector2(60, -80),\n      Vector2(-60, -80),\n    ];\n    for (final bulletVelocity in playerBulletVelocities) {\n      add((Bullet(\n        isMine: true,\n        velocity: bulletVelocity,\n        image: _playerBulletImage,\n        initialPosition: playerBulletInitialPosition,\n      )));\n    }\n\n    /// Opponent's bullet\n    final opponentBulletInitialPosition = Vector2.copy(_opponent.position)\n      ..y += Player.radius;\n    final opponentBulletVelocities = [\n      Vector2(0, 100),\n      Vector2(60, 80),\n      Vector2(-60, 80),\n    ];\n    for (final bulletVelocity in opponentBulletVelocities) {\n      add((Bullet(\n        isMine: false,\n        velocity: bulletVelocity,\n        image: _opponentBulletImage,\n        initialPosition: opponentBulletInitialPosition,\n      )));\n    }\n\n    _shootBullets();\n  }\n\n  void updateOpponent({required Vector2 position, required int health}) {\n    _opponent.position = Vector2(size.x * position.x, size.y * position.y);\n    _opponent.updateHealth(health / _initialHealthPoints);\n  }\n\n  /// Called when either the player or the opponent has run out of health points\n  void endGame(bool playerWon) {\n    isGameOver = true;\n    onGameOver(playerWon);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Filtering Capability to TanStack Table in React\nDESCRIPTION: Enhances the DataTable component with filtering functionality using column filters state. Implements a search input that filters the email column and updates the table's filtering state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Database Dump using PSQL\nDESCRIPTION: Command to import a SQL dump file into a PostgreSQL database using psql client. Connects to a local database instance on default port 5432 using postgres credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/transferring-from-cloud-to-self-host-in-supabase-2oWNvW.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npsql -h 127.0.0.1 -p 5432 -d postgres -U postgres -f <dump-file-name>.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Function with CLI\nDESCRIPTION: Command to create a new Edge Function using Supabase CLI\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new hello-world\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Instrument Data\nDESCRIPTION: Command to run the seed script and populate the Instrument table with initial data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw prisma db seed\n```\n\n----------------------------------------\n\nTITLE: Disabling Prepared Statements in Node Postgres\nDESCRIPTION: Shows how to avoid using prepared statements in Node Postgres by omitting the 'name' property in the query definition object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/disabling-prepared-statements-qL8lEL.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = {\n  name: 'fetch-user', // <--------- DO NOT INCLUDE\n  text: 'SELECT * FROM user WHERE id = $1',\n  values: [1],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime Policy\nDESCRIPTION: TOML configuration for setting up background tasks in Supabase Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[edge_runtime]\npolicy = \"per_worker\"\n```\n\n----------------------------------------\n\nTITLE: Querying Prediction Results from Supabase\nDESCRIPTION: Python code for retrieving object detection predictions from a Supabase table based on the filename. It filters the 'predictions' table to find records matching the specified image.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = supabase.table('predictions') \\\n    .select(\"predictions\") \\\n    .filter(\"filename\", \"eq\", image) \\\n    .execute()\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for S3 Access\nDESCRIPTION: This snippet shows how to configure AWS credentials in the `~/.aws/credentials` file for accessing Supabase Storage via S3. It requires the AWS CLI to be installed and configured. Replace `your_access_key_id`, `your_secret_access_key`, `project_ref` and `project_region` with your actual Supabase project credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/s3/authentication.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# ~/.aws/credentials\n\n        [supabase]\n        aws_access_key_id = your_access_key_id\n        aws_secret_access_key = your_secret_access_key\n        endpoint_url = https://project_ref.supabase.co/storage/v1/s3\n        region = project_region\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with AsyncStorage\nDESCRIPTION: TypeScript code to configure the Supabase client with AsyncStorage for session persistence in a React Native app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Supabase Metrics Endpoint Using cURL\nDESCRIPTION: Example of how to access the Prometheus-compatible metrics endpoint for a Supabase project using cURL with HTTP Basic Auth. The username is 'service_role' and the password is the service role JWT from the Supabase dashboard.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/metrics.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> curl https://<project-ref>.supabase.co/customer/v1/privileged/metrics --user 'service_role:<service-role-jwt>'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hilt Dependencies\nDESCRIPTION: Adds Hilt dependencies for dependency injection, including Android integration and Compose navigation support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation \"com.google.dagger:hilt-android:$hilt_version\"\nannotationProcessor \"com.google.dagger:hilt-compiler:$hilt_version\"\nimplementation(\"androidx.hilt:hilt-navigation-compose:1.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Using Adaptive Retrieval Function in SQL\nDESCRIPTION: This SQL snippet demonstrates how to use the match_documents_adaptive function to perform a similarity search with a query embedding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom match_documents_adaptive(query_embedding, 10);\n```\n\n----------------------------------------\n\nTITLE: Downloading Supabase Function\nDESCRIPTION: Downloads a specific function from the linked Supabase project to your local environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions download function-name\n```\n\n----------------------------------------\n\nTITLE: Creating User Metadata During Signup with Supabase Auth in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Supabase JavaScript client's signUp function to create a new user with additional metadata including personal information. The metadata is stored in the auth.raw_user_meta_data column of the auth.users table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/customizing-emails-by-language-KZ_38Q.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.signUp({\n  email: 'email@some_[email.com](http://email.com/)',\n  password: 'example-password',\n  options: {\n    data: {\n      first_name: 'John',\n      last_name: 'Doe',\n      age: 27,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Store Data with Supabase in TypeScript\nDESCRIPTION: Functions to load store information and retrieve transformed images from Supabase database and storage. Includes image transformation parameters for optimized loading.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n  async loadStoreInformation(id: number) {\n    const { data } = await this.supabase\n      .from('stores')\n      .select('*')\n      .match({ id })\n      .single();\n    return data;\n  }\n\n  async getStoreImage(id: number) {\n    return this.supabase.storage\n      .from('stores')\n      .getPublicUrl(`images/${id}.png`, {\n        transform: {\n          width: 300,\n          resize: 'contain',\n        },\n      }).data.publicUrl;\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Storage API with Supabase Storage Client\nDESCRIPTION: This JavaScript snippet demonstrates using the Supabase Storage Client to list files in the 'teams' bucket. It requires a valid JWT token with appropriate permissions and the '@supabase/storage-js' library to interact with the Storage API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { StorageClient } = require('@supabase/storage-js')\n\nconst PROJECT_URL = 'https://your-project-id.supabase.co/storage/v1'\n\nconst storage = new StorageClient(PROJECT_URL, {\n  authorization: `Bearer ${token}`,\n})\n\nawait storage.from('teams').list()\n```\n\n----------------------------------------\n\nTITLE: Initializing Postgres Message Queue Extension\nDESCRIPTION: Configures the pgmq extension for creating durable message queues in PostgreSQL, providing reliable message delivery and queue management capabilities\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/static-data/integrations/queues/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pgmq\n```\n\n----------------------------------------\n\nTITLE: Dropping Queue\nDESCRIPTION: Deletes a queue and its archive table completely from the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.drop_queue('my_unlogged');\n```\n\n----------------------------------------\n\nTITLE: Ingesting Movie Data into Postgres with Slonik\nDESCRIPTION: JavaScript function that inserts movie documents into a Postgres database using the Slonik SQL query builder. It handles document validation, inserts data with proper field mapping, and implements an upsert pattern to handle duplicate IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Ingesting search documents\nasync function ingest({ document, pool }) {\n  // Ignore rows without proper release dates\n  if (document.release_date.trim().length === 0) {\n    return\n  }\n\n  await pool.query(sql`\ninsert into movies (\n\tid, \n\ttitle, \n\toriginal_title, \n\toverview, \n\treleased_at\n)\nvalues\n(\n\t${document.id},\n\t${document.title},\n\t${document.original_title},\n\t${document.overview},\n\t${new Date(document.release_date).toISOString()}::timestamptz\n)\non conflict (id) do update set\n  title=${document.title}, \n\toriginal_title=${document.original_title}, \n\toverview=${document.overview}, \n\treleased_at=${new Date(document.release_date).toISOString()}::timestamptz\n;\n`)\n```\n\n----------------------------------------\n\nTITLE: Llamafile Integration with OpenAI-Compatible API\nDESCRIPTION: Implements LLM inference using Mozilla Llamafile with OpenAI-compatible API interface. Processes chat completion requests with system and user messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from 'https://deno.land/x/openai@v4.53.2/mod.ts'\n\nDeno.serve(async (req) => {\n  const client = new OpenAI()\n  const { prompt } = await req.json()\n  const stream = true\n\n  const chatCompletion = await client.chat.completions.create({\n    model: 'LLaMA_CPP',\n    stream,\n    messages: [\n      {\n        role: 'system',\n        content:\n          'You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.',\n      },\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ],\n  })\n\n  if (stream) {\n    const headers = new Headers({\n      'Content-Type': 'text/event-stream',\n      Connection: 'keep-alive',\n    })\n\n    const stream = new ReadableStream({\n      async start(controller) {\n        const encoder = new TextEncoder()\n\n        try {\n          for await (const part of chatCompletion) {\n            controller.enqueue(encoder.encode(part.choices[0]?.delta?.content || ''))\n          }\n        } catch (err) {\n          console.error('Stream error:', err)\n        } finally {\n          controller.close()\n        }\n      },\n    })\n\n    return new Response(stream, {\n      headers,\n    })\n  }\n\n  return Response.json(chatCompletion)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Secure Content Table in Supabase\nDESCRIPTION: SQL code to create a private_posts table and populate it with dummy secure content for demonstration purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n-- Dummy table that contains \"secure\" information\ncreate table\n  if not exists public.private_posts (\n    id int generated by default as identity primary key,\n    content text not null\n  );\n\n-- Dmmy \"secure\" data\ninsert into\n  public.private_posts (content)\nvalues\n  ('Flutter is awesome!'),\n  ('Supabase is awesome!'),\n  ('Postgres is awesome!');\n```\n\n----------------------------------------\n\nTITLE: Querying Large Files in Supabase Storage\nDESCRIPTION: SQL query to list files larger than 5 MB with size formatting, retrieving file name, bucket, and human-readable file size\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-size.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    name,\n    bucket_id as bucket,\n    case\n        when (metadata->>'size')::int >= 1073741824 then\n            ((metadata->>'size')::int / 1073741824.0)::numeric(10, 2) || ' GB'\n        when (metadata->>'size')::int >= 1048576 then\n            ((metadata->>'size')::int / 1048576.0)::numeric(10, 2) || ' MB'\n        when (metadata->>'size')::int >= 1024 then\n            ((metadata->>'size')::int / 1024.0)::numeric(10, 2) || ' KB'\n        else\n            (metadata->>'size')::int || ' bytes'\n        end as size\nfrom\n    storage.objects\nwhere\n    (metadata->>'size')::int > 1048576 * 5\norder by (metadata->>'size')::int desc\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Server Client with SvelteKit Hooks\nDESCRIPTION: Implements server-side hooks for SvelteKit that initialize the Supabase client with cookie-based authentication and adds a safe session retrieval method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks.server.ts\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\nimport { createServerClient } from '@supabase/ssr'\nimport type { Handle } from '@sveltejs/kit'\n\nexport const handle: Handle = async ({ event, resolve }) => {\n  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n    cookies: {\n      getAll: () => event.cookies.getAll(),\n      /**\n       * SvelteKit's cookies API requires `path` to be explicitly set in\n       * the cookie options. Setting `path` to `/` replicates previous/\n       * standard behavior.\n       */\n      setAll: (cookiesToSet) => {\n        cookiesToSet.forEach(({ name, value, options }) => {\n          event.cookies.set(name, value, { ...options, path: '/' })\n        })\n      },\n    },\n  })\n\n  /**\n   * Unlike `supabase.auth.getSession()`, which returns the session _without_\n   * validating the JWT, this function also calls `getUser()` to validate the\n   * JWT before returning the session.\n   */\n  event.locals.safeGetSession = async () => {\n    const {\n      data: { session },\n    } = await event.locals.supabase.auth.getSession()\n    if (!session) {\n      return { session: null, user: null }\n    }\n\n    const {\n      data: { user },\n      error,\n    } = await event.locals.supabase.auth.getUser()\n    if (error) {\n      // JWT validation has failed\n      return { session: null, user: null }\n    }\n\n    return { session, user }\n  }\n\n  return resolve(event, {\n    filterSerializedResponseHeaders(name) {\n      return name === 'content-range' || name === 'x-supabase-api-version'\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users in Supabase Auth Using Password Hashes - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to create new users in Supabase Auth using a password hash. It requires the '@supabase/supabase-js' library for creating a Supabase client. The function uses the 'createUser' method from the Supabase admin API and requires the user's email, password hash, and email confirmation status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\\n\\n// ---cut---\\nconst { data, error } = await supabase.auth.admin.createUser({\\n  email: 'valid.email@supabase.io',\\n  password_hash: '$2y$10$a9pghn27d7m0ltXvlX8LiOowy7XfFw0hW0G80OjKYQ1jaoejaA7NC',\\n  email_confirm: true,\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Logging in PGAudit\nDESCRIPTION: SQL commands to set up and check global logging for the 'postgres' role, effectively monitoring all database activity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter role \"postgres\" set pgaudit.log to 'all';\n\nselect\n  rolname,\n  rolconfig\nfrom pg_roles\nwhere rolname = 'postgres';\n-- should return a rolconfig path with \"pgaudit.log=all\" present\n\nalter role \"postgres\" set pgaudit.log to 'none';\n```\n\n----------------------------------------\n\nTITLE: Using Infinite Query Hook with Filtering\nDESCRIPTION: This code snippet shows how to use the `useInfiniteQuery` hook to filter data based on search parameters. It uses the `useSearchParams` hook to get the search query from the URL and applies a filter to the Supabase query to only fetch products whose names contain the search query.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst params = useSearchParams()\nconst searchQuery = params.get('q')\n\nconst { data, isLoading, isFetching, fetchNextPage, count, isSuccess } = useInfiniteQuery({\n  tableName: 'products',\n  columns: '*',\n  pageSize: 10,\n  trailingQuery: (query) => {\n    if (searchQuery && searchQuery.length > 0) {\n      query = query.ilike('name', `%${searchQuery}%`)\n    }\n    return query\n  },\n})\n\nreturn (\n  <div>\n    {data.map((item) => (\n      <ProductCard key={item.id} product={item} />\n    ))}\n    <Button onClick={fetchNextPage}>Load more products</Button>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating createClient configuration in TypeScript\nDESCRIPTION: Example of how to update the createClient configuration when upgrading to supabase-js v2. The new version uses a more explicit options structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n  db: {\n    schema: 'custom',\n  },\n  auth: {\n    persistSession: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting User Metadata - Kotlin\nDESCRIPTION: Fetches the current user's metadata using Kotlin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval user = supabase.auth.retrieveUserForCurrentSession()\n//Or you can use the user from the current session:\nval user = supabase.auth.currentUserOrNull()\nval metadata = user?.userMetadata\n```\n\n----------------------------------------\n\nTITLE: Signing In with Discord - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to sign in users using Discord OAuth through the Supabase client. The `signInWith()` method is called with `Discord` as the provider to initiate the login process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithDiscord() {\\n\\tsupabase.auth.signInWith(Discord)\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Optional Identity Primary Key in SQL\nDESCRIPTION: Creates a movies table with a bigint primary key that allows manual value insertion while still supporting auto-generation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table movies (\n  id bigint generated by default as identity primary key\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Upload Component in Angular with Supabase Storage\nDESCRIPTION: This TypeScript code defines an AvatarComponent for handling profile photo uploads and downloads using Supabase Storage. It includes methods for image manipulation and event handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, EventEmitter, Input, Output } from '@angular/core'\nimport { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser'\nimport { SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.css'],\n})\nexport class AvatarComponent {\n  _avatarUrl: SafeResourceUrl | undefined\n  uploading = false\n\n  @Input()\n  set avatarUrl(url: string | null) {\n    if (url) {\n      this.downloadImage(url)\n    }\n  }\n\n  @Output() upload = new EventEmitter<string>()\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly dom: DomSanitizer\n  ) {}\n\n  async downloadImage(path: string) {\n    try {\n      const { data } = await this.supabase.downLoadImage(path)\n      if (data instanceof Blob) {\n        this._avatarUrl = this.dom.bypassSecurityTrustResourceUrl(URL.createObjectURL(data))\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error('Error downloading image: ', error.message)\n      }\n    }\n  }\n\n  async uploadAvatar(event: any) {\n    try {\n      this.uploading = true\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const filePath = `${Math.random()}.${fileExt}`\n\n      await this.supabase.uploadAvatar(filePath, file)\n      this.upload.emit(filePath)\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.uploading = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Colors in Chart Configuration using hex, hsl or oklch in React/TSX\nDESCRIPTION: Shows how to define colors directly in the chart configuration object using preferred color formats like hex, HSL, or OKLCH. The example uses TypeScript with a satisfies operator for type checking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartConfig = {\n  desktop: {\n    label: 'Desktop',\n    color: '#2563eb',\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project Directory\nDESCRIPTION: Command to create a new Supabase directory structure for project configuration and management\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Registering a Discord Slash Command using cURL\nDESCRIPTION: This snippet shows how to use cURL to register a 'hello' slash command for a Discord bot. It requires the bot token and client ID from the Discord Developer Portal.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBOT_TOKEN='replace_me_with_bot_token'\nCLIENT_ID='replace_me_with_client_id'\ncurl -X POST \\\n-H 'Content-Type: application/json' \\\n-H \"Authorization: Bot $BOT_TOKEN\" \\\n-d '{\"name\":\"hello\",\"description\":\"Greet a person\",\"options\":[{\"name\":\"name\",\"description\":\"The name of the person\",\"type\":3,\"required\":true}]}' \\\n\"https://discord.com/api/v8/applications/$CLIENT_ID/commands\"\n```\n\n----------------------------------------\n\nTITLE: Running pgbench Initial Setup for PostgreSQL Benchmarking\nDESCRIPTION: Command to initialize pgbench with a scale factor of 150 for performance testing of PostgreSQL 13.3\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-26-supabase-postgres-13.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npgbench -i -s 150\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library as a dependency for the Svelte application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Deno Webhook: WhatsApp and SMS Messaging with Regional Routing\nDESCRIPTION: Advanced JavaScript implementation for sending messages via WhatsApp or SMS based on user's country code, supporting Latin American region\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendMessage = async (\n    messageBody: string,\n    accountSid: string | undefined,\n    authToken: string | undefined,\n    fromNumber: string,\n    toNumber: string,\n    useWhatsApp: boolean,\n): Promise < any > => {\n    if (!accountSid || !authToken) {\n        console.log(\"Your Twilio account credentials are missing. Please add them.\");\n        return;\n    }\n    const url: string = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`;\n\n    const encodedCredentials: string = base64.fromUint8Array(\n        new TextEncoder().encode(`${accountSid}:${authToken}`),\n    );\n\n    const body: URLSearchParams = new URLSearchParams({\n        To: useWhatsApp ? `whatsapp:${toNumber}` : toNumber,\n        From: useWhatsApp ? `whatsapp:${fromNumber}` : smsFromNumber,\n        Body: messageBody,\n    });\n\n    const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": `Basic ${encodedCredentials}`,\n        },\n        body,\n    });\n\n    return response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Infinite Query Hook with Sorting\nDESCRIPTION: This code snippet demonstrates how to use the `useInfiniteQuery` hook with sorting applied to the data fetched from a Supabase table. It fetches data from the 'products' table, orders it by 'created_at' in descending order, and displays the products in a list with a button to load more.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, fetchNextPage } = useInfiniteQuery({\n  tableName: 'products',\n  columns: '*',\n  pageSize: 10,\n  trailingQuery: (query) => query.order('created_at', { ascending: false }),\n})\n\nreturn (\n  <div>\n    {data.map((item) => (\n      <ProductCard key={item.id} product={item} />\n    ))}\n    <Button onClick={fetchNextPage}>Load more products</Button>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Listening to DELETE Events in Kotlin with Supabase Realtime\nDESCRIPTION: Sets up a Kotlin channel to listen for DELETE events in the public schema of a Supabase database. The code creates a flow of PostgresAction.Delete events and processes them in a coroutine scope.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Delete>(schema = \"public\")\n\nchanges\n    .onEach {\n        println(it.oldRecord)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Sending Broadcast Message with Supabase Realtime JavaScript\nDESCRIPTION: This snippet shows how to send a broadcast message to a Supabase Realtime channel.  It uses the `send` method on the channel object, specifying the message type as 'broadcast', an event name, and a payload containing the message data. The code assumes that a Supabase client has already been initialized and a channel has been created.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\nconst roomOne = supabase.channel('room-one') // set your topic here\n\n// ---cut---\nroomOne.send({\n  type: 'broadcast',\n  event: 'test',\n  payload: { message: 'hello, world' },\n})\n```\n\n----------------------------------------\n\nTITLE: Sign Out in Kotlin\nDESCRIPTION: This code snippet demonstrates how to sign out a user using the Supabase Kotlin client library. It calls the `signOut` function. The function suspends until the sign-out process is complete.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Offline-First App\nDESCRIPTION: Adds required dependencies including WatermelonDB, Supabase client, and expo-build-properties to the React Native project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @nozbe/watermelondb @supabase/supabase-js expo-build-properties\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Basic Function\nDESCRIPTION: The GraphQL schema automatically generated from the SQL function. It shows how SQL parameter defaults translate to optional GraphQL parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntype Query {\n  addNums(a: Int!, b: Int): Int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Signup with Dart\nDESCRIPTION: Dart code snippet for signing up a new user with email and password authentication in Supabase. This example uses the implicit flow to register users with their email and password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signUpNewUser() async {\n  final AuthResponse res = await supabase.auth.signUp(\n    email: 'valid.email@supabase.io',\n    password: 'example-password'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Remote Database Changes\nDESCRIPTION: Command to pull database changes from a remote Supabase branch to local migrations directory using database URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db pull --db-url \"postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Complete Animated Constellation Component with React Three Fiber\nDESCRIPTION: The final implementation of the animated constellation effect, combining all previous concepts into a complete React component with Three.js rendering, particle management, and the figure-8 animation pattern.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useEffect, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { AdditiveBlending } from 'three'\nimport useParticlesConfig from './hooks/useParticlesConfig'\n\nconst ParticlesCanvas = () => {\n  if (typeof window === 'undefined') return null\n  const { config, particles } = useParticlesConfig()\n\n  const Geometry = useMemo(\n    () => () => <circleGeometry args={[config.particlesSize, config.particlesSides]} />,\n    []\n  )\n\n  const Material = () =>\n    useMemo(\n      () => (\n        <meshStandardMaterial\n          color={config.color}\n          blending={config.particlesBlending ? AdditiveBlending : undefined}\n        />\n      ),\n      []\n    )\n\n  return (\n    <div style={{ width: 100vw, height: 100vh, background: \"#000000\" }}>\n      <Canvas\n        dpr={[1, 2]}\n        camera={{ fov: 75, position: [0, 0, 500] }}\n      >\n        <ambientLight intensity={config.lightIntensity} />\n        <group>\n          {particles?.map((particle, index) => (\n            <Particle\n              key={particle.username}\n            >\n              <Geometry />\n              <Material />\n            </Particle>\n          ))}\n        </group>\n      </Canvas>\n    </div>\n  )\n}\n\nconst Particle = ({ children }: Props) => {\n  const particle = useRef(null)\n\n  const pathOffset =\n    Math.pow(\n      Math.random() * config.xRandomnessShape,\n      config.xRandomness - config.xRandomness / 2\n    ) * config.xThickness\n\n  const verticalRandomness = Math.random() * (config.yThickness - 1) + 1 - config.yThickness / 2\n\n  const speed = Math.random() * (config.min_speed - config.max_speed) + config.max_speed\n\n  const circumference = (config.widthRadius * Math.PI * 2) / 100\n  const delayOffsetFactor = 100\n  const delayOffset = Math.random() * delayOffsetFactor\n\n  useFrame(({ clock }) => {\n    const timer = clock.getElapsedTime() * speed + delayOffset\n    const isEven = Math.floor(timer / circumference) % 2 == 0\n\n\t\t// When the loop count is even, draw bottom 8 shape\n    // if odd, draw top 8 shape\n    particle.current.position.x = isEven\n      ? Math.sin(timer) * config.widthRadius * config.widthRatio + pathOffset\n      : Math.sin(timer) * config.widthRadius + pathOffset\n    particle.current.position.y = isEven\n      ? Math.cos(timer) * config.bottomHeightRadius -\n        config.bottomHeightRadius +\n        verticalRandomness\n      : -Math.cos(timer) * config.topHeightRadius + config.topHeightRadius + verticalRandomness\n  })\n\n  return <mesh ref={particle}>{children}</mesh>\n}\n\nexport default Particle\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy for Realtime Messages\nDESCRIPTION: SQL policy that allows authenticated users to receive broadcast messages from the realtime.messages table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Authenticated users can receive broadcasts\"\non \"realtime\".\"messages\"\nfor select\nto authenticated\nusing ( true );\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Function with Unnamed Parameter\nDESCRIPTION: Illustrates how to send a POST request to a PostgreSQL function with an unnamed parameter using a webhook. This example shows the structure of the request and payload for storing email bounce data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-postgrest-9.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOST https://<PROJECT_REF>.supabase.co/rest/v1/rpc/store_bounces HTTP/1.1\nContent-Type: application/json\n\n{\n  \"RecordType\": \"Bounce\",\n  \"MessageStream\": \"outbound\",\n  \"ID\": 4323372036854775807,\n  \"Type\": \"HardBounce\",\n  \"MessageID\": \"883953f4-6105-42a2-a16a-77a8eac79483\",\n  \"Description\": \"The server was unable to deliver your message (ex: unknown user, mailbox not found).\",\n  \"Details\": \"Test bounce details\",\n  \"Email\": \"john@example.com\",\n  \"From\": \"sender@example.com\",\n  \"BouncedAt\": \"2019-11-05T16:33:54.9070259Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Audit Table in PostgreSQL\nDESCRIPTION: Defines the structure of the audit table using JSONB data type for flexible schema-less storage of audited records. This approach allows auditing multiple tables in a single audit table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table audit.record_version (\n  id bigserial primary key,\n  -- auditing metadata\n  record_id uuid, -- identifies a new record by it's table + primary key\n  old_record_id uuid, -- ^\n  op varchar(8) not null, -- INSERT/UPDATE/DELETE/TRUNCATE\n  ts timestamptz not null default now(),\n  -- table identifiers\n  table_oid oid not null, -- pg internal id for a table\n  table_schema name not null, -- audited table's schema name e.g. 'public'\n  table_name name not null, -- audited table's table name e.g. 'account'\n  -- record data\n  record jsonb, -- contents of the new record\n  old_record jsonb -- previous record contents (for UPDATE/DELETE)\n);\n```\n\n----------------------------------------\n\nTITLE: Docker Container Build and Run Command\nDESCRIPTION: Command to build and start the Docker container using docker-compose, which initializes the ChatGPT plugin for local testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Creates a new Supabase project in a local folder using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Downloading Image with Transformation (JavaScript)\nDESCRIPTION: Shows how to download an image from Supabase storage with specific width and height transformations\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-image-transformations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.storage.from('bucket').download('image-2.jpg', {\n  transform: {\n    width: 800,\n    height: 300,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Custom Mode in Supabase Storage in Python\nDESCRIPTION: This snippet shows how to download an image with custom dimensions (800x300) and the 'contain' resize mode using the Python client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nresponse = supabase.storage.from_('bucket').download(\n  'image.jpg',\n  {\n    'transform': {\n      'width': 800,\n      'height': 300,\n      'resize': 'contain', # 'cover' | 'fill'\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Lobby Dialog for Multiplayer Game in Flutter\nDESCRIPTION: Dart code for the lobby dialog widget, which displays waiting players and handles game start functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _LobbyDialog extends StatefulWidget {\n  const _LobbyDialog({\n    required this.onGameStarted,\n  });\n\n  final void Function(String gameId) onGameStarted;\n\n  @override\n  State<_LobbyDialog> createState() => _LobbyDialogState();\n}\n\nclass _LobbyDialogState extends State<_LobbyDialog> {\n  final List<String> _userids = [];\n  bool _loading = false;\n\n  /// TODO: assign unique identifier for the user\n  final myUserId = '';\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      title: const Text('Lobby'),\n      content: _loading\n          ? const SizedBox(\n              height: 100,\n              child: Center(child: CircularProgressIndicator()),\n            )\n          : Text('${_userids.length} users waiting'),\n      actions: [\n        TextButton(\n          onPressed: _userids.length < 2\n              ? null\n              : () async {\n                  setState(() {\n                    _loading = true;\n                  });\n\n                  // TODO: notify the other player the start of the game\n                },\n          child: const Text('start'),\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firestore Document Example (JSON)\nDESCRIPTION: This JSON snippet represents an example Firestore document.  It shows the structure of a document with fields like 'user', 'score', and 'items'. This is an example of the data being migrated and potentially transformed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{ \"user\": \"mark\", \"score\": 100, \"items\": [\"hammer\", \"nail\", \"glue\"] }]\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Calendar Component\nDESCRIPTION: Command to install the required dependencies (react-day-picker and date-fns) for the Calendar component when setting up manually.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/calendar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker date-fns\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Index\nDESCRIPTION: Creates an index on the vector column to optimize similarity search performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nreviews.create_index()\n```\n\n----------------------------------------\n\nTITLE: Full Text Search on Description Using Swift\nDESCRIPTION: Swift implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet response = await client.from(\"books\")\n  .select()\n  .textSearch(\"description\", value: \"'big'\")\n  .execute()\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_plan_filter Extension for All Connections in PostgreSQL\nDESCRIPTION: Demonstrates how to enable the pg_plan_filter extension globally for all database connections by modifying the session_preload_libraries setting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nalter database some_db set session_preload_libraries = 'plan_filter';\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Tooltip in React/TSX\nDESCRIPTION: Demonstrates how to implement a chart tooltip using the ChartTooltip component with ChartTooltipContent as its content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartTooltip content={<ChartTooltipContent />} />\n```\n\n----------------------------------------\n\nTITLE: Background Tailwind Class Examples\nDESCRIPTION: Showcases background utility classes for different surface levels and contexts in the Supabase design system\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/tailwind-theming.md#2025-04-21_snippet_1\n\nLANGUAGE: tailwind\nCODE:\n```\nbg-surface-100\nbg-overlay\nbg-alternative\ntext-background-surface-100\n```\n\n----------------------------------------\n\nTITLE: Signing Out Users in Supabase Flutter\nDESCRIPTION: This Flutter code snippet signs out a user and removes their session using Supabase's `signOut` function. It is essential to manage user session state and ensure smooth logout processes across applications implemented with Flutter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Function with SECURITY INVOKER\nDESCRIPTION: A basic PostgreSQL function template that returns 'hello world' with SECURITY INVOKER setting and empty search path for security.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function my_schema.hello_world()\nreturns text\nlanguage plpgsql\nsecurity invoker\nset search_path = ''\nas $$\nbegin\n  return 'hello world';\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Index in SQL\nDESCRIPTION: This example demonstrates how to create a multi-column index in Postgres, which can be beneficial for queries that frequently filter on multiple columns together.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate index test2_mm_idx on test2 (major, minor);\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module for Login Page with ReactiveFormsModule\nDESCRIPTION: This snippet shows how to set up the Angular module for the login page by importing and configuring ReactiveFormsModule, which is needed for creating reactive forms in the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n\nimport { IonicModule } from '@ionic/angular'\n\nimport { LoginPageRoutingModule } from './login-routing.module'\n\nimport { LoginPage } from './login.page'\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, LoginPageRoutingModule, ReactiveFormsModule],\n  declarations: [LoginPage],\n})\nexport class LoginPageModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Python Client with PIP\nDESCRIPTION: Installs the Supabase Python client library using PIP package manager. This is for Python version 3.8 and above.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/python/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install supabase\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Server-Side Auth Package\nDESCRIPTION: Command to install the Supabase SSR package for server-side authentication handling in Next.js.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/ssr\n```\n\n----------------------------------------\n\nTITLE: Disabling Prepared Statements in Prisma with Connection String Configuration\nDESCRIPTION: Adds the pgbouncer=true parameter to the end of the Prisma connection string to disable prepared statements when using Supavisor in transaction mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/disabling-prepared-statements-qL8lEL.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npostgres://[db-user].[project-ref]:[db-password]@aws-0-[aws-region].pooler.supabase.com:6543/[db-name]?pgbouncer=true\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-One Relationships with supabase-js\nDESCRIPTION: Demonstrates how to query a one-to-one relationship between country and capital tables using supabase-js, resulting in a nested JSON object structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('country')\n  .select('name,capital(name)')\n  .in('id', [1, 2])\n\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Task API with Route Parameters in Hono Framework\nDESCRIPTION: A Hono framework implementation for a task management API. This example shows how to set up a base path with the function name and define routes with parameters. It demonstrates accessing route parameters through c.req.param() and handling HTTP responses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'jsr:@hono/hono'\n\n// You can set the basePath with Hono\nconst functionName = 'tasks'\nconst app = new Hono().basePath(`/${functionName}`)\n\n// /tasks/id\napp.get('/:id', async (c) => {\n  const id = c.req.param('id')\n  const task = {} // Fetch task by id here\n  if (task) {\n    return new Response(JSON.stringify(task))\n  } else {\n    return new Response('Task not found', { status: 404 })\n  }\n})\n\napp.patch('/:id', async (c) => {\n  const id = c.req.param('id')\n  const body = await c.req.body()\n  const updates = body.value\n  const task = {} // Fetch task by id here\n  if (task) {\n    Object.assign(task, updates)\n    return new Response(JSON.stringify(task))\n  } else {\n    return new Response('Task not found', { status: 404 })\n  }\n})\n\napp.delete('/:id', async (c) => {\n  const id = c.req.param('id')\n  const task = {} // Fetch task by id here\n  if (task) {\n    // Delete task\n    return new Response('Task deleted successfully')\n  } else {\n    return new Response('Task not found', { status: 404 })\n  }\n})\n\nDeno.serve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for WebAssembly Module\nDESCRIPTION: This Cargo.toml file sets up the project configuration for building a WebAssembly module. It specifies the package name, version, edition, and dependencies including wasm-bindgen for JavaScript interoperability.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/wasm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"add-wasm\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nwasm-bindgen = \"0.2.84\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQL Database Schema for User Profiles in Supabase\nDESCRIPTION: SQL commands to create and configure a profiles table with row level security policies, set up Supabase Realtime for the profiles table, and configure storage for avatar images with appropriate access policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nuxt3-user-management/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for public \"profiles\"\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\"\n  on profiles for select\n  using ( true );\n\ncreate policy \"Users can insert their own profile.\"\n  on profiles for insert\n  with check ( (select auth.uid()) = id );\n\ncreate policy \"Users can update own profile.\"\n  on profiles for update\n  using ( (select auth.uid()) = id );\n\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\"\n  on storage.objects for select\n  using ( bucket_id = 'avatars' );\n\ncreate policy \"Anyone can upload an avatar.\"\n  on storage.objects for insert\n  with check ( bucket_id = 'avatars' );\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Supabase Realtime in Flutter\nDESCRIPTION: Dart code defining constants for Supabase Realtime channel and event names to be used in the Flutter Figma clone app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Constants {\n  /// Name of the Realtime channel\n  static const String channelName = 'canvas';\n\n  /// Name of the broadcast event\n  static const String broadcastEventName = 'canvas';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Index on a JSONB Key in SQL\nDESCRIPTION: This example demonstrates how to create an index on a specific key within a JSONB column using a standard BTREE index, which can be more efficient than indexing the entire JSONB body.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate table person (\n  id serial primary key,\n  data jsonb\n);\n\ncreate index index_name on person ((data ->> 'name'));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Handler for Individual Posts\nDESCRIPTION: Server Component for dynamic routes that fetches an individual post by ID and handles the not found case.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport supabase from '../../../utils/supabase'\nimport { notFound } from 'next/navigation'\n\nexport default async function Post({ params: { id } }: { params: { id: string } }) {\n  const { data } = await supabase.from('posts').select().match({ id }).single()\n\n  if (!data) {\n    notFound()\n  }\n\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Instrument Model in Prisma Schema\nDESCRIPTION: Prisma schema definition for the Instrument model with id and name fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Instrument {\n  id   Int    @id @default(autoincrement())\n  name String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Transformed Image in Swift\nDESCRIPTION: This snippet illustrates how to use the Supabase Swift client to get a public URL for a transformed image, specifying width and height.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet url = try await supabase.storage.from(\"bucket\")\n  .getPublicURL(\n    path: \"image.jpg\"\n    options: TransformOptions(with: 500, height: 600)\n  )\n```\n\n----------------------------------------\n\nTITLE: Listening to DELETE Events in JavaScript with Supabase Realtime\nDESCRIPTION: Creates a channel to listen specifically for DELETE events in the public schema of a Supabase database. The code establishes a subscription that logs payload data whenever database deletions occur.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst changes = supabase\n  .channel('schema-db-changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'DELETE', // Listen only to DELETEs\n      schema: 'public',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Resetting PostgreSQL Sequence Values\nDESCRIPTION: These SQL commands show two methods to reset a sequence: using setval() to set the sequence to the maximum ID plus one, or using ALTER SEQUENCE to restart the sequence with a specific value. This is useful when fixing sequence misalignments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-are-there-gaps-in-my-postgres-id-sequence-Frifus.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT setval('{table}_{column}_seq', (SELECT max(id) FROM <table_name>) + 1);\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE '{table}_{column}_seq' RESTART WITH new_value;\n```\n\n----------------------------------------\n\nTITLE: Export Postgres Database using pg_dump\nDESCRIPTION: This command exports a Postgres database to a file (dump.sql) using pg_dump. The command includes options to clean existing objects, handle identifier quoting, exclude ownership information and privileges, and connects to the database using host, user, and database credentials. The output is redirected to a dump file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"pg_dump --clean --if-exists --quote-all-identifiers \\\n-h $HOST -U $USER -d $DATABASE \\\n--no-owner --no-privileges > dump.sql\"\n```\n\n----------------------------------------\n\nTITLE: Calling Authorization Test Function in JavaScript with Supabase\nDESCRIPTION: This JavaScript snippet demonstrates how to call the test_authorization_header function using Supabase's RPC method. It logs the user's role and UUID, helping to debug authentication-related issues.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-is-my-select-returning-an-empty-data-array-and-i-have-data-in-the-table-xvOPgx.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: testData, error: testError } = await supabase.rpc('test_authorization_header')\nconsole.log(`The user role is ${testData.role} and the user UUID is ${testData.sub}. `, testError)\n```\n\n----------------------------------------\n\nTITLE: Integrating the Avatar Component into an Account Page\nDESCRIPTION: Code snippet showing how to add the Avatar component to an existing Account page. It demonstrates how to pass the required props including the current avatar URL, size, and the upload event handler that updates the profile.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Import the new component\nimport Avatar from './Avatar'\n\n// ...\n\nreturn (\n  <form onSubmit={updateProfile} class=\"form-widget\">\n    {/* Add to the body */}\n    <Avatar\n      url={avatarUrl()}\n      size={150}\n      onUpload={(e: Event, url: string) => {\n        setAvatarUrl(url)\n        updateProfile(e)\n      }}\n    />\n    {/* ... */}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy with Different Access Levels for Anonymous vs. Permanent Users\nDESCRIPTION: SQL policy that limits anonymous users to view only posts created today while giving permanent users full read access to all posts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Limit access to anonymous users\"\non public.posts\nfor select\nto authenticated -- Note: user is still authenticated\nusing (\n  case\n    when (select (auth.jwt() ->> 'is_anonymous'))::boolean is true\n    then (created_at >= current_date)\n  else\n    true\n  end\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Function for Image Processing\nDESCRIPTION: Command to create a new Supabase Edge Function for image manipulation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/image-manipulation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new image-blur\n```\n\n----------------------------------------\n\nTITLE: Explaining Query Execution Plan in PostgreSQL\nDESCRIPTION: This SQL command displays the execution plan for a query, showing how PostgreSQL will execute it. It helps to understand if indexes are being used or if sequential scans are happening.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nexplain select name from persons where age = 32;\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables in Angular\nDESCRIPTION: Setting up environment variables for Supabase URL and API key in the Angular environment file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const environment = {\n  production: false,\n  supabaseUrl: 'YOUR_SUPABASE_URL',\n  supabaseKey: 'YOUR_SUPABASE_KEY',\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Supabase Initialization Without Auth Callback in v2\nDESCRIPTION: Demonstrates how the authCallbackUrlHostname parameter has been removed from Supabase.initialize() in v2. The SDK now automatically detects auth callback URLs and handles them internally.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n  authCallbackUrlHostname: 'auth-callback',\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson serializer dependency in Maven POM file\nDESCRIPTION: This XML snippet shows how to add the Jackson serializer dependency in a Maven project. It's required for using Jackson as the serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>serializer-jackson</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization Plugin in Kotlin Build Script\nDESCRIPTION: Adds the KotlinX Serialization plugin to a Kotlin project using Gradle with the Kotlin DSL. This is required to use the default serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.serialization\") version \"KOTLIN_VERSION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Presence Key in Dart\nDESCRIPTION: This snippet demonstrates how to set a custom presence key while creating a channel in Dart.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nfinal channelC = supabase.channel(\n  'test',\n  opts: const RealtimeChannelConfig(key: 'userId-123'),\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function for Open Graph Image Generation\nDESCRIPTION: This command deploys the 'opengraph' Supabase function to the cloud environment. It also disables JWT verification, which should be carefully considered for production use.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/opengraph/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy opengraph --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Client-Side OAuth Implementation with Supabase\nDESCRIPTION: Client-side implementation of OAuth authentication using Supabase's signInWithOAuth method with redirect handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient, type Provider } from '@supabase/supabase-js';\nconst supabase = createClient('url', 'anonKey')\nconst provider = 'provider' as Provider\n\n// ---cut---\nawait supabase.auth.signInWithOAuth({\n  provider,\n  options: {\n    redirectTo: `http://example.com/auth/callback`,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Python Package\nDESCRIPTION: Command to install the Supabase library as a dependency for the Flask application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install supabase\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Dart Package via Terminal\nDESCRIPTION: Command to add the Supabase package to a non-Flutter Dart project using the dart pub add command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/installing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndart pub add supabase\n```\n\n----------------------------------------\n\nTITLE: Connecting to Restored Local Database with PSQL\nDESCRIPTION: Command to connect to the restored local Postgres database using psql client with default credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/restoring-downloaded-backup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npsql 'postgresql://postgres:postgres@localhost:54322/postgres'\n```\n\n----------------------------------------\n\nTITLE: RLS Policy for Two-Factor Authentication Check in SQL\nDESCRIPTION: This SQL snippet creates a restrictive Row Level Security policy that only allows users who have passed second factor verification to read from a table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Only users that have passed second factor verification can read from table\"\n  on table_name\n  for select\n  as restrictive\n  to authenticated\n  using (\n    ((select auth.jwt()->'fva'->>1) != '-1')\n  );\n```\n\n----------------------------------------\n\nTITLE: Resetting PostgreSQL Log Level to Default in SQL\nDESCRIPTION: This SQL command resets the log_min_messages setting to its default value for the postgres role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER ROLE postgres RESET log_min_messages;\n```\n\n----------------------------------------\n\nTITLE: Reading Messages with Polling\nDESCRIPTION: Reads messages with long-polling support for waiting on new messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.read_with_poll('my_queue', 1, 1, 5, 100);\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Component with Magic Links in Ionic Vue\nDESCRIPTION: Vue component for user authentication that implements passwordless login using Supabase Magic Links. Includes form handling, error management, and toast notifications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Login</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <div class=\"ion-padding\">\n        <h1>Supabase + Ionic Vue</h1>\n        <p>Sign in via magic link with your email below</p>\n      </div>\n      <ion-list inset=\"true\">\n        <form @submit.prevent=\"handleLogin\">\n          <ion-item>\n            <ion-label position=\"stacked\">Email</ion-label>\n            <ion-input v-model=\"email\" name=\"email\" autocomplete type=\"email\"></ion-input>\n          </ion-item>\n          <div class=\"ion-text-center\">\n            <ion-button type=\"submit\" fill=\"clear\">Login</ion-button>\n          </div>\n        </form>\n      </ion-list>\n      <p>{{ email }}</p>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script lang=\"ts\">\n  import { supabase } from '../supabase'\n  import {\n    IonContent,\n    IonHeader,\n    IonPage,\n    IonTitle,\n    IonToolbar,\n    IonList,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonButton,\n    toastController,\n    loadingController,\n  } from '@ionic/vue'\n  import { defineComponent, ref } from 'vue'\n\n  export default defineComponent({\n    name: 'LoginPage',\n    components: {\n      IonContent,\n      IonHeader,\n      IonPage,\n      IonTitle,\n      IonToolbar,\n      IonList,\n      IonItem,\n      IonLabel,\n      IonInput,\n      IonButton,\n    },\n    setup() {\n      const email = ref('')\n      const handleLogin = async () => {\n        const loader = await loadingController.create({})\n        const toast = await toastController.create({ duration: 5000 })\n\n        try {\n          await loader.present()\n          const { error } = await supabase.auth.signInWithOtp({ email: email.value })\n\n          if (error) throw error\n\n          toast.message = 'Check your email for the login link!'\n          await toast.present()\n        } catch (error: any) {\n          toast.message = error.error_description || error.message\n          await toast.present()\n        } finally {\n          await loader.dismiss()\n        }\n      }\n      return { handleLogin, email }\n    },\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reservations Table with Table ID\nDESCRIPTION: This SQL snippet creates a reservations table that includes a table_id column, allowing for more complex constraints based on specific tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table reservations (\n  id serial primary key,\n  title text,\n  table_id int4,\n  duration tstzrange\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing MapLibre GL Popup with Dynamic Supabase Data Loading\nDESCRIPTION: Sets up a MapLibre GL popup handler that displays basic POI information and fetches additional metadata on demand from a Supabase 'places' table. The implementation includes click event handling on the map layer and a dynamic data loading function that updates the popup content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-26-postgis-generate-vector-tiles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new maplibregl.Popup({\n  closeButton: true,\n  closeOnClick: false,\n  maxWidth: 'none',\n})\n\nfunction loadDetails(element, id) {\n  element.innerHTML = 'loading...'\n  client\n    .from('places')\n    .select(\n      `\n          websites,\n          socials,\n          phones,\n          addresses,\n          source:  sources->0->dataset\n        `\n    )\n    .eq('id', id)\n    .single()\n    .then(({ data, error }) => {\n      if (error) return console.error(error)\n      element.parentElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`\n    })\n}\n\nmap.on('click', 'overture-pois-text', async (e) => {\n  if (e.features.length > 0) {\n    const feature = e.features[0]\n    console.log(feature)\n    popup.setHTML(\n      `\n        <table style=\"font-size:12px\">\n            <tr>\n                <td>id:</td>\n                <td>${feature.properties.id}</td>\n            </tr>\n            <tr>\n                <td>name:</td>\n                <td>${feature.properties.primary_name}</td>\n            </tr>\n            <tr>\n                <td>main_category:</td>\n                <td>${feature.properties.main_category}</td>\n            </tr>\n            <tr>\n                <td>details:</td>\n                <td>\n                  <span onclick=\"loadDetails(this, '${feature.properties.id}')\">\n                    load details\n                  </span>\n                </td>\n            </tr>\n        </table>\n      `\n    )\n    popup.setLngLat(e.lngLat)\n    popup.addTo(map)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: ChatMessage Interface in Typescript\nDESCRIPTION: This snippet defines the ChatMessage interface using Typescript. This interface defines the structure of a message, including id, content, user information, and creation timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-chat.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChatMessage {\n  id: string\n  content: string\n  user: {\n    name: string\n  }\n  createdAt: string\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAI Edge Function to Supabase\nDESCRIPTION: These commands deploy the OpenAI edge function to Supabase and set the environment variables from the .env.local file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions deploy --no-verify-jwt openai\nsupabase secrets set --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Server-Side OAuth Implementation with Supabase\nDESCRIPTION: Server-side implementation of OAuth authentication using Supabase's signInWithOAuth method with URL redirect handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient, type Provider } from '@supabase/supabase-js'\nconst supabase = createClient('url', 'anonKey')\nconst provider = 'provider' as Provider\nconst redirect = (url: string) => {}\n\n// ---cut---\nconst { data, error } = await supabase.auth.signInWithOAuth({\n  provider,\n  options: {\n    redirectTo: 'http://example.com/auth/callback',\n  },\n})\n\nif (data.url) {\n  redirect(data.url) // use the redirect API for your server framework\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Three.js Scene\nDESCRIPTION: Complete scene setup with Canvas, camera configuration, and particle rendering in React Three Fiber.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <div style={{ width: 100vw, height: 100vh, background: \"#000000\" }}>\n    <Canvas\n      dpr={[1, 2]}\n      camera={{ fov: 75, position: [0, 0, 500] }}\n    >\n      <ambientLight intensity={0.3} />\n      <group>\n        {particles?.map((particle, index) => (\n          <mesh\n            key={particle.username}\n          >\n            <Geometry />\n            <Material />\n          </mesh>\n        ))}\n      </group>\n    </Canvas>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Vectors with Metadata Filtering\nDESCRIPTION: Performs a vector query with optional metadata filtering. Returns a list of vector record IDs based on similarity and filter criteria.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndocs.query(\n    query_vector=[0.4,0.5,0.6],\n    filters={\"year\": {\"$eq\": 2012}}, # metadata filters\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi serializer dependency in Maven POM file\nDESCRIPTION: This XML snippet shows how to add the Moshi serializer dependency in a Maven project. It's required for using Moshi as the serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>serializer-moshi</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error When Altering Amazon RDS Reserved Roles\nDESCRIPTION: Example showing the error message when attempting to rename an Amazon RDS reserved role. This shows RDS's implementation of role protection using a custom extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nalter role rdsadmin rename to another;\nERROR: The \"rdsadmin\" role cannot be renamed.\nDETAIL: The \"rdsadmin\" role cannot be renamed because either the source\n        or the target name refer to an Amazon RDS reserved role name.\nLOCATION:  handle_rename, rdsutils.c:1534\n```\n\n----------------------------------------\n\nTITLE: AST Structure Example in Rust\nDESCRIPTION: Simplified AST structure returned by libpg_query's parse API for a SELECT statement\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nSelectStmt {\n    target_list: [\n\t    ResTarget {\n\t        val: Some(\n\t            Node {\n\t                node: Some(\n\t                  AConst {\n\t                      location: 7,\n\t                      val: Some(\n\t                          Sval(\n\t                              String {\n\t                                  sval: \"1\",\n\t                              },\n\t                          ),\n\t                      ),\n\t                  },\n\t                ),\n\t            },\n\t        ),\n\t        location: 7,\n\t    },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase with AWS Cognito in Flutter (Dart)\nDESCRIPTION: The Dart snippet sets up a Supabase client using AWS Amplify for Flutter applications. It details initializing Supabase integration by fetching the Amazon Cognito session and using the access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:amplify_auth_cognito/amplify_auth_cognito.dart';\nimport 'package:amplify_flutter/amplify_flutter.dart';\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nFuture<void> main() async {\n  await Supabase.initialize(\n    url: 'https://<supabase-project>.supabase.co',\n    anonKey: 'SUPABASE_ANON_KEY',\n    accessToken: () async {\n      final session = await Amplify.Auth.fetchAuthSession();\n      final cognitoSession = session as CognitoAuthSession;\n      return cognitoSession.userPoolTokensResult.value.accessToken.raw;\n    },\n  );\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Audit Logs Query\nDESCRIPTION: SQL query to filter and extract CREATE TABLE audit log events from postgres_logs\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(t.timestamp as datetime) as timestamp,\n  event_message\nfrom\n  postgres_logs as t\n  cross join unnest(metadata) as m\n  cross join unnest(m.parsed) as p\nwhere event_message like 'AUDIT%CREATE TABLE%'\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Session in v0 vs v1\nDESCRIPTION: Shows the change in how to get the user's current session. In v1, a property is used instead of a method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal session = supabase.auth.session();\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal Session? session = supabase.auth.currentSession;\n```\n\n----------------------------------------\n\nTITLE: Creating a React App with Vite Template\nDESCRIPTION: Command to create a new React application using Vite as the build tool. This sets up the basic structure for a React project with all necessary configurations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest my-app -- --template react\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js 13 App with Experimental Features\nDESCRIPTION: Command to create a new Next.js 13 application with the experimental app directory feature enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --experimental-app next13\n```\n\n----------------------------------------\n\nTITLE: Client-side Posts Component\nDESCRIPTION: Implements a client component that fetches posts data using useState and useEffect hooks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useEffect, useState } from 'react'\nimport supabase from '../../utils/supabase'\n\nexport default function ClientPosts() {\n  const [isLoading, setIsLoading] = useState(true)\n  const [posts, setPosts] = useState<any>([])\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const { data } = await supabase.from('posts').select()\n      setPosts(data)\n      setIsLoading(false)\n    }\n\n    fetchPosts()\n  }, [])\n\n  return isLoading ? <p>Loading</p> : <pre>{JSON.stringify(posts, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Local Development Server\nDESCRIPTION: Command to start the Supabase server locally for testing Edge Functions in a development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Creating Restricted Storage Bucket with JavaScript\nDESCRIPTION: Creates a public storage bucket with file type and size restrictions, limiting uploads to images under 1MB.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)\n\n// Use the JS library to create a bucket.\n\nconst { data, error } = await supabase.storage.createBucket('avatars', {\n  public: true,\n  allowedMimeTypes: ['image/*'],\n  fileSizeLimit: '1MB',\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Method for Logging Request Headers in Edge Functions\nDESCRIPTION: Example demonstrating the incorrect way to log request headers in Edge Functions, which will result in empty objects due to how Headers objects work in JavaScript.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/logging.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(async (req) => {\n  const headers = JSON.stringify(req.headers)\n  console.log(`Request headers: ${headers}`)\n  // OR\n  console.log(`Request headers: ${JSON.stringify(req.headers)}`)\n  return new Response('ok', {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    status: 200,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Quantifiers in Regular Expressions for Log Filtering\nDESCRIPTION: This example demonstrates how to match repeated patterns using quantifiers in regular expressions. It matches any sequence of exactly 3 digits in the event message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- find event_messages that contains any sequence of 3 digits\nregexp_contains(event_message, '[0-9]{3}')\n```\n\n----------------------------------------\n\nTITLE: Next.js OAuth Callback Handler\nDESCRIPTION: Implementation of OAuth callback handling in Next.js, including code exchange and redirect management with load balancer consideration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\n// The client you created from the Server-Side Auth instructions\nimport { createClient } from '@/utils/supabase/server'\n\nexport async function GET(request: Request) {\n  const { searchParams, origin } = new URL(request.url)\n  const code = searchParams.get('code')\n  // if \"next\" is in param, use it as the redirect URL\n  const next = searchParams.get('next') ?? '/'\n\n  if (code) {\n    const supabase = await createClient()\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n    if (!error) {\n      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer\n      const isLocalEnv = process.env.NODE_ENV === 'development'\n      if (isLocalEnv) {\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n        return NextResponse.redirect(`${origin}${next}`)\n      } else if (forwardedHost) {\n        return NextResponse.redirect(`https://${forwardedHost}${next}`)\n      } else {\n        return NextResponse.redirect(`${origin}${next}`)\n      }\n    }\n  }\n\n  // return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase client with a custom serializer\nDESCRIPTION: This Kotlin snippet demonstrates how to create a Supabase client with a custom serializer. It shows how to set the default serializer to a custom implementation of SupabaseSerializer.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = CustomSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Stripe Products with Supabase JavaScript Client\nDESCRIPTION: JavaScript code using the Supabase client library to query Stripe products data from a web application through the Supabase API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst SUPABASE_URL = 'https://xyzcompany.supabase.co'\nconst SUPABASE_KEY = 'public-anon-key'\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_KEY)\n\nconst { data: stripeCustomers, error } = supabase\n  .from('products')\n  .select('id, name, description, default_price')\n  .limit(10)\n```\n\n----------------------------------------\n\nTITLE: Windows Deep Link Method Declaration (Flutter)\nDESCRIPTION: This C++ code snippet declares a method in `win32_window.h` that is responsible for dispatching deep links to the application instance. This enables the app to function as a single instance application and handle subsequent deep link calls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Dispatches link if any.\n// This method enables our app to be with a single instance too.\n// This is optional but mandatory if you want to catch further links in same app.\nbool SendAppLinkToInstance(const std::wstring& title);\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Realtime Channel Connection\nDESCRIPTION: Example showing how to connect to a Supabase Realtime channel without authorization using the supabase-js client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Prepare client with authenticated user\nconst client = createClient('<url>', '<anon_key>')\nclient.realtime.setAuth(token)\n\n// Prepare the realtime channel\nconst channel = client.channel('topic')\n\nchannel\n.subscribe((status: string, err: any) => {\n  if (status === 'SUBSCRIBED') {\n    console.log('Connected')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Schema with Dart Supabase Client\nDESCRIPTION: Dart code showing how to initialize the Supabase client with a custom schema in Flutter applications and query data from it. Includes both global and per-query schema configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Initialize the Flutter client\nawait Supabase.initialize(\n  url: supabaseUrl,\n  anonKey: supabaseKey,\n  postgrestOptions: const PostgrestClientOptions(schema: 'myschema'),\n);\nfinal supabase = Supabase.instance.client;\n\n// Make a request\nfinal data = await supabase.from('todos').select();\n\n// You can also change the target schema on a per-query basis\nfinal data = await supabase.schema('myschema').from('todos').select();\n```\n\n----------------------------------------\n\nTITLE: Testing Migrations and Releasing Schema Changes\nDESCRIPTION: Demonstrates how to test migrations on a fresh local database and release schema changes to staging and production environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\nsupabase start\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ supabase link --project-ref $PROJECT_ID\n$ supabase db push\n```\n\n----------------------------------------\n\nTITLE: Realtime Chat with Initial Messages in Next.js\nDESCRIPTION: Extends the basic usage by querying initial messages via a custom hook, allowing the RealtimeChat component to display pre-existing messages. Requires '@/hooks/use-messages-query' for fetching messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" messages={messages} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Channel Interface for Multiplayer Features in TypeScript\nDESCRIPTION: Previews the new channel() interface in supabase-js v2, which is a preparatory release for upcoming multiplayer features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsupabase\n  .channel('any_string_you_want')\n  .on('presence', { event: 'track' }, (payload) => {\n    console.log(payload)\n  })\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Installing WAL-G on Linux\nDESCRIPTION: Commands to download, extract, and install WAL-G, which is an open-source continuous archiving tool used for physical backups in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://github.com/wal-g/wal-g/releases/download/v0.2.15/wal-g.linux-amd64.tar.gz\n$ tar -zxvf wal-g.linux-amd64.tar.gz\n$ mv wal-g /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage API for Image Transformations\nDESCRIPTION: Environment variables configuration for the self-hosted storage-api service to enable image transformations and connect to the imgproxy service.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_33\n\nLANGUAGE: Shell\nCODE:\n```\nENABLE_IMAGE_TRANSFORMATION=true\nIMGPROXY_URL=yourinternalimgproxyurl.internal.com\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Swift Package using Swift Package Manager\nDESCRIPTION: This code snippet demonstrates how to add Supabase dependency to a Swift package. It shows the Package.swift configuration to import the full Supabase package or individual components like Auth, Realtime, Postgrest, Functions, or Storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/swift/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        ...\n        .package(\n            url: \"https://github.com/supabase/supabase-swift.git\",\n            from: \"2.0.0\"\n        ),\n    ],\n    targets: [\n        .target(\n            name: \"YourTargetName\",\n            dependencies: [\n                .product(\n                    name: \"Supabase\", // Auth, Realtime, Postgrest, Functions, or Storage\n                    package: \"supabase-swift\"\n                ),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Supabase Edge Function for Restricted Map Access\nDESCRIPTION: TypeScript implementation of a Supabase Edge Function that restricts access to private map files. It validates origins and proxies requests to private storage buckets with proper authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ALLOWED_ORIGINS = ['http://localhost:8000']\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': ALLOWED_ORIGINS.join(','),\n  'Access-Control-Allow-Headers':\n    'authorization, x-client-info, apikey, content-type, range, if-match',\n  'Access-Control-Expose-Headers': 'range, accept-ranges, etag',\n  'Access-Control-Max-Age': '300',\n}\n\nDeno.serve((req) => {\n  // This is needed if you're planning to invoke your function from a browser.\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  // Check origin\n  const origin = req.headers.get('Origin')\n\n  if (!origin || !ALLOWED_ORIGINS.includes(origin)) {\n    return new Response('Not Allowed', { status: 405 })\n  }\n\n  const reqUrl = new URL(req.url)\n  const url = `${Deno.env.get('SUPABASE_URL')}/storage/v1/object/authenticated${reqUrl.pathname}`\n\n  const { method, headers } = req\n  // Add Auth header\n  const modHeaders = new Headers(headers)\n  modHeaders.append('authorization', `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!}`)\n  return fetch(url, { method, headers: modHeaders })\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Secrets to Supabase Project\nDESCRIPTION: CLI command to set secrets in the Supabase project using the created .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase secrets set --env-file ./supabase/.env --project-ref <PROJECT REF>\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub Events with BigQuery SQL\nDESCRIPTION: SQL query to extract top contributors from GitHub webhook events stored in BigQuery. It counts events by user and orders them descending, limited to the top 25 contributors within a specified time range.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-10-supabase-logs-self-hosted.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  count(t.timestamp) as count,\n  s.login as gh_user\nfrom\n  `github.supabase.webhooks` as t\n  cross join unnest(metadata) as m\n  cross join unnest(m.sender) as s\nwhere\n  timestamp::date > current_date() - @day::int\ngroup by\n  gh_user\norder by\n  count desc\nlimit\n  25\n```\n\n----------------------------------------\n\nTITLE: Building an Infinite Scroll Component with React, Supabase, and Framer Motion\nDESCRIPTION: A complete React component that implements infinite scrolling for tickets data from Supabase. It uses useRef to track container position, debounce from lodash to optimize scroll performance, and Framer Motion for animated entries. The component includes server-side data fetching with pagination support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState, useRef } from 'react'\nimport { createClient } from '@supabase/supabase-js'\nimport { debounce } from 'lodash'\nimport { motion } from 'framer-motion'\n\nconst supabase = createClient('supabase-url', 'supabase-key')\n\nexport default function TicketsPage({ tickets }) {\n  const PAGE_COUNT = 20\n  const containerRef = useRef(null)\n  const [loadedTickets, setLoadedTickets] = useState(tickets)\n  const [offset, setOffset] = useState(1)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isInView, setIsInView] = useState(false)\n\n  const handleScroll = (container) => {\n    if (containerRef.current && typeof window !== 'undefined') {\n      const container = containerRef.current\n      const { bottom } = container.getBoundingClientRect()\n      const { innerHeight } = window\n      setIsInView((prev) => bottom <= innerHeight)\n    }\n  }\n\n  useEffect(() => {\n    const handleDebouncedScroll = debounce(() => !isLast && handleScroll(), 200)\n    window.addEventListener('scroll', handleScroll)\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (isInView) {\n      loadMoreTickets(offset)\n    }\n  }, [isInView])\n\n  const loadMoreTickets = async (offset: number) => {\n    setIsLoading(true)\n    setOffset((prev) => prev + 1)\n    const { data: newTickets } = await fetchTickets(offset, PAGE_COUNT)\n    setLoadedTickets((prevTickets) => [...prevTickets, ...newTickets])\n    setIsLoading(false)\n  }\n\n  const fetchTickets = async (offset) => {\n    const from = offset * PAGE_COUNT\n    const to = from + PAGE_COUNT - 1\n\n    const { data } = await supabase!\n        .from('my_tickets_table')\n        .select('*')\n        .range(from, to)\n        .order('createdAt', { ascending: false })\n\n    return data\n  }\n\n  return (\n    <div ref={containerRef}>\n      {\n        loadedTickets.map((ticket, index) => {\n          const recalculatedDelay =\n            i >= PAGE_COUNT * 2 ? (i - PAGE_COUNT * (offset - 1)) / 15 : i / 15\n\n          return (\n            <motion.div\n              key={ticket.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{\n                duration: 0.4,\n                ease: [0.25, 0.25, 0, 1],\n                delay: recalculatedDelay,\n              }}\n            >\n              {/* Actual ticket component */}\n            </motion.div>\n          )\n        })\n      }\n    </div>\n  )\n\nexport const getServerSideProps: GetServerSideProps = async ({ req, res }) => {\n  const { data: tickets } = await supabase!\n    .from('my_tickets_table')\n    .select('*')\n    .order('createdAt', { ascending: false })\n    .limit(20)\n\n  return {\n    props: {\n      tickets,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally\nDESCRIPTION: Commands to start Supabase locally and serve functions with environment configuration for development.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-ratelimit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve --env-file supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Creating a Logging Function for pg_cron Jobs in PostgreSQL\nDESCRIPTION: This PL/pgSQL function provides a template for creating custom logging within cron jobs. It logs the start and end of execution and includes exception handling to capture errors, which helps with debugging issues that might not appear in standard logs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_5\n\nLANGUAGE: plpgsql\nCODE:\n```\ncreate or replace function log_example()\nreturns void\nlanguage plpgsql\nas $$\nbegin\n\n     -- Logging start of function\n     raise log 'logging start of cron function call: (%)', (select now());\n\n    -- INSERT LOGIC HERE\n\n     -- Logging end of function\n     raise log 'logging end of cron function call: (%)', (select now());\n\n    exception\n     -- Handle exceptions here if needed\n     when others then\n         raise exception 'An error occurred in cron function <insert name here>. ERROR MESSAGE: %', sqlerrm;\n\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Component Dependencies via CLI\nDESCRIPTION: Command to install the Toggle component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add toggle\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Third-Party Auth Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Supabase client using a third-party authentication provider (Auth0 in this example). It uses an async function to retrieve the access token from Auth0 and pass it to the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-14-third-party-auth-mfa-phone-send-hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n  accessToken: async () => {\n    const accessToken = await auth0.getTokenSilently()\n    return accessToken\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Auth UI in Flutter\nDESCRIPTION: Basic setup code to initialize the Supabase client with environment variables for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:supabase_auth_ui/supabase_auth_ui.dart';\n\nvoid main() async {\n  await Supabase.initialize(\n    url: dotenv.get('SUPABASE_URL'),\n    anonKey: dotenv.get('SUPABASE_ANON_KEY'),\n  );\n\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Git Setup and Local Development\nDESCRIPTION: Commands to commit initial Supabase configuration and start local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"init supabase\"\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Local Testing\nDESCRIPTION: Commands to create and populate a .env file with the necessary Supabase configuration for local Edge Function testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# creates the file\ntouch .env\n# adds the SUPABASE_URL secret\necho \"SUPABASE_URL=http://localhost:54321\" >> .env\n# adds the SUPABASE_ANON_KEY secret\necho \"SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0\" >> .env\n# Alternatively, you can open it in your editor:\nopen .env\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Setting Change in Supabase Postgres\nDESCRIPTION: This SQL command shows how to verify a change in a database setting, specifically checking the current value of statement_timeout.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nshow \"statement_timeout\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Flutter Main Function\nDESCRIPTION: This Dart code initializes the Supabase client in the main function of a Flutter app, using the project URL and public API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await Supabase.initialize(\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_SUPABASE_ANON_KEY',\n  );\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Protected API Route in TypeScript\nDESCRIPTION: The TypeScript version of the protected API route ensures type safety for request and response objects while providing similar functionality to the JavaScript version, returning user data only if the user is authenticated.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiHandler } from 'next'\nimport { createPagesServerClient } from '@supabase/auth-helpers-nextjs'\n\nconst ProtectedRoute: NextApiHandler = async (req, res) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient({ req, res })\n  // Check if we have a session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user)\n    return res.status(401).json({\n      error: 'not_authenticated',\n      description: 'The user does not have an active session or is not authenticated',\n    })\n\n  // Run queries with RLS on the server\n  const { data } = await supabase.from('test').select('*')\n  res.json(data)\n}\n\nexport default ProtectedRoute\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign in with Apple in Swift for iOS\nDESCRIPTION: This snippet demonstrates how to implement Sign in with Apple in a SwiftUI view. It uses the Supabase Swift client to handle the authentication process after obtaining the ID token from Apple's authentication service.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport AuthenticationServices\nimport Supabase\n\nstruct SignInView: View {\n    let client = SupabaseClient(supabaseURL: URL(string: \"your url\")!, supabaseKey: \"your anon key\")\n\n    var body: some View {\n      SignInWithAppleButton { request in\n        request.requestedScopes = [.email, .fullName]\n      } onCompletion: { result in\n        Task {\n          do {\n            guard let credential = try result.get().credential as? ASAuthorizationAppleIDCredential\n            else {\n              return\n            }\n\n            guard let idToken = credential.identityToken\n              .flatMap({ String(data: $0, encoding: .utf8) })\n            else {\n              return\n            }\n              try await client.auth.signInWithIdToken(\n              credentials: .init(\n                provider: .apple,\n                idToken: idToken\n              )\n            )\n          } catch {\n            dump(error)\n          }\n        }\n      }\n      .fixedSize()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Prisma Migrations with yarn\nDESCRIPTION: This snippet shows how to synchronize Prisma migrations using yarn. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init_supabase\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff \\\n--from-empty \\\n--to-schema-datamodel prisma/schema.prisma \\\n--script > prisma/migrations/0_init_supabase/migration.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init_supabase\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Server Connection in Postgres\nDESCRIPTION: SQL command to create a foreign server connection to a remote Postgres database, specifying the host, port, and database name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate server \"<foreign_server_name>\"\nforeign data wrapper postgres_fdw\noptions (\n    host '<host>',\n    port '<port>',\n    dbname '<dbname>'\n);\n```\n\n----------------------------------------\n\nTITLE: Identifying Gaps in PostgreSQL Sequence IDs\nDESCRIPTION: This SQL query identifies missing IDs in a sequence by comparing the range of IDs in a table against a generated series. It joins the table with a generated sequence spanning from the minimum to maximum ID value and returns records where the table ID is NULL, indicating a gap.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-are-there-gaps-in-my-postgres-id-sequence-Frifus.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    s.id AS missing_id\nFROM\n    generate_series((SELECT MIN(id) FROM your_table), (SELECT MAX(id) FROM your_table)) s(id)\n    LEFT JOIN your_table ON your_table.id = s.id\nWHERE\n    your_table.id IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Access Control Policies\nDESCRIPTION: Sets up three access control policies for storage objects: read access for all users, insert access for authenticated users, and update access for all users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/product_management_sql_template.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"Enable read access for all users\" ON \"storage\".\"objects\"\nAS PERMISSIVE FOR SELECT\nTO public\nUSING (true)\n\nCREATE POLICY \"Enable insert for all users\" ON \"storage\".\"objects\"\nAS PERMISSIVE FOR INSERT\nTO authenticated, anon\nWITH CHECK (true)\n\nCREATE POLICY \"Enable update for all users\" ON \"storage\".\"objects\"\nAS PERMISSIVE FOR UPDATE\nTO public\nUSING (true)\nWITH CHECK (true)\n```\n\n----------------------------------------\n\nTITLE: Creating Topic-Specific RLS Policy\nDESCRIPTION: SQL command demonstrating how to create an RLS policy that restricts access to a specific channel topic using realtime.topic() function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"authenticated users can only read from 'locked' topic\"\non \"realtime\".\"messages\"\nas permissive\nfor select   -- read only\nto authenticated\nusing (\n  realtime.topic() = 'locked'  -- access the topic name\n);\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally\nDESCRIPTION: Command to start and serve Supabase Functions for local development and testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve\n```\n\n----------------------------------------\n\nTITLE: Testing OpenAI Function with cURL\nDESCRIPTION: Example cURL command to test the OpenAI function endpoint with a sample query.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i --location --request POST http://localhost:54321/functions/v1/openai \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"query\":\"What is Supabase?\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson Serializer Dependency in Kotlin Build File\nDESCRIPTION: This snippet shows how to add the Jackson serializer dependency to a Kotlin project using Gradle with the Kotlin DSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.github.jan-tennert.supabase:serializer-jackson:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Kakao OAuth Sign-In with Flutter\nDESCRIPTION: Method to authenticate users using Kakao OAuth in a Flutter application, with support for web and mobile platforms and custom redirect handling\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithKakao() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.kakao,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host',\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase client with Moshi Serialization\nDESCRIPTION: This Kotlin snippet demonstrates how to create a Supabase client with Moshi Serialization. It shows how to set the default serializer to MoshiSerializer.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = MoshiSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in SvelteKit\nDESCRIPTION: Code to create and initialize the Supabase client with the project URL and anon key for use throughout the SvelteKit application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nexport const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n```\n\n----------------------------------------\n\nTITLE: Items table after Firestore migration\nDESCRIPTION: This JSON snippet represents the `items` table after the migration. It contains 'user' and 'item' fields extracted from the original Firestore document. This exemplifies the result of flattening the original document and creating separate tables for related data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"user\": \"mark\", \"item\": \"hammer\" },\n  { \"user\": \"mark\", \"item\": \"nail\" },\n  { \"user\": \"mark\", \"item\": \"glue\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Static Paths for Dynamic Routes\nDESCRIPTION: Function to pre-generate static paths for all posts at build time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const { data: posts } = await supabase.from('posts').select('id')\n\n  return posts?.map(({ id }) => ({\n    id,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase CLI login command\nDESCRIPTION: The Supabase CLI login command that initiates the automatic login process. This command generates a unique session ID, creates ECDH keys, and opens the browser for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-01-automatic-cli-login.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase login\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with Supabase Starter Template\nDESCRIPTION: Command to create a new Next.js project using the official Supabase starter template. The template includes App router support, Cookie-based Auth, Tailwind CSS styled forms, and TypeScript support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-11-launch-week-8-community-highlights.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Sample Table Creation for Bulk Insert\nDESCRIPTION: SQL command to create a sample table with default values for demonstration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate table foo (\n    id bigint generated by default as identity primary key,\n    bar text,\n    baz int default 100\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing ProfilesCubit in Dart for Flutter Chat App\nDESCRIPTION: This code implements the ProfilesCubit class, which manages the state of user profiles. It includes methods for fetching and caching user profiles using Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:bloc/bloc.dart';\nimport 'package:meta/meta.dart';\nimport 'package:my_chat_app/models/profile.dart';\nimport 'package:my_chat_app/utils/constants.dart';\n\npart 'profiles_state.dart';\n\nclass ProfilesCubit extends Cubit<ProfilesState> {\n  ProfilesCubit() : super(ProfilesInitial());\n\n  /// Map of app users cache in memory with profile_id as the key\n  final Map<String, Profile?> _profiles = {};\n\n  Future<void> getProfile(String userId) async {\n    if (_profiles[userId] != null) {\n      return;\n    }\n\n    final data = await supabase\n        .from('profiles')\n        .select()\n        .match({'id': userId}).single();\n\n    if (data == null) {\n      return;\n    }\n    _profiles[userId] = Profile.fromMap(data);\n\n    emit(ProfilesLoaded(profiles: _profiles));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating insert and return data in TypeScript\nDESCRIPTION: Example of how to update the insert method to return data in supabase-js v2. The new version requires an explicit select() call to return the inserted data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('my_table')\n  .insert({ new_data })\n  .select()\n```\n\n----------------------------------------\n\nTITLE: Query Using MD5 Hashed Index\nDESCRIPTION: SQL query example showing how to search using MD5 hashing to utilize the functional index.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-index-row-size-exceeds-btree-version-4-maximum-for-index-LMmoeU.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from table_name where MD5(column_name) = MD5('search_value');\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Pull Function for Data Synchronization\nDESCRIPTION: Creates a Postgres function to handle pulling changes from the Supabase database to the client, including fetching created, updated, and deleted profiles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function pull(last_pulled_at bigint default 0) returns jsonb as $$\ndeclare _ts timestamp with time zone;\n_profiles jsonb;\nbegin -- timestamp\n_ts := to_timestamp(last_pulled_at / 1000);\n--- profiles\nselect jsonb_build_object(\n        'created',\n        '[]'::jsonb,\n        'updated',\n        coalesce(\n            jsonb_agg(\n                jsonb_build_object(\n                    'id',\n                    t.id,\n                    'name',\n                    t.name,\n                    'website',\n                    t.website,\n                    'created_at',\n                    timestamp_to_epoch(t.created_at),\n                    'updated_at',\n                    timestamp_to_epoch(t.updated_at)\n                )\n            ) filter (\n                where t.deleted_at is null\n                    and t.last_modified_at > _ts\n            ),\n            '[]'::jsonb\n        ),\n        'deleted',\n        coalesce(\n            jsonb_agg(to_jsonb(t.id)) filter (\n                where t.deleted_at is not null\n                    and t.last_modified_at > _ts\n            ),\n            '[]'::jsonb\n        )\n    ) into _profiles\nfrom sync_profiles_view t;\nreturn jsonb_build_object(\n    'changes',\n    jsonb_build_object(\n        'profiles',\n        _profiles\n    ),\n    'timestamp',\n    timestamp_to_epoch(now())\n);\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Revoking Public Execute Permission\nDESCRIPTION: Shows the process of revoking execute permission from the public role, which effectively prevents junior_dev from executing the function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> revoke execute on function add(integer, integer) from public;\nREVOKE\npostgres=> \\df+ add\n┌────────┬──────┬──────────────────┬─────────────────────┬──────┬────────────┬──────────┬──────────┬──────────┬──────────────────────────┬──────────┐\n│ Schema │ Name │ Result data type │ Argument data types │ Type │ Volatility │ Parallel │   Owner  │ Security │     Access privileges    │ Language │\n├────────┼──────┼──────────────────┼─────────────────────┼──────┼────────────┼──────────┼──────────┼──────────┼──────────────────────────┼──────────│\n│ public │ add  │ integer          │ integer, integer    │ func │ volatile   │ unsafe   │ postgres │ invoker  │ postgres=X/postgres     ↵│ sql      │\n│        │      │                  │                     │      │            │          │          │          │ anon=X/postgres         ↵│          │\n│        │      │                  │                     │      │            │          │          │          │ authenticated=X/postgres↵│          │\n│        │      │                  │                     │      │            │          │          │          │ service_role=X/postgres  │          │\n│        │      │                  │                     │      │            │          │          │          │                          │          │\n└────────┴──────┴──────────────────┴─────────────────────┴──────┴────────────┴──────────┴──────────┴──────────┴──────────────────────────┴──────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAI Embeddings for Movies\nDESCRIPTION: Calls OpenAI's embedding API to convert movie overviews into vector embeddings for similarity search.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch('https://api.openai.com/v1/embeddings', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${openAiApiKey}`,\n  },\n  body: JSON.stringify({\n    input: film.overview,\n    model: 'text-embedding-3-small',\n  }),\n})\n\nconst responseData = await response.json()\nif (responseData.error) {\n  return returnError({\n    message: `Error obtaining Open API embedding: ${responseData.error.message}`,\n  })\n}\n\nconst embedding = responseData.data[0].embedding\n```\n\n----------------------------------------\n\nTITLE: Inserting Secrets with Custom Key in Supabase Vault using SQL\nDESCRIPTION: Demonstrates how to insert a secret into Supabase Vault using a custom key. This provides more flexibility in managing different types of secrets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ninsert into vault.secrets\n  (secret, associated, key_id)\nvalues\n  (\n    'apikey_XaYrurzcquqhEdBjzfTzfwAZqpd',\n    'This is some different associated data.',\n    'f9f176eb-7069-4743-9403-582c04354ffc'\n  )\nreturning *;\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Basic Function\nDESCRIPTION: The JSON payload returned from the GraphQL query, showing the result of the addition operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"addNums\": 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Encrypted Authentication in React Native\nDESCRIPTION: Command to install necessary dependencies for implementing encrypted authentication storage in a React Native application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\nnpm install @rneui/themed @react-native-async-storage/async-storage react-native-url-polyfill\nnpm install aes-js react-native-get-random-values\nnpx expo install expo-secure-store\n```\n\n----------------------------------------\n\nTITLE: Implementing Resumable Uploads with Uppy.js and TUS Protocol\nDESCRIPTION: Shows how to implement resumable file uploads using Uppy.js with TUS protocol integration for Supabase Storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Uppy, Dashboard, Tus } from 'https://releases.transloadit.com/uppy/v3.6.1/uppy.min.mjs'\n\nconst token = 'anon-key'\nconst projectId = 'your-project-ref'\nconst bucketName = 'avatars'\nconst folderName = 'foldername'\nconst supabaseUploadURL = `https://${projectId}.supabase.co/storage/v1/upload/resumable`\n\nvar uppy = new Uppy()\n  .use(Dashboard, {\n    inline: true,\n    target: '#drag-drop-area',\n    showProgressDetails: true,\n  })\n  .use(Tus, {\n    endpoint: supabaseUploadURL,\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n    chunkSize: 6 * 1024 * 1024,\n    allowedMetaFields: ['bucketName', 'objectName', 'contentType', 'cacheControl'],\n  })\n\nuppy.on('file-added', (file) => {\n  file.meta = {\n    ...file.meta,\n    bucketName: bucketName,\n    objectName: folderName ? `${folderName}/${file.name}` : file.name,\n    contentType: file.type,\n  }\n})\n\nuppy.on('complete', (result) => {\n  console.log('Upload complete! We've uploaded these files:', result.successful)\n})\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definition for React Component\nDESCRIPTION: Complex SVG path definition that appears to create an icon or logo shape. Used within a React component structure with associated styling and layout elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/getting-started/quickstart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: svg\nCODE:\n```\n<path d=\"M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z\" />\n```\n\n----------------------------------------\n\nTITLE: Inserting Tasks for SLA Enforcement in PostgreSQL\nDESCRIPTION: This PostgreSQL function inserts tasks into the checking_tasks_queue table based on escalation time intervals. It's triggered when new messages are added to the slack_watcher table, creating tasks for each ticket according to its SLA.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-25-exploring-support-tooling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION \"public\".\"insert_tasks\"() RETURNS \"trigger\"\n    LANGUAGE \"plpgsql\"\n    AS $$\ndeclare\n    escalationtimeintervals int[];\n    currentinterval int;\n    threadts text;\n\nBEGIN\n    IF new.channel_id <> '' THEN\n        SELECT escalation_time INTO escalationtimeintervals\n          FROM priority WHERE channel_id = new.channel_id;\n    ELSE\n        escalationtimeintervals := array[10, 20, 35, 50]; -- minutes\n    END IF;\n    -- INSERT tasks for each escalation level\n    FOR i IN 1..4\n    LOOP\n        -- set the current escalation time interval\n        currentinterval := escalationtimeintervals[i];\n        -- format thread_ts as (epoch time as a big int) + '.' + ts_ms\n        thread_timestamp := extract(epoch FROM new.ts)::bigint::text || '.' || new.ts_ms;\n\n        -- check IF ticket_type is not 'feedback'\n        IF lower(new.ticket_type) <> 'feedback' THEN\n            INSERT INTO checking_tasks_queue (http_verb, payload, due_time, replied)\n            values (\n                'POST',\n                jsonb_build_object(\n                    'channel_id', new.channel_id,\n                    'thread_ts', thread_timestamp,\n                    'escalation_level', i,\n                    'ticket_id', new.ticket_number,\n                    'ticket_priority', new.ticket_priority,\n                    'ticket_type', new.ticket_type\n                ),\n                new.ts + (currentinterval * interval '1 minute'),\n                false\n            );\n        END IF;\n    END LOOP;\n    -- return the new slack_msg row\n    return new;\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Server-Side User Profile Management in SvelteKit with Supabase\nDESCRIPTION: Server-side logic for the account page that loads user profile data from Supabase and handles form actions for updating profiles and signing out. It includes session verification, database operations, and redirects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fail, redirect } from '@sveltejs/kit'\nimport type { Actions, PageServerLoad } from './$types'\n\nexport const load: PageServerLoad = async ({ locals: { supabase, safeGetSession } }) => {\n  const { session } = await safeGetSession()\n\n  if (!session) {\n    redirect(303, '/')\n  }\n\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select(`username, full_name, website, avatar_url`)\n    .eq('id', session.user.id)\n    .single()\n\n  return { session, profile }\n}\n\nexport const actions: Actions = {\n  update: async ({ request, locals: { supabase, safeGetSession } }) => {\n    const formData = await request.formData()\n    const fullName = formData.get('fullName') as string\n    const username = formData.get('username') as string\n    const website = formData.get('website') as string\n    const avatarUrl = formData.get('avatarUrl') as string\n\n    const { session } = await safeGetSession()\n\n    const { error } = await supabase.from('profiles').upsert({\n      id: session?.user.id,\n      full_name: fullName,\n      username,\n      website,\n      avatar_url: avatarUrl,\n      updated_at: new Date(),\n    })\n\n    if (error) {\n      return fail(500, {\n        fullName,\n        username,\n        website,\n        avatarUrl,\n      })\n    }\n\n    return {\n      fullName,\n      username,\n      website,\n      avatarUrl,\n    }\n  },\n  signout: async ({ locals: { supabase, safeGetSession } }) => {\n    const { session } = await safeGetSession()\n    if (session) {\n      await supabase.auth.signOut()\n      redirect(303, '/')\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Board Lists and Cards Template in HTML\nDESCRIPTION: HTML template for displaying board lists and cards with edit, delete, and add functionality. Includes Tailwind CSS styling for responsive grid layout.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<main class=\"mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8\">\n  <div class=\"grid grid-cols-2 gap-x-4 gap-y-8 sm:grid-cols-3 sm:gap-x-6 lg:grid-cols-4 xl:gap-x-8\">\n    <!-- ITERATE ALL LISTS -->\n    <div\n      *ngFor=\"let list of lists\"\n      class=\"min-h-52 relative h-auto rounded bg-emerald-200 py-4 px-4 text-sm font-semibold\"\n    >\n      <div class=\"flex gap-2 pb-4\">\n        <p\n          (click)=\"editingTitle(list, true)\"\n          class=\"hover:cursor-pointer\"\n          *ngIf=\"!editTitle[list.id]\"\n        >\n          {{ list.title }}\n        </p>\n        <input\n          [(ngModel)]=\"list.title\"\n          *ngIf=\"editTitle[list.id]\"\n          class=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-emerald-500 focus:outline-none focus:ring-emerald-500 sm:text-sm\"\n        />\n        <button class=\"font-medium\" *ngIf=\"editTitle[list.id]\" (click)=\"updateListTitle(list)\">\n          Save\n        </button>\n      </div>\n\n      <!-- ITERATE LIST CARDS -->\n      <div class=\"flex flex-col items-center gap-2\">\n        <div\n          class=\"flex h-auto w-full flex-col gap-2 hover:cursor-pointer\"\n          *ngFor=\"let card of listCards[list.id]\"\n          (click)=\"editingCard(card, true)\"\n        >\n          <p class=\"h-10 bg-white py-2 px-2\" *ngIf=\"!editCard[card.id]\">{{ card.title }}</p>\n          <input\n            [(ngModel)]=\"card.title\"\n            *ngIf=\"editCard[card.id]\"\n            class=\"block rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-emerald-500 focus:outline-none focus:ring-emerald-500 sm:text-sm\"\n          />\n          <div class=\"align-items-center flex justify-between\">\n            <button class=\"font-medium\" *ngIf=\"editCard[card.id]\" (click)=\"updateCard(card)\">\n              Update\n            </button>\n\n            <button\n              class=\"font-medium text-red-600\"\n              *ngIf=\"editCard[card.id]\"\n              (click)=\"deleteCard(card)\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n        <div (click)=\"addCard(list)\" class=\"pt-8 text-gray-500 hover:cursor-pointer\">\n          + Add a card\n        </div>\n        <button class=\"text-small font-medium text-red-700\" (click)=\"deleteBoardList(list)\">\n          Delete list\n        </button>\n      </div>\n    </div>\n\n    <div\n      (click)=\"addList()\"\n      class=\"relative h-16 rounded bg-emerald-500 py-4 px-4 text-lg font-semibold hover:cursor-pointer\"\n    >\n      + New list\n    </div>\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for User Profiles in Supabase\nDESCRIPTION: SQL script to set up the complete backend structure for user profiles in Supabase, including table creation, row-level security policies, realtime publication setup, and storage bucket configuration for avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/vue3-user-management/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for public \"profiles\"\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\"\n  on profiles for select\n  using ( true );\n\ncreate policy \"Users can insert their own profile.\"\n  on profiles for insert\n  with check ( (select auth.uid()) = id );\n\ncreate policy \"Users can update own profile.\"\n  on profiles for update\n  using ( (select auth.uid()) = id );\n\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\"\n  on storage.objects for select\n  using ( bucket_id = 'avatars' );\n\ncreate policy \"Anyone can upload an avatar.\"\n  on storage.objects for insert\n  with check ( bucket_id = 'avatars' );\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally for OG Image Generation\nDESCRIPTION: Commands to start Supabase locally and serve the lwx-og function for development. Uses environment variables from a local file and disables JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-og/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve lwx-og --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration with pnpm\nDESCRIPTION: Command to create and apply a Prisma migration using pnpm. This initializes the database schema based on your Prisma models.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpx prisma migrate dev --name first_prisma_migration\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Functions with Environment Variables\nDESCRIPTION: Commands to deploy the rate-limiting function and set environment secrets from local configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-ratelimit/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy upstash-redis-ratelimit\nsupabase secrets set --env-file supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Google Maps HTML Template\nDESCRIPTION: HTML template for displaying the Google Map with navigation buttons and map container.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"showNearby()\">\n        <ion-icon name=\"location\" slot=\"start\"></ion-icon> Nearby</ion-button\n      >\n    </ion-buttons>\n\n    <ion-title> Supa Stores </ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"addStore()\">\n        <ion-icon name=\"add\" slot=\"start\"></ion-icon> Store</ion-button\n      >\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div class=\"container\">\n    <capacitor-google-map #map></capacitor-google-map>\n  </div>\n</ion-content>\n```\n\n----------------------------------------\n\nTITLE: Generating Default Storage Key in JavaScript\nDESCRIPTION: Example of how the default storage key is generated in the Auth library, including the project reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Record Return Function\nDESCRIPTION: The GraphQL schema automatically generated for the accountsByEmailDomain function, showing the Relay-style pagination support, filtering, and sorting capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  accountsByEmailDomain(\n    domainToSearch: String!\n\n    \"\"\"\n    Query the first `n` records in the collection\n    \"\"\"\n    first: Int\n\n    \"\"\"\n    Query the last `n` records in the collection\n    \"\"\"\n    last: Int\n\n    \"\"\"\n    Query values in the collection before the provided cursor\n    \"\"\"\n    before: Cursor\n\n    \"\"\"\n    Query values in the collection after the provided cursor\n    \"\"\"\n    after: Cursor\n\n    \"\"\"\n    Filters to apply to the results set when querying from the collection\n    \"\"\"\n    filter: AccountFilter\n\n    \"\"\"\n    Sort order to apply to the collection\n    \"\"\"\n    orderBy: [AccountOrderBy!]\n  ): AccountConnection\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying PostgreSQL User Password\nDESCRIPTION: SQL command to set a password for the postgres role, enabling remote connections to the browser-based PostgreSQL instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-03-postgres-wasm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER ROLE postgres WITH PASSWORD 'my_password';\n```\n\n----------------------------------------\n\nTITLE: Installing Drizzle ORM and Dependencies with npm\nDESCRIPTION: Command to install Drizzle ORM and its dependencies including postgres client and drizzle-kit development dependency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/drizzle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i drizzle-orm postgres\nnpm i -D drizzle-kit\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Pagination in GraphQL\nDESCRIPTION: Example of offset-based pagination using first/offset parameters to skip records and retrieve a specified number of results\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  blogCollection(\n    first: 2,\n    offset: 5\n  ) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Upstash Redis\nDESCRIPTION: Command to copy the example environment file to create a local configuration for Upstash Redis credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-counter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp supabase/.env.local.example supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Supabase.js v1\nDESCRIPTION: Example of using TypeScript definitions with Supabase.js v1, where definitions were injected in the 'from()' method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// previously definitions were injected in the `from()` method\nsupabase.from<Definitions['Message']>('messages').select('*')\n```\n\n----------------------------------------\n\nTITLE: Checking last vacuum and autovacuum run times in PostgreSQL\nDESCRIPTION: This SQL query retrieves the timestamps of the last manual vacuum and automatic vacuum runs for a specific table from system catalogs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tlast_vacuum,\n\tlast_autovacuum\nFROM\n\tpg_stat_user_tables\nWHERE\n\trelname = 'mytable';\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Prisma Migrations with pnpm\nDESCRIPTION: This snippet demonstrates how to synchronize Prisma migrations using pnpm. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpx prisma db pull\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init_supabase\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpx prisma migrate diff \\\n--from-empty \\\n--to-schema-datamodel prisma/schema.prisma \\\n--script > prisma/migrations/0_init_supabase/migration.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpx prisma migrate resolve --applied 0_init_supabase\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Management Component\nDESCRIPTION: React component for managing user profile details including username, website, and avatar.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\nimport { supabase } from './supabaseClient'\n\nexport default function Account({ session }) {\n  const [loading, setLoading] = useState(true)\n  const [username, setUsername] = useState(null)\n  const [website, setWebsite] = useState(null)\n  const [avatar_url, setAvatarUrl] = useState(null)\n\n  useEffect(() => {\n    let ignore = false\n    async function getProfile() {\n      setLoading(true)\n      const { user } = session\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', user.id)\n        .single()\n\n      if (!ignore) {\n        if (error) {\n          console.warn(error)\n        } else if (data) {\n          setUsername(data.username)\n          setWebsite(data.website)\n          setAvatarUrl(data.avatar_url)\n        }\n      }\n\n      setLoading(false)\n    }\n\n    getProfile()\n\n    return () => {\n      ignore = true\n    }\n  }, [session])\n\n  async function updateProfile(event, avatarUrl) {\n    event.preventDefault()\n\n    setLoading(true)\n    const { user } = session\n\n    const updates = {\n      id: user.id,\n      username,\n      website,\n      avatar_url: avatarUrl,\n      updated_at: new Date(),\n    }\n\n    const { error } = await supabase.from('profiles').upsert(updates)\n\n    if (error) {\n      alert(error.message)\n    } else {\n      setAvatarUrl(avatarUrl)\n    }\n    setLoading(false)\n  }\n\n  return (\n    <form onSubmit={updateProfile} className=\"form-widget\">\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" type=\"text\" value={session.user.email} disabled />\n      </div>\n      <div>\n        <label htmlFor=\"username\">Name</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          required\n          value={username || ''}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"website\">Website</label>\n        <input\n          id=\"website\"\n          type=\"url\"\n          value={website || ''}\n          onChange={(e) => setWebsite(e.target.value)}\n        />\n      </div>\n\n      <div>\n        <button className=\"button block primary\" type=\"submit\" disabled={loading}>\n          {loading ? 'Loading ...' : 'Update'}\n        </button>\n      </div>\n\n      <div>\n        <button className=\"button block\" type=\"button\" onClick={() => supabase.auth.signOut()}>\n          Sign Out\n        </button>\n      </div>\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Grouping with Aggregate Functions in cURL\nDESCRIPTION: This snippet demonstrates how to use aggregate functions with implicit grouping in PostgREST, grouping max and min release years by genre using cURL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://postgrest/movies?select=genre,release_year.max(),release_year.min()'\n```\n\n----------------------------------------\n\nTITLE: Pre-Token Generation Trigger in Node.js for AWS Cognito\nDESCRIPTION: This Node.js lambda function is a handler for AWS Cognito pre-token generation triggers, modifying the 'role' claim to 'authenticated'. It needs to be integrated with Cognito User Pool's Lambda Triggers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handler = async (event) => {\n  event.response = {\n    claimsOverrideDetails: {\n      claimsToAddOrOverride: {\n        role: 'authenticated',\n      },\n    },\n  }\n\n  return event\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Nix Store Package Directory Structure\nDESCRIPTION: This snippet shows an example of how Nix stores packages in unique subdirectories within the Nix store, typically located at /nix/store. The unique identifier in the directory name is a cryptographic hash of the package's build dependency graph.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-25-nix-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1/\n```\n\n----------------------------------------\n\nTITLE: Extracting Map Area with Protomaps CLI\nDESCRIPTION: Command to extract a specific geographic area from the Protomaps world database into a PMTiles file. This example extracts an area around Utrecht in the Netherlands.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npmtiles extract https://build.protomaps.com/20240618.pmtiles my_area.pmtiles --bbox=5.068050,52.112086,5.158424,52.064140\n```\n\n----------------------------------------\n\nTITLE: Input OTP with Custom Pattern\nDESCRIPTION: Implementation of the Input OTP component with a custom pattern that accepts both digits and characters. Utilizes the built-in REGEXP_ONLY_DIGITS_AND_CHARS pattern from the input-otp library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\n\n...\n\n<InputOTP\n  maxLength={6}\n  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    {/* ... */}\n  </InputOTPGroup>\n</InputOTP>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Commands to initialize and start a local Supabase project using the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsupabase init\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Add Department Column to Employees (SQL)\nDESCRIPTION: This SQL code adds a `department` column to the existing `employees` table, setting the default value to 'Hooli'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter table if exists public.employees\nadd department text default 'Hooli';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for ChatGPT Retrieval Plugin with Poetry\nDESCRIPTION: Bash command to install the required dependencies for the ChatGPT Retrieval Plugin using Poetry package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Usage Example in React\nDESCRIPTION: Example showing how to implement a single-item accordion with collapsible behavior. Shows the structure with a trigger and content section.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/accordion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>Is it accessible?</AccordionTrigger>\n    <AccordionContent>Yes. It adheres to the WAI-ARIA design pattern.</AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Database with Text Input in Python\nDESCRIPTION: This snippet shows how to perform a similarity search query using plain text input. The adapter automatically converts the text query into a vector embedding before searching the database for similar content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Search by text\ndocs.query(data=\"how many ping pong balls fit in a Boeing ...\")\n\n# Results: [...]\n```\n\n----------------------------------------\n\nTITLE: Executing pgbench Performance Test with Multiple Clients\nDESCRIPTION: Benchmark command to test PostgreSQL performance with varying numbers of clients (2-128), using prepared statements over 300 seconds\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-26-supabase-postgres-13.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npgbench -P 5 -c {num_clients} -j {num_clients} -T 300 -M prepared postgres\n```\n\n----------------------------------------\n\nTITLE: Initializing Kakao OAuth Sign-In with JavaScript\nDESCRIPTION: Function to initiate Kakao authentication using Supabase JavaScript client, enabling users to sign in with their Kakao account\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nasync function signInWithKakao() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'kakao',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle and Rectangle Shape Classes in Dart\nDESCRIPTION: Concrete implementations of canvas shapes with properties for position, size, and methods for manipulation and serialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Circle extends CanvasObject {\n  static String type = 'circle';\n\n  final Offset center;\n  final double radius;\n\n  Circle({\n    required super.id,\n    required super.color,\n    required this.radius,\n    required this.center,\n  });\n\n  Circle.fromJson(Map<String, dynamic> json)\n      : radius = json['radius'],\n        center = Offset(json['center']['x'], json['center']['y']),\n        super(id: json['id'], color: Color(json['color']));\n\n  Circle.createNew(this.center)\n      : radius = 0,\n        super(id: const Uuid().v4(), color: RandomColor.getRandom());\n\n  @override\n  Map<String, dynamic> toJson() {\n    return {\n      'object_type': type,\n      'id': id,\n      'color': color.value,\n      'center': {\n        'x': center.dx,\n        'y': center.dy,\n      },\n      'radius': radius,\n    };\n  }\n\n  @override\n  Circle copyWith({\n    double? radius,\n    Offset? center,\n    Color? color,\n  }) {\n    return Circle(\n      radius: radius ?? this.radius,\n      center: center ?? this.center,\n      id: id,\n      color: color ?? this.color,\n    );\n  }\n\n  @override\n  bool intersectsWith(Offset point) {\n    final centerToPointerDistance = (point - center).distance;\n    return radius > centerToPointerDistance;\n  }\n\n  @override\n  Circle move(Offset delta) {\n    return copyWith(center: center + delta);\n  }\n}\n\nclass Rectangle extends CanvasObject {\n  static String type = 'rectangle';\n\n  final Offset topLeft;\n  final Offset bottomRight;\n\n  Rectangle({\n    required super.id,\n    required super.color,\n    required this.topLeft,\n    required this.bottomRight,\n  });\n\n  Rectangle.fromJson(Map<String, dynamic> json)\n      : bottomRight =\n            Offset(json['bottom_right']['x'], json['bottom_right']['y']),\n        topLeft = Offset(json['top_left']['x'], json['top_left']['y']),\n        super(id: json['id'], color: Color(json['color']));\n\n  Rectangle.createNew(Offset startingPoint)\n      : topLeft = startingPoint,\n        bottomRight = startingPoint,\n        super(color: RandomColor.getRandom(), id: const Uuid().v4());\n\n  @override\n  Map<String, dynamic> toJson() {\n    return {\n      'object_type': type,\n      'id': id,\n      'color': color.value,\n      'top_left': {\n        'x': topLeft.dx,\n        'y': topLeft.dy,\n      },\n      'bottom_right': {\n        'x': bottomRight.dx,\n        'y': bottomRight.dy,\n      },\n    };\n  }\n\n  @override\n  Rectangle copyWith({\n    Offset? topLeft,\n    Offset? bottomRight,\n    Color? color,\n  }) {\n    return Rectangle(\n      topLeft: topLeft ?? this.topLeft,\n      id: id,\n      bottomRight: bottomRight ?? this.bottomRight,\n      color: color ?? this.color,\n    );\n  }\n\n  @override\n  bool intersectsWith(Offset point) {\n    final minX = min(topLeft.dx, bottomRight.dx);\n    final maxX = max(topLeft.dx, bottomRight.dx);\n    final minY = min(topLeft.dy, bottomRight.dy);\n    final maxY = max(topLeft.dy, bottomRight.dy);\n    return minX < point.dx &&\n        point.dx < maxX &&\n        minY < point.dy &&\n        point.dy < maxY;\n  }\n\n  @override\n  Rectangle move(Offset delta) {\n    return copyWith(\n      topLeft: topLeft + delta,\n      bottomRight: bottomRight + delta,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In Anonymously with Swift in Supabase\nDESCRIPTION: Creates an anonymous user authentication session using the Supabase Swift SDK. Returns a session object for the anonymous user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet session = try await supabase.auth.signInAnonymously()\n```\n\n----------------------------------------\n\nTITLE: Implementing MapLibre Map Component with PMTiles Support\nDESCRIPTION: Creates a React map component using react-map-gl and maplibre-gl with PMTiles protocol support. Initializes a vector tile map showing US ZIP code boundaries. Uses the 'use dom' directive for Expo compatibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n'use dom'\n\nimport 'text-encoding-polyfill'\nimport { useEffect } from 'react'\nimport Map from 'react-map-gl'\nimport maplibregl from 'maplibre-gl'\nimport 'maplibre-gl/dist/maplibre-gl.css'\nimport { Protocol } from 'pmtiles'\n\nexport default function MapBox(_) {\n  useEffect(() => {\n    let protocol = new Protocol()\n    maplibregl.addProtocol('pmtiles', protocol.tile)\n    return () => {\n      maplibregl.removeProtocol('pmtiles')\n    }\n  }, [])\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <Map\n        style={{ width: '100%', height: 900 }}\n        mapStyle={{\n          version: 8,\n          sources: {\n            sample: {\n              type: 'vector',\n              url: 'pmtiles://https://r2-public.protomaps.com/protomaps-sample-datasets/cb_2018_us_zcta510_500k.pmtiles',\n            },\n          },\n          layers: [\n            {\n              id: 'zcta',\n              source: 'sample',\n              'source-layer': 'zcta',\n              type: 'line',\n              paint: {\n                'line-color': '#999',\n              },\n            },\n          ],\n        }}\n        mapLib={maplibregl}\n      />\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Loader for Supabase Client\nDESCRIPTION: Exports environment variables for Supabase URL and anonymous key through a Remix loader function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const loader = () => {\n  const env = {\n    SUPABASE_URL: process.env.SUPABASE_URL,\n    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY,\n  }\n\n  return json({ env })\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const loader = ({}: LoaderFunctionArgs) => {\n  const env = {\n    SUPABASE_URL: process.env.SUPABASE_URL!,\n    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY!,\n  }\n\n  return json({ env })\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to S3 using PutObject in JavaScript\nDESCRIPTION: This snippet demonstrates how to upload a file to Supabase Storage using the S3 PutObject action. It uses the @aws-sdk/client-s3 package to create an S3 client and send a PutObjectCommand.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/s3-uploads.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3'\n\nconst s3Client = new S3Client({...})\n\nconst file = fs.createReadStream('path/to/file')\n\nconst uploadCommand = new PutObjectCommand({\n  Bucket: 'bucket-name',\n  Key: 'path/to/file',\n  Body: file,\n  ContentType: 'image/jpeg',\n})\n\nawait s3Client.send(uploadCommand)\n```\n\n----------------------------------------\n\nTITLE: Importing Node.js Built-in Module\nDESCRIPTION: Example of importing a Node.js built-in module using the node: specifier.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport process from 'node:process'\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Breeze authentication package\nDESCRIPTION: Installs Laravel Breeze, a lightweight authentication scaffold, and runs its installation command to set up authentication features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require laravel/breeze --dev\nphp artisan breeze:install\n```\n\n----------------------------------------\n\nTITLE: Realtime Server Component\nDESCRIPTION: Implements the server-side portion of a realtime posts component with initial data fetch.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport supabase from '../../utils/supabase'\nimport RealtimePosts from './realtime-posts'\n\nexport const revalidate = 0\n\nexport default async function Realtime() {\n  const { data } = await supabase.from('posts').select('*')\n  return <RealtimePosts serverPosts={data} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Backup in PostgreSQL using pg_dump\nDESCRIPTION: Command to create a logical backup of a single PostgreSQL database using pg_dump utility. The backup is saved to a SQL file that can be used for restoration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-17-postgresql-physical-logical-backups.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npg_dump db_name > file_name.sql\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Edge Functions locally\nDESCRIPTION: Commands to start Supabase locally and serve the Edge Function without JWT verification, using the local environment file for configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-resend/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsupabase start\nsupabase functions serve --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Initializing an Ionic Angular App with CLI\nDESCRIPTION: Commands to install the Ionic CLI, create a new blank Ionic Angular project, and navigate to the project directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\nionic start supabase-ionic-angular blank --type angular\ncd supabase-ionic-angular\n```\n\n----------------------------------------\n\nTITLE: Enabling Auditing on a Table in PostgreSQL\nDESCRIPTION: Demonstrates how to create a table and enable auditing on it using the custom auditing system. It also shows how to insert, update, and delete records, and then query the audit log.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- create a table\ncreate table public.members (\n  id int primary key,\n  name text not null\n);\n\n-- Enable auditing on the new table\nselect audit.enable_tracking('public.members');\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- create a new record\ninsert into public.members\n  (id, name)\nvalues\n  (1, 'foo');\n\n-- edit the record\nupdate public.members\nset name = 'bar'\nwhere id = 1;\n\n-- delete the record\ndelete from public.members;\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from audit.record_history;\n```\n\n----------------------------------------\n\nTITLE: Full Text Search Using Swift Supabase Client\nDESCRIPTION: Swift implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await supabase.from(\"books\")\n  .select()\n  .textSearch(\"title\", value: \"'Harry'\")\n```\n\n----------------------------------------\n\nTITLE: Signing In with Phone and Password in v0 vs v1\nDESCRIPTION: Demonstrates the change in the method for signing in with a phone number and password. In v1, a more explicit method name is used.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signIn(\n  phone: '+13334445555',\n  password: 'example-password',\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithPassword(\n  phone: '+13334445555',\n  password: 'example-password',\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Posts Component\nDESCRIPTION: Implements a server component that fetches fresh data on every request using revalidate: 0.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\nimport supabase from '../../utils/supabase'\n\nexport const revalidate = 0\n\nexport default async function Posts() {\n  const { data: posts } = await supabase.from('posts').select('id, title')\n\n  if (!posts) {\n    return <p>No posts found.</p>\n  }\n\n  return posts.map((post) => (\n    <p key={post.id}>\n      <Link href={`/static/${post.id}`}>{post.title}</Link>\n    </p>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for IPv6 Support\nDESCRIPTION: This snippet shows how to update the Docker daemon configuration to enable IPv6 support. It includes the necessary JSON configuration to be added to the daemon.json file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-16-ipv6.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"ipv6\": true,\n\"fixed-cidr-v6\": \"fd00:ffff::/80\",\n\"ip6tables\": true,\n\"experimental\": true\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Data Models in Swift\nDESCRIPTION: Creates model structures for handling profile data serialization and deserialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct Profile: Decodable {\n  let username: String?\n  let fullName: String?\n  let website: String?\n\n  enum CodingKeys: String, CodingKey {\n    case username\n    case fullName = \"full_name\"\n    case website\n  }\n}\n\nstruct UpdateProfileParams: Encodable {\n  let username: String\n  let fullName: String\n  let website: String\n\n  enum CodingKeys: String, CodingKey {\n    case username\n    case fullName = \"full_name\"\n    case website\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying SMTP Email Function with Supabase CLI\nDESCRIPTION: Commands to link your project, set required SMTP environment variables as secrets, and deploy the send-email-smtp function. Note that SMTP_PORT must be a port other than 25 and 587 due to Deno Deploy restrictions.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-smtp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link --project-ref your-project-ref\nsupabase secrets set SMTP_HOSTNAME=\"your.hostname.com\" SMTP_PORT=\"2587\" SMTP_USERNAME=\"your_username\" SMTP_PASSWORD=\"your_password\" SMTP_FROM=\"no-reply@example.com\"\nsupabase functions deploy send-email-smtp\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Domain with Supabase CLI\nDESCRIPTION: Use the Supabase CLI to remove an activated custom domain from a project. This command reverts the project back to using the default Supabase domain.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase domains delete --project-ref abcdefghijklmnopqrst\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Dependencies for React Native\nDESCRIPTION: Commands to install required dependencies including Supabase client, AsyncStorage for session management, and UI components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Fetching Ticket Image from Supabase Storage (TypeScript)\nDESCRIPTION: This code attempts to retrieve a user's ticket image from Supabase Storage before generating a new one, optimizing performance and resource usage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Try to get image from Supabase Storage CDN.\nstorageResponse = await fetch(\n  `${STORAGE_URL}/tickets/regular/${BUCKET_FOLDER_VERSION}/${username}.png`\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Generated TypeScript Types\nDESCRIPTION: This example shows how to override generated types using type-fest's MergeDeep utility type, useful for correcting unexpected nullability in view columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MergeDeep } from 'type-fest'\nimport { Database as DatabaseGenerated } from './database-generated.types'\nexport { Json } from './database-generated.types'\n\n// Override the type for a specific column in a view:\nexport type Database = MergeDeep<\n  DatabaseGenerated,\n  {\n    public: {\n      Views: {\n        movies_view: {\n          Row: {\n            // id is a primary key in public.movies, so it must be `not null`\n            id: number\n          }\n        }\n      }\n    }\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Creating Email-Based RLS Policy in PostgreSQL\nDESCRIPTION: SQL code to create a Row Level Security policy that filters data based on email domains, only allowing access to rows with email addresses ending in 'supabase.com'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Only dump data for supabase employees\ncreate policy \"Data dump rule\" on profiles\n  for select\n  to exporter\n  using (\n    substring(email from '@(.*)$') = 'supabase.com'\n  );\n```\n\n----------------------------------------\n\nTITLE: Initiating Sign-In with SSO (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWithSSO` method to start the SP Initiated Flow. The Supabase client must be initialized before using this function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nsupabase.auth.signInWithSSO({\n  domain: 'company.com',\n})\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embedded Support Events from Google Calendar in SQL\nDESCRIPTION: This SQL function retrieves embedded support event names from a Google Calendar for a specified date range. It uses a decrypted secret to access the calendar API and processes the JSON response to extract relevant event summaries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-25-exploring-support-tooling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION \"public\".\"get_embedded_event_names\"\n\t(\"date_param\" timestamp with time zone DEFAULT \"now\"())\n  RETURNS \"jsonb\"\n  LANGUAGE \"plpgsql\" SECURITY DEFINER\n  SET \"search_path\" TO ''\n  AS $$\nDECLARE\n  target_date timestamp with time zone := COALESCE(date_param, now());\n  start_date timestamp with time zone := target_date + INTERVAL '2 hours';\n  end_date timestamp with time zone := start_date + INTERVAL '1 day' - INTERVAL '1 millisecond';\n  time_min text := to_char(start_date, 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"');\n  time_max text := to_char(end_date, 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"');\n  base_url text;\n  api_url text;\n  response jsonb;\n  events jsonb; -- Change the declaration to jsonb\n  embedded_event_names text[];\nBEGIN\n  SELECT decrypted_secret\n  INTO base_url\n  FROM vault.decrypted_secrets\n  WHERE name = 'calendar_base_url';\n\n  api_url := base_url || '&timeMin=' || time_min || '&timeMax=' || time_max;\n\n  select \"content\"::jsonb into response from extensions.http_get(api_url);\n  events := response->'items'; -- Remove the typecast to ::jsonb\n\n  SELECT ARRAY_AGG(event->>'summary')\n  INTO embedded_event_names\n  FROM jsonb_array_elements(events) AS event -- Use jsonb_array_elements function\n  WHERE (event->>'summary') ILIKE '%embedded%';\n  RETURN COALESCE(to_jsonb(embedded_event_names)::text,'[]');\nEND;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Sign Out using Supabase\nDESCRIPTION: This Kotlin snippet demonstrates how to sign out a user using Supabase. It uses the `signOut` method to remove the user's session and local storage data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Supabase SMS Provider Configuration\nDESCRIPTION: This code snippet imports necessary React components for displaying admonitions and cost warnings in the SMS provider configuration interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/components/AuthSmsProviderConfig/TextLocalConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Admonition } from 'ui-patterns/admonition'\nimport { CostWarning } from './AuthSmsProviderConfig.Warnings'\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function for OG Image Generation\nDESCRIPTION: Command to deploy the 'lwx-ticket' Supabase function for Open Graph image generation. This deployment is configured without JWT verification for public access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-ticket/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy lwx-ticket --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Calling PostgreSQL Function via RPC with Large Data\nDESCRIPTION: JavaScript code demonstrating how to call the database function through RPC, passing a large array of UUIDs in the request payload rather than the URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.rpc('example', { id: ['e2f34fb9-bbf9-4649-9b2f-09ec56e67a42', ...900 more UUIDs] })\n```\n\n----------------------------------------\n\nTITLE: Generating a Home Page in RedwoodJS\nDESCRIPTION: Command to generate a new home page component in a RedwoodJS application with the root route path.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw generate page home /\n```\n\n----------------------------------------\n\nTITLE: Basic Auth UI Component Implementation\nDESCRIPTION: Minimal setup for the Auth UI component using the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { Auth } from '@supabase/auth-ui-react'\n\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n\nconst App = () => <Auth supabaseClient={supabase} />\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Objects in Supabase - JavaScript\nDESCRIPTION: This snippet establishes connections to the old and new Supabase projects using the Supabase JavaScript client and retrieves storage objects from the old project. It then downloads each object and uploads it to the new project, handling any errors that occur during migration. Ensure to install the Supabase client and configure the project URLs and service keys properly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// npm install @supabase/supabase-js@1\nconst { createClient } = require('@supabase/supabase-js')\n\nconst OLD_PROJECT_URL = 'https://xxx.supabase.co'\nconst OLD_PROJECT_SERVICE_KEY = 'old-project-service-key-xxx'\n\nconst NEW_PROJECT_URL = 'https://yyy.supabase.co'\nconst NEW_PROJECT_SERVICE_KEY = 'new-project-service-key-yyy'\n\n;(async () => {\n  const oldSupabaseRestClient = createClient(OLD_PROJECT_URL, OLD_PROJECT_SERVICE_KEY, {\n    db: {\n      schema: 'storage',\n    },\n  })\n  const oldSupabaseClient = createClient(OLD_PROJECT_URL, OLD_PROJECT_SERVICE_KEY)\n  const newSupabaseClient = createClient(NEW_PROJECT_URL, NEW_PROJECT_SERVICE_KEY)\n\n  // make sure you update max_rows in postgrest settings if you have a lot of objects\n  // or paginate here\n  const { data: oldObjects, error } = await oldSupabaseRestClient.from('objects').select()\n  if (error) {\n    console.log('error getting objects from old bucket')\n    throw error\n  }\n\n  for (const objectData of oldObjects) {\n    console.log(`moving ${objectData.id}`)\n    try {\n      const { data, error: downloadObjectError } = await oldSupabaseClient.storage\n        .from(objectData.bucket_id)\n        .download(objectData.name)\n      if (downloadObjectError) {\n        throw downloadObjectError\n      }\n\n      const { _, error: uploadObjectError } = await newSupabaseClient.storage\n        .from(objectData.bucket_id)\n        .upload(objectData.name, data, {\n          upsert: true,\n          contentType: objectData.metadata.mimetype,\n          cacheControl: objectData.metadata.cacheControl,\n        })\n      if (uploadObjectError) {\n        throw uploadObjectError\n      }\n    } catch (err) {\n      console.log('error moving ', objectData)\n      console.log(err)\n    }\n  }\n})()\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization Plugin in Groovy Build File\nDESCRIPTION: This snippet demonstrates how to add the KotlinX Serialization plugin to a Kotlin project using Gradle with the Groovy DSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.plugin.serialization' version 'KOTLIN_VERSION'\n}\n```\n\n----------------------------------------\n\nTITLE: Truncating Webhook Queue in SQL\nDESCRIPTION: SQL command to truncate the net.http_request_queue table to clear the webhook queue when it becomes too large and causes IO strain.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/interpreting-supabase-grafana-io-charts-MUynDR.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE net.http_request_queue;\n```\n\n----------------------------------------\n\nTITLE: Supavisor Session Mode Connection String\nDESCRIPTION: This snippet shows an example of a Supavisor session mode connection string to a Supabase Postgres database via a proxy. This is suitable for persistent clients and supports both IPv4 and IPv6. Replace `[YOUR-PASSWORD]` and `[REGION]` with the actual values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npostgres://postgres.apbkobhfnmcqqzqeeqss:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: New Email Variable Usage\nDESCRIPTION: Example of using NewEmail variable in email change template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<p>You are requesting to update your email address to {{ .NewEmail }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Setup for Supabase Development\nDESCRIPTION: Commands for installing project dependencies, copying the environment configuration file, and starting the development servers. These steps prepare the local development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/DEVELOPERS.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install # install dependencies\n```\n\nLANGUAGE: sh\nCODE:\n```\ncp apps/www/.env.local.example apps/www/.env.local\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev # start all the applications\n```\n\n----------------------------------------\n\nTITLE: Rendering Pre-fetched Data in a Client Component with React Query and Supabase\nDESCRIPTION: This code shows how to use the pre-fetched data in a Next.js client component using React Query and Supabase. It uses the useQuery hook to access the data that was fetched on the server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport useSupabaseBrowser from '@/utils/supabase-browser'\nimport { getCountryById } from '@/queries/get-country-by-id'\nimport { useQuery } from '@supabase-cache-helpers/postgrest-react-query'\n\nexport default function Country({ id }: { id: number }) {\n  const supabase = useSupabaseBrowser()\n  // This useQuery could just as well happen in some deeper\n  // child to <Posts>, data will be available immediately either way\n  const { data: country } = useQuery(getCountryById(supabase, id))\n\n  return (\n    <div>\n      <h1>SSR: {country?.name}</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Function\nDESCRIPTION: Command to deploy the Edge Function to Supabase\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy hello-world\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Queue Table Structure in pg_net\nDESCRIPTION: Definition of the unlogged table that stores waiting HTTP requests in the pg_net extension. Requests are deleted from this table once executed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNLOGGED TABLE\n    net.http_request_queue (\n        id bigint NOT NULL DEFAULT nextval('net.http_request_queue_id_seq'::regclass),\n        method text NOT NULL,\n        url text NOT NULL,\n        headers jsonb NOT NULL,\n        body bytea NULL,\n        timeout_milliseconds integer NOT NULL\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase SSR Client in Hono Middleware\nDESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in a Hono middleware, handling cookie management for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient, parseCookieHeader } from '@supabase/ssr'\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport type { Context, MiddlewareHandler } from 'hono'\nimport { env } from 'hono/adapter'\nimport { setCookie } from 'hono/cookie'\n\ndeclare module 'hono' {\n  interface ContextVariableMap {\n    supabase: SupabaseClient\n  }\n}\n\nexport const getSupabase = (c: Context) => {\n  return c.get('supabase')\n}\n\ntype SupabaseEnv = {\n  SUPABASE_URL: string\n  SUPABASE_ANON_KEY: string\n}\n\nexport const supabaseMiddleware = (): MiddlewareHandler => {\n  return async (c, next) => {\n    const supabaseEnv = env<SupabaseEnv>(c)\n    const supabaseUrl = supabaseEnv.SUPABASE_URL\n    const supabaseAnonKey = supabaseEnv.SUPABASE_ANON_KEY\n\n    if (!supabaseUrl) {\n      throw new Error('SUPABASE_URL missing!')\n    }\n\n    if (!supabaseAnonKey) {\n      throw new Error('SUPABASE_ANON_KEY missing!')\n    }\n\n    const supabase = createServerClient(supabaseUrl, supabaseAnonKey, {\n      cookies: {\n        getAll() {\n          return parseCookieHeader(c.req.header('Cookie') ?? '')\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => setCookie(c, name, value, options))\n        },\n      },\n    })\n\n    c.set('supabase', supabase)\n\n    await next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an onCreate Cloud Function in Node.js for Supabase role assignment\nDESCRIPTION: This JavaScript code creates an onCreate Firebase Cloud Function that sets a custom role claim for new users. Unlike blocking functions, this approach is asynchronous, and the role won't be available in the first ID token after signup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions')\nconst { initializeApp } = require('firebase-admin/app')\nconst { getAuth } = require('firebase-admin/auth')\nconst { getDatabase } = require('firebase-admin/database')\n\ninitializeApp()\n\n// On sign up.\nexports.processSignUp = functions.auth.user().onCreate(async (user) => {\n  try {\n    // Set custom user claims on this newly created user.\n    await getAuth().setCustomUserClaims(user.uid, {\n      role: 'authenticated',\n    })\n  } catch (error) {\n    console.log(error)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Firebase Auth in Kotlin (Multiplatform)\nDESCRIPTION: Creates a Supabase client for Kotlin Multiplatform applications, using a community Firebase SDK to retrieve the Firebase Auth JWT of the current user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport dev.gitlive.firebase.Firebase\nimport dev.gitlive.firebase.auth.auth\n\nval supabase = createSupabaseClient(\n    \"https://<supabase-project>.supabase.co\",\n    \"SUPABASE_ANON_KEY\"\n) {\n    accessToken = {\n        Firebase.auth.currentUser?.getIdToken(false)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Search Implementation\nDESCRIPTION: Python function to perform image search using text queries against stored embeddings\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef search():\n    # create vector store client\n    vx = vecs.create_client(DB_CONNECTION)\n    images = vx.get_or_create_collection(name=\"image_vectors\", dimension=512)\n\n    # Load CLIP model\n    model = SentenceTransformer('clip-ViT-B-32')\n    # Encode text query\n    query_string = \"a bike in front of a red brick wall\"\n    text_emb = model.encode(query_string)\n\n    # query the collection filtering metadata for \"type\" = \"jpg\"\n    results = images.query(\n        data=text_emb,                      # required\n        limit=1,                            # number of records to return\n        filters={\"type\": {\"$eq\": \"jpg\"}},   # metadata filters\n    )\n    result = results[0]\n    print(result)\n    plt.title(result)\n    image = mpimg.imread('./images/' + result)\n    plt.imshow(image)\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Dropping Test Authorization Function in SQL\nDESCRIPTION: This SQL command removes the previously created test_authorization_header function from the database, useful for cleanup after debugging is complete.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-is-my-select-returning-an-empty-data-array-and-i-have-data-in-the-table-xvOPgx.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ndrop function test_authorization_header;\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Role Query Cost Limits\nDESCRIPTION: SQL commands to set different query cost limits for anonymous and authenticated users, implementing role-based query restrictions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n-- anonymous users can only run cheap queries\nALTER\n  USER anon\nSET\n  plan_filter.statement_cost_limit = 10000;\n\n-- authenticated users can run more expensive queries\nALTER\n  USER authenticated\nSET\n  plan_filter.statement_cost_limit = 1e6;\n```\n\n----------------------------------------\n\nTITLE: Implementing RoomCubit for State Management in Dart\nDESCRIPTION: This snippet implements the RoomCubit class, which manages the state of the rooms page. It handles initializing rooms, fetching new users, subscribing to room updates, and managing message subscriptions for each room.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:my_chat_app/cubits/profiles/profiles_cubit.dart';\nimport 'package:my_chat_app/models/profile.dart';\nimport 'package:my_chat_app/models/message.dart';\nimport 'package:my_chat_app/models/room.dart';\nimport 'package:my_chat_app/utils/constants.dart';\n\npart 'rooms_state.dart';\n\nclass RoomCubit extends Cubit<RoomState> {\n  RoomCubit() : super(RoomsLoading());\n\n  final Map<String, StreamSubscription<Message?>>\n      _messageSubscriptions = {};\n\n  late final String _myUserId;\n\n  /// List of new users of the app for the user to start talking to\n  late final List<Profile> _newUsers;\n\n  /// List of rooms\n  List<Room> _rooms = [];\n  StreamSubscription<List<Map<String, dynamic>>>?\n      _rawRoomsSubscription;\n  bool _haveCalledGetRooms = false;\n\n  Future<void> initializeRooms(BuildContext context) async {\n    if (_haveCalledGetRooms) {\n      return;\n    }\n    _haveCalledGetRooms = true;\n\n    _myUserId = supabase.auth.currentUser!.id;\n\n    late final List data;\n\n    try {\n      data = await supabase\n          .from('profiles')\n          .select()\n          .not('id', 'eq', _myUserId)\n          .order('created_at')\n          .limit(12);\n    } catch (_) {\n      emit(RoomsError('Error loading new users'));\n    }\n\n    final rows = List<Map<String, dynamic>>.from(data);\n    _newUsers = rows.map(Profile.fromMap).toList();\n\n    /// Get realtime updates on rooms that the user is in\n    _rawRoomsSubscription =\n        supabase.from('room_participants').stream(\n      primaryKey: ['room_id', 'profile_id'],\n    ).listen((participantMaps) async {\n      if (participantMaps.isEmpty) {\n        emit(RoomsEmpty(newUsers: _newUsers));\n        return;\n      }\n\n      _rooms = participantMaps\n          .map(Room.fromRoomParticipants)\n          .where((room) => room.otherUserId != _myUserId)\n          .toList();\n      for (final room in _rooms) {\n        _getNewestMessage(\n            context: context, roomId: room.id);\n        BlocProvider.of<ProfilesCubit>(context)\n            .getProfile(room.otherUserId);\n      }\n      emit(RoomsLoaded(\n        newUsers: _newUsers,\n        rooms: _rooms,\n      ));\n    }, onError: (error) {\n      emit(RoomsError('Error loading rooms'));\n    });\n  }\n\n  // Setup listeners to listen to the most recent message in each room\n  void _getNewestMessage({\n    required BuildContext context,\n    required String roomId,\n  }) {\n    _messageSubscriptions[roomId] = supabase\n        .from('messages')\n        .stream(primaryKey: ['id'])\n        .eq('room_id', roomId)\n        .order('created_at')\n        .limit(1)\n        .map<Message?>(\n          (data) => data.isEmpty\n              ? null\n              : Message.fromMap(\n                  map: data.first,\n                  myUserId: _myUserId,\n                ),\n        )\n        .listen((message) {\n          final index = _rooms\n              .indexWhere((room) => room.id == roomId);\n          _rooms[index] =\n              _rooms[index].copyWith(lastMessage: message);\n          _rooms.sort((a, b) {\n            /// Sort according to the last message\n            /// Use the room createdAt when last message is not available\n            final aTimeStamp = a.lastMessage != null\n                ? a.lastMessage!.createdAt\n                : a.createdAt;\n            final bTimeStamp = b.lastMessage != null\n                ? b.lastMessage!.createdAt\n                : b.createdAt;\n            return bTimeStamp.compareTo(aTimeStamp);\n          });\n          if (!isClosed) {\n            emit(RoomsLoaded(\n              newUsers: _newUsers,\n              rooms: _rooms,\n            ));\n          }\n        });\n  }\n\n  /// Creates or returns an existing roomID of both participants\n  Future<String> createRoom(String otherUserId) async {\n    final data = await supabase.rpc('create_new_room',\n        params: {'other_user_id': otherUserId});\n    emit(RoomsLoaded(rooms: _rooms, newUsers: _newUsers));\n    return data as String;\n  }\n\n  @override\n  Future<void> close() {\n    _rawRoomsSubscription?.cancel();\n    return super.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bullet Component with Movement and Collision in Flutter Flame\nDESCRIPTION: Creates a Bullet class that extends PositionComponent with physics-based movement, collision detection, and automatic cleanup when leaving the game area. Includes damage settings for gameplay mechanics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flame/collisions.dart';\nimport 'package:flame/components.dart';\nimport 'package:flame/image_composition.dart' as flame_image;\n\nclass Bullet extends PositionComponent with CollisionCallbacks, HasGameRef {\n  final Vector2 velocity;\n\n  final flame_image.Image image;\n\n  static const radius = 5.0;\n\n  bool hasBeenHit = false;\n\n  final bool isMine;\n\n  /// Damage that it deals when it hits the player\n  final int damage = 5;\n\n  Bullet({\n    required this.isMine,\n    required this.velocity,\n    required this.image,\n    required Vector2 initialPosition,\n  }) : super(position: initialPosition);\n\n  @override\n  Future<void>? onLoad() async {\n    anchor = Anchor.center;\n\n    width = radius * 2;\n    height = radius * 2;\n\n    add(CircleHitbox()\n      ..collisionType = CollisionType.passive\n      ..anchor = Anchor.center);\n\n    final sprite =\n        SpriteComponent.fromImage(image, size: Vector2.all(radius * 2));\n\n    add(sprite);\n    await super.onLoad();\n  }\n\n  @override\n  void update(double dt) {\n    super.update(dt);\n    position += velocity * dt;\n\n    if (position.y < 0 || position.y > gameRef.size.y) {\n      removeFromParent();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SSR Package Command\nDESCRIPTION: Command to create a new Next.js project with Supabase integration using the official quickstart template\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-do-you-troubleshoot-nextjs---supabase-auth-issues-riMCZV.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Access Token Hook Function in PostgreSQL\nDESCRIPTION: SQL template for implementing a custom access token hook function in PostgreSQL using PL/pgSQL. The function receives a JSON event and returns modified JSON.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\ndeclare\n  -- Insert variables here\nbegin\n  -- Insert logic here\n  return event;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Running Edge Function Locally\nDESCRIPTION: Commands to start the Supabase services and serve the edge function locally with environment variables. This allows testing the function at the specified local URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve --no-verify-jwt --env-file supabase/functions/upstash-redis-counter/.env\n```\n\n----------------------------------------\n\nTITLE: Defining ProfilesState in Dart for Flutter Chat App\nDESCRIPTION: This code defines the ProfilesState class hierarchy for the chat application. It includes an abstract base class and two concrete implementations: ProfilesInitial and ProfilesLoaded.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\npart of 'profiles_cubit.dart';\n\n@immutable\nabstract class ProfilesState {}\n\nclass ProfilesInitial extends ProfilesState {}\n\nclass ProfilesLoaded extends ProfilesState {\n  ProfilesLoaded({\n    required this.profiles,\n  });\n\n  final Map<String, Profile?> profiles;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StorePage Component for Adding New Stores\nDESCRIPTION: A TypeScript component that handles the form for adding a new store location. It includes methods for handling image selection and submitting the new store data to the StoresService.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core'\nimport { ModalController } from '@ionic/angular'\nimport { StoreEntry, StoresService } from '../services/stores.service'\n\n@Component({\n  selector: 'app-store',\n  templateUrl: './store.page.html',\n  styleUrls: ['./store.page.scss'],\n})\nexport class StorePage implements OnInit {\n  store: StoreEntry = {\n    name: '',\n    description: '',\n    image: undefined,\n    lat: undefined,\n    long: undefined,\n  }\n\n  constructor(\n    public modalCtrl: ModalController,\n    private storesService: StoresService\n  ) {}\n\n  ngOnInit() {}\n\n  imageSelected(ev: any) {\n    this.store.image = ev.detail.event.target.files[0]\n  }\n\n  async addStore() {\n    this.storesService.addStore(this.store)\n    this.modalCtrl.dismiss()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Inner Joins in Supabase JavaScript Client\nDESCRIPTION: Demonstrates how to use the new '!inner' keyword for resource embedding with inner joins in PostgREST 9 using the Supabase JavaScript client. This allows filtering rows of the top-level table based on a filter of the embedded table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-postgrest-9.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('messages')\n  .select('*, users!inner(*)')\n  .eq('users.username', 'Jane')\n```\n\n----------------------------------------\n\nTITLE: Serving Edge Functions Locally\nDESCRIPTION: Command to run Edge Functions locally using the Supabase CLI, enabling testing and debugging in a development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS\nDESCRIPTION: Tailwind CSS configuration file setup with content paths and plugins.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./src/**/*.{html,ts}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [require('@tailwindcss/forms')],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase MCP Server in AI Clients\nDESCRIPTION: JSON configuration for setting up the Supabase MCP server in AI clients. It specifies the command to run the server and includes a placeholder for the personal access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-04-mcp-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--access-token\",\n        \"<personal-access-token>\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out from Supabase (JavaScript)\nDESCRIPTION: This snippet shows how to sign out a user from a Supabase application using JavaScript. It requires the Supabase client setup and calls the `signOut` method to remove the user from the session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cloudflare Turnstile Validation in Supabase Edge Function\nDESCRIPTION: TypeScript code for a Supabase Edge Function that validates Cloudflare Turnstile tokens. The function receives a token from the client, validates it with Cloudflare's API, and returns the validation result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { corsHeaders } from '../_shared/cors.ts'\n\nconsole.log('Hello from Cloudflare Trunstile!')\n\nfunction ips(req: Request) {\n  return req.headers.get('x-forwarded-for')?.split(/\\s*,\\s*/)\n}\n\nDeno.serve(async (req) => {\n  // This is needed if you're planning to invoke your function from a browser.\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  const { token } = await req.json()\n  const clientIps = ips(req) || ['']\n  const ip = clientIps[0]\n\n  // Validate the token by calling the\n  // \"/siteverify\" API endpoint.\n  let formData = new FormData()\n  formData.append('secret', Deno.env.get('CLOUDFLARE_SECRET_KEY') ?? '')\n  formData.append('response', token)\n  formData.append('remoteip', ip)\n\n  const url = 'https://challenges.cloudflare.com/turnstile/v0/siteverify'\n  const result = await fetch(url, {\n    body: formData,\n    method: 'POST',\n  })\n\n  const outcome = await result.json()\n  console.log(outcome)\n  if (outcome.success) {\n    return new Response('success', { headers: corsHeaders })\n  }\n  return new Response('failure', { headers: corsHeaders })\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying All Edge Functions\nDESCRIPTION: Command to deploy all Edge Functions in the project to production.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy\n```\n\n----------------------------------------\n\nTITLE: Pushing Database Schema to Supabase in Bash\nDESCRIPTION: Bash command for synchronizing the local database schema with the remote Supabase project. Ensures the database structure matches the local development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_ENV=production npx supabase@latest db push\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Authentication\nDESCRIPTION: Implementation of social authentication providers using SupaSocialsAuth widget.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nSupaSocialsAuth(\n  socialProviders: [\n    OAuthProvider.apple,\n    OAuthProvider.google,\n  ],\n  colored: true,\n  redirectUrl: kIsWeb\n    ? null\n    : 'io.mydomain.myapp://callback',\n  onSuccess: (Session response) {},\n  onError: (error) {},\n)\n```\n\n----------------------------------------\n\nTITLE: Generating an Authentication Component in RedwoodJS\nDESCRIPTION: Command to generate a new authentication component in a RedwoodJS application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw g component auth\n```\n\n----------------------------------------\n\nTITLE: Poetry Script Configuration\nDESCRIPTION: TOML configuration for adding seed and search scripts to Poetry\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.scripts]\nseed = \"image_search.main:seed\"\nsearch = \"image_search.main:search\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Definition in SQL\nDESCRIPTION: SQL query to get the definition of a specific function for debugging trigger-related issues.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_get_functiondef(oid)\nfrom pg_proc\nwhere proname = '<FUNCTION NAME>';\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI SDK Environment Variables for Llamafile\nDESCRIPTION: Environment variable configuration for using the OpenAI Deno SDK with Llamafile in Supabase Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nOPENAI_BASE_URL=http://host.docker.internal:8080/v1\nOPENAI_API_KEY=sk-XXXXXXXX # need to set a random value for openai sdk to work\n```\n\n----------------------------------------\n\nTITLE: Setting Up Testing Environment with Supabase CLI\nDESCRIPTION: Creates a new test file for RLS policies using Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new test for our policies using supabase cli\nsupabase test new todos_rls.test\n```\n\n----------------------------------------\n\nTITLE: Password Verification Output Schema\nDESCRIPTION: JSON response format for password verification hooks, specifying the authentication decision and user messaging.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"decision\": \"reject\",\n  \"message\": \"You have exceeded maximum number of password sign-in attempts.\",\n  \"should_logout_user\": \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JS via npm\nDESCRIPTION: Command to install the Supabase JavaScript library using npm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Querying Composite Types with Supabase JavaScript Client\nDESCRIPTION: JavaScript code showing how to query composite type fields and array elements using the Supabase client with the new arrow operator syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-28-community-day-lw4.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('users')\n  .select(\n    `\n    name->first_name,\n    name->middle_names->0,\n    name->first_surname,\n    occupation`\n  )\n  .eq('name->reign_name', 'Edward VIII')\n\nconsole.log(data)\n// {\n//   \"first_name\": \"Edward\",\n//   \"middle_names\": \"Albert\",\n//   \"first_surname\": \"David\",\n//   \"occupation\": \"King of the United Kingdom\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Remix\nDESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for a Remix application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=your_supabase_project_url\nSUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n----------------------------------------\n\nTITLE: Server-side Data Fetching with Row Level Security in SvelteKit\nDESCRIPTION: This snippet demonstrates server-side data fetching with Supabase Row Level Security (RLS) in SvelteKit. It includes both the Svelte component and the corresponding page.ts file for loading data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- src/routes/profile/+page.svelte -->\n<script lang=\"ts\">\n  export let data\n\n  let { user, tableData } = data\n  $: ({ user, tableData } = data)\n</script>\n\n<div>Protected content for {user.email}</div>\n<pre>{JSON.stringify(tableData, null, 2)}</pre>\n<pre>{JSON.stringify(user, null, 2)}</pre>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/profile/+page.ts\nimport { redirect } from '@sveltejs/kit'\n\nexport const load = async ({ parent }) => {\n  const { supabase, session } = await parent()\n  if (!session) {\n    redirect(303, '/')\n  }\n  const { data: tableData } = await supabase.from('test').select('*')\n\n  return {\n    user: session.user,\n    tableData,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Chart Data and Config in React/TSX\nDESCRIPTION: Shows how to define chart data with browser information and visitors count, along with a matching chart configuration that specifies labels and colors for each browser type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartData = [\n  { browser: 'chrome', visitors: 187, fill: 'var(--color-chrome)' },\n  { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: 'Total Visitors',\n  },\n  chrome: {\n    label: 'Chrome',\n    color: 'hsl(var(--chart-1))',\n  },\n  safari: {\n    label: 'Safari',\n    color: 'hsl(var(--chart-2))',\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Querying Enum Range Values\nDESCRIPTION: Shows how to retrieve all possible values of an enum type using the enum_range function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect enum_range(null::mood);\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Secrets for Edge Function Deployment\nDESCRIPTION: Commands to set the OpenAI API key as a secret for the Edge Function using the Supabase CLI. This is needed when deploying the function to production.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sign-In Button with HTML and JavaScript\nDESCRIPTION: This snippet shows how to set up a Google Sign-In button using HTML and JavaScript. It includes the necessary attributes for the button and a callback function to handle the sign-in response.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div\n  id=\"g_id_onload\"\n  data-client_id=\"<client ID>\"\n  data-context=\"signin\"\n  data-ux_mode=\"popup\"\n  data-callback=\"handleSignInWithGoogle\"\n  data-nonce=\"\"\n  data-auto_select=\"true\"\n  data-itp_support=\"true\"\n  data-use_fedcm_for_prompt=\"true\"\n></div>\n\n<div\n  class=\"g_id_signin\"\n  data-type=\"standard\"\n  data-shape=\"pill\"\n  data-theme=\"outline\"\n  data-text=\"signin_with\"\n  data-size=\"large\"\n  data-logo_alignment=\"left\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Signup Confirmation Email Template for PKCE Flow\nDESCRIPTION: HTML template for the signup confirmation email used in the PKCE authentication flow. The template includes a confirmation link with token hash and redirect parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h2>Confirm your signup</h2>\n\n<p>Follow this link to confirm your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}\"\n    >Confirm your email</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL enforcement with Supabase CLI\nDESCRIPTION: Command to enable SSL enforcement on your Supabase project database using the CLI. This prevents clients from connecting without SSL, increasing security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase ssl-enforcement --project-ref {ref} update --enable-db-ssl-enforcement --experimental\n```\n\n----------------------------------------\n\nTITLE: Getting help with Supabase CLI login options\nDESCRIPTION: Command to display help information for the Supabase CLI login feature, showing all available flags and options for customizing the login process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-01-automatic-cli-login.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase login --help\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger for Parent Partitioned Table in PostgreSQL\nDESCRIPTION: This SQL command creates a new trigger for the parent partitioned table. Triggers need to be recreated manually as they are not automatically copied when creating the partitioned table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/partitioning-an-existing-table-with-same-name-VEnbzK.mdx#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Resizable Handle in React\nDESCRIPTION: Example showing how to customize the resizable handle using the withHandle prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/resizable.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'\n\nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"horizontal\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Session Timeout Value\nDESCRIPTION: Query to display the current statement timeout setting for the session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW statement_timeout;\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependencies with Gradle Groovy\nDESCRIPTION: Shows how to add Supabase module dependencies using Gradle Groovy build system. Uses BOM for version management and includes core modules.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation platform(\"io.github.jan-tennert.supabase:bom:VERSION\")\nimplementation 'io.github.jan-tennert.supabase:postgrest-kt'\nimplementation 'io.github.jan-tennert.supabase:gotrue-kt'\nimplementation 'io.github.jan-tennert.supabase:realtime-kt'\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Table Component with React\nDESCRIPTION: Core implementation of a data table component with sorting, filtering, pagination, and row selection functionality using React and useReactTable hook.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table />\n      </div>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Production Authentication URLs\nDESCRIPTION: Configuration for authentication site URLs in production\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nSUPABASE_AUTH_SITE_URL=https://<your-app-url>.vercel.app/\nSUPABASE_AUTH_ADDITIONAL_REDIRECT_URLS=https://<your-app-url>.vercel.app/**\n```\n\n----------------------------------------\n\nTITLE: Deploying Oak Server Functions\nDESCRIPTION: Command to deploy Oak server functions to Supabase without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/oak-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy oak-server --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Component for Vector Search in React\nDESCRIPTION: This React component sets up the web worker, handles communication with the worker, and performs the vector search. It manages state for input, search results, and model loading status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDB, initSchema, countRows, seedDb, search } from './utils/db'\nimport { useState, useEffect, useRef, useCallback } from 'react'\n\nexport default function App() {\n  // Keep track of the classification result and the model loading status.\n  const [input, setInput] = useState('')\n  const [content, setContent] = useState([])\n  const [result, setResult] = useState(null)\n  const [ready, setReady] = useState(null)\n  const initailizing = useRef(false)\n\n  // [...]\n\n  // We use the `useEffect` hook to set up the worker as soon as the `App` component is mounted.\n  useEffect(() => {\n    if (!worker.current) {\n      // Create the worker if it does not yet exist.\n      worker.current = new Worker(new URL('./worker.js', import.meta.url), {\n        type: 'module',\n      })\n    }\n\n    // Create a callback function for messages from the worker thread.\n    const onMessageReceived = async (e) => {\n      switch (e.data.status) {\n        case 'initiate':\n          setReady(false)\n          break\n        case 'ready':\n          setReady(true)\n          break\n        case 'complete':\n          // Inner product search\n          const searchResults = await search(db.current, e.data.embedding)\n          console.log({ searchResults })\n          setResult(searchResults.map((x) => x.content))\n          break\n      }\n    }\n\n    // Attach the callback function as an event listener.\n    worker.current.addEventListener('message', onMessageReceived)\n\n    // Define a cleanup function for when the component is unmounted.\n    return () => worker.current.removeEventListener('message', onMessageReceived)\n  })\n\n  const classify = useCallback((text) => {\n    if (worker.current) {\n      worker.current.postMessage({ text })\n    }\n  }, [])\n\n  // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Products Table in SQL with Supabase\nDESCRIPTION: Creates a public products table with UUID primary key, name, price, and optional image fields. Uses PostgreSQL default tablespace.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/product_management_sql_template.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table\n  public.products (\n    id uuid not null default gen_random_uuid (),\n    name text not null,\n    price real not null,\n    image text null,\n    constraint products_pkey primary key (id)\n  ) tablespace pg_default;\n```\n\n----------------------------------------\n\nTITLE: Query Result Format in Python\nDESCRIPTION: Shows the format of results returned by the query method, which includes the record ID, distance measure value, and metadata as a tuple.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n[(\"vec1\", 0.000697, {\"year\": 1973})]\n```\n\n----------------------------------------\n\nTITLE: Defining Message Data Model for Flutter Chat App\nDESCRIPTION: This snippet defines a Message class that represents a chat message in the application. It includes properties for message ID, sender's profile ID, content, timestamp, and a flag indicating if the message is from the current user. It also has a factory constructor to create instances from map data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass Message {\n  Message({\n    required this.id,\n    required this.profileId,\n    required this.content,\n    required this.createdAt,\n    required this.isMine,\n  });\n\n  /// ID of the message\n  final String id;\n\n  /// ID of the user who posted the message\n  final String profileId;\n\n  /// Text content of the message\n  final String content;\n\n  /// Date and time when the message was created\n  final DateTime createdAt;\n\n  /// Whether the message is sent by the user or not.\n  final bool isMine;\n\n  Message.fromMap({\n    required Map<String, dynamic> map,\n    required String myUserId,\n  })  : id = map['id'],\n        profileId = map['profile_id'],\n        content = map['content'],\n        createdAt = DateTime.parse(map['created_at']),\n        isMine = myUserId == map['profile_id'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions in PostgREST 12\nDESCRIPTION: Demonstrates the usage of the new aggregate functions feature in PostgREST 12. The examples show how to use the count() function and how to combine it with grouping.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-postgrest-12.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://postgrest/blog_post?select=id.count()'\n\n[\n  {\n    \"count\": 51,\n  }\n]\n\n$ curl 'http://postgrest/blog_post?select=title,id.count()'\n\n[\n  {\n    \"title\": \"Supabase Blog\",\n    \"count\": 40\n  },\n  {\n    \"title\": \"Contributors Blog\",\n    \"count\": 11\n  },\n  ...\n```\n\n----------------------------------------\n\nTITLE: Displaying JWT Structure with MFA Claims in JSX\nDESCRIPTION: Example of a JWT payload containing MFA-related claims. The JWT includes 'aal' (Authenticator Assurance Level) and 'amr' (Authenticator Method Reference) claims which indicate the authentication methods used and their timestamps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  \"sub\": \"8802c1d6-c555-46e3-aacd-b61198b058d9\",\n  \"email\": \"j0@supacats.io\",\n  \"aud\": \"authenticated\",\n  \"exp\": 1670929371,\n  \"aal\": \"aal2\",\n  \"amr\": [\n    {\n      \"method\": \"password\",\n      \"timestamp\": 1670924394\n    },\n    {\n      \"method\": \"totp\",\n      \"timestamp\": 1670925771\n    }\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Schema Validation with Check Constraints\nDESCRIPTION: Example showing how to use pg_jsonschema with a table definition that includes a check constraint. The constraint ensures that JSON data in the metadata column conforms to a specified schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_jsonschema.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table customer(\n    id serial primary key,\n    ...\n    metadata json,\n\n    check (\n        json_matches_schema(\n            '{\n                \"type\": \"object\",\n                \"properties\": {\n                    \"tags\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"maxLength\": 16\n                        }\n                    }\n                }\n            }',\n            metadata\n        )\n    )\n);\n\n-- Example: Valid Payload\ninsert into customer(metadata)\nvalues ('{\"tags\": [\"vip\", \"darkmode-ui\"]}');\n-- Result:\n--   INSERT 0 1\n\n-- Example: Invalid Payload\ninsert into customer(metadata)\nvalues ('{\"tags\": [1, 3]}');\n-- Result:\n--   ERROR:  new row for relation \"customer\" violates check constraint \"customer_metadata_check\"\n--   DETAIL:  Failing row contains (2, {\"tags\": [1, 3]}).\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI switch dependency using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/switch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-switch\n```\n\n----------------------------------------\n\nTITLE: Astro OAuth Callback Handler\nDESCRIPTION: Implementation of OAuth callback handling in Astro, including cookie management and code exchange.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient, parseCookieHeader } from '@supabase/ssr'\nimport { type APIRoute } from 'astro'\n\nexport const GET: APIRoute = async ({ request, cookies, redirect }) => {\n  const requestUrl = new URL(request.url)\n  const code = requestUrl.searchParams.get('code')\n  const next = requestUrl.searchParams.get('next') || '/'\n\n  if (code) {\n    const supabase = createServerClient(\n      import.meta.env.PUBLIC_SUPABASE_URL,\n      import.meta.env.PUBLIC_SUPABASE_ANON_KEY,\n      {\n        cookies: {\n          getAll() {\n            return parseCookieHeader(Astro.request.headers.get('Cookie') ?? '')\n          },\n          setAll(cookiesToSet) {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              Astro.cookies.set(name, value, options)\n            )\n          },\n        },\n      }\n    )\n\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n\n    if (!error) {\n      return redirect(next)\n    }\n  }\n\n  // return the user to an error page with instructions\n  return redirect('/auth/auth-code-error')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Presence Key in JavaScript\nDESCRIPTION: This snippet illustrates how to set a custom presence key when creating a channel in JavaScript.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('SUPABASE_URL', 'SUPABASE_ANON_KEY')\n\nconst channelC = supabase.channel('test', {\n  config: {\n    presence: {\n      key: 'userId-123',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Function Errors with Type Checking in TypeScript\nDESCRIPTION: Shows how to use the new error types for Edge Functions in supabase-js v2 to handle different error scenarios with type checking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FunctionsHttpError, FunctionsRelayError, FunctionsFetchError } from '@supabase/supabase-js'\n\nconst { data: user, error } = await supabase.functions.invoke('hello')\n\nif (error instanceof FunctionsHttpError) {\n  console.log('Function returned an error', error.message)\n} else if (error instanceof FunctionsRelayError) {\n  console.log('Relay error:', error.message)\n} else if (error instanceof FunctionsFetchError) {\n  console.log('Fetch error:', error.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Account Management Component\nDESCRIPTION: SolidJS component that allows authenticated users to view and edit their profile information, including username, website, and avatar URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthSession } from '@supabase/supabase-js'\nimport { Component, createEffect, createSignal } from 'solid-js'\nimport { supabase } from './supabaseClient'\n\ninterface Props {\n  session: AuthSession\n}\n\nconst Account: Component<Props> = ({ session }) => {\n  const [loading, setLoading] = createSignal(true)\n  const [username, setUsername] = createSignal<string | null>(null)\n  const [website, setWebsite] = createSignal<string | null>(null)\n  const [avatarUrl, setAvatarUrl] = createSignal<string | null>(null)\n\n  createEffect(() => {\n    getProfile()\n  })\n\n  const getProfile = async () => {\n    try {\n      setLoading(true)\n      const { user } = session\n\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', user.id)\n        .single()\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateProfile = async (e: Event) => {\n    e.preventDefault()\n\n    try {\n      setLoading(true)\n      const { user } = session\n\n      const updates = {\n        id: user.id,\n        username: username(),\n        website: website(),\n        avatar_url: avatarUrl(),\n        updated_at: new Date().toISOString(),\n      }\n\n      const { error } = await supabase.from('profiles').upsert(updates)\n\n      if (error) {\n        throw error\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div aria-live=\"polite\">\n      <form onSubmit={updateProfile} class=\"form-widget\">\n        <div>Email: {session.user.email}</div>\n        <div>\n          <label for=\"username\">Name</label>\n          <input\n            id=\"username\"\n            type=\"text\"\n            value={username() || ''}\n            onChange={(e) => setUsername(e.currentTarget.value)}\n          />\n        </div>\n        <div>\n          <label for=\"website\">Website</label>\n          <input\n            id=\"website\"\n            type=\"text\"\n            value={website() || ''}\n            onChange={(e) => setWebsite(e.currentTarget.value)}\n          />\n        </div>\n        <div>\n          <button type=\"submit\" class=\"button primary block\" disabled={loading()}>\n            {loading() ? 'Saving ...' : 'Update profile'}\n          </button>\n        </div>\n        <button type=\"button\" class=\"button block\" onClick={() => supabase.auth.signOut()}>\n          Sign Out\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default Account\n```\n\n----------------------------------------\n\nTITLE: Performing Inner Joins in PostgREST\nDESCRIPTION: Demonstrates how to perform inner joins by filtering rows where the related table is not null. This can be used to find records that have corresponding entries in related tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /films?select=title,nominations(rank,...competitions(name))&nominations=not.is.null\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('films')\n  .select(\n    `\n    title,\n    nominations(rank,...competitions(name))\n  `\n  )\n  .not('nominations', 'is', null)\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Pulp Fiction\"\n    \"nominations\": [\n      {\"rank\": 1, \"name\": \"Palme d'Or\"},\n      {\"rank\": 1, \"name\": \"BAFTA Film Award\"},\n      {\"...\"}\n    ]\n  },\n  \"...\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Account Page with Server-Side Authentication in Next.js\nDESCRIPTION: A Next.js page component that uses server-side Supabase client to fetch the authenticated user and renders the AccountForm component. This demonstrates fetching user data on the server before passing it to client components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport AccountForm from './account-form'\nimport { createClient } from '@/utils/supabase/server'\n\nexport default async function Account() {\n  const supabase = await createClient()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  return <AccountForm user={user} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Edge Function for OpenAI Integration\nDESCRIPTION: This command scaffolds a new edge function named 'openai' using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions new openai\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables\nDESCRIPTION: Command to verify critical Grafana environment variables within the container.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/grafana-not-displaying-data-sXJrMj.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nprintenv | egrep 'GRAFANA_PASSWORD|SUPABASE_PROJECT_REF|SUPABASE_SERVICE_ROLE_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Login Page with Reactive Forms\nDESCRIPTION: HTML template for the login page that includes a reactive form with email and password inputs, validation error messages, and buttons for various authentication methods including magic link, password reset, and registration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-title>Supa Chat</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content scrollY=\"false\">\n  <ion-card>\n    <ion-card-content>\n      <form (ngSubmit)=\"login()\" [formGroup]=\"credentials\">\n        <ion-item>\n          <ion-label position=\"stacked\">Your Email</ion-label>\n          <ion-input\n            type=\"email\"\n            inputmode=\"email\"\n            placeholder=\"Email\"\n            formControlName=\"email\"\n          ></ion-input>\n          <ion-note slot=\"error\" *ngIf=\"(email.dirty || email.touched) && email.errors\"\n            >Please insert your email</ion-note\n          >\n        </ion-item>\n        <ion-item>\n          <ion-label position=\"stacked\">Password</ion-label>\n          <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n          <ion-note slot=\"error\" *ngIf=\"(password.dirty || password.touched) && password.errors\"\n            >Please insert your password</ion-note\n          >\n        </ion-item>\n        <ion-button type=\"submit\" expand=\"block\" strong=\"true\" [disabled]=\"!credentials.valid\"\n          >Sign in</ion-button\n        >\n\n        <div class=\"ion-margin-top\">\n          <ion-button\n            type=\"button\"\n            expand=\"block\"\n            color=\"primary\"\n            fill=\"outline\"\n            routerLink=\"register\"\n          >\n            <ion-icon name=\"person-outline\" slot=\"start\"></ion-icon>\n            Create Account\n          </ion-button>\n\n          <ion-button type=\"button\" expand=\"block\" color=\"secondary\" (click)=\"forgotPw()\">\n            <ion-icon name=\"key-outline\" slot=\"start\"></ion-icon>\n            Forgot password?\n          </ion-button>\n\n          <ion-button type=\"button\" expand=\"block\" color=\"tertiary\" (click)=\"getMagicLink()\">\n            <ion-icon name=\"mail-outline\" slot=\"start\"></ion-icon>\n            Get a Magic Link\n          </ion-button>\n          <ion-button type=\"button\" expand=\"block\" color=\"warning\" routerLink=\"groups\">\n            <ion-icon name=\"arrow-forward\" slot=\"start\"></ion-icon>\n            Start without account\n          </ion-button>\n        </div>\n      </form>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Response from Cloudflare Worker\nDESCRIPTION: JavaScript code to create a Response object with JSON data in a Cloudflare Worker. It stringifies the data and sets the appropriate Content-Type header to application/json.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn new Response(JSON.stringify(data), {\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating AST for GraphQL Query in Rust\nDESCRIPTION: This code snippet shows the Abstract Syntax Tree (AST) generated by the parser for a sample GraphQL query. It demonstrates the structure of the AST using Rust structs and enums.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nDocument {\n  definitions: [Operation(Query(Query {\n    name: None,\n    variable_definitions: [],\n    directives: [],\n    selection_set: SelectionSet {\n      items: [Field(Field {\n        alias: None,\n        name: \"bookCollection\",\n        arguments: [],\n        directives: [],\n        selection_set: SelectionSet {\n          items: [Field(Field {\n            alias: None,\n            name: \"edges\",\n            arguments: [],\n            directives: [],\n            selection_set: SelectionSet {\n              items: [Field(Field {\n                alias: None,\n                name: \"node\",\n                arguments: [],\n                directives: [],\n                selection_set: SelectionSet {\n                  items: [Field(Field {\n                    alias: None,\n                    name: \"id\",\n                    arguments: [],\n                    directives: [],\n                    selection_set: SelectionSet { items: [] },\n                  })],\n                },\n              })],\n            },\n          })],\n        },\n      })],\n    },\n  }))],\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized RLS Policy Implementation\nDESCRIPTION: Performance-optimized examples of RLS policies using recommended practices\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Users can access records belonging to their teams\" on test_table\nto authenticated\nusing (\n  team_id in (\n    select team_id\n    from team_user\n    where user_id = (select auth.uid())\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying the Cloudflare Turnstile Edge Function\nDESCRIPTION: Commands to deploy the Cloudflare Turnstile validation function to Supabase and set the required secret key environment variable for Cloudflare authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy cloudflare-turnstile\nsupabase secrets set CLOUDFLARE_SECRET_KEY=your_secret_key\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Parent Table with Limit in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates how to insert a subset of data from the original table into the new partitioned table. The ORDER BY and LIMIT clauses are used to control the amount of data inserted for testing purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/partitioning-an-existing-table-with-same-name-VEnbzK.mdx#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nORDER BY id LIMIT <number>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Optimization in JavaScript\nDESCRIPTION: This snippet demonstrates how to disable automatic image optimization and request the original format using the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nawait supabase.storage.from('bucket').download('image.jpeg', {\n  transform: {\n    width: 200,\n    height: 200,\n    format: 'origin',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Subdomain using Supabase CLI\nDESCRIPTION: This command removes a custom subdomain from a Supabase project using the CLI. It requires the project reference and uses the --experimental flag.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsupabase vanity-subdomains delete --project-ref abcdefghijklmnopqrst --experimental\n```\n\n----------------------------------------\n\nTITLE: Inserting Embeddings into PostgreSQL\nDESCRIPTION: Uploads the generated embeddings and metadata into the PostgreSQL database.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreviews.upsert(records)\n```\n\n----------------------------------------\n\nTITLE: Importing Resizable Components in React\nDESCRIPTION: Code snippet showing how to import the Resizable components in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/resizable.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Signup with Swift\nDESCRIPTION: Swift code snippet for signing up a new user with email and password authentication in Supabase. This example includes an optional redirect URL parameter for after email confirmation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await supabase.auth.signUp(\n  email: \"valid.email@supabase.io\",\n  password: \"example-password\",\n  redirectTo: URL(string: \"https://example.com/welcome\")\n)\n```\n\n----------------------------------------\n\nTITLE: Example Usage - Supabase RPC Call\nDESCRIPTION: Example of executing a Postgres function through the Edge Function using Supabase client\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT edge.exec(\n  $js$\n  const { data, error } = await supabase.rpc('postgres_function', {'foo': 'bar'});\n  if (error) {\n    return new Response(JSON.stringify({ error: \"An error occurred ->\" + error.message }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n  return data;\n  $js$\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Menu Implementation\nDESCRIPTION: Basic example showing how to structure a navigation menu with a single item and link.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuList>\n    <NavigationMenuItem>\n      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n      <NavigationMenuContent>\n        <NavigationMenuLink>Link</NavigationMenuLink>\n      </NavigationMenuContent>\n    </NavigationMenuItem>\n  </NavigationMenuList>\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables\nDESCRIPTION: Environment variable configuration for Supabase URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nEXPO_PUBLIC_SUPABASE_URL=\nEXPO_PUBLIC_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Current User Avatar in React\nDESCRIPTION: This snippet demonstrates how to import and use the `CurrentUserAvatar` component within a React functional component. It sets up a simple demonstration layout that includes the user's avatar in a header.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/current-user-avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CurrentUserAvatar } from '@/components/current-user-avatar'\n\nconst CurrentUserAvatarDemo = () => {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <CurrentUserAvatar />\n    </Header>\n  )\n}\n\nexport default CurrentUserAvatarDemo\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Posts with Links in Server Component\nDESCRIPTION: Enhanced Server Component that fetches specific columns from Supabase posts table and renders links to individual post pages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\nimport supabase from '../../utils/supabase'\n\nexport default async function Posts() {\n  const { data: posts } = await supabase.from('posts').select('id, title')\n\n  if (!posts) {\n    return <p>No posts found.</p>\n  }\n\n  return posts.map((post) => (\n    <p key={post.id}>\n      <Link href={`/static/${post.id}`}>{post.title}</Link>\n    </p>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Quality with Supabase Storage in Python\nDESCRIPTION: This snippet shows how to download an image from Supabase Storage with a quality transformation of 50% using the Python client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nresponse = supabase.storage.from_('bucket').download(\n  'image.jpg',\n  {\n    'transform': {\n      'quality': 50,\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Loading Skeleton for Sidebar Menu\nDESCRIPTION: Implements a skeleton loading state for sidebar menu items, showing placeholders while actual data is being fetched.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NavProjectsSkeleton() {\n  return (\n    <SidebarMenu>\n      {Array.from({ length: 5 }).map((_, index) => (\n        <SidebarMenuItem key={index}>\n          <SidebarMenuSkeleton showIcon />\n        </SidebarMenuItem>\n      ))}\n    </SidebarMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Link to Supabase Project (CLI)\nDESCRIPTION: This command links the local Supabase project to a remote Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link\n```\n\n----------------------------------------\n\nTITLE: Listing Supabase Projects\nDESCRIPTION: Command to retrieve a list of Supabase projects and their IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase projects list\n```\n\n----------------------------------------\n\nTITLE: Starting Rails Server\nDESCRIPTION: Command to start the Rails development server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails server\n```\n\n----------------------------------------\n\nTITLE: Obtaining Kakao ID Token via OAuth Flow\nDESCRIPTION: Example of exchanging authorization code for an ID token using Kakao's OAuth API, demonstrating the token retrieval process\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst requestUrl = new URL(request.url);\nconst code = requestUrl.searchParams.get('code');\n\nif (code) {\n  const res = await fetch('https://kauth.kakao.com/oauth/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\n    },\n    body: new URLSearchParams({\n      grant_type: 'authorization_code',\n      client_id: '<CLIENT_ID>',\n      redirect_uri: '<url>/api/auth/kakao/oidc',\n      code,\n      client_secret: '<CLIENT_SECRET>',\n    }),\n  });\n\n  const {id_token} = await res.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Python Project with Poetry\nDESCRIPTION: Command to create a new Python project structure using Poetry named 'aws_bedrock_image_search'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry new aws_bedrock_image_search\n```\n\n----------------------------------------\n\nTITLE: Querying Storage Egress Requests in Supabase Logs Explorer\nDESCRIPTION: This SQL query retrieves the number of GET requests for each object in the Supabase storage, helping to identify frequently accessed files for bandwidth calculation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/bandwidth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  r.method as http_verb,\n  r.path as filepath,\n  count(*) as num_requests\nfrom\n  edge_logs\n  cross join unnest(metadata) as m\n  cross join unnest(m.request) as r\n  cross join unnest(r.headers) as h\nwhere (path like '%storage/v1/object/%' or path like '%storage/v1/render/%') and r.method = 'GET'\ngroup by r.path, r.method\norder by num_requests desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Next.js shadcn/ui Installation Setup\nDESCRIPTION: Provides a framework-specific setup card for installing shadcn/ui in a Next.js project with an SVG icon and link to official documentation\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/getting-started/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkedCard target=\"_blank\" href=\"https://ui.shadcn.com/docs/installation/next\">\n  <svg\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"w-10 h-10\"\n    fill=\"currentColor\"\n  >\n    <title>Next.js</title>\n    <path d=\"M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z\" />\n  </svg>\n  <p className=\"font-medium mt-2\">Next.js</p>\n</LinkedCard>\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadcast for Real-time Cursor Position Sharing in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Supabase Realtime's Broadcast feature to send and receive mouse cursor positions in real-time. It shows how to subscribe to a channel, listen for broadcast events, and send cursor position updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-18-supabase-realtime-multiplayer-general-availability.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase.channel('room_1')\nconst MOUSE_EVENT = 'cursor'\n\n// Subscribe to mouse events.\n// Our second parameter filters only for mouse events.\nchannel\n  .on('broadcast', { event: MOUSE_EVENT }, (event) => {\n    receivedCursorPosition(event)\n  })\n  .subscribe()\n\n// Handle a mouse event.\nconst receivedCursorPosition = ({ event, payload }) => {\n  console.log(`\n\t\tUser: ${payload.userId}\n\t\tx Position: ${payload.x}\n\t\ty Position: ${payload.y}\n\t`)\n}\n\n// Helper function for sending our own mouse position.\nconst sendMousePosition = (channel, userId, x, y) => {\n  return channel.send({\n    type: 'broadcast',\n    event: MOUSE_EVENT,\n    payload: { userId, x, y },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client and Fetching Data in Swift\nDESCRIPTION: This snippet demonstrates how to initialize a Supabase client in Swift and use it to fetch data from a 'countries' table. It shows the basic pattern for connecting to Supabase and executing a query that returns typed results.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-swift.mdx#2025-04-21_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet url = URL(string: \"...\")!\nlet anonKey = \"public-anon-key\"\nlet client = SupabaseClient(supabaseURL: url, supabaseKey: anonKey)\n\nstruct Country: Decodable {\n  let id: Int\n  let name: String\n}\n\nlet countries: [Country] = try await supabase.from(\"countries\")\n  .select()\n  .execute()\n  .value\n```\n\n----------------------------------------\n\nTITLE: Querying Basic Function in GraphQL\nDESCRIPTION: A simple GraphQL query that calls the addNums function with parameters a=2 and b=3.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  addNums(a: 2, b: 3)\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Database in Python\nDESCRIPTION: Demonstrates how to properly disconnect from the Postgres database when finished with operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvx.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Granting Read-Only Access in PostgreSQL 14\nDESCRIPTION: Demonstrates how to grant read-only access to a user using the new pg_read_all_data role in PostgreSQL 14. This simplifies the process of setting up read-only users for scenarios like demos or restricted access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ngrant pg_read_all_data to bobfries;\n```\n\n----------------------------------------\n\nTITLE: Creating a new Supabase Edge Function for Cloudflare Turnstile\nDESCRIPTION: Command to create a new Supabase Edge Function named 'cloudflare-turnstile' that will handle the CAPTCHA validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new cloudflare-turnstile\n```\n\n----------------------------------------\n\nTITLE: Initializing CanvasPage State and Supabase Realtime in Dart\nDESCRIPTION: Sets up the initial state, generates a user ID, configures Supabase Realtime listener, and loads initial canvas data from the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass _CanvasPageState extends State<CanvasPage> {\n  // ...\n\n  @override\n  void initState() {\n    super.initState();\n    _initialize();\n  }\n\n  Future<void> _initialize() async {\n    _myId = const Uuid().v4();\n\n    _canvasChanel = supabase\n        .channel(Constants.channelName)\n        .onBroadcast(\n            event: Constants.broadcastEventName,\n            callback: (payload) {\n              final cursor = UserCursor.fromJson(payload['cursor']);\n              _userCursors[cursor.id] = cursor;\n\n              if (payload['object'] != null) {\n                final object = CanvasObject.fromJson(payload['object']);\n                _canvasObjects[object.id] = object;\n              }\n              setState(() {});\n            })\n        .subscribe();\n\n    final initialData = await supabase\n        .from('canvas_objects')\n        .select()\n        .order('created_at', ascending: true);\n    for (final canvasObjectData in initialData) {\n      final canvasObject = CanvasObject.fromJson(canvasObjectData['object']);\n      _canvasObjects[canvasObject.id] = canvasObject;\n    }\n    setState(() {});\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Supabase Branching Setup\nDESCRIPTION: Structured markdown documentation that details the process of enabling Supabase branching, including GitHub integration setup, production branch configuration, and pull request workflow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Enable Supabase branching\n\nOnce your repository is [correctly prepared](#preparing-your-git-repository), you can enable branching from the Supabase dashboard.\n\n<Admonition type=\"caution\" label=\"Prepare your GitHub repository before enabling Branching\">\n\nIf your repository doesn't have all the migration files, your production branch could run an incomplete set of migrations. Make sure your [GitHub repository is prepared](#preparing-your-git-repository).\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Component with Supabase Authentication in RedwoodJS\nDESCRIPTION: Complete implementation of the Account component that handles user profile management. It uses Supabase client via RedwoodJS's useAuth hook to fetch and update user profile data in the profiles table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react'\nimport { useAuth } from '@redwoodjs/auth'\n\nconst Account = () => {\n  const { client: supabase, currentUser, logOut } = useAuth()\n  const [loading, setLoading] = useState(true)\n  const [username, setUsername] = useState(null)\n  const [website, setWebsite] = useState(null)\n  const [avatar_url, setAvatarUrl] = useState(null)\n\n  useEffect(() => {\n    getProfile()\n  }, [supabase.auth.session])\n\n  async function getProfile() {\n    try {\n      setLoading(true)\n      const user = supabase.auth.user()\n\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', user.id)\n        .single()\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function updateProfile({ username, website, avatar_url }) {\n    try {\n      setLoading(true)\n      const user = supabase.auth.user()\n\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date(),\n      }\n\n      const { error } = await supabase.from('profiles').upsert(updates, {\n        returning: 'minimal', // Don't return the value after inserting\n      })\n\n      if (error) {\n        throw error\n      }\n\n      alert('Updated profile!')\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"row flex-center flex\">\n      <div className=\"col-6 form-widget\">\n        <h1 className=\"header\">Supabase + RedwoodJS</h1>\n        <p className=\"description\">Your profile</p>\n        <div className=\"form-widget\">\n          <div>\n            <label htmlFor=\"email\">Email</label>\n            <input id=\"email\" type=\"text\" value={currentUser.email} disabled />\n          </div>\n          <div>\n            <label htmlFor=\"username\">Name</label>\n            <input\n              id=\"username\"\n              type=\"text\"\n              value={username || ''}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"website\">Website</label>\n            <input\n              id=\"website\"\n              type=\"url\"\n              value={website || ''}\n              onChange={(e) => setWebsite(e.target.value)}\n            />\n          </div>\n\n          <div>\n            <button\n              className=\"button primary block\"\n              onClick={() => updateProfile({ username, website, avatar_url })}\n              disabled={loading}\n            >\n              {loading ? 'Loading ...' : 'Update'}\n            </button>\n          </div>\n\n          <div>\n            <button className=\"button block\" onClick={() => logOut()}>\n              Sign Out\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Account\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Setting Database Connection\nDESCRIPTION: Python code for importing required libraries and setting up the database connection string for Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport boto3\nimport vecs\nimport json\nimport base64\nfrom matplotlib import pyplot as plt\nfrom matplotlib import image as mpimg\nfrom typing import Optional\n\nDB_CONNECTION = \"postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Chart Data\nDESCRIPTION: Example data structure for a chart showing desktop and mobile users by month. This demonstrates the format expected by Recharts components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartData = [\n  { month: 'January', desktop: 186, mobile: 80 },\n  { month: 'February', desktop: 305, mobile: 200 },\n  { month: 'March', desktop: 237, mobile: 120 },\n  { month: 'April', desktop: 73, mobile: 190 },\n  { month: 'May', desktop: 209, mobile: 130 },\n  { month: 'June', desktop: 214, mobile: 140 },\n]\n```\n\n----------------------------------------\n\nTITLE: Querying pg_repack version in Postgres SQL\nDESCRIPTION: This SQL query checks the default version of pg_repack available in the Postgres database. It's used to verify if pg_repack is installed and if the version supports non-superuser repacking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_repack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect default_version\nfrom pg_available_extensions\nwhere name = 'pg_repack';\n```\n\n----------------------------------------\n\nTITLE: Defining Slack App Manifest in YAML\nDESCRIPTION: YAML configuration for the Slack app, specifying display information, OAuth scopes, and other settings required for the consolidation bot.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay_information:\nname: SlackConsolidate\nfeatures:\nbot_user:\ndisplay_name: SlackConsolidate\nalways_online: false\noauth_config:\nscopes:\nuser:\n  - channels:history\n  - channels:read\n  - channels:write\n  - chat:write\n  - links:read\n  - users:read\n  - groups:history\n  - groups:read\n  - mpim:history\n  - im:history\nbot:\n  - channels:history\n  - channels:read\n  - links:read\n  - chat:write.public\n  - chat:write\n  - channels:join\nsettings:\norg_deploy_enabled: false\nsocket_mode_enabled: false\ntoken_rotation_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Client Library\nDESCRIPTION: Command to navigate to the SvelteKit app directory and install the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app && npm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Handling SQL Syntax Errors in Postgres Language Server\nDESCRIPTION: Example of SQL code with syntax errors that the Postgres Language Server should handle gracefully, continuing to parse and identify multiple errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table posts (\n  id serial primary key # <- ERR: missing comma, Parser should continue\n  content text\n);\n\ncreate table comments (\n  id serial primary key,\n  post_id int references posts # <- ERR: missing comma, second error returned\n  comment text\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI Popover dependency using npm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/popover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-popover\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Component with Magic Link\nDESCRIPTION: SolidJS component that handles user authentication with magic link email sign-in functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal } from 'solid-js'\nimport { supabase } from './supabaseClient'\n\nexport default function Auth() {\n  const [loading, setLoading] = createSignal(false)\n  const [email, setEmail] = createSignal('')\n\n  const handleLogin = async (e: SubmitEvent) => {\n    e.preventDefault()\n\n    try {\n      setLoading(true)\n      const { error } = await supabase.auth.signInWithOtp({ email: email() })\n      if (error) throw error\n      alert('Check your email for the login link!')\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div class=\"row flex-center flex\">\n      <div class=\"col-6 form-widget\" aria-live=\"polite\">\n        <h1 class=\"header\">Supabase + SolidJS</h1>\n        <p class=\"description\">Sign in via magic link with your email below</p>\n        <form class=\"form-widget\" onSubmit={handleLogin}>\n          <div>\n            <label for=\"email\">Email</label>\n            <input\n              id=\"email\"\n              class=\"inputField\"\n              type=\"email\"\n              placeholder=\"Your email\"\n              value={email()}\n              onChange={(e) => setEmail(e.currentTarget.value)}\n            />\n          </div>\n          <div>\n            <button type=\"submit\" class=\"button block\" aria-live=\"polite\">\n              {loading() ? <span>Loading</span> : <span>Send magic link</span>}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Auth Helpers for Next.js\nDESCRIPTION: Command to install the next version of Supabase auth helpers package for Next.js implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/auth-helpers-nextjs@next\n```\n\n----------------------------------------\n\nTITLE: Pulling a specific schema from Supabase\nDESCRIPTION: This command synchronizes your local database with a specific schema from your Supabase project by using the --schema option followed by the schema name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db pull --schema <schema_name>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: These commands start the Next.js development server using either npm or yarn package managers.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-nextjs-13/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Debugging Function for HTTP Requests\nDESCRIPTION: Example of creating a PostgreSQL function that logs and returns row data for debugging purposes when making HTTP requests with pg_net.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function debugging_example (row_id int)\nreturns jsonb as $$\ndeclare\n    -- Store payload data\n    row_data_var jsonb;\nbegin\n    -- Retrieve row data and convert to JSON\n    select to_jsonb(\"<example_table>\".*) into row_data_var\n    from \"<example_table>\"\n    where \"<example_table>\".id = row_id;\n\n    -- Initiate HTTP POST request to URL\n    perform\n        net.http_post(\n            url := 'https://postman-echo.com/post',\n            -- Use row data as payload\n            body := row_data_var\n        ) as request_id;\n\n    -- Optionally Log row data or other data for inspection in Supabase Dashboard's Postgres Logs\n    raise log 'Logging an entire row as JSON (%)', row_data_var;\n\n    -- return row data to inspect\n    return row_data_var;\n\n-- Handle exceptions here if needed\nexception\n    when others then\n        raise exception 'An error occurred: %', SQLERRM;\nend;\n$$ language plpgsql;\n\n-- calling function\nselect debugging_example(<row_id>);\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Type for Sensor Readings in PostgreSQL\nDESCRIPTION: Creates an enum data type to capture low, medium, and high sensor reading levels. This is part of the setup for demonstrating the new multi-range functionality in PostgreSQL 14.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate type valid_levels as enum (\n  'low', 'medium', 'high'\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Image Search\nDESCRIPTION: Example command for performing an image search using a text query.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/aws_bedrock_image_search/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run search \"bike in front of red brick wall\"\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Transformed Image in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Supabase JavaScript client to get a public URL for a transformed image, specifying width and height.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\nsupabase.storage.from('bucket').getPublicUrl('image.jpg', {\n  transform: {\n    width: 500,\n    height: 600,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Object Base Class in Dart\nDESCRIPTION: Abstract base class for canvas shapes with common properties and methods for intersection detection and movement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CanvasObject extends SyncedObject {\n  final Color color;\n\n  CanvasObject({\n    required super.id,\n    required this.color,\n  });\n\n  factory CanvasObject.fromJson(Map<String, dynamic> json) {\n    if (json['object_type'] == CanvasCircle.type) {\n      return CanvasCircle.fromJson(json);\n    } else if (json['object_type'] == CanvasRectangle.type) {\n      return CanvasRectangle.fromJson(json);\n    } else {\n      throw UnimplementedError('Unknown object_type: ${json['object_type']}');\n    }\n  }\n\n  bool intersectsWith(Offset point);\n\n  CanvasObject copyWith();\n\n  CanvasObject move(Offset delta);\n}\n```\n\n----------------------------------------\n\nTITLE: Using IP Denylist Feature from pg_headerkit Extension in PostgreSQL\nDESCRIPTION: Shows how to use the IP denylisting functionality from the burggraf-pg_headerkit extension. This example demonstrates using the in_deny_list() function in a WHERE clause to filter out requests from blocked IP addresses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom app.memos\nwhere not hdr.in_deny_list();\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase in Next.js\nDESCRIPTION: This snippet provides environment variable configuration necessary for connecting a Next.js application to Supabase. Ensure that 'NEXT_PUBLIC_SUPABASE_URL' and 'NEXT_PUBLIC_SUPABASE_ANON_KEY' are correctly set in the '.env' file. These values can be found in the Supabase dashboard or obtained by running specific Supabase CLI commands. The environment variables are essential for API communication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Creating a Set-Returning Function with plv8\nDESCRIPTION: Example of a set-returning function that queries and returns multiple rows from a table. The function executes a SQL query and returns the complete result set.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function get_messages()\nreturns setof messages as $$\n\n    var json_result = plv8.execute(\n        'select * from messages'\n    );\n\n    return json_result;\n$$ language plv8;\n\nselect * from get_messages();\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Blog Post\nDESCRIPTION: YAML configuration metadata for the blog post including title, description, author, image paths, categories, and tags\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-15-log-drains.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Introducing Log Drains\ndescription: Log Drains for exporting product logs is now available under Public Alpha\nauthor: ziinc\nimage: lw12/day-4/log-drains-og.png\nthumb: lw12/day-4/log-drains-thumb.png\nlaunchweek: '12'\ncategories:\n  - launch-week\n  - developers\n  - platform\ntags:\n  - launch-week\n  - o11y\n  - logging\ndate: '2024-08-15'\ntoc_depth: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Resetting Password for Email in v0 vs v1\nDESCRIPTION: Demonstrates the change in the method for resetting a password for an email. In v1, the method name and parameter structure have changed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.api.resetPasswordForEmail(\n  email,\n  options:\n      AuthOptions(redirectTo: 'io.supabase.flutter://reset-callback/'),\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.resetPasswordForEmail(\n  email,\n  redirectTo: kIsWeb ? null : 'io.supabase.flutter://reset-callback/',\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Record Return Function in GraphQL\nDESCRIPTION: A GraphQL query that calls the accountsByEmailDomain function to find accounts with a specific domain, limiting results to 2 records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  accountsByEmailDomain(domainToSearch: \"foo.com\", first: 2) {\n    edges {\n      node {\n        id\n        email\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Environment Variables\nDESCRIPTION: Configuration of environment variables in .env.local file to connect the Next.js application to Supabase by setting the Supabase URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=<SUBSTITUTE_SUPABASE_URL>\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<SUBSTITUTE_SUPABASE_ANON_KEY>\n```\n\n----------------------------------------\n\nTITLE: Resetting Local Database to Previous Version\nDESCRIPTION: Rolls back the local database to a specific version for development purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db reset --version 20241005112233\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Custom Mode in Supabase Storage in Swift\nDESCRIPTION: This snippet demonstrates downloading a resized image (800x300) with the 'contain' resize mode from Supabase Storage using the Swift client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nlet data = try await supabase.storage.from(\"bucket\")\n  .download(\n    path: \"image.jpg\",\n    options: TransformOptions(\n      width: 800,\n      height: 300,\n      resize: \"contain\" // \"cover\" | \"fill\"\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Signed URL for Transformed Image in Swift\nDESCRIPTION: This snippet illustrates how to create a signed URL for a transformed image in a private bucket using the Supabase Swift client, specifying expiration time and transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet url = try await supabase.storage.from(\"bucket\")\n  .createSignedURL(\n    path: \"image.jpg\",\n    expiresIn: 60,\n    transform: TransformOptions(\n      width: 200,\n      height: 200\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling PGroonga Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and disable the PGroonga extension in PostgreSQL. This is necessary to use PGroonga's full-text search capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pgroonga\" extension\ncreate extension pgroonga with schema extensions;\n\n-- Disable the \"pgroonga\" extension\ndrop extension if exists pgroonga;\n```\n\n----------------------------------------\n\nTITLE: Setting up a React app with Supabase\nDESCRIPTION: Commands to create a new React app, install the Supabase JS library, and set up the project directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# create a fresh React app\nnpx create-react-app react-demo --use-npm\n\n# move into the new folder\ncd react-demo\n\n# Save the install supabase-js library\nnpm install --save @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Querying Role Timeout Settings\nDESCRIPTION: Query to check timeout settings for specific database roles by examining pg_roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  rolname,\n  rolconfig\nfrom pg_roles\nwhere\n  rolname in (\n    'anon',\n    'authenticated',\n    'postgres',\n    'service_role'\n    -- ,<ANY CUSTOM ROLES>\n  );\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Camera and PWA Elements for Profile Photos\nDESCRIPTION: Installs required packages for accessing device camera functionality and providing UI elements for PWA features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements @capacitor/camera\n```\n\n----------------------------------------\n\nTITLE: Frontend Stream Processing Implementation\nDESCRIPTION: Frontend handler for processing the OpenAI API event stream, managing state updates, and displaying responses to users in real-time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleConfirm = React.useCallback(\n  async (query: string) => {\n    setAnswer(undefined)\n    setQuestion(query)\n    setSearch('')\n    dispatchPromptData({ index: promptIndex, answer: undefined, query })\n    setHasError(false)\n    setIsLoading(true)\n\n    const eventSource = new SSE(`api/vector-search`, {\n      headers: {\n        apikey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ?? '',\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      payload: JSON.stringify({ query }),\n    })\n\n    function handleError<T>(err: T) {\n      setIsLoading(false)\n      setHasError(true)\n      console.error(err)\n    }\n\n    eventSource.addEventListener('error', handleError)\n    eventSource.addEventListener('message', (e: any) => {\n      try {\n        setIsLoading(false)\n\n        if (e.data === '[DONE]') {\n          setPromptIndex((x) => {\n            return x + 1\n          })\n          return\n        }\n\n        const completionResponse: CreateCompletionResponse = JSON.parse(e.data)\n        const text = completionResponse.choices[0].text\n\n        setAnswer((answer) => {\n          const currentAnswer = answer ?? ''\n\n          dispatchPromptData({\n            index: promptIndex,\n            answer: currentAnswer + text,\n          })\n\n          return (answer ?? '') + text\n        })\n      } catch (err) {\n        handleError(err)\n      }\n    })\n\n    eventSource.stream()\n\n    eventSourceRef.current = eventSource\n\n    setIsLoading(true)\n  },\n  [promptIndex, promptData]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating New Rails Project with Postgres\nDESCRIPTION: Command to create a new Rails project configured to use PostgreSQL as the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails new blog -d=postgresql\n```\n\n----------------------------------------\n\nTITLE: Copy Environment Variables for Upstash Redis Counter\nDESCRIPTION: Copies the example environment file to create a local .env file for the Upstash Redis counter function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp supabase/functions/upstash-redis-counter/.env.example supabase/functions/upstash-redis-counter/.env\n```\n\n----------------------------------------\n\nTITLE: Creating Documents Table for ChatGPT Retrieval Plugin in SQL\nDESCRIPTION: SQL script to create a 'documents' table for storing document chunks and their embeddings. This table is used by both Postgres and Supabase implementations of the ChatGPT Retrieval Plugin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists documents (\n    id text primary key default gen_random_uuid()::text,\n    source text,\n    source_id text,\n    content text,\n    document_id text,\n    author text,\n    url text,\n    created_at timestamptz default now(),\n    embedding vector(1536)\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Usage in React\nDESCRIPTION: This example demonstrates the basic structure and usage of the Dialog component with its subcomponents.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <DialogTrigger>Open</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. This will permanently delete your account and remove your data\n        from our servers.\n      </DialogDescription>\n    </DialogHeader>\n  </DialogContent>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Using Hover Card Component\nDESCRIPTION: Example implementation of the hover card component with trigger and content elements\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/hover-card.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<HoverCard>\n  <HoverCardTrigger>Hover</HoverCardTrigger>\n  <HoverCardContent>The React Framework – created and maintained by @vercel.</HoverCardContent>\n</HoverCard>\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration for Local Development\nDESCRIPTION: Environment variables setup for enabling SSL connections during local development of Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSSL_CERT_FILE=/path/to/cert.crt # set the path to the downloaded cert\nDENO_TLS_CA_STORE=mozilla,system\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Hook in config.toml\nDESCRIPTION: TOML configuration for setting up an authentication hook locally by specifying the hook name, enabling it, and defining the URI path.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[auth.hook.<hook_name>]\nenabled = true\nuri = \"pg-functions://....\"\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Subfolder Deno Support\nDESCRIPTION: Example project structure showing the organization of application code and Supabase functions in separate directories.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-development.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproject\n├── app\n└── supabase\n  └── functions\n```\n\n----------------------------------------\n\nTITLE: Updating Supabase Flutter Dependency in pubspec.yaml\nDESCRIPTION: Updates the supabase_flutter dependency version to 2.0.0 or higher in the project's pubspec.yaml file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter: ^2.0.0\n```\n\n----------------------------------------\n\nTITLE: Cancelling all active PostgreSQL transactions and running manual vacuum\nDESCRIPTION: This SQL sequence cancels all active backend processes and then runs a manual vacuum on a specific table, useful when autovacuum is blocked by locks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nSELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE state = 'active';\nVACUUM mytable;\n```\n\n----------------------------------------\n\nTITLE: Serving Edge Function Locally\nDESCRIPTION: Command to serve the Edge Function locally with environment variables and JWT verification disabled\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions serve --env-file .env.local --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Computing Routes with Google Maps API using Deno Edge Function\nDESCRIPTION: A Deno edge function that computes routes between two coordinates using Google Maps Directions API. Takes origin and destination coordinates as input and returns route details including duration, distance, and polyline data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype Coordinates = {\n  latitude: number\n  longitude: number\n}\n\nDeno.serve(async (req) => {\n  const {\n    origin,\n    destination,\n  }: {\n    origin: Coordinates\n    destination: Coordinates\n  } = await req.json()\n\n  const response = await fetch(\n    `https://routes.googleapis.com/directions/v2:computeRoutes?key=${Deno.env.get(\n      'GOOGLE_MAPS_API_KEY'\n    )}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Goog-FieldMask':\n          'routes.duration,routes.distanceMeters,routes.polyline,routes.legs.polyline',\n      },\n      body: JSON.stringify({\n        origin: { location: { latLng: origin } },\n        destination: { location: { latLng: destination } },\n        travelMode: 'DRIVE',\n        polylineEncoding: 'GEO_JSON_LINESTRING',\n      }),\n    }\n  )\n\n  if (!response.ok) {\n    const error = await response.json()\n    console.error({ error })\n    throw new Error(`HTTP error! status: ${response.status}`)\n  }\n\n  const data = await response.json()\n\n  const res = data.routes[0]\n\n  return new Response(JSON.stringify(res), { headers: { 'Content-Type': 'application/json' } })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring React Hook Form with Zod\nDESCRIPTION: Example showing how to set up a form using the useForm hook from React Hook Form with Zod validation, including resolver configuration and default values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: 'Username must be at least 2 characters.',\n  }),\n})\n\nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({  \n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: '',\n    },\n  })\n\n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Avatar Component with RedwoodJS CLI\nDESCRIPTION: Terminal command to generate a new Avatar component using the RedwoodJS generator CLI, which creates component, test, and story files.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw g component avatar\n  ✔ Generating component files...\n    ✔ Successfully wrote file `./web/src/components/Avatar/Avatar.test.js`\n    ✔ Successfully wrote file `./web/src/components/Avatar/Avatar.stories.js`\n    ✔ Successfully wrote file `./web/src/components/Avatar/Avatar.js`\n```\n\n----------------------------------------\n\nTITLE: Setting up dbdev and installing prerequisites in PostgreSQL\nDESCRIPTION: This SQL snippet sets up the database.dev package manager and installs necessary prerequisites for advanced testing in Supabase projects. It creates required extensions, installs the supabase-dbdev package, and ensures a clean installation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension if not exists http with schema extensions;\ncreate extension if not exists pg_tle;\ndrop extension if exists \"supabase-dbdev\";\nselect pgtle.uninstall_extension_if_exists('supabase-dbdev');\nselect\n    pgtle.install_extension(\n        'supabase-dbdev',\n        resp.contents ->> 'version',\n        'PostgreSQL package manager',\n        resp.contents ->> 'sql'\n    )\nfrom http(\n    (\n        'GET',\n        'https://api.database.dev/rest/v1/'\n        || 'package_versions?select=sql,version'\n        || '&package_name=eq.supabase-dbdev'\n        || '&order=version.desc'\n        || '&limit=1',\n        array[\n            ('apiKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtdXB0cHBsZnZpaWZyYndtbXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODAxMDczNzIsImV4cCI6MTk5NTY4MzM3Mn0.z2CN0mvO2No8wSi46Gw59DFGCTJrzM0AQKsu_5k134s')::http_header\n        ],\n        null,\n        null\n    )\n) x,\nlateral (\n    select\n        ((row_to_json(x) -> 'content') #>> '{}')::json -> 0\n) resp(contents);\ncreate extension \"supabase-dbdev\";\nselect dbdev.install('supabase-dbdev');\n\n-- Drop and recreate the extension to ensure a clean installation\ndrop extension if exists \"supabase-dbdev\";\ncreate extension \"supabase-dbdev\";\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Group Components in React\nDESCRIPTION: Example of importing the Label, RadioGroup, and RadioGroupItem components in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label } from '@/components/ui/label'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n```\n\n----------------------------------------\n\nTITLE: Setting NEW_DB_URL Environment Variable in Bash\nDESCRIPTION: Here, the snippet demonstrates how to set the NEW_DB_URL environment variable, which is required for connecting to the Supabase database. It emphasizes the need to replace [YOUR-PASSWORD] with the actual password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/neon.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NEW_DB_URL=\"postgresql://postgres.xxxxxxxxxxxxxxxxxxxx:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Cloudflare Turnstile Validation Function from Client-Side\nDESCRIPTION: JavaScript code to invoke the deployed Supabase Edge Function for validating a Cloudflare Turnstile token. The token is passed in the request body and the function returns validation results.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/cloudflare-turnstile/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {\n  body: { token },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Database List\nDESCRIPTION: SQL query to list all databases in a PostgreSQL cluster, including template databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pg_database;\n```\n\n----------------------------------------\n\nTITLE: Querying ProjectOwner Collection in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to retrieve data from the 'ProjectOwner' collection using the newly created view. It fetches the first two entries, including their nodeId and name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  projectOwnerCollection(first: 2) {\n    edges {\n      node {\n        nodeId\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SAML Connection with Attribute Mapping (Supabase CLI)\nDESCRIPTION: This command updates an existing SAML 2.0 Identity Provider connection in Supabase Auth using the Supabase CLI and applies attribute mapping using a JSON file. It requires specifying the provider UUID and a project reference, alongside the path to the attribute mapping JSON file. This allows custom mapping of SAML attributes to user properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase sso update <provider-uuid> --project-ref <your-project> \\\n  --attribute-mapping-file /path/to/attribute/mapping.json\"\n```\n\n----------------------------------------\n\nTITLE: Creating the Product DTO Class\nDESCRIPTION: Defines a data transfer object with Kotlinx Serialization annotations to map JSON data from Supabase to Kotlin objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class ProductDto(\n\n    @SerialName(\"name\")\n    val name: String,\n\n    @SerialName(\"price\")\n    val price: Double,\n\n    @SerialName(\"image\")\n    val image: String?,\n\n    @SerialName(\"id\")\n    val id: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Management View in SwiftUI\nDESCRIPTION: Implements a profile view for managing user details including username, full name, and website.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct ProfileView: View {\n  @State var username = \"\"\n  @State var fullName = \"\"\n  @State var website = \"\"\n\n  @State var isLoading = false\n\n  var body: some View {\n    NavigationStack {\n      Form {\n        Section {\n          TextField(\"Username\", text: $username)\n            .textContentType(.username)\n            .textInputAutocapitalization(.never)\n          TextField(\"Full name\", text: $fullName)\n            .textContentType(.name)\n          TextField(\"Website\", text: $website)\n            .textContentType(.URL)\n            .textInputAutocapitalization(.never)\n        }\n\n        Section {\n          Button(\"Update profile\") {\n            updateProfileButtonTapped()\n          }\n          .bold()\n\n          if isLoading {\n            ProgressView()\n          }\n        }\n      }\n      .navigationTitle(\"Profile\")\n      .toolbar(content: {\n        ToolbarItem(placement: .topBarLeading){\n          Button(\"Sign out\", role: .destructive) {\n            Task {\n              try? await supabase.auth.signOut()\n            }\n          }\n        }\n      })\n    }\n    .task {\n      await getInitialProfile()\n    }\n  }\n\n  func getInitialProfile() async {\n    do {\n      let currentUser = try await supabase.auth.session.user\n\n      let profile: Profile =\n      try await supabase\n        .from(\"profiles\")\n        .select()\n        .eq(\"id\", value: currentUser.id)\n        .single()\n        .execute()\n        .value\n\n      self.username = profile.username ?? \"\"\n      self.fullName = profile.fullName ?? \"\"\n      self.website = profile.website ?? \"\"\n\n    } catch {\n      debugPrint(error)\n    }\n  }\n\n  func updateProfileButtonTapped() {\n    Task {\n      isLoading = true\n      defer { isLoading = false }\n      do {\n        let currentUser = try await supabase.auth.session.user\n\n        try await supabase\n          .from(\"profiles\")\n          .update(\n            UpdateProfileParams(\n              username: username,\n              fullName: fullName,\n              website: website\n            )\n          )\n          .eq(\"id\", value: currentUser.id)\n          .execute()\n      } catch {\n        debugPrint(error)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Local Database\nDESCRIPTION: Command to reset the local database and rerun all migrations to reflect recent changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db reset\n```\n\n----------------------------------------\n\nTITLE: Formatting Cell Values in TanStack Table Columns\nDESCRIPTION: Custom cell formatting for a currency amount column, showing how to use Intl.NumberFormat for currency formatting and apply custom styling to cells.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: 'amount',\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue('amount'))\n      const formatted = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n      }).format(amount)\n\n      return <div className=\"text-right font-medium\">{formatted}</div>\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Sentry integration with npm\nDESCRIPTION: Command to install the Supabase Sentry integration package using npm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @supabase/sentry-js-integration\n```\n\n----------------------------------------\n\nTITLE: Initializing React App for Semantic Search (JavaScript)\nDESCRIPTION: Sets up the main React component to initialize the database, create the schema, and fetch content from the embeddings table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDB, initSchema, countRows } from './utils/db'\nimport { useState, useEffect, useRef, useCallback } from 'react'\n\nexport default function App() {\n  const [content, setContent] = useState([])\n  const initailizing = useRef(false)\n  // Create a reference to the worker object.\n  const worker = useRef(null)\n\n  // Set up DB\n  const db = useRef(null)\n  useEffect(() => {\n    const setup = async () => {\n      initailizing.current = true\n      db.current = await getDB()\n      await initSchema(db.current)\n      let count = await countRows(db.current, 'embeddings')\n\n      if (count === 0) {\n        // TODO: seed the database.\n      }\n      // Get Items\n      const items = await db.current.query('SELECT content FROM embeddings')\n      setContent(items.rows.map((x) => x.content))\n    }\n    if (!db.current && !initailizing.current) {\n      setup()\n    }\n  }, [])\n\n  // [...]\n\n  return <pre>{JSON.stringify(content)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Log Messages for Different PostgreSQL Severity Levels\nDESCRIPTION: This snippet demonstrates example log messages for various PostgreSQL severity levels, from DEBUG to PANIC. It illustrates the type of information captured at each log level.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDEBUG:  server process (PID 12345) exited with exit code 0\nINFO:  vacuuming \"example_schema.public.example_table\"\nNOTICE:  identifier \"very_very_very_long_table_name_exceeding_63_characters\" will be truncated to \"very_very_very_long_table_name_exceedin\"\nWARNING:  SET LOCAL can only be used in transaction blocks\nLOG:  statement: UPDATE example_table SET column_name = 'Example Value' WHERE id = 10;\nERROR:  relation \"exam\" does not exist at character 7\nFATAL:  role \"admin\" does not exist\nPANIC: database system shutdown requested\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Application\nDESCRIPTION: Nuxt configuration file setup with Supabase module and CSS styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt'\n\n// https://v3.nuxtjs.org/api/configuration/nuxt.config\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/supabase'],\n  css: ['@/assets/main.css'],\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data into Stores Table\nDESCRIPTION: This SQL command inserts sample store data into the 'stores' table, including store names, descriptions, and geographic locations using PostGIS functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into public.stores\n  (name, description, location)\nvalues\n  (\n    'The Galaxies.dev Shop',\n    'Galaxies.dev - your favourite place to learn',\n    st_point(7.6005702, 51.8807174)\n  ),\n  ('The Local Dev', 'Local people, always best', st_point(7.614454, 51.876565)),\n  ('City Store', 'Get the supplies a dev needs', st_point(7.642581, 51.945606)),\n  ('MEGA Store', 'Everything you need', st_point(13.404315, 52.511640));\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Webhooks in TOML\nDESCRIPTION: This snippet demonstrates how to enable experimental webhook features in the database configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[experimental.webhooks]\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Query with Long 'in' Clause That Causes 520 Error\nDESCRIPTION: Example of a problematic query with a very long 'in' clause that would exceed the 16KB limit and trigger a Cloudflare 520 error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('countries')\n  .select()\n  .not('id', 'in', '(5,6,7,8,9,...10,000)')\n```\n\n----------------------------------------\n\nTITLE: Creating Badge-like Link in React\nDESCRIPTION: Example of using the badgeVariants helper to create a link that looks like a badge with an outline variant.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/badge.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Link className={badgeVariants({ variant: 'outline' })}>Badge</Link>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Index Usage Statistics in PostgreSQL\nDESCRIPTION: SQL query to analyze how frequently indexes are used when accessing tables, showing percentage of index usage and table sizes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/steps-to-improve-query-performance-with-indexes-q8PoC9.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  relname,\n  100 * idx_scan / (seq_scan + idx_scan) as percent_of_times_index_used,\n  n_live_tup as rows_in_table\nfrom pg_stat_user_tables\nwhere seq_scan + idx_scan > 0\norder by n_live_tup desc;\n```\n\n----------------------------------------\n\nTITLE: Increasing Connection Timeout for Prisma\nDESCRIPTION: Shows how to increase the connect_timeout to 30 seconds in the Prisma connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n.../postgres?connect_timeout=30\n```\n\n----------------------------------------\n\nTITLE: Complete Form Implementation with React Hook Form and Zod\nDESCRIPTION: A complete example of building a form using the Form components with React Hook Form and Zod validation, including imports, schema definition, form setup, and rendering the form with submit button.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: 'Username must be at least 2 characters.',\n  }),\n})\n\nexport function ProfileForm() {\n  // ...\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"shadcn\" {...field} />\n              </FormControl>\n              <FormDescription>This is your public display name.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Table Components in React\nDESCRIPTION: Import statement for various table-related components from the project's UI components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Hello World Supabase Edge Function in TypeScript\nDESCRIPTION: This snippet demonstrates a basic Supabase Edge Function that responds with a personalized greeting. It uses Deno.serve to handle incoming requests, processes JSON payload, and returns a JSON response with appropriate headers.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface reqPayload {\n\tname: string;\n}\n\nconsole.info('server started');\n\nDeno.serve(async (req: Request) => {\n\tconst { name }: reqPayload = await req.json();\n\tconst data = {\n\t\tmessage: `Hello ${name} from foo!`,\n\t};\n\n\treturn new Response(\n\t\tJSON.stringify(data),\n\t\t{ headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' }}\n\t\t);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring pgAudit Logging for Postgres in SQL\nDESCRIPTION: SQL commands to configure pgAudit logging for Postgres, including setting log classes, adjusting log levels, and resetting configurations. This enables detailed query logging for various statement types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- temporary single-session config update\nset pgaudit.log = 'function, write, ddl';\n\n-- equivalent permanent config update.\nalter role postgres set pgaudit.log to 'function, write, ddl';\n\n-- for API-related logs\nalter role authenticator set pgaudit.log to 'write';\n\n-- adjust log level\nalter role postgres set pgaudit.log_level to 'info';\nalter role postgres set pgaudit.log_level to 'debug5';\n\n-- resets stored config.\nalter role postgres reset pgaudit.log\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Supabase OpenAI Function\nDESCRIPTION: Copies the example environment file to create a local configuration file for the OpenAI function.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp supabase/.env.local.example supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Handling Presence Events with ChannelFilter in Supabase Realtime (Dart)\nDESCRIPTION: This code demonstrates how to handle presence events (sync, join, leave) in a Supabase Realtime channel using the ChannelFilter approach. It sets up event handlers for presence state synchronization and user join/leave events, then subscribes to the channel and tracks the user's presence with a timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nChannelFilter(event: 'sync'),\n          (payload, [ref]) {\n            print('Synced presence state: ${channel.presenceState()}');\n          },\n        ).on(\n          RealtimeListenTypes.presence,\n          ChannelFilter(event: 'join'),\n          (payload, [ref]) {\n            print('Newly joined presences $payload');\n          },\n        ).on(\n          RealtimeListenTypes.presence,\n          ChannelFilter(event: 'leave'),\n          (payload, [ref]) {\n            print('Newly left presences: $payload');\n          },\n        ).subscribe(\n          (status, [error]) async {\n            if (status == 'SUBSCRIBED') {\n              await channel.track({'online_at': DateTime.now().toIso8601String()});\n            }\n          },\n        );\n```\n\n----------------------------------------\n\nTITLE: Sign In Anonymously with Flutter in Supabase\nDESCRIPTION: Creates an anonymous user authentication session using the Supabase Flutter SDK. Returns a session object for the anonymous user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInAnonymously();\n```\n\n----------------------------------------\n\nTITLE: SQL Fallback Statement Splitting Example\nDESCRIPTION: Demonstration of the fallback mechanism for SQL statement splitting in the Postgres Language Server, showing how it handles invalid SQL syntax by splitting at semicolons or double newlines.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ni like to use my sql file as a notepad -- Error!\n\nselect 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn OIDC in Supabase CLI\nDESCRIPTION: Configuration snippet for enabling LinkedIn OIDC in a Supabase project using the Supabase CLI through the `config.toml` file. It requires setting the `client_id` and `secret` for LinkedIn OIDC under the `[auth.external.linkedin_oidc]` section. Ensure the configuration is consistent with the required key-value pairs for authenticating users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[auth.external.linkedin_oidc]\nenabled = true\nclient_id = ...\nsecret = ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Tabs with Multiple Files\nDESCRIPTION: Example of using CodeTabs component to display multiple code files with different content in a tabbed interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<$CodeTabs>\n\n```js name=a.js\nconsole.log('Hello, world!')\n```\n\n```js name=b.js\nconsole.log('Goodbye, world!')\n```\n\n</$CodeTabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Upload Component with Supabase Storage in React TypeScript\nDESCRIPTION: This component handles avatar image upload and display functionality using Supabase Storage. It downloads existing avatars and allows users to upload new ones, storing them in the 'avatars' bucket. The component includes state management for tracking upload status and rendering appropriate UI elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { supabaseClient } from '../utility/supabaseClient'\n\ntype TAvatarProps = {\n  url?: string\n  size: number\n  onUpload: (filePath: string) => void\n}\n\nexport default function Avatar({ url, size, onUpload }: TAvatarProps) {\n  const [avatarUrl, setAvatarUrl] = useState('')\n  const [uploading, setUploading] = useState(false)\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path: string) {\n    try {\n      const { data, error } = await supabaseClient.storage.from('avatars').download(path)\n      if (error) {\n        throw error\n      }\n      const url = URL.createObjectURL(data)\n      setAvatarUrl(url)\n    } catch (error: any) {\n      console.log('Error downloading image: ', error?.message)\n    }\n  }\n\n  async function uploadAvatar(event: React.ChangeEvent<HTMLInputElement>) {\n    try {\n      setUploading(true)\n\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const fileName = `${Math.random()}.${fileExt}`\n      const filePath = `${fileName}`\n\n      const { error: uploadError } = await supabaseClient.storage\n        .from('avatars')\n        .upload(filePath, file)\n\n      if (uploadError) {\n        throw uploadError\n      }\n      onUpload(filePath)\n    } catch (error: any) {\n      alert(error.message)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt=\"Avatar\"\n          className=\"avatar image\"\n          style={{ height: size, width: size }}\n        />\n      ) : (\n        <div className=\"avatar no-image\" style={{ height: size, width: size }} />\n      )}\n      <div style={{ width: size }}>\n        <label className=\"button primary block\" htmlFor=\"single\">\n          {uploading ? 'Uploading ...' : 'Upload'}\n        </label>\n        <input\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n          }}\n          type=\"file\"\n          id=\"single\"\n          name=\"avatar_url\"\n          accept=\"image/*\"\n          onChange={uploadAvatar}\n          disabled={uploading}\n        />\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Component\nDESCRIPTION: React Native component implementation for handling user authentication including sign-in and sign-up functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport { Alert, StyleSheet, View } from 'react-native'\nimport { supabase } from '../lib/supabase'\nimport { Button, Input } from '@rneui/themed'\n\nexport default function Auth() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  async function signInWithEmail() {\n    setLoading(true)\n    const { error } = await supabase.auth.signInWithPassword({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    setLoading(false)\n  }\n\n  async function signUpWithEmail() {\n    setLoading(true)\n    const {\n      data: { session },\n      error,\n    } = await supabase.auth.signUp({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    if (!session) Alert.alert('Please check your inbox for email verification!')\n    setLoading(false)\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Input\n          label=\"Email\"\n          leftIcon={{ type: 'font-awesome', name: 'envelope' }}\n          onChangeText={(text) => setEmail(text)}\n          value={email}\n          placeholder=\"email@address.com\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input\n          label=\"Password\"\n          leftIcon={{ type: 'font-awesome', name: 'lock' }}\n          onChangeText={(text) => setPassword(text)}\n          value={password}\n          secureTextEntry={true}\n          placeholder=\"Password\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Button title=\"Sign in\" disabled={loading} onPress={() => signInWithEmail()} />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Button title=\"Sign up\" disabled={loading} onPress={() => signUpWithEmail()} />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 40,\n    padding: 12,\n  },\n  verticallySpaced: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    alignSelf: 'stretch',\n  },\n  mt20: {\n    marginTop: 20,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Daily Partition Creation Cron Job in PostgreSQL\nDESCRIPTION: Sets up an automated daily partition creation system using pg_cron to create new partitions one hour before midnight each day.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE PROCEDURE app.create_daily_partition(today date)\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    CALL app.create_chats_partition(today);\n    CALL app.create_chat_messages_partition(today);\nEND;\n$$;\n\nSELECT cron.schedule('new-chat-partition', '0 23 * * *', 'CALL app.create_daily_partition(now()::date + \"interval 1 day\")');\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Signing In with Discord - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to sign in users using Discord OAuth through the Supabase client. The `signInWithOAuth()` method is called with 'discord' as the provider to initiate the login process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\\n// ---cut---\\nasync function signInWithDiscord() {\\n  const { data, error } = await supabase.auth.signInWithOAuth({\\n    provider: 'discord',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Authentication\nDESCRIPTION: Example of implementing server-side rendering with authenticated Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPagesServerClient } from '@supabase/auth-helpers-nextjs'\n\nexport default function Profile({ user }) {\n  return <div>Hello {user.name}</div>\n}\n\nexport const getServerSideProps = async (ctx) => {\n  const supabase = createPagesServerClient(ctx)\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user)\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n\n  return {\n    props: {\n      user,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Management in Vue 3\nDESCRIPTION: Creating a Vue component for user profile management, including fetching and updating profile data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { supabase } from '../supabase'\nimport { onMounted, ref, toRefs } from 'vue'\n\nconst props = defineProps(['session'])\nconst { session } = toRefs(props)\n\nconst loading = ref(true)\nconst username = ref('')\nconst website = ref('')\nconst avatar_url = ref('')\n\nonMounted(() => {\n  getProfile()\n})\n\nasync function getProfile() {\n  try {\n    loading.value = true\n    const { user } = session.value\n\n    const { data, error, status } = await supabase\n      .from('profiles')\n      .select(`username, website, avatar_url`)\n      .eq('id', user.id)\n      .single()\n\n    if (error && status !== 406) throw error\n\n    if (data) {\n      username.value = data.username\n      website.value = data.website\n      avatar_url.value = data.avatar_url\n    }\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    loading.value = false\n  }\n}\n\nasync function updateProfile() {\n  try {\n    loading.value = true\n    const { user } = session.value\n\n    const updates = {\n      id: user.id,\n      username: username.value,\n      website: website.value,\n      avatar_url: avatar_url.value,\n      updated_at: new Date(),\n    }\n\n    const { error } = await supabase.from('profiles').upsert(updates)\n\n    if (error) throw error\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    loading.value = false\n  }\n}\n\nasync function signOut() {\n  try {\n    loading.value = true\n    const { error } = await supabase.auth.signOut()\n    if (error) throw error\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n\n<template>\n  <form class=\"form-widget\" @submit.prevent=\"updateProfile\">\n    <div>\n      <label for=\"email\">Email</label>\n      <input id=\"email\" type=\"text\" :value=\"session.user.email\" disabled />\n    </div>\n    <div>\n      <label for=\"username\">Name</label>\n      <input id=\"username\" type=\"text\" v-model=\"username\" />\n    </div>\n    <div>\n      <label for=\"website\">Website</label>\n      <input id=\"website\" type=\"url\" v-model=\"website\" />\n    </div>\n\n    <div>\n      <input\n        type=\"submit\"\n        class=\"button primary block\"\n        :value=\"loading ? 'Loading ...' : 'Update'\"\n        :disabled=\"loading\"\n      />\n    </div>\n\n    <div>\n      <button class=\"button block\" @click=\"signOut\" :disabled=\"loading\">Sign Out</button>\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video using an iframe within a Markdown document. It includes responsive design classes and various iframe attributes for better user experience and security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-02-supabase-beta-january-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/DlybOLANG4s\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Supabase Client for Next.js\nDESCRIPTION: TypeScript code to create a browser-side Supabase client using the Supabase SSR helper library, with proper typing and memoization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBrowserClient } from '@supabase/ssr'\nimport type { Database } from '@/utils/database.types'\nimport type { TypedSupabaseClient } from '@/utils/types'\nimport { useMemo } from 'react'\n\nlet client: TypedSupabaseClient | undefined\n\nfunction getSupabaseBrowserClient() {\n  if (client) {\n    return client\n  }\n\n  client = createBrowserClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n\n  return client\n}\n\nfunction useSupabaseBrowser() {\n  return useMemo(getSupabaseBrowserClient, [])\n}\n\nexport default useSupabaseBrowser\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Config for Input OTP Animations\nDESCRIPTION: Updates to tailwind.config.js to add necessary animations for the Input OTP component, including caret blink animation keyframes and configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        'caret-blink': {\n          '0%,70%,100%': { opacity: '1' },\n          '20%,50%': { opacity: '0' },\n        },\n      },\n      animation: {\n        'caret-blink': 'caret-blink 1.25s ease-out infinite',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting System PATH on Windows\nDESCRIPTION: Shell command to add Node.js directory to Windows system PATH environment variable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_postgres_config.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsetx PATH \"%PATH%;<path-to-dir>\"\n```\n\n----------------------------------------\n\nTITLE: Querying Most Recent Authentication Method in PostgreSQL\nDESCRIPTION: This SQL snippet uses `jsonb_path_query` to extract the most recent authentication method from a JWT stored in a JSONB column. The path `$.amr[0]` locates the latest entry, allowing enforcement of stricter JWT verification policies based on recent authentication methods.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\njsonb_path_query((select auth.jwt()), '$.amr[0]')\n```\n\n----------------------------------------\n\nTITLE: Integrating Realtime Cursors in React Application\nDESCRIPTION: This snippet demonstrates how to integrate the Realtime Cursors component into a React application. It requires the Supabase Realtime service for low-latency updates. Props include 'roomName' for the room identifier and 'username' for labeling. The expected input is a React component that synchronizes cursor positions across sessions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RealtimeCursors } from '@/components/realtime-cursors'\n\nexport default function Page() {\n  return (\n    <div className=\"w-full min-h-screen\">\n      <RealtimeCursors roomName=\"macrodata_refinement_office\" username=\"Mark Scout\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Tests with Supabase CLI\nDESCRIPTION: Command to execute database tests using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/testing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase test db\n```\n\n----------------------------------------\n\nTITLE: Implementing Telegraf Configuration for Metric Collection in Performance Testing\nDESCRIPTION: This is a reference to a Telegraf configuration file used to collect metrics from k6 load tests and the host system, then push them to Prometheus. The configuration helps solve issues with high volumes of metrics data during performance testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-21-automating-performance-tests.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Reference to: https://github.com/supabase/benchmarks/blob/main/k6/telegraf.conf\n```\n\n----------------------------------------\n\nTITLE: Using ReplaceCode and InsertCode Icons in React\nDESCRIPTION: This snippet demonstrates how to import and use custom icons within a React functional component, where 'ReplaceCode' and 'InsertCode' are rendered with specific styling properties for class name, stroke width, and size.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/icons/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReplaceCode, InsertCode } from 'icons'\n\nfunction app() {\n  return (\n    <>\n      <ReplaceCode className=\"text-light\" strokeWidth={1} size={16} />\n      <InsertCode className=\"text-light\" strokeWidth={1} size={16} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Response Status Code Query\nDESCRIPTION: SQL query showing how to access response status codes from edge logs by unnesting metadata and response fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  status_code\nfrom\n  edge_logs\n  -- Unpack 'metadata' field\n  cross join unnest(metadata) as metadata\n  -- unpack 'response' from 'metadata'\n  cross join unnest(response) as response;\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Function - Basic Setup\nDESCRIPTION: Command to create a new Supabase Edge Function named 'multi-purpose'\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nsupabase functions new multi-purpose\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Optimization in Dart\nDESCRIPTION: This snippet shows how to disable automatic image optimization and request the original format using the Supabase Dart client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.storage.from('bucket').download(\n      'image.jpeg',\n      transform: const TransformOptions(\n        width: 200,\n        height: 200,\n        format: RequestImageFormat.origin,\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Installing Hover Card Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI hover card dependency package using NPM\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/hover-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-hover-card\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Dropdown Menu\nDESCRIPTION: Command to install the Radix UI dropdown menu dependency via npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Updating Redirect URLs in Login Component\nDESCRIPTION: This snippet provides instructions for updating the redirect paths in the `login-form.tsx` component for the application to correctly handle authentication redirects after the login process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/social-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Update redirect paths in login-form.tsx\nconst redirectPath = '/protected'; // Set this to your app’s protected routes.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Discord Slash Command with TypeScript and Deno\nDESCRIPTION: This TypeScript code implements a Discord bot that responds to a '/hello' slash command. It uses the Sift routing library and TweetNaCl for signature verification, handling both Ping interactions and ApplicationCommand interactions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Sift is a small routing library that abstracts away details like starting a\n// listener on a port, and provides a simple function (serve) that has an API\n// to invoke a function for a specific path.\nimport { json, serve, validateRequest } from 'https://deno.land/x/sift@0.6.0/mod.ts'\n// TweetNaCl is a cryptography library that we use to verify requests\n// from Discord.\nimport nacl from 'https://cdn.skypack.dev/tweetnacl@v1.0.3?dts'\n\nenum DiscordCommandType {\n  Ping = 1,\n  ApplicationCommand = 2,\n}\n\n// For all requests to \"/\" endpoint, we want to invoke home() handler.\nserve({\n  '/discord-bot': home,\n})\n\n// The main logic of the Discord Slash Command is defined in this function.\nasync function home(request: Request) {\n  // validateRequest() ensures that a request is of POST method and\n  // has the following headers.\n  const { error } = await validateRequest(request, {\n    POST: {\n      headers: ['X-Signature-Ed25519', 'X-Signature-Timestamp'],\n    },\n  })\n  if (error) {\n    return json({ error: error.message }, { status: error.status })\n  }\n\n  // verifySignature() verifies if the request is coming from Discord.\n  // When the request's signature is not valid, we return a 401 and this is\n  // important as Discord sends invalid requests to test our verification.\n  const { valid, body } = await verifySignature(request)\n  if (!valid) {\n    return json(\n      { error: 'Invalid request' },\n      {\n        status: 401,\n      }\n    )\n  }\n\n  const { type = 0, data = { options: [] } } = JSON.parse(body)\n  // Discord performs Ping interactions to test our application.\n  // Type 1 in a request implies a Ping interaction.\n  if (type === DiscordCommandType.Ping) {\n    return json({\n      type: 1, // Type 1 in a response is a Pong interaction response type.\n    })\n  }\n\n  // Type 2 in a request is an ApplicationCommand interaction.\n  // It implies that a user has issued a command.\n  if (type === DiscordCommandType.ApplicationCommand) {\n    const { value } = data.options.find(\n      (option: { name: string; value: string }) => option.name === 'name'\n    )\n    return json({\n      // Type 4 responds with the below message retaining the user's\n      // input at the top.\n      type: 4,\n      data: {\n        content: `Hello, ${value}!`,\n      },\n    })\n  }\n\n  // We will return a bad request error as a valid Discord request\n  // shouldn't reach here.\n  return json({ error: 'bad request' }, { status: 400 })\n}\n\n/** Verify whether the request is coming from Discord. */\nasync function verifySignature(request: Request): Promise<{ valid: boolean; body: string }> {\n  const PUBLIC_KEY = Deno.env.get('DISCORD_PUBLIC_KEY')!\n  // Discord sends these headers with every request.\n  const signature = request.headers.get('X-Signature-Ed25519')!\n  const timestamp = request.headers.get('X-Signature-Timestamp')!\n  const body = await request.text()\n  const valid = nacl.sign.detached.verify(\n    new TextEncoder().encode(timestamp + body),\n    hexToUint8Array(signature),\n    hexToUint8Array(PUBLIC_KEY)\n  )\n\n  return { valid, body }\n}\n\n/** Converts a hexadecimal string to Uint8Array. */\nfunction hexToUint8Array(hex: string) {\n  return new Uint8Array(hex.match(/.{1,2}/g)!.map((val) => parseInt(val, 16)))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Function to Test Authorization Header in Supabase\nDESCRIPTION: This SQL function creates a database function that returns the JWT payload, which can be used to verify the user's authentication status and role during database calls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-is-my-select-returning-an-empty-data-array-and-i-have-data-in-the-table-xvOPgx.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate function test_authorization_header() returns json\n    language SQL\n    as\n$$\n    select auth.jwt();\n$$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Date Picker in React\nDESCRIPTION: A React component that implements a date picker using Popover and Calendar components. The component allows users to select a single date and displays the selected date in a formatted string using date-fns. It includes a button trigger with calendar icon and a popover containing the calendar interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/date-picker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport * as React from 'react'\nimport { format } from 'date-fns'\nimport { Calendar as CalendarIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\n\nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={'outline'}\n          className={cn(\n            'w-[280px] justify-start text-left font-normal',\n            !date && 'text-muted-foreground'\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, 'PPP') : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar mode=\"single\" selected={date} onSelect={setDate} initialFocus />\n      </PopoverContent>\n    </Popover>\n  )\n```\n\n----------------------------------------\n\nTITLE: Inserting Movie Data in Postgres\nDESCRIPTION: Example of inserting a movie record into the movies table with title, original title and overview text.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into movies (\n\ttitle,\n\toriginal_title,\n\toverview\n)\nvalues\n(\n\t\"Avengers: Age of Ultron\",\n\t\"Avengers: Age of Ultron\",\n\t\"When Tony Stark tries to jumpstart a dormant peacekeeping program, things go awry and Earth's Mightiest Heroes are put to the ultimate test as the fate of the planet hangs in the balance. As the villainous Ultron emerges, it is up to The Avengers to stop him from enacting his terrible plans, and soon uneasy alliances and unexpected action pave the way for an epic and unique global adventure.\",\n);\n```\n\n----------------------------------------\n\nTITLE: Carousel with API Access\nDESCRIPTION: Example of using the setApi prop to access the carousel API and manage state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type CarouselApi } from '@/components/ui/carousel'\n\nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>()\n  const [current, setCurrent] = React.useState(0)\n  const [count, setCount] = React.useState(0)\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    setCount(api.scrollSnapList().length)\n    setCurrent(api.selectedScrollSnap() + 1)\n\n    api.on('select', () => {\n      setCurrent(api.selectedScrollSnap() + 1)\n    })\n  }, [api])\n\n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting SQL Joins with Full Table Names\nDESCRIPTION: Example of a join query using full table names for reference clarity. Shows proper alignment and formatting of join conditions with explicit table references.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  employees.employee_name,\n  departments.department_name\nfrom\n  employees\njoin\n  departments on employees.department_id = departments.department_id\nwhere\n  employees.start_date > '2022-01-01';\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-Range Data in PostgreSQL 14\nDESCRIPTION: Shows how to query data from a table with a multi-range column. This demonstrates the retrieval of non-contiguous time ranges stored in a single column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom sensor_range;\n```\n\n----------------------------------------\n\nTITLE: Creating a Restaurant Table with Geographic Point Location\nDESCRIPTION: SQL command to create a table with a geographic point column for storing location data. This example creates a restaurants table with a location column using the PostGIS Point data type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table if not exists public.restaurants (\n\tid int generated by default as identity primary key,\n\tname text not null,\n\tlocation gis.geography(POINT) not null\n);\n```\n\n----------------------------------------\n\nTITLE: Stop Tracking Presence in Python\nDESCRIPTION: This snippet demonstrates how to untrack presence in Python with the untrack method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nroom_one.untrack()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Serializer for Supabase-kt\nDESCRIPTION: Creates a custom serializer by implementing the SupabaseSerializer interface. This requires implementing encode and decode methods to handle the conversion between Kotlin objects and JSON strings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomSerializer: SupabaseSerializer {\n\n    override fun <T : Any> encode(type: KType, value: T): String {\n        //encode value to string\n    }\n\n    override fun <T : Any> decode(type: KType, value: String): T {\n        //decode value\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notes Table in SQL\nDESCRIPTION: SQL script to create a notes table with row-level security and appropriate permissions for authenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n-- Run this SQL against your database to create a `notes` table.\n\ncreate table notes (\n  id bigint primary key generated always as identity,\n  created_at timestamp with time zone not null default now(),\n  user_id uuid references auth.users on delete cascade not null default auth.uid(),\n  note text not null\n);\n\nalter table notes enable row level security;\n\nrevoke all on table notes from authenticated;\nrevoke all on table notes from anon;\n\ngrant all (note) on table notes to authenticated;\ngrant select (id) on table notes to authenticated;\ngrant delete on table notes to authenticated;\n\ncreate policy \"Users can access and modify their own notes\"\non notes\nfor all\nto authenticated\nusing ((select auth.uid()) = user_id);\n```\n\n----------------------------------------\n\nTITLE: Downloading a file using Swift in Supabase Storage\nDESCRIPTION: This Swift snippet demonstrates how to download a file from Supabase Storage. It uses the `supabase.storage.from(\"avatars\").download(path: \"public/avatar1.png\")` method to download the file located at 'public/avatar1.png' within the 'avatars' bucket. The `try await` keywords are used to handle the asynchronous operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await supabase.storage.from(\"avatars\").download(path: \"public/avatar1.png\")\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Python Environment\nDESCRIPTION: Code to configure the OpenAI API key as an environment variable for LlamaIndex integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/llamaindex.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ['OPENAI_API_KEY'] = \"[your_openai_api_key]\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Supabase Storage in Dart\nDESCRIPTION: This code snippet shows how to upload a file to Supabase Storage using the standard upload method in Dart. It assumes a Supabase client has already been initialized.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Upload file using standard upload\nFuture<void> uploadFile(File file) async {\n  await supabase.storage.from('bucket_name').upload('file_path', file);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In Button with Compose Auth in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Compose Auth plugin to create an Apple Sign-In button in a Kotlin application. It handles the authentication flow and provides callbacks for different result scenarios.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval authState = supabaseClient.composeAuth.rememberLoginWithApple(\n\tonResult = {\n\t\twhen(it) { //handle errors\n\t\t\tNativeSignInResult.ClosedByUser -> TODO()\n\t\t\tis NativeSignInResult.Error -> TODO()\n\t\t\tis NativeSignInResult.NetworkError -> TODO()\n\t\t\tNativeSignInResult.Success -> TODO()\n\t\t}\n\t}\n)\n\nButton(onClick = { authState.startFlow() }) {\n\tText(\"Sign in with Apple\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on MacOS\nDESCRIPTION: Homebrew command to install PostgreSQL version 17 on MacOS\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/postgres_installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install postgresql@17\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Group Card Components in React\nDESCRIPTION: Shows how to import the RadioGroupCard and RadioGroupCardItem components from the UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RadioGroupCard, RadioGroupCardItem } from 'ui'\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Log Level to ERROR in SQL\nDESCRIPTION: This SQL command sets the log_min_messages to ERROR for the postgres role, which is ideal for production environments to reduce log noise.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER ROLE postgres SET log_min_messages TO 'ERROR';\n```\n\n----------------------------------------\n\nTITLE: Angular Route Guard for Authentication Protection\nDESCRIPTION: Implementation of CanActivate guard to protect routes that require authentication, using the auth service to verify user state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from './../services/auth.service'\nimport { Injectable } from '@angular/core'\nimport { CanActivate, Router, UrlTree } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { filter, map, take } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private auth: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.auth.currentUser.pipe(\n      filter((val) => val !== null),\n      take(1),\n      map((isAuthenticated) => {\n        if (isAuthenticated) {\n          return true\n        } else {\n          return this.router.createUrlTree(['/'])\n        }\n      })\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and seeding the Supabase Vector collection\nDESCRIPTION: Python function to initialize a vector collection in Supabase, generate embeddings for sample images, and store them in the database with metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef seed():\n    # create vector store client\n    vx = vecs.create_client(DB_CONNECTION)\n\n    # get or create a collection of vectors with 1024 dimensions\n    images = vx.get_or_create_collection(name=\"image_vectors\", dimension=1024)\n\n    # Generate image embeddings with Amazon Titan Model\n    img_emb1 = encode_image('./images/one.jpg')\n    img_emb2 = encode_image('./images/two.jpg')\n    img_emb3 = encode_image('./images/three.jpg')\n    img_emb4 = encode_image('./images/four.jpg')\n\n    # add records to the *images* collection\n    images.upsert(\n        records=[\n            (\n                \"one.jpg\",       # the vector's identifier\n                img_emb1,        # the vector. list or np.array\n                {\"type\": \"jpg\"}  # associated  metadata\n            ), (\n                \"two.jpg\",\n                img_emb2,\n                {\"type\": \"jpg\"}\n            ), (\n                \"three.jpg\",\n                img_emb3,\n                {\"type\": \"jpg\"}\n            ), (\n                \"four.jpg\",\n                img_emb4,\n                {\"type\": \"jpg\"}\n            )\n        ]\n    )\n    print(\"Inserted images\")\n\n    # index the collection for fast search performance\n    images.create_index()\n    print(\"Created index\")\n```\n\n----------------------------------------\n\nTITLE: Inserting Users with Count-Based ID\nDESCRIPTION: Shows how to insert a new user by calculating the next ID using COUNT(*)\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into users\n  (id, email, name)\nselect count(*) + 1, 'new@example.com', 'new_user' from users;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Deep Links for Authentication\nDESCRIPTION: XML configuration for Android AndroidManifest.xml to register deep links for the Flutter chat app, enabling redirection back to the app after email confirmation through Supabase authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  <!-- ... other tags -->\n  <application ...>\n    <activity ...>\n      <!-- ... other tags -->\n\n      <!-- Add this intent-filter for Deep Links -->\n      <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST -->\n        <data\n          android:scheme=\"io.supabase.chat\"\n          android:host=\"login\" />\n      </intent-filter>\n\n    </activity>\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Signing Up New User using Supabase in Python\nDESCRIPTION: This Python snippet demonstrates how to sign up a new user by providing their email address and password with the Supabase Python client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.auth.sign_up({\n  'email': 'valid.email@supabase.io',\n  'password': 'example-password',\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Flame Package to Flutter Project\nDESCRIPTION: Command to add the Flame package to a Flutter project using pub.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add flame\n```\n\n----------------------------------------\n\nTITLE: SMS with Password Login Implementation in Supabase\nDESCRIPTION: Example showing how to implement SMS authentication with password combination using Supabase Auth.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-28-supabase-auth-passwordless-sms-login.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Code reference for illustration - actual example not provided in text\n```\n\n----------------------------------------\n\nTITLE: Initializing Storage Bucket for Product Images\nDESCRIPTION: Creates a storage bucket specifically for storing product images in Supabase storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/product_management_sql_template.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into storage.buckets (id, name)\n  values ('Product Image', 'Product Image');\n```\n\n----------------------------------------\n\nTITLE: Performing Near-Duplicate Detection\nDESCRIPTION: Searches for near-duplicate reviews by comparing vector similarities, filtering results based on distance threshold and text length.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor ix, text in tqdm(enumerate(data['text'])):\n\n    # Load the next row from the dataset\n    query_results = reviews.fetch(ids=[f'{ix}'])\n    \n    (query_id, query_embedding, query_meta) = query_results[0]\n\n    # Retrieve the original text from the row's metadata\n    query_text = query_meta[\"text\"]\n\n    # To keep the output easy to read quickly, we'll restrict reviews to < 500 characters\n    # In the real-world you would not include this restriction\n    if len(query_text) < 500:\n\n        # Query the review embeddings for the most similar 5 reviews\n        top_5 = reviews.query(\n            query_vector=query_embedding,\n            limit = 5,\n            include_metadata= True,\n            include_value=True\n        )\n\n        # For each result\n        for result_id, result_distance, result_meta in top_5[1:]:\n            \n            result_text = result_meta[\"text\"]\n\n            if (\n                # Since our query embedding is in the collection, the nearest result\n                # is always itself with a distance of 0. We exclude that record and \n                # review any others with a distance < 0.17\n                0.01 < abs(result_distance) < 0.17\n                and len(result_text) < 500\n                and query_id < result_id\n            ):\n                print(\n                    \"query_id:\", query_id,\n                    \"\\t\", \"result_id:\", result_id,\n                    \"\\t\", \"distance\", round(result_distance, 4),\n                    \"\\n\\n\", \"Query Text\",\n                    \"\\n\\n\", query_meta[\"text\"],\n                    \"\\n\\n\", \"Result Text\",\n                    \"\\n\\n\", result_meta[\"text\"],\n                    \"\\n\", \"-\" * 80\n                )\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Installation\nDESCRIPTION: Command to verify PostgreSQL installation by checking version\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/postgres_installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npsql --version\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component in Account Page\nDESCRIPTION: Updates the Account page to include the Avatar component, enabling profile photo functionality. The snippet shows how to properly include the component and bind it to the user's profile data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Account</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <avatar v-model:path=\"profile.avatar_url\" @upload=\"updateProfile\"></avatar>\n...\n</template>\n<script lang=\"ts\">\nimport Avatar from '../components/Avatar.vue';\nexport default defineComponent({\n  name: 'AccountPage',\n  components: {\n    Avatar,\n    ....\n  }\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Event Listener with Debounce\nDESCRIPTION: Sets up a scroll event listener using useEffect and implements debounce from Lodash to limit how often the scroll event is triggered.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { debounce } from 'lodash'\n\nconst handleScroll = () => {\n  // Do stuff when scrolling\n}\n\nuseEffect(() => {\n  const handleDebouncedScroll = debounce(() => handleScroll(), 200)\n  window.addEventListener('scroll', handleDebouncedScroll)\n  return () => {\n    window.removeEventListener('scroll', handleDebouncedScroll)\n  }\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Breeze Authentication\nDESCRIPTION: Commands to install Laravel Breeze starter kit for authentication features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require laravel/breeze --dev\nphp artisan breeze:install\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Meetup Event Details in YAML\nDESCRIPTION: YAML frontmatter configuration that defines the metadata for a Supabase community meetup in Bucharest, Romania. Includes event title, date/time, duration, timezone, and external registration link.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_events/2024-09-05__launch-week-12-meetup-bucharest-romania.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Supabase Launch Week 12 Meetup: Bucharest, Romania'\nsubtitle: 'Join the community in Romania'\ntype: 'meetup'\nonDemand: false\ndisable_page_build: true\nlink: { href: https://lu.ma/x910h8kb, target: '_blank' }\ndate: '2024-09-05T18:00:00.000+02:00'\ntimezone: 'Europe/Belgrade'\nduration: '2 hours'\ncategories:\n  - meetup\n---\n```\n\n----------------------------------------\n\nTITLE: Signing In with Phone using OTP in v0 vs v1\nDESCRIPTION: Shows the change in the process for signing in with a phone number using OTP. In v1, the process is split into two steps: requesting OTP and verifying OTP.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = await supabase.auth.signIn(phone: phone);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOtp(\n  phone: phone,\n);\n\n// After receiving a SMS with a OTP.\nawait supabase.auth.verifyOTP(\n  type: OtpType.sms,\n  token: token,\n  phone: phone,\n);\n```\n\n----------------------------------------\n\nTITLE: Connection Message Format in Realtime Protocol\nDESCRIPTION: Initial connection message format where client specifies desired features including Broadcast, Presence, and Postgres Changes. Includes configuration options for each feature type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"phx_join\",\n   \"topic\": string,\n   \"payload\": {\n      \"config\": {\n         \"broadcast\": {\n            \"self\": boolean\n         },\n         \"presence\": {\n            \"key\": string\n         },\n         \"postgres_changes\": [\n            {\n               \"event\": \"*\" | \"INSERT\" | \"UPDATE\" | \"DELETE\",\n               \"schema\": string,\n               \"table\": string,\n               \"filter\": string + '=' + \"eq\" | \"neq\" | \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"in\" +  '.' + string\n            }\n         ]\n      }\n   },\n   \"ref\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, pnpm, or bun. After running any of these commands, you can access your application at http://localhost:3000.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-react-query-nextjs-14/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Deploying the Function with Supabase CLI\nDESCRIPTION: Command for deploying the T-shirt competition function using the Supabase CLI without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/get-tshirt-competition/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy --no-verify-jwt get-tshirt-competition\n```\n\n----------------------------------------\n\nTITLE: Querying Timezone Information in Postgres SQL\nDESCRIPTION: This SQL query retrieves a full list of timezones supported by the database. It returns the name, abbreviation, UTC offset, and daylight savings status for each timezone.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/configuration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect name, abbrev, utc_offset, is_dst\nfrom pg_timezone_names()\norder by name;\n```\n\n----------------------------------------\n\nTITLE: Advanced Supabase Query Examples\nDESCRIPTION: Examples of different query operators in Supabase including or, is, in, and neq operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// or\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .or('id.eq.20,id.eq.30')\n\n// is\nconst { data, error } = await supabase.from('cities').select('name, country_id').is('name', null)\n\n// in\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .in('name', ['Rio de Janeiro', 'San Francisco'])\n\n// neq (not equal to)\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .neq('name', 'The shire')\n\n// full docs here: /docs/reference/javascript/filter\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication Service\nDESCRIPTION: Authentication service methods for handling magic link sign-in and session management with platform-specific redirect URLs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n  signInWithEmail(email: string) {\n    const redirectTo = isPlatform(\"capacitor\")\n      ? \"supachat://login\"\n      : `${window.location.origin}/groups`;\n\n    return this.supabase.auth.signInWithOtp({\n      email,\n      options: { emailRedirectTo: redirectTo },\n    });\n  }\n\n  async setSession(access_token, refresh_token) {\n    return this.supabase.auth.setSession({ access_token, refresh_token });\n  }\n```\n\n----------------------------------------\n\nTITLE: Bad SVG Example for Icons\nDESCRIPTION: This SVG snippet illustrates how not to structure an SVG for icon components, highlighting issues like inline styling for fill and stroke that should be handled at the parent SVG level for better control.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/icons/README.md#2025-04-21_snippet_2\n\nLANGUAGE: svg\nCODE:\n```\n<svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <rect <-- silly backgrounds figma adds in\n            width=\"24\"\n            height=\"24\"\n            fill=\"#1E1E1E\"\n        />\n        <path <--  silly backgrounds figma adds in\n            d=\"M-20439\n            -11141C-20439...\"\n            fill=\"#404040\"\n        />\n        <path\n            d=\"M-20437 -11142H12131V-11144H-20437V-11142ZM12132 ....\"\n            fill=\"white\"\n            fill-opacity=\"0.1\"\n        />\n        <path\n            d=\"M22.8437 8.69499L19.5369 12.0018L22.8438 15.3086...\"\n            stroke=\"#EDEDED\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n        />\n        <rect\n            x=\"0.5\"\n            y=\"14.0625\"\n            width=\"16\"\n            height=\"8\"\n            rx=\"1\"\n            stroke=\"#EDEDED\"\n            stroke-linejoin=\"round\"\n        />\n        <rect\n            x=\"0.5\"\n            y=\"1.9375\"\n            width=\"16\"\n            height=\"8\"\n            rx=\"1\"\n            stroke=\"#EDEDED\"\n            stroke-linejoin=\"round\"\n        />\n</svg>\n\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed Implementation - HTML\nDESCRIPTION: HTML iframe implementation for embedding a YouTube video demo with security and functionality attributes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-01-02-supabase-beta-december-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/ofSm4BJkZ1g\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Oriole Storage Extension in Postgres\nDESCRIPTION: Example of how to enable the orioledb extension and create a table using the orioledb storage engine. This demonstrates the drop-in replacement capability using Postgres' Table Access Method APIs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-acquires-oriole.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension orioledb; -- enable the extension\n\ncreate table posts (\n  id int8 not null,\n  title text not null,\n  body text not null,\n  primary key (id)\n) using orioledb;    -- Specify the storage format\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase\nDESCRIPTION: This bash script sets up environment variables for your Supabase project by retrieving the URL and anon key from the project's API settings. These are placed in a `.env.local` file for secure configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Find these in your Supabase project settings https://supabase.com/dashboard/project/_/settings/api\nPUBLIC_SUPABASE_URL=https://your-project.supabase.co\nPUBLIC_SUPABASE_ANON_KEY=your-anon-key\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Windows\nDESCRIPTION: JSON configuration for running an MCP server on Windows using cmd to execute the Postgres server module. Includes Windows-specific command structure with cmd /c prefix.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_postgres_config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"cmd\",\n      \"args\": [\"/c\", \"npx\", \"-y\", \"@modelcontextprotocol/server-postgres\", \"<connection-string>\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Links in JavaScript\nDESCRIPTION: This code snippet defines an array of integration links with their names, descriptions, and URLs. It's used to populate a grid of integration options in the documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const integrations = [\n  {\n    name: 'OpenAI',\n    description:\n      'OpenAI is an AI research and deployment company. Supabase provides a simple way to use OpenAI in your applications.',\n    href: '/guides/ai/examples/building-chatgpt-plugins',\n  },\n  {\n    name: 'Amazon Bedrock',\n    description:\n      'A fully managed service that offers a choice of high-performing foundation models from leading AI companies.',\n    href: '/guides/ai/integrations/amazon-bedrock',\n  },\n  {\n    name: 'Hugging Face',\n    description:\n      \"Hugging Face is an open-source provider of NLP technologies. Supabase provides a simple way to use Hugging Face's models in your applications.\",\n    href: '/guides/ai/hugging-face',\n  },\n  {\n    name: 'LangChain',\n    description:\n      'LangChain is a language-agnostic, open-source, and self-hosted API for text translation, summarization, and sentiment analysis.',\n    href: '/guides/ai/langchain',\n  },\n  {\n    name: 'LlamaIndex',\n    description: 'LlamaIndex is a data framework for your LLM applications.',\n    href: '/guides/ai/integrations/llamaindex',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using Node Built-in APIs in Supabase Edge Function\nDESCRIPTION: This example showcases how to use Node.js built-in APIs within a Supabase Edge Function. It demonstrates importing and using the crypto, http, and process modules to generate random strings and create a simple HTTP server.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { randomBytes } from \"node:crypto\";\nimport { createServer } from \"node:http\";\nimport process from \"node:process\";\n\nconst generateRandomString = (length) => {\n    const buffer = randomBytes(length);\n    return buffer.toString('hex');\n};\n\nconst randomString = generateRandomString(10);\nconsole.log(randomString);\n\nconst server = createServer((req, res) => {\n    const message = `Hello`;\n    res.end(message);\n});\n\nserver.listen(9999);\n```\n\n----------------------------------------\n\nTITLE: Creating and querying database records using Rails models\nDESCRIPTION: Demonstrates creating a new Article record and saving it to the database, then querying all Article records. This shows how Active Record models provide an object-oriented interface to the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\narticle = Article.new(title: \"Hello Rails\", body: \"I am on Rails!\")\narticle.save # Saves the entry to the database\n\nArticle.all\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Client Library\nDESCRIPTION: Command to navigate to the React app directory and install the Supabase JavaScript client. This library provides methods for interacting with your Supabase backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app && npm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Setting Up RLS Testing Environment in SQL\nDESCRIPTION: This SQL snippet sets up the environment for testing RLS performance. It sets the session role to authenticated and configures JWT claims for the test user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nset session role authenticated;\nset request.jwt.claims to '{\"role\":\"authenticated\", \"sub\":\"5950b438-b07c-4012-8190-6ce79e4bd8e5\"}';\n\nexplain analyze SELECT count(*) FROM rlstest;\nset session role postgres;\n```\n\n----------------------------------------\n\nTITLE: Implementing Resumable Uploads with tus-py-client in Python\nDESCRIPTION: This snippet shows how to use tus-py-client to implement resumable uploads in Python. It includes setup for Supabase authentication and configuration for the TUS protocol.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BufferedReader\nfrom tusclient import client\nfrom supabase import create_client\n\ndef upload_file(\n    bucket_name: str, file_name: str, file: BufferedReader, access_token: str\n):\n    # create Tus client\n    my_client = client.TusClient(\n        f\"{supabase_url}/storage/v1/upload/resumable\",\n        headers={\"Authorization\": f\"Bearer {access_token}\", \"x-upsert\": \"true\"},\n    )\n    uploader = my_client.uploader(\n        file_stream=file,\n        chunk_size=(6 * 1024 * 1024),\n        metadata={\n            \"bucketName\": bucket_name,\n            \"objectName\": file_name,\n            \"contentType\": \"image/png\",\n            \"cacheControl\": \"3600\",\n        },\n    )\n    uploader.upload()\n\n# create client and sign in\nsupabase = create_client(supabase_url, supabase_key)\n\n# retrieve the current user's session for authentication\nsession = supabase.auth.get_session()\n\n# open file and send file stream to upload\nwith open(\"./assets/40mb.jpg\", \"rb\") as fs:\n    upload_file(\n        bucket_name=\"assets\",\n        file_name=\"large_file\",\n        file=fs,\n        access_token=session.access_token,\n    )\n```\n\n----------------------------------------\n\nTITLE: Checking IPv6 Network Compatibility\nDESCRIPTION: Shell command to verify IPv6 network compatibility by attempting to retrieve the IPv6 address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -6 https://ifconfig.co/ip\n```\n\n----------------------------------------\n\nTITLE: Querying System Variables in Postgres\nDESCRIPTION: SQL query to view all system variables in Postgres. This query retrieves all settings from the pg_settings table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n-- view system variables\nselect * from pg_settings;\n```\n\n----------------------------------------\n\nTITLE: Creating Database with Custom Encoding\nDESCRIPTION: SQL commands demonstrating successful and unsuccessful attempts to create databases with custom encoding settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Will succeed\nCREATE DATABASE new_db_name TEMPLATE template0 ENCODING 'SQL_ASCII';\n\n-- Will return an error\nCREATE DATABASE new_db_name ENCODING 'SQL_ASCII';\n```\n\n----------------------------------------\n\nTITLE: Creating Partitioned Parent Tables for Chat Application in PostgreSQL\nDESCRIPTION: This SQL snippet creates the schema and parent tables for a chat application, implementing range partitioning by creation date. It includes the 'chats' and 'chat_messages' tables with composite primary keys and appropriate indexing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nCREATE SCHEMA app;\n\nCREATE TABLE app.chats(\n    id bigserial,\n    created_at timestamptz NOT NULL DEFAULT now(),\n    PRIMARY KEY (id, created_at)  -- the partition column must be part of pk\n    ) PARTITION BY RANGE (created_at);\n\nCREATE INDEX \"chats_created_at\" ON app.chats (created_at);\n\nCREATE TABLE app.chat_messages(\n    id bigserial,\n    created_at timestamptz NOT NULL,\n    chat_id bigint NOT NULL,\n    chat_created_at timestamptz NOT NULL,\n    message text NOT NULL,\n    PRIMARY KEY (id, created_at),\n    FOREIGN KEY (chat_id, chat_created_at)   -- multicolumn fk to ensure\n        REFERENCES app.chats(id, created_at)\n    ) PARTITION BY RANGE (created_at);\n\nCREATE INDEX \"chat_messages_created_at\" ON app.chat_messages (created_at);\n--\n-- need this index on the fk source to lookup messages by parent\n--\nCREATE INDEX \"chat_messages_chat_id_chat_created_at\"\n    ON app.chat_messages (chat_id, chat_created_at);\n```\n\n----------------------------------------\n\nTITLE: Testing PostgreSQL Column Properties\nDESCRIPTION: pgTAP tests to verify column existence and primary key constraints. Tests multiple column properties within a single transaction.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nselect plan( 2 );\n\nselect has_column( 'profiles', 'id' ); -- test that the \"id\" column exists in the \"profiles\" table\nselect col_is_pk( 'profiles', 'id' ); -- test that the \"id\" column is a primary key\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Confirmation Endpoint in SvelteKit with Supabase\nDESCRIPTION: A server-side endpoint that exchanges a token_hash for a session. It handles verification of one-time passwords, stores the session in cookies, and redirects users to the appropriate page based on the authentication result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/auth/confirm/+server.ts\nimport type { EmailOtpType } from '@supabase/supabase-js'\nimport { redirect } from '@sveltejs/kit'\n\nimport type { RequestHandler } from './$types'\n\nexport const GET: RequestHandler = async ({ url, locals: { supabase } }) => {\n  const token_hash = url.searchParams.get('token_hash')\n  const type = url.searchParams.get('type') as EmailOtpType | null\n  const next = url.searchParams.get('next') ?? '/account'\n\n  /**\n   * Clean up the redirect URL by deleting the Auth flow parameters.\n   *\n   * `next` is preserved for now, because it's needed in the error case.\n   */\n  const redirectTo = new URL(url)\n  redirectTo.pathname = next\n  redirectTo.searchParams.delete('token_hash')\n  redirectTo.searchParams.delete('type')\n\n  if (token_hash && type) {\n    const { error } = await supabase.auth.verifyOtp({ type, token_hash })\n    if (!error) {\n      redirectTo.searchParams.delete('next')\n      redirect(303, redirectTo)\n    }\n  }\n\n  redirectTo.pathname = '/auth/error'\n  redirect(303, redirectTo)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Component with Camera Integration and Supabase Storage\nDESCRIPTION: Implements an Avatar component that allows users to take photos using Capacitor Camera and upload them to Supabase Storage. The component also handles downloading and displaying existing avatar images.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IonIcon } from '@ionic/react';\nimport { person } from 'ionicons/icons';\nimport { Camera, CameraResultType } from '@capacitor/camera';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../supabaseClient';\nimport './Avatar.css'\nexport function Avatar({\n  url,\n  onUpload,\n}: {\n  url: string;\n  onUpload: (e: any, file: string) => Promise<void>;\n}) {\n  const [avatarUrl, setAvatarUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (url) {\n      downloadImage(url);\n    }\n  }, [url]);\n  const uploadAvatar = async () => {\n    try {\n      const photo = await Camera.getPhoto({\n        resultType: CameraResultType.DataUrl,\n      });\n\n      const file = await fetch(photo.dataUrl!)\n        .then((res) => res.blob())\n        .then(\n          (blob) =>\n            new File([blob], 'my-file', { type: `image/${photo.format}` })\n        );\n\n      const fileName = `${Math.random()}-${new Date().getTime()}.${\n        photo.format\n      }`;\n      const { error: uploadError } = await supabase.storage\n        .from('avatars')\n        .upload(fileName, file);\n      if (uploadError) {\n        throw uploadError;\n      }\n      onUpload(null, fileName);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const downloadImage = async (path: string) => {\n    try {\n      const { data, error } = await supabase.storage\n        .from('avatars')\n        .download(path);\n      if (error) {\n        throw error;\n      }\n      const url = URL.createObjectURL(data!);\n      setAvatarUrl(url);\n    } catch (error: any) {\n      console.log('Error downloading image: ', error.message);\n    }\n  };\n\n  return (\n    <div className=\"avatar\">\n    <div className=\"avatar_wrapper\" onClick={uploadAvatar}>\n      {avatarUrl ? (\n        <img src={avatarUrl} />\n      ) : (\n        <IonIcon icon={person} className=\"no-avatar\" />\n      )}\n    </div>\n\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Direct Connection String for Supabase PostgreSQL\nDESCRIPTION: Example of a direct connection string to a Supabase PostgreSQL database. This string uses an IPv6 address by default.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Example connection string\npostgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Embedded Video iFrame Implementation\nDESCRIPTION: Implementation of an embedded YouTube video player with specific configurations for security and playback options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-06-database-build-v2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/IQ8xqmht-gk\"\n    title=\"3 AI models tried to build my database\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Component in Angular\nDESCRIPTION: Creating an AuthComponent to handle user sign-in using magic link authentication with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core'\nimport { FormBuilder } from '@angular/forms'\nimport { SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css'],\n})\nexport class AuthComponent {\n  loading = false\n\n  signInForm = this.formBuilder.group({\n    email: '',\n  })\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly formBuilder: FormBuilder\n  ) {}\n\n  async onSubmit(): Promise<void> {\n    try {\n      this.loading = true\n      const email = this.signInForm.value.email as string\n      const { error } = await this.supabase.signIn(email)\n      if (error) throw error\n      alert('Check your email for the login link!')\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.signInForm.reset()\n      this.loading = false\n    }\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row flex-center flex\">\n  <div class=\"col-6 form-widget\" aria-live=\"polite\">\n    <h1 class=\"header\">Supabase + Angular</h1>\n    <p class=\"description\">Sign in via magic link with your email below</p>\n    <form [formGroup]=\"signInForm\" (ngSubmit)=\"onSubmit()\" class=\"form-widget\">\n      <div>\n        <label for=\"email\">Email</label>\n        <input\n          id=\"email\"\n          formControlName=\"email\"\n          class=\"inputField\"\n          type=\"email\"\n          placeholder=\"Your email\"\n        />\n      </div>\n      <div>\n        <button type=\"submit\" class=\"button block\" [disabled]=\"loading\">\n          {{ loading ? 'Loading' : 'Send magic link' }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project with bun\nDESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using bun.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbun init -y\nbun install prisma typescript ts-node @types/node --save-dev\n\nbunx tsc --init\n\nbunx prisma init\n```\n\n----------------------------------------\n\nTITLE: Creating Cal.com Event Types Foreign Table\nDESCRIPTION: SQL to create a foreign table that maps to Cal.com's event types. This allows querying available event types directly from Postgres using a JSON column to store all attributes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table cal.event_types (\n  attrs jsonb\n)\n  server cal_server\n  options (\n    object 'event-types'\n  );\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase in a Flutter Application\nDESCRIPTION: Main application file setup with Supabase initialization. It configures the Supabase client with project credentials and sets up the application's MaterialApp with proper theming and initial route to the login screen.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:myauthapp/screens/login_screen.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nvoid main() async {\n  /// TODO: update Supabase credentials with your own\n  await Supabase.initialize(\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_ANON_KEY',\n  );\n  runApp(const MyApp());\n}\n\nfinal supabase = Supabase.instance.client;\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter Auth',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: const LoginScreen(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase project with pnpm\nDESCRIPTION: This command initializes a Supabase project in the current repository using pnpm. It sets up the necessary configuration files for local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm supabase init\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting Supabase Locally with CLI\nDESCRIPTION: Commands to initialize and start the Supabase stack on a local machine using the CLI. These commands set up the project and launch the entire Supabase infrastructure locally.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Windows Deep Link Method Implementation (Flutter)\nDESCRIPTION: This C++ code snippet implements the `SendAppLinkToInstance` method in `win32_window.cpp`. It finds an existing window, dispatches the new link to it, restores the window to the front, and prevents the creation of another instance of the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nbool Win32Window::SendAppLinkToInstance(const std::wstring& title) {\n  // Find our exact window\n  HWND hwnd = ::FindWindow(kWindowClassName, title.c_str());\n\n  if (hwnd) {\n    // Dispatch new link to current window\n    SendAppLink(hwnd);\n\n    // (Optional) Restore our window to front in same state\n    WINDOWPLACEMENT place = { sizeof(WINDOWPLACEMENT) };\n    GetWindowPlacement(hwnd, &place);\n    switch(place.showCmd) {\n      case SW_SHOWMAXIMIZED:\n          ShowWindow(hwnd, SW_SHOWMAXIMIZED);\n          break;\n      case SW_SHOWMINIMIZED:\n          ShowWindow(hwnd, SW_RESTORE);\n          break;\n      default:\n          ShowWindow(hwnd, SW_NORMAL);\n          break;\n    }\n    SetWindowPos(0, HWND_TOP, 0, 0, 0, 0, SWP_SHOWWINDOW | SWP_NOSIZE | SWP_NOMOVE);\n    SetForegroundWindow(hwnd);\n    // END Restore\n\n    // Window has been found, don't create another one.\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Version Triggers in PostgreSQL\nDESCRIPTION: SQL triggers that detect changes in database schema to maintain schema versioning for pg_graphql caching\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION graphql.rebuild() RETURNS event_trigger\nLANGUAGE plpgsql AS\n$_$\nBEGIN\n  -- Note that this rebuilds the search path.\n  -- Schema version is incremented implicitly by trigger.\n  PERFORM graphql.resolve();\nEND;\n$_$;\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependency\nDESCRIPTION: Install the Supabase Flutter package using dart pub\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add supabase_flutter\n```\n\n----------------------------------------\n\nTITLE: Setting up Database Schema in Supabase SQL Editor\nDESCRIPTION: This SQL snippet creates the necessary tables and relationships for a product management system in Supabase. It defines tables for products, prices, and users, along with their respective columns and constraints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/kotlin_project_setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n<$Partial path=\"product_management_sql_template.mdx\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-Select Tree View Configuration\nDESCRIPTION: Configuration for enabling multi-selection functionality in the tree view component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tree-view.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TreeView\n  data={flattenTree(args.data)}\n  aria-label=\"directory tree\"\n  multiSelect\n  togglableSelect\n  clickAction=\"EXCLUSIVE_SELECT\"\n  // other options...\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Dart Auth Errors\nDESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in Dart. All errors are wrapped by the `AuthException` class. Errors are categorized into `AuthApiException` which comes from Supabase Auth API. The `AuthApiException` exception always has a `code` and `statusCode` property to identify the error and HTTP status code, respectively.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring Fetch-Retry Options\nDESCRIPTION: Configuration of fetch-retry with custom retry options including retry attempts, delay, and conditions\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchWithRetry = fetchRetry(fetch, {\n  retries: 3, // Number of retry attempts\n  retryDelay: (attempt) => Math.min(1000 * 2 ** attempt, 30000), // Exponential backoff\n  retryOn: [520], // Retry only on Cloudflare errors\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Edge Function\nDESCRIPTION: Commands for deploying the postgres-on-the-edge function and setting environment variables from a .env file\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/postgres-on-the-edge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy --no-verify-jwt postgres-on-the-edge\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file supabase/functions/postgres-on-the-edge/.env\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Instrument UI with RedwoodJS\nDESCRIPTION: Command to generate a CRUD UI for the Instrument model using RedwoodJS scaffolding feature.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw g scaffold instrument\n```\n\n----------------------------------------\n\nTITLE: Fixing Auth Migration Error with SQL Query\nDESCRIPTION: SQL query to resolve the 'operator does not exist: uuid = text' error in Supabase Auth. This query inserts a specific migration record into the auth.schema_migrations table to prevent the system from repeatedly attempting to run the problematic migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/an-invalid-response-was-received-from-the-upstream-server-error-when-querying-auth-RI4Vl-.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into auth.schema_migrations values ('20221208132122');\n```\n\n----------------------------------------\n\nTITLE: Installing vec2pg via pip\nDESCRIPTION: Command to install the vec2pg utility using Python's pip package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-vec2pg.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install vec2pg\n```\n\n----------------------------------------\n\nTITLE: pg_repack CLI command syntax\nDESCRIPTION: This shows the basic syntax for using the pg_repack CLI. The -k flag is included to skip the client-side superuser check, which is necessary for users on the Supabase platform.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_repack.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npg_repack -k [OPTION]... [DBNAME]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Angular Project for Supabase Trello Clone\nDESCRIPTION: This bash script creates a new Angular project, generates necessary components and services, and installs required dependencies for the Supabase Trello clone application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng new trelloBoard --routing --style=scss\ncd ./trelloBoard\n\n# Generate components and services\nng generate component components/login\nng generate component components/inside/workspace\nng generate component components/inside/board\n\nng generate service services/auth\nng generate service services/data\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Module in TypeScript\nDESCRIPTION: Example of importing an npm module using the npm: specifier in Supabase Edge Functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'npm:@supabase/supabase-js@2'\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Settings Table in SQL\nDESCRIPTION: SQL code to create a table for storing organization settings with SSO provider information and other metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table organization_settings (\n  -- the organization's unique ID\n  id uuid not null primary key,\n  -- the organization's SSO identity provider\n  sso_provider_id uuid unique,\n  -- name of the organization\n  name text,\n  -- billing plan (paid, Free, Enterprise)\n  billing_plan text\n);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Quality with Supabase Storage in Swift\nDESCRIPTION: This snippet demonstrates downloading an image with reduced quality (50%) from a Supabase Storage bucket using the Swift client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\nlet data = try await supabase.storage.from(\"bucket\")\n  .download(\n    path: \"image.jpg\",\n    options: TransformOptions(\n      quality: 50\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal with Hidden Footer in JSX\nDESCRIPTION: Demonstrates how to render a modal without a footer using the ComponentPreview element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/modal.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"modal-hide-footer\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing MFA Enrollment Page in Flutter with QR Code\nDESCRIPTION: Creates an MFA enrollment page that generates and displays a QR code for authenticator app setup. Handles TOTP verification and includes copy-to-clipboard functionality for manual secret entry.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:flutter_svg/flutter_svg.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:mfa_app/main.dart';\nimport 'package:mfa_app/pages/auth/register_page.dart';\nimport 'package:mfa_app/pages/home_page.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MFAEnrollPage extends StatefulWidget {\n  static const route = '/mfa/enroll';\n  const MFAEnrollPage({super.key});\n\n  @override\n  State<MFAEnrollPage> createState() => _MFAEnrollPageState();\n}\n\nclass _MFAEnrollPageState extends State<MFAEnrollPage> {\n  final _enrollFuture = supabase.auth.mfa.enroll();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Setup MFA'),\n        actions: [\n          TextButton(\n            onPressed: () {\n              supabase.auth.signOut();\n              context.go(RegisterPage.route);\n            },\n            child: Text(\n              'Logout',\n              style: TextStyle(color: Theme.of(context).colorScheme.onPrimary),\n            ),\n          ),\n        ],\n      ),\n      body: FutureBuilder(\n        future: _enrollFuture,\n        builder: (context, snapshot) {\n          if (snapshot.hasError) {\n            return Center(child: Text(snapshot.error.toString()));\n          }\n          if (!snapshot.hasData) {\n            return const Center(child: CircularProgressIndicator());\n          }\n\n          final response = snapshot.data!;\n          final qrCodeUrl = response.totp.qrCode;\n          final secret = response.totp.secret;\n          final factorId = response.id;\n\n          return ListView(\n            padding: const EdgeInsets.symmetric(\n              horizontal: 20,\n              vertical: 24,\n            ),\n            children: [\n              const Text(\n                'Open your authentication app and add this app via QR code or by pasting the code below.',\n                style: TextStyle(\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n              const SizedBox(height: 16),\n              SvgPicture.string(\n                qrCodeUrl,\n                width: 150,\n                height: 150,\n              ),\n              const SizedBox(height: 16),\n              Row(\n                children: [\n                  Expanded(\n                    child: Text(\n                      secret,\n                      style: const TextStyle(\n                        fontWeight: FontWeight.bold,\n                        fontSize: 18,\n                      ),\n                    ),\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Clipboard.setData(ClipboardData(text: secret));\n                      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(\n                          content: Text('Copied to your clip board')));\n                    },\n                    icon: const Icon(Icons.copy),\n                  ),\n                ],\n              ),\n              const SizedBox(height: 16),\n              const Text('Enter the code shown in your authentication app.'),\n              const SizedBox(height: 16),\n              TextFormField(\n                decoration: const InputDecoration(\n                  hintText: '000000',\n                ),\n                style: const TextStyle(fontSize: 24),\n                textAlign: TextAlign.center,\n                keyboardType: TextInputType.number,\n                onChanged: (value) async {\n                  if (value.length != 6) return;\n\n                  try {\n                    final challenge =\n                        await supabase.auth.mfa.challenge(factorId: factorId);\n                    await supabase.auth.mfa.verify(\n                      factorId: factorId,\n                      challengeId: challenge.id,\n                      code: value,\n                    );\n                    await supabase.auth.refreshSession();\n                    if (mounted) {\n                      context.go(HomePage.route);\n                    }\n                  } on AuthException catch (error) {\n                    ScaffoldMessenger.of(context)\n                        .showSnackBar(SnackBar(content: Text(error.message)));\n                  } catch (error) {\n                    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(\n                        content: Text('Unexpected error occurred')));\n                  }\n                },\n              ),\n            ],\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Realtime Listener\nDESCRIPTION: JavaScript/React code that sets up a Supabase client to listen for broadcast events on a specific channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst id = 'id'\nawait supabase.realtime.setAuth() // Needed for Realtime Authorization\nconst changes = supabase\n  .channel(`topic:${id}`, {\n    config: { private: true },\n  })\n  .on('broadcast', { event: 'INSERT' }, (payload) => console.log(payload))\n  .on('broadcast', { event: 'UPDATE' }, (payload) => console.log(payload))\n  .on('broadcast', { event: 'DELETE' }, (payload) => console.log(payload))\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Email Template for User Sign-up Confirmation\nDESCRIPTION: Defines an HTML email template for user sign-up confirmation. It includes a link for users to confirm their email address, utilizing Supabase variables for dynamic content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/password-based-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h2>Confirm your signup</h2>\n\n<p>Follow this link to confirm your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}\"\n    >Confirm your email</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Logging in to Supabase CLI\nDESCRIPTION: Logs in to the Supabase CLI using a Personal Access Token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase login\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keys for Chart Tooltip in React/TSX\nDESCRIPTION: Demonstrates how to use custom keys for tooltip labels and names by providing labelKey and nameKey props to the ChartTooltipContent component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartTooltip content={<ChartTooltipContent labelKey=\"visitors\" nameKey=\"browser\" />} />\n```\n\n----------------------------------------\n\nTITLE: Signing In with Azure in Supabase (Flutter)\nDESCRIPTION: This snippet shows how to implement Azure OAuth sign-in within a Flutter application using the Supabase SDK. The code calls the `signInWithOAuth` method with Azure as the provider, optionally setting a redirect URI for non-web platforms.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signInWithAzure() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.azure,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat States with Dart\nDESCRIPTION: Defines the possible states for the chat system including initial, loaded, empty, and error states using immutable classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\npart of 'chat_cubit.dart';\n\n@immutable\nabstract class ChatState {}\n\nclass ChatInitial extends ChatState {}\n\nclass ChatLoaded extends ChatState {\n  ChatLoaded(this.messages);\n  final List<Message> messages;\n}\n\nclass ChatEmpty extends ChatState {}\n\nclass ChatError extends ChatState {\n  ChatError(this.message);\n  final String message;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs with Alphanumeric Ranges in Regular Expressions\nDESCRIPTION: Using character ranges to match specific sets of characters in the logs. This example matches any message containing a digit between 1 and 5 inclusive.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- find event_messages that contain a number between 1 and 5 (inclusive)\nregexp_contains(event_message, '[1-5]')\n```\n\n----------------------------------------\n\nTITLE: Setting Session-Level Timeout in Postgres\nDESCRIPTION: Sets a statement timeout at the session level that persists for the duration of the connection. This command sets a 10-minute timeout.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nset statement_timeout = '10min';\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for SupaSecureSlack in SQL\nDESCRIPTION: SQL commands to create the necessary tables for the chat application, including rooms, profiles, and rooms_users. These tables are used to manage chat rooms, user profiles, and room-user associations.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE public.rooms (\n    id bigint GENERATED BY default AS IDENTITY PRIMARY KEY,\n    topic text NOT NULL UNIQUE\n);\nALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;\n\nCREATE TABLE public.profiles (\n  id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,\n  email text NOT NULL,\n\n  PRIMARY KEY (id)\n);\nALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\n\nCREATE TABLE public.rooms_users (\n  user_id uuid REFERENCES auth.users (id),\n  room_topic text REFERENCES public.rooms (topic),\n  created_at timestamptz DEFAULT CURRENT_TIMESTAMP\n);\nALTER TABLE public.rooms_users ENABLE ROW LEVEL SECURITY;\n```\n\n----------------------------------------\n\nTITLE: Updating signIn with third-party provider in TypeScript\nDESCRIPTION: Example of how to update the signIn method for third-party provider authentication in supabase-js v2. The new version uses signInWithOAuth.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { error } = await supabase\n  .auth\n  .signInWithOAuth({ provider })\n```\n\n----------------------------------------\n\nTITLE: Creating SemVer Components Composite Type in SQL\nDESCRIPTION: Defines a composite type 'semver_components' to store individual components of a Semantic Version.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate type semver_components as (\n    major int,\n    minor int,\n    patch int,\n    pre_release text[],\n    build_metadata text[]\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Command Component Implementation in React\nDESCRIPTION: Example of using the Command component with various sub-components to create a command menu in React.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/command.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Inefficient Sequential Scans with High Filter Rates in PostgreSQL\nDESCRIPTION: Example of a sequential scan that filters out most rows (2997 out of 3000), indicating that an index on the filtered column (price) could significantly improve performance by avoiding a full table scan.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSeq Scan on products  (cost=0.00..100.00 rows=300 width=50) (actual time=50.000..100.000 rows=3 loops=1)\n   Filter: (price > 1000)\n   Rows Removed by Filter: 2997\n```\n\n----------------------------------------\n\nTITLE: Grouping Errors by Path and Code in Supabase Edge Logs (SQL)\nDESCRIPTION: This query groups errors by path and status code, counting occurrences for each combination. It filters for status codes 400 and above in the Database API, ordering results by the number of occurrences.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  status_code,\n  path,\n  count(path) as reoccurrence_per_path\nfrom\n  edge_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(response) as response\n  cross join unnest(request) as request\nwhere\n  -- find all errors\n  status_code >= 400\n  and regexp_contains(path, '^/rest/v1/') -- only look at DB API\ngroup by path, status_code\norder by reoccurrence_per_path;\n```\n\n----------------------------------------\n\nTITLE: Supavisor Session Mode Connection String\nDESCRIPTION: Example of a connection string for Supavisor in session mode, which uses port 5432. In this mode, clients retain their connection until voluntarily surrendered.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Example session string\npostgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Creating an Account Management Component with Refine and Supabase in TypeScript\nDESCRIPTION: This snippet creates a React component for managing user accounts. It uses Refine's useGetIdentity, useLogout, and useForm hooks to handle user data and authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseKey, useGetIdentity, useLogout } from '@refinedev/core'\nimport { useForm } from '@refinedev/react-hook-form'\n\ninterface IUserIdentity {\n  id?: BaseKey\n  username: string\n  name: string\n}\n\nexport interface IProfile {\n  id?: string\n  username?: string\n  website?: string\n  avatar_url?: string\n}\n\nexport default function Account() {\n  const { data: userIdentity } = useGetIdentity<IUserIdentity>()\n\n  const { mutate: logOut } = useLogout()\n\n  const {\n    refineCore: { formLoading, queryResult, onFinish },\n    register,\n    control,\n    handleSubmit,\n  } = useForm<IProfile>({\n    refineCoreProps: {\n      resource: 'profiles',\n      action: 'edit',\n      id: userIdentity?.id,\n      redirect: false,\n      onMutationError: (data) => alert(data?.message),\n    },\n  })\n\n  return (\n    <div className=\"container\" style={{ padding: '50px 0 100px 0' }}>\n      <form onSubmit={handleSubmit(onFinish)} className=\"form-widget\">\n        <div>\n          <label htmlFor=\"email\">Email</label>\n          <input id=\"email\" name=\"email\" type=\"text\" value={userIdentity?.name} disabled />\n        </div>\n        <div>\n          <label htmlFor=\"username\">Name</label>\n          <input id=\"username\" type=\"text\" {...register('username')} />\n        </div>\n        <div>\n          <label htmlFor=\"website\">Website</label>\n          <input id=\"website\" type=\"url\" {...register('website')} />\n        </div>\n\n        <div>\n          <button className=\"button block primary\" type=\"submit\" disabled={formLoading}>\n            {formLoading ? 'Loading ...' : 'Update'}\n          </button>\n        </div>\n\n        <div>\n          <button className=\"button block\" type=\"button\" onClick={() => logOut()}>\n            Sign Out\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependencies with Groovy Gradle\nDESCRIPTION: Adds Supabase module dependencies to a Kotlin project using Gradle with Groovy DSL. This includes the BOM for version management and specific modules like postgrest-kt, gotrue-kt, and realtime-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation platform(\"io.github.jan-tennert.supabase:bom:VERSION\")\nimplementation 'io.github.jan-tennert.supabase:postgrest-kt'\nimplementation 'io.github.jan-tennert.supabase:gotrue-kt'\nimplementation 'io.github.jan-tennert.supabase:realtime-kt'\n```\n\n----------------------------------------\n\nTITLE: Defining Word Embedding Vector for 'Mouse' in Python\nDESCRIPTION: This code snippet defines a 384-dimensional vector representation for the word 'Mouse'. The vector is represented as a tuple containing the word and a string of comma-separated float values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n('Mouse', '[-0.040377103,-0.022667758,0.040733587,-0.045248877,0.004549785,0.01920968,0.09860386,0.06337809,-0.014576411,-0.016547957,0.0043267845,-0.08727463,0.001282113,0.034992572,0.0030495469,-0.005252943,-0.030733703,0.028543305,-0.05340802,0.02134803,0.009926888,-0.041723635,-0.014660007,-0.08119687,-0.006314594,0.0060803755,-0.047911707,-0.05091576,-0.06703744,-0.12893848,-0.028729504,-0.08311065,0.02901125,-0.032763172,-0.016858876,-0.027138188,-0.0064179595,0.051359415,-0.036937356,0.0038320909,0.042311396,-0.0014249359,-0.035213996,-0.03742079,-0.0014664575,-0.06288964,-0.008702811,-0.07035538,0.060513493,-0.022340205,0.040802304,-0.061406795,0.031208003,0.0147732375,-0.003349924,0.06889083,0.05477272,0.015846154,0.026901418,0.053733137,0.0089147,0.039884243,-0.189687,0.11407487,0.06078271,0.01646154,-0.010769416,-0.032409113,0.0042888965,0.046524018,-0.026228016,0.034576327,0.016356785,0.041987386,0.016909229,-0.048567224,0.0051092454,-0.027669614,0.027950207,0.032748174,-0.0155055905,-0.010912961,-0.023338877,-0.035056524,-0.027904602,-0.014183707,-0.019453976,-0.04282588,0.042652052,-0.021886067,-0.060644917,0.002340001,-0.011412922,-0.02175079,-0.0628676,-0.020284368,0.028365277,-0.005381609,-0.06597562,0.2276179,-0.07204836,0.019287534,0.041096047,-0.008528844,0.053176265,-0.018938553,-0.024173811,0.004013408,-0.039964236,0.03459345,0.010588582,-0.012078534,0.04525789,0.040328942,0.056859862,-0.041445985,0.034563567,-0.0031516568,0.0024751956,0.02141297,0.03361259,0.02350541,0.01680798,-0.0155210495,0.053421624,-0.053505804,0.012133244,0.12967996,0.003512417,-0.0025171235,0.046476725,-0.021781605,-0.05417786,0.020584816,0.020197248,0.02124402,0.015991636,0.022962242,-0.0012403561,-0.019248111,-0.06310508,-0.08227882,0.020538509,-0.109149516,-0.007844497,0.061679017,0.008426173,-0.0001732398,-0.049548004,0.050724845,0.004618454,0.03646706,-0.01484994,0.0039252373,-0.001403416,0.0664071,0.044730082,0.056839943,-0.034704044,-0.004730838,-0.023692578,-0.041346386,-0.04952889,0.056637034,0.015446278,-0.052159145,-0.023077182,0.055139318,-0.008341107,-0.023459954,0.033917475,0.0136266155,-0.04708014,-0.02063184,0.010280838,-0.02531588,-0.030564599,-0.025114458,-0.013762015,-0.010960947,0.09357507,-0.03643072,-0.042957693,0.05346348,0.04329152,-0.031103479,0.021322457,-0.01522813,0.0045661125,0.0537702,0.03209306,0.021443458,0.026066622,-0.089546315,-0.034763128,-0.055409517,-0.0222944,-0.025723536,0.017936995,-0.04824363,0.060549878,-0.037808303,-0.02620794,0.055600144,0.022436464,0.042776663,0.01612469,-0.02875058,0.051428806,0.017573178,-0.034467857,-0.0077900384,0.07513873,-0.019162938,-0.06555969,-0.014434028,0.047275715,0.02736343,0.080187805,0.0610768,0.037875254,-0.05696084,-0.05987416,-0.19478716,0.017523922,0.02172921,-0.03269391,0.021612154,-0.023794834,0.038002275,-0.006948219,0.07060778,0.035000026,0.08414426,-0.03226489,0.005960691,0.019508546,-0.07250312,0.07385267,0.06994085,-0.0026967837,0.0037788237,-0.02082316,-0.022966592,0.033302892,-0.02538656,-0.051392157,0.01707558,-0.008380637,0.2414746,0.124691986,0.015465072,-0.0077904454,0.020838035,0.030270401,-0.017751623,-0.094773516,0.053050213,0.08594688,0.021123288,-0.02162361,-0.029895138,0.0005249808,-0.06582099,0.01703007,-0.024236333,-0.09378091,-0.026403174,-0.025289156,-0.037038643,0.0076490627,-0.022255246,0.028706118,0.02795358,-0.034890853,0.00032028902,-0.019587833,-0.038501434,-0.01807254,-0.06457782,-0.0017888489,-0.0064566033,0.021368807,0.0021709246,-0.061586574,-0.010555151,-0.044502374,0.033785746,-0.007822122,0.007395981,-0.03746442,0.064690515,-0.0509958,-0.041122936,0.08854608,0.053750817,-0.021349406,0.05115994,0.017185207,0.024272623,0.029618526,-0.035643056,-0.047882646,0.042593274,-0.0027154651,0.039761305,0.060229745,0.027780939,-0.034311175,0.045842495,-0.01091128,0.053926248,-0.0791733,-0.01993803,-0.009639867,-0.042199083,-0.055512805,-0.011045383,0.0026950783,-0.31714323,0.03781929,0.03368966,0.03852715,-0.011875669,0.0084579475,-0.011901843,0.011003005,-0.108379245,0.005903558,0.045323938,0.042683903,-0.040204156,0.031824812,0.01460879,0.0362605,0.023287812,-0.013861633,0.040758185,-0.07728433,0.044756882,0.03642765,0.24435243,-0.036999114,0.032329634,0.028380118,-0.024428038,-0.016580353,0.042322036,-0.035527807,0.0089394795,-0.019262306,0.101632625,-0.04122436,0.03479015,0.07982272,-0.05526763,0.07851163,0.008479268,-0.008245814,-0.021768505,0.02535241,-0.031347126,-0.047938507,0.10146795,-0.034345087,-0.047936875,-0.050744783,0.0011701895,4.4137156e-05,-0.06095025,-0.0023069785,-0.03405786,0.013980694,0.018927611,-0.023111442,0.025687002,-0.026432892,-0.008920023,0.0053275074,0.031403854,-0.016360547,0.003918425,0.007261948,0.041972917]')\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL View\nDESCRIPTION: Shows how to query the created view to retrieve all records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from transcripts;\n```\n\n----------------------------------------\n\nTITLE: Querying IP Address for Hostname using nslookup\nDESCRIPTION: This command uses nslookup to query domain name servers and find the IP address associated with a given hostname. It's useful for determining the current IP address of your database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-database-hostname-and-managing-your-ip-address-pVlwE0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnslookup hostname\n```\n\n----------------------------------------\n\nTITLE: Creating Table and Inserting Data as Junior Dev\nDESCRIPTION: Demonstrates creating a users table and inserting data as junior_dev role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> create table public.users(id serial primary key, name text);\nCREATE TABLE\npostgres=> insert into public.users(name) values ('john doe');\nINSERT 0 1\n```\n\n----------------------------------------\n\nTITLE: Running aggressive VACUUM FULL to reclaim disk space in PostgreSQL\nDESCRIPTION: This SQL command rebuilds a table completely to reclaim disk space. It requires an exclusive lock on the table, making it suitable for off-peak hours.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nVACUUM FULL mytable;\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Player for Direct SQL File Drop Demo in HTML\nDESCRIPTION: This HTML snippet embeds another video player to showcase the direct drop functionality for SQL files in database.build. It uses similar attributes to the previous video for consistent presentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-06-database-build-v2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video\n  className=\"overflow-hidden rounded-md border wide\"\n  width=\"99%\"\n  autoPlay\n  loop\n  muted\n  playsInline\n  controls={true}\n>\n  <source\n    src=\"/images/blog/launch-week-13/day-5-database-build-v2/drag-drop-sql-direct-drop.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Messages in Swift\nDESCRIPTION: This Swift code demonstrates how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'acknowledgeBroadcasts' config to true and sends a broadcast message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"room-3\") {\n  $0.broadcast.acknowledgeBroadcasts = true\n}\n\nawait myChannel.subscribe()\n\nawait myChannel.broadcast(event: \"acknowledge\", message: [:])\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Edge Function\nDESCRIPTION: Command to deploy a Supabase edge function with JWT verification disabled for the specified function\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw13-meetup-og/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy lw13-meetups-ogs --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN with supabase-js in JavaScript\nDESCRIPTION: Shows how to use the explain() transform in supabase-js to get the execution plan for a database query. This method works for all supabase-js operations, including select() and rpc().\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('projects')\n  .select('*')\n  .eq('id', 1)\n  .explain()\n\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Basic refine App component configuration with Supabase\nDESCRIPTION: React component that sets up the refine framework with Supabase data provider, live provider, and auth provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Refine, WelcomePage } from '@refinedev/core'\nimport { RefineKbar, RefineKbarProvider } from '@refinedev/kbar'\nimport routerBindings, {\n  DocumentTitleHandler,\n  UnsavedChangesNotifier,\n} from '@refinedev/react-router-v6'\nimport { dataProvider, liveProvider } from '@refinedev/supabase'\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\n\nimport './App.css'\nimport authProvider from './authProvider'\nimport { supabaseClient } from './utility'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <Refine\n          dataProvider={dataProvider(supabaseClient)}\n          liveProvider={liveProvider(supabaseClient)}\n          authProvider={authProvider}\n          routerProvider={routerBindings}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route index element={<WelcomePage />} />\n          </Routes>\n          <RefineKbar />\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Flutter Authentication\nDESCRIPTION: Command to install the Supabase Flutter SDK and Google Sign-in package needed for implementing authentication functionality in the Flutter application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nflutter pub add supabase_flutter google_sign_in\n```\n\n----------------------------------------\n\nTITLE: Fetching Repositories with a Provider Token in TypeScript\nDESCRIPTION: Similar to the JavaScript snippet, this TypeScript version demonstrates fetching repositories from GitHub using the provider token while ensuring type safety with proper annotations for user and repository data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User, createPagesServerClient } from '@supabase/auth-helpers-nextjs'\nimport { GetServerSidePropsContext } from 'next'\n\nexport default function ProtectedPage({ user, allRepos }: { user: User; allRepos: any }) {\n  return (\n    <>\n      <div>Protected content for {user.email}</div>\n      <p>Data fetched with provider token:</p>\n      <pre>{JSON.stringify(allRepos, null, 2)}</pre>\n      <p>user:</p>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n    </>\n  )\n}\n\nexport const getServerSideProps = async (ctx: GetServerSidePropsContext) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient(ctx)\n  // Check if we have a session\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  if (!session)\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n\n  // Retrieve provider_token & logged in user's third-party id from metadata\n  const { provider_token, user } = session\n  const userId = user.user_metadata.user_name\n\n  const allRepos = await (\n    await fetch(`https://api.github.com/search/repositories?q=user:${userId}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `token ${provider_token}`,\n      },\n    })\n  ).json()\n\n  return { props: { user, allRepos } }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Supabase client in root layout\nDESCRIPTION: This code creates a Supabase client in the root layout of a SvelteKit application. It differentiates between client-side and server-side environments, using `createBrowserClient` for the former and `createServerClient` for the latter, ensuring proper cookie handling on the server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'\nimport { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'\nimport type { LayoutLoad } from './$types'\n\nexport const load: LayoutLoad = async ({ data, depends, fetch }) => {\n  /**\n   * Declare a dependency so the layout can be invalidated, for example, on\n   * session refresh.\n   */\n  depends('supabase:auth')\n\n  const supabase = isBrowser()\n    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n        global: {\n          fetch,\n        },\n      })\n    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n        global: {\n          fetch,\n        },\n        cookies: {\n          getAll() {\n            return data.cookies\n          },\n        },\n      })\n\n  /**\n   * It's fine to use `getSession` here, because on the client, `getSession` is\n   * safe, and on the server, it reads `session` from the `LayoutData`, which\n   * safely checked the session using `safeGetSession`.\n   */\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  return { session, supabase, user }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types'\n\nexport const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {\n  const { session } = await safeGetSession()\n  return {\n    session,\n    cookies: cookies.getAll(),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Database Statistics in SQL\nDESCRIPTION: This query shows how to reset the statistics in a Postgres database, which can be useful when statistics become stale and affect query planning.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_stat_reset();\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data Using Swift\nDESCRIPTION: Shows how to use Supabase Swift client with AnyJSON type for inserting book records. Includes a Book struct definition and uses Swift's dictionary syntax for JSON data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct Book {\n    val title: String,\n    val author: String,\n    val metadata: [String: AnyJSON]\n}\n\ntry await supabase.from(\"books\")\n  .insert(\n    [\n      Book(\n        title: \"The Poky Little Puppy\",\n        author: \"Janette Sebring Lowrey\",\n        metadata: [\n          \"description\": \"Puppy is slower than other, bigger animals.\",\n          \"price\": 5.95,\n          \"ages\": [3, 6]\n        ]\n      ),\n      Book(\n        title: \"Tale of Peter Rabbit\",\n        author: \"Beatrix Potter\",\n        metadata: [\n          \"description\": \"Rabbit eats some vegetables.\",\n          \"price\": 4.49,\n          \"ages\": [2, 5]\n        ]\n      ),\n      Book(\n        title: \"Tootle\",\n        author: \"Gertrude Crampton\",\n        metadata: [\n          \"description\": \"Little toy train has big dreams.\",\n          \"price\": 3.99,\n          \"ages\": [2, 5]\n        ]\n      ),\n      Book(\n        title: \"Green Eggs and Ham\",\n        author: \"Dr. Seuss\",\n        metadata: [\n          \"description\": \"Sam has changing food preferences and eats unusually colored food.\",\n          \"price\": 7.49,\n          \"ages\": [4, 8]\n        ]\n      ),\n      Book(\n        title: \"Harry Potter and the Goblet of Fire\",\n        author: \"J.K. Rowling\",\n        metadata: [\n          \"description\": \"Fourth year of school starts, big drama ensues.\",\n          \"price\": 24.95,\n          \"ages\": [10, 99]\n        ]\n      )\n    ]\n  )\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Angular Trello Board Tutorial\nDESCRIPTION: Embeds a YouTube video tutorial about creating a realtime Trello board with Angular and Supabase, using an iframe element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-community-day.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/shv7uT_NM7Y?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sign Out using Supabase\nDESCRIPTION: This Swift snippet demonstrates how to sign out a user using Supabase's `signOut` method. It calls the `signOut` function to remove the user's session and local storage data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc signOut() async throws {\n  try await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Loading dat.gui Asynchronously in React\nDESCRIPTION: This code shows how to load the dat.gui library asynchronously to avoid 'window is not defined' errors in server-side rendering environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst init = async () => {\n  const dat = await import('dat.gui')\n  const gui = new dat.GUI()\n}\n\nuseEffect(() => {\n  init()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Performing Image Search\nDESCRIPTION: Example command for performing a vector similarity search using a text query.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/image_search/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run search \"bike in front of red brick wall\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module for Capacitor Maps\nDESCRIPTION: Module configuration to enable Capacitor native maps in Angular by adding CUSTOM_ELEMENTS_SCHEMA.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { IonicModule } from '@ionic/angular'\nimport { FormsModule } from '@angular/forms'\nimport { HomePage } from './home.page'\n\nimport { HomePageRoutingModule } from './home-routing.module'\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core'\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, HomePageRoutingModule],\n  declarations: [HomePage],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class HomePageModule {}\n```\n\n----------------------------------------\n\nTITLE: Revoking Public Function Execution in PostgreSQL\nDESCRIPTION: SQL command to revoke execution permissions of a function named 'foo' from PUBLIC role. This removes the default access that allows any role to execute the function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-can-i-revoke-execution-of-a-postgresql-function-2GYb0A.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nrevoke execute on function foo from public;\n```\n\n----------------------------------------\n\nTITLE: Querying DNS TXT Records for CTF Flag\nDESCRIPTION: Command to query the TXT records of a domain to find a hidden flag in the DNS configuration. This demonstrates how DNS records can contain information useful for reconnaissance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndig TXT miskatonicuniversity.us\n```\n\n----------------------------------------\n\nTITLE: Static Revalidation Configuration in Next.js\nDESCRIPTION: Sets up static page revalidation using the revalidate export variable to specify data freshness duration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport const revalidate = 60\n```\n\n----------------------------------------\n\nTITLE: Disabling Table Audit Tracking in PostgreSQL\nDESCRIPTION: SQL function call to disable audit tracking on a specified schema and table combination. Takes a regclass parameter representing the fully qualified table name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect audit.disable_tracking('<schema>.<table>'::regclass);\n```\n\n----------------------------------------\n\nTITLE: Adding SidebarRail Component for Toggle Functionality\nDESCRIPTION: Shows how to incorporate a SidebarRail component within the Sidebar structure, which can be used to toggle the sidebar state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarHeader />\n  <SidebarContent>\n    <SidebarGroup />\n  </SidebarContent>\n  <SidebarFooter />\n  <SidebarRail />\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Handling Supabase OAuth Callback and Token Exchange in TypeScript\nDESCRIPTION: This code snippet shows how to handle the OAuth callback from Supabase, exchange the authorization code for access and refresh tokens, and store them. It uses the PKCE flow and handles the callback securely.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/connect-supabase/oauth2/callback', async (ctx) => {\n  // Make sure the codeVerifier is present for the user's session.\n  const codeVerifier = ctx.state.session.get('codeVerifier') as string\n  if (!codeVerifier) throw new Error('No codeVerifier!')\n\n  // Exchange the authorization code for an access token.\n  const tokens = await fetch(config.tokenUri, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'application/json',\n      Authorization: `Basic ${btoa(`${config.clientId}:${config.clientSecret}`)}`,\n    },\n    body: new URLSearchParams({\n      grant_type: 'authorization_code',\n      code: ctx.request.url.searchParams.get('code') || '',\n      redirect_uri: config.redirectUri,\n      code_verifier: codeVerifier,\n    }),\n  }).then((res) => res.json())\n  console.log('tokens', tokens)\n\n  // Store the tokens in your DB for future use.\n\n  ctx.response.body = 'Success'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up MainActivity with Navigation in Jetpack Compose\nDESCRIPTION: A MainActivity implementation that sets up navigation between different screens in a Jetpack Compose application. It uses NavHost to define navigation routes for product listing, authentication, signup, and product details screens with Hilt for dependency injection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    @Inject\n    lateinit var supabaseClient: SupabaseClient\n\n    @OptIn(ExperimentalMaterial3Api::class)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ManageProductsTheme {\n                // A surface container using the 'background' color from the theme\n                val navController = rememberNavController()\n                val currentBackStack by navController.currentBackStackEntryAsState()\n                val currentDestination = currentBackStack?.destination\n                Scaffold { innerPadding ->\n                    NavHost(\n                        navController,\n                        startDestination = ProductListDestination.route,\n                        Modifier.padding(innerPadding)\n                    ) {\n                        composable(ProductListDestination.route) {\n                            ProductListScreen(\n                                navController = navController\n                            )\n                        }\n\n                        composable(AuthenticationDestination.route) {\n                            SignInScreen(\n                                navController = navController\n                            )\n                        }\n\n                        composable(SignUpDestination.route) {\n                            SignUpScreen(\n                                navController = navController\n                            )\n                        }\n\n                        composable(AddProductDestination.route) {\n                            AddProductScreen(\n                                navController = navController\n                            )\n                        }\n\n                        composable(\n                            route = \"${ProductDetailsDestination.route}/{${ProductDetailsDestination.productId}}\",\n                            arguments = ProductDetailsDestination.arguments\n                        ) { navBackStackEntry ->\n                            val productId =\n                                navBackStackEntry.arguments?.getString(ProductDetailsDestination.productId)\n                            ProductDetailsScreen(\n                                productId = productId,\n                                navController = navController,\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video iFrame in JSX\nDESCRIPTION: HTML iframe implementation for embedding a YouTube video player with specific security and feature settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-09-supabase-studio-3-0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/51tCMQPiitQ\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SolidJS Supabase Project\nDESCRIPTION: Command to install the necessary npm dependencies for the SolidJS Supabase user management project.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/solid-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry and Dependencies\nDESCRIPTION: Commands for setting up the Python environment using Poetry package manager and installing required dependencies.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/image_search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install poetry\npoetry shell\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Legend in React/TSX\nDESCRIPTION: Demonstrates how to implement a chart legend using the ChartLegend component with ChartLegendContent as its content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartLegend content={<ChartLegendContent />} />\n```\n\n----------------------------------------\n\nTITLE: Native Android Google Sign-In Implementation\nDESCRIPTION: Complete implementation of Google sign-in using Credential Manager in Android with Compose UI, including nonce generation and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun GoogleSignInButton() {\n    val coroutineScope = rememberCoroutineScope()\n    val context = LocalContext.current\n\n    val onClick: () -> Unit = {\n        val credentialManager = CredentialManager.create(context)\n\n        // Generate a nonce and hash it with sha-256\n        // Providing a nonce is optional but recommended\n        val rawNonce = UUID.randomUUID().toString() // Generate a random String. UUID should be sufficient, but can also be any other random string.\n        val bytes = rawNonce.toString().toByteArray()\n        val md = MessageDigest.getInstance(\"SHA-256\")\n        val digest = md.digest(bytes)\n        val hashedNonce = digest.fold(\"\") { str, it -> str + \"%02x\".format(it) } // Hashed nonce to be passed to Google sign-in\n\n\n        val googleIdOption: GetGoogleIdOption = GetGoogleIdOption.Builder()\n            .setFilterByAuthorizedAccounts(false)\n            .setServerClientId(\"WEB_GOOGLE_CLIENT_ID\")\n            .setNonce(hashedNonce) // Provide the nonce if you have one\n            .build()\n\n        val request: GetCredentialRequest = GetCredentialRequest.Builder()\n            .addCredentialOption(googleIdOption)\n            .build()\n\n        coroutineScope.launch {\n            try {\n                val result = credentialManager.getCredential(\n                    request = request,\n                    context = context,\n                )\n\n                val googleIdTokenCredential = GoogleIdTokenCredential\n                    .createFrom(result.credential.data)\n\n                val googleIdToken = googleIdTokenCredential.idToken\n\n                supabase.auth.signInWith(IDToken) {\n                    idToken = googleIdToken\n                    provider = Google\n                    nonce = rawNonce\n                }\n\n                // Handle successful sign-in\n            } catch (e: GetCredentialException) {\n                // Handle GetCredentialException thrown by `credentialManager.getCredential()`\n            } catch (e: GoogleIdTokenParsingException) {\n                // Handle GoogleIdTokenParsingException thrown by `GoogleIdTokenCredential.createFrom()`\n            } catch (e: RestException) {\n                // Handle RestException thrown by Supabase\n            } catch (e: Exception) {\n                // Handle unknown exceptions\n            }\n        }\n    }\n\n    Button(\n        onClick = onClick,\n    ) {\n        Text(\"Sign in with Google\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Custom Domain with Supabase CLI\nDESCRIPTION: Use the Supabase CLI to activate the custom domain for a project. This command finalizes the custom domain setup and makes it active for the Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase domains activate --project-ref abcdefghijklmnopqrst\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiplayer Example in React\nDESCRIPTION: This snippet renders a grid of multiplayer application examples using React. It maps over an array of example applications and uses the GlassPanel component to display their titles and descriptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndiv className=\"grid md:grid-cols-12 gap-4 not-prose\">\n  {[\n    {\n      name: 'Multiplayer.dev',\n      description: 'Mouse movements and chat messages.',\n      href: 'https://multiplayer.dev',\n    },\n  ].map((x) => (\n    <div className=\"col-span-12\" key={x.href}>\n      <Link href={x.href} passHref>\n        <GlassPanel title={x.name}>{x.description}</GlassPanel>\n      </Link>\n    </div>\n  ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using ExpandingTextArea Component in TSX\nDESCRIPTION: Demonstrates the basic usage of the ExpandingTextArea component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/expanding-textarea.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ExpandingTextArea />\n```\n\n----------------------------------------\n\nTITLE: Adapting Pagination for Next.js Link Component\nDESCRIPTION: Code diff showing the necessary changes to make the pagination component work with Next.js Link component instead of standard anchor tags.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/pagination.mdx#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ import Link from \"next/link\"\n\n- type PaginationLinkProps = ... & React.ComponentProps<\"a\">\n+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>\n\nconst PaginationLink = ({...props }: ) => (\n  <PaginationItem>\n-   <a>\n+   <Link>\n      // ...\n-   </a>\n+   </Link>\n  </PaginationItem>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Hono\nDESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for a Hono application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=your_supabase_project_url\nSUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Component with Collision Detection in Flutter Flame\nDESCRIPTION: Creates a Player class that extends PositionComponent with collision detection capabilities, health tracking, and position mirroring for multiplayer synchronization. Includes a child _Gauge component for displaying health status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flame/collisions.dart';\nimport 'package:flame/components.dart';\nimport 'package:flame_realtime_shooting/game/bullet.dart';\nimport 'package:flutter/material.dart';\n\nclass Player extends PositionComponent with HasGameRef, CollisionCallbacks {\n  Vector2 velocity = Vector2.zero();\n\n  late final Vector2 initialPosition;\n\n  Player({required bool isMe}) : _isMyPlayer = isMe;\n\n  /// Whether it's me or the opponent\n  final bool _isMyPlayer;\n\n  static const radius = 30.0;\n\n  @override\n  Future<void>? onLoad() async {\n    anchor = Anchor.center;\n    width = radius * 2;\n    height = radius * 2;\n\n    final initialX = gameRef.size.x / 2;\n    initialPosition = _isMyPlayer\n        ? Vector2(initialX, gameRef.size.y * 0.8)\n        : Vector2(initialX, gameRef.size.y * 0.2);\n    position = initialPosition;\n\n    add(CircleHitbox());\n    add(_Gauge());\n    await super.onLoad();\n  }\n\n  void move(Vector2 delta) {\n    position += delta;\n  }\n\n  void updateHealth(double healthLeft) {\n    for (final child in children) {\n      if (child is _Gauge) {\n        child._healthLeft = healthLeft;\n      }\n    }\n  }\n\n  @override\n  void onCollision(Set<Vector2> intersectionPoints, PositionComponent other) {\n    super.onCollision(intersectionPoints, other);\n    if (other is Bullet && _isMyPlayer != other.isMine) {\n      other.hasBeenHit = true;\n      other.removeFromParent();\n    }\n  }\n\n  /// returns the mirrored percent position of the player\n  /// to be broadcasted to other clients\n  Vector2 getMirroredPercentPosition() {\n    final mirroredPosition = gameRef.size - position;\n    return Vector2(mirroredPosition.x / gameRef.size.x,\n        mirroredPosition.y / gameRef.size.y);\n  }\n}\n\nclass _Gauge extends PositionComponent {\n  double _healthLeft = 1.0;\n\n  @override\n  FutureOr<void> onLoad() {\n    final playerParent = parent;\n    if (playerParent is Player) {\n      width = playerParent.width;\n      height = 10;\n      anchor = Anchor.centerLeft;\n      position = Vector2(0, 0);\n    }\n    return super.onLoad();\n  }\n\n  @override\n  void render(Canvas canvas) {\n    super.render(canvas);\n    canvas.drawRect(\n        Rect.fromPoints(\n          const Offset(0, 0),\n          Offset(width, height),\n        ),\n        Paint()..color = Colors.white);\n    canvas.drawRect(\n        Rect.fromPoints(\n          const Offset(0, 0),\n          Offset(width * _healthLeft, height),\n        ),\n        Paint()\n          ..color = _healthLeft > 0.5\n              ? Colors.green\n              : _healthLeft > 0.25\n                  ? Colors.orange\n                  : Colors.red);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor and Camera Packages for Ionic\nDESCRIPTION: This command installs the necessary packages for interacting with the device camera in an Ionic application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements @capacitor/camera\n```\n\n----------------------------------------\n\nTITLE: Importing InfoTooltip Component in React/TypeScript\nDESCRIPTION: This snippet shows how to import the InfoTooltip component from the 'ui' package. This is typically done at the top of a React component file where the InfoTooltip will be used.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/info-tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InfoTooltip } from 'ui'\n```\n\n----------------------------------------\n\nTITLE: Importing Aspect Ratio Component in React\nDESCRIPTION: This code snippet shows how to import the Aspect Ratio component along with Next.js Image component. It's the first step in using the Aspect Ratio component in your React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\n\nimport { AspectRatio } from '@/components/ui/aspect-ratio'\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Route Redirection in React\nDESCRIPTION: Creates an authenticated route component that checks the user's authentication status and redirects to the login page if unauthenticated. Uses Supabase client for authentication verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/password-based-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from \"react\"\nimport { createClient } from \"@supabase/supabase-js\"\n\nexport default function AuthenticatedRoute() {\n  useEffect(() => {\n    const checkAuth = async () => {\n      const client = createClient()\n      const { error } = await client.auth.getUser()\n\n      if (error) {\n        location.href = \"/login\"\n      }\n    }\n    checkAuth()\n  }, [])\n\n  return <div>Authenticated page</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Databases in PostgreSQL\nDESCRIPTION: SQL commands to create new databases within a PostgreSQL instance. This demonstrates that PostgreSQL is a Relational Database Management System (RDBMS) that can manage multiple databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE postgres;\nCREATE DATABASE another_database;\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Transformed Image in Dart\nDESCRIPTION: This snippet shows how to use the Supabase Dart client to get a public URL for a transformed image, specifying width and height.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal url = supabase.storage.from('bucket').getPublicUrl(\n      'image.jpg',\n      transform: const TransformOptions(\n        width: 500,\n        height: 600,\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Importing Chart Tooltip Components in React/TSX\nDESCRIPTION: Shows how to import the ChartTooltip and ChartTooltipContent components for use in custom tooltips.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChartTooltip, ChartTooltipContent } from '@/components/ui/chart'\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch Sign-Out Code in Kotlin\nDESCRIPTION: This snippet describes how to use the Supabase Kotlin client to sign out the user who has authenticated with Twitch OAuth, ensuring that session information is cleared.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\\n\\tsupabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Privacy Policy Content in React\nDESCRIPTION: This code snippet demonstrates how to render the Privacy Policy content within a SectionContainer component. It includes markdown content for the privacy policy, including headers, paragraphs, and links.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SectionContainer>\n\n# Privacy Policy\n\n_Last Modified: 14 March 2025_\n\nPrevious Version: [9 Oct 2024](/privacy-241009)\n\nThank you for your interest in Supabase, Inc., (\"**_Supabase_**,\" \"**_we_**\", \"**_our_**\" or \"**_us_**\"). Supabase provides a suite of open source tools, stitched together to build a seamless developer experience. This Privacy Notice explains how information about you, that directly identifies you, or that makes you identifiable (\"**_personal information_**\") is collected, used and disclosed by Supabase in connection with our website at [supabase.com](https://supabase.com) (the \"**_Site_**\") and our services offered in connection with the Site (collectively with the Site, the \"**_Service_**\").\n\n## What Does This Privacy Notice Apply To?\n\nThis Privacy Notice explains how we use your personal information when you use the Service, either as an individual customer or when you access the Service through one of our enterprise customers' accounts. We are the data controller of your personal information when we use it as described in this Privacy Notice, meaning that we determine and are responsible for how your personal information is processed.\n\n// ... [rest of the privacy policy content] ...\n\n</SectionContainer>\n```\n\n----------------------------------------\n\nTITLE: AI Filter Request Interface\nDESCRIPTION: Defines the structure of the request body for the AI API endpoint. It includes a `prompt` (natural language query) and an array of `filterProperties` that the AI can use to generate structured filters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Request body\ninterface AIFilterRequest {\n  prompt: string // Natural language query\n  filterProperties: FilterProperty[] // Available filter properties\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Map Configuration to Use Edge Function\nDESCRIPTION: JavaScript code showing how to update the MapLibre GL configuration to use the private map file via a Supabase Edge Function instead of the public storage URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconst map = new maplibregl.Map({\n  hash: true,\n  container: 'map',\n  style: {\n    version: 8,\n    glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',\n    sources: {\n      protomaps: {\n        attribution:\n          '<a href=\"https://github.com/protomaps/basemaps\">Protomaps</a> © <a href=\"https://openstreetmap.org\">OpenStreetMap</a>',\n        type: 'vector',\n        url: 'pmtiles://https://<project_ref>.supabase.co/functions/v1/maps-private/my_area.pmtiles',\n      },\n    },\n    layers: protomaps_themes_base.default('protomaps', 'dark'),\n  },\n})\n// ...\n```\n\n----------------------------------------\n\nTITLE: Sign In with Figma OAuth - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to sign in a user with Figma OAuth using the Supabase client library. It calls the signInWith method with Figma as the Provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithFigma() {\n\tsupabase.auth.signInWith(Figma)\n}\n```\n\n----------------------------------------\n\nTITLE: Using RealtimeChat Component with Initial Messages in React\nDESCRIPTION: Shows how to use the RealtimeChat component with pre-loaded messages from a custom hook.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-chat.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" messages={messages} />\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In Anonymously with Kotlin in Supabase\nDESCRIPTION: Creates an anonymous user authentication session using the Supabase Kotlin SDK. This allows users to access authenticated features without providing personal information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.signInAnonymously()\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN VERBOSE with Query ID in PostgreSQL 14\nDESCRIPTION: Shows how to use the EXPLAIN VERBOSE statement to view the query plan along with the new query_id. This is useful for query performance analysis and troubleshooting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nexplain (verbose, costs off)\nselect schemaname, tablename\nfrom pg_tables, pg_sleep(5)\nwhere schemaname <> 'pg_catalog';\n```\n\n----------------------------------------\n\nTITLE: Listening to Auth State Changes in v0 vs v1\nDESCRIPTION: Demonstrates the change in listening to auth state changes. In v1, onAuthStateChange returns a Stream instead of a subscription object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal authSubscription = supabase.auth.onAuthStateChange((event, session) {\n  // handle auth state change\n});\n\n// Unsubscribe when no longer needed\nauthSubscription.data?.unsubscribe();\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal authSubscription = supabase.auth.onAuthStateChange.listen((data) {\n      final AuthChangeEvent event = data.event;\n      final Session? session = data.session;\n      // handle auth state change\n    });\n\n// Unsubscribe when no longer needed\nauthSubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Direct Database Connection String Format\nDESCRIPTION: Example of a direct connection string for Supabase database. Uses IPv6 by default unless IPv4 Add-On is enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ipv4-address.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npostgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Increasing Pool Timeout for Prisma\nDESCRIPTION: Demonstrates how to increase the pool_timeout to 30 seconds in the Prisma connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n.../postgres?pool_timeout=30\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Task in Workflows YAML\nDESCRIPTION: YAML configuration for setting up an email task within a Workflow. Specifies the email service parameters including API key, template ID, and dynamic payload mapping.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSendEmail:\n  Type: Task\n  Next: Complete\n  Resource: my-email-service\n  Parameters:\n    api_key: my-api-key\n    template_id: welcome-email\n    payload:\n      name.$: '$.record.name'\n      email.$: '$.record.email'\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Resend with Supabase\nDESCRIPTION: Command to copy the example environment file to create a local .env file for storing the Resend API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-resend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Adding SVG Package\nDESCRIPTION: Install the flutter_svg package for displaying QR codes\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add flutter_svg\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Creating an environment file to store Supabase API URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SUPABASE_URL=YOUR_SUPABASE_URL\nVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Displaying Video Content with HTML5 Video Element\nDESCRIPTION: HTML code for embedding a video player to demonstrate Supabase's relational data drilling feature. The video is loaded from Supabase storage with controls enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/relational-drilldown-zoom.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Multi-Range Column in PostgreSQL 14\nDESCRIPTION: Creates a table to store sensor reading metric data, including a column using the new multi-range data type. This demonstrates the ability to store non-contiguous ranges in a single column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table sensor_range (\n  reading_id serial primary key,\n  metric_desc varchar(100),\n  metric_level valid_levels,\n  metric_ts tsmultirange\n);\n```\n\n----------------------------------------\n\nTITLE: FilterCondition Interface Definition\nDESCRIPTION: Defines the `FilterCondition` interface, representing a single filter condition with a `propertyName`, `value`, and `operator`. The `value` can be a string, number, boolean, or Date, depending on the type of the property being filtered.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ninterface FilterCondition {\n  propertyName: string\n  value: string | number | boolean | Date\n  operator: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase MCP Server for macOS\nDESCRIPTION: JSON configuration for running the Supabase MCP server on macOS. It specifies the command as 'npx' and includes arguments for installing and running the latest version of the server with a personal access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--access-token\",\n        \"<personal-access-token>\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Move object in the same bucket using Supabase\nDESCRIPTION: Moves an object within the same bucket using the Supabase storage API. This snippet shows how to use the `move` method to relocate an object from one path to another within the same bucket.  The original object is deleted after the move. Requires `@supabase/supabase-js` and a valid Supabase client instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst { data, error } = await supabase.storage\n  .from('avatars')\n  .move('public/avatar1.png', 'private/avatar2.png')\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Replication Status\nDESCRIPTION: SQL commands to check existing replication slots and subscriptions in the database. These queries help identify what needs to be dropped before a backup restoration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/failed-to-restore-from-backup-all-subscriptions-and-replication-slots-must-be-dropped-before-a-backup-can-be-restored-L-rCvt.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pg_replication_slots;\n\nSELECT * FROM pg_subscription;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Table for User Metadata in Supabase\nDESCRIPTION: This SQL snippet shows how to create a custom table named `user_metadata` in the `private` schema to store user-specific metadata. The table includes a foreign key relationship to the `auth.users` table, ensuring data integrity.  It allows for flexible storage of user data beyond the default `raw_user_meta_data` and `raw_app_meta_data` fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table private.user_metadata (\n\tid int generated always as identity,\n\tuser_id uuid references auth.users(id) on delete cascade,\n\tuser_metadata jsonb\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI dependency for the select component manually.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-select\n```\n\n----------------------------------------\n\nTITLE: Build Commands\nDESCRIPTION: Command to build the project using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/hono/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table Example with SQL\nDESCRIPTION: Example of a simple table creation that generates an audit log entry\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate table account (\n  id int primary key,\n  name text,\n  description text\n);\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Image Component with Supabase Loader\nDESCRIPTION: This snippet demonstrates how to use the Next.js Image component with the custom Supabase loader for image optimization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport Image from 'next/image'\n\nconst MyImage = (props) => {\n  return <Image src=\"bucket/image.png\" alt=\"Picture of the author\" width={500} height={500} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Enum Column\nDESCRIPTION: Shows how to create a table that uses the previously defined mood enum type as a column constraint.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table person (\n  id serial primary key,\n  name text,\n  current_mood mood\n);\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for React Native Expo project\nDESCRIPTION: Command to install the necessary dependencies for the React Native application with Expo.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/expo-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Player for SQL File Drag and Drop Demo in HTML\nDESCRIPTION: This HTML snippet embeds a video player to demonstrate the new drag and drop functionality for SQL files in database.build. It includes autoplay, loop, and muted attributes for a seamless demo experience.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-06-database-build-v2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video\n  className=\"overflow-hidden rounded-md border wide !mb-8\"\n  width=\"99%\"\n  autoPlay\n  loop\n  muted\n  playsInline\n  controls={true}\n>\n  <source\n    src=\"/images/blog/launch-week-13/day-5-database-build-v2/drag-drop-sql-clip.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Adding User-Defined Descriptions in SQL\nDESCRIPTION: This SQL snippet demonstrates how to add user-defined descriptions to tables and columns using the comment directive system in pg_graphql v1.2. It creates a 'book' table and adds descriptions to both the table and its 'title' column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.book(\n    id int primary key,\n    title text not null\n);\n\ncomment on table public.book\nis e'@graphql({\"description\": \"a library book\"}';\n\ncomment on column public.book.title\nis e'@graphql({\"description\": \"the title of the book\"}';\n```\n\n----------------------------------------\n\nTITLE: Popping Messages\nDESCRIPTION: Reads and immediately deletes a single message from the queue.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.pop('my_queue');\n```\n\n----------------------------------------\n\nTITLE: Migrating Deno API Types\nDESCRIPTION: Example of updating deprecated Deno.Closer type to use the Standard Library's Closer type\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Closer } from \"jsr:@std/io/types\";\nfunction foo(closer: Closer) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Dark Supabase Badge in Markdown\nDESCRIPTION: This snippet provides the Markdown code to embed a 'Made with Supabase' dark badge into a document. It links to the Supabase website.\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.tr.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Made with Supabase](https://supabase.com/badge-made-with-supabase-dark.svg)](https://supabase.com)\n```\n\n----------------------------------------\n\nTITLE: Async Auth Session Retrieval in TypeScript\nDESCRIPTION: Shows the new async method for retrieving the auth session in supabase-js v2, which helps solve race conditions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst { data } = await supabase.auth.getSession()\n\n// v1\nconst { data } = supabase.auth.session()\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Side Position\nDESCRIPTION: Demonstrates how to position the sidebar on either the left or right side of the screen using the side prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from '@/components/ui/sidebar'\n\nexport function AppSidebar() {\n  return <Sidebar side=\"left | right\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Amazon Bedrock client\nDESCRIPTION: Python code to initialize the boto3 client for Amazon Bedrock with AWS credentials and region.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbedrock_client = boto3.client(\n    'bedrock-runtime',\n    region_name='us-west-2',\n    # Credentials from your AWS account\n    aws_access_key_id='<replace_your_own_credentials>',\n    aws_secret_access_key='<replace_your_own_credentials>',\n    aws_session_token='<replace_your_own_credentials>',\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying RDS Preloaded Libraries\nDESCRIPTION: SQL command to show preloaded libraries in an RDS PostgreSQL instance, which reveals the rdsutils extension responsible for protecting reserved roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nshow shared_preload_libraries;\n\n  shared_preload_libraries\n-----------------------------\n rdsutils,pg_stat_statements\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase\nDESCRIPTION: Environment configuration for connecting to Supabase backend, including the database URL and anonymous API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-auth-presence/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=<<insert-your-db-url-here>>\n\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<<insert-your-anon-key-here>>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Next.js Application\nDESCRIPTION: Command to start the Next.js development server for the user management application. This runs the application on localhost:3000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Carousel with Custom Options\nDESCRIPTION: Example of passing custom options to the carousel using the opts prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel\n  opts={{\n    align: 'start',\n    loop: true,\n  }}\n>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Infinite Scroll Project\nDESCRIPTION: Installs required npm packages for the infinite scroll project, including Supabase client, Lodash for debounce function, and Framer Motion for animations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js lodash framer-motion\n```\n\n----------------------------------------\n\nTITLE: Renaming Case-Sensitive Table in PostgreSQL\nDESCRIPTION: SQL command to rename a case-sensitive table to lowercase for better compatibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nalter table \"Table_name\"\nrename to table_name;\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables\nDESCRIPTION: Set up the Supabase URL and anonymous key as environment variables in a .env.local file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_PUBLIC_SUPABASE_URL=\nEXPO_PUBLIC_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: HTML Audio Element Implementation\nDESCRIPTION: Example HTML code showing how to use the text-to-speech endpoint in an audio element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<audio\n  src=\"https://${SUPABASE_PROJECT_REF}.supabase.co/functions/v1/text-to-speech?text=Hello%2C%20world!&voiceId=JBFqnCBsd6RMkjVDRZzb\"\n  controls\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Optimization in Swift\nDESCRIPTION: This snippet illustrates how to disable automatic image optimization and request the original format using the Supabase Swift client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet data = try await supabase.storage.from(\"bucket\")\n  .download(\n    path: \"image.jpg\",\n    options: TransformOptions(\n      width: 200,\n      height: 200,\n      format: \"origin\"\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Realtime Chat with Initial Messages in React\nDESCRIPTION: This snippet extends the basic usage by incorporating initial messages into the RealtimeChat component. It utilizes a custom hook (useMessagesQuery) to fetch existing messages and passes them as a prop to the RealtimeChat component, allowing the chat to display prior conversations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-chat.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" messages={messages} />\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Larger Queries in Postgres SQL\nDESCRIPTION: Demonstrates properly formatted larger SQL queries with each clause on a new line. Illustrates vertical alignment of SQL keywords and conditions for improved readability.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  first_name,\n  last_name\nfrom\n  employees\nwhere\n  start_date between '2021-01-01' and '2021-12-31'\nand\n  status = 'employed';\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase MCP Server for Windows\nDESCRIPTION: JSON configuration for running the Supabase MCP server on Windows. It uses 'cmd' as the command with '/c' flag to execute npx, and includes arguments for installing and running the latest version of the server with a personal access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--access-token\",\n        \"<personal-access-token>\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Packages for Next.js Authentication\nDESCRIPTION: Installs the Supabase JavaScript client and the SSR helper package needed for server-side authentication in Next.js applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @supabase/supabase-js @supabase/ssr\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SvelteKit\nDESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env.local file for a SvelteKit application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPUBLIC_SUPABASE_URL=your_supabase_project_url\nPUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n----------------------------------------\n\nTITLE: Initializing Ionic React Project using CLI\nDESCRIPTION: Commands to install the Ionic CLI, create a new blank React project, and install the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\nionic start supabase-ionic-react blank --type react\ncd supabase-ionic-react\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client\nDESCRIPTION: Creates a Supabase client instance using project URL and anonymous key for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst supabase = createClient(\n  'https://ajsstlnzcmdmzbtcgbbd.supabase.co',\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Stripe Webhooks\nDESCRIPTION: Copies the example environment variables file to create a local configuration for Stripe webhook integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp supabase/.env.local.example supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Displaying JWT Token Structure for Postgres Roles in JavaScript\nDESCRIPTION: This code snippet shows the structure of a JWT token used for Postgres roles in Supabase, including the role, issuer, and expiration time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-11-studio-introducing-assistant.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"role\": \"service_role\", // the Postgres role\n  \"iss\": \"supabase\"       // the issuer of the JWT\n  \"exp\": 1445385600,      // the time the JWT will expire\n}\n```\n\n----------------------------------------\n\nTITLE: Form Component Structure with React Hook Form\nDESCRIPTION: Basic anatomy of a form built with React Hook Form components, showing the essential structure with FormField, FormItem, FormLabel, FormControl, FormDescription, and FormMessage components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <FormField\n    control={...}\n    name=\"...\"\n    render={() => (\n      <FormItem>\n        <FormLabel />\n        <FormControl>\n          { /* Your form field */}\n        </FormControl>\n        <FormDescription />\n        <FormMessage />\n      </FormItem>\n    )}\n  />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Adding Row Actions with Dropdown Menu in TanStack Table\nDESCRIPTION: Implementation of an actions column with a dropdown menu for row-specific operations like copying IDs or viewing details, using shadcn/ui components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { ColumnDef } from '@tanstack/react-table'\nimport { MoreHorizontal } from 'lucide-react'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: 'actions',\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem onClick={() => navigator.clipboard.writeText(payment.id)}>\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedding Request Handler\nDESCRIPTION: TypeScript code implementing the request handler for generating embeddings from input text. Includes mean pooling and normalization options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(async (req) => {\n  // Extract input string from JSON body\n  const { input } = await req.json();\n\n  // Generate the embedding from the user input\n  const embedding = await session.run(input, {\n    mean_pool: true,\n    normalize: true,\n  });\n\n  // Return the embedding\n  return new Response(\n    JSON.stringify({ embedding }),\n    { headers: { 'Content-Type': 'application/json' } }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: User Invitation Template in HTML\nDESCRIPTION: HTML template for the user invitation section allowing to add new users to the board via email.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex items-center gap-4 py-12\">\n  <span class=\"block text-3xl font-extrabold text-gray-900\">Invite</span>\n\n  <input\n    [(ngModel)]=\"addUserEmail\"\n    placeholder=\"john@doe.com\"\n    class=\"block rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-emerald-500 focus:outline-none focus:ring-emerald-500 sm:text-sm\"\n  />\n  <button\n    (click)=\"addUser()\"\n```\n\n----------------------------------------\n\nTITLE: Serving AI Plugin Manifest in TypeScript with Supabase Edge Runtime\nDESCRIPTION: This snippet demonstrates how to serve the ai-plugin.json manifest file required for ChatGPT plugin identification. It imports the JSON file and serves it as a response when the appropriate endpoint is requested.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport aiPlugins from './ai-plugins.json' with { type: 'json' }\n\n// [...]\n\n// Serve /.well-known/ai-plugin.json\nif (service_name === '.well-known') {\n  return new Response(JSON.stringify(aiPlugins), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JWT Caching Performance in PostgREST 12\nDESCRIPTION: Demonstrates the performance improvement in JWT processing times with the new caching feature in PostgREST 12. The example shows a reduction from 147.7ms to 14.1ms in JWT processing time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-postgrest-12.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## before\n$ curl 'localhost:3000/authors_only' -H \"Authorization: Bearer $JWT\" -D -\nHTTP/1.1 200 OK\nServer-Timing: jwt;dur=147.7\n\n## after, with JWT caching\n$ curl 'localhost:3000/authors_only' -H \"Authorization: Bearer $JWT\" -D -\nHTTP/1.1 200 OK\nServer-Timing: jwt;dur=14.1\n```\n\n----------------------------------------\n\nTITLE: Querying Staff Table via PostgREST\nDESCRIPTION: Demonstrates how to query the staff table in the public schema using the PostgREST API\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/staff' \\\n-H 'accept-profile: public' \\\n-H \"apikey: $ANON_KEY\" \\\n-H \"authorization: Bearer $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions for Location Services\nDESCRIPTION: This XML snippet adds the necessary permissions to the iOS Info.plist file for using location services in an Ionic Capacitor app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>NSLocationAlwaysUsageDescription</key>\n\t\t<string>We want to show your nearby places</string>\n\t<key>NSLocationWhenInUseUsageDescription</key>\n\t\t<string>We want to show your nearby places</string>\n\t<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n\t  <string>To show your location</string>\n```\n\n----------------------------------------\n\nTITLE: Accessing Postgres Database\nDESCRIPTION: Command to connect to the local Postgres database using psql client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npsql 'postgresql://postgres:postgres@localhost:54322/postgres'\n```\n\n----------------------------------------\n\nTITLE: Creating Test Function for Timeout\nDESCRIPTION: Creates a test function that sleeps for 601 seconds to verify timeout settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function myfunc()\nreturns void as $$\n  select pg_sleep(601); -- simulating some long-running process\n$$\nlanguage sql;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Quality with Supabase Storage in Kotlin\nDESCRIPTION: This code demonstrates two methods for downloading an image with reduced quality in Kotlin - one retrieving the data directly and another streaming to a file on JVM platforms.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nval data = supabase.storage[\"bucket\"].downloadAuthenticated(\"image.jpg\") {\n    transform {\n        quality = 50\n    }\n}\n\n//Or on JVM stream directly to a file\nval file = File(\"image.jpg\")\nsupabase.storage[\"bucket\"].downloadAuthenticatedTo(\"image.jpg\", file) {\n    transform {\n        quality = 50\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: International Data Transfer Table in Markdown\nDESCRIPTION: Markdown table specifying international data transfer locations and associated safeguards\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy-240804.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Where we may transfer your personal information | Safeguards that apply to that transfer |\n| United States | The transfer is subject to standard contractual clauses approved by the European Commission or the UK Information Commissioner for the transfer of personal information. |\n| Singapore | The transfer is subject to standard contractual clauses approved by the European Commission or the UK Information Commissioner for the transfer of personal information. |\n```\n\n----------------------------------------\n\nTITLE: Signing in with Magic Link using Swift\nDESCRIPTION: Explains signing in with a Magic Link in Swift, using Supabase's sign-in feature. Inputs: user email, redirect URL, and an option to prevent automatic user sign-up.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry await supabase.auth.signInWithOTP(\n  email: \"valid.email@supabase.io\",\n  redirectTo: URL(string: \"https://example.com/welcome\"),\n  // set this to false if you do not want the user to be automatically signed up\n  shouldCreateUser: false\n)\n```\n\n----------------------------------------\n\nTITLE: Code Exchange Route Implementation (TypeScript)\nDESCRIPTION: Implementation of the auth callback route for handling code exchange in TypeScript with type safety.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from '@remix-run/node'\nimport { createServerClient } from '@supabase/auth-helpers-remix'\n\nimport type { Database } from 'db_types'\nimport type { LoaderFunctionArgs } from '@remix-run/node'\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const response = new Response()\n  const url = new URL(request.url)\n  const code = url.searchParams.get('code')\n\n  if (code) {\n    const supabaseClient = createServerClient<Database>(\n      process.env.SUPABASE_URL!,\n      process.env.SUPABASE_ANON_KEY!,\n      { request, response }\n    )\n    await supabaseClient.auth.exchangeCodeForSession(code)\n  }\n\n  return redirect('/', {\n    headers: response.headers,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Counter Edge Function\nDESCRIPTION: TypeScript implementation of an Edge Function that uses Upstash Redis to track function invocation counts by region. The function increments a counter for the specific region and returns the total counts across all regions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Redis } from 'https://deno.land/x/upstash_redis@v1.19.3/mod.ts'\n\nconsole.log(`Function \"upstash-redis-counter\" up and running!`)\n\nDeno.serve(async (_req) => {\n  try {\n    const redis = new Redis({\n      url: Deno.env.get('UPSTASH_REDIS_REST_URL')!,\n      token: Deno.env.get('UPSTASH_REDIS_REST_TOKEN')!,\n    })\n\n    const deno_region = Deno.env.get('DENO_REGION')\n    if (deno_region) {\n      // Increment region counter\n      await redis.hincrby('supa-edge-counter', deno_region, 1)\n    } else {\n      // Increment localhost counter\n      await redis.hincrby('supa-edge-counter', 'localhost', 1)\n    }\n\n    // Get all values\n    const counterHash: Record<string, number> | null = await redis.hgetall('supa-edge-counter')\n    const counters = Object.entries(counterHash!)\n      .sort(([, a], [, b]) => b - a) // sort desc\n      .reduce((r, [k, v]) => ({ total: r.total + v, regions: { ...r.regions, [k]: v } }), {\n        total: 0,\n        regions: {},\n      })\n\n    return new Response(JSON.stringify({ counters }), { status: 200 })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), { status: 200 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Flow URL Structure\nDESCRIPTION: Shows the URL structure after successful authentication using implicit flow, where access and refresh tokens are included in the URL fragment. This demonstrates how tokens are passed to the client application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions/implicit-flow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://yourapp.com/...#access_token=<...>&refresh_token=<...>&...\n```\n\n----------------------------------------\n\nTITLE: Complex Query Example\nDESCRIPTION: Demonstrates the complex query that would be needed without using a view, highlighting the benefit of view simplification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  students.name,\n  students.type,\n  courses.title,\n  courses.code,\n  grades.result\nfrom\n  grades\n  left join students on grades.student_id = students.id\n  left join courses on grades.course_id = courses.id;\n```\n\n----------------------------------------\n\nTITLE: Signing Out with Supabase Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to sign out a user using the Supabase authentication service by calling the `signOut` function. Ensure Supabase's Kotlin library is integrated properly for session management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WAL Archiving in PostgreSQL Configuration\nDESCRIPTION: Commands to modify the PostgreSQL configuration file to enable WAL (Write-Ahead Log) archiving and configure it to use WAL-G for pushing archives to S3 storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"archive_mode = yes\" >> /etc/postgresql/12/main/postgresql.conf\n$ echo \"archive_command = 'envdir /etc/wal-g.d/env /usr/local/bin/wal-g wal-push %p'\" >> /etc/postgresql/12/main/postgresql.conf\n$ echo \"archive_timeout = 60\" >> /etc/postgresql/12/main/postgresql.conf\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment Variables for Supabase-Vercel Integration\nDESCRIPTION: A list of environment variables that are automatically managed and updated by Supabase for Vercel projects, including database connection details and authentication keys. These follow the same naming convention as Vercel Postgres for easy platform migration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-10-using-supabase-with-vercel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nPOSTGRES_URL // URL of your Postgres database.\nPOSTGRES_URL_NON_POOLING // URL of your Postgres database without pooling.\nPOSTGRES_USER // Username for your Postgres database.\nPOSTGRES_HOST // Host for your Postgres database.\nPOSTGRES_PASSWORD // Password for your Postgres database.\nPOSTGRES_DATABASE // Name of your Postgres database.\nSUPABASE_SERVICE_ROLE_KEY // Service role key for your Supabase project.\nSUPABASE_URL // URL for your Supabase project.\nSUPABASE_ANON_KEY // Anonymous key for your Supabase project.\nNEXT_PUBLIC_SUPABASE_URL // Publicly accessible URL for your Supabase project.\nNEXT_PUBLIC_SUPABASE_ANON_KEY // Publicly accessible anonymous key for your Supabase project.\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Stack Navigation in React Native with Expo Router\nDESCRIPTION: This snippet defines a stack navigation layout for the authenticated area of the app. It includes a logout button and sets up the screen for listing files.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router'\nimport { useAuth } from '../../provider/AuthProvider'\nimport React from 'react'\nimport { TouchableOpacity } from 'react-native'\nimport { Ionicons } from '@expo/vector-icons'\n\n// Simple stack layout within the authenticated area\nconst StackLayout = () => {\n  const { signOut } = useAuth()\n\n  return (\n    <Stack\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#0f0f0f',\n        },\n        headerTintColor: '#fff',\n      }}\n    >\n      <Stack.Screen\n        name=\"list\"\n        options={{\n          headerTitle: 'My Files',\n          headerRight: () => (\n            <TouchableOpacity onPress={signOut}>\n              <Ionicons name=\"log-out-outline\" size={30} color={'#fff'} />\n            </TouchableOpacity>\n          ),\n        }}\n      ></Stack.Screen>\n    </Stack>\n  )\n}\n\nexport default StackLayout\n```\n\n----------------------------------------\n\nTITLE: Alternative GraphQL Query Using Collection Filtering\nDESCRIPTION: A GraphQL query that achieves the same result as the UDF example but uses the built-in collection filtering instead of a custom function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  accountCollection(filter: { email: { ilike: \"%foo.com\" } }, first: 2) {\n    edges {\n      node {\n        id\n        email\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Local Stack\nDESCRIPTION: Command to start the local Supabase development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Standard Query (Problem Case)\nDESCRIPTION: Example of a standard query that won't use the MD5 functional index.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-index-row-size-exceeds-btree-version-4-maximum-for-index-LMmoeU.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from table_name where column_name = 'search_value';\n```\n\n----------------------------------------\n\nTITLE: Installing Vaul Dependency Manually\nDESCRIPTION: Command to install the Vaul dependency manually using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/drawer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vaul\n```\n\n----------------------------------------\n\nTITLE: Chrome Extension Google Sign-In Implementation\nDESCRIPTION: Implementation of Google sign-in flow in Chrome extensions using chrome.identity API and Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst manifest = chrome.runtime.getManifest()\n\nconst url = new URL('https://accounts.google.com/o/oauth2/auth')\n\nurl.searchParams.set('client_id', manifest.oauth2.client_id)\nurl.searchParams.set('response_type', 'id_token')\nurl.searchParams.set('access_type', 'offline')\nurl.searchParams.set('redirect_uri', `https://${chrome.runtime.id}.chromiumapp.org`)\nurl.searchParams.set('scope', manifest.oauth2.scopes.join(' '))\n\nchrome.identity.launchWebAuthFlow(\n  {\n    url: url.href,\n    interactive: true,\n  },\n  async (redirectedTo) => {\n    if (chrome.runtime.lastError) {\n      // auth was not successful\n    } else {\n      // auth was successful, extract the ID token from the redirectedTo URL\n      const url = new URL(redirectedTo)\n      const params = new URLSearchParams(url.hash)\n\n      const { data, error } = await supabase.auth.signInWithIdToken({\n        provider: 'google',\n        token: params.get('id_token'),\n      })\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OLD_DB_URL Environment Variable in Bash\nDESCRIPTION: This snippet shows how to set the OLD_DB_URL environment variable for accessing the Neon database. It captures the connection string necessary to connect with the Neon database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/neon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OLD_DB_URL=\"postgresql://neondb_owner:xxxxxxxxxxxxxxx-random-word-yyyyyyyy.us-west-2.aws.neon.tech/neondb?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase - Advanced Setup with Sparse Checkout\nDESCRIPTION: This snippet presents an advanced method of cloning the Supabase repository using sparse checkout to minimize initial clone size. It outlines the same subsequent steps for project directory setup and service initiation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the code using git sparse checkout\n git clone --filter=blob:none --no-checkout https://github.com/supabase/supabase\n cd supabase\n git sparse-checkout set --cone docker && git checkout master\n cd ..\n\n # Make your new supabase project directory\n mkdir supabase-project\n\n # Tree should look like this\n # .\n # ├── supabase\n # └── supabase-project\n\n # Copy the compose files over to your project\n cp -rf supabase/docker/* supabase-project\n\n # Copy the fake env vars\n cp supabase/docker/.env.example supabase-project/.env\n\n # Switch to your project directory\n cd supabase-project\n\n # Pull the latest images\n docker compose pull\n\n # Start the services (in detached mode)\n docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Up Realtime Chat in Next.js\nDESCRIPTION: Imports the RealtimeChat component and demonstrates using it in a simple page with room and username specified. No external message sources or storage hooks are used here. Assumes necessary components are available from '@/components/realtime-chat'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\n\nexport default function ChatPage() {\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Upload Component in Vue 3\nDESCRIPTION: Creating a Vue component for uploading and displaying user avatar images using Supabase Storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, toRefs, watchEffect } from 'vue'\nimport { supabase } from '../supabase'\n\nconst prop = defineProps(['path', 'size'])\nconst { path, size } = toRefs(prop)\n\nconst emit = defineEmits(['upload', 'update:path'])\nconst uploading = ref(false)\nconst src = ref('')\nconst files = ref()\n\nconst downloadImage = async () => {\n  try {\n    const { data, error } = await supabase.storage.from('avatars').download(path.value)\n    if (error) throw error\n    src.value = URL.createObjectURL(data)\n  } catch (error) {\n    console.error('Error downloading image: ', error.message)\n  }\n}\n\nconst uploadAvatar = async (evt) => {\n  files.value = evt.target.files\n  try {\n    uploading.value = true\n    if (!files.value || files.value.length === 0) {\n      throw new Error('You must select an image to upload.')\n    }\n\n    const file = files.value[0]\n    const fileExt = file.name.split('.').pop()\n    const filePath = `${Math.random()}.${fileExt}`\n\n    const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)\n\n    if (uploadError) throw uploadError\n    emit('update:path', filePath)\n    emit('upload')\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    uploading.value = false\n  }\n}\n\nwatchEffect(() => {\n  if (path.value) downloadImage()\n})\n</script>\n\n<template>\n  <div>\n    <img\n      v-if=\"src\"\n      :src=\"src\"\n      alt=\"Avatar\"\n      class=\"avatar image\"\n      :style=\"{ height: size + 'em', width: size + 'em' }\"\n    />\n    <div v-else class=\"avatar no-image\" :style=\"{ height: size + 'em', width: size + 'em' }\" />\n\n    <div :style=\"{ width: size + 'em' }\">\n      <label class=\"button primary block\" for=\"single\">\n        {{ uploading ? 'Uploading ...' : 'Upload' }}\n      </label>\n      <input\n        style=\"visibility: hidden; position: absolute\"\n        type=\"file\"\n        id=\"single\"\n        accept=\"image/*\"\n        @change=\"uploadAvatar\"\n        :disabled=\"uploading\"\n      />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the blog post including title, description, author, images, categories, tags and other properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-05-beta-update-june-2022.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Supabase Beta June 2022\ndescription: Auth Helpers, Unlimited Free Projects, CLI and more...\nauthor: ant_wilson\nimage: 2022-june/thumb.png\nthumb: 2022-june/thumb.png\ncategories:\n  - product\ntags:\n  - release-notes\ndate: '2022-07-06'\ntoc_depth: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing a PostgreSQL Hook in an Extension\nDESCRIPTION: C code showing the pattern for implementing a PostgreSQL hook in an extension. It demonstrates preserving previous hooks to maintain compatibility with other extensions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n// variable to store the previous hook\nstatic ProcessUtility_hook_type prev_hook = NULL;\n\n// initialize our extension\nvoid\n_PG_init(void)\n{\n  // ProcessUtility_hook has the global function pointer.\n  // Store its value in case another extension already set its own hook.\n  prev_hook = ProcessUtility_hook;\n  // Now override the ProcessUtility_hook with our hook\n  ProcessUtility_hook = our_hook;\n}\n\nstatic void\nour_hook(PARAMS_OMITTED_FOR_BREVITY)\n{\n  // our hook logic goes here\n\n  // If there was a previous hook, run it after our hook\n  if (prev_hook)\n    prev_hook(PARAMS_OMITTED_FOR_BREVITY);\n  // If there's no previous hook, call the standard function\n  else\n    standard_ProcessUtility(PARAMS_OMITTED_FOR_BREVITY);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Upload Widget in Flutter\nDESCRIPTION: Implements a stateful widget for handling profile image uploads to Supabase storage. The component displays the current avatar image and provides an upload button that allows users to select and upload new profile pictures.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/main.dart';\n\nclass Avatar extends StatefulWidget {\n  const Avatar({\n    super.key,\n    required this.imageUrl,\n    required this.onUpload,\n  });\n\n  final String? imageUrl;\n  final void Function(String) onUpload;\n\n  @override\n  State<Avatar> createState() => _AvatarState();\n}\n\nclass _AvatarState extends State<Avatar> {\n  bool _isLoading = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        if (widget.imageUrl == null || widget.imageUrl!.isEmpty)\n          Container(\n            width: 150,\n            height: 150,\n            color: Colors.grey,\n            child: const Center(\n              child: Text('No Image'),\n            ),\n          )\n        else\n          Image.network(\n            widget.imageUrl!,\n            width: 150,\n            height: 150,\n            fit: BoxFit.cover,\n          ),\n        ElevatedButton(\n          onPressed: _isLoading ? null : _upload,\n          child: const Text('Upload'),\n        ),\n      ],\n    );\n  }\n\n  Future<void> _upload() async {\n    final picker = ImagePicker();\n    final imageFile = await picker.pickImage(\n      source: ImageSource.gallery,\n      maxWidth: 300,\n      maxHeight: 300,\n    );\n    if (imageFile == null) {\n      return;\n    }\n    setState(() => _isLoading = true);\n\n    try {\n      final bytes = await imageFile.readAsBytes();\n      final fileExt = imageFile.path.split('.').last;\n      final fileName = '${DateTime.now().toIso8601String()}.$fileExt';\n      final filePath = fileName;\n      await supabase.storage.from('avatars').uploadBinary(\n            filePath,\n            bytes,\n            fileOptions: FileOptions(contentType: imageFile.mimeType),\n          );\n      final imageUrlResponse = await supabase.storage\n          .from('avatars')\n          .createSignedUrl(filePath, 60 * 60 * 24 * 365 * 10);\n      widget.onUpload(imageUrlResponse);\n    } on StorageException catch (error) {\n      if (mounted) {\n        context.showSnackBar(error.message, isError: true);\n      }\n    } catch (error) {\n      if (mounted) {\n        context.showSnackBar('Unexpected error occurred', isError: true);\n      }\n    }\n\n    setState(() => _isLoading = false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Game Page in Flutter\nDESCRIPTION: Dart code for the main game page, including the app structure, GamePage widget, and initialization logic for the Flame game.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flame_realtime_shooting/game/game.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'UFO Shooting Game',\n      debugShowCheckedModeBanner: false,\n      home: GamePage(),\n    );\n  }\n}\n\nclass GamePage extends StatefulWidget {\n  const GamePage({Key? key}) : super(key: key);\n\n  @override\n  State<GamePage> createState() => _GamePageState();\n}\n\nclass _GamePageState extends State<GamePage> {\n  late final MyGame _game;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Stack(\n        fit: StackFit.expand,\n        children: [\n          Image.asset('assets/images/background.jpg', fit: BoxFit.cover),\n          GameWidget(game: _game),\n        ],\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _initialize();\n  }\n\n  Future<void> _initialize() async {\n    _game = MyGame(\n      onGameStateUpdate: (position, health) async {\n        // TODO: handle gmae state update here\n      },\n      onGameOver: (playerWon) async {\n        // TODO: handle when the game is over here\n      },\n    );\n\n    // await for a frame so that the widget mounts\n    await Future.delayed(Duration.zero);\n\n    if (mounted) {\n      _openLobbyDialog();\n    }\n  }\n\n  void _openLobbyDialog() {\n    showDialog(\n        context: context,\n        barrierDismissible: false,\n        builder: (context) {\n          return _LobbyDialog(\n            onGameStarted: (gameId) async {\n              // handle game start here\n            },\n          );\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI with Theme\nDESCRIPTION: Setting up Auth UI with the default Supa theme for styled authentication interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Auth } from '@supabase/auth-ui-react'\nimport {\n  ThemeSupa,\n} from '@supabase/auth-ui-shared'\n\nconst supabase = createClient(\n  '<INSERT PROJECT URL>',\n  '<INSERT PROJECT ANON API KEY>'\n)\n\nconst App = () => (\n  <Auth\n    supabaseClient={supabase}\n    appearance={{ theme: ThemeSupa }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Bucket with Swift\nDESCRIPTION: Creates a public storage bucket named 'avatars' using the Supabase Swift client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.storage.createBucket(\n  \"avatars\",\n  options: BucketOptions(public: true)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Server for Windows WSL\nDESCRIPTION: JSON configuration for setting up Supabase server using Windows Subsystem for Linux. Specifically configured to run commands through WSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_vscode_config.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"supabase-access-token\",\n      \"description\": \"Supabase personal access token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"supabase\": {\n      \"command\": \"wsl\",\n      \"args\": [\"npx\", \"-y\", \"@supabase/mcp-server-supabase@latest\"],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"${input:supabase-access-token}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Runner Function Structure in JavaScript\nDESCRIPTION: High-level structure of the benchmark runner function that coordinates server setup, data generation, test execution, and cleanup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function runBenchmark() {\n  // Start the server\n  // Reset before test\n  // Generate & insert users\n  // Generate & insert posts\n  // Generate actions (API Calls) to run\n  // Execute the API calls\n  // Write JSON results to tmpdir\n  // Stop the server\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Table Existence in PostgreSQL\nDESCRIPTION: SQL query to check if a table exists in the database schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM information_schema.tables\nWHERE table_name ILIKE 'example_table';\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Host Parameter Example\nDESCRIPTION: Simple example showing the host parameter used in the pg_dump command for connecting to a Supabase PostgreSQL database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-h db.host.supabase.co \\\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Multiple Foreign Keys in PostgreSQL\nDESCRIPTION: SQL schema for tracking employee shift check-ins and check-outs with multiple foreign key references to the same table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n-- Employees\ncreate table users (\n  \"id\" serial primary key,\n  \"name\" text\n);\n\n-- Badge scans\ncreate table scans (\n  \"id\" serial primary key,\n  \"user_id\" int references users,\n  \"badge_scan_time\" timestamp\n);\n\n-- Work shifts\ncreate table shifts (\n  \"id\" serial primary key,\n  \"user_id\" int references users,\n  \"scan_id_start\" int references scans, -- clocking in\n  \"scan_id_end\" int references scans, -- clocking out\n  \"attendance_status\" text\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Role Claim in Custom Access Token with JavaScript\nDESCRIPTION: This JavaScript function serves as a webhook that adds a role claim to the access token based on app metadata. It utilizes the Deno runtime and requires a secret for verification of the payload to process claims correctly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'\nimport { readAll } from 'https://deno.land/std/io/read_all.ts'\nimport * as base64 from 'https://denopkg.com/chiefbiiko/base64/mod.ts'\n\nDeno.serve(async (req) => {\n  const payload = await req.text()\n  const base64_secret = Deno.env.get('CUSTOM_ACCESS_TOKEN_SECRET').replace('v1,whsec_', '')\n  const headers = Object.fromEntries(req.headers)\n  const wh = new Webhook(base64_secret)\n  try {\n    const { user_id, claims, authentication_method } = wh.verify(payload, headers)\n    if (claims.app_metadata && claims.app_metadata.role) {\n      claims['role'] = claims.app_metadata.role\n    }\n    return new Response(\n      JSON.stringify({\n        claims,\n      }),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: `Failed to process the request: ${error}`,\n      }),\n      {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Server Supabase Client for Next.js\nDESCRIPTION: TypeScript code to create a server-side Supabase client using the Supabase SSR helper library, with proper typing and cookie handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\nimport { Database } from './database.types'\n\nexport default function useSupabaseServer(cookieStore: ReturnType<typeof cookies>) {\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        },\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Queue Operations in React TypeScript\nDESCRIPTION: Example React component demonstrating how to send and receive messages using Supabase Queues. Shows implementation of enqueueing and dequeueing operations using the Supabase client library with TypeScript.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = 'supabaseURL'\nconst supabaseKey = 'supabaseKey'\n\nconst supabase = createClient(supabaseUrl, supabaseKey)\n\nconst QueuesTest: React.FC = () => {\n  //Add a Message\n  const sendToQueue = async () => {\n    const result = await supabase.schema('pgmq_public').rpc('send', {\n      queue_name: 'foo',\n      message: { hello: 'world' },\n      sleep_seconds: 30,\n    })\n    console.log(result)\n  }\n\n  //Dequeue Message\n  const popFromQueue = async () => {\n    const result = await supabase.schema('pgmq_public').rpc('pop', { queue_name: 'foo' })\n    console.log(result)\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-4\">Queue Test Component</h2>\n      <button\n        onClick={sendToQueue}\n        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mr-4\"\n      >\n        Add Message\n      </button>\n      <button\n        onClick={popFromQueue}\n        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n      >\n        Pop Message\n      </button>\n    </div>\n  )\n}\n\nexport default QueuesTest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Row Level Security Policies in Supabase\nDESCRIPTION: SQL script to enable Row Level Security on tables and define policies for user access. It allows unauthenticated users to read group data while restricting other actions to authenticated users only.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Secure tables\nalter table users enable row level security;\nalter table groups enable row level security;\nalter table messages enable row level security;\n\n-- User Policies\ncreate policy \"Users can read the user email.\" on users\n  for select using (true);\n\n-- Group Policies\ncreate policy \"Groups are viewable by everyone.\" on groups\n  for select using (true);\n\ncreate policy \"Authenticated users can create groups.\" on groups for\n  insert to authenticated with check (true);\n\ncreate policy \"The owner can delete a group.\" on groups for\n    delete using ((select auth.uid()) = creator);\n\n-- Message Policies\ncreate policy \"Authenticated users can read messages.\" on messages\n  for select to authenticated using (true);\n\ncreate policy \"Authenticated users can create messages.\" on messages\n  for insert to authenticated with check (true);\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase and Seeding Data\nDESCRIPTION: Commands for starting the Supabase instance locally and running the seed script to generate and store image embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/image_search/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\npoetry run seed\n```\n\n----------------------------------------\n\nTITLE: Starting Rails Console\nDESCRIPTION: Command to start the Rails interactive console for database interaction.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails console\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Auth0 in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to initialize a Supabase client in conjunction with Auth0. Dependency includes the Auth0 library for Android, acquiring access tokens through Auth0's Credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.auth0.android.result.Credentials\n\nval supabase = createSupabaseClient(\n    \"https://<supabase-project>.supabase.co\",\n    \"SUPABASE_ANON_KEY\"\n) {\n    accessToken = {\n        val credentials: Credentials = ...; // Get credentials from Auth0\n        credentials.accessToken\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Structure for Geographic Data in Kotlin\nDESCRIPTION: Kotlin data class definition for restaurant data with geographic points. This serializable class provides type safety when working with geo data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\ndata class Restaurant(\n    val name: String,\n    val location: String //you could also use a custom type with a custom serializer for more type safety\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication in Supabase\nDESCRIPTION: Demonstrates how to implement passwordless authentication using magic links in Supabase. Shows the simplicity of the sign-in process using the Supabase Auth SDK.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_alternatives/supabase-vs-auth0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { user, session, error } = await supabase.auth.signIn({\n  email: 'example@email.com'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Profiles Table in Public Schema\nDESCRIPTION: SQL script to create a profiles table in the public schema with UUID primary key and email field.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.profiles (\n  id uuid primary key,             -- 'id' is a UUID and the primary key for the table\n  email varchar(256)               -- 'email' is a variable character field with a maximum length of 256 characters\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML code for embedding a responsive YouTube video player with specific parameters and security settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-community-day.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/0lBxH6d38FM?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n```\n\n----------------------------------------\n\nTITLE: Downloading Transformed Image in Swift\nDESCRIPTION: This snippet illustrates how to download a transformed image using the Supabase Swift client, specifying transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet data = try await supabase.storage.from(\"bucket\")\n  .download(\n    path: \"image.jpg\",\n    options: TransformOptions(\n      width: 800,\n      height: 300\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Deploying and Testing Edge Function\nDESCRIPTION: Commands for local testing and deployment of the Supabase Edge Function with Sentry integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/sentry-monitoring.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve --no-verify-jwt\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy sentryfied --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Location Identifiers Function in Rust\nDESCRIPTION: Helper function to generate location identifier TokenStreams for nodes\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nfn location_idents(nodes: &[Node]) -> Vec<TokenStream> {\n    nodes\n        .iter()\n        .map(|node| {\n            if node\n                .fields\n                .iter()\n\t\t\t\t\t\t// has location property?\n                .find(|n| n.name == \"location\" && n.field_type == FieldType::Int32)\n                .is_some()\n            {\n                quote! { Some(n.location) }\n            } else {\n                quote! { None }\n            }\n        })\n        .collect()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Laravel database migrations\nDESCRIPTION: Executes the built-in Laravel database migrations to create necessary tables for authentication and user management in the Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Showing Detailed SSO Provider Information in Supabase CLI\nDESCRIPTION: Command to display all information about a specific SSO provider for a Supabase project using the CLI. The -o json flag can be used to output the information as JSON.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsupabase sso show <provider-id> --project-ref <your-project>\n```\n\n----------------------------------------\n\nTITLE: Starting RedwoodJS Development Server\nDESCRIPTION: Terminal command to launch the RedwoodJS development server, which serves the application locally on port 8910.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw dev\n```\n\n----------------------------------------\n\nTITLE: Basic Text Search Using LIKE Operator\nDESCRIPTION: Simple text search implementation using SQL LIKE operator to search across title and overview fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom movies\nwhere title like '%Avengers%' or overview like '%Avengers%';\n```\n\n----------------------------------------\n\nTITLE: DBOS Transaction Decorator Example\nDESCRIPTION: Shows the usage of the @DBOS.Transaction decorator which ensures exactly-once execution by running steps inside a Postgres transaction.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-10-durable-workflows-in-postgres-dbos.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@DBOS.Transaction\ndef transaction_step():\n    # Transaction logic here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Revoking Column-Level UPDATE Privilege in PostgreSQL\nDESCRIPTION: SQL command to revoke the column-level UPDATE privilege for the 'title' column from the 'authenticated' role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nrevoke\nupdate\n  (title) on table public.posts\nfrom\n  authenticated;\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Records in Python\nDESCRIPTION: Demonstrates how to insert vector records into a collection using the upsert method. Each record includes an identifier, the vector values, and optional metadata stored as a dictionary.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# add records to the collection\ndocs.upsert(\n    vectors=[\n        (\n          \"vec0\",           # the records user defined identifier\n          [0.1, 0.2, 0.3],  # the vector. A list or np.array\n          {\"year\": 1973}    # associated metadata\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloudflare Secret\nDESCRIPTION: Generic command to create a secret in Cloudflare Workers using Wrangler CLI. Secrets are used to store sensitive configuration values like API keys.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler secret put NAME\n```\n\n----------------------------------------\n\nTITLE: Supavisor Connection String Format\nDESCRIPTION: General format for Supavisor connection strings, showing how the user, database, and mode combinations are formed within the connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npostgres://[USER].shfmmplnqscentnakbkl:[password]@aws-0-ca-central-1.pooler.supabase.com:[MODE]/[DATABASE]\n```\n\n----------------------------------------\n\nTITLE: Inserting Geographic Point Data with Kotlin\nDESCRIPTION: Kotlin code using Supabase client to insert restaurant data with geographic points. It uses the Restaurant data class defined earlier.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"restaurants\").insert(listOf(\n    Restaurant(\"Supa Burger\", \"POINT(-73.946823 40.807416)\"),\n    Restaurant(\"Supa Pizza\", \"POINT(-73.94581 40.807475)\"),\n    Restaurant(\"Supa Taco\", \"POINT(-73.945826 40.80629)\"),\n))\n```\n\n----------------------------------------\n\nTITLE: Creating Oscillating Movement with useFrame in React Three Fiber\nDESCRIPTION: This snippet shows how to use the useFrame hook to create a horizontal oscillating movement by applying a sine function to a particle's x-position based on elapsed time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst particle = useRef(null)\n\nconst widthRadius = 100\nconst heightRadius = 100\n\nuseFrame(({ clock }) => {\n    const timer = clock.getElapsedTime()\n\n    particle.current.position.x = Math.sin(timer) * widthRadius\n  }\n})\n\nreturn <mesh ref={particle}>{children}</mesh>\n```\n\n----------------------------------------\n\nTITLE: Creating instruments resource with refine CLI\nDESCRIPTION: Command to automatically generate code for CRUD operations on the 'instruments' resource using refine's Inferencer component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run refine create-resource instruments\n```\n\n----------------------------------------\n\nTITLE: Optimizing Lodash Imports in JavaScript\nDESCRIPTION: Demonstrates different approaches to importing Lodash functions to reduce bundle size, including manual cherry-picking and using babel-plugin-lodash. This optimization reduced the gzipped bundle size by 40kb.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-12-13-supabase-dashboard-performance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nimport _ from 'lodash'\n\n// maunally cherry picking modules\nimport find from 'lodash/find'\nimport debounce from 'lodash/debounce'\n\n// using babel-plugin-lodash\nimport { find, debounce } from 'lodash'\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to add required Python packages (supabase and mixpeek) using Poetry.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npoetry add supabase mixpeek\n```\n\n----------------------------------------\n\nTITLE: Signing Out from Supabase (Flutter)\nDESCRIPTION: This Flutter snippet shows how to implement the sign-out functionality using the Supabase SDK. The `signOut` method is called to clear the user session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Choosing Sidebar Variant\nDESCRIPTION: Shows how to set the sidebar variant to one of three options: standard sidebar, floating sidebar, or inset sidebar, each with different visual and behavioral characteristics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from '@/components/ui/sidebar'\n\nexport function AppSidebar() {\n  return <Sidebar variant=\"sidebar | floating | inset\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signed URL for Transformed Image in Kotlin\nDESCRIPTION: This snippet shows how to create a signed URL for a transformed image in a private bucket using the Supabase Kotlin client, specifying expiration time and transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval url = supabase.storage.from(\"bucket\").createSignedUrl(\"image.jpg\", 60.seconds) {\n\tsize(200, 200)\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid GraphQL Query with Multiple Operations\nDESCRIPTION: This GraphQL query demonstrates an invalid case where there is both an anonymous operation and a named operation in the same query, which is not allowed according to the GraphQL specification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bookCollection {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n\nquery getBookNames {\n  bookCollection {\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Development Server Commands\nDESCRIPTION: Command to start the Vite development server using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/hono/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme for Deep Linking in React Native\nDESCRIPTION: This JSON configuration sets up a custom URL scheme for deep linking in a React Native app, which is necessary for OAuth callbacks and magic link redirects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"com.supabase\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component Integration\nDESCRIPTION: Example demonstrating how to use a custom link component from a routing library using the asChild prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"next/link\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink asChild>\n        <Link href=\"/\">Home</Link>\n      </BreadcrumbLink>\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Adding GitLab Sign-In in Supabase Kotlin\nDESCRIPTION: This Kotlin snippet leverages the `signInWith` method for GitLab authentication via Supabase. The function signs a user in by specifying `Gitlab` as the Provider. This code should be used in projects where the Supabase client is properly configured within a Kotlin environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signInWithGitLab() {\n\tsupabase.auth.signInWith(Gitlab)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Supabase Edge Function\nDESCRIPTION: Creates a new Edge Function named 'upstash-redis-counter' using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new upstash-redis-counter\n```\n\n----------------------------------------\n\nTITLE: Estimating Postgres Changes Throughput with RealtimeLimitsEstimator\nDESCRIPTION: This snippet refers to a React component called `RealtimeLimitsEstimator`. It allows users to input their database settings and estimates the maximum throughput for Postgres Changes based on these settings. It highlights the potential database bottleneck when using Postgres Changes at scale and suggests alternatives like using a public table without RLS or Realtime server-side broadcasting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/benchmarks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<RealtimeLimitsEstimator />\"\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Client Engine with Maven\nDESCRIPTION: Adds a Ktor client engine dependency using Maven. Ktor engines are required for HTTP communication and must be selected based on target platform and websocket support needs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-[engine]</artifactId>\n    <version>KTOR_VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Supabase Realtime for Avatar Stack in Next.js\nDESCRIPTION: The code snippet defines a Next.js component that imports the 'RealtimeAvatarStack' and uses it within a page component. It connects to a specific Supabase Realtime room to render avatars representing currently online users. This setup depends on having Supabase configured and requires the use of the @/components/realtime-avatar-stack module. The 'roomName' prop is a string that specifies the realtime room to connect to, and it is crucial for determining the displayed avatars.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-avatar-stack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'\n\nexport default function Page() {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <RealtimeAvatarStack roomName=\"break_room\" />\n    </Header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Projects Billing Table in Markdown\nDESCRIPTION: Demonstrates billing calculation for multiple projects running on the same compute size.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/compute.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Line Item                     | Hours | Costs   |\n| ----------------------------- | ----- | ------- |\n| Pro Plan                      | -     | $25     |\n| Compute Hours Micro Project 1 | 744   | $10     |\n| Compute Hours Micro Project 2 | 744   | $10     |\n| Compute Hours Micro Project 3 | 744   | $10     |\n| **Subtotal**                  |       | **$55** |\n| Compute Credits               |       | -$10    |\n| **Total**                     |       | **$45** |\n```\n\n----------------------------------------\n\nTITLE: Store Page HTML Form Template\nDESCRIPTION: An HTML template for the store addition form that includes inputs for store name, description, latitude, longitude, and image upload. It uses Ionic form components with two-way data binding and includes validation to disable the submit button when required fields are empty.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"modalCtrl.dismiss()\">\n        <ion-icon slot=\"icon-only\" name=\"close\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title>Add Store</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n  <ion-input\n    label=\"Store name\"\n    label-placement=\"stacked\"\n    placeholder=\"Joeys\"\n    [(ngModel)]=\"store.name\"\n  />\n  <ion-textarea\n    rows=\"3\"\n    label=\"Store description\"\n    label-placement=\"stacked\"\n    placeholder=\"Some about text\"\n    [(ngModel)]=\"store.description\"\n  />\n  <ion-input type=\"number\" label=\"Latitude\" label-placement=\"stacked\" [(ngModel)]=\"store.lat\" />\n  <ion-input type=\"number\" label=\"Longitude\" label-placement=\"stacked\" [(ngModel)]=\"store.long\" />\n  <ion-input\n    label=\"Select store image\"\n    (ionChange)=\"imageSelected($event)\"\n    type=\"file\"\n    accept=\"image/*\"\n  ></ion-input>\n\n  <ion-button\n    expand=\"full\"\n    (click)=\"addStore()\"\n    [disabled]=\"!store.lat || !store.long || store.name === ''\"\n    >Add Store</ion-button\n  >\n</ion-content>\n```\n\n----------------------------------------\n\nTITLE: Using InfoTooltip Component in MDX\nDESCRIPTION: Demonstrates how to use the InfoTooltip component to add contextual information via tooltip in Supabase documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<InfoTooltip tooltipContent=\"The open source Firebase alternative.\">Supabase</InfoTooltip>\n```\n\n----------------------------------------\n\nTITLE: Equality Search Using Kotlin Supabase Client\nDESCRIPTION: Kotlin implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        eq(\"title\", \"Harry\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android URL Scheme\nDESCRIPTION: XML configurations for custom URL scheme in Android, including string resource and manifest intent filter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"custom_url_scheme\">supachat</string>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"@string/custom_url_scheme\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions with Embedded Resources in cURL\nDESCRIPTION: This snippet demonstrates using aggregate functions with embedded resources in a one-to-many relationship, finding the newest and oldest movie years for each director using cURL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://postgrest/directors?select=name,movies(newest_movie_year:release_year.max(),oldest_movie_year:release_year.min())'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Expo and Legend-State\nDESCRIPTION: Install the required dependencies for the project, including Legend State, supabase-js, React Native Async Storage, and react-native-get-random-values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @legendapp/state@beta @supabase/supabase-js react-native-get-random-values @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Project Link Command\nDESCRIPTION: Command to link a local Supabase project with a remote project configuration using the project reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_ENV=production npx supabase@latest link --project-ref <your-project-ref>\n```\n\n----------------------------------------\n\nTITLE: SupaUtils Extension Header and Declarations\nDESCRIPTION: C code containing the header includes, variable definitions, and function declarations for the SupaUtils PostgreSQL extension that implements role protection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n// src/supautils.c\n\n// include common declarations\n#include \"postgres.h\"\n\n// required macro for extension libraries to work\nPG_MODULE_MAGIC;\n\n// variable for the previous hook\nstatic ProcessUtility_hook_type prev_hook = NULL;\n\n// variable for our reserved roles configuration parameter\nstatic char *reserved_roles = NULL;\n\n// function declaration for extension initialization\nvoid _PG_init(void);\n\n// function declaration for our hook\nstatic void supautils_hook(\n    PlannedStmt *pstmt,\n    const char *queryString,\n    ProcessUtilityContext context,\n    ParamListInfo params,\n    QueryEnvironment *queryEnv,\n    DestReceiver *dest,\n    QueryCompletion *completionTag\n);\n\n// function declaration for our pure function that will return a reserved role\nstatic char* look_for_reserved_role(Node *utility_stmt, List *reserved_role_list);\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for IPv6\nDESCRIPTION: This YAML snippet shows how to add IPv6 network configuration to a Docker Compose file. It enables IPv6 for the default network and specifies the subnet and gateway.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-16-ipv6.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# enable IPv6 to default network\nnetworks:\n  default:\n    enable_ipv6: true\n    ipam:\n      config:\n        - subnet: fd00:c16a:601e::/80\n          gateway: fd00:c16a:601e::1\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Locally\nDESCRIPTION: This snippet details how to start the Supabase local development environment and serve specific Supabase functions. Dependencies include Supabase CLI and access to the provided environment configuration file. The commands must be executed in a terminal. The expected outcome is a locally available Supabase function for testing, accessible via a web browser.\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw12-ticket-og/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve lw12-ticket-og --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Windows WSL\nDESCRIPTION: JSON configuration for running an MCP server on Windows Subsystem for Linux (WSL). Uses the wsl command to execute the Postgres server module within the Linux environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_postgres_config.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"wsl\",\n      \"args\": [\"npx\", \"-y\", \"@modelcontextprotocol/server-postgres\", \"<connection-string>\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Securing explain() in Production with Pre-request Function\nDESCRIPTION: SQL function to protect the explain() feature in production by restricting access based on IP address using a pre-request function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function filter_plan_requests()\nreturns void as $$\ndeclare\n  headers   json := current_setting('request.headers', true)::json;\n  client_ip text := coalesce(headers->>'cf-connecting-ip', '');\n  accept    text := coalesce(headers->>'accept', '');\n  your_ip   text := '123.123.123.123'; -- replace this with your IP\nbegin\n  if accept like 'application/vnd.pgrst.plan%' and client_ip != your_ip then\n    raise insufficient_privilege using\n      message = 'Not allowed to use application/vnd.pgrst.plan';\n  end if;\nend; $$ language plpgsql;\nalter role authenticator set pgrst.db_pre_request to 'filter_plan_requests';\nnotify pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Changes to Remote Supabase Project\nDESCRIPTION: Series of commands to authenticate, link local project to remote Supabase instance, and push database changes. Requires authentication and project linking before pushing changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/database/employees/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase login\nnpx supabase link\nnpx supabase db push\n```\n\n----------------------------------------\n\nTITLE: Enable pg_jsonschema Extension\nDESCRIPTION: SQL command to enable the pg_jsonschema extension in a PostgreSQL database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension pg_jsonschema;\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data Using Dart\nDESCRIPTION: Demonstrates using the Supabase Dart client to insert books with JSON metadata. The metadata is structured as Dart maps and lists which are automatically converted to JSON.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.from('books').insert([\n  {\n    'title': 'The Poky Little Puppy',\n    'author': 'Janette Sebring Lowrey',\n    'metadata': {\n      'description': 'Puppy is slower than other, bigger animals.',\n      'price': 5.95,\n      'ages': [3, 6],\n    },\n  },\n  {\n    'title': 'The Tale of Peter Rabbit',\n    'author': 'Beatrix Potter',\n    'metadata': {\n      'description': 'Rabbit eats some vegetables.',\n      'price': 4.49,\n      'ages': [2, 5],\n    },\n  },\n  {\n    'title': 'Tootle',\n    'author': 'Gertrude Crampton',\n    'metadata': {\n      'description': 'Little toy train has big dreams.',\n      'price': 3.99,\n      'ages': [2, 5],\n    },\n  },\n  {\n    'title': 'Green Eggs and Ham',\n    'author': 'Dr. Seuss',\n    'metadata': {\n      'description':\n          'Sam has changing food preferences and eats unusually colored food.',\n      'price': 7.49,\n      'ages': [4, 8],\n    },\n  },\n  {\n    'title': 'Harry Potter and the Goblet of Fire',\n    'author': 'J.K. Rowling',\n    'metadata': {\n      'description': 'Fourth year of school starts, big drama ensues.',\n      'price': 24.95,\n      'ages': [10, 99],\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Signing In with Notion in Kotlin using Supabase\nDESCRIPTION: This Kotlin snippet shows the process of signing in with Notion via Supabase by using the signInWith() function with Notion as the provider. It assumes the presence of a properly configured Supabase client in the context.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signInWithNotion() {\n\tsupabase.auth.signInWith(Notion)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Vecs Collection with PostgreSQL\nDESCRIPTION: Initializes connection to PostgreSQL database and creates a collection for storing review embeddings using the vecs library.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\n# Substitute your connection string here\nDB_CONNECTION = \"postgresql://postgres:password@localhost:5431/db\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n\n# create a PostgreSQL/pgvector table named \"reviews\" to contain the review embeddings\nreviews = vx.get_or_create_collection(name=\"reviews\", dimension=384)\n```\n\n----------------------------------------\n\nTITLE: Referencing Launches Table Configuration for Grafana\nDESCRIPTION: This is a reference to a Grafana table configuration used to navigate through the history of performance test launches. It provides a way to track and compare multiple test runs over time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-21-automating-performance-tests.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Reference to: https://gist.github.com/egor-romanov/df6b61f5b0ac3a6f4afdbb19154a612f\n```\n\n----------------------------------------\n\nTITLE: Creating Function with Custom Timeout\nDESCRIPTION: Creates a Postgres function with a custom timeout setting of 4 seconds. Includes a simulated long-running process using pg_sleep.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function myfunc()\nreturns void as $$\n select pg_sleep(3); -- simulating some long-running process\n$$\nlanguage sql\nset statement_timeout TO '4s'; -- set custom timeout\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi Serializer Dependency in Kotlin Build Script\nDESCRIPTION: Adds the Moshi serializer dependency for supabase-kt to a Kotlin project using Gradle with the Kotlin DSL. This is required to use Moshi as the serialization library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.github.jan-tennert.supabase:serializer-moshi:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Personal Information Usage Table in Markdown\nDESCRIPTION: This snippet shows a markdown table detailing how location information is used, the legal bases for processing, and the recipients of this information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **How we may use the Personal Information**                                                                    | **Legal Bases for Processing**                                                                                                                                                                                                                                                                          | **Recipients of Personal Information**                                                                                                                                                                                                        |\n| -------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| We use information to present the Service to you on your device, including localizing features of the Service. | The processing is necessary for performance of a contract with you, namely our Terms of Service. If you access the Service as an authorized user of another customer, the processing is necessary for our and the customer's legitimate interests, namely presenting the Service to you on your device. | We may share this information with the following service providers through the provision of the Service: Sentry, Tableau, Posthog, Plausible, Google LLC, Fly.io, Vercel, Cloudflare, Configcat, Stape.io, Hex.tech, and Amazon Web Services. |\n| We use this information to determine content that may be of interest to you.                                   | We will only use your personal information in this way to the extent you give us your consent to do so.                                                                                                                                                                                                 |                                                                                                                                                                                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Authentication Service in Ionic Angular\nDESCRIPTION: Creates an authentication service using Supabase in an Ionic Angular app. Handles user session management, sign-up, sign-in, and other auth operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Injectable } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { isPlatform } from '@ionic/angular'\nimport { createClient, SupabaseClient, User } from '@supabase/supabase-js'\nimport { BehaviorSubject, Observable } from 'rxjs'\nimport { environment } from '../../environments/environment'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private supabase: SupabaseClient\n  private currentUser: BehaviorSubject<User | boolean> = new BehaviorSubject(null)\n\n  constructor(private router: Router) {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n\n    this.supabase.auth.onAuthStateChange((event, sess) => {\n      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n        console.log('SET USER')\n\n        this.currentUser.next(sess.user)\n      } else {\n        this.currentUser.next(false)\n      }\n    })\n\n    // Trigger initial session load\n    this.loadUser()\n  }\n\n  async loadUser() {\n    if (this.currentUser.value) {\n      // User is already set, no need to do anything else\n      return\n    }\n    const user = await this.supabase.auth.getUser()\n\n    if (user.data.user) {\n      this.currentUser.next(user.data.user)\n    } else {\n      this.currentUser.next(false)\n    }\n  }\n\n  signUp(credentials: { email; password }) {\n    return this.supabase.auth.signUp(credentials)\n  }\n\n  signIn(credentials: { email; password }) {\n    return this.supabase.auth.signInWithPassword(credentials)\n  }\n\n  sendPwReset(email) {\n    return this.supabase.auth.resetPasswordForEmail(email)\n  }\n\n  async signOut() {\n    await this.supabase.auth.signOut()\n    this.router.navigateByUrl('/', { replaceUrl: true })\n  }\n\n  getCurrentUser(): Observable<User | boolean> {\n    return this.currentUser.asObservable()\n  }\n\n  getCurrentUserId(): string {\n    if (this.currentUser.value) {\n      return (this.currentUser.value as User).id\n    } else {\n      return null\n    }\n  }\n\n  signInWithEmail(email: string) {\n    return this.supabase.auth.signInWithOtp({ email })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Callback Route\nDESCRIPTION: Flask route handler for processing OAuth callback and exchanging authorization code for session token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/callback\")\ndef callback():\n    code = request.args.get(\"code\")\n    next = request.args.get(\"next\", \"/\")\n\n    if code:\n        res = supabase.auth.exchange_code_for_session({\"auth_code\": code})\n\n    return redirect(next)\n```\n\n----------------------------------------\n\nTITLE: Deploying Upstash Redis Counter Function\nDESCRIPTION: Commands to deploy the Redis counter function to Supabase and set up environment secrets from local configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-counter/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy upstash-redis-counter --no-verify-jwt\nsupabase secrets set --env-file supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Creating User-Specific File Access Policy in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a policy that grants access to a specific file for a particular Supabase user, integrating with the User Management system.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-30-supabase-storage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy crud_uid_file\non storage.objects for all using (\n\tbucket_id = 'avatars'\n\tand name = 'folder/only_uid.jpg'\n\tand (select auth.uid()) = 'd8c7bce9-cfeb-497b-bd61-e66ce2cbdaa2'\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SSR Package\nDESCRIPTION: Commands to uninstall the deprecated auth-helpers packages and install the new SSR package along with the required Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @supabase/auth-helpers-nextjs @supabase/supabase-js\nnpm install @supabase/ssr @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Creating RegisterPage HTML Template in Ionic Angular\nDESCRIPTION: Defines the HTML structure for the registration page, including form inputs for email and password with validation messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"/\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>Supa Chat</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content scrollY=\"false\">\n  <ion-card>\n    <ion-card-content>\n      <form (ngSubmit)=\"createAccount()\" [formGroup]=\"credentials\">\n        <ion-item>\n          <ion-label position=\"stacked\">Your Email</ion-label>\n          <ion-input\n            type=\"email\"\n            inputmode=\"email\"\n            placeholder=\"Email\"\n            formControlName=\"email\"\n          ></ion-input>\n          <ion-note slot=\"error\" *ngIf=\"(email.dirty || email.touched) && email.errors\"\n            >Please insert a valid email</ion-note\n          >\n        </ion-item>\n        <ion-item>\n          <ion-label position=\"stacked\">Password</ion-label>\n          <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n          <ion-note\n            slot=\"error\"\n            *ngIf=\"(password.dirty || password.touched) && password.errors?.required\"\n            >Please insert a password</ion-note\n          >\n          <ion-note\n            slot=\"error\"\n            *ngIf=\"(password.dirty || password.touched) && password.errors?.minlength\"\n            >Minlength 6 characters</ion-note\n          >\n        </ion-item>\n        <ion-button type=\"submit\" expand=\"block\" strong=\"true\" [disabled]=\"!credentials.valid\"\n          >Create my account</ion-button\n        >\n      </form>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n```\n\n----------------------------------------\n\nTITLE: Implementing Llamafile Function with functions-js\nDESCRIPTION: TypeScript code for the Llamafile Edge Function using Supabase's functions-js library to interact with the Llamafile server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\nconst session = new Supabase.ai.Session('LLaMA_CPP')\n\nDeno.serve(async (req: Request) => {\n  const params = new URL(req.url).searchParams\n  const prompt = params.get('prompt') ?? ''\n\n  // Get the output as a stream\n  const output = await session.run(\n    {\n      messages: [\n        {\n          role: 'system',\n          content:\n            'You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.',\n        },\n        {\n          role: 'user',\n          content: prompt,\n        },\n      ],\n    },\n    {\n      mode: 'openaicompatible', // Mode for the inference API host. (default: 'ollama')\n      stream: false,\n    }\n  )\n\n  console.log('done')\n  return Response.json(output)\n})\n```\n\n----------------------------------------\n\nTITLE: Check Supabase Network Restrictions (No Restrictions) via CLI\nDESCRIPTION: This command retrieves network restrictions for a Supabase project, but indicates that no restrictions are currently applied. This means all IPs are allowed to connect to the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/network-restrictions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> supabase network-restrictions --project-ref {ref} get --experimental\nDB Allowed IPv4 CIDRs: []\nDB Allowed IPv6 CIDRs: []\nRestrictions applied successfully: false\n```\n\n----------------------------------------\n\nTITLE: Basic Realtime Chat Usage in React\nDESCRIPTION: This snippet demonstrates the basic usage of the RealtimeChat component in a React application. It imports the component and renders it with a specified room name and username, establishing a real-time chat interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-chat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\n\nexport default function ChatPage() {\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Version in SQL\nDESCRIPTION: A simple SQL query to check which version of PostgreSQL is running on your database. This is important for understanding available features and planning upgrades or downgrades between major versions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/which-version-of-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  version();\n```\n\n----------------------------------------\n\nTITLE: Defining Private Channel in TypeScript\nDESCRIPTION: TypeScript code snippet demonstrating how to define a private channel using the new configuration field during channel creation in Supabase Realtime.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst channel = supabase.channel('room-1', {\n  config: { private: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Instrument Data Model in Swift\nDESCRIPTION: Creates a decodable struct representing the instrument data model with id and name properties. This model is used to deserialize data from the Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ios-swiftui.mdx#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct Instrument: Decodable, Identifiable {\n  let id: Int\n  let name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ionic Angular Project with Supabase\nDESCRIPTION: Bash commands to create a blank Ionic Angular application, install the Supabase JavaScript client, and generate necessary pages and services for the authentication system.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic start supaAuth blank --type=angular\nnpm install @supabase/supabase-js\n\n# Add some pages\nionic g page pages/login\nionic g page pages/register\nionic g page pages/groups\nionic g page pages/messages\n\n# Generate services\nionic g service services/auth\nionic g service services/data\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Functions in TOML\nDESCRIPTION: This snippet shows how to configure an Edge Function named 'search-embeddings' with JWT verification disabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[functions.search-embeddings]\nverify_jwt = false\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Sets up the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ['OPENAI_API_KEY'] = \"[your_openai_api_key]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Hook with GUI Controls\nDESCRIPTION: This custom hook sets up configuration parameters for the particle animation and connects them to the dat.gui interface, updating React state when GUI values change.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { range } from 'lodash'\n\nlet defaultConfig = {\n  particles: 1500,\n  widthRadius: 100,\n  topHeightRadius: 80,\n  bottomHeightRadius: 100,\n  xThickness: 7,\n  xRandomnessFactor: 2.2,\n  xRandomnessShape: 2.2,\n  xRandomness: 5,\n  yThickness: 20,\n  max_speed: 0.1,\n  min_speed: -0.1,\n}\n\nconst useParticlesConfig = (): any => {\n  if (typeof window === 'undefined') return null\n  const hash = window.location.hash\n  const isDebugMode = hash.includes('#debug')\n  const [particles, setParticles] = useState(range(0, defaultConfig.particles))\n\n  const [config, setConfig] = useState(defaultConfig)\n\n  const handleSetConfig = (name, value) => {\n    setConfig((prevConfig) => ({ ...prevConfig, [name]: value }))\n  }\n\n  const init = async () => {\n    if (!isDebugMode) return\n    const dat = await import('dat.gui')\n    const gui = new dat.GUI()\n    const particlesFolder = gui.addFolder('Particles')\n    const shapeFolder = gui.addFolder('Shape')\n\n    particlesFolder\n      .add(config, 'particles')\n      .min(1)\n      .max(5000)\n      .step(1)\n      .onChange((value) => {\n        handleSetConfig('particles', value)\n        setParticles(range(0, value))\n      })\n    shapeFolder\n      .add(config, 'widthRadius')\n      .min(1)\n      .max(200)\n      .step(1)\n      .onChange((value) => handleSetConfig('widthRadius', value))\n\n    // add desired folders and parameters\n\n    particlesFolder.open()\n    shapeFolder.open()\n  }\n\n  useEffect(() => {\n    init()\n  }, [])\n\n  return { config, handleSetConfig, particles, setParticles, isDebugMode }\n}\n\nexport default useParticlesConfig\n```\n\n----------------------------------------\n\nTITLE: Defining AddProductViewModel for Product Management\nDESCRIPTION: Defines the 'AddProductViewModel', handling state management for adding products. Utilizes Hilt for dependency injection and Flow for reactive state updates. The onCreateProduct method creates a product using the repository and updates UI states for loading and success.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n@HiltViewModel\nclass AddProductViewModel @Inject constructor(\n    private val productRepository: ProductRepository,\n) : ViewModel() {\n\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: Flow<Boolean> = _isLoading\n\n    private val _showSuccessMessage = MutableStateFlow(false)\n    val showSuccessMessage: Flow<Boolean> = _showSuccessMessage\n\n    fun onCreateProduct(name: String, price: Double) {\n        if (name.isEmpty() || price <= 0) return\n        viewModelScope.launch {\n            _isLoading.value = true\n            val product = Product(\n                id = UUID.randomUUID().toString(),\n                name = name,\n                price = price,\n            )\n            productRepository.createProduct(product = product)\n            _isLoading.value = false\n            _showSuccessMessage.emit(true)\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Realtime Events in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to subscribe to realtime events from a Supabase database within a Remix application.  It uses types for enhanced type safety with Supabase and the database. The snippet leverages `createServerClient` for server-side Supabase client creation and establishes a channel to listen for INSERT events on the posts table, updating the state with new post data when an event occurs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderData, useOutletContext } from '@remix-run/react'\nimport { createServerClient } from '@supabase/auth-helpers-remix'\nimport { json } from '@remix-run/node'\nimport { useEffect, useState } from 'react'\n\nimport type { SupabaseClient } from '@supabase/auth-helpers-remix'\nimport type { Database } from 'db_types'\n\ntype Post = Database['public']['Tables']['posts']['Row']\n\nimport type { LoaderFunctionArgs } from '@remix-run/node'\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const response = new Response()\n  const supabase = createServerClient<Database>(\n    process.env.SUPABASE_URL!,\n    process.env.SUPABASE_ANON_KEY!,\n    {\n      request,\n      response,\n    }\n  )\n\n  const { data } = await supabase.from('posts').select()\n\n  return json({ serverPosts: data ?? [] }, { headers: response.headers })\n}\n\nexport default function Index() {\n  const { serverPosts } = useLoaderData<typeof loader>()\n  const [posts, setPosts] = useState(serverPosts)\n  const { supabase } = useOutletContext<{ supabase: SupabaseClient<Database> }>()\n\n  useEffect(() => {\n    setPosts(serverPosts)\n  }, [serverPosts])\n\n  useEffect(() => {\n    const channel = supabase\n      .channel('*')\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'posts' }, (payload) =>\n        setPosts([...posts, payload.new as Post])\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [supabase, posts, setPosts])\n\n  return <pre>{JSON.stringify(posts, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Secrets for Preview Branches\nDESCRIPTION: Commands for setting up encrypted secrets in preview environments\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx dotenvx set SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET \"<your-secret>\" -f supabase/.env.preview\nnpx supabase secrets set --env-file supabase/.env.keys\n```\n\n----------------------------------------\n\nTITLE: Remove Supabase Network Restrictions via CLI\nDESCRIPTION: This command removes all network restrictions for a Supabase project by allowing all IPv4 and IPv6 addresses. It achieves this by setting the allowed CIDR to 0.0.0.0/0 for IPv4 and ::/0 for IPv6.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/network-restrictions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> supabase network-restrictions --project-ref {ref} update --db-allow-cidr 0.0.0.0/0 --db-allow-cidr ::/0 --experimental\nDB Allowed IPv4 CIDRs: &[0.0.0.0/0]\nDB Allowed IPv6 CIDRs: &[::/0]\nRestrictions applied successfully: true\n```\n\n----------------------------------------\n\nTITLE: Querying Cal.com Event Types with JSON Parsing\nDESCRIPTION: SQL query to extract and format event types from Cal.com. It uses JSON functions to extract nested values like profile name, event ID, and title from the JSON structure returned by Cal.com's API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- extract event types\nselect\n  etg->'profile'->>'name' as profile,\n  et->>'id' as id,\n  et->>'title' as title\nfrom cal.event_types t\n  cross join json_array_elements((attrs->'eventTypeGroups')::json) etg\n  cross join json_array_elements((etg->'eventTypes')::json) et;\n```\n\n----------------------------------------\n\nTITLE: Embedding MP4 Video Player - HTML video\nDESCRIPTION: HTML video element configuration for displaying feature demonstrations with autoplay and controls\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-03-supabase-alpha-september-2020.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/duplicate-tables.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: SQL Query Demonstrating Data Duplication\nDESCRIPTION: Shows a SQL query that joins blog posts with comments, resulting in data duplication for the blog post title.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  blog_posts.title,\n  comments.body as comment_body\nfrom\n  blog_posts\n  join comments on blog_posts.id = comments.blog_post_id;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry for ChatGPT Retrieval Plugin\nDESCRIPTION: Command to install dependencies for the ChatGPT Retrieval Plugin using Poetry package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Query Plan Analysis with OrioleDB\nDESCRIPTION: Examples of using EXPLAIN to analyze query execution plans in OrioleDB, showing index usage and performance metrics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;\n                                                 QUERY PLAN\n────────────────────────────────────────────────────────────────────────────────────────────────────────────\n Limit  (cost=0.15..1.67 rows=10 width=120)\n   ->  Index Scan Backward using blog_post_published_at on blog_post  (cost=0.15..48.95 rows=320 width=120)\n\nEXPLAIN SELECT * FROM blog_post WHERE id = 1;\n                                    QUERY PLAN\n──────────────────────────────────────────────────────────────────────────────────\n Index Scan using blog_post_pkey on blog_post  (cost=0.15..8.17 rows=1 width=120)\n   Index Cond: (id = 1)\n\nEXPLAIN (ANALYZE, BUFFERS) SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;\n                                                                      QUERY PLAN\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n Limit  (cost=0.15..1.67 rows=10 width=120) (actual time=0.052..0.054 rows=1 loops=1)\n   ->  Index Scan Backward using blog_post_published_at on blog_post  (cost=0.15..48.95 rows=320 width=120) (actual time=0.050..0.052 rows=1 loops=1)\n Planning Time: 0.186 ms\n Execution Time: 0.088 ms\n```\n\n----------------------------------------\n\nTITLE: Creating Triggers for Automatic User and Board Management in Supabase\nDESCRIPTION: This SQL script defines triggers to automatically add users to the users table upon registration and create user-board associations when a new board is created.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- inserts a row into user_boards\ncreate function public.handle_board_added()\nreturns trigger\nlanguage plpgsql\nsecurity definer\nas $$\nbegin\n  insert into public.user_boards (board_id, user_id)\n  values (new.id, auth.uid());\n  return new;\nend;\n$$;\n\n-- trigger the function every time a board is created\ncreate trigger on_board_created\n  after insert on boards\n  for each row execute procedure public.handle_board_added();\n\n\ncreate or replace function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.users (id, email)\n  values (new.id, new.email);\n  return new;\nend;\n$$ language plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: PostGIS INSERT Query Performance Test\nDESCRIPTION: Complex INSERT query used to benchmark Supavisor vs PgBouncer performance at 5,000 QPS. Includes PostGIS spatial data and dynamic values for testing realistic workloads.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-11-supavisor-1-million.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into positions (\n    stud_id,\n    first_name,\n    last_name,\n    title,\n    reports_to,\n    timestamp,\n    location,\n    email\n)\nvalues (\n    ${name},\n    'Virtual ${name}',\n    'User ${name}',\n    'Load Tester',\n    1,\n    ${Date.now()},\n    st_point(-73.946${x}, 40.807${y}),\n    'vu${name}@acme.corp'\n);\n```\n\n----------------------------------------\n\nTITLE: Spreading Related Tables in PostgREST Queries\nDESCRIPTION: Shows how to use the new spread operator to expand related table columns and remove nested objects in the query result. This feature works for one-to-one and many-to-one relationships.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /films?select=title,...technical_specs(camera,laboratory,duration)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase.from('films').select(`\n    title,\n    ...technical_specs (\n      camera, laboratory, duration\n    )\n  `)\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Pulp Fiction\",\n    \"camera\": \"Arriflex 35-III\",\n    \"laboratory\": \"DeLuxe, Hollywood (CA), USA (color)\",\n    \"duration\": \"02:34:00\"\n  },\n  \"...\"\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase project\nDESCRIPTION: Command to initialize a Supabase project, which sets up local development environment configurations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\n\n# ✔ Port for Supabase URL: · 8000\n# ✔ Port for PostgreSQL database: · 5432\n# ✔ Project initialized.\n# Supabase URL: http://localhost:8000\n# Supabase Key (anon, public): eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYwMzk2ODgzNCwiZXhwIjoyNTUwNjUzNjM0LCJyb2xlIjoiYW5vbiJ9.36fUebxgx1mcBo4s19v0SzqmzunP--hm_hep0uLX0ew\n# Supabase Key (service_role, private): eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYwMzk2ODgzNCwiZXhwIjoyNTUwNjUzNjM0LCJyb2xlIjoiYW5vbiJ9.36fUebxgx1mcBo4s19v0SzqmzunP--hm_hep0uLX0ew\n# Database URL: postgres://postgres:postgres@localhost:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Supabase in Hono\nDESCRIPTION: Command to copy the environment variables template file which needs to be populated with Supabase project URL and anonymous key for the Hono application to connect to Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/hono.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Site URL Usage Example\nDESCRIPTION: Demonstration of using SiteURL variable in email template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Visit <a href=\"{{ .SiteURL }}\">here</a> to log in.</p>\n```\n\n----------------------------------------\n\nTITLE: Restarting Supabase Local Development Stack\nDESCRIPTION: Commands to stop and restart the entire Supabase development stack to enable additional services like Auth and Storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/restoring-downloaded-backup.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsupabase stop\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Supabase Project\nDESCRIPTION: This command generates TypeScript types for the storage and public schemas of a Supabase project. It outputs the types to a file named types.ts in the huggingface-image-captioning function directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/huggingface-image-captioning.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase gen types typescript --project-id=your-project-ref --schema=storage,public > supabase/functions/huggingface-image-captioning/types.ts\n```\n\n----------------------------------------\n\nTITLE: Restoring PostgreSQL from WAL-G Physical Backup\nDESCRIPTION: Commands to remove the current data directory and restore it from the latest physical backup stored in S3 using WAL-G.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ rm -rf /var/lib/postgresql/12/main\n$ envdir /etc/wal-g.d/env /usr/local/bin/wal-g backup-fetch /var/lib/postgresql/12/main LATEST\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Existing Database Schema with npm\nDESCRIPTION: Command to pull the existing database schema into your Prisma models for projects with an already populated database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Creating Materialized View in PostgreSQL\nDESCRIPTION: Demonstrates how to create a materialized view that stores query results on disk for faster subsequent access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ncreate materialized view transcripts as\n  select\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\n  from\n    grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n```\n\n----------------------------------------\n\nTITLE: Heartbeat Message Format\nDESCRIPTION: Heartbeat message format that should be sent every 30 seconds to maintain connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"heartbeat\",\n   \"topic\": \"phoenix\",\n   \"payload\": {},\n   \"ref\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Out - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to sign out a user using the Supabase client library. It initializes the Supabase client and calls the signOut method to remove the user's session and clear local storage. The function returns a promise that resolves when the sign-out is complete or rejects with an error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hugging Face Image Captioning with Supabase Edge Function\nDESCRIPTION: This TypeScript code implements an Edge Function that uses Hugging Face's image-to-text model to generate captions for images uploaded to Supabase Storage. It listens for webhook events, retrieves the uploaded image, generates a caption, and stores it in a database table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/huggingface-image-captioning.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\nimport { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2'\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\nimport { Database } from './types.ts'\n\nconsole.log('Hello from `huggingface-image-captioning` function!')\n\nconst hf = new HfInference(Deno.env.get('HUGGINGFACE_ACCESS_TOKEN'))\n\ntype SoRecord = Database['storage']['Tables']['objects']['Row']\ninterface WebhookPayload {\n  type: 'INSERT' | 'UPDATE' | 'DELETE'\n  table: string\n  record: SoRecord\n  schema: 'public'\n  old_record: null | SoRecord\n}\n\nserve(async (req) => {\n  const payload: WebhookPayload = await req.json()\n  const soRecord = payload.record\n  const supabaseAdminClient = createClient<Database>(\n    // Supabase API URL - env var exported by default when deployed.\n    Deno.env.get('SUPABASE_URL') ?? '',\n    // Supabase API SERVICE ROLE KEY - env var exported by default when deployed.\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n  )\n\n  // Construct image url from storage\n  const { data, error } = await supabaseAdminClient.storage\n    .from(soRecord.bucket_id!)\n    .createSignedUrl(soRecord.path_tokens!.join('/'), 60)\n  if (error) throw error\n  const { signedUrl } = data\n\n  // Run image captioning with Huggingface\n  const imgDesc = await hf.imageToText({\n    data: await (await fetch(signedUrl)).blob(),\n    model: 'nlpconnect/vit-gpt2-image-captioning',\n  })\n\n  // Store image caption in Database table\n  await supabaseAdminClient\n    .from('image_caption')\n    .insert({ id: soRecord.id!, caption: imgDesc.generated_text })\n    .throwOnError()\n\n  return new Response('ok')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Toggle Group Component in React\nDESCRIPTION: Example of how to use the Toggle Group component with multiple Toggle Group Items in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle-group.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleGroup type=\"single\">\n  <ToggleGroupItem value=\"a\">A</ToggleGroupItem>\n  <ToggleGroupItem value=\"b\">B</ToggleGroupItem>\n  <ToggleGroupItem value=\"c\">C</ToggleGroupItem>\n</ToggleGroup>\n```\n\n----------------------------------------\n\nTITLE: Initializing Angular App and Installing Dependencies\nDESCRIPTION: Commands to create a new Angular app named 'supabase-angular' and install the Supabase JavaScript client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx ng new supabase-angular --routing false --style css --standalone false\ncd supabase-angular\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Range Data in PostgreSQL 14\nDESCRIPTION: Demonstrates how to insert data into a table with a multi-range column. This showcases the ability to insert non-contiguous time ranges in a single statement, a new feature in PostgreSQL 14.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into sensor_range\n  (metric_desc, metric_level, metric_ts)\nvalues\n  (\n    'Temperature',\n    'high',\n    '{[2021-11-01 6:00, 2021-11-01 10:00],[2021-11-05 14:00, 2021-11-05 20:00]}'\n  );\n\ninsert into sensor_range\n  (metric_desc, metric_level, metric_ts)\nvalues\n  (\n    'Temperature',\n    'low',\n    '{[2021-11-01 10:00, 2021-11-01 12:00],[2021-11-05 21:00, 2021-11-05 22:00]}'\n  );\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Error Response in SQL\nDESCRIPTION: This snippet demonstrates the structure of a JSON error response for a SQL-based hook in Supabase. It specifies error details, including an HTTP status code and a message. There are no prerequisites other than understanding JSON structure. Inputs include the status code and message, while the output is a JSON object representing the error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"http_code\": 429,\n    \"message\": \"You can only verify a factor once every 10 seconds.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unnesting Arrays to Access Nested Values in Edge Logs\nDESCRIPTION: Demonstrates how to use cross join unnest() operations to access deeply nested values in the logs data structure, specifically to retrieve request method and country information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect timestamp, request.method, header.cf_ipcountry\nfrom\n  edge_logs as t\n  cross join unnest(t.metadata) as metadata\n  cross join unnest(metadata.request) as request\n  cross join unnest(request.headers) as header;\n```\n\n----------------------------------------\n\nTITLE: Creating Step-by-Step Tutorial Components\nDESCRIPTION: Example of using StepHikeCompact component to create structured, step-by-step tutorials with accompanying code samples.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<StepHikeCompact>\n\n  <StepHikeCompact.Step step={1}>\n\n    <StepHikeCompact.Details title=\"The first step\">\n\n    Explanation of what to do first.\n\n    </StepHikeCompact.Details>\n\n    <StepHikeCompact.Code>\n\n      ```sql\n      select ...\n      ```\n\n    </StepHikeCompact.Code>\n\n  </StepHikeCompact.Step>\n\n  <StepHikeCompact.Step step={2}>\n\n    <StepHikeCompact.Details title=\"No code in this step\" fullWidth>\n\n    Explanation of what to do next. This stretches the full width of the section.\n\n    </StepHikeCompact.Details>\n\n  </StepHikeCompact.Step>\n\n</StepHikeCompact>\n```\n\n----------------------------------------\n\nTITLE: Seeding Employee Data - SQL\nDESCRIPTION: SQL script to insert initial employee data into the employees table\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ninsert into public.employees\n  (name)\nvalues\n  ('Erlich Bachman'),\n  ('Richard Hendricks'),\n  ('Monica Hall');\n```\n\n----------------------------------------\n\nTITLE: users.json after flattening\nDESCRIPTION: This JSON snippet shows the contents of the `users.json` file after flattening, where the 'weapons' array has been removed.  This is the state of the document after applying the custom hook example.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"uid\": \"abc123\", \"name\": \"mark\", \"score\": 100 },\n  { \"uid\": \"xyz789\", \"name\": \"chuck\", \"score\": 9999999 }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding NgxSpinner Styles Configuration\nDESCRIPTION: JSON configuration for including NgxSpinner styles in Angular application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"styles\": [\n  \"src/styles.scss\",\n  \"node_modules/ngx-spinner/animations/ball-scale-multiple.css\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Exporting Database with pg_dump\nDESCRIPTION: Command to export data from Vercel Postgres using pg_dump with flags for cleaning existing objects, handling if-exists conditions, properly quoting identifiers, and removing ownership and privileges information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npg_dump \"$OLD_DB_URL\" \\\n  --clean \\\n  --if-exists \\\n  --quote-all-identifiers \\\n  --no-owner \\\n  --no-privileges \\\n  > dump.sql\n```\n\n----------------------------------------\n\nTITLE: HTTP Hook Payload Verification\nDESCRIPTION: JavaScript/Deno code demonstrating how to verify HTTP hook payloads using the Standard Webhooks library and process the authenticated request.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'\n\nDeno.serve(async (req) => {\n  const payload = await req.text()\n  const hookSecret = Deno.env.get('SEND_SMS_HOOK_SECRETS').replace('v1,whsec_', '')\n  // Extract headers and security specific fields\n  const headers = Object.fromEntries(req.headers)\n  const wh = new Webhook(hookSecret)\n  const data = wh.verify(payload, headers)\n\n  // Payload data is verified, continue with business logic here\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase CDN Meme Image in Markdown\nDESCRIPTION: This code snippet demonstrates how to include a meme image related to Supabase CDN in a Markdown document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-launch-week-three-friday-five-more-things.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![too_damn_high.png](/images/blog/launch-week-three/five-more-things/too_damn_high.png)\n```\n\n----------------------------------------\n\nTITLE: Updating App Component Template\nDESCRIPTION: Basic HTML template for the main app component using router outlet.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<router-outlet></router-outlet>\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Relationships in SQL\nDESCRIPTION: Shows how to create computed relationships using SQL functions to define relationships between views or materialized views that cannot have traditional foreign keys.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- many-to-one relationship on scores -> players\ncreate function player(scores)\nreturns setof players rows 1 -- rows 1 defines a \"one\" end\nlanguage sql stable\nas $$\n  select *\n\tfrom players\n\twhere id = $1.player_id;\n$$;\n\n-- one-to-many relationship on players -> scores\ncreate function scores(players)\nreturns setof scores -- there's an implicit rows 1000 here, which is assumed to be \"many\"\nlanguage sql stable\nas $$\n  select *\n\tfrom scores\n\twhere player_id = $1.id;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Supabase and Removing Data\nDESCRIPTION: Commands to completely uninstall Supabase by stopping Docker containers, removing volumes, and deleting Postgres data. This will destroy all data in the database and storage volumes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Stop docker and remove volumes:\ndocker compose down -v\n\n# Remove Postgres data:\nrm -rf volumes/db/data/\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally\nDESCRIPTION: This snippet provides the command to start the Supabase local environment and serve the specified Edge Function. It requires the Supabase CLI and local configuration from an environment file.\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw13-meetups-ogs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve lw13-meetups-ogs --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Analyzing Authenticated User Query Paths in Supabase Edge Logs (SQL)\nDESCRIPTION: This query identifies frequently accessed paths by authenticated users in the Database API. It groups results by authenticated user and path, providing insights into user behavior and popular endpoints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  -- only available for front-end clients\n  auth_users,\n  path,\n  count(auth_users) as ip_count\nfrom\n  edge_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(request) as request\n  cross join unnest(sb) as sb\nwhere\n  -- only look at DB API\n  regexp_contains(path, '^/rest/v1/')\ngroup by auth_users, path;\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Component via CLI\nDESCRIPTION: Command to install the Toggle Group component using the shadcn-ui CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add toggle-group\n```\n\n----------------------------------------\n\nTITLE: Starting the SolidJS Development Server\nDESCRIPTION: Command to start the SolidJS development server to run the application locally.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Profile Screen with Supabase User Data\nDESCRIPTION: Implements a profile screen that displays user information retrieved from Supabase authentication, including profile image and full name. Includes sign-out functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:myauthapp/main.dart';\nimport 'package:myauthapp/screens/login_screen.dart';\n\nclass ProfileScreen extends StatelessWidget {\n  const ProfileScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final user = supabase.auth.currentUser;\n    final profileImageUrl = user?.userMetadata?['avatar_url'];\n    final fullName = user?.userMetadata?['full_name'];\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Profile'),\n        actions: [\n          TextButton(\n            onPressed: () async {\n              await supabase.auth.signOut();\n              if (context.mounted) {\n                Navigator.of(context).pushReplacement(\n                  MaterialPageRoute(builder: (context) => const LoginScreen()),\n                );\n              }\n            },\n            child: const Text('Sign out'),\n          )\n        ],\n      ),\n      body: Center(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            if (profileImageUrl != null)\n              ClipOval(\n                child: Image.network(\n                  profileImageUrl,\n                  width: 100,\n                  height: 100,\n                  fit: BoxFit.cover,\n                ),\n              ),\n            const SizedBox(height: 16),\n            Text(\n              fullName ?? '',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n            const SizedBox(height: 32),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up FerretDB with Docker and Environment Variables\nDESCRIPTION: Docker commands and environment variable setup for running FerretDB locally with Supabase database connection\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set the required environment variables\nexport DB_USER=postgres\nexport DB_PASSWORD=<your db password>\nexport SUPA_PROJECT_REF=<your Supabase project ref>\nexport SUPA_REGION=<your project region>\nexport DB_URL=postgres://$DB_USER.$SUPA_PROJECT_REF:$DB_PASSWORD@$SUPA_REGION.pooler.supabase.com:5432/postgres\n\n# Run FerretDB in docker container\ndocker run -p 27017:27017 -p 8080:8080 -e FERRETDB_POSTGRESQL_URL=$DB_URL ghcr.io/ferretdb/ferretdb\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Deep Link URL Scheme in Info.plist\nDESCRIPTION: XML configuration for iOS Info.plist file to define a custom URL scheme that enables deep linking for Supabase authentication callbacks. Sets up the bundle URL types and schemes for the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <!-- other tags -->\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>io.supabase.user-management</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Webhook Handling in TypeScript with Supabase Edge Functions\nDESCRIPTION: This code demonstrates how to set up an Edge Function that verifies and processes Stripe webhooks. It validates webhook signatures, parses event data, and handles different event types.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/stripe-webhooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.131.0/http/server.ts'\nimport Stripe from 'https://esm.sh/stripe@11.1.0?target=deno'\n\nconst stripe = Stripe(Deno.env.get('STRIPE_API_KEY') ?? '', {\n  httpClient: Stripe.createFetchHttpClient(),\n  apiVersion: '2022-08-01',\n})\n\n// This is your Stripe CLI webhook secret for testing your endpoint locally.\nconst webhookSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET') ?? ''\n\nserve(async (req) => {\n  const signature = req.headers.get('Stripe-Signature')\n\n  if (!signature) {\n    return new Response('No signature', { status: 400 })\n  }\n\n  const body = await req.text()\n\n  let event\n  try {\n    event = await stripe.webhooks.constructEventAsync(\n      body,\n      signature,\n      webhookSecret,\n      undefined,\n      Stripe.createSubtleCryptoProvider()\n    )\n  } catch (err) {\n    console.error(`❌ Error message: ${err.message}`)\n    return new Response(`Webhook Error: ${err.message}`, { status: 400 })\n  }\n\n  console.log(`✅ Success: ${event.id}`)\n\n  // Return a response to acknowledge receipt of the event.\n  return new Response(JSON.stringify({ received: true }), {\n    headers: { 'Content-Type': 'application/json' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Splash Page for Auth State Redirection in Flutter\nDESCRIPTION: This snippet defines a SplashPage widget that checks the user's authentication state and redirects them to either the Register page or the Chat page accordingly. It uses the Supabase auth currentSession to determine the user's state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:my_chat_app/pages/chat_page.dart';\nimport 'package:my_chat_app/pages/register_page.dart';\nimport 'package:my_chat_app/utils/constants.dart';\n\n/// Page to redirect users to the appropriate page depending on the initial auth state\nclass SplashPage extends StatefulWidget {\n  const SplashPage({Key? key}) : super(key: key);\n\n  @override\n  SplashPageState createState() => SplashPageState();\n}\n\nclass SplashPageState extends State<SplashPage> {\n  @override\n  void initState() {\n    super.initState();\n    _redirect();\n  }\n\n  Future<void> _redirect() async {\n    // await for for the widget to mount\n    await Future.delayed(Duration.zero);\n\n    final session = supabase.auth.currentSession;\n    if (session == null) {\n      Navigator.of(context)\n          .pushAndRemoveUntil(RegisterPage.route(), (route) => false);\n    } else {\n      Navigator.of(context)\n          .pushAndRemoveUntil(ChatPage.route(), (route) => false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold(body: preloader);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Introduction Section in Markdown\nDESCRIPTION: This snippet defines the introduction section for the self-hosting storage documentation using markdown and custom React components. It includes a title and a layout for presenting educational content with details and examples.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-storage/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: introduction\ntitle: Introduction\nhideTitle: true\n---\n\n<div className=\"flex items-start gap-6 not-prose\" id=\"introduction\">\n  <div className=\"flex flex-col gap-2\">\n    <h1 className=\"text-3xl text-foreground m-0\">Self-Hosting Storage</h1>\n  </div>\n</div>\n\n<RefSubLayout.EducationRow>\n  <RefSubLayout.Details>\n\n    An S3 compatible object storage service that integrates with Postgres.\n\n    - Uses Postgres as it's datastore for storing metadata\n    - Authorization rules are written as Postgres Row Level Security policies\n    - Integrates with S3 as the storage backend (with more in the pipeline!)\n    - Extremely lightweight and performant\n\n  </RefSubLayout.Details>\n\n  <RefSubLayout.Examples>\n\n    ### Client libraries\n\n    - [JavaScript](https://github.com/supabase/storage-js)\n    - [Dart](https://github.com/supabase/storage-dart)\n\n    ### Additional links\n\n    - [Source code](https://github.com/supabase/storage-api)\n    - [Known bugs and issues](https://github.com/supabase/storage-js/issues)\n    - [Storage guides](/docs/guides/storage)\n    - [OpenAPI docs](https://supabase.github.io/storage/)\n    - [Why we built a new object storage service](https://supabase.com/blog/supabase-storage)\n\n  </RefSubLayout.Examples>\n\n</RefSubLayout.EducationRow>\n```\n\n----------------------------------------\n\nTITLE: Defining Room Model in Dart\nDESCRIPTION: This snippet defines the Room model class, which represents a chat room in the application. It includes properties like id, createdAt, otherUserId, and lastMessage, as well as methods for serialization and deserialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:my_chat_app/models/message.dart';\n\nclass Room {\n  Room({\n    required this.id,\n    required this.createdAt,\n    required this.otherUserId,\n    this.lastMessage,\n  });\n\n  /// ID of the room\n  final String id;\n\n  /// Date and time when the room was created\n  final DateTime createdAt;\n\n  /// ID of the user who the user is talking to\n  final String otherUserId;\n\n  /// Latest message submitted in the room\n  final Message? lastMessage;\n\n  Map<String, dynamic> toMap() {\n    return {\n      'id': id,\n      'createdAt': createdAt.millisecondsSinceEpoch,\n    };\n  }\n\n  /// Creates a room object from room_participants table\n  Room.fromRoomParticipants(Map<String, dynamic> map)\n      : id = map['room_id'],\n        otherUserId = map['profile_id'],\n        createdAt = DateTime.parse(map['created_at']),\n        lastMessage = null;\n\n  Room copyWith({\n    String? id,\n    DateTime? createdAt,\n    String? otherUserId,\n    Message? lastMessage,\n  }) {\n    return Room(\n      id: id ?? this.id,\n      createdAt: createdAt ?? this.createdAt,\n      otherUserId: otherUserId ?? this.otherUserId,\n      lastMessage: lastMessage ?? this.lastMessage,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Express\nDESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for an Express application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=your_supabase_project_url\nSUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n----------------------------------------\n\nTITLE: Sign In with Facebook using Supabase\nDESCRIPTION: This Kotlin snippet demonstrates how to sign in a user with Facebook using Supabase. It uses the `signInWith` method, passing `Facebook` as the provider to initiate the Facebook OAuth flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithFacebook() {\n\tsupabase.auth.signInWith(Facebook)\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Instrumentation Hook for Sentry with Supabase\nDESCRIPTION: Next.js instrumentation file that imports the appropriate Sentry configuration based on the runtime environment. Handles both Node.js and edge runtimes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./sentry.server.config')\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./sentry.edge.config')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Data Structure in TypeScript\nDESCRIPTION: TypeScript type definition for the data structure required by the Logs Bar Chart component. Each data point must include a timestamp and counts for both successful and error logs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/logs-bar-chart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype LogsBarChartDatum = {\n  timestamp: string\n  ok_count: number\n  error_count: number\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Secret Declaration for JWT\nDESCRIPTION: Example of storing a sensitive JWT secret in a .env file that should never be checked into version control, to be referenced by docker-compose.yml.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n## Never check your secrets into version control\n`${JWT_SECRET}`\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization in Groovy build file\nDESCRIPTION: This snippet demonstrates how to add the KotlinX Serialization plugin to a Kotlin project using Gradle Groovy DSL. It's necessary for using the default serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.plugin.serialization' version 'KOTLIN_VERSION'\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Sidebar Theming\nDESCRIPTION: Defines CSS variables for theming the sidebar component in both light and dark modes, with separate variables from the main application theme.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_38\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 0 0% 98%;\n    --sidebar-primary-foreground: 240 5.9% 10%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Launch Week 12 Meetup Event in YAML\nDESCRIPTION: This YAML configuration defines the details for a Supabase community meetup event in Tenerife, Spain. It specifies the event title, subtitle, type, link, date, timezone, duration, and categories.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_events/2024-08-30__launch-week-12-meetup-tenerife-spain.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Supabase Launch Week 12 Meetup: Tenerife, España'\nsubtitle: 'Join the community at Tándem & Coworking - La Orotava, Canarias'\ntype: 'meetup'\nonDemand: false\ndisable_page_build: true\nlink: { href: https://lu.ma/5219ibrl, target: '_blank' }\ndate: '2024-08-30T10:00:00.000+01:00'\ntimezone: 'Atlantic/Canary'\nduration: '2 hours'\ncategories:\n  - meetup\n---\n```\n\n----------------------------------------\n\nTITLE: Inserting Geographic Point Data with JavaScript\nDESCRIPTION: JavaScript code using Supabase client to insert restaurant data with geographic points as WKT (Well-Known Text) strings. The POINT format is 'POINT(longitude latitude)'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { error } = await supabase.from('restaurants').insert([\n  {\n    name: 'Supa Burger',\n    location: 'POINT(-73.946823 40.807416)',\n  },\n  {\n    name: 'Supa Pizza',\n    location: 'POINT(-73.94581 40.807475)',\n  },\n  {\n    name: 'Supa Taco',\n    location: 'POINT(-73.945826 40.80629)',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing User Invitation System with Supabase\nDESCRIPTION: A function that handles inviting users to boards by finding a user by email and adding them to the board. It first checks if the user exists, and if so, creates an entry in the user_boards table to grant them access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n  // Invite others\n  async addUserToBoard(boardId: string, email: string) {\n    const user = await this.supabase\n      .from(USERS_TABLE)\n      .select('id')\n      .match({ email })\n      .single();\n\n    if (user.data?.id) {\n      const userId = user.data.id;\n      const userBoard = await this.supabase.from(USER_BOARDS_TABLE).insert({\n        user_id: userId,\n        board_id: boardId,\n      });\n      return userBoard;\n    } else {\n      return null;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Unnesting Postgres Log Metadata in SQL\nDESCRIPTION: SQL query demonstrating how to access and unnest the metadata array in postgres_logs to extract detailed information about log events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  event_message,\n  parsed.<column name>\nfrom\n  postgres_logs\n-- Unpack data stored in the 'metadata' field\ncross join unnest(metadata) AS metadata\n-- After unpacking the 'metadata' field, extract the 'parsed' field from it\ncross join unnest(parsed) AS parsed;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video in a Markdown document using an iframe. It includes responsive design classes and various attributes for customization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-12-supabase-series-b.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/4t_63HT3rZY\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Broadcast Message Format\nDESCRIPTION: Structure for broadcast events in the Realtime Protocol.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"broadcast\",\n   \"topic\": string,\n   \"payload\": {\n      \"event\": string,\n      \"payload\": {[key: string]: boolean | number | string | null | undefined},\n      \"type\": \"broadcast\"\n   },\n   \"ref\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Component Implementation\nDESCRIPTION: Shows the most basic implementation of the Sidebar component, which can be used as a starting point for creating a collapsible sidebar.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from '@/components/ui/sidebar'\n\nexport function AppSidebar() {\n  return <Sidebar />\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Local Development\nDESCRIPTION: Docker compose configuration that sets up port mapping and volume binding for local development. Maps port 8000 to container port 9000 and mounts the functions directory for live updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\nservices:\n  web:\n    build: .\n    volumes:\n      - type: bind\n        source: ./functions\n        target: /home/deno/functions\n    ports:\n      - \"8000:9000\"\n```\n\n----------------------------------------\n\nTITLE: Querying Tables with Multiple Foreign Keys in Swift\nDESCRIPTION: Swift example showing how to query shifts with explicit join definitions for multiple foreign keys and parse the response.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nstruct Shift: Codable {\n  let id: Int\n  let userId: Int\n  let attendanceStatus: String?\n\n  let scans: [Scan]\n\n  struct Scan: Codable {\n    let id: Int\n    let userId: Int\n    let badgeScanTime: TimeInterval\n\n    enum CodingKeys: String, CodingKey {\n      case id\n      case userId = \"user_id\"\n      case badgeScanTime = \"badge_scan_time\"\n    }\n  }\n\n  enum CodingKeys: String, CodingKey {\n    case id\n    case userId = \"user_id\"\n    case attendanceStatus = \"attendance_status\"\n  }\n}\n\nlet shifts: [Shift] = try await supabase\n  .from(\"shifts\")\n  .select(\n    \"\"\"\n      *,\n      start_scan:scans!scan_id_start (\n        id,\n        user_id,\n        badge_scan_time\n      ),\n     scans: scan_id_end (\n        id,\n        user_id,\n        badge_scan_time\n     )\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n\n----------------------------------------\n\nTITLE: Filtering Postgres Logs by IP Address in SQL\nDESCRIPTION: SQL query to filter Postgres logs by IP address. It groups successful authentication events by IP address and counts occurrences, focusing on connections from outside the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- filter by IP\nselect\n  event_message,\n  connection_from as ip,\n  count(connection_from) as ip_count\nfrom\n  postgres_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(parsed) as parsed\nwhere\n  regexp_contains(user_name, '<ROLE>')\n  and regexp_contains(backend_type, 'client backend') -- only search for connections from outside the database (excludes cron jobs)\n  and regexp_contains(event_message, '^connection authenticated') -- only view successful authentication events\ngroup by connection_from, event_message\norder by ip_count desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Downloading Transformed Image in Python\nDESCRIPTION: This snippet shows how to download a transformed image using the Supabase Python client, specifying transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.storage.from_('bucket').download(\n  'image.jpg',\n  {\n    'width': 800,\n    'height': 300,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing React Component for Support Policy Page in JSX\nDESCRIPTION: This code snippet defines a React component for the Support Policy page. It imports layout components, sets metadata for the page, and wraps the content in a SectionContainer component. The component is then exported as the default export.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/support-policy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../layouts/Layout'\nimport SectionContainer from '../components/Layouts/SectionContainer'\n\nexport const meta = {\n  title: 'Support Policy',\n  description: 'Supabase Support Policy',\n}\n\n<SectionContainer>\n\n# Support Policy\n\n// ... content omitted for brevity ...\n\n</SectionContainer>\n\nexport default (context) => <Layout meta={meta} children={context.children} context={context} />\n```\n\n----------------------------------------\n\nTITLE: Creating Particle Component\nDESCRIPTION: Standalone component for individual particles with a reference for animation control.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react'\n\nconst Particle = ({ children }) => {\n  const particle = useRef(null)\n\n  return <mesh ref={particle}>{children}</mesh>\n}\n\nexport default Particle\n```\n\n----------------------------------------\n\nTITLE: Supabase Test and Lint Commands\nDESCRIPTION: CLI commands for testing databases with pgTAP and linting using plpgsql_check extension\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase test\nRun tests on local Supabase containers\n\nUsage:\n  supabase test [command]\n\nAvailable Commands:\n  db          Tests local database with pgTAP\n  new         Create a new test file\n```\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase db lint\nChecks local database for typing error\n\nUsage:\n  supabase db lint [flags]\n\nFlags:\n  -h, --help                        help for lint\n      --level [ warning | error ]   Error level to emit. (default warning)\n      --linked                      Lints the linked project for schema errors.\n  -s, --schema strings              List of schema to include. (default all)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Colors and Labels\nDESCRIPTION: Configuration object for chart that defines labels and colors for each data series. This separates styling from data structure for better maintenance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type ChartConfig } from '@/components/ui/chart'\n\nconst chartConfig = {\n  desktop: {\n    label: 'Desktop',\n    color: '#2563eb',\n  },\n  mobile: {\n    label: 'Mobile',\n    color: '#60a5fa',\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Supabase Storage Upload Command Usage\nDESCRIPTION: Command line syntax for uploading downloaded files to a Supabase Storage bucket, specifying prefix, source folder, and target bucket name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-storage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode upload.js <prefix> <folder> <bucket>\n```\n\n----------------------------------------\n\nTITLE: Query Challenges Comment Block\nDESCRIPTION: A set of query challenges for practicing Supabase queries with different conditions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// 1. List all the countries in Antarctica\n// 2. Fetch the iso3 code of the country with ID 3\n// 3. List the countries with 'Island' in the name\n// 4. Count the number of countries that start with 'Z' or 'Q'\n// 5. Fetch all the Countries where continents is null\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sidebar Structure with SidebarSeparator\nDESCRIPTION: Demonstrates how to use the SidebarSeparator component within a Sidebar structure to create visual separation between sidebar elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarHeader />\n  <SidebarSeparator />\n  <SidebarContent>\n    <SidebarGroup />\n    <SidebarSeparator />\n    <SidebarGroup />\n  </SidebarContent>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Image Loader for Supabase Storage\nDESCRIPTION: Shows how to set up and use a custom Next.js image loader for serving images from Supabase Storage, including configuration and usage examples.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// supabase-image-loader.js\nconst projectId = '<SUPABASE_PROJECT_ID>'\nexport default function supabaseLoader({ src, width, quality }) {\n  return `https://${projectId}.supabase.co/storage/v1/render/image/public/${src}?width=${width}&quality=${\n    quality || 75\n  }`\n}\n\n// nextjs.config.js\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './supabase-image-loader.js',\n  },\n}\n\n// Using Next Image\nimport Image from 'next/image'\nconst MyImage = (props) => {\n  return <Image src=\"bucket/image.png\" alt=\"Picture of the author\" width={500} height={500} />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Dialog Dependencies via CLI\nDESCRIPTION: Command to install the alert dialog component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase for Edge Functions\nDESCRIPTION: This bash command initializes Supabase for creating edge functions, which will be used to implement the route calculation functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# initialize Supabase\nnpx supabase init\n```\n\n----------------------------------------\n\nTITLE: Installing Popover via shadcn CLI\nDESCRIPTION: Command to add the Popover component using shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/popover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add popover\n```\n\n----------------------------------------\n\nTITLE: Create Supabase Edge Function\nDESCRIPTION: Command to create a new Supabase Edge Function for Amazon Bedrock integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new amazon-bedrock\n```\n\n----------------------------------------\n\nTITLE: Querying FDW with Supabase Client\nDESCRIPTION: JavaScript code showing how to query the secure FDW function using Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .rpc('get_stripe_products', { name_prefix: 'Test' })\n  .select('*')\nif (error) console.error(error)\nelse console.log(data)\n```\n\n----------------------------------------\n\nTITLE: Initializing Keycloak OAuth in JavaScript\nDESCRIPTION: Sign in with Keycloak provider using Supabase auth method, including the required openid scope for Keycloak version 22+\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function signInWithKeycloak() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'keycloak',\n    options: {\n      scopes: 'openid',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SupaUtils PostgreSQL Hook in C\nDESCRIPTION: Main hook implementation that intercepts planned statements to check for reserved role modifications. It processes utility statements and aborts execution if reserved roles are being modified.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nsupautils_hook(\n      PlannedStmt *pstmt,\n      const char *queryString,\n      ProcessUtilityContext context,\n      ParamListInfo params,\n      QueryEnvironment *queryEnv,\n      DestReceiver *dest,\n      QueryCompletion *completionTag\n)\n{\n  Node     *utility_stmt = pstmt->utilityStmt;\n\n  if(reserved_roles){\n    char *reserved_role = NULL;\n    List *reserved_role_list;\n\n    if (!SplitIdentifierString(pstrdup(reserved_roles), ',', &reserved_role_list))\n      ereport(ERROR,\n          (errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n           errmsg(\"parameter \\\"%s\\\" must be a comma-separated list of \"\n             \"identifiers\", reserved_roles)));\n\n    reserved_role = look_for_reserved_role(utility_stmt, reserved_role_list);\n\n    list_free(reserved_role_list);\n\n    if(reserved_role)\n      ereport(ERROR,\n        (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n         errmsg(\"\\\"%s\\\" is a reserved role, it cannot be modified\", reserved_role)));\n  }\n\n  if (prev_hook)\n    prev_hook(pstmt, queryString,\n                context, params, queryEnv,\n                dest, completionTag);\n  else\n    standard_ProcessUtility(pstmt, queryString,\n                context, params, queryEnv,\n                dest, completionTag);\n}\n```\n\n----------------------------------------\n\nTITLE: React Video Iframe Component Implementation\nDESCRIPTION: JSX code for embedding a YouTube video iframe with specific configuration for Log Drains demonstration\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-15-log-drains.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/A4GFmvgxS-E\"\n    title=\"Log Drains for exporting product logs is now available on Supabase\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Supabase Starter Template\nDESCRIPTION: Command to create a new Next.js application using the Supabase starter template.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/nextjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Setting Function Permissions\nDESCRIPTION: SQL commands to restrict function execution permissions for security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nrevoke execute on function public.get_stripe_products from public;\nrevoke execute on function public.get_stripe_products from anon;\ngrant execute on function public.get_stripe_products to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Unnesting Edge Logs SQL Query\nDESCRIPTION: SQL query demonstrating how to unnest metadata and response fields from edge_logs to access status codes and event messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  -- the event message does not require unnesting\n  event_message,\n  -- unnested status_code column from metadata.response field\n  status_code\nfrom\n  edge_logs\n  -- Unpack data stored in the 'metadata' field\n  cross join unnest(metadata) as metadata\n  -- After unpacking the 'metadata' field, extract the 'response' field from it\n  cross join unnest(response) as response;\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure with JSX Components\nDESCRIPTION: Markdown file with embedded JSX components showing FAQ implementation using Accordion components. Demonstrates structure for accessible, customizable documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Introduction\ndescription: Components and patterns that you can copy and paste into Supabase apps. Accessible. Customizable. Open Source.\n---\n\n## FAQ\n\n<Accordion type=\"multiple\">\n\n<AccordionItem value=\"faq-1\">\n\t<AccordionTrigger>\n\t\tWhy copy/paste and not packaged as a dependency?\n\t</AccordionTrigger>\n\t<AccordionContent>\nThe idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled.\n\nStart with some sensible defaults, then customize the components to your needs.\n\nOne of the drawback of packaging the components in an npm package is that the style is coupled with the implementation. _The design of your components should be separate from their implementation._\n\n</AccordionContent>\n</AccordionItem>\n\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Implementation\nDESCRIPTION: Example of creating and implementing a custom theme for Auth UI with light and dark variations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { Auth } from '@supabase/auth-ui-react'\n\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n\nconst customTheme = {\n  default: {\n    colors: {\n      brand: 'hsl(153 60.0% 53.0%)',\n      brandAccent: 'hsl(154 54.8% 45.1%)',\n      brandButtonText: 'white',\n      // ..\n    },\n  },\n  dark: {\n    colors: {\n      brandButtonText: 'white',\n      defaultButtonBackground: '#2e2e2e',\n      defaultButtonBackgroundHover: '#3e3e3e',\n      //..\n    },\n  },\n  evenDarker: {\n    colors: {\n      brandButtonText: 'white',\n      defaultButtonBackground: '#1e1e1e',\n      defaultButtonBackgroundHover: '#2e2e2e',\n      //..\n    },\n  },\n}\n\nconst App = () => (\n  <Auth\n    supabaseClient={supabase}\n    theme=\"default\"\n    appearance={{ theme: customTheme }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Supavisor Session Mode Connection String for Prisma\nDESCRIPTION: Example of a Supavisor connection string in session mode for Prisma, suitable for IPv4-only environments and migrations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\npostgres://[DB-USER].[PROJECT REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Functions with GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration for automatically deploying Supabase Edge Functions when pushing to or merging into the main branch. Requires SUPABASE_ACCESS_TOKEN secret and project ID configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Function\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}\n      PROJECT_ID: your-project-id\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n\n      - run: supabase functions deploy --project-ref $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Querying FDW Usage Statistics\nDESCRIPTION: Shows how to query the wrappers_fdw_stats table to get usage statistics for Foreign Data Wrappers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom extensions.wrappers_fdw_stats;\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Demo for Large Bucket Rendering in HTML\nDESCRIPTION: This HTML snippet embeds a video demonstration of the improved rendering performance for large buckets in Supabase Storage. It uses the <video> tag with autoplay, mute, and inline playback attributes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-27-storage-beta.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/launch-week-storage-2/large-buckets.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in HTML\nDESCRIPTION: HTML iframe code for embedding a YouTube video with specific styling and attributes, including class names for formatting and various playback permissions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-01-20-supabase-beta-december-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/I6nnp9AINJk\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting a SvelteKit Development Server\nDESCRIPTION: Command to start the SvelteKit development server, which makes the app available at http://localhost:5173.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu in React Component\nDESCRIPTION: Example usage of the Context Menu component in a React application, demonstrating the structure and basic menu items.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/context-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>\n```\n\n----------------------------------------\n\nTITLE: Standard Index Creation (Problem Case)\nDESCRIPTION: Example of the standard index creation that might cause size issues with large column values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-index-row-size-exceeds-btree-version-4-maximum-for-index-LMmoeU.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON table_name(column_name);\n```\n\n----------------------------------------\n\nTITLE: User Generation Script\nDESCRIPTION: JavaScript function to generate synthetic user data for testing, writing results to a file rather than keeping in memory to handle large volumes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Generate a list of synthetic users to be loaded into Postgres\n *\n * @param {object} args\n * @param {number} [args.count] number of users to generate\n * @param {number} [args.aboutHTMLWordCount] number of words to generate (lorem ipsum) for about_html (serves to add heft to tuples)\n * @param {string} [args.outputFilePath] output file path, if present this functoin returns void\n * @returns {any[][]} List of generated synthetic users\n */\nexport async function generateUsers(args) {\n  const count = args.count || DEFAULT_USER_COUNT\n  const aboutHTMLWordCount = args.aboutHTMLWordCount || DEFAULT_ABOUT_HTML_WORD_COUNT\n\n  const outputFilePath = args.outputFilePath\n  if (!outputFilePath) {\n    throw new Error('output file path must be specified')\n  }\n\n  for (var id = 0; id < count; id++) {\n    const user = {\n      id,\n      email: `user${id}@example.com`,\n      name: `user ${id}`,\n      about_html: fastLoremIpsum(aboutHTMLWordCount, 'w'),\n    }\n\n    // Write the entries to disk (returning nothing)\n    if (args.outputFilePath) {\n      await appendFile(outputFilePath, `${JSON.stringify(user)}\\n`)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bitbucket OAuth Authentication in Kotlin\nDESCRIPTION: Implement Bitbucket OAuth sign-in method for Kotlin applications using Supabase authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithBitbucket() {\n\tsupabase.auth.signInWith(Bitbucket)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Function Privileges\nDESCRIPTION: Shows how to inspect function privileges using \\df+ command, revealing access privileges for different roles including public access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> \\df+ add\n┌────────┬──────┬──────────────────┬─────────────────────┬──────┬────────────┬──────────┬──────────┬──────────┬──────────────────────────┬──────────┐\n│ Schema │ Name │ Result data type │ Argument data types │ Type │ Volatility │ Parallel │   Owner  │ Security │     Access privileges    │ Language │\n├────────┼──────┼──────────────────┼─────────────────────┼──────┼────────────┼──────────┼──────────┼──────────┼──────────────────────────┼──────────│\n│ public │ add  │ integer          │ integer, integer    │ func │ volatile   │ unsafe   │ postgres │ invoker  │ =X/postgres             ↵│ sql      │\n│        │      │                  │                     │      │            │          │          │          │ postgres=X/postgres     ↵│          │\n│        │      │                  │                     │      │            │          │          │          │ anon=X/postgres         ↵│          │\n│        │      │                  │                     │      │            │          │          │          │ authenticated=X/postgres↵│          │\n│        │      │                  │                     │      │            │          │          │          │ service_role=X/postgres  │          │\n└────────┴──────┴──────────────────┴─────────────────────┴──────┴────────────┴──────────┴──────────┴──────────┴──────────────────────────┴──────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Invoking Edge Function Locally with cURL\nDESCRIPTION: Demonstrates how to invoke the local Edge Function using cURL, including the necessary headers and payload.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST 'http://localhost:54321/functions/v1/hello-world' \\\n  --header 'Authorization: Bearer SUPABASE_ANON_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '{ \"name\":\"Functions\" }'\n```\n\n----------------------------------------\n\nTITLE: Installing Command Component via npm\nDESCRIPTION: Command for installing the cmdk dependency required for the Command component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/command.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cmdk\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase CA certificate to trusted authorities\nDESCRIPTION: Command to add the downloaded Supabase CA certificate to the Postgres trusted certificate authorities list, enabling the use of verify-full SSL mode for maximum security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat {location of downloaded prod-ca-2021.crt} >> ~/.postgres/root.crt\n```\n\n----------------------------------------\n\nTITLE: Database Connection Error Example in Shell\nDESCRIPTION: Example of the error message displayed when the Postgres database connection limit is reached, indicating that remaining connection slots are reserved for superuser connections.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/performance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ psql -U postgres -h ...\nFATAL: remaining connection slots are reserved for non-replication superuser connections\n```\n\n----------------------------------------\n\nTITLE: Starting Function Server in Debug Mode - Shell Command\nDESCRIPTION: Command to start the Supabase Functions server in inspection mode with breakpoint at first line. This enables debugging through Chrome DevTools.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/debugging-tools.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions serve --inspect-mode brk\n```\n\n----------------------------------------\n\nTITLE: Styling the Login Page with SCSS\nDESCRIPTION: SCSS styles for the login page that add a background image with gradient overlay and proper padding to enhance the visual appearance of the login form.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\nion-content {\n  --padding-top: 20%;\n  --padding-start: 5%;\n  --padding-end: 5%;\n  --background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.7)),\n    url('https://images.unsplash.com/photo-1508964942454-1a56651d54ac?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1035&q=80')\n      no-repeat;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Realtime Chat with Initial Messages in TypeScript\nDESCRIPTION: This code snippet shows how to preload initial messages into the real-time chat component. It involves fetching messages using the custom `useMessagesQuery` hook and passing them to the `RealtimeChat` component via the `messages` prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" messages={messages} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Audit Schema in PostgreSQL\nDESCRIPTION: Creates a separate schema named 'audit' to house the auditing entities, following the principle of using namespaces for better organization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate schema if not exists audit;\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Avatar Stack in React\nDESCRIPTION: This code snippet demonstrates how to use the RealtimeAvatarStack component in a React application. It shows the component being used within a Header to display online users in a specific room.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-avatar-stack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'\n\nexport default function Page() {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <RealtimeAvatarStack roomName=\"break_room\" />\n    </Header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Messages in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'acknowledgeBroadcasts' parameter to true and sends a broadcast message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"room-2\") {\n    broadcast {\n        acknowledgeBroadcasts = true\n    }\n}\n\nmyChannel.subscribe(blockUntilSubscribed = true) //You can also use the myChannel.status flow instead, but this parameter will block the coroutine until the status is joined.\n\nmyChannel.broadcast(event = \"acknowledge\", buildJsonObject {  })\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependencies with Maven\nDESCRIPTION: Demonstrates how to add Supabase module dependencies using Maven build system. Includes BOM import and core module dependencies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>bom</artifactId>\n    <version>VERSION</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>postgrest-kt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>gotrue-kt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>realtime-kt</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Updating PostgreSQL Max Connections with Supabase CLI\nDESCRIPTION: Commands to update the maximum connection limit using Supabase CLI. Requires project reference and desired connection count.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-change-max-database-connections-_BQ8P5.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx supabase login\n\nnpx supabase --experimental --project-ref <PROJECT REF> postgres-config update --config max_connections=<INTEGER VALUE>\n```\n\n----------------------------------------\n\nTITLE: Flutter Model Definitions\nDESCRIPTION: Dart classes defining the data models for the application including AppState enum and Ride/Driver classes\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nenum AppState {\n  choosingLocation,\n  confirmingFare,\n  waitingForPickup,\n  riding,\n  postRide,\n}\n\nenum RideStatus {\n  picking_up,\n  riding,\n  completed,\n}\n\nclass Ride {\n  final String id;\n  final String driverId;\n  final String passengerId;\n  final int fare;\n  final RideStatus status;\n\n  Ride({\n    required this.id,\n    required this.driverId,\n    required this.passengerId,\n    required this.fare,\n    required this.status,\n  });\n\n  factory Ride.fromJson(Map<String, dynamic> json) {\n    return Ride(\n      id: json['id'],\n      driverId: json['driver_id'],\n      passengerId: json['passenger_id'],\n      fare: json['fare'],\n      status: RideStatus.values\n          .firstWhere((e) => e.toString().split('.').last == json['status']),\n    );\n  }\n}\n\nclass Driver {\n  final String id;\n  final String model;\n  final String number;\n  final bool isAvailable;\n  final LatLng location;\n\n  Driver({\n    required this.id,\n    required this.model,\n    required this.number,\n    required this.isAvailable,\n    required this.location,\n  });\n\n  factory Driver.fromJson(Map<String, dynamic> json) {\n    return Driver(\n      id: json['id'],\n      model: json['model'],\n      number: json['number'],\n      isAvailable: json['is_available'],\n      location: LatLng(json['latitude'], json['longitude']),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Data from Delete Operation in SQL\nDESCRIPTION: Example of how to return deleted rows in Supabase.js v2 by adding a .select() call at the end of the delete operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nconst { data, error } = await supabase\n    .from('my_table')\n    .delete()\n    .eq('id', 1)\n    .select()\n```\n\n----------------------------------------\n\nTITLE: Full Text Search Using Kotlin Supabase Client\nDESCRIPTION: Kotlin implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        textSearch(\"title\", \"'Harry'\", TextSearchType.NONE)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependencies with Kotlin Gradle DSL\nDESCRIPTION: Adds Supabase module dependencies to a Kotlin project using Gradle Kotlin DSL. This includes the BOM (Bill of Materials) for version management and specific modules like postgrest-kt, gotrue-kt, and realtime-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(platform(\"io.github.jan-tennert.supabase:bom:VERSION\"))\nimplementation(\"io.github.jan-tennert.supabase:postgrest-kt\")\nimplementation(\"io.github.jan-tennert.supabase:gotrue-kt\")\nimplementation(\"io.github.jan-tennert.supabase:realtime-kt\")\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for iOS Launch Screen Asset Management\nDESCRIPTION: Command to open the Flutter project's Xcode workspace to access and modify launch screen assets through the Xcode interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/flutter-multiplayer-shooting-game/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Components for Terms of Service Page in React/JSX\nDESCRIPTION: Imports necessary layout components and defines metadata for the Supabase Terms of Service page. The code sets up the page structure with appropriate title and description metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/terms.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../layouts/Layout'\nimport SectionContainer from '../components/Layouts/SectionContainer'\n\nexport const meta = {\n  title: 'Terms of Service',\n  description: 'Supabase Terms of Service',\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating AvatarComponent in AccountComponent Template\nDESCRIPTION: This snippet shows how to add the AvatarComponent to the AccountComponent's template, allowing users to view and update their profile avatar.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntemplate: `\n<ion-header>\n  <ion-toolbar>\n    <ion-title>Account</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <app-avatar\n    [avatarUrl]=\"this.profile?.avatar_url\"\n    (upload)=\"updateProfile($event)\"\n  ></app-avatar>\n\n<!-- input fields -->\n`\n```\n\n----------------------------------------\n\nTITLE: Testing Popover Component Click Interaction\nDESCRIPTION: Demonstrates how to simulate user click events on Popover components using user-event library from testing-library\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// for Popovers\nimport userEvent from '@testing-library/user-event'\nawait userEvent.click('Hello world')\n```\n\n----------------------------------------\n\nTITLE: Importing buttonVariants Helper for Link Styling\nDESCRIPTION: Shows how to import the buttonVariants helper function to style links as buttons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/button.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { buttonVariants } from '@/components/ui/button'\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Database on Fly (Future Command)\nDESCRIPTION: Command to create a Postgres database on Fly once the service is stable. This will replace the current command in the future.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-15-postgres-on-fly-by-supabase.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nfly postgres create\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Products Foreign Table\nDESCRIPTION: SQL command to create a foreign table that maps to Stripe products data using FDW.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table stripe.stripe_products (\n  id text,\n  name text,\n  active bool,\n  default_price text,\n  description text,\n  created timestamp,\n  updated timestamp,\n  attrs jsonb\n)\n  server stripe_fdw_server\n  options (\n    object 'products',\n    rowid_column 'id'\n  );\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Custom Separator Implementation\nDESCRIPTION: Example showing how to implement a custom separator using the Slash icon from Lucide.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slash } from \"lucide-react\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator>\n      <Slash />\n    </BreadcrumbSeparator>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Supabase API Client Query Example\nDESCRIPTION: JavaScript example showing how to query data using the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet { data: countries, error } = await supabase.from('countries').select('name')\n```\n\n----------------------------------------\n\nTITLE: Defining Column Definitions for TanStack Table\nDESCRIPTION: Client-side TypeScript code for defining table columns using TanStack Table's ColumnDef type, which specifies the structure and properties of each column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { ColumnDef } from '@tanstack/react-table'\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: 'status',\n    header: 'Status',\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email',\n  },\n  {\n    accessorKey: 'amount',\n    header: 'Amount',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase-Epsilon3 Architecture Image in Markdown\nDESCRIPTION: This code snippet shows how to embed an image in Markdown, illustrating Epsilon3's use of Supabase for hosting their critical infrastructure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-26-epsilon3-self-hosting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Epsilon3 uses Supabase for hosting their critical infrastructure.](/images/blog/epsilon3/supabase-epsilon3-architecture.png)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Error Message - Too Many Joins\nDESCRIPTION: Error message returned when the rate of channel joins exceeds the per-second limit.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/quotas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntoo_many_joins\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Usage\nDESCRIPTION: Simple example demonstrating the basic usage of the Textarea component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/textarea.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Textarea />\n```\n\n----------------------------------------\n\nTITLE: Database Testing CLI Command Help\nDESCRIPTION: Shows the help output for the 'supabase test db' command which enables database testing using pgTAP extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/testing-and-linting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase test db --help\nTests local database with pgTAP\n\nUsage:\n  supabase test db [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Function as Junior Developer\nDESCRIPTION: Shows how a junior_dev role can execute the add function due to inherited public role privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> select add(1, 2);\n┌─────┐\n│ add │\n├─────┤\n│   3 │\n└─────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Adding SUPABASE_URL Secret to Cloudflare\nDESCRIPTION: Command to create a specific secret for storing the Supabase project URL in Cloudflare Workers. This URL is found in the Supabase dashboard under Settings > API.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler secret put SUPABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Ride Completion Dialog and State Reset in Flutter\nDESCRIPTION: Implementation of completion modal dialog and app state reset functionality after ride completion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n  void _showCompletionModal() {\n    showDialog(\n      context: context,\n      barrierDismissible: false,\n      builder: (BuildContext context) {\n        return AlertDialog(\n          title: const Text('Ride Completed'),\n          content: const Text(\n              'Thank you for using our service! We hope you had a great ride.'),\n          actions: <Widget>[\n            TextButton(\n              child: const Text('Close'),\n              onPressed: () {\n                Navigator.of(context).pop();\n                _resetAppState();\n              },\n            ),\n          ],\n        );\n      },\n    );\n  }\n\n  void _resetAppState() {\n    setState(() {\n      _appState = AppState.choosingLocation;\n      _selectedDestination = null;\n      _driver = null;\n      _fare = null;\n      _polylines.clear();\n      _markers.clear();\n      _previousDriverLocation = null;\n    });\n    _getCurrentLocation();\n  }\n```\n\n----------------------------------------\n\nTITLE: Size-Configurable Dialog\nDESCRIPTION: Text confirm dialog with configurable size options for different display needs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/text-confirm-dialog.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"text-confirm-dialog-with-size\"\n  description=\"An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component via CLI\nDESCRIPTION: Command to install the switch component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/switch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Signing In with OAuth Provider in v0 vs v1\nDESCRIPTION: Shows the change in the method for signing in with a third-party OAuth provider. In v1, the method name and parameter structure have changed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithProvider(\n  Provider.github,\n  options: AuthOptions(\n      redirectTo: kIsWeb\n          ? null\n          : 'io.supabase.flutter://reset-callback/'),\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOAuth(\n  Provider.github,\n  redirectTo: kIsWeb ? null : 'io.supabase.flutter://reset-callback/',\n);\n```\n\n----------------------------------------\n\nTITLE: HTML Video Embed Implementation\nDESCRIPTION: HTML iframe implementation for embedding a YouTube video tutorial about Supabase Storage and Edge Functions integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/storage-caching.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"video-container\">\n  <iframe\n    src=\"https://www.youtube-nocookie.com/embed/wW6L52v9Ldo\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up the App Component with Supabase Authentication\nDESCRIPTION: Implements the main App component with Supabase authentication integration. Handles session retrieval on mount and subscribes to auth state changes to keep the user state up to date.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ion-app>\n    <ion-router-outlet />\n  </ion-app>\n</template>\n\n<script lang=\"ts\">\n  import { IonApp, IonRouterOutlet, useIonRouter } from '@ionic/vue'\n  import { defineComponent, ref, onMounted } from 'vue'\n  import { supabase } from './supabase'\n\n  export default defineComponent({\n    name: 'App',\n    components: {\n      IonApp,\n      IonRouterOutlet,\n    },\n    setup() {\n      const router = useIonRouter()\n      const user = ref(null)\n\n      onMounted(() => {\n        supabase.auth\n          .getSession()\n          .then((resp) => {\n            user.value = resp.data.session?.user ?? null\n          })\n          .catch((err) => {\n            console.log('Error fetching session', err)\n          })\n\n        supabase.auth.onAuthStateChange((_event, session) => {\n          user.value = session?.user ?? null\n        })\n      })\n\n      return { user }\n    },\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sign Out - Flutter\nDESCRIPTION: This Flutter snippet demonstrates how to sign out a user using the Supabase client library. It calls the signOut method to remove the user's session and clear local storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Deno Native Routing Implementation\nDESCRIPTION: Example of implementing basic routing in Edge Functions using native Deno server without any framework.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(async (req) => {\n  if (req.method === 'GET') {\n    return new Response('Hello World!')\n  }\n  const { name } = await req.json()\n  if (name) {\n    return new Response(`Hello ${name}!`)\n  }\n  return new Response('Hello World!')\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DBOS Workflow with Python Decorators\nDESCRIPTION: Example demonstrating how to create a workflow using DBOS decorators in Python. The code shows the use of @DBOS.workflow() and @DBOS.step() decorators to define workflow steps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-10-durable-workflows-in-postgres-dbos.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@DBOS.workflow()\n@DBOS.step()\ndef place_order():\n    # Workflow logic here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Resulting REST API URL Example\nDESCRIPTION: Shows how the JavaScript query gets translated into a REST API URL. Demonstrates the URL structure that Supabase uses for database requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<project ref>.supabase.co/rest/v1/countries?select=name\n```\n\n----------------------------------------\n\nTITLE: Invoking Edge Functions with Regional Specification Using cURL\nDESCRIPTION: This snippet demonstrates how to use the x-region HTTP header in a cURL request to specify where a Supabase Edge Function should be executed. The example sets the region to eu-west-3 and passes a JSON payload.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/regional-invocation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# https://supabase.com/docs/guides/functions/deploy#invoking-remote-functions\ncurl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \\\n  --header 'Authorization: Bearer ANON_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --header 'x-region: eu-west-3' \\\n  --data '{ \"name\":\"Functions\" }'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for In-Browser Semantic Search (Bash)\nDESCRIPTION: Commands to create a new Vite project and install the required dependencies for PGlite and Transformers.js.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\nnpm install @electric-sql/pglite @huggingface/transformers\n```\n\n----------------------------------------\n\nTITLE: Signing in with OTP using Swift\nDESCRIPTION: Explains the steps to sign in through an OTP using Swift in Supabase. Requires the user email and a boolean to prevent auto user creation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\ntry await supabase.auth.signInWithOTP(\n  email: \"valid.email@supabase.io\",\n  // set this to false if you do not want the user to be automatically signed up\n  shouldCreateUser: false\n)\n```\n\n----------------------------------------\n\nTITLE: Link Email to Anonymous User in Python\nDESCRIPTION: Updates an anonymous user to add an email address and password in Supabase using Python. This converts an anonymous user to a permanent user by linking an email identity. The email must be verified before setting a password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.update_user({\n  'email': 'valid.email@supabase.io',\n})\n\n# verify the user's email by clicking on the email change link\n# or entering the 6-digit OTP sent to the email address\n\n# once the user has been verified, update the password\nresponse = supabase.auth.update_user({\n  'password': 'password',\n})\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Squashing Commits for PostgreSQL Patch Submission\nDESCRIPTION: This code shows how to rebase and squash multiple commits into a single, clean commit for patch submission. Interactive rebasing allows organizing commits by squashing, reordering, or editing commit messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-27-postgresql-commitfest.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i HEAD~5\n\n# This will take the last 5 commits in a branch\n# and you can do anything with them:\n# squash, change order, change commit message, etc\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error When Altering Reserved PostgreSQL Roles\nDESCRIPTION: Example showing the error message when attempting to modify a reserved PostgreSQL role. This demonstrates the built-in protection for predefined roles prefixed with 'pg_'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter role pg_monitor createdb;\nERROR:  role name \"pg_monitor\" is reserved\nDETAIL:  Cannot alter reserved roles.\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Location Function\nDESCRIPTION: Command to deploy the location function to Supabase with JWT verification disabled. This makes the endpoint publicly accessible without authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/location/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy location --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Initializing Realtime Avatar Stack Component in React\nDESCRIPTION: Renders a stack of avatars connected to a specific Supabase Realtime room, showing online users in a collaborative environment\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-avatar-stack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'\n\nexport default function Page() {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <RealtimeAvatarStack roomName=\"break_room\" />\n    </Header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sonner Toast Function\nDESCRIPTION: Demonstrates basic usage of the Sonner toast function to display a simple notification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntoast('Event has been created.')\n```\n\n----------------------------------------\n\nTITLE: Video Player Implementation - HTML\nDESCRIPTION: HTML video element implementation for displaying MP4 content with autoplay, mute, and inline playback controls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-01-02-supabase-beta-december-2020.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/update-docs.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Status Codes and Messages in TOML\nDESCRIPTION: This TOML configuration defines metadata for the document and lists specific HTTP status codes with their corresponding messages used in the Supabase platform.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/http-status-codes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"HTTP status codes\"\ntopics = [ \"platform\" ]\nkeywords = [ \"HTTP\" ]\ndatabase_id = \"b98c7288-8c38-4dc2-8591-d18ea9eb4cbc\"\n\n[[errors]]\nhttp_status_code = 402\nmessage = \"service restriction\"\n\n[[errors]]\nhttp_status_code = 540\nmessage = \"project paused\"\n\n[[errors]]\nhttp_status_code = 544\nmessage = \"project API gateway timeout\"\n\n[[errors]]\nhttp_status_code = 546\nmessage = \"Edge Functions resource limit\"\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Client Library\nDESCRIPTION: Navigate to the Vue app directory and install the Supabase JavaScript client library for integrating with Supabase services.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app && npm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component\nDESCRIPTION: Example showing how to import the Textarea component from the components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/textarea.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Textarea } from '@/components/ui/textarea'\n```\n\n----------------------------------------\n\nTITLE: Using Partials with Variable Substitution in MDX\nDESCRIPTION: Illustrates how to use partials with compile-time variable replacement for dynamic content in Supabase documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<$Partial path=\"path/to/file.mdx\" variables={{ \"substitute\": \"this\" }}>\n```\n\nLANGUAGE: mdx\nCODE:\n```\nHere is the partial text to {{ .substitute }}.\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client with Jackson Serializer\nDESCRIPTION: Creates a Supabase client using Jackson as the serialization library. This example shows how to set JacksonSerializer as the default serializer for the client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = JacksonSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Webhook Event JSON Structure\nDESCRIPTION: Example of a GitHub webhook event JSON structure as ingested by Logflare, showing event details and metadata including sender information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-10-supabase-logs-self-hosted.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event_message\": \"supabase/supabase | JohannesBauer97 | created\",\n  \"id\": \"0d48b71d-91c5-4356-82c7-fdb299b625d0\",\n  \"metadata\": {\n    \"sender\": {\n      \"id\": 15695124,\n      \"login\": \"JohannesBauer97\",\n      \"node_id\": \"MDQ6VXNlcjE1Njk1MTI0\",\n      \"site_admin\": false,\n      \"type\": \"User\",\n      \"url\": \"https://api.github.com/users/JohannesBauer97\"\n    },\n    \"starred_at\": \"2023-03-30T20:33:55Z\"\n    //...\n  },\n  \"timestamp\": 1680208436849642\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Default React Component\nDESCRIPTION: This snippet exports a default functional React component which takes a context parameter, and returns a Layout component with meta information and children passed as props. This component serves to encapsulate the layout and style for the application pages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default (context) => <Layout meta={meta} children={context.children} context={context} />\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes for Efficient Querying in PostgreSQL\nDESCRIPTION: Sets up BRIN and BTREE indexes on the audit table to optimize query performance for time range and table filtering operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- index ts for time range filtering\ncreate index record_version_ts\n  on audit.record_version\n  using brin(ts);\n\n-- index table_oid for table filtering\ncreate index record_version_table_oid\n  on audit.record_version\n  using btree(table_oid);\n```\n\n----------------------------------------\n\nTITLE: Spread Embedded Resources Aggregation Response in JSON\nDESCRIPTION: This JSON response shows the result of using aggregate functions with spread embedded resources, displaying the average box office earnings grouped by director's country.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"avg_earnings\": 10200000.38,\n    \"country\": \"Spain\"\n  },\n  {\n    \"avg_earnings\": 8933333.79,\n    \"country\": \"India\"\n  },\n  {\n    \"avg_earnings\": 8933333.84,\n    \"country\": \"United States\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing heartbeat mechanism for libcluster Postgres strategy\nDESCRIPTION: Elixir code for the heartbeat mechanism that periodically notifies other nodes of its existence. This is crucial for maintaining the cluster and enabling self-healing capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-09-elixir-clustering-using-postgres.mdx#2025-04-22_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/cluster/strategy/postgres.ex:73\ndef handle_info(:heartbeat, state) do\n    Process.cancel_timer(state.meta.heartbeat_ref)\n    Postgrex.query(state.meta.conn, \"NOTIFY #{state.config[:channel_name]}, '#{node()}'\", [])\n    ref = heartbeat(state.config[:heartbeat_interval])\n    {:noreply, put_in(state.meta.heartbeat_ref, ref)}\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Object Ownership in SQL\nDESCRIPTION: SQL command to change ownership of database objects back to supabase_auth_admin to resolve ownership-related authentication errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER <object type (table, function, etc.)> <auth.object_name> OWNER TO supabase_auth_admin;\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Relationships in SQL\nDESCRIPTION: Demonstrates the new requirement for detecting many-to-many relationships in PostgREST v10, where the primary key of the join table must include the foreign key columns of both ends of the relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate table books (\n  id int primary key,\n  name text\n);\n\ncreate table books_authors (\n  book_id int references books (id),\n  author_id int references authors (id),\n  primary key (book_id, author_id) -- this is now necessary\n);\n\ncreate table authors (\n  id int primary key,\n  name text\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component in Svelte Account Page\nDESCRIPTION: Code snippet showing how to import and use an Avatar component within a Svelte Account page. The component is bound to an avatarUrl variable and set up with an upload event handler that triggers the updateProfile function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  // Import the new component\n  import Avatar from './Avatar.svelte'\n</script>\n\n<form on:submit|preventDefault=\"{updateProfile}\" class=\"form-widget\">\n  <!-- Add to body -->\n  <Avatar bind:url=\"{avatarUrl}\" size=\"{150}\" on:upload=\"{updateProfile}\" />\n\n  <!-- Other form elements -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Ionic Modal Template for Store Information Display\nDESCRIPTION: HTML template for displaying store information in an Ionic modal with breakpoint animations. Includes header with navigation buttons and content area for store details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"showNearby()\">\n        <ion-icon name=\"location\" slot=\"start\"></ion-icon> Nearby</ion-button\n      >\n    </ion-buttons>\n\n    <ion-title> Supa Stores </ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"addStore()\">\n        <ion-icon name=\"add\" slot=\"start\"></ion-icon> Store</ion-button\n      >\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div class=\"container\">\n    <capacitor-google-map #map></capacitor-google-map>\n  </div>\n\n  <ion-modal\n    [isOpen]=\"selectedMarker !== null\"\n    [breakpoints]=\"[0, 0.4, 1]\"\n    [initialBreakpoint]=\"0.4\"\n    (didDismiss)=\"selectedMarker = null;\"\n  >\n    <ng-template>\n      <ion-content class=\"ion-padding\">\n        <ion-label class=\"ion-texst-wrap\">\n          <h1>{{selectedStore?.name}}</h1>\n          <ion-note>{{selectedStore?.description}}</ion-note>\n        </ion-label>\n        <div class=\"ion-text-center ion-margin-top\">\n          <img [src]=\"selectedStore?.image\" *ngIf=\"selectedStore?.image\" />\n        </div>\n      </ion-content>\n    </ng-template>\n  </ion-modal>\n</ion-content>\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Sentry spans with Supabase\nDESCRIPTION: Configuration to avoid duplicate spans when using both Supabase integration and other HTTP monitoring integrations in Sentry. Shows various approaches for different environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Sentry from '@sentry/browser'\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { supabaseIntegration } from '@supabase/sentry-js-integration'\n\nSentry.init({\n  dsn: SENTRY_DSN,\n  integrations: [\n    supabaseIntegration(SupabaseClient, Sentry, {\n      tracing: true,\n      breadcrumbs: true,\n      errors: true,\n    }),\n\n    // @sentry/browser\n    Sentry.browserTracingIntegration({\n      shouldCreateSpanForRequest: (url) => {\n        return !url.startsWith(`${SUPABASE_URL}/rest`)\n      },\n    }),\n\n    // or @sentry/node\n    Sentry.httpIntegration({\n      tracing: {\n        ignoreOutgoingRequests: (url) => {\n          return url.startsWith(`${SUPABASE_URL}/rest`)\n        },\n      },\n    }),\n\n    // or @sentry/node with Fetch support\n    Sentry.nativeNodeFetchIntegration({\n      ignoreOutgoingRequests: (url) => {\n        return url.startsWith(`${SUPABASE_URL}/rest`)\n      },\n    }),\n\n    // or @sentry/WinterCGFetch for Next.js Middleware & Edge Functions\n    Sentry.winterCGFetchIntegration({\n      breadcrumbs: true,\n      shouldCreateSpanForRequest: (url) => {\n        return !url.startsWith(`${SUPABASE_URL}/rest`)\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Command to initialize a new Supabase project in the local environment\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Creating a Profile Avatar Component with Supabase Storage\nDESCRIPTION: Implements an avatar component that allows users to upload and display profile photos using the device camera and Supabase Storage. Handles image upload, download, and display with proper UI feedback.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"avatar\">\n    <div class=\"avatar_wrapper\" @click=\"uploadAvatar\">\n      <img v-if=\"avatarUrl\" :src=\"avatarUrl\" />\n      <ion-icon v-else name=\"person\" class=\"no-avatar\"></ion-icon>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { ref, toRefs, watch, defineComponent } from 'vue'\n  import { supabase } from '../supabase'\n  import { Camera, CameraResultType } from '@capacitor/camera'\n  import { IonIcon } from '@ionic/vue'\n  import { person } from 'ionicons/icons'\n  export default defineComponent({\n    name: 'AppAvatar',\n    props: { path: String },\n    emits: ['upload', 'update:path'],\n    components: { IonIcon },\n    setup(prop, { emit }) {\n      const { path } = toRefs(prop)\n      const avatarUrl = ref('')\n\n      const downloadImage = async () => {\n        try {\n          const { data, error } = await supabase.storage.from('avatars').download(path.value)\n          if (error) throw error\n          avatarUrl.value = URL.createObjectURL(data!)\n        } catch (error: any) {\n          console.error('Error downloading image: ', error.message)\n        }\n      }\n\n      const uploadAvatar = async () => {\n        try {\n          const photo = await Camera.getPhoto({\n            resultType: CameraResultType.DataUrl,\n          })\n          if (photo.dataUrl) {\n            const file = await fetch(photo.dataUrl)\n              .then((res) => res.blob())\n              .then((blob) => new File([blob], 'my-file', { type: `image/${photo.format}` }))\n\n            const fileName = `${Math.random()}-${new Date().getTime()}.${photo.format}`\n            const { error: uploadError } = await supabase.storage\n              .from('avatars')\n              .upload(fileName, file)\n            if (uploadError) {\n              throw uploadError\n            }\n            emit('update:path', fileName)\n            emit('upload')\n          }\n        } catch (error) {\n          console.log(error)\n        }\n      }\n\n      watch(path, () => {\n        if (path.value) downloadImage()\n      })\n\n      return { avatarUrl, uploadAvatar, person }\n    },\n  })\n</script>\n<style>\n  .avatar {\n    display: block;\n    margin: auto;\n    min-height: 150px;\n  }\n  .avatar .avatar_wrapper {\n    margin: 16px auto 16px;\n    border-radius: 50%;\n    overflow: hidden;\n    height: 150px;\n    aspect-ratio: 1;\n    background: var(--ion-color-step-50);\n    border: thick solid var(--ion-color-step-200);\n  }\n  .avatar .avatar_wrapper:hover {\n    cursor: pointer;\n  }\n  .avatar .avatar_wrapper ion-icon.no-avatar {\n    width: 100%;\n    height: 115%;\n  }\n  .avatar img {\n    display: block;\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: iOS Deep Link Configuration (Flutter)\nDESCRIPTION: This XML snippet shows how to configure custom URL schemes in the Info.plist file for an iOS Flutter application.  This configuration allows the application to be opened using a custom URL scheme.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... other tags -->\n<plist>\n<dict>\n  <!-- ... other tags -->\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>[YOUR_SCHEME]</string>\n      </array>\n    </dict>\n  </array>\n  <!-- ... other tags -->\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: API Request Using Environment Variable\nDESCRIPTION: Improved cURL command using the stored environment variable for the API key, demonstrating a cleaner approach to making authenticated requests to the Supabase PostgREST API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/bulletins?select=*' \\\n -H 'accept-profile: public' \\\n -H \"apikey: $ANON_KEY\" \\\n -H \"authorization: Bearer $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Function\nDESCRIPTION: Command to create a new Edge Function for text-to-image conversion\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions new text-to-image\n```\n\n----------------------------------------\n\nTITLE: Configuring Map State for Database Triggers\nDESCRIPTION: YAML configuration for handling multiple database inserts using a Map state with a Choice condition to check for INSERT events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nEmailUsers:\n  Type: Map\n  End: true\n  InputPath: '$.changes'\n  Iterator:\n    StartAt: CheckInsert\n    States:\n      CheckInsert:\n        Type: Choice\n        Default: Complete\n        Choices:\n          - Variable: '$.type'\n            StringEquals: INSERT\n            Next: WaitOneDay\n```\n\n----------------------------------------\n\nTITLE: Adding Android Dependencies for Google Sign-In\nDESCRIPTION: Required Android dependencies for implementing Google sign-in using Credential Manager and Google ID libraries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"androidx.credentials:credentials:<latest version>\")\nimplementation (\"com.google.android.libraries.identity.googleid:googleid:<latest version>\")\n\n// optional - needed for credentials support from play services, for devices running\n// Android 13 and below.\nimplementation(\"androidx.credentials:credentials-play-services-auth:<latest version>\")\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Supabase CLI\nDESCRIPTION: Shows how to generate TypeScript types for local and remote Supabase databases using the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# in a project set up with the CLI:\nsupabase gen types typescript --local\nsupabase gen types typescript --db-url $SUPABASE_DB_URL\n```\n\n----------------------------------------\n\nTITLE: Building CSS Styles from Tokens\nDESCRIPTION: This Bash command triggers the process to compile design tokens from Figma into CSS variables, creating the necessary styles directory. Prerequisites include npm and the relevant setup in package.json.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-styles\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Server-Side Utility in JavaScript\nDESCRIPTION: JavaScript utility to create a Supabase client for server-side operations with cookie handling for session management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  // Create a server's supabase client with newly configured cookie,\n  // which could be used to maintain user's session\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using plpgsql_check to Identify Errors in a Function\nDESCRIPTION: SQL command using plpgsql_check's plpgsql_check_function to identify the known error in the 'some_func' function. It detects and reports the invalid column reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect plpgsql_check_function('public.some_func()');\n\n                   plpgsql_check_function\n------------------------------------------------------------\n error:42703:8:RAISE:record \"rec\" has no field \"created_at\"\n Context: SQL expression \"rec.created_at\"\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Shortcut for Sidebar Toggle\nDESCRIPTION: Sets the keyboard shortcut key used to toggle the sidebar. By default, it's 'b', which works as cmd+b on Mac and ctrl+b on Windows.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Libraries in SvelteKit\nDESCRIPTION: This code installs the Supabase auth helpers and the Supabase JS library needed for authentication in SvelteKit applications. Requires Node.js version ^16.15.0.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Terminal\nCODE:\n```\nnpm install @supabase/auth-helpers-sveltekit @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Custom Mode in Supabase Storage in Dart\nDESCRIPTION: This code shows how to download an image with custom dimensions (800x300) and the 'contain' resize mode using the Dart client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_28\n\nLANGUAGE: Dart\nCODE:\n```\nfinal data = supabase.storage.from('bucket').download(\n      'image.jpg',\n      transform: const TransformOptions(\n        width: 800,\n        height: 300,\n        resize: ResizeMode.contain, // 'cover' | 'fill'\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Row Level Security Primer\nDESCRIPTION: This HTML snippet embeds another YouTube video, specifically for a primer on Row Level Security. It uses the same structure as the previous video embed, but with a different video source.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-09-10-supabase-beta-august-2021.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/Ow_Uzedfohk\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition Example\nDESCRIPTION: JSON Schema definition specifying constraints for objects with a required string attribute named 'foo'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"foo\"],\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI on macOS\nDESCRIPTION: Install the Supabase CLI using Homebrew package manager on macOS.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install supabase/tap/supabase\n```\n\n----------------------------------------\n\nTITLE: Filtered Query Example\nDESCRIPTION: Shows a query with additional filtering to exclude specific courses, demonstrating the need for view consistency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  students.name,\n  students.type,\n  courses.title,\n  courses.code,\n  grades.result\nfrom\n  grades\n  left join students on grades.student_id = students.id\n  left join courses on grades.course_id = courses.id\nwhere courses.code != 'PG101';\n```\n\n----------------------------------------\n\nTITLE: Configuring main.ts for Ionic PWA Elements in Angular\nDESCRIPTION: This snippet updates the main.ts file to include bootstrapping for Ionic PWA Elements, enabling custom Ionic UI for certain browser APIs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enableProdMode } from '@angular/core'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { AppModule } from './app/app.module'\nimport { environment } from './environments/environment'\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader'\ndefineCustomElements(window)\n\nif (environment.production) {\n  enableProdMode()\n}\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.log(err))\n```\n\n----------------------------------------\n\nTITLE: Defining Definition Enum in Rust for GraphQL AST\nDESCRIPTION: This code snippet shows the Rust enum definition for Definition, which can be either an Operation or a Fragment in the GraphQL AST.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, PartialEq)]\npub enum Definition<'a, T: Text<'a>> {\n    Operation(OperationDefinition<'a, T>),\n    Fragment(FragmentDefinition<'a, T>),\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase via npm\nDESCRIPTION: Command to install Supabase using npm with JSR. This adds the Supabase dependency to your npm project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx jsr add @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Resolution for Vercel Deployments\nDESCRIPTION: Function to dynamically determine the redirect URL based on environment variables for Vercel deployments, with OAuth sign-in implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/redirect-urls.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst getURL = () => {\n  let url =\n    process?.env?.NEXT_PUBLIC_SITE_URL ?? // Set this to your site URL in production env.\n    process?.env?.NEXT_PUBLIC_VERCEL_URL ?? // Automatically set by Vercel.\n    'http://localhost:3000/'\n  // Make sure to include `https://` when not localhost.\n  url = url.startsWith('http') ? url : `https://${url}`\n  // Make sure to include a trailing `/`.\n  url = url.endsWith('/') ? url : `${url}/`\n  return url\n}\n\nconst { data, error } = await supabase.auth.signInWithOAuth({\n  provider: 'github',\n  options: {\n    redirectTo: getURL(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Release Notes Header in Markdown\nDESCRIPTION: Markdown frontmatter configuration defining the ID and title for the release notes documentation page\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v1/release-notes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: release-notes\ntitle: Release Notes\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a New Directory for Prisma Project in Bash\nDESCRIPTION: Terminal commands to create a new directory for your Prisma project and navigate into it.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in React/JSX\nDESCRIPTION: HTML iframe code for embedding a YouTube video with specific styling and security attributes. The code is embedded within a div container with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-12-01-supabase-alpha-november-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/unC_de7iytA\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Image of database.build v2 Mobile Support in HTML\nDESCRIPTION: This HTML snippet embeds an image to demonstrate the mobile support for the redesigned database.build v2. It includes a class for removing the border and specifies the image source and alt text.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-06-database-build-v2.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Img\n  className=\"border-none\"\n  alt=\"database.build v2 mobile support\"\n  src=\"/images/blog/launch-week-13/day-5-database-build-v2/mobile-support.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Granting pg_read_all_stats Privilege to Postgres Role in SQL\nDESCRIPTION: This SQL command grants the pg_read_all_stats privilege to the postgres role, allowing it to read all statistics from the system. This resolves the \"insufficient privilege\" error when accessing pg_stat_statements or the Query Performance Report.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/insufficient-privilege-when-accessing-pgstatstatements-e5M_EQ.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ngrant pg_read_all_stats to postgres;\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarMenuSub in React\nDESCRIPTION: This code shows how to use the SidebarMenuSub component to render a submenu within a SidebarMenu. It includes SidebarMenuSubItem and SidebarMenuSubButton components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarMenuItem>\n  <SidebarMenuButton />\n  <SidebarMenuSub>\n    <SidebarMenuSubItem>\n      <SidebarMenuSubButton />\n    </SidebarMenuSubItem>\n    <SidebarMenuSubItem>\n      <SidebarMenuSubButton />\n    </SidebarMenuSubItem>\n  </SidebarMenuSub>\n</SidebarMenuItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime Policy for WebSocket Testing\nDESCRIPTION: TOML configuration to set the Edge Runtime policy to 'per_worker' in the config.toml file. This prevents automatic termination of Edge Functions after a request completes, allowing WebSocket connections to remain open during local testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[edge_runtime]\npolicy = \"per_worker\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Turnstile CAPTCHA Component\nDESCRIPTION: React implementation of Turnstile CAPTCHA component with success callback for token handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Turnstile\n  siteKey=\"your-sitekey\"\n  onSuccess={(token) => {\n    setCaptchaToken(token)\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Next.js Client Components\nDESCRIPTION: Example showing how to use the Supabase client in a Next.js Client Component to fetch todos. This approach utilizes the createClientComponentClient function and React hooks to manage state and fetch data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs'\nimport { useEffect, useState } from 'react'\n\nexport default function Page() {\n  const [todos, setTodos] = useState()\n  const supabase = createClientComponentClient()\n\n  useEffect(() => {\n    const getData = async () => {\n      const { data } = await supabase.from('todos').select()\n      setTodos(data)\n    }\n\n    getData()\n  }, [])\n\n  return todos ? <pre>{JSON.stringify(todos, null, 2)}</pre> : <p>Loading todos...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Email Template for Password Reset\nDESCRIPTION: Defines an HTML email template for password reset requests. It includes a link for users to reset their password, utilizing Supabase variables for dynamic content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/password-based-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2>Reset Password</h2>\n\n<p>Follow this link to reset the password for your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=recovery&next={{ .RedirectTo }}\"\n    >Reset Password</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying OAuth Scopes Table in Markdown\nDESCRIPTION: This snippet presents a markdown table listing all available OAuth scopes for Supabase, including their names, types (Read/Write), and detailed descriptions of the permissions they grant.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration/oauth-scopes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Type    | Description                                                                                                                                                                                                                                                                            |\n| ---------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Auth`           | `Read`  | Retrieve a project's auth configuration<br/>Retrieve a project's SAML SSO providers                                                                                                                                                                                                    |\n| `Auth`           | `Write` | Update a project's auth configuration<br/>Create, update, or delete a project's SAML SSO providers                                                                                                                                                                                     |\n| `Database`       | `Read`  | Retrieve the database configuration<br/>Retrieve the pooler configuration<br/>Retrieve SQL snippets<br/>Check if the database is in read-only mode<br/>Retrieve a database's SSL enforcement configuration<br/>Retrieve a database's schema typescript types                           |\n| `Database`       | `Write` | Create a SQL query<br/>Enable database webhooks on the project<br/>Update the project's database configuration<br/>Update the pooler configuration<br/>Update a database's SSL enforcement configuration<br/>Disable read-only mode for 15mins<br/>Create a PITR backup for a database |\n| `Domains`        | `Read`  | Retrieve the custom domains for a project<br/>Retrieve the vanity subdomain configuration for a project                                                                                                                                                                                |\n| `Domains`        | `Write` | Activate, initialize, reverify, or delete the custom domain for a project<br/>Activate, delete or check the availability of a vanity subdomain for a project                                                                                                                           |\n| `Edge Functions` | `Read`  | Retrieve information about a project's edge functions                                                                                                                                                                                                                                  |\n| `Edge Functions` | `Write` | Create, update, or delete an edge function                                                                                                                                                                                                                                             |\n| `Environment`    | `Read`  | Retrieve branches in a project                                                                                                                                                                                                                                                         |\n| `Environment`    | `Write` | Create, update, or delete a branch                                                                                                                                                                                                                                                     |\n| `Organizations`  | `Read`  | Retrieve an organization's metadata<br/>Retrieve all members in an organization                                                                                                                                                                                                        |\n| `Organizations`  | `Write` | N/A                                                                                                                                                                                                                                                                                    |\n| `Projects`       | `Read`  | Retrieve a project's metadata<br/>Check if a project's database is eligible for upgrade<br/>Retrieve a project's network restrictions<br/>Retrieve a project's network bans                                                                                                            |\n| `Projects`       | `Write` | Create a project<br/>Upgrade a project's database<br/>Remove a project's network bans<br/>Update a project's network restrictions                                                                                                                                                      |\n| `Rest`           | `Read`  | Retrieve a project's PostgREST configuration                                                                                                                                                                                                                                           |\n| `Rest`           | `Write` | Update a project's PostgREST configuration                                                                                                                                                                                                                                             |\n| `Secrets`        | `Read`  | Retrieve a project's API keys<br/>Retrieve a project's secrets<br/>Retrieve a project's pgsodium config                                                                                                                                                                                |\n| `Secrets`        | `Write` | Create or update a project's secrets<br/>Update a project's pgsodium configuration                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Creating a Scalar Function with plv8\nDESCRIPTION: Example of a scalar function that takes input and returns a text value. This simple function demonstrates string interpolation in JavaScript within PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function hello_world(name text)\nreturns text as $$\n\n    let output = `Hello, ${name}!`;\n    return output;\n\n$$ language plv8;\n```\n\n----------------------------------------\n\nTITLE: Basic Array Operations in JavaScript\nDESCRIPTION: Demonstrates the traditional array update conflicts that CRDTs aim to solve using a simple fruit array example.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-10-postgres-crdt.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nlet fruit = ['Apple', 'Banana', 'Orange']\n```\n\nLANGUAGE: js\nCODE:\n```\nfruit[0] = 'Grape' // the array is ['Grape', 'Banana', 'Orange']\n```\n\nLANGUAGE: js\nCODE:\n```\nfruit[0] = 'Mango' // the array is ['Mango', 'Banana', 'Orange']\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular App Module\nDESCRIPTION: Angular module configuration importing necessary components and modules for the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\n\nimport { AppRoutingModule } from './app-routing.module'\nimport { AppComponent } from './app.component'\nimport { LoginComponent } from './components/login/login.component'\nimport { BoardComponent } from './components/inside/board/board.component'\nimport { WorkspaceComponent } from './components/inside/workspace/workspace.component'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { NgxSpinnerModule } from 'ngx-spinner'\nimport { FormsModule } from '@angular/forms'\nimport { GravatarModule } from 'ngx-gravatar'\n\n@NgModule({\n  declarations: [AppComponent, LoginComponent, BoardComponent, WorkspaceComponent],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    NgxSpinnerModule,\n    GravatarModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Suspense with Sidebar Components\nDESCRIPTION: Shows how to use React Suspense with the sidebar components to handle async data loading with a fallback skeleton.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Projects</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <React.Suspense fallback={<NavProjectsSkeleton />}>\n              <NavProjects />\n            </React.Suspense>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Navigation Menu Dependencies\nDESCRIPTION: Command to install the navigation menu component using npm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-navigation-menu\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for PostgreSQL Patch Development\nDESCRIPTION: This snippet demonstrates how to clone the PostgreSQL repository and create a new branch for patch development. It shows the basic steps to start working on a PostgreSQL core contribution.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-27-postgresql-commitfest.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/postgres/postgres\ngit checkout master\ngit checkout -b your_branch_name\n```\n\n----------------------------------------\n\nTITLE: Mapping Third-Party Guides\nDESCRIPTION: This JavaScript snippet maps over an array of objects, each representing a third-party guide for self-hosting Supabase.  The map function is used to render a `GlassPanel` component for each guide, passing the guide's name and description as props. The guides shown are Digital Ocean, StackGres, and Pigsty.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[{\n      name: 'Digital Ocean',\n      description: 'Deploys using Terraform.',\n      href: 'https://docs.digitalocean.com/developer-center/hosting-supabase-on-digitalocean/',\n    },\n    {\n      name: 'StackGres',\n      description: 'Deploys using Kubernetes.',\n      href: 'https://stackgres.io/blog/running-supabase-on-top-of-stackgres/',\n    },\n    {\n      name: 'Pigsty',\n      description: 'Deploys using Ansible.',\n      href: 'https://pigsty.io/blog/db/supabase/',\n    }].map((x) => (\n    <div className=\"md:col-span-6\" key={x.href}>\n      <Link href={x.href} passHref>\n        <GlassPanel title={x.name}>{x.description}</GlassPanel>\n      </Link>\n    </div>\n  ))\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component\nDESCRIPTION: Code snippet showing how to import the Input component from the UI components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from '@/components/ui/input'\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Packages for Next.js\nDESCRIPTION: Installs the required Supabase packages (@supabase/supabase-js and @supabase/ssr) for use with Next.js.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js @supabase/ssr\n```\n\n----------------------------------------\n\nTITLE: Importing and initializing Supabase client\nDESCRIPTION: JavaScript code to import the Supabase client from the JSR package and create a Supabase instance. This demonstrates how to set up and use Supabase in a JavaScript file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\n\nconsole.log('Supabase Instance: ', supabase)\n```\n\n----------------------------------------\n\nTITLE: weapons.json after flattening\nDESCRIPTION: This JSON snippet shows the contents of the `weapons.json` file after flattening, demonstrating the extraction of weapons data from the `users` collection into a separate file. This file contains the 'uid' and 'weapon' fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"uid\": \"abc123\", \"weapon\": \"toothpick\" },\n  { \"uid\": \"abc123\", \"weapon\": \"needle\" },\n  { \"uid\": \"abc123\", \"weapon\": \"rock\" },\n  { \"uid\": \"xyz789\", \"weapon\": \"hand\" },\n  { \"uid\": \"xyz789\", \"weapon\": \"foot\" },\n  { \"uid\": \"xyz789\", \"weapon\": \"head\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Admonition Component in TSX\nDESCRIPTION: This example demonstrates the basic usage of the Admonition component. It creates a default type admonition with a title and description.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/admonition.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Admonition\n  type=\"default\"\n  title=\"Is it accessible?\"\n  description=\"Yes. It adheres to the WAI-ARIA design pattern.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Benchmark Environment Configuration in Bash\nDESCRIPTION: Environment variable configuration for running benchmarks, including strategy selection, data paths, and test parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport SEEN_BY_STRATEGY=simple-counter # or: simple-hstore, assoc-table, hll\nexport TEST_USERS_JSON_PATH=/tmp/supabase-seen-by.users.json\nexport TEST_POSTS_JSON_PATH=/tmp/supabase-seen-by.posts.json\nexport TEST_POST_COUNT=1000\nexport TEST_USER_COUNT=100000\nexport TEST_DURATION_SECONDS=60\n\n## Use custom postgres image built with hll extension (https://github.com/citusdata/postgresql-hll)\n## NOTE: `make db-custom-image` must be run beforehand\n#export DB_IMAGE=postgres-14.4-alpine-hll\n#export DB_IMAGE_TAG=latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase in .env\nDESCRIPTION: Environment variable configuration for connecting to Supabase services, including URL, API key, and JWT secret.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=YOUR_SUPABASE_URL\nSUPABASE_KEY=YOUR_SUPABASE_ANON_KEY\nSUPABASE_JWT_SECRET=YOUR_SUPABASE_JWT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Function to List Objects\nDESCRIPTION: Defines a Postgres function to efficiently list objects in a storage bucket, providing a customizable interface to limit, offset, and filter by prefix. Requires a Postgres database with Supabase's storage schema. Inputs include `bucketid`, `prefix`, `limits`, and `offsets`. Outputs a table with object metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/production/scaling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function list_objects(\\n    bucketid text,\\n    prefix text,\\n    limits int default 100,\\n    offsets int default 0\\n) returns table (\\n    name text,\\n    id uuid,\\n    updated_at timestamptz,\\n    created_at timestamptz,\\n    last_accessed_at timestamptz,\\n    metadata jsonb\\n) as $$\\nbegin\\n    return query SELECT\\n        objects.name,\\n        objects.id,\\n        objects.updated_at,\\n        objects.created_at,\\n        objects.last_accessed_at,\\n        objects.metadata\\n    FROM storage.objects\\n    WHERE objects.name like prefix || '%'\\n    AND bucket_id = bucketid\\n    ORDER BY name ASC\\n    LIMIT limits\\n    OFFSET offsets;\\nend;\\n$$ language plpgsql stable;\n```\n\n----------------------------------------\n\nTITLE: Updating API Route with createPagesServerClient in Next.js\nDESCRIPTION: This snippet demonstrates how to replace the deprecated withApiAuth function with createPagesServerClient in a Next.js API route. It shows how to create an authenticated Supabase client, check for an active session, and run queries with Row Level Security (RLS) on the server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiHandler } from 'next'\nimport { createPagesServerClient } from '@supabase/auth-helpers-nextjs'\n\nconst ProtectedRoute: NextApiHandler = async (req, res) => {\n  // Create authenticated Supabase Client\n  const supabase = createPagesServerClient({ req, res })\n  // Check if we have a session\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (!user)\n    return res.status(401).json({\n      error: 'not_authenticated',\n      description: 'The user does not have an active session or is not authenticated',\n    })\n\n  // Run queries with RLS on the server\n  const { data } = await supabase.from('test').select('*')\n  res.json(data)\n}\n\nexport default ProtectedRoute\n```\n\n----------------------------------------\n\nTITLE: Importing AI Commands for Edge Runtime in TypeScript\nDESCRIPTION: This snippet demonstrates how to import a function from the ai-commands package specifically for use in an Edge runtime environment. The import path uses a special 'edge' subpath to access streaming functionalities that are exclusive to this runtime context. There are no external dependencies listed, and the code requires knowledge of available functions within the ai-commands package.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ai-commands/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { chatRlsPolicy } from 'ai-commands/edge'\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Table with Row Level Security Policies in PostgreSQL\nDESCRIPTION: SQL schema for creating a todos table with user authentication and row level security policies. This schema defines the table structure, enables row level security, and creates policies for insert, select, update, and delete operations based on user authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/sveltejs-todo-list/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table todos (\n  id bigint generated by default as identity primary key,\n  user_id uuid references auth.users not null,\n  task text check (char_length(task) > 3),\n  is_complete boolean default false,\n  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null\n);\n\nalter table todos enable row level security;\n\ncreate policy \"Individuals can create todos.\" on todos for\n    insert with check ((select auth.uid()) = user_id);\n\ncreate policy \"Individuals can view their own todos. \" on todos for\n    select using ((select auth.uid()) = user_id);\n\ncreate policy \"Individuals can update their own todos.\" on todos for\n    update using ((select auth.uid()) = user_id);\n\ncreate policy \"Individuals can delete their own todos.\" on todos for\n    delete using ((select auth.uid()) = user_id);\n```\n\n----------------------------------------\n\nTITLE: Displaying Epsilon3 Product GIF in Markdown\nDESCRIPTION: This code snippet shows how to embed a GIF image in Markdown, demonstrating Epsilon3's product that digitizes paper-based processes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-26-epsilon3-self-hosting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Epsilon3 digitizes paper-based processes.](/images/blog/epsilon3/epsilon3-product.gif)\n```\n\n----------------------------------------\n\nTITLE: Defining WatermelonDB Model for Profile\nDESCRIPTION: Creates a WatermelonDB model for the 'Profile' entity, including table definition, field decorators, and associations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, Q, Relation } from \"@nozbe/watermelondb\";\nimport { date, readonly, text } from \"@nozbe/watermelondb/decorators\";\n\nimport { Stack } from \"./Stack\";\n\nexport class Profile extends Model {\nstatic table = \"profiles\";\n\n@readonly @date(\"created_at\") createdAt!: Date;\n@readonly @date(\"updated_at\") updatedAt!: Date;\n\nstatic associations = {\n\t[\"stacks\"]: {\n\t\ttype: \"has_many\" as const,\n\t\tforeignKey: \"profile_id\",\n\t}\n};\n\n@text(\"name\") name!: string;\n@text(\"website\") website!: string;\n```\n\n----------------------------------------\n\nTITLE: Performing Anti-Joins in PostgREST\nDESCRIPTION: Shows how to perform anti-joins by filtering rows where the related table is null. This can be used to find records that don't have corresponding entries in related tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /films?select=title,nominations()&nominations=is.null\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('films')\n  .select(`\n    title,\n    nominations()\n  `)\n   .is('nominations', null))\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Memories of Murder\"\n  },\n  {\n    \"title\": \"Rush\"\n  },\n  {\n    \"title\": \"Groundhog Day\"\n  },\n  \"...\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running Supabase functions locally with environment variables\nDESCRIPTION: Commands to start the Supabase local environment and serve the Edge Function with environment variables from a .env file, without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve --no-verify-jwt --env-file .env\n```\n\n----------------------------------------\n\nTITLE: Identifying Dashboard Queries in SQL\nDESCRIPTION: SQL query to find queries executed by the Supabase Dashboard. It filters for queries that include the comment '-- source: dashboard', which is specific to Dashboard requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- find queries executed by the Dashboard\n...query\nwhere\n  regexp_contains(parsed.query, '-- source: dashboard')\n```\n\n----------------------------------------\n\nTITLE: Vector Normalization Implementation\nDESCRIPTION: Helper functions to calculate L2 norm and normalize vectors for embedding processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calculates the L2 norm (Euclidean norm) of a vector.\n */\nfunction norm(vector: number[]): number {\n  return Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0))\n}\n\n/**\n * Normalizes a vector into a unit vector.\n */\nfunction normalize(vector: number[]): number[] {\n  const magnitude = norm(vector)\n\n  if (magnitude === 0) {\n    throw new Error('Cannot normalize a zero vector.')\n  }\n\n  return vector.map((val) => val / magnitude)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe CLI to Forward Webhook Events\nDESCRIPTION: Sets up Stripe CLI to listen for events and forward them to the local Supabase Functions endpoint.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstripe listen --forward-to localhost:54321/functions/v1/\n```\n\n----------------------------------------\n\nTITLE: Opening the refine app in VS Code\nDESCRIPTION: Commands to navigate into the app directory and open it in Visual Studio Code for development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\ncode .\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Auth UI Dependencies\nDESCRIPTION: Command to install required Supabase packages including the core client, Auth UI React component, and shared utilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared\n```\n\n----------------------------------------\n\nTITLE: Verifying Role Login\nDESCRIPTION: Commands to verify successful login with newly created roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n➜ psql postgres://junior_dev.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-SUBDOMAIN].pooler.supabase.com:5432/postgres\n\npostgres=> select current_role;\n┌──────────────┐\n│ current_role │\n├──────────────┤\n│ junior_dev   │\n└──────────────┘\n(1 row)\n\npostgres=> exit\n\n➜ psql postgres://senior_dev.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-SUBDOMAIN].pooler.supabase.com:5432/postgres\n\npostgres=> select current_role;\n┌──────────────┐\n│ current_role │\n├──────────────┤\n│ senior_dev   │\n└──────────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Equality Search on Books Table\nDESCRIPTION: SQL query demonstrating a basic equality match on the title column. This strict matching only returns exact matches for the word 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom books\nwhere title = 'Harry';\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy for Role-Based Access\nDESCRIPTION: This SQL code snippet creates a policy that allows complete read access to all objects within the 'teams' bucket for users with the 'manager' role. The policy uses Supabase's Row Level Security to enforce this access control.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Manager can view all files in the bucket 'teams'\"\non storage.objects\nfor select\nto manager\nusing (\n  bucket_id = 'teams'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Service for Angular\nDESCRIPTION: TypeScript service that initializes the Supabase client and provides methods for authentication, profile management, and storage operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core'\nimport { LoadingController, ToastController } from '@ionic/angular'\nimport { AuthChangeEvent, createClient, Session, SupabaseClient } from '@supabase/supabase-js'\nimport { environment } from '../environments/environment'\n\nexport interface Profile {\n  username: string\n  website: string\n  avatar_url: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient\n\n  constructor(\n    private loadingCtrl: LoadingController,\n    private toastCtrl: ToastController\n  ) {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n  }\n\n  get user() {\n    return this.supabase.auth.getUser().then(({ data }) => data?.user)\n  }\n\n  get session() {\n    return this.supabase.auth.getSession().then(({ data }) => data?.session)\n  }\n\n  get profile() {\n    return this.user\n      .then((user) => user?.id)\n      .then((id) =>\n        this.supabase.from('profiles').select(`username, website, avatar_url`).eq('id', id).single()\n      )\n  }\n\n  authChanges(callback: (event: AuthChangeEvent, session: Session | null) => void) {\n    return this.supabase.auth.onAuthStateChange(callback)\n  }\n\n  signIn(email: string) {\n    return this.supabase.auth.signInWithOtp({ email })\n  }\n\n  signOut() {\n    return this.supabase.auth.signOut()\n  }\n\n  async updateProfile(profile: Profile) {\n    const user = await this.user\n    const update = {\n      ...profile,\n      id: user?.id,\n      updated_at: new Date(),\n    }\n\n    return this.supabase.from('profiles').upsert(update)\n  }\n\n  downLoadImage(path: string) {\n    return this.supabase.storage.from('avatars').download(path)\n  }\n\n  uploadAvatar(filePath: string, file: File) {\n    return this.supabase.storage.from('avatars').upload(filePath, file)\n  }\n\n  async createNotice(message: string) {\n    const toast = await this.toastCtrl.create({ message, duration: 5000 })\n    await toast.present()\n  }\n\n  createLoader() {\n    return this.loadingCtrl.create()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Supabase Function Locally for Puppeteer Screenshot Generation\nDESCRIPTION: This command serves the Supabase function locally, using an environment file and disabling JWT verification. It's used for local development and testing of the Puppeteer screenshot function.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/puppeteer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --env-file ./supabase/.env.local --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Documentation\nDESCRIPTION: HTML iframe code for embedding a demo video showing AI database control capabilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-12-postgres-new.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/ooWaPVvljlU\"\n    title=\"I gave AI full control over my database\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing RoomsPage Widget in Flutter\nDESCRIPTION: This snippet implements the RoomsPage widget, which displays the list of chat rooms and recently added users. It uses BlocBuilder to react to state changes and renders the appropriate UI based on the current state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:my_chat_app/cubits/profiles/profiles_cubit.dart';\n\nimport 'package:my_chat_app/cubits/rooms/rooms_cubit.dart';\nimport 'package:my_chat_app/models/profile.dart';\nimport 'package:my_chat_app/pages/chat_page.dart';\nimport 'package:my_chat_app/pages/register_page.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:timeago/timeago.dart';\n\n/// Displays the list of chat threads\nclass RoomsPage extends StatelessWidget {\n  const RoomsPage({Key? key}) : super(key: key);\n\n  static Route<void> route() {\n    return MaterialPageRoute(\n      builder: (context) => BlocProvider<RoomCubit>(\n        create: (context) =>\n            RoomCubit()..initializeRooms(context),\n        child: const RoomsPage(),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Rooms'),\n        actions: [\n          TextButton(\n            onPressed: () async {\n              await supabase.auth.signOut();\n              Navigator.of(context).pushAndRemoveUntil(\n                RegisterPage.route(),\n                (route) => false,\n              );\n            },\n            child: const Text('Logout'),\n          ),\n        ],\n      ),\n      body: BlocBuilder<RoomCubit, RoomState>(\n        builder: (context, state) {\n          if (state is RoomsLoading) {\n            return preloader;\n          } else if (state is RoomsLoaded) {\n            final newUsers = state.newUsers;\n            final rooms = state.rooms;\n            return BlocBuilder<ProfilesCubit,\n                ProfilesState>(\n              builder: (context, state) {\n                if (state is ProfilesLoaded) {\n                  final profiles = state.profiles;\n                  return Column(\n                    children: [\n                      _NewUsers(newUsers: newUsers),\n                      Expanded(\n                        child: ListView.builder(\n                          itemCount: rooms.length,\n                          itemBuilder: (context, index) {\n                            final room = rooms[index];\n                            final otherUser =\n                                profiles[room.otherUserId];\n\n                            return ListTile(\n                              onTap: () =>\n                                  Navigator.of(context)\n                                      .push(ChatPage.route(\n                                          room.id)),\n                            );\n                          },\n                        ),\n                      ),\n                    ],\n                  );\n                } else {\n                  return preloader;\n                }\n              },\n            );\n          } else if (state is RoomsEmpty) {\n            final newUsers = state.newUsers;\n            return Column(\n              children: [\n                _NewUsers(newUsers: newUsers),\n                const Expanded(\n                  child: Center(\n                    child: Text('No rooms yet'),\n                  ),\n                ),\n              ],\n            );\n          } else {\n            return const Center(\n                child: Text('Error loading rooms'));\n          }\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tokenization Result for SQL Statement in Rust\nDESCRIPTION: Example of the tokenization result for a simple SQL statement 'select '1';', showing how the custom Token struct is populated.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n[\n    Token {\n        kind: Select,\n        text: \"select\",\n        span: 0..6,\n        token_type: ReservedKeyword,\n    },\n    Token {\n        kind: Whitespace,\n        text: \" \",\n        span: 6..7,\n        token_type: Whitespace,\n    },\n    Token {\n        kind: Sconst,\n        text: \"'1'\",\n        span: 7..10,\n        token_type: NoKeyword,\n    },\n    Token {\n        kind: Ascii59,\n        text: \";\",\n        span: 10..11,\n        token_type: NoKeyword,\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for Sidebar\nDESCRIPTION: Tailwind configuration object for sidebar-related style utilities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar: {\n  DEFAULT: 'hsl(var(--sidebar-background))',\n  foreground: 'hsl(var(--sidebar-foreground))',\n  primary: 'hsl(var(--sidebar-primary))',\n  'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n  accent: 'hsl(var(--sidebar-accent))',\n  'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n  border: 'hsl(var(--sidebar-border))',\n  ring: 'hsl(var(--sidebar-ring))',\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling pg_stat_statements Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable or disable the pg_stat_statements extension in a PostgreSQL database. The extension is created within a separate schema to keep the public schema clean.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_stat_statements.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pg_stat_statements\" extension\ncreate extension pg_stat_statements with schema extensions;\n\n-- Disable the \"pg_stat_statements\" extension\ndrop extension if exists pg_stat_statements;\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally\nDESCRIPTION: Commands to start Supabase locally and serve functions without JWT verification using local environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-counter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve --no-verify-jwt --env-file supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Displaying JWT Token Structure for Authenticated Users in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure of a JWT token for authenticated users in Supabase, including the user ID, role, issuer, and expiration time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-11-studio-introducing-assistant.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"348b-some-user-uuid\", // the ID of the user\n  \"role\": \"authenticated\",      // the Postgres role\n  \"iss\": \"supabase\"             // the issuer of the JWT\n  \"exp\": 1445385600,            // the time the JWT will expires\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Clutch Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Clutch's low-code platform integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/ZZE9BabdTxE\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Supabase Development Environment\nDESCRIPTION: Command to start the local Supabase development environment for making schema changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Displaying Current User Avatar in React\nDESCRIPTION: This code snippet demonstrates how to import and use the CurrentUserAvatar component within a React application. It showcases the component's integration within a header element, rendering the current user's avatar or a fallback. The component automatically fetches user data from Supabase Auth.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/current-user-avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CurrentUserAvatar } from '@/components/current-user-avatar'\n\nconst CurrentUserAvatarDemo = () => {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <CurrentUserAvatar />\n    </Header>\n  )\n}\n\nexport default CurrentUserAvatarDemo\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Auth UI React Package\nDESCRIPTION: Command to install the standalone Supabase Auth UI React package from NPM. This package provides customizable authentication UI components that were previously part of @supabase/ui library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-one-more-thing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/auth-ui-react\n```\n\n----------------------------------------\n\nTITLE: Installing Input Component via CLI\nDESCRIPTION: Command to install the Input component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add input\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in HTML\nDESCRIPTION: HTML code snippet for embedding a YouTube video demonstration of Supabase Realtime with multiplayer features. The iframe includes styling for responsive video container and various YouTube embedding parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-01-supabase-realtime-with-multiplayer-features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full video-with-border\"\n    src=\"https://www.youtube-nocookie.com/embed/BelYEMJ2N00\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Database Schema with RLS Policies\nDESCRIPTION: SQL schema for creating profiles table with Row Level Security policies, including user authentication, storage configuration, and realtime subscriptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/react-user-management/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for Public Profiles\ncreate table\n  profiles (\n    id uuid references auth.users not null,\n    updated_at timestamp\n    with\n      time zone,\n      username text unique,\n      avatar_url text,\n      website text,\n      primary key (id),\n      unique (username),\n      constraint username_length check (char_length(username) >= 3)\n  );\n\nalter table\n  profiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles for\nselect\n  using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles for insert\nwith\n  check ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles for\nupdate\n  using ((select auth.uid()) = id);\n\n-- Set up Realtime!\nbegin;\n\ndrop\n  publication if exists supabase_realtime;\n\ncreate publication supabase_realtime;\n\ncommit;\n\nalter\n  publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into\n  storage.buckets (id, name)\nvalues\n  ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects for\nselect\n  using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects for insert\nwith\n  check (bucket_id = 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Avatar Upload Component in Angular\nDESCRIPTION: This HTML template provides the structure for the AvatarComponent, including image display and file input for uploading new avatars.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <img\n    *ngIf=\"_avatarUrl\"\n    [src]=\"_avatarUrl\"\n    alt=\"Avatar\"\n    class=\"avatar image\"\n    style=\"height: 150px; width: 150px\"\n  />\n</div>\n<div *ngIf=\"!_avatarUrl\" class=\"avatar no-image\" style=\"height: 150px; width: 150px\"></div>\n<div style=\"width: 150px\">\n  <label class=\"button primary block\" for=\"single\">\n    {{ uploading ? 'Uploading ...' : 'Upload' }}\n  </label>\n  <input\n    style=\"visibility: hidden;position: absolute\"\n    type=\"file\"\n    id=\"single\"\n    accept=\"image/*\"\n    (change)=\"uploadAvatar($event)\"\n    [disabled]=\"uploading\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Ordering by Related Tables in PostgREST\nDESCRIPTION: Demonstrates how to order query results based on a column from a related table. This feature is applicable for one-to-one and many-to-one relationships.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /films?select=title,...technical_specs(duration)&order=technical_specs(duration).desc\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('films')\n  .select(`\n    title,\n    ...technical_specs (\n      duration\n    )\n  `)\n   .order('technical_specs(duration)', { descending: true }))\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Amra Ekta Cinema Banabo\",\n    \"duration\": \"21:05:00\"\n  },\n  {\n    \"title\": \"Resan\",\n    \"duration\": \"14:33:00\"\n  },\n  \"...\"\n]\n```\n\n----------------------------------------\n\nTITLE: Sign Out User with Supabase Auth\nDESCRIPTION: This Kotlin snippet demonstrates how to sign out a user using the Supabase client library. The signOut method removes the user's session and any objects from local storage. The code uses the `suspend` keyword, indicating that this function is a coroutine and can be executed asynchronously.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering pg_audit Logs by Role in SQL\nDESCRIPTION: SQL query to filter pg_audit logs by a specific role. It looks for events starting with 'AUDIT' in the event message and filters by the specified role name.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n... query\nwhere\n -- all pg_audit recorded events start with 'AUDIT'\n regexp_contains(event_message, '^AUDIT')\n  and\n -- Finding queries executed from the relevant role (e.g., 'API_role')\n parsed.user_name = 'API_role'\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Installation Info on MacOS\nDESCRIPTION: Homebrew command to display PostgreSQL installation information\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/postgres_installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew info postgresql@17\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Build in Public Stream using iframe in HTML/JSX\nDESCRIPTION: Code for embedding the 'Build in Public' YouTube stream within a responsive container using an iframe element. Similar structure to the previous video embed but with a different YouTube URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-06-02-supabase-beta-may-2021.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/p561ogKZ63o\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Sonner Toast Function\nDESCRIPTION: Shows how to import the toast function from Sonner for use in React components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { toast } from 'sonner'\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Edge Functions\nDESCRIPTION: Command to deploy the Supabase Edge Functions to the production environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy\n```\n\n----------------------------------------\n\nTITLE: Creating ProductListViewModel with Hilt and Flow - Kotlin\nDESCRIPTION: Defines a ViewModel class for managing a list of products, utilizing Hilt for dependency injection. It provides methods for fetching and managing the product list, including functionalities to load products and remove items.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n@HiltViewModel\nclass ProductListViewModel @Inject constructor(\nprivate val productRepository: ProductRepository,\n) : ViewModel() {\n\n    private val _productList = MutableStateFlow<List<Product>?>(listOf())\n    val productList: Flow<List<Product>?> = _productList\n\n\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: Flow<Boolean> = _isLoading\n\n    init {\n        getProducts()\n    }\n\n    fun getProducts() {\n        viewModelScope.launch {\n            val products = productRepository.getProducts()\n            _productList.emit(products?.map { it -> it.asDomainModel() })\n        }\n    }\n\n    fun removeItem(product: Product) {\n        viewModelScope.launch {\n            val newList = mutableListOf<Product>().apply { _productList.value?.let { addAll(it) } }\n            newList.remove(product)\n            _productList.emit(newList.toList())\n            // Call api to remove\n            productRepository.deleteProduct(id = product.id)\n            // Then fetch again\n            getProducts()\n        }\n    }\n\n    private fun ProductDto.asDomainModel(): Product {\n        return Product(\n            id = this.id,\n            name = this.name,\n            price = this.price,\n            image = this.image\n        )\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships with GraphQL\nDESCRIPTION: GraphQL query example showing how to query orchestral sections with their related instruments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst Query = `\n  query {\n    orchestral_sectionsCollection {\n      edges {\n        node {\n          id\n          name\n          instruments {\n            id,\n            name\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Server Response Format for Connection\nDESCRIPTION: Server response message format containing Postgres configuration with unique ID for routing incoming changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"phx_reply\",\n   \"topic\": string,\n   \"payload\": {\n      \"response\": {\n         \"postgres_changes\": [\n            {\n               \"id\": number,\n               \"event\": \"*\" | \"INSERT\" | \"UPDATE\" | \"DELETE\",\n               \"schema\": string,\n               \"table\": string,\n               \"filter\": string + '=' + \"eq\" | \"neq\" | \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"in\" +  '.' + string\n            }\n         ]\n      },\n      \"status\": \"ok\" | \"error\"\n   },\n   \"ref\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client\nDESCRIPTION: JavaScript module that creates and exports a Supabase client instance using environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema and Sample Data for Supabase\nDESCRIPTION: SQL commands to create a 'countries' table in Supabase and insert sample data for demonstration purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table countries (\n  \"id\" serial primary key,\n  \"name\" text\n);\n\ninsert into countries\n  (id, name)\nvalues\n  (1, 'United Kingdom'),\n  (2, 'United States'),\n  (3, 'Singapore');\n```\n\n----------------------------------------\n\nTITLE: Including Create Client for Auth Partial in MDX\nDESCRIPTION: Demonstrates how to include a reusable partial for creating an authentication client in Supabase documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<$Partial path=\"create_client_snippet.mdx\" />\n```\n\n----------------------------------------\n\nTITLE: Building a Magic Link Login Page Component in SvelteKit\nDESCRIPTION: Creates a login page component with a form that sends magic links for authentication. Includes form handling, loading states, and error display functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- src/routes/+page.svelte -->\n<script lang=\"ts\">\n\timport { enhance } from '$app/forms'\n\timport type { ActionData, SubmitFunction } from './$types.js'\n\n\texport let form: ActionData;\n\n\tlet loading = false\n\n\tconst handleSubmit: SubmitFunction = () => {\n\t\tloading = true\n\t\treturn async ({ update }) => {\n\t\t\tupdate()\n\t\t\tloading = false\n\t\t}\n\t}\n</script>\n\n<svelte:head>\n\t<title>User Management</title>\n</svelte:head>\n\n<form class=\"row flex flex-center\" method=\"POST\" use:enhance={handleSubmit}>\n\t<div class=\"col-6 form-widget\">\n\t\t<h1 class=\"header\">Supabase + SvelteKit</h1>\n\t\t<p class=\"description\">Sign in via magic link with your email below</p>\n\t\t{#if form?.message !== undefined}\n\t\t<div class=\"success {form?.success ? '' : 'fail'}\">\n\t\t\t{form?.message}\n\t\t</div>\n\t\t{/if}\n\t\t<div>\n\t\t\t<label for=\"email\">Email address</label>\n\t\t\t<input\n\t\t\t\tid=\"email\"\n\t\t\t\tname=\"email\"\n\t\t\t\tclass=\"inputField\"\n\t\t\t\ttype=\"email\"\n\t\t\t\tplaceholder=\"Your email\"\n\t\t\t\tvalue={form?.email ?? ''}\n\t\t\t/>\n\t\t</div>\n\t\t{#if form?.errors?.email}\n\t\t<span class=\"flex items-center text-sm error\">\n\t\t\t{form?.errors?.email}\n\t\t</span>\n\t\t{/if}\n\t\t<div>\n\t\t\t<button class=\"button primary block\">\n\t\t\t\t{ loading ? 'Loading' : 'Send magic link' }\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Supabase Auth Sign Up Example\nDESCRIPTION: This JavaScript code snippet shows an example of how to use the `signUp` function from the Supabase auth client. It demonstrates how to sign up a user with an email and password, including setting the `emailRedirectTo` option.  The `emailRedirectTo` option specifies the URL where the user will be redirected after confirming their email.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nsupabaseClient.auth.signUp({\n  email: 'valid.email@supabase.io',\n  password: 'sup3rs3cur3',\n  options: {\n    emailRedirectTo: 'http://localhost:3000/auth/callback',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in React\nDESCRIPTION: Import statement for the Accordion component and its related sub-components from the UI component library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/accordion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Webhook URL\nDESCRIPTION: URL format to set the webhook for your Telegram bot, connecting it to your Supabase Edge Function. This needs to be executed in a browser or with an HTTP client.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/telegram-bot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhttps://api.telegram.org/bot<TELEGRAM_BOT_TOKEN>/setWebhook?url=https://<PROJECT_REFERENCE>.supabase.co/functions/v1/telegram-bot?secret=<FUNCTION_SECRET>\n```\n\n----------------------------------------\n\nTITLE: Creating Realtime Broadcast Authorization Policy in SQL\nDESCRIPTION: This SQL code creates a policy on the \"realtime\".\"messages\" table that allows authenticated users to receive broadcast messages. This is required for Realtime Authorization when using Broadcast.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Authenticated users can receive broadcasts\"\non \"realtime\".\"messages\"\nfor select\nto authenticated\nusing ( true );\n```\n\n----------------------------------------\n\nTITLE: Syncing Database Schema\nDESCRIPTION: Command to push local database schema changes to the remote Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_ENV=production npx supabase@latest db push\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Usage in React\nDESCRIPTION: Example of basic carousel usage with content, items, and navigation buttons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n  <CarouselPrevious />\n  <CarouselNext />\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal Component with Demo in JSX\nDESCRIPTION: Displays a preview of the modal component using a ComponentPreview element. This snippet demonstrates the basic usage of the modal.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/modal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"modal-demo\" peekCode wide />\n```\n\n----------------------------------------\n\nTITLE: Reload PostgREST Configuration Cache\nDESCRIPTION: SQL notification command to reload PostgREST configuration after making changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nNOTIFY pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Creating AddProductScreen Component in Jetpack Compose\nDESCRIPTION: This code defines the 'AddProductScreen' Composable function, which lays out the UI for adding a product. It uses Jetpack Compose's Scaffold, TopAppBar, and other components for layout. NavController handles navigation, and AddProductViewModel provides state management. The UI includes a loading screen and a success screen based on product addition status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n@SuppressLint(\"UnusedMaterial3ScaffoldPaddingParameter\")\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun AddProductScreen(\n    modifier: Modifier = Modifier,\n    navController: NavController,\n    viewModel: AddProductViewModel = hiltViewModel(),\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                navigationIcon = {\n                    IconButton(onClick = {\n                        navController.navigateUp()\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = null,\n                            tint = MaterialTheme.colorScheme.onPrimary\n                        )\n                    }\n                },\n                backgroundColor = MaterialTheme.colorScheme.primary,\n                title = {\n                    Text(\n                        text = stringResource(R.string.add_product_text_screen_title),\n                        color = MaterialTheme.colorScheme.onPrimary,\n                    )\n                },\n            )\n        }\n    ) { padding ->\n        val navigateAddProductSuccess =\n            viewModel.navigateAddProductSuccess.collectAsState(initial = null).value\n        val isLoading =\n            viewModel.isLoading.collectAsState(initial = null).value\n        if (isLoading == true) {\n            LoadingScreen(message = \"Adding Product\",\n                onCancelSelected = {\n                    navController.navigateUp()\n                })\n        } else {\n            SuccessScreen(\n                message = \"Product added\",\n                onMoreAction = {\n                    viewModel.onAddMoreProductSelected()\n                },\n                onNavigateBack = {\n                    navController.navigateUp()\n                })\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User Python\nDESCRIPTION: This Python code snippet calls the sign_out method on the Supabase authentication object to sign out a user. It ends the session locally. Ensure the Supabase Python client is properly configured.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nsupabase.auth.sign_out()\n```\n\n----------------------------------------\n\nTITLE: Supavisor Session Mode Connection Example\nDESCRIPTION: Connection string example for Supavisor in session mode using port 5432.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Example session string\npostgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Column Definition with Custom Header\nDESCRIPTION: Example of defining a table column with a custom header component for email data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nexport const columns = [\n  {\n    accessorKey: 'email',\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Email\" />,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring External Auth in TOML with Environment Variables\nDESCRIPTION: Example of using environment variables in config.toml for GitHub authentication setup\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsite_url = \"env(SUPABASE_AUTH_SITE_URL)\"\nadditional_redirect_urls = [\n    \"env(SUPABASE_AUTH_ADDITIONAL_REDIRECT_URLS)\"\n]\n\n[auth.external.github]\nenabled = true\nclient_id = \"env(SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID)\"\nsecret = \"env(SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table With Insufficient Privileges\nDESCRIPTION: Example showing permission error when attempting to create table without proper schema privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> create table public.apps(id serial primary key, name text);\nERROR:  permission denied for schema public\nLINE 1: create table public.apps(id serial primary key, name text);\n                     ^\n```\n\n----------------------------------------\n\nTITLE: Querying Partitioned Sales Table in PostgreSQL\nDESCRIPTION: This snippet shows how to query a partitioned sales table. It includes examples of querying the parent table to retrieve data from multiple partitions and querying a specific partition directly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom sales\nwhere order_date >= '2000-01-01' and order_date < '2000-03-01';\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom sales_2000_02;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet shows how to embed a YouTube video using an iframe within a div element in Markdown. It includes responsive design classes and various attributes for the iframe.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-19-launch-week-x-best-launches.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/7tOEJgXX3IU\"\n    title=\"YouTube video player\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Demo iFrame in HTML\nDESCRIPTION: HTML iframe code for embedding a Loom video demo showing Supabase features. The iframe includes standard attributes for video embedding with full-width styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-supabase-alpha-july-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.loom.com/embed/17fbbc3bc9b2459eb0efbbb174b2ce7b\"\n    frameBorder=\"0\"\n    allowFullScreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Blog Table in PostgreSQL\nDESCRIPTION: SQL commands to create a 'Blog' table with id, name, and description columns, and insert a sample record. This table will be used to demonstrate GraphQL queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_graphql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"Blog\"(\n  id serial primary key,\n  name text not null,\n  description text\n);\n\ninsert into \"Blog\"(name)\nvalues ('My Blog');\n```\n\n----------------------------------------\n\nTITLE: Warning Alert Dialog Implementation\nDESCRIPTION: Text confirm dialog with warning alert styling, showing a deletion confirmation message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/text-confirm-dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"text-confirm-dialog-with-warning-alert\"\n  description=\"An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Mobbin Case Study\nDESCRIPTION: This markdown frontmatter defines metadata for the Mobbin case study, including title, description, author information, company details, and Supabase products used.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_customers/mobbin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Mobbin\ntitle: How Mobbin migrated 200,000 users from Firebase for a better authentication experience.\ndescription: Mobbin helps over 200,000 creators globally search and view the latest design patterns from well-known apps.\nmeta_description: Mobbin helps over 200,000 creators globally search and view the latest design patterns from well-known apps.\nauthor: rory_wilding\nauthor_title: Supabase\nauthor_url: https://github.com/kiwicopple\nauthor_image_url: https://avatars2.githubusercontent.com/u/10214025?s=400&u=c6775be2ae667e2acae3ccd347fed62bb3f5b3e7&v=4\nlogo: /images/customers/logos/mobbin.png\nlogo_inverse: /images/customers/logos/light/mobbin.png\nog_image: /images/customers/og/mobbin.jpg\ntags:\n  - supabase\ndate: '2023-02-14'\ncompany_url: 'https://mobbin.design'\nstats:\n  [\n    { stat: '00,000', label: Example stat },\n    { stat: '00,000', label: Example stat },\n    { stat: '00,000', label: Example stat },\n  ]\nmisc: [{ label: 'Founded', text: Singapore }]\nabout: Mobbin is a comprehensive, expert-curated library of interfaces from the best-in-class digital products that helps product designers find relevant design inspiration and references with significantly less time and effort.\nindustry: ['saas', 'developer-tools']\ncompany_size: 'startup'\nregion: 'Asia'\nsupabase_products: ['database', 'auth']\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Presence Key in Python\nDESCRIPTION: This snippet demonstrates how to set a custom presence key in Python during channel creation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nchannel_c = supabase.channel('test', {\n  \"config\": {\n    \"presence\": {\n      \"key\": 'userId-123',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Function Existence in PostgreSQL\nDESCRIPTION: SQL query to check for existing functions across specified schemas.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  p.proname as function_name,\n  n.nspname as schema_name,\n  pg_get_functiondef(p.oid) as function_definition\nfrom\n  pg_proc as p\n  join pg_namespace as n on p.pronamespace = n.oid\nwhere n.nspname in ('public', 'your custom schema')\norder by n.nspname, p.proname;\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in RedwoodJS\nDESCRIPTION: Routes configuration file that defines the application's routing structure, including the home page at the root path.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nimport { Router, Route } from '@redwoodjs/router'\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Route path=\"/\" page={HomePage} name=\"home\" />\n      <Route notfound page={NotFoundPage} />\n    </Router>\n  )\n}\n\nexport default Routes\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase project with Homebrew\nDESCRIPTION: This command initializes a Supabase project in the current repository using the globally installed Supabase CLI. It creates the required configuration files for local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Adding GitLab Sign-In in Supabase JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to utilize Supabase's `signInWithOAuth` method to authenticate users with GitLab. Dependencies include the Supabase JavaScript client, which should be initialized with the project's URL and anon key. The main parameter is `provider: 'gitlab'`, which specifies GitLab as the OAuth provider. Upon execution, it attempts to log in a user using GitLab credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signInWithGitLab() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'gitlab',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Supabase Data Count: Deprecating FetchOption (Dart)\nDESCRIPTION: Shows how to fetch the count of records in Supabase using the deprecated `FetchOption` in v1 and the new `.count()` methods in v2.  `.count()` can be chained after `.select()` to retrieve data and its count simultaneously, or called directly on `.from()` to perform a head request fetching only the count value.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// Request with count option\nfinal res = await supabase.from('cities').select(\n      'name',\n      const FetchOptions(\n        count: CountOption.exact,\n      ),\n    );\n\nfinal data = res.data;\nfinal count = res.count;\n\n// Request with count and head option\n// obtains the count value without fetching the data.\nfinal res = await supabase.from('cities').select(\n      'name',\n      const FetchOptions(\n        count: CountOption.exact,\n        head: true,\n      ),\n    );\n\nfinal count = res.count;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Request with count option\nfinal res = await supabase\n    .from('cities')\n    .select('name')\n    .count(); // CountOption.exact is the default value\n\nfinal data = res.data;\nfinal int count = res.count;\n\n// `.count()` directly on `.from()` performs a head request,\n// obtaining the count value without fetching the data.\nfinal int count = await supabase\n    .from('cities')\n    .count(); // CountOption.exact is the default value\n```\n\n----------------------------------------\n\nTITLE: Testing Grafana Metrics Endpoint\nDESCRIPTION: cURL command to verify if the metrics endpoint is returning data using service role authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/grafana-not-displaying-data-sXJrMj.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://<YOUR_PROJECT_REF>.supabase.co/customer/v1/privileged/metrics --user 'service_role:<SERVICE_ROLE_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Postgres CDC Message Format\nDESCRIPTION: Message format for Postgres Change Data Capture events, including new and old record information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"postgres_changes\",\n   \"topic\": string,\n   \"payload\": {\n      \"data\": {\n         schema: string,\n         table: string,\n         commit_timestamp: string,\n         eventType: \"*\" | \"INSERT\" | \"UPDATE\" | \"DELETE\",\n         new: {[key: string]: boolean | number | string | null},\n         old: {[key: string]: number | string},\n         errors: string | null\n      },\n      \"ids\": Array<number>\n   },\n   \"ref\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Secrets for Telegram Bot\nDESCRIPTION: Command to set the required environment secrets for the Telegram bot function, including the bot token and a function secret for security.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/telegram-bot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsupabase secrets set TELEGRAM_BOT_TOKEN=your_token FUNCTION_SECRET=random_secret\n```\n\n----------------------------------------\n\nTITLE: Running Wrangler Development Server\nDESCRIPTION: Command to start the local development server for Cloudflare Workers using Wrangler. This allows testing of the worker code before deployment.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Checking Entrypoint Script Permissions\nDESCRIPTION: Commands to verify and display permissions for the entrypoint.sh script.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/grafana-not-displaying-data-sXJrMj.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd /\nls -l | grep entrypoint.sh\n```\n\nLANGUAGE: sh\nCODE:\n```\n-rwxr-xr-x\n```\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Creating SemVer to Text Conversion Function in SQL\nDESCRIPTION: Implements a function 'semver_to_text' to convert the 'semver' type to a human-readable string format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function semver_to_text(semver)\n    returns text\n    immutable\n    language sql\nas $$\n    select\n        format('%s.%s.%s', $1.major, $1.minor, $1.patch)\n        || case\n            when $1.pre_release is null then ''\n            else format('-%s', array_to_string($1.pre_release, '.'))\n        end\n        || case\n            when $1.build_metadata is null then ''\n            else format('+%s', array_to_string($1.build_metadata, '.'))\n        end\n$$;\n```\n\n----------------------------------------\n\nTITLE: ChatMessage Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of a chat message object used in the RealtimeChat component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-chat.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChatMessage {\n  id: string\n  content: string\n  user: {\n    name: string\n  }\n  createdAt: string\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Type for ProjectOwner View\nDESCRIPTION: This GraphQL snippet shows the resulting type definition for the 'ProjectOwner' view after it has been processed by pg_graphql. It includes the nodeId, id, and name fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProjectOwner implements Node {\n  nodeId: ID!\n  id: UUID!\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Optimization in Python\nDESCRIPTION: This snippet shows how to disable automatic image optimization and request the original format using the Supabase Python client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.storage.from_('bucket').download(\n  'image.jpeg',\n  {\n    'transform': {\n      'width': 200,\n      'height': 200,\n      'format': 'origin',\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SDK via NuGet Package Manager\nDESCRIPTION: Command to install the Supabase package using the .NET CLI dotnet add package command. This adds the Supabase client library to a .NET project through NuGet package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/csharp/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package supabase\n```\n\n----------------------------------------\n\nTITLE: Creating a SvelteKit App\nDESCRIPTION: Command to create a new SvelteKit application using the npm create command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create my-app\n```\n\n----------------------------------------\n\nTITLE: Applying Pending Migration\nDESCRIPTION: Starts the local database and applies the pending migration using Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start && supabase migration up\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializer for Supabase Kotlin Client\nDESCRIPTION: This Kotlin snippet shows how to implement a custom serializer by extending the SupabaseSerializer interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomSerializer: SupabaseSerializer {\n\n    override fun <T : Any> encode(type: KType, value: T): String {\n        //encode value to string\n    }\n\n    override fun <T : Any> decode(type: KType, value: String): T {\n        //decode value\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker for Supabase Studio Development\nDESCRIPTION: Commands for setting up Docker to run Supabase Studio locally. This includes navigating to the Docker directory, copying the environment configuration file, and starting the Docker containers.\nSOURCE: https://github.com/supabase/supabase/blob/master/DEVELOPERS.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd docker\n```\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.example .env\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browser-Based Postgres Instance via Terminal\nDESCRIPTION: Shell command for connecting to a PostgreSQL instance running in someone else's browser through the proxy server. Requires the proxy port number and a configured password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-03-postgres-wasm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npsql postgres://postgres:my_password@proxy.wasm.supabase.com:<PORT>\n```\n\n----------------------------------------\n\nTITLE: Configuring Project URL for Geo-Routing\nDESCRIPTION: Example format for the project URL endpoint that enables geo-routing functionality. Replace project_ref with your actual project reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-04-data-api-nearest-read-replica.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<project_ref>-all.supabase.co\n```\n\n----------------------------------------\n\nTITLE: Using the FilterBar Component\nDESCRIPTION: This example demonstrates the usage of the `FilterBar` component with static filter properties. It manages the `filters` state using `useState` and provides handlers for freeform text and filter changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function FilterDemo() {\n  const [filters, setFilters] = useState<FilterGroup>(initialFilters)\n  const [freeformText, setFreeformText] = useState('')\n\n  return (\n    <FilterBar\n      filterProperties={filterProperties}\n      freeformText={freeformText}\n      onFreeformTextChange={setFreeformText}\n      filters={filters}\n      onFilterChange={setFilters}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase\nDESCRIPTION: Environment variable configuration for Supabase URL and anonymous key authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/react-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component\nDESCRIPTION: Example of importing the Progress component from the components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/progress.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Progress } from '@/components/ui/progress'\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in Kotlin with Supabase\nDESCRIPTION: Kotlin implementation to update a user's password using Supabase authentication client with a builder pattern after a successful password reset flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_37\n\nLANGUAGE: Kotlin\nCODE:\n```\nsupabase.auth.updateUser {\n    password = \"new_password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP for Local Supabase Instance\nDESCRIPTION: JSON configuration for connecting a local Supabase instance to MCP-compatible AI tools using the Postgres MCP server. This snippet is a placeholder for the actual configuration, which is included via a partial template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/mcp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n<$Partial path=\"mcp_postgres_config.mdx\" variables={{ \"app\": \"your MCP client\" }} />\n```\n\n----------------------------------------\n\nTITLE: Querying Database Authentication Errors in SQL\nDESCRIPTION: SQL query to check for recent errors encountered by the Auth server while interacting with the database. Focuses on ERROR, FATAL, and PANIC severity levels for the supabase_auth_admin user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(postgres_logs.timestamp as datetime) as timestamp,\n  event_message,\n  parsed.error_severity,\n  parsed.user_name,\n  parsed.query,\n  parsed.detail,\n  parsed.hint,\n  parsed.sql_state_code,\n  parsed.backend_type\nfrom\n  postgres_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(metadata.parsed) as parsed\nwhere\n  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')\n  and regexp_contains(parsed.user_name, 'supabase_auth_admin')\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Directive in MDX for Supabase Docs\nDESCRIPTION: This code snippet demonstrates the syntax for using a custom directive in MDX files for Supabase documentation. The example shows a CodeSample directive, which starts with a '$' sign to distinguish it from regular React components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/features/directives/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<$CodeSample />\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Result After Applying Comment Directive\nDESCRIPTION: Shows the resulting GraphQL type definition after applying the comment directive to rename 'Account' to 'AccountHolder'. This demonstrates the output of the pg_graphql transformation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-02-22-supabase-beta-january-2022.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Renames \"Account\" to \"AccountHolder\"\ntype AccountHolder {\n  id: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Generated from SQL Table\nDESCRIPTION: Shows the GraphQL type automatically generated from the SQL Account table. It includes fields for id, email, createdAt, and updatedAt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Account {\n  id: Int!\n  email: String!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting database bloat using Supabase CLI\nDESCRIPTION: This command uses the Supabase CLI to check for table bloat in the database, helping identify tables that need vacuum maintenance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ supabase inspect db bloat\n```\n\n----------------------------------------\n\nTITLE: Initializing the SupaUtils PostgreSQL Extension\nDESCRIPTION: C code implementing the _PG_init function for the SupaUtils extension. It sets up the ProcessUtility hook and defines a configurable parameter for specifying reserved roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid\n_PG_init(void)\n{\n  // Store the previous hook\n  prev_hook = ProcessUtility_hook;\n  // Set our hook\n  ProcessUtility_hook = supautils_hook;\n\n  // Define our \"supautils.reserved_roles\" parameter\n  // some arguments are unused so they are left as NULL\n  DefineCustomStringVariable(\"supautils.reserved_roles\",\n  \"Comma-separated list of roles that cannot be altered or dropped\",\n  NULL,\n  // It will be assigned to the reserved_roles variable\n  &reserved_roles,\n  NULL,\n  // We should be able to reload this parameter without restarting the server,\n  // e.g. with \"select pg_reload_conf()\".\n  PGC_SIGHUP,\n  0,\n  NULL, NULL, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component\nDESCRIPTION: Code example showing how to import the Collapsible component and its sub-components in a React project. This assumes the component is installed in your components/ui directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/collapsible.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson Serializer Dependency in Kotlin Build Script\nDESCRIPTION: Adds the Jackson serializer dependency for supabase-kt to a Kotlin project using Gradle with the Kotlin DSL. This is required to use Jackson as the serialization library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.github.jan-tennert.supabase:serializer-jackson:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Invite Button HTML in Angular Component\nDESCRIPTION: HTML markup for an invite button styled with Tailwind CSS classes. The button has emerald color styling and is used to invite other users to collaborate on the board.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_32\n\nLANGUAGE: HTML\nCODE:\n```\n    class=\"inline-flex items-center rounded border border-transparent bg-emerald-600 px-2.5 py-1.5 text-xs font-medium text-white shadow-sm hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2\"\n  >\n    Invite\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Router shadcn/ui Installation Setup\nDESCRIPTION: Provides a framework-specific setup card for installing shadcn/ui in a React Router project with an SVG icon and link to official documentation\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/getting-started/quickstart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkedCard target=\"_blank\" href=\"https://ui.shadcn.com/docs/installation/react-router\">\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    className=\"w-10 h-10\"\n    fill=\"currentColor\"\n  >\n    <path d=\"M12.118 5.466a2.306 2.306 0 0 0-.623.08c-.278.067-.702.332-.953.583-.41.423-.49.609-.662 1.469-.08.423.41 1.43.847 1.734.45.317 1.085.502 2.065.608 1.429.16 1.84.636 1.84 2.197 0 1.377-.385 1.747-1.96 1.906-1.707.172-2.58.834-2.765 2.117-.106.781.41 1.76 1.125 2.091 1.627.768 3.15-.198 3.467-2.196.211-1.284.622-1.642 1.998-1.747 1.588-.133 2.409-.675 2.713-1.787.278-1.02-.304-2.157-1.297-2.554-.264-.106-.873-.238-1.35-.291-1.495-.16-1.879-.424-2.038-1.39-.225-1.337-.317-1.562-.794-2.09a2.174 2.174 0 0 0-1.613-.73z\" />\n  </svg>\n  <p className=\"font-medium mt-2\">React Router</p>\n</LinkedCard>\n```\n\n----------------------------------------\n\nTITLE: Applying Opacity to Tailwind Colors in JSX\nDESCRIPTION: Demonstrates how to use opacity with Tailwind color classes, showcasing different levels of opacity for the same color.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/tailwind-classes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex gap-3\">\n  <div className=\"w-4 h-4 rounded-full bg-surface-300\"></div>\n  <div className=\"w-4 h-4 rounded-full bg-surface-300/90\"></div>\n  <div className=\"w-4 h-4 rounded-full bg-surface-300/80\"></div>\n  <div className=\"w-4 h-4 rounded-full bg-surface-300/75\"></div>\n  <div className=\"w-4 h-4 rounded-full bg-surface-300/50\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Environment Variables in Ionic Angular\nDESCRIPTION: Sets up the Supabase URL and API key in the environment configuration file for an Ionic Angular project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const environment = {\n  production: false,\n  supabaseUrl: 'https://YOUR-APP.supabase.co',\n  supabaseKey: 'YOUR-ANON-KEY',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Chart Color Variables to CSS\nDESCRIPTION: CSS variables for chart colors that support both light and dark themes. These variables are used to style the chart components consistently across the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Progress Component\nDESCRIPTION: Basic example of using the Progress component with a value prop to display completion percentage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/progress.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Progress value={33} />\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with pg_graphql in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates how to use the gql.resolve function provided by pg_graphql to execute a GraphQL query within PostgreSQL. It queries for the 'id' field of all books.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-pg-graphql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect gql.resolve($$\n\nquery {\n  allBooks {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n\n$$);\n```\n\n----------------------------------------\n\nTITLE: Installing Pagination Component via CLI\nDESCRIPTION: Command to install the pagination component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/pagination.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add pagination\n```\n\n----------------------------------------\n\nTITLE: Listening to Specific Table Events in Python with Supabase Realtime\nDESCRIPTION: Establishes a Python channel to listen for UPDATE events on a specific table ('todos') in the public schema of a Supabase database. The code uses the 'table' parameter to specify which table to monitor.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"UPDATE\",\n  schema=\"public\",\n  table=\"todos\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Input OTP with Separator Component\nDESCRIPTION: Example showing how to use the InputOTPSeparator component to add a visual separator between input groups. This example creates a 4-digit OTP input split into two groups of two.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n\n...\n\n<InputOTP maxLength={4}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={2} />\n    <InputOTPSlot index={3} />\n  </InputOTPGroup>\n</InputOTP>\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase CLI Inspect DB Help\nDESCRIPTION: Shows the available commands for inspecting a Supabase database using the CLI\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ supabase inspect db help\nTools to inspect your Supabase database\n\nUsage:\n  supabase inspect db [command]\n\nAvailable Commands:\n  bloat                Estimates space allocated to a relation that is full of dead tuples\n  blocking             Show queries that are holding locks and the queries that are waiting for them to be released\n  cache-hit            Show cache hit rates for tables and indices\n```\n\n----------------------------------------\n\nTITLE: Setting Windows PostgreSQL Path\nDESCRIPTION: System path configuration for PostgreSQL binaries on Windows systems\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/postgres_installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Program Files\\PostgreSQL\\17\\bin\n```\n\n----------------------------------------\n\nTITLE: Loading User Data from Supabase\nDESCRIPTION: Fetching user data from Supabase database to populate the star constellation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst [particles, setParticles] = useState([])\n\nconst loadUsers = async () => {\n  return await supabase.from('lw8_tickets').select('*')\n}\n\nuseEffect(() => {\n  const { data: users } = loadUsers()\n  setParticles(users)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Edge Functions with GitHub Actions YAML Configuration\nDESCRIPTION: This YAML configuration sets up a GitHub Action that automatically deploys a Supabase Edge Function when changes are pushed to or merged into the main branch. It uses the Supabase CLI Action to run the deployment command. The workflow requires a SUPABASE_ACCESS_TOKEN secret and a PROJECT_ID environment variable.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/github-action-deploy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Function\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}\n      PROJECT_ID: zdtdtxajzydjqzuktnqx\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: latest\n\n      - run: supabase functions deploy github-action-deploy --project-ref $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling plpgsql_check Extension in SQL\nDESCRIPTION: SQL commands to enable and disable the plpgsql_check extension in a Postgres database. Creating the extension is equivalent to enabling it, while dropping the extension disables it.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"plpgsql_check\" extension\ncreate extension plpgsql_check;\n\n-- Disable the \"plpgsql_check\" extension\ndrop extension if exists plpgsql_check;\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Project with Management API in TypeScript\nDESCRIPTION: This code snippet demonstrates how to programmatically create a new Supabase project using the supabase-management-js library, which is a TypeScript wrapper for the Supabase Management API. It initializes a client with an access token and creates a new project with specified parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-10-supabase-integrations-marketplace.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SupabaseManagementAPI } from \"supabase-management-js\";\n\nconst client = new SupabaseManagementAPI({\n\taccessToken: \"<access token>\"\n})\n\nconst newProject = await client.createProject({\n\t  name: 'staging',\n\t\tdb_pass: 'XXX',\n    organization_id: 'XXX'\n\t\tplan: 'free',\n    region: 'us-east-1'\n})\n```\n\n----------------------------------------\n\nTITLE: Failed Function Execution After Permission Revoke\nDESCRIPTION: Demonstrates the error message when junior_dev attempts to execute the function after public execute permission has been revoked.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> select add(1, 2);\nERROR:  permission denied for function add\n```\n\n----------------------------------------\n\nTITLE: Overriding Types for Supabase Queries\nDESCRIPTION: Demonstrates how to override types for specific Supabase query responses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Partial type override allows you to only override some of the properties in your results\nconst { data } = await supabase.from('countries').select().overrideTypes<Array<{ id: string }>>()\n// For a full replacement of the original return type use the `{ merge: false }` property as second argument\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .overrideTypes<Array<{ id: string }>, { merge: false }>()\n// Use it with `maybeSingle` or `single`\nconst { data } = await supabase.from('countries').select().single().overrideTypes<{ id: string }>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to Use Custom Image Loader\nDESCRIPTION: This snippet shows how to configure Next.js to use a custom loader for image optimization in the nextjs.config.js file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './supabase-image-loader.js',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Vector Index\nDESCRIPTION: Initializes a Supabase vector store and creates an index from the loaded documents using PostgreSQL connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Substitute your connection string here\nDB_CONNECTION = \"postgresql://postgres:password@localhost:5431/db\"\n\nvector_store = SupabaseVectorStore(\n    postgres_connection_string=DB_CONNECTION, \n    collection_name='base_demo'\n)\nstorage_context = StorageContext.from_defaults(vector_store=vector_store)\nindex = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Index in PostgreSQL\nDESCRIPTION: Shows how to create a basic btree index on a surname column to improve query performance for surname lookups.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_students_surname on students (surname);\n```\n\n----------------------------------------\n\nTITLE: Starting the refine development server\nDESCRIPTION: Command to start the refine application in development mode, making it accessible at http://localhost:5173.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Testing GET Endpoint\nDESCRIPTION: cURL command to test the GET endpoint of the deployed Edge Function\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET 'https://<project_ref>.supabase.co/functions/v1/hello-world' \\\n  --header 'Authorization: Bearer ANON_KEY' \\\n```\n\n----------------------------------------\n\nTITLE: Installing Command Component via CLI\nDESCRIPTION: Command for installing the Command component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/command.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add command\n```\n\n----------------------------------------\n\nTITLE: QETL Join Query with Foreign Data Wrapper\nDESCRIPTION: SQL query showing how to join data between local users table and warehouse orders table using FDW.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  auth.users.id as user_id,\n  warehouse.orders.id as order_id\nfrom\n  warehouse.orders\njoin \n  auth.users on auth.users.id = warehouse.orders.user_id\nwhere \n  auth.users.id = '<some_user_id>';\n```\n\n----------------------------------------\n\nTITLE: Static Remote Subquery with ClickHouse\nDESCRIPTION: Example of creating a foreign table using a static subquery on a ClickHouse server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table clickhouse.people (\n  id bigint,\n  name text,\n  age bigint\n)\nserver clickhouse_server\noptions (\n  table '(select * from people where age < 25)'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Page Component with Authentication in TypeScript\nDESCRIPTION: This code snippet demonstrates a template for building a page in the Supabase project using Next.js and TypeScript. It includes authentication wrapping, layout structure, and placeholders for importing necessary components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/pages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextPage } from 'next'\nimport { withAuth } from 'hooks/misc/withAuth'\n\n// Import the corresponding layout based on the page\nimport { Layout } from 'components/layouts'\n\n// Import the main building blocks of the page\nimport { ... } from 'components/interfaces/xxx'\n\n// Import reusable UI components if needed\nimport { ... } from 'components/ui/xxx'\n\n// Name your page accordingly\nconst Page: NextPage = () => {\n\n  return (\n    <Layout>\n      <div>Page content</div>\n    </Layout>\n  )\n}\n\nexport default withAuth(Page)\n```\n\n----------------------------------------\n\nTITLE: Creating a Zod Form Schema\nDESCRIPTION: Example of creating a form validation schema using Zod, defining constraints for a username field with minimum and maximum length requirements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { z } from 'zod'\n\nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Menubar via CLI\nDESCRIPTION: Command to install the Menubar component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/menubar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add menubar\n```\n\n----------------------------------------\n\nTITLE: Testing Edge Function with cURL\nDESCRIPTION: cURL command to test the text-to-image Edge Function by generating an image of a llama wearing sunglasses\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl --output result.jpg --location --request POST 'http://localhost:54321/functions/v1/text-to-image' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"prompt\":\"Llama wearing sunglasses\"}'\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JS via pnpm\nDESCRIPTION: Command to install the Supabase JavaScript library using pnpm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Dropping Objects Owned by Role in SQL\nDESCRIPTION: This SQL command drops all objects owned by the specified role and revokes its privileges, further preparing for role deletion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-delete-a-role-in-postgres-8-AvxY.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP OWNED BY <role>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Functional Index in SQL\nDESCRIPTION: This example demonstrates how to create a functional index in Postgres, which allows indexing on the result of a function applied to a column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate index test1_lower_col1_idx on test1 (lower(col1));\n```\n\n----------------------------------------\n\nTITLE: FilterGroup Interface Definition\nDESCRIPTION: Defines the `FilterGroup` interface, representing a group of filter conditions combined with a logical operator (`AND` or `OR`). The `conditions` array can contain either `FilterCondition` objects or nested `FilterGroup` objects, allowing for complex filter structures.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ninterface FilterGroup {\n  logicalOperator: 'AND' | 'OR'\n  conditions: (FilterCondition | FilterGroup)[]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Auth Dependencies\nDESCRIPTION: Commands to install required Supabase authentication helper libraries for Next.js integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/auth-helpers-nextjs @supabase/supabase-js\nnpm install @supabase/auth-helpers-react\n```\n\n----------------------------------------\n\nTITLE: Installing Menubar Dependencies Manually\nDESCRIPTION: Command to install the required dependencies for the Menubar component manually using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/menubar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-menubar\n```\n\n----------------------------------------\n\nTITLE: Creating Expo React Native App Container with Map Integration\nDESCRIPTION: Sets up the main App component that integrates the Map component with proper styling and layout. Uses React Native's View component with flex styling to ensure proper map display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View } from 'react-native'\nimport Map from './Map.jsx'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Map dom={{ autoSize: true }} />\n      <StatusBar style=\"auto\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'stretch',\n    justifyContent: 'center',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring pgloader for Data Import into Supabase\nDESCRIPTION: Example configuration file for pgloader to specify the source data and target Supabase database. This file includes database connection details and performance optimization settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nLOAD DATABASE\n    FROM sourcedb://USER:PASSWORD@HOST/SOURCE_DB\n    INTO postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres\nALTER SCHEMA 'public' OWNER TO 'postgres';\nset wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Supabase Marketplace\nDESCRIPTION: Main documentation page detailing the Supabase Marketplace, integration points, and partnership requirements. Includes links to various integration methods and partnership program details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/supabase-marketplace.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: 'integrations'\ntitle: 'Supabase Marketplace'\ndescription: 'Integrations and Partners'\n---\n\nThe Supabase Marketplace brings together all the tools you need to extend your Supabase project. This includes:\n\n- [Experts](https://supabase.com/partners/experts) - partners to help you build and support your Supabase project.\n- [Integrations](https://supabase.com/partners/integrations) - extend your projects with external Auth, Caching, Hosting, and Low-code tools.\n\n## Build an integration\n\nSupabase provides several integration points:\n\n- The [Postgres connection](/docs/guides/database/connecting-to-postgres). Anything that works with Postgres also works with Supabase projects.\n- The [Project REST API](/docs/guides/api#rest-api-overview) & client libraries.\n- The [Project GraphQL API](/docs/guides/api#graphql-api-overview).\n- The [Platform API](/docs/reference/api).\n\n## List your integration\n\n[Apply to the Partners program](https://supabase.com/partners/integrations#become-a-partner) to list your integration in the Partners marketplace and in the Supabase docs.\n\nIntegrations are assessed on the following criteria:\n\n- **Business viability**\n  While we welcome everyone to built an integration, we only list companies that are deemed to be long-term viable. This includes an official business registration and bank account, meaningful revenue, or Venture Capital backing. We require this criteria to ensure the health of the marketplace.\n- **Compliance**\n  Integrations should not infringe on the Supabase brand/trademark. In short, you cannot use \"Supabase\" in the name. As the listing appears on the Supabase domain, we don't want to mislead developers into thinking that an integration is an official product.\n- **Service Level Agreements**\n  All listings are required to have their own Terms and Conditions, Privacy Policy, and Acceptable Use Policy, and the company must have resources to meet their SLAs.\n- **Maintainability**\n  All integrations are required to be maintained and functional with Supabase, and the company may be assessed on your ability to remain functional over a long time horizon.\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster-wide Logical Backup in PostgreSQL\nDESCRIPTION: Command to create a logical backup of an entire PostgreSQL cluster using pg_dumpall utility. Creates a comprehensive SQL file containing all databases and global objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-17-postgresql-physical-logical-backups.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npg_dumpall > file_name.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Main App in Dart with Supabase and Bloc for Flutter Chat\nDESCRIPTION: This code sets up the main application structure, initializes Supabase, and provides the ProfilesCubit to the widget tree using BlocProvider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:my_chat_app/cubits/profiles/profiles_cubit.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:my_chat_app/pages/splash_page.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await Supabase.initialize(\n    // TODO: Replace credentials with your own\n    url: 'supabase_url',\n    anonKey: 'supabase_anon_key',\n    authCallbackUrlHostname: 'login',\n  );\n\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return BlocProvider<ProfilesCubit>(\n      create: (context) => ProfilesCubit(),\n      child: MaterialApp(\n        title: 'SupaChat',\n        debugShowCheckedModeBanner: false,\n        theme: appTheme,\n        home: const SplashPage(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoded Supabase Anon Key JWT\nDESCRIPTION: This JavaScript code snippet shows the decoded payload of a Supabase `anon key` JWT. It contains claims about the role (`anon`), the issuer (`supabase`), the issued at time (`iat`), and the expiration time (`exp`). This token is used to access the Supabase API gateway.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"role\": \"anon\",\n  \"iss\": \"supabase\",\n  \"iat\": 1614205174,\n  \"exp\": 1929781174\n}\n```\n\n----------------------------------------\n\nTITLE: Checking pg_graphql Version with SQL\nDESCRIPTION: SQL query to check the current version of pg_graphql in your Supabase project to ensure you have UDF support (version 1.4+).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom pg_available_extensions\nwhere name = 'pg_graphql';\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Version Output\nDESCRIPTION: Sample output from running the version query, showing the PostgreSQL version number, architecture, compiler information, and bit version.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/which-version-of-postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPostgreSQL 15.1 on aarch64-unknown-linux-gnu, compiled by gcc (Ubuntu 10.3.0-1ubuntu1~20.04) 10.3.0, 64-bit\n```\n\n----------------------------------------\n\nTITLE: Starting Self-Hosted Supabase Stack with Docker Compose\nDESCRIPTION: This command starts the self-hosted Supabase stack using Docker Compose. It should be run after configuring the docker-compose.yml file and other necessary settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Interaction Methods in Dart\nDESCRIPTION: Defines methods for syncing canvas objects, handling pan gestures for drawing and moving objects, and updating the canvas state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass _CanvasPageState extends State<CanvasPage> {\n  // ...\n\n  Future<void> _syncCanvasObject(Offset cursorPosition) {\n    final myCursor = UserCursor(\n      position: cursorPosition,\n      id: _myId,\n    );\n    return _canvasChanel.sendBroadcastMessage(\n      event: Constants.broadcastEventName,\n      payload: {\n        'cursor': myCursor.toJson(),\n        if (_currentlyDrawingObjectId != null)\n          'object': _canvasObjects[_currentlyDrawingObjectId]?.toJson(),\n      },\n    );\n  }\n\n  void _onPanDown(DragDownDetails details) {\n    switch (_currentMode) {\n      case _DrawMode.pointer:\n        for (final canvasObject in _canvasObjects.values.toList().reversed) {\n          if (canvasObject.intersectsWith(details.globalPosition)) {\n            _currentlyDrawingObjectId = canvasObject.id;\n            break;\n          }\n        }\n        break;\n      case _DrawMode.circle:\n        final newObject = Circle.createNew(details.globalPosition);\n        _canvasObjects[newObject.id] = newObject;\n        _currentlyDrawingObjectId = newObject.id;\n        break;\n      case _DrawMode.rectangle:\n        final newObject = Rectangle.createNew(details.globalPosition);\n        _canvasObjects[newObject.id] = newObject;\n        _currentlyDrawingObjectId = newObject.id;\n        break;\n    }\n    _cursorPosition = details.globalPosition;\n    _panStartPoint = details.globalPosition;\n    setState(() {});\n  }\n\n  void _onPanUpdate(DragUpdateDetails details) {\n    switch (_currentMode) {\n      case _DrawMode.pointer:\n        if (_currentlyDrawingObjectId != null) {\n          _canvasObjects[_currentlyDrawingObjectId!] =\n              _canvasObjects[_currentlyDrawingObjectId!]!.move(details.delta);\n        }\n        break;\n      case _DrawMode.circle:\n        final currentlyDrawingCircle =\n            _canvasObjects[_currentlyDrawingObjectId!]! as Circle;\n        _canvasObjects[_currentlyDrawingObjectId!] =\n            currentlyDrawingCircle.copyWith(\n          center: (details.globalPosition + _panStartPoint!) / 2,\n          radius: min((details.globalPosition.dx - _panStartPoint!.dx).abs(),\n                  (details.globalPosition.dy - _panStartPoint!.dy).abs()) /\n              2,\n        );\n        break;\n      case _DrawMode.rectangle:\n        _canvasObjects[_currentlyDrawingObjectId!] =\n        // ... (code truncated)\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-In Redirect in Remix with Supabase Auth\nDESCRIPTION: This snippet shows how to implement server-side OAuth sign-in redirects using Supabase Auth in a Remix application. It uses the redirect function from @remix-run/node (or cloudflare/deno) to handle the redirection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/oauth-sign-in-isnt-redirecting-on-the-server-side-ShGMtr.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from \"@remix-run/node\"; // or cloudflare/deno\n...\nconst { data } = await supabase.auth.signInWithOAuth({\n  provider: 'github',\n})\n\nreturn redirect(data.url)\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Functions\nDESCRIPTION: Command to deploy the og-image-with-storage-cdn function to Supabase without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/og-image-with-storage-cdn/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy og-image-with-storage-cdn --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy Connection Pool\nDESCRIPTION: Example of configuring SQLAlchemy engine with specific pool size and overflow settings for optimal connection management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Example configurations\nengine = create_engine(\n    \"postgresql+psycopg2://me@localhost/mydb\", pool_size=20, max_overflow=15\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Postgres Datastore in ChatGPT Retrieval Plugin\nDESCRIPTION: Bash commands to export the necessary environment variables for using Postgres as the datastore in the ChatGPT Retrieval Plugin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=<open_ai_api_key>\nexport DATASTORE=postgres\nexport PG_HOST=<postgres_host_url>\nexport PG_PASSWORD=<postgres_password>\n```\n\n----------------------------------------\n\nTITLE: Querying ClickHouse from Postgres using Foreign Data Wrapper\nDESCRIPTION: This snippet demonstrates how to create a foreign table in Postgres to connect to a ClickHouse database and query it directly from Postgres.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-30-supabase-clickhouse-partnership.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Connect Postgres to your ClickHouse database:\ncreate foreign table user_analytics (\n  id bigint,\n  user_id bigint,\n  event text\n)\nserver clickhouse_server\noptions ( table 'UserAnalytics' );\n\n-- Query your ClickHouse instance from Postgres:\nselect * from user_analytics where user_id = 1;\n```\n\n----------------------------------------\n\nTITLE: Querying Arrays with Distance Ordering Using RUM Index\nDESCRIPTION: Example of a SELECT query that uses a RUM index on an array column, filtering with the && operator (array overlap) and ordering results by the distance between arrays using the <=> operator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM test_array WHERE i && '{1}' ORDER BY i `<=>` '{1}' ASC;\n```\n\n----------------------------------------\n\nTITLE: SQL Job Processing Function Definition\nDESCRIPTION: Creates a function to process queued SMS jobs based on priority and scheduling, with partial implementation shown.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function dequeue_and_run_jobs() returns void as $$\ndeclare\n    job record;\nbegin\n    for job in\n        select * from job_queue\n        where status = 'pending'\n          and scheduled_at <= now()\n        order by priority desc, created_at\n```\n\n----------------------------------------\n\nTITLE: Listing All pg_cron Jobs in PostgreSQL\nDESCRIPTION: These SQL queries list all scheduled cron jobs and count the total number of jobs. They query the cron.job table to return the schedule, jobname, and command for each job, which is useful for auditing and managing scheduled tasks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- All jobs\nselect schedule, jobname, command from cron.job;\n\n-- Count jobs\nselect COUNT(*) from cron.job;\n```\n\n----------------------------------------\n\nTITLE: Tokenizing SQL with libpg_query in Rust\nDESCRIPTION: Example of how libpg_query's scan API tokenizes a simple SQL statement, showing the structure of ScanToken objects returned.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nScanToken {\n        start: 0,\n        end: 6,\n        token: Select,\n        keyword_kind: ReservedKeyword,\n},\nScanToken {\n\t\t    start: 7,\n\t\t    end: 10,\n        token: Sconst,\n        keyword_kind: NoKeyword,\n},\nScanToken {\n        start: 10,\n        end: 11,\n        token: Ascii59,\n        keyword_kind: NoKeyword,\n}\n```\n\n----------------------------------------\n\nTITLE: Video Embedding Generation and Storage\nDESCRIPTION: Python function to process videos, generate embeddings using Mixpeek, and store them in Supabase Vector database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef seed():\n    # Initialize Supabase and Mixpeek clients\n    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)\n    mixpeek = Mixpeek(MIXPEEK_API_KEY)\n\n    # Create a table for storing video chunk embeddings\n    supabase.table(\"video_chunks\").create({\n        \"id\": \"text\",\n        \"start_time\": \"float8\",\n        \"end_time\": \"float8\",\n        \"embedding\": \"vector(768)\",\n        \"metadata\": \"jsonb\"\n    })\n\n    # Process and embed video\n    video_url = \"https://example.com/your_video.mp4\"\n    processed_chunks = mixpeek.tools.video.process(\n        video_source=video_url,\n        chunk_interval=1,  # 1 second intervals\n        resolution=[720, 1280]\n    )\n\n    for chunk in processed_chunks:\n        print(f\"Processing video chunk: {chunk['start_time']}\")\n\n        # Generate embedding using Mixpeek\n        embed_response = mixpeek.embed.video(\n            model_id=\"vuse-generic-v1\",\n            input=chunk['base64_chunk'],\n            input_type=\"base64\"\n        )\n\n        # Insert into Supabase\n        supabase.table(\"video_chunks\").insert({\n            \"id\": f\"chunk_{chunk['start_time']}\",\n            \"start_time\": chunk[\"start_time\"],\n            \"end_time\": chunk[\"end_time\"],\n            \"embedding\": embed_response['embedding'],\n            \"metadata\": {\"video_url\": video_url}\n        }).execute()\n\n    print(\"Video processed and embeddings inserted\")\n\n    # Create index for fast search performance\n    supabase.query(\"CREATE INDEX ON video_chunks USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100)\").execute()\n    print(\"Created index\")\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Menu Styles\nDESCRIPTION: Shows how to import the navigation menu trigger styles for use with Next.js Link component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { navigationMenuTriggerStyle } from '@/components/ui/navigation-menu'\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Component via CLI\nDESCRIPTION: Command to install the Radio Group component using the project's CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add radio-group\n```\n\n----------------------------------------\n\nTITLE: Checking Supabase Studio Service Status in Docker\nDESCRIPTION: Command to verify if the Supabase Studio service is running properly in Docker. This is useful for troubleshooting when the Dashboard is not accessible.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Data with Immutable Query Builder (Dart)\nDESCRIPTION: Demonstrates the change in the Supabase query builder from version 1 to version 2 regarding immutability. In v1, chained filters on a query object persisted across calls, while in v2, each filter is independent, requiring you to re-apply filters if needed. This example illustrates how to declare and reuse a query in both versions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// If you declare a query and chain filters on it\nfinal myQuery = supabase.from('my_table').select();\n\nfinal foo = await myQuery.eq('some_col', 'foo');\n\n// The `eq` filter above is applied in addition to the following filter\nfinal bar = await myQuery.eq('another_col', 'bar');\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Now you can declare a query and reuse it.\nfinal myQuery = supabase.from('my_table').select();\n\nfinal foo = await myQuery.eq('some_col', 'foo');\n\n// The `eq` filter above is not applied to the following result\nfinal bar = await myQuery.eq('another_col', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase Authentication\nDESCRIPTION: Environment variables required for setting up Supabase authentication. These include the Supabase URL and anonymous key that can be found in the Supabase dashboard or local instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/social-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Node Properties Example in Rust\nDESCRIPTION: Example showing properties extracted from different node types in the AST\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nSelectStmt: [Select],\nRangeVar: [],\nAConst: ['1']\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Next.js Image loader for Supabase Storage in TypeScript\nDESCRIPTION: This snippet defines a custom image loader for Next.js that works with Supabase Storage, allowing for easy image serving and transformations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from '@/env'\n\nexport default function supabaseLoader({ src, width, quality }) {\n  return `${env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/${src}?width=${width}&quality=${quality || 75}`\n}\n```\n\n----------------------------------------\n\nTITLE: Including Session Cookie in Fetch Request to API Endpoint (TypeScript)\nDESCRIPTION: This code snippet shows how to include the session cookie in a fetch request to an API endpoint. It demonstrates passing the cookie header from the current request to the new fetch request, ensuring the API endpoint has access to the session information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fetch-requests-to-api-endpoints-arent-showing-the-session-UbUwRs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await fetch('http://localhost:3000/contact', {\n  headers: {\n    cookie: headers().get('cookie') as string,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering TOC Component with Single Highlight in JSX\nDESCRIPTION: This snippet shows how to use the TOC component with the 'single' prop set to true, which highlights only one element of the TOC at a time based on viewport visibility. It uses a ComponentPreview to display the implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/toc.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"toc-single-demo\" description=\"\" peekCode wide />\n```\n\n----------------------------------------\n\nTITLE: Rendering Privacy Settings Component in JSX\nDESCRIPTION: This code snippet renders a Privacy Settings component with an underline style, allowing users to manage their preferences for cookieless analytics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy-240804.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PrivacySettings className=\"underline\">Manage preferences</PrivacySettings>\n```\n\n----------------------------------------\n\nTITLE: Viewing Cron Job Run Details in Postgres\nDESCRIPTION: This SQL query retrieves the execution details of cron jobs from the cron.job_run_details table in the Postgres database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * from cron.job_run_details;\n```\n\n----------------------------------------\n\nTITLE: Querying Computed Relationships with supabase-js\nDESCRIPTION: Demonstrates how to query computed relationships using supabase-js, showing both one-to-many and many-to-one relationship queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('scores')\n  .select('lvl_name, player(name)')\n  .eq('lvl_name', \"Grand Prix 1\")\n  .single()\n\nconsole.log(data)\n\nconst { data, error } = await supabase\n  .from('players')\n  .select('name,scores(lvl_name, total)')\n  .eq('id', 1)\n  .single()\n\nconsole.log(data)\n```\n\n----------------------------------------\n\nTITLE: Destructive Alert Dialog Implementation\nDESCRIPTION: Text confirm dialog with destructive styling for critical actions like deletion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/text-confirm-dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"text-confirm-dialog-with-destructive-alert\"\n  description=\"An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Cards with React/JSX\nDESCRIPTION: Renders a grid of resource cards using React components and map function. Each card includes a title, description and link using GlassPanel component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n      {\n        title: 'Features',\n        hasLightIcon: true,\n        href: '/guides/getting-started/features',\n        description: 'A non-exhaustive list of features that Supabase provides for every project.'\n      },\n      {\n        title: 'Architecture',\n        hasLightIcon: true,\n        href: '/guides/getting-started/architecture',\n        description: \"An overview of Supabase's architecture and product principles.\",\n      },\n      {\n        title: 'Local Development',\n        hasLightIcon: true,\n        href: '/guides/cli/getting-started',\n        description: 'Use the Supabase CLI to develop locally and collaborate between teams.',\n      }\n    ].map((resource) => {\n      return (\n        <Link\n          href={`${resource.href}`}\n          key={resource.title}\n          className={'col-span-12 md:col-span-4'}\n          passHref\n        >\n          <GlassPanel {...resource} background={false} showIconBg={true}>\n            {resource.description}\n          </GlassPanel>\n        </Link>\n      )\n})}\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Page Image - React\nDESCRIPTION: This snippet renders an image component that showcases the usage page for Monthly Active Third-Party Users. It is designed to adapt for both light and dark theme appearances and includes essential accessibility features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-third-party.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Image\n  alt=\"Usage page Monthly Active SSO Users section\"\n  src={{\n    light: '/docs/img/guides/platform/usage-mau-third-party--light.png',\n    dark: '/docs/img/guides/platform/usage-mau-third-party--dark.png',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing RLS USING Clause in SQL Queries\nDESCRIPTION: Illustrates how the USING clause in RLS appends additional conditions to the WHERE statement of a query. This example shows how RLS modifies a SELECT query to include user authentication checks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Your Using condition\nUSING (\n  (select auth.uid()) = user_id\n);\n\n-- Your query without RLS:\nSELECT * FROM some_table\nWHERE id = 5 OR id = 6;\n\n-- Your query after RLS\nSELECT * FROM some_table\nWHERE\n  (id = 5 OR id = 6)\n    AND\n  (select auth.uid()) = user_id) -- <--- added by the USING clause;\n```\n\n----------------------------------------\n\nTITLE: Rendering Permission Icons in React\nDESCRIPTION: Uses React components to display permission status with check and x icons of different sizes and colors\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/access-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<IconCheck size={14} color=\"#3FCF8E\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<IconX size={14} />\n```\n\n----------------------------------------\n\nTITLE: Apple Sign In Event Listener Implementation\nDESCRIPTION: Alternative implementation using event listeners to handle Apple authentication success events with Supabase integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('AppleIDSignInOnSuccess', async (event) => {\n  await supabase.auth.signInWithIdToken({\n    provider: 'apple',\n    token: event.data.id_token,\n    nonce: '<value used in appleid-signin-nonce meta tag>',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Trigger Function for Broadcast in SQL\nDESCRIPTION: This SQL code defines a function that broadcasts changes to a specific topic when a record is created, updated, or deleted in a table. It utilizes Postgres's native trigger variables and the `realtime.broadcast_changes()` function provided by Supabase Realtime.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.your_table_changes()\nreturns trigger\nlanguage plpgsql\nas $$\nbegin\n  perform realtime.broadcast_changes(\n    'topic:' || coalesce(NEW.topic, OLD.topic) ::text, -- topic - the topic to which we're broadcasting\n    TG_OP,                                             -- event - the event that triggered the function\n    TG_OP,                                             -- operation - the operation that triggered the function\n    TG_TABLE_NAME,                                     -- table - the table that caused the trigger\n    TG_TABLE_SCHEMA,                                   -- schema - the schema of the table that caused the trigger\n    NEW,                                               -- new record - the record after the change\n    OLD                                                -- old record - the record before the change\n  );\n  return null;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JS Pre-release Package\nDESCRIPTION: Command to install the pre-release version of the Supabase JavaScript client library, which includes the new interface announced during Launch Week 5.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-10-launch-week-5-hackathon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js@rc\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: HTML code block for embedding a Twitter tweet announcing Supabase's early experience with Logflare, including proper styling and formatting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-02-supabase-acquires-logflare.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <blockquote className=\"twitter-tweet\" data-theme=\"dark\">\n    <p lang=\"en\" dir=\"ltr\">\n      Really impressed with\n      <a href=\"https://twitter.com/logflare_logs?ref_src=twsrc%5Etfw\">@logflare_logs</a>. We&#39;ve been\n      on the front page of\n      <a href=\"https://twitter.com/hashtag/hackernews?src=hash&amp;ref_src=twsrc%5Etfw\">\n        #hackernews\n      </a>\n      for 24 hours anticipating the HN hug of death. Looks like we made it through OK and Logflare has\n      been ingesting everything without breaking a sweat <a href=\"https://t.co/RWKHIgmWh6\">\n        https://t.co/RWKHIgmWh6\n      </a> <a href=\"https://t.co/dQ2xqFTdco\">pic.twitter.com/dQ2xqFTdco</a>\n    </p>\n    &mdash; Supabase (@supabase) <a href=\"https://twitter.com/supabase/status/1265922290237071361?ref_src=twsrc%5Etfw\">May 28, 2020</a>\n  </blockquote>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Route Handler in JavaScript\nDESCRIPTION: This JavaScript snippet provides a method to set up a server-side route handler for user logout in a Next.js app using Supabase. It utilizes the Supabase client to sign the user out, then redirects them to the login page using a Next.js response. Required packages are @supabase/auth-helpers-nextjs and next/headers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nexport async function POST(request) {\n  const requestUrl = new URL(request.url)\n  const cookieStore = cookies()\n  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })\n\n  await supabase.auth.signOut()\n\n  return NextResponse.redirect(`${requestUrl.origin}/login`, {\n    status: 301,\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Postgres Changes by Creating Publication in SQL\nDESCRIPTION: This SQL code block demonstrates how to create a publication named `supabase_realtime` and add a table to it, which is necessary for enabling Postgres Changes. It first removes the existing publication if it exists, recreates it without any tables, commits the changes, and then adds the 'messages' table to the publication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\n\n-- remove the supabase_realtime publication\ndrop\n  publication if exists supabase_realtime;\n\n-- re-create the supabase_realtime publication with no tables\ncreate publication supabase_realtime;\n\ncommit;\n\n-- add a table called 'messages' to the publication\n-- (update this to match your tables)\nalter\n  publication supabase_realtime add table messages;\n```\n\n----------------------------------------\n\nTITLE: Activating and Deactivating a Cron Job using SQL in Supabase\nDESCRIPTION: These SQL snippets demonstrate how to activate or deactivate an existing cron job in Supabase using the cron.alter_job function with the active parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Activate Job\nselect cron.alter_job(\n  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),\n  active := true\n);\n\n-- Deactivate Job\nselect cron.alter_job(\n  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),\n  active := false\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Command Components in React\nDESCRIPTION: Import statement for bringing in all Command-related components into a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/command.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from '@/components/ui/command'\n```\n\n----------------------------------------\n\nTITLE: Query Type Data Access\nDESCRIPTION: SQL query demonstrating how to access query type and formatting data from edge logs by unnesting metadata, request, and sb fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  method,\n  url,\n  auth_users\nfrom\n  edge_logs\n-- Unpack 'metadata' field\ncross join unnest(metadata) AS metadata\n-- unpack 'request' from 'metadata'\ncross join unnest(request) AS request;\n-- unpack 'sb' from 'request'\ncross join unnest(sb) AS sb;\n```\n\n----------------------------------------\n\nTITLE: Importing Supabase JS in Deno\nDESCRIPTION: TypeScript import statement to use the Supabase JavaScript library in the Deno runtime via JSR (JavaScript Registry).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\n```\n\n----------------------------------------\n\nTITLE: Authentication with Password in Supabase.js v2\nDESCRIPTION: Example of signing in with email and password using the new signInWithPassword() method in Supabase.js v2.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst { data } = await supabase.auth.signInWithPassword({\n  email: 'hello@example',\n  password: 'pass',\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Retry-able Error Response in HTTP\nDESCRIPTION: This code snippet is used to return a retry-able error response in a Supabase HTTP hook by sending a status code of 429 and a 'retry-after' header. Developed using JavaScript, it requires a basic understanding of HTTP responses and JavaScript syntax. It takes an error object as input and outputs an HTTP response with error details. Limitations include the need for proper content-type specification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nreturn new Response(\n  JSON.stringify({\n    error: `Failed to process the request: ${error}`,\n  }),\n  { status: 429, headers: { 'Content-Type': 'application/json', 'retry-after': 'true' } }\n)\n```\n\n----------------------------------------\n\nTITLE: Listening to DELETE Events in Swift with Supabase Realtime\nDESCRIPTION: Uses Swift to create a channel that listens for DELETE events in the public schema of a Supabase database. The code specifies DeleteAction.self as the event type and processes changes using an async iterator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"schema-db-changes\")\n\nlet changes = await myChannel.postgresChange(DeleteAction.self, schema: \"public\")\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.oldRecord)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebAssembly Module in Rust\nDESCRIPTION: This Rust code defines a WebAssembly module with an exposed 'add' function that takes two 32-bit integers and returns their sum. It uses wasm-bindgen for JavaScript interoperability.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/wasm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Plasmic Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Plasmic's visual builder integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/nFWUCNbCFhI\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection String Setup\nDESCRIPTION: Constructing MongoDB connection URL for FerretDB access\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_URL=mongodb://$DB_USER.$SUPA_PROJECT_REF:$DB_PASSWORD@127.0.0.1:27017/ferretdb?authMechanism=PLAIN\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependencies in build.gradle\nDESCRIPTION: Specifies the required dependencies for Supabase integration including Postgrest, Storage, Auth modules, and Ktor client libraries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation \"io.github.jan-tennert.supabase:postgrest-kt:$supabase_version\"\nimplementation \"io.github.jan-tennert.supabase:storage-kt:$supabase_version\"\nimplementation \"io.github.jan-tennert.supabase:auth-kt:$supabase_version\"\nimplementation \"io.ktor:ktor-client-android:$ktor_version\"\nimplementation \"io.ktor:ktor-client-core:$ktor_version\"\nimplementation \"io.ktor:ktor-utils:$ktor_version\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Sidebar with React State\nDESCRIPTION: Demonstrates how to create a controlled sidebar component using React state to manage the open/closed state of the sidebar.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <SidebarProvider open={open} onOpenChange={setOpen}>\n      <Sidebar />\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Python Secure Random ID Generation\nDESCRIPTION: Example of generating secure random IDs using Python's secrets module\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom secrets import randbelow\n# ...\ndef create_user():\n    \"\"\"\n    Add new user to the database (using secure random numbers)\n    \"\"\"\n    user_id = randbelow(1, MAX_RANDOM_USER_ID)\n    user = User(id=user_id, email=\"new@example.com\", name=\"new user\")\n    db.save(user)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with OrioleDB Storage Engine\nDESCRIPTION: Example of creating a blog post table using OrioleDB's default storage engine with primary key and timestamp fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table blog_post (\n  id int8 not null,\n  title text not null,\n  body text not null,\n  author text not null,\n  published_at timestamptz not null default CURRENT_TIMESTAMP,\n  views bigint not null,\n  primary key (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Failed Verification Attempts Table\nDESCRIPTION: SQL script to create a table for tracking failed MFA verification attempts with timestamps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.mfa_failed_verification_attempts (\n  user_id uuid not null,\n  factor_id uuid not null,\n  last_failed_at timestamp not null default now(),\n  primary key (user_id, factor_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Supabase\nDESCRIPTION: Creating a .env file to store Supabase URL and anonymous key for connecting to the Supabase backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SUPABASE_URL=YOUR_SUPABASE_URL\nVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SSO in Supabase using JavaScript\nDESCRIPTION: This code snippet demonstrates how to sign in a user with SSO authentication in Supabase. It initiates the SSO authentication flow by providing a company domain and redirects the user to the identity provider's authentication page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-sso.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.signInWithSSO({\n  domain: 'company.com'\n})\n\nif (data?.url) {\n  // redirect User-1 to the identity provider's authentication flow\n  window.location.href = data.url\n}\n```\n\n----------------------------------------\n\nTITLE: Server Hooks Setup for SvelteKit Auth - v0.7.x\nDESCRIPTION: Configuration of server-side hooks for Supabase authentication in SvelteKit v0.7.x. Includes basic and sequence-based setup options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// make sure the supabase instance is initialized on the server\nimport '$lib/db'\nimport { dev } from '$app/environment'\nimport { auth } from '@supabase/auth-helpers-sveltekit/server'\n\nexport const handle = auth()\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Data Model for Flutter Chat App\nDESCRIPTION: This snippet defines a Profile class that represents a user profile in the chat application. It includes properties for user ID, username, and creation timestamp, with a factory constructor to create instances from map data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Profile {\n  Profile({\n    required this.id,\n    required this.username,\n    required this.createdAt,\n  });\n\n  /// User ID of the profile\n  final String id;\n\n  /// Username of the profile\n  final String username;\n\n  /// Date and time when the profile was created\n  final DateTime createdAt;\n\n  Profile.fromMap(Map<String, dynamic> map)\n      : id = map['id'],\n        username = map['username'],\n        createdAt = DateTime.parse(map['created_at']);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private Route Layout in SvelteKit\nDESCRIPTION: Empty TypeScript file to ensure protection of all routes in the private directory by triggering hooks.server.ts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This file is necessary to ensure protection of all routes in the `private`\n * directory. It makes the routes in this directory _dynamic_ routes, which\n * send a server request, and thus trigger `hooks.server.ts`.\n **/\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet shows how to embed a YouTube video within a Markdown document using HTML. It creates a responsive container for the video iframe with specific attributes for formatting and permissions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-09-10-supabase-beta-august-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/YYpTh2DAvho\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Signing Out - Flutter\nDESCRIPTION: This Flutter snippet demonstrates how to sign out users from the Instagram account using the Supabase client. The `signOut()` method is called to remove the user from the session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\\n  await supabase.auth.signOut();\\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Filtering with Regular Expressions\nDESCRIPTION: Using the (?i) operator to perform case-insensitive matching in regular expressions. This pattern will match 'connection' regardless of capitalization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- find all event_messages with the word \"connection\"\nregexp_contains(event_message, '(?i)COnnecTion')\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SSR Package\nDESCRIPTION: Command to install the Supabase SSR package, which configures Supabase to use cookies for authentication in server-side rendered applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/ssr @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Initializing React Layout Component with Meta Data\nDESCRIPTION: Sets up a React page layout with metadata for the SupaSquad program page, including title and description configuration. Uses custom Layout and SectionContainer components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/open-source/contributing/supasquad.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '~/layouts/Layout'\nimport SectionContainer from '~/components/Layouts/SectionContainer'\n\nexport const meta = {\n  title: 'SupaSquad | Supabase',\n  description: 'Supabase Advocate program',\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out Users in Supabase Kotlin\nDESCRIPTION: In this Kotlin snippet, the `signOut` method is used to log users out of a Supabase-authenticated session. Essential for managing authentication token lifecycles within a Kotlin-based application using Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Menu Implementation in React\nDESCRIPTION: Example of a basic dropdown menu implementation with a trigger, content, label, separator, and multiple menu items for account-related actions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>Profile</DropdownMenuItem>\n    <DropdownMenuItem>Billing</DropdownMenuItem>\n    <DropdownMenuItem>Team</DropdownMenuItem>\n    <DropdownMenuItem>Subscription</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\n```\n\n----------------------------------------\n\nTITLE: Installing Tabs Component Dependencies Manually\nDESCRIPTION: This command installs the necessary dependency for the Tabs component when setting up manually.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tabs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-tabs\n```\n\n----------------------------------------\n\nTITLE: Supabase Auth Error Codes Table\nDESCRIPTION: Markdown table containing error codes and their descriptions used in Supabase Authentication system. Each code represents a specific error condition that can occur during authentication flows.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/auth_error_codes_table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Code                                    | Description                                                                                                                                                                                                                                                                                                   |\n| --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `anonymous_provider_disabled`           | Anonymous sign-ins are disabled.                                                                                                                                                                                                                                                                              |\n| `bad_code_verifier`                     | Returned from the PKCE flow where the provided code verifier does not match the expected one. Indicates a bug in the implementation of the client library.                                                                                                                                                    |\n| `bad_json`                              | Usually used when the HTTP body of the request is not valid JSON.                                                                                                                                                                                                                                             |\n| `bad_jwt`                               | JWT sent in the `Authorization` header is not valid.                                                                                                                                                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Setting Role-specific Transaction Isolation Level\nDESCRIPTION: SQL commands to set a specific transaction isolation level for a role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nalter role service_role set default_transaction_isolation = 'serializable';\n\nNOTIFY pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Importing Nested MDX Partial in React JSX\nDESCRIPTION: This code demonstrates how to import a nested MDX partial file using the $Partial component with the path attribute. It disables prettier formatting for this import using a JSX comment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/_fixtures/nested1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* prettier-ignore */}\n<$Partial path='/_fixtures/nested2.mdx' />\n```\n\n----------------------------------------\n\nTITLE: Realtime Stream Method - Dart Supabase\nDESCRIPTION: Demonstrates changes in realtime streaming method, including simplified filtering and primary key specification\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.from('my_table:id=eq.120')\n  .stream(['id'])\n  .listen();\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.from('my_table')\n  .stream(primaryKey: ['id'])\n  .eq('id', '120')\n  .listen();\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally for OAuth Integration\nDESCRIPTION: Command to serve the connect-supabase function locally without JWT verification, using environment variables from a local file. This allows developers to test the OAuth connection flow on their local machine.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/connect-supabase/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve connect-supabase --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with JSX/React\nDESCRIPTION: Code snippet for embedding a YouTube video using an iframe in a React/JSX component. The video is embedded with responsive styling, borders, and standard YouTube parameters for security and functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-08-12-supabase-beta-july-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/Vj5fPA-vjfw\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Permission to Android Manifest\nDESCRIPTION: XML configuration to add the INTERNET permission to the Android manifest file, which is required for the app to make network requests to the Supabase API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n...\n<uses-permission android:name=\"android.permission.INTERNET\" />\n...\n```\n\n----------------------------------------\n\nTITLE: Good SVG Example for Icons\nDESCRIPTION: This SVG snippet serves as a correct example for structuring SVG icons, ensuring all styling attributes are applied to the parent SVG element to allow for better manipulation of icon appearance.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/icons/README.md#2025-04-21_snippet_3\n\nLANGUAGE: svg\nCODE:\n```\n<svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    stroke-width=\"1\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    >\n        <path d=\"M-20439 -11141C-20439...\" />\n        <path d=\"M-20437 -11142H12131V-11144H-20437V-11142ZM12132 ....\"/>\n        <path d=\"M22.8437 8.69499L19.5369 12.0018L22.8438 15.3086...\" />\n        <rect x=\"0.5\" y=\"14.0625\" width=\"16\" height=\"8\" rx=\"1\" />\n        <rect x=\"0.5\" y=\"1.9375\" width=\"16\" height=\"8\" rx=\"1\" />\n</svg>\n\n```\n\n----------------------------------------\n\nTITLE: Storing Messages from Realtime Chat in TypeScript\nDESCRIPTION: This snippet details how to handle and store chat messages from the `RealtimeChat` component. It uses the `onMessage` callback prop to process incoming messages, with the `storeMessages` function handling the persistence of these messages in a database. This approach ensures message synchronization and persistence.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\nimport { storeMessages } from '@/lib/store-messages'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n  const handleMessage = (messages: ChatMessage[]) => {\n    // Store messages in your database\n    await storeMessages(messages)\n  }\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" onMessage={handleMessage} />\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Supabase Data: Renaming 'is' and 'in' Filters (Dart)\nDESCRIPTION: Illustrates the renaming of the `is` and `in` filter functions in the Supabase client library due to conflicts with Dart's reserved keywords. Version 1 used `is_` and `in_`, while version 2 introduces `isFilter` and `inFilter` for improved clarity and to avoid confusion with the underscore naming convention.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase\n  .from('users')\n  .select()\n  .is_('status', null);\n\nfinal data = await supabase\n  .from('users')\n  .select()\n  .in_('status', ['ONLINE', 'OFFLINE']);\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase\n  .from('users')\n  .select()\n  .isFilter('status', null);\n\nfinal data = await supabase\n  .from('users')\n  .select()\n  .inFilter('status', ['ONLINE', 'OFFLINE']);\n```\n\n----------------------------------------\n\nTITLE: Getting User Metadata - Swift\nDESCRIPTION: Uses Swift to access the current user's metadata from Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet user = try await supabase.auth.user()\nlet metadata = user.userMetadata\n```\n\n----------------------------------------\n\nTITLE: Logflare Endpoint JSON Response Structure\nDESCRIPTION: Example JSON response from a Logflare Endpoint query, showing the structure of returned data including count and GitHub username for top contributors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-10-supabase-logs-self-hosted.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    { \"count\": 23404, \"gh_user\": \"vercel[bot]\" },\n    { \"count\": 10005, \"gh_user\": \"joshenlim\" },\n    { \"count\": 7026, \"gh_user\": \"MildTomato\" },\n    { \"count\": 6405, \"gh_user\": \"fsansalvadore\" },\n    { \"count\": 5195, \"gh_user\": \"saltcod\" },\n    { \"count\": 3454, \"gh_user\": \"alaister\" },\n    { \"count\": 2691, \"gh_user\": \"kevcodez\" },\n    { \"count\": 2117, \"gh_user\": \"gregnr\" },\n    { \"count\": 1769, \"gh_user\": \"Ziinc\" },\n    { \"count\": 1749, \"gh_user\": \"chasers\" },\n    { \"count\": 1430, \"gh_user\": \"Isaiah-Hamilton\" }\n    //...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for Updating Supabase Types\nDESCRIPTION: Defines a GitHub Action workflow to automatically update Supabase types on a schedule.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nname: Update database types\n\non:\n  schedule:\n    # sets the action to run daily. You can modify this to run the action more or less frequently\n    - cron: '0 0 * * *'\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n      PROJECT_REF: <your-project-id>\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 22\n      - run: npm run update-types\n      - name: check for file changes\n        id: git_status\n        run: |\n          echo \"status=$(git status -s)\" >> $GITHUB_OUTPUT\n      - name: Commit files\n        if: ${{contains(steps.git_status.outputs.status, ' ')}}\n        run: |\n          git add database.types.ts\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git commit -m \"Update database types\" -a\n      - name: Push changes\n        if: ${{contains(steps.git_status.outputs.status, ' ')}}\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Not Equal To Filter Implementation\nDESCRIPTION: Shows how to listen for database changes when a column does not equal a specific value using the 'neq' filter. Uses Postgres's != operator to filter message inserts where body is not equal to 'bye'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages',\n      filter: 'body=neq.bye',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        table: 'messages',\n        filter: PostgresChangeFilter(\n          type: PostgresChangeFilterType.neq,\n          column: 'body',\n          value: 'bye',\n        ),\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  UpdateAction.self,\n  schema: \"public\",\n  table: \"messages\",\n  filter: .neq(\"body\", value: \"hey\")\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.realtime.createChannel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"messages\"\n    filter = \"body=neq.bye\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nsupabase.realtime.connect()\nmyChannel.join()\n```\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"INSERT\",\n  schema=\"public\",\n  table=\"messages\",\n  filter=\"body=neq.bye\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Adding SidebarGroupAction to SidebarGroup in React\nDESCRIPTION: This snippet demonstrates how to add an action button to the SidebarGroup using the SidebarGroupAction component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel asChild>Projects</SidebarGroupLabel>\n      <SidebarGroupAction title=\"Add Project\">\n        <Plus /> <span className=\"sr-only\">Add Project</span>\n      </SidebarGroupAction>\n      <SidebarGroupContent />\n    </SidebarGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OAuth Integration to Supabase Edge Functions\nDESCRIPTION: Commands to deploy the connect-supabase function to Supabase Edge Functions and set the required environment secrets. This allows the OAuth integration to run in production.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/connect-supabase/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy connect-supabase --no-verify-jwt\nsupabase secrets set --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Run Tests in UI Mode\nDESCRIPTION: Command to run Playwright tests in UI mode, enabling visualization of the test process and results. Helpful for debugging and understanding test flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/tests/studio-tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test -- --ui\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Database Secret\nDESCRIPTION: Command to set the Supabase database URL as a secret in Fly.io deployment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set DATABASE_URL=$DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Job for Supabase\nDESCRIPTION: YAML configuration example for setting up a Prometheus scrape job to collect metrics from a Supabase project. It includes the necessary parameters like metrics_path, authentication details, and target specification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/metrics.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: \"MySupabaseJob\"\n    metrics_path: \"/customer/v1/privileged/metrics\"\n    scheme: https\n    basic_auth:\n      username: \"service_role\"\n      password: \"<your service_role JWT>\"\n    static_configs:\n      - targets: [\n        \"<your Supabase Project ID>.supabase.co:443\"\n          ]\n        labels:\n          group: \"MyGroupLabel\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube video in React component\nDESCRIPTION: React component for embedding a YouTube video with specific attributes and styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-05-03-supabase-beta-april-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/uWJmUTCFdak\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Roboflow Inference Server with pip\nDESCRIPTION: Command to install Roboflow Inference and start a local inference server that will be available at http://localhost:9001. Requires Docker to be installed on the machine.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install inference inference-cli inference-sdk && inference server start\n```\n\n----------------------------------------\n\nTITLE: Testing Edge Function\nDESCRIPTION: Shell commands to serve the function locally and test it using cURL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions serve\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST 'http://localhost:54321/functions/v1/embed' \\\n  --header 'Authorization: Bearer ANON_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '{ \"input\": \"hello world\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase connection details in JSON format\nDESCRIPTION: This JSON snippet configures the connection parameters required to connect to a Supabase Postgres database. It includes the database host, password, username, database name, and port. This configuration is used by the migration tool to establish a connection with the Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"database.server.com\",\n  \"password\": \"secretpassword\",\n  \"user\": \"postgres\",\n  \"database\": \"postgres\",\n  \"port\": 5432\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Materialized View\nDESCRIPTION: Creates a materialized view that stores the query results physically for faster subsequent access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate materialized view transcripts as\n  select\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\n  from\n    grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Playlist with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube playlist showcasing partner videos. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/videoseries?list=PL5S4mPUpp4OtKHdiuNkt8GewVo3dc-oHW\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Next.js App with Supabase Integration\nDESCRIPTION: Command for creating a new Next.js application with pre-configured Supabase integration using create-next-app. The template includes server-side cookie-based Auth, TypeScript, and Tailwind CSS as a perfect starting point.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-10-using-supabase-with-vercel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Using signOut Method in Next.js with Supabase\nDESCRIPTION: This snippet shows how to use the signOut method from supabase-js v2 in a Next.js component. It demonstrates logging out a user and redirecting to the home page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n  onClick={async () => {\n    await supabaseClient.auth.signOut()\n    router.push('/')\n  }}\n>\n  Logout\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Application Dependencies\nDESCRIPTION: Command to install project dependencies defined in the Poetry configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/aws_bedrock_image_search/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JS Package\nDESCRIPTION: Command to install the Supabase JavaScript client library using npm. This package provides a simple interface to interact with Supabase from JavaScript applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Making a Supabase API request with Service Role Key\nDESCRIPTION: This bash code snippet demonstrates how to make a request to a Supabase database using the `service role key`.  The `service role key` must be passed as both the `apikey` and the `Authorization` header. The authorization header has a Bearer token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"$YOUR_PROJECT_URL/rest/v1/colors?select=name\" \\\n -H \"apikey: $YOUR_SERVICE_ROLE_KEY\" \\\n -H \"authorization: Bearer $YOUR_SERVICE_ROLE_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access Settings\nDESCRIPTION: This configuration allows all web crawlers unrestricted access to the entire website. No directories or pages are blocked from being crawled or indexed.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/app/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Getting Logged-in User in v0 vs v1\nDESCRIPTION: Demonstrates the change in how to get the logged-in user. In v1, a property is used instead of a method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal user = supabase.auth.user();\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal User? user = supabase.auth.currentUser;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Replication Lag Metric\nDESCRIPTION: This metric, `physical_replication_lag_physical_replica_lag_seconds`, can be ingested into your own environment to monitor replication lag and set alarms accordingly.  Ingesting your project's metrics allows you to keep track of replication lag and set alarms accordingly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/read-replicas.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nphysical_replication_lag_physical_replica_lag_seconds\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML/JSX\nDESCRIPTION: React/JSX code snippet for embedding a YouTube video player with specific configurations and styling classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-02-supabase-alpha-october-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/1gNDMMsUPI0\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships in Python\nDESCRIPTION: Python example showing how to query orchestral sections with their related instruments using Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.from_('orchestral_sections').select('id, name, instruments(id, name)').execute()\n```\n\n----------------------------------------\n\nTITLE: Creating SignUpScreen Component in Jetpack Compose\nDESCRIPTION: This code defines the 'SignUpScreen' composable function that provides a UI for user signup. It incorporates standard UI elements within a Scaffold, handling navigation with NavController, and uses SignUpViewModel for state management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun SignUpScreen(\n    modifier: Modifier = Modifier,\n    navController: NavController,\n    viewModel: SignUpViewModel = hiltViewModel()\n) {\n    val snackBarHostState = remember { SnackbarHostState() }\n    val coroutineScope = rememberCoroutineScope()\n    Scaffold(\n        snackbarHost = { androidx.compose.material.SnackbarHost(snackBarHostState) },\n        topBar = {\n            TopAppBar(\n                navigationIcon = {\n                    IconButton(onClick = {\n                        navController.navigateUp()\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = null,\n                            tint = MaterialTheme.colorScheme.onPrimary\n                        )\n                    }\n                },\n                backgroundColor = MaterialTheme.colorScheme.primary,\n                title = {\n                    Text(\n                        text = \"Sign Up\",\n                        color = MaterialTheme.colorScheme.onPrimary,\n                    )\n                },\n            )\n        }\n    ) { paddingValues ->\n```\n\n----------------------------------------\n\nTITLE: Starting Local Supabase Database\nDESCRIPTION: Starts the local Supabase database to apply migrations and validate the schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Creating a Function with Parameters and Fully Qualified Object Names\nDESCRIPTION: A PostgreSQL function that calculates the total price for an order using fully qualified object names and parameter handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function public.calculate_total_price(order_id bigint)\nreturns numeric\nlanguage plpgsql\nsecurity invoker\nset search_path = ''\nas $$\ndeclare\n  total numeric;\nbegin\n  select sum(price * quantity)\n  into total\n  from public.order_items\n  where order_id = calculate_total_price.order_id;\n\n  return total;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for CodeSandbox Projects Beta\nDESCRIPTION: Embeds a YouTube video showcasing the CodeSandbox Projects Beta integration with Supabase, using an iframe element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-community-day.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/cTNUjAQ06AE?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Commands to install Supabase client library and additional Angular packages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\nnpm install ngx-spinner ngx-gravatar\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from PostgreSQL Table with Granted Privileges\nDESCRIPTION: This snippet demonstrates how a role (senior_dev) can now select data from a table after being granted the select privilege.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> select * from public.apps;\n┌────┬──────────┐\n│ id │   name   │\n├────┼──────────┤\n│  1 │ next app │\n└────┴──────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Querying Timeout Events in Logs\nDESCRIPTION: Complex query to identify timed-out events and long-running queries using the Logs Explorer.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(postgres_logs.timestamp as datetime) as timestamp,\n  event_message,\n  parsed.error_severity,\n  parsed.user_name,\n  parsed.query,\n  parsed.detail,\n  parsed.hint,\n  parsed.sql_state_code,\n  parsed.backend_type\nfrom\n  postgres_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(metadata.parsed) as parsed\nwhere\n  regexp_contains(event_message, 'duration|statement timeout')\n  -- (OPTIONAL) MODIFY OR REMOVE\n  and parsed.user_name = 'authenticator' -- <--------CHANGE\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Stop Tracking Presence in Kotlin\nDESCRIPTION: This snippet illustrates how to stop presence tracking in Kotlin by using the untrack method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun untrackPresence() {\n\troomOne.untrack()\n}\n\nuntrackPresence()\n```\n\n----------------------------------------\n\nTITLE: Unlinking Identity with Python\nDESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Python client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.get_user_identities()\n\ngoogle_identity = next((identity for identity in response.identities if identity.provider == 'google'), None)\n\nif google_identity:\n    response = supabase.auth.unlink_identity(google_identity.identity_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Functions with TOML Configuration\nDESCRIPTION: A config.toml example showing how to configure individual Supabase Edge Functions. This example disables JWT verification for a function named 'hello-world'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/github-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[functions.hello-world]\nverify_jwt = false\n```\n\n----------------------------------------\n\nTITLE: Signing In with Email and Password in v0 vs v1\nDESCRIPTION: Shows the change in the method for signing in with email and password. In v1, a more explicit method signature is used for better type hinting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signIn(email: email, password: password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithPassword(email: email, password: password);\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Domain Billing Example in Markdown\nDESCRIPTION: A markdown table showing an example of how custom domain usage is billed over a specific time period. It illustrates when a custom domain is activated and how hours are charged.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/custom-domains.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Time Window                                 | Custom Domain Activated | Hours Billed | Description         |\n| ------------------------------------------- | ----------------------- | ------------ | ------------------- |\n| January 1, 00:00 AM - January 10, 4:00 PM   | No                      | 0            |                     |\n| January 10, 04:00 PM - January 10, 4:30 PM  | No                      | 0            |                     |\n| January 10, 04:30 PM - January 10, 5:00 PM  | Yes                     | 1            | full hour is billed |\n| January 10, 05:00 PM - January 31, 23:59 PM | Yes                     | 511          |                     |\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Bucket with Python\nDESCRIPTION: Creates a public storage bucket named 'avatars' using the Supabase Python client library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsupabase.storage.create_bucket(\n  'avatars',\n  options={\"public\": True}\n)\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Provider Enum References in Dart\nDESCRIPTION: Shows how to update code after the Provider enum was renamed to OAuthProvider to avoid collisions with the provider package. This change allows developers to use Supabase and Provider package in the same codebase without import prefixes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOAuth(\n  Provider.google,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOAuth(\n  OAuthProvider.google,\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Related Tables with Resource Embedding in PostgREST\nDESCRIPTION: Demonstrates how to query related tables using PostgREST resource embedding. The example shows querying films and their technical specifications using both HTTP and JavaScript approaches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /films?select=title,technical_specs(camera,laboratory,sound_mix)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase.from('films').select(`\n    title,\n    technical_specs (\n      camera, laboratory, duration\n    )\n  `)\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Pulp Fiction\",\n    \"technical_specs\": {\n      \"camera\": \"Arriflex 35-III\",\n      \"laboratory\": \"DeLuxe, Hollywood (CA), USA (color)\",\n      \"duration\": \"02:34:00\"\n    }\n  },\n  \"...\"\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Role Configuration Settings in PostgreSQL\nDESCRIPTION: This SQL query retrieves the current configuration settings for all roles in the PostgreSQL database, showing both the role name and any specific configuration parameters set for that role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/canceling-statement-due-to-statement-timeout-581wFv.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT rolname, rolconfig FROM pg_roles;\n```\n\n----------------------------------------\n\nTITLE: Installing Tabs Component via CLI\nDESCRIPTION: This command installs the Tabs component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add tabs\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Path Configuration Output\nDESCRIPTION: Example output showing PATH configuration command for PostgreSQL on MacOS\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/postgres_installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nIf you need to have postgresql@17 first in your PATH, run:\n\necho 'export PATH=\"/opt/homebrew/opt/postgresql@17/bin:$PATH\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML for CLI Login Demonstration\nDESCRIPTION: HTML iframe code used to embed a YouTube video demonstration of the automatic CLI login process. The video is embedded with privacy-enhanced mode and various allowances for playback features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-01-automatic-cli-login.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/lNgsIITU3pc?si=X6KE7X819Hk\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting idle transaction timeout in PostgreSQL\nDESCRIPTION: This SQL command configures a timeout for idle transactions in the current session, automatically terminating transactions that remain idle for the specified duration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nSET idle_in_transaction_session_timeout TO '10000s';\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons Component in JSX\nDESCRIPTION: A simple JSX component inclusion for displaying an Icons component, likely used to showcase available icons in a design system.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/icons.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Icons />\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client - TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a Supabase client tailored for TypeScript users in a SvelteKit application. It includes type definitions for the database. The function loads the Supabase client and fetches user session data while depending on the authentication state. Uses the same dependencies as the JavaScript version, with the addition of a Database type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/+layout.ts\nimport { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'\nimport { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'\nimport type { Database } from '../DatabaseDefinitions'\n\nexport const load = async ({ fetch, data, depends }) => {\n  depends('supabase:auth')\n\n  const supabase = createSupabaseLoadClient<Database>({\n    supabaseUrl: PUBLIC_SUPABASE_URL,\n    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n    event: { fetch },\n    serverSession: data.session,\n  })\n\n  /**\n   * It's fine to use `getSession` here, because on the client, `getSession` is\n   * safe, and on the server, it reads `session` from the `LayoutData`, which\n   * safely checked the session using `safeGetSession`.\n   */\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  return { supabase, session }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/flutter-user-management/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Tutorial Video with iFrame in JSX\nDESCRIPTION: Code for embedding a YouTube video tutorial about setting up Twilio for SMS authentication in Supabase. The iframe is configured with various attributes for security and user experience.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/components/AuthSmsProviderConfig/TwilioConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    src=\"https://www.youtube-nocookie.com/embed/akScoPO01bc\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing File List and Upload UI in React Native with Supabase Storage\nDESCRIPTION: This snippet creates a page for displaying and uploading files using Supabase Storage. It includes a floating action button for triggering the file picker and loads existing files for the authenticated user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, StyleSheet, TouchableOpacity, ScrollView } from 'react-native'\nimport React, { useEffect, useState } from 'react'\nimport { Ionicons } from '@expo/vector-icons'\nimport * as ImagePicker from 'expo-image-picker'\nimport { useAuth } from '../../provider/AuthProvider'\nimport * as FileSystem from 'expo-file-system'\nimport { decode } from 'base64-arraybuffer'\nimport { supabase } from '../../config/initSupabase'\nimport { FileObject } from '@supabase/storage-js'\n\nconst list = () => {\n  const { user } = useAuth()\n  const [files, setFiles] = useState<FileObject[]>([])\n\n  useEffect(() => {\n    if (!user) return\n\n    // Load user images\n    loadImages()\n  }, [user])\n\n  const loadImages = async () => {\n    const { data } = await supabase.storage.from('files').list(user!.id)\n    if (data) {\n      setFiles(data)\n    }\n  }\n\n  const onSelectImage = async () => {\n    // TODO\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* FAB to add images */}\n      <TouchableOpacity onPress={onSelectImage} style={styles.fab}>\n        <Ionicons name=\"camera-outline\" size={30} color={'#fff'} />\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#151515',\n  },\n  fab: {\n    borderWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 70,\n    position: 'absolute',\n    bottom: 40,\n    right: 30,\n    height: 70,\n    backgroundColor: '#2b825b',\n    borderRadius: 100,\n  },\n})\n\nexport default list\n```\n\n----------------------------------------\n\nTITLE: Creating User Mapping for Foreign Server in Postgres\nDESCRIPTION: SQL command to create a user mapping for the foreign server, setting the user credentials for accessing the remote database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate user mapping for \"<dbname>\"\nserver \"<foreign_server_name>\"\noptions (\n    user '<db_user>',\n    password '<password>'\n);\n```\n\n----------------------------------------\n\nTITLE: UI Error Handling with React Query Hooks\nDESCRIPTION: Example of how to handle loading, error, and success states in UI components when using Tanstack Query. This pattern ensures users are always informed of the request status by displaying appropriate UI components for each state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/data/__templates/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error, isLoading, isError, isSuccess } = useQuery()\n\nreturn (\n  <>\n    {isLoading && <GenericSkeletonLoader />}\n\n    {isError && <AlertError subject=\"A subject\" error={error} />}\n\n    {isSuccess && <div>Your UI component</div>}\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Starting the Vue Development Server\nDESCRIPTION: Launch the Vue development server to run the application locally, making it accessible at http://localhost:5173.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Synchronized Object Class in Dart\nDESCRIPTION: Abstract base class for objects that need real-time synchronization, including factory method for JSON parsing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nabstract class SyncedObject {\n  /// UUID unique identifier of the object\n  final String id;\n\n  factory SyncedObject.fromJson(Map<String, dynamic> json) {\n    final objectType = json['object_type'];\n    if (objectType == UserCursor.type) {\n      return UserCursor.fromJson(json);\n    } else {\n      return CanvasObject.fromJson(json);\n    }\n  }\n\n  SyncedObject({\n    required this.id,\n  });\n\n  Map<String, dynamic> toJson();\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database using PSQL\nDESCRIPTION: Command to connect to Postgres database using psql CLI tool with connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n➜ psql postgres://postgres.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-SUBDOMAIN].pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Granting Postgres Ownership to Prisma User\nDESCRIPTION: SQL command to grant the new Prisma user to the postgres role, allowing visibility of Prisma migration changes in the Supabase Dashboard.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ngrant \"prisma\" to \"postgres\";\n```\n\n----------------------------------------\n\nTITLE: Sending State in Swift\nDESCRIPTION: This snippet demonstrates how to send user status in Swift using a custom type or a raw JSONObject.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet roomOne = await supabase.channel(\"room_01\")\n\n// Using a custom type\nlet userStatus = UserStatus(\n    user: \"user-1\",\n    onlineAt: Date().timeIntervalSince1970\n)\n\nawait roomOne.subscribe()\n\ntry await roomOne.track(userStatus)\n\n// Or using a raw JSONObject.\nawait roomOne.track(\n  [\n    \"user\": .string(\"user-1\"),\n    \"onlineAt\": .double(Date().timeIntervalSince1970)\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project with npm\nDESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install prisma typescript ts-node @types/node --save-dev\n\nnpx tsc --init\n\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Route Handler with Supabase in Next.js (TypeScript)\nDESCRIPTION: TypeScript implementation of a Next.js static route handler that inserts data into Supabase. It uses the typed createClient from supabase-js for type safety, processes the POST request data, and returns the inserted record.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { NextResponse } from 'next/server'\n\nimport type { Database } from '@/lib/database.types'\n\nexport async function POST(request: Request) {\n  const { title } = await request.json()\n\n  const supabase = createClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n\n  const { data } = await supabase.from('todos').insert({ title }).select()\n  return NextResponse.json(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing App Component URL Handling\nDESCRIPTION: App component implementation for handling deep links and magic link authentication in native apps using Capacitor's App plugin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from 'src/app/services/auth.service'\nimport { Router } from '@angular/router'\nimport { Component, NgZone } from '@angular/core'\nimport { App, URLOpenListenerEvent } from '@capacitor/app'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor(\n    private zone: NgZone,\n    private router: Router,\n    private authService: AuthService\n  ) {\n    this.setupListener()\n  }\n\n  setupListener() {\n    App.addListener('appUrlOpen', async (data: URLOpenListenerEvent) => {\n      console.log('app opened with URL: ', data)\n\n      const openUrl = data.url\n      const access = openUrl.split('#access_token=').pop().split('&')[0]\n      const refresh = openUrl.split('&refresh_token=').pop().split('&')[0]\n\n      await this.authService.setSession(access, refresh)\n\n      this.zone.run(() => {\n        this.router.navigateByUrl('/groups', { replaceUrl: true })\n      })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Client-Side with React Query and Supabase in Next.js\nDESCRIPTION: This code demonstrates how to fetch data on the client side using React Query and Supabase in a Next.js client component. It handles loading and error states, and renders the fetched country data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport useSupabaseBrowser from '@/utils/supabase-browser'\nimport { getCountryById } from '@/queries/get-country-by-id'\nimport { useQuery } from '@supabase-cache-helpers/postgrest-react-query'\n\nexport default function CountryPage({ params }: { params: { id: number } }) {\n  const supabase = useSupabaseBrowser()\n  const { data: country, isLoading, isError } = useQuery(getCountryById(supabase, params.id))\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  if (isError || !country) {\n    return <div>Error</div>\n  }\n\n  return (\n    <div>\n      <h1>{country.name}</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Images in Article Content - HTML\nDESCRIPTION: This HTML snippet shows how to incorporate an image with a caption using the <figure> and <figcaption> elements. It ensures that images are styled appropriately by default when using the Tailwind CSS Typography plugin, enhancing the visual presentation of images in articles.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/src/lib/MarkdownSample.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<figure>\n  <img\n    src=\"https://images.unsplash.com/photo-1556740758-90de374c12ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1000&q=80\"\n    alt=\"\"\n  />\n  <figcaption>\n    Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of\n    classical Latin literature from 45 BC, making it over 2000 years old.\n  </figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Component in Vue 3\nDESCRIPTION: Implementing a Vue component for user authentication using Supabase magic link sign-in.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { supabase } from '../supabase'\n\nconst loading = ref(false)\nconst email = ref('')\n\nconst handleLogin = async () => {\n  try {\n    loading.value = true\n    const { error } = await supabase.auth.signInWithOtp({\n      email: email.value,\n    })\n    if (error) throw error\n    alert('Check your email for the login link!')\n  } catch (error) {\n    if (error instanceof Error) {\n      alert(error.message)\n    }\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n\n<template>\n  <form class=\"row flex-center flex\" @submit.prevent=\"handleLogin\">\n    <div class=\"col-6 form-widget\">\n      <h1 class=\"header\">Supabase + Vue 3</h1>\n      <p class=\"description\">Sign in via magic link with your email below</p>\n      <div>\n        <input class=\"inputField\" required type=\"email\" placeholder=\"Your email\" v-model=\"email\" />\n      </div>\n      <div>\n        <input\n          type=\"submit\"\n          class=\"button block\"\n          :value=\"loading ? 'Loading' : 'Send magic link'\"\n          :disabled=\"loading\"\n        />\n      </div>\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Pushing Migration Changes\nDESCRIPTION: Git commands to commit and push migration file changes to the remote repository.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit add supabase/migrations\ngit commit -m \"Add employees table\"\ngit push --set-upstream origin new-employee\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Note Box in Markdown\nDESCRIPTION: This snippet shows how to create a styled note box in Markdown using HTML and CSS classes. It's used to provide additional context or important information separate from the main content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-12-supabase-series-b.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div className=\"bg-gray-300 rounded-lg p-6 italic\">\n Note: we are not running OrioleDB on the Supabase platform. Our promise to you is \"no vendor-lockin\", and therefore we will never run a fork of Postgres.\n In the future, if all of the OrioleDB core changes are up-streamed, then we might offer it on the platform.\n\nIf you want to try out OrioleDB today, you can switch the Postgres docker image to OrioleDB in the [self-hosted setup](https://github.com/supabase/supabase/blob/ec6085b8f852a903f2f45e715add1377cf89d850/docker/docker-compose.yml#L159).\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing vecs Python Client\nDESCRIPTION: Installs the vecs Python client using pip. Requires Python 3.7+.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install vecs\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage Download Command Usage\nDESCRIPTION: Command line syntax for downloading files from Firebase Storage bucket with optional parameters for batch size, limits, and pagination tokens.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-storage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode download.js <prefix> [<folder>] [<batchSize>] [<limit>] [<token>]\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Supabase Meetup Event\nDESCRIPTION: YAML configuration block defining metadata for a Supabase community meetup event, including title, date, location, and event details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_events/2024-09-07__launch-week-12-meetup-Ibadan-nigeria.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Supabase Launch Week 12 Meetup: Ibadan, Nigeria'\nsubtitle: 'Join the community in Nigeria'\ntype: 'meetup'\nonDemand: false\ndisable_page_build: true\nlink: { href: https://lu.ma/pm694jkd, target: '_blank' }\ndate: '2024-09-07T09:00:00.000+01:00'\ntimezone: 'Africa/Algiers'\nduration: '3 hours'\ncategories:\n  - meetup\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Area Component\nDESCRIPTION: Example implementation of the ScrollArea component with custom dimensions, styling, and sample content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/scroll-area.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and leaving jokes all over the\n  place: under the king's pillow, in his soup, even in the royal toilet. The king was furious, but\n  he couldn't seem to stop Jokester. And then, one day, the people of the kingdom discovered that\n  the jokes left by Jokester were so funny that they couldn't help but laugh. And once they started\n  laughing, they couldn't stop.\n</ScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Building Icons with NPM Script\nDESCRIPTION: This bash command is used to build the custom icons from the raw icons directory. Running 'npm run build' outputs the icons into the specified location and updates their paths for import.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/icons/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for pg_jsonschema\nDESCRIPTION: Embeds a YouTube video about pg_jsonschema, a PostgreSQL extension for JSON validation, using an iframe element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-community-day.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/4A6RKPp1b70?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Environment Variables\nDESCRIPTION: This snippet defines the environment variables required to connect your React Router project to a Supabase instance. These variables include the Supabase URL and the Supabase anon key, which are essential for authenticating and authorizing your application's access to the Supabase backend. The values for these variables can be found in the Supabase dashboard or by running `supabase start` or `supabase status` for local instances.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n\"VITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Streams Function in Bash\nDESCRIPTION: Command to deploy the 'streams' Supabase Edge Function to production without JWT verification. This makes the function available on your Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/streams/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy --no-verify-jwt streams\n```\n\n----------------------------------------\n\nTITLE: Angular Routing Configuration with Auth Guards\nDESCRIPTION: Route configuration that implements the auth guard for protected routes in the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthGuard } from './guards/auth.guard'\nimport { BoardComponent } from './components/inside/board/board.component'\nimport { WorkspaceComponent } from './components/inside/workspace/workspace.component'\nimport { LoginComponent } from './components/login/login.component'\nimport { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n  },\n  {\n    path: 'workspace',\n    component: WorkspaceComponent,\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'workspace/:id',\n    component: BoardComponent,\n    canActivate: [AuthGuard],\n  },\n  {\n    path: '**',\n    redirectTo: '/',\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {})],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\n----------------------------------------\n\nTITLE: Calculating Service Credit for Supabase Enterprise Platform\nDESCRIPTION: Formula for calculating service credits based on the Actual Availability percentage. The credit percentage increases as the actual availability decreases below the 99.9% uptime commitment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/sla.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Actual Availability                                | Credit Percentage |\n| -------------------------------------------------- | ----------------- |\n| Less than 99.9% but greater than or equal to 99.0% | 10%               |\n| Less than 99.0% but greater than or equal to 98.0% | 15%               |\n| Less than 98.0% but greater than or equal to 96.0% | 20%               |\n| Less than 96.0%                                    | 30%               |\n```\n\n----------------------------------------\n\nTITLE: Importing hCaptcha React Component\nDESCRIPTION: Import statement for the hCaptcha React component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport HCaptcha from '@hcaptcha/react-hcaptcha'\n```\n\n----------------------------------------\n\nTITLE: Login Component Template with Tailwind CSS\nDESCRIPTION: HTML template for the login component featuring a responsive design with Tailwind CSS, including email input field and magic link submission button.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<ngx-spinner type=\"ball-scale-multiple\"></ngx-spinner>\n\n<div class=\"flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8\">\n  <div class=\"sm:mx-auto sm:w-full sm:max-w-md\">\n    <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Supabase Trello</h2>\n  </div>\n\n  <div class=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n    <div class=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n      <div class=\"space-y-6\" *ngIf=\"!linkSuccess; else check_mails\">\n        <div class=\"space-y-6\">\n          <label for=\"email\" class=\"block text-sm font-medium text-gray-700\"> Email address </label>\n          <div class=\"mt-1\">\n            <input\n              type=\"email\"\n              [(ngModel)]=\"email\"\n              autocomplete=\"email\"\n              placeholder=\"john@doe.com\"\n              class=\"block w-full rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-emerald-500 focus:outline-none focus:ring-emerald-500 sm:text-sm\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <button\n            (click)=\"signIn()\"\n            class=\"flex w-full justify-center rounded-md border border-transparent bg-emerald-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2\"\n          >\n            Send magic link\n          </button>\n        </div>\n      </div>\n\n      <ng-template #check_mails> Please check your emails! </ng-template>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization in Maven POM file\nDESCRIPTION: This XML snippet shows how to configure the KotlinX Serialization plugin in a Maven project. It includes the necessary plugin configuration and dependencies for using the default serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <compilerPlugins>\n                    <plugin>kotlinx-serialization</plugin>\n                </compilerPlugins>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>org.jetbrains.kotlin</groupId>\n                    <artifactId>kotlin-maven-serialization</artifactId>\n                    <version>${kotlin.version}</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Firebase Auth in Kotlin (Android)\nDESCRIPTION: Creates a Supabase client for Android applications using Kotlin, passing a function to retrieve the Firebase Auth JWT of the current user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.ktx.Firebase\n\nval supabase = createSupabaseClient(\n    \"https://<supabase-project>.supabase.co\",\n    \"SUPABASE_ANON_KEY\"\n) {\n    accessToken = {\n        Firebase.auth.currentUser?.getIdToken(false)?.await()?.token\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Separator Component\nDESCRIPTION: Basic usage example of the Separator component in a React component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/separator.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Separator />\n```\n\n----------------------------------------\n\nTITLE: Archiving a Single Message in PGMQ with SQL\nDESCRIPTION: The archive function removes a single message from a specified queue and inserts it into the queue's archive. It takes queue name and message ID as parameters and returns a boolean indicating success or failure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.archive('my_queue', 1);\n archive\n---------\n       t\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenAI Function to Supabase\nDESCRIPTION: Commands to deploy the OpenAI function and set up environment secrets in Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy --no-verify-jwt openai\nsupabase secrets set --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: CRDT-Enabled Posts Table in PostgreSQL\nDESCRIPTION: SQL command showing how to create a posts table with CRDT support using the pg_crdt extension's ydoc type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-10-postgres-crdt.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table posts (\n  id serial primary key,\n  title text,\n  content crdt.ydoc default crdt.new_ydoc()\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying SaaS Meme Image in Markdown\nDESCRIPTION: This code snippet shows how to embed a SaaS-related meme image in a Markdown document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-launch-week-three-friday-five-more-things.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![SaaS meme](/images/blog/launch-week-three/five-more-things/saas-meme.png)\n```\n\n----------------------------------------\n\nTITLE: Interacting with Database through Rails Console\nDESCRIPTION: Ruby code showing how to create and query Article records using the Rails console.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\narticle = Article.new(title: \"Hello Rails\", body: \"I am on Rails!\")\narticle.save\n\nArticle.all\n```\n\n----------------------------------------\n\nTITLE: Querying Decrypted Secrets from Supabase Vault in SQL\nDESCRIPTION: Demonstrates how to query and view decrypted secrets from the Supabase Vault using a special view that automatically decrypts the data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from vault.decrypted_secrets;\n```\n\n----------------------------------------\n\nTITLE: Responsive Carousel Item Spacing\nDESCRIPTION: Example of adding responsive spacing between carousel items using utility classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel>\n  <CarouselContent className=\"-ml-2 md:-ml-4\">\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Checking Grafana Docker Container Status\nDESCRIPTION: Docker command to list and verify the Grafana container configuration and status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/grafana-not-displaying-data-sXJrMj.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker ps -f name=supabase-grafana\n```\n\n----------------------------------------\n\nTITLE: Video Source Element for Cascade Delete Demo\nDESCRIPTION: HTML video element configuration for displaying cascade delete feature demonstration\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-supabase-studio-2.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/cascade-delete.mp4\"\n    type=\"video/mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting React Page Component\nDESCRIPTION: Exports the default page component that wraps content with Layout component and passes meta data and context props.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/open-source/contributing/supasquad.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default (context) => <Layout meta={meta} children={context.children} context={context} />\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data for PGroonga Full-Text Search\nDESCRIPTION: SQL command to insert sample data into the 'memos' table for testing PGroonga full-text search functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into memos(content)\nvalues\n  ('PostgreSQL is a relational database management system.'),\n  ('Groonga is a fast full text search engine that supports all languages.'),\n  ('PGroonga is a PostgreSQL extension that uses Groonga as index.'),\n  ('There is groonga command.');\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase and OpenAI\nDESCRIPTION: Environment variables required for connecting to Supabase and OpenAI API, to be added to a .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\nSUPABASE_SERVICE_ROLE_KEY=\n\n# Get your key at https://platform.openai.com/account/api-keys\nOPENAI_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Installing Aspect Ratio Component via CLI\nDESCRIPTION: This command installs the Aspect Ratio component using the shadcn-ui CLI tool. It's a quick way to add the component to your project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI dependency for the Accordion component when setting up manually.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/accordion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-accordion\n```\n\n----------------------------------------\n\nTITLE: Test API Key Admonition\nDESCRIPTION: JSX implementation of informational message about Test API Key behavior using the Admonition component\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/components/AuthSmsProviderConfig/MessageBirdConfig.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Admonition>\n\nIf you use the Test API Key, the OTP will not be delivered to the mobile number specified but messagebird will log the response in the dashboard. If the Live API Key is used instead, the OTP will be delivered and there will be a deduction in your free credits.\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Getting Node Path on Windows\nDESCRIPTION: Shell command to retrieve the Node.js installation directory path on Windows systems.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_postgres_config.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm config get prefix\n```\n\n----------------------------------------\n\nTITLE: Implementing DataService for Supabase Interactions in Angular\nDESCRIPTION: Creates a service to handle interactions with Supabase, including creating and retrieving groups.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Injectable } from '@angular/core'\nimport { SupabaseClient, createClient } from '@supabase/supabase-js'\nimport { Subject } from 'rxjs'\nimport { environment } from 'src/environments/environment'\n\nconst GROUPS_DB = 'groups'\nconst MESSAGES_DB = 'messages'\n\nexport interface Message {\n  created_at: string\n  group_id: number\n  id: number\n  text: string\n  user_id: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  private supabase: SupabaseClient\n\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\n  }\n\n  getGroups() {\n    return this.supabase\n      .from(GROUPS_DB)\n      .select(`title,id, users:creator ( email )`)\n      .then((result) => result.data)\n  }\n\n  async createGroup(title) {\n    const newgroup = {\n      creator: (await this.supabase.auth.getUser()).data.user.id,\n      title,\n    }\n\n    return this.supabase.from(GROUPS_DB).insert(newgroup).select().single()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Environment Variables Configuration\nDESCRIPTION: Environment variables setup for Supabase URL and anonymous key in the .env.local file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=your-supabase-url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting Functionality to TanStack Table in React\nDESCRIPTION: Updates the DataTable component to enable sorting functionality. The code adds state management for sorting and integrates the necessary TanStack Table sorting hooks and methods.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Components into a Main App\nDESCRIPTION: The main App.svelte component that handles authentication state and conditionally renders either the Auth component for unauthenticated users or the Account component for authenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { onMount } from 'svelte'\n  import { supabase } from './supabaseClient'\n  import type { AuthSession } from '@supabase/supabase-js'\n  import Account from './lib/Account.svelte'\n  import Auth from './lib/Auth.svelte'\n\n  let session: AuthSession | null\n\n  onMount(() => {\n    supabase.auth.getSession().then(({ data }) => {\n      session = data.session\n    })\n\n    supabase.auth.onAuthStateChange((_event, _session) => {\n      session = _session\n    })\n  })\n</script>\n\n<div class=\"container\" style=\"padding: 50px 0 100px 0\">\n  {#if !session}\n  <Auth />\n  {:else}\n  <Account {session} />\n  {/if}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating a JWT for Impersonating a Role with Node.js\nDESCRIPTION: This JavaScript snippet creates a JWT token using the 'jsonwebtoken' library in Node.js for a user with the 'manager' role. The token is signed with a secret key, allowing role impersonation for API access. It requires 'jsonwebtoken' and stores the JWT secret securely, ensuring it is never publicly exposed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require('jsonwebtoken')\n\nconst JWT_SECRET = 'your-jwt-secret' // You can find this in your Supabase project settings under API. Store this securely.\nconst USER_ID = '' // the user id that we want to give the manager role\n\nconst token = jwt.sign({ role: 'manager', sub: USER_ID }, JWT_SECRET, {\n  expiresIn: '1h',\n})\n```\n\n----------------------------------------\n\nTITLE: Script to assign role custom claim to all existing Firebase users\nDESCRIPTION: This JavaScript script uses the Firebase Admin SDK to assign the 'authenticated' role custom claim to all existing users. It iterates through users in batches of 1000 and sets the custom claim for each user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\nconst { initializeApp } = require('firebase-admin/app');\nconst { getAuth } = require('firebase-admin/auth');\ninitializeApp();\n\nasync function setRoleCustomClaim() => {\n  let nextPageToken = undefined\n\n  do {\n    const listUsersResult = await getAuth().listUsers(1000, nextPageToken)\n\n    nextPageToken = listUsersResult.pageToken\n\n    await Promise.all(listUsersResult.users.map(async (userRecord) => {\n      try {\n        await getAuth().setCustomUserClaims(userRecord.id, {\n          role: 'authenticated'\n        })\n      } catch (error) {\n        console.error('Failed to set custom role for user', userRecord.id)\n      }\n    })\n  } while (nextPageToken);\n};\n\nsetRoleCustomClaim().then(() => process.exit(0))\n```\n\n----------------------------------------\n\nTITLE: Flatten JSON into Separate Files in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates flattening a JSON document into separate files. It iterates through the `weapons` array, creating a new document for each weapon and using `writeRecord` to write it to a separate 'weapons' file. It also deletes the `weapons` array from the original document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (collectionName, doc, recordCounters, writeRecord) => {\n  for (let i = 0; i < doc.weapons.length; i++) {\n    const weapon = {\n      uid: doc.uid,\n      weapon: doc.weapons[i],\n    }\n    writeRecord('weapons', weapon, recordCounters)\n  }\n  delete doc.weapons // moved to separate file\n  return doc\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Tables for MFA in Supabase SQL\nDESCRIPTION: This SQL script creates a 'private_posts' table, inserts dummy data, enables Row Level Security (RLS), and creates a policy allowing access only to users authenticated via MFA.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/flutter-mfa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Dummy table that contains \"secure\" information\ncreate table if not exists public.private_posts (\n    id int generated by default as identity primary key,\n    content text not null\n);\n\n-- Dmmy \"secure\" data\ninsert into public.private_posts\n    (content)\nvalues\n    ('Flutter is awesome!'),\n    ('Supabase is awesome!'),\n    ('Postgres is awesome!');\n\n-- Enable RLS for private_posts table\nalter table public.private_posts enable row level security;\n\n-- Create a policy that only allows read if they user has signed in via MFA\ncreate policy \"Users can view private_posts if they have signed in via MFA\"\n  on public.private_posts\n  for select\n  to authenticated\n  using ((select auth.jwt()->>'aal') = 'aal2');\n```\n\n----------------------------------------\n\nTITLE: Using the FilterBar with AI\nDESCRIPTION: This example demonstrates how to enable AI-powered filtering by providing the `aiApiUrl` prop to the `FilterBar` component.  The `aiApiUrl` prop specifies the API endpoint that will handle natural language queries and return structured filters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function FilterDemoWithAI() {\n  const [filters, setFilters] = useState<FilterGroup>(initialFilters)\n\n  return (\n    <FilterBar\n      filterProperties={filterProperties}\n      filters={filters}\n      onFilterChange={setFilters}\n      aiApiUrl=\"/api/filter-ai\" // Enable AI filtering\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Supabase in Next.js TypeScript Server Actions\nDESCRIPTION: TypeScript implementation for using Supabase within Next.js Server Actions. This example demonstrates how to create and insert a new todo with proper type safety using the createServerActionClient function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\nimport { createServerActionClient } from '@supabase/auth-helpers-nextjs'\nimport { revalidatePath } from 'next/cache'\n\nimport type { Database } from '@/lib/database.types'\n\nexport default async function NewTodo() {\n  const addTodo = async (formData: FormData) => {\n    'use server'\n\n    const title = formData.get('title')\n    const cookieStore = cookies()\n    const supabase = createServerActionClient<Database>({ cookies: () => cookieStore })\n    await supabase.from('todos').insert({ title })\n    revalidatePath('/')\n  }\n\n  return (\n    <form action={addTodo}>\n      <input name=\"title\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using RealtimeCursors Component in Next.js\nDESCRIPTION: This code snippet demonstrates how to import and use the `RealtimeCursors` component in a Next.js page. It sets the `roomName` and `username` props to define the shared room and user identity, respectively. The component renders real-time cursors from other users within the specified room.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client'nimport { RealtimeCursors } from '@/components/realtime-cursors'n\nexport default function Page() {\n  return (\n    <div className=\\\"w-full min-h-screen\\\">\n      <RealtimeCursors roomName=\\\"macrodata_refinement_office\\\" username=\\\"Mark Scout\\\" />\n    </div>\n  )\n}\"\n```\n\n----------------------------------------\n\nTITLE: Apply Database Migrations (CLI)\nDESCRIPTION: This command applies any pending database migrations to the local Supabase database using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration up\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally\nDESCRIPTION: Command to serve Supabase functions locally without JWT verification for development purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/og-image-with-storage-cdn/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Adding Row Selection to TanStack Table with Checkboxes\nDESCRIPTION: Implements row selection functionality in the data table by adding a checkbox column. The code defines a selection column with checkboxes for individual rows and a header checkbox for selecting all rows.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { ColumnDef } from '@tanstack/react-table'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Checkbox } from '@/components/ui/checkbox'\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson Serializer Dependency in Maven POM\nDESCRIPTION: Adds the Jackson serializer dependency for supabase-kt to a Kotlin project using Maven. This is required to use Jackson as the serialization library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>serializer-jackson</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Role in PostgreSQL\nDESCRIPTION: Creates a new role in PostgreSQL without login privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate role \"role_name\";\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Transformation with Supabase Storage JavaScript API\nDESCRIPTION: Shows how to download a resized image with additional transformation parameters like resize mode using the JavaScript API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-13-storage-image-resizing-smart-cdn.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.storage.from('bucket').download('image.jpg', {\n  transform: {\n    width: 800,\n    height: 300,\n    resize: 'contain', // 'contain' | 'cover' | 'fill'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Dependencies for React Native\nDESCRIPTION: Command to install supabase-js and its required dependencies for a React Native project using Expo.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @supabase/supabase-js @react-native-async-storage/async-storage react-native-url-polyfill\n```\n\n----------------------------------------\n\nTITLE: Importing AssistantChatForm Component in React\nDESCRIPTION: This snippet shows how to import the AssistantChatForm component from the ui-patterns/AssistantChat module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/assistant-chat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantChatForm } from 'ui-patterns/AssistantChat'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Snaplet Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Snaplet's database copying tool integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/64Z6Ku0t334\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Color Generation Extensions in Dart\nDESCRIPTION: Extension methods for Color class to generate random colors, including a seeded random color generator based on user IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\nimport 'dart:math';\nimport 'dart:ui';\n\nimport 'package:uuid/uuid.dart';\n\n/// Handy extension method to create random colors\nextension RandomColor on Color {\n  static Color getRandom() {\n    return Color((Random().nextDouble() * 0xFFFFFF).toInt()).withOpacity(1.0);\n  }\n\n  /// Quick and dirty method to create a random color from the userID\n  static Color getRandomFromId(String id) {\n    final seed = utf8.encode(id).reduce((value, element) => value + element);\n    return Color((Random(seed).nextDouble() * 0xFFFFFF).toInt())\n        .withOpacity(1.0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Dark Supabase Badge in HTML\nDESCRIPTION: This snippet provides the HTML code to embed a 'Made with Supabase' dark badge into a webpage. It includes attributes for width, height, and alt text.\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.tr.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://supabase.com\">\n  <img\n    width=\"168\"\n    height=\"30\"\n    src=\"https://supabase.com/badge-made-with-supabase-dark.svg\"\n    alt=\"Made with Supabase\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase and UUID Dependencies in Flutter\nDESCRIPTION: Command to add Supabase Flutter SDK and UUID package to the project for implementing real-time features and generating unique identifiers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add supabase_flutter uuid\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL-G Environment Variables for AWS Storage\nDESCRIPTION: Commands to create and configure the environment variables required for WAL-G to connect to AWS S3 for storing PostgreSQL backups. Sets up access keys, S3 bucket path, and database password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ umask u=rwx,g=rx,o=\n$ mkdir -p /etc/wal-g.d/env\n$ echo 'secret-key-content' > /etc/wal-g.d/env/AWS_SECRET_ACCESS_KEY\n$ echo 'access-key' > /etc/wal-g.d/env/AWS_ACCESS_KEY_ID\n$ echo 's3://backup-bucket/project-directory' > /etc/wal-g.d/env/WALG_S3_PREFIX\n$ echo 'db password' > /etc/wal-g.d/env/PGPASSWORD\n$ chown -R root:postgres /etc/wal-g.d\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Query Planning and Execution Time Example\nDESCRIPTION: Shows the typical planning and execution time metrics for a simple PostgreSQL query, demonstrating why prepared statements are important for performance optimization in WALRUS.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"Planning Time: 0.099 ms\"\n\"Execution Time: 0.051 ms\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects in Supabase with JavaScript\nDESCRIPTION: This JavaScript snippet shows how to delete objects using the Supabase client library. The 'remove' method from the storage API is used, requiring the Supabase project URL and API key as prerequisites. It deletes multiple objects specified by their paths.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/delete-objects.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nawait supabase.storage.from('bucket').remove(['object-path-2', 'folder/avatar2.png'])\n```\n\n----------------------------------------\n\nTITLE: Basic Supabase Query Without Filter\nDESCRIPTION: Example of a basic Supabase query without filters (not recommended for performance).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = supabase\n  .from('table')\n  .select()\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv for Express\nDESCRIPTION: Installs the dotenv package for managing environment variables in an Express application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React\nDESCRIPTION: How to import the Badge component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/badge.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from '@/components/ui/badge'\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase Functions Image in Markdown\nDESCRIPTION: This code snippet shows how to embed an image related to Supabase Functions in a Markdown document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-launch-week-three-friday-five-more-things.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![functions.png](/images/blog/launch-week-three/five-more-things/functions.png)\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Clean Up Inactive Anonymous Users\nDESCRIPTION: SQL query to delete anonymous users that were created more than 30 days ago, helping manage database growth until automatic cleanup is implemented.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- deletes anonymous users created more than 30 days ago\ndelete from auth.users\nwhere is_anonymous is true and created_at < now() - interval '30 days';\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Command to initialize Supabase in the project directory\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Replacing DB User in Connection String\nDESCRIPTION: Example showing how to replace the database user placeholder with the 'prisma' user in the connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_8\n\nLANGUAGE: md\nCODE:\n```\npostgres://prisma.[PROJECT-REF]...\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Item Component for Supabase Storage Files in React Native\nDESCRIPTION: This snippet defines a component for displaying individual image items from Supabase Storage. It includes functionality to download and display the image, show the file name, and provide a delete button.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FileObject } from '@supabase/storage-js'\nimport { Image, View, Text, TouchableOpacity } from 'react-native'\nimport { supabase } from '../config/initSupabase'\nimport { useState } from 'react'\nimport { Ionicons } from '@expo/vector-icons'\n\n// Image item component that displays the image from Supabase Storage and a delte button\nconst ImageItem = ({\n  item,\n  userId,\n  onRemoveImage,\n}: {\n  item: FileObject\n  userId: string\n  onRemoveImage: () => void\n}) => {\n  const [image, setImage] = useState<string>('')\n\n  supabase.storage\n    .from('files')\n    .download(`${userId}/${item.name}`)\n    .then(({ data }) => {\n      const fr = new FileReader()\n      fr.readAsDataURL(data!)\n      fr.onload = () => {\n        setImage(fr.result as string)\n      }\n    })\n\n  return (\n    <View style={{ flexDirection: 'row', margin: 1, alignItems: 'center', gap: 5 }}>\n      {image ? (\n        <Image style={{ width: 80, height: 80 }} source={{ uri: image }} />\n      ) : (\n        <View style={{ width: 80, height: 80, backgroundColor: '#1A1A1A' }} />\n      )}\n      <Text style={{ flex: 1, color: '#fff' }}>{item.name}</Text>\n      {/* Delete image button */}\n      <TouchableOpacity onPress={onRemoveImage}>\n        <Ionicons name=\"trash-outline\" size={20} color={'#fff'} />\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nexport default ImageItem\n```\n\n----------------------------------------\n\nTITLE: Revoking Role-Specific Function Execution in PostgreSQL\nDESCRIPTION: SQL command to revoke execution permissions of a function named 'foo' from a specific role ('anon'). This prevents the specified role from executing the function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-can-i-revoke-execution-of-a-postgresql-function-2GYb0A.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nrevoke execute on function foo from anon;\n```\n\n----------------------------------------\n\nTITLE: Example Execution Plan Response\nDESCRIPTION: Sample output of an execution plan returned by the explain() method, showing the query cost, rows, and width for each operation in the execution plan.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nAggregate  (cost=33.34..33.36 rows=1 width=112)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40)\n        ->  Seq Scan on instruments  (cost=0.00..22.00 rows=1200 width=40)\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with Swift Supabase Client\nDESCRIPTION: This Swift code uses the Supabase client to query and extract nested JSON values from a 'books' table. The query accesses JSON properties and array elements using PostgreSQL's JSON path syntax within a multiline string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#2025-04-21_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase\n  .from(\"books\")\n  .select(\n    \"\"\"\n      title,\n      description:  metadata->description,\n      price:        metadata->price,\n      low_age:      metadata->ages->0,\n      high_age:     metadata->ages->1\n    \"\"\"\n  )\n  .execute()\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Authentication Widget\nDESCRIPTION: Implementation of email and password authentication using SupaEmailAuth widget with custom metadata fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSupaEmailAuth(\n  redirectTo: kIsWeb ? null : 'io.mydomain.myapp://callback',\n  onSignInComplete: (response) {},\n  onSignUpComplete: (response) {},\n  metadataFields: [\n    MetaDataField(\n    prefixIcon: const Icon(Icons.person),\n    label: 'Username',\n    key: 'username',\n    validator: (val) {\n            if (val == null || val.isEmpty) {\n            return 'Please enter something';\n            }\n            return null;\n          },\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter Home Page with Supabase Query\nDESCRIPTION: This code implements the HomePage widget that retrieves and displays a list of films from the Supabase database. It uses a FutureBuilder to handle asynchronous data loading and displays the films in a ListView using the FilmCell component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:filmsearch/components/film_cell.dart';\nimport 'package:filmsearch/main.dart';\nimport 'package:filmsearch/models/film.dart';\n\nimport 'package:flutter/material.dart';\n\nclass HomePage extends StatefulWidget {\n  const HomePage({super.key});\n\n  @override\n  State<HomePage> createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  final filmsFuture = supabase\n      .from('films')\n      .select<List<Map<String, dynamic>>>()\n      .withConverter<List<Film>>((data) => data.map(Film.fromJson).toList());\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Films'),\n      ),\n      body: FutureBuilder(\n          future: filmsFuture,\n          builder: (context, snapshot) {\n            if (snapshot.hasError) {\n              return Center(\n                child: Text(snapshot.error.toString()),\n              );\n            }\n            if (!snapshot.hasData) {\n              return const Center(child: CircularProgressIndicator());\n            }\n            final films = snapshot.data!;\n            return ListView.builder(\n              itemBuilder: (context, index) {\n                final film = films[index];\n                return FilmCell(film: film);\n              },\n              itemCount: films.length,\n            );\n          }),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Function Security Grants\nDESCRIPTION: SQL commands to configure security permissions for auth hook Postgres functions, including granting access to supabase_auth_admin and revoking access from other roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grant access to function to supabase_auth_admin\ngrant execute\n  on function public.custom_access_token_hook\n  to supabase_auth_admin;\n\n-- Grant access to schema to supabase_auth_admin\ngrant usage on schema public to supabase_auth_admin;\n\n-- Revoke function permissions from authenticated, anon and public\nrevoke execute\n  on function public.custom_access_token_hook\n  from authenticated, anon, public;\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to run the Next.js development server locally.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/nextjs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: HNSW 1536-Dimension Performance Metrics\nDESCRIPTION: Performance benchmarks for 1536-dimension OpenAI embeddings, detailing metrics across different compute sizes with varying vector counts and HNSW index parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/choosing-compute-addon.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Compute Size | Vectors   | m   | ef_construction | ef_search | QPS  | Latency Mean | Latency p95 | RAM Usage     | RAM    |\n| ------------ | --------- | --- | --------------- | --------- | ---- | ------------ | ----------- | ------------- | ------ |\n| Micro        | 15,000    | 16  | 40              | 40        | 480  | 0.011 sec    | 0.016 sec   | 1.2 GB (Swap) | 1 GB   |\n```\n\n----------------------------------------\n\nTITLE: Configuring AppComponent with Supabase Authentication in Angular\nDESCRIPTION: This snippet shows how to set up the AppComponent to handle Supabase authentication changes and navigate to the account page when a user is logged in.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { SupabaseService } from './supabase.service'\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <ion-app>\n      <ion-router-outlet></ion-router-outlet>\n    </ion-app>\n  `,\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor(\n    private supabase: SupabaseService,\n    private router: Router\n  ) {\n    this.supabase.authChanges((_, session) => {\n      console.log(session)\n      if (session?.user) {\n        this.router.navigate(['/account'])\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet demonstrates how to embed a Twitter tweet using HTML blockquote and script tags. It includes the tweet content, author information, and styling attributes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-01-20-product-hunt-golden-kitty-awards-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<blockquote class=\"twitter-tweet\" data-lang=\"en\" data-theme=\"dark\">\n  <p lang=\"en\" dir=\"ltr\">\n    🏆 Supabase UI has been nominated for the\n    <a href=\"https://twitter.com/ProductHunt?ref_src=twsrc%5Etfw\">@ProductHunt</a> <a href=\"https://twitter.com/hashtag/GoldenKittyAwards2021?src=hash&amp;ref_src=twsrc%5Etfw\">\n      #GoldenKittyAwards2021\n    </a> <p>💚 Thank you to all the contributors and upvoters out there, we appreciate you!</p>\n    <a href=\"https://t.co/xOek6sM4LG\">https://t.co/xOek6sM4LG</a>\n  </p>\n  &mdash; Supabase (@supabase) <a href=\"https://twitter.com/supabase/status/1481672574023221260?ref_src=twsrc%5Etfw\">January 13, 2022</a>\n</blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages via REST API using POST Request\nDESCRIPTION: This snippet shows the structure of a POST request to broadcast messages through the Supabase Realtime API. It includes the required headers and JSON body format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPOST /realtime/v1/api/broadcast HTTP/1.1\nHost: {PROJECT_REF}.supabase.co\nContent-Type: application/json\napikey: {SUPABASE_TOKEN}\n{\n  \"messages\": [\n    {\n      \"topic\": \"test\",\n      \"event\": \"event\",\n      \"payload\": {\n        \"test\": \"test\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Database to Supabase with psql\nDESCRIPTION: Command to import the previously exported database dump into Supabase using psql, targeting the new database URL and specifying the dump file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npsql -d \"$NEW_DB_URL\" -f dump.sql\n```\n\n----------------------------------------\n\nTITLE: Embedding Supabase Badge in Markdown\nDESCRIPTION: This snippet provides the Markdown code to embed a 'Made with Supabase' badge into a document. It links to the Supabase website.\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.tr.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Made with Supabase](https://supabase.com/badge-made-with-supabase.svg)](https://supabase.com)\n```\n\n----------------------------------------\n\nTITLE: Parsing SQL Statements with Rust\nDESCRIPTION: Example of an ALTER TABLE statement that demonstrates node location within the abstract syntax tree for precise diagnostic reporting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE contact\n\tDROP COLUMN test,\n\tALTER COLUMN another DROP NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Benchmarking GraphQL Performance with ApacheBench\nDESCRIPTION: This snippet shows the results of an ApacheBench performance test for pg_graphql on a Free Plan instance. It demonstrates the capability to handle 645 requests per second with low latency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-pg-graphql-v1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis is ApacheBench, Version 2.3 <$Revision: 1843412 $>\nServer Software:        postgrest/10.1.1\nDocument Path:          /graphql/v1\nConcurrency Level:      10\nTime taken for tests:   3.099 seconds\nComplete requests:      2000\nRequests per second:    645.40 [#/sec] (mean)\nTime per request:       15.494 [ms] (mean)\nTime per request:       1.549 [ms] (mean, across all concurrent requests)\n```\n\n----------------------------------------\n\nTITLE: Downloading Next.js 13 and Supabase Caching Example\nDESCRIPTION: This command downloads the example project for caching data with Next.js 13 and Supabase from the Supabase GitHub repository.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-nextjs-13/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/supabase/supabase/tar.gz/master | tar -xz --strip=3 supabase-master/examples/caching/with-nextjs-13\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SSR Packages with pnpm\nDESCRIPTION: Installs the @supabase/ssr and @supabase/supabase-js packages using pnpm package manager for implementing server-side rendering with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @supabase/ssr @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy to Restrict Anonymous Users from Creating Posts\nDESCRIPTION: SQL policy that prevents anonymous users from inserting new posts while allowing permanent authenticated users to do so.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Only permanent users can create posts\"\non public.posts\nfor insert\nto authenticated -- Note: user is still authenticated\nwith check (\n  (select auth.jwt() ->> 'is_anonymous')::boolean is false\n);\n```\n\n----------------------------------------\n\nTITLE: Typography Page Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the typography documentation page, setting metadata and component properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/typography.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Typography\ndescription: Styles for headings, paragraphs, lists...etc\ncomponent: true\nsource:\n  shadcn: true\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Banned IPs with Supabase CLI\nDESCRIPTION: Command to list all IP addresses that have been banned from connecting to your Supabase project database. This helps identify which IP addresses have been blocked by Fail2ban after failed login attempts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-connection-refused-when-trying-to-connect-to-supabase-database-hwG0Dr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n% supabase network-bans get --project-ref <project_reference_id> --experimental\n```\n\n----------------------------------------\n\nTITLE: Creating a Wasm-based Google Sheets Foreign Data Wrapper in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a server for a Google Sheets Wasm wrapper. It specifies the wrapper location on GitHub, version information, and custom options like the base URL for Google Sheets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate server google_sheets\n  foreign data wrapper wasm_wrapper\n  options (\n    -- Install from GitHub\n    fdw_package_url 'https://github.com/<ORG>/<REPO>/releases/download/v0.2.0/google_sheets_fdw.wasm',\n    fdw_package_name 'my-company:google-sheets-fdw',\n    fdw_package_version '0.2.0',\n    fdw_package_checksum '338674c4c983aa6dbc2b6e63659076fe86d847ca0da6d57a61372b44e0fe4ac9',\n\n\t-- Provide custom options\n\tbase_url 'https://docs.google.com/spreadsheets/d'\n  );\n```\n\n----------------------------------------\n\nTITLE: Expo React Native Apple Authentication Setup\nDESCRIPTION: Initial setup for Apple Authentication in an Expo React Native application using expo-apple-authentication module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Platform } from 'react-native'\nimport * as AppleAuthentication from 'expo-apple-authentication'\nimport { supabase } from 'app/utils/supabase'\n\nexport function Auth() {\n  if (Platform.OS === 'ios')\n    return (\n      <AppleAuthentication.AppleAuthenticationButton\n```\n\n----------------------------------------\n\nTITLE: Exposing Postgres Database Port in Docker Compose\nDESCRIPTION: Configuration to expose the Postgres database port directly without going through Supavisor, which is less secure but provides direct access to the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# Comment or remove the supavisor section of the docker-compose file\n#  supavisor:\n#    ports:\n# ...\ndb:\n  ports:\n    - ${POSTGRES_PORT}:${POSTGRES_PORT}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Kotlin\nDESCRIPTION: This snippet demonstrates the initialization of a Supabase client in Kotlin, using the project URL and anonymous API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabaseUrl = \"https://<project>.supabase.co\"\nval supabaseKey = \"<your-anon-key>\"\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    install(Realtime)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Hook Form dependencies\nDESCRIPTION: Command to install the React Hook Form package and its refine integration for form handling in the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @refinedev/react-hook-form react-hook-form\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Functions\nDESCRIPTION: This snippet outlines the command to deploy the Supabase function to the edge. It uses the Supabase CLI and includes a flag for JWT verification, ensuring a streamlined deployment process.\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw13-meetups-ogs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy lw13-meetups-ogs --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Checking IPv6 Network Compatibility Using cURL\nDESCRIPTION: Command to verify if the current network supports IPv6 connectivity by attempting to fetch the IP address using IPv6.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -6 https://ifconfig.co/ip\n```\n\n----------------------------------------\n\nTITLE: Nearby Places HTML Template with Distance Display\nDESCRIPTION: An HTML template for displaying nearby store locations in a list. Each list item shows the store name, description, and distance in kilometers, formatted with Angular's number pipe.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"modalCtrl.dismiss()\">\n        <ion-icon slot=\"icon-only\" name=\"close\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title>Nearby Places</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list>\n    <ion-item *ngFor=\"let store of stores\">\n      <ion-label>\n        {{ store.name }}\n        <p>{{store.description }}</p>\n      </ion-label>\n      <ion-note slot=\"end\">{{store.dist_meters!/1000 | number:'1.0-2' }} km</ion-note>\n    </ion-item>\n  </ion-list>\n</ion-content>\n```\n\n----------------------------------------\n\nTITLE: Filtering Storage Logs by 4XX Error Status Codes\nDESCRIPTION: This SQL query retrieves storage logs and filters them to only include entries where the HTTP status code is a 4XX error (client-side error). It extracts the ID, timestamp, event message, status code, error message, and raw error details from the storage logs' metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  id,\n  storage_logs.timestamp,\n  event_message,\n  r.statusCode,\n  e.message as errorMessage,\n  e.raw as rawError\nfrom\n  storage_logs\n  cross join unnest(metadata) as m\n  cross join unnest(m.res) as r\n  cross join unnest(m.error) as e\nwhere r.statusCode >= 400 and r.statusCode < 500\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Deploying Stripe Webhook Function to Supabase\nDESCRIPTION: Deploys the stripe-webhooks function to Supabase without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy --no-verify-jwt stripe-webhooks\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Supabase Client in Next.js\nDESCRIPTION: These snippets demonstrate how to create typed Supabase clients using createPagesBrowserClient and createPagesServerClient in Next.js. They show how to use CLI-generated types for enhanced type safety and auto-completion.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// client-side\nimport type { Database } from 'types_db'\nconst [supabaseClient] = useState(() => createPagesBrowserClient<Database>())\n\n// server-side API route\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport type { Database } from 'types_db'\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  const supabaseServerClient = createPagesServerClient<Database>({\n    req,\n    res,\n  })\n  const {\n    data: { user },\n  } = await supabaseServerClient.auth.getUser()\n\n  res.status(200).json({ name: user?.name ?? '' })\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Password Reset in Swift with Supabase\nDESCRIPTION: Swift implementation to initiate a password reset flow using Supabase client by sending a reset password email to the specified email address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_32\n\nLANGUAGE: Swift\nCODE:\n```\ntry await supabase.auth.resetPasswordForEmail(\"valid.email@supabase.io\")\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed for FlutterFlow Integration\nDESCRIPTION: HTML iframe code for embedding a YouTube video demonstrating FlutterFlow's integration with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-launch-week-6-community-day.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/hw9Q-NjASbU?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating New Next.js Project with Supabase\nDESCRIPTION: Command to create a new Next.js project using the Supabase template that includes sample migrations and seed files\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Creating New PostgreSQL Database\nDESCRIPTION: Basic SQL command to create a new database, which by default uses template1 as its template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE new_db_name;\n```\n\n----------------------------------------\n\nTITLE: Uploading NodeJS Stream to Supabase Storage\nDESCRIPTION: Demonstrates how to upload a NodeJS ReadableStream to Supabase Storage using the supabase-js library. This new capability allows for direct binary data uploads without increasing bundle size.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-27-storage-beta.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createReadStream } from 'fs'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_KEY')\n\nconst stream = createReadStream('./my-file.txt')\n\nconst { data, error } = await supabase.storage\n  .from('bucket')\n  .upload('folder/file.txt', stream)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML code for embedding a YouTube video player with specific security and feature settings, including frame border removal and allowed features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-06-01-supabase-alpha-may-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/e4qXmcEFaUs\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Diffing Auth and Storage Schemas with Supabase CLI - Bash\nDESCRIPTION: This snippet shows how to diff changes made to the auth and storage schemas in an old Supabase project using the Supabase CLI. It requires linking to the old project and executing the diff command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link --project-ref \"$OLD_PROJECT_REF\"\\nsupabase db diff --linked --schema auth,storage > changes.sql\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Analytics Data for Upgrade\nDESCRIPTION: Commands to clean up the Analytics server data when upgrading, which involves dropping the publication and schema before removing the analytics container. This will delete all data in analytics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n### Destroy analytics to transition to postgres self hosted solution without other data loss\n\n# Enter the container and use your .env POSTGRES_PASSWORD value to login\ndocker exec -it $(docker ps | grep supabase-db | awk '{print $1}') psql -U supabase_admin --password\n# Drop all the data in the _analytics schema\nDROP PUBLICATION logflare_pub; DROP SCHEMA _analytics CASCADE; CREATE SCHEMA _analytics;\\q\n# Drop the analytics container\ndocker rm supabase-analytics\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Transformed Image in Python\nDESCRIPTION: This snippet demonstrates how to use the Supabase Python client to get a public URL for a transformed image, specifying width and height.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nurl = supabase.storage.from_('avatars').get_public_url(\n  'image.jpg',\n  {\n    'transform': {\n      'width': 500,\n      'height': 500,\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Supabase Auth Implementation Pattern (DO NOT USE)\nDESCRIPTION: This shows the deprecated pattern for cookie handling in Supabase Auth implementation that should never be used as it will break the application. This is shown for warning purposes only.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ NEVER GENERATE THIS CODE - IT WILL BREAK THE APPLICATION\n{\n  cookies: {\n    get(name: string) {                 // ❌ BREAKS APPLICATION\n      return cookieStore.get(name)      // ❌ BREAKS APPLICATION\n    },                                  // ❌ BREAKS APPLICATION\n    set(name: string, value: string) {  // ❌ BREAKS APPLICATION\n      cookieStore.set(name, value)      // ❌ BREAKS APPLICATION\n    },                                  // ❌ BREAKS APPLICATION\n    remove(name: string) {              // ❌ BREAKS APPLICATION\n      cookieStore.remove(name)          // ❌ BREAKS APPLICATION\n    }                                   // ❌ BREAKS APPLICATION\n  }\n}\n\n// ❌ NEVER USE auth-helpers-nextjs - IT WILL BREAK THE APPLICATION\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION\n```\n\n----------------------------------------\n\nTITLE: Release Notes Entry for Supabase C# SDK v1.0.0\nDESCRIPTION: Documents the changes in version 1.0.0 including assembly name changes, package renames, and updates to multiple dependencies including postgrest-csharp, gotrue-csharp, realtime-csharp, storage-csharp, functions-csharp, and core-csharp packages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/csharp/release-notes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0 - 2024-04-21\n\n- Assembly Name has been changed to `Supabase.dll`\n- Update dependency: `postgrest-csharp@5.0.0`\n  - [MAJOR] Moves namespaces from `Postgrest` to `Supabase.Postgrest`\n  - Re: [#135](https://github.com/supabase-community/supabase-csharp/issues/135) Update nuget package\n    name `postgrest-csharp` to `Supabase.Postgrest`\n- Update dependency: `gotrue-csharp@5.0.0`\n  - Re: [#135](supabase-community/supabase-csharp#135) Update nuget package name `gotrue-csharp` to `Supabase.Gotrue`\n  - Re: [#89](https://github.com/supabase-community/gotrue-csharp/issues/89), Only add `access_token` to request body\n    when it is explicitly declared.\n  - [MINOR] Re: [#89](https://github.com/supabase-community/gotrue-csharp/issues/89) Update signature\n    for `SignInWithIdToken` which adds an optional `accessToken` parameter, update doc comments, and\n    call `DestroySession` in method\n  - Re: [#88](https://github.com/supabase-community/gotrue-csharp/issues/88), Add `IsAnonymous` property to `User`\n  - Re: [#90](https://github.com/supabase-community/gotrue-csharp/issues/90) Implement `LinkIdentity`\n    and `UnlinkIdentity`\n- Update dependency: `realtime-csharp@7.0.0`\n  - Merges [#45](https://github.com/supabase-community/realtime-csharp/pull/45) - Updating\n    the `Websocket.Client@5.1.1`\n  - Re: [#135](https://github.com/supabase-community/supabase-csharp/issues/135) Update nuget package\n    name `realtime-csharp` to `Supabase.Realtime`\n- Update dependency: `storage-csharp@2.0.0`\n  - Re: [#135](https://github.com/supabase-community/supabase-csharp/issues/135) Update nuget package\n    name `storage-csharp` to `Supabase.Storage`\n- Update dependency: `functions-csharp@2.0.0`\n  - Re: [#135](https://github.com/supabase-community/supabase-csharp/issues/135) Update nuget package\n    name `functions-csharp` to `Supabase.Functions`\n- Update dependency: `core-csharp@1.0.0`\n  - Re: [#135](https://github.com/supabase-community/supabase-csharp/issues/135) Update nuget package\n    name `supabase-core`\n    to `Supabase.Core`\n- Adds comments to the remaining undocumented code.\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Commands for activating and managing the Poetry virtual environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/aws_bedrock_image_search/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry shell\nexit\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgREST Explain Feature in SQL\nDESCRIPTION: This SQL command enables the explain feature in PostgREST, allowing performance analysis of queries through Supabase clients. This should not be used in production environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter role authenticator set pgrst.db_plan_enabled to true;\nNOTIFY pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase Retrospective Image in Markdown\nDESCRIPTION: This code snippet embeds an image illustrating Supabase's retrospective process into the markdown document. The image is referenced from a specific path and includes alt text for accessibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-26-supabase-how-we-launch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![supabase monthly growth](/images/blog/how-we-launch/how-we-launch-retrospective.jpg)\n```\n\n----------------------------------------\n\nTITLE: Querying Similar Sentences\nDESCRIPTION: Python code to query the vector database for similar sentences using a query embedding generated from a sample sentence\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/amazon-bedrock.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquery_sentence = \"A quick animal jumps over a lazy one.\"\n\n# create vector store client\nvx = vecs.Client(DB_CONNECTION)\n\n# create an embedding for the query sentence\nresponse = client.invoke_model(\n        body= json.dumps({\"inputText\": query_sentence}),\n        modelId= \"amazon.titan-embed-text-v1\",\n        accept = \"application/json\",\n        contentType = \"application/json\"\n    )\n\nresponse_body = json.loads(response[\"body\"].read())\n\nquery_embedding = response_body.get(\"embedding\")\n\n# query the 'sentences' collection for the most similar sentences\nresults = sentences.query(\n    data=query_embedding,\n    limit=3,\n    include_value = True\n)\n\n# print the results\nfor result in results:\n    print(result)\n```\n\n----------------------------------------\n\nTITLE: Granting Statistics Access\nDESCRIPTION: SQL command to grant statistics access privileges to postgres user\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ngrant pg_read_all_stats to postgres;\n```\n\n----------------------------------------\n\nTITLE: Inspecting Database Cache Hit Rate using Supabase CLI\nDESCRIPTION: This code snippet demonstrates how to use the Supabase CLI to check the cache hit rate of a linked project's database. It includes steps for logging in, initializing a local Supabase directory, linking a project, and running the inspect command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase-grafana-memory-charts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# login to the CLI\nnpx supabase login\n\n# initlize a local supabase directory\nnpx supabase init\n\n#link your project\nnpx supabase link\n\n# find cache hit rate\nnpx supabase inspect db cache-hit --linked\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Components\nDESCRIPTION: Code showing how to import the Alert, AlertTitle, and AlertDescription components from the UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\n```\n\n----------------------------------------\n\nTITLE: Identifying Time-Intensive Hash Join Operations in PostgreSQL Query Plans\nDESCRIPTION: Example of a hash join operation that takes significant execution time, which could be a potential performance bottleneck in a query. The actual execution time of 100 milliseconds indicates this operation may need optimization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nHash Join  (cost=100.00..200.00 rows=1000 width=50) (actual time=50.012..150.023 rows=1000 loops=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing CanvasPainter for Drawing Objects and Cursors in Flutter\nDESCRIPTION: This code defines a CanvasPainter class that extends CustomPainter. It takes maps of user cursors and canvas objects, then draws them on the canvas. The paint method handles different shapes like circles and rectangles, as well as custom cursor shapes. The shouldRepaint method ensures the canvas is redrawn when properties change.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:canvas/canvas/canvas_object.dart';\nimport 'package:flutter/material.dart';\n\nclass CanvasPainter extends CustomPainter {\n  final Map<String, UserCursor> userCursors;\n  final Map<String, CanvasObject> canvasObjects;\n\n  CanvasPainter({\n    required this.userCursors,\n    required this.canvasObjects,\n  });\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    // Draw each canvas objects\n    for (final canvasObject in canvasObjects.values) {\n      if (canvasObject is Circle) {\n        final position = canvasObject.center;\n        final radius = canvasObject.radius;\n        canvas.drawCircle(\n            position, radius, Paint()..color = canvasObject.color);\n      } else if (canvasObject is Rectangle) {\n        final position = canvasObject.topLeft;\n        final bottomRight = canvasObject.bottomRight;\n        canvas.drawRect(\n            Rect.fromLTRB(\n                position.dx, position.dy, bottomRight.dx, bottomRight.dy),\n            Paint()..color = canvasObject.color);\n      }\n    }\n\n    // Draw the cursors\n    for (final userCursor in userCursors.values) {\n      final position = userCursor.position;\n      canvas.drawPath(\n          Path()\n            ..moveTo(position.dx, position.dy)\n            ..lineTo(position.dx + 14.29, position.dy + 44.84)\n            ..lineTo(position.dx + 20.35, position.dy + 25.93)\n            ..lineTo(position.dx + 39.85, position.dy + 24.51)\n            ..lineTo(position.dx, position.dy),\n          Paint()..color = userCursor.color);\n    }\n  }\n\n  @override\n  bool shouldRepaint(oldPainter) => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation in Kotlin\nDESCRIPTION: Method to sign out users and clear browser session and local storage in a Kotlin Supabase application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Out using Supabase\nDESCRIPTION: This Dart snippet demonstrates how to sign out a user using Supabase's `signOut` method. It calls the `signOut` function to remove the user's session and local storage data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Hackathon Page\nDESCRIPTION: YAML frontmatter configuration defining the metadata and settings for the hackathon event page, including title, dates, duration, and CTA information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_events/2024-12-05-launch-week-13-hackathon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Supabase Launch Week 13 Hackathon'\nmeta_title: 'Supabase Launch Week 13 Hackathon'\nsubtitle: 'Build an Open Source Project over 10 days. 5 prize categories.'\nmeta_description: 'Build an Open Source Project over 10 days. 5 prize categories.'\ntype: 'hackathon'\nonDemand: false\ndate: '2024-12-06T09:00:00.000-07:00'\nend_date: '2024-12-16T00:00:00.000-07:00'\ntimezone: 'America/Los_Angeles'\nduration: '10 days'\ncategories:\n  - hackathon\nmain_cta: { url: 'https://hackathon.dev/lw13', target: '_blank', label: 'Submit project' }\n---\n```\n\n----------------------------------------\n\nTITLE: Signing Out - Kotlin\nDESCRIPTION: This snippet details how to sign out a user from a Kotlin application using Supabase. It makes use of the `signOut` method to remove the user from the authentication context.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\\n\\tsupabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for Supabase's participation in the Next.js Conf event. It includes details such as the title, subtitle, event type, date, duration, and link to the conference website.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_events/2024-10-24__supabase-at-next-conf.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Supabase at Next.js Conf'\nsubtitle: 'where miami builds cool shit.'\ntype: 'talk'\nonDemand: false\ndisable_page_build: true\nlink: { href: https://nextjs.org/conf, target: '_blank' }\ndate: '2024-10-24T10:00:00.000-07:00'\ntimezone: 'America/Los_Angeles'\nduration: '5 hours'\ncategories:\n  - talk\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links for Navigation\nDESCRIPTION: Table of contents links using markdown syntax to navigate to different sections of the contributing guide.\nSOURCE: https://github.com/supabase/supabase/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1. Getting Started](#getting-started)\n[2. Issues](#issues)\n[3. Pull Requests](#pull-requests)\n```\n\n----------------------------------------\n\nTITLE: Form Handling and User Authentication Logic in Next.js\nDESCRIPTION: This snippet provides a user interface for login and signup forms, leveraging functions that manage authentication through Supabase. It requires './actions' for corresponding login and signup logic. Inputs include user email and password, with form submission triggering navigation through login or signup actions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { login, signup } from './actions'\n\nexport default function LoginPage() {\n  return (\n    <form>\n      <label htmlFor=\"email\">Email:</label>\n      <input id=\"email\" name=\"email\" type=\"email\" required />\n      <label htmlFor=\"password\">Password:</label>\n      <input id=\"password\" name=\"password\" type=\"password\" required />\n      <button formAction={login}>Log in</button>\n      <button formAction={signup}>Sign up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Flutter Figma Clone\nDESCRIPTION: Command to add required dependencies (supabase_flutter and uuid) to the Flutter project for building the Figma clone app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add supabase_flutter uuid\n```\n\n----------------------------------------\n\nTITLE: Installing Carousel Component via CLI\nDESCRIPTION: Command to install the carousel component using the shadcn-ui CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add carousel\n```\n\n----------------------------------------\n\nTITLE: Embedding Product Hunt Widget in Markdown\nDESCRIPTION: This snippet shows how to embed a Product Hunt widget using Markdown syntax. It includes a link to the Supabase UI product page on Product Hunt with an embedded image.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-01-20-product-hunt-golden-kitty-awards-2021.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Product hunt](https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=290768&theme=light)](https://www.producthunt.com/posts/supabase-ui)\n```\n\n----------------------------------------\n\nTITLE: Creating a Foreign Table for Snowflake Data in PostgreSQL\nDESCRIPTION: SQL command to create a foreign table that connects to Snowflake data warehouse, defining a table structure for order history data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table snowflake.order_history (\n  id bigint,\n  ts timestamptz,\n  event text,\n  user_id uuid\n)\nserver my_snowflake_warehouse\noptions (table 'order_history', rowid_column 'id');\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Custom Labels - React - JavaScript\nDESCRIPTION: This snippet shows how to create a Supabase client instance and implement the Auth component with custom localization variables for the login interface. It allows for customizing the labels for email, password, and other elements in the UI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nimport { Auth } from '@supabase/auth-ui-react'\\n\\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\\n\\nconst App = () => (\\n  <Auth\\n    supabaseClient={supabase}\\n    localization={{\\n      variables: {\\n        sign_in: {\\n          email_label: 'Your email address',\\n          password_label: 'Your strong password',\\n        },\\n      },\\n    }}\\n  />\\n)\n```\n\n----------------------------------------\n\nTITLE: Signing Out - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to sign a user out using the Supabase client. It calls the signOut() method on the auth object, which removes the user's session from the browser and clears any stored objects from localStorage. This function returns a data and error object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sort Dropdown in InnerSideMenu Search Component\nDESCRIPTION: Example demonstrating how to add a sort dropdown within the search input component. This allows users to sort menu items using different criteria such as alphabetical or reverse alphabetical order.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/inner-side-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<InnerSideBarFilters>\n  <InnerSideBarFilterSearchInput\n    name=\"search-input\"\n    placeholder=\"Search...\"\n    value={searchTerm}\n    onChange={(e) => setSearchTerm(e.target.value)}\n    aria-labelledby=\"Search items\"\n  >\n    <InnerSideBarFilterSortDropdown value={sort} onValueChange={(value) => setSort(value)}>\n      <InnerSideBarFilterSortDropdownItem value=\"alphabetical\">\n        Sort Alphabetically\n      </InnerSideBarFilterSortDropdownItem>\n      <InnerSideBarFilterSortDropdownItem value=\"reverse\">\n        Sort Reverse Alphabetically\n      </InnerSideBarFilterSortDropdownItem>\n    </InnerSideBarFilterSortDropdown>\n  </InnerSideBarFilterSearchInput>\n</InnerSideBarFilters>\n```\n\n----------------------------------------\n\nTITLE: Using Sign-Out Scopes JavaScript\nDESCRIPTION: Shows how to use different session termination scopes such as 'global' and 'local' in JavaScript using Supabase's client library. This involves both ending all sessions and selectively maintaining some active. Requires '@supabase/supabase-js' package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\\n\\n// ---cut---\\n// defaults to the global scope\\nawait supabase.auth.signOut()\\n\\n// sign out from the current session only\\nawait supabase.auth.signOut({ scope: 'local' })\n```\n\n----------------------------------------\n\nTITLE: Updating SAML Connection (Supabase CLI)\nDESCRIPTION: This command updates the configuration of an identity provider in Supabase Auth using the Supabase CLI. It requires specifying the provider ID and the project reference. Use `--help` to see all available flags for updating the connection settings, such as cryptographic keys, metadata URL, domains, and attribute mappings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase sso update <provider-id> --project-ref <your-project>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Queries in a React Component\nDESCRIPTION: React component that initializes a Supabase client and fetches instrument data from a database table. The component displays the retrieved instruments as a list and uses React hooks to manage state and side effects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\"https://<project>.supabase.co\", \"<your-anon-key>\");\n\nfunction App() {\n  const [instruments, setInstruments] = useState([]);\n\n  useEffect(() => {\n    getInstruments();\n  }, []);\n\n  async function getInstruments() {\n    const { data } = await supabase.from(\"instruments\").select();\n    setInstruments(data);\n  }\n\n  return (\n    <ul>\n      {instruments.map((instrument) => (\n        <li key={instrument.name}>{instrument.name}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Postgres notifications in Elixir with Postgrex\nDESCRIPTION: Code showing how to implement Postgres' NOTIFY/LISTEN functionality in Elixir using the Postgrex library. This demonstrates connecting to Postgres, listening on a channel, and sending notifications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-09-elixir-clustering-using-postgres.mdx#2025-04-22_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nMix.install([{:postgrex, \"~> 0.17.3\"}])\nconfig = [\n  hostname: \"localhost\",\n  username: \"postgres\",\n  password: \"postgres\",\n  database: \"postgres\",\n  port: 5432\n]\n{:ok, db_notification_pid} = Postgrex.Notifications.start_link(config)\nPostgrex.Notifications.listen!(db_notification_pid, \"channel\")\n{:ok, db_conn_pid} = Postgrex.start_link(config)\nPostgrex.query!(db_conn_pid, \"NOTIFY channel, 'payload'\", [])\n\nreceive do msg -> IO.inspect(msg) end\n# Mailbox will have a message with the following content:\n# {:notification, #PID<0.223.0>, #Reference<0.57446457.3896770561.212335>, \"channel\", \"test\"}\n```\n\n----------------------------------------\n\nTITLE: Using the Dropzone Component with Supabase Upload\nDESCRIPTION: This snippet demonstrates how to use the Dropzone component by importing necessary elements and configuring file upload settings using a custom hook. It sets the allowed MIME types and file upload limits.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/dropzone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'\nimport { useSupabaseUpload } from '@/hooks/use-supabase-upload'\n\nconst FileUploadDemo = () => {\n  const props = useSupabaseUpload({\n    bucketName: 'test',\n    path: 'test',\n    allowedMimeTypes: ['image/*'],\n    maxFiles: 2,\n    maxFileSize: 1000 * 1000 * 10, // 10MB,\n  })\n\n  return (\n    <div className=\"w-[500px]\">\n      <Dropzone {...props}>\n        <DropzoneEmptyState />\n        <DropzoneContent />\n      </Dropzone>\n    </div>\n  )\n}\n\nexport { FileUploadDemo }\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In with Swift for iOS\nDESCRIPTION: Swift code to implement native Google sign-in with Supabase in an iOS app. It uses the GoogleSignIn-iOS package to obtain an ID token and access token, which are then used to sign in to Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport GoogleSignIn\n\nclass GoogleSignInViewController: UIViewController {\n  ...\n\n  func googleSignIn() async throws {\n    let result = try await GIDSignIn.sharedInstance.signIn(withPresenting: self)\n\n    guard let idToken = result.user.idToken?.tokenString else {\n      print(\"No idToken found.\")\n      return\n    }\n\n    let accessToken = result.user.accessToken.tokenString\n\n    try await supabase.auth.signInWithIdToken(\n      credentials: OpenIDConnectCredentials(\n        provider: .google,\n        idToken: idToken,\n        accessToken: accessToken\n      )\n    )\n  }\n  ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation\nDESCRIPTION: Basic example demonstrating how to use the Popover component with trigger and content elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/popover.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Popover>\n  <PopoverTrigger>Open</PopoverTrigger>\n  <PopoverContent>Place content for the popover here.</PopoverContent>\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: HTML Supabase Badge (Dark)\nDESCRIPTION: HTML implementation of the Supabase dark-themed badge with configurable dimensions and alt text\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.sv.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://supabase.com\">\n  <img\n    width=\"168\"\n    height=\"30\"\n    src=\"https://supabase.com/badge-made-with-supabase-dark.svg\"\n    alt=\"Made with Supabase\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Supabase JavaScript Client\nDESCRIPTION: Example of using the Supabase JavaScript client to query the normalized data. The code demonstrates how to fetch a user by name along with their related orders, showing the relational capabilities of Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient('https://<your-project>.supabase.co', '<your-api-key>')\n\n// Fetch user named John along with their orders\nconst { data, error } = await supabase\n  .from('users')\n  .select(\n    `\n    id, name,\n    orders (product, quantity)\n  `\n  )\n  .eq('name', 'John')\n\nif (error) {\n  console.error(error)\n} else {\n  console.log(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Input JSON Structure for SMS Hook\nDESCRIPTION: Sample JSON structure showing the user and SMS data passed to the SMS hook, including user authentication details and OTP information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"\",\n    \"phone\": \"+1333363128\",\n    \"phone_confirmed_at\": \"2024-05-13T11:52:48.157306Z\",\n    \"confirmation_sent_at\": \"2024-05-14T12:31:52.824573Z\",\n    \"confirmed_at\": \"2024-05-13T11:52:48.157306Z\",\n    \"phone_change_sent_at\": \"2024-05-13T11:47:02.183064Z\",\n    \"last_sign_in_at\": \"2024-05-13T11:52:48.162518Z\",\n    \"app_metadata\": {\n      \"provider\": \"phone\",\n      \"providers\": [\"phone\"]\n    },\n    \"user_metadata\": {},\n    \"identities\": [\n      {\n        \"identity_id\": \"3be5e552-65aa-41d9-9db9-2a502f845459\",\n        \"id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\n        \"user_id\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\",\n        \"identity_data\": {\n          \"email_verified\": false,\n          \"phone\": \"+1612341244428\",\n          \"phone_verified\": true,\n          \"sub\": \"6481a5c1-3d37-4a56-9f6a-bee08c554965\"\n        },\n        \"provider\": \"phone\",\n        \"last_sign_in_at\": \"2024-05-13T11:52:48.155562Z\",\n        \"created_at\": \"2024-05-13T11:52:48.155599Z\",\n        \"updated_at\": \"2024-05-13T11:52:48.159391Z\"\n      }\n    ],\n    \"created_at\": \"2024-05-13T11:45:33.7738Z\",\n    \"updated_at\": \"2024-05-14T12:31:52.82475Z\",\n    \"is_anonymous\": false\n  },\n  \"sms\": {\n    \"otp\": \"561166\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentence Transformer Model\nDESCRIPTION: Sets up the sentence transformer model for creating 384-dimensional text embeddings that capture semantic meaning of reviews.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')\n```\n\n----------------------------------------\n\nTITLE: React Component Organization Example Structure\nDESCRIPTION: An example showing the recommended folder structure for organizing components, with components grouped into folders with supporting files when appropriate.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/components/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomponents/ui\n- SampleComponentA\n  - SampleComponentA.tsx\n  - SampleComponentA.constants.ts\n  - SampleComponentA.utils.ts\n  - SampleComponentA.types.ts\n  - index.ts\n- SampleComponentB.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase.js v2 via npm\nDESCRIPTION: Command to install the latest version of @supabase/supabase-js using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Local Testing Configuration in TOML\nDESCRIPTION: Configuration settings for testing background tasks locally with Supabase CLI, using per_worker policy to prevent automatic termination.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/background-tasks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[edge_runtime]\npolicy = \"per_worker\"\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase locally using the CLI\nDESCRIPTION: This command starts the Supabase environment locally, which is a prerequisite for running the og-images function locally. It uses the Supabase CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/og-images/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase start\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Email Content with Go Templates\nDESCRIPTION: A Go Template example that renders different email content based on the user's domain. This demonstrates how to personalize emails for different user segments like early access users versus regular users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{{ if eq .Data.Domain \"https://www.example.com\" }}\n<h1>Welcome to Our Database Service!</h1>\n  <p>Dear Developer,</p>\n  <p>Welcome to Billy, the scalable developer platform!</p>\n  <p>Best Regards,<br>\nBilly Team</p>\n{{ else if eq .Data.Domain \"https://www.earlyaccess.trial.com\" }}\n<h1>Welcome to Our Database Service!</h1>\n  <p>Dear Developer,</p>\n  <p>Welcome Billy, the scalable developer platform!</p>\n  <p> As an early access member, you have access to select features like Point To Space Restoration.</p>\n  <p>Best Regards,<br>\nBilly Team</p>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Snaplet Seed Data Generation Command\nDESCRIPTION: Command to generate seed data for database using Snaplet\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nnpx snaplet generate --sql > supabase/seed.sql\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration Template\nDESCRIPTION: Command to create a local environment configuration file by copying the example template.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-ratelimit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp supabase/.env.local.example supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Updating Server Components\nDESCRIPTION: Example of updating a server component to use the new server client utility function instead of the deprecated createServerComponentClient.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// replace\nimport { cookies } from 'next/headers';\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs';\n\n// with\nimport { createClient } from '@/utils/supabase/server';\n\nexport default async function Page() {\n\t// replace\n\tconst cookieStore = cookies();\n\tconst supabase = createServerComponentClient<Database>({\n\t\tcookies: () => cookieStore\n\t});\n\n\t// with\n\tconst supabase = createClient();\n\n\treturn...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Group Card Implementation in React\nDESCRIPTION: Demonstrates basic usage of the RadioGroupCard component with RadioGroupCardItem children. It sets 'comfortable' as the default selected value and defines three radio options with their respective values, IDs, and labels.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group-card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroupCard defaultValue=\"comfortable\">\n  <RadioGroupCardItem value=\"default\" id=\"r1\" label=\"Default\" />\n  <RadioGroupCardItem value=\"comfortable\" id=\"r2\" label=\"Comfortable\" />\n  <RadioGroupCardItem value=\"compact\" id=\"r3\" label=\"Compact\" />\n</RadioGroupCard>\n```\n\n----------------------------------------\n\nTITLE: Starting the Nuxt development server\nDESCRIPTION: This command starts the Nuxt development server, allowing you to view your application at http://localhost:3000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: WebSocket Error Message - Too Many Connections\nDESCRIPTION: Error message returned when a project exceeds its concurrent connection limit.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/quotas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntoo_many_connections\n```\n\n----------------------------------------\n\nTITLE: Direct Database Connection String Format in PostgreSQL\nDESCRIPTION: Example connection string format for directly connecting to a Supabase PostgreSQL database without using the connection pooler.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npostgresql://postgres:[PASSWORD]@db.[PROJECT REF].supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Rendering Mobile Tutorial Cards with JSX\nDESCRIPTION: This code renders a grid of tutorial cards for various mobile platforms. It maps through an array of tutorial objects containing title, description, link and icon information, generating a linked card component for each platform that integrates with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid lg:grid-cols-12 gap-6 not-prose\">\n  {[\n    {\n      title: 'Flutter',\n      href: '/guides/getting-started/tutorials/with-flutter',\n      description:\n        'Learn how to build a user management app with Flutter and Supabase Database, Auth, and Storage functionality.',\n      icon: '/docs/img/icons/flutter-icon'\n    },\n    {\n      title: 'Expo React Native',\n      href: '/guides/getting-started/tutorials/with-expo-react-native',\n      description:\n        'Learn how to build a user management app with Expo React Native and Supabase Database, Auth, and Storage functionality.',\n      icon: '/docs/img/icons/expo-icon',\n      hasLightIcon: true\n    },\n    {\n      title: 'Android Kotlin',\n      href: '/guides/getting-started/tutorials/with-kotlin',\n      description:\n        'Learn how to build a product management app with Android and Supabase Database, Auth, and Storage functionality.',\n      icon: '/docs/img/icons/kotlin-icon'\n    },\n    {\n      title: 'iOS Swift',\n      href: '/guides/getting-started/tutorials/with-swift',\n      description:\n        'Learn how to build a user management app with iOS and Supabase Database, Auth, and Storage functionality.',\n      icon: '/docs/img/icons/swift-icon'\n    },\n    {\n      title: 'Ionic React',\n      href: '/guides/getting-started/tutorials/with-ionic-react',\n      description:\n        'Learn how to build a user management app with Ionic React and Supabase Database, Auth, and Storage functionality.',\n      icon: '/docs/img/icons/ionic-icon'\n    },\n    {\n      title: 'Ionic Vue',\n      href: '/guides/getting-started/tutorials/with-ionic-vue',\n      description:\n        'Learn how to build a user management app with Ionic Vue and Supabase Database, Auth, and Storage functionality.',\n      icon: '/docs/img/icons/ionic-icon'\n    },\n    {\n      title: 'Ionic Angular',\n      href: '/guides/getting-started/tutorials/with-ionic-angular',\n      description:\n        'Learn how to build a user management app with Ionic Angular and Supabase Database, Auth, and Storage functionality.',\n      icon: '/docs/img/icons/ionic-icon'\n    }\n  ].map((item) => {\n    return (\n      <Link href={`${item.href}`} key={item.title} passHref className={'col-span-4'}>\n        <GlassPanel\n          title={item.title}\n          span=\"col-span-6\"\n          background={false}\n          icon={item.icon}\n          hasLightIcon={item.hasLightIcon}\n        >\n          {item.description}\n        </GlassPanel>\n      </Link>\n    )\n\n})}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Receiving Broadcast Messages\nDESCRIPTION: Implementation of message reception handlers for broadcast messages on a specific channel\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChannel = supabase.channel('test-channel')\n\nfunction messageReceived(payload) {\n  console.log(payload)\n}\n\nmyChannel\n  .on(\n    'broadcast',\n    { event: 'shout' },\n    (payload) => messageReceived(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal myChannel = supabase.channel('test-channel');\n\nvoid messageReceived(payload) {\n  print(payload);\n}\n\nmyChannel\n    .onBroadcast(\n        event: 'shout',\n        callback: (payload) => messageReceived(payload)\n    )\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Jackson Serialization\nDESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with Jackson Serialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = JacksonSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Stack\nDESCRIPTION: Command to start the local Supabase stack\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Querying Write Ahead Log (WAL) Size in Postgres\nDESCRIPTION: This SQL query calculates and displays the total size of Write Ahead Log (WAL) files stored on disk using the pg_ls_waldir function and pg_size_pretty for human-readable output.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_size_pretty(sum(size)) as wal_size from pg_ls_waldir();\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with KotlinX Serialization\nDESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with KotlinX Serialization, including the option to provide a custom Json instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    //Already the default serializer, but you can provide a custom Json instance (optional):\n    defaultSerializer = KotlinXSerializer(Json {\n        //apply your custom config\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Migration History with Supabase CLI - Bash\nDESCRIPTION: This snippet provides commands for preserving migration history from an old Supabase database when restoring it into a new project. It involves dumping and restoring the migration records from the old database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db dump --db-url \"$OLD_DB_URL\" -f history_schema.sql --schema supabase_migrations\\nsupabase db dump --db-url \"$OLD_DB_URL\" -f history_data.sql --use-copy --data-only --schema supabase_migrations\\npsql \\\n  --single-transaction \\\n  --variable ON_ERROR_STOP=1 \\\n  --file history_schema.sql \\\n  --file history_data.sql \\\n  --dbname \"$NEW_DB_URL\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables File for Supabase Credentials\nDESCRIPTION: Sets up a .env file with environment variables for the Supabase URL and anonymous key, which are required for connecting to the Supabase backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPUBLIC_SUPABASE_URL=\"YOUR_SUPABASE_URL\"\nPUBLIC_SUPABASE_ANON_KEY=\"YOUR_SUPABASE_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Storage Logs by HTTP Method\nDESCRIPTION: This SQL query retrieves storage logs and filters them based on the HTTP method used in the request. It extracts the ID, timestamp, event message, and request method from the storage logs' metadata, specifically targeting POST requests in this example.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect id, storage_logs.timestamp, event_message, r.method\nfrom\n  storage_logs\n  cross join unnest(metadata) as m\n  cross join unnest(m.req) as r\nwhere r.method in (\"POST\")\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL-G restore_command for Recovery\nDESCRIPTION: Command to modify the PostgreSQL configuration to set up the restore_command, which instructs PostgreSQL how to retrieve archived WAL files during recovery.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"restore_command = '/usr/bin/envdir /etc/wal-g.d/env /usr/local/bin/wal-g wal-fetch \\\"%f\\\" \\\"%p\\\" >> /tmp/wal.log 2>&1'\" >> /etc/postgresql/12/main/postgresql.conf\n```\n\n----------------------------------------\n\nTITLE: Error Detection Query\nDESCRIPTION: Complex SQL query for finding API errors using regex patterns to match specific tables and columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(timestamp as datetime) as timestamp,\n  status_code,\n  url,\n  event_message\nfrom edge_logs\ncross join unnest(metadata) as metadata\ncross join unnest(response) AS request;\ncross join unnest(response) AS response;\nwhere\n  -- find all errors\n  status_code >= 400\n    and\n  -- find queries featuring the a specific <table_name> and <column_name>\n  (\n    regexp_contains(url, '<table_name>')\n    and\n    regexp_contains(event_message, '<column_name1>|<column_name2>')\n  )\n```\n\n----------------------------------------\n\nTITLE: Querying Failed pg_cron Jobs in PostgreSQL\nDESCRIPTION: This SQL query examines the cron.job_run_details table to identify failed cron jobs from the past 5 days. It returns all columns for jobs with a status other than 'succeeded' or 'running', helping to diagnose issues with scheduled jobs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM cron.job_run_details\nWHERE\n    (status <> 'succeeded' AND status <> 'running')\n        AND\n     start_time > NOW() - INTERVAL '5 days'\nORDER BY start_time DESC\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Examining Query Plans to Determine Cost Thresholds in PostgreSQL\nDESCRIPTION: Uses EXPLAIN to analyze the cost of two queries - a targeted index scan and a full table scan - to help determine an appropriate value for plan_filter.statement_cost_limit.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nexplain select * from book where id =1;\n                                QUERY PLAN\n---------------------------------------------------------------------------\n Index Only Scan using book_pkey on book  (cost=0.28..2.49 rows=1 width=4)\n   Index Cond: (id = 1)\n(2 rows)\n\nexplain select * from book;\n                       QUERY PLAN\n---------------------------------------------------------\n Seq Scan on book  (cost=0.00..135.00 rows=10000 width=4)\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Deploying Discord Bot Function with Supabase CLI\nDESCRIPTION: These Supabase CLI commands deploy the Discord bot function and set the required secret for the Discord public key.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/discord-bot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy discord-bot --no-verify-jwt\nsupabase secrets set DISCORD_PUBLIC_KEY=your_public_key\n```\n\n----------------------------------------\n\nTITLE: Checking Statement Timeout Configuration\nDESCRIPTION: SQL command to verify that the statement timeout has been successfully disabled for the current session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nshow statement_timeout;\n```\n\n----------------------------------------\n\nTITLE: Deploying Metabase with Docker\nDESCRIPTION: Commands to pull and run Metabase in a Docker container. This sets up a local Metabase server available at http://localhost:3000/setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/metabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull metabase/metabase:latest\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -p 3000:3000 --name metabase metabase/metabase\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Container\nDESCRIPTION: HTML code snippet for embedding a YouTube video with responsive container styling, including proper iframe attributes for security and user controls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-10-launch-week-5-hackathon.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/rI3Ik7GyYEw\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Hypothetical Index and Analyzing Query Plan with HypoPG\nDESCRIPTION: SQL commands to create a hypothetical index using HypoPG and generate an explain plan to analyze its impact on query performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from hypopg_create_index('create index on account(id)');\n\nexplain select * from account where id=1;\n```\n\n----------------------------------------\n\nTITLE: Syncing and Tracking State in Kotlin\nDESCRIPTION: This snippet outlines how to track presence state in Kotlin, with considerations for handling join and leave events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval roomOne = supabase.channel(\"room_01\")\nval presenceFlow: Flow<PresenceAction> = roomOne.presenceChangeFlow()\npresenceFlow\n    .onEach {\n        println(it.joins) //You can also use it.decodeJoinsAs<YourType>()\n        println(it.leaves) //You can also use it.decodeLeavesAs<YourType>()\n    }\n    .launchIn(yourCoroutineScope) //You can also use .collect { } here\n\nroomOne.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Creating List Partitioned Customers Table in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to create a list partitioned table for customer data based on country. It creates a parent table and two partitions for customers in the Americas and Asia.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Create the partitioned table\ncreate table customers (\n    id bigint generated by default as identity,\n    name text,\n    country text,\n\n    -- We need to include all the\n    -- partitioning columns in constraints:\n    primary key (country, id)\n)\npartition by list(country);\n\ncreate table customers_americas\n\tpartition of customers\n\tfor values in ('US', 'CANADA');\n\ncreate table customers_asia\n\tpartition of customers\n  for values in ('INDIA', 'CHINA', 'JAPAN');\n```\n\n----------------------------------------\n\nTITLE: Remix OAuth Callback Handler\nDESCRIPTION: Implementation of OAuth callback handling in Remix, managing cookies and code exchange process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect, type LoaderFunctionArgs } from '@remix-run/node'\nimport { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const requestUrl = new URL(request.url)\n  const code = requestUrl.searchParams.get('code')\n  const next = requestUrl.searchParams.get('next') || '/'\n  const headers = new Headers()\n\n  if (code) {\n    const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {\n      cookies: {\n        getAll() {\n          return parseCookieHeader(request.headers.get('Cookie') ?? '')\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            headers.append('Set-Cookie', serializeCookieHeader(name, value, options))\n          )\n        },\n      },\n    })\n\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n\n    if (!error) {\n      return redirect(next, { headers })\n    }\n  }\n\n  // return the user to an error page with instructions\n  return redirect('/auth/auth-code-error', { headers })\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Realtime Socket Connection in Python\nDESCRIPTION: This code snippet shows how to use the new close() method in the Supabase Realtime library to explicitly close socket connections. It sets up a Realtime client, connects, subscribes to a channel, and then closes the connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-python-support.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom realtime import AsyncRealtimeClient\n\ndef callback1(payload):\n    print(\"Callback 1: \", payload)\n\nSUPABASE_ID: str = os.environ.get(\"SUPABASE_ID\")\nAPI_KEY: str = os.environ.get(\"SUPABASE_KEY\")\n\nURL: str = f\"wss://{SUPABASE_ID}.supabase.co/realtime/v1/websocket\"\n\nclient = AsyncRealtimeClient(URL, API_KEY)\nawait client.connect()\n\nchannel_1 = s.channel(\"realtime:public:sample\")\nchannel_1.subscribe().on_postgres_changes(\"INSERT\", callback1)\n\nawait client.listen()\nawait client.close()\n\n```\n\n----------------------------------------\n\nTITLE: Running Supabase OpenAI Function Locally\nDESCRIPTION: Starts the Supabase Functions server locally with environment variables and disabled JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --env-file ./supabase/.env.local --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Environment Connections in .env File\nDESCRIPTION: Environment configuration for Prisma in serverless deployments. This setup uses separate connection strings: one for the application using transaction mode (6543) and another for migrations using session mode (5432).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n# Used in your application (use transaction mode)\nDATABASE_URL=\"postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true\"\n\n# Used for Prisma Migrations (use session mode or direct connection)\nDIRECT_URL=\"postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling an Edge Function to Run Every Minute with pg_cron\nDESCRIPTION: SQL command that configures pg_cron to call an Edge Function every minute using pg_net. The function retrieves credentials from Vault and makes a POST request to the function endpoint with the current timestamp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/schedule-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cron.schedule(\n    'invoke-function-every-minute',\n    '* * * * *', -- every minute\n    $$\n    select\n      net.http_post(\n          url:= (select decrypted_secret from vault.decrypted_secrets where name = 'project_url') || '/functions/v1/function-name',\n          headers:=jsonb_build_object(\n            'Content-type', 'application/json',\n            'Authorization', 'Bearer ' || (select decrypted_secret from vault.decrypted_secrets where name = 'anon_key')\n          ),\n          body:=concat('{\"time\": \"', now(), '\"}')::jsonb\n      ) as request_id;\n    $$\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Avatar Storage and Access Control in SQL\nDESCRIPTION: Sets up a storage bucket for avatars and creates policies for public access, uploading, and updating avatar images. Ensures users can only update their own avatars.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage/security/access-control#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update their own avatar.\" on storage.objects\n  for update using ((select auth.uid()) = owner) with check (bucket_id = 'avatars');\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Supabase Environment with CLI\nDESCRIPTION: Basic commands to initialize and link a local Supabase project with a remote instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\nsupabase login\nsupabase link --project-ref $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization Plugin in Maven POM\nDESCRIPTION: Adds the KotlinX Serialization plugin to a Kotlin project using Maven. This configuration enables the kotlinx-serialization compiler plugin for Maven projects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <compilerPlugins>\n                    <plugin>kotlinx-serialization</plugin>\n                </compilerPlugins>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>org.jetbrains.kotlin</groupId>\n                    <artifactId>kotlin-maven-serialization</artifactId>\n                    <version>${kotlin.version}</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Initializing Drizzle ORM with Vercel Postgres in TypeScript\nDESCRIPTION: Sets up a Drizzle ORM configuration for Vercel Postgres, defining a users table schema and creating a database connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres/serverless-drivers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pgTable, serial, text, timestamp, uniqueIndex } from 'drizzle-orm/pg-core'\nimport { InferSelectModel, InferInsertModel } from 'drizzle-orm'\nimport { sql } from '@vercel/postgres'\nimport { drizzle } from 'drizzle-orm/vercel-postgres'\n\nexport const UsersTable = pgTable(\n  'users',\n  {\n    id: serial('id').primaryKey(),\n    name: text('name').notNull(),\n    email: text('email').notNull(),\n    image: text('image').notNull(),\n    createdAt: timestamp('createdAt').defaultNow().notNull(),\n  },\n  (users) => {\n    return {\n      uniqueIdx: uniqueIndex('unique_idx').on(users.email),\n    }\n  }\n)\n\nexport type User = InferSelectModel<typeof UsersTable>\nexport type NewUser = InferInsertModel<typeof UsersTable>\n\n// Connect to Vercel Postgres\nexport const db = drizzle(sql)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JWT for Realtime in Python\nDESCRIPTION: This Python snippet demonstrates how to set a custom JWT token for Supabase Realtime authentication. The `set_auth` method is used to provide the token.  A Realtime channel is then set up to listen for Postgres changes on a specific table with a filter applied, and then subscribed to.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nsupabase.realtime.set_auth('your-custom-jwt')\n\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"UPDATE\",\n  schema=\"public\",\n  table=\"products\",\n  filter=\"name=in.(red, blue, yellow)\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Storing Realtime Chat Messages in React\nDESCRIPTION: This snippet demonstrates how to persist chat messages using the onMessage prop of the RealtimeChat component. It defines a handleMessage function that's triggered whenever new messages are sent.  This function asynchronously stores the messages, likely in a database, using the storeMessages function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-chat.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\nimport { storeMessages } from '@/lib/store-messages'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n  const handleMessage = (messages: ChatMessage[]) => {\n    // Store messages in your database\n    await storeMessages(messages)\n  }\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" onMessage={handleMessage} />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Function Secrets from Environment File\nDESCRIPTION: Command to upload environment variables from a local .env file to Supabase project secrets. This allows the function to access necessary API keys and configuration values when deployed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-transcribe-speech.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file supabase/functions/.env\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Foreign Key in Postgres SQL\nDESCRIPTION: Demonstrates proper table creation with an identity-generated primary key, non-null columns, and a foreign key reference. Includes a table comment describing its purpose.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table books (\n  id bigint generated always as identity primary key,\n  title text not null,\n  author_id bigint references authors (id)\n);\ncomment on table books is 'A list of all the books in the library.';\n```\n\n----------------------------------------\n\nTITLE: SAML 2.0 Attribute Statement Example\nDESCRIPTION: This XML snippet represents a SAML 2.0 Attribute Statement that includes user attributes such as `mail` and `givenName`. These attributes can be mapped to user properties in Supabase Auth using attribute mapping configurations. This example shows the structure of the XML assertion that will be exchanged between the IdP and Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n\"<saml:AttributeStatement>\n  <!-- will be mapped to the email key -->\n  <saml:Attribute\n    Name=\\\"mail\\\"\n    NameFormat=\\\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\\\"\n    >\n    <saml:AttributeValue xsi:type=\\\"xs:string\\\">\n      valid.email@supabase.io\n    </saml:AttributeValue>\n  </saml:Attribute>\n\n  <!-- will be mapped to the first_name key -->\n  <saml:Attribute\n    Name=\\\"givenName\\\"\n    NameFormat=\\\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\\\"\n    >\n    <saml:AttributeValue xsi:type=\\\"xs:string\\\">\n      Jane Doe\n    </saml:AttributeValue>\n  </saml:Attribute>\n</saml:AttributeStatement>\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Supabase Development Environment\nDESCRIPTION: Command to stop the local Supabase development environment before generating migrations.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/declarative-database-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase stop\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase\nDESCRIPTION: This snippet outlines the required environment variables to be placed in a .env file for Supabase authentication setup. It specifies the Supabase URL and anon key, which are essential for connecting the application to the Supabase backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/social-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for macOS\nDESCRIPTION: JSON configuration for running an MCP server on macOS using npx to execute the Postgres server module. Requires replacing the connection string placeholder with actual database credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_postgres_config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"<connection-string>\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Generation Example\nDESCRIPTION: Example showing improved TypeScript type generation with helper types for better developer experience\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nlet movie: Database['public']['Tables']['movies']['Row'] = // ...\n\n// After\nlet movie: Tables<'movies'> = // ...\n```\n\n----------------------------------------\n\nTITLE: Attempting Access Without Privileges\nDESCRIPTION: Example showing permission error when attempting to access table without proper privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# as senior_dev\npostgres=> select * from public.apps;\nERROR:  permission denied for table apps\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Database using JavaScript Client in Edge Function\nDESCRIPTION: This snippet demonstrates how to use the Supabase JavaScript client within an Edge Function to query a database. It sets up a Deno server, creates a Supabase client with environment variables, and performs a select query on a 'countries' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-12-edge-functions-faster-smaller.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from 'npm:@supabase/supabase-js@2'\n\nDeno.serve(async (_req) => {\n  try {\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }\n    )\n\n    const { data, error } = await supabase.from('countries').select('*')\n\n    if (error) {\n      throw error\n    }\n\n    return new Response(JSON.stringify({ data }), {\n      headers: { 'Content-Type': 'application/json' },\n      status: 200,\n    })\n  } catch (err) {\n    return new Response(String(err?.message ?? err), { status: 500 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Function for RPC\nDESCRIPTION: SQL code to create a database function that can be called via RPC. This function accepts an array of UUIDs, logs the array size, and returns the array.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function example(id uuid[])\nreturns uuid[]\nlanguage plpgsql\nas $$\nbegin\n raise log 'the function example was called with an array size of: %', (select array_length(id, 1));\n return id;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Displaying GraphQL PostgreSQL Extension Image in Markdown\nDESCRIPTION: This code snippet shows how to embed an image of the GraphQL PostgreSQL extension in a Markdown document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-launch-week-three-friday-five-more-things.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![graphQL.png](/images/blog/launch-week-three/five-more-things/graphQL.png)\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Ownership in PostgreSQL\nDESCRIPTION: This snippet shows how to view the owner of a specific table using the \\dt command in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> \\dt public.apps\n          List of relations\n┌────────┬──────┬───────┬────────────┐\n│ Schema │ Name │ Type  │   Owner    │\n├────────┼──────┼───────┼────────────┤\n│ public │ apps │ table │ junior_dev │\n└────────┴──────┴───────┴────────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP for Supabase in Visual Studio Code\nDESCRIPTION: JSON configuration for connecting Supabase to Visual Studio Code using the Model Context Protocol (MCP). This snippet is a placeholder for the actual configuration, which is included via a partial template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/mcp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n<$Partial path=\"mcp_supabase_vscode_config.mdx\" />\n```\n\n----------------------------------------\n\nTITLE: Supabase Architecture Overview\nDESCRIPTION: Detailed breakdown of core components used in Supabase's open-source platform, including PostgreSQL, Realtime, PostgREST, and other key technologies\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.zh-tw.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [PostgreSQL](https://www.postgresql.org/) is an object-relational database system\n- [Realtime](https://github.com/supabase/realtime) allows websocket monitoring of PostgreSQL changes\n- [PostgREST](http://postgrest.org/) converts PostgreSQL database to RESTful API\n- [pg_graphql](http://github.com/supabase/pg_graphql/) provides GraphQL API extension\n- [Storage](https://github.com/supabase/storage-api) manages file storage with Postgres permissions\n- [postgres-meta](https://github.com/supabase/postgres-meta) offers RESTful management for Postgres\n- [GoTrue](https://github.com/netlify/gotrue) handles user authentication\n- [Kong](https://github.com/Kong/kong) serves as cloud-native API gateway\n```\n\n----------------------------------------\n\nTITLE: Viewing Log-Related Settings in Postgres\nDESCRIPTION: SQL query to view all log-related settings in Postgres. It filters the pg_settings table for categories related to logging and log configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n-- view all log related settings\nselect *\nfrom pg_settings\nwhere\n  (\n    category like 'Reporting and Logging / What to Log'\n    or category like 'Reporting and Logging / When to Log'\n    or category = 'Customized Options'\n  )\n  and name like '%log%';\n```\n\n----------------------------------------\n\nTITLE: SNI-based Host Resolution Pattern\nDESCRIPTION: Example of the hostname pattern used for routing connections via Server Name Indication (SNI) in the pg-gateway implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-10-database-build-live-share.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n123.browser.db.build\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Send Messages in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure a Supabase Realtime channel to receive its own broadcast messages. It sets the 'self' parameter to true and includes event handling and message sending.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChannel = supabase.channel('room-2', {\n  config: {\n    broadcast: { self: true },\n  },\n})\n\nmyChannel.on(\n  'broadcast',\n  { event: 'test-my-messages' },\n  (payload) => console.log(payload)\n)\n\nmyChannel.subscribe((status) => {\n  if (status !== 'SUBSCRIBED') { return }\n  channelC.send({\n    type: 'broadcast',\n    event: 'test-my-messages',\n    payload: { message: 'talking to myself' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Hover Card Components\nDESCRIPTION: TypeScript/React code showing how to import the hover card component and its subcomponents\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/hover-card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from '@/components/ui/hover-card'\n```\n\n----------------------------------------\n\nTITLE: CSV Download Demo Video Element\nDESCRIPTION: HTML video element showing the CSV download functionality. Configured with standard video attributes and controls for demonstrating data manipulation features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-supabase-alpha-july-2020.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/csv-download-zoom.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in React\nDESCRIPTION: This example demonstrates how to use the Tabs component in a React application, including setting up tabs and their content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tabs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs defaultValue=\"account\" className=\"w-[400px]\">\n  <TabsList>\n    <TabsTrigger value=\"account\">Account</TabsTrigger>\n    <TabsTrigger value=\"password\">Password</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"account\">Make changes to your account here.</TabsContent>\n  <TabsContent value=\"password\">Change your password here.</TabsContent>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: pg_net Response Collection\nDESCRIPTION: SQL queries showing how to collect and process responses from pg_net HTTP requests, including JSON response handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  net.http_collect_response(1);\n\nselect\n    (response).body::json\nfrom\n    net.http_collect_response(request_id:=1);\n```\n\n----------------------------------------\n\nTITLE: Setting API Key as Environment Variable\nDESCRIPTION: Command to store the Supabase anonymous API key as an environment variable for cleaner subsequent API requests. This is a best practice for handling API credentials in command line operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ANON_KEY='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVic3NpYnpzbnd0d2JidmJoYnZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzEwMTYxMjksImV4cCI6MjA0NjU5MjEyOX0.hUbR1lqlGnQZlvjOgt4Wzn9iHidJP4iVHyWE76d9FUk'\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations with Legend-State and Supabase\nDESCRIPTION: Shows how to add new todos and toggle their completion status using Legend-State. Uses UUID generation for client-side ID creation before syncing with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// [...]\nimport 'react-native-get-random-values'\nimport { v4 as uuidv4 } from 'uuid'\n// [...]\n\n// Provide a function to generate ids locally\nconst generateId = () => uuidv4()\n\nexport function addTodo(text: string) {\n  const id = generateId()\n  // Add keyed by id to the todos$ observable to trigger a create in Supabase\n  todos$[id].assign({\n    id,\n    text,\n  })\n}\n\nexport function toggleDone(id: string) {\n  todos$[id].done.set((prev) => !prev)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Client Utility Function\nDESCRIPTION: Implementation of a utility function to create a server-side Supabase client using createServerClient from the SSR package and Next.js cookies API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/supabase/server.ts\nimport { createServerClient, type CookieOptions } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\n\nexport function createClient() {\n  const cookieStore = cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create first page with Supabase data\nDESCRIPTION: This code demonstrates creating a simple page in SvelteKit that fetches data from Supabase.  It uses `PageServerLoad` to query the 'colors' table and passes the retrieved data to the Svelte component for rendering a list of colors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad } from './$types'\n\nexport const load: PageServerLoad = async ({ locals: { supabase } }) => {\n  const { data: colors } = await supabase.from('colors').select('name').limit(5).order('name')\n  return { colors: colors ?? [] }\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { data } = $props()\n  let { colors } = $derived(data)\n</script>\n\n<h1>Welcome to Supabase!</h1>\n<ul>\n  {#each colors as color}\n    <li>{color.name}</li>\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Detecting Viewport Intersection for Infinite Scroll\nDESCRIPTION: Implements logic to check if the bottom of the tickets container intersects with the bottom of the viewport, triggering the loading of more tickets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef, useState } from 'react'\n\n// ...\n\nconst containerRef = useRef(null)\nconst [offset, setOffset] = useState(1)\nconst [isInView, setIsInView] = useState(false)\n\nconst handleScroll = (container) => {\n  if (containerRef.current && typeof window !== 'undefined') {\n    const container = containerRef.current\n    const { bottom } = container.getBoundingClientRect()\n    const { innerHeight } = window\n    setIsInView((prev) => bottom <= innerHeight)\n  }\n}\n\nuseEffect(() => {\n  if (isInView) {\n    loadMoreUsers(offset)\n  }\n}, [isInView])\n\nreturn <div ref={containerRef}>{/* List of loaded tickets */}</div>\n```\n\n----------------------------------------\n\nTITLE: Counting Total Requests by IP for Supabase Auth API (SQL)\nDESCRIPTION: This query counts the total number of requests made to the Auth API by each unique IP address. It filters for paths starting with '/auth/v1/' and orders results by the count of requests per IP.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cf_connecting_ip as ip,\n  count(cf_connecting_ip) as ip_count\nfrom\n  edge_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(request) as request\n  cross join unnest(headers) as headers\n  cross join unnest(cf) as cf\n  cross join unnest(response) as response\nwhere regexp_contains(path, '^/auth/v1/')\ngroup by ip\norder by ip_count;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Middleware for Supabase Auth Session Refresh\nDESCRIPTION: Sets up Next.js middleware to refresh authentication tokens and manage cookie state. Defines path matchers to optimize middleware execution and handles potential redirects for unauthenticated users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { type NextRequest } from 'next/server'\nimport { updateSession } from '@/utils/supabase/middleware'\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Python Auth Errors\nDESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in Python. All errors are wrapped by the `AuthError` class and can be further categorized into `AuthApiError` (from Supabase Auth API). `AuthApiError` includes `code` and `status` properties to identify the error and HTTP status code, respectively.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Implementing Splash Page with Authentication Check in Flutter\nDESCRIPTION: A Flutter widget that handles initial authentication state checking and user redirection. It checks for existing sessions and routes users to either the registration or rooms page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:my_chat_app/pages/register_page.dart';\nimport 'package:my_chat_app/pages/rooms_page.dart';\nimport 'package:my_chat_app/utils/constants.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\n/// Page to redirect users to the appropriate page depending on the initial auth state\nclass SplashPage extends StatefulWidget {\n  const SplashPage({Key? key}) : super(key: key);\n\n  @override\n  SplashPageState createState() => SplashPageState();\n}\n\n// ... rest of the SplashPage implementation\n```\n\n----------------------------------------\n\nTITLE: Protected Route Implementation with Supabase Auth\nDESCRIPTION: Implementation of protected routes using Supabase authentication, including server-side data fetching with Row Level Security (RLS).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_30\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" context=\"module\">\n  import { supabaseServerClient, withPageAuth } from '@supabase/auth-helpers-sveltekit'\n  import type { Load } from './__types/protected-page'\n\n  export const load: Load = async ({ session }) =>\n    withPageAuth(\n      {\n        redirectTo: '/',\n        user: session.user,\n      },\n      async () => {\n        const { data } = await supabaseServerClient(session.accessToken).from('test').select('*')\n        return { props: { data, user: session.user } }\n      }\n    )\n</script>\n\n<script>\n  export let data\n  export let user\n</script>\n\n<div>Protected content for {user.email}</div>\n<p>server-side fetched data with RLS:</p>\n<pre>{JSON.stringify(data, null, 2)}</pre>\n<p>user:</p>\n<pre>{JSON.stringify(user, null, 2)}</pre>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAuth } from '@supabase/auth-helpers-sveltekit'\nimport { redirect } from '@sveltejs/kit'\nimport type { PageLoad } from './$types'\n\nexport const load: PageLoad = withAuth(async ({ session, getSupabaseClient }) => {\n  if (!session.user) {\n    redirect(303, '/')\n  }\n\n  const { data: tableData } = await getSupabaseClient().from('test').select('*')\n  return { tableData, user: session.user }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing sub_vector Function for Shortening Embeddings\nDESCRIPTION: This SQL function truncates and re-normalizes vector embeddings to a specified number of dimensions, which is crucial for the Adaptive Retrieval process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function sub_vector(v extensions.vector, dimensions int)\nreturns extensions.vector\nlanguage plpgsql\nimmutable\nset search_path = ''\nas $$\nbegin\n  if dimensions > extensions.vector_dims(v) then\n    raise exception 'dimensions must be less than or equal to the vector size';\n  end if;\n\n  return (\n    with unnormed(elem) as (\n      select x from unnest(v::float4[]) with ordinality v(x, ix)\n      where ix <= dimensions\n    ),\n    norm(factor) as (\n      select\n        sqrt(sum(pow(elem, 2)))\n      from\n        unnormed\n    )\n    select\n      array_agg(u.elem / r.factor)::extensions.vector\n    from\n      norm r, unnormed u\n  );\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Basic Supabase Data Fetching in Server Component\nDESCRIPTION: A basic Next.js 13 Server Component that fetches and displays posts from Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport supabase from '../../utils/supabase'\n\nexport default async function Posts() {\n  const { data: posts } = await supabase.from('posts').select()\n  return <pre>{JSON.stringify(posts, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Column Visibility Toggle Implementation\nDESCRIPTION: Implementation of column visibility controls using the DataTableViewOptions component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<DataTableViewOptions table={table} />\n```\n\n----------------------------------------\n\nTITLE: Logging Environment Variables in Edge Function\nDESCRIPTION: TypeScript code for an Edge Function that logs custom and default environment variables, and responds to requests. It demonstrates safe logging practices for secrets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//logs the function call and the secrets\nconsole.log('Hello from Functions!')\n\n//custom secret\nconsole.log('logging custom secret', Deno.env.get('MY_NAME'))\n\n// default secrets\nconsole.log('logging SUPABASE_URL:', Deno.env.get('SUPABASE_URL').slice(0, 15))\n\nDeno.serve(async (req) => {\n  const { name } = await req.json()\n  const data = {\n    message: `Hello ${name}!`,\n  }\n\n  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PGAudit Logging Categories\nDESCRIPTION: Examples of how to configure PGAudit to log specific categories of database operations using the pgaudit.log parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- log all CREATE, ALTER, and DROP events\n... pgaudit.log = 'ddl';\n\n-- log all CREATE, ALTER, DROP, and SELECT events\n... pgaudit.log = 'read, ddl';\n\n-- log nothing\n... pgaudit.log = 'none';\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project with pnpm\nDESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using pnpm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm init -y\npnpm install prisma typescript ts-node @types/node --save-dev\n\npnpx tsc --init\n\npnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Creating or Retrieving a Vector Collection\nDESCRIPTION: Gets or creates a collection to store vectors, specifying the collection name and vector dimension.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocs = vx.get_or_create_collection(name=\"docs\", dimension=3)\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Sentry integration with yarn\nDESCRIPTION: Command to install the Supabase Sentry integration package using yarn package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @supabase/sentry-js-integration\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection Environment Variable\nDESCRIPTION: Command to set the Supabase PostgreSQL connection string as an environment variable for Rails.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Schema Settings\nDESCRIPTION: PHP configuration for changing the default PostgreSQL schema in Laravel's database config file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'pgsql' => [\n    'driver' => 'pgsql',\n    'url' => env('DATABASE_URL'),\n    'host' => env('DB_HOST', '127.0.0.1'),\n    'port' => env('DB_PORT', '5432'),\n    'database' => env('DB_DATABASE', 'forge'),\n    'username' => env('DB_USERNAME', 'forge'),\n    'password' => env('DB_PASSWORD', ''),\n    'charset' => 'utf8',\n    'prefix' => '',\n    'prefix_indexes' => true,\n    'search_path' => 'laravel',\n    'sslmode' => 'prefer',\n],\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison Results for pgvector 0.5.1 vs 0.6.0 on 4XL Instance\nDESCRIPTION: A markdown table showing benchmark results comparing pgvector 0.5.1 and 0.6.0 on a 4XL instance (16 cores, 64GB RAM). It includes build times, queries per second (QPS), and accuracy for different HNSW parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-30-pgvector-fast-builds.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameters                         | ef_search | Build time         | QPS  | Accuracy | Build time         | QPS  | Accuracy |\n| ---------------------------------- | --------- | ------------------ | ---- | -------- | ------------------ | ---- | -------- |\n|                                    |           | **pgvector 0.5.1** |      |          | **pgvector 0.6.0** |      |          |\n| m=16, ef_construction=64 (default) | 40        | 38m 46s            | 1186 | 0.915    | 5m 25s             | 1190 | 0.912    |\n| m=16, ef_construction=64 (default) | 100       | 38m 46s            | 960  | 0.957    | 5m 25s             | 977  | 0.957    |\n| m=16, ef_construction=64 (default) | 200       | 38m 46s            | 804  | 0.974    | 5m 25s             | 802  | 0.974    |\n| m=24, ef_construction=100          | 40        | 1h 8m 43s          | 1091 | 0.950    | 8m 33s             | 1097 | 0.951    |\n| m=24, ef_construction=100          | 100       | 1h 8m 43s          | 877  | 0.978    | 8m 33s             | 901  | 0.978    |\n| m=24, ef_construction=100          | 200       | 1h 8m 43s          | 697  | 0.988    | 8m 33s             | 712  | 0.988    |\n| m=16, ef_construction=200          | 40        | 1h 27m 30s         | 1144 | 0.939    | 9m 28s             | 1163 | 0.940    |\n| m=16, ef_construction=200          | 100       | 1h 27m 30s         | 924  | 0.977    | 9m 28s             | 940  | 0.977    |\n| m=16, ef_construction=200          | 200       | 1h 27m 30s         | 760  | 0.988    | 9m 28s             | 764  | 0.988    |\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Database Testing\nDESCRIPTION: CI/CD configuration for automated database testing using GitHub Actions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Database Tests\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup Supabase CLI\n        uses: supabase/setup-cli@v1\n\n      - name: Start Supabase\n        run: supabase start\n\n      - name: Run Tests\n        run: supabase test db\n```\n\n----------------------------------------\n\nTITLE: Inserting Dark 'Made with Supabase' Badge in HTML\nDESCRIPTION: This HTML snippet shows how to embed a dark version of the 'Made with Supabase' badge in a web page. It creates a clickable image with specified dimensions that links to the Supabase website.\nSOURCE: https://github.com/supabase/supabase/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://supabase.com\">\n  <img\n    width=\"168\"\n    height=\"30\"\n    src=\"https://supabase.com/badge-made-with-supabase-dark.svg\"\n    alt=\"Made with Supabase\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Opening RedwoodJS App in VS Code\nDESCRIPTION: Commands to navigate to the app directory and open it in Visual Studio Code for development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\ncode .\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed for OneSignal Integration\nDESCRIPTION: HTML iframe code for embedding a YouTube video showing OneSignal's integration with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-launch-week-6-community-day.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/mw0DLwItue4?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security Policy in Supabase\nDESCRIPTION: Example of creating a Row Level Security (RLS) policy in Supabase that restricts users to viewing only their own documents. This policy is enforced across all access methods including REST API and edge functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_alternatives/supabase-vs-auth0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Users can only view their own documents.\"\non docs for select\nusing ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Transformed Image in Kotlin\nDESCRIPTION: This snippet shows how to use the Supabase Kotlin client to get a public URL for a transformed image, specifying width and height.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval url = supabase.storage.from(\"bucket\").publicRenderUrl(\"image.jpg\") {\n    size(width = 500, height = 600)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase - General Setup with Git\nDESCRIPTION: This snippet demonstrates the steps to clone the Supabase repository, set up a project directory, copy necessary Docker files, and start the Supabase services. It assumes Docker is already installed and configured.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get the code\n git clone --depth 1 https://github.com/supabase/supabase\n\n # Make your new supabase project directory\n mkdir supabase-project\n\n # Tree should look like this\n # .\n # ├── supabase\n # └── supabase-project\n\n # Copy the compose files over to your project\n cp -rf supabase/docker/* supabase-project\n\n # Copy the fake env vars\n cp supabase/docker/.env.example supabase-project/.env\n\n # Switch to your project directory\n cd supabase-project\n\n # Pull the latest images\n docker compose pull\n\n # Start the services (in detached mode)\n docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Edge Function for Uncompressed Log Drain (TypeScript)\nDESCRIPTION: TypeScript code for an edge function that receives and logs uncompressed log drain data from Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/log-drains.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts'\n\nDeno.serve(async (req) => {\n  const data = await req.json()\n\n  console.log(`Received ${data.length} logs, first log:\\n ${JSON.stringify(data[0])}`)\n  return new Response(JSON.stringify({ message: 'ok' }), {\n    headers: { 'Content-Type': 'application/json' },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Flutter Dependency in pubspec.yaml\nDESCRIPTION: This YAML snippet adds the supabase_flutter package as a dependency in the Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter: ^2.0.0\n```\n\n----------------------------------------\n\nTITLE: Next.js Link Integration\nDESCRIPTION: Example of integrating the navigation menu with Next.js Link component using proper styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenuItem>\n  <Link href=\"/docs\" legacyBehavior passHref>\n    <NavigationMenuLink className={navigationMenuTriggerStyle()}>Documentation</NavigationMenuLink>\n  </Link>\n</NavigationMenuItem>\n```\n\n----------------------------------------\n\nTITLE: Using HTTP GET with pg_net\nDESCRIPTION: Example of making an asynchronous HTTP GET request to Hacker News using the net.http_get function. The function returns a request ID that can be used to track the request.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    net.http_get('https://news.ycombinator.com')\n    as request_id;\nrequest_id\n----------\n         1\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Updated Home Page HTML with Add Store Button\nDESCRIPTION: An enhanced HTML template for the home page with buttons for both showing nearby places and adding a new store. Both buttons are placed in the header toolbar with appropriate icons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"showNearby()\">\n        <ion-icon name=\"location\" slot=\"start\"></ion-icon> Nearby</ion-button\n      >\n    </ion-buttons>\n\n    <ion-title> Supa Stores </ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"addStore()\">\n        <ion-icon name=\"add\" slot=\"start\"></ion-icon> Store</ion-button\n      >\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI via yarn\nDESCRIPTION: This command installs the Supabase CLI as a development dependency using yarn. It enables the use of Supabase commands in the project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add supabase --dev\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Table\nDESCRIPTION: SQL commands to create a table and insert data after receiving proper privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> create table public.apps(id serial primary key, name text);\nCREATE TABLE\npostgres=> insert into public.apps(name) values ('next app');\nINSERT 0 1\npostgres=> select * from public.apps;\n┌────┬──────────┐\n│ id │   name   │\n├────┼──────────┤\n│  1 │ next app │\n└────┴──────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stripe Server Connection in PostgreSQL\nDESCRIPTION: SQL command to create a server connection to Stripe using the Stripe wrapper with an API key for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate server stripe_server\nforeign data wrapper stripe_wrapper\noptions (api_key 'sk_test_xxx');\n```\n\n----------------------------------------\n\nTITLE: Running the Supabase and Refine React Application\nDESCRIPTION: This bash command starts the development server for the React application using Supabase and Refine.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: IP and Browser Data Query\nDESCRIPTION: SQL query for accessing IP and browser information from edge logs by unnesting metadata, request, and headers fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cf_connecting_ip\nfrom\n  edge_logs\n-- Unpack 'metadata' field\ncross join unnest(metadata) AS metadata\n-- unpack 'request' from 'metadata'\ncross join unnest(request) AS request;\n-- unpack 'headers' from 'request'\ncross join unnest(headers) AS headers;\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Next.js Project\nDESCRIPTION: This snippet provides bash commands to run the Next.js development server using npm, yarn, pnpm, or bun. The server is accessible via http://localhost:3000. The project auto-updates during development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Dedicated Schema for Cal.com Foreign Tables\nDESCRIPTION: Creates a schema to organize and contain all the Cal.com-related foreign tables. This helps maintain a clean database structure and separates Cal.com data from other database objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate schema if not exists cal;\n```\n\n----------------------------------------\n\nTITLE: Relationship Drilldown Video Element\nDESCRIPTION: HTML video element for demonstrating the table relationship drill-down feature. Includes autoplay, loop, and muted attributes with a source pointing to an MP4 video file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-supabase-alpha-july-2020.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/relational-drilldown-zoom.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Next.js Browser Sentry Configuration with Supabase\nDESCRIPTION: Configuration for Sentry in a Next.js application's browser environment. Sets up Supabase integration with tracing and filtering for browser requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Sentry from '@sentry/nextjs'\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { supabaseIntegration } from '@supabase/sentry-js-integration'\n\nSentry.init({\n  dsn: SENTRY_DSN,\n  integrations: [\n    supabaseIntegration(SupabaseClient, Sentry, {\n      tracing: true,\n      breadcrumbs: true,\n      errors: true,\n    }),\n    Sentry.browserTracingIntegration({\n      shouldCreateSpanForRequest: (url) => {\n        return !url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)\n      },\n    }),\n  ],\n\n  // Adjust this value in production, or use tracesSampler for greater control\n  tracesSampleRate: 1,\n\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\n  debug: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Collapsible Component Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI dependency for the Collapsible component when setting up manually. This is needed if you prefer to add the component without using the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/collapsible.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-collapsible\n```\n\n----------------------------------------\n\nTITLE: Listening to Broadcast Events with `onBroadcast` (Dart)\nDESCRIPTION: Illustrates the replacement of the generic `.on()` method with the dedicated `.onBroadcast()` method for listening to realtime broadcast events. This example demonstrates the simplified interface of `.onBroadcast()`, which requires fewer properties since it is specific to broadcast events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.channel('my_channel').on(\n  RealtimeListenTypes.broadcast,\n  ChannelFilter(\n    event: 'position',\n  ),\n  (dynamic payload, [ref]) {\n    print(payload);\n  },\n).subscribe();\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n  .channel('my_channel')\n  .onBroadcast(\n    event: 'position',\n    callback: (Map<String, dynamic> payload) {\n      print(payload);\n    })\n  .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Creating Time-Based RLS Policy in PostgreSQL\nDESCRIPTION: SQL code that demonstrates creating an analytics table and implementing a Row Level Security policy that only allows access to recent data (within the last 2 months) for specific users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- A fake analytics table where we store actions a user takes\ncreate table analytics (\n  id serial primary key,\n  ts timestamptz default now(),\n  profile_id references profiles,\n  event text\n);\nalter table profiles\n  enable row level security;\n\n-- Here is an \"age\" rule so that we only dump the most recent analytics\ncreate policy \"Data dump rule\" on logs\n  for select\n  to exporter\n  using (\n    profile_id in (1, 2, 3) and\n    ts > now() - interval '2 MONTHS' -- here's the magic\n  );\n```\n\n----------------------------------------\n\nTITLE: Uniform Tree Structure in Rust\nDESCRIPTION: Implementation of a uniform tree structure storing node kind, properties, depth and location\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nedges: (0, 1), (1, 2),\nnodes: {\n    0: Node {\n        kind: SelectStmt,\n        depth: 1,\n        properties: [\n            TokenProperty {\n                value: None,\n                kind: Some(\n                    Select,\n                ),\n            },\n        ],\n        location: None,\n    },\n    1: Node {\n        kind: ResTarget,\n        depth: 2,\n        properties: [],\n        location: Some(\n            7,\n        ),\n    },\n    2: Node {\n        kind: AConst,\n        depth: 3,\n        properties: [\n            TokenProperty {\n                value: Some(\n                    \"1\",\n                ),\n                kind: None,\n            },\n        ],\n        location: Some(\n            7,\n        ),\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Database Schema Setup\nDESCRIPTION: SQL schema definition for creating and configuring user profiles table with row level security policies, realtime functionality, and storage bucket setup for avatars.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/flutter-user-management/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table for public \"profiles\"\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\"\n  on profiles for select\n  using ( true );\n\ncreate policy \"Users can insert their own profile.\"\n  on profiles for insert\n  with check ( (select auth.uid()) = id );\n\ncreate policy \"Users can update own profile.\"\n  on profiles for update\n  using ( (select auth.uid()) = id );\n\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues ('avatars', 'avatars');\n\ncreate policy \"Avatar images are publicly accessible.\"\n  on storage.objects for select\n  using ( bucket_id = 'avatars' );\n\ncreate policy \"Anyone can upload an avatar.\"\n  on storage.objects for insert\n  with check ( bucket_id = 'avatars' );\n```\n\n----------------------------------------\n\nTITLE: Handling node connection notifications in libcluster Postgres strategy\nDESCRIPTION: Elixir code that processes incoming notifications from Postgres and attempts to connect to the node specified in the payload. This function is key to the cluster formation process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-09-elixir-clustering-using-postgres.mdx#2025-04-22_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/cluster/strategy/postgres.ex:80\ndef handle_info({:notification, _, _, _, node}, state) do\n    node = String.to_atom(node)\n\n    if node != node() do\n      topology = state.topology\n      Logger.debug(topology, \"Trying to connect to node: #{node}\")\n\n      case Strategy.connect_nodes(topology, state.connect, state.list_nodes, [node]) do\n        :ok -> Logger.debug(topology, \"Connected to node: #{node}\")\n        {:error, _} -> Logger.error(topology, \"Failed to connect to node: #{node}\")\n      end\n    end\n\n    {:noreply, state}\n  end\n```\n\n----------------------------------------\n\nTITLE: Invoking Embedding Edge Function with cURL\nDESCRIPTION: This bash command demonstrates how to call the Supabase Edge Function for generating embeddings. It sends a POST request with JSON data containing the text input to be embedded, and includes the necessary authorization header with an anonymous API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST 'http://localhost:54321/functions/v1/embed' \\\n  --header 'Authorization: Bearer ANON_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '{ \"input\": \"hello world\" }'\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Headers to ChatGPT Plugin Routes in TypeScript\nDESCRIPTION: This snippet shows how to add CORS headers to all routes in the ChatGPT plugin using Deno Oak middleware. It applies the previously defined CORS headers to each response.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts'\nimport { corsHeaders } from '../_shared/cors.ts'\n\n// [...]\nconst app = new Application()\n// ChatGPT specific CORS headers\napp.use(async (ctx, next) => {\n  await next()\n  let key: keyof typeof corsHeaders\n  for (key in corsHeaders) {\n    ctx.response.headers.set(key, corsHeaders[key])\n  }\n})\napp.use(router.routes())\napp.use(router.allowedMethods())\n\nawait app.listen({ port: 8000 })\n```\n\n----------------------------------------\n\nTITLE: HTML Image Display with Light/Dark Mode Support\nDESCRIPTION: HTML code snippet that displays the Supabase logo with different versions for light and dark GitHub modes using conditional display with the #gh-light-mode-only and #gh-dark-mode-only URL fragments.\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.fi.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/8291514/213727234-cda046d6-28c6-491a-b284-b86c5cede25d.png#gh-light-mode-only\">\n<img src=\"https://user-images.githubusercontent.com/8291514/213727225-56186826-bee8-43b5-9b15-86e839d89393.png#gh-dark-mode-only\">\n</p>\n```\n\n----------------------------------------\n\nTITLE: Sign In with Slack using Supabase Auth\nDESCRIPTION: This JavaScript snippet demonstrates how to sign in a user with Slack OAuth using the Supabase client library. It initializes the Supabase client and calls the signInWithOAuth method with the `slack_oidc` provider. The function returns a promise that resolves with the user data or rejects with an error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithSlack() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'slack_oidc',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Deep Link Call in CreateAndShow (Flutter)\nDESCRIPTION: This C++ code snippet shows how to call the `SendAppLinkToInstance` method in the `CreateAndShow` function within `win32_window.cpp`. This is done to check if an existing instance is already running and to send the deep link to that instance instead of creating a new one.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nbool Win32Window::CreateAndShow(const std::wstring& title,\n                                    const Point& origin,\n                                    const Size& size) {\nif (SendAppLinkToInstance(title)) {\n    return false;\n}\n\n... \n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Table Changes Listener in TypeScript with Supabase\nDESCRIPTION: This function creates a Subject that emits changes from Supabase tables in realtime. It subscribes to both cards and lists tables and returns an Observable that emits whenever changes occur in either table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n  getTableChanges() {\n    const changes = new Subject();\n\n    this.supabase\n      .from(CARDS_TABLE)\n      .on('*', (payload: any) => {\n        changes.next(payload);\n      })\n      .subscribe();\n\n    this.supabase\n      .from(LISTS_TABLE)\n      .on('*', (payload: any) => {\n        changes.next(payload);\n      })\n      .subscribe();\n\n    return changes.asObservable();\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Send Messages in Python\nDESCRIPTION: This Python code demonstrates how to configure a Supabase Realtime channel to receive its own broadcast messages. It sets the 'self' parameter to True, sets up event handling, and sends a broadcast message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Join a room/topic. Can be anything except for 'realtime'.\nmy_channel = supabase.channel('room-2', {\"config\": {\"broadcast\": {\"self\": True}}})\n\nmy_channel.on_broadcast(\n  'test-my-messages',\n  lambda payload: print(payload)\n)\n\ndef on_subscribe(status, err):\n  if status != RealtimeSubscribeStates.SUBSCRIBED:\n    return\n\n  # Send a message once the client is subscribed\n  channel_b.send_broadcast(\n    'test-my-messages',\n    { \"message\": 'talking to myself' },\n  )\n\nmy_channel.subscribe(on_subscribe)\n```\n\n----------------------------------------\n\nTITLE: Creating React Query Client Provider Component in Next.js\nDESCRIPTION: TypeScript React component that creates and provides a React Query client for the application, with default options for stale time to optimize SSR behavior.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { useState } from 'react'\n\nexport const ReactQueryClientProvider = ({ children }: { children: React.ReactNode }) => {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            // With SSR, we usually want to set some default staleTime\n            // above 0 to avoid refetching immediately on the client\n            staleTime: 60 * 1000,\n          },\n        },\n      })\n  )\n  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Retrieval Match Function\nDESCRIPTION: This SQL function implements the Adaptive Retrieval algorithm, performing a two-pass search using shortened embeddings for the first pass and full embeddings for the second pass.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function match_documents_adaptive(\n  query_embedding extensions.vector(3072),\n  match_count int\n)\nreturns setof public.documents\nlanguage sql\nset search_path = ''\nas $$\nwith shortlist as (\n  select *\n  from public.documents\n  order by\n    public.sub_vector(embedding, 512)::extensions.vector(512) operator(extensions.<#>) (\n      select public.sub_vector(query_embedding, 512)::extensions.vector(512)\n    ) asc\n  limit match_count * 8\n)\nselect *\nfrom shortlist\norder by embedding operator(extensions.<#>) query_embedding asc\nlimit least(match_count, 200);\n$$;\n```\n\n----------------------------------------\n\nTITLE: Running pg_dump with Row Level Security for PostgreSQL\nDESCRIPTION: Bash command to execute pg_dump with the exporter user, ensuring Row Level Security is enforced with the --enable-row-security flag. This dumps only the data permitted by the RLS policies into a seed.sql file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Dump all the data into a \"seed.sql\" file\n# which we can use to restore our local databases.\npg_dump \\\n-h db.host.supabase.co \\\n-U exporter \\\n-d postgres \\\n-n public \\\n--data-only \\\n--enable-row-security \\\n--table=profiles \\\n> seed.sql\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Table Structure in pg_net\nDESCRIPTION: Definition of the unlogged table that stores HTTP responses in the pg_net extension. By default, responses are stored for 6 hours.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNLOGGED TABLE\n    net._http_response (\n        id bigint NULL,\n        status_code integer NULL,\n        content_type text NULL,\n        headers jsonb NULL,\n        content text NULL,\n        timed_out boolean NULL,\n        error_msg text NULL,\n        created timestamp with time zone NOT NULL DEFAULT now()\n    )\n```\n\n----------------------------------------\n\nTITLE: Identifying long-running PostgreSQL transactions\nDESCRIPTION: This SQL query lists all active transactions with their start times, helping identify long-running transactions that might prevent successful vacuum operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nSELECT xact_start, state FROM pg_stat_activity;\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function for Puppeteer Screenshot Generation\nDESCRIPTION: This command deploys the Puppeteer screenshot function to Supabase, disabling JWT verification. It's used to make the function available in the production environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/puppeteer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy puppeteer --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring Recovery Environment Variables for WAL-G\nDESCRIPTION: Commands to set up the necessary environment variables on a recovery instance for WAL-G to connect to the S3 bucket containing the backups.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ umask u=rwx,g=rx,o=\n$ mkdir -p /etc/wal-g.d/env\n$ echo 'secret-key-content' > /etc/wal-g.d/env/AWS_SECRET_ACCESS_KEY\n$ echo 'access-key' > /etc/wal-g.d/env/AWS_ACCESS_KEY_ID\n$ echo 's3://backup-bucket/project-directory' > /etc/wal-g.d/env/WALG_S3_PREFIX\n$ chown -R root:postgres /etc/wal-g.d\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart Config with Icons and Theme Support\nDESCRIPTION: Advanced chart configuration with icons and theme-specific colors. This allows for richer visualization and automatic dark/light mode support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Monitor } from 'lucide-react'\n\nimport { type ChartConfig } from '@/components/ui/chart'\n\nconst chartConfig = {\n  desktop: {\n    label: 'Desktop',\n    icon: Monitor,\n    // A color like 'hsl(220, 98%, 61%)' or 'var(--color-name)'\n    color: '#2563eb',\n    // OR a theme object with 'light' and 'dark' keys\n    theme: {\n      light: '#2563eb',\n      dark: '#dc2626',\n    },\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Using InfoTooltip Component in React/TypeScript\nDESCRIPTION: This example demonstrates how to use the InfoTooltip component in a React application. The 'side' prop is set to 'top', positioning the tooltip above the information icon. The content of the tooltip is provided as children to the component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/info-tooltip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<InfoTooltip side=\"top\">This is the tooltip content</InfoTooltip>\n```\n\n----------------------------------------\n\nTITLE: ANY Filter Modifier Example\nDESCRIPTION: JavaScript example demonstrating the use of ANY filter modifier with LIKE operator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst res = await postgrest\n  .from('users')\n  .select()\n  .likeAnyOf('username', ['%supa%', '%kiwi%'])\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Storage Objects using cURL\nDESCRIPTION: Makes an authenticated request to the Supabase storage API to list all objects in the storage buckets. Uses the storage profile and anonymous API key for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/objects?select=name' \\\n-H 'accept-profile: storage' \\\n-H \"apikey: $ANON_KEY\" \\\n-H \"authorization: Bearer $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using Toggle Component in React JSX\nDESCRIPTION: Example of how to use the Toggle component in React JSX code.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Toggle>Toggle</Toggle>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ktor Engines for Kotlin Multiplatform\nDESCRIPTION: Sets up Ktor client engines for different platforms in a Kotlin Multiplatform project using Gradle Kotlin DSL. This includes configurations for JVM, Android, JavaScript, and iOS targets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval commonMain by getting {\n    dependencies {\n        //supabase modules\n    }\n}\nval jvmMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-cio:KTOR_VERSION\")\n    }\n}\nval androidMain by getting {\n    dependsOn(jvmMain)\n}\nval jsMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-js:KTOR_VERSION\")\n    }\n}\nval iosMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-darwin:KTOR_VERSION\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk for Supabase in TOML\nDESCRIPTION: This snippet shows how to configure Clerk as a third-party auth provider in the Supabase config.toml file for local development or self-hosting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[auth.third_party.clerk]\nenabled = true\ndomain = \"example.clerk.accounts.dev\"\n```\n\n----------------------------------------\n\nTITLE: Installing Card Component via CLI\nDESCRIPTION: Command to install the card component using the shadcn-ui CLI tool\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add card\n```\n\n----------------------------------------\n\nTITLE: Repository Configuration Definition\nDESCRIPTION: Example of defining external repository configuration variables for federated documentation\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst org = 'supabase'\nconst repo = 'pg_graphql'\nconst branch = 'master'\nconst docsDir = 'docs'\nconst externalSite = 'https://supabase.github.io/pg_graphql'\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Edge Function Locally\nDESCRIPTION: Command to start local Supabase environment and serve an edge function with JWT verification disabled and custom environment variables\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw13-meetup-og/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve lw13-meetups-ogs --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: MS SQL to Postgres Migration with pgloader\nDESCRIPTION: This SQL snippet configures pgloader to migrate an MS SQL database to a Postgres database. It defines the source MS SQL connection string, the target Supabase Postgres connection string, and modifies the schema ownership. Additionally, it configures WAL buffer and memory settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/amazon-rds.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nLOAD DATABASE\n    FROM mssql://USER:PASSWORD@HOST/SOURCE_DB\n    INTO postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres\nALTER SCHEMA 'public' OWNER TO 'postgres';\nset wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';\n```\n\n----------------------------------------\n\nTITLE: Creating an ASCII Scatterplot Using the olirice-asciiplot Extension\nDESCRIPTION: Shows how to use the scatter function from the olirice-asciiplot extension to create an ASCII scatterplot. The function takes x and y values, a title, and dimensions as parameters and generates a text-based plot.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  scatter(\n    val::numeric, -- x\n    val::numeric, -- y\n    'stonks!',    -- title\n    15,           -- height\n    50            -- width\n  )\nfrom\n  generate_series(1,10) z(val);\n/*\n                    stonks!\n----------------------------------------------\n|                                       *\n|\n|                                  *\n|                              *\n|\n|                          *\n|\n|                     *\n|                 *\n|\n|            *\n|\n|        *\n|   *\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client with yarn\nDESCRIPTION: This snippet shows how to install the Prisma client and generate its model using yarn.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @prisma/client\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Unnesting Metadata Fields in Postgres Logs with SQL\nDESCRIPTION: This query demonstrates how to unnest the metadata JSON objects in postgres_logs to access nested fields like error_severity and user_name. It uses cross join unnest operations to extract data from multiple layers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  event_message,\n  parsed.error_severity,\n  parsed.user_name\nfrom\n  postgres_logs\n  -- extract first layer\n  cross join unnest(postgres_logs.metadata) as metadata\n  -- extract second layer\n  cross join unnest(metadata.parsed) as parsed;\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for User Roles and Permissions in SQL\nDESCRIPTION: SQL commands to create custom types, user roles table, and role permissions table for implementing RBAC.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Custom types\ncreate type public.app_permission as enum ('channels.delete', 'messages.delete');\ncreate type public.app_role as enum ('admin', 'moderator');\n\n-- USER ROLES\ncreate table public.user_roles (\n  id        bigint generated by default as identity primary key,\n  user_id   uuid references auth.users on delete cascade not null,\n  role      app_role not null,\n  unique (user_id, role)\n);\ncomment on table public.user_roles is 'Application roles for each user.';\n\n-- ROLE PERMISSIONS\ncreate table public.role_permissions (\n  id           bigint generated by default as identity primary key,\n  role         app_role not null,\n  permission   app_permission not null,\n  unique (role, permission)\n);\ncomment on table public.role_permissions is 'Application permissions for each role.';\n```\n\n----------------------------------------\n\nTITLE: JWT Header Example\nDESCRIPTION: This JavaScript code snippet shows the structure of a JWT header.  The header contains metadata about the JWT, such as the algorithm used for signing (`alg`). In this example, the `alg` property is set to `HS256`, indicating the HMAC SHA256 algorithm is used.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"alg\": \"HS256\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to all Postgres schema changes in Swift\nDESCRIPTION: This Swift snippet configures a Supabase client to listen for any database changes in the 'public' schema using async/await. It prints information about the database actions received. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"schema-db-changes\")\n\nlet changes = await myChannel.postgresChange(AnyAction.self, schema: \"public\")\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  switch change {\n  case .insert(let action): print(action)\n  case .update(let action): print(action)\n  case .delete(let action): print(action)\n  case .select(let action): print(action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Postgres Changes with Supabase Realtime in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Supabase Realtime to listen for Postgres database changes. It shows how to create a channel, set up a filter for specific database events, and handle the received events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-18-supabase-realtime-multiplayer-general-availability.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst channelId = '#random'\n\n// Create a filter only for new messages\nconst databaseFilter = {\n  schema: 'public',\n  table: 'messages',\n  filter: `room_id=eq.${channelId}`,\n  event: 'INSERT',\n}\n\nconst channel = supabase\n  .channel(channelId)\n  .on('postgres_changes', databaseFilter, (payload) => receivedDatabaseEvent(payload))\n  .subscribe()\n\nconst receivedDatabaseEvent = (event) => {\n  const { payload } = event\n  console.log(payload)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Browser Client for Next.js Client Components\nDESCRIPTION: Defines a utility function that creates a Supabase client for use in browser-side Client Components. Uses createBrowserClient from the ssr package to handle client-side authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library via npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependencies with Gradle KTS\nDESCRIPTION: Demonstrates how to add Supabase module dependencies using Gradle Kotlin DSL build system. Uses BOM (Bill of Materials) for version management and includes core modules like postgrest-kt, gotrue-kt, and realtime-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(platform(\"io.github.jan-tennert.supabase:bom:VERSION\"))\nimplementation(\"io.github.jan-tennert.supabase:postgrest-kt\")\nimplementation(\"io.github.jan-tennert.supabase:gotrue-kt\")\nimplementation(\"io.github.jan-tennert.supabase:realtime-kt\")\n```\n\n----------------------------------------\n\nTITLE: Grouped Aggregate Function Response in JSON\nDESCRIPTION: This JSON response shows the result of grouping max() and min() aggregate functions by genre, displaying the maximum and minimum release years for each genre category.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"genre\": \"Adventure\",\n    \"max\": 2021,\n    \"min\": 2020\n  },\n  {\n    \"genre\": \"Horror\",\n    \"max\": 2022,\n    \"min\": 2019\n  },\n  {\n    \"genre\": \"Sci-Fi\",\n    \"max\": 2022,\n    \"min\": 2018\n  },\n  {\n    \"genre\": \"Mystery\",\n    \"max\": 2019,\n    \"min\": 2019\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown\nDESCRIPTION: This code snippet demonstrates how to embed a video in Markdown using HTML video tags. It includes attributes for width, muted playback, inline playing, and controls. The video source is specified with a URL to an MP4 file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<video width=\"99%\" muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/api/api-url-and-key.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Example of Encoded JWT\nDESCRIPTION: This is an example of an encoded JWT. It consists of three parts: the header, the payload, and the signature, separated by dots.  The header specifies the algorithm used for signing, the payload contains claims about the user, and the signature is used to verify the integrity of the token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neyJhbGciOiJIUzI1NiJ9\n  .eyJzdWIiOiIwMDAxIiwibmFtZSI6IlNhbSBWaW1lcyIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE4MjM5MDIyfQ\n  .zMcHjKlkGhuVsiPIkyAkB2rjXzyzJsMMgpvEGvGtjvA\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Postgres Database on Fly\nDESCRIPTION: Command to create a Supabase Postgres database using the Fly extensions API. This is for testers during the initial rollout phase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-15-postgres-on-fly-by-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nfly extensions supabase create\n```\n```\n\n----------------------------------------\n\nTITLE: Linking Remote Supabase Project\nDESCRIPTION: Links the local project to a remote Supabase project using the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link\n```\n\n----------------------------------------\n\nTITLE: Configuring Wait State in Workflows YAML\nDESCRIPTION: YAML configuration for implementing a wait state in the Workflow. Sets a delay of one day (86400 seconds) before proceeding to the next task.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nWaitOneDay:\n  Type: Wait\n  Next: SendEmail\n  Seconds: 86400\n```\n\n----------------------------------------\n\nTITLE: Enabling autovacuum logging for a PostgreSQL table\nDESCRIPTION: This SQL command enables detailed logging of autovacuum operations for a specific table, which helps diagnose vacuum-related issues.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE mytable SET log_autovacuum_min_duration to 0;\n```\n\n----------------------------------------\n\nTITLE: Checking Session Validity in Supabase Flutter v2\nDESCRIPTION: Shows how to check if a session is valid in v2, which is necessary since the initialization no longer awaits for session refresh. This change makes the app launch faster, but requires explicit session validity checking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Session is valid, no check required\nfinal session = supabase.auth.currentSession;\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal session = supabase.auth.currentSession;\n\n// Check if the session is valid.\nfinal isSessionExpired = session?.isExpired;\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP using Swift\nDESCRIPTION: Explains OTP verification for user session in Swift using Supabase. Necessary parameters include the email and OTP token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\ntry await supabase.auth.verifyOTP(\n  email: email,\n  token: \"123456\",\n  type: .email\n)\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Max Connections\nDESCRIPTION: SQL query to check the configured maximum number of direct connections allowed by the PostgreSQL instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW max_connections;\n```\n\n----------------------------------------\n\nTITLE: Defining ChatMessage Type with TypeScript\nDESCRIPTION: Defines the structure of a chat message, including ID, content, user details, and creation timestamp, ensuring type safety across the application. Utilizes TypeScript for static type checking and interface definition.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChatMessage {\n  id: string\n  content: string\n  user: {\n    name: string\n  }\n  createdAt: string\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Session After SupabaseAuth Class Removal in v2\nDESCRIPTION: Shows how to access the current session after the SupabaseAuth class was removed in v2. The initialSession member is no longer available, and currentSession should be used instead to access the session at any time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Use `initialSession` to obtain the initial session when the app starts.\nfinal initialSession = await SupabaseAuth.initialSession;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Use `currentSession` to access the session at any time.\nfinal initialSession = await supabase.auth.currentSession;\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: Example of YAML frontmatter configuration for documentation pages with optional properties\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: How to connect to Supabase\nhideToc: true\n---\n```\n\n----------------------------------------\n\nTITLE: Setting up Ionic Angular Project with Capacitor and Supabase\nDESCRIPTION: This bash script creates a new Ionic Angular project, generates necessary pages and services, adds iOS and Android platforms, and installs required dependencies including Capacitor plugins and Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic start supaMap blank --type=angular\ncd ./supaMap\n\nionic g page store\nionic g page nearby\nionic g service services/stores\n\nionic build\nionic cap add ios\nionic cap add android\n\n\n# Add Maps and Geolocation plugins\nnpm install @capacitor/google-maps\nnpm install @capacitor/geolocation\n\n# Install Supabase\nnpm install @supabase/supabase-js\n\n# Ionic 7 wasn't released so I installed the next version\n# not required if you are already on Ionic 7\nnpm install @ionic/core@next @ionic/angular@next\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router for Supabase Authentication in Ionic\nDESCRIPTION: Sets up route configuration for the application with login and account pages. Defines routes for the authentication flow and creates a router instance with web history.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, createWebHistory } from '@ionic/vue-router'\nimport { RouteRecordRaw } from 'vue-router'\nimport LoginPage from '../views/Login.vue'\nimport AccountPage from '../views/Account.vue'\nconst routes: Array<RouteRecordRaw> = [\n  {\n    path: '/',\n    name: 'Login',\n    component: LoginPage,\n  },\n  {\n    path: '/account',\n    name: 'Account',\n    component: AccountPage,\n  },\n]\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes,\n})\n\nexport default router\n```\n\n----------------------------------------\n\nTITLE: Using Drizzle ORM with PostgreSQL in Edge Function\nDESCRIPTION: This example demonstrates how to use Drizzle ORM with node-postgres in an Edge Function. It defines a table schema, establishes a database connection using environment variables, and performs a select query on the 'users' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-12-edge-functions-faster-smaller.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { drizzle } from 'npm:drizzle-orm@0.33.0/node-postgres'\nimport pg from 'npm:pg@8.12.0'\nconst { Client } = pg\n\nimport { pgTable, serial, text, varchar } from 'npm:drizzle-orm@0.33.0/pg-core'\n\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  fullName: text('full_name'),\n  phone: varchar('phone', { length: 256 }),\n})\n\nconst client = new Client({\n  connectionString: Deno.env.get('SUPABASE_DB_URL'),\n})\n\nawait client.connect()\nconst db = drizzle(client)\n\nDeno.serve(async (req) => {\n  const allUsers = await db.select().from(users)\n  console.log(allUsers)\n\n  return new Response('ok')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Physical Backup with WAL-G\nDESCRIPTION: Command to create the first physical backup of the PostgreSQL database using WAL-G, pushing it to the configured S3 bucket.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo -su postgres envdir /etc/wal-g.d/env /usr/local/bin/wal-g backup-push /var/lib/postgresql/12/main\n```\n\n----------------------------------------\n\nTITLE: Integrating Realtime Chat in TypeScript\nDESCRIPTION: The snippet demonstrates how to integrate a basic real-time chat component in a TypeScript project, utilizing Supabase and TanStack. It imports the `RealtimeChat` component and uses it within a React functional component. The `roomName` and `username` props specify the chat room and user details, respectively.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\n\nexport default function ChatPage() {\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Webhook Activity in Postgres\nDESCRIPTION: This SQL query checks if the pg_net background worker is active by querying the pg_stat_activity table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect pid from pg_stat_activity where backend_type ilike '%pg_net%';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Media Type Handlers in PostgREST 12\nDESCRIPTION: Shows how to use the new Media Type Handlers feature in PostgREST 12 to serve custom content types directly from the database. This example demonstrates serving HTML content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-postgrest-12.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate domain \"text/html\" as text;\n\ncreate or replace function api.index()\nreturns \"text/html\"\nlanguage sql\nas $$\n  select $html$\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <title>PostgREST + HTMX To-Do List</title>\n      <!-- Tailwind for CSS styling -->\n      <link href=\"https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    </head>\n    <body class=\"bg-gray-900\">\n      <div class=\"flex justify-center\">\n        <div class=\"max-w-lg mt-5 p-6 bg-gray-800 border border-gray-800 rounded-lg shadow-xl\">\n          <h5 class=\"mb-3 text-2xl font-bold tracking-tight text-white\">PostgREST + HTMX To-Do List</h5>\n        </div>\n      </div>\n    </body>\n    </html>\n  $html$;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function for Telegram Bot\nDESCRIPTION: Command to deploy a Supabase Edge Function for a Telegram bot without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/telegram-bot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsupabase functions deploy --no-verify-jwt telegram-bot\n```\n\n----------------------------------------\n\nTITLE: Example JSON Webhook Payload Structure\nDESCRIPTION: Sample JSON structure representing webhook data with nested objects containing status, headers and payload information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status_code\": 200,\n  \"checksum\": \"89b623f6332d2b9b42b4e17eaf1bcc60\"\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Last-Modified\": \"Tue, 09 Aug 2022 09:14:10 GMT\"\n  },\n  \"payload\": {\n    {\n      \"success\": true,\n      \"content\": {\n        \"account_id\": \"d928b484-16bd-4f10-a827-3eb959b4cc14\",\n        \"event\": \"SUBSCRIBED\",\n        \"subscriptions\": [\n          {\"subscription_id\": 481, \"exp\": 1660050940},\n          {\"subscription_id\": 121, \"exp\": 1660041852}\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Angular Application\nDESCRIPTION: This bash command starts the Angular development server, making the application accessible at localhost:4200.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating Function with Custom Isolation Level\nDESCRIPTION: SQL example showing how to create a function with a specific transaction isolation level.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate function hello()\nreturns text as $$\n  select 'hello';\n$$ language sql\nset default_transaction_isolation = 'repeatable read';\n```\n\n----------------------------------------\n\nTITLE: Summing Values from JSONB Arrays in PostgreSQL (Invalid Approach)\nDESCRIPTION: This query attempts to sum calories from food log entries but fails due to PostgreSQL's limitation that aggregate functions cannot contain set-returning functions. This demonstrates a common pitfall when working with JSONB arrays.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  date,\n  sum((jsonb_array_elements(food_log)->'calories')::integer) as total_calories\nfrom calendar where user_id = 'xyz'\n  and date between '2022-01-01' and '2022-01-31'\ngroup by date;\n```\n\n----------------------------------------\n\nTITLE: Styling Chat Page with SCSS in Ionic Angular\nDESCRIPTION: This SCSS code provides styling for the chat page, including background image, message bubbles, and input area. It creates a WhatsApp-like appearance for the chat interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\nion-content {\n  --background: url('../../../assets/pattern.png') no-repeat;\n}\n\n.message-input {\n  border: 1px solid #c3c3c3;\n  border-radius: 20px;\n  background: #fff;\n  box-shadow: 2px 2px 5px 0px rgb(0 0 0 / 5%);\n}\n\nion-textarea {\n  --padding-start: 20px;\n  --padding-top: 4px;\n  --padding-bottom: 4px;\n\n  min-height: 30px;\n}\n\n.message {\n  padding: 10px !important;\n  border-radius: 10px !important;\n  margin-bottom: 8px !important;\n\n  img {\n    width: 100%;\n  }\n}\n\n.my-message {\n  background: #dbf7c5;\n  color: #000;\n}\n\n.other-message {\n  background: #fff;\n  color: #000;\n}\n\n.time {\n  color: #cacaca;\n  float: right;\n  font-size: small;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Database IP Address using nslookup\nDESCRIPTION: Command to look up the IP address of a Supabase database using nslookup. Replace <PROJECT_REF> with your project reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ipv4-address.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnslookup db.<PROJECT_REF>.supabase.co\n```\n\n----------------------------------------\n\nTITLE: Supabase Auth UI Components Implementation\nDESCRIPTION: Shows how to implement various authentication UI components including email/password, magic link, and social login buttons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Email and password signin form\nSupaEmailAuth(\n  authAction: AuthAction.signIn,\n  redirectUrl: '/home',\n),\n\n// Magic Link signin form\nSupaMagicAuth(),\n\n// Social Login Buttons\nSupaSocialsAuth(\n  socialProviders: [\n  SocialProviders.apple,\n  SocialProviders.google,\n  ],\n  colored: true,\n),\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Client for Supabase in Next.js\nDESCRIPTION: Implementation for creating a Supabase client for browser components using the createBrowserClient function from @supabase/ssr package.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Python project with Poetry\nDESCRIPTION: Command to create a new Python project structure using Poetry, specifically for the AWS Bedrock image search example.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry new aws_bedrock_image_search\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Buckets in TOML\nDESCRIPTION: This snippet demonstrates how to configure a Storage bucket named 'assets' with a specified path for objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[storage.buckets.assets]\nobjects_path = \"./assets\"\n```\n\n----------------------------------------\n\nTITLE: Calling List Objects Function via SDK\nDESCRIPTION: Illustrates how to call the `list_objects` Postgres function using the Supabase JavaScript SDK. This example requires access to Supabase SDK and a correctly initialized Supabase client instance. Inputs are provided as parameters to the RPC call.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/production/scaling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.rpc('list_objects', {\\n  bucketid: 'yourbucket',\\n  prefix: '',\\n  limit: 100,\\n  offset: 0,\\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in HTML\nDESCRIPTION: Code for embedding a YouTube video about Supabase's billing system update in an HTML page. The iframe includes various attributes for video configuration including borders and allowed features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-31-organization-based-billing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/6ixvpLCdqkA\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Tables for Slack Channel Management\nDESCRIPTION: SQL commands to create two tables in Supabase: 'slack_channels' for managing watched channels and their destinations, and 'slack_watcher' for storing message data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE slack_channels (\n    id SERIAL PRIMARY KEY,\n    channel text,\n    channel_id text,\n    p_level text DEFAULT ''::text NOT NULL,\n    dest_channel text,\n    dest_channel_id text,\n    private int DEFAULT '0'::int NOT NULL\n);\n\nCREATE TABLE slack_watcher (\n    channel_name text,\n    channel_id text NOT NULL,\n    message text,\n    ts timestamp with time zone NOT NULL,\n    ts_ms text NOT NULL,\n    CONSTRAINT pk_slackwatcher PRIMARY KEY (channel_id, ts, ts_ms)\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Optimization in Kotlin\nDESCRIPTION: This snippet demonstrates how to disable automatic image optimization and request the original format using the Supabase Kotlin client. It includes examples for both in-memory download and direct file download.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.storage.from(\"bucket\").downloadAuthenticated(\"image.jpg\") {\n    transform {\n        size(200, 200)\n        format = ImageTransformation.Format.ORIGIN\n    }\n}\n\n//Or on JVM stream directly to a file\nval file = File(\"image.jpg\")\nsupabase.storage.from(\"bucket\").downloadAuthenticatedTo(\"image.jpg\", file) {\n    transform {\n        size(200, 200)\n        format = ImageTransformation.Format.ORIGIN\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependency to Swift Package\nDESCRIPTION: This code snippet demonstrates how to add the Supabase package as a dependency in a Swift package. It shows the configuration for the Package.swift file, including the package URL, version requirement, and target dependencies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/swift/v1/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet package = Package(\n    ...\n    dependencies: [\n        ...\n        .package(\n            url: \"https://github.com/supabase/supabase-swift.git\",\n            from: \"2.0.0\"\n        ),\n    ],\n    targets: [\n        .target(\n            name: \"YourTargetName\",\n            dependencies: [\n                .product(\n                    name: \"Supabase\", // Auth, Realtime, Postgrest, Functions, or Storage\n                    package: \"supabase-swift\"\n                ),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarMenuSkeleton for Loading State in React\nDESCRIPTION: This snippet demonstrates how to use the SidebarMenuSkeleton component to render a loading state for a SidebarMenu. It creates multiple skeleton items using Array.from.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NavProjectsSkeleton() {\n  return (\n    <SidebarMenu>\n      {Array.from({ length: 5 }).map((_, index) => (\n        <SidebarMenuItem key={index}>\n          <SidebarMenuSkeleton />\n        </SidebarMenuItem>\n      ))}\n    </SidebarMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Links for Android in AndroidManifest.xml\nDESCRIPTION: XML configuration to set up deep linking for Android in the AndroidManifest.xml file, allowing the app to handle Supabase authentication redirects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  <!-- ... other tags -->\n  <application ...>\n    <activity ...>\n      <!-- ... other tags -->\n\n      <!-- Add this intent-filter for Deep Links -->\n      <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST -->\n        <data\n          android:scheme=\"io.supabase.flutterquickstart\"\n          android:host=\"login-callback\" />\n      </intent-filter>\n\n    </activity>\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Filtering for Specific Changes in Kotlin with Supabase Realtime\nDESCRIPTION: Sets up a Kotlin channel to listen for INSERT events on the 'todos' table with a specific filter. The filter parameter 'filter = \"id=eq.1\"' ensures only changes where id equals 1 are monitored.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = \"public\") {\n    table = \"todos\"\n    filter = \"id=eq.1\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Updating HomePage to Handle Authentication State in RedwoodJS\nDESCRIPTION: Updates the HomePage component to conditionally render either the Auth or Account component based on the user's authentication status using the isAuthenticated value from useAuth hook.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth } from '@redwoodjs/auth'\nimport { MetaTags } from '@redwoodjs/web'\n\nimport Account from 'src/components/Account'\nimport Auth from 'src/components/Auth'\n\nconst HomePage = () => {\n  const { isAuthenticated } = useAuth()\n\n  return (\n    <>\n      <MetaTags title=\"Welcome\" />\n      {!isAuthenticated ? <Auth /> : <Account />}\n    </>\n  )\n}\n\nexport default HomePage\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component into Account Component in RedwoodJS\nDESCRIPTION: Code snippet showing how to import and add the Avatar component to the Account component. It handles the avatar upload callback to update the user's profile with the new avatar URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// Import the new component\nimport Avatar from 'src/components/Avatar'\n\n// ...\n\nreturn (\n  <div className=\"form-widget\">\n    {/* Add to the body */}\n    <Avatar\n      url={avatar_url}\n      size={150}\n      onUpload={(url) => {\n        setAvatarUrl(url)\n        updateProfile({ username, website, avatar_url: url })\n      }}\n    />\n    {/* ... */}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar Component into Account Page\nDESCRIPTION: Shows how to integrate the Avatar component into an Account page. The component is used with the user's existing avatar URL and an update profile function to handle uploads.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// Import the new component\n\nimport { Avatar } from '../components/Avatar';\n\n// ...\nreturn (\n  <IonPage>\n    <IonHeader>\n      <IonToolbar>\n        <IonTitle>Account</IonTitle>\n      </IonToolbar>\n    </IonHeader>\n\n    <IonContent>\n      <Avatar url={profile.avatar_url} onUpload={updateProfile}></Avatar>\n```\n\n----------------------------------------\n\nTITLE: Overriding Response Types in Supabase Queries\nDESCRIPTION: This snippet demonstrates how to override the type of a successful response from a Supabase query, including partial and full type overrides.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Partial type override allows you to only override some of the properties in your results\nconst { data } = await supabase.from('countries').select().overrideTypes<Array<{ id: string }>>()\n// For a full replacement of the original return type use the `{ merge: false }` property as second argument\nconst { data } = await supabase\n  .from('countries')\n  .select()\n  .overrideTypes<Array<{ id: string }>, { merge: false }>()\n// Use it with `maybeSingle` or `single`\nconst { data } = await supabase.from('countries').select().single().overrideTypes<{ id: string }>()\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Module with Hilt\nDESCRIPTION: Creates a Hilt module to provide Supabase client instances and individual service components as singletons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n@InstallIn(SingletonComponent::class)\n@Module\nobject SupabaseModule {\n\n    @Provides\n    @Singleton\n    fun provideSupabaseClient(): SupabaseClient {\n        return createSupabaseClient(\n            supabaseUrl = BuildConfig.SUPABASE_URL,\n            supabaseKey = BuildConfig.SUPABASE_ANON_KEY\n        ) {\n            install(Postgrest)\n            install(Auth) {\n                flowType = FlowType.PKCE\n                scheme = \"app\"\n                host = \"supabase.com\"\n            }\n            install(Storage)\n        }\n    }\n\n    @Provides\n    @Singleton\n    fun provideSupabaseDatabase(client: SupabaseClient): Postgrest {\n        return client.postgrest\n    }\n\n    @Provides\n    @Singleton\n    fun provideSupabaseAuth(client: SupabaseClient): Auth {\n        return client.auth\n    }\n\n\n    @Provides\n    @Singleton\n    fun provideSupabaseStorage(client: SupabaseClient): Storage {\n        return client.storage\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Base Chat Tables in PostgreSQL\nDESCRIPTION: Creates two tables: 'chats' for storing chat conversations and 'chat_messages' for storing individual messages. Includes primary key constraints and foreign key relationships between tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table chats (\n  id bigserial,\n  created_at timestamptz not null default now(),\n  primary key (id)\n);\n\ncreate table chat_messages (\n  id bigserial,\n  created_at timestamptz not null,\n  chat_id bigint not null,\n  chat_created_at timestamptz not null,\n  message text not null,\n  primary key (id),\n  foreign key (chat_id) references chats (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Vector Embeddings Data Values in SQL Format\nDESCRIPTION: SQL insertion values containing 300-dimensional vector embeddings for the words 'Apple' and 'Boat'. These vectors represent semantic embeddings where each number captures some aspect of the word's meaning in a high-dimensional space.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n('Apple', '[-0.01854126,-0.015314187,0.008172714,-0.06233388,0.0151762,0.00095683464,0.046682406,0.036243673,0.014862187,-5.8190515e-05,-0.004585996,-0.061831452,0.0136447605,0.017847551,0.048936155,0.031905275,0.0249166,-0.01723699,-0.074055605,0.0044720536,0.009445661,-0.03197354,0.016330265,-0.05798763,-0.0005444175,0.03345155,-0.06665412,-0.031260885,-0.047729123,-0.15240389,-0.0369158,-0.061498255,0.056001555,-0.00027440977,-0.00062431605,-0.037229452,-0.049931858,0.040858846,-0.031204186,0.03931569,0.05703049,-0.009987068,-0.036490448,-0.018589024,-0.028742589,-0.016836036,-0.024929224,-0.024623353,0.058277316,-0.02126311,0.055800628,-0.016453594,0.023494028,0.011939725,0.006316923,0.05045838,0.052253675,0.0018598125,0.057757597,0.064271055,0.021462984,-0.00598809,-0.20524058,0.098078206,0.07923511,-0.0030400828,-0.0042570103,-0.048181806,-0.0057368493,0.028005809,-0.027782597,0.036583826,0.056569118,0.06672127,0.0072273863,-0.010364808,0.037651714,-0.058841214,-0.0156052,-0.007403201,0.004738195,-0.045108624,-0.043373324,-0.010229558,-0.015398024,-0.027500607,-0.013934623,-0.06390856,0.07244502,-0.03525932,-0.09858975,-0.017686404,0.032276656,0.013345139,-0.07269245,-0.0112332925,0.062022205,-0.0022355681,-0.067187116,0.25026688,-0.03435671,0.0287123,0.054986972,-0.059890773,0.027863948,-0.042722933,-0.01700282,-0.019195212,-0.025022611,0.019158779,0.031251986,-0.01125425,0.03872539,-0.020698383,0.030452145,0.014281089,0.029007183,0.047993574,0.01674457,-0.016619984,-0.017566299,0.061561186,0.029382374,-0.01851396,-0.0062958095,-0.09839809,0.020334389,0.1269149,0.0069205724,0.016504155,0.08306016,-0.060554363,-0.07056581,-0.021461489,0.049540065,0.047961283,-0.018516554,-0.022690471,0.044891648,-0.04310284,-0.078540124,-0.07875601,0.012700777,-0.09502175,-0.022846391,0.0629089,-0.015902612,0.046939265,-0.07262387,0.02601966,-0.005264863,0.04895392,-0.01572132,-0.0102630425,0.015897341,0.053458296,0.03574174,0.04539862,-0.035877213,0.03533559,-0.042159036,-0.0087875,-0.049615107,0.07554764,0.011191862,-0.113151096,-0.017492991,0.043413684,0.002327505,0.0073730038,0.02350307,0.035559066,-0.0059042843,0.05666708,0.044166975,-0.00055669114,-0.036611453,-0.0014730084,0.007564431,-0.011042368,0.05057629,-0.052485,-0.044374328,0.009869594,0.08320784,-0.023855116,0.015617343,-0.030314686,0.07130435,0.03665859,0.00899261,0.05550256,-0.054251857,0.0035008327,-0.046595573,-0.042936403,-0.011023383,0.018025259,0.026859136,-0.029143373,0.049876533,-0.0034112562,-0.041306548,0.055204038,0.019626688,-0.016427225,-0.04123679,0.0017773646,0.046740886,0.012245985,-0.033460714,0.021917453,0.07956837,-0.028794741,-0.08975127,-0.0037019434,-0.00012320856,0.03852602,0.053377513,0.040480774,0.0314433,-0.090866566,-0.081535764,-0.2508107,0.007842401,-0.0103528835,-0.017066024,0.031441532,-0.040664397,0.017248066,-0.034469314,0.016174091,0.04561676,0.05384791,-0.00558743,0.018127529,0.07188737,-0.029698055,0.04265685,0.06104204,0.012198512,-0.0036226169,0.044303454,-0.028414544,0.045141805,-0.028411133,-0.04631903,0.030073958,-0.0515857,0.220293,0.04642099,0.018873105,-0.011720311,0.032426845,0.046402935,-0.03572881,-0.09112599,-0.003913931,0.06326886,0.008865028,-0.041372094,-0.06256474,-0.028682407,-0.040730156,0.047156896,-0.0039689573,-0.05302654,-0.003632981,-0.07732629,-0.01206058,-0.019614374,-0.028614756,-0.011921634,0.05150594,-0.015722616,0.035769034,0.012905213,0.04353579,-0.038506903,-0.12106876,-0.009226098,-0.019487629,0.004457581,-0.014951816,-0.045989387,0.001073027,-0.009420541,0.02853069,0.0024750652,-0.028357819,-0.01819474,0.003554601,-0.090667546,0.004385141,0.08669419,0.017099937,-0.033926927,0.07534967,0.030821681,0.04540305,-0.018767703,-0.037650675,-0.05459591,0.038266014,0.024052124,0.047373742,0.037806187,0.017990775,0.026818357,0.07041108,-0.012912107,0.009049243,-0.06140867,0.026061615,-0.0029175973,-0.0034775157,-0.038097065,0.046520837,0.0017449996,-0.24222106,0.061534416,0.014094019,0.03329052,-0.05666281,-0.0035613445,0.005507172,0.044907637,-0.011295333,0.04069986,0.0023404267,-0.017250648,0.055625506,-0.040635873,0.01642882,0.03416647,0.06721072,-0.081086,0.04945331,-0.037871443,0.022263754,0.02852677,0.21389903,-0.088772774,0.0179931,-0.008538751,-0.02611542,0.043828104,0.0054317755,-0.009777816,0.035113182,-0.007311843,0.07082955,-0.021270387,0.0066470113,0.054239165,-0.06441797,0.038601365,0.0214487,-0.025159193,-0.03238237,0.02582966,-0.079627365,-0.011419387,0.0626605,-0.024815738,-0.03032111,-0.05392778,0.01915368,0.01430781,-0.015028325,-0.050955776,-0.0047285086,0.033127528,0.016017374,-0.016613198,-0.051912326,0.015621767,-0.06378826,-0.056303553,0.040947903,-0.033308335,-0.016811416,0.07314832,0.052192166]'),\n('Boat', '[0.003451573,-0.03132442,0.041924234,-0.07151062,0.005656667,0.014033464,0.038280405,0.07405814,0.002665217,-0.020811431,0.02797703,-0.082384676,-0.021522641,0.049683884,0.0051554316,0.05113881,0.011191923,0.08603509,-0.04581075,0.027721966,0.06524101,-0.011254213,0.005719363,-0.06456224,-0.0067095314,0.027434144,-0.03998245,-0.018337745,-0.03024962,-0.12786528,-0.007468822,-0.07965858,0.002841196,-0.026761381,-0.002710397,-0.032941174,-0.01157222,0.01835951,0.025763508,0.017918503,0.01716959,0.04313931,-0.06198612,-0.019062353,-0.045892436,-0.047470637,-0.025586972,0.015134751,0.07648262,-0.04904084,0.013845007,-0.031671703,0.027743243,0.03567014,0.044218108,0.024208087,0.053735733,0.013186276,0.0055202967,0.042314656,0.05348394,0.024783261,-0.22115476,0.08963771,0.013096708,0.044419244,-0.017883042,-0.03910393,0.013514059,0.016817786,-0.052290566,0.017970363,0.042357013,0.10046304,0.027752733,-0.061662477,0.006513319,-0.037006002,0.027272867,0.027006257,0.0142964665,-0.06360955,-0.021836504,-0.029386729,0.003337552,-0.017336056,0.029699676,-0.026593758,0.03526048,0.0039346362,-0.057597876,-0.029524093,-0.01730882,0.014263184,-0.08440352,-0.00041559874,-0.004121953,-0.007147526,-0.066180535,0.21969096,-0.026675701,0.04207458,0.061170112,-0.024306577,0.044024996,-0.02159782,-0.052115727,-0.013863495,-0.04703005,-0.0007212677,0.004346511,-0.014467664,0.00843103,-0.013691538,-0.0072375066,-0.019222913,0.018029733,0.03152813,-0.030557722,-0.029202802,-0.014806717,-0.0122162895,0.05467705,-0.011990872,0.029487923,-0.057703514,0.08271271,0.105192035,0.007058811,-0.005331917,0.001044727,-0.027939413,-0.03841933,-0.039499894,-0.03354715,0.0008674375,0.0028215437,-0.0063504563,-0.0013052999,-0.01605963,-0.08247868,-0.12754385,-0.00035439446,-0.1135988,-0.043434717,0.038759027,0.002496258,0.03332463,-0.021302817,0.03943982,-0.017751513,0.04280311,0.0033914526,-0.023666987,0.018136116,-0.014481841,-0.019508364,0.07897855,-0.043303143,0.018218957,0.006419149,-0.03464293,-0.03316714,0.039618928,0.0014868038,-0.13087988,-0.0063449526,0.04696695,-0.030625926,-0.005813282,-0.01341627,0.05716793,-0.016758876,0.05393186,0.0777393,0.033460576,0.03254571,0.01969365,0.018621385,-0.009796354,0.050934583,-0.015461227,-0.054977313,0.071182206,0.06265597,-0.042554602,-0.02824994,-0.029791066,-0.0006974022,0.028558008,-0.0026959486,0.050376188,0.00981151,-0.026680889,-0.023037922,-0.030151734,-0.002973705,-0.055360682,0.0035032611,-0.049384903,0.075852595,-0.0074333963,-0.02718678,0.053259887,0.025845353,0.009015108,-0.017371554,-0.024869643,-0.013716606,0.07490163,-0.06361879,-0.0013744798,0.059992343,-0.015204999,-0.0040881964,-0.006926333,0.031526998,0.046630118,0.011222064,0.057870165,0.017545212,-0.118089885,-0.038867403,-0.21836688,0.017069299,0.013897999,-0.020572908,0.029985098,-0.011952629,0.015152697,-0.007566515,0.018216064,0.059099764,0.082925186,-0.041308656,-0.05755257,0.04316516,-0.03456597,0.04691071,0.03894865,-0.0013005713,0.0054288697,0.020903084,-0.0019502229,0.068574,-0.012678534,-0.023653781,0.05061183,-0.015460681,0.23320328,0.0540902,0.03415941,-0.03924938,0.0067807026,0.045057893,-0.026635995,-0.07698709,0.032159913,0.053191483,0.05704703,-0.021299265,-0.008298184,-0.03543195,-0.0070491335,0.04338257,-0.016497841,-0.073704265,-0.044688262,-0.040218312,-0.03207327,-0.0046671163,-0.023711322,0.0096596815,0.065637104,-0.02979161,0.033204455,0.026951917,-0.0056020273,-0.028967276,-0.07344016,0.009490252,-0.034891546,0.021181162,0.016997669,-0.01901137,3.6806174e-05,-0.05220573,0.03200216,-0.021272521,-0.030422227,-0.05363538,0.043928806,-0.08376253,-0.037302095,0.097358674,0.024045696,-0.017719422,0.081304744,0.047614243,0.06464407,-0.032756194,0.018565826,-0.044159252,0.040204857,-0.041234825,0.023949105,0.002779979,0.04253179,-0.015129703,0.022819744,-0.03602023,0.026503049,-0.03500936,0.021883395,-0.013415038,-0.025728086,-0.037960876,0.037986066,0.021162277,-0.31060043,0.031734128,-0.0022458911,0.042481646,-0.028866054,0.030208766,-0.0133145405,0.054347847,-0.073503956,0.062051143,0.005826847,0.049297802,0.030884407,-0.01688786,0.017160615,0.063027896,0.07313963,-0.09637417,0.051601037,-0.043145347,0.000817891,0.028763952,0.19526124,-0.041790325,0.0726707,-0.024687497,-0.0013156298,0.045472197,0.0010359284,0.015232671,-0.027874617,0.014591427,0.13244624,-0.039644428,0.020199,0.060292866,-0.05322153,0.03625645,0.017529424,-0.07401374,-0.036324993,0.025423175,-0.0046287975,0.0029855266,0.0834278,0.0056974366,-0.028152516,-0.091103025,-0.006525143,0.022312194,-0.03248805,-0.02484882,-0.049474973,0.010650054,0.08801606,9.901745e-05,-0.021977311,-0.03979849,-0.04118816,-0.019186275,-0.01652988,-0.068953894,-0.019286314,0.003947064,0.024725446]')\n```\n\n----------------------------------------\n\nTITLE: Querying Airtable Data with Postgres Foreign Data Wrapper\nDESCRIPTION: Example showing how to query data from Airtable bases directly through Postgres using the new Airtable Foreign Data Wrapper integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-04-beta-update-september-2023.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from my_airtable_table;\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Command to execute Laravel database migrations for setting up authentication tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Injecting TypeScript Types into Supabase Client\nDESCRIPTION: Import the generated types and inject them into the Supabase client for type safety.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { Database } from './database.types'\n// [...]\n\nconst supabase = createClient<Database>(\n  process.env.EXPO_PUBLIC_SUPABASE_URL,\n  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY\n)\n\n// [...]\n```\n\n----------------------------------------\n\nTITLE: Dumping Firestore Users to JSON File (Node.js)\nDESCRIPTION: This command allows the user to export Firestore users to a JSON file. Optionally specify the filename and batch size.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode firestoreusers2json.js [<filename.json>] [<batch_size>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Main App Component in Vue 3\nDESCRIPTION: Setting up the main App component to handle authentication state and render appropriate components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted, ref } from 'vue'\nimport Account from './components/Account.vue'\nimport Auth from './components/Auth.vue'\nimport { supabase } from './supabase'\n\nconst session = ref()\n\nonMounted(() => {\n  supabase.auth.getSession().then(({ data }) => {\n    session.value = data.session\n  })\n\n  supabase.auth.onAuthStateChange((_, _session) => {\n    session.value = _session\n  })\n})\n</script>\n\n<template>\n  <div class=\"container\" style=\"padding: 50px 0 100px 0\">\n    <Account v-if=\"session\" :session=\"session\" />\n    <Auth v-else />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Particle Material\nDESCRIPTION: Setting up the material properties for star particles with additive blending for enhanced visual effects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Material = () => useMemo(() => <meshStandardMaterial color=\"#ffffff\" blending={AdditiveBlending} />, [])\n```\n\n----------------------------------------\n\nTITLE: Incorporating npm Packages in Supabase Edge Function\nDESCRIPTION: This snippet illustrates how to use npm packages in Supabase Edge Functions. It imports the Express framework from npm and sets up a simple server that responds with a welcome message for all routes.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"npm:express@4.18.2\";\n\nconst app = express();\n\napp.get(/(.*)/, (req, res) => {\n    res.send(\"Welcome to Supabase\");\n});\n\napp.listen(8000);\n```\n\n----------------------------------------\n\nTITLE: pg_net HTTP POST Request Example\nDESCRIPTION: SQL example demonstrating how to make an asynchronous HTTP POST request using the pg_net PostgreSQL extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    net.http_post(\n        url:='https://httpbin.org/post',\n        body:='{\"hello\": \"world\"}'::jsonb\n    );\n```\n\n----------------------------------------\n\nTITLE: Generating Supabase Database Types\nDESCRIPTION: This command regenerates the Supabase database types and writes them to a file. It uses the Supabase CLI and should be run in the terminal. This is crucial for keeping types in sync with the database schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase gen types --local > registry/default/fixtures/database.types.ts\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Supabase Environment\nDESCRIPTION: Command to start the local Supabase development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Hook Secrets\nDESCRIPTION: Environment variable configuration for storing webhook secrets used by the authentication hooks for secure payload verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nSEND_SMS_HOOK_SECRETS='v1,whsec_<base64-secret>'\n```\n\n----------------------------------------\n\nTITLE: Mendable Case Study Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Mendable case study page, including metadata like title, description, author details, company information, and Supabase product usage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_customers/mendableai.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Mendable\ntitle: Mendable switches from Pinecone to Supabase Vector for PostgreSQL vector embeddings.\nmeta_title: Mendable switches from Pinecone to Supabase Vector for PostgreSQL vector embeddings.\ndescription: How Mendable boosts efficiency and accuracy of chat powered search for documentation using Supabase Vector.\nmeta_description: How Mendable boosts efficiency and accuracy of chat powered search for documentation using Supabase Vector.\nauthor: paul_copplestone\nauthor_title: Supabase\nauthor_url: https://github.com/kiwicopple\nauthor_image_url: https://avatars2.githubusercontent.com/u/10214025?s=400&u=c6775be2ae667e2acae3ccd347fed62bb3f5b3e7&v=4\nlogo: /images/customers/logos/mendableai.png\nlogo_inverse: /images/customers/logos/light/mendableai.png\nog_image: /images/customers/og/mendable.jpg\ntags:\n  - supabase\ndate: '2023-05-05'\ncompany_url: 'https://mendable.ai/'\nstats:\n  [\n    { stat: '00,000', label: Example stat },\n    { stat: '00,000', label: Example stat },\n    { stat: '00,000', label: Example stat },\n  ]\nmisc: [{ label: 'Backed by', text: 'Y Combinator' }]\nabout: Mendable is Chat Powered Search for Documentation.\nindustry: ['ai', 'saas', 'developer-tools']\ncompany_size: 'startup'\nregion: 'North America'\nsupabase_products: ['database', 'vector']\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Advisory Lock for S3 Upload Transaction in JavaScript\nDESCRIPTION: Example showing how to implement a Postgres advisory lock within a transaction to safely handle concurrent S3 object uploads. The code demonstrates acquiring a transactional lock using a hashed key, performing the upload operation, and handling metadata storage while ensuring automatic lock release at transaction end.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst key = `/bucket-name/folder/bunny.jpg`\nconst hashedKey = hash(key)\n\nawait db.withTransaction(() => {\n\t// try acquiring a transactional advisory lock\n\t// these locks are automatically released at the end of every transaction\n\tawait db.run('SELECT pg_advisory_xact_lock(?)', hashedKey);\n\n\t// the current server can upload to s3 at the given key\n\tawait uploadObject();\n\n   if (isLastChunk) {\n    // storage.objects stores the object metadata of all objects\n    // It doubles up as a way to enforce authorization.\n    // If a user is able to insert into this table, they can upload.\n    await db.run('insert into storage.objects(..) values(..)')\n   }\n});\n\n// the advisory lock is automatically released at this point\n```\n\n----------------------------------------\n\nTITLE: Uploading Generated Ticket Image to Supabase Storage (JavaScript)\nDESCRIPTION: This code uploads the generated ticket image to Supabase Storage, ensuring fast response times and efficient resource usage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst type = golden ? 'golden' : 'regular'\n\n// Upload image to storage.\nconst { error: storageError } = await supabaseAdminClient.storage\n  .from('images')\n  .upload(`lw7/tickets/${type}/${BUCKET_FOLDER_VERSION}/${username}.png`, generatedImage.body, {\n    contentType: 'image/png',\n    cacheControl: '31536000',\n    upsert: false,\n  })\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Ionic PWA Elements in React Entry Point\nDESCRIPTION: Updates the React application's entry point to initialize Ionic PWA Elements, which provides custom UI components for native device features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader'\ndefineCustomElements(window)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorkerRegistration.unregister()\nreportWebVitals()\n```\n\n----------------------------------------\n\nTITLE: Handling Kotlin Auth Exceptions\nDESCRIPTION: This section describes how to handle exceptions originating from the `supabase.auth` namespace in Kotlin. All exceptions are subclasses of `RestException` and are categorized into `AuthRestException` (from Supabase Auth API), `AuthWeakPasswordException`, and `AuthSessionMissingException`. All instances and subclasses of `AuthRestException` include an `errorCode` property.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Checking pg_cron Scheduler Process Status in PostgreSQL\nDESCRIPTION: This SQL query checks if the pg_cron scheduler process is active in the database. It returns information about the process including its ID, user, application name, and other details to help diagnose if the pg_cron scheduler is running properly.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  pid as process_id,\n  usename as database_user,\n  application_name,\n  backend_start as when_process_began,\n  wait_event_type,\n  state,\n  query,\n  backend_type\nFROM pg_stat_activity where application_name ilike 'pg_cron scheduler';\n```\n\n----------------------------------------\n\nTITLE: Basic Input OTP Usage with Groups and Separator\nDESCRIPTION: Basic implementation of the Input OTP component showing how to structure the component with slots and separators. This example creates a 6-digit OTP input split into two groups of three.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>\n```\n\n----------------------------------------\n\nTITLE: Rebasing Supabase Migrations\nDESCRIPTION: This bash script demonstrates how to rebase local schema changes on top of new migrations from the main branch. It involves renaming the migration file with a new timestamp and resetting the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\nsupabase migration new dev_A\n# Assume the new file is: supabase/migrations/<t+2>_dev_A.sql\nmv <time>_dev_A.sql <t+2>_dev_A.sql\nsupabase db reset\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL function with JavaScript in PLV8\nDESCRIPTION: Example of creating a PostgreSQL function using JavaScript and the PLV8 extension. The function retrieves users who logged in within the last week using an external moment.js library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-05-03-supabase-beta-april-2021.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function users_this_week()\nreturns json as $$\n  const moment = require('https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.js', false);\n\n  const lastWeek = moment().subtract(7, 'days');\n  const query = 'select * from auth.users where created_at > $1'\n  const users = sql(query, lastWeek);\n\n  return users;\n$$ language plv8;\n```\n\n----------------------------------------\n\nTITLE: Configuring storage buckets in config.toml\nDESCRIPTION: This configuration defines a storage bucket named 'images' with specific settings for public access, file size limits, allowed MIME types, and the local path where objects are stored.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[storage.buckets.images]\npublic = false\nfile_size_limit = \"50MiB\"\nallowed_mime_types = [\"image/png\", \"image/jpeg\"]\nobjects_path = \"./images\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client\nDESCRIPTION: TypeScript setup for Supabase client with React Native configuration including auth persistence and session management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppState } from 'react-native'\nimport 'react-native-url-polyfill/auto'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n})\n\nAppState.addEventListener('change', (state) => {\n  if (state === 'active') {\n    supabase.auth.startAutoRefresh()\n  } else {\n    supabase.auth.stopAutoRefresh()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Component to Root Layout in Next.js\nDESCRIPTION: Demonstrates how to integrate the Toaster component into the root layout of a Next.js application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toaster } from '@/components/ui/sonner'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head />\n      <body>\n        <main>{children}</main>\n        <Toaster />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with KSUID and Timestamp Extraction\nDESCRIPTION: Example of creating a table using pg_idkit's KSUID generation and demonstrating timestamp extraction from the ID. Shows how to implement virtual created_at columns using ID metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n-- At table creation\nCREATE TABLE users (\n  id text PRIMARY KEY DEFAULT idkit_ksuid_generate(),\n  name text,\n  email text,\n);\n\n-- An example query for a specific KSUID that uses created_at\nSELECT *, idkit_ksuid_extract_timestamptz(id)\nFROM users\nWHERE id = '0F755149A55730412B0AEC0E3B5B089C14B5B58D';\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Updates for Golden Ticket Status (JavaScript)\nDESCRIPTION: This code sets up a Supabase Realtime subscription to provide realtime feedback on golden ticket status changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'UPDATE',\n      schema: 'public',\n      table: 'lw7_tickets',\n      filter: `username=eq.${username}`,\n    },\n    (payload) => {\n      const golden = !!payload.new.sharedOnTwitter && !!payload.new.sharedOnLinkedIn\n      setUserData({\n        ...payload.new,\n        golden,\n      })\n      if (golden) {\n        channel.unsubscribe()\n      }\n    }\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Signing in with Supabase Auth in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to sign in a user using Supabase Auth. It calls the `supabase.auth.signIn()` method with the user's email and password.  This function triggers the creation and issuance of a user-specific JWT.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.auth.signIn({\n  email: 'valid.email@supabase.io',\n  password: 'They_Live_1988!',\n})\n```\n\n----------------------------------------\n\nTITLE: Running Postgrest Client with Unverified SSL in Python\nDESCRIPTION: This snippet demonstrates how to initialize a SyncPostgrestClient with unverified SSL for development purposes. It sets up a client with a custom URL, schema, headers, and the 'verify' parameter set to False.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-python-support.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom postgrest import SyncPostgrestClient\n\nurl: str = \"https://example.com\"\nh: dict = {\"Custom-Header\": \"value\"}\n\nwith SyncPostgrestClient(url, schema=\"pub\", headers=h, verify = False) as client:\n    session = client.session\n    assert session.base_url == \"https://example.com\"\n\n```\n\n----------------------------------------\n\nTITLE: Test Edge Function with cURL\nDESCRIPTION: Command to test the deployed Edge Function by sending a POST request with an image generation prompt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/amazon-bedrock' \\\n    --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"prompt\":\"A beautiful picture of a bird\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring the Supabase client in refine\nDESCRIPTION: Code to configure the Supabase client with your Supabase URL and API key. This client is used in auth provider and data provider methods to connect the refine app to your Supabase backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@refinedev/supabase\";\n\nconst SUPABASE_URL = YOUR_SUPABASE_URL;\nconst SUPABASE_KEY = YOUR_SUPABASE_KEY\n\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {\n  db: {\n    schema: \"public\",\n  },\n  auth: {\n    persistSession: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Dart\nDESCRIPTION: This snippet shows how to initialize the Supabase client in a Dart application using the project URL and anonymous API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Supabase.initialize(\n    url: 'https://<project>.supabase.co',\n    anonKey: '<your-anon-key>',\n  );\n\n  runApp(MyApp());\n}\n\nfinal supabase = Supabase.instance.client;\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Sentry integration with pnpm\nDESCRIPTION: Command to install the Supabase Sentry integration package using pnpm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @supabase/sentry-js-integration\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment configuration file for storing Supabase API credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SUPABASE_URL=YOUR_SUPABASE_URL\nVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase C# Package via NuGet CLI\nDESCRIPTION: Command to install the Supabase C# client library using the .NET CLI tool. This adds the supabase-csharp package to your C# project from nuget.org.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/csharp/v0/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package supabase-csharp\n```\n\n----------------------------------------\n\nTITLE: Styling RegisterPage in Ionic Angular\nDESCRIPTION: Applies CSS styles to the registration page, setting a background image and gradient overlay.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_17\n\nLANGUAGE: css\nCODE:\n```\nion-content {\n  --padding-top: 20%;\n  --padding-start: 5%;\n  --padding-end: 5%;\n  --background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.7)),\n    url('https://images.unsplash.com/photo-1508964942454-1a56651d54ac?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1035&q=80')\n      no-repeat;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Component Usage\nDESCRIPTION: Example demonstrating how to use the Calendar component with React state for date selection. Shows setting up a single mode calendar with selected date and onSelect handler.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/calendar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst [date, setDate] = React.useState<Date | undefined>(new Date())\n\nreturn <Calendar mode=\"single\" selected={date} onSelect={setDate} className=\"rounded-md border\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase-KT Dependencies with Gradle Groovy\nDESCRIPTION: Shows how to add core Supabase-KT modules using Gradle Groovy build script syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation platform(\"io.github.jan-tennert.supabase:bom:VERSION\")\nimplementation 'io.github.jan-tennert.supabase:postgrest-kt'\nimplementation 'io.github.jan-tennert.supabase:auth-kt'\nimplementation 'io.github.jan-tennert.supabase:realtime-kt'\n```\n\n----------------------------------------\n\nTITLE: Verifying Custom Domain with Supabase CLI\nDESCRIPTION: Use the Supabase CLI to verify the custom domain setup. This command checks DNS records and initiates the SSL certificate issuance process for the custom domain.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase domains reverify --project-ref abcdefghijklmnopqrst\n```\n\n----------------------------------------\n\nTITLE: Magic Link Authentication Provider for Supabase\nDESCRIPTION: Custom auth provider implementation that uses Supabase's magic link (OTP) authentication instead of password-based login. Handles login, logout, session checking, and user identity retrieval.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthBindings } from '@refinedev/core'\n\nimport { supabaseClient } from './utility'\n\nconst authProvider: AuthBindings = {\n  login: async ({ email }) => {\n    try {\n      const { error } = await supabaseClient.auth.signInWithOtp({ email })\n\n      if (!error) {\n        alert('Check your email for the login link!')\n        return {\n          success: true,\n        }\n      }\n\n      throw error\n    } catch (e: any) {\n      alert(e.message)\n      return {\n        success: false,\n        e,\n      }\n    }\n  },\n  logout: async () => {\n    const { error } = await supabaseClient.auth.signOut()\n\n    if (error) {\n      return {\n        success: false,\n        error,\n      }\n    }\n\n    return {\n      success: true,\n      redirectTo: '/',\n    }\n  },\n  onError: async (error) => {\n    console.error(error)\n    return { error }\n  },\n  check: async () => {\n    try {\n      const { data } = await supabaseClient.auth.getSession()\n      const { session } = data\n\n      if (!session) {\n        return {\n          authenticated: false,\n          error: {\n            message: 'Check failed',\n            name: 'Session not found',\n          },\n          logout: true,\n          redirectTo: '/login',\n        }\n      }\n    } catch (error: any) {\n      return {\n        authenticated: false,\n        error: error || {\n          message: 'Check failed',\n          name: 'Not authenticated',\n        },\n        logout: true,\n        redirectTo: '/login',\n      }\n    }\n\n    return {\n      authenticated: true,\n    }\n  },\n  getIdentity: async () => {\n    const { data } = await supabaseClient.auth.getUser()\n\n    if (data?.user) {\n      return {\n        ...data.user,\n        name: data.user.email,\n      }\n    }\n\n    return null\n  },\n}\n\nexport default authProvider\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library for integrating with Supabase services.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Item Layout with React Hook Form in TSX\nDESCRIPTION: This snippet shows the basic structure of a form item using react-hook-form components, highlighting the parts that can be replaced by FormItemLayout.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/form-item-layout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FormItem_Shadcn_>\n  <FormLabel_Shadcn_>Username</FormLabel_Shadcn_>\n  <FormControl_Shadcn_>\n    <Input placeholder=\"shadcn\" {...field} />\n  </FormControl_Shadcn_>\n  <FormDescription_Shadcn_>This is your public display name.</FormDescription_Shadcn_>\n  <FormMessage_Shadcn_ />\n</FormItem_Shadcn_>\n```\n\n----------------------------------------\n\nTITLE: Initializing AI Inference Session\nDESCRIPTION: TypeScript code to create a new AI inference session using the gte-small model.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = new Supabase.ai.Session('gte-small');\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Dependencies for Hono\nDESCRIPTION: Command to install all required dependencies including @supabase/supabase-js and @supabase/ssr for server-side authentication in a Hono application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/hono.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting OLD_DB_URL Environment Variable\nDESCRIPTION: Command to set the OLD_DB_URL environment variable with the Vercel Postgres connection string for migration purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OLD_DB_URL=\"postgres://default:xxxxxxxxxxxx@yy-yyyyy-yyyyyy-yyyyyyy.us-west-2.aws.neon.tech:5432/verceldb?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase in Flutter Figma Clone\nDESCRIPTION: Dart code to initialize Supabase in the main.dart file of the Flutter Figma clone app. It sets up the Supabase client and defines the main app structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:canvas/canvas/canvas_page.dart';\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter';\n\nvoid main() async {\n  Supabase.initialize(\n\t\t// TODO: Replace the credentials with your own\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_SUPABASE_ANON_KEY',\n  );\n  runApp(const MyApp());\n}\n\nfinal supabase = Supabase.instance.client;\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Figma Clone',\n      debugShowCheckedModeBanner: false,\n      home: CanvasPage(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Server for Linux\nDESCRIPTION: JSON configuration for setting up Supabase server on Linux systems. Uses direct npx command execution with environment variable setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_vscode_config.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"supabase-access-token\",\n      \"description\": \"Supabase personal access token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@supabase/mcp-server-supabase@latest\"],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"${input:supabase-access-token}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization Plugin in Kotlin Build File\nDESCRIPTION: This snippet shows how to add the KotlinX Serialization plugin to a Kotlin project using Gradle with the Kotlin DSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.serialization\") version \"KOTLIN_VERSION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Function without JWT Verification\nDESCRIPTION: Command to deploy an Edge Function without JWT authorization checks, useful for webhook endpoints.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy hello-world --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring AppRoutingModule for Login and Account Pages in Angular\nDESCRIPTION: This code sets up the routing configuration for the application, defining paths for the login and account pages using lazy loading.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core'\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router'\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./login/login.module').then((m) => m.LoginPageModule),\n  },\n  {\n    path: 'account',\n    loadChildren: () => import('./account/account.module').then((m) => m.AccountPageModule),\n  },\n]\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\n----------------------------------------\n\nTITLE: Calculating Circle Circumference for Animation Timing\nDESCRIPTION: This snippet calculates the circumference to determine how long it takes for a particle to complete a full circle, which is used for timing animation phases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst circumference = (config.widthRadius * Math.PI * 2) / 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend-State with Supabase and AsyncStorage\nDESCRIPTION: Set up Legend-State with Supabase for remote persistence and React Native Async Storage for local persistence.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport { observable } from '@legendapp/state'\nimport { syncedSupabase } from '@legendapp/state/sync-plugins/supabase'\nimport { configureSynced } from '@legendapp/state/sync'\nimport { observablePersistAsyncStorage } from '@legendapp/state/persist-plugins/async-storage'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n\nconst supabase = createClient(\n  process.env.EXPO_PUBLIC_SUPABASE_URL,\n  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY\n)\n\n// Create a configured sync function\nconst customSynced = configureSynced(syncedSupabase, {\n  // Use React Native Async Storage\n  persist: {\n    plugin: observablePersistAsyncStorage({\n      AsyncStorage,\n    }),\n  },\n  generateId,\n  supabase,\n  changesSince: 'last-sync',\n  fieldCreatedAt: 'created_at',\n  fieldUpdatedAt: 'updated_at',\n  // Optionally enable soft deletes\n  fieldDeleted: 'deleted',\n})\n\nexport const todos$ = observable(\n  customSynced({\n    supabase,\n    collection: 'todos',\n    select: (from) => from.select('id,counter,text,done,created_at,updated_at,deleted'),\n    actions: ['read', 'create', 'update', 'delete'],\n    realtime: true,\n    // Persist data and pending changes locally\n    persist: {\n      name: 'todos',\n      retrySync: true, // Persist pending changes and retry\n    },\n    retry: {\n      infinite: true, // Retry changes with exponential backoff\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using OR Statements in Regular Expressions\nDESCRIPTION: Demonstrates the use of the pipe (|) operator to create OR conditions in regular expressions. This example matches messages containing 'started host' or 'started authenticated'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- find event_messages that have the word 'started' followed by either the word \"host\" or \"authenticated\"\nregexp_contains(event_message, 'started host|authenticated')\n```\n\n----------------------------------------\n\nTITLE: Checking Schema Privileges\nDESCRIPTION: Command to check existing permissions on a database schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> \\dn+ public\n                                        List of schemas\n┌────────┬───────────────────┬────────────────────────────────────────┬────────────────────────┐\n│  Name  │       Owner       │           Access privileges            │      Description       │\n├────────┼───────────────────┼────────────────────────────────────────┼────────────────────────┤\n│ public │ pg_database_owner │ pg_database_owner=UC/pg_database_owner↵│ standard public schema │\n│        │                   │ =U/pg_database_owner                  ↵│                        │\n│        │                   │ postgres=U/pg_database_owner          ↵│                        │\n│        │                   │ anon=U/pg_database_owner              ↵│                        │\n│        │                   │ authenticated=U/pg_database_owner     ↵│                        │\n│        │                   │ service_role=U/pg_database_owner       │                        │\n└────────┴───────────────────┴────────────────────────────────────────┴────────────────────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres WAL Size using Supabase CLI\nDESCRIPTION: This snippet demonstrates how to use the Supabase CLI to update Postgres configuration parameters, specifically increasing the default WAL size to 2GB.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-30-supabase-clickhouse-partnership.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --experimental --project-ref xxxx-yyy \\\npostgres-config update --config max_slot_wal_keep_size=2GB\n```\n\n----------------------------------------\n\nTITLE: Listening to Specific Table Events in Kotlin with Supabase Realtime\nDESCRIPTION: Sets up a Kotlin channel to listen for all event types on a specific table ('todos') in the public schema of a Supabase database. The code creates a flow of PostgresAction events with a table filter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction>(schema = \"public\") {\n    table = \"todos\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Mixing Color Classes in JSX\nDESCRIPTION: Shows how to use foreground colors for text and background styling, demonstrating the flexibility of color primitives.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/tailwind-classes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// use the text light color for some text\n<span className=\"text-light\"></span>\n\n// we can use the same color for a background\n<div className=\"bg-foreground-light\">\n    <span>I have the same color background as the left example</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Performance Metrics Table\nDESCRIPTION: Latency measurements across different percentiles showing performance characteristics of the database operations. Data shows measurements from 60 samples with 21k requests over ~60 seconds.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n┌────────────┬──────────────┐\n│ Percentile │ Latency (ms) │\n├────────────┼──────────────┤\n│ 0.001      │ 0            │\n├────────────┼──────────────┤\n│ 0.01       │ 0            │\n├────────────┼──────────────┤\n│ 0.1        │ 0            │\n├────────────┼──────────────┤\n│ 1          │ 0            │\n├────────────┼──────────────┤\n│ 2.5        │ 0            │\n├────────────┼──────────────┤\n│ 10         │ 0            │\n├────────────┼──────────────┤\n│ 25         │ 1            │\n├────────────┼──────────────┤\n│ 50         │ 2            │\n├────────────┼──────────────┤\n│ 75         │ 4            │\n├────────────┼──────────────┤\n│ 90         │ 6            │\n├────────────┼──────────────┤\n│ 97.5       │ 6            │\n├────────────┼──────────────┤\n│ 99         │ 6            │\n├────────────┼──────────────┤\n│ 99.9       │ 9            │\n├────────────┼──────────────┤\n│ 99.99      │ 28           │\n├────────────┼──────────────┤\n│ 99.999     │ 59           │\n└────────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Supabase SMS Provider Configuration in React\nDESCRIPTION: This code snippet imports the Admonition component from a UI patterns library and a custom CostWarning component for use in the SMS provider configuration page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/components/AuthSmsProviderConfig/VonageConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Admonition } from 'ui-patterns/admonition'\nimport { CostWarning } from './AuthSmsProviderConfig.Warnings'\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Table with Array Column\nDESCRIPTION: SQL definition for creating a blog table with array column type for tags\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table blog (\n  id int primary key,\n  name text not null,\n  tags text[] not null,\n  created_at timestamp not null\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Fetch-Retry\nDESCRIPTION: Setup of Supabase client with a custom fetch function wrapped by fetch-retry for automatic retries\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nimport fetchRetry from 'fetch-retry'\n\n// Wrap the global fetch with fetch-retry\nconst fetchWithRetry = fetchRetry(fetch)\n\n// Create a Supabase client instance with the custom fetch\nconst supabase = createClient('https://your-supabase-url.supabase.co', 'your-anon-key', {\n  global: {\n    fetch: fetchWithRetry,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Dependencies\nDESCRIPTION: Command to install required Supabase packages for authentication integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app && npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared\n```\n\n----------------------------------------\n\nTITLE: Running Database Tests with Supabase CLI\nDESCRIPTION: Example output of running database tests using Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase test db\npsql:todos_rls.test.sql:4: NOTICE:  extension \"pgtap\" already exists, skipping\n./todos_rls.test.sql .. ok\nAll tests successful.\nFiles=1, Tests=6,  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)\nResult: PASS\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in TypeScript\nDESCRIPTION: Create a Supabase client instance using the environment variables in a utils file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n  process.env.EXPO_PUBLIC_SUPABASE_URL,\n  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for CanvasPage State in Dart\nDESCRIPTION: Declares properties to manage user cursors, canvas objects, Supabase Realtime channel, and drawing states.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass _CanvasPageState extends State<CanvasPage> {\n  final Map<String, UserCursor> _userCursors = {};\n  final Map<String, CanvasObject> _canvasObjects = {};\n  late final RealtimeChannel _canvasChanel;\n  late final String _myId;\n  _DrawMode _currentMode = _DrawMode.pointer;\n  String? _currentlyDrawingObjectId;\n  Offset? _panStartPoint;\n  Offset _cursorPosition = const Offset(0, 0);\n\n  // TODO: Add methods\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplatform Ktor Client Configuration\nDESCRIPTION: Kotlin Multiplatform configuration showing how to set up Ktor client engines for different platforms (JVM, Android, JS, iOS) using Gradle Kotlin DSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval commonMain by getting {\n    dependencies {\n        //supabase modules\n    }\n}\nval jvmMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-cio:KTOR_VERSION\")\n    }\n}\nval androidMain by getting {\n    dependsOn(jvmMain)\n}\nval jsMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-js:KTOR_VERSION\")\n    }\n}\nval iosMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-darwin:KTOR_VERSION\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Menubar Implementation\nDESCRIPTION: Example of implementing a basic Menubar with a File menu that contains various items and separators. Shows the structure of nested menubar components including shortcuts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/menubar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>New Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Share</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Print</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Generated Embeddings Column in SQL\nDESCRIPTION: This snippet demonstrates how to create a table with a vector column that automatically generates embeddings using the embed() function. This approach uses a generated column that calls an embedding function on write, but has limitations for large-scale applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id uuid primary key,\n  content text,\n  embedding vector(1536) generated always as (embed(content)) stored\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ktor Client Engine for Multiplatform\nDESCRIPTION: Shows how to configure Ktor client engine dependencies for different platforms in a Kotlin Multiplatform project, including JVM, Android, JavaScript, and iOS targets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval commonMain by getting {\n    dependencies {\n        //supabase modules\n    }\n}\nval jvmMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-cio:KTOR_VERSION\")\n    }\n}\nval androidMain by getting {\n    dependsOn(jvmMain)\n}\nval jsMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-js:KTOR_VERSION\")\n    }\n}\nval iosMain by getting {\n    dependencies {\n        implementation(\"io.ktor:ktor-client-darwin:KTOR_VERSION\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Layout with React Query Provider in Next.js\nDESCRIPTION: Next.js root layout file that incorporates the React Query Client Provider to enable React Query throughout the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\nimport { ReactQueryClientProvider } from '@/components/ReactQueryClientProvider'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <ReactQueryClientProvider>\n      <html lang=\"en\">\n        <body className={inter.className}>{children}</body>\n      </html>\n    </ReactQueryClientProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Functions\nDESCRIPTION: This snippet provides a command to deploy Supabase Functions, bypassing JWT verification. It requires the Supabase CLI to be installed and configured properly. The command ensures the function is available remotely on the Supabase platform for production or wider testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw12-ticket-og/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy lw12-ticket-og --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Best Practices for Selecting Nested Values\nDESCRIPTION: Contrasts inefficient vs. efficient approaches for querying nested data. Shows why selecting individual values is better than retrieving entire large nested objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- ❌ Avoid doing this\nselect\n  datetime(timestamp),\n  m as metadata -- <- metadata contains many nested keys\nfrom\n  edge_logs as t\n  cross join unnest(t.metadata) as m;\n\n-- ✅ Do this\nselect\n  datetime(timestamp),\n  r.method -- <- select only the required values\nfrom\n  edge_logs as t\n  cross join unnest(t.metadata) as m\n  cross join unnest(m.request) as r;\n```\n\n----------------------------------------\n\nTITLE: Upserting Vectors into a Collection\nDESCRIPTION: Adds or updates records in the collection. Each record consists of an identifier, a vector, and associated metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# add records to the collection\ndocs.upsert(\n    records=[\n        (\n         \"vec0\",           # the vector's identifier\n         [0.1, 0.2, 0.3],  # the vector. list or np.array\n         {\"year\": 1973}    # associated  metadata\n        ),\n        (\n         \"vec1\",\n         [0.7, 0.8, 0.9],\n         {\"year\": 2012}\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Removal in React Native with Supabase Storage\nDESCRIPTION: This snippet shows how to implement file removal functionality using Supabase Storage in a React Native app. It removes the file from storage and updates the local state to reflect the change.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst onRemoveImage = async (item: FileObject, listIndex: number) => {\n  supabase.storage.from('files').remove([`${user!.id}/${item.name}`])\n  const newFiles = [...files]\n  newFiles.splice(listIndex, 1)\n  setFiles(newFiles)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Vector Embeddings Table in SQL\nDESCRIPTION: Creates a table for storing vector embeddings with structured metadata using dedicated columns for content and URL. Demonstrates insertion of sample data with a 3-dimensional vector embedding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table docs (\n  id uuid primary key,\n  embedding vector(3),\n  content text,\n  url text\n);\n\ninsert into docs\n  (id, embedding, content, url)\nvalues\n  ('79409372-7556-4ccc-ab8f-5786a6cfa4f7', array[0.1, 0.2, 0.3], 'Hello world', '/hello-world');\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Iframe in React/HTML\nDESCRIPTION: Code for embedding a YouTube video with proper styling and responsive behavior. The iframe has CSS classes for styling and includes standard YouTube embed parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-06-supabase-beta-march-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/TtLxxaYE1rA\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing test helpers for Supabase in PostgreSQL\nDESCRIPTION: This SQL snippet installs the Test Helpers package, which provides utilities for simplifying testing of Supabase-specific features. It uses the dbdev package manager to install and create the extension.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect dbdev.install('basejump-supabase_test_helpers');\ncreate extension if not exists \"basejump-supabase_test_helpers\" version '0.0.6';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Types for Complex Queries with Joins\nDESCRIPTION: This TypeScript code demonstrates how to use helper types to get nested types for database joins, specifically for a query joining countries and cities.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'\n\nconst countriesWithCitiesQuery = supabase\n  .from(\"countries\")\n  .select(`\n    id,\n    name,\n    cities (\n      id,\n      name\n    )\n  `);\ntype CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;\n\nconst { data, error } = await countriesWithCitiesQuery;\nif (error) throw error;\nconst countriesWithCities: CountriesWithCities = data;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Custom Domain in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Supabase client using a custom domain as the Supabase URL. It imports the createClient function from the @supabase/supabase-js library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Use a custom domain as the supabase URL\nconst supabase = createClient('https://my-example-brand.supabase.co', 'public-anon-key')\n```\n\n----------------------------------------\n\nTITLE: Sample Search Phrases for FTS Testing\nDESCRIPTION: A list of search phrases used to benchmark FTS performance across different search engines. The phrases include common movie-related terms, potential misspellings, and terms with varying frequency in the dataset.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"super hero\"\n\"superhero\"\n\"superman\"\n\"suprman\"\n\"love\"\n\"world war\"\n\"spy\"\n\"romance\"\n\"comedy\"\n\"awakening\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Similarity Search Function in SQL\nDESCRIPTION: SQL function to perform similarity search on vector embeddings using cosine distance. This function can be called via RPC from client libraries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function match_documents (\n  query_embedding vector(384),\n  match_threshold float,\n  match_count int\n)\nreturns table (\n  id bigint,\n  title text,\n  body text,\n  similarity float\n)\nlanguage sql stable\nas $$\n  select\n    documents.id,\n    documents.title,\n    documents.body,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where 1 - (documents.embedding <=> query_embedding) > match_threshold\n  order by (documents.embedding <=> query_embedding) asc\n  limit match_count;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Send Messages in Swift\nDESCRIPTION: This Swift code demonstrates how to configure a Supabase Realtime channel to receive its own broadcast messages. It sets the 'receiveOwnBroadcasts' parameter and includes subscription and broadcasting logic.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"room-2\") {\n  $0.broadcast.receiveOwnBroadcasts = true\n}\n\nlet broadcastStream = await myChannel.broadcast(event: \"test-my-messages\")\n\nawait myChannel.subscribe()\n\ntry await myChannel.broadcast(\n    event: \"test-my-messages\",\n    payload: YourMessage(\n        message: \"talking to myself\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning Firebase to Supabase Migration Tool Repository\nDESCRIPTION: Command to clone the firebase-to-supabase repository which contains the storage migration tools.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-storage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supabase-community/firebase-to-supabase.git\n```\n\n----------------------------------------\n\nTITLE: Extension-Specific RLS Policy Creation\nDESCRIPTION: SQL command showing how to create an RLS policy that controls access based on the Realtime extension type (broadcast or presence).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"read access to broadcast and presence\"\non \"realtime\".\"messages\"\nas permissive\nfor select\nto authenticated\nusing (\n  realtime.messages.extension in ('broadcast', 'presence') -- specify the topic name\n);\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client on Linux (Debian)\nDESCRIPTION: Commands to install the PostgreSQL client on Debian-based Linux systems, which includes the psql command-line tool for connecting to Postgres databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/avoiding-timeouts-in-long-running-queries-6nmbdN.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install postgresql-client\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Application Commands\nDESCRIPTION: Command line instructions for running the Flutter application on different platforms including iOS, Android, and web server.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/flutter-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d web-server --web-hostname localhost --web-port 3000\n```\n\n----------------------------------------\n\nTITLE: Creating a Descending Order Index in SQL\nDESCRIPTION: This snippet shows how to create an index with a specific sort order (descending) and NULL placement, which can improve performance for certain ORDER BY queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: HTML iframe implementation for embedding a YouTube video about the Logflare acquisition, including responsive container and proper attributes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-02-supabase-acquires-logflare.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full video-with-border\"\n    src=\"https://www.youtube-nocookie.com/embed/MdKWR_Zpu50\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Triggers on Auth Schema\nDESCRIPTION: SQL commands to create triggers that execute the appropriate functions for insert, update, and delete operations on auth.users table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\ncreate trigger on_auth_user_updated\n  after update on auth.users\n  for each row execute procedure public.update_user();\n\ncreate trigger on_auth_user_deleted\n  after delete on auth.users\n  for each row execute procedure public.delete_user();\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Component via CLI\nDESCRIPTION: Command to install the Accordion component using the shadcn-ui CLI tool. This is the recommended installation method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/accordion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add accordion\n```\n\n----------------------------------------\n\nTITLE: Including Supabase JS via CDN\nDESCRIPTION: HTML script tags to include the Supabase JavaScript library via CDN links. Two options are provided: jsDelivr and unpkg.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>\n//or\n<script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Database Function for Similar Movies Search\nDESCRIPTION: Sets up HNSW index for efficient vector similarity search and creates a database function to query similar movies based on embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Set index on embedding column\ncreate index on films using hnsw (embedding vector_cosine_ops);\n\n-- Create function to find related films\ncreate or replace function get_related_film(embedding vector(1536), film_id integer)\nreturns setof films\nlanguage sql\nas $$\n    select *\n    from films\n    where id != film_id\n    order by films.embedding <=> get_related_film.embedding\n    limit 6;\n$$ security invoker;\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase DB Dump Help Command\nDESCRIPTION: Shows the help command for the 'supabase db dump' CLI tool, which is used for backing up and migrating databases in Supabase projects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nsupabase db dump --help\nDumps data or schemas from the remote database\n\nUsage:\nsupabase db dump [flags]\n\nFlags:\n--data-only Dumps only data records.\n-f, --file string File path to save the dumped contents.\n--keep-comments Keeps commented lines from pg_dump output.\n--role-only Dumps only cluster roles.\n--use-copy Uses copy statements in place of inserts.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a User with a Custom UUID in Supabase Auth (Admin)\nDESCRIPTION: This code snippet shows how to create a new user in Supabase Auth with a specified UUID. It demonstrates the `createUser` method, including the `id` parameter to override the default UUID generation. It requires the `@supabase/supabase-js` library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// specify a custom id\nconst { data, error } = await supabase.auth.admin.createUser({\n  id: 'e7f5ae65-376e-4d05-a18c-10a91295727a',\n  email: 'valid.email@supabase.io',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Environment Configuration\nDESCRIPTION: Environment configuration file for Supabase credentials and API keys.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const environment = {\n  production: false,\n  supabaseUrl: 'YOUR-URL',\n  supabaseKey: 'YOUR-ANON-KEY',\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Route Handlers\nDESCRIPTION: Example of updating a Next.js API route handler to use the new server client utility function instead of the deprecated createRouteHandlerClient.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// replace\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { cookies } from 'next/headers';\n\n// with\nimport { createClient } from '@/utils/supabase/server';\n\nexport async function POST(request: Request) {\n\t// replace\n\tconst supabase = createRouteHandlerClient<Database>({\n    cookies: () => cookieStore,\n  });\n\n  // with\n  const supabase = createClient();\n\n  return...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ionic App Development Server\nDESCRIPTION: Command to launch the Ionic development server after setting up the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nionic serve\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Size Using cURL for Supabase Storage Objects\nDESCRIPTION: This bash command uses cURL to fetch the size of a specific file stored in Supabase storage, which is crucial for calculating the total egress when combined with request count.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/bandwidth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -w \"%{size_download}\\n\" -o /dev/null \"https://my_project.supabase.co/storage/v1/object/large%20bucket/20230902_200037.gif\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Information in PostgreSQL\nDESCRIPTION: SQL queries that demonstrate how to access request information such as headers, cookies, and JWT claims using the current_setting() function in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- To get all the headers sent in the request\nSELECT current_setting('request.headers', true)::json;\n\n-- To get a single header, you can use JSON arrow operators\nSELECT current_setting('request.headers', true)::json->>'user-agent';\n\n-- Access Cookies\nSELECT current_setting('request.cookies', true)::json;\n```\n\n----------------------------------------\n\nTITLE: Creating One-to-One Relationships in SQL\nDESCRIPTION: Shows two methods of creating one-to-one relationships in PostgreSQL: using a unique constraint on a foreign key or using a primary key as a foreign key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- A unique constraint on a foreign key\ncreate table country (\n  id serial primary key,\n  name text\n);\n\ncreate table capital (\n  id serial primary key,\n  name text,\n  country_id int unique,\n  foreign key (country_id) references country (id)\n);\n\n-- or a primary key on a foreign key\ncreate table country (\n  id serial primary key,\n  name text\n);\n\ncreate table capital (\n  id serial primary key,\n  name text,\n  foreign key (id) references country (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a View in SQL for pg_graphql\nDESCRIPTION: This SQL snippet creates a view named 'ProjectOwner' that selects specific columns from the account and role tables. It demonstrates how to create a view that can be used with pg_graphql.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate view \"ProjectOwner\" as\n  select\n    acc.id,\n    acc.name\n  from\n    account as acc\n    join role as r on r.id = acc.role_id\n  where acc.role = 'project_owner';\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Server for Windows\nDESCRIPTION: JSON configuration for setting up Supabase server on Windows systems. Uses cmd.exe as the command shell and includes necessary environment setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_vscode_config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"supabase-access-token\",\n      \"description\": \"Supabase personal access token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"supabase\": {\n      \"command\": \"cmd\",\n      \"args\": [\"/c\", \"npx\", \"-y\", \"@supabase/mcp-server-supabase@latest\"],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"${input:supabase-access-token}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Swift Auth Errors\nDESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in Swift. All errors will be a case of the `AuthError` enum. The `api(message:errorCode:underlyingData:underlyingResponse:)` case is specifically for errors originating from the Supabase Auth API, which include an `errorCode` property.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Basic Regular Expression Filtering with SQL\nDESCRIPTION: A basic query that filters postgres_logs using regular expressions to find event messages containing a specific string. It uses the regexp_contains function from BigQuery to check if a string is present in the event_message column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(timestamp as datetime) as timestamp,\n  event_message,\n  metadata\nfrom postgres_logs\nwhere regexp_contains(event_message, 'is present');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Single Post Component\nDESCRIPTION: Implements a dynamic server component for individual post display with no caching.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport supabase from '../../../utils/supabase'\nimport { notFound } from 'next/navigation'\n\nexport const revalidate = 0\n\nexport async function generateStaticParams() {\n  const { data: posts } = await supabase.from('posts').select('id')\n\n  return posts?.map(({ id }) => ({\n    id,\n  }))\n}\n\nexport default async function Post({ params: { id } }: { params: { id: string } }) {\n  const { data: post } = await supabase.from('posts').select().match({ id }).single()\n\n  if (!post) {\n    notFound()\n  }\n\n  return <pre>{JSON.stringify(post, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Timestamp Distance Ordering Using Attached Column\nDESCRIPTION: Example of a SELECT query that performs text search using a RUM index with an attached timestamp column, ordering results by the distance between a query timestamp and the stored timestamps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, d, d `<=>` '2016-05-16 14:21:25' FROM tsts WHERE t @@ 'wr&qh' ORDER BY d `<=>` '2016-05-16 14:21:25' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Deep Links\nDESCRIPTION: AndroidManifest.xml configuration that sets up deep link handling for OAuth and OTP sign-ins. Defines the necessary activities and intent filters for handling authentication callbacks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <application\n        android:name=\".ManageProductApplication\"\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:enableOnBackInvokedCallback=\"true\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.ManageProducts\"\n        tools:targetApi=\"31\">\n        <activity\n            android:name=\".DeepLinkHandlerActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.ManageProducts\" >\n            <intent-filter android:autoVerify=\"true\">\n                <action android:name=\"android.intent.action.VIEW\" />\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n                <data\n                    android:host=\"supabase.com\"\n                    android:scheme=\"app\" />\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.ManageProducts\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase-KT Dependencies with Maven\nDESCRIPTION: XML configuration for adding Supabase-KT dependencies in Maven projects using BOM for version management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>bom</artifactId>\n    <version>VERSION</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>postgrest-kt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>auth-kt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>realtime-kt</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Inserting Array Data with Swift Supabase Client\nDESCRIPTION: This Swift snippet defines a struct and uses the Supabase client to insert a record into the 'arraytest' table with an id of 2 and a text array containing four elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct ArrayTest: Encodable {\n  let id: Int\n  let textarray: [String]\n}\n\ntry await supabase\n  .from(\"arraytest\")\n  .insert(\n    [\n      ArrayTest(\n        id: 2,\n        textarray: [\"one\", \"two\", \"three\", \"four\"]\n      )\n    ]\n  )\n  .execute()\n```\n\n----------------------------------------\n\nTITLE: Edge Functions Error Handling - JavaScript\nDESCRIPTION: Example showing how to handle different types of errors when invoking Edge Functions using supabase-js library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/development-tips.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FunctionsHttpError, FunctionsRelayError, FunctionsFetchError } from '@supabase/supabase-js'\n\nconst { data, error } = await supabase.functions.invoke('hello', {\n  headers: { 'my-custom-header': 'my-custom-header-value' },\n  body: { foo: 'bar' },\n})\n\nif (error instanceof FunctionsHttpError) {\n  const errorMessage = await error.context.json()\n  console.log('Function returned an error', errorMessage)\n} else if (error instanceof FunctionsRelayError) {\n  console.log('Relay error:', error.message)\n} else if (error instanceof FunctionsFetchError) {\n  console.log('Fetch error:', error.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sign-Out Scopes Dart\nDESCRIPTION: This snippet illustrates how to use sign-out scopes like 'global' and 'local' in Dart with Supabase Auth. The default behavior is to end all sessions. It's necessary to have Supabase Dart library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n// defaults to the local scope\\nawait supabase.auth.signOut();\\n\\n// sign out from all sessions\\nawait supabase.auth.signOut(scope: SignOutScope.global);\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Hit Rates in PostgreSQL\nDESCRIPTION: SQL query to check the cache hit rates for both indexes and tables, helping determine if memory capacity needs to be increased.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/steps-to-improve-query-performance-with-indexes-q8PoC9.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  'index hit rate' as name,\n  (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read), 0) as ratio\nfrom pg_statio_user_indexes\nunion all\nselect\n  'table hit rate' as name,\n  sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read), 0) as ratio\nfrom pg_statio_user_tables;\n```\n\n----------------------------------------\n\nTITLE: Listening only to 'INSERT' events in Dart\nDESCRIPTION: This Dart snippet configures a Supabase client to listen only for INSERT events in the 'public' schema using `onPostgresChanges`. It logs specific changes. The channel cannot be named 'realtime'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nfinal changes = supabase\n    .channel('schema-db-changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Identity in Supabase Auth\nDESCRIPTION: Demonstrates how to use the linkIdentity() method to link an OAuth identity to a user's account in Supabase Auth. This code snippet shows linking a Google identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-auth-identity-linking-hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase.auth.linkIdentity({\n  provider: 'google',\n})\n```\n\n----------------------------------------\n\nTITLE: Install Supabase packages using npm\nDESCRIPTION: This command installs the necessary Supabase packages, `@supabase/supabase-js` and `@supabase/ssr`, into your SvelteKit project. These packages are required for interacting with Supabase from both the client and server-side.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @supabase/supabase-js @supabase/ssr\n```\n\n----------------------------------------\n\nTITLE: Implementing RealtimeAvatarStack Component in React\nDESCRIPTION: This snippet demonstrates how to use the RealtimeAvatarStack component in a React application. It shows the component being used within a Header to display online users in a specific room.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-avatar-stack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'\n\nexport default function Page() {\n  return (\n    <Header className=\"flex items-center justify-between\">\n      <h1>Lumon Industries</h1>\n      <RealtimeAvatarStack roomName=\"break_room\" />\n    </Header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Logflare Endpoint Query via cURL\nDESCRIPTION: cURL command to query a Logflare Endpoint API, demonstrating how to pass parameters (in this case, 'day') to the endpoint for flexible querying.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-10-supabase-logs-self-hosted.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://logflare.app/endpoints/query/69425db0-1cfb-48b4-84c7-2a872b6f0a61\" \\\n -H 'Content-Type: application/json; charset=utf-8' \\\n -G -d \"day=30\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In with Apple in Supabase Flutter v2\nDESCRIPTION: Demonstrates how to implement Apple sign-in after the built-in method was deprecated in v2. The new approach requires importing the sign_in_with_apple package separately and using the new auth.generateRawNonce() method to generate a secure nonce.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithApple();\n```\n\nLANGUAGE: dart\nCODE:\n```\nFuture<AuthResponse> signInWithApple() async {\n  final rawNonce = supabase.auth.generateRawNonce();\n  final hashedNonce = sha256.convert(utf8.encode(rawNonce)).toString();\n\n  final credential = await SignInWithApple.getAppleIDCredential(\n    scopes: [\n      AppleIDAuthorizationScopes.email,\n      AppleIDAuthorizationScopes.fullName,\n    ],\n    nonce: hashedNonce,\n  );\n\n  final idToken = credential.identityToken;\n  if (idToken == null) {\n    throw const AuthException(\n        'Could not find ID Token from generated credential.',\n    );\n  }\n\n  return signInWithIdToken(\n    provider: OAuthProvider.apple,\n    idToken: idToken,\n    nonce: rawNonce,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collapsible SidebarGroup in React\nDESCRIPTION: This code shows how to create a collapsible SidebarGroup using the Collapsible component. It includes a trigger for toggling the content visibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  return (\n    <Collapsible defaultOpen className=\"group/collapsible\">\n      <SidebarGroup>\n        <SidebarGroupLabel asChild>\n          <CollapsibleTrigger>\n            Help\n            <ChevronDown className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\" />\n          </CollapsibleTrigger>\n        </SidebarGroupLabel>\n        <CollapsibleContent>\n          <SidebarGroupContent />\n        </CollapsibleContent>\n      </SidebarGroup>\n    </Collapsible>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Compose Auth for Kotlin\nDESCRIPTION: This code snippet shows how to initialize the Supabase client with the Compose Auth plugin for Kotlin. It enables native Apple login functionality across platforms using Compose Multiplatform.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabaseClient = createSupabaseClient(\n\tsupabaseUrl = \"SUPABASE_URL\",\n\tsupabaseKey = \"SUPABASE_KEY\"\n) {\n\tinstall(GoTrue)\n\tinstall(ComposeAuth) {\n\t\tnativeAppleLogin()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the firebase-to-supabase repository using Git\nDESCRIPTION: This command clones the `firebase-to-supabase` repository from GitHub, providing the necessary tools for migrating data from Firebase Firestore to Supabase. It downloads the repository's content to the local machine, making the migration scripts accessible.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supabase-community/firebase-to-supabase.git\n```\n\n----------------------------------------\n\nTITLE: Home Page HTML Template with Nearby Button\nDESCRIPTION: An HTML template for the home page with a button to show nearby places. The button is placed in the header toolbar and triggers the showNearby() method when clicked.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"showNearby()\">\n        <ion-icon name=\"location\" slot=\"start\"></ion-icon> Nearby</ion-button\n      >\n    </ion-buttons>\n\n    <ion-title> Supa Stores </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content> </ion-content>\n```\n\n----------------------------------------\n\nTITLE: Switching to the PostgreSQL User for Recovery Operations\nDESCRIPTION: Command to switch to the postgres system user for performing recovery operations with the appropriate permissions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo -su postgres\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sidebar Trigger with useSidebar Hook\nDESCRIPTION: Demonstrates how to build a custom sidebar toggle button by utilizing the useSidebar hook to access the toggleSidebar function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSidebar } from '@/components/ui/sidebar'\n\nexport function CustomTrigger() {\n  const { toggleSidebar } = useSidebar()\n\n  return <button onClick={toggleSidebar}>Toggle Sidebar</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry Error Tracking with Edge Functions\nDESCRIPTION: Shows how to set up error tracking for Edge Functions using Sentry. This example configures the Sentry SDK, sets custom tags for region and execution ID, and captures exceptions within a request handler.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Sentry from 'https://deno.land/x/sentry/index.mjs'\n\nSentry.init({\n  dsn: _DSN_,\n  integrations: [],\n  // Performance Monitoring\n  tracesSampleRate: 1.0,\n  // Set sampling rate for profiling - this is relative to tracesSampleRate\n  profilesSampleRate: 1.0,\n})\n\n// Set region and execution_id as custom tags\nSentry.setTag('region', Deno.env.get('SB_REGION'))\nSentry.setTag('execution_id', Deno.env.get('SB_EXECUTION_ID'))\n\nDeno.serve(async (req) => {\n  try {\n    const { name } = await req.json()\n    const data = {\n      message: `Hello ${name}!`,\n    }\n\n    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })\n  } catch (e) {\n    Sentry.captureException(e)\n    return new Response(JSON.stringify({ msg: 'error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Restarting PostgreSQL to Apply Configuration Changes\nDESCRIPTION: Command to restart the PostgreSQL service to apply the configuration changes related to WAL archiving.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo /etc/init.d/postgresql restart\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Setting up required Supabase environment variables for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=your-supabase-url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key\n```\n\n----------------------------------------\n\nTITLE: Updating get current session in TypeScript\nDESCRIPTION: Example of how to update the method to get the current session in supabase-js v2. The new version uses an async getSession method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data: { session },\n} = await supabase.auth.getSession()\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client with Scoped Options in TypeScript\nDESCRIPTION: Demonstrates the new scoped configuration options when creating a Supabase client in v2, allowing for more explicit and modular setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst supabase = createClient(apiURL, apiKey, {\n  db: {\n    schema: 'public',\n  },\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n  },\n  realtime: {\n    channels,\n    endpoint,\n  },\n  // common across all libraries\n  global: {\n    fetch: customFetch,\n    headers: DEFAULT_HEADERS,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering User Data with Traditional Query in JavaScript\nDESCRIPTION: Example showing how to query user data with explicit filtering using a logged-in user ID. This demonstrates the traditional approach before implementing Row Level Security policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-05-supabase-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst loggedInUserId = 'd0714948'\nlet user = await supabase.from('users').select('user_id, name').eq('user_id', loggedInUserId)\n// Returns { id: 'd0714948', name: 'Jane'\n```\n\n----------------------------------------\n\nTITLE: Direct Storage API Request for Image Resizing\nDESCRIPTION: Example of making a direct HTTP request to the Storage API endpoint for image resizing using query parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-13-storage-image-resizing-smart-cdn.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET https://project_id.supabase.co/storage/v1/render/image/public/bucket/image.jpg?width=500&height=600\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Server for macOS\nDESCRIPTION: JSON configuration for setting up Supabase server on macOS systems. Includes input configuration for access token and server command specification using npx.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_vscode_config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"supabase-access-token\",\n      \"description\": \"Supabase personal access token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@supabase/mcp-server-supabase@latest\"],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"${input:supabase-access-token}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies with Poetry\nDESCRIPTION: Command to install vecs (Supabase Vector client), boto3 (AWS SDK), and matplotlib for the image search application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npoetry add vecs boto3 matplotlib\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime in Supabase for Background Tasks\nDESCRIPTION: This TOML configuration sets up the edge runtime policy for the Supabase project to enable background tasks. The 'per_worker' policy is required for local testing to ensure proper function execution.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-speech-to-text/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[edge_runtime]\nenabled = true\npolicy = \"per_worker\"\n```\n\n----------------------------------------\n\nTITLE: Rendering TOC Component with Multiple Highlights in JSX\nDESCRIPTION: This snippet demonstrates how to use the TOC component to highlight multiple elements simultaneously based on viewport visibility. It uses a ComponentPreview to showcase the implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/toc.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"toc-demo\" description=\"\" peekCode wide />\n```\n\n----------------------------------------\n\nTITLE: Generating Shortened OpenAI Embeddings\nDESCRIPTION: Creates an embedding using OpenAI's text-embedding-3-large model with a specified reduced dimension size of 1024.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAI } from 'openai'\n\nconst openai = new OpenAI()\n\nconst {\n  data: [{ embedding }],\n} = await openai.embeddings.create({\n  model: 'text-embedding-3-large',\n  input: 'The cat chases the mouse',\n  dimensions: 1024, // Generate an embedding with 1024 dimensions\n})\n\nconsole.log(embedding.length) // 1024\n```\n\n----------------------------------------\n\nTITLE: Querying the Vector Index\nDESCRIPTION: Demonstrates how to create a query engine and perform queries against the created vector index.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nquery_engine = index.as_query_engine()\n\n# Ask a question\nresponse = query_engine.query(\"What did the author do growing up?\")\n\n# Print the response\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: FilterProperty Interface Definition\nDESCRIPTION: Defines the `FilterProperty` interface, which describes the structure of individual filter properties. It includes properties like `label`, `name`, `type`, `operators`, and an optional `options` field for predefined values or async options loading.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface FilterProperty {\n  label: string\n  name: string\n  type: 'string' | 'number' | 'date' | 'boolean'\n  operators: string[]\n  options?: string[] | ((search?: string) => Promise<string[]> | string[])\n}\n```\n\n----------------------------------------\n\nTITLE: Reserved Role Check Implementation in C\nDESCRIPTION: Function that checks if a utility statement is attempting to modify reserved roles. Handles both ALTER ROLE and DROP ROLE statements by comparing role names against a list of reserved roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nstatic char*\nlook_for_reserved_role(Node *utility_stmt, List *reserved_role_list)\n{\n  switch (utility_stmt->type)\n  {\n    case T_AlterRoleStmt:\n    {\n      AlterRoleStmt *stmt = (AlterRoleStmt *) utility_stmt;\n      RoleSpec *role = stmt->role;\n      ListCell *role_cell;\n\n      foreach(role_cell, reserved_role_list)\n      {\n        char *reserved_role = (char *) lfirst(role_cell);\n        if (strcmp(get_rolespec_name(role), reserved_role) == 0)\n          return reserved_role;\n      }\n      break;\n    }\n    case T_DropRoleStmt:\n    {\n      DropRoleStmt *stmt = (DropRoleStmt *) utility_stmt;\n      ListCell *item;\n      foreach(item, stmt->roles)\n      {\n        RoleSpec *role = lfirst(item);\n        ListCell *role_cell;\n        foreach(role_cell, reserved_role_list)\n        {\n          char *reserved_role = (char *) lfirst(role_cell);\n          if (strcmp(get_rolespec_name(role), reserved_role) == 0)\n            return reserved_role;\n        }\n      }\n      break;\n    }\n    default:\n      break;\n  }\n  return NULL;\n}\n```\n\n----------------------------------------\n\nTITLE: Future Concept: Collection with Text Preprocessing\nDESCRIPTION: A conceptual example of a potential future feature that would allow automatic text preprocessing and vectorization when creating collections. This would simplify working with text data by handling the embedding process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# This is mock code only, not currently functional\n\ndocs: Collection =vx.get_or_create_collection(\n    docs='docs',\n    dimension=512,\n    transform = TextPreprocessor(  # this is new\n        model=\"sentence-transformers/all-Mini-L6-v2\"\n    )\n)\n\ndocs.upsert([\n    (\"id_0\", \"# Some markdown\", {}),\n    (\"id_1\", \"# Some more markdown\", {})\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue App\nDESCRIPTION: Initialize a new Vue application using the npm init command with the latest Vue version.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm init vue@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Filtering Storage Logs by IP Address\nDESCRIPTION: This SQL query retrieves storage logs and filters them based on the IP address of the request. It extracts the ID, timestamp, event message, and remote address (IP address) from the storage logs' metadata. Replace \"IP_ADDRESS\" with the actual IP address to filter by.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect id, storage_logs.timestamp, event_message, r.remoteAddress\nfrom\n  storage_logs\n  cross join unnest(metadata) as m\n  cross join unnest(m.req) as r\nwhere r.remoteAddress in (\"IP_ADDRESS\")\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Supabase Integration\nDESCRIPTION: Bash commands to export required environment variables for integrating Supabase with the ChatGPT Retrieval Plugin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=<open_ai_api_key>\nexport DATASTORE=supabase\nexport SUPABASE_URL=<supabase_url>\nexport SUPABASE_SERVICE_ROLE_KEY=<supabase_key>\n```\n\n----------------------------------------\n\nTITLE: Sign In with Figma OAuth - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to sign in a user with Figma OAuth using the Supabase client library. It initializes the Supabase client and calls the signInWithOAuth method with 'figma' as the provider.  The function returns a promise that resolves with the authentication data or rejects with an error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithFigma() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'figma',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List with Infinite Scrolling in Supabase\nDESCRIPTION: A practical example of using the InfiniteList component with a Todo list from Supabase. It demonstrates how to render todo items with checkboxes, format dates, and customize the query to order items by insertion date. The component is configured to load 3 items per page for demonstration purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { InfiniteList } from './infinite-component'\nimport { SupabaseQueryHandler } from '@/hooks/use-infinite-query'\nimport { Database } from '@/lib/supabase.types'\n\ntype TodoTask = Database['public']['Tables']['todos']['Row']\n\n// Define how each item should be rendered\nconst renderTodoItem = (todo: TodoTask) => {\n  return (\n    <div\n      key={todo.id}\n      className=\"border-b py-3 px-4 hover:bg-muted flex items-center justify-between\"\n    >\n      <div className=\"flex items-center gap-3\">\n        <Checkbox defaultChecked={todo.is_complete ?? false} />\n        <div>\n          <span className=\"font-medium text-sm text-foreground\">{todo.task}</span>\n          <div className=\"text-sm text-muted-foreground\">\n            {new Date(todo.inserted_at).toLocaleDateString()}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst orderByInsertedAt: SupabaseQueryHandler<'todos'> = (query) => {\n  return query.order('inserted_at', { ascending: false })\n}\n\nexport const InfiniteListDemo = () => {\n  return (\n    <div className=\"bg-background h-[600px]\">\n      <InfiniteList\n        tableName=\"todos\"\n        renderItem={renderTodoItem}\n        pageSize={3}\n        trailingQuery={orderByInsertedAt}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into FerretDB Collection\nDESCRIPTION: MongoDB commands to insert multiple player documents into a collection using FerretDB\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json5\nCODE:\n```\ndb.players.insertMany([\n   {\n       futbin_id: 3,\n       player_name: \"Giggs\",\n       player_extended_name: \"Ryan Giggs\",\n       quality: \"Gold - Rare\",\n       overall: 92,\n       nationality: \"Wales\",\n       position: \"LM\",\n       pace: 90,\n       dribbling: 91,\n       shooting: 80,\n       passing: 90,\n       defending: 44,\n       physicality: 67\n   },\n   {\n       futbin_id: 4,\n       player_name: \"Scholes\",\n       player_extended_name: \"Paul Scholes\",\n       quality: \"Gold - Rare\",\n       overall: 91,\n       nationality: \"England\",\n       position: \"CM\",\n       pace: 72,\n       dribbling: 80,\n       shooting: 87,\n       passing: 91,\n       defending: 64,\n       physicality: 82,\n       base_id: 246\n   }\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Database Migration for Todos Table\nDESCRIPTION: Set up the todos table in Supabase with the necessary columns and triggers for syncing with Legend-State.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate table todos (\n  id uuid default gen_random_uuid() primary key,\n  counter bigint generated by default as identity,\n  text text,\n  done boolean default false,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now(),\n  deleted boolean default false -- needed for soft deletes\n);\n\n-- Enable realtime\nalter\n  publication supabase_realtime add table todos;\n\n-- Legend-State helper to facilitate \"Sync only diffs\" (changesSince: 'last-sync') mode\nCREATE OR REPLACE FUNCTION handle_times()\n    RETURNS trigger AS\n    $$\n    BEGIN\n    IF (TG_OP = 'INSERT') THEN\n        NEW.created_at := now();\n        NEW.updated_at := now();\n    ELSEIF (TG_OP = 'UPDATE') THEN\n        NEW.created_at = OLD.created_at;\n        NEW.updated_at = now();\n    END IF;\n    RETURN NEW;\n    END;\n    $$ language plpgsql;\n\nCREATE TRIGGER handle_times\n    BEFORE INSERT OR UPDATE ON todos\n    FOR EACH ROW\nEXECUTE PROCEDURE handle_times();\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase in Next.js\nDESCRIPTION: Sets up the necessary environment variables for connecting to Supabase in a Next.js application. These variables include the Supabase URL and anonymous key, which are essential for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/password-based-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Colors in Supabase Apps\nDESCRIPTION: Demonstrates how background colors are implemented differently between www/docs sites and studio application using specific className assignments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/color-usage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * ./www background color\n * ./docs background color\n */\n<body className=\"bg\">{children}</body>\n\n/**\n * ./studio background color\n */\n<body className=\"bg-studio\">{children}</body>\n```\n\n----------------------------------------\n\nTITLE: Dropping Database Triggers in Supabase Auth Schema\nDESCRIPTION: SQL commands to remove problematic triggers and their associated functions using CASCADE modifier.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/dashboard-errors-when-managing-users-N1ls4A.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION <function name>() CASCADE;\n\n-- If you'd prefer, you can drop the trigger alone with the following query:\n-- DROP TRIGGER <trigger_name> on auth.<table_name>;\n```\n\n----------------------------------------\n\nTITLE: Importing Menubar Components\nDESCRIPTION: Example of importing the necessary Menubar components from your UI components directory for use in your application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/menubar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from '@/components/ui/menubar'\n```\n\n----------------------------------------\n\nTITLE: Production Environment Configuration\nDESCRIPTION: Production environment setup with Supabase project URLs and keys\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=https://<your-project>.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your-project-apikey>\n```\n\n----------------------------------------\n\nTITLE: OAuth Sign-in Without Flutter Webview in Supabase v2\nDESCRIPTION: Shows updated OAuth sign-in implementation after the webview_flutter dependency was removed in v2. The context parameter is no longer needed, giving developers more control over the UI of the OAuth flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Opens a webview on iOS.\nawait supabase.auth.signInWithOAuth(\n  Provider.github,\n  authScreenLaunchMode: LaunchMode.inAppWebView,\n  context: context,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Opens in app webview on iOS.\nawait supabase.auth.signInWithOAuth(\n  OAuthProvider.github,\n  authScreenLaunchMode: LaunchMode.inAppWebView,\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for pgMustard Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing pgMustard's query analysis tool integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/IGYcN1Hvc84\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Server Hooks for Supabase Authentication\nDESCRIPTION: Configures server hooks to handle Supabase client initialization, session validation, and secure authentication\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\nimport { createServerClient } from '@supabase/ssr'\nimport type { Handle } from '@sveltejs/kit'\n\nexport const handle: Handle = async ({ event, resolve }) => {\n  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n    cookies: {\n      getAll() {\n        return event.cookies.getAll()\n      },\n      setAll(cookiesToSet) {\n        cookiesToSet.forEach(({ name, value, options }) =>\n          event.cookies.set(name, value, { ...options, path: '/' })\n        )\n      },\n    },\n  })\n\n  return resolve(event)\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with npm run eject\nDESCRIPTION: Removes the build dependency and copies all configuration files directly into the project. This irreversible operation gives developers full control over webpack, Babel, ESLint and other configurations.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/app/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Database Schema Setup for Realtime Authorization\nDESCRIPTION: SQL schema definition including tables for rooms, profiles, and room users relationships with RLS enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.rooms (\n    id bigint generated by default as identity primary key,\n    topic text not null unique\n);\n\nalter table public.rooms enable row level security;\n\ncreate table public.profiles (\n  id uuid not null references auth.users on delete cascade,\n  email text NOT NULL,\n\n  primary key (id)\n);\n\nalter table public.profiles enable row level security;\n\ncreate table public.rooms_users (\n  user_id uuid references auth.users (id),\n  room_topic text references public.rooms (topic),\n  created_at timestamptz default current_timestamp\n);\n\nalter table public.rooms_users enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Teta Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Teta's cooperative app builder integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/FAqQxT-peuc\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Supabase Repository in Bash\nDESCRIPTION: Commands for cloning your forked Supabase repository and navigating to the project directory. These are the initial steps for setting up local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/DEVELOPERS.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<github_username>/supabase.git\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd supabase\n```\n\n----------------------------------------\n\nTITLE: Listening to Database Changes with New Channel Interface in TypeScript\nDESCRIPTION: Shows the new method for listening to PostgreSQL database changes using the channel() interface in supabase-js v2, compared to the old method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nsupabase\n  .channel('any_string_you_want')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'movies',\n    },\n    (payload) => {\n      console.log(payload)\n    }\n  )\n  .subscribe()\n\n// v1\nsupabase\n  .from('movies')\n  .on('INSERT', (payload) => {\n    console.log(payload)\n  })\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Executing SQL within plv8 Functions\nDESCRIPTION: Example of executing SQL commands from within a plv8 function using plv8.execute. This function updates a user's first name and returns the number of affected rows.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function update_user(id bigint, first_name text)\nreturns smallint as $$\n\n    var num_affected = plv8.execute(\n        'update profiles set first_name = $1 where id = $2',\n        [first_name, id]\n    );\n\n    return num_affected;\n$$ language plv8;\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: Configuration metadata for the blog post including title, description, categories, tags, and image paths.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-04-launch-week-x-hackathon-winners.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Launch Week X Hackathon Winners'\ndescription: Announcing the winners of the Launch Week X Hackathon!\nlaunchweek: x\ncategories:\n  - developers\ntags:\n  - launch-week\n  - hackathon\ndate: '2024-01-04'\ntoc_depth: 3\nauthor: andrew_smith,tyler_shukert\nimage: lwx-hackathon-winners/lwx-hackathon-winners.png\nthumb: lwx-hackathon-winners/lwx-hackathon-winners.png\n---\n```\n\n----------------------------------------\n\nTITLE: Protected API Route Implementation\nDESCRIPTION: Implementation of a protected API endpoint using Supabase authentication, showing both v0.7.x and v0.8.0 approaches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from './$types'\nimport { withAuth } from '@supabase/auth-helpers-sveltekit'\nimport { json, redirect } from '@sveltejs/kit'\n\ninterface TestTable {\n  id: string\n  created_at: string\n}\n\nexport const GET: RequestHandler = withAuth(async ({ session, getSupabaseClient }) => {\n  if (!session.user) {\n    redirect(303, '/')\n  }\n\n  const { data } = await getSupabaseClient().from<TestTable>('test').select('*')\n\n  return json({ data })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from './$types'\nimport { getSupabase } from '@supabase/auth-helpers-sveltekit'\nimport { json, redirect } from '@sveltejs/kit'\n\nexport const GET: RequestHandler = async (event) => {\n  const { session, supabaseClient } = await getSupabase(event)\n  if (!session) {\n    redirect(303, '/')\n  }\n  const { data } = await supabaseClient.from('test').select('*')\n\n  return json({ data })\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out - Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to implement the sign-out functionality using the Supabase client. It calls the signOut() function on the auth object, which removes the user's session and any associated data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Postgres Connection String\nDESCRIPTION: This snippet shows an example of a direct connection string to a Supabase Postgres database. It's intended for persistent servers and requires IPv6 support by default. Replace `[YOUR-PASSWORD]` with the actual password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npostgresql://postgres:[YOUR-PASSWORD]@db.apbkobhfnmcqqzqeeqss.supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Testing Row Level Security (RLS) across a schema in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates how to create a simple test to verify that Row Level Security (RLS) is enabled across an entire schema using the test helpers package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nselect plan(1);\n\n-- Verify RLS is enabled on all tables in the public schema\nselect tests.rls_enabled('public');\n\nselect * from finish();\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Invoking Edge Functions with Automatic Content Type Detection in TypeScript\nDESCRIPTION: Demonstrates the simplified invocation of Edge Functions in supabase-js v2, which now automatically detects the content type for request/response bodies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// v2\nconst { data: user, error } = await supabase.functions.invoke('hello', {\n  body: { foo: 'bar' },\n})\n\n// v1\nconst { data: user, error } = await supabase.functions.invoke('hello', {\n  headers: { 'Content-Type': 'application/json' }\n  body: JSON.stringify({ foo: 'bar' }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime Docker Container\nDESCRIPTION: Dockerfile configuration to set up Edge Runtime v1.2.18 for running the ChatGPT plugin functions. Copies functions directory and specifies the main service entry point.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/supabase/edge-runtime:v1.2.18\n\nCOPY ./functions /home/deno/functions\nCMD [ \"start\", \"--main-service\", \"/home/deno/functions/main\" ]\n```\n\n----------------------------------------\n\nTITLE: Implementing RLS Policies for Document Access Control\nDESCRIPTION: Sets up Row Level Security policies to restrict access to document sections based on document ownership. Enables RLS and creates a policy for select operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nalter table document_sections enable row level security;\n\ncreate policy \"Users can query their own document sections\"\non document_sections for select to authenticated using (\n  document_id in (\n    select id\n    from documents\n    where (owner_id = (select auth.uid()))\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Sidebar Based on Collapsible State\nDESCRIPTION: Shows how to conditionally style sidebar components based on the collapsible state, hiding a SidebarGroup when in icon mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar collapsible=\"icon\">\n  <SidebarContent>\n    <SidebarGroup className=\"group-data-[collapsible=icon]:hidden\" />\n  </SidebarContent>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi serializer dependency in Kotlin build file\nDESCRIPTION: This snippet shows how to add the Moshi serializer dependency to a Kotlin project using Gradle Kotlin DSL. It's required for using Moshi as the serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.github.jan-tennert.supabase:serializer-moshi:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application with JavaScript\nDESCRIPTION: Commands to create a new Next.js application using npm and navigate to the project directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --use-npm supabase-nextjs\ncd supabase-nextjs\n```\n\n----------------------------------------\n\nTITLE: Auth Error Handling with URL Parameters\nDESCRIPTION: JavaScript code to handle authentication errors by parsing URL query fragments and displaying appropriate error messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/redirect-urls.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams(window.location.hash.slice())\n\nif (params.get('error_code').startsWith('4')) {\n  // show error message if error is a 4xx error\n  window.alert(params.get('error_description'))\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Edge Function Tests Folder Structure\nDESCRIPTION: Recommended folder structure for organizing Edge Function tests, placing test files in a separate 'tests' directory with consistent naming convention.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n└── supabase\n    ├── functions\n    │   ├── function-one\n    │   │   └── index.ts\n    │   └── function-two\n    │   │   └── index.ts\n    │   └── tests\n    │       └── function-one-test.ts  # Tests for function-one\n    │       └── function-two-test.ts  # Tests for function-two\n    └── config.toml\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson serializer dependency in Groovy build file\nDESCRIPTION: This snippet demonstrates how to add the Jackson serializer dependency to a Kotlin project using Gradle Groovy DSL. It's necessary for using Jackson as the serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.github.jan-tennert.supabase:serializer-jackson:VERSION'\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Domain in Supabase\nDESCRIPTION: TOML configuration for enabling Clerk as a third-party auth provider in Supabase and setting the Clerk domain.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-31-clerk-tpa-pricing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[auth.third_party.clerk]\nenabled = true\ndomain = \"example.clerk.accounts.dev\"\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Chat App with RLS\nDESCRIPTION: SQL code to set up the database schema for a chat application with rooms, participants, and messages tables. Includes a create_new_room function to handle chat room creation logic.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- *** Table definitions ***\n\ncreate table if not exists public.rooms (\n    id uuid not null primary key default gen_random_uuid(),\n    created_at timestamp with time zone default timezone('utc' :: text, now()) not null\n);\ncomment on table public.rooms is 'Holds chat rooms';\n\ncreate table if not exists public.room_participants (\n    profile_id uuid references public.profiles(id) on delete cascade not null,\n    room_id uuid references public.rooms(id) on delete cascade not null,\n    created_at timestamp with time zone default timezone('utc' :: text, now()) not null,\n    primary key (profile_id, room_id)\n);\ncomment on table public.room_participants is 'Relational table of users and rooms.';\n\nalter table public.messages\nadd column room_id uuid references public.rooms(id) on delete cascade not null;\n\n-- *** Add tables to the publication to enable realtime ***\n\nalter publication supabase_realtime add table public.room_participants;\n\n-- Creates a new room with the user and another user in it.\n-- Will return the room_id of the created room\n-- Will return a room_id if there were already a room with those participants\ncreate or replace function create_new_room(other_user_id uuid) returns uuid as $$\n    declare\n        new_room_id uuid;\n    begin\n        -- Check if room with both participants already exist\n        with rooms_with_profiles as (\n            select room_id, array_agg(profile_id) as participants\n            from room_participants\n            group by room_id\n        )\n        select room_id\n        into new_room_id\n        from rooms_with_profiles\n        where create_new_room.other_user_id=any(participants)\n        and auth.uid()=any(participants);\n\n\n        if not found then\n            -- Create a new room\n            insert into public.rooms default values\n            returning id into new_room_id;\n\n            -- Insert the caller user into the new room\n            insert into public.room_participants (profile_id, room_id)\n            values (auth.uid(), new_room_id);\n\n            -- Insert the other_user user into the new room\n            insert into public.room_participants (profile_id, room_id)\n            values (other_user_id, new_room_id);\n        end if;\n\n        return new_room_id;\n    end\n$$ language plpgsql security definer;\n```\n\n----------------------------------------\n\nTITLE: Using Radio Group Component in React\nDESCRIPTION: Example of implementing a Radio Group with two options in a React component. It demonstrates the usage of RadioGroup, RadioGroupItem, and Label components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup defaultValue=\"option-one\">\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-one\" id=\"option-one\" />\n    <Label htmlFor=\"option-one\">Option One</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-two\" id=\"option-two\" />\n    <Label htmlFor=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: FormField Example with React Hook Form\nDESCRIPTION: Example of implementing a FormField component with React Hook Form, showing how to use FormLabel, FormControl with Input, FormDescription, and FormMessage together.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst form = useForm()\n\n<FormField\n  control={form.control}\n  name=\"username\"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Username</FormLabel>\n      <FormControl>\n        <Input placeholder=\"shadcn\" {...field} />\n      </FormControl>\n      <FormDescription>This is your public display name.</FormDescription>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Max Affected Rows Limit for DELETE Operation\nDESCRIPTION: Demonstrates how to use the new max-affected preference header to limit the number of rows affected by a DELETE operation. Includes error handling when the limit is exceeded.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgrest-12-2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/items?id=lt.15\" -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Prefer: handling=strict, max-affected=10\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection String for Prisma\nDESCRIPTION: Example of a direct connection string for Prisma to connect to a Supabase database, suitable for stationary servers and IPv6 environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\npostgresql://postgres:[PASSWORD]@db.[PROJECT REF].supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Element in Markdown for SQL Autocomplete Demo\nDESCRIPTION: HTML video element used to showcase the SQL autocomplete feature in the Supabase dashboard. The video is configured to autoplay silently and includes playback controls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-02-supabase-beta-february-2021.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay muted playsInline controls={true}>\n  <source src=\"/images/blog/feb/autocomplete.mp4\" type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase stack with npm\nDESCRIPTION: This command starts the local Supabase stack using npx. It launches all necessary services for local development, including the database, auth, and storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx supabase start\n```\n\n----------------------------------------\n\nTITLE: Embedding Loom Video with iframe in Markdown\nDESCRIPTION: HTML iframe snippet for embedding Loom video content within markdown documentation. The iframe includes specific styling classes and attributes for proper display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-01-supabase-alpha-june-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.loom.com/embed/b3ba79c1633d464ea758e0796bbb39da\"\n    frameBorder=\"0\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client\nDESCRIPTION: Creating a helper file that initializes the Supabase client using environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n```\n\n----------------------------------------\n\nTITLE: Creating Profiles Table in PostgreSQL\nDESCRIPTION: SQL code to create a profiles table with basic user information including id, name, and email fields. This table is used as an example to demonstrate Row Level Security for data dumps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  id serial primary key,\n  name text,\n  email text\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Array Data with Swift Supabase Client\nDESCRIPTION: This Swift snippet defines a response struct and uses the Supabase client to select the entire 'textarray' column from the 'arraytest' table, then dumps the result.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct Response: Decodable {\n  let textarray: [String]\n}\n\nlet response: [Response] = try await supabase.from(\"arraytest\").select(\"textarray\").execute().value\ndump(response)\n```\n\n----------------------------------------\n\nTITLE: Using SidebarMenuAction with DropdownMenu in React\nDESCRIPTION: This snippet demonstrates how to use the SidebarMenuAction component to render a DropdownMenu within a SidebarMenuItem.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarMenuItem>\n  <SidebarMenuButton asChild>\n    <a href=\"#\">\n      <Home />\n      <span>Home</span>\n    </a>\n  </SidebarMenuButton>\n  <DropdownMenu>\n    <DropdownMenuTrigger asChild>\n      <SidebarMenuAction>\n        <MoreHorizontal />\n      </SidebarMenuAction>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent side=\"right\" align=\"start\">\n      <DropdownMenuItem>\n        <span>Edit Project</span>\n      </DropdownMenuItem>\n      <DropdownMenuItem>\n        <span>Delete Project</span>\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</SidebarMenuItem>\n```\n\n----------------------------------------\n\nTITLE: Creating a Parent Partitioned Table in PostgreSQL\nDESCRIPTION: This SQL command creates an empty parent partitioned table based on the structure of an existing source table. The LIKE clause copies column definitions and constraints, while PARTITION BY specifies the partitioning strategy.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/partitioning-an-existing-table-with-same-name-VEnbzK.mdx#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE parent_table LIKE source_table [ like_option ... ] PARTITION BY ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase client with environment variables\nDESCRIPTION: TypeScript code that creates and configures the Supabase client using environment variables for the URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@refinedev/supabase'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n  db: {\n    schema: 'public',\n  },\n  auth: {\n    persistSession: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sign In with Zoom OAuth in Kotlin\nDESCRIPTION: This code snippet demonstrates how to sign in a user with Zoom OAuth using the Supabase Kotlin client library. It calls the `signInWith` function, passing in `Zoom` as the Provider. The function suspends until the sign-in process is complete.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithZoom() {\n\tsupabase.auth.signInWith(Zoom)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase MCP Server for Linux\nDESCRIPTION: JSON configuration for running the Supabase MCP server on Linux. It specifies the command as 'npx' and includes arguments for installing and running the latest version of the server with a personal access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--access-token\",\n        \"<personal-access-token>\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Prisma Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Prisma's ORM integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/YjvQsNEOs60\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Descending Ordered Index in PostgreSQL\nDESCRIPTION: Creates an index on the age column with a descending sort order, placing NULL values last. This is useful for queries that frequently sort data in descending order, such as showing the oldest people first.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_persons_age_desc on persons (age desc nulls last);\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom serializer for Supabase\nDESCRIPTION: This Kotlin snippet shows how to implement a custom serializer by extending the SupabaseSerializer interface. It requires implementing encode and decode methods for custom serialization logic.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CustomSerializer: SupabaseSerializer {\n\n    override fun <T : Any> encode(type: KType, value: T): String {\n        //encode value to string\n    }\n\n    override fun <T : Any> decode(type: KType, value: String): T {\n        //decode value\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out in Flutter using Supabase\nDESCRIPTION: Details how to log out a user from a Flutter application using Supabase by invoking the signOut() function. This clears the session and local storage cache.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Supabase-Vercel Integration\nDESCRIPTION: List of essential environment variables that are automatically synchronized between Supabase and connected Vercel projects for database connection and API interactions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/vercel-marketplace.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nPOSTGRES_URL\nPOSTGRES_PRISMA_URL\nPOSTGRES_URL_NON_POOLING\nPOSTGRES_USER\nPOSTGRES_HOST\nPOSTGRES_PASSWORD\nPOSTGRES_DATABASE\nSUPABASE_SERVICE_ROLE_KEY\nSUPABASE_ANON_KEY\nSUPABASE_URL\nSUPABASE_JWT_SECRET\nNEXT_PUBLIC_SUPABASE_ANON_KEY\nNEXT_PUBLIC_SUPABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Add Unique Numeric Key in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add a new unique numeric key to a collection. It demonstrates modifying the document (`doc`) by adding a `unique_key` field derived from the `recordCounter` object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = (collectionName, doc, recordCounters, writeRecord) => {\n  doc.unique_key = recordCounter[collectionName] + 1\n  return doc\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Supabase-js v2 Announcement in HTML\nDESCRIPTION: HTML iframe code for embedding a YouTube announcement video about the supabase-js v2 release. The iframe has various attributes for configuring video playback options and responsive display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/iqZlPtl_b-I\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Storage with RealtimeChat Component in React\nDESCRIPTION: Illustrates how to use the RealtimeChat component with a callback function to store messages in a database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-chat.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\nimport { storeMessages } from '@/lib/store-messages'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n  const handleMessage = (messages: ChatMessage[]) => {\n    // Store messages in your database\n    await storeMessages(messages)\n  }\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" onMessage={handleMessage} />\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Next.js Component\nDESCRIPTION: Code for embedding a YouTube video about Realtime updates with Next.js within an iframe container. The iframe is configured with specific attributes for security and user interaction.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/realtime-with-nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    src=\"https://www.youtube-nocookie.com/embed/YR-xP6PPXXA\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Data Server-Side in SvelteKit\nDESCRIPTION: Server-side load function that fetches data from the 'instruments' table in Supabase and makes it available to the page component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { supabase } from \"$lib/supabaseClient\";\n\nexport async function load() {\n  const { data } = await supabase.from(\"instruments\").select();\n  return {\n    instruments: data ?? [],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization in Kotlin build file\nDESCRIPTION: This snippet shows how to add the KotlinX Serialization plugin to a Kotlin project using Gradle Kotlin DSL. It's required for using the default serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"plugin.serialization\") version \"KOTLIN_VERSION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in Swift\nDESCRIPTION: Sets up the Supabase client with project URL and anonymous key for API access.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Supabase\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"YOUR_SUPABASE_URL\")!,\n  supabaseKey: \"YOUR_SUPABASE_ANON_KEY\"\n)\n```\n\n----------------------------------------\n\nTITLE: Randomizing Particle Speed and Delay in Animation\nDESCRIPTION: This snippet adds randomization to the speed and delay of each particle to create a more natural and varied animation effect.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst minSpeed = -0.3\nconst maxSpeed = 0.4\nconst speed = Math.random() * (minSpeed - maxSpeed) + maxSpeed\n\nconst delayOffsetFactor = 100\nconst delayOffset = Math.random() * delayOffsetFactor\n\n[...]\n\nconst timer = clock.getElapsedTime() *** speed + delayOffset**\n```\n\n----------------------------------------\n\nTITLE: Run pgloader Migration\nDESCRIPTION: This bash script executes the pgloader command with a specified configuration file to perform the database migration. The config.load file contains the details for connecting to the source and destination databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/amazon-rds.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npgloader config.load\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: Command to initialize a new Flutter project for iOS and Android platforms\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create canvas --empty --platforms=ios,android\n```\n\n----------------------------------------\n\nTITLE: Rendering Protomaps with MapLibre GL in HTML\nDESCRIPTION: Complete HTML page that loads and displays a map from a PMTiles file stored in Supabase Storage. It uses MapLibre GL for rendering and Protomaps themes for styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Overture Places</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/maplibre-gl@4.1.2/dist/maplibre-gl.css\"\n      crossorigin=\"anonymous\"\n    />\n    <script\n      src=\"https://unpkg.com/maplibre-gl@4.1.2/dist/maplibre-gl.js\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script src=\"https://unpkg.com/protomaps-themes-base@2.0.0-alpha.5/dist/index.js\"></script>\n    <script src=\"https://unpkg.com/pmtiles@3.0.6/dist/pmtiles.js\"></script>\n    <style>\n      body {\n        margin: 0;\n      }\n      #map {\n        height: 100%;\n        width: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"map\"></div>\n    <script type=\"text/javascript\">\n      // Add the PMTiles Protocol:\n      let protocol = new pmtiles.Protocol()\n      maplibregl.addProtocol('pmtiles', protocol.tile)\n\n      // Load the Map tiles directly from Supabase Storage:\n      const map = new maplibregl.Map({\n        hash: true,\n        container: 'map',\n        style: {\n          version: 8,\n          glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',\n          sources: {\n            protomaps: {\n              attribution:\n                '<a href=\"https://github.com/protomaps/basemaps\">Protomaps</a> © <a href=\"https://openstreetmap.org\">OpenStreetMap</a>',\n              type: 'vector',\n              url: 'pmtiles://https://<your-project-ref>.supabase.co/storage/v1/object/public/public-maps/my_area.pmtiles',\n            },\n          },\n          layers: protomaps_themes_base.default('protomaps', 'dark'),\n        },\n      })\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Checking pg_cron Extension Availability in Postgres\nDESCRIPTION: This SQL query checks if the pg_cron extension is available in the Postgres database. It returns information about the extension if it exists.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect name, comment, default_version, installed_version\nfrom pg_available_extensions\nwhere name = 'pg_cron';\n```\n\n----------------------------------------\n\nTITLE: Exporting Storage Examples Array in JavaScript\nDESCRIPTION: This code defines an array of example projects related to Supabase Storage. It includes information about a resumable upload example using Uppy and the TUS protocol.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const examples = [\n  {\n    name: 'Resumable Uploads with Uppy',\n    description:\n      'Use Uppy to upload files to Supabase Storage using the TUS protocol (resumable uploads).',\n    href: 'https://github.com/supabase/supabase/tree/master/examples/storage/resumable-upload-uppy',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Query ID in PostgreSQL 14\nDESCRIPTION: Demonstrates how to enable the query_id feature in PostgreSQL 14. This feature allows for better monitoring and troubleshooting of queries by providing a unique identifier for each query.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nalter system set compute_query_id = 'on';\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Realtime Channel - Dart Supabase\nDESCRIPTION: Updated method for removing realtime subscriptions in Supabase Dart library\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.removeSubscription(subscription);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.removeChannel(channel);\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Functions Background Tasks Policy\nDESCRIPTION: TOML configuration to enable background tasks for Supabase Edge Functions by setting the policy to 'per_worker'.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[edge_runtime]\npolicy = \"per_worker\"\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Controller for Nearby Places in HomePage Component\nDESCRIPTION: A TypeScript component that handles the presentation of a modal for displaying nearby store locations. It includes an interface for store markers and a method to display the nearby places modal.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core'\nimport { ModalController } from '@ionic/angular'\nimport { NearbyPage } from '../nearby/nearby.page'\n\nexport interface StoreMarker {\n  markerId: string\n  storeId: number\n}\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n  constructor(private modalCtrl: ModalController) {}\n\n  async showNearby() {\n    const modal = await this.modalCtrl.create({\n      component: NearbyPage,\n    })\n    modal.present()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Dialog Dependencies Manually\nDESCRIPTION: Command to manually install the required Radix UI alert dialog dependency using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Creating Database from Template0\nDESCRIPTION: SQL command to create a new database using template0, useful for clean installations or when specifying different encodings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE new_db_name TEMPLATE template0;\n```\n\n----------------------------------------\n\nTITLE: Configuring PKCE as Default Auth Flow in Supabase v2\nDESCRIPTION: Shows how to configure auth flow types in Supabase Flutter, with PKCE now being the default instead of implicit flow. PKCE is a more secure method for obtaining sessions from deep links.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n  authFlowType: AuthFlowType.implicit, // set to implicit by default\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n  authOptions: FlutterAuthClientOptions(\n    authFlowType: AuthFlowType.pkce, // set to pkce by default\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Train Vector Embedding\nDESCRIPTION: SQL insert statement containing a 300-dimensional vector embedding representing the semantic features of a 'Train' concept. The values are floating point numbers that capture various learned features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n('Train', '[0.008390516,-0.0316401,0.059414063,0.004530007,0.015912173,0.04257927,0.010396404,-0.0041149696,-0.016684545,-0.051473897,0.013823704,-0.105521135,0.016059747,0.06659557,-0.0019725815,0.011045265,0.013066779,0.036172472,-0.043464396,-0.0027326334,0.008696494,-0.04963063,-0.05605746,-0.064520374,0.0071908,0.025355445,-0.050698947,-0.038638834,-0.06742357,-0.12853827,-0.0057572243,-0.052277446,0.019270279,-0.03003436,-0.035267383,-0.019119024,-0.022066116,0.054565392,0.021611325,0.034875706,-0.0043622344,0.014108078,-0.028517855,-0.08079088,-0.019493984,-0.034040015,-0.011598695,0.0022550072,0.0621561,-0.03721019,0.047613103,-0.04455849,0.03295865,-0.0057227607,0.0075348215,0.04554701,0.04224485,0.02329181,0.05805944,0.063204974,-0.031965736,0.048258748,-0.24342363,0.07309152,0.032815777,0.002095711,-0.059097853,-0.015610364,0.004590883,0.066063076,-0.017212633,0.021194763,0.007554856,0.033827275,0.014187226,-0.047569692,0.017875925,-0.017424196,-0.015125725,-0.005130941,0.0029060335,-0.050865818,-0.07343196,-0.0048736315,0.020944353,0.00077292154,0.032206904,-0.05818478,0.02801747,0.017108278,-0.03247216,-0.0065188087,-0.015342016,0.026298964,-0.049516425,-0.005976409,0.01856195,0.0074172006,-0.075506,0.23088165,-0.021115338,0.05222904,0.023529256,0.043604445,0.019573972,-0.026877966,-0.04359997,-0.0046444032,-0.02207065,-0.040870916,0.009780713,-0.025193287,0.024433471,-0.024275476,0.009968814,0.047776353,0.06775558,0.01283433,-0.052475818,0.008022442,-0.0013314247,-0.020480726,0.023044059,-0.028667847,0.0060666455,-0.09205764,0.048958115,0.122405164,0.019911205,0.022110125,0.050222058,0.0015760588,-0.078412116,-0.0021023818,-0.011218934,0.025069945,0.03324381,-0.0006424969,-0.043864336,0.0087585915,-0.05289486,-0.092548065,0.03227165,-0.1332425,-0.072707884,0.03601174,-0.029322848,0.04662253,-0.023045791,0.009186527,-0.04339159,-0.004015751,-0.002390284,-0.03830812,-0.003402778,0.042021804,0.039244883,0.05749609,-0.056686126,-0.007919699,-0.053717893,-0.016760027,-0.06469656,0.07116849,-0.015925482,-0.095182456,-0.019137817,0.011446995,0.022712586,-0.065081745,0.016669888,0.03609432,-0.022235183,0.019483658,0.06453548,0.0013194638,-0.042232916,0.012842303,0.0008133578,0.016946876,0.054184176,-0.061540544,-0.064576425,0.05788913,0.043063283,-0.017957158,-0.00660539,-0.043557957,0.00932838,0.04721575,0.025036044,0.05511638,0.012167107,-0.073137976,-0.05228407,-0.027518198,-0.020088682,-0.04512229,-0.0067941146,-0.038086385,0.026816027,-0.0076302565,-0.030978065,0.011591283,0.010688236,0.062038578,-0.034754917,-0.029522672,0.023187192,0.029613974,-0.03722577,-0.012008098,0.102696836,-0.007421274,-0.027096916,0.02145292,0.026860205,0.06578597,0.01368912,0.040054448,0.04191872,-0.038178593,-0.063167796,-0.22596447,0.06565988,0.04722377,-0.016424103,0.05646301,-0.045248922,0.017223613,0.004723246,0.03433359,0.057964306,0.107756704,-0.040196985,-0.005384249,0.02173068,-0.021337867,0.053607292,0.027281692,0.039454717,0.015027626,0.02693812,-0.003631183,0.048921067,-0.019490749,-0.09182499,0.02951052,0.0186495,0.23003499,0.06202278,0.07585443,-0.06069743,0.0526535,0.02085982,-0.018095134,-0.1384808,0.041433737,-0.026623845,0.07243412,-0.0029134983,-0.0069605466,-0.019240782,-0.018164543,0.029909529,0.01608419,-0.061474107,-0.013469153,-0.029401183,-0.054659907,-0.014086127,-0.028915925,-0.0069666984,0.041868016,-0.013776472,0.039377537,0.028841918,0.015001087,-0.03712765,-0.067391664,0.031860482,-0.041481916,0.037242766,0.0051513095,-0.024946364,0.02921327,-0.038750958,0.037937738,0.025684254,-0.050058123,-0.00971873,0.058333874,-0.020295596,-0.043949526,0.08710765,-0.0069736685,-0.047693014,0.070027076,0.017611913,0.009996941,0.025605714,-0.014843967,-0.0095715,0.03362786,-0.027780171,0.034262065,0.054104224,0.015189927,0.00031930834,0.08402685,-0.020675372,0.05230347,0.00073445373,0.0203266,-0.010717519,-0.017641345,-0.049389035,0.03801163,-0.04896717,-0.2916533,0.02326856,0.030424621,0.057537735,-0.03546315,0.009951743,0.021315183,0.04614926,-0.01757108,-0.025332054,0.047435746,-0.004156035,0.070101835,0.006551285,0.014095617,0.035963845,0.09428639,-0.011006988,0.043139383,-0.028828816,-0.010830479,0.052022237,0.17928188,0.013676716,0.048481107,0.020455515,-0.03715131,0.0030906487,0.014748529,-0.026029117,-0.016452625,0.011987294,0.085855335,-0.012302411,0.037723247,0.0425674,-0.055454608,0.1011866,0.028467475,-0.030435871,-0.061414395,-0.017736189,-0.03107398,-0.06507749,0.09065245,-0.021177005,-0.016372962,-0.038777813,-0.00053287647,-0.031771254,-0.023859626,0.00845833,-0.0049761753,0.020201217,0.013904311,0.069836564,-0.023459928,-0.09671563,-0.0576696,-0.027228847,0.012631596,-0.07193221,-0.028516661,0.023131175,-0.0030631186]')\n```\n\n----------------------------------------\n\nTITLE: Calling plv8 Functions in Kotlin with Supabase\nDESCRIPTION: Example of calling a plv8 function from Kotlin using the Supabase client library's RPC method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.postgrest.rpc(\"function_name\")\n```\n\n----------------------------------------\n\nTITLE: Running Supabase CLI Command\nDESCRIPTION: Command to start Supabase locally using the CLI tool. Requires Docker to be running on the system.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/flutter-figma-clone/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Unlinking Identity with Swift\nDESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Swift client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet identities = try await supabase.auth.userIdentities()\n\nlet googleIdentity = identities.first { $0.provider == .google }\n\ntry await supabase.auth.unlinkIdentity(googleIdentity)\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Client Engine with Kotlin Gradle DSL\nDESCRIPTION: Adds a Ktor client engine dependency using Gradle Kotlin DSL. Ktor engines are required for HTTP communication and must be selected based on target platform and websocket support needs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.ktor:ktor-client-[engine]:KTOR_VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Applying Supabase Migrations to a Remote Database\nDESCRIPTION: This command applies local Supabase migrations to a linked remote database. It's useful for syncing schema changes between local and remote environments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: Importing Stripe Module for Deno Edge Functions in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Stripe module from esm.sh for use in Deno Edge Functions. By adding '?target=deno' to the import URL, it resolves potential import errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/importing-stripe-or-other-modules-from-esmsh-on-deno-edge-functions-throws-an-error-TmbB5p.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stripe from \"https://esm.sh/stripe@11.2.0?target=deno\";\n```\n\n----------------------------------------\n\nTITLE: Creating Security Invoker View in PostgreSQL 15\nDESCRIPTION: Demonstrates creating a view with security_invoker option that uses the caller's permissions instead of the creator's permissions when accessing underlying tables\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-new-in-postgres-15.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW .. WITH (security_invoker=on)\n```\n\n----------------------------------------\n\nTITLE: Pulling Database Schema with Supabase CLI\nDESCRIPTION: Commands to link a local project to Supabase and pull the database schema. Requires project-id from the dashboard URL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/project_setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link --project-ref <project-id>\n# You can get <project-id> from your project's dashboard URL: https://supabase.com/dashboard/project/<project-id>\nsupabase db pull\n```\n\n----------------------------------------\n\nTITLE: Changing Prisma User Password in PostgreSQL\nDESCRIPTION: SQL command to alter the password for the Prisma user role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nalter user \"prisma\" with password 'new_password';\n```\n\n----------------------------------------\n\nTITLE: Unlinking Identity in Supabase Auth\nDESCRIPTION: Shows how to retrieve all identities linked to a user, find a specific identity (in this case, Google), and then unlink it using the unlinkIdentity() method in Supabase Auth.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-auth-identity-linking-hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// retrieve all identities linked to a user\nconst {\n  data: { identities },\n} = await supabase.auth.getUserIdentities()\n\n// find the google identity linked to the user\nconst googleIdentity = identities.find(({ provider }) => provider === 'google')\n\n// unlink the google identity from the user\nconst { data, error } = await supabase.auth.unlinkIdentity(googleIdentity)\n```\n\n----------------------------------------\n\nTITLE: Management API Response for Project Creation\nDESCRIPTION: Shows the JSON response structure when creating a new project using the Management API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"abcdefghijklmnopqrst\",\n  \"organization_id\": \"cool-green-pqdr0qc\",\n  \"name\": \"hello\",\n  \"region\": \"us-east-1\",\n  \"created_at\": \"2022-08-12T17:37:11.88819Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @rneui/themed Package for React Native\nDESCRIPTION: This command installs the @rneui/themed package, which provides cross-platform button and input field components for React Native.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rneui/themed\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics in PostgREST\nDESCRIPTION: Demonstrates how to fetch Prometheus-compatible metrics from PostgREST's monitoring endpoint. The metrics include information about schema cache and connection pool statistics.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgrest-12-2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3001/metrics\n\n# HELP pgrst_db_pool_timeouts_total The total number of pool connection timeouts\n# TYPE pgrst_db_pool_timeouts_total counter\npgrst_db_pool_timeouts_total 7.0\n\n# ....\n```\n\n----------------------------------------\n\nTITLE: Copying Data to New Column with Type Casting in Postgres\nDESCRIPTION: This SQL command updates the table by copying data from the old column to the new column, casting it to the new data type. It's the second step in the alternative approach.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/slow-execution-of-alter-table-on-large-table-when-changing-column-type-qmZRpZ.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE \"table_name\" SET \"old_column_name\" = \"new_column_name\"::new_data_type;\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Client Engine with Groovy Gradle\nDESCRIPTION: Adds a Ktor client engine dependency using Gradle with Groovy DSL. Ktor engines are required for HTTP communication and must be selected based on target platform and websocket support needs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.ktor:ktor-client-[engine]:KTOR_VERSION'\n```\n\n----------------------------------------\n\nTITLE: Adding Store Modal Function to HomePage\nDESCRIPTION: A TypeScript method for the HomePage component that creates and presents a modal for adding a new store. The method uses Ionic's ModalController to create the modal with the StorePage component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n  async addStore() {\n    const modal = await this.modalCtrl.create({\n      component: StorePage,\n    });\n    modal.present();\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Signed URL for Transformed Image in Dart\nDESCRIPTION: This snippet demonstrates how to create a signed URL for a transformed image in a private bucket using the Supabase Dart client, specifying expiration time and transformation options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal url = await supabase.storage.from('bucket').createSignedUrl(\n      'image.jpg',\n      60000,\n      transform: const TransformOptions(\n        width: 200,\n        height: 200,\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Listing SSO Providers in Supabase CLI\nDESCRIPTION: Command to retrieve a list of all registered SSO providers for a Supabase project using the CLI. This provides basic information about each provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsupabase sso list --project-ref <your-project>\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query via HTTP in Supabase\nDESCRIPTION: Shows how to send a GraphQL query to the Supabase GraphQL endpoint using a curl command. This example retrieves the first 3 account IDs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://<PROJECT_REF>.supabase.co/graphql/v1 \\\n    -H 'apiKey: <API_KEY>'\\\n    -H 'Content-Type: application/json' \\\n    --data-raw '\n    {\n      \"query\":\"{ accountCollection(first: 3) { edges { node { id } } } }\"\n    }'\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Dataset\nDESCRIPTION: Loads Paul Graham essays from GitHub repository using SimpleWebPageReader for processing.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nessays = [\n    'paul_graham_essay.txt'\n]\ndocuments = SimpleWebPageReader().load_data([f'https://raw.githubusercontent.com/supabase/supabase/master/examples/ai/llamaindex/data/{essay}' for essay in essays])\nprint('Document ID:', documents[0].doc_id, 'Document Hash:', documents[0].hash)\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally for OG Image Generation\nDESCRIPTION: Commands to start Supabase locally and serve the 'lw11-og' function for Open Graph image generation. This setup disables JWT verification and uses a local environment file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lw11-og/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve lw11-og --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Access Policy in SQL\nDESCRIPTION: SQL script to create a storage policy that enables user-specific access control for file uploads in Supabase Storage bucket.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"Enable storage access for users based on user_id\" ON \"storage\".\"objects\"\nAS PERMISSIVE FOR ALL\nTO public\nUSING (bucket_id = 'files' AND (SELECT auth.uid()::text )= (storage.foldername(name))[1])\nWITH CHECK (bucket_id = 'files' AND (SELECT auth.uid()::text) = (storage.foldername(name))[1])\n```\n\n----------------------------------------\n\nTITLE: Invalidating Queries Example for Resource Updates\nDESCRIPTION: Code snippet showing how to invalidate specific queries when updating a resource. This is typically used in resource update mutations to ensure data consistency after mutations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/data/__templates/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nqueryClient.invalidateQueries(resourceKeys.resource(projectRef, id))\n```\n\n----------------------------------------\n\nTITLE: Update Trigger Function for User Changes\nDESCRIPTION: PostgreSQL function to handle user updates by synchronizing changes from auth.users to the profiles table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.update_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = ''\nas\n$$\nbegin\n  -- Update the user's data in the 'profiles' table\n  update public.profiles\n  set email = new.email     -- Update the 'email' field\n  where id = new.id;        -- Match the 'id' field with the new record\n\n  return new;  -- Return the new record\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Run pgloader Migration for MS SQL\nDESCRIPTION: This bash command executes the pgloader tool using a configuration file. The configuration file, config.load, contains information about the source (MS SQL) and destination (Postgres) databases.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/amazon-rds.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npgloader config.load\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in Supabase Flutter\nDESCRIPTION: Demonstrates the simplified deep link handling in version 1.0 which no longer requires implementation of special auth state classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nvoid onReceivedAuthDeeplink(Uri uri) {\n  Supabase.instance.log('onReceivedAuthDeeplink uri: $uri');\n}\n\n// After\nawait Supabase.instance.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Record Return Function\nDESCRIPTION: The JSON payload returned from the GraphQL query, showing the accounts that match the specified email domain.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"accountsByEmail\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": 1,\n            \"email\": \"a@foo.com\"\n          }\n        },\n          \"node\": {\n            \"id\": 3,\n            \"email\": \"c@foo.com\"\n          }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Document Ownership Structure\nDESCRIPTION: Implements a join table to support multiple owners per document, allowing for more flexible access control patterns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table document_owners (\n  id bigint primary key generated always as identity,\n  owner_id uuid not null references auth.users (id) default auth.uid(),\n  document_id bigint not null references documents (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook with Postman Echo API\nDESCRIPTION: This SQL query sends a POST request to the Postman Echo API using pg_net to test if requests are being properly formatted and transmitted.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\nnet.http_post(\nurl := 'https://postman-echo.com/post',\nbody := '{\"key1\": \"value\", \"key2\": 5}'::jsonb\n) as request_id;\n```\n\n----------------------------------------\n\nTITLE: Dropping Old Column in Postgres\nDESCRIPTION: This SQL command removes the old column from the table after the data has been successfully migrated to the new column. It's the final step in the alternative approach.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/slow-execution-of-alter-table-on-large-table-when-changing-column-type-qmZRpZ.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"table_name\" DROP COLUMN \"old_column_name\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Query Blocking with pg_plan_filter\nDESCRIPTION: Shows a query being blocked by pg_plan_filter because its estimated total cost (135.0) exceeds the configured limit (50).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from book;\n\nERROR:  plan cost limit exceeded\nHINT:  The plan for your query shows that it would probably have an excessive run time. This may be due to a logic error in the SQL, or it maybe just a very costly query. Rewrite your query or increase the configuration parameter \"plan_filter.statement_cost_limit\".\n-- FAILURE\n```\n\n----------------------------------------\n\nTITLE: Querying Nearby Restaurants with JavaScript\nDESCRIPTION: JavaScript code to call the nearby_restaurants function with latitude and longitude parameters. This queries restaurants sorted by distance from the specified point.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.rpc('nearby_restaurants', {\n  lat: 40.807313,\n  long: -73.946713,\n})\n```\n\n----------------------------------------\n\nTITLE: React JSX Layout Component for CLI Introduction\nDESCRIPTION: JSX code defining the layout and structure of the Supabase CLI documentation page. It includes a header section with title and two column layout for details and examples.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/cli/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex items-start gap-6 not-prose\" id=\"introduction\">\n  <div className=\"flex flex-col gap-2\">\n    <h1 className=\"text-3xl text-foreground m-0\">Supabase CLI</h1>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication for Delete Events Only in SQL\nDESCRIPTION: Creates a publication that only tracks delete operations on all tables, ignoring inserts and updates. This allows you to track only when data is removed from tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate publication publication_name\nfor all tables\nwith (publish = 'delete');\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi serializer dependency in Groovy build file\nDESCRIPTION: This snippet demonstrates how to add the Moshi serializer dependency to a Kotlin project using Gradle Groovy DSL. It's necessary for using Moshi as the serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.github.jan-tennert.supabase:serializer-moshi:VERSION'\n```\n\n----------------------------------------\n\nTITLE: Using startsWith Filter in GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates the use of the new 'startsWith' filter in pg_graphql v1.2. It queries the generalLedgerCollection for entries where the identifierCode starts with 'BX1:'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  generalLedgerCollection(filter: { identifierCode: { startsWith: \"BX1:\" } }) {\n    edges {\n      node {\n        nodeId\n        identifierCode\n        amount\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Realtime Events in Supabase with TypeScript\nDESCRIPTION: Code examples demonstrating how to subscribe to realtime events from a Supabase table. The older version uses the .from().on() pattern, while the newer version uses the channel API with postgres_changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst userListener = supabase\n  .from('users')\n  .on('*', (payload) => handleAllEventsPayload(payload.new))\n  .subscribe()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst userListener = supabase\n  .channel('public:user')\n  .on('postgres_changes', { event: '*', schema: 'public', table: 'user' }, (payload) =>\n    handleAllEventsPayload()\n  )\n  .subscribe()\n```\n\n----------------------------------------\n\nTITLE: Resetting Password with Supabase in Kotlin\nDESCRIPTION: This snippet illustrates how to initiate a password reset process using the Supabase Kotlin client. It sends a reset password email to the user's email address with a redirect URL for updating the password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.resetPasswordForEmail(\n    email = \"valid.email@supabase.io\",\n    redirectUrl = \"http://example.com/account/update-password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Delete Trigger Function for User Removal\nDESCRIPTION: PostgreSQL function to handle user deletions by removing corresponding records from the profiles table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate function public.delete_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = ''\nas\n$$\nbegin\n  -- Delete the user's data from the 'profiles' table\n  delete from public.profiles\n  where id = old.id;  -- Match the 'id' field with the old record\n\n  return old;  -- Return the old record\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Schema for Employees Table in SQL\nDESCRIPTION: Defines the initial schema for an 'employees' table with 'id' and 'name' columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"employees\" (\n  \"id\" integer not null,\n  \"name\" text\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase AI Assistant with OpenAI API Key\nDESCRIPTION: Configuration for enabling the Supabase AI Assistant by adding an OpenAI API key to the Studio service in docker-compose.yml, which helps with writing SQL queries, statements, and policies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  studio:\n    image: supabase/studio\n    environment:\n      OPENAI_API_KEY: ${OPENAI_API_KEY:-}\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch Sign-In Code in Kotlin\nDESCRIPTION: This snippet illustrates how to implement the Twitch sign-in functionality using the Supabase Kotlin client. It outlines the usage of the signInWith method with Twitch specified as the provider.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithTwitch() {\\n\\tsupabase.auth.signInWith(Twitch)\\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Password Email Template for PKCE Flow\nDESCRIPTION: This HTML snippet shows the content of a reset password email template for the PKCE flow. It includes a link with a token hash for resetting the password securely.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<h2>Reset Password</h2>\n\n<p>Follow this link to reset the password for your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=recovery&next=/account/update-password\"\n    >Reset Password</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables for Chart Theming\nDESCRIPTION: Example of using CSS variables in chart configuration to support light and dark themes. This demonstrates the recommended approach for theme integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    // ...\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n  }\n\n  .dark: {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 100%;\n    // ...\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CORS Headers for ChatGPT Plugin in TypeScript\nDESCRIPTION: This code defines the CORS headers required for the ChatGPT plugin to work correctly. It sets the necessary headers to allow communication with the ChatGPT interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const corsHeaders = {\n  'Access-Control-Allow-Origin': 'https://chat.openai.com',\n  'Access-Control-Allow-Credentials': 'true',\n  'Access-Control-Allow-Private-Network': 'true',\n  'Access-Control-Allow-Headers': '*',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Image Handling in Swift\nDESCRIPTION: Implements support for avatar image picking and data handling with SwiftUI's Transferable protocol.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#2025-04-21_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct AvatarImage: Transferable, Equatable {\n  let image: Image\n  let data: Data\n\n  static var transferRepresentation: some TransferRepresentation {\n    DataRepresentation(importedContentType: .image) { data in\n      guard let image = AvatarImage(data: data) else {\n        throw TransferError.importFailed\n      }\n\n      return image\n    }\n  }\n}\n\nextension AvatarImage {\n  init?(data: Data) {\n    guard let uiImage = UIImage(data: data) else {\n      return nil\n    }\n\n    let image = Image(uiImage: uiImage)\n    self.init(image: image, data: data)\n  }\n}\n\nenum TransferError: Error {\n  case importFailed\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Row Count Estimation Errors in PostgreSQL Sequential Scans\nDESCRIPTION: Example showing a sequential scan where the query planner's estimated row count (100) significantly differs from the actual count (10,000). This discrepancy can lead to suboptimal execution plans.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSeq Scan on users  (cost=0.00..50.00 rows=100 width=50) (actual time=0.010..25.000 rows=10000 loops=1)\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI tooltip package using npm\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-tooltip\n```\n\n----------------------------------------\n\nTITLE: Disabling Read-Only Mode in Postgres\nDESCRIPTION: This SQL command disables the default read-only transaction mode, allowing write operations in the database. It should be used after reclaiming space to restore normal database operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nset default_transaction_read_only = 'off';\n```\n\n----------------------------------------\n\nTITLE: Downloading Supabase Storage Buckets using CLI\nDESCRIPTION: Series of CLI commands to authenticate, link to a project, initialize Supabase, and download storage bucket contents to the current directory. Requires Supabase CLI installation and proper project credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pausing-pro-projects-vNL-2a.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nnpx supabase login\n\n# link to your project\nnpx supabase link\n\nnpx supabase init\n\n# will download files to current folder\nnpx supabase storage cp -r ss://bucket . --experimental\n```\n\n----------------------------------------\n\nTITLE: Updating Client Components\nDESCRIPTION: Example of updating a client component to use the new client utility function instead of the deprecated createClientComponentClient.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\n// replace this line\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\n\n// with\nimport { createClient } from '@/utils/supabase/client';\n\nexport default async function Page() {\n\t// replace this line\n\tconst supabase = createClientComponentClient<Database>();\n\n\t// with\n\tconst supabase = createClient();\n\n\treturn...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Full Vacuum on a Specific Table in Postgres\nDESCRIPTION: This SQL command performs a full vacuum operation on a specified table to reclaim space and update statistics. It should be used cautiously as it locks the table during the operation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nvacuum full <table name>;\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Columns in GraphQL\nDESCRIPTION: Example of using contains operator to filter array columns in GraphQL queries\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  blogCollection(filter: { tags: { contains: [\"tech\", \"innovation\"] } }) {\n    edges {\n      cursor\n      node {\n        name\n        tags\n        createdAt\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML code for embedding a responsive YouTube video player with security and privacy settings enabled. The iframe includes class styling for responsive behavior and border effects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-12-02-case-study-monitoro.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full video-with-border\"\n    src=\"https://www.youtube-nocookie.com/embed/8A6_pg41M2s\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Lists in Markdown\nDESCRIPTION: Example showing proper list nesting structure with ordered and unordered lists, demonstrating maximum nesting depth of two levels.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. List item\n2. List item\n   1. List item\n   2. List item\n3. List item\n   - List item\n   - List item\n   <!-- DON'T ADD ANOTHER LEVEL OF NESTING -->\n     - Overly nested list item\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown/HTML\nDESCRIPTION: HTML iframe code for embedding a promotional video about the Supabase book with proper formatting and security attributes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-supabase-book-by-david-lorenz.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/ISFCooRMvbE\"\n    title=\"The Supabase Book by David Lorenz\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Nearby Restaurants with Dart\nDESCRIPTION: Dart code to call the nearby_restaurants function with latitude and longitude parameters. Returns restaurants sorted by proximity to the given location.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.rpc('nearby_restaurants',params: {\n  'lat': 40.807313,\n  'long': -73.946713,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Tables with Multiple Foreign Keys in Kotlin\nDESCRIPTION: Kotlin example showing how to query shifts with explicit join definitions for multiple foreign keys to the same table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"shifts\").select(Columns.raw('''\n  *,\n  start_scan:scans!scan_id_start (\n    id,\n    user_id,\n    badge_scan_time\n  ),\nend_scan:scans!scan_id_end (\n    id,\n    user_id,\n    badge_scan_time\n  )\n'''));\n```\n\n----------------------------------------\n\nTITLE: Performing Similarity Search with Supabase\nDESCRIPTION: Shows how to execute a similarity search using Supabase's RPC function with the generated embedding to find relevant content matches.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { error: matchError, data: pageSections } = await supabaseClient.rpc(\n  'match_page_sections',\n  {\n    embedding,\n    match_threshold: 0.78,\n    match_count: 10,\n    min_content_length: 50,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Theme Colors in Chart Data in React/TSX\nDESCRIPTION: Shows how to reference theme colors directly in chart data objects using CSS variables, allowing for dynamic color application based on data properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartData = [\n  { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n  { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Logical Replication Slot on Supabase Database\nDESCRIPTION: Creates a logical replication slot named 'example_slot' using the 'pgoutput' plugin. This slot is used to track changes that will be sent to subscribers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_create_logical_replication_slot('example_slot', 'pgoutput');\n```\n\n----------------------------------------\n\nTITLE: Querying Information Schema Tables via PostgREST\nDESCRIPTION: Shows how to query the information_schema to retrieve table information from the public schema using specific parameters\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/tables?select=table_name,table_schema&table_schema=eq.public' \\\n -H 'accept-profile: information_schema' \\\n -H \"apikey: $ANON_KEY\" \\\n -H \"authorization: Bearer $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Type for Uploads in Supabase Storage with Kotlin\nDESCRIPTION: This code demonstrates how to specify the content type when uploading a file to Supabase Storage using Kotlin. It uses the 'contentType' option to set the MIME type.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.storage.from(\"bucket_name\").upload(\"file_path\", bytes) {\n    contentType = ContentType.Image.JPEG\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Movies Table Schema in Postgres\nDESCRIPTION: SQL schema definition for a movies table that will be used for full text search, including basic fields like title, original_title, and overview.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table movies (\n\tid bigint primary key generated by default as identity,\n\ttitle text not null,\n\toriginal_title text not null,\n\toverview text not null,\n\tcreated_at timestamptz not null default now()\n);\n```\n\n----------------------------------------\n\nTITLE: Serving the og-images function locally\nDESCRIPTION: This command serves the og-images function locally using the Supabase CLI. This allows you to test your changes locally before deploying. You should have supabase running locally first.\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/og-images/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase functions serve og-images\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Flutter Presence Tutorial\nDESCRIPTION: HTML iframe code for embedding a YouTube video tutorial that demonstrates how to implement Supabase Realtime Presence in Flutter applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/realtime-user-presence.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    src=\"https://www.youtube-nocookie.com/embed/B2NZvZ2uLNs?si=2JmxGOFuwwUGaTxr\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Oak Framework Routing Implementation\nDESCRIPTION: Example of implementing routing in Edge Functions using Oak framework with GET and POST request handlers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application } from \"jsr:@oak/oak@15/application\";\nimport { Router } from \"jsr:@oak/oak@15/router\";\n\nconst router = new Router();\n\nrouter.get(\"/hello-world\", (ctx) => {\nctx.response.body = \"Hello world!\";\n});\n\nrouter.post(\"/hello-world\", async (ctx) => {\nconst { name } = await ctx.request.body.json();\nctx.response.body = `Hello ${name}!`;\n});\n\nconst app = new Application();\napp.use(router.routes());\napp.use(router.allowedMethods());\n\napp.listen({ port: 3000 });\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting Local Supabase Database from Backup\nDESCRIPTION: Commands to initialize Supabase locally, set the Postgres version, and start a database from a backup file. Requires Supabase CLI and a backup file named db_cluster.backup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/restoring-downloaded-backup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsupabase init\necho '15.6.1.115' > supabase/.temp/postgres-version\nsupabase db start --from-backup db_cluster.backup\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User Dart\nDESCRIPTION: The Dart snippet provides an asynchronous function to sign out a user using the Supabase client library. The function clears the current session data from the client-side. Ensure that Supabase Dart package is installed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> signOut() async {\\n   await supabase.auth.signOut();\\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User Swift\nDESCRIPTION: This Swift snippet uses asynchronous syntax to call the sign out method from the Supabase client library, clearing the user session. Ensure the necessary Supabase packages are integrated into the Swift project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\ntry await supabase.auth.signOut()\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson serializer dependency in Kotlin build file\nDESCRIPTION: This snippet shows how to add the Jackson serializer dependency to a Kotlin project using Gradle Kotlin DSL. It's required for using Jackson as the serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.github.jan-tennert.supabase:serializer-jackson:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Phone OTP\nDESCRIPTION: Shows how to verify the 6-digit OTP code sent to the user's phone. Upon successful verification, returns a session with access and refresh tokens.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/phone-login.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  data: { session },\n  error,\n} = await supabase.auth.verifyOtp({\n  phone: '13334445555',\n  token: '123456',\n  type: 'sms',\n})\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.verifyOTP(\n  phone: \"+13334445555\",\n  token: \"123456\",\n  type: .sms\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsupabase.auth.verifyPhoneOtp(\n    type = OtpType.Phone.SMS,\n    phone = \"+13334445555\",\n    token = \"123456\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.auth.verify_otp({\n  'phone': '13334445555',\n  'token': '123456',\n  'type': 'sms',\n})\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://<PROJECT_REF>.supabase.co/auth/v1/verify' \\\n-H \"apikey: <SUPABASE_KEY>\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"type\": \"sms\",\n  \"phone\": \"+13334445555\",\n  \"token\": \"123456\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Explicit Options in JavaScript\nDESCRIPTION: Example of creating a Supabase client with explicit options for database, authentication, realtime, and global settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst supabase = createClient(apiURL, apiKey, {\n  db: {\n    schema: 'public',\n  },\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n  },\n  realtime: {\n    channels,\n    endpoint,\n  },\n  global: {\n    fetch: customFetch,\n    headers: DEFAULT_HEADERS,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing to Supabase Using psql\nDESCRIPTION: This snippet illustrates the command to import the exported Render database SQL file into a Supabase Postgres database. It uses the psql tool and requires the Supabase connection string to be provided.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/render.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql -d \"$YOUR_CONNECTION_STRING\" -f render_dump.sql\n```\n\n----------------------------------------\n\nTITLE: Querying Auth Errors in SQL\nDESCRIPTION: SQL query to find Auth-related errors by checking for 500 status codes and error/fatal level messages in the auth logs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(metadata.timestamp as datetime) as timestamp,\n  msg,\n  event_message,\n  status,\n  path,\n  level\nfrom auth_logs\ncross join unnest(metadata) as metadata\nwhere\n   -- find all errors\n   status::INT = 500\n    OR\n  regexp_contains(level, 'error|fatal')\norder by timestamp\n```\n\n----------------------------------------\n\nTITLE: Inserting Array Data with Python Supabase Client\nDESCRIPTION: This Python snippet uses the Supabase client to insert a record into the 'arraytest' table with an id of 2 and a text array containing four elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsupabase.from_('arraytest').insert(\n  [\n    {\n      id: 2,\n      textarray: [\"one\", \"two\", \"three\", \"four\"]\n    }\n  ]\n)\n.execute()\n```\n\n----------------------------------------\n\nTITLE: Offloading PostgreSQL Data to Snowflake with FDWs\nDESCRIPTION: SQL query showing how to move data from PostgreSQL to Snowflake using foreign data wrappers, inserting recent analytics data into the data warehouse.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ninsert into snowflake.analytics\nselect * from analytics\nwhere ts > (now() - interval '1 DAY');\n```\n\n----------------------------------------\n\nTITLE: Explaining PGroonga Index Usage in PostgreSQL\nDESCRIPTION: SQL command to explain the query plan for a SELECT statement using LIKE with the PGroonga index, demonstrating how the index is used for full-text search.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nexplain select * from memos where content like '%engine%';\n```\n\n----------------------------------------\n\nTITLE: Table Creation with JSON Schema Validation\nDESCRIPTION: SQL code demonstrating how to create a table with a JSON column and JSON Schema validation using pg_jsonschema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table some_table(\n  id serial primary key,\n  metadata json not null,\n\n  check (\n    json_matches_schema(\n      schema :='{\n         \"type\": \"object\",\n         \"properties\": {\n          \"foo\": {\n           \"type\": \"string\"\n          }\n         },\n         \"required\": [\"foo\"],\n         \"additionalProperties\": false\n      }',\n      instance := metadata\n    )\n  )\n);\n\ninsert into some_table(metadata)\nvalues\n  (<SQL input>);\n```\n\n----------------------------------------\n\nTITLE: Listing Version and Changes for Supabase C# Client\nDESCRIPTION: This markdown snippet outlines the changes and updates in version 0.2.6 of the Supabase C# client library. It includes dependency updates, bug fixes, and new feature additions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/csharp/v0/release-notes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.6 - 2021-11-29\n\n- Support for [#12](https://github.com/supabase-community/supabase-csharp/issues/12)\n- Update realtime-csharp to 2.0.6\n- Update gotrue-csharp to 2.2.2\n- Add `StatelessClient` re:[#7](https://github.com/supabase-community/supabase-csharp/issues/7)\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase in v0 vs v1\nDESCRIPTION: Shows the change in Supabase initialization. In v1, SupabaseAuthState and SupabaseAuthRequiredState are deprecated, and token refresh happens automatically upon initialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n...\n\nclass AuthState<T extends StatefulWidget> extends SupabaseAuthState<T> {\n  ...\n}\n\n...\n\nclass AuthRequiredState<T extends StatefulWidget> extends SupabaseAuthState<T> {\n  ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n);\n```\n\n----------------------------------------\n\nTITLE: Inspecting Failed Webhook Responses\nDESCRIPTION: This SQL query retrieves all failed responses (status code >= 400 or with error messages) from the past 6 hours, ordered by creation time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom net._http_response\nwhere \"status_code\" >= 400 or \"error_msg\" is not null\norder by created desc;\n```\n\n----------------------------------------\n\nTITLE: Signing Out - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to sign out users from the Instagram account using the Supabase client. The `signOut()` method is called to remove the user from the session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\\n\\tsupabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying CDN Cache Status Headers\nDESCRIPTION: Demonstrates how to check CDN cache status through response headers. The `cf-cache-status` header provides information about whether a request was served from cache or origin server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/cdn/fundamentals.mdx#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncf-cache-status: HIT   # Object served directly from CDN cache\ncf-cache-status: MISS  # Object retrieved from origin server\n```\n\n----------------------------------------\n\nTITLE: Full Text Search on Description Column in SQL\nDESCRIPTION: SQL query using PostgreSQL's full text search to find all books where the description contains the word 'big'. Uses to_tsvector() and to_tsquery() with the @@ match operator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description)\n  @@ to_tsquery('big');\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Text Search in Postgres\nDESCRIPTION: SQL commands to add a generated column for full text search document and create a GIN index for performance optimization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Add a generated column that contains the search document\nalter table movies\n\tadd column fts_doc_en\n\tgenerated always as to_tsvector (\n\t\t'english', title || ' ' || original_title || ' ' || overview\n\t)\n\tstored;\n\n-- Create a GIN index to make our searches faster\ncreate index movies_fts_doc_en_idx\n\ton movies\n\tusing gin (fts_doc_en);\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for Euclidean Distance in SQL\nDESCRIPTION: SQL command to create an IVFFlat index using the vector_l2_ops operator class for Euclidean distance. The index is created on the 'column_name' of the 'items' table with 100 lists.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using ivfflat (column_name vector_l2_ops) with (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Profiles in Supabase Example App\nDESCRIPTION: Shows a GraphQL query used in the example Hacker News clone app to fetch profile information, including id, username, bio, avatarUrl, and website.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ProfilesQuery {\n    profileCollection {\n      edges {\n        node {\n          id\n          username\n          bio\n          avatarUrl\n          website\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Supabase Realtime with Greater Than or Equal To (gte) Operator\nDESCRIPTION: Examples of using the 'greater than or equal to' filter to listen for changes when a column's value is greater than or equal to a specified threshold. This uses Postgres's '>=' operator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase\n  .channel('changes')\n  .on(\n    'postgres_changes',\n    {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'products',\n      filter: 'quantity=gte.10',\n    },\n    (payload) => console.log(payload)\n  )\n  .subscribe()\n```\n\nLANGUAGE: dart\nCODE:\n```\nsupabase\n    .channel('changes')\n    .onPostgresChanges(\n        event: PostgresChangeEvent.insert,\n        schema: 'public',\n        table: 'products',\n        filter: PostgresChangeFilter(\n          type: PostgresChangeFilterType.gte,\n          column: 'quantity',\n          value: 10,\n        ),\n        callback: (payload) => print(payload))\n    .subscribe();\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet myChannel = await supabase.channel(\"db-changes\")\n\nlet changes = await myChannel.postgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"products\",\n  filter: .gte(\"quantity\", value: 10)\n)\n\nawait myChannel.subscribe()\n\nfor await change in changes {\n  print(change.record)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"products\"\n    filter = \"quantity=gte.10\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\nLANGUAGE: python\nCODE:\n```\nchanges = supabase.channel('db-changes').on_postgres_changes(\n  \"UPDATE\",\n  schema=\"public\",\n  table=\"products\",\n  filter=\"quantity=gte.10\",\n  callback=lambda payload: print(payload)\n)\n.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase-KT Dependencies with Gradle Kotlin DSL\nDESCRIPTION: Demonstrates how to add core Supabase-KT modules (postgrest-kt, auth-kt, realtime-kt) using Gradle Kotlin DSL build script. Uses BOM for version management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(platform(\"io.github.jan-tennert.supabase:bom:VERSION\"))\nimplementation(\"io.github.jan-tennert.supabase:postgrest-kt\")\nimplementation(\"io.github.jan-tennert.supabase:auth-kt\")\nimplementation(\"io.github.jan-tennert.supabase:realtime-kt\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Message\nDESCRIPTION: Removes a single message from the queue by its message ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect pgmq.delete('my_queue', 5);\n```\n\n----------------------------------------\n\nTITLE: Executing EXPLAIN via HTTP in PostgREST v10\nDESCRIPTION: Demonstrates how to obtain an execution plan for a PostgREST query using curl with a specific Accept header. This feature is enabled when the db-plan-enabled config is set to true.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -H 'Accept: application/vnd.pgrst.plan' \\\n       'https://<project>.supabase.co/rest/v1/clients?select=*&id=eq.1'\n```\n\n----------------------------------------\n\nTITLE: Astro Supabase Client Configuration\nDESCRIPTION: Sets up Supabase client for Astro with server-side rendering and dynamic cookie management\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient, parseCookieHeader } from \"@supabase/ssr\";\n\nconst supabase = createServerClient(\n  import.meta.env.PUBLIC_SUPABASE_URL,\n  import.meta.env.PUBLIC_SUPABASE_ANON_KEY,\n  {\n    cookies: {\n      getAll() {\n        return parseCookieHeader(Astro.request.headers.get('Cookie') ?? '')\n      },\n      setAll(cookiesToSet) {\n        cookiesToSet.forEach(({ name, value, options }) =>\n          Astro.cookies.set(name, value, options))\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Identifier with EXPLAIN in JavaScript\nDESCRIPTION: Demonstrates how to obtain the pg_stat_statements query identifier using the explain() transform with json format and verbose option. This identifier can be used in Supabase logs to find generated SQL queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .from('projects')\n  .select('*')\n  .eq('id', 1)\n  .explain({ format: 'json', verbose: true })\n\nconsole.log(data[0]['Query Identifier'])\n// 2811722635570756600\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Integration\nDESCRIPTION: Implementation of a dropdown menu within a breadcrumb item using DropdownMenu component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\n...\n\n<BreadcrumbItem>\n  <DropdownMenu>\n    <DropdownMenuTrigger className=\"flex items-center gap-1\">\n      Components\n      <ChevronDownIcon />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem>Documentation</DropdownMenuItem>\n      <DropdownMenuItem>Themes</DropdownMenuItem>\n      <DropdownMenuItem>GitHub</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</BreadcrumbItem>\n```\n\n----------------------------------------\n\nTITLE: Downloading Supabase SAML Metadata File URL\nDESCRIPTION: A URL to download the Supabase SAML metadata file that needs to be uploaded to Azure AD during the SSO configuration process. This metadata file contains the necessary configuration information for establishing the SAML connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/sso/azure.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://alt.supabase.io/auth/v1/sso/saml/metadata?download=true\n```\n\n----------------------------------------\n\nTITLE: Reloading PostgREST Configuration\nDESCRIPTION: Notification command to reload PostgREST configuration after changing timeout settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nNOTIFY pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Managing Database Branches with Supabase CLI\nDESCRIPTION: Shows how to create, switch, and delete database branches for testing migrations without data loss.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db branch new my_branch\nsupabase db branch switch my_branch\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db branch switch main\nsupabase db branch delete my_branch\n```\n\n----------------------------------------\n\nTITLE: Listing SAML Connections (Supabase CLI)\nDESCRIPTION: This command lists all registered SAML 2.0 Identity Provider connections in Supabase Auth using the Supabase CLI. It requires specifying the project reference. The command displays a list of all identity providers configured for the project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase sso list --project-ref <your-project>\"\n```\n\n----------------------------------------\n\nTITLE: Sign Out User with Supabase Auth\nDESCRIPTION: This JavaScript snippet demonstrates how to sign out a user using the Supabase client library. It initializes the Supabase client and calls the signOut method. The function returns a promise that resolves when the user is successfully signed out or rejects with an error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js App Wrapper Setup\nDESCRIPTION: Implementation of SessionContextProvider wrapper in _app.js/tsx for Supabase client initialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPagesBrowserClient } from '@supabase/auth-helpers-nextjs'\nimport { SessionContextProvider } from '@supabase/auth-helpers-react'\nimport { useState } from 'react'\n\nfunction MyApp({ Component, pageProps }) {\n  const [supabaseClient] = useState(() => createPagesBrowserClient())\n\n  return (\n    <SessionContextProvider\n      supabaseClient={supabaseClient}\n      initialSession={pageProps.initialSession}\n    >\n      <Component {...pageProps} />\n    </SessionContextProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase for Real-Time Communication in Flutter\nDESCRIPTION: Sets up Supabase in a Flutter application for real-time communication between players, configuring a higher events-per-second rate for smoother gameplay synchronization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  await Supabase.initialize(\n  url: 'YOUR_SUPABASE_URL',\n  anonKey: 'YOUR_ANON_KEY',\n  realtimeClientOptions: const RealtimeClientOptions(eventsPerSecond: 40),\n  );\n  runApp(const MyApp());\n}\n\n// Extract Supabase client for easy access to Supabase\nfinal supabase = Supabase.instance.client;\n```\n\n----------------------------------------\n\nTITLE: Upserting and Returning Data in Supabase with TypeScript\nDESCRIPTION: Code examples demonstrating how to upsert (insert or update) data in a Supabase table with and without returning the affected records. The newer version adds a .select() method to return the upserted data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('my_table')\n  .upsert({ new_data })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('my_table')\n  .upsert({ new_data })\n  .select()\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization Plugin in Maven POM\nDESCRIPTION: This XML snippet shows how to configure the KotlinX Serialization plugin in a Maven project's pom.xml file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <compilerPlugins>\n                    <plugin>kotlinx-serialization</plugin>\n                </compilerPlugins>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>org.jetbrains.kotlin</groupId>\n                    <artifactId>kotlin-maven-serialization</artifactId>\n                    <version>${kotlin.version}</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Checking IPv6 Network Compatibility\nDESCRIPTION: Bash command to check if your network supports IPv6 connections. This helps determine whether to use the direct connection string instead of Supavisor for long-running tasks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -6 https://ifconfig.co/ip\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Linux\nDESCRIPTION: JSON configuration for running an MCP server on Linux systems using npx to execute the Postgres server module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_postgres_config.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"<connection-string>\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Timeout Parameter\nDESCRIPTION: Demonstrates how to increase the connection timeout by adding the connect_timeout parameter to the connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n.../postgres?connect_timeout=30\n```\n\n----------------------------------------\n\nTITLE: Vector Embeddings Data Rows\nDESCRIPTION: Database records containing 384-dimensional vector embeddings for object classification. Each row contains an object label and its corresponding vector representation, likely generated from an embedding model.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n('Tomato', '[-0.029869203,0.015828134,...,0.03005724]'),\n('Desk', '[-0.017075958,-0.010888746,...,0.039229322]')\n```\n\n----------------------------------------\n\nTITLE: Defining Word Embedding Vector for 'Chair' in Python\nDESCRIPTION: This code snippet defines a 384-dimensional vector representation for the word 'Chair'. The vector is represented as a tuple containing the word and a string of comma-separated float values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n('Chair', '[0.007242612,-0.008890708,0.07087478,-0.017218666,0.010161964,0.02288103,0.0628255,0.11424202,0.0042939316,-8.577153e-05,0.011476879,-0.062698215,-0.008032744,0.055627514,0.031709522,0.008646851,-0.007677212,0.066087514,-0.03393286,0.04595943,0.026118021,-0.022798017,-0.018182075,-0.05310286,0.00035249838,0.023295226,-0.042976543,-0.05135346,-0.03338082,-0.14254245,-0.014448951,-0.082290724,0.044443995,-0.03974422,-0.005926467,-0.049466074,-0.023638904,0.027757877,0.022480648,0.053556327,0.047165435,-0.004361453,-0.050542057,-0.0437012,-0.02560832,-0.06319627,-0.0041195815,0.003607597,0.052995015,0.011868532,-0.023403196,-0.03835523,-0.011448239,0.022041226,0.029417036,0.050992206,0.0633451,-0.023109978,0.00216341,0.034917675,0.057824627,0.018065536,-0.24170217,0.11006612,0.03759417,0.036411434,-0.052734427,-0.08213202,0.026438877,0.023384342,-0.0010665334,0.02193495,0.04822074,0.057032634,0.032533765,-0.06519445,-0.011998926,-0.07312999,0.04362863,0.029194133,0.036719177,-0.014692358,-0.047481794,-0.0066692936,-0.0130425235,-0.033006106,-0.006729974,-0.055479433,0.002909906,0.009901007,-0.054927614,0.016737197,-0.0039022777,0.012947416,-0.095253274,-0.03701531,0.009167639,0.0016094614,-0.074405804,0.23805863,-0.07722793,0.053594265,0.05661687,0.013474817,0.012748461,-0.043693267,-0.0058534956,-0.03260329,-0.046950907,0.0037631558,-0.031769305,-0.017883668,-0.0041399263,-0.00987623,-0.030830177,0.019493125,0.015751151,0.02815844,-0.035440337,-0.045221068,0.03741029,0.034405444,0.04950322,0.0002810536,0.039881516,-0.09062843,0.06339841,0.13453153,0.045081846,0.064796284,0.06558472,-0.037522722,-0.0140108,-0.02632353,0.00747574,0.015750928,0.0083326,0.012081866,0.004607462,-0.03037953,-0.004366012,-0.11747248,-0.04063107,-0.056524236,-0.03673815,0.06279229,-0.0609879,0.015854241,-0.045741193,0.050263777,-0.0073641776,0.050540153,-0.04290963,0.014485639,-0.0139276795,0.022182146,-0.012923014,0.036970016,-0.0050614392,0.0010354925,-0.023141287,-0.051632244,-0.018497547,0.09570567,-0.007901496,-0.09501473,-0.017568301,0.03681976,0.013184938,-0.029150061,0.044263743,0.030326407,-0.062202446,0.03592422,0.14171353,0.061264616,-0.0113557875,0.0057085683,-0.0042014834,0.024679331,0.09886817,-0.022956898,-0.08608185,0.03893355,0.039992895,-0.02475844,0.005292053,-0.008077331,0.023394594,0.03322915,0.0014964573,0.036820974,-0.08104848,-0.040368747,-0.023672812,-0.04888999,-0.017661298,0.0004353547,0.046766445,-0.02462088,0.05855902,0.019459412,-0.092742875,0.07434688,0.00040293016,-0.008316873,-0.022810865,-0.007958628,0.0145595735,0.046529282,-0.035352007,0.017510511,0.018891828,-0.03154253,-0.016596705,0.011242443,0.03959193,0.033566765,0.028399244,0.0078011975,0.045376554,-0.07623077,-0.039943192,-0.17767033,0.04873167,-0.0020410172,-0.04009756,0.024814129,0.007918742,0.024190389,-0.00033496512,0.013061196,0.008428592,0.04138094,-0.0040136375,-0.010298606,0.018205566,-0.05673821,0.09389307,0.041287653,-0.04741975,-0.009544984,-0.01219063,-0.006107758,0.04731182,-0.054440457,-0.02459403,0.032760493,-0.016143644,0.20824662,0.0641648,0.016682435,-0.037340675,0.042529665,0.0018572406,-0.010167863,-0.14444397,0.06076707,0.027983412,0.013329789,-0.094144866,-0.053174745,-0.023026194,-0.024418438,0.038233172,0.013938331,-0.03727014,-0.027715338,-0.053909518,-0.058724325,-0.023147698,-0.05653502,0.024166629,0.042693656,-0.07007864,0.027310245,0.035349548,-0.009547592,0.0021897648,-0.039186116,0.01033775,-0.019588446,0.043451525,-0.060066592,-0.03307617,-0.0066904244,-0.03603856,0.04852917,-0.00236953,0.010736449,-0.008823226,0.048167307,-0.06029884,-0.02008656,0.04934105,-0.02165272,-0.0059321085,0.06101121,0.0050238813,0.036402144,-0.02407015,0.023990652,-0.017778596,0.0436243,-0.015234602,0.0013730796,0.032770347,0.04894707,-0.019903826,0.027210288,0.007320456,0.0031876478,-0.055667188,-0.0072730477,0.028816042,-0.036349706,-0.00014394987,0.041932836,0.011812606,-0.28528613,0.04374173,-0.02590061,0.036650803,-0.0054236376,0.044467915,-0.03377718,0.026663015,-0.057349887,-0.009933792,0.05871865,0.066987924,0.01848101,0.035349075,-0.017123345,0.09152398,0.03281407,-0.027747098,0.024043055,-0.07519967,-0.008642383,0.012063249,0.1965554,-0.04898195,0.068870105,0.023952631,-0.019946015,0.004611634,-0.011829971,0.004210717,0.007021141,-0.002664805,0.09861566,-0.07022641,0.02679062,0.08935795,-0.030601857,0.049988363,-0.00043722984,-0.07530143,-0.02624388,0.0027576822,-0.00384283,-0.0011950951,0.09351181,0.000937468,-0.04877977,-0.008898081,-0.0072512534,0.035405826,-0.037256964,0.017189763,-0.026388798,0.03487121,0.0046409904,-0.004795937,-0.012733615,-0.023830233,-0.0358013,-0.043804348,-0.029517788,-0.046758275,-0.06881492,0.024177445,0.0143103]')\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres View for Public Ticket Data (SQL)\nDESCRIPTION: This SQL query creates a view that publicizes selected ticket data and computes additional values, such as referral count and golden ticket status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndrop view if exists lw7_tickets_golden;\n\ncreate or replace view lw7_tickets_golden as\n  with\n    lw7_referrals as (\n      select\n        referred_by,\n        count(*) as referrals\n      from lw7_tickets\n      where referred_by is not null\n      group by referred_by\n    )\n  select\n    lw7_tickets.\"id\",\n    lw7_tickets.\"name\",\n    lw7_tickets.\"username\",\n    lw7_tickets.\"ticketNumber\",\n    lw7_tickets.\"createdAt\",\n    lw7_tickets.\"sharedOnTwitter\",\n    lw7_tickets.\"sharedOnLinkedIn\",\n    lw7_tickets.\"bg_image_id\",\n    case\n      when lw7_referrals.referrals is null then 0\n      else lw7_referrals.referrals\n    end as referrals,\n    case\n      when lw7_tickets.\"sharedOnTwitter\" is not null\n      and lw7_tickets.\"sharedOnLinkedIn\" is not null then true\n      else false\n    end as golden\n  from\n    lw7_tickets\n    left outer join lw7_referrals on lw7_tickets.username = lw7_referrals.referred_by;\n\nselect *\nfrom lw7_tickets_golden;\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL HStore Implementation Migration\nDESCRIPTION: SQL migration script that adds HStore support for tracking post views, including adding a new column with HStore type and appropriate comments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nCREATE EXTENSION IF NOT EXISTS hstore;\n\nALTER TABLE posts ADD COLUMN seen_count_hstore hstore\n  NOT NULL DEFAULT ''::hstore;\n\nCOMMENT ON COLUMN posts.seen_count_hstore\n  IS 'count of users that have seen the post, with hstore';\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Python Client with Conda\nDESCRIPTION: Installs the Supabase Python client library using Conda package manager from the conda-forge channel. This is for Python version 3.8 and above.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/python/installing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge supabase\n```\n\n----------------------------------------\n\nTITLE: Linking Remote Supabase Project in Bash\nDESCRIPTION: Bash command for linking a local project to a remote Supabase project. Sets the environment and connects to the specified project reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_ENV=production npx supabase@latest link --project-ref <your-project-ref>\n```\n\n----------------------------------------\n\nTITLE: AI Filter Response Interface\nDESCRIPTION: Defines the structure of the response body from the AI API endpoint. It returns a `FilterGroup` object representing the structured filters generated from the natural language query.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Response body\ninterface AIFilterResponse {\n  logicalOperator: 'AND' | 'OR'\n  conditions: (FilterCondition | FilterGroup)[]\n}\n```\n\n----------------------------------------\n\nTITLE: Database Operation Permissions Matrix\nDESCRIPTION: SQL operation permissions comparison between Primary and Read Replica databases, showing that Read Replicas only support SELECT operations while Primary databases support all CRUD operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-15-introducing-read-replicas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|              | `select` | `insert` | `update` | `delete` |\n| ------------ | -------- | -------- | -------- | -------- |\n| Primary      | ✅       | ✅       | ✅       | ✅       |\n| Read Replica | ✅       | -        | -        | -        |\n```\n\n----------------------------------------\n\nTITLE: Using Foreground Color Classes in JSX\nDESCRIPTION: Shows examples of using foreground color classes for text and background styling, including default, light, lighter, and muted variations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/tailwind-classes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"text-foreground\">/div>\n<div className=\"text-foreground-light\">/div>\n<div className=\"text-foreground-lighter\">/div>\n<div className=\"text-foreground-muted\">/div>\n<div className=\"bg-foreground-light\">/div>\n```\n\n----------------------------------------\n\nTITLE: Using Supabase CLI with NPX\nDESCRIPTION: Run Supabase CLI commands using NPX without installation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx supabase <command>\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Enum Values\nDESCRIPTION: Example of inserting data into a table with an enum column, specifying one of the valid enum values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into person\n  (name, current_mood)\nvalues\n  ('Alice', 'happy');\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Query and Supabase Integration in Next.js\nDESCRIPTION: Command to install the required npm packages for using React Query with Next.js and Supabase, including Supabase Cache Helpers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js @tanstack/react-query @supabase/ssr @supabase-cache-helpers/postgrest-react-query\n```\n\n----------------------------------------\n\nTITLE: Scheduling Periodic Database Function Call in Supabase\nDESCRIPTION: This SQL snippet schedules a cron job to call a database function named hello_world() every 5 minutes. It demonstrates how to use cron.schedule to execute custom database functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect cron.schedule('call-db-function', '*/5 * * * *', 'SELECT hello_world()');\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson Serializer Dependency in Groovy Build Script\nDESCRIPTION: Adds the Jackson serializer dependency for supabase-kt to a Kotlin project using Gradle with the Groovy DSL. This is required to use Jackson as the serialization library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_14\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.github.jan-tennert.supabase:serializer-jackson:VERSION'\n```\n\n----------------------------------------\n\nTITLE: Supabase Migration CLI Commands\nDESCRIPTION: CLI commands for managing database migration scripts, including listing, creating, repairing, and squashing migrations\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase migration\nManage database migration scripts\n\nUsage:\n  supabase migration [command]\n\nAvailable Commands:\n  list        List local and remote migrations\n  new         Create an empty migration script\n  repair      Repair the migration history table\n  squash      Squash migrations to a single file\n  up          Apply pending migrations to local database\n```\n\n----------------------------------------\n\nTITLE: Sign Out - Kotlin\nDESCRIPTION: This Kotlin snippet shows how to sign out a user using the Supabase client library. It calls the signOut method to remove the user's session and clear local storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling explain() in Postgres for Supabase\nDESCRIPTION: SQL commands to enable the explain() method in Supabase by setting the pgrst.db_plan_enabled role parameter to true and reloading the configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- enable explain\nalter role authenticator\nset pgrst.db_plan_enabled to 'true';\n\n-- reload the config\nnotify pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with Supabase Template\nDESCRIPTION: Terminal command to create a new Next.js application using the with-supabase template. This template comes pre-configured with cookie-based authentication, TypeScript, and Tailwind CSS.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Email Template for Password Reset - HTML\nDESCRIPTION: This HTML snippet is an email template for password reset instructions. It includes a link for users to reset their password securely.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/password-based-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2>Reset Password</h2>\n\n<p>Follow this link to reset the password for your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=recovery&next={{ .RedirectTo }}\"\n    >Reset Password</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Signing in with Email and Password using Supabase in Swift\nDESCRIPTION: This snippet illustrates how to sign in a user with their email and password using the Supabase Swift client. It uses the signIn(email:password:) method from the auth module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.signIn(\n  email: \"valid.email@supabase.io\",\n  password: \"example-password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing the Function with Known Error\nDESCRIPTION: SQL command to execute the 'some_func' function. This execution doesn't catch the invalid reference error because the loop doesn't execute if no rows are present in the table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect public.some_func();\n  some_func\n ───────────\n\n (1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Form in Svelte\nDESCRIPTION: Svelte component for rendering a login and signup form. Uses form actions for submitting login and signup requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<form method=\"POST\" action=\"?/login\">\n  <label>\n    Email\n    <input name=\"email\" type=\"email\" />\n  </label>\n  <label>\n    Password\n    <input name=\"password\" type=\"password\" />\n  </label>\n  <button>Login</button>\n  <button formaction=\"?/signup\">Sign up</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Table for pg_plan_filter Demo\nDESCRIPTION: Creates a sample table with a primary key and populates it with 10,000 records to demonstrate the pg_plan_filter functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table book(\n  id int primary key\n);\n-- CREATE TABLE\n\ninsert into book(id) select * from generate_series(1, 10000);\n-- INSERT 0 10000\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware in JavaScript\nDESCRIPTION: Setting up Next.js middleware to handle Supabase authentication session management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\n\nexport async function middleware(req) {\n  const res = NextResponse.next()\n\n  // Create a Supabase client configured to use cookies\n  const supabase = createMiddlewareClient({ req, res })\n\n  // Refresh session if expired - required for Server Components\n  await supabase.auth.getUser()\n\n  return res\n}\n\n// Ensure the middleware is only called for relevant paths.\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Vector Store Connection\nDESCRIPTION: Code to establish a connection to Supabase database using SQLAlchemy connection string and create a vector store client. Requires connection pooling for Google Colab compatibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/llamaindex.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n```\n\n----------------------------------------\n\nTITLE: Granting Access to pg_cron Schema in Postgres\nDESCRIPTION: These SQL commands grant usage and privileges on the cron schema to a specified database user, allowing them to schedule and manage cron jobs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ngrant usage on schema cron to {{DB user}};\ngrant all privileges on all tables in schema cron to {{DB user}};\n```\n\n----------------------------------------\n\nTITLE: Password Reset Email Template HTML Configuration\nDESCRIPTION: HTML template for password reset email, providing a dynamic link for password recovery with token and redirect handling\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/password-based-auth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2>Reset Password</h2>\n\n<p>Follow this link to reset the password for your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=recovery&next={{ .RedirectTo }}\"\n    >Reset Password</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Installing dat.gui for Animation Parameter Control\nDESCRIPTION: This command installs the dat.gui library which is used to create a visual interface for adjusting animation parameters in real-time.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dat.gui@0.7.9\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Size for Foreign Server in Postgres\nDESCRIPTION: SQL command to set the batch_size option for a foreign server, which determines the maximum number of rows inserted per cycle.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nalter server \"<foreign_server_name>\"\noptions (batch_size '1000');\n```\n\n----------------------------------------\n\nTITLE: Querying Overlapping Reservations Using Range Operator\nDESCRIPTION: This SQL query demonstrates how to use the && operator to find reservations that overlap with a specified time range.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect *\n\tfrom reservations\n\twhere duration && '[2024-07-04 16:00, 2024-07-04 19:00)';\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Realtime Events in Supabase with TypeScript\nDESCRIPTION: Code examples showing how to unsubscribe from realtime events in Supabase. The older version calls unsubscribe() directly on the listener, while the newer version uses the removeChannel() method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nuserListener.unsubscribe()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsupabase.removeChannel(userListener)\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Control\nDESCRIPTION: Standard robots.txt configuration that allows unrestricted access to all web crawlers. Uses the wildcard user-agent (*) with no disallowed paths, effectively permitting complete site crawling.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/sveltekit-user-management/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Layer to Charts in React/TSX\nDESCRIPTION: Demonstrates how to enhance chart accessibility by adding the accessibilityLayer prop to a LineChart component, which enables keyboard access and screen reader support.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<LineChart accessibilityLayer />\n```\n\n----------------------------------------\n\nTITLE: Increasing maintenance_work_mem for larger pgvector indexes\nDESCRIPTION: SQL command to increase the maintenance_work_mem parameter in PostgreSQL to 7168 MB, which is necessary when creating pgvector indexes with high values for the 'lists' parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-13-pgvector-performance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET maintenance_work_mem TO '7168 MB';\n```\n\n----------------------------------------\n\nTITLE: Declarative Partitioning Example in PostgreSQL\nDESCRIPTION: This snippet demonstrates the syntax for declarative partitioning in PostgreSQL, creating a partitioned table 'measurement' using the RANGE partitioning strategy on the 'logdate' column.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nCREATE TABLE measurement (\ncity_id int not null,\nlogdate date not null,\npeaktemp int,\nunitsales int\n) PARTITION BY RANGE (logdate);\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs necessary Python packages including vecs for PostgreSQL interaction, datasets for loading IMDB data, sentence_transformers for text embeddings, and utility libraries.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU vecs datasets sentence_transformers flupy tqdm\n```\n\n----------------------------------------\n\nTITLE: Adding Department Column - SQL\nDESCRIPTION: SQL migration to add a department column to the employees table\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter table if exists public.employees\nadd department text default 'Hooli';\n```\n\n----------------------------------------\n\nTITLE: Adjusting Sheet Component Size in React\nDESCRIPTION: Example of adjusting the size of the Sheet component using CSS classes in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sheet.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent className=\"w-[400px] sm:w-[540px]\">\n    <SheetHeader>\n      <SheetTitle>Are you absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account and remove your data\n        from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Session Mode Connection String Format\nDESCRIPTION: Example connection string format for connecting to Supabase PostgreSQL using the connection pooler in session mode on port 5432.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#example session mode string | uses port 5432\npostgres://postgres.obfwhevidiamwdwki:[YPASSWORD]@aws-0-ca-central-1.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Server Actions\nDESCRIPTION: Implementation of a login page component that uses the login and signup server actions for form submission.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// app/login/page.tsx\n\nimport { login, signup } from './actions';\n\nexport default function LoginPage() {\n  return (\n    <form>\n      <label htmlFor=\"email\">Email:</label>\n      <input id=\"email\" name=\"email\" type=\"email\" required />\n      <label htmlFor=\"password\">Password:</label>\n      <input id=\"password\" name=\"password\" type=\"password\" required />\n      <button formAction={login}>Log in</button>\n      <button formAction={signup}>Sign up</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter Login Screen with Google Sign-In\nDESCRIPTION: Creates a login screen with Google authentication using Supabase and Google Sign-In package. Handles auth state changes and token management for sign-in flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:myauthapp/main.dart';\nimport 'package:myauthapp/screens/profile_screen.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass LoginScreen extends StatefulWidget {\n  const LoginScreen({super.key});\n\n  @override\n  State<LoginScreen> createState() => _LoginScreenState();\n}\n\nclass _LoginScreenState extends State<LoginScreen> {\n  @override\n  void initState() {\n    _setupAuthListener();\n    super.initState();\n  }\n\n  void _setupAuthListener() {\n    supabase.auth.onAuthStateChange.listen((data) {\n      final event = data.event;\n      if (event == AuthChangeEvent.signedIn) {\n        Navigator.of(context).pushReplacement(\n          MaterialPageRoute(\n            builder: (context) => const ProfileScreen(),\n          ),\n        );\n      }\n    });\n  }\n\n  Future<AuthResponse> _googleSignIn() async {\n    const webClientId = 'my-web.apps.googleusercontent.com';\n    const iosClientId = 'my-ios.apps.googleusercontent.com';\n\n    final GoogleSignIn googleSignIn = GoogleSignIn(\n      clientId: iosClientId,\n      serverClientId: webClientId,\n    );\n    final googleUser = await googleSignIn.signIn();\n    final googleAuth = await googleUser!.authentication;\n    final accessToken = googleAuth.accessToken;\n    final idToken = googleAuth.idToken;\n\n    if (accessToken == null) {\n      throw 'No Access Token found.';\n    }\n    if (idToken == null) {\n      throw 'No ID Token found.';\n    }\n\n    return supabase.auth.signInWithIdToken(\n      provider: OAuthProvider.google,\n      idToken: idToken,\n      accessToken: accessToken,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Login'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: _googleSignIn,\n          child: const Text('Google login'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Countries and Cities Tables\nDESCRIPTION: This SQL creates two related tables: 'countries' and 'cities', with a foreign key relationship between them.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table countries (\n  \"id\" serial primary key,\n  \"name\" text\n);\n\ncreate table cities (\n  \"id\" serial primary key,\n  \"name\" text,\n  \"country_id\" int references \"countries\"\n);\n```\n\n----------------------------------------\n\nTITLE: Using custom access_token JWT with Supabase in TypeScript\nDESCRIPTION: Example of how to use a custom access_token JWT with Supabase in supabase-js v2. The new version sets the Authorization header in the createClient options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst supabase = createClient(\n  SUPABASE_URL,\n  SUPABASE_ANON_KEY,\n  {\n    global: {\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n      },\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Implementation\nDESCRIPTION: Basic example showing how to structure a breadcrumb navigation with multiple levels.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase SSR Client in SvelteKit\nDESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in SvelteKit, handling cookie management for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr';\n\nexport const load = async ({ fetch, cookies }) => {\n  const supabase = createServerClient(\n    import.meta.env.VITE_SUPABASE_URL,\n    import.meta.env.VITE_SUPABASE_ANON_KEY,\n    {\n      cookies: {\n        get: (key) => cookies.get(key),\n        set: (key, value, options) => cookies.set(key, value, options),\n        remove: (key, options) => cookies.delete(key, options),\n      },\n    }\n  );\n\n  const { data } = await supabase.from('countries').select();\n\n  return { countries: data };\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling pg_jsonschema Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable or disable the pg_jsonschema extension. It's recommended to create the extension in a separate schema to keep the public schema clean.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_jsonschema.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pg_jsonschema\" extension\ncreate extension pg_jsonschema with schema extensions;\n\n-- Disable the \"pg_jsonschema\" extension\ndrop extension if exists pg_jsonschema;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo App\nDESCRIPTION: Use the create-expo-app utility to set up a new blank Expo project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template blank\n```\n\n----------------------------------------\n\nTITLE: Using AssistantChatForm Component in React\nDESCRIPTION: Example implementation of the AssistantChatForm component with props for icon, value, loading state, disabled state, value change handler, and submit handler.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/assistant-chat.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<AssistantChatForm\n  icon={<Box strokeWidth={1.5} size={24} className=\"text-foreground-muted\" />}\n  value={value}\n  loading={loading}\n  disabled={loading}\n  onValueChange={(e) => setValueState(e.target.value)}\n  onSubmit={async (event) => {\n    event.preventDefault()\n    handleSubmit(event)\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Supabase Flutter Queries\nDESCRIPTION: Shows the new error handling approach using try-catch blocks instead of returning error objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nfinal response = await Supabase.instance.from('messages').select().execute();\nfinal data = response.data;\nfinal error = response.error;\n\n// After\ntry {\n  final data = await Supabase.instance.from('messages').select();\n} catch(error) {\n  // Handle error here\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Player with JSX\nDESCRIPTION: JSX code for embedding a video player that demonstrates the API documentation interface, including source configuration and playback controls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/auto-generated-docs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<video width=\"99%\" muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/api/api-docs.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies\nDESCRIPTION: Python code for importing required libraries and setting up database connection\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom PIL import Image\nfrom sentence_transformers import SentenceTransformer\nimport vecs\nfrom matplotlib import pyplot as plt\nfrom matplotlib import image as mpimg\n\nDB_CONNECTION = \"postgresql://postgres:postgres@localhost:54322/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Unsupported SQL Operations in Supabase\nDESCRIPTION: List of SQL commands that are not supported in Supabase due to superuser privilege restrictions. These operations typically require superuser access and cannot be executed on Supabase instances.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles-superuser.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SUBSCRIPTION\nCREATE EVENT TRIGGER\nCOPY ... FROM PROGRAM\nALTER USER ... WITH SUPERUSER\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase and React app\nDESCRIPTION: Commands to start the Supabase services locally and run the React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start  # Start Supabase\nnpm start       # Start the React app\n```\n\n----------------------------------------\n\nTITLE: Signing Out in Kotlin using Supabase\nDESCRIPTION: This Kotlin snippet describes the process of signing out from an application using Supabase by invoking the signOut() function. It requires a configured Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Label Component in React/TypeScript\nDESCRIPTION: This example demonstrates how to use the Label_Shadcn_ component to create a label for an email input field. The htmlFor attribute is used to associate the label with a form control.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/label.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Label_Shadcn_ htmlFor=\"email\">Your email address</Label_Shadcn_>\n```\n\n----------------------------------------\n\nTITLE: Managing Advanced Schema Dependencies in SQL\nDESCRIPTION: Demonstrates how to manage tables, views, and functions in a single schema file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"employees\" (\n  \"id\" integer not null,\n  \"name\" text,\n  \"age\" smallint not null\n);\n\ncreate view \"profiles\" as\n  select id, name from \"employees\";\n\ncreate function \"get_age\"(employee_id integer) RETURNS smallint\n  LANGUAGE \"sql\"\nAS $$\n  select age\n  from employees\n  where id = employee_id;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Changing Log Severity Level in Postgres\nDESCRIPTION: SQL commands to change the log_min_messages setting for the postgres role and view the new setting. This affects the severity threshold for logging messages.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nalter role postgres set log_min_messages = '<NEW VALUE>';\n\n-- view new setting\nshow log_min_messages; -- default WARNING\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Locally with CLI\nDESCRIPTION: Command to start Supabase locally using the Supabase CLI, which sets up the necessary environment for the ChatGPT Retrieval Plugin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document to Trigger Automatic Embedding Generation in SQL\nDESCRIPTION: This SQL example shows how to insert a new document into the documents table, which will automatically trigger the embedding generation process. The embedding will be generated asynchronously.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ninsert into documents (title, content)\nvalues\n  ('Understanding Vector Databases', 'Vector databases are specialized...');\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Auth with AWS Cognito (TOML)\nDESCRIPTION: This TOML configuration snippet describes enabling AWS Cognito as a third-party authentication provider in a Supabase project. The configuration is added to the 'supabase/config.toml' file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[auth.third_party.aws_cognito]\nenabled = true\nuser_pool_id = \"<id>\"\nuser_pool_region = \"<region>\"\n```\n\n----------------------------------------\n\nTITLE: Client-side User Authentication Check in SvelteKit\nDESCRIPTION: Svelte component implementation for checking user authentication status and displaying conditional content based on login state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_29\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { session } from '$app/stores'\n</script>\n\n{#if !$session.user}\n<h1>I am not logged in</h1>\n{:else}\n<h1>Welcome {$session.user.email}</h1>\n<p>I am logged in!</p>\n{/if}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { page } from '$app/stores'\n</script>\n\n{#if !$page.data.session.user}\n<h1>I am not logged in</h1>\n{:else}\n<h1>Welcome {$page.data.session.user.email}</h1>\n<p>I am logged in!</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Python Random ID Generation (Unsafe)\nDESCRIPTION: Example of generating random IDs using Python's random module (not recommended for production)\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom random import randrange\nfrom models import User\nMAX_RANDOM_USER_ID = 1_000_000_000\ndef create_user():\n    \"\"\"\n    Add new user to the database\n    \"\"\"\n    user_id = randrange(1, MAX_RANDOM_USER_ID)\n    user = User(id=user_id, email=\"new@example.com\", name=\"new user\")\n    db.save(user)\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. You can choose npm, yarn, pnpm, or bun depending on your preference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Querying Users Table in Supabase SQL Editor\nDESCRIPTION: SQL query to retrieve all users from the Supabase authentication schema. This query checks the current users registered in your Supabase project's auth system.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from auth.users;\n```\n\n----------------------------------------\n\nTITLE: Initializing a Svelte App with Vite\nDESCRIPTION: Commands to create a new Svelte TypeScript project using Vite and install required dependencies, including the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest supabase-svelte -- --template svelte-ts\ncd supabase-svelte\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Backing Up Database with Supabase CLI - Bash\nDESCRIPTION: This snippet outlines the commands used to backup a Supabase database using the Supabase CLI. It requires the Supabase CLI to be installed and a valid connection string to the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db dump --db-url [CONNECTION_STRING] -f roles.sql --role-only\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db dump --db-url [CONNECTION_STRING] -f schema.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db dump --db-url [CONNECTION_STRING] -f data.sql --use-copy --data-only\n```\n\n----------------------------------------\n\nTITLE: Signing Out - Flutter\nDESCRIPTION: This snippet demonstrates the signing out process of a user from a Flutter application using Supabase. It employs the `signOut` method to clear the authentication session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\\n  await supabase.auth.signOut();\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Postgres Configuration Overrides\nDESCRIPTION: This snippet illustrates how to delete specific Postgres configuration overrides using the Supabase CLI. It shows the command structure for deleting multiple configuration parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --experimental \\\n--project-ref <project-ref> \\\npostgres-config delete --config shared_buffers,work_mem\n```\n\n----------------------------------------\n\nTITLE: Basic RLS Policy for Realtime Topic Access\nDESCRIPTION: SQL policy that allows authenticated users to read messages on a specific topic using the realtime.topic() helper function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"authenticated can read all messages on topic\"\non \"realtime\".\"messages\"\nfor select\nto authenticated\nusing (\n  (select realtime.topic()) = 'room-1'\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Permission to Android Manifest\nDESCRIPTION: This XML snippet adds the INTERNET permission to the Android manifest file, which is required for the app to access the internet in production.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <!-- Required to fetch data from the internet. -->\n  <uses-permission android:name=\"android.permission.INTERNET\" />\n  <!-- ... -->\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Python\nDESCRIPTION: Command to serve the index.html file locally using Python's built-in HTTP server for testing the Supabase Storage and Uppy integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/storage/resumable-upload-uppy/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Bounding Box Search\nDESCRIPTION: Sample JSON response showing the structure of data returned by the PostGIS bounding box search function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 2,\n    \"name\": \"Supa Pizza\",\n    \"lat\": 40.807475,\n    \"long\": -73.94581\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using the useSidebar Hook for Sidebar Control\nDESCRIPTION: Shows how to use the useSidebar hook to programmatically control the sidebar state and access properties like open state and mobile detection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSidebar } from '@/components/ui/sidebar'\n\nexport function AppSidebar() {\n  const { state, open, setOpen, openMobile, setOpenMobile, isMobile, toggleSidebar } = useSidebar()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions for Foreign Server in Postgres\nDESCRIPTION: SQL command to set the extensions option for a foreign server, listing shared extensions to ensure proper function and operator references.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nalter server \"<foreign_server_name>\"\noptions (extensions 'vector, postgis');\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client\nDESCRIPTION: Setup and initialize the Supabase client with project URL and API key across different programming languages\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nconst SUPABASE_URL = 'https://<project>.supabase.co'\nconst SUPABASE_KEY = '<your-anon-key>'\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_KEY)\n```\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nvoid main() async {\n  Supabase.initialize(\n    url: 'https://<project>.supabase.co',\n    anonKey: '<your-anon-key>',\n  );\n  runApp(MyApp());\n}\n\nfinal supabase = Supabase.instance.client;\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport Supabase\n\nlet SUPABASE_URL = \"https://<project>.supabase.co\"\nlet SUPABASE_KEY = \"<your-anon-key>\"\n\nlet supabase = SupabaseClient(supabaseURL: URL(string: SUPABASE_URL)!, supabaseKey: SUPABASE_KEY)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabaseUrl = \"https://<project>.supabase.co\"\nval supabaseKey = \"<your-anon-key>\"\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    install(Realtime)\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom supabase import create_client\n\nURL = \"https://<project>.supabase.co\"\nKEY = \"<your-anon-key>\"\nsupabase = create_client(URL, KEY)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Requests by Region in Supabase Edge Logs (SQL)\nDESCRIPTION: This query counts requests by region and path for the Database API. It groups results by region and path, ordering by the count of requests per region.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  path,\n  region,\n  count(region) as region_count\nfrom\n  edge_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(request) as request\n  cross join unnest(cf) as cf\nwhere\n  -- only look at DB API\n  regexp_contains(path, '^/rest/v1/')\ngroup by region, path\norder by requester_region_count;\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies and configuring database connection\nDESCRIPTION: Python code for importing required modules and setting up the database connection string for Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport boto3\nimport vecs\nimport json\nimport base64\nfrom matplotlib import pyplot as plt\nfrom matplotlib import image as mpimg\nfrom typing import Optional\n\nDB_CONNECTION = \"postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Cursor Model in Dart\nDESCRIPTION: Class representing user cursor positions with real-time synchronization capabilities and color assignment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass UserCursor extends SyncedObject {\n  static String type = 'cursor';\n\n  final Offset position;\n  final Color color;\n\n  UserCursor({\n    required super.id,\n    required this.position,\n  }) : color = RandomColor.getRandomFromId(id);\n\n  UserCursor.fromJson(Map<String, dynamic> json)\n      : position = Offset(json['position']['x'], json['position']['y']),\n        color = RandomColor.getRandomFromId(json['id']),\n        super(id: json['id']);\n\n  @override\n  Map<String, dynamic> toJson() {\n    return {\n      'object_type': type,\n      'id': id,\n      'position': {\n        'x': position.dx,\n        'y': position.dy,\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In with Expo and Supabase in React Native\nDESCRIPTION: This snippet demonstrates how to implement Apple sign-in using Expo's AppleAuthentication module and Supabase Auth in a React Native application. It handles the sign-in process, token retrieval, and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbuttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\nbuttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\ncornerRadius={5}\nstyle={{ width: 200, height: 64 }}\nonPress={async () => {\n  try {\n    const credential = await AppleAuthentication.signInAsync({\n      requestedScopes: [\n        AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n        AppleAuthentication.AppleAuthenticationScope.EMAIL,\n      ],\n    })\n    // Sign in via Supabase Auth.\n    if (credential.identityToken) {\n      const {\n        error,\n        data: { user },\n      } = await supabase.auth.signInWithIdToken({\n        provider: 'apple',\n        token: credential.identityToken,\n      })\n      console.log(JSON.stringify({ error, user }, null, 2))\n      if (!error) {\n        // User is signed in.\n      }\n    } else {\n      throw new Error('No identityToken.')\n    }\n  } catch (e) {\n    if (e.code === 'ERR_REQUEST_CANCELED') {\n      // handle that the user canceled the sign-in flow\n    } else {\n      // handle other errors\n    }\n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Creating Cal.com Foreign Server with API Authentication\nDESCRIPTION: SQL command to create a foreign server for Cal.com that includes the necessary options like package URL, version, checksum, and API key for authentication. This establishes the connection to Cal.com's API.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate server cal_server\n  foreign data wrapper wasm_wrapper\n  options (\n    fdw_package_url 'https://github.com/supabase/wrappers/releases/download/wasm_cal_fdw_v0.1.0/cal_fdw.wasm',\n    fdw_package_name 'supabase:cal-fdw',\n    fdw_package_version '0.1.0',\n    fdw_package_checksum '4afe4fac8c51f2caa1de8483b3817d2cec3a14cd8a65a3942c8b4ff6c430f08a',\n    api_key '<your Cal.com API key>'\n  );\n```\n\n----------------------------------------\n\nTITLE: Linking Supabase Project\nDESCRIPTION: Command to link the Supabase CLI with a specific project using the project ID\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsupabase link --project-ref <project-id>\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Data Structure for Table Example\nDESCRIPTION: TypeScript type definition and sample data for a payment record to be used in the data table example.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype Payment = {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const payments: Payment[] = [\n  {\n    id: '728ed52f',\n    amount: 100,\n    status: 'pending',\n    email: 'm@example.com',\n  },\n  {\n    id: '489e1d42',\n    amount: 125,\n    status: 'processing',\n    email: 'example@gmail.com',\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Legacy Import Map Configuration\nDESCRIPTION: Example import_map.json configuration file for managing dependencies (legacy approach).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"lodash\": \"https://cdn.skypack.dev/lodash\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Redirect URLs in TOML\nDESCRIPTION: This snippet demonstrates how to configure additional redirect URLs for the Auth service in Supabase, including support for Vercel preview URLs and local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\nadditional_redirect_urls = [\n  \"https://*-supabase.vercel.app/*/*\",\n  \"https://supabase.com/*/*\",\n  \"http://localhost:3000/*/*\",\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Current PostgreSQL Log Level in SQL\nDESCRIPTION: This SQL command retrieves the current log_min_messages setting, which determines the minimum severity of messages that will be logged.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW log_min_messages;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sidebar Header with Dropdown Menu\nDESCRIPTION: Shows how to implement a sticky header in the sidebar with a dropdown menu, which can be used for workspace selection or other contextual options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarHeader>\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton>\n              Select Workspace\n              <ChevronDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-[--radix-popper-anchor-width]\">\n            <DropdownMenuItem>\n              <span>Acme Inc</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              <span>Acme Corp.</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  </SidebarHeader>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: New Data Query in Supabase.js 1.0\nDESCRIPTION: Demonstrates the new way of querying data using the data property and simplified select syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-30-improved-dx.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = supabase.from('todos').select()\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in SQL Queries\nDESCRIPTION: Demonstrates proper alias usage in SQL queries with the explicit 'as' keyword. Shows how to create meaningful column aliases that reflect the operation being performed.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect count(*) as total_employees\nfrom employees\nwhere end_date is null;\n```\n\n----------------------------------------\n\nTITLE: Storing Messages in Realtime Chat using Next.js\nDESCRIPTION: Illustrates the integration of a message storage mechanism, triggering a store action on message event. Utilizes '@/lib/store-messages' to handle message storage operations asynchronously.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\nimport { useMessagesQuery } from '@/hooks/use-messages-query'\nimport { storeMessages } from '@/lib/store-messages'\n\nexport default function ChatPage() {\n  const { data: messages } = useMessagesQuery()\n  const handleMessage = (messages: ChatMessage[]) => {\n    // Store messages in your database\n    await storeMessages(messages)\n  }\n\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" onMessage={handleMessage} />\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Node Path to Windows System PATH\nDESCRIPTION: Shell command to add the Node installation directory to the Windows system PATH. This ensures that node and npx are accessible for running the Supabase MCP server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsetx PATH \"%PATH%;<path-to-dir>\"\n```\n\n----------------------------------------\n\nTITLE: Granting Role Ownership to Postgres in SQL\nDESCRIPTION: This SQL command grants ownership of the specified role to the 'postgres' superuser, which is a necessary step before deleting the role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-delete-a-role-in-postgres-8-AvxY.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGRANT <role> TO \"postgres\";\n```\n\n----------------------------------------\n\nTITLE: Initializing a SolidJS App with Degit\nDESCRIPTION: Command to scaffold a new SolidJS TypeScript application using degit and navigate to the project directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit solidjs/templates/ts supabase-solid\ncd supabase-solid\n```\n\n----------------------------------------\n\nTITLE: Implementing SwiftUI View with Supabase Query\nDESCRIPTION: Creates a SwiftUI view that fetches instrument data from Supabase and displays it in a list. Includes loading state handling and error management using Swift's async/await pattern.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ios-swiftui.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n\n  @State var instruments: [Instrument] = []\n\n  var body: some View {\n    List(instruments) { instrument in\n      Text(instrument.name)\n    }\n    .overlay {\n      if instruments.isEmpty {\n        ProgressView()\n      }\n    }\n    .task {\n      do {\n        instruments = try await supabase.from(\"instruments\").select().execute().value\n      } catch {\n        dump(error)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Helper Functions for Image Encoding and Embedding Generation\nDESCRIPTION: Python functions to read and encode images as base64 strings, construct API request bodies, and generate embeddings using Amazon Titan multimodal model.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef readFileAsBase64(file_path):\n    \"\"\"Encode image as base64 string.\"\"\"\n    try:\n        with open(file_path, \"rb\") as image_file:\n            input_image = base64.b64encode(image_file.read()).decode(\"utf8\")\n        return input_image\n    except:\n        print(\"bad file name\")\n        sys.exit(0)\n\n\ndef construct_bedrock_image_body(base64_string):\n    \"\"\"Construct the request body.\n\n    https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-titan-embed-mm.html\n    \"\"\"\n    return json.dumps(\n        {\n            \"inputImage\": base64_string,\n            \"embeddingConfig\": {\"outputEmbeddingLength\": 1024},\n        }\n    )\n\n\ndef get_embedding_from_titan_multimodal(body):\n    \"\"\"Invoke the Amazon Titan Model via API request.\"\"\"\n    response = bedrock_client.invoke_model(\n        body=body,\n        modelId=\"amazon.titan-embed-image-v1\",\n        accept=\"application/json\",\n        contentType=\"application/json\",\n    )\n\n    response_body = json.loads(response.get(\"body\").read())\n    print(response_body)\n    return response_body[\"embedding\"]\n\n\ndef encode_image(file_path):\n    \"\"\"Generate embedding for the image at file_path.\"\"\"\n    base64_string = readFileAsBase64(file_path)\n    body = construct_bedrock_image_body(base64_string)\n    emb = get_embedding_from_titan_multimodal(body)\n    return emb\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi Serializer Dependency in Groovy Build Script\nDESCRIPTION: Adds the Moshi serializer dependency for supabase-kt to a Kotlin project using Gradle with the Groovy DSL. This is required to use Moshi as the serialization library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.github.jan-tennert.supabase:serializer-moshi:VERSION'\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Form Dependencies\nDESCRIPTION: NPM command to manually install all the required dependencies for the form components, including Radix UI components, React Hook Form, and Zod.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod\n```\n\n----------------------------------------\n\nTITLE: Client-side Data Fetching with Row Level Security in SvelteKit\nDESCRIPTION: This snippet shows how to implement client-side data fetching with Supabase Row Level Security (RLS) in a SvelteKit component. It uses the supabaseClient from PageData and only runs the query once the session is defined client-side.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  export let data\n\n  let loadedData = []\n  async function loadData() {\n    const { data: result } = await data.supabase.from('test').select('*').limit(20)\n    loadedData = result\n  }\n\n  $: if (data.session) {\n    loadData()\n  }\n</script>\n\n{#if data.session}\n<p>client-side data fetching with RLS</p>\n<pre>{JSON.stringify(loadedData, null, 2)}</pre>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Handling PostgREST Errors: Updated Error Codes (Dart)\nDESCRIPTION: Illustrates the change in the `PostgrestException`'s `code` property from containing the HTTP status code in v1 to containing the PostgREST error code in v2. The PostgREST error code provides more granular information for debugging purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  await supabase.from('countries').select();\n} on PostgrestException catch (error) {\n  error.code; // Contains http status code\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  await supabase.from('countries').select();\n} on PostgrestException catch (error) {\n  error.code; // Contains PostgREST error code\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Component with Refine and Supabase in TypeScript\nDESCRIPTION: This snippet creates a React component for user authentication using Refine's useLogin hook. It handles email-based login with a magic link.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react'\nimport { useLogin } from '@refinedev/core'\n\nexport default function Auth() {\n  const [email, setEmail] = useState('')\n  const { isLoading, mutate: login } = useLogin()\n\n  const handleLogin = async (event: { preventDefault: () => void }) => {\n    event.preventDefault()\n    login({ email })\n  }\n\n  return (\n    <div className=\"row flex flex-center container\">\n      <div className=\"col-6 form-widget\">\n        <h1 className=\"header\">Supabase + refine</h1>\n        <p className=\"description\">Sign in via magic link with your email below</p>\n        <form className=\"form-widget\" onSubmit={handleLogin}>\n          <div>\n            <input\n              className=\"inputField\"\n              type=\"email\"\n              placeholder=\"Your email\"\n              value={email}\n              required={true}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div>\n            <button className={'button block'} disabled={isLoading}>\n              {isLoading ? <span>Loading</span> : <span>Send magic link</span>}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Table Component in React JSX\nDESCRIPTION: Example of how to use the Table component and its sub-components to create a table structure in React JSX.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Table>\n  <TableCaption>A list of your recent invoices.</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className=\"w-[100px]\">Invoice</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Method</TableHead>\n      <TableHead className=\"text-right\">Amount</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell className=\"font-medium\">INV001</TableCell>\n      <TableCell>Paid</TableCell>\n      <TableCell>Credit Card</TableCell>\n      <TableCell className=\"text-right\">$250.00</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase project with yarn\nDESCRIPTION: This command initializes a Supabase project in the current repository using yarn. It creates the required configuration files for local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn supabase init\n```\n\n----------------------------------------\n\nTITLE: Next.js Middleware for Supabase Auth\nDESCRIPTION: Implementation of Next.js middleware function for handling Supabase Auth token refreshing and authentication state, including path protection and proper request/response handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function middleware(request: NextRequest) {\n    let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/login'\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Edge Functions Locally with Bash Script\nDESCRIPTION: Command to start the Edge Runtime locally by specifying the functions directory and port. This allows you to test Supabase Edge Functions on your local machine.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-functions/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./run.sh start --main-service /path/to/supabase/functions -p 9000\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Channel Access Example\nDESCRIPTION: TypeScript example showing the behavior when an unauthorized user attempts to access a private channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// With anon user\nsupabase.realtime\n  .channel('locked', { config: { private: true } })\n  .subscribe((status: string, err: any) => {\n    if (status === 'SUBSCRIBED') {\n      console.log('Connected!')\n    } else {\n      console.error(err.message)\n    }\n  })\n\n// Outputs the following code:\n// \"You do not have permissions to read from this Topic\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Migration Guides Links in JSX\nDESCRIPTION: This JSX snippet iterates through an array of product objects and generates a Link component for each, facilitating migration from different platforms to Supabase. Each link points to a specific migration guide based on the `href` property. An IconPanel component is used to display information and icons for each product.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/resources.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\n    [\n      {\n        title: 'Auth0',\n        icon: '/docs/img/icons/auth0-icon',\n        href: '/guides/resources/migrating-to-supabase/auth0',\n        description: 'Move your auth users from Auth0 to a Supabase project.',\n        hasLightIcon: true,\n      },\n      {\n        title: 'Firebase Auth',\n        icon: '/docs/img/icons/firebase-icon',\n        href: '/guides/resources/migrating-to-supabase/firebase-auth',\n        description: 'Move your auth users from a Firebase project to a Supabase project.',\n      },\n      {\n        title: 'Firestore Data',\n        icon: '/docs/img/icons/firebase-icon',\n        href: '/guides/resources/migrating-to-supabase/firestore-data',\n        description: 'Migrate the contents of a Firestore collection to a single PostgreSQL table.',\n      },\n      {\n        title: 'Firebase Storage',\n        icon: '/docs/img/icons/firebase-icon',\n        href: '/guides/resources/migrating-to-supabase/firebase-storage',\n        description: 'Convert your Firebase Storage files to Supabase Storage.'\n      },\n      {\n        title: 'Heroku',\n        icon: '/docs/img/icons/heroku-icon',\n        href: '/guides/resources/migrating-to-supabase/heroku',\n        description: 'Migrate your Heroku Postgres database to Supabase.'\n      },\n      {\n        title: 'Render',\n        icon: '/docs/img/icons/render-icon',\n        href: '/guides/resources/migrating-to-supabase/render',\n        description: 'Migrate your Render Postgres database to Supabase.'\n      },\n      {\n        title: 'Amazon RDS',\n        icon: '/docs/img/icons/aws-rds-icon',\n        href: '/guides/resources/migrating-to-supabase/amazon-rds',\n        description: 'Migrate your Amazon RDS database to Supabase.'\n      },\n      {\n        title: 'Postgres',\n        icon: '/docs/img/icons/postgres-icon',\n        href: '/guides/resources/migrating-to-supabase/postgres',\n        description: 'Migrate your Postgres database to Supabase.'\n      },\n      {\n        title: 'MySQL',\n        icon: '/docs/img/icons/mysql-icon',\n        href: '/guides/resources/migrating-to-supabase/mysql',\n        description: 'Migrate your MySQL database to Supabase.'\n      },\n      {\n        title: 'Microsoft SQL Server',\n        icon: '/docs/img/icons/mssql-icon',\n        href: '/guides/resources/migrating-to-supabase/mssql',\n        description: 'Migrate your Microsoft SQL Server database to Supabase.'\n      }\n    ]\n.map((product) => {\n      return (\n        <Link\n          href={`${product.href}`}\n          key={product.title}\n          className={product.span ?? 'col-span-6 md:col-span-3'}\n          passHref\n        >\n          <IconPanel {...product} background={true} showIconBg={true} showLink={true}>\n            {product.description}\n          </IconPanel>\n        </Link>\n      )\n\n})}\n```\n\n----------------------------------------\n\nTITLE: Generating Account Component with RedwoodJS CLI\nDESCRIPTION: Shows how to generate a new Account component using the RedwoodJS generator CLI. The command creates the component file along with test and story files.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw g component account\n\n  ✔ Generating component files...\n    ✔ Successfully wrote file `./web/src/components/Account/Account.test.js`\n    ✔ Successfully wrote file `./web/src/components/Account/Account.stories.js`\n    ✔ Successfully wrote file `./web/src/components/Account/Account.js`\n```\n\n----------------------------------------\n\nTITLE: Importing Separator Component\nDESCRIPTION: Code snippet showing how to import the Separator component from your UI components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/separator.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Separator } from '@/components/ui/separator'\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST with Environment Variables in Docker Compose\nDESCRIPTION: Example of how to configure the PostgREST service in docker-compose.yml using environment variables with secrets loaded from an external .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nservices:\n  rest:\n    image: postgrest/postgrest\n    environment:\n      PGRST_JWT_SECRET: ${JWT_SECRET}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Interface in TypeScript\nDESCRIPTION: New TypeScript interface for the Session object in Supabase.js v2, which now guarantees the presence of access_token, refresh_token, and user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ninterface Session {\n  provider_token?: string | null\n  access_token: string\n  expires_in?: number\n  expires_at?: number\n  refresh_token: string\n  token_type: string\n  user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Backend in Docker Compose\nDESCRIPTION: Configuration for using S3 as the storage backend for Supabase Storage instead of the default local file storage, specifying bucket name and region.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  environment: STORAGE_BACKEND=s3\n    GLOBAL_S3_BUCKET=name-of-your-s3-bucket\n    REGION=region-of-your-s3-bucket\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase stack with pnpm\nDESCRIPTION: This command starts the local Supabase stack using pnpm. It launches all necessary services for local development, including the database, auth, and storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npnpm supabase start\n```\n\n----------------------------------------\n\nTITLE: Creating Signed URL with Image Transformation (JavaScript)\nDESCRIPTION: Demonstrates how to create a signed URL for an image with specific width and height transformations using Supabase storage\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-image-transformations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.storage.from('bucket').createSignedUrl('image-1.jpg', 60000, {\n  transform: {\n    width: 200,\n    height: 200,\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.storage.from('bucket').createSignedUrl('image-2.jpg', 60000, {\n  transform: {\n    width: 400,\n    height: 300,\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.storage.from('bucket').createSignedUrl('image-2.jpg', 60000, {\n  transform: {\n    width: 600,\n    height: 250,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Equality Search Using Swift Supabase Client\nDESCRIPTION: Swift implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await supabase.from(\"books\")\n  .select()\n  .eq(\"title\", value: \"Harry\")\n  .execute()\n```\n\n----------------------------------------\n\nTITLE: Viewing Role Configuration in Supabase Postgres\nDESCRIPTION: This SQL query retrieves the role name and configuration for the 'postgres' role, useful for verifying changes to role-specific settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  rolname,\n  rolconfig\nfrom pg_roles\nwhere rolname = 'postgres';\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Component in React JSX\nDESCRIPTION: This example demonstrates how to use the Avatar component in a React application, including an image source and a fallback.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/avatar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar>\n  <AvatarImage src=\"https://github.com/mildtomato.png\" />\n  <AvatarFallback>CN</AvatarFallback>\n</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling uuid-ossp Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and disable the uuid-ossp extension in PostgreSQL. The extension is created within a separate schema to keep the public schema clean.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/uuid-ossp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"uuid-ossp\" extension\ncreate extension \"uuid-ossp\" with schema extensions;\n\n-- Example: disable the \"uuid-ossp\" extension\ndrop extension if exists \"uuid-ossp\";\n```\n\n----------------------------------------\n\nTITLE: Running Individual Site Development Servers\nDESCRIPTION: Command for running a specific site in the Supabase monorepo by using its scope name. This example shows how to run only the main website.\nSOURCE: https://github.com/supabase/supabase/blob/master/DEVELOPERS.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev:www\n```\n\n----------------------------------------\n\nTITLE: JavaScript Channel Subscription with Private Config\nDESCRIPTION: JavaScript implementation for subscribing to a private realtime channel with broadcast event handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = supabase.channel('room-1', {\n  config: { private: true },\n})\n\nchannel\n  .on('broadcast', { event: 'test' }, (payload) => console.log(payload))\n  .subscribe((status, err) => {\n    if (status === 'SUBSCRIBED') {\n      console.log('Connected!')\n    } else {\n      console.error(err)\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Simplified Restrictive RLS Policy Using Custom Function in SQL\nDESCRIPTION: Creates a simplified restrictive Row-Level Security policy using the custom function for JWT validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict access to correct Supabase and Firebase projects\"\n  on table_name\n  as restrictive\n  to authenticated\n  using ((select public.is_supabase_or_firebase_project_jwt()) is true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Logging in PGAudit\nDESCRIPTION: SQL commands to configure and check PGAudit logging settings within a database session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- returns 'none'\nshow pgaudit.log;\n\n-- log CREATE, ALTER, and DROP events\nset pgaudit.log = 'ddl';\n\n-- log all CREATE, ALTER, DROP, and SELECT events\nset pgaudit.log = 'read, ddl';\n\n-- log nothing\nset pgaudit.log = 'none';\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of RealtimeChat Component in React\nDESCRIPTION: Demonstrates how to import and use the RealtimeChat component with basic props for room name and username.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-chat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RealtimeChat } from '@/components/realtime-chat'\n\nexport default function ChatPage() {\n  return <RealtimeChat roomName=\"my-chat-room\" username=\"john_doe\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions with Spread Embedded Resources in cURL\nDESCRIPTION: This snippet demonstrates using aggregate functions with spread embedded resources to calculate average box office earnings grouped by director's country using cURL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://postgrest/movies?select=avg_earnings:box_office_earnings.avg(),...directors(country)'\n```\n\n----------------------------------------\n\nTITLE: Presence Diff Update Format\nDESCRIPTION: Message format for presence differential updates showing clients joining and leaving.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"presence_diff\",\n   \"topic\": string,\n   \"payload\": {\n      \"joins\": {metas: Array<{phx_ref: string, name: string, t: float}>},\n      \"leaves\": {metas: Array<{phx_ref: string, name: string, t: float}>}\n   },\n   \"ref\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RedwoodJS App with TypeScript\nDESCRIPTION: Command to create a new RedwoodJS application with TypeScript support using the Yarn package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create redwood-app my-app --ts\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL B-tree Index Size Error Message\nDESCRIPTION: Example of the error message when B-tree index row size exceeds the maximum limit of 2704 bytes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-index-row-size-exceeds-btree-version-4-maximum-for-index-LMmoeU.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nindex row size exceeds btree version 4 maximum 2704 for index \"idx_name\"\n```\n\n----------------------------------------\n\nTITLE: Windows PATH Configuration Commands\nDESCRIPTION: Shell commands for configuring Node.js path in Windows environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_vscode_config.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm config get prefix\n```\n\nLANGUAGE: shell\nCODE:\n```\nsetx PATH \"%PATH%;<path-to-dir>\"\n```\n\n----------------------------------------\n\nTITLE: Responsive Carousel Item Sizes\nDESCRIPTION: Example of setting responsive sizes for carousel items using utility classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// 50% on small screens and 33% on larger screens.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: System Message Format\nDESCRIPTION: System message format for informing clients about Postgres subscription status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"system\",\n   \"topic\": string,\n   \"payload\":{\n      \"channel\": string,\n      \"extension\": \"postgres_changes\",\n      \"message\": \"Subscribed to PostgreSQL\" | \"Subscribing to PostgreSQL failed\",\n      \"status\": \"ok\" | \"error\"\n   },\n   \"ref\": null,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Abstract Artwork with MidJourney Prompt\nDESCRIPTION: This MidJourney prompt is used to generate abstract artwork for Launch Week tickets. It creates layers of waves with light refraction and subtle highlights.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/imagine abstract 3 layers of waves on a dark background with light refracting through it, very cool subtle minimal dark illustration, purple light leak with subtle highlights\n```\n\n----------------------------------------\n\nTITLE: Updating password reset for email in TypeScript\nDESCRIPTION: Example of how to update the password reset method for email in supabase-js v2. The new version uses resetPasswordForEmail directly on the auth object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .auth\n  .resetPasswordForEmail(email)\n```\n\n----------------------------------------\n\nTITLE: Markdown Supabase Badge (Light)\nDESCRIPTION: Markdown implementation of the Supabase light-themed badge with a hyperlink to the Supabase website\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.sv.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Made with Supabase](https://supabase.com/badge-made-with-supabase.svg)](https://supabase.com)\n```\n\n----------------------------------------\n\nTITLE: Creating a Posts Table in PostgreSQL for Supabase\nDESCRIPTION: SQL to create a posts table with id, name, and description fields for demonstrating Row Level Security with anonymous users.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table public.posts (\n  id serial primary key,\n  name text not null,\n  description text\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Holiday Hackdays Image in Markdown\nDESCRIPTION: This code snippet demonstrates how to include an image for the Holiday Hackdays event in a Markdown document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-launch-week-three-friday-five-more-things.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![holiday-hackdays-og.png](/images/blog/launch-week-three/five-more-things/holiday-hackdays-og.png)\n```\n\n----------------------------------------\n\nTITLE: Initializing refine app with Supabase preset using npm\nDESCRIPTION: Command to create a new refine application with Supabase integration using the refine-supabase preset.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create refine-app@latest -- --preset refine-supabase\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Sequence Synchronization\nDESCRIPTION: SQL commands to check if a table's sequence is out of sync by comparing the maximum value in the column against the next sequence value.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inserting-into-sequenceserial-table-causes-duplicate-key-violates-unique-constraint-error-pi6DnC.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MAX(<sequenced_column>) FROM <table_name>;\n\nSELECT nextval(pg_get_serial_sequence('<public.table_name>', '<sequenced_column_name>'));\n```\n\n----------------------------------------\n\nTITLE: Granting Prisma Full Access to Public Schema\nDESCRIPTION: SQL commands to grant the Prisma user role full authority over all database objects in the public schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ngrant usage on schema public to prisma;\ngrant create on schema public to prisma;\ngrant all on all tables in schema public to prisma;\ngrant all on all routines in schema public to prisma;\ngrant all on all sequences in schema public to prisma;\nalter default privileges for role postgres in schema public grant all on tables to prisma;\nalter default privileges for role postgres in schema public grant all on routines to prisma;\nalter default privileges for role postgres in schema public grant all on sequences to prisma;\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required Python packages using Poetry\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npoetry add vecs sentence-transformers matplotlib\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Environment Variables\nDESCRIPTION: Environment variable configuration for Supabase URL and anonymous key in a .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SUPABASE_URL=YOUR_SUPABASE_URL\nREACT_APP_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies in pubspec.yaml\nDESCRIPTION: Dependencies needed for the chat app, including supabase_flutter for backend connectivity and timeago for formatting message timestamps. These packages will help manage database connections and display time information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter: ^1.0.0\ntimeago: ^3.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SSR Packages with yarn\nDESCRIPTION: Installs the @supabase/ssr and @supabase/supabase-js packages using yarn package manager for implementing server-side rendering with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @supabase/ssr @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Vercel Postgres Connection String\nDESCRIPTION: The connection string for a Vercel Postgres database containing host, username, password, and database name with SSL requirement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"postgres://default:xxxxxxxxxxxx@yy-yyyyy-yyyyyy-yyyyyyy.us-west-2.aws.neon.tech:5432/verceldb?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Postgres Documentation to the Datastore\nDESCRIPTION: cURL command to upload Postgres documentation PDF to the ChatGPT Retrieval Plugin's datastore using the /upsert-file endpoint.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -F \"file=@./postgresql-15-US.pdf\" http://localhost:3333/upsert-file\n```\n\n----------------------------------------\n\nTITLE: Equality Search Using JavaScript Supabase Client\nDESCRIPTION: JavaScript implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('books').select().eq('title', 'Harry')\n```\n\n----------------------------------------\n\nTITLE: Using Theme Colors with Tailwind CSS in React/TSX\nDESCRIPTION: Demonstrates how to use theme colors with Tailwind CSS by applying them through the className prop using arbitrary values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<LabelList className=\"fill-[--color-desktop]\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the Supabase website and specifies the location of the sitemap for improved indexing by search engines.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nSitemap: https://supabase.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase SSR Packages with npm\nDESCRIPTION: Installs the @supabase/ssr and @supabase/supabase-js packages using npm package manager for implementing server-side rendering with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/ssr @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Calorie Analysis\nDESCRIPTION: SQL query to calculate total daily calories over a month period for a specific user.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  date,\n  sum(calories) as total_calories\nfrom food_log\ngroup by date\nwhere user_id = 'xyz' and day between '2022-01-01' and '2022-01-31'\norder by date;\n```\n\n----------------------------------------\n\nTITLE: Querying User-Context Settings in Supabase Postgres\nDESCRIPTION: This SQL query lists all user-context settings from the pg_settings view, which can be modified at the role or database level.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pg_settings where context = 'user';\n```\n\n----------------------------------------\n\nTITLE: Invoking Semantic Search from TypeScript\nDESCRIPTION: Example of calling the semantic search function using Supabase JavaScript client\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: documents } = await supabase.rpc('match_documents', {\n  query_embedding: embedding, // pass the query embedding\n  match_threshold: 0.78, // choose an appropriate threshold for your data\n  match_count: 10, // choose the number of matches\n})\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation across Platforms\nDESCRIPTION: Sign out methods for JavaScript, Flutter, and Kotlin, removing user session and clearing local storage\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signOut() {\n\tsupabase.auth.signOut()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Environment Variables in Bash\nDESCRIPTION: Commands to set up environment variables for Supabase URL and API keys in bash/zsh shell\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-15-loading-data-supabase-python.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SUPABASE_URL=<<the value under config > URL>>\nexport SUPABASE_KEY=<<the value present in Project API keys > anon public>>\nexport SUPABASE_SECRET_KEY=<<the value present in Project API keys > service_role secret>>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Event Monitoring\nDESCRIPTION: SQL commands to enable write logging for PostgREST API roles\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nalter role \"authenticator\" set pgaudit.log to 'write';\n\n-- the above is the practical equivalent to:\n-- alter role \"anon\" set pgaudit.log TO 'write';\n-- alter role \"authenticated\" set pgaudit.log TO 'write';\n-- alter role \"service_role\" set pgaudit.log TO 'write';\n```\n\n----------------------------------------\n\nTITLE: Enabling postgres_fdw Extension in SQL\nDESCRIPTION: SQL commands to enable or disable the postgres_fdw extension in a Postgres database. The extension is automatically installed within pg_catalog.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Example: enable the \"postgres_fdw\" extension\ncreate extension if not exists postgres_fdw;\n\n-- Example: disable the \"postgres_fdw\" extension\ndrop extension if exists postgres_fdw;\n```\n\n----------------------------------------\n\nTITLE: Updating signIn with phone and password in TypeScript\nDESCRIPTION: Example of how to update the signIn method for phone and password authentication in supabase-js v2. The new version uses signInWithPassword.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { error } = await supabase\n  .auth\n  .signInWithPassword({ phone, password })\n```\n\n----------------------------------------\n\nTITLE: Altering Database-Level Setting in Supabase Postgres\nDESCRIPTION: This SQL command demonstrates how to alter a database-level setting, specifically setting the statement_timeout to 60 seconds for the 'postgres' database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nalter database \"postgres\" set \"statement_timeout\" TO '60s';\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Installs necessary Python packages including vecs, datasets, llama_index and html2text for the implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU vecs datasets llama_index html2text\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Streams Function Locally in Bash\nDESCRIPTION: Command to serve the 'streams' Supabase Edge Function locally without JWT verification. This allows for local testing and development of the function.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/streams/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_graphql Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and disable the pg_graphql extension in a PostgreSQL database. This allows the database to use GraphQL queries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_graphql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pg_graphql\" extension\ncreate extension pg_graphql;\n\n-- Disable the \"pg_graphql\" extension\ndrop extension if exists pg_graphql;\n```\n\n----------------------------------------\n\nTITLE: Selecting Data as Senior Dev\nDESCRIPTION: Shows data access from senior_dev role without explicit grants.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# as senior_dev\npostgres=> select * from public.users;\n┌────┬──────────┐\n│ id │   name   │\n├────┼──────────┤\n│  1 │ john doe │\n└────┴──────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase Database\nDESCRIPTION: Establishes connection to a Supabase database using the Vecs client and a Postgres connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/google-colab.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Timeout in PostgreSQL\nDESCRIPTION: SQL command to disable the query timeout entirely for the current session in PostgreSQL, allowing queries to run indefinitely without timing out.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/avoiding-timeouts-in-long-running-queries-6nmbdN.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nset statement_timeout = '0';\n```\n\n----------------------------------------\n\nTITLE: Creating Users in PostgreSQL\nDESCRIPTION: SQL commands to create new users within a PostgreSQL instance. This shows how to create the default 'postgres' user and additional users with passwords.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER postgres WITH PASSWORD 'super-secret-password;\nCREATE USER some_new_user WITH PASSWORD 'password';\n```\n\n----------------------------------------\n\nTITLE: Querying HTTP Responses in pg_net\nDESCRIPTION: Example query to retrieve all HTTP responses stored in the net._http_response table, which can be used to analyze the results of asynchronous requests.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect * from net._http_response;\n```\n\n----------------------------------------\n\nTITLE: Link OAuth Identity to Anonymous User in Swift\nDESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Swift. This converts an anonymous user to a permanent user by associating it with the OAuth identity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.linkIdentity(provider: .google)\n```\n\n----------------------------------------\n\nTITLE: Executing Llamafile Function Locally\nDESCRIPTION: cURL command to test the Llamafile function locally with a sample prompt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:54321/functions/v1/llamafile\" \\\n --data-urlencode \"prompt=write a short rap song about Supabase, the Postgres Developer platform, as sung by Nicki Minaj\" \\\n -H \"Authorization: $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Auth State Change Listener Implementation\nDESCRIPTION: Demonstrates how to listen to authentication state changes using the new stream-based approach.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nsupabase.auth.onAuthStateChange.listen((data) {\n  final AuthChangeEvent event = data.event;\n  final Session? session = data.session;\n});\n```\n\n----------------------------------------\n\nTITLE: Running Vacuum Operation in Postgres\nDESCRIPTION: This SQL command initiates a vacuum operation to reclaim storage occupied by dead tuples, updating statistics, and potentially reducing database size.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nvacuum;\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson Serializer Dependency in Groovy Build File\nDESCRIPTION: This snippet demonstrates how to add the Jackson serializer dependency to a Kotlin project using Gradle with the Groovy DSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.github.jan-tennert.supabase:serializer-jackson:VERSION'\n```\n\n----------------------------------------\n\nTITLE: Warming Database Cache with pgvector Index\nDESCRIPTION: SQL command to pre-warm the database cache by loading vector index into RAM using pg_prewarm to avoid cold cache issues.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/going-to-prod.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_prewarm('vecs.docs_vec_idx');\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL MERGE Operation Example\nDESCRIPTION: Shows the new MERGE syntax introduced in PostgreSQL 15 for conditional data modification operations that can replace complex CTEs or procedural functions\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-new-in-postgres-15.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nMERGE\n```\n\n----------------------------------------\n\nTITLE: Poetry Script Configuration in pyproject.toml\nDESCRIPTION: Configuration in pyproject.toml to define Poetry scripts for the seed and search functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.scripts]\nseed = \"image_search.main:seed\"\nsearch = \"image_search.main:search\"\n```\n\n----------------------------------------\n\nTITLE: Example RRF Score with Smoothing Constant\nDESCRIPTION: Mathematical formula showing a specific example of calculating RRF score with a smoothing constant of 1 for a first-ranked item.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\dfrac{1}{1+1} = 0.5\n```\n\n----------------------------------------\n\nTITLE: Transaction Mode Connection String Format\nDESCRIPTION: Example connection string format for connecting to Supabase PostgreSQL using the connection pooler in transaction mode on port 6543.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#example transaction mode string\npostgres://postgres.obfwhevidiamwdwki:[YPASSWORD]@aws-0-ca-central-1.pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry for Python dependency management\nDESCRIPTION: Command to install Poetry, a Python dependency and package management tool, using pip.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Supavisor Connection String Format\nDESCRIPTION: Example format of a Supavisor connection string for Supabase database connections, which includes the project reference in the username\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-do-i-update-connection-pool-settings-in-my-dashboard-wAxTJ_.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npostgres://postgres.xxxxxxxxx:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Running Discord Bot Locally with Supabase CLI\nDESCRIPTION: This command starts the Discord bot function locally using Supabase CLI, allowing for development and testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/discord-bot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve discord-bot --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Table Access Privileges in PostgreSQL\nDESCRIPTION: This snippet shows how to view the updated access privileges after granting select privilege with grant option.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> \\dp public.apps\n                                   Access privileges\n┌────────┬──────┬───────┬───────────────────────────────┬───────────────────┬──────────┐\n│ Schema │ Name │ Type  │       Access privileges       │ Column privileges │ Policies │\n├────────┼──────┼───────┼───────────────────────────────┼───────────────────┼──────────┤\n│ public │ apps │ table │ junior_dev=arwdDxt/junior_dev↵│                   │          │\n│        │      │       │ postgres=r*/junior_dev        │                   │          │\n└────────┴──────┴───────┴───────────────────────────────┴───────────────────┴──────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Checking Maintenance Work Memory Configuration\nDESCRIPTION: SQL command to verify the current setting of maintenance_work_mem after configuration changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nshow maintenance_work_mem;\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase Locally\nDESCRIPTION: This command starts Supabase locally using the Supabase CLI, which is required to run the development database for the project.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-nextjs-13/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JWT for Realtime in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to configure a Supabase client with a custom JWT for Realtime during client initialization using the `Realtime` feature installation. It sets up a Realtime channel and a flow to observe Postgres changes with specific filtering criteria, launching the flow to print each change. Then subscribes to the channel.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_52\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n\tinstall(Realtime) {\n\t\tjwtToken = \"your-custom-jwt\"\n\t}\n}\nval myChannel = supabase.channel(\"db-changes\")\n\nval changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"products\"\n    filter = \"name=in.(red, blue, yellow)\"\n}\n\nchanges\n    .onEach {\n        println(it.record)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe()\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Package for Dart\nDESCRIPTION: Command to install the Supabase package for regular Dart projects using pub package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v1/installing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndart pub add supabase\n```\n\n----------------------------------------\n\nTITLE: Server Timing Header Example in PostgREST 12\nDESCRIPTION: Illustrates the new Server-Timing header in PostgREST 12, which provides detailed timing information for various phases of request processing including JWT decoding, parsing, planning, transaction, and response generation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-postgrest-12.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nServer-Timing:\n\tjwt;dur=14.9,\n\tparse;dur=71.1,\n\tplan;dur=109.0,\n\ttransaction;dur=353.2,\n\tresponse;dur=4.4\n```\n\n----------------------------------------\n\nTITLE: New Error Handling in Supabase.js 1.0\nDESCRIPTION: Demonstrates the new error handling pattern where errors are returned as part of the response object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-30-improved-dx.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = supabase.from('todos').select('*')\nif (error) console.log(error)\\n\n// else, carry on ..\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Card Structure\nDESCRIPTION: Demonstrates the basic structure of a card component with header, content, and footer sections\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Code Exchange API Route Implementation\nDESCRIPTION: Server-side authentication code exchange route for handling OAuth callbacks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiHandler } from 'next'\nimport { createPagesServerClient } from '@supabase/auth-helpers-nextjs'\n\nconst handler: NextApiHandler = async (req, res) => {\n  const { code } = req.query\n\n  if (code) {\n    const supabase = createPagesServerClient({ req, res })\n    await supabase.auth.exchangeCodeForSession(String(code))\n  }\n\n  res.redirect('/')\n}\n\nexport default handler\n```\n\n----------------------------------------\n\nTITLE: Querying Edge Logs Without Unnesting\nDESCRIPTION: Simple query to retrieve timestamp and metadata from edge logs without unnesting arrays, which will return metadata as an array of objects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect timestamp, metadata from edge_logs as t;\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage\nDESCRIPTION: Simple example showing how to use the Switch component in a React/TypeScript application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/switch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch />\n```\n\n----------------------------------------\n\nTITLE: Configuring Snaplet Database Connection\nDESCRIPTION: TypeScript configuration for Snaplet database adapter and schema selection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  adapter: async () => {\n    const client = new Client({\n      connectionString: 'postgresql://postgres:postgres@localhost:54322/postgres',\n    })\n    await client.connect()\n    return new SeedPg(client)\n  },\n  // We only want to generate data for the public schema\n  select: ['!*', 'public.*'],\n})\n```\n\n----------------------------------------\n\nTITLE: Carousel with Event Listener\nDESCRIPTION: Example of adding an event listener to the carousel using the API instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type CarouselApi } from '@/components/ui/carousel'\n\nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>()\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    api.on('select', () => {\n      // Do something on select.\n    })\n  }, [api])\n\n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Base Styles\nDESCRIPTION: Including Tailwind CSS base styles in the application's main stylesheet.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Styling Google Maps Component\nDESCRIPTION: SCSS styles for the Google Maps container and proper display configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_21\n\nLANGUAGE: scss\nCODE:\n```\nion-content {\n  --background: none;\n}\n\n.container {\n  width: 100%;\n  height: 100%;\n}\n\ncapacitor-google-map {\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Supabase Client\nDESCRIPTION: This snippet outlines the necessary environment variables required to configure the Supabase client in a TanStack Start project. It details how to set these variables in a .env file, including the Supabase URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Filtering Postgres Error Logs with Severity Levels\nDESCRIPTION: A comprehensive example showing how to filter Postgres logs by error severity level. It unnests the metadata to access the parsed error_severity field and filters for ERROR, FATAL, or PANIC severity levels.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(postgres_logs.timestamp as datetime) as timestamp,\n  parsed.error_severity,\n  parsed.user_name,\n  event_message\nfrom\n  postgres_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(metadata.parsed) as parsed\nwhere regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Equivalent SQL for ANY Filter\nDESCRIPTION: SQL equivalent of the ANY filter modifier example.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom users\nwhere username like ANY('{%supa%,%kiwi%}');\n```\n\n----------------------------------------\n\nTITLE: Creating a Figure-8 Animation Pattern in React Three Fiber\nDESCRIPTION: This code creates a figure-8 animation pattern by alternating the sign of the cosine function based on whether the current loop count is even or odd.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst isEven = Math.floor(timer / circumference) % 2 == 0\n\nparticle.current.position.x = Math.sin(timer) * widthRadius\nparticle.current.position.y = isEven\n  ? Math.cos(timer) * heightRadius - heightRadius\n  : -Math.cos(timer) * heightRadius + heightRadius\n```\n\n----------------------------------------\n\nTITLE: Filtering Null Values in GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates how to use the new 'is' filter to query for blog entries where the name is null. It showcases the new null filtering capability in pg_graphql v1.2.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  blogCollection(filter: { name: {is: NULL}}) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Vercel Postgres with psql\nDESCRIPTION: Example psql command string used to connect to a Vercel Postgres database. This includes the full connection string with credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npsql \"postgres://default:xxxxxxxxxxxx@yy-yyyyy-yyyyyy-yyyyyyy.us-west-2.aws.neon.tech:5432/verceldb?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with Comment Directives in PostgreSQL\nDESCRIPTION: Example of using the new pg_graphql v0.1.0 comment directives feature to rename a table in the GraphQL schema. This demonstrates how to create a table named 'account' and use a comment directive to rename it to 'AccountHolder' in the GraphQL schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-02-22-supabase-beta-january-2022.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table account(\n    id serial primary key\n);\n\ncomment on table public.account is\ne'@graphql({ \"name\": \"AccountHolder\" })';\n```\n\n----------------------------------------\n\nTITLE: Simplified Query Execution in Dart\nDESCRIPTION: Demonstrates the simplified query syntax in v1 that removes the need for .execute() method calls, making data fetching more straightforward.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nfinal response = await supabase.from('messages').select().execute();\nfinal data = response.data;\n\n// After\nfinal data = await supabase.from('messages').select();\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Cache Updates with waitUntil in Cloudflare Worker\nDESCRIPTION: Router implementation that handles POST requests to the revalidate endpoint. Uses waitUntil to update KV store cache asynchronously after sending an immediate response. Manages Supabase data synchronization for INSERT, UPDATE, and DELETE operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-cloudflare-workers-kv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post(\n  \"/revalidate\",\n  withContent,\n  async (request, { SUPABASE_URL, SUPABASE_ANON_KEY, ARTICLES }, context) => {\n    const updateCache = async () => {\n      const { type, record, old_record } = request.content;\n      const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\n      if (type === \"INSERT\" || type === \"UPDATE\") {\n        await writeTo(ARTICLES, `/articles/${record.id}`, record);\n      }\n\n      if (type === \"DELETE\") {\n        await ARTICLES.delete(`/articles/${old_record.id}`);\n      }\n\n      const { data: articles } = await supabase.from(\"articles\").select(\"*\");\n      await writeTo(ARTICLES, \"/articles\", articles);\n      console.log(\"updated cache\");\n    };\n\n    context.waitUntil(updateCache());\n\n    console.log(\"sending response\");\n\n    return json({ received: true });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Docker IPv6 Configuration\nDESCRIPTION: This bash script demonstrates how to create a temporary IPv6 network in Docker and test it using a busybox container. It also includes commands to restart the Docker service and check IPv6 iptables configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-16-ipv6.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl restart docker\n\ndocker network create --ipv6 --subnet fd00:ffff::/80 ip6net\ndocker run --rm -it --network ip6net busybox ping6 google.com -c3\n\nip6tables -L\n\ndocker exec -it \"airflow_airflow-worker_1\" bash\ncurl -6 https://ifconfig.co/ip\n```\n\n----------------------------------------\n\nTITLE: Inserting Data without Returning - Dart Supabase\nDESCRIPTION: Demonstrates changes in data insertion method without returning inserted records between Supabase Dart library versions\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase\n  .from('my_table')\n  .insert(data, returning: ReturningOption.minimal)\n  .execute();\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.from('my_table').insert(data);\n```\n\n----------------------------------------\n\nTITLE: Building Todo Components with Supabase Integration in React Native\nDESCRIPTION: Demonstrates how to build the UI components for a todo application, including a text input for adding new todos and a component for displaying and toggling todos. Integrates with the Legend-State functions for data operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { FlatList, StyleSheet, Text, TextInput, TouchableOpacity } from 'react-native'\n// [...]\nimport { observer } from '@legendapp/state/react'\nimport { addTodo, todos$ as _todos$, toggleDone } from './utils/SupaLegend'\n// [...]\n\n// Emojis to decorate each todo.\nconst NOT_DONE_ICON = String.fromCodePoint(0x1f7e0)\nconst DONE_ICON = String.fromCodePoint(0x2705)\n\n// The text input component to add a new todo.\nconst NewTodo = () => {\n  const [text, setText] = useState('')\n  const handleSubmitEditing = ({ nativeEvent: { text } }) => {\n    setText('')\n    addTodo(text)\n  }\n  return (\n    <TextInput\n      value={text}\n      onChangeText={(text) => setText(text)}\n      onSubmitEditing={handleSubmitEditing}\n      placeholder=\"What do you want to do today?\"\n      style={styles.input}\n    />\n  )\n}\n\n// A single todo component, either 'not done' or 'done': press to toggle.\nconst Todo = ({ todo }: { todo: Tables<'todos'> }) => {\n  const handlePress = () => {\n    toggleDone(todo.id)\n  }\n  return (\n    <TouchableOpacity\n      key={todo.id}\n      onPress={handlePress}\n      style={[styles.todo, todo.done ? styles.done : null]}\n    >\n      <Text style={styles.todoText}>\n        {todo.done ? DONE_ICON : NOT_DONE_ICON} {todo.text}\n      </Text>\n    </TouchableOpacity>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Vault Extension in SQL\nDESCRIPTION: Shows how to create the Supabase Vault extension in a PostgreSQL database. This is the first step in setting up Vault for secure secret management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension supabase_vault with schema vault;\n```\n\n----------------------------------------\n\nTITLE: Dropping Function and Trigger in SQL\nDESCRIPTION: SQL commands to drop problematic functions and triggers that may be causing authentication errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION <function name>() CASCADE;\n\n-- If you'd prefer, you can drop the trigger alone with the following query:\n-- DROP TRIGGER <trigger_name> on auth.<table_name>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Message in React JSX\nDESCRIPTION: A simple React component that returns a paragraph element displaying a generic error message. Used for handling and displaying error states in the UI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nreturn <p>Sorry, something went wrong</p>\n```\n\n----------------------------------------\n\nTITLE: Setting AI Inference API Host Environment Variable\nDESCRIPTION: Environment variable configuration for pointing to the Llamafile server in the Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nAI_INFERENCE_API_HOST=http://host.docker.internal:8080\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase OG Image Function\nDESCRIPTION: Command to deploy the lwx-og function to Supabase with JWT verification disabled. Used for production deployment of the Open Graph image generation service.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-og/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy lwx-og --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keys for Chart Legend in React/TSX\nDESCRIPTION: Shows how to use custom keys for legend names by providing the nameKey prop to the ChartLegendContent component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartLegend content={<ChartLegendContent nameKey=\"browser\" />} />\n```\n\n----------------------------------------\n\nTITLE: Testing Dropdown Component Click Interaction\nDESCRIPTION: Shows how to simulate click events on Dropdown components using a custom helper function from tests directory\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// for Dropdowns\nimport clickDropdown from 'tests/helpers'\nclickDropdown('Hello world')\n```\n\n----------------------------------------\n\nTITLE: Previous Error Handling in Supabase.js\nDESCRIPTION: Shows the old try-catch error handling pattern where errors were thrown instead of returned.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-30-improved-dx.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const { body } = supabase.from('todos').select('*')\n} catch (error) {\n  console.log(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Cookie Name\nDESCRIPTION: Sets the cookie name used for persisting sidebar state. The default value is 'sidebar_state', but it can be changed to meet specific requirements.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst SIDEBAR_COOKIE_NAME = 'sidebar_state'\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Users with Supabase JS\nDESCRIPTION: JavaScript code snippet using the Supabase Auth API to sign in a user anonymously without requiring credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase\n  .auth\n  .signInAnonymously()\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database with vecs\nDESCRIPTION: Creates a vecs client to communicate with a PostgreSQL database. Requires a valid connection string.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n```\n\n----------------------------------------\n\nTITLE: Local Testing Setup for Edge Function\nDESCRIPTION: Commands to start Supabase locally and serve the function without JWT verification for testing purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/image-manipulation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase with Docker Compose\nDESCRIPTION: Command to start the Supabase stack using Docker Compose, which includes the Analytics server with Postgres backend.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-analytics/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# clone the supabase/supabase repo, and run the following\ncd docker\ndocker compose -f docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Custom URL Construction with TokenHash\nDESCRIPTION: Example of constructing a custom confirmation URL using TokenHash variable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Follow this link to confirm your user:</p>\n<p>\n  <a href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email\"\n    >Confirm your email</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with Outline Type\nDESCRIPTION: Demonstrates how to use the Button component with an outline type. Note that 'type' prop may change to 'variant' in future updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button type=\"outline\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating recovery.signal File for PostgreSQL Recovery Mode\nDESCRIPTION: Command to create the recovery.signal file, which instructs PostgreSQL to enter recovery mode when it starts up.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ touch /var/lib/postgresql/12/main/recovery.signal\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Vector Extension (vecs)\nDESCRIPTION: Command to install the Supabase vecs Python package for working with vector embeddings in Supabase Postgres database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install vecs\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin Serialization Plugin\nDESCRIPTION: Adds the Kotlin serialization plugin to handle JSON serialization/deserialization with Supabase responses.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    ...\n    id 'org.jetbrains.kotlin.plugin.serialization' version '$kotlin_version'\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Remote-Specific Supabase Configuration\nDESCRIPTION: TOML configuration example showing how to set up remote-specific settings for a staging environment, including custom seed script configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[remotes.staging]\nproject_id = \"your-project-ref\"\n\n[remotes.staging.db.seed]\nsql_paths = [\"./seeds/staging.sql\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships in Kotlin\nDESCRIPTION: Kotlin example showing how to query teams with their related users through a many-to-many relationship.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"teams\").select(Columns.raw(\"id, team_name, users(id, name)\"));\n```\n\n----------------------------------------\n\nTITLE: Cloning the Firebase to Supabase Repository (Bash)\nDESCRIPTION: This command clones the 'firebase-to-supabase' repository from GitHub to your local system for migration tasks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supabase-community/firebase-to-supabase.git\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project for Figma Clone\nDESCRIPTION: Command to create a new Flutter project for the Figma clone app. It creates an empty project targeting the web platform.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create canvas --empty --platforms=web\n```\n\n----------------------------------------\n\nTITLE: Unlinking Identity with Kotlin\nDESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Kotlin client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval identities = supabase.auth.currentIdentitiesOrNull() ?: emptyList()\n\nval googleIdentity = identities.first { it.provider == \"google\" }\n\nsupabase.auth.unlinkIdentity(googleIdentity.identityId!!)\n```\n\n----------------------------------------\n\nTITLE: Supabase Type Generation CLI Command\nDESCRIPTION: CLI command for generating TypeScript types from Postgres schema\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase gen types\nGenerate types from Postgres schema\n\nUsage:\n  supabase gen types [command]\n\nAvailable Commands:\n  typescript  Generate types for TypeScript\n```\n\n----------------------------------------\n\nTITLE: Testing Supabase Streams Function with cURL in Bash\nDESCRIPTION: Example cURL command to test the locally running 'streams' Supabase Edge Function by making a GET request to the function's endpoint.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/streams/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:54321/functions/v1/streams\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Enum Type\nDESCRIPTION: Demonstrates how to create a custom enum type called 'mood' with four possible values using CREATE TYPE statement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate type mood as enum (\n  'happy',\n  'sad',\n  'excited',\n  'calm'\n);\n```\n\n----------------------------------------\n\nTITLE: Running the Vue 3 Application Locally\nDESCRIPTION: Command to start the development server on localhost:5173 after setting up the project with Supabase credentials in the .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/vue3-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Password Verification Attempt Input Schema\nDESCRIPTION: JSON schema defining the input format for password verification hooks, including user_id and validation status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": \"3919cb6e-4215-4478-a960-6d3454326cec\",\n  \"valid\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Foreground (Text) Tailwind Class Examples\nDESCRIPTION: Demonstrates usage of foreground text color utility classes in Tailwind, covering different text color variations\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/tailwind-theming.md#2025-04-21_snippet_0\n\nLANGUAGE: tailwind\nCODE:\n```\ntext-foreground\ntext-foreground-light\ntext-foreground-lighter\ntext-foreground-muted\nbg-foreground-light\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Supabase Cron Postgres Module\nDESCRIPTION: SQL command to uninstall the Supabase Cron module by dropping the pg_cron extension. This action will permanently delete all Jobs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/install.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ndrop extension if exists pg_cron;\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI via pnpm\nDESCRIPTION: This command installs the Supabase CLI as a development dependency using pnpm. It allows developers to use Supabase commands in their project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add supabase --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI via npm\nDESCRIPTION: This command installs the Supabase CLI as a development dependency using npm. It allows developers to use Supabase commands in their project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install supabase --save-dev\n```\n\n----------------------------------------\n\nTITLE: Starting Local Supabase Database\nDESCRIPTION: Command to initialize and start a local Supabase database instance for development purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/database/employees/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase db start\n```\n\n----------------------------------------\n\nTITLE: Setting IVFFlat Probes for Session in SQL\nDESCRIPTION: SQL command to set the number of probes for IVFFlat index for the duration of the session. This example sets the number of probes to 10.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nset ivfflat.probes = 10;\n```\n\n----------------------------------------\n\nTITLE: Running Next.js App in Development Mode\nDESCRIPTION: Command to start the Next.js application in development mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Commas\nDESCRIPTION: An example of a GraphQL query with commas inserted. This demonstrates that commas are ignored in GraphQL parsing, allowing for flexible formatting without affecting the query's validity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery, {,\n  bookCollection, {,\n    edges, {,\n      node, {,\n        id,\n      },\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Job Queue Processing Function\nDESCRIPTION: Implements a robust job queue processing mechanism with retry logic and status tracking in PostgreSQL using PL/pgSQL\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nfor update skip locked\n    loop\n        begin\n            -- add job processing logic here.\n            -- for demonstration, we'll just update the job status to 'completed'.\n            update job_queue\n            set status = 'completed'\n            where job_id = job.job_id;\n\n        exception when others then\n            -- handle job failure and retry logic\n            if job.retry_count < job.max_retries then\n                update job_queue\n                set retry_count = retry_count + 1,\n                    scheduled_at = now() + interval '1 minute'  -- delay retry by 1 minute\n                where job_id = job.job_id;\n            else\n                update job_queue\n                set status = 'failed'\n                where job_id = job.job_id;\n            end if;\n        end;\n    end loop;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Pushing Supabase Configuration\nDESCRIPTION: Command to sync the local Supabase configuration with the remote project.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_ENV=production npx supabase@latest config push\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Push Function for Data Synchronization\nDESCRIPTION: Creates a Postgres function to handle pushing changes from the client to the Supabase database, including creating, updating, and deleting profiles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function push(changes jsonb) returns void as $$\ndeclare new_profile jsonb;\ndeclare updated_profile jsonb;\nbegin\n-- create profiles\nfor new_profile in\nselect jsonb_array_elements((changes->'profiles'->'created')) loop perform create_profile(\n        (new_profile->>'id')::uuid,\n        (new_profile->>'user_id')::uuid,\n        (new_profile->>'name'),\n        (new_profile->>'website'),\n        epoch_to_timestamp(new_profile->>'created_at'),\n        epoch_to_timestamp(new_profile->>'updated_at')\n    );\nend loop;\n-- delete profiles\nwith changes_data as (\n    select jsonb_array_elements_text(changes->'profiles'->'deleted')::uuid as deleted\n)\n-- update profiles\nupdate profiles\nset deleted_at = now(),\n    last_modified_at = now()\nfrom changes_data\nwhere profiles.id = changes_data.deleted;\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Removing SAML Connection (Supabase CLI)\nDESCRIPTION: This command removes an existing SAML 2.0 Identity Provider connection from Supabase Auth using the Supabase CLI. It requires specifying the provider ID and the project reference. Upon successful removal, all user accounts from that identity provider will be immediately logged out.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase sso remove <provider-id> --project-ref <your-project>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Components\nDESCRIPTION: Importing the necessary breadcrumb components from the UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from '@/components/ui/breadcrumb'\n```\n\n----------------------------------------\n\nTITLE: Supavisor Session Mode Connection String\nDESCRIPTION: Example of a Supavisor connection string in session mode using port 5432. Always uses IPv4 address.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ipv4-address.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npostgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Astro\nDESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for an Astro application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPUBLIC_SUPABASE_URL=your_supabase_project_url\nPUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n----------------------------------------\n\nTITLE: Running Svelte Development Server\nDESCRIPTION: Command to start the development server for the Svelte application, which will run on localhost:5173 with hot reloading enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/svelte-user-management/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running ChatGPT Retrieval Plugin Locally with Poetry\nDESCRIPTION: Bash command to run the ChatGPT Retrieval Plugin locally using Poetry, which starts a server on localhost:3333.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry run dev\n```\n\n----------------------------------------\n\nTITLE: Running Deno Linter\nDESCRIPTION: Command to run Deno linter for checking deprecated API usage\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeno lint\n```\n\n----------------------------------------\n\nTITLE: Granting Public Access in PostgreSQL\nDESCRIPTION: Shows how to grant INSERT privileges to all users (PUBLIC role) on a specific table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGRANT INSERT ON students TO PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Browser Supabase Client\nDESCRIPTION: Initializes a Supabase browser client for Next.js using environment variables for URL and anonymous key\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slider Component with Default Configuration\nDESCRIPTION: Basic implementation of the Slider component with default value, maximum value, and step configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/slider.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider defaultValue={[33]} max={100} step={1} />\n```\n\n----------------------------------------\n\nTITLE: Downloading Embeddings Generation Script\nDESCRIPTION: Bash command to download a pre-written script for generating embeddings from a GitHub repository.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\nhttps://raw.githubusercontent.com/supabase-community/nextjs-openai-doc-search/main/lib/generate-embeddings.ts \\\n-o \"lib/generate-embeddings.ts\"\n```\n\n----------------------------------------\n\nTITLE: Carousel with Autoplay Plugin\nDESCRIPTION: Example of adding the Autoplay plugin to the carousel using the plugins prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport Autoplay from \"embla-carousel-autoplay\"\n\nexport function Example() {\n  return (\n    <Carousel\n      plugins={[\n        Autoplay({\n          delay: 2000,\n        }),\n      ]}\n    >\n      // ...\n    </Carousel>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_repack extension in Postgres SQL\nDESCRIPTION: This SQL command enables the pg_repack extension in the Postgres database. It creates the extension in the 'extensions' schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_repack.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension pg_repack with schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Updating user data for logged-in user in TypeScript\nDESCRIPTION: Example of how to update the method to update user data for a logged-in user in supabase-js v2. The new version uses updateUser.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data: { user },\n  error,\n} = await supabase.auth.updateUser({ attributes })\n```\n\n----------------------------------------\n\nTITLE: Starting the SolidJS development server\nDESCRIPTION: Launches the SolidJS development server to run the application locally. After running this command, the app will be accessible at http://localhost:3000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/solidjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt Development Server\nDESCRIPTION: Command to start the Nuxt development server on localhost port 3000 after setting up the Supabase project credentials in the .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nuxt3-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Supabase Tables\nDESCRIPTION: Use the Supabase CLI to generate TypeScript types for the database schema.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase gen types --lang=typescript --local > utils/database.types.ts\n```\n\n----------------------------------------\n\nTITLE: Creating BRIN Index in PostgreSQL\nDESCRIPTION: Creating a BRIN index for timestamp columns that continuously increase, providing better scalability than B-tree indexes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_orders_created_at ON customers using brin(created_at);\n```\n\n----------------------------------------\n\nTITLE: Supabase Initialization in Flutter\nDESCRIPTION: Dart code to initialize Supabase client in the Flutter application\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nvoid main() async {\n  await Supabase.initialize(\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_SUPABASE_ANON_KEY',\n  );\n  runApp(const MainApp());\n}\n\nfinal supabase = Supabase.instance.client;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Dashibase Integration\nDESCRIPTION: Embeds a YouTube video demonstrating the Dashibase integration with Supabase for building no-code internal tools, using an iframe element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-community-day.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/WAYA6-qBfPs?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating User Data in v0 vs v1\nDESCRIPTION: Shows the change in how to update user data for a logged-in user. In v1, the method name has changed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.update(\n  UserAttributes(data: {'hello': 'world'})\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.updateUser(\n  UserAttributes(\n    data: { 'hello': 'world' },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Identity Primary Key in SQL\nDESCRIPTION: Creates a movies table with an auto-incrementing bigint primary key using the IDENTITY feature in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table movies (\n  id bigint generated always as identity primary key\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project with CLI\nDESCRIPTION: Commands to initialize a Supabase project and start a local Postgres instance using Docker\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize your project\nsupabase init\n\n# Start Postgres\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Server/Client Hooks Setup for SvelteKit Auth - v0.8.0\nDESCRIPTION: Separate server and client hook configurations for Supabase authentication in SvelteKit v0.8.0.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// make sure the supabase instance is initialized on the server\nimport '$lib/db'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// make sure the supabase instance is initialized on the client\nimport '$lib/db'\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation in Flutter\nDESCRIPTION: Logout method to remove user session and clear local storage in Supabase authentication for Flutter\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\n  await supabase.auth.signOut();\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Image Transformations Documentation in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown to the Supabase documentation for image transformations in the storage library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/python/release-notes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[image transformations](https://supabase.com/docs/guides/storage/serving/image-transformations)\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Client Engine Dependencies\nDESCRIPTION: Examples of adding Ktor client engine dependencies across different build systems. Required for each Kotlin target.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.ktor:ktor-client-[engine]:KTOR_VERSION\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.ktor:ktor-client-[engine]:KTOR_VERSION'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-[engine]</artifactId>\n    <version>KTOR_VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Imports\nDESCRIPTION: Examples of importing types for npm packages and Node.js built-ins.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @deno-types=\"npm:@types/express@^4.17\"\nimport express from 'npm:express@^4.17'\n\n/// <reference types=\"npm:@types/node\" />\n```\n\n----------------------------------------\n\nTITLE: Finding Database IP Address Using nslookup\nDESCRIPTION: Command to query DNS servers and retrieve the IP address for a Supabase database hostname.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnslookup db.<PROJECT_REF>.supabase.co\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Custom Serialization\nDESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with a custom serializer implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = CustomSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Parameters in Connection String\nDESCRIPTION: Demonstrates the format for adding query parameters to a Postgres connection string in Prisma.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Example of query parameters\n\nconnection_string.../postgres?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE\n```\n\n----------------------------------------\n\nTITLE: Setting Function Secrets from Environment File\nDESCRIPTION: Command to set secrets for Supabase Functions using an environment file.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file supabase/functions/.env\n```\n\n----------------------------------------\n\nTITLE: Creating a new Laravel project with Composer\nDESCRIPTION: Uses Composer to scaffold a new Laravel project. This command initializes a fresh Laravel installation in a directory named 'example-app'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project laravel/laravel example-app\n```\n\n----------------------------------------\n\nTITLE: Function Deployment Commands\nDESCRIPTION: Commands for deploying the Edge Function and setting environment secrets\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/auth-send-email-hook-react-email-resend.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy send-email --no-verify-jwt\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file supabase/functions/.env\n```\n\n----------------------------------------\n\nTITLE: User Signup - Dart\nDESCRIPTION: Submits a new user signup request with specified email, password, and metadata in Dart.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = await supabase.auth.signUp(\n  email: 'valid.email@supabase.io',\n  password: 'example-password',\n  data: {\n    'first_name': 'John',\n    'age': 27,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index with Float16 Vectors\nDESCRIPTION: Shows how to create an HNSW index using float16 vectors for improved memory efficiency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on embedding_half using hnsw (vector halfvec_l2_ops);\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Server Client in SvelteKit Hooks (v0.9.0)\nDESCRIPTION: This snippet demonstrates how to set up the Supabase server client in the hooks.server.ts file for SvelteKit version 0.9.0. It includes creating the client, implementing safe session retrieval, and configuring response header filtering.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks.server.ts\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'\nimport { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'\nimport type { Handle } from '@sveltejs/kit'\n\nexport const handle: Handle = async ({ event, resolve }) => {\n  event.locals.supabase = createSupabaseServerClient({\n    supabaseUrl: PUBLIC_SUPABASE_URL,\n    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n    event,\n  })\n\n  /**\n   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it\n   * doesn't validate the JWT, this function validates the JWT by first calling\n   * `getUser` and aborts early if the JWT signature is invalid.\n   */\n  event.locals.safeGetSession = async () => {\n    const {\n      data: { user },\n      error,\n    } = await event.locals.supabase.auth.getUser()\n    if (error) return { session: null, user: null }\n\n    const {\n      data: { session },\n    } = await event.locals.supabase.auth.getSession()\n    return { session, user }\n  }\n\n  return resolve(event, {\n    filterSerializedResponseHeaders(name) {\n      return name === 'content-range' || name === 'x-supabase-api-version'\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Function Locally for Open Graph Image Generation\nDESCRIPTION: This command starts a local Supabase function server for testing the Open Graph image generation. It disables JWT verification for easier testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/opengraph/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Create Cities Table (SQL)\nDESCRIPTION: This SQL code creates the `cities` table with columns for `id`, `name`, and `population`.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate table \"public\".\"cities\" (\n  \"id\" bigint primary key generated always as identity,\n  \"name\" text,\n  \"population\" bigint\n);\n```\n\n----------------------------------------\n\nTITLE: Database Error Query\nDESCRIPTION: SQL query for finding database-level errors in postgres_logs with specific filtering conditions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  cast(postgres_logs.timestamp as datetime) as timestamp,\n  error_severity,\n  user_name,\n  query,\n  detail,\n  sql_state_code,\n  event_message\nfrom postgres_logs\n  cross join unnest(metadata) as metadata\n  cross join unnest(metadata.parsed) as parsed\nwhere\n  -- filter only for error events\n  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')\n    and\n  -- All DB API requests are registered as the authenticator role\n  parsed.user_name = 'authenticator'\n    and\n  -- find failed queries featuring the function <function_name>\n  regexp_contains(parsed.query, '<function_name>')\n    and\n  -- limit the time of the search to be around the time of the failed API request\npostgres_logs.timestamp between '2024-04-15 10:50:00' AND '2024-04-15 10:50:27'\norder by\n timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Email Template for User Signup - HTML\nDESCRIPTION: This HTML snippet is an email template for user signup confirmation. It contains a link for users to confirm their email address after signing up.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/password-based-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h2>Confirm your signup</h2>\n\n<p>Follow this link to confirm your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}\"\n    >Confirm your email</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Querying Custom Schema via PostgREST API\nDESCRIPTION: Demonstrates how to query a specific schema using the PostgREST API by setting the accept-profile header to access schema information\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/bulletins?select=*' \\\n -H 'accept-profile: other_schema' \\\n -H \"apikey: $ANON_KEY\" \\\n -H \"authorization: Bearer $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Creating Login and Registration Form with Supabase Authentication in React Native\nDESCRIPTION: This component implements a login page with email/password authentication using Supabase. It handles both sign-in and registration functionalities with form validation and loading state management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert, View, Button, TextInput, StyleSheet, Text, TouchableOpacity } from 'react-native'\nimport { useState } from 'react'\nimport React from 'react'\nimport Spinner from 'react-native-loading-spinner-overlay'\nimport { supabase } from '../config/initSupabase'\n\nconst Login = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  // Sign in with email and password\n  const onSignInPress = async () => {\n    setLoading(true)\n\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n\n    if (error) Alert.alert(error.message)\n    setLoading(false)\n  }\n\n  // Create a new user\n  const onSignUpPress = async () => {\n    setLoading(true)\n    const { error } = await supabase.auth.signUp({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    setLoading(false)\n  }\n\n  return (\n    <View style={styles.container}>\n      <Spinner visible={loading} />\n\n      <Text style={styles.header}>My Cloud</Text>\n\n      <TextInput\n        autoCapitalize=\"none\"\n        placeholder=\"john@doe.com\"\n        value={email}\n        onChangeText={setEmail}\n        style={styles.inputField}\n      />\n      <TextInput\n        placeholder=\"password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n        style={styles.inputField}\n      />\n\n      <TouchableOpacity onPress={onSignInPress} style={styles.button}>\n        <Text style={{ color: '#fff' }}>Sign in</Text>\n      </TouchableOpacity>\n      <Button onPress={onSignUpPress} title=\"Create Account\" color={'#fff'}></Button>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n    padding: 20,\n    backgroundColor: '#151515',\n  },\n  header: {\n    fontSize: 30,\n    textAlign: 'center',\n    margin: 50,\n    color: '#fff',\n  },\n  inputField: {\n    marginVertical: 4,\n    height: 50,\n    borderWidth: 1,\n    borderColor: '#2b825b',\n    borderRadius: 4,\n    padding: 10,\n    color: '#fff',\n    backgroundColor: '#363636',\n  },\n  button: {\n    marginVertical: 15,\n    alignItems: 'center',\n    backgroundColor: '#2b825b',\n    padding: 12,\n    borderRadius: 4,\n  },\n})\n\nexport default Login\n```\n\n----------------------------------------\n\nTITLE: Running Ionic Application in Development Mode\nDESCRIPTION: This command starts the Ionic application in development mode, allowing you to view and test the app in a browser.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nionic serve\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Usage\nDESCRIPTION: Example showing how to implement an Alert component with an icon, title, and description. The Terminal icon is used alongside text content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Alert>\n  <Terminal className=\"h-4 w-4\" />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Sign-up Email Template HTML Configuration\nDESCRIPTION: HTML template for user signup confirmation email, including dynamic variables for token and redirect handling\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/password-based-auth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h2>Confirm your signup</h2>\n\n<p>Follow this link to confirm your user:</p>\n<p>\n  <a\n    href=\"{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}\"\n    >Confirm your email</a\n  >\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining ProductRepository Interface in Kotlin\nDESCRIPTION: This interface defines the contract for product data operations. It includes methods for creating, retrieving, updating, and deleting products from the database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface ProductRepository {\n    suspend fun createProduct(product: Product): Boolean\n    suspend fun getProducts(): List<ProductDto>?\n    suspend fun getProduct(id: String): ProductDto\n    suspend fun deleteProduct(id: String)\n    suspend fun updateProduct(\n        id: String, name: String, price: Double, imageName: String, imageFile: ByteArray\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Angular Auth Guard Command\nDESCRIPTION: CLI command to generate a new auth guard in Angular project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nng generate guard guards/auth --implements CanActivate\n```\n\n----------------------------------------\n\nTITLE: Installing Badge Component via CLI\nDESCRIPTION: Command to install the Badge component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/badge.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add badge\n```\n\n----------------------------------------\n\nTITLE: Initializing CanvasPage StatefulWidget in Dart\nDESCRIPTION: Sets up the basic structure for the CanvasPage widget, including the state class and build method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass CanvasPage extends StatefulWidget {\n  const CanvasPage({super.key});\n\n  @override\n  State<CanvasPage> createState() => _CanvasPageState();\n}\n\nclass _CanvasPageState extends State<CanvasPage> {\n  // TODO: Add properties\n\n  // TODO: Add methods\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Column to Projects Table with Declarative Schema in SQL\nDESCRIPTION: This snippet shows how to add a new 'metadata' column to the 'projects' table using a declarative schema approach. It demonstrates the simplicity of schema changes with this method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table private.projects (\n  id              bigint    not null,\n  name            text      not null,\n  organization_id bigint    not null,\n  metadata        jsonb,\n  inserted_at     timestamp not null,\n  updated_at      timestamp not null\n);\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Hono Application with Supabase\nDESCRIPTION: Command to bootstrap a Hono example app using the Supabase CLI. This creates a new project with the necessary configuration to work with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/hono.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase@latest bootstrap hono\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticket Data from Postgres View (JavaScript)\nDESCRIPTION: This code snippet uses supabase-js to fetch ticket data from the lw7_tickets_golden view, including the golden ticket status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Get ticket data\nconst { data, error } = await supabaseAdminClient\n  .from('lw7_tickets_golden')\n  .select('name, ticketNumber, golden, bg_image_id')\n  .eq('username', username)\n  .maybeSingle()\nif (error) console.log(error.message)\nif (!data) throw new Error('user not found')\nconst { name, ticketNumber, bg_image_id } = data\nconst golden = data?.golden ?? false\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Postgres Integration\nDESCRIPTION: Bash commands to export required environment variables for integrating Postgres with the ChatGPT Retrieval Plugin.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=<open_ai_api_key>\nexport DATASTORE=postgres\nexport PG_HOST=<postgres_host_url>\nexport PG_PASSWORD=<postgres_password>\n```\n\n----------------------------------------\n\nTITLE: Defining Draw Modes Enum in Dart\nDESCRIPTION: Creates an enum to represent different drawing modes (pointer, circle, rectangle) with associated icons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nenum _DrawMode {\n  pointer(iconData: Icons.pan_tool_alt),\n  circle(iconData: Icons.circle_outlined),\n  rectangle(iconData: Icons.rectangle_outlined);\n\n  const _DrawMode({required this.iconData});\n\n  final IconData iconData;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task API with Route Parameters in Express.js\nDESCRIPTION: An Express.js implementation for a task management API using route parameters. This code sets up endpoints for listing, creating, retrieving, updating, and deleting tasks, demonstrating how to access route parameters through the req.params object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'npm:express@4.18.2'\n\nconst app = express();\napp.use(express.json());\n\napp.get('/tasks', async (req, res) => {\n// return all tasks\n});\n\napp.post('/tasks', async (req, res) => {\n// create a task\n});\n\napp.get('/tasks/:id', async (req, res) => {\nconst id = req.params.id\nconst task = {} // get task\n\nres.json(task)\n});\n\napp.patch('/tasks/:id', async (req, res) => {\nconst id = req.params.id\n// modify task\n});\n\napp.delete('/tasks/:id', async (req, res) => {\nconst id = req.params.id\n// delete task\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js API route for Supabase Storage signed URLs in TypeScript\nDESCRIPTION: This code creates a Next.js API route that generates signed upload URLs for Supabase Storage, allowing secure client-side file uploads.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '@/auth'\nimport { env } from '@/env'\nimport { createClient } from '@supabase/supabase-js'\n\nexport const dynamic = 'force-dynamic' // defaults to auto\nexport async function GET(request: Request) {\n  try {\n    const session = await auth()\n    if (!session || !session.user.id) {\n      return new Response('Unauthorized', { status: 401 })\n    }\n    const {\n      user: { id },\n    } = session\n    // Generate signed upload url to use on client.\n    const supabaseAdmin = createClient(env.NEXT_PUBLIC_SUPABASE_URL, env.SUPABASE_SERVICE_ROLE_KEY)\n\n    const { data, error } = await supabaseAdmin.storage\n      .from('avatars')\n      .createSignedUploadUrl(id, { upsert: true })\n    console.log(error)\n    if (error) throw error\n\n    return new Response(JSON.stringify(data), {\n      status: 200,\n    })\n  } catch (e) {\n    console.error(e)\n    return new Response('Internal Server Error', { status: 500 })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Developer Quickstart: Dependencies and Development Setup\nDESCRIPTION: Bash commands for setting up the Supabase Studio project, installing dependencies, and running the development server. Requires Node.js v20 and provides options for starting the server, running tests, and pulling secrets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# You'll need to be on Node v20\n# in /studio\n\nnpm i # install dependencies\nnpm run dev:secrets:pull # Supabase internal use: if you are working on the platform version of the Studio\nnpm run dev # start dev server\nnpm run test # run tests\nnpm run -- --watch # run tests in watch mode\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Element with ElevenLabs Text-to-Speech API\nDESCRIPTION: HTML code for an audio element that uses the deployed Supabase Function as its source to generate speech from text using ElevenLabs API.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<audio\n  src=\"https://${SUPABASE_PROJECT_REF}.supabase.co/functions/v1/elevenlabs-text-to-speech?text=Hello%2C%20world!&voiceId=JBFqnCBsd6RMkjVDRZzb\"\n  controls\n/>\n```\n\n----------------------------------------\n\nTITLE: Supabase Auth Weak Password Error Code\nDESCRIPTION: Error code returned when a user attempts to sign up or change password without meeting password strength requirements. The AuthWeakPasswordError class provides detailed information about password criteria that need to be met.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/auth_error_codes_table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nweak_password\n```\n\n----------------------------------------\n\nTITLE: Basic Billing Example Table in Markdown\nDESCRIPTION: Shows a markdown table demonstrating billing calculation for a single project with consistent compute size usage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/compute.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Line Item                     | Hours | Costs   |\n| ----------------------------- | ----- | ------- |\n| Pro Plan                      | -     | $25     |\n| Compute Hours Micro Project 1 | 744   | $10     |\n| **Subtotal**                  |       | **$35** |\n| Compute Credits               |       | -$10    |\n| **Total**                     |       | **$25** |\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase UI Components via Command Line\nDESCRIPTION: This snippet illustrates how to add the Supabase UI components to an existing or new project using a command line instruction. The command installs dependencies and includes necessary files for using the components in your project. It is essential to have Node.js and npm installed to use the npx command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/getting-started/faq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add http://supabase.com/ui/r/password-based-auth-nextjs.json\n```\n\n----------------------------------------\n\nTITLE: Supabase Realtime JSON Input Structure\nDESCRIPTION: Example JSON input data structure from Supabase Realtime showing the format of database change events.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"changes\": [\n    {\n      \"columns\": [\n        {\n          \"flags\": [\"key\"],\n          \"name\": \"id\",\n          \"type\": \"int8\",\n          \"type_modifier\": 4294967295\n        },\n        {\n          \"flags\": [],\n          \"name\": \"name\",\n          \"type\": \"text\",\n          \"type_modifier\": 4294967295\n        },\n        {\n          \"flags\": [],\n          \"name\": \"email\",\n          \"type\": \"text\",\n          \"type_modifier\": 4294967295\n        }\n      ],\n      \"commit_timestamp\": \"2021-03-17T14:00:26Z\",\n      \"record\": {\n        \"id\": \"101492\",\n        \"name\": \"Alfred\",\n        \"email\": \"alfred@example.org\"\n      },\n      \"schema\": \"public\",\n      \"table\": \"users\",\n      \"type\": \"INSERT\"\n    }\n  ],\n  \"commit_timestamp\": \"2021-03-17T14:00:26Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Role-based Access Control Email Examples\nDESCRIPTION: Example email formats for creating admin and moderator users using plus addressing for role assignment.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n// admin user\nemail+supaadmin@example.com\n\n// moderator user\nemail+supamod@example.com\n```\n\n----------------------------------------\n\nTITLE: Installing react-resizable-panels Dependency\nDESCRIPTION: Command to install the react-resizable-panels package as a dependency for the Resizable component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/resizable.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-resizable-panels\n```\n\n----------------------------------------\n\nTITLE: Direct Database Connection String Example\nDESCRIPTION: Example of a direct PostgreSQL connection string for Supabase database using IPv6.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Example connection string\npostgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle with npm run build\nDESCRIPTION: Creates a production-ready build in the build folder. This command optimizes the React application for deployment with minified bundles and hashed filenames for efficient caching.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: RESTRICT Delete Operation Example\nDESCRIPTION: Demonstrates how RESTRICT constraint prevents deletion of referenced records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npostgres=# delete from grandparent;\nERROR: update or delete on table \"parent\" violates foreign key constraint \"child_father_fkey\" on table \"child\"\nDETAIL: Key (id)=(1) is still referenced from table \"child\".\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyset Pagination in GraphQL\nDESCRIPTION: Example of keyset pagination implementation using first/after parameters to retrieve specific records after a cursor\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  blogCollection(\n    first: 2,\n    after: \"Y3Vyc29yMQ==\"\n  ) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Context Menu Components in React\nDESCRIPTION: TypeScript code snippet showing how to import the necessary Context Menu components from the UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/context-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from '@/components/ui/context-menu'\n```\n\n----------------------------------------\n\nTITLE: Getting User Metadata - JavaScript\nDESCRIPTION: Fetches the current user's metadata from Supabase using JavaScript.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)\n\n// ---cut---\nconst {\n  data: { user },\n} = await supabase.auth.getUser()\nlet metadata = user?.user_metadata\n```\n\n----------------------------------------\n\nTITLE: Checking Current Role\nDESCRIPTION: SQL query to verify the currently connected database role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> select current_role;\n┌──────────────┐\n│ current_role │\n├──────────────┤\n│ portgres     │\n└──────────────┘\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Setup Tests with npm\nDESCRIPTION: This snippet provides the command to install necessary dependencies before running tests. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/supabase/supabase/blob/master/tests/studio-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with Moshi Serialization\nDESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with Moshi Serialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = MoshiSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Signing In with Magic Link in v0 vs v1\nDESCRIPTION: Demonstrates the change in the method for signing in with a magic link. In v1, a more explicit method name is used.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signIn(email: email);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithOtp(email: email);\n```\n\n----------------------------------------\n\nTITLE: Querying PGAudit Monitored Users\nDESCRIPTION: SQL query to identify database users being monitored by PGAudit\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  rolname,\n  rolconfig\nfrom pg_roles\nwhere\n  exists (\n    select\n      1\n    from UNNEST(rolconfig) as c\n    where c like '%pgaudit.role%' or c like '%pgaudit.log%'\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable File\nDESCRIPTION: Bash command to create a .env file in the supabase folder and add an environment variable.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"MY_NAME=Some_name\" >> ./supabase/.env\n```\n\n----------------------------------------\n\nTITLE: Direct Database Connection String\nDESCRIPTION: Example connection string format for direct database connection on port 5432, suitable for stationary servers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Example DB string:\npostgresql://postgres:[PASSWORD]@db.[PROJECT REF].supabase.co:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings in TOML\nDESCRIPTION: This snippet shows how to configure a database setting to track commit timestamps.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[db.settings]\ntrack_commit_timestamp = true\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Identity with JavaScript\nDESCRIPTION: Example showing how to link a Google OAuth identity to an existing user using the Supabase JavaScript client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in .env File\nDESCRIPTION: Example of environment variables stored in a .env file for sensitive information like API keys.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/managing-config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=\"\"\nGITHUB_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Example of required environment variables for Supabase configuration in .env.local file.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/nextjs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]\nNEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]\n```\n\n----------------------------------------\n\nTITLE: Generating Rollback Migration\nDESCRIPTION: Command to generate a rollback migration after manually updating schema files to reflect desired previous state.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/declarative-database-schema.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db diff -f <rollback_migration_name>\n```\n\n----------------------------------------\n\nTITLE: Detaching Archive Table\nDESCRIPTION: Detaches a queue's archive table from the PGMQ extension to prevent deletion during extension removal.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.detach_archive('my_queue');\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Components in TSX\nDESCRIPTION: Import statement for pagination-related components from the UI component library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/pagination.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from '@/components/ui/pagination'\n```\n\n----------------------------------------\n\nTITLE: Configuring RegisterPageModule in Angular\nDESCRIPTION: Sets up the necessary imports and declarations for the RegisterPage module, including ReactiveFormsModule for form handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n\nimport { IonicModule } from '@ionic/angular'\n\nimport { RegisterPageRoutingModule } from './register-routing.module'\n\nimport { RegisterPage } from './register.page'\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, RegisterPageRoutingModule, ReactiveFormsModule],\n  declarations: [RegisterPage],\n})\nexport class RegisterPageModule {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queue Metrics in PGMQ with SQL\nDESCRIPTION: The metrics function returns various metrics for a specific queue, including queue length, message ages, and total message count. It takes a queue name as a parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pgmq.metrics('my_queue');\n queue_name | queue_length | newest_msg_age_sec | oldest_msg_age_sec | total_messages |          scrape_time\n------------+--------------+--------------------+--------------------+----------------+-------------------------------\n my_queue   |           16 |               2445 |               2447 |             35 | 2023-10-28 20:23:08.406259-05\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi Serializer Dependency in Groovy Build File\nDESCRIPTION: This snippet demonstrates how to add the Moshi serializer dependency to a Kotlin project using Gradle with the Groovy DSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.github.jan-tennert.supabase:serializer-moshi:VERSION'\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library as a dependency for the Ionic Angular project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST 11 Pre-release Locally\nDESCRIPTION: Instructions for trying out the PostgREST 11 pre-release locally using the Supabase CLI. This allows developers to test the new features before they are deployed to Supabase cloud.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ supabase start\n```\n\n----------------------------------------\n\nTITLE: Schema Cache Structure Definition in Rust\nDESCRIPTION: Definition of the SchemaCache struct that stores database schema information including schemas, tables, functions, types, versions, and columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub struct SchemaCache {\n  pub schemas: Vec<Schema>,\n  pub tables: Vec<Table>,\n  pub functions: Vec<Function>,\n  pub types: Vec<PostgresType>,\n  pub versions: Vec<Version>,\n  pub columns: Vec<Column>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database from Custom Template\nDESCRIPTION: SQL command to create a new database using a custom template database instead of the default template1.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE new_db_name TEMPLATE template_db_name;\n```\n\n----------------------------------------\n\nTITLE: Serving the Function Locally with Supabase CLI\nDESCRIPTION: Command for serving the competition function locally using the Supabase CLI without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/get-tshirt-competition/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Accordion Animations\nDESCRIPTION: Updates to the Tailwind configuration file to add necessary keyframes and animations for the accordion's expand/collapse functionality. Defines accordion-up and accordion-down animations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/accordion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ionic React App with Routing and Authentication\nDESCRIPTION: Main App component with routing configuration that handles authentication state using Supabase. Redirects users to the appropriate page based on their authentication status.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Redirect, Route } from 'react-router-dom'\nimport { IonApp, IonRouterOutlet, setupIonicReact } from '@ionic/react'\nimport { IonReactRouter } from '@ionic/react-router'\nimport { supabase } from './supabaseClient'\n\nimport '@ionic/react/css/ionic.bundle.css'\n\n/* Theme variables */\nimport './theme/variables.css'\nimport { LoginPage } from './pages/Login'\nimport { AccountPage } from './pages/Account'\nimport { useEffect, useState } from 'react'\nimport { Session } from '@supabase/supabase-js'\n\nsetupIonicReact()\n\nconst App: React.FC = () => {\n  const [session, setSession] = useState < Session > null\n  useEffect(() => {\n    setSession(supabase.auth.session())\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n  }, [])\n  return (\n    <IonApp>\n      <IonReactRouter>\n        <IonRouterOutlet>\n          <Route\n            exact\n            path=\"/\"\n            render={() => {\n              return session ? <Redirect to=\"/account\" /> : <LoginPage />\n            }}\n          />\n          <Route exact path=\"/account\">\n            <AccountPage />\n          </Route>\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for Embeddings Generation\nDESCRIPTION: JSON configuration in package.json to include the embeddings generation script in the build process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"pnpm run embeddings && next build\",\n  \"start\": \"next start\",\n  \"embeddings\": \"tsx lib/generate-embeddings.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing YouTube Embed in React\nDESCRIPTION: HTML/React iframe code for embedding a YouTube video about Supabase AI improvements\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-02-supabase-ai-assistant-v2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/_fdP-aaTHgw\"\n    title=\"We have improved Supabase AI ... A lot!\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Reviewing Generated Migration SQL\nDESCRIPTION: Shows the SQL statement generated for adding the 'age' column to the 'employees' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nalter table \"public\".\"employees\" add column \"age\" smallint not null;\n```\n\n----------------------------------------\n\nTITLE: Creating New Supabase Function\nDESCRIPTION: Command to create a new Supabase function named 'sentryfied' using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/sentry-monitoring.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new sentryfied\n```\n\n----------------------------------------\n\nTITLE: Setup and Installation Commands\nDESCRIPTION: Terminal commands for installing dependencies and starting the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-picker\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild\n```\n\n----------------------------------------\n\nTITLE: WebSocket Error Message - Too Many Channels\nDESCRIPTION: Error message returned when a connection attempts to join more channels than allowed per connection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/quotas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntoo_many_channels\n```\n\n----------------------------------------\n\nTITLE: Creating Security-Invoker View\nDESCRIPTION: Example of creating a view that respects RLS policies in Postgres 15 and above.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate view <VIEW_NAME>\nwith(security_invoker = true)\nas select <QUERY>\n```\n\n----------------------------------------\n\nTITLE: Pulling Remote Schema Changes\nDESCRIPTION: Command to synchronize local environment with remote schema changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsupabase db pull\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in Swift with Supabase\nDESCRIPTION: Swift implementation to update a user's password using Supabase authentication client after a successful password reset flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_36\n\nLANGUAGE: Swift\nCODE:\n```\ntry await supabase.auth.updateUser(user: UserAttributes(password: newPassword))\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Logging\nDESCRIPTION: SQL commands to enable or disable logging of observed table rows\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n--enable\nalter role \"postgres\" set pgaudit.log_rows to 'on';\n\n-- disable\nalter role \"postgres\" set pgaudit.log_rows to 'off';\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase Secrets from Environment File\nDESCRIPTION: Uploads the environment variables from the local configuration file to Supabase as secrets.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Creating JOIN Column Index in PostgreSQL\nDESCRIPTION: Creating index for foreign key column used in table joins to optimize join operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_orders_customer_id on orders (customer_id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Execution Order in TOML\nDESCRIPTION: Specifies a custom order for applying schema files using config.toml.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[db.migrations]\nschema_paths = [\n  \"./schemas/employees.sql\",\n  \"./schemas/*.sql\",\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for local testing and development.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-auth-presence/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Database Connection\nDESCRIPTION: Environment variables configuration for connecting Laravel to Supabase Postgres database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTION=pgsql\nDATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file by copying the example template file for local development setup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Importing Spec File in Next.js\nDESCRIPTION: Example of importing a specification file in Next.js using JSON import assertion\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport specFile from '~/spec/transforms/analytics_v0_openapi_deparsed.json' with { type: 'json' }\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Group Components in React\nDESCRIPTION: Code snippet showing how to import the Toggle Group and Toggle Group Item components in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group'\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Enum Filters\nDESCRIPTION: Demonstrates how to query data using enum values in WHERE clause conditions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * \nfrom person \nwhere current_mood = 'sad';\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project with CLI\nDESCRIPTION: Command to create a new local Supabase project using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase init\n```\n\n----------------------------------------\n\nTITLE: Creating React Native App with Expo\nDESCRIPTION: Command to create a new React Native application using Expo with TypeScript template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app -t expo-template-blank-typescript my-app\n```\n\n----------------------------------------\n\nTITLE: Using Button as Link with asChild Prop\nDESCRIPTION: Shows how to use the Button component as a wrapper for a Link component using the asChild prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/button.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Button asChild>\n  <Link href=\"/login\">Login</Link>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating WHERE Clause Indexes in PostgreSQL\nDESCRIPTION: Creating indexes for columns used in WHERE clause filtering to improve query performance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_customers_sign_up_date on customers (sign_up_date);\n\ncreate index idx_orders_status on orders (status);\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Guard in Ionic Angular\nDESCRIPTION: Creates a new guard to protect routes in an Ionic Angular application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nionic g guard guards/auth --implements=CanActivate\n```\n\n----------------------------------------\n\nTITLE: Serving Supabase Functions Locally\nDESCRIPTION: Commands to start Supabase services and serve functions locally for testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve --env-file supabase/functions/.env\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres.js Package\nDESCRIPTION: Command to install Postgres.js library using npm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres-js.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i postgres\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson Serializer Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to add the Jackson serializer dependency in a Maven project's pom.xml file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>serializer-jackson</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Realtime Policies Structure in Elixir\nDESCRIPTION: Elixir code showing the structure of policy permissions stored in memory for connected sockets.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n%Policies{\n  broadcast: %BroadcastPolicies{read: false, write: false},\n  presence: %PresencePolicies{read: false, write: false}\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Local Environment to Supabase Project\nDESCRIPTION: Shows how to link a local development environment to a Supabase project using the CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link --project-ref <project-id>\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch Sign-Out Code in Flutter\nDESCRIPTION: This snippet illustrates how to implement the sign-out functionality in the Supabase Flutter client, allowing the user to terminate their session when signed in via Twitch.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> signOut() async {\\n  await supabase.auth.signOut();\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Room States in Dart\nDESCRIPTION: This snippet defines the different states for the rooms page using the BLoC pattern. It includes states for loading, loaded, empty, and error conditions, which will be used to manage the UI state of the rooms page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\npart of 'rooms_cubit.dart';\n\n@immutable\nabstract class RoomState {}\n\nclass RoomsLoading extends RoomState {}\n\nclass RoomsLoaded extends RoomState {\n  final List<Profile> newUsers;\n  final List<Room> rooms;\n\n  RoomsLoaded({\n    required this.rooms,\n    required this.newUsers,\n  });\n}\n\nclass RoomsEmpty extends RoomState {\n  final List<Profile> newUsers;\n\n  RoomsEmpty({required this.newUsers});\n}\n\nclass RoomsError extends RoomState {\n  final String message;\n\n  RoomsError(this.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Chart Legend Components in React/TSX\nDESCRIPTION: Shows how to import the ChartLegend and ChartLegendContent components for implementing custom chart legends.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChartLegend, ChartLegendContent } from '@/components/ui/chart'\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands for setting up the Python environment and installing dependencies using Poetry package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/aws_bedrock_image_search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Supabase Storage: Set Select Policy\nDESCRIPTION: SQL policy that allows authenticated users to select their own objects from any bucket. Uses the `owner_id` column to verify ownership based on the `auth.uid()` function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"User can select their own objects (in any buckets)\"\non storage.objects\nfor select\nto authenticated\nusing (\n    owner_id = (select auth.uid())\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Bedrock Client\nDESCRIPTION: Python code to set up the boto3 client for Amazon Bedrock with AWS credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbedrock_client = boto3.client(\n    'bedrock-runtime',\n    region_name='us-west-2',\n    # Credentials from your AWS account\n    aws_access_key_id='<replace_your_own_credentials>',\n    aws_secret_access_key='<replace_your_own_credentials>',\n    aws_session_token='<replace_your_own_credentials>',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Types in PostgreSQL\nDESCRIPTION: SQL code demonstrating how to create a composite type 'full_name' and a table using that type for storing person data with structured name fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-28-community-day-lw4.mdx#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate type full_name as (\n  first_name     text,\n  middle_names   text[],\n  first_surname  text,\n  second_surname text,\n  reign_name     text\n);\n\ncreate table famous_people (\n  name full_name,\n  occupation text\n);\n```\n\n----------------------------------------\n\nTITLE: Supabase Query Example with Timeout\nDESCRIPTION: JavaScript example showing a query that might trigger the statement timeout.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase.from('big_table').select().eq('unindexed_column', 'value')\n```\n\n----------------------------------------\n\nTITLE: Using Admonition Component with Warning\nDESCRIPTION: JSX implementation of warning message about MessageBird API compatibility using the Admonition component\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/components/AuthSmsProviderConfig/MessageBirdConfig.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Admonition type=\"warning\">\n\nThe MessageBird provider only works with the APIs before the [transition to Bird](https://bird.com/blog/messagebird-is-now-bird). If you are using a new Bird account, this provider will not work properly since it relies on using the old set of [MessageBird APIs](https://developers.messagebird.com/api/sms-messaging/).\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Supabase in Vue Component\nDESCRIPTION: A Vue component that fetches instrument data from a Supabase table and renders it as a list. The data is retrieved on component mount using the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport { supabase } from './lib/supabaseClient'\n\nconst instruments = ref([])\n\nasync function getInstruments() {\n  const { data } = await supabase.from('instruments').select()\n  instruments.value = data\n}\n\nonMounted(() => {\n   getInstruments()\n})\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"instrument in instruments\" :key=\"instrument.id\">{{ instrument.name }}</li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Cal.com Bookings Foreign Table\nDESCRIPTION: SQL to create a foreign table for bookings with a designated rowid column required for insertions. This enables both reading existing bookings and creating new ones through Postgres.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table cal.bookings (\n  attrs jsonb\n)\n  server cal_server\n  options (\n    object 'bookings',\n    rowid_column 'attrs'\n  );\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase Database with Vecs in Python\nDESCRIPTION: This snippet shows how to establish a connection to a Supabase database using the Vecs library in Python. It requires the database connection string and creates a Vecs client for interacting with vector embeddings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/text-deduplication.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Auth in React\nDESCRIPTION: React component implementation showing Supabase authentication setup with session management and Auth UI component integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport './index.css'\nimport { useState, useEffect } from 'react'\nimport { createClient } from '@supabase/supabase-js'\nimport { Auth } from '@supabase/auth-ui-react'\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n\nexport default function App() {\n  const [session, setSession] = useState(null)\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n    })\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  if (!session) {\n    return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)\n  }\n  else {\n    return (<div>Logged in!</div>)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable DataTable Component with TanStack Table\nDESCRIPTION: A client-side React component that implements a data table using TanStack Table and shadcn/ui Table components, handling row selection, headers, and empty states.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { ColumnDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table'\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(header.column.columnDef.header, header.getContext())}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Auth Hook in config.toml\nDESCRIPTION: TOML configuration for setting up an HTTP-based authentication hook with URI endpoint and secrets from environment variables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[auth.hook.send_sms]\nenabled = true\nuri = \"http://host.docker.internal:54321/functions/v1/send_sms\"\n# Comma separated list of secrets\nsecrets = \"env(SEND_SMS_HOOK_SECRETS)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing React Native App with Expo\nDESCRIPTION: Commands to create a new Expo React Native app with TypeScript template and navigate to the project directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app -t expo-template-blank-typescript expo-user-management\n\ncd expo-user-management\n```\n\n----------------------------------------\n\nTITLE: Dialog with Context Menu in React\nDESCRIPTION: This example demonstrates how to use a Dialog component within a Context Menu, including the necessary structure and component nesting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <ContextMenu>\n    <ContextMenuTrigger>Dialog not centered</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Open</ContextMenuItem>\n      <ContextMenuItem>Download</ContextMenuItem>\n      <DialogTrigger asChild>\n        <ContextMenuItem>\n          <span>Delete</span>\n        </ContextMenuItem>\n      </DialogTrigger>\n    </ContextMenuContent>\n  </ContextMenu>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. Are you sure you want to permanently delete this file from our\n        servers?\n      </DialogDescription>\n    </DialogHeader>\n    <DialogFooter>\n      <Button type=\"submit\">Confirm</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JavaScript Client\nDESCRIPTION: Command to install the Supabase JavaScript client library as a dependency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Function for Unnamed Parameters\nDESCRIPTION: Shows how to create a PostgreSQL function that accepts a single unnamed JSON parameter. This function is designed to handle webhook payloads, specifically for storing email bounce data from Postmark.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-postgrest-9.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate function store_bounces(json)\nreturns json\nlanguage sql\nas $$\n  insert into bounces (webhook_id, email)\n  values (\n    ($1->>'ID')::bigint,\n    ($1->>'Email')::text\n  );\n\n  select '{ \"status\": 200 }'::json;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Checking Webhook Queue Count in SQL\nDESCRIPTION: SQL query to check if webhook reads are becoming expensive by counting rows in the net.http_request_queue table. A high count (>20,000) may indicate performance issues.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/interpreting-supabase-grafana-io-charts-MUynDR.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect count(*) as exact_count from net.http_request_queue;\n-- the number should be relatively low <20,000\n```\n\n----------------------------------------\n\nTITLE: Querying HTTP Request Queue in Supabase SQL\nDESCRIPTION: This SQL query checks the contents of the net.http_request_queue table to ensure it's empty before attempting to resolve the permission error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/42501--permission-denied-for-table-httprequestqueue-KnozmQ.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from net.http_request_queue\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component via CLI\nDESCRIPTION: Command to install the Slider component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/slider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add slider\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Setting Supabase Secrets\nDESCRIPTION: Alternative command to directly set the OpenAI API key as a secret for the Edge Function using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set OPENAI_API_KEY=<your-api-key>\n```\n\n----------------------------------------\n\nTITLE: Defining Token struct for Postgres Language Server in Rust\nDESCRIPTION: Definition of a custom Token struct used in the Postgres Language Server implementation, combining information from libpg_query's ScanToken with additional metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub struct Token {\n    /// The kind of the token\n    pub kind: SyntaxKind,\n    /// Text from the input\n    pub text: String,\n    /// Range within the input\n    pub span: TextRange,\n    /// Variants from `ScanToken.keyword_kind` + `Whitespace`\n    pub token_type: TokenType,\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML/JavaScript\nDESCRIPTION: HTML code snippet for embedding a YouTube video player with specific parameters and styling classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-13-supabase-auth-helpers-with-sveltekit-support.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/VgYPGOr3F-4\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring RedwoodJS Environment in redwood.toml\nDESCRIPTION: RedwoodJS configuration file that includes environment variables to be exposed to the web side of the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[web]\n  title = \"Supabase Redwood Tutorial\"\n  port = 8910\n  apiProxyPath = \"/.redwood/functions\"\n  includeEnvironmentVariables = [\"SUPABASE_URL\", \"SUPABASE_KEY\"]\n[api]\n  port = 8911\n[browser]\n  open = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Dependencies for WatermelonDB in Expo\nDESCRIPTION: Sets up the necessary native dependencies for WatermelonDB in the Expo app configuration file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"ios\": {\n            \"extraPods\": [\n              {\n                \"name\": \"simdjson\",\n                \"configurations\": [\"Debug\", \"Release\"],\n                \"path\": \"../node_modules/@nozbe/simdjson\",\n                \"modular_headers\": true\n              }\n            ]\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in PostgreSQL\nDESCRIPTION: SQL command to enable the pgvector extension in PostgreSQL for vector operations\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension vector\nwith\n  schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Files\nDESCRIPTION: Command to copy local environment file for production use.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp ./supabase/.env.local ./supabase/.env\n```\n\n----------------------------------------\n\nTITLE: Supabase Local Deployment Command\nDESCRIPTION: Shell command to restart Supabase containers and apply template changes locally.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsupabase stop && supabase start\n```\n\n----------------------------------------\n\nTITLE: Linking Supabase Project with CLI\nDESCRIPTION: Links your local environment to your Supabase project using the project reference ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link --project-ref your-project-ref\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted Values in TOML Configuration\nDESCRIPTION: Alternative approach using encrypted values directly in config.toml for secure storage\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[auth.external.github]\nenabled = true\nsecret = \"encrypted:<encrypted-value>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Variants Helper in React\nDESCRIPTION: How to import the badgeVariants helper function for creating badge-like links.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/badge.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { badgeVariants } from '@/components/ui/badge'\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Function for Log Drain (Bash)\nDESCRIPTION: Commands to create and deploy an edge function for handling log drain data in Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/log-drains.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new hello-world\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy hello-world --project-ref [PROJECT REF]\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Level Timeout\nDESCRIPTION: Changes the statement timeout setting for a specific database role to 10 minutes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter role example_role set statement_timeout = '10min'; -- could also use seconds '10s'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment variable configuration for ElevenLabs API key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nELEVENLABS_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Flutter Package via Terminal\nDESCRIPTION: Command to add the Supabase Flutter package to a Flutter project using the flutter pub add command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub add supabase_flutter\n```\n\n----------------------------------------\n\nTITLE: Carousel with Orientation Option\nDESCRIPTION: Example of setting the orientation of the carousel using the orientation prop.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel orientation=\"vertical | horizontal\">\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner and Next-themes Dependencies\nDESCRIPTION: Command to install the required dependencies for using Sonner in a React project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sonner next-themes\n```\n\n----------------------------------------\n\nTITLE: JavaScript Entry Point Configuration - TOML\nDESCRIPTION: TOML configuration for specifying a JavaScript file as the entry point for an Edge Function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/development-tips.mdx#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[functions.hello-world]\nentrypoint = './functions/hello-world/index.js'\n```\n\n----------------------------------------\n\nTITLE: PgBouncer Connection String Format\nDESCRIPTION: Example format of a PgBouncer connection string for Supabase database connections\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-do-i-update-connection-pool-settings-in-my-dashboard-wAxTJ_.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npostgres://postgres:[YOUR-PASSWORD]@db.xxxxxxxxxx.supabase.co:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Functions\nDESCRIPTION: Command to deploy Supabase Functions to the linked remote Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Turnstile React Component\nDESCRIPTION: Import statement for the Cloudflare Turnstile React component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Turnstile } from '@marsidev/react-turnstile'\n```\n\n----------------------------------------\n\nTITLE: Creating Test Directory Structure with Bash\nDESCRIPTION: Command to create a directory structure for database tests within a Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/testing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ./supabase/tests/database\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Identity with Swift\nDESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Swift client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.auth.linkIdentity(provider: .google)\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in Supabase Project\nDESCRIPTION: CLI command to list the secrets set in the Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase secrets list\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in FerretDB\nDESCRIPTION: MongoDB update operation to modify a player's position in FerretDB\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\ndb.players.updateOne(\n    { player_name: \"Giggs\" },\n    { $set: { position: \"CM\" } }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Sidebar Component via CLI\nDESCRIPTION: Command to install the sidebar component using the shadcn CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add sidebar\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages that Start with a Phrase\nDESCRIPTION: This regex pattern uses the ^ operator to match only messages that start with a specific phrase. The example matches event messages that begin with 'connection'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- find only messages that start with connection\nregexp_contains(event_message, '^connection')\n```\n\n----------------------------------------\n\nTITLE: Using Aspect Ratio Component with Next.js Image\nDESCRIPTION: This example demonstrates how to use the Aspect Ratio component with a Next.js Image. It sets a 16:9 aspect ratio for the image and applies some styling. This is a common use case for maintaining consistent image dimensions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"w-[450px]\">\n  <AspectRatio ratio={16 / 9}>\n    <Image src=\"...\" alt=\"Image\" className=\"rounded-md object-cover\" />\n  </AspectRatio>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Video Player Implementation with Controls\nDESCRIPTION: HTML5 video player implementation with autoplay, loop, and muted attributes for displaying MP4 content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-06-database-build-v2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video\n  className=\"overflow-hidden rounded-md border wide\"\n  width=\"99%\"\n  autoPlay\n  loop\n  muted\n  playsInline\n  controls={true}\n>\n  <source src=\"/images/blog/launch-week-13/day-5-database-build-v2/byo-llm.mp4\" type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Replacing Existing Postgres Configuration Overrides\nDESCRIPTION: This snippet shows how to replace all existing Postgres configuration overrides with new ones using the Supabase CLI. It demonstrates the use of the --replace-existing-overrides flag.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase --experimental \\\n--project-ref <project-ref> \\\npostgres-config update --config max_parallel_workers=3 \\\n--replace-existing-overrides\n```\n\n----------------------------------------\n\nTITLE: Local Development of Supabase Location Function\nDESCRIPTION: Command to serve the location function locally with environment variables loaded from a .env.local file. The --no-verify-jwt flag disables JWT verification for testing purposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/location/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions serve --env-file ./supabase/.env.local --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Location Getter Generation in Rust\nDESCRIPTION: Procedural macro implementation for generating node location getter code\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub fn get_location_mod(_item: proc_macro2::TokenStream) -> proc_macro2::TokenStream {\n\t\t// Parse the proto file using a custom parser\n\t\tlet parser = ProtoParser::new(\"libpg_query/protobuf/pg_query.proto\");\n    let proto_file = parser.parse();\n\n\t\t// get all node identifiers for the left side of the match arm\n\t\tlet node_identifiers = node_identifiers(&proto_file.nodes);\n\t\t// get a TokenStream for each node that returns the location\n\t\t// if it is part of the node properties\n    let location_idents = location_idents(&proto_file.nodes);\n\n    quote! {\n        /// Returns the location of a node\n        pub fn get_location(node: &NodeEnum) -> Option<usize> {\n            match node {\n                #(NodeEnum::#node_identifiers(n) => #location_idents),*\n\t\t\t\t\t\t}\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Index in PostgreSQL\nDESCRIPTION: Creating a composite index on multiple columns to optimize queries filtering on multiple conditions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate index idx_customers_sign_up_date_priority on customers (sign_up_date, priority);\n```\n\n----------------------------------------\n\nTITLE: Basic Multi Select Implementation\nDESCRIPTION: Demonstrates the basic implementation of a multi-select component with fruit options. Shows the component structure with trigger and content sections.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/multi-select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MultiSelector\n  open={open}\n  onOpenChange={setOpen}\n  selected={selected}\n  onSelectedChange={onSelectedChange}\n>\n  <MultiSelectorTrigger className=\"w-72\" label=\"Fruits\" />\n  <MultiSelectorContent sameWidthAsTrigger>\n    <MultiSelectorItem value=\"Apple\">Apple</MultiSelectorItem>\n    <MultiSelectorItem value=\"Banana\">Banana</MultiSelectorItem>\n    <MultiSelectorItem value=\"Grape\">Grape</MultiSelectorItem>\n    <MultiSelectorItem value=\"Strawberry\">Strawberry</MultiSelectorItem>\n  </MultiSelectorContent>\n</MultiSelector>\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase functions\nDESCRIPTION: This shell command deploys the Firebase functions to make the changes effective in the Firebase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Setting Server to Primary in SQL\nDESCRIPTION: A SQL command to set the server to 'primary' for guaranteeing read-after-writes outside of transactions or across clients. This is mentioned as planned future work for custom server targeting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-supavisor-postgres-connection-pooler.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET SERVER 'primary'\n```\n\n----------------------------------------\n\nTITLE: Installing Calendar Component via CLI\nDESCRIPTION: Command to install the Calendar component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/calendar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add calendar\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Command to initialize a Supabase project in the current directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Disabling Role Inheritance in PostgreSQL\nDESCRIPTION: Modifies an existing role to prevent inheritance of permissions from parent roles.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter role \"child_role_name\" noinherit;\n```\n\n----------------------------------------\n\nTITLE: Styling Link as Button using buttonVariants\nDESCRIPTION: Demonstrates how to apply button styling to a Link component using the buttonVariants helper function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/button.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Link className={buttonVariants({ variant: 'outline' })}>Click here</Link>\n```\n\n----------------------------------------\n\nTITLE: Importing Admonition Component in TSX\nDESCRIPTION: This snippet shows how to import the Admonition component from the ui-patterns/admonition module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/admonition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Admonition } from 'ui-patterns/admonition'\n```\n\n----------------------------------------\n\nTITLE: Token Usage in HTML Template\nDESCRIPTION: Example of using OTP token variable in email template.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Here is your one time password: {{ .Token }}</p>\n```\n\n----------------------------------------\n\nTITLE: Kakao Authentication with Kotlin\nDESCRIPTION: Kotlin implementation for signing in users with Kakao OAuth in a Supabase-enabled application\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun signInWithKakao() {\n\tsupabase.auth.signInWith(Kakao)\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Materialized View\nDESCRIPTION: Shows how to refresh a materialized view to update its stored data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nrefresh materialized view transcripts;\n```\n\n----------------------------------------\n\nTITLE: Importing Input OTP Components\nDESCRIPTION: Example of how to import the Input OTP components from the UI components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot } from '@/components/ui/input-otp'\n```\n\n----------------------------------------\n\nTITLE: Starting the React Native App\nDESCRIPTION: Command to start the React Native application in development mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: MFA Verification Hook Output Example\nDESCRIPTION: Example JSON response structure for rejecting an MFA verification attempt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"decision\": \"reject\",\n  \"message\": \"You have exceeded maximum number of MFA attempts.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Llamafile Function in Supabase\nDESCRIPTION: Command to generate a new Supabase Edge Function for Llamafile integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase functions new llamafile\n```\n\n----------------------------------------\n\nTITLE: Managing Database Objects and Privileges\nDESCRIPTION: Series of commands showing table deletion and privilege revocation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# as junior_dev\npostgres=> drop table public.apps;\nDROP TABLE\n\n# as postgres\npostgres=> revoke create on schema public from junior_dev;\nREVOKE\n```\n\n----------------------------------------\n\nTITLE: Fetching Sidebar Data with React Query\nDESCRIPTION: Shows how to use React Query to fetch and display sidebar menu items, with appropriate loading states and error handling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NavProjects() {\n  const { data, isLoading } = useQuery()\n\n  if (isLoading) {\n    return (\n      <SidebarMenu>\n        {Array.from({ length: 5 }).map((_, index) => (\n          <SidebarMenuItem key={index}>\n            <SidebarMenuSkeleton showIcon />\n          </SidebarMenuItem>\n        ))}\n      </SidebarMenu>\n    )\n  }\n\n  if (!data) {\n    return ...\n  }\n\n  return (\n    <SidebarMenu>\n      {data.map((project) => (\n        <SidebarMenuItem key={project.name}>\n          <SidebarMenuButton asChild>\n            <a href={project.url}>\n              <project.icon />\n              <span>{project.name}</span>\n            </a>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      ))}\n    </SidebarMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Visibility Controls in TanStack Table\nDESCRIPTION: Adds column visibility management to the DataTable component with a dropdown menu for toggling column visibility. Integrates TanStack Table's visibility API with UI controls for column show/hide functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={table.getColumn(\"email\")?.getFilterValue() as string}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter(\n                (column) => column.getCanHide()\n              )\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration\nDESCRIPTION: YAML configuration specifying required Flutter dependencies including Supabase, Google Maps, and utilities\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter: ^2.5.9\ngoogle_maps_flutter: ^2.7.0\ngeolocator: ^12.0.0\nduration: ^3.0.13\nintl: ^0.19.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Image Component in React/JSX\nDESCRIPTION: JSX code for rendering a responsive image component with light/dark mode support and caption styling\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-supabase-branching.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Img\n  src={{\n    light: '/images/blog/lwx-supabase-branching/branching-ui--light.png',\n    dark: '/images/blog/lwx-supabase-branching/branching-ui--dark.png',\n  }}\n  wide={true}\n  caption=\"New Branching UI in the Supabase dashboard\"\n  captionAlign=\"left\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Foreign Table for Paddle Customers Data in SQL\nDESCRIPTION: This SQL code creates a foreign table to store Paddle customer data. It defines the table structure and links it to the previously created Paddle foreign server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- create dedicated schema for Paddle foreign tables\ncreate schema if not exists paddle;\n\n-- create foreign table\ncreate foreign table paddle.customers (\n  id text,\n  name text,\n  email text,\n  status text,\n  custom_data jsonb,\n  created_at timestamp,\n  updated_at timestamp,\n  attrs jsonb\n)\nserver paddle_server\noptions (\n  object 'customers',\n  rowid_column 'id'\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function for OG Image Generation\nDESCRIPTION: Command to deploy the 'lw11-og' Supabase function for Open Graph image generation. This deployment configuration disables JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lw11-og/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy lw11-og --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App with Terminal Command\nDESCRIPTION: This command runs the Flutter application, typically launching it in a web browser by default.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Package for Flutter\nDESCRIPTION: Command to install the Supabase Flutter package using Flutter's package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v1/installing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub add supabase_flutter\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Hack Night Event Parameters in YAML\nDESCRIPTION: YAML front matter configuration that defines parameters for a Supabase Hack Night event. Specifies event title, subtitle, type, link, date, timezone, duration and categories.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_events/2024-09-05__hack-night-v0-19.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'hack night v0.19 - Miami Beach, Florida'\nsubtitle: 'where miami builds cool shit.'\ntype: 'talk'\nonDemand: false\ndisable_page_build: true\nlink: { href: https://lu.ma/x62id5w8, target: '_blank' }\ndate: '2024-09-05T18:00:00.000-04:00'\ntimezone: 'America/New_York'\nduration: '5 hours'\ncategories:\n  - talk\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Function with a Known Error for plpgsql_check Demo\nDESCRIPTION: SQL code to create a table 'place' and a function 'some_func' with a deliberate error. The function references a non-existent column 'created_at' in the 'place' table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table place(\n  x float,\n  y float\n);\n\ncreate or replace function public.some_func()\n  returns void\n  language plpgsql\nas $$\ndeclare\n  rec record;\nbegin\n  for rec in select * from place\n  loop\n    -- Bug: There is no column `created_at` on table `place`\n    raise notice '%', rec.created_at;\n  end loop;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Sign In with Zoom OAuth in JavaScript\nDESCRIPTION: This code snippet demonstrates how to sign in a user with Zoom OAuth using the Supabase JavaScript client library. It initializes the Supabase client and calls the `signInWithOAuth` function, passing in 'zoom' as the provider. The function returns a promise that resolves with the user's data or rejects with an error.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithZoom() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'zoom',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace UI with Angular and Tailwind\nDESCRIPTION: The HTML template for the workspace component that displays the user's boards and provides options to create new boards and sign out. It uses Tailwind CSS for styling and Gravatar for displaying user avatars.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"bg-emerald-600\">\n  <nav class=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n    <div\n      class=\"flex w-full items-center justify-between border-b border-emerald-500 py-6 lg:border-none\"\n    >\n      <div class=\"flex items-center\">\n        <a routerLink=\"/workspace\">\n          <img class=\"h-6 w-auto\" src=\"https://supabase.com/docs/supabase-dark.svg\" alt=\"\" />\n        </a>\n      </div>\n      <div class=\"ml-10 flex items-center space-x-4\">\n        <span class=\"text-white\">{{ (user | async)?.email }}</span>\n        <img ngxGravatar [email]=\"(user | async)?.email\" />\n\n        <button\n          (click)=\"signOut()\"\n          class=\"inline-block rounded-md border border-transparent bg-white py-1 px-4 text-base font-medium text-emerald-600 hover:bg-emerald-50\"\n        >\n          Logout\n        </button>\n      </div>\n    </div>\n  </nav>\n</header>\n\n<main class=\"mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8\">\n  <ul\n    role=\"list\"\n    class=\"grid grid-cols-2 gap-x-4 gap-y-8 sm:grid-cols-3 sm:gap-x-6 lg:grid-cols-4 xl:gap-x-8\"\n  >\n    <li\n      *ngFor=\"let board of boards\"\n      [routerLink]=\"board.boards.id\"\n      class=\"relative h-52 rounded bg-emerald-200 py-4 px-4 text-lg font-semibold hover:cursor-pointer hover:bg-emerald-300\"\n    >\n      {{ board.boards.title }}\n    </li>\n\n    <li\n      (click)=\"startBoard()\"\n      class=\"relative h-52 rounded bg-emerald-500 py-4 px-4 text-lg font-semibold hover:cursor-pointer\"\n    >\n      + New board\n    </li>\n  </ul>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Revoking Execute Permission\nDESCRIPTION: Demonstrates revoking execute permission from junior_dev role, which doesn't affect function execution due to public role privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> revoke execute on function add(integer, integer) from junior_dev;\nREVOKE\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Supabase CLI\nDESCRIPTION: Commands to start Supabase and generate TypeScript types using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase gen types typescript --local > DatabaseDefinitions.ts\n```\n\n----------------------------------------\n\nTITLE: Production Deployment Commands\nDESCRIPTION: Commands for deploying to Supabase remote environment\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx dotenvx run -f supabase/.env.production -- npx supabase link\nnpx dotenvx run -f supabase/.env.production -- npx supabase db push\nnpx dotenvx run -f supabase/.env.production -- npx supabase config push\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinX Serialization Plugin in Groovy Build Script\nDESCRIPTION: Adds the KotlinX Serialization plugin to a Kotlin project using Gradle with the Groovy DSL. This is required to use the default serialization method in supabase-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.plugin.serialization' version 'KOTLIN_VERSION'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase\nDESCRIPTION: Environment variables configuration for Supabase URL and anonymous key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_URL=YOUR_SUPABASE_URL\nSUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Authentication with Password in Supabase.js v1\nDESCRIPTION: Example of signing in with email and password using the signIn() method in Supabase.js v1.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst { data } = await supabase.auth.signIn({\n  email: 'hello@example',\n  password: 'pass',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Menus with InnerSideMenu in React\nDESCRIPTION: Example demonstrating how to create a collapsible menu section using InnerSideMenuCollapsible components. The collapsible menu includes a trigger element that toggles visibility of menu items, with defaultOpen setting controlling initial state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/inner-side-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  InnerSideMenuCollapsible,\n  InnerSideMenuCollapsibleTrigger,\n  InnerSideMenuCollapsibleContent,\n  InnerSideMenuItem,\n} from 'ui-patterns/InnerSideMenu'\n\nfunction app() {\n  return (\n    <InnerSideMenuCollapsible key={category} defaultOpen>\n      <InnerSideMenuCollapsibleTrigger title={category} />\n      <InnerSideMenuCollapsibleContent>\n        <InnerSideMenuItem href=\"/dashboard\">Dashboard</InnerSideMenuItem>\n        <InnerSideMenuItem href=\"/team\">Team</InnerSideMenuItem>\n        <InnerSideMenuItem href=\"/settings\">Settings</InnerSideMenuItem>\n      </InnerSideMenuCollapsibleContent>\n    </InnerSideMenuCollapsible>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Setup - Development Configuration\nDESCRIPTION: Configuration line required for community contributors to set up local development environment for Supabase docs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/DEVELOPERS.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_IS_PLATFORM=false\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Canvas UI in Flutter Collaborative Drawing App\nDESCRIPTION: This build method constructs the UI for the collaborative canvas application. It includes a MouseRegion for cursor tracking, a GestureDetector for handling drawing interactions, and a set of mode selection buttons for different drawing tools.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: MouseRegion(\n        onHover: (event) {\n          _syncCanvasObject(event.position);\n        },\n        child: Stack(\n          children: [\n            // The main canvas\n            GestureDetector(\n              onPanDown: _onPanDown,\n              onPanUpdate: _onPanUpdate,\n              onPanEnd: onPanEnd,\n              child: CustomPaint(\n                size: MediaQuery.of(context).size,\n                painter: CanvasPainter(\n                  userCursors: _userCursors,\n                  canvasObjects: _canvasObjects,\n                ),\n              ),\n            ),\n\n            // Buttons to change the current mode.\n            Positioned(\n              top: 0,\n              left: 0,\n              child: Row(\n                children: _DrawMode.values\n                    .map((mode) => IconButton(\n                          iconSize: 48,\n                          onPressed: () {\n                            setState(() {\n                              _currentMode = mode;\n                            });\n                          },\n                          icon: Icon(mode.iconData),\n                          color: _currentMode == mode ? Colors.green : null,\n                        ))\n                    .toList(),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Checking Postgres Log Level in SQL\nDESCRIPTION: SQL command to check the current log_min_messages setting in Postgres, which determines which log messages are displayed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nshow log_min_messages;\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Transformations in Supabase Storage\nDESCRIPTION: Demonstrates how to use image transformation options including width, height, quality and format when downloading images from Supabase Storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.storage.from('bucket').download('image.jpg', {\n  transform: {\n    width: 800,\n    height: 300,\n    quality: 75,\n    format: 'origin',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Embla Carousel React Dependency\nDESCRIPTION: Command to install the required Embla Carousel React dependency using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install embla-carousel-react\n```\n\n----------------------------------------\n\nTITLE: Implementing Telegram Bot Edge Function for Location Updates\nDESCRIPTION: Edge Function that processes location updates from a Telegram Bot and inserts them into Supabase database using RPCs. Handles both initial and edited location messages while implementing error handling and authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-04-postgres-realtime-location-sharing-with-maplibre.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bot, webhookCallback } from 'https://deno.land/x/grammy@v1.20.3/mod.ts'\nimport { createClient } from 'jsr:@supabase/supabase-js@2.39.7'\nimport { Database } from '../_shared/database.types.ts'\n\nconst token = Deno.env.get('BOT_TOKEN')\nif (!token) throw new Error('BOT_TOKEN is unset')\n\nconst supabase = createClient<Database>(\n  Deno.env.get('SUPABASE_URL')!,\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n)\n\nconst bot = new Bot(token)\n// ...\n\nbot.on('edit:location', async (ctx) => {\n  const {\n    location,\n    from: { id: user_id },\n    edit_date,\n  } = ctx.update.edited_message!\n  if (location) {\n    // Insert into db\n    const { error } = await supabase.rpc('location_insert', {\n      _user_id: user_id,\n      _lat: location.latitude,\n      _long: location.longitude,\n      _timestamp: edit_date,\n    })\n    if (\n      error &&\n      error.message !==\n        'null value in column \"event_id\" of relation \"locations\" violates not-null constraint' &&\n      error.message !== 'duplicate key value violates unique constraint \"locations_pkey\"'\n    ) {\n      return console.log(`edit:location:insert:error:user:${user_id}: ${error.message}`)\n    }\n  }\n  return\n})\n\nconst handleUpdate = webhookCallback(bot, 'std/http')\n\nDeno.serve(async (req) => {\n  const headers = req.headers\n  try {\n    const url = new URL(req.url)\n    if (url.searchParams.get('secret') !== Deno.env.get('FUNCTION_SECRET')) {\n      return new Response('not allowed', { status: 405 })\n    }\n\n    return await handleUpdate(req)\n  } catch (err) {\n    console.log(headers)\n    console.error(err)\n  }\n  return new Response()\n})\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query Performance Test\nDESCRIPTION: Basic SELECT query used to benchmark Supavisor performance at 5,000 QPS, returning values from an inline table.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-11-supavisor-1-million.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom (\n    values\n    (1, 'one'),\n    (2, 'two'),\n    (3, 'three')\n) as t (num, letter);\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase OAuth Callback URL Format\nDESCRIPTION: Shows the structure of the callback URL used for OAuth authentication in Supabase projects. The URL includes a project-specific reference.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/social_provider_setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<project-ref>.supabase.co/auth/v1/callback\n```\n\n----------------------------------------\n\nTITLE: Adding Project URL to Vault for Cloud Deployment\nDESCRIPTION: SQL command to add the project URL secret to vault for cloud deployment environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  vault.create_secret('<project-url>', 'project_url');\n```\n\n----------------------------------------\n\nTITLE: Referencing Reauthentication API in Supabase Auth\nDESCRIPTION: An API reference to the Supabase Auth reauthentication method that needs to be called when a user needs to reauthenticate to change their password.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/auth_error_codes_table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsupabase.auth.reauthenticate()\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Component via CLI\nDESCRIPTION: Command to install the Alert component using the shadcn-ui CLI tool\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert copy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add alert\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component via CLI\nDESCRIPTION: Command to install the Progress component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/progress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add progress\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone Authentication\nDESCRIPTION: Implementation of phone number authentication using SupaPhoneAuth widget.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSupaPhoneAuth(\n  authAction: SupaAuthAction.signUp,\n  onSuccess: (AuthResponse response) {},\n),\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Component Dependencies\nDESCRIPTION: Command to install the required dependency for the Toggle Group component manually.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toggle-group\n```\n\n----------------------------------------\n\nTITLE: Creating New Flutter Project\nDESCRIPTION: Initialize a new Flutter project using the flutter create command\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create mfa_app\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component via CLI\nDESCRIPTION: Command to install the checkbox component using the shadcn-ui CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/checkbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add checkbox\n```\n\n----------------------------------------\n\nTITLE: Displaying Image of database.build v2 Desktop Support in HTML\nDESCRIPTION: This HTML snippet embeds an image to showcase the desktop support for the redesigned database.build v2. It includes classes for styling and attributes for zooming and wide display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-06-database-build-v2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Img\n  className=\"border-none\"\n  alt=\"database.build v2 desktop support\"\n  src=\"/images/blog/launch-week-13/day-5-database-build-v2/byo-llm.png\"\n  wide\n  zoomable\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Command Menu Components in React\nDESCRIPTION: This snippet shows how to import the necessary components from the 'ui-patterns/CommandMenu' module for implementing a command menu.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/commandmenu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  CommandInput,\n  CommandList,\n  CommandMenu,\n  CommandMenuTrigger as CommandMenuTriggerPrimitive,\n  CommandProvider,\n  useRegisterCommands,\n} from 'ui-patterns/CommandMenu'\n```\n\n----------------------------------------\n\nTITLE: MFA Verification Attempt Input Example\nDESCRIPTION: Example JSON payload that Supabase Auth sends to the MFA verification hook containing factor and user information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"factor_id\": \"6eab6a69-7766-48bf-95d8-bd8f606894db\",\n  \"user_id\": \"3919cb6e-4215-4478-a960-6d3454326cec\",\n  \"valid\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Application\nDESCRIPTION: Command to start the Flutter application in development mode. This command can be used to run the game on any supported Flutter platform.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/flutter-multiplayer-shooting-game/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi Serializer Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to add the Moshi serializer dependency in a Maven project's pom.xml file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>serializer-moshi</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase via Deno\nDESCRIPTION: Command to install Supabase using Deno's 'add' command. This adds the Supabase dependency to your Deno project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno add @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Container Shell\nDESCRIPTION: Command to access the interactive shell of the Grafana Docker container.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/grafana-not-displaying-data-sXJrMj.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it <container id> bash\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS URL Scheme\nDESCRIPTION: Configuration for custom URL scheme in iOS Info.plist file to enable magic link functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_27\n\nLANGUAGE: plist\nCODE:\n```\n\t<key>CFBundleURLTypes</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>CFBundleURLSchemes</key>\n\t\t\t\t<array>\n\t\t\t\t\t<string>supachat</string>\n\t\t\t\t</array>\n\t\t\t</dict>\n\t\t</array>\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Realtime Pricing Documentation\nDESCRIPTION: Markdown structure defining the documentation layout for Supabase Realtime pricing, including partial imports for specific pricing details and links to detailed usage management guides.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/pricing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: 'pricing'\ntitle: 'Realtime Pricing'\n---\n\nYou are charged for the number of Realtime messages and the number of Realtime peak connections.\n\n## Messages\n\n<$Partial path=\"billing/pricing/pricing_realtime_messages.mdx\" />\n\nFor a detailed explanation of how charges are calculated, refer to [Manage Realtime Messages usage](/docs/guides/platform/manage-your-usage/realtime-messages).\n\n## Peak connections\n\n<$Partial path=\"billing/pricing/pricing_realtime_connections.mdx\" />\n\nFor a detailed explanation of how charges are calculated, refer to [Manage Realtime Peak Connections usage](/docs/guides/platform/manage-your-usage/realtime-peak-connections).\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React\nDESCRIPTION: Code snippet showing how to import the Slider component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/slider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from '@/components/ui/slider'\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Supabase-js v2 Using npm\nDESCRIPTION: Shows the npm command to upgrade to supabase-js v2.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @supabase/supabase-js@2\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Page Component in TypeScript with Ionic Angular\nDESCRIPTION: This code snippet shows the implementation of the MessagesPage component in Ionic Angular. It handles loading group information, retrieving messages, and subscribing to realtime updates.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from './../../services/auth.service'\nimport { DataService } from './../../services/data.service'\nimport { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { IonContent } from '@ionic/angular'\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.page.html',\n  styleUrls: ['./messages.page.scss'],\n})\nexport class MessagesPage implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild(IonContent) content: IonContent\n  group = null\n  messages = []\n  currentUserId = null\n  messageText = ''\n\n  constructor(\n    private route: ActivatedRoute,\n    private data: DataService,\n    private authService: AuthService\n  ) {}\n\n  async ngOnInit() {\n    const groupid = this.route.snapshot.paramMap.get('groupid')\n    this.group = await this.data.getGroupById(groupid)\n    this.currentUserId = this.authService.getCurrentUserId()\n    this.messages = await this.data.getGroupMessages(groupid)\n    this.data.listenToGroup(groupid).subscribe((msg) => {\n      this.messages.push(msg)\n      setTimeout(() => {\n        this.content.scrollToBottom(200)\n      }, 100)\n    })\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.content.scrollToBottom(200)\n    }, 300)\n  }\n\n  loadMessages() {}\n\n  async sendMessage() {\n    await this.data.addGroupMessage(this.group.id, this.messageText)\n    this.messageText = ''\n  }\n\n  ngOnDestroy(): void {\n    this.data.unsubscribeGroupChanges()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Error Page in Svelte\nDESCRIPTION: A simple error page that users are redirected to when there's an issue with authentication token confirmation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<p>Login error</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal with Custom Footer in JSX\nDESCRIPTION: Illustrates the use of a custom footer in a modal component using the ComponentPreview element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/modal.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"modal-custom-footer\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Component via CLI\nDESCRIPTION: Command to install the Alert component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add alert\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Component via CLI\nDESCRIPTION: Command to install the Skeleton component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/skeleton.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add skeleton\n```\n\n----------------------------------------\n\nTITLE: Using Badge Component in React JSX\nDESCRIPTION: Example of using the Badge component with an outline variant in React JSX.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/badge.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Badge variant=\"outline\">Badge</Badge>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flutter Project\nDESCRIPTION: Commands to create a new Flutter project for the chat application and navigate to the project directory. This is the initial step to set up the development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create my_chat_app\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd my_chat_app\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Updating Supabase CLI\nDESCRIPTION: Commands for updating the Supabase CLI across different platforms.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbrew upgrade supabase\n```\n\nLANGUAGE: powershell\nCODE:\n```\nscoop update supabase\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Changes to Remote\nDESCRIPTION: Pushes local database changes to the remote Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db push\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Component\nDESCRIPTION: Example showing how to import the Calendar component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/calendar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Calendar } from '@/components/ui/calendar'\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI on Windows\nDESCRIPTION: Install the Supabase CLI using Scoop package manager on Windows.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nscoop bucket add supabase https://github.com/supabase/scoop-bucket.git\nscoop install supabase\n```\n\n----------------------------------------\n\nTITLE: Installing Packages in Specific Workspaces\nDESCRIPTION: Commands for installing a package in a specific workspace within the Supabase monorepo. This example shows how to install React in the Studio workspace.\nSOURCE: https://github.com/supabase/supabase/blob/master/DEVELOPERS.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/studio\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add react\n```\n\n----------------------------------------\n\nTITLE: Supabase Client Initialization - Previous Version\nDESCRIPTION: Shows how Supabase client was initialized in version 1.x with configuration parameters directly passed to the initialize method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: supabaseUrl,\n  anonKey: supabaseKey,\n  authFlowType: AuthFlowType.pkce,\n  storageRetryAttempts: 10,\n  realtimeClientOptions: const RealtimeClientOptions(\n    logLevel: RealtimeLogLevel.info,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Security Definer Function for User Teams in PostgreSQL\nDESCRIPTION: This SQL snippet defines a security definer function 'user_teams()' that returns an array of team IDs for the authenticated user. It queries the team_user table to fetch team IDs associated with the current user's ID.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION user_teams()\n    RETURNS int[] as\n$$\nbegin\n    return array( select team_id from team_user where auth.uid() = user_id);\nend;\n$$ language plpgsql security definer;\n```\n\n----------------------------------------\n\nTITLE: Using SidebarTrigger within SidebarProvider\nDESCRIPTION: Shows how to implement a SidebarTrigger component that toggles the sidebar visibility, wrapped within the required SidebarProvider context.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarProvider>\n  <Sidebar />\n  <main>\n    <SidebarTrigger />\n  </main>\n</SidebarProvider>\n```\n\n----------------------------------------\n\nTITLE: Starting Wrangler Development Server\nDESCRIPTION: Command to start the Wrangler development server for local testing of Cloudflare Worker implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-cloudflare-workers-kv/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Deploying the og-images function to Supabase\nDESCRIPTION: This command deploys the og-images function to the Supabase platform. The --no-verify-jwt flag disables JWT verification during the deployment process, which is necessary for this function.\nSOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/og-images/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"supabase functions deploy og-images --no-verify-jwt\"\n```\n\n----------------------------------------\n\nTITLE: Command Dialog Implementation with Keyboard Shortcut\nDESCRIPTION: Function component that implements a Command Dialog with keyboard shortcut (Cmd/Ctrl+K) for opening and closing the dialog.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/command.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener('keydown', down)\n    return () => document.removeEventListener('keydown', down)\n  }, [])\n\n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: Embeds a tweet from Twitter using the Twitter embed script and blockquote element. Shows a Supabase community member's tweet about Launch Week swag.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-community-day.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\">\n  <p lang=\"en\" dir=\"ltr\">\n    Thanks to <a href=\"https://twitter.com/supabase?ref_src=twsrc%5Etfw\">@supabase</a> for this\n    little beauty (the hat, not the cat).\n    <br />\n    <br />\n    Now I've just got to pry it away from Peanut 🥜 😂\n    <a href=\"https://t.co/POBdVZrF5N\">pic.twitter.com/POBdVZrF5N</a>\n  </p>\n  &mdash; Daniel Cranney 🇬🇧 (@danielcranney) <a href=\"https://twitter.com/danielcranney/status/1557249589182447616?ref_src=twsrc%5Etfw\">August 10, 2022</a>\n</blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Deep Links for Authentication\nDESCRIPTION: XML configuration for iOS Info.plist to register deep links for the Flutter chat app, allowing users to return to the app after confirming their email address via Supabase authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... other tags -->\n<plist>\n<dict>\n  <!-- ... other tags -->\n\n  <!-- Add this array for Deep Links -->\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>io.supabase.chat</string>\n      </array>\n    </dict>\n  </array>\n  <!-- ... other tags -->\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Border Tailwind Class Examples\nDESCRIPTION: Illustrates border utility classes for various UI component states and contexts\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/tailwind-theming.md#2025-04-21_snippet_2\n\nLANGUAGE: tailwind\nCODE:\n```\nborder-overlay\nborder-alternative\ntext-border-control\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence for User Typing Indicator in JavaScript\nDESCRIPTION: This example shows how to use Supabase Realtime's Presence feature to create a 'user is typing' indicator. It demonstrates subscribing to a channel with Presence configuration, tracking user typing activity, and handling Presence state changes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-18-supabase-realtime-multiplayer-general-availability.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst userId = 'user_1234'\nconst slackRoomId = '#random'\n\nconst channel = supabase.channel(slackRoomId, {\n  config: {\n    presence: { key: userId }\n  }\n})\n\n// We can subscribe to all Presence changes using the 'presence' -> 'sync' event.\nchannel\n  .on('presence', { event: 'sync' }, () => presenceChanged())\n  .subscribe()\n\n/*\n  A contrived example where we bind to all keyboard\n  events and send them over our channel\n*/\ndocument.addEventListener('keydown', function(event){\n  channel.track({ isTyping: Date.now() })\n})\n\n// Receive Presence updates\nconst presenceChanged = () => {\n  const newState = channel.presenceState()\n  console.log(newState)\n}\n\n// When you no longer wish to track data\nchannel.untrack().then(status => console.log(status)\n```\n\n----------------------------------------\n\nTITLE: Request Routing with Edge Runtime\nDESCRIPTION: Demonstrates how to use Edge Runtime as an API gateway to reroute requests to different endpoints, including error handling and request forwarding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-11-edge-runtime-self-hosted-deno-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nserve(async (req) => {\n  try {\n    if (req.url.endsWith('/rest/v1/old_table')) {\n      return await fetch('http://rest:3000/rest/v1/new_table', {\n        headers: req.headers,\n        method: req.method,\n        body: req.body,\n      })\n    }\n  } catch (e) {\n    const error = { msg: e.toString() }\n    return new Response(JSON.stringify(error), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Handler\nDESCRIPTION: HostListener implementation for handling ESC key press to close edit fields across the board component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@HostListener('document:keydown', ['$event']) onKeydownHandler(\n    event: KeyboardEvent\n  ) {\n    if (event.keyCode === 27) {\n      // Close whatever needs to be closed!\n      this.titleChanged = false;\n\n      Object.keys(this.editCard).map((item) => {\n        this.editCard[item] = false;\n        return item;\n      });\n\n      Object.keys(this.editTitle).map((item) => {\n        this.editTitle[item] = false;\n        return item;\n      });\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Implementation\nDESCRIPTION: Example of creating a nested directory structure using the children property in the data object.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tree-view.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst data = {\n  //...\n  children: [\n    {\n      name: 'Current batch',\n    },\n    {\n      name: 'Older queries',\n      children: [\n        {\n          name: 'all countries',\n        },\n        {\n          name: 'add new countries',\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase client with Jackson Serialization\nDESCRIPTION: This Kotlin snippet demonstrates how to create a Supabase client with Jackson Serialization. It shows how to set the default serializer to JacksonSerializer.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = JacksonSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Dependencies with Maven\nDESCRIPTION: Adds Supabase module dependencies to a Kotlin project using Maven. This includes the BOM for version management and specific modules like postgrest-kt, gotrue-kt, and realtime-kt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>bom</artifactId>\n    <version>VERSION</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>postgrest-kt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>gotrue-kt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>realtime-kt</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Connection String with Query Parameters\nDESCRIPTION: Demonstrates how to append query parameters to the Prisma connection string to address specific errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.../postgres?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE\n```\n\n----------------------------------------\n\nTITLE: Testing Oak Server API Endpoint\nDESCRIPTION: cURL command to test the Oak server greeting endpoint by making a POST request with JSON payload and authorization header.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/oak-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:54321/functions/v1/oak-server/greet' \\\n--header 'Authorization: Bearer YOUR_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"name\": \"John Doe\" }'\n```\n\n----------------------------------------\n\nTITLE: Link Generation Implementation in Supabase Auth\nDESCRIPTION: Example of generating confirmation, invite, recovery, and magic links using the supabase-js service role admin key.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-28-supabase-auth-passwordless-sms-login.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Code reference for illustration - actual example not provided in text\n```\n\n----------------------------------------\n\nTITLE: Linking Local Supabase Project to Remote\nDESCRIPTION: Command to link the local Supabase project to a remote Supabase project account.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase link\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components in React\nDESCRIPTION: This code snippet shows how to import the Tabs components for use in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tabs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation Example\nDESCRIPTION: Example showing how to use pagination components to create a pagination interface with previous/next buttons, numbered links, and ellipsis.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/pagination.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious href=\"#\" />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\">1</PaginationLink>\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationNext href=\"#\" />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>\n```\n\n----------------------------------------\n\nTITLE: Inefficient RLS Policy with Table Join\nDESCRIPTION: Example of a slower RLS policy implementation that uses a direct join between the source and target tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"rls_test_select\" on test_table\nto authenticated\nusing (\n  (select auth.uid()) in (\n    select user_id\n    from team_user\n    where team_user.team_id = team_id -- joins to the source \"test_table.team_id\"\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Health Tracking Daily Data Structure in JSON\nDESCRIPTION: Example JSON structure showing how daily health tracking data including food, water intake, exercise, and notes would be stored in a NoSQL format.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"date\": \"2022-01-01\",\n  \"weight\": 172.6,\n  \"notes\": \"This new diet is awesome!\",\n  \"food\": [\n    { \"title\": \"Apple\", \"calories\": 72, \"meal\": \"Breakfast\" },\n    { \"title\": \"Oatmeal\", \"calories\": 146, \"meal\": \"Breakfast\" },\n    { \"title\": \"Sandwich\", \"calories\": 445, \"meal\": \"Lunch\" },\n    { \"title\": \"Chips\", \"calories\": 280, \"meal\": \"Lunch\" },\n    { \"title\": \"Cookie\", \"calories\": 108, \"meal\": \"Lunch\" },\n    { \"title\": \"Mixed Nuts\", \"calories\": 175, \"meal\": \"Snack\" },\n    { \"title\": \"Pasta/Sauce\", \"calories\": 380, \"meal\": \"Dinner\" },\n    { \"title\": \"Garlic Bread\", \"calories\": 200, \"meal\": \"Dinner\" },\n    { \"title\": \"Broccoli\", \"calories\": 32, \"meal\": \"Dinner\" }\n  ],\n  \"water\": [\n    { \"time\": \"08:15\", \"qty\": 1 },\n    { \"time\": \"09:31\", \"qty\": 1 },\n    { \"time\": \"10:42\", \"qty\": 2 },\n    { \"time\": \"10:42\", \"qty\": 2 },\n    { \"time\": \"12:07\", \"qty\": 1 },\n    { \"time\": \"14:58\", \"qty\": 1 },\n    { \"time\": \"17:15\", \"qty\": 1 },\n    { \"time\": \"18:40\", \"qty\": 1 },\n    { \"time\": \"19:05\", \"qty\": 1 }\n  ],\n  \"exercise\": [{ \"time\": \"11:02\", \"duration\": 0.5, \"type\": \"Walking\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Format Example\nDESCRIPTION: Example of how a Supabase API endpoint is formatted.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<project ref>.supabase.co/rest/v1/countries?select=name\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Project Billing Example in Markdown\nDESCRIPTION: A markdown table showing a billing example for a single Supabase project with a custom domain activated for the entire billing cycle. It includes various line items and their associated costs.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/custom-domains.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Line Item                     | Hours | Costs   |\n| ----------------------------- | ----- | ------- |\n| Pro Plan                      | -     | $25     |\n| Compute Hours Micro Project 1 | 744   | $10     |\n| Custom Domain Hours           | 744   | $10     |\n| **Subtotal**                  |       | **$45** |\n| Compute Credits               |       | -$10    |\n| **Total**                     |       | **$35** |\n```\n\n----------------------------------------\n\nTITLE: Dialog with Custom Children\nDESCRIPTION: Text confirm dialog that supports custom child components for flexible content display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/text-confirm-dialog.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"text-confirm-dialog-with-children\"\n  description=\"An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing RadioGroupStacked Components in React\nDESCRIPTION: Example showing how to import the RadioGroupStacked and RadioGroupStackedItem components from the Supabase UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group-stacked.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RadioGroupStacked, RadioGroupStackedItem } from 'ui'\n```\n\n----------------------------------------\n\nTITLE: Running MongoDB Shell with Docker\nDESCRIPTION: Command to run MongoDB shell (mongosh) using Docker container\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --entrypoint=mongosh mongo \\\n \"$MONGODB_URL\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Checkbox Component in React\nDESCRIPTION: Simple example of using the Checkbox component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/checkbox.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Chart Component with Recharts\nDESCRIPTION: Example of how to create a basic chart component using Recharts with custom ChartContainer and ChartTooltipContent components. This demonstrates the composition pattern used throughout the library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bar, BarChart } from 'recharts'\n\nimport { ChartContainer, ChartTooltipContent } from '@/components/ui/charts'\n\nexport function MyChart() {\n  return (\n    <ChartContainer>\n      <BarChart data={data}>\n        <Bar dataKey=\"value\" />\n        <ChartTooltip content={<ChartTooltipContent />} />\n      </BarChart>\n    </ChartContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fly.io\nDESCRIPTION: Commands to deploy the Rails application to Fly.io and open the deployed app.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Data Table\nDESCRIPTION: Commands to install the Table component from shadcn/ui and TanStack Table dependency for creating data tables.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add table\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/react-table\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation with Success and Error Handling\nDESCRIPTION: Example demonstrating how to implement a mutation with proper success and error handling using toast notifications. This pattern avoids silent failures and ensures users receive feedback when operations succeed or fail.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/data/__templates/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mutate: someAction } = useMutation({\n  onSuccess: (res) => {\n    toast.success('Success')\n  },\n  onError: (error) => {\n    toast.error(`Failed: ${error.message}`)\n  },\n})\n\nconst onConfirm = async () => {\n  // Assuming that your mutation needs a URL param like project ref\n  // This check is just to satisfy the linting - there's an implicit assumption that\n  // projectRef here will definitely be available since its obtained from the URL\n  if (!projectRef) return console.error('Project ref is required')\n\n  // Any logic before calling the mutation\n  someAction({ projectRef, otherParameters })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Components\nDESCRIPTION: Shows how to import the Alert, AlertDescription, and AlertTitle components from the UI library\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert copy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\n```\n\n----------------------------------------\n\nTITLE: Signing Out - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to sign out users from the Instagram account using the Supabase client. The `signOut()` method is called to remove the user from the session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\\n// ---cut---\\nasync function signOut() {\\n  const { error } = await supabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inherited Role in PostgreSQL\nDESCRIPTION: Creates a new role that inherits permissions from a parent role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate role \"child_role_name\" inherit \"parent_role_name\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal with Aligned Footer in JSX\nDESCRIPTION: Shows an example of a modal with an aligned footer using the ComponentPreview element.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/modal.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"modal-aligned-footer\" />\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Studio\nDESCRIPTION: Configuration of environment variables for Supabase Studio, including database credentials, authentication keys, and optional default organization and project names.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOSTGRES_PASSWORD=\nSUPABASE_ANON_KEY=\nSUPABASE_SERVICE_KEY=\n\n# Optional default configurations\nDEFAULT_ORGANIZATION_NAME=\nDEFAULT_PROJECT_NAME=\n```\n\n----------------------------------------\n\nTITLE: Using Sheet Component in React\nDESCRIPTION: Basic usage example of the Sheet component in a React application, demonstrating the structure and subcomponents.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sheet.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent>\n    <SheetHeader>\n      <SheetTitle>Are you absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account and remove your data\n        from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component via shadcn CLI\nDESCRIPTION: Command to add the tooltip component using shadcn-ui CLI tool\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tooltip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add tooltip\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Backup Type Matrix\nDESCRIPTION: Table showing backup types based on Supabase plan, database size, and add-on features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/backups.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Plan       | Database Size (0-15GB) | Database Size (>15GB) | PITR | Read Replicas |\n| ---------- | ---------------------- | -------------------- | ---- | -------------- |\n| Pro        | logical                | physical             | physical | physical       |\n| Team       | logical                | physical             | physical | physical       |\n| Enterprise | physical               | physical             | physical | physical       |\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Usage\nDESCRIPTION: Demonstrates the basic implementation of an Alert component with a title, description, and Terminal icon\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert copy.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Alert>\n  <Terminal className=\"h-4 w-4\" />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle ORM to Disable Prepared Statements\nDESCRIPTION: Sets the prepare flag to false when initializing the Drizzle PostgreSQL client to disable prepared statements for Supavisor in transaction mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/disabling-prepared-statements-qL8lEL.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const client = postgres(connectionString, { prepare: false })\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI via Homebrew\nDESCRIPTION: This command installs the Supabase CLI using Homebrew package manager. It enables the use of Supabase commands globally on macOS or Linux systems.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install supabase/tap/supabase\n```\n\n----------------------------------------\n\nTITLE: Replacing auth.email() with auth.jwt() in Supabase RLS Policy\nDESCRIPTION: This snippet shows how to replace the deprecated auth.email() function with the more generic auth.jwt() function when creating an RLS policy for user profile viewing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/deprecated-rls-features-Pm77Zs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n- DEPRECATED\ncreate policy \"User can view their profile.\"\non profiles for select using (\n  auth.email() = email\n);\n\n-- RECOMMENDED\ncreate policy \"User can view their profile.\"\non profiles for select using (\n  (auth.jwt() ->> 'email') = email\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Persisted Sidebar State in Next.js Layout\nDESCRIPTION: Shows how to set up SidebarProvider with persisted state in Next.js to maintain sidebar open/closed state across page reloads using cookies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nimport { SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar'\nimport { AppSidebar } from '@/components/app-sidebar'\n\nexport async function Layout({ children }: { children: React.ReactNode }) {\n  const cookieStore = await cookies()\n  const defaultOpen = cookieStore.get('sidebar_state')?.value === 'true'\n\n  return (\n    <SidebarProvider defaultOpen={defaultOpen}>\n      <AppSidebar />\n      <main>\n        <SidebarTrigger />\n        {children}\n      </main>\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Code Structure in JSON\nDESCRIPTION: This snippet presents the JSON structure used to define the error codes returned by the Supabase storage service. It shows how error codes and their messages are formatted for easy debugging.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/error-codes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"error_code\",\n  \"message\": \"error_message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Component in React JSX\nDESCRIPTION: Example of using the Skeleton component in React JSX with custom styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/skeleton.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton className=\"w-[100px] h-[20px] rounded-full\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-based Environment Connection in .env File\nDESCRIPTION: Environment configuration for Prisma in server-based deployments using Supabase Postgres. This uses a single connection string for both migrations and application usage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# Used for Prisma Migrations and within your application\nDATABASE_URL=\"postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@[DB-REGION].pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Using Theme Colors in Chart Components in React/TSX\nDESCRIPTION: Demonstrates how to reference theme colors in a Bar chart component using CSS variables with the format var(--color-KEY).\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" />\n```\n\n----------------------------------------\n\nTITLE: Dropping PostgreSQL Replication Objects\nDESCRIPTION: SQL commands to remove existing subscriptions and replication slots. These commands are destructive and should only be used when preparing for a backup restoration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/failed-to-restore-from-backup-all-subscriptions-and-replication-slots-must-be-dropped-before-a-backup-can-be-restored-L-rCvt.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP SUBSCRIPTION <subscription>;\n\nSELECT pg_drop_replication_slot(slot_name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Handler for Realtime Client in C#\nDESCRIPTION: Demonstrates how to set up a simple debug handler for the Realtime client using the new AddDebugHandler method. This allows for custom logging solutions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/csharp/v0/release-notes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclient.AddDebugHandler((sender, message, exception) => Debug.WriteLine(message));\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Configuration in Markdown\nDESCRIPTION: Markdown document outlining Supabase's theme configuration, available themes, and future theming pipeline using Tailwind CSS properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/theming.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Themes\ndescription: Themes used in Supabase\n---\n\nDesign System currently takes into account varying themes.\n\nThemes currently in development:\n\n- Light\n- Dark (Classic dark)\n- Deep dark\n\nWe also support a system theme, which will automatically switch between light and dark themes based on the user's system settings.\n\n- System\n\n## Try a theme\n\nYou can set the theme of this website using the radio buttons below\n\n<ThemeSettings />\n\n## Theme Pipeline\n\nSupabase is migrating to use tailwind classes that use CSS properties.\nThis is to support the concept of theming, so that:\n\n1. It is easy for the team to update the theme without changing 100s of files.\n2. We could offer custom or additional themes in future.\n```\n\n----------------------------------------\n\nTITLE: Using FormItemLayout Component in TSX\nDESCRIPTION: This snippet demonstrates how to use the FormItemLayout component to simplify the form item structure. It includes label and description props, and wraps the input field with FormControl_Shadcn_.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/form-item-layout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<FormItemLayout label=\"Username\" description=\"This is your public display name\">\n  <FormControl_Shadcn_>\n    <Input placeholder=\"mildtomato\" {...field} />\n  </FormControl_Shadcn_>\n</FormItemLayout>\n```\n\n----------------------------------------\n\nTITLE: Basic Posts Table Creation in PostgreSQL\nDESCRIPTION: SQL command to create a basic posts table with title and content columns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-10-postgres-crdt.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table posts (\n  id serial primary key,\n  title text,\n  content text default ''\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Collapsible Behavior\nDESCRIPTION: Demonstrates how to configure the collapsible behavior of the sidebar using the collapsible prop, which can be set to offcanvas, icon, or none.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from '@/components/ui/sidebar'\n\nexport function AppSidebar() {\n  return <Sidebar collapsible=\"offcanvas | icon | none\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT API Key Structure\nDESCRIPTION: Example of a decoded Supabase API key showing the JWT structure with role, issued date, and expiry date.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"anon\",\n  \"iat\": 1625137684,\n  \"exp\": 1940713684\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Server Component with Supabase in Next.js (JavaScript)\nDESCRIPTION: Implements a Next.js static server component that fetches data from Supabase at build time. It uses the standard createClient from supabase-js since there's no user context at build time, and renders the fetched todos data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\nexport default async function Page() {\n  const supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  )\n\n  const { data } = await supabase.from('todos').select()\n  return <pre>{JSON.stringify(data, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Page UI in HTML with Ionic Angular\nDESCRIPTION: This HTML template defines the structure of the chat page, including the message list and input area. It uses Ionic components and Angular directives to display messages and handle user input.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"/groups\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>{{ group?.title}}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n  <ion-row *ngFor=\"let message of messages\">\n    <ion-col size=\"10\" *ngIf=\"message.users.id !== currentUserId\" class=\"message other-message\">\n      <span>{{ message.text }} </span>\n\n      <div class=\"time ion-text-right\"><br />{{ message.created_at | date:'shortTime' }}</div>\n    </ion-col>\n\n    <ion-col\n      offset=\"2\"\n      size=\"10\"\n      *ngIf=\"message.users.id === currentUserId\"\n      class=\"message my-message\"\n    >\n      <span>{{ message.text }} </span>\n      <div class=\"time ion-text-right\"><br />{{ message.created_at | date:'shortTime' }}</div>\n    </ion-col>\n  </ion-row>\n</ion-content>\n\n<ion-footer>\n  <ion-toolbar color=\"light\">\n    <ion-row class=\"ion-align-items-center\">\n      <ion-col size=\"10\">\n        <ion-textarea\n          class=\"message-input\"\n          autoGrow=\"true\"\n          rows=\"1\"\n          [(ngModel)]=\"messageText\"\n        ></ion-textarea>\n      </ion-col>\n      <ion-col size=\"2\" class=\"ion-text-center\">\n        <ion-button fill=\"clear\" (click)=\"sendMessage()\">\n          <ion-icon slot=\"icon-only\" name=\"send-outline\" color=\"primary\" size=\"large\"></ion-icon>\n        </ion-button>\n      </ion-col>\n    </ion-row>\n  </ion-toolbar>\n</ion-footer>\n```\n\n----------------------------------------\n\nTITLE: Passwordless SMS Login Implementation in Supabase\nDESCRIPTION: Example of implementing passwordless SMS login using supabase-js, demonstrating the OTP verification flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-28-supabase-auth-passwordless-sms-login.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Code reference for illustration - actual example not provided in text\n```\n\n----------------------------------------\n\nTITLE: Running Edge Functions with Docker\nDESCRIPTION: Commands to build and run the Edge Runtime using Docker. This containerizes the runtime environment and mounts your functions directory as a volume.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-functions/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t edge-runtime .\ndocker run -it --rm -p 9000:9000 -v /path/to/supabase/functions:/usr/services supabase/edge-runtime start --main-service /usr/services\n```\n\n----------------------------------------\n\nTITLE: NPM Installation of Supabase CLI\nDESCRIPTION: Install Supabase CLI as a development dependency using NPM.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install supabase --save-dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Storage Logs by 5XX Error Status Codes\nDESCRIPTION: This SQL query retrieves storage logs and filters them to only include entries where the HTTP status code is a 5XX error (server-side error). It extracts the ID, timestamp, event message, status code, error message, and raw error details from the storage logs' metadata.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  id,\n  storage_logs.timestamp,\n  event_message,\n  r.statusCode,\n  e.message as errorMessage,\n  e.raw as rawError\nfrom\n  storage_logs\n  cross join unnest(metadata) as m\n  cross join unnest(m.res) as r\n  cross join unnest(m.error) as e\nwhere r.statusCode >= 500\norder by timestamp desc\nlimit 100;\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Client with Session Token in JavaScript\nDESCRIPTION: This snippet shows how to initialize an S3 client using the AWS SDK for JavaScript, authenticating with a session token. It requires the `@aws-sdk/client-s3` package and a valid JWT token obtained from Supabase Auth. Replace `project_region` and `project_ref` with your actual Supabase project credentials.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/s3/authentication.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { S3Client } from '@aws-sdk/client-s3'\n\nconst {\n  data: { session },\n} = await supabase.auth.getSession()\n\nconst client = new S3Client({\n  forcePathStyle: true,\n  region: 'project_region',\n  endpoint: 'https://project_ref.supabase.co/storage/v1/s3',\n  credentials: {\n    accessKeyId: 'project_ref',\n    secretAccessKey: 'anonKey',\n    sessionToken: session.access_token,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding MP4 Video in Markdown\nDESCRIPTION: This snippet demonstrates how to embed an MP4 video in Markdown using the HTML5 video tag. It includes autoplay, loop, mute, and playsinline attributes, as well as controls.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-19-launch-week-x-best-launches.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/lwx/tldraw.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Links in JSX\nDESCRIPTION: This JSX snippet iterates through an array of resource objects and generates a Link component for each.  Each link directs to a different resource page based on the `href` property. It uses a GlassPanel component to display the resource description.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/resources.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\n    [\n      {\n        title: 'Examples',\n        hasLightIcon: true,\n        href: '/guides/resources/examples',\n        description: 'Official GitHub examples, curated content from the community, and more.',\n      },\n      {\n        title: 'Glossary',\n        hasLightIcon: true,\n        href: '/guides/resources/glossary',\n        description: 'Definitions for terminology and acronyms used in the Supabase documentation.',\n      }\n    ]\n.map((resource) => {\n      return (\n        <Link\n          href={`${resource.href}`}\n          key={resource.title}\n          className={'col-span-12 md:col-span-4'}\n          passHref\n        >\n          <GlassPanel {...resource} background={false} showIconBg={true}>\n            {resource.description}\n          </GlassPanel>\n        </Link>\n      )\n\n})}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty State with Actions in InnerSideMenu\nDESCRIPTION: Example showing how to implement an empty state panel with a call-to-action button. The InnerSideBarEmptyPanel component accepts title, description, and actions props to create a comprehensive empty state.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/inner-side-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<InnerSideBarEmptyPanel\n  title=\"No functions found\"\n  description=\"Create your first serverless function to get started.\"\n  actions={\n    <Button type=\"default\" onClick={createAction}>\n      Create Function\n    </Button>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: SSR Client Import Example\nDESCRIPTION: Reference to @supabase/ssr package implementation for customizing token storage and client initialization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/advanced-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Reference to: https://github.com/supabase/auth-helpers/blob/main/packages/ssr/src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client with Clerk in Swift\nDESCRIPTION: This code shows how to set up the Supabase client in a Swift iOS application, using Clerk for authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Clerk\nimport Supabase\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://project-ref.supabase.io\")!,\n  supabaseKey: \"supabase.anon.key\",\n  options: SupabaseClientOptions(\n    auth: SupabaseClientOptions.AuthOptions(\n      accessToken: {\n        try await Clerk.shared.session?.getToken()?.jwt\n      }\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar CSS Variables\nDESCRIPTION: CSS configuration for light and dark theme variables of the sidebar component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component Dependencies\nDESCRIPTION: Command to install the required Radix UI Progress primitive package using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/progress.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-progress\n```\n\n----------------------------------------\n\nTITLE: Configuring Point-in-Time Recovery (PITR) Settings\nDESCRIPTION: Commands to configure Point-in-Time Recovery by setting the target time and action in PostgreSQL configuration. This allows restoring the database to a specific moment before a disaster occurred.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"recovery_target_time = '2020-07-27 01:23:00.000000+00'\" >> /etc/postgresql/12/main/postgresql.conf\n$ echo \"recovery_target_action = 'promote'\" >> /etc/postgresql/12/main/postgresql.conf\n```\n\n----------------------------------------\n\nTITLE: MySQL to Postgres Migration Configuration\nDESCRIPTION: pgloader configuration file template for migrating from MySQL to Supabase Postgres. Includes connection string format and performance optimization settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nload database\n  from mysql://user:password@host/source_db\n  into postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres\nalter schema 'public' owner to 'postgres';\nset wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';\n```\n\n----------------------------------------\n\nTITLE: Installing Context Menu Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI dependency for the Context Menu component manually using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/context-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-context-menu\n```\n\n----------------------------------------\n\nTITLE: Importing Multi Select Components in React\nDESCRIPTION: Shows how to import the necessary components for implementing a multi-select interface.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/multi-select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  MultiSelector,\n  MultiSelectorTrigger,\n  MultiSelectorContent,\n  MultiSelectorItem,\n} from 'ui-patterns/multi-select'\n```\n\n----------------------------------------\n\nTITLE: Users table after Firestore migration\nDESCRIPTION: This JSON snippet represents the `users` table after the migration.  It contains the 'user' and 'score' fields extracted from the Firestore document. This illustrates the result of flattening the original document, extracting only the user information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{ \"user\": \"mark\", \"score\": 100 }]\n```\n\n----------------------------------------\n\nTITLE: Inserting Quote Block in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a quote block in Markdown, featuring a testimonial from Aaron Sullivan, Principal Software Engineer at Epsilon3.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-26-epsilon3-self-hosting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Quote\n  img=\"aaron-epsilon3.png\"\n  caption=\"Aaron Sullivan, ex-Google engineer, Stanford University Alumni, Principal Software Engineer Epsilon3.\"\n>\n  <p>Billion dollar missions need to run reliably and securely.</p>\n  <p>\n    We didn't just want something that works, we wanted a solution implementing best practices. We\n    also needed a setup that we could self-host to meet compliance needs and allow on-premises\n    deployment options for our customers.\n  </p>\n  <p>\n    We use Supabase because they give us an open-source scalable back-end built by database experts\n    that we can self-host.\n  </p>\n  <p>\n    Supabase takes out the mental effort from our back-end infrastructure so we can focus on our\n    customers needs.\n  </p>\n</Quote>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client in RedwoodJS App.js\nDESCRIPTION: Configuration for the Supabase client in the RedwoodJS app's main App component, setting up AuthProvider with the Supabase client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ... Redwood imports\nimport { AuthProvider } from '@redwoodjs/auth'\nimport { createClient } from '@supabase/supabase-js'\n\n// ...\n\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)\n\nconst App = () => (\n  <FatalErrorBoundary page={FatalErrorPage}>\n    <RedwoodProvider titleTemplate=\"%PageTitle | %AppTitle\">\n      <AuthProvider client={supabase} type=\"supabase\">\n        <RedwoodApolloProvider>\n          <Routes />\n        </RedwoodApolloProvider>\n      </AuthProvider>\n    </RedwoodProvider>\n  </FatalErrorBoundary>\n)\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Functions for Record Identification in PostgreSQL\nDESCRIPTION: Defines two utility functions: one to lookup a record's primary key column names, and another to generate a unique UUID for each record based on its table and primary key values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function audit.primary_key_columns(entity_oid oid)\n    returns text[]\n    stable\n    security definer\n    language sql\nas $$\n    -- Looks up the names of a table's primary key columns\n    select\n        coalesce(\n            array_agg(pa.attname::text order by pa.attnum),\n            array[]::text[]\n        ) column_names\n    from\n        pg_index pi\n        join pg_attribute pa\n            on pi.indrelid = pa.attrelid\n            and pa.attnum = any(pi.indkey)\n    where\n        indrelid = $1\n        and indisprimary\n$$;\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function audit.to_record_id(\n\t\tentity_oid oid,\n\t\tpkey_cols text[],\n\t\trec jsonb\n)\n    returns uuid\n    stable\n    language sql\nas $$\n    select\n        case\n            when rec is null then null\n\t\t\t\t\t\t-- if no primary key exists, use a random uuid\n            when pkey_cols = array[]::text[] then gen_random_uuid()\n            else (\n                select\n                    uuid_generate_v5(\n                        'fd62bc3d-8d6e-43c2-919c-802ba3762271',\n                        (\n\t\t\t\t\t\t\t\t\t\tjsonb_build_array(to_jsonb($1))\n\t\t\t\t\t\t\t\t\t\t|| jsonb_agg($3 ->> key_)\n\t\t\t\t\t\t\t\t\t)::text\n                    )\n                from\n                    unnest($2) x(key_)\n            )\n        end\n$$;\n```\n\n----------------------------------------\n\nTITLE: Referencing Grafana Dashboard Configuration for Performance Visualization\nDESCRIPTION: This is a reference to a Grafana dashboard JSON configuration used to visualize performance metrics collected during load tests. The dashboard provides insights into the performance characteristics of the Realtime service.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-21-automating-performance-tests.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Reference to: https://github.com/supabase/benchmarks/blob/main/examples/realtime/grafana.json\n```\n\n----------------------------------------\n\nTITLE: Installing Form Components with CLI\nDESCRIPTION: Command to install the form components using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add form\n```\n\n----------------------------------------\n\nTITLE: Installing flutter_bloc Dependency for State Management\nDESCRIPTION: Adding the flutter_bloc package to the Flutter app's pubspec.yaml for managing shared state between room and chat pages efficiently.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nflutter_bloc: ^8.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Dependencies\nDESCRIPTION: Command to install Supabase client and required dependencies for React Native implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app && npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed react-native-url-polyfill\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation\nDESCRIPTION: Example of implementing a basic tooltip with trigger and content components wrapped in a provider\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tooltip.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger>Hover</TooltipTrigger>\n    <TooltipContent>\n      <p>Add to library</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Implementation with Sidebar\nDESCRIPTION: Example of implementing the sidebar in a React layout component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar'\nimport { AppSidebar } from '@/components/app-sidebar'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <main>\n        <SidebarTrigger />\n        {children}\n      </main>\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tree View Implementation\nDESCRIPTION: Example of implementing a basic tree view component with custom node rendering and data structure.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tree-view.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst data: {\n  name: ''\n  children: [\n    {\n      name: 'Current batch'\n    },\n    {\n      name: 'Older queries'\n    },\n    {\n      name: 'query all users'\n    },\n    {\n      name: 'users in last day'\n    },\n    {\n      name: 'new users over time'\n    },\n  ]\n}\n\nfunction App() {\n  return (\n    <TreeView\n      {...args}\n      data={flattenTree(args.data)}\n      aria-label=\"directory tree\"\n      nodeRenderer={({ element, isBranch, isExpanded, getNodeProps, level, isSelected }) => (\n        <TreeViewItem\n          isExpanded={isExpanded}\n          isBranch={isBranch}\n          isSelected={isSelected}\n          level={level}\n          xPadding={16}\n          name={element.name}\n          {...getNodeProps()}\n        />\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using SidebarContent to Structure Sidebar Groups\nDESCRIPTION: Shows how to use the SidebarContent component to organize the main content of the sidebar, which typically consists of one or more SidebarGroup components in a scrollable container.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar, SidebarContent } from '@/components/ui/sidebar'\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup />\n        <SidebarGroup />\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Appsmith Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Appsmith's low-code internal tool builder integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/SfAxGVjJ6Q0\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Book Collection\nDESCRIPTION: A simple GraphQL query to fetch the ID of books from a book collection. This query demonstrates the structure of a basic GraphQL query with nested fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bookCollection {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Third-Party MAU Login Image - React\nDESCRIPTION: This snippet displays a login screen for Third-Party MAUs using React components. It employs the Image component to render the image source for both light and dark themes and includes accessibility attributes like 'alt'.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-third-party.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Image\n        alt=\"Third-Party MAU login screen\"\n        src={{\n          light: '/docs/img/guides/platform/third-party-mau-auth0-login-screen.png',\n          dark: '/docs/img/guides/platform/third-party-mau-auth0-login-screen.png',\n        }}\n        className=\"max-h-[190px]\"\n        zoomable\n      />\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video using iframe in HTML/JSX\nDESCRIPTION: Code for embedding a YouTube video within a responsive container using an iframe element in what appears to be a React JSX component. The code includes proper styling and responsive design considerations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-06-02-supabase-beta-may-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/qETcl3SUfzU\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase Email Hook\nDESCRIPTION: Required environment variables for setting up Supabase email hooks with Resend service. Includes API key for Resend and a base64-encoded secret for the email hook authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/auth-hook-react-email-resend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nRESEND_API_KEY=<your_resend_api_key>\nSEND_EMAIL_HOOK_SECRET=<base64_secret>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in React/JSX\nDESCRIPTION: Code for embedding a YouTube video about the Supabase UI Library using an iframe within a container div. The iframe includes proper attributes for playback and security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-31-supabase-ui-library.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"video-container mb-8\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/2TIuUjkCDFE\"\n    title=\"Introducing Supabase UI Library\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Chat Room UI Components Implementation in Flutter/Dart\nDESCRIPTION: Implements a chat room interface with user avatars, message previews, and timestamps. Includes conditional rendering for loading states, empty states, and error handling. Features a horizontal scrollable list of new users that can be tapped to create new chat rooms.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nleading: CircleAvatar(\n  child: otherUser == null\n      ? preloader\n      : Text(otherUser.username.substring(0, 2)),\n),\ntitle: Text(otherUser == null\n    ? 'Loading...'\n    : otherUser.username),\nsubtitle: room.lastMessage != null\n    ? Text(\n        room.lastMessage!.content,\n        maxLines: 1,\n        overflow: TextOverflow.ellipsis,\n      )\n    : const Text('Room created'),\ntrailing: Text(format(\n    room.lastMessage?.createdAt ?? room.createdAt,\n    locale: 'en_short'))\n```\n\nLANGUAGE: Dart\nCODE:\n```\nclass _NewUsers extends StatelessWidget {\n  const _NewUsers({\n    Key? key,\n    required this.newUsers,\n  }) : super(key: key);\n\n  final List<Profile> newUsers;\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.symmetric(vertical: 8),\n      scrollDirection: Axis.horizontal,\n      child: Row(\n        children: newUsers\n            .map<Widget>((user) => InkWell(\n                  onTap: () async {\n                    try {\n                      final roomId =\n                          await BlocProvider.of<RoomCubit>(context)\n                              .createRoom(user.id);\n                      Navigator.of(context)\n                          .push(ChatPage.route(roomId));\n                    } catch (_) {\n                      context.showErrorSnackBar(\n                          message: 'Failed creating a new room');\n                    }\n                  },\n                  child: Padding(\n                    padding: const EdgeInsets.all(8.0),\n                    child: SizedBox(\n                      width: 60,\n                      child: Column(\n                        children: [\n                          CircleAvatar(\n                            child: Text(user.username.substring(0, 2)),\n                          ),\n                          const SizedBox(height: 8),\n                          Text(\n                            user.username,\n                            maxLines: 1,\n                            overflow: TextOverflow.ellipsis,\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                ))\n            .toList(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Tracking Presence in Swift\nDESCRIPTION: This snippet demonstrates the untrack method in Swift for stopping presence tracking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nawait roomOne.untrack()\n```\n\n----------------------------------------\n\nTITLE: Updating signIn with magic link in TypeScript\nDESCRIPTION: Example of how to update the signIn method for magic link authentication in supabase-js v2. The new version uses signInWithOtp.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { error } = await supabase\n  .auth\n  .signInWithOtp({ email })\n```\n\n----------------------------------------\n\nTITLE: Supabase Client Initialization - Version 2\nDESCRIPTION: Demonstrates the new initialization pattern in version 2.x where configuration options are organized into separate option objects for auth, realtime, and storage clients.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait Supabase.initialize(\n  url: 'SUPABASE_URL',\n  anonKey: 'SUPABASE_ANON_KEY',\n  authOptions: const FlutterAuthClientOptions(\n    authFlowType: AuthFlowType.pkce,\n  ),\n  realtimeClientOptions: const RealtimeClientOptions(\n    logLevel: RealtimeLogLevel.info,\n  ),\n  storageOptions: const StorageClientOptions(\n    retryAttempts: 10,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component Dependencies via npm\nDESCRIPTION: This command installs the necessary Radix UI Avatar component dependency using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-avatar\n```\n\n----------------------------------------\n\nTITLE: Rendering Postgres Resources Links in JSX\nDESCRIPTION: This JSX snippet iterates through an array of Postgres resource objects and generates a Link component for each. It provides links to various guides about Postgres database management within the Supabase context. It utilizes a GlassPanel component to display resource descriptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/resources.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\n    [\n      {\n        title: 'Managing Indexes',\n        hasLightIcon: true,\n        href: '/guides/database/postgres/indexes',\n        description: 'Improve query performance using various index types in Postgres.'\n      },\n      {\n        title: 'Cascade Deletes',\n        hasLightIcon: true,\n        href: '/guides/database/postgres/cascade-deletes',\n        description: 'Understand the types of foreign key constraint deletes.'\n      },\n      {\n        title: 'Drop all tables in schema',\n        hasLightIcon: true,\n        href: '/guides/database/postgres/dropping-all-tables-in-schema',\n        description: 'Delete all tables in a given schema.'\n      },\n      {\n        title: 'Select first row per group',\n        hasLightIcon: true,\n        href: '/guides/database/postgres/first-row-in-group',\n        description: 'Retrieve the first row in each distinct group.'\n      },\n      {\n        title: 'Print PostgreSQL version',\n        hasLightIcon: true,\n        href: '/guides/database/postgres/which-version-of-postgres',\n        description: 'Find out which version of Postgres you are running.'\n      }\n    ]\n.map((resource) => {\n      return (\n        <Link\n          href={`${resource.href}`}\n          key={resource.title}\n          className={'col-span-12 md:col-span-4'}\n          passHref\n        >\n          <GlassPanel {...resource} background={false} showIconBg={true}>\n            {resource.description}\n          </GlassPanel>\n        </Link>\n      )\n\n})}\n```\n\n----------------------------------------\n\nTITLE: Using Drawer Component in React\nDESCRIPTION: Example of using the Drawer component with its various sub-components in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/drawer.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Drawer>\n  <DrawerTrigger>Open</DrawerTrigger>\n  <DrawerContent>\n    <DrawerHeader>\n      <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n      <DrawerDescription>This action cannot be undone.</DrawerDescription>\n    </DrawerHeader>\n    <DrawerFooter>\n      <Button>Submit</Button>\n      <DrawerClose>\n        <Button variant=\"outline\">Cancel</Button>\n      </DrawerClose>\n    </DrawerFooter>\n  </DrawerContent>\n</Drawer>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase\nDESCRIPTION: Creating a .env file to store Supabase URL and anonymous key for the project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SUPABASE_URL=YOUR_SUPABASE_URL\nVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands\nDESCRIPTION: Commands to start the local development environment\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase start\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Send Messages in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to set up a Supabase Realtime channel to receive its own broadcast messages. It configures the 'receiveOwnBroadcasts' parameter, sets up a broadcast flow, and sends a message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval myChannel = supabase.channel(\"room-2\") {\n    broadcast {\n        receiveOwnBroadcasts = true\n    }\n}\n\nval broadcastFlow: Flow<JsonObject> = myChannel.broadcastFlow<JsonObject>(\"test-my-messages\")\n    .onEach {\n        println(it)\n    }\n    .launchIn(yourCoroutineScope)\n\nmyChannel.subscribe(blockUntilSubscribed = true) //You can also use the myChannel.status flow instead, but this parameter will block the coroutine until the status is joined.\n\nmyChannel.broadcast(\n    event = \"test-my-messages\",\n    payload = YourMessage(\n        message = \"talking to myself\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Constraint to NO ACTION INITIALLY DEFERRED\nDESCRIPTION: Modifies the foreign key constraint to use NO ACTION with deferred checking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter table child\ndrop constraint child_father_fkey;\n\nalter table child\nadd constraint child_father_fkey foreign key (father) references parent (id)\n  on delete no action initially deferred;\n```\n\n----------------------------------------\n\nTITLE: Calling PostgreSQL Functions with supabase-js\nDESCRIPTION: Example of how to call a PostgreSQL function using the supabase-js client library with RPC method.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.rpc('best_star_wars_series', {\n  name: 'The Prequels',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Area Component via CLI\nDESCRIPTION: Command to add the scroll area component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/scroll-area.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add scroll-area\n```\n\n----------------------------------------\n\nTITLE: Exporting MongoDB Documents Using mongoexport\nDESCRIPTION: Command to export MongoDB documents from a collection to a JSON file using the mongoexport utility. This exports the 'users' collection to a JSON array file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmongoexport --uri=\"mongodb+srv://<username>:<password>@cluster.mongodb.net/<dbname>\" \\\n  --collection=users \\\n  --jsonArray \\\n  --out=users.json\n```\n\n----------------------------------------\n\nTITLE: Generating a Patch File for PostgreSQL Submission\nDESCRIPTION: This snippet shows how to create a formatted patch file from your commit. The format-patch command generates a file that can be attached to an email and sent to the PostgreSQL mailing list for review.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-27-postgresql-commitfest.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit format-patch -1 -v13\n\n# 1   = patch depth.\n#       The number of topmost patches to include\n# v13 = the patch version.\n#       Make new version number anytime you want to\n#       send updated patch to the same thread)\n```\n\n----------------------------------------\n\nTITLE: Updating schema.prisma for Serverless Deployments\nDESCRIPTION: Configuration for the Prisma schema file to reference both DATABASE_URL and DIRECT_URL for serverless deployments.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Struct in Rust for GraphQL AST\nDESCRIPTION: This code snippet shows the Rust struct definition for the Document, which is the root of the GraphQL AST. It contains a vector of Definition enum values.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, PartialEq)]\npub struct Document<'a, T: Text<'a>> {\n    pub definitions: Vec<Definition<'a, T>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Poetry Project\nDESCRIPTION: Command to initialize a new Python project using Poetry\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry new image-search\n```\n\n----------------------------------------\n\nTITLE: Connection String Example Reference\nDESCRIPTION: A placeholder for the PostgreSQL connection string format used in Live Share feature. The actual connection string would be uniquely generated for each database instance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-10-database-build-live-share.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*.browser.db.build\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Development Server\nDESCRIPTION: Command to start the Laravel development server for local testing.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Fly.io Deployment Configuration\nDESCRIPTION: TOML configuration file for deploying FerretDB to Fly.io\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\napp = \"supa-ferretdb-<your-supabase-project-ref>\"\nprimary_region = \"bos\"\n\n[build]\n  image = \"ghcr.io/ferretdb/ferretdb\"\n\n[[services]]\n  internal_port = 27017\n  protocol = \"tcp\"\n\n  [[services.ports]]\n    port = \"27017\"\n\n[[vm]]\n  cpu_kind = \"shared\"\n  cpus = 1\n  memory_mb = 1024\n```\n\n----------------------------------------\n\nTITLE: Collapsed Breadcrumb Implementation\nDESCRIPTION: Example showing how to implement a collapsed state using BreadcrumbEllipsis component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BreadcrumbEllipsis } from \"@/components/ui/breadcrumb\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    {/* ... */}\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis />\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Package Manager\nDESCRIPTION: Command to install Poetry package manager using pip\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Markdown Admonition Example\nDESCRIPTION: Example of using admonition component in documentation for highlighting important information\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Admonition type=\"note\" label=\"Optional label displays as title\">\n\nYour content here\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase JS via Yarn\nDESCRIPTION: Command to install the Supabase JavaScript library using Yarn package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Color Classes in JSX\nDESCRIPTION: Demonstrates how to use primitive color values in Tailwind classes for text and background styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/tailwind-classes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// this uses the default foreground color\n<span className=\"text-foreground\"></span>\n\n// this uses the 'light' foreground color\n<span className=\"text-foreground-light\"></span>\n\n// this uses the default warning color\n<span className=\"text-warning\"></span>\n\n// this uses the '500' warning color\n<span className=\"text-warning-500\"></span>\n```\n\n----------------------------------------\n\nTITLE: PGroonga Full-Text Search with Negation\nDESCRIPTION: SQL command showing how to perform a full-text search with PGroonga that includes one word but excludes another, using the negation operator.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect * from memos where content &@~ 'postgres -pgroonga';\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed for NextAuth Integration\nDESCRIPTION: HTML iframe code for embedding a YouTube video demonstrating NextAuth's integration with Supabase.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-launch-week-6-community-day.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/EdYQ9fF-hz4?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Collapsible SidebarMenu in React\nDESCRIPTION: This snippet demonstrates how to make a SidebarMenu component collapsible by wrapping it and the SidebarMenuSub components in a Collapsible component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarMenu>\n  <Collapsible defaultOpen className=\"group/collapsible\">\n    <SidebarMenuItem>\n      <CollapsibleTrigger asChild>\n        <SidebarMenuButton />\n      </CollapsibleTrigger>\n      <CollapsibleContent>\n        <SidebarMenuSub>\n          <SidebarMenuSubItem />\n        </SidebarMenuSub>\n      </CollapsibleContent>\n    </SidebarMenuItem>\n  </Collapsible>\n</SidebarMenu>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Nuxt application using npx\nDESCRIPTION: This command initializes a new Nuxt application using the latest version of Nuxt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init my-app\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally for OG Image Generation\nDESCRIPTION: Commands to start Supabase locally and serve the 'lwx-ticket' function for Open Graph image generation. This setup allows for local testing of the function without JWT verification.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-ticket/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\nsupabase functions serve lwx-ticket --no-verify-jwt --env-file ./supabase/.env.local\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Components\nDESCRIPTION: Example showing how to import the Popover components from the UI component library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/popover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\n```\n\n----------------------------------------\n\nTITLE: Implementing Inset Sidebar Variant\nDESCRIPTION: Shows the proper way to implement the inset sidebar variant, which requires wrapping the main content in a SidebarInset component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarProvider>\n  <Sidebar variant=\"inset\" />\n  <SidebarInset>\n    <main>{children}</main>\n  </SidebarInset>\n</SidebarProvider>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Item Spacing\nDESCRIPTION: Example of adding spacing between carousel items using utility classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel>\n  <CarouselContent className=\"-ml-4\">\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Importing Sheets Submodule from googleapis NPM Package in TypeScript\nDESCRIPTION: Demonstrates how to selectively import a specific submodule from an NPM package to optimize bundle size in Supabase Edge Functions. This example imports the Sheets submodule from the googleapis package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/troubleshooting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sheets } from 'npm:@googleapis/sheets'\n```\n\n----------------------------------------\n\nTITLE: Running React Tests with npm test\nDESCRIPTION: Launches the test runner in interactive watch mode. This command executes tests for the React application and watches for changes to rerun tests as needed.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Layout in Svelte\nDESCRIPTION: Svelte layout component for the authentication pages. Includes a navigation header and renders child components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { children } = $props()\n</script>\n\n<header>\n  <nav>\n    <a href=\"/\">Home</a>\n  </nav>\n</header>\n\n{@render children()}\n```\n\n----------------------------------------\n\nTITLE: Vercel Deploy Button Implementation\nDESCRIPTION: HTML markup for the Vercel deployment button with associated project configuration and repository links\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-28-supabase-vercel-partnership.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"bg-surface-100 py-4 px-5 border rounded-md not-prose\">\n  <h5 className=\"text-foreground\">Deploy a Next.js app with Supabase Vercel Storage now</h5>\n  <p className=\"text-foreground-light mb-3\">Uses the Next.js Supabase Starter Template</p>\n  <a href=\"https://vercel.com/new/clone?demo-description=This+starter+configures+Supabase+Auth+to+use+cookies%2C+making+the+user%27s+session+available+throughout+the+entire+Next.js+app+-+Client+Components%2C+Server+Components%2C+Route+Handlers%2C+Server+Actions+and+Middleware.&demo-image=%2F%2Fimages.ctfassets.net%2Fe5382hct74si%2F7UG4Pvl9its0CqhrpX93n%2F262032f6e408308d3273f5883f369e97%2F68747470733a2f2f64656d6f2d6e6578746a732d776974682d73757061626173652e76657263656c2e6170702f6f70656e67726170682d696d6167652e70.png&demo-title=nextjs-with-supabase&demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&project-name=nextjs-with-supabase&repository-name=nextjs-with-supabase&repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&stores=%5B%7B%22type%22%3A%22integration%22%2C%22integrationSlug%22%3A%22supabase%22%2C%22productSlug%22%3A%22supabase%22%7D%5D&teamSlug=vercel\">\n    <img src=\"https://vercel.com/button\" alt=\"Deploy with Vercel\" />\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inserting Cat Features - Python\nDESCRIPTION: This snippet defines a tuple containing a string identifier for a cat and its associated feature vector, represented as an array of floats. This structure is typically used for machine learning or data processing tasks where animal features are analyzed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n('Cat', '[-0.018450698,-0.043701697,0.02752752,0.017822262,-0.02586187,0.028728843,0.087862626,0.09188629,0.04397456,0.019820007,-0.011478988,-0.124914564,0.022496833,0.0789779,0.034404784,-0.0018655953,0.0054757334,0.015263809,-0.057259317,0.036637075,0.023102136,-0.0009833422,-0.04593577,-0.039027687,0.03276482,0.02076609,-0.06291743,-0.03474475,-0.061686616,-0.13878247,-0.031647447,-0.041279692,0.020428147,-0.008723568,0.002749398,-0.029738247,-0.02957134,0.03317581,-0.048957366,0.07942621,0.023558771,-0.014116848,-0.039913174,-0.029095618,-0.024157254,-0.0028368456,-0.002660644,-0.024854222,0.047447667,-0.04207809,0.0380363,-0.053787,0.020617802,0.022927182,0.001773245,0.02898622,0.10264574,0.021385299,0.06101385,0.043469504,-0.0060370597,0.072553396,-0.22571594,0.08177761,0.059967242,0.011605421,-0.059498515,-0.01614959,0.030732593,0.047745787,-0.034631897,0.0045268857,0.008692242,0.06986321,0.062867224,-0.04319344,0.044571005,-0.008040988,-0.007348434,0.0011111188,-0.040033247,-0.013782392,-0.05935072,-0.031029223,-0.025947869,-0.0116114365,0.009943911,-0.04495425,0.039871536,-0.007157675,-0.081404544,0.028082607,0.0002421545,0.0007344536,-0.058870003,-0.03995512,0.02585252,0.005922959,-0.06805756,0.23782046,-0.030170966,0.021609697,0.06485757,0.011116049,0.033888217,-0.021842483,-0.013968073,-0.025392892,-0.017921817,0.028079357,0.025580177,-0.01690473,0.013204528,-0.058830313,0.051414166,0.0056296475,0.042037394,0.010937367,0.03082752,0.017728599,-0.021105066,0.009503924,0.014986898,-0.010639325,0.037019223,-0.08803974,0.027080009,0.089853294,0.022677682,0.03509845,0.062564544,-0.042244546,-0.050651427,0.0051593627,-0.021133807,0.014681318,0.011123185,0.01954461,-0.011593424,-0.048611607,-0.06442908,-0.10776765,-0.0038715384,-0.113250785,-0.0013805063,0.054094467,-0.038793158,0.05252635,-0.02806175,0.028057585,0.00038797883,0.0248274,-0.053739987,0.02358995,0.009615382,0.0459994,0.028359659,0.043745056,-0.039010525,0.04654124,-0.0046896823,-0.046589084,-0.03633851,0.046189457,-0.013919748,-0.058477134,-0.039088316,-0.030274736,-0.03725408,-0.0074797496,0.05141904,0.03529245,-0.05534556,0.029533856,0.022124233,0.030466082,-0.0037198325,0.018125841,0.005400052,-0.0031701697,0.052214794,-0.03613148,-0.06176965,0.07701529,0.04650194,-0.040947113,-0.048056263,-0.018562285,-0.039730188,0.011365426,0.030509792,0.03808681,0.025926674,-0.07370392,-0.014984852,-0.060279783,-0.008129943,0.008534002,0.035145674,-0.023089841,0.0450473,-0.040078282,-0.067101896,0.054339316,0.018377861,-0.00052205054,-0.022381525,0.022282446,0.032699667,-0.004516875,-0.023932414,0.011830043,0.044468176,0.008677854,-0.03468146,0.007745217,-0.018356947,0.05176401,0.04161891,0.0716399,0.043909244,-0.097493835,0.004900012,-0.22551504,0.010759602,0.025497086,-0.057824843,0.03173267,-0.052233122,0.036974248,-0.015762206,0.07025136,0.031058954,0.057086878,0.0040403972,0.0186622,0.076763235,-0.05272903,0.07411572,0.030511323,-0.021784903,0.019807672,0.01646691,-0.03355217,0.039836943,-0.016108982,-0.081623204,0.02503345,0.023985993,0.23101605,0.09275506,0.036845215,-0.012754107,0.0072520603,0.02663752,-0.08013605,-0.122672945,0.029188603,0.047271322,0.029502878,-0.021710804,-0.057916477,-0.033290174,-0.04561619,0.024318889,0.011353906,-0.060632486,0.015315554,-0.017688273,-0.04047208,0.030335227,-0.041746728,0.027059378,0.05104814,-0.024603844,0.0070659635,0.0025729148,0.00940215,-0.024860522,-0.07034691,0.005896322,-0.0069140918,0.01501812,-0.006486526,-0.09685372,-0.0012098794,-0.01242476,0.05278896,-0.0022264088,-0.024227154,-0.012343209,0.023066515,-0.06185465,-0.032793436,0.09016447,0.026167199,-0.051579386,0.023778731,0.02196033,0.011613299,-0.0028875927,0.007213804,-0.077984005,0.04114566,-0.042612676,0.030693077,0.018442027,0.018042548,-0.016633302,0.023955721,0.0065748747,0.048678786,-0.060312748,0.049683105,0.031068243,-0.035726856,-0.04870947,0.009337585,0.00096612197,-0.28237557,0.01650157,0.030606303,0.0030061172,-0.043637928,0.012786108,0.0047959434,-0.018053751,-0.057656318,-0.032992836,0.035492945,0.040239785,0.03308174,0.030363094,-0.0074734306,0.031687234,0.042816583,-0.02827239,0.025122454,-0.017633557,0.05130058,0.019577276,0.26412004,-0.03937151,-0.005285997,-0.026237419,-0.031395175,-0.023909623,0.050147958,-0.021485727,0.008363846,0.020979265,0.05898941,-0.0369355,-0.009970978,0.058567666,-0.053051967,0.07510308,0.007790953,0.0030001537,-0.018105373,-0.0024175737,-0.03822598,-0.054223735,0.07783055,-0.049844712,-0.047537003,-0.016613906,0.014751358,0.005427777,-0.044944577,0.0005177255,-0.036851205,0.035434917,0.0031816638,0.017624011,-0.0002383347,-0.027522223,-0.04817965,-0.02104149,-0.024004659,-0.025815494,-0.0032800396,0.046702977,0.059542835]'\n```\n\n----------------------------------------\n\nTITLE: Filtering Postgres Logs by Timeframe in SQL\nDESCRIPTION: SQL WHERE clause to filter logs by a specific time period, useful for investigating issues that occurred during a known timeframe.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- filtering by time period\n...query\nwhere\n  timestamp between '2024-05-06 04:44:00' and '2024-05-06 04:45:00'\n```\n\n----------------------------------------\n\nTITLE: Backup and Stop Supabase Containers\nDESCRIPTION: Commands to backup schema and data, then stop running Supabase containers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsupabase db diff -f my_schema\nsupabase db dump --local --data-only > supabase/seed.sql\nsupabase stop --no-backup\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions for Magic Link Authentication\nDESCRIPTION: Sets up server-side form handling for magic link authentication, including form validation, error handling, and Supabase integration for sending magic links.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/+page.server.ts\nimport { fail, redirect } from '@sveltejs/kit'\nimport type { Actions, PageServerLoad } from './$types'\n\nexport const load: PageServerLoad = async ({ url, locals: { safeGetSession } }) => {\n  const { session } = await safeGetSession()\n\n  // if the user is already logged in return them to the account page\n  if (session) {\n    redirect(303, '/account')\n  }\n\n  return { url: url.origin }\n}\n\nexport const actions: Actions = {\n  default: async (event) => {\n    const {\n      url,\n      request,\n      locals: { supabase },\n    } = event\n    const formData = await request.formData()\n    const email = formData.get('email') as string\n    const validEmail = /^[\\w-\\.+]+@([\\w-]+\\.)+[\\w-]{2,8}$/.test(email)\n\n    if (!validEmail) {\n      return fail(400, { errors: { email: 'Please enter a valid email address' }, email })\n    }\n\n    const { error } = await supabase.auth.signInWithOtp({ email })\n\n    if (error) {\n      return fail(400, {\n        success: false,\n        email,\n        message: `There was an issue, Please contact support.`,\n      })\n    }\n\n    return {\n      success: true,\n      message: 'Please check your email for a magic link to log into the website.',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Properties\nDESCRIPTION: Defines an array of `filterProperties` used by the `FilterBar` component. Each property specifies a label, name, type, and supported operators. The `status` property also includes predefined options.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst filterProperties = [\n  {\n    label: 'Name',\n    name: 'name',\n    type: 'string',\n    operators: ['=', '!=', 'CONTAINS', 'STARTS WITH', 'ENDS WITH'],\n  },\n  {\n    label: 'Status',\n    name: 'status',\n    type: 'string',\n    options: ['active', 'inactive', 'pending'],\n    operators: ['=', '!='],\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Presence State Update Format\nDESCRIPTION: Message format for presence state updates containing client information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"event\": \"presence_state\",\n   \"topic\": string,\n   \"payload\": {\n      [key: string]: {metas: Array<{phx_ref: string, name: string, t: float}>}\n   },\n   \"ref\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating SQL Statement Parsing Process in Markdown\nDESCRIPTION: This snippet demonstrates the step-by-step process of parsing the SQL statement 'select '1' from contact' to build a Concrete Syntax Tree (CST). It shows the initial parse tree, remaining tokens, and how the CST is constructed as tokens are processed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-postgres-language-server-implementing-parser.mdx#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nRemaining Tokens: [\"select\", \"'1'\", \"from\", \"contact\"]\n\nParse Tree:\n\n  SelectStmt (0, [Select, From])\n         /         \\\n1 (ResTarget, [])    2 (RangeVar, ['contact'])\n        |             \n 3 (AConst, ['1'])\n```\n\nLANGUAGE: markdown\nCODE:\n```\nRemaining Tokens: [\"from\", \"contact\"]\n\nParse Tree:\n\n  SelectStmt (0, [From])\n         /         \\\n1 (ResTarget, [])    2 (RangeVar, ['contact'])\n        |             \n 3 (AConst, []) \n\nCST:\nSelectStmt\n    Select@0..6 \"select\"\n    Whitespace@6..7 \" \"\n    ResTarget@7..10\n      AConst@7..10\n        Sconst@7..10 \"'1'\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\nRemaining Tokens: [\"from\", \"contact\"]\n\nParse Tree:\n\n  SelectStmt (0, [From])\n                   \\\n                     2 (RangeVar, ['contact'])\n\nCST:\nSelectStmt\n    Select@0..6 \"select\"\n    Whitespace@6..7 \" \"\n    ResTarget@7..10\n      AConst@7..10\n        Sconst@7..10 \"'1'\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\nRemaining Tokens: [\"contact\"]\n\nParse Tree:\n\n  SelectStmt (0, [])\n                   \\\n                     2 (RangeVar, ['contact'])\n\nCST:\nSelectStmt\n    Select@0..6 \"select\"\n    Whitespace@6..7 \" \"\n    ResTarget@7..10\n      AConst@7..10\n        Sconst@7..10 \"'1'\"\n    Whitespace@10..11 \" \"\n    From@11..15 \"from\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSelectStmt@0..23\n    Select@0..6 \"select\"\n    Whitespace@6..7 \" \"\n    ResTarget@7..10\n      AConst@7..10\n        Sconst@7..10 \"'1'\"\n    Whitespace@10..11 \" \"\n    From@11..15 \"from\"\n    Whitespace@15..16 \" \"\n    RangeVar@16..23\n      Ident@16..23 \"contact\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flutter Project for a Realtime Game\nDESCRIPTION: Command to create a new Flutter project named 'flame_realtime_shooting' using the Flutter CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create flame_realtime_shooting\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routing Module\nDESCRIPTION: Router configuration defining application routes and their corresponding components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BoardComponent } from './components/inside/board/board.component'\nimport { WorkspaceComponent } from './components/inside/workspace/workspace.component'\nimport { LoginComponent } from './components/login/login.component'\nimport { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n  },\n  {\n    path: 'workspace',\n    component: WorkspaceComponent,\n  },\n  {\n    path: 'workspace/:id',\n    component: BoardComponent,\n  },\n  {\n    path: '**',\n    redirectTo: '/',\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {})],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\n----------------------------------------\n\nTITLE: Importing Sheet Component in React\nDESCRIPTION: Example of importing the Sheet component and its subcomponents in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sheet.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet'\n```\n\n----------------------------------------\n\nTITLE: Starting the Ionic Application Server\nDESCRIPTION: Command to start the Ionic development server, which will serve the application at localhost:3000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nionic serve\n```\n\n----------------------------------------\n\nTITLE: Self-Hosted Environment Docker Deployment\nDESCRIPTION: Docker Compose commands for setting up a self-hosted Supabase environment, including navigating to the docker directory and starting services with development configurations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\ncd docker\ndocker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml up\n```\n\n----------------------------------------\n\nTITLE: Accessing BuildConfig Values in Kotlin\nDESCRIPTION: Retrieves the Supabase URL and API key from the BuildConfig generated fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval url = BuildConfig.SUPABASE_URL\nval apiKey = BuildConfig.SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Separator Component via CLI\nDESCRIPTION: Command to install the Separator component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/separator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add separator\n```\n\n----------------------------------------\n\nTITLE: HTML Supabase Badge (Light)\nDESCRIPTION: HTML implementation of the Supabase light-themed badge with configurable dimensions and alt text\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.sv.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://supabase.com\">\n  <img\n    width=\"168\"\n    height=\"30\"\n    src=\"https://supabase.com/badge-made-with-supabase.svg\"\n    alt=\"Made with Supabase\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Processing Example\nDESCRIPTION: Example SQL statements showing how changes are processed and statement ranges are updated in the IDE.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect first from test;\nselect seond from test; -- a typo we want to fix\nselect third from test;\n```\n\n----------------------------------------\n\nTITLE: Express OAuth Callback Handler\nDESCRIPTION: Implementation of OAuth callback handling in Express.js, managing code exchange and redirect flow.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/auth/callback\", async function (req, res) {\n  const code = req.query.code\n  const next = req.query.next ?? \"/\"\n\n  if (code) {\n    const supabase = createServerClient(\n      process.env.SUPABASE_URL,\n      process.env.SUPABASE_ANON_KEY, {\n    cookies: {\n      getAll() {\n        return parseCookieHeader(context.req.headers.cookie ?? '')\n      },\n      setAll(cookiesToSet) {\n        cookiesToSet.forEach(({ name, value, options }) =>\n          context.res.appendHeader('Set-Cookie', serializeCookieHeader(name, value, options))\n        )\n      },\n    },\n  })\n    await supabase.auth.exchangeCodeForSession(code)\n  }\n\n  res.redirect(303, `/${next.slice(1)}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Makefile for SupaUtils PostgreSQL Extension\nDESCRIPTION: Makefile used to compile the SupaUtils PostgreSQL extension. It defines the module name, object files, and includes the PostgreSQL extension build system.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\n# Makefile\n\n# Our shared library\nMODULE_big = supautils\n\n# Our object files to build for the library\nOBJS = src/supautils.o\n\n# Tell pg_config to pass us the PostgreSQL extensions makefile(PGXS)\n# and include it into our own Makefile through the standard \"include\" directive.\nPG_CONFIG = pg_config\nPGXS := $(shell $(PG_CONFIG) --pgxs)\ninclude $(PGXS)\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies\nDESCRIPTION: Commands for installing Tailwind CSS and its dependencies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss postcss autoprefixer @tailwindcss/forms\nnpx tailwindcss init\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Row Count\nDESCRIPTION: Component snippet showing how to display the count of selected rows using the table's filtered row model.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex-1 text-sm text-muted-foreground\">\n  {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length}{' '}\n  row(s) selected.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component Dependencies Manually\nDESCRIPTION: Command to install the required dependency for the checkbox component manually.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/checkbox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-checkbox\n```\n\n----------------------------------------\n\nTITLE: Aborting Requests with AbortController in JavaScript\nDESCRIPTION: Example of using AbortController to cancel long-running queries in the Supabase JavaScript library. This functionality allows developers to abort requests that are in flight.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-10-04-supabase-beta-sept-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ac = new AbortController()\nconst { data, error } = await supabase\n  .from('very_big_table')\n  .select()\n  .abortSignal(ac.signal)\n\n// Abort the request after 5 seconds\nsetTimeout(() => ac.abort(), 5000)\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi Serializer Dependency in Kotlin Build File\nDESCRIPTION: This snippet shows how to add the Moshi serializer dependency to a Kotlin project using Gradle with the Kotlin DSL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.github.jan-tennert.supabase:serializer-moshi:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Client with Custom Serializer\nDESCRIPTION: Creates a Supabase client using a custom-implemented serializer. This example shows how to set a custom serializer as the default serializer for the client.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabase = createSupabaseClient(supabaseUrl, supabaseKey) {\n    defaultSerializer = CustomSerializer()\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe in Markdown\nDESCRIPTION: HTML code for embedding a YouTube video within a blog post, using a responsive container with specific styling for proper display. The iframe includes standard YouTube embed parameters and security settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-25-supabase-launch-week-four.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/bpzQCViwLLA\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Supabase Svelte Project\nDESCRIPTION: Command to install all necessary dependencies for the Supabase Svelte user management project.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/svelte-user-management/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Attribute Mapping JSON Configuration\nDESCRIPTION: This JSON structure configures attribute mapping for user identity properties like `email` and `first_name` in Supabase Auth. The `name` fields within the `keys` object specify the corresponding attributes in the SAML assertion to map to these properties. This JSON can be provided via file using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"keys\\\": {\n    \\\"email\\\": {\n      \\\"name\\\": \\\"mail\\\"\n    },\n    \\\"first_name\\\": {\n      \\\"name\\\": \\\"givenName\\\"\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Supabase Monthly Growth Image in Markdown\nDESCRIPTION: This code snippet embeds an image showing Supabase's monthly growth timeline into the markdown document. The image is referenced from a specific path and includes alt text for accessibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-26-supabase-how-we-launch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![supabase monthly growth](/images/blog/how-we-launch/how-we-launch-timeline.jpg)\n```\n\n----------------------------------------\n\nTITLE: Performance Results for pgvector 0.6.0 on 16XL Instance with Varying Worker Counts\nDESCRIPTION: A markdown table showing benchmark results for pgvector 0.6.0 on a 16XL instance (64 cores, 256GB RAM). It includes build times, QPS, and accuracy for different HNSW parameters and worker counts.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-30-pgvector-fast-builds.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameters                          | Workers | Index build time | ef_search | QPS  | Accuracy |\n| ----------------------------------- | ------- | ---------------- | --------- | ---- | -------- |\n| m=16, ef_construction=64 (defaults) | 64      | 5m 07s           | 100       | 2086 | 0.956    |\n| m=16, ef_construction=64 (defaults) | 32      | 4m 27s           | 100       | 2082 | 0.958    |\n| m=16, ef_construction=64 (defaults) | 16      | 5m 13s           | 100       | 2085 | 0.956    |\n| m=16, ef_construction=64 (defaults) | 8       | 7m 18s           | 100       | 2092 | 0.956    |\n| m=16, ef_construction=64 (defaults) | 1       | 17m 29s          | 100       | 2091 | 0.958    |\n| m=24, ef_construction=100           | 64      | 5m 37s           | 100       | 1820 | 0.977    |\n| m=24, ef_construction=100           | 32      | 5m 52s           | 100       | 1818 | 0.976    |\n| m=24, ef_construction=100           | 16      | 8m 01s           | 100       | 1806 | 0.978    |\n| m=24, ef_construction=100           | 8       | 11m 10s          | 100       | 1821 | 0.977    |\n| m=24, ef_construction=100           | 1       | 31m 32s          | 100       | 1838 | 0.977    |\n| m=16, ef_construction=200           | 64      | 6m 28s           | 100       | 1952 | 0.977    |\n| m=16, ef_construction=200           | 32      | 7m 27s           | 100       | 1944 | 0.976    |\n| m=16, ef_construction=200           | 16      | 12m 44s          | 100       | 1950 | 0.977    |\n| m=16, ef_construction=200           | 8       | 12m 55s          | 100       | 1957 | 0.977    |\n| m=16, ef_construction=200           | 1       | 39m 40s          | 100       | 1968 | 0.977    |\n```\n\n----------------------------------------\n\nTITLE: Updating and Returning Data in Supabase with TypeScript\nDESCRIPTION: Code examples showing how to update data in a Supabase table with and without returning the updated data. The newer version adds a .select() method to return the updated records.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('my_table')\n  .update({ new_data })\n  .eq('id', id)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('my_table')\n  .update({ new_data })\n  .eq('id', id)\n  .select()\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Privacy Policy Page in JSX\nDESCRIPTION: This code snippet imports necessary components and layouts for rendering the privacy policy page. It includes a Layout component, a SectionContainer component, and a PrivacySettings component from ui-patterns.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy-240804.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../layouts/Layout'\nimport SectionContainer from '../components/Layouts/SectionContainer'\nimport { PrivacySettings } from 'ui-patterns/PrivacySettings'\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Width Variables in TypeScript React\nDESCRIPTION: Defines constant variables for sidebar width in desktop and mobile views, which are used throughout the sidebar implementation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst SIDEBAR_WIDTH = '16rem'\nconst SIDEBAR_WIDTH_MOBILE = '18rem'\n```\n\n----------------------------------------\n\nTITLE: Installing Hover Card via shadcn-ui CLI\nDESCRIPTION: Command to add the hover card component using the shadcn-ui CLI tool\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/hover-card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add hover-card\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component via shadcn-ui CLI\nDESCRIPTION: This command uses the shadcn-ui CLI to add the Avatar component to your project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add avatar\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component in React\nDESCRIPTION: Code snippet showing how to import the Checkbox component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/checkbox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from '@/components/ui/checkbox'\n```\n\n----------------------------------------\n\nTITLE: Adding Path Offset for Particle Distribution in React Three Fiber\nDESCRIPTION: This code adds randomized path offsets to create a more concentrated core in the figure-8 shape with fewer particles at the edges using exponential functions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst xThickness = 7\nconst xRandomnessShape = 2.2\nconst xRandomness = 5\n\nconst pathOffset =\n    Math.pow(\n      Math.random() * xRandomnessShape,\n      xRandomness - xRandomness / 2\n    ) * xThickness\n\n...\n\nparticle.current.position.x = Math.sin(timer) * widthRadius + pathOffset\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Illustrations to Empty State in InnerSideMenu\nDESCRIPTION: Example demonstrating how to include a custom illustration in the empty state panel. The illustration prop accepts any React node, allowing for flexible customization of the empty state appearance.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/inner-side-menu.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<InnerSideBarEmptyPanel\n  title=\"No functions found\"\n  description=\"Create your first serverless function to get started.\"\n  illustration={\n    <figure>\n      <svg>../</svg>\n    </figure>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration for SupaUtils Extension\nDESCRIPTION: Configuration settings required to enable the SupaUtils extension and define reserved roles in PostgreSQL.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n# set the extension as preloaded, this will require a restart\nshared_preload_libraries=\"supautils\"\n\n# the reserved roles\nsupautils.reserved_roles=\"supabase_storage_admin, supabase_auth_admin\"\n```\n\n----------------------------------------\n\nTITLE: Running Deno script with Supabase\nDESCRIPTION: Command to execute a Deno script that uses Supabase. This runs the main.ts file with all permissions allowed.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A main.ts\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Iframe with Styling\nDESCRIPTION: HTML iframe code for embedding a YouTube video with custom styling and security attributes. Used multiple times in the document for various video embeds.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-05-supabase-beta-october-2021.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/yL5WbAKAKjE\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing ExpandingTextArea Component in TSX\nDESCRIPTION: Shows how to import the ExpandingTextArea component from the 'ui' package.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/expanding-textarea.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExpandingTextArea } from 'ui'\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Functions in Supabase Edge Runtime with JSX\nDESCRIPTION: A naive implementation example of using Edge Runtime's Main Worker to trigger a function at regular intervals (every 2 minutes). The code creates a worker instance and uses setInterval to execute periodic requests. Note that production implementations should account for server restarts and timer resetting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-11-edge-runtime-self-hosted-deno-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst interval = 2 * 60 * 1000 // 2 minutes\ntry {\n  const worker = await EdgeRuntime.userWorkers.create({\n    servicePath,\n    memoryLimitMb,\n    workerTimeoutMs,\n    noModuleCache,\n    importMapPath,\n    envVars,\n  })\n  const req = new Request('http://localhost/scheduled-job')\n  setInterval(() => worker.fetch(req), interval)\n} catch (e) {\n  console.error(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Auth Helpers for Remix\nDESCRIPTION: Command to install the required Supabase packages for Remix integration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/auth-helpers-remix @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Typography Plugin to Style Article Content - HTML\nDESCRIPTION: This HTML snippet demonstrates the use of the 'prose' class from the Tailwind CSS Typography plugin to style article content, including headings, paragraphs, and other typographic elements for better readability and aesthetics. The 'prose' class provides a predefined set of styles that enhance the formatting of text elements.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/src/lib/MarkdownSample.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread with cheese to their\n    children, with the food earning such an iconic status in our culture that kids will often dress\n    up as warm, cheesy loaf for Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases\n    springing up around the country.\n  </p>\n  <!-- ... -->\n</article>\n```\n\n----------------------------------------\n\nTITLE: Adding Project URL to Vault for Local Development\nDESCRIPTION: SQL command to add the project URL secret to vault for local Supabase development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  vault.create_secret('http://api.supabase.internal:8000', 'project_url');\n```\n\n----------------------------------------\n\nTITLE: Supavisor Transaction Mode Connection Example\nDESCRIPTION: Connection string example for Supavisor in transaction mode using port 6543.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Example transaction string\npostgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Complete Sidebar Implementation with Navigation\nDESCRIPTION: Full implementation of a sidebar component with navigation menu and icons.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Calendar, Home, Inbox, Search, Settings } from 'lucide-react'\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@/components/ui/sidebar'\n\nconst items = [\n  {\n    title: 'Home',\n    url: '#',\n    icon: Home,\n  },\n  {\n    title: 'Inbox',\n    url: '#',\n    icon: Inbox,\n  },\n  {\n    title: 'Calendar',\n    url: '#',\n    icon: Calendar,\n  },\n  {\n    title: 'Search',\n    url: '#',\n    icon: Search,\n  },\n  {\n    title: 'Settings',\n    url: '#',\n    icon: Settings,\n  },\n]\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Application</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild>\n                    <a href={item.url}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AndroidManifest.xml for Hilt\nDESCRIPTION: Modifies the AndroidManifest.xml to reference the custom Application class that uses Hilt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<application\n...\n    android:name=\".ManageProductApplication\"\n...\n</application>\n```\n\n----------------------------------------\n\nTITLE: Markdown Pricing Table Structure\nDESCRIPTION: A markdown table showing the monthly pricing breakdown for multiple Supabase projects across different service tiers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/billing/pricing/pricing_mfa_phone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Plan       | Project 1 per month | Project 2 per month | Project 3 per month |\n| ---------- | ------------------- | ------------------- | ------------------- |\n| Pro        | $75                 | $10                 | $10                 |\n| Team       | $75                 | $10                 | $10                 |\n| Enterprise | Custom              | Custom              | Custom              |\n```\n\n----------------------------------------\n\nTITLE: Initializing and Generating Supabase Documentation using Make\nDESCRIPTION: This snippet shows the commands to initialize the project dependencies and generate Supabase reference documentation from spec files. It uses Make for automation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/spec/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake init            # install dependencies\n\nmake                # download and transform specs into docs\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Components in React\nDESCRIPTION: This snippet shows how to import the necessary Dialog components from the UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\n```\n\n----------------------------------------\n\nTITLE: Configuring Ionic Vue App with PWA Elements Support\nDESCRIPTION: Updates the main application entry point to include Ionic PWA Elements initialization, enabling access to native device features in the web application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\nimport { IonicVue } from '@ionic/vue'\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/vue/css/ionic.bundle.css'\n\n/* Theme variables */\nimport './theme/variables.css'\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader'\ndefineCustomElements(window)\nconst app = createApp(App).use(IonicVue).use(router)\n\nrouter.isReady().then(() => {\n  app.mount('#app')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Three.js Dependencies\nDESCRIPTION: Commands for installing Three.js and React Three Fiber dependencies, including a specific version for React 17 compatibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber\n\nnpm install three @react-three/fiber@7.0.29\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in TOML\nDESCRIPTION: Demonstrates how to reference environment variables from the .env file within the config.toml file using the env() function.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/managing-config.mdx#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[auth.external.github]\nenabled = true\nclient_id = \"env(GITHUB_CLIENT_ID)\"\nsecret = \"env(GITHUB_SECRET)\"\nredirect_uri = \"\" # Overrides the default auth redirectUrl.\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Separator Dependency\nDESCRIPTION: Command to install the required Radix UI Separator dependency for manual installation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/separator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-separator\n```\n\n----------------------------------------\n\nTITLE: Simulating Long-Running Query in PostgreSQL\nDESCRIPTION: Example of an inefficient query that sleeps for 60 seconds, demonstrating how slow queries can create connection bottlenecks in Supavisor.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- do nothing for 60 seconds\nselect pg_sleep(60);\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component via CLI\nDESCRIPTION: Command to install the select component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add select\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Motion with Sine and Cosine in React Three Fiber\nDESCRIPTION: This code adds a cosine function to the y-position to create circular movement when combined with the sine function on the x-position.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nparticle.current.position.y = Math.cos(timer) * heightRadius\n```\n\n----------------------------------------\n\nTITLE: ProcessUtility Hook Implementation in PostgreSQL Core\nDESCRIPTION: C code showing how PostgreSQL implements the ProcessUtility hook system internally. It demonstrates how utility statements can be intercepted by extensions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// src/backend/tcop/utility.c\n\n// ProcessUtility_hook is NULL by default\nProcessUtility_hook_type ProcessUtility_hook = NULL;\n\n// This function is used for processing all the utility statements\nvoid\nProcessUtility(PARAMS_OMITTED_FOR_BREVITY)\n{\n// call the ProcessUtility_hook if it's not NULL\nif (ProcessUtility_hook)\n  (*ProcessUtility_hook)(PARAMS_OMITTED_FOR_BREVITY);\n// otherwise call the standard function used to process utility statements\nelse\n  standard_ProcessUtility(PARAMS_OMITTED_FOR_BREVITY);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Postgres-WASM Locally\nDESCRIPTION: Commands to clone the postgres-wasm repository and start a local server to run Postgres in the browser. The instructions include options for both the original Snaplet repository and the Supabase fork.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-03-postgres-wasm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From Snaplet Repo\ngit clone git@github.com:snaplet/postgres-wasm.git\ncd postgres-browser/packages/pg-browser\nnpx serve\n\n# From Supabase Fork\ngit clone git@github.com:supabase-community/postgres-wasm.git\ncd postgres-wasm\ngit checkout web\ncd packages/supabrowser\nnpx serve\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarGroup in React\nDESCRIPTION: This snippet demonstrates how to use the SidebarGroup component to create a section within the sidebar. It includes a label, action, and content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar, SidebarContent, SidebarGroup } from '@/components/ui/sidebar'\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Application</SidebarGroupLabel>\n          <SidebarGroupAction>\n            <Plus /> <span className=\"sr-only\">Add Project</span>\n          </SidebarGroupAction>\n          <SidebarGroupContent></SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Component via CLI\nDESCRIPTION: Command to install the drawer component using the shadcn-ui CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/drawer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add drawer\n```\n\n----------------------------------------\n\nTITLE: Ejecting Supabase Configuration for Self-Hosting\nDESCRIPTION: This command generates the necessary files and directories for self-hosting Supabase. It creates a docker-compose.yml file and kong and postgres directories.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupabase eject\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase in React\nDESCRIPTION: Sets up the necessary environment variables for Supabase URL and anonymous key in a .env file for a React project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/password-based-auth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nVITE_SUPABASE_URL=\nVITE_SUPABASE_ANON_KEY=\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase MCP Server for Windows (WSL)\nDESCRIPTION: JSON configuration for running the Supabase MCP server on Windows using Windows Subsystem for Linux (WSL). It specifies 'wsl' as the command and includes arguments for installing and running the latest version of the server with a personal access token.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"npx\",\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--access-token\",\n        \"<personal-access-token>\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting User Location in Edge Functions\nDESCRIPTION: This code snippet shows how to detect a user's location from Edge Functions using the X-Forwarded-For header.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-02-supabase-beta-update-october-2022.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example code mentioned but not provided in the text:\n// https://github.com/supabase/supabase/tree/master/examples/edge-functions/supabase/functions/location\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown/HTML\nDESCRIPTION: An iframe implementation for embedding a YouTube video with specified security and feature parameters\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-29-flutter-hackathon-winners.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/AazB9mQetkw\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Supabase Project Dependencies List\nDESCRIPTION: A structured listing of Go package dependencies showing package paths, versions, and license information. Includes core dependencies from popular frameworks and utilities like AWS SDK, etcd, Cobra, and various Go standard libraries.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/public/lawyers.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.com/fsnotify/fsnotify                                 v1.5.1                                 New BSD\ngithub.com/gogo/protobuf                                     v1.3.2                                 New BSD\ngithub.com/golang/protobuf                                   v1.5.2                                 New BSD\ngithub.com/gorilla/css                                       v1.0.0                                 New BSD\ngithub.com/hashicorp/hcl                                     v1.0.0                                 Mozilla Public License 2.0\ngithub.com/jackc/chunkreader/v2                              v2.0.1                                 MIT\ngithub.com/jackc/pgconn                                      v1.11.0                                MIT\ngithub.com/jackc/pgio                                        v1.0.0                                 MIT\ngithub.com/jackc/pgpassfile                                  v1.0.0                                 MIT\ngithub.com/jackc/pgproto3/v2                                 v2.2.0                                 MIT\ngithub.com/jackc/pgservicefile                               v0.0.0-20200714003250-2b9c44734f2b     MIT\ngithub.com/jackc/pgtype                                      v1.10.0                                MIT\ngithub.com/jackc/pgx/v4                                      v4.15.0                                MIT\n```\n\n----------------------------------------\n\nTITLE: Container Output Format Example\nDESCRIPTION: Expected output format from the docker container showing container details and configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/grafana-not-displaying-data-sXJrMj.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n- CONTAINER ID: < container id >\n- IMAGE: supabase-grafana-supabase-grafana\n- COMMAND: /entrypoint.sh\n- CREATED: < time >\n- STATUS: Up < unit of time > ago\n- PORTS: 3000/tcp, 0.0.0.0:8000 → 8080/tcp\n- NAMES: supabase-grafana-supabase-grafana-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Function Settings\nDESCRIPTION: TOML configuration file example for setting function-specific options like JWT verification and import map location. Uses config.toml to manage individual function settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[functions.hello-world]\nverify_jwt = false\n```\n\n----------------------------------------\n\nTITLE: Inserting 'Made with Supabase' Badge in HTML\nDESCRIPTION: This HTML snippet shows how to embed a 'Made with Supabase' badge in a web page. It creates a clickable image with specified dimensions that links to the Supabase website.\nSOURCE: https://github.com/supabase/supabase/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://supabase.com\">\n  <img\n    width=\"168\"\n    height=\"30\"\n    src=\"https://supabase.com/badge-made-with-supabase.svg\"\n    alt=\"Made with Supabase\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Remote Subquery with Parameters\nDESCRIPTION: Demonstrates how to create and use a foreign table with parameterized queries in ClickHouse.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate foreign table clickhouse.my_table (\n  id bigint,\n  col1 text,\n  col2 bigint,\n  _param1 text,\n  _param2 bigint\n)\nserver clickhouse_server\noptions (\n  table '(select * from my_view(column1=${_param1}, column2=${_param2}))'\n);\n\nselect id, col1, col2\nfrom clickhouse.my_table\nwhere _param1 = 'abc' and _param2 = 42;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Custom Attributes\nDESCRIPTION: This HTML snippet embeds a YouTube video using an iframe. It includes additional attributes like frameBorder and specific allow permissions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-19-launch-week-x-best-launches.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/lHmCshk4pJc\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Run Tests Command\nDESCRIPTION: This command runs the tests for the Supabase Studio setup and ensures that all necessary preconditions are met. It also manages the local environment using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/tests/studio-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Context Menu Component via CLI\nDESCRIPTION: Command to install the Context Menu component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/context-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add context-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Dropdown Menu Component via NPX\nDESCRIPTION: Command to install the dropdown-menu component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Adding SidebarMenuBadge to SidebarMenuItem in React\nDESCRIPTION: This code shows how to use the SidebarMenuBadge component to render a badge within a SidebarMenuItem.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarMenuItem>\n  <SidebarMenuButton />\n  <SidebarMenuBadge>24</SidebarMenuBadge>\n</SidebarMenuItem>\n```\n\n----------------------------------------\n\nTITLE: Adding Moshi Serializer Dependency in Maven POM\nDESCRIPTION: Adds the Moshi serializer dependency for supabase-kt to a Kotlin project using Maven. This is required to use Moshi as the serialization library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.jan-tennert.supabase</groupId>\n    <artifactId>serializer-moshi</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Secrets for Deployed Supabase Project\nDESCRIPTION: Command to set environment variables as secrets in the deployed Supabase project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsupabase secrets set --env-file supabase/functions/.env\n```\n\n----------------------------------------\n\nTITLE: MFA-based RLS Policy\nDESCRIPTION: Implementation of Multi-Factor Authentication check in RLS policy\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Restrict updates.\"\non profiles\nas restrictive\nfor update\nto authenticated using (\n  (select auth.jwt()->>'aal') = 'aal2'\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a RedwoodJS App with yarn create\nDESCRIPTION: Command to create a new RedwoodJS application named 'supabase-redwoodjs' using the Create Redwood App command-line tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create redwood-app supabase-redwoodjs\ncd supabase-redwoodjs\n```\n\n----------------------------------------\n\nTITLE: Displaying Device Information Usage Table in Markdown\nDESCRIPTION: This markdown table outlines how device and log file information is used, the legal bases for processing, and the recipients of this information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| **How we may use the Personal Information**                                                                                                                                                                            | **Legal Bases for Processing**                                                                                                                                                                                                                                                                          | **Recipients of Personal Information**                                                                                                                                                                       |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| We use information about how you use and connect to the Service to present the Service to you on your device.                                                                                                                          | The processing is necessary for performance of a contract with you, namely our Terms of Service. If you access the Service as an authorized user of another customer, the processing is necessary for our and the customer's legitimate interests, namely presenting the Service to you on your device. | We may share this information with the following service providers through the provision of the Service: Posthog, Plausible, Hubspot, Fly.io, Vercel, Sentry, Google LLC, Hex.tech, and Amazon Web Services. |\n| We use this information to identify and detect multiple attempts to access the Service to detect fraudulent use of the Service, attempts to breach the security of the Service and to ensure that the Service does not get overloaded. | The processing is necessary for our legitimate interests, namely maintaining the security and integrity of the Service.                                                                                                                                                                                 |                                                                                                                                                                                                              |\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Demo in Markdown with iframe\nDESCRIPTION: HTML code snippet for embedding a YouTube video as a demonstration of Supabase features within a Markdown document. The iframe is styled with CSS classes for proper formatting and border display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-02-supabase-beta-february-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/h-ses99G45g\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: Embeds a YouTube video using an iframe element. The video is about the Launch Week landing page and Golden Tickets feature.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-community-day.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/4_duDgQeCyM?modestbranding=1&autohide=1&showinfo=0&controls=0\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma UI Kit in HTML\nDESCRIPTION: This code snippet embeds the Figma UI Kit design into an HTML page using an iframe. It sets the aspect ratio and applies CSS classes for styling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/figma.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<AspectRatio ratio={12 / 9} className=\"w-full mt-4\">\n  <iframe\n    src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Fdesign%2FWCja3lpEj1DeunV1d5zu5D%2FDesign-System%3Fnode-id%3D520%253A1715%26t%3Dz8Quu7PADvSqD0Ss-1\"\n    className=\"h-full w-full overflow-hidden rounded-lg border bg-surface-100\"\n  ></iframe>\n</AspectRatio>\n```\n\n----------------------------------------\n\nTITLE: Geographic Data Unnesting Query\nDESCRIPTION: SQL query showing how to access Cloudflare geographic data from edge logs by unnesting metadata, request, and cf fields.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  city\nfrom\n  edge_logs\n-- Unpack 'metadata' field\ncross join unnest(metadata) AS metadata\n-- unpack 'request' from 'metadata'\ncross join unnest(request) AS request;\n-- unpack 'cf' from 'request'\ncross join unnest(cf) AS cf;\n```\n\n----------------------------------------\n\nTITLE: Creating Static Menu Titles with InnerSideBarTitle in React\nDESCRIPTION: Example showing how to use InnerSideBarTitle for non-collapsible menu sections. This approach allows more flexibility in how menu items are structured, without requiring collapsible wrapper components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/inner-side-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<InnerSideBarTitle>Projects</InnerSideBarTitle>\n<div className=\"mt-2\">\n    <InnerSideMenuItem href=\"/dashboard\">Dashboard</InnerSideMenuItem>\n    <InnerSideMenuItem href=\"/team\">Team</InnerSideMenuItem>\n    <InnerSideMenuItem href=\"/settings\">Settings</InnerSideMenuItem>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component in React\nDESCRIPTION: Code snippet showing how to import the Skeleton component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/skeleton.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skeleton } from '@/components/ui/skeleton'\n```\n\n----------------------------------------\n\nTITLE: Running Postgres Tools CLI Check\nDESCRIPTION: Command line example showing how to run a SQL file check using the postgres tools CLI\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npostgrestools check test.sql\n```\n\n----------------------------------------\n\nTITLE: Video Component Implementation\nDESCRIPTION: Markdown/JSX implementation of a video player component used to showcase Supabase features. The component includes autoplay, muted, and controls attributes with a source from Supabase storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-30-supabase-enterprise.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<video width=\"99%\" autoPlay muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/launch-week-4/spend-caps.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Private Bucket Access with JWT\nDESCRIPTION: Demonstrates downloading a file from a private bucket using an authorization header with user's JWT, which allows fine-grained access control through RLS policies\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/fundamentals.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Download method for private bucket\nconst { data, error } = await supabase.storage\n  .from('private-bucket')\n  .download('path/to/file', {\n    headers: { Authorization: 'Bearer ' + userJwt }\n  })\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Actions Based on Active State\nDESCRIPTION: Demonstrates how to apply conditional styling to sidebar menu actions based on the active state of the parent button.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarMenuItem>\n  <SidebarMenuButton />\n  <SidebarMenuAction className=\"peer-data-[active=true]/menu-button:opacity-100\" />\n</SidebarMenuItem>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change into the newly created application directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/nextjs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd name-of-new-app\n```\n\n----------------------------------------\n\nTITLE: Starting Supabase with BigQuery Backend\nDESCRIPTION: Commands to set up and start the Supabase stack with BigQuery backend for analytics using Docker Compose.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-analytics/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# assuming you clone the supabase/supabase repo.\ncd docker\ndocker compose -f docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component\nDESCRIPTION: TypeScript code showing how to import the Switch component from the components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/switch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from '@/components/ui/switch'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete SignInScreen with Jetpack Compose\nDESCRIPTION: A complete Jetpack Compose screen implementation for user authentication. It provides email and password fields, Google sign-in option, and navigation to sign-up screen. Uses Hilt for ViewModel injection and Material Design components.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)\n@Composable\nfun SignInScreen(\n    modifier: Modifier = Modifier,\n    navController: NavController,\n    viewModel: SignInViewModel = hiltViewModel()\n) {\n    val snackBarHostState = remember { SnackbarHostState() }\n    val coroutineScope = rememberCoroutineScope()\n    Scaffold(\n        snackbarHost = { androidx.compose.material.SnackbarHost(snackBarHostState) },\n        topBar = {\n            TopAppBar(\n                navigationIcon = {\n                    IconButton(onClick = {\n                        navController.navigateUp()\n                    }) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = null,\n                            tint = MaterialTheme.colorScheme.onPrimary\n                        )\n                    }\n                },\n                backgroundColor = MaterialTheme.colorScheme.primary,\n                title = {\n                    Text(\n                        text = \"Login\",\n                        color = MaterialTheme.colorScheme.onPrimary,\n                    )\n                },\n            )\n        }\n    ) { paddingValues ->\n        Column(\n            modifier = modifier\n                .padding(paddingValues)\n                .padding(20.dp)\n        ) {\n            val email = viewModel.email.collectAsState(initial = \"\")\n            val password = viewModel.password.collectAsState()\n            androidx.compose.material.OutlinedTextField(\n                label = {\n                    Text(\n                        text = \"Email\",\n                        color = MaterialTheme.colorScheme.primary,\n                        style = MaterialTheme.typography.titleMedium\n                    )\n                },\n                maxLines = 1,\n                shape = RoundedCornerShape(32),\n                modifier = modifier.fillMaxWidth(),\n                value = email.value,\n                onValueChange = {\n                    viewModel.onEmailChange(it)\n                },\n            )\n            androidx.compose.material.OutlinedTextField(\n                label = {\n                    Text(\n                        text = \"Password\",\n                        color = MaterialTheme.colorScheme.primary,\n                        style = MaterialTheme.typography.titleMedium\n                    )\n                },\n                maxLines = 1,\n                shape = RoundedCornerShape(32),\n                modifier = modifier\n                    .fillMaxWidth()\n                    .padding(top = 12.dp),\n                value = password.value,\n                onValueChange = {\n                    viewModel.onPasswordChange(it)\n                },\n            )\n            val localSoftwareKeyboardController = LocalSoftwareKeyboardController.current\n            Button(modifier = modifier\n                .fillMaxWidth()\n                .padding(top = 12.dp),\n                onClick = {\n                    localSoftwareKeyboardController?.hide()\n                    viewModel.onGoogleSignIn()\n                }) {\n                Text(\"Sign in with Google\")\n            }\n            Button(modifier = modifier\n                .fillMaxWidth()\n                .padding(top = 12.dp),\n                onClick = {\n                    localSoftwareKeyboardController?.hide()\n                    viewModel.onSignIn()\n                    coroutineScope.launch {\n                        snackBarHostState.showSnackbar(\n                            message = \"Sign in successfully !\",\n                            duration = SnackbarDuration.Long\n                        )\n                    }\n                }) {\n                Text(\"Sign in\")\n            }\n            OutlinedButton(modifier = modifier\n                .fillMaxWidth()\n                .padding(top = 12.dp), onClick = {\n                navController.navigate(SignUpDestination.route)\n            }) {\n                Text(\"Sign up\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Movie Data from TMDB API\nDESCRIPTION: Queries the TMDB API to retrieve popular movies for a specific year with various filters and parameters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchParams = new URLSearchParams()\nsearchParams.set('sort_by', 'popularity.desc')\nsearchParams.set('page', '1')\nsearchParams.set('language', 'en-US')\nsearchParams.set('primary_release_year', `${year}`)\nsearchParams.set('include_adult', 'false')\nsearchParams.set('include_video', 'false')\nsearchParams.set('region', 'US')\nsearchParams.set('watch_region', 'US')\nsearchParams.set('with_original_language', 'en')\n\nconst tmdbResponse = await fetch(\n  `https://api.themoviedb.org/3/discover/movie?${searchParams.toString()}`,\n  {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${tmdbApiKey}`,\n    },\n  }\n)\n\nconst tmdbJson = await tmdbResponse.json()\n\nconst tmdbStatus = tmdbResponse.status\nif (!(200 <= tmdbStatus && tmdbStatus <= 299)) {\n  return returnError({\n    message: 'Error retrieving data from tmdb API',\n  })\n}\n\nconst films = tmdbJson.results\n```\n\n----------------------------------------\n\nTITLE: Local Development Environment Variables\nDESCRIPTION: Example of local environment configuration with GitHub OAuth credentials\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nSUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID=<client-id>\nSUPABASE_AUTH_EXTERNAL_GITHUB_SECRET=<client-secret>\n```\n\n----------------------------------------\n\nTITLE: Executing Deployed Llamafile Function\nDESCRIPTION: cURL command to test the deployed Llamafile function with a sample prompt.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"https://project-ref.supabase.co/functions/v1/llamafile\" \\\n --data-urlencode \"prompt=write a short rap song about Supabase, the Postgres Developer platform, as sung by Nicki Minaj\" \\\n -H \"Authorization: $ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TOC Video in YAML Frontmatter\nDESCRIPTION: Example of defining a table of contents video in page frontmatter using YAML syntax.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntocVideo: 'rzglqRdZUQE',\n---\n```\n\n----------------------------------------\n\nTITLE: Using Admonition Components in MDX\nDESCRIPTION: Examples of using different types of admonition components (danger, deprecation, caution, tip, note) for highlighting important information in the documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Admonition type=\"danger\">\n\nThis could lead to data loss!\n\n</Admonition>\n\n<Admonition type=\"deprecation\">\n\nThis feature is deprecated.\n\n</Admonition>\n\n<Admonition type=\"caution\">\n\nYou should make sure you don't set this up wrong.\n\n</Admonition>\n\n<Admonition type=\"tip\">\n\nIn certain cases, you may want to do this.\n\n</Admonition>\n\n<Admonition type=\"note\">\n\nAdditional helpful information.\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Layout Export Configuration\nDESCRIPTION: Exports the default layout configuration with metadata and context for the security page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/security.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (context) => <Layout meta={meta} children={context.children} context={context} />\n```\n\n----------------------------------------\n\nTITLE: Section Component Implementation\nDESCRIPTION: Reusable Section component that renders security feature sections with icons or images and children content.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/security.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Section = ({ children, icon, img }) => (\n  <div>\n    {icon && (\n      <div className=\"border shadow-background-surface-300 not-prose bg-surface-100 -mb-4 flex h-10 w-10 items-center justify-center rounded-full\">\n        <figure className=\"w-5 h-5 flex items-center justify-center\">{icon}</figure>\n      </div>\n    )}\n    {img && <div className=\"-mb-4 flex h-12 w-12 items-center justify-center\">{img}</div>}\n    {children}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Legacy Error Format in JSON\nDESCRIPTION: Shows the structure of the legacy error format returned by Supabase Storage. It includes the HTTP status code, error code, and error message.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/error-codes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"httpStatusCode\": 400,\n  \"code\": \"error_code\",\n  \"message\": \"error_message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in supabase-flutter v0 vs v1\nDESCRIPTION: Demonstrates the change in error handling between v0 and v1. In v0, errors were returned as a response, while in v1, errors are thrown as exceptions.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = await supabase.from('my_table').select().execute();\nfinal error = res.error;\nif (error != null) {\n  // handle error\n}\nfinal data = res.data;\n```\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n    final data = supabase.from('my_table').select();\n} catch (error) {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Authentication Methods in Dart\nDESCRIPTION: Shows the new, more descriptive authentication method names for password and OAuth-based authentication.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait supabase.auth.signInWithPassword(email: email, password: password);\n\nawait supabase.auth.signInWithOAuth(Provider.github)\n```\n\n----------------------------------------\n\nTITLE: Creating New Migration File for User Management\nDESCRIPTION: Command to generate a new migration file for the user management starter schema when working in a local development environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/project_setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase migration new user_management_starter\n```\n\n----------------------------------------\n\nTITLE: Unscoped API Request to Retrieve Hidden Bulletins\nDESCRIPTION: cURL command to query the Supabase PostgREST API without date filtering, allowing access to all bulletins including older ones containing a hidden flag. This demonstrates how API parameter manipulation can reveal hidden data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/bulletins?select=*' -H 'accept-profile: public' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVic3NpYnpzbnd0d2JidmJoYnZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzEwMTYxMjksImV4cCI6MjA0NjU5MjEyOX0.hUbR1lqlGnQZlvjOgt4Wzn9iHidJP4iVHyWE76d9FUk' -H 'authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVic3NpYnpzbnd0d2JidmJoYnZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzEwMTYxMjksImV4cCI6MjA0NjU5MjEyOX0.hUbR1lqlGnQZlvjOgt4Wzn9iHidJP4iVHyWE76d9FUk'\n```\n\n----------------------------------------\n\nTITLE: Embedding Supabase Badge in HTML\nDESCRIPTION: This snippet provides the HTML code to embed a 'Made with Supabase' badge into a webpage. It includes attributes for width, height, and alt text.\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.tr.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://supabase.com\">\n  <img\n    width=\"168\"\n    height=\"30\"\n    src=\"https://supabase.com/badge-made-with-supabase.svg\"\n    alt=\"Made with Supabase\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Settings for Subfolder Deno Support\nDESCRIPTION: JSON configuration for enabling the Deno language server only in the Supabase functions directory while using VSCode's built-in JavaScript/TypeScript server elsewhere.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-development.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deno.enablePaths\": [\"./supabase/functions\"],\n  \"deno.importMap\": \"./supabase/functions/import_map.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Tailwind Configuration - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates a default Tailwind CSS configuration file structure. It includes essential properties like 'purge', 'theme', 'variants', and 'plugins', which determine how Tailwind processes and generates the CSS styles based on the project's requirements.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/src/lib/MarkdownSample.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog with Cancel Button\nDESCRIPTION: Text confirm dialog implementation that includes a cancel button option for user interaction.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/text-confirm-dialog.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"text-confirm-dialog-with-cancel-button\"\n  description=\"An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire website and provides the sitemap location at supabase.com/docs/sitemap.xml. This helps search engines properly index the Supabase documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\nSitemap: https://supabase.com/docs/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rules Configuration\nDESCRIPTION: ProGuard rules needed to preserve credential manager classes during code optimization.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_13\n\nLANGUAGE: proguard\nCODE:\n```\n-if class androidx.credentials.CredentialManager\n-keep class androidx.credentials.playservices.** {\n  *;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Client Component in JavaScript\nDESCRIPTION: This JavaScript code snippet showcases a client-side component for handling user authentication in a Next.js application using Supabase. The component manages user sign-ups, sign-ins, and sign-outs by triggering corresponding methods on a Supabase client. It connects to browser event handlers, updating the internal state and refreshing the page after authentication actions. The dependencies include @supabase/auth-helpers-nextjs and next/navigation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use client'\n\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs'\nimport { useRouter } from 'next/navigation'\nimport { useState } from 'react'\n\nexport default function Login() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const router = useRouter()\n  const supabase = createClientComponentClient()\n\n  const handleSignUp = async () => {\n    await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        emailRedirectTo: `${location.origin}/auth/callback`,\n      },\n    })\n    router.refresh()\n  }\n\n  const handleSignIn = async () => {\n    await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n    router.refresh()\n  }\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut()\n    router.refresh()\n  }\n\n  return (\n    <>\n      <input name=\"email\" onChange={(e) => setEmail(e.target.value)} value={email} />\n      <input\n        type=\"password\"\n        name=\"password\"\n        onChange={(e) => setPassword(e.target.value)}\n        value={password}\n      />\n      <button onClick={handleSignUp}>Sign up</button>\n      <button onClick={handleSignIn}>Sign in</button>\n      <button onClick={handleSignOut}>Sign out</button>\n    </>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inserting 'Made with Supabase' Badge in Markdown\nDESCRIPTION: This snippet demonstrates how to add a 'Made with Supabase' badge to a Markdown file. It includes an image link that directs to the Supabase website.\nSOURCE: https://github.com/supabase/supabase/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Made with Supabase](https://supabase.com/badge-made-with-supabase.svg)](https://supabase.com)\n```\n\n----------------------------------------\n\nTITLE: Importing Drawer Components in React\nDESCRIPTION: Importing various Drawer components from the UI library in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/drawer.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from '@/components/ui/drawer'\n```\n\n----------------------------------------\n\nTITLE: Defining ImageGrid Component with Company Logos\nDESCRIPTION: JSX/Markdown component that displays a grid of company logos using Supabase. The component accepts configuration for responsive column layouts and an array of company image data.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-30-supabase-enterprise.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ImageGrid\n  smCols={3}\n  mdCols={4}\n  lgCols={4}\n  images={[\n    {\n      name: 'wells-fargo',\n      image: '/images/company/companies-using-supabase/wells-fargo.png',\n    },\n    // ... additional company entries\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Dialog Components\nDESCRIPTION: TypeScript/React code showing how to import all necessary alert dialog components from the UI components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog'\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with npm start\nDESCRIPTION: Launches the application in development mode with live reloading at http://localhost:3000. Changes to the code will automatically refresh the browser and lint errors will be displayed in the console.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Key for View in pg_graphql\nDESCRIPTION: This SQL snippet adds a comment to the 'ProjectOwner' view, specifying the primary key columns for use with pg_graphql. This is necessary because pg_graphql requires primary keys for all entities it exposes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncomment on view \"ProjectOwner\"\n  is '@graphql({\"primary_key_columns\": [\"id\"]})';\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React\nDESCRIPTION: This code snippet shows how to import the Avatar component and its subcomponents in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/avatar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\n```\n\n----------------------------------------\n\nTITLE: Environment variables for Supabase configuration\nDESCRIPTION: Environment variables file (.env.local) containing Supabase URL and anonymous key placeholders.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SUPABASE_URL=YOUR_SUPABASE_URL\nVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Function in PostgreSQL\nDESCRIPTION: Demonstrates creating a simple addition function in PostgreSQL using SQL language. The function takes two integer parameters and returns their sum.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# as postgres\npostgres=> create function add(integer, integer)\nreturns integer\nas 'select $1 + $2;'\nlanguage sql;\nCREATE FUNCTION\n```\n\n----------------------------------------\n\nTITLE: Embedding Loom Video Demo - HTML iframe\nDESCRIPTION: HTML code for embedding a Loom video demonstration using an iframe within a container div\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-03-supabase-alpha-september-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.loom.com/embed/c7d66ae1f4c1458d964147c5c58aad59\"\n    frameBorder=\"0\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Database as Template\nDESCRIPTION: SQL command to modify an existing database to become a template database by setting is_template property.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE template_db_name WITH is_template TRUE;\n```\n\n----------------------------------------\n\nTITLE: Formatting GET Request for Supabase T-Shirt Competition\nDESCRIPTION: An example GET request URL format for the T-shirt competition with required parameters including email, Twitter handle, t-shirt size, and answer.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/get-tshirt-competition/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://obuldanrptloktxcffvn.supabase.co/functions/v1/get-tshirt-competition?email=testr@test.de&twitter=thorwebdev&size=2XL&answer=20\n```\n\n----------------------------------------\n\nTITLE: Simplified Data Querying in Supabase Flutter\nDESCRIPTION: Demonstrates the removal of .execute() requirement when querying data from Supabase database.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nfinal response = await Supabase.instance.from('messages').select().execute();\nfinal data = response.data;\n\n// After\nfinal data = await Supabase.instance.from('messages').select();\n```\n\n----------------------------------------\n\nTITLE: Starting the development server\nDESCRIPTION: Commands to navigate to the project directory and start the development server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd app-name\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Previous Data Query in Supabase.js\nDESCRIPTION: Shows the old way of querying data using the body property.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-30-improved-dx.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { body } = supabase.from('todos').select('*')\n```\n\n----------------------------------------\n\nTITLE: Stopping PostgreSQL for Recovery\nDESCRIPTION: Command to stop the PostgreSQL service before beginning the recovery process.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo /etc/init.d/postgresql stop\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps Component Logic\nDESCRIPTION: TypeScript implementation for Google Maps initialization and marker management in the HomePage component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, ElementRef, ViewChild } from '@angular/core'\nimport { GoogleMap } from '@capacitor/google-maps'\nimport { LatLngBounds } from '@capacitor/google-maps/dist/typings/definitions'\nimport { ModalController } from '@ionic/angular'\nimport { BehaviorSubject } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { NearbyPage } from '../nearby/nearby.page'\nimport { StoreResult, StoresService } from '../services/stores.service'\nimport { StorePage } from '../store/store.page'\n\nexport interface StoreMarker {\n  markerId: string\n  storeId: number\n}\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n  @ViewChild('map') mapRef!: ElementRef<HTMLElement>\n  map!: GoogleMap\n  mapBounds = new BehaviorSubject<LatLngBounds | null>(null)\n  activeMarkers: StoreMarker[] = []\n  selectedMarker: StoreMarker | null = null\n  selectedStore: StoreResult | null = null\n\n  constructor(\n    private storesService: StoresService,\n    private modalCtrl: ModalController\n  ) {}\n\n  ionViewDidEnter() {\n    this.createMap()\n  }\n\n  async createMap() {\n    this.map = await GoogleMap.create({\n      forceCreate: true,\n      id: 'my-map',\n      element: this.mapRef.nativeElement,\n      apiKey: environment.mapsKey,\n      config: {\n        center: {\n          lat: 51.8,\n          lng: 7.6,\n        },\n        zoom: 7,\n      },\n    })\n    this.map.enableCurrentLocation(true)\n  }\n\n  async showNearby() {\n    const modal = await this.modalCtrl.create({\n      component: NearbyPage,\n    })\n    modal.present()\n  }\n\n  async addStore() {\n    const modal = await this.modalCtrl.create({\n      component: StorePage,\n    })\n    modal.present()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated setOpen Callback in SidebarProvider\nDESCRIPTION: Shows the improved setOpen callback implementation in SidebarProvider that handles cookie storage for sidebar state persistence.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nconst setOpen = React.useCallback(\n  (value: boolean | ((value: boolean) => boolean)) => {\n    const openState = typeof value === 'function' ? value(open) : value\n    if (setOpenProp) {\n      setOpenProp(openState)\n    } else {\n      _setOpen(openState)\n    }\n\n    // This sets the cookie to keep the sidebar state.\n    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n  },\n  [setOpenProp, open]\n)\n```\n\n----------------------------------------\n\nTITLE: Video Source Element for AI Demo\nDESCRIPTION: HTML video element configuration for displaying AI feature demonstration\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-supabase-studio-2.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/cmdk.mp4\"\n    type=\"video/mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Menu Components\nDESCRIPTION: Shows how to import all necessary navigation menu components from the UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from '@/components/ui/navigation-menu'\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Usage\nDESCRIPTION: Example of how to use the Select component with theme options (light, dark, system). Shows proper nesting of subcomponents and basic configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/select.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Select>\n  <SelectTrigger className=\"w-[180px]\">\n    <SelectValue placeholder=\"Theme\" />\n  </SelectTrigger>\n  <SelectContent>\n    <SelectItem value=\"light\">Light</SelectItem>\n    <SelectItem value=\"dark\">Dark</SelectItem>\n    <SelectItem value=\"system\">System</SelectItem>\n  </SelectContent>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Menu Components in React\nDESCRIPTION: Import statement for the dropdown menu components in a React/TypeScript application, showing the path to import from local components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n```\n\n----------------------------------------\n\nTITLE: Disabling explain() in Supabase\nDESCRIPTION: SQL commands to disable the explain() method after use by setting the appropriate role parameters back to their default values and reloading the configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- disable explain\nalter role authenticator\nset pgrst.db_plan_enabled to 'false';\n\n-- if you used the above pre-request\nalter role authenticator\nset pgrst.db_pre_request to '';\n\n-- reload the config\nnotify pgrst, 'reload config';\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component\nDESCRIPTION: Code snippet showing how to import the Select component and its subcomponents from the UI library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/select.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project for Llamafile Integration\nDESCRIPTION: Command to bootstrap a new Supabase project locally for integrating Llamafile.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx supabase bootstrap scratch\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Morrow Partner with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Morrow, an expert partner. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/uPN5BbIuJw8\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Data Table Implementation\nDESCRIPTION: File structure layout for implementing a data table in a Next.js application, showing the separation of concerns between columns, table component, and page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\napp\n└── payments\n    ├── columns.tsx\n    ├── data-table.tsx\n    └── page.tsx\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Clerk Integration with iframe in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video showcasing Clerk's authentication integration with Supabase. Uses responsive styling with the 'video-container' class.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-04-20-partner-gallery-works-with-supabase.mdx#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/vLSynn8_SN4\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Supabase Badge (Dark)\nDESCRIPTION: Markdown implementation of the Supabase dark-themed badge with a hyperlink to the Supabase website\nSOURCE: https://github.com/supabase/supabase/blob/master/i18n/README.sv.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![Made with Supabase](https://supabase.com/badge-made-with-supabase-dark.svg)](https://supabase.com)\n```\n\n----------------------------------------\n\nTITLE: Displaying egghead.io Course Image in Markdown\nDESCRIPTION: This code snippet demonstrates how to include an image for the egghead.io Supabase course in a Markdown document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-launch-week-three-friday-five-more-things.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![build-a-saas-product-with-next-js-supabase-and-stripe.png](/images/blog/launch-week-three/five-more-things/build-a-saas-product-with-next-js-supabase-and-stripe.png)\n```\n\n----------------------------------------\n\nTITLE: Embedding Loom Video Demo in HTML\nDESCRIPTION: HTML iframe code for embedding a Loom video demonstration of Supabase features within the blog post. The iframe is styled with full width and proper frame settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-09-03-supabase-alpha-august-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.loom.com/embed/a43084629c7e47828e3a292b60719393\"\n    frameBorder=\"0\"\n    allowFullScreen\n  ></iframe>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component in MDX\nDESCRIPTION: Example showing how to use the Accordion component for progressive content disclosure in documentation. Includes options for multiple items, styling, and behavior configuration.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/app/contributing/content.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Accordion\n  type=\"default\"\n  openBehaviour=\"multiple\"\n  chevronAlign=\"right\"\n  justified\n  size=\"medium\"\n  className=\"text-foreground-light mt-8 mb-6\"\n>\n  <div className=\"border-b mt-3 pb-3\">\n    <AccordionItem\n      header=\"Accordion item 1\"\n      id=\"item-1\"\n    >\n\n    Your content here.\n\n    </AccordionItem>\n\n  </div>\n  <div className=\"border-b mt-3 pb-3\">\n    <AccordionItem\n      header=\"Accordion item 2\"\n      id=\"item-2\"\n    >\n\n    More content here.\n\n    </AccordionItem>\n\n  </div>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component Dependencies Manually\nDESCRIPTION: Command to install the required dependency for the Sheet component manually using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sheet.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dialog\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration for Security Page\nDESCRIPTION: Defines the metadata for the security page including title and description.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/security.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const meta = {\n  type: 'lp',\n  title: 'Security at Supabase',\n  description:\n    'Supabase is trusted by thousands of developers for building and deploying secure applications.',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Example Links in JavaScript\nDESCRIPTION: This code snippet defines an array of example links with their names, descriptions, and URLs. It's used to populate a grid of example projects in the documentation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const examples = [\n  {\n    name: 'Headless Vector Search',\n    description: 'A toolkit to perform vector similarity search on your knowledge base embeddings.',\n    href: '/guides/ai/examples/headless-vector-search',\n  },\n  {\n    name: 'Image Search with OpenAI CLIP',\n    description: 'Implement image search with the OpenAI CLIP Model and Supabase Vector.',\n    href: '/guides/ai/examples/image-search-openai-clip',\n  },\n  {\n    name: 'Hugging Face inference',\n    description: 'Generate image captions using Hugging Face.',\n    href: '/guides/ai/examples/huggingface-image-captioning',\n  },\n  {\n    name: 'OpenAI completions',\n    description: 'Generate GPT text completions using OpenAI in Edge Functions.',\n    href: '/guides/ai/examples/openai',\n  },\n  {\n    name: 'Building ChatGPT Plugins',\n    description: 'Use Supabase as a Retrieval Store for your ChatGPT plugin.',\n    href: '/guides/ai/examples/building-chatgpt-plugins',\n  },\n  {\n    name: 'Vector search with Next.js and OpenAI',\n    description:\n      'Learn how to build a ChatGPT-style doc search powered by Next.js, OpenAI, and Supabase.',\n    href: '/guides/ai/examples/nextjs-vector-search',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Table Component via CLI\nDESCRIPTION: Command to install the table component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add table\n```\n\n----------------------------------------\n\nTITLE: Supavisor Transaction Mode Connection String\nDESCRIPTION: Example of a connection string for Supavisor in transaction mode, which uses port 6543. In this mode, clients can make a single query before being returned to the waiting pool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Example transaction string\npostgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres\n```\n\n----------------------------------------\n\nTITLE: Importing Label Component in React/TypeScript\nDESCRIPTION: This snippet shows how to import the Label_Shadcn_ component from the UI components library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/label.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label_Shadcn_ } from '@/components/ui/label'\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Diagram Kit in HTML\nDESCRIPTION: This code snippet embeds the Figma Diagram Kit design into an HTML page using an iframe. It uses the same aspect ratio and similar CSS classes as the UI Kit embedding.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/figma.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<AspectRatio ratio={12 / 9} className=\"w-full mt-4\">\n  <iframe\n    src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Fdesign%2Fd6EV8a9G2yLht01AayAkmJ%2FDiagram-Kit-(Variables)%3Fnode-id%3D47%253A7265%26t%3D3JsjisJgJqD08wGG-1\"\n    className=\"h-full w-full overflow-hidden rounded-lg border bg-surface-100\"\n  ></iframe>\n</AspectRatio>\n```\n\n----------------------------------------\n\nTITLE: SQL Job Queue Table Creation\nDESCRIPTION: Creates a table for storing SMS message jobs with properties for job management including retry logic and scheduling.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table job_queue (\n  job_id uuid primary key default gen_random_uuid(),\n  job_data jsonb not null,\n  created_at timestamp default now(),\n  status text default 'pending',\n  priority int default 0,\n  retry_count int default 0,\n  max_retries int default 2,\n  scheduled_at timestamp default now()\n);\n```\n\n----------------------------------------\n\nTITLE: OpenAI API Key Environment Variable for Supabase AI Assistant\nDESCRIPTION: Example of storing the OpenAI API key in a .env file to be used by the Supabase Studio service for AI features, with a reminder not to check secrets into version control.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n## Never check your secrets into version control\n`${OPENAI_API_KEY}`\n```\n\n----------------------------------------\n\nTITLE: Embedding MP4 Video for Team Invitation Feature\nDESCRIPTION: HTML video element for demonstrating the team invitation feature in Supabase. It's configured with identical settings to other video elements for consistency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-09-03-supabase-alpha-august-2020.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/invite-team.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Components\nDESCRIPTION: Import statement for tooltip-related components from the UI library\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/tooltip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'\n```\n\n----------------------------------------\n\nTITLE: Creating Migration File with Proper Naming Convention\nDESCRIPTION: Example of the proper naming convention for Supabase migration files using the YYYYMMDDHHmmss_short_description.sql format. The timestamp uses UTC time with four-digit year, two-digit month, day, hour (24-hour format), minute, and second.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-create-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n20240906123045_create_profiles.sql\n```\n\n----------------------------------------\n\nTITLE: Loading pg_plan_filter Extension in PostgreSQL\nDESCRIPTION: Shows how to enable the pg_plan_filter extension on a per-connection basis by loading the plan_filter module.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nload 'plan_filter';\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in HTML/JSX\nDESCRIPTION: Code to embed a YouTube video using an iframe with responsive design in React/JSX format. The component includes settings for borders, aspect ratio, and YouTube privacy-enhanced mode.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-02-supabase-beta-june-2021.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"video-with-border w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/m3yRPNyYolk\"\n    frameBorder=\"1\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing supabase-js v2 via npm\nDESCRIPTION: Command to install the latest version of supabase-js v2 using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @supabase/supabase-js@2\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Level Security Policy\nDESCRIPTION: SQL command to create a row level security policy that allows authenticated users to read from the countries table.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/hono/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"authenticated users can read countries\"\non public.countries\nfor select to authenticated\nusing (true);\n```\n\n----------------------------------------\n\nTITLE: Adding Capacitor Native Platforms\nDESCRIPTION: Commands for adding iOS and Android platforms to an Ionic project using Capacitor.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nionic build\nionic cap add ios\nionic cap add android\n```\n\n----------------------------------------\n\nTITLE: Installing Collapsible Component via CLI\nDESCRIPTION: Command to install the Collapsible component using the shadcn-ui CLI tool. This is the simplest method for adding the component to your project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/collapsible.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add collapsible\n```\n\n----------------------------------------\n\nTITLE: Storage Webhook Event Types\nDESCRIPTION: List of available webhook event types for monitoring storage operations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-13-storage-image-resizing-smart-cdn.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nObjectCreated:Post       # A new object is created\nObjectCreated:Put        # A new object is updated\nObjectCreated:Copy       # An object is duplicated\nObjectCreated:Move       # An object is created as part of a move operation\nObjectRemoved:Delete     # An object is deleted\nObjectRemoved:Move       # An object is deleted as part of a move operation\nObjectUpdated:Metadata   # An object's metadata is updated\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction to Read-Write Mode in Postgres\nDESCRIPTION: This SQL command changes the current session's transaction characteristics to read-write mode, allowing data modification operations in a previously read-only environment.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nset session characteristics as transaction read write;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with React/HTML\nDESCRIPTION: Code for embedding a YouTube video player with specific configuration and permissions\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-supabase-studio-2.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/0rcNqHt5KWU\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Component in React\nDESCRIPTION: Code snippet showing how to import the Toggle component in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toggle } from '@/components/ui/toggle'\n```\n\n----------------------------------------\n\nTITLE: Using Supabase CLI for SSO Management\nDESCRIPTION: Command-line interface usage for managing Single Sign-On (SSO) authentication providers in Supabase projects. Shows available commands for adding, listing, removing, and updating SSO providers.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ supabase sso --help\nManage Single Sign-On (SSO) authentication for projects\n\nUsage:\n  supabase sso [command]\n\nAvailable Commands:\n  add         Add a new SSO identity provider\n  info        Returns the SAML SSO settings required for the identity provider\n  list        List all SSO identity providers for a project\n  remove      Remove an existing SSO identity provider\n  show        Show information about an SSO identity provider\n  update      Update information about an SSO identity provider\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Components for Privacy Policy Page\nDESCRIPTION: React/Next.js imports for page layout components and privacy settings module. Sets up the basic structure and metadata for the privacy policy page.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy-241009.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Layout from '../layouts/Layout'\nimport SectionContainer from '../components/Layouts/SectionContainer'\nimport { PrivacySettings } from 'ui-patterns/PrivacySettings'\n\nexport const meta = {\n  title: 'Privacy Policy | Supabase',\n  description: 'Supabase Privacy Policy',\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Triggers for Efficient Data Import in Supabase\nDESCRIPTION: SQL commands to disable and re-enable triggers on a specific table. This is useful for speeding up large data imports by temporarily disabling complex logic or integrity checks.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Disable triggers on a specific table\nALTER TABLE table_name DISABLE TRIGGER ALL;\n\n-- To re-enable triggers\nALTER TABLE table_name ENABLE TRIGGER ALL;\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component via CLI\nDESCRIPTION: Command to install the Sheet component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sheet.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add sheet\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PostgreSQL 42P01 Error Format\nDESCRIPTION: Shows the format of the PostgreSQL 42P01 error message when a relation cannot be found.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n42P01: relation \"<some table name>\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Demonstrating C/C++ Header Processing in Language Servers\nDESCRIPTION: Example showing how C/C++ language servers handle header files and incremental compilation, where headers are parsed once and cached, with only modified content requiring reanalysis.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// start of header. iostream is parsed and analyzed once.\n#include <iostream>\n// end of header\n\n// if the user types below, we just have to re-analyze three lines.\n// Everything else, including types and definitions from other files,\n// can be read from cache.\nvoid main() {\n  std::cout << \"Hello, World!\" << std::\n}\n```\n\n----------------------------------------\n\nTITLE: Describing TypeScript Configuration Structure in Supabase\nDESCRIPTION: Explains how the tsconfig directory contains base tsconfig.json files that all other TypeScript configurations in the project inherit from. This establishes a common foundation for TypeScript settings across the Supabase codebase.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/tsconfig/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `tsconfig`\n\nThese are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.\n```\n\n----------------------------------------\n\nTITLE: Pushing Supabase Configuration in Bash\nDESCRIPTION: Bash command for synchronizing the local configuration with the remote Supabase project. Uses the production environment setting.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSUPABASE_ENV=production npx supabase@latest config push\n```\n\n----------------------------------------\n\nTITLE: Displaying Developers Image in Markdown\nDESCRIPTION: This code snippet shows how to embed an image related to developers in a Markdown document.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-launch-week-three-friday-five-more-things.mdx#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![devs.png](/images/blog/launch-week-three/five-more-things/devs.png)\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch Sign-Out Code in JavaScript\nDESCRIPTION: This snippet shows how to implement the sign-out functionality for a user logged in via Twitch OAuth using the Supabase JavaScript client. It utilizes the signOut method to remove the user session.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\\n\\n// ---cut---\\nasync function signOut() {\\n  const { error } = await supabase.auth.signOut()\\n}\n```\n\n----------------------------------------\n\nTITLE: Database Linting CLI Command Help\nDESCRIPTION: Displays the help output for the 'supabase db lint' command, showing available options for checking database typing errors including error levels and schema selection.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/testing-and-linting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nsupabase db lint --help\nChecks local database for typing error\n\nUsage:\n  supabase db lint [flags]\n\nFlags:\n  --level [ warning | error ] Error level to emit. (default warning)\n  --linked Lints the linked project for schema errors.\n  -s, --schema strings List of schema to include. (default all)\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Variable in Go Template\nDESCRIPTION: Shows how to access and display a template variable using the dot notation in Go templates. The template expects a variable to be passed in.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/_fixtures/variables.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{ .var }}\n```\n\n----------------------------------------\n\nTITLE: Embedding MP4 Video Player in JSX\nDESCRIPTION: Video element implementation for playing an MP4 file with autoplay, loop, and muted settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-09-supabase-studio-3-0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video width=\"99%\" autoPlay loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/lw8/supabase-ai.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Granting Select Privilege on PostgreSQL Table\nDESCRIPTION: This snippet demonstrates how to grant select privilege on a table to a specific role. It shows an error when the granting user doesn't have sufficient privileges.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> grant select on table public.apps to senior_dev;\nERROR:  permission denied for table apps\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Access Privileges in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to view the current default access privileges for a schema using the \\ddp command.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> \\ddp public\n                          Default access privileges\n┌────────────────┬────────┬──────────┬──────────────────────────────────────┐\n│     Owner      │ Schema │   Type   │          Access privileges           │\n├────────────────┼────────┼──────────┼──────────────────────────────────────┤\n│ postgres       │ public │ function │ postgres=X/postgres                 ↵│\n│                │        │          │ anon=X/postgres                     ↵│\n│                │        │          │ authenticated=X/postgres            ↵│\n│                │        │          │ service_role=X/postgres              │\n│ postgres       │ public │ sequence │ postgres=rwU/postgres               ↵│\n│                │        │          │ anon=rwU/postgres                   ↵│\n│                │        │          │ authenticated=rwU/postgres          ↵│\n│                │        │          │ service_role=rwU/postgres            │\n│ postgres       │ public │ table    │ postgres=arwdDxt/postgres           ↵│\n│                │        │          │ anon=arwdDxt/postgres               ↵│\n│                │        │          │ authenticated=arwdDxt/postgres      ↵│\n│                │        │          │ service_role=arwdDxt/postgres        │\n│ supabase_admin │ public │ function │ postgres=X/supabase_admin           ↵│\n│                │        │          │ anon=X/supabase_admin               ↵│\n│                │        │          │ authenticated=X/supabase_admin      ↵│\n│                │        │          │ service_role=X/supabase_admin        │\n│ supabase_admin │ public │ sequence │ postgres=rwU/supabase_admin         ↵│\n│                │        │          │ anon=rwU/supabase_admin             ↵│\n│                │        │          │ authenticated=rwU/supabase_admin    ↵│\n│                │        │          │ service_role=rwU/supabase_admin      │\n│ supabase_admin │ public │ table    │ postgres=arwdDxt/supabase_admin     ↵│\n│                │        │          │ anon=arwdDxt/supabase_admin         ↵│\n│                │        │          │ authenticated=arwdDxt/supabase_admin↵│\n│                │        │          │ service_role=arwdDxt/supabase_admin  │\n└────────────────┴────────┴──────────┴──────────────────────────────────────┘\n(6 rows)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration of required Supabase environment variables for local development.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=your-supabase-url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Page Component with Layout\nDESCRIPTION: Sets up a Next.js page component with metadata and layout wrapper for the Acceptable Use Policy. Uses a SectionContainer component for content structure and Layout component for page formatting.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/aup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Layout from '../layouts/Layout'\nimport SectionContainer from '../components/Layouts/SectionContainer'\n\nexport const meta = {\n  title: 'Acceptable Use Policy | Supabase',\n  description: 'Supabase Acceptable Use Policy',\n}\n\nexport default (context) => <Layout meta={meta} children={context.children} context={context} />\n```\n\n----------------------------------------\n\nTITLE: Embedding MP4 Video for Email Confirmation Feature\nDESCRIPTION: HTML video element for demonstrating the email confirmation feature in Supabase's authentication system. It follows the same video configuration pattern as the other feature demonstrations.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-09-03-supabase-alpha-august-2020.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/confirm-email.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Importing Scroll Area Component\nDESCRIPTION: Example of importing the ScrollArea component from the UI components directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/scroll-area.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollArea } from '@/components/ui/scroll-area'\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migration\nDESCRIPTION: Command to generate migration files by comparing declared schema against current database state. Requires a descriptive migration name as parameter.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/declarative-database-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase db diff -f <migration_name>\n```\n\n----------------------------------------\n\nTITLE: Importing Security Icons from HeroIcons and Lucide React\nDESCRIPTION: Imports various security-related icons from @heroicons/react/outline and lucide-react packages for use in the security features display.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/security.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  KeyIcon,\n  UserGroupIcon,\n  ShieldCheckIcon,\n  RewindIcon,\n  CreditCardIcon,\n  ClipboardCheckIcon,\n} from '@heroicons/react/outline'\nimport { Activity, Lock } from 'lucide-react'\nimport Layout from '../layouts/Layout'\n```\n\n----------------------------------------\n\nTITLE: Poetry Script Configuration\nDESCRIPTION: TOML configuration to add seed and search scripts to the Poetry project.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.scripts]\nseed = \"video_search.main:seed\"\nsearch = \"video_search.main:search\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sidebar Footer with User Dropdown\nDESCRIPTION: Shows how to implement a sticky footer in the sidebar with a user dropdown menu for account-related actions, such as viewing account settings or signing out.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  return (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader />\n        <SidebarContent />\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    <User2 /> Username\n                    <ChevronUp className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent side=\"top\" className=\"w-[--radix-popper-anchor-width]\">\n                  <DropdownMenuItem>\n                    <span>Account</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Billing</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Sign out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n      </Sidebar>\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Links for iOS in Info.plist\nDESCRIPTION: XML configuration to set up deep linking for iOS in the Info.plist file, enabling the app to handle Supabase authentication redirects.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... other tags -->\n<plist>\n<dict>\n  <!-- ... other tags -->\n\n  <!-- Add this array for Deep Links -->\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>io.supabase.flutterquickstart</string>\n      </array>\n    </dict>\n  </array>\n  <!-- ... other tags -->\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Installing Breadcrumb Component via CLI\nDESCRIPTION: Command to install the breadcrumb component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add breadcrumb\n```\n\n----------------------------------------\n\nTITLE: Connection Pool Mode Configuration in Supabase\nDESCRIPTION: Example of markdown formatting showing PgBouncer configuration options in Supabase dashboard\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-pgbouncer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Admonition type=\"caution\">\n  PgBouncer is now deprecated. Use\n  [Supavisor](https://supabase.com/blog/supavisor-postgres-connection-pooler) instead.\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Importing Carousel Components in React\nDESCRIPTION: Example of importing the necessary carousel components in a React application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel'\n```\n\n----------------------------------------\n\nTITLE: Embedding SQL Editor Demo Video in HTML\nDESCRIPTION: HTML code for embedding a video that showcases Supabase's SQL Editor with the ability to save favorite queries, loading content from Supabase storage.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/overview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/favorites.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Component Dependencies Manually\nDESCRIPTION: Command to manually install the required dependency for the Toggle component.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/toggle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toggle\n```\n\n----------------------------------------\n\nTITLE: Installing Textarea Component via CLI\nDESCRIPTION: Command to install the textarea component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/textarea.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add textarea\n```\n\n----------------------------------------\n\nTITLE: Data Recipients Table in Markdown\nDESCRIPTION: Markdown table defining recipients of personal information, reasons for sharing, and usage details\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy-240804.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **Recipients** | **Why we share your personal information with these recipients** | **How these recipients will use your personal information** |\n| Service providers | We will share your personal information with third party vendors and other service providers that perform services for us or on our behalf, which may include mailing, email or chat services, payment and billing services, fraud prevention, web hosting, or providing analytic services. | These recipients will use your personal information as processors on our instructions. |\n```\n\n----------------------------------------\n\nTITLE: Revoking Select Privilege in PostgreSQL\nDESCRIPTION: This snippet shows how to revoke a previously granted select privilege from a role.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> revoke select on public.apps from senior_dev;\nREVOKE\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Flutter SDK\nDESCRIPTION: Shows how to add the Supabase Flutter SDK developer preview version to a project's dependencies.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsupabase_flutter: ^1.0.0-dev.1\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iFrame\nDESCRIPTION: An HTML iframe implementation for embedding a YouTube video about Supabase announcements with security parameters and playback settings.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-17-supabase-soc2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/6bGQotxisoY\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Scrolling Navigation Menu\nDESCRIPTION: Implementation of a horizontally scrollable navigation menu with viewport positioning.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu renderViewport={false}>\n  <ScrollArea>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n        <NavigationMenuContent>\n          <NavigationMenuLink>Link</NavigationMenuLink>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n    <ScrollBar />\n  </ScrollArea>\n  <NavigationMenuViewport containerProps={{ className: 'w-full' }} />\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Account Management Component\nDESCRIPTION: Vue component for user profile management including update and sign out functionality.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst supabase = useSupabaseClient()\n\nconst loading = ref(true)\nconst username = ref('')\nconst website = ref('')\nconst avatar_path = ref('')\n\nloading.value = true\nconst user = useSupabaseUser()\n\nconst { data } = await supabase\n  .from('profiles')\n  .select(`username, website, avatar_url`)\n  .eq('id', user.value.id)\n  .single()\n\nif (data) {\n  username.value = data.username\n  website.value = data.website\n  avatar_path.value = data.avatar_url\n}\n\nloading.value = false\n\nasync function updateProfile() {\n  try {\n    loading.value = true\n    const user = useSupabaseUser()\n\n    const updates = {\n      id: user.value.id,\n      username: username.value,\n      website: website.value,\n      avatar_url: avatar_path.value,\n      updated_at: new Date(),\n    }\n\n    const { error } = await supabase.from('profiles').upsert(updates, {\n      returning: 'minimal', // Don't return the value after inserting\n    })\n    if (error) throw error\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    loading.value = false\n  }\n}\n\nasync function signOut() {\n  try {\n    loading.value = true\n    const { error } = await supabase.auth.signOut()\n    if (error) throw error\n    user.value = null\n  } catch (error) {\n    alert(error.message)\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n\n<template>\n  <form class=\"form-widget\" @submit.prevent=\"updateProfile\">\n    <div>\n      <label for=\"email\">Email</label>\n      <input id=\"email\" type=\"text\" :value=\"user.email\" disabled />\n    </div>\n    <div>\n      <label for=\"username\">Username</label>\n      <input id=\"username\" type=\"text\" v-model=\"username\" />\n    </div>\n    <div>\n      <label for=\"website\">Website</label>\n      <input id=\"website\" type=\"url\" v-model=\"website\" />\n    </div>\n\n    <div>\n      <input\n        type=\"submit\"\n        class=\"button primary block\"\n        :value=\"loading ? 'Loading ...' : 'Update'\"\n        :disabled=\"loading\"\n      />\n    </div>\n\n    <div>\n      <button class=\"button block\" @click=\"signOut\" :disabled=\"loading\">Sign Out</button>\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Service Usage Information Table in Markdown\nDESCRIPTION: This markdown table shows how information about service usage is utilized, the legal bases for processing, and the recipients of this information.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| **How we may use the Personal Information**                                                                                                         | **Legal Bases for Processing**                                                                                                                                                                                                                                                                          | **Recipients of Personal Information**                                                                                                                                                                       |\n| --------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| We use information about how you use and connect to the Service to present the Service to you on your device.                                       | The processing is necessary for performance of a contract with you, namely our Terms of Service. If you access the Service as an authorized user of another customer, the processing is necessary for our and the customer's legitimate interests, namely presenting the Service to you on your device. | We may share this information with the following service providers through the provision of the Service: Posthog, Plausible, Fly.io, Sentry, Hubspot, Google LLC, Vercel, Hex.tech, and Amazon Web Services. |\n| We use this information to monitor and improve the Service and business, resolve issues and to inform the development of new products and services. | We will only use your personal information in this way to the extent you give us your consent to do so.                                                                                                                                                                                                 |                                                                                                                                                                                                              |\n```\n\n----------------------------------------\n\nTITLE: Adding New Themes with Token Transformer\nDESCRIPTION: This JSON snippet from package.json illustrates how to expand the CSS token setup by adding new themes. The npx command utilizes token-transformer to define new theme paths and integrate them into the build process.\nSOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n//..\n\"build-transform-light\": \"npx token-transformer tokens.json styles/tokens/02_themes/light.json global,exported/light,theme global\",\n// add a new line like this:\n\"build-transform-new\": \"npx token-transformer tokens.json styles/tokens/02_themes/new.json global,new,theme global\",\n//..\n// append the new theme/set command to end of the build-transform command\n\"build-transform\": \"npm run build-transform-global && npm run build-transform-typography && npm run build-transform-dark  && npm run build-transform-light && npm run build-transform-new\",\n```\n\n----------------------------------------\n\nTITLE: Video Source Element for Foreign Key Demo\nDESCRIPTION: HTML video element configuration for displaying foreign key lookup feature demonstration\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-supabase-studio-2.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/fk-lookup.mp4\"\n    type=\"video/mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React/JSX\nDESCRIPTION: Import statements for Admonition and CostWarning components used in the documentation interface\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/components/AuthSmsProviderConfig/MessageBirdConfig.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Admonition } from 'ui-patterns/admonition'\nimport { CostWarning } from './AuthSmsProviderConfig.Warnings'\n```\n\n----------------------------------------\n\nTITLE: Creating the Domain Product Model\nDESCRIPTION: Defines a domain model for products that will be used in the UI layer, separating the presentation from the data layer.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Product(\n    val id: String,\n    val name: String,\n    val price: Double,\n    val image: String?\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Table Creation with JSON Column\nDESCRIPTION: SQL code showing how to create a table with a JSON column without schema validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table some_table (\n  id serial primary key,\n  metadata json not null\n);\n\ninsert into some_table (metadata)\nvalues (<SQL Input>);\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video using HTML iframe\nDESCRIPTION: HTML code for embedding a Supabase demo video from YouTube with security and responsive settings enabled.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-05-01-supabase-alpha-april-2020.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/ck5MM_PD4Co\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project with CLI\nDESCRIPTION: This command initializes a new Supabase project using the Supabase CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Managing Organizations and Projects with Supabase CLI\nDESCRIPTION: Demonstrates how to use Supabase CLI to log in, list organizations, and create a new project. It shows the basic commands for project management.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase login\nsupabase orgs list\nsupabase projects create my-project --org-id cool-green-pqdr0qc --db-password ******** --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv with yarn\nDESCRIPTION: Installs the dotenv package using yarn for loading environment variables from a .env file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn add dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Privacy Policy Page in React\nDESCRIPTION: This code snippet imports necessary components and defines metadata for the Supabase Privacy Policy page. It includes Layout, SectionContainer, and PrivacySettings components, as well as meta information for the page title and description.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/pages/privacy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../layouts/Layout'\nimport SectionContainer from '../components/Layouts/SectionContainer'\nimport { PrivacySettings } from 'ui-patterns/PrivacySettings'\n\nexport const meta = {\n  title: 'Privacy Policy | Supabase',\n  description: 'Supabase Privacy Policy',\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML code for embedding a YouTube video player with specific configurations including privacy-enhanced mode and various allowed features.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-18-supabase-realtime-multiplayer-general-availability.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"video-container\">\n  <iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/CGZr5tybW18\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Content with Supabase Components\nDESCRIPTION: Example of using Supabase's tab component to organize content for different platforms or languages, with optional query group parameter for direct tab linking.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs\n  scrollable\n  size=\"small\"\n  type=\"underlined\"\n  defaultActiveId=\"npm\"\n  queryGroup=\"packagemanager\"\n>\n<TabPanel id=\"npm\" label=\"npm\">\n\n// ...\n\n</TabPanel>\n<TabPanel id=\"yarn\" label=\"Yarn\">\n\n// ...\n\n</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Starting React Application\nDESCRIPTION: Command to start the React development server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Area Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI scroll area dependency using npm package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/scroll-area.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-scroll-area\n```\n\n----------------------------------------\n\nTITLE: Configuring Toaster Expand Property\nDESCRIPTION: Shows how to set the expand property on the Toaster component to control toast visibility.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Toaster expand={true | false} />\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Splitting Example in Postgres Language Server\nDESCRIPTION: Example of how the Postgres Language Server splits SQL code into separate statements for parsing, showing the intelligent separation of SQL statements based on context.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a FROM (SELECT a FROM b) sub WHERE\nSELECT 1;\n\n-- is cut into\n\nSELECT a FROM (SELECT a FROM b) sub WHERE\n--\nSELECT 1;\n```\n\n----------------------------------------\n\nTITLE: Embedding MP4 Video for Table Creation Feature\nDESCRIPTION: HTML video element for demonstrating the table creation feature in Supabase. It's configured to autoplay, loop, and display controls for user interaction.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-09-03-supabase-alpha-august-2020.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay loop muted playsInline controls={true}>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/new-tables.mp4\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Input OTP Component\nDESCRIPTION: Command to manually install the Input OTP package dependency.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install input-otp\n```\n\n----------------------------------------\n\nTITLE: Creating Particle Geometry\nDESCRIPTION: Creating a circle geometry component for star particles using React Three Fiber with minimal complexity.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Geometry = useMemo(() => () => <circleGeometry args={[1.5, 5]} />, [])\n```\n\n----------------------------------------\n\nTITLE: Starting the Rails development server\nDESCRIPTION: Launches the Rails development server to run the application locally. After running this command, the application will be accessible at http://127.0.0.1:3000.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails server\n```\n\n----------------------------------------\n\nTITLE: Creating Read Access Policy for Public Avatars Subfolder in SQL\nDESCRIPTION: This SQL snippet shows how to create a policy that grants read access to a specific subfolder ('public') within the 'avatars' bucket using Postgres Row Level Security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-30-supabase-storage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Read access for public avatars.\"\non storage.objects for select using (\n\tbucket_id = 'avatars'\n\tand (storage.foldername(name))[1] = 'public'\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in React\nDESCRIPTION: Shows how to import the Button component from the UI components library.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@/components/ui/button'\n```\n\n----------------------------------------\n\nTITLE: Installing Resizable Component via CLI\nDESCRIPTION: Command to install the Resizable component using the shadcn-ui CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/resizable.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add resizable\n```\n\n----------------------------------------\n\nTITLE: Inserting Dark 'Made with Supabase' Badge in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to add a dark version of the 'Made with Supabase' badge to a Markdown file. It includes an image link that directs to the Supabase website.\nSOURCE: https://github.com/supabase/supabase/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![Made with Supabase](https://supabase.com/badge-made-with-supabase-dark.svg)](https://supabase.com)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Resolution Example for Language Servers\nDESCRIPTION: Demonstration of how TypeScript language servers track type dependencies across files, where the server must compile and analyze imported files to resolve types in the current file.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// foo.ts\nexport type Foo = {\n  bar: string\n}\n\n// bar.ts\nimport { Foo } from './foo'\n\nconst bar: Foo = { bar: 'I am a string' }\n```\n\n----------------------------------------\n\nTITLE: Creating Read Access Policy for Avatars Bucket in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a policy that grants read access to a bucket called 'avatars' using Postgres Row Level Security.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-30-supabase-storage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Read access for avatars.\"\non storage.objects for select using (\n\tbucket_id = 'avatars'\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component Usage\nDESCRIPTION: Simple example of using the Input component with default properties.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Input />\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloudflare Turnstile Edge Function in Supabase\nDESCRIPTION: Commands to deploy the Cloudflare Turnstile server-side validation as a Supabase Edge Function and set the required secret key for API validation.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/cloudflare-turnstile/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy cloudflare-turnstile\nsupabase secrets set CLOUDFLARE_TURNSTILE_SECRET_KEY=your_secret_key\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video iframe - HTML\nDESCRIPTION: HTML iframe code for embedding a YouTube video about Charm.sh features with necessary attributes for security and responsiveness.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-28-community-day-lw4.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    className=\"w-full\"\n    src=\"https://www.youtube-nocookie.com/embed/aRgHKofrupU\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowfullscreen\n  ></iframe>\n```\n\n----------------------------------------\n\nTITLE: Cost Warning Component Implementation\nDESCRIPTION: Implementation of the CostWarning component in JSX\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/components/AuthSmsProviderConfig/MessageBirdConfig.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CostWarning />\n```\n\n----------------------------------------\n\nTITLE: Fetching Database Triggers Using SQL\nDESCRIPTION: SQL query to retrieve information about triggers in the database. This query selects relevant columns from the information_schema.triggers table to display trigger details.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-04-mcp-server.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    event_object_schema as schema,\n    event_object_table as table,\n    trigger_name,\n    event_manipulation as event,\n    action_statement as definition\nfrom\n\tinformation_schema.triggers\norder by\n\tevent_object_schema, event_object_table;\n```\n\n----------------------------------------\n\nTITLE: Installing envdir via daemontools package in Ubuntu\nDESCRIPTION: Command to install the daemontools package, which includes envdir. This tool allows running programs with a modified environment based on files in a provided directory.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install -y daemontools\n```\n\n----------------------------------------\n\nTITLE: Starting a Python Web Server for Serving Map Files\nDESCRIPTION: This command starts a simple Python HTTP server to serve the index.html file that displays the Protomaps map. After running this command, you can view your map by navigating to http://localhost:8000/.\nSOURCE: https://github.com/supabase/supabase/blob/master/examples/storage/protomaps/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m http.server\n```\n\n----------------------------------------\n\nTITLE: Kotlin Multiplatform Supabase Client Initialization\nDESCRIPTION: Configuration for initializing Supabase client with Google sign-in support in Kotlin Multiplatform applications.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval supabaseClient = createSupabaseClient(\n    supabaseUrl = \"SUPABASE_URL\",\n    supabaseKey = \"SUPABASE_KEY\"\n) {\n    install(GoTrue)\n    install(ComposeAuth) {\n        nativeGoogleLogin(\"WEB_GOOGLE_CLIENT_ID\") //Use the Web Client ID, not the Android one!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Previous Authentication in Supabase.js\nDESCRIPTION: Shows the old authentication method for user signup.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-30-improved-dx.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  body: { user },\n} = await supabase.auth.signup('someone@email.com', 'password')\n```\n\n----------------------------------------\n\nTITLE: Querying Database Table with Basic Select in JavaScript\nDESCRIPTION: Simple Supabase query to select the 'name' column from the 'countries' table. This translates to a lightweight URL request that won't trigger 520 errors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet { data: countries, error } = await supabase.from('countries').select('name')\n```\n\n----------------------------------------\n\nTITLE: Getting Node Installation Path on Windows\nDESCRIPTION: Shell command to retrieve the Node installation path on Windows. This is used to add Node and npx to the system PATH for proper execution of the Supabase MCP server.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm config get prefix\n```\n\n----------------------------------------\n\nTITLE: Video Element Implementation in HTML\nDESCRIPTION: HTML video element configuration for displaying the Supabase integration demo video with autoplay and loop settings\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-28-supabase-vercel-partnership.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video\n  width=\"99%\"\n  autoPlay\n  disablePictureInPicture\n  loop\n  muted\n  playsInline\n  controls={false}\n  className=\"rounded-md border\"\n>\n  <source\n    src=\"https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/vercel-marketplace/supabase-integration.mp4?t=2024-08-28T16%3A31%3A37.197Z\"\n    type=\"video/mp4\"\n  />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Deploying Middleware Stack with Docker Compose\nDESCRIPTION: Initial middleware setup using docker-compose to run Kong, Realtime, PostgREST, PG-API, and PG-BOSS on a single Ubuntu server with 4 CPUs and 8GB RAM. This setup surprisingly handled the initial launch traffic before being migrated to ECS clusters.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-10-alpha-launch-postmortem.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Adding New Enum Values\nDESCRIPTION: Demonstrates how to add a new value to an existing enum type using ALTER TYPE statement.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nalter type mood add value 'content';\n```\n\n----------------------------------------\n\nTITLE: HTML Video Player Implementation with MP4 Source\nDESCRIPTION: Code for implementing an HTML5 video player with autoplay, muted playback, inline playing, and controls. The video source is set to a local MP4 file path.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-02-supabase-beta-june-2021.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"99%\" autoPlay muted playsInline controls={true}>\n  <source src=\"/images/blog/2021-june/public-buckets.mp4\" type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase CLI with npm\nDESCRIPTION: Command to install the Supabase CLI globally using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g supabase\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Package Manager\nDESCRIPTION: Command to install Poetry for Python package management via pip.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Development Server Launch Command\nDESCRIPTION: Terminal command to start the development server for the application.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Basic Text Confirm Dialog Demo\nDESCRIPTION: Basic implementation of a text confirm dialog with icon, title 'Heads up!' and description about adding components using CLI.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/text-confirm-dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview\n  name=\"text-confirm-dialog-demo\"\n  description=\"An alert with an icon, title and description. The title says 'Heads up!' and the description is 'You can add components to your app using the cli.'\"\n  peekCode\n  showDottedGrid\n  wide\n/>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Fixed Item Sizes\nDESCRIPTION: Example of setting fixed sizes for carousel items using utility classes.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// 33% of the carousel width.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Background and Foreground Class Mappings\nDESCRIPTION: Examples of how Figma variable names are mapped to TailwindCSS utility classes for background and foreground (text) colors.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-08-how-design-works-at-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground.default -> bg\nbackground.alternative -> bg-alternative\nforeground.DEFAULT -> text\nforeground.light -> text-light\n```\n\n----------------------------------------\n\nTITLE: Importing Card Components\nDESCRIPTION: Shows how to import all necessary card-related components from the UI library\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Dependencies Manually\nDESCRIPTION: Command to install the required dependency for the Radio Group component using npm.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-radio-group\n```\n\n----------------------------------------\n\nTITLE: Generate Test Code with Codegen Tool\nDESCRIPTION: Commands to set up and run the Playwright Codegen tool which helps in recording actions to create tests. Requires pnpm as the package manager.\nSOURCE: https://github.com/supabase/supabase/blob/master/tests/studio-tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm codegen:setup\n# in a separate terminal\npnpm codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component Dependencies\nDESCRIPTION: Command to install the required Radix UI Slider dependency for manual installation.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/slider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-slider\n```\n\n----------------------------------------\n\nTITLE: Installing Input OTP Component via CLI\nDESCRIPTION: Command to install the Input OTP component using the shadcn-ui CLI tool.\nSOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add input-otp\n```"
  }
]