[
  {
    "owner": "modal-labs",
    "repo": "modal-examples",
    "content": "TITLE: Deploying the Code Agent App with Modal\nDESCRIPTION: Deploys the application defined in `codelangchain.py` as a Modal web endpoint. Requires `modal` installed and `openai-secret` and `langsmith-secret` configured. Outputs a URL to access the interactive playground.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/13_sandboxes/codelangchain/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmodal deploy codelangchain.py\n```\n\n----------------------------------------\n\nTITLE: Serving the Code Agent App Locally with Hot Reloading\nDESCRIPTION: Runs the application defined in `codelangchain.py` using Modal's development server, which provides hot reloading for easier development. This command facilitates testing changes locally before deployment.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/13_sandboxes/codelangchain/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmodal serve codelangchain.py\n```\n\n----------------------------------------\n\nTITLE: Running Model Training with Modal\nDESCRIPTION: This command executes the training script `train.train` using Modal. The `--num_train_epochs` parameter is set to 10, defining the number of training epochs. The expected output is a fine-tuned Whisper model with improved Hindi speech recognition capabilities.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/openai_whisper/finetuning/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmodal run -m train.train --num_train_epochs=10\n```\n\n----------------------------------------\n\nTITLE: Building Frontend and Deploying Backend Application (bash)\nDESCRIPTION: Sequence of commands for preparing the production build of the frontend using npm and Vite, followed by deploying the backend application to a server or cloud environment with Modal's deploy functionality targeting text_to_pokemon.main. This facilitates publishing the application for end-user access.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/text-to-pokemon/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd \"$(git rev-parse --show-toplevel)/06_gpu_and_ml/text-to-pokemon/text_to_pokemon/frontend\"\nnpm install\nnpx vite build\ncd \"$(git rev-parse --show-toplevel)/06_gpu_and_ml/text-to-pokemon/\"\nmodal -m deploy text_to_pokemon.main\n```\n\n----------------------------------------\n\nTITLE: Running Backend with Modal Serve for Live Reloading (bash)\nDESCRIPTION: Starts the backend application using Modal's serve command with live reload mode enabled to facilitate rapid development and iteration of the web API by automatically restarting on code changes. The backend entry point is text_to_pokemon.main.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/text-to-pokemon/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \"$(git rev-parse --show-toplevel)/06_gpu_and_ml/text-to-pokemon\"\nmodal serve -m text_to_pokemon.main\n```\n\n----------------------------------------\n\nTITLE: Embedding Wikipedia Dataset Using Modal - Bash\nDESCRIPTION: This command runs the main.py script via the Modal CLI to perform embedding operations on the previously downloaded Wikipedia dataset. The process is parallelizable using Modal's framework, with input and output data managed across separate Modal volumes. Required dependencies include Python and the Modal SDK. Input is the dataset stored in a Modal volume, output is the embedded dataset written to another volume.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/embeddings/wikipedia/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmodal run main.py\n```\n\n----------------------------------------\n\nTITLE: Defining and Running Modal Functions Python\nDESCRIPTION: This snippet defines two Modal functions using the `@app.function()` decorator: `double_with_modal` (a remote version of the `double` function) and `quadruple`, which calls both the local `double` and remote `double_with_modal` functions. It then runs the `app` context to execute `quadruple` both locally and remotely, showcasing different execution modes.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.function()\ndef double_with_modal(x: int) -> int:\n    return x + x\n\n\n@app.function()\ndef quadruple(x: int) -> int:\n    if x <= 1_000_000:\n        return double(x) + double(x)\n    else:\n        return double_with_modal.remote(x) + double_with_modal.remote(x)\n\n\nwith app.run():\n    print(quadruple.local(100))  # running locally\n    print(quadruple.remote(100))  # run remotely\n    print(\"Doing a very inefficient remote multiplication just for fun!\")\n    result = quadruple.remote(10_000_000)\n```\n\n----------------------------------------\n\nTITLE: Running the Dataset Download Script on Modal - Bash\nDESCRIPTION: This command executes the download.py Python script within Modal's managed environment, initiating the process of downloading the Wikipedia dataset into a designated Modal volume. This leverages Modal's high-bandwidth data transfer for efficient downloading. Ensure download.py is present and properly configured. There are no input/output parameters, but the user can adjust download.py to accept flags like --num_proc for parallelism. Output is the downloaded dataset stored in a Modal volume.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/embeddings/wikipedia/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmodal run download.py\n```\n\n----------------------------------------\n\nTITLE: Testing the Agent Module Directly with Modal\nDESCRIPTION: Executes the LangChain agent logic defined in `agent.py` in isolation using Modal. This command is useful for testing the agent's core functionality without the web server layer. Requires providing a question via the `--question` argument.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/13_sandboxes/codelangchain/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmodal run agent.py --question \"...\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Running GPU Modal Function Python\nDESCRIPTION: This defines a Modal function `hello_gpu` configured to run on a GPU using `@app.function(gpu=\"any\")`. Inside the function, it runs `nvidia-smi` to prove GPU availability. The snippet then runs the app to execute this function remotely and asserts the expected return value.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Define a Modal function with a GPU attached.\n@app.function(gpu=\"any\")\ndef hello_gpu():\n    import subprocess\n\n    subprocess.run(\"nvidia-smi\", shell=True, check=True)\n    return \"hello from a remote GPU!\"\n\n\n# Start and run an ephemeral modal.App and execute the GPU-powered modal Function!\nwith app.run():\n    result = hello_gpu.remote()\n    assert result == \"hello from a remote GPU!\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Frontend with npm and Vite (bash)\nDESCRIPTION: Commands to navigate to the frontend directory, install necessary npm packages, and start the Vite build tool in watch mode for continuous rebuilds during development. This ensures the frontend assets are kept up to date automatically while working on the UI.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/text-to-pokemon/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd \"$(git rev-parse --show-toplevel)/06_gpu_and_ml/text-to-pokemon/text_to_pokemon/frontend\"\nnpm install\nnpx vite build --watch\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment and Installing Dependencies - Bash\nDESCRIPTION: This snippet demonstrates how to initialize a new Python 3 virtual environment, activate it, and install the 'modal' package dependency via pip. Ensure Python 3 and pip are installed on your system. The commands create an isolated environment for package management and prepare your workspace for interacting with Modal. Inputs/outputs are performed via the terminal shell; no additional setup files are required. Limitations include machine compatibility (POSIX shell based activation) and Python version requirements.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/embeddings/wikipedia/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip3 install modal\n```\n\n----------------------------------------\n\nTITLE: Initializing Modal Application Python\nDESCRIPTION: This line initializes a Modal application instance named 'example-basic-notebook-app'. The `modal.App` object serves as the central point for registering and managing Modal functions defined in the notebook.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = modal.App(name=\"example-basic-notebook-app\")\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests Using Pytest (bash)\nDESCRIPTION: Runs all tests in the project by invoking pytest with Python 3. This command is intended to verify application correctness and catch regressions.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/text-to-pokemon/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pytest\n```\n\n----------------------------------------\n\nTITLE: Authenticating Modal CLI Session - Bash\nDESCRIPTION: This command authenticates your terminal session with the Modal platform by generating and associating a new access token. It opens a browser for OAuth login, allowing secure CLI interactions with your Modal account. Prerequisites include prior installation of the modal CLI tool and internet access. On successful authentication, you can deploy and manage Modal apps via the terminal. No input or output files are required; browser-based authentication is mandatory.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/embeddings/wikipedia/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmodal token new\n```\n\n----------------------------------------\n\nTITLE: Running Modal Script with Bash\nDESCRIPTION: This command executes a Python script (`01_getting_started/hello_world.py`) using the Modal CLI (`modal run`). The script will be uploaded and run in serverless containers in the Modal cloud, despite being invoked locally. Prerequisites include installing the `modal` package and setting your API key.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmodal run 01_getting_started/hello_world.py\n```\n\n----------------------------------------\n\nTITLE: Installing Modal and Dependencies Python\nDESCRIPTION: These commands use `%pip install`, a common syntax in Jupyter notebooks, to install the necessary Python packages: `modal` for interacting with the Modal platform and `ipywidgets` which is often useful in notebook environments. Ensure the Modal version is updated to a recent version.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install --upgrade modal\n%pip install ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Displaying Remote Function Result Python\nDESCRIPTION: This simple snippet accesses and displays the value stored in the `result` variable, which was assigned the return value from the remote execution of the `quadruple` Modal function in the previous cell.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Evaluate the result created in above cell\nresult\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Modal Volume - Bash\nDESCRIPTION: This sequence of commands uses the Modal CLI to list contents of a named Modal volume (embedding-wikipedia), first at the root and then within a subdirectory (/wikipedia). This allows verification of dataset download and structure. Replace 'embedding-wikipedia' with your volume name if different. Output is displayed as a formatted table with filename, type, modification time, and size. No file modifications occur.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/embeddings/wikipedia/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmodal volume ls embedding-wikipedia\nmodal volume ls embedding-wikipedia /wikipedia\n```\n\n----------------------------------------\n\nTITLE: Importing Modal and Checking Version Python\nDESCRIPTION: This snippet imports the `modal` library, making its functions and classes available for use. It then asserts that the installed Modal version is greater than '0.49.0', a prerequisite for the examples, and displays the current version.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport modal\n\nassert modal.__version__ > \"0.49.0\"\nmodal.__version__\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter YAML for Modal CI/CD Testing and Deployment\nDESCRIPTION: Defines a YAML frontmatter block used to control the behavior of Modal example deployments and testing within the CI/CD pipeline. The fields include 'deploy' to toggle whether the example should be deployed as a Modal app, 'cmd' specifying the command run during testing, 'args' as command-line arguments, 'lambda-test' to enable or disable CLI testing, 'runtimes' listing execution environments for synthetic monitoring, and 'env' for environment variables during test execution. This configuration is parsed to customize testing and deployment processes in CI/CD and monitoring workflows.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/internal/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndeploy: true\ncmd: [\"modal\", \"serve\", \"10_integrations/pushgateway.py\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying GPU Function Result Python\nDESCRIPTION: This snippet concatenates a descriptive string with the value stored in the `result` variable, which holds the return value from the remote `hello_gpu` function executed in the preceding cell, and displays the combined string.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# After the app is finished you can continue executing other function's defined in your notebook and\n# use the results of your GPU functions!\n\"This is the remote GPU's return value: \" + result\n```\n\n----------------------------------------\n\nTITLE: Removing Files or Directories from a Modal Volume Recursively - Bash\nDESCRIPTION: This command uses the Modal CLI to remove a directory and all its contents recursively from a specified volume, using the --recursive flag to enable directory deletion. This is useful for freeing up storage and managing costs. WARNING: Deleted data cannot be recovered. Ensure correct paths and storage volumes are specified before execution. Input is the directory path, output is the removal of specified files/directories from storage.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/06_gpu_and_ml/embeddings/wikipedia/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmodal volume rm embedding-wikipedia /wikipedia --recursive\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Python Function Python\nDESCRIPTION: This defines a simple Python function `double` that takes an integer `x` and returns its double. It demonstrates a standard function definition within the notebook, followed by a local call to the function.\nSOURCE: https://github.com/modal-labs/modal-examples/blob/main/11_notebooks/basic.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef double(x: int) -> int:\n    return x + x\n\n\ndouble(5)\n```"
  }
]