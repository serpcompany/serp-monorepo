[
  {
    "owner": "plotters-rs",
    "repo": "plotters",
    "content": "TITLE: Creating Basic Chart with Plotters-rs\nDESCRIPTION: Demonstrates how to create a basic chart using ChartContext, including setting up the drawing area, configuring labels, drawing mesh lines, and adding data series with both lines and points.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/5.png\", (640, 480)).into_drawing_area();\n    root.fill(&WHITE);\n    let root = root.margin(10, 10, 10, 10);\n    // After this point, we should be able to construct a chart context\n    let mut chart = ChartBuilder::on(&root)\n        // Set the caption of the chart\n        .caption(\"This is our first plot\", (\"sans-serif\", 40).into_font())\n        // Set the size of the label region\n        .x_label_area_size(20)\n        .y_label_area_size(40)\n        // Finally attach a coordinate on the drawing area and make a chart context\n        .build_cartesian_2d(0f32..10f32, 0f32..10f32)?;\n\n    // Then we can draw a mesh\n    chart\n        .configure_mesh()\n        // We can customize the maximum number of labels allowed for each axis\n        .x_labels(5)\n        .y_labels(5)\n        // We can also change the format of the label text\n        .y_label_formatter(&|x| format!(\"{:.3}\", x))\n        .draw()?;\n\n    // And we can draw something in the drawing area\n    chart.draw_series(LineSeries::new(\n        vec![(0.0, 0.0), (5.0, 5.0), (8.0, 7.0)],\n        &RED,\n    ))?;\n    // Similarly, we can draw point series\n    chart.draw_series(PointSeries::of_element(\n        vec![(0.0, 0.0), (5.0, 5.0), (8.0, 7.0)],\n        5,\n        &RED,\n        &|c, s, st| {\n            return EmptyElement::at(c)    // We want to construct a composed element on-the-fly\n            + Circle::new((0,0),s,st.filled()) // At this point, the new pixel coordinate is established\n            + Text::new(format!(\"{:?}\", c), (10, 0), (\"sans-serif\", 10).into_font());\n        },\n    ))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plot with Plotters\nDESCRIPTION: Demonstrates a quick start example for creating a quadratic function plot using Plotters. This code creates a drawing area, configures the chart with proper labels and ranges, and draws a quadratic function.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n$$../examples/quick_start.rs$$\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart with ChartContext in Rust\nDESCRIPTION: Demonstrates how to create a complete chart using Plotters, including setting up the drawing area, creating a chart context, configuring mesh and labels, and drawing line and point series. The example shows how to customize label formatting and create interactive elements.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/5.png\", (640, 480)).into_drawing_area();\n    root.fill(&WHITE);\n    let root = root.margin(10, 10, 10, 10);\n    // After this point, we should be able to construct a chart context\n    let mut chart = ChartBuilder::on(&root)\n        // Set the caption of the chart\n        .caption(\"This is our first plot\", (\"sans-serif\", 40).into_font())\n        // Set the size of the label region\n        .x_label_area_size(20)\n        .y_label_area_size(40)\n        // Finally attach a coordinate on the drawing area and make a chart context\n        .build_cartesian_2d(0f32..10f32, 0f32..10f32)?;\n\n    // Then we can draw a mesh\n    chart\n        .configure_mesh()\n        // We can customize the maximum number of labels allowed for each axis\n        .x_labels(5)\n        .y_labels(5)\n        // We can also change the format of the label text\n        .y_label_formatter(&|x| format!(\"{:.3}\", x))\n        .draw()?;\n\n    // And we can draw something in the drawing area\n    chart.draw_series(LineSeries::new(\n        vec![(0.0, 0.0), (5.0, 5.0), (8.0, 7.0)],\n        &RED,\n    ))?;\n    // Similarly, we can draw point series\n    chart.draw_series(PointSeries::of_element(\n        vec![(0.0, 0.0), (5.0, 5.0), (8.0, 7.0)],\n        5,\n        &RED,\n        &|c, s, st| {\n            return EmptyElement::at(c)    // We want to construct a composed element on-the-fly\n            + Circle::new((0,0),s,st.filled()) // At this point, the new pixel coordinate is established\n            + Text::new(format!(\"{:?}\", c), (10, 0), (\"sans-serif\", 10).into_font());\n        },\n    ))?;\n    root.present()?;\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Quadratic Function Chart with Plotters in Rust\nDESCRIPTION: This code demonstrates how to create a simple chart of a quadratic function using Plotters. It sets up a bitmap backend, configures the chart, draws a line series, and adds labels and legends.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/0.png\", (640, 480)).into_drawing_area();\n    root.fill(&WHITE)?;\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"y=x^2\", (\"sans-serif\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_cartesian_2d(-1f32..1f32, -0.1f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    chart\n        .draw_series(LineSeries::new(\n            (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x)),\n            &RED,\n        ))?\n        .label(\"y = x^2\")\n        .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &RED));\n\n    chart\n        .configure_series_labels()\n        .background_style(&WHITE.mix(0.8))\n        .border_style(&BLACK)\n        .draw()?;\n\n    root.present()?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Quadratic Function Example\nDESCRIPTION: Complete example demonstrating how to create a plot of y=x^2 using Plotters, including chart configuration, series drawing, and legend creation\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/0.png\", (640, 480)).into_drawing_area();\n    root.fill(&WHITE)?;\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"y=x^2\", (\"sans-serif\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_cartesian_2d(-1f32..1f32, -0.1f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    chart\n        .draw_series(LineSeries::new(\n            (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x)),\n            &RED,\n        ))?\n        .label(\"y = x^2\")\n        .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &RED));\n\n    chart\n        .configure_series_labels()\n        .background_style(&WHITE.mix(0.8))\n        .border_style(&BLACK)\n        .draw()?;\n\n    root.present()?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Chart Context in Plotters\nDESCRIPTION: Demonstrates creating a chart context in Plotters to manage higher-level chart constructs like label areas, meshes, and data series.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n$$../examples/chart.rs$$\n```\n\n----------------------------------------\n\nTITLE: Using Plotters with Jupyter evcxr Kernel\nDESCRIPTION: Example of using Plotters interactively in a Jupyter Notebook with the evcxr kernel to create a quadratic function plot.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n:dep plotters = { git = \"https://github.com/plotters-rs/plotters\", default-features = false, features = [\"evcxr\"] }\nextern crate plotters;\nuse plotters::prelude::*;\n\nlet figure = evcxr_figure((640, 480), |root| {\n    root.fill(&WHITE)?;\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"y=x^2\", (\"Arial\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_cartesian_2d(-1f32..1f32, -0.1f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    chart.draw_series(LineSeries::new(\n        (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x)),\n        &RED,\n    )).unwrap()\n        .label(\"y = x^2\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &RED));\n\n    chart.configure_series_labels()\n        .background_style(&WHITE.mix(0.8))\n        .border_style(&BLACK)\n        .draw()?;\n    Ok(())\n});\nfigure\n```\n\n----------------------------------------\n\nTITLE: Interactive Plotting with Jupyter evcxr\nDESCRIPTION: Example of using Plotters with Jupyter evcxr kernel to create an interactive plot of y=x^2 function with customized styling and legend.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n:dep plotters = { version = \"^0.3.6\", default-features = false, features = [\"evcxr\", \"all_series\", \"all_elements\"] }\nextern crate plotters;\nuse plotters::prelude::*;\n\nlet figure = evcxr_figure((640, 480), |root| {\n    root.fill(&WHITE)?;\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"y=x^2\", (\"Arial\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_cartesian_2d(-1f32..1f32, -0.1f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    chart.draw_series(LineSeries::new(\n        (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x)),\n        &RED,\n    )).unwrap()\n        .label(\"y = x^2\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &RED));\n\n    chart.configure_series_labels()\n        .background_style(&WHITE.mix(0.8))\n        .border_style(&BLACK)\n        .draw()?;\n    Ok(())\n});\nfigure\n```\n\n----------------------------------------\n\nTITLE: Initializing Jupyter Plot with Plotters and evcxr\nDESCRIPTION: Example showing how to set up and create an interactive plot in Jupyter Notebook using Plotters with evcxr integration. Demonstrates creating a simple x^2 plot with customized styling and labels.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n:dep plotters = { version = \"^0.3.6\", default-features = false, features = [\"evcxr\", \"all_series\", \"all_elements\"] }\nextern crate plotters;\nuse plotters::prelude::*;\n\nlet figure = evcxr_figure((640, 480), |root| {\n    root.fill(&WHITE)?;\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"y=x^2\", (\"Arial\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_cartesian_2d(-1f32..1f32, -0.1f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    chart.draw_series(LineSeries::new(\n        (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x)),\n        &RED,\n    )).unwrap()\n        .label(\"y = x^2\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &RED));\n\n    chart.configure_series_labels()\n        .background_style(&WHITE.mix(0.8))\n        .border_style(&BLACK)\n        .draw()?;\n    Ok(())\n});\nfigure\n```\n\n----------------------------------------\n\nTITLE: Installing Plotters as a Dependency in Cargo.toml\nDESCRIPTION: Shows how to add Plotters as a dependency in a Rust project's Cargo.toml file.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = \"$LATEST_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Adding Plotters Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add Plotters as a dependency in a Rust project's Cargo.toml file.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = \"0.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Adding Plotters Dependency in Cargo.toml\nDESCRIPTION: Configuration to add Plotters as a dependency in a Rust project's Cargo.toml file\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = \"0.3.3\"\n```\n\n----------------------------------------\n\nTITLE: Using Elements in Plotters\nDESCRIPTION: Demonstrates the use of various elements (building blocks of figures) in Plotters such as lines, texts, and circles.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n$$../examples/elements.rs$$\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle with BitMapBackend\nDESCRIPTION: Basic example of creating a bitmap backend and drawing a filled rectangle using Plotters.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a 800*600 bitmap and start drawing\n    let mut backend = BitMapBackend::new(\"plotters-doc-data/1.png\", (300, 200));\n    // And if we want SVG backend\n    // let mut backend = SVGBackend::new(\"output.svg\", (800, 600));\n    backend.draw_rect((50, 50), (200, 150), &RED, true)?;\n    backend.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle Element\nDESCRIPTION: Simple example showing how to draw a filled circle element on a bitmap drawing area.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/3.png\", (300, 200)).into_drawing_area();\n    root.fill(&WHITE)?;\n    // Draw an circle on the drawing area\n    root.draw(&Circle::new(\n        (100, 100),\n        50,\n        Into::<ShapeStyle>::into(&GREEN).filled(),\n    ))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Basic Circle Element\nDESCRIPTION: Example of drawing a simple circle element with custom styling. Shows element creation and drawing area manipulation.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/3.png\", (300, 200)).into_drawing_area();\n    root.fill(&WHITE)?;\n    // Draw an circle on the drawing area\n    root.draw(&Circle::new(\n        (100, 100),\n        50,\n        Into::<ShapeStyle>::into(&GREEN).filled(),\n    ))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Composable Elements in Plotters\nDESCRIPTION: Shows how to compose elements into logical groups to create more complex visualizations, such as a dot with its coordinate.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n$$../examples/composable_elements.rs$$\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Elements\nDESCRIPTION: Advanced example demonstrating how to compose custom elements by combining dots and labels with custom coordinates.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nuse plotters::coord::types::RangedCoordf32;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/4.png\", (640, 480)).into_drawing_area();\n\n    root.fill(&RGBColor(240, 200, 200))?;\n\n    let root = root.apply_coord_spec(Cartesian2d::<RangedCoordf32, RangedCoordf32>::new(\n        0f32..1f32,\n        0f32..1f32,\n        (0..640, 0..480),\n    ));\n\n    let dot_and_label = |x: f32, y: f32| {\n        return EmptyElement::at((x, y))\n            + Circle::new((0, 0), 3, ShapeStyle::from(&BLACK).filled())\n            + Text::new(\n                format!(\"({:.2},{:.2})\", x, y),\n                (10, 0),\n                (\"sans-serif\", 15.0).into_font(),\n            );\n    };\n\n    root.draw(&dot_and_label(0.5, 0.6))?;\n    root.draw(&dot_and_label(0.25, 0.33))?;\n    root.draw(&dot_and_label(0.8, 0.8))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Elements with Coordinates\nDESCRIPTION: Demonstrates creating composite elements by combining circles and text labels. Shows coordinate system usage and element composition.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nuse plotters::coord::types::RangedCoordf32;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/4.png\", (640, 480)).into_drawing_area();\n\n    root.fill(&RGBColor(240, 200, 200))?;\n\n    let root = root.apply_coord_spec(Cartesian2d::<RangedCoordf32, RangedCoordf32>::new(\n        0f32..1f32,\n        0f32..1f32,\n        (0..640, 0..480),\n    ));\n\n    let dot_and_label = |x: f32, y: f32| {\n        return EmptyElement::at((x, y))\n            + Circle::new((0, 0), 3, ShapeStyle::from(&BLACK).filled())\n            + Text::new(\n                format!(\"({:.2},{:.2})\", x, y),\n                (10, 0),\n                (\"sans-serif\", 15.0).into_font(),\n            );\n    };\n\n    root.draw(&dot_and_label(0.5, 0.6))?;\n    root.draw(&dot_and_label(0.25, 0.33))?;\n    root.draw(&dot_and_label(0.8, 0.8))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Drawing Areas in Plotters\nDESCRIPTION: Shows how to create and manipulate drawing areas in Plotters, including creating sub-drawing-areas and using custom coordinate systems.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n$$../examples/drawing_area.rs$$\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with Drawing Areas\nDESCRIPTION: Example demonstrating how to split a drawing area into a 3x3 grid and fill each cell with different colors.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root_drawing_area =\n        BitMapBackend::new(\"plotters-doc-data/2.png\", (300, 200)).into_drawing_area();\n    // And we can split the drawing area into 3x3 grid\n    let child_drawing_areas = root_drawing_area.split_evenly((3, 3));\n    // Then we fill the drawing area with different color\n    for (area, color) in child_drawing_areas.into_iter().zip(0..) {\n        area.fill(&Palette99::pick(color))?;\n    }\n    root_drawing_area.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotters Dependencies in Cargo.toml\nDESCRIPTION: Demonstrates how to configure Plotters in Cargo.toml to use specific features and backends, reducing unnecessary dependencies.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\", default-features = false, features = [\"svg\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with Drawing Areas\nDESCRIPTION: Shows how to split a drawing area into a 3x3 grid and fill each cell with different colors. Demonstrates drawing area management and color palette usage.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root_drawing_area =\n        BitMapBackend::new(\"plotters-doc-data/2.png\", (300, 200)).into_drawing_area();\n    // And we can split the drawing area into 3x3 grid\n    let child_drawing_areas = root_drawing_area.split_evenly((3, 3));\n    // Then we fill the drawing area with different color\n    for (area, color) in child_drawing_areas.into_iter().zip(0..) {\n        area.fill(&Palette99::pick(color))?;\n    }\n    root_drawing_area.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawing Backends in Plotters\nDESCRIPTION: Example demonstrating how to use a bitmap drawing backend in Plotters to create a simple drawing with styled text.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n$$../examples/drawing_backends.rs$$\n```\n\n----------------------------------------\n\nTITLE: Drawing Basic Rectangle with BitMapBackend\nDESCRIPTION: Demonstrates creating a basic bitmap drawing backend and drawing a filled rectangle. Shows basic backend initialization and shape drawing.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a 800*600 bitmap and start drawing\n    let mut backend = BitMapBackend::new(\"plotters-doc-data/1.png\", (300, 200));\n    // And if we want SVG backend\n    // let mut backend = SVGBackend::new(\"output.svg\", (800, 600));\n    backend.draw_rect((50, 50), (200, 150), &RED, true)?;\n    backend.present()?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bitmap Backend in Plotters v0.3.x\nDESCRIPTION: Example of how bitmap backend is used in Plotters v0.3.x after the backend architecture changes. This demonstrates the new plug-and-play approach requiring explicit backend imports.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/RELEASE-NOTES.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nuse plotter_bitmap::BitMapBackend; // <= This extra import is used to plug the backend to Plotters\n\nfn main() {\n\tlet backend = BitMapBackend::new(...)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Bitmap Backend in Plotters v0.2.x\nDESCRIPTION: Example of how bitmap backend was used in Plotters v0.2.x before the backend architecture changes. This shows the previous approach where backends were part of the core crate.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/RELEASE-NOTES.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse plotters::prelude::*;\nfn main() {\n\tlet backend = BitMapBackend::new(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotters with Minimal Dependencies\nDESCRIPTION: Demonstrates how to configure Plotters with minimal dependencies by selecting specific features and disabling defaults in Cargo.toml.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\", default-features = false, features = [\"svg\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating Drawing Area with Smart Pointers in Rust\nDESCRIPTION: Demonstrates the new API for creating a drawing area using reference-counted, mutable references to a drawing backend. This allows the backend to remain accessible after creating the root drawing area.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n&Rc<RefCell<DrawingBackend>>\n```\n\n----------------------------------------\n\nTITLE: Converting Backend to Drawing Area in Plotters\nDESCRIPTION: Demonstrates using the IntoDrawingArea trait to convert a backend into a raw drawing area. This simplifies the initialization process for drawing contexts.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nbackend.into_drawing_area()\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to Dynamic Dispatch in Plotters\nDESCRIPTION: Shows how to convert an element to use runtime dispatch with the into_dyn method. This allows for more flexible element handling at the cost of some performance.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nelement.into_dyn()\n```\n\n----------------------------------------\n\nTITLE: Using Font Transformations in Plotters\nDESCRIPTION: Shows how to apply rotation transformations to fonts in Plotters. The example demonstrates rotating a font by 90 degrees using the FontTransform enum.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfont.transform(FontTransform::Rotate90)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotters with Selective Backend Support\nDESCRIPTION: Demonstrates how to configure Plotters with specific backend features rather than using all default dependencies. This example shows how to enable only SVG backend support, which reduces compilation dependencies and time.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\", default-features = false, features = [\"svg\"] }\n```\n\n----------------------------------------\n\nTITLE: Font Registration with ab_glyph Feature\nDESCRIPTION: Example of registering fonts when using the ab_glyph feature for font rendering without system font dependencies.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npub fn register_font(\n    name: &str,\n    style: FontStyle,\n    bytes: &'static [u8],\n) -> Result<(), InvalidFont>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Fonts with ab_glyph Feature in Rust\nDESCRIPTION: Shows how to register custom fonts when using the ab_glyph feature in Plotters. This function allows specifying a font name, style, and byte data for custom font rendering.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub fn register_font(\n    name: &str,\n    style: FontStyle,\n    bytes: &'static [u8],\n) -> Result<(), InvalidFont>\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Tier 1 Backends in Cargo.toml\nDESCRIPTION: Shows how to configure Plotters v0.3 with non-tier 1 backends like Cairo, which now require importing separate backend-specific crates rather than using feature flags.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/RELEASE-NOTES.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nplotters = {version = \"0.3\", default-features = false} # Instead of having features = [\"cairo\"] at this point\nplotters-cairo = \"0.3\" # We should import the cairo backend in this way.\n```\n\n----------------------------------------\n\nTITLE: Configuring Tier 1 Backends in Cargo.toml\nDESCRIPTION: Shows how to configure Plotters v0.3 with tier 1 backends (bitmap and SVG) when default features are disabled. This replaces the previous feature flags with the new backend-specific features.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/RELEASE-NOTES.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nplotters = {version = \"0.3\", default-features = false, features = [\"bitmap_backend\", \"svg_backend\"]} # Instead of using feature \"bitmap\" and \"svg\"\n```\n\n----------------------------------------\n\nTITLE: Adding Development Version of Plotters to Project\nDESCRIPTION: Shows how to include the development version of Plotters from GitHub in a Rust project's Cargo.toml file.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Development Version of Plotters to a Rust Project\nDESCRIPTION: Shows how to include the development version of Plotters from GitHub in a Rust project's Cargo.toml file. This allows using the latest features and improvements that might not be available in the published crate yet.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotters Development Dependencies\nDESCRIPTION: Shows how to include the development version of Plotters in a Rust project's Cargo.toml configuration.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Owned Text Elements in Plotters\nDESCRIPTION: Demonstrates how to create text elements with owned String data after the unification of OwnedText and Text types. This syntax creates a text element that owns its content.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nText::new(\"text\".to_string(),...)\n```\n\n----------------------------------------\n\nTITLE: Creating Borrowed Text Elements in Plotters\nDESCRIPTION: Shows how to create text elements with borrowed string slices after the unification of OwnedText and Text types. This syntax creates a text element that borrows its content.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nText::new(\"text\", ...)\n```\n\n----------------------------------------\n\nTITLE: Serialization Feature Example\nDESCRIPTION: Shows how to implement serialization support for custom types using serde with the serialization feature.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/README.md#2025-04-23_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(feature = \"serialization\")]\nuse serde::{Deserialize, Serialize};\n\n#[cfg_attr(feature = \"serialization\", derive(Serialize, Deserialize))]\npub struct RGBAColor(pub u8, pub u8, pub u8, pub f64);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu Linux\nDESCRIPTION: Terminal commands for installing necessary system dependencies for Plotters on Ubuntu Linux systems.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install pkg-config libfreetype6-dev libfontconfig1-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu Linux\nDESCRIPTION: Command to install required system packages for Plotters on Ubuntu Linux\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install pkg-config libfreetype6-dev libfontconfig1-dev\n```\n\n----------------------------------------\n\nTITLE: Testing All Features in Plotters\nDESCRIPTION: Command to run tests with all features enabled in the Plotters library.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --all-features\n```\n\n----------------------------------------\n\nTITLE: Running Example Testing Commands in Plotters\nDESCRIPTION: Commands to test if example outputs change after code modifications. This sequence builds examples and runs them to check for unexpected visual differences.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd plotters\ncargo test --doc\ncargo build --release --examples\nfor i in examples/*.rs\ndo\n../target/release/examples/$(basename $i .rs)\ndone\ncd plotters-doc-data\ngit status\n```\n\n----------------------------------------\n\nTITLE: Testing Plotters with No Default Features\nDESCRIPTION: Command to test the Plotters library without any default features enabled, limited to lib tests as examples require bitmap features.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --no-default-features --lib\n```\n\n----------------------------------------\n\nTITLE: Running WebAssembly Tests for Plotters\nDESCRIPTION: Command to run library tests targeting WebAssembly platform, which requires proper browser driver configuration.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --lib --target wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Installing WebAssembly Testing Tools for Plotters\nDESCRIPTION: Commands to set up the necessary tools for testing Plotters in WebAssembly environments, including adding the WASM target and installing the wasm-bindgen-cli tool.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ncargo install wasm-bindgen-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Code Coverage Tools for Plotters\nDESCRIPTION: Commands to install cargo-tarpaulin for code coverage analysis and pycobertura for generating detailed reports, noting these tools only work on x86_64 GNU/Linux.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-tarpaulin\npip install pycobertura\n```\n\n----------------------------------------\n\nTITLE: Running Plotters Examples with Cargo\nDESCRIPTION: Command to run example projects within the plotters-rs repository using Cargo. This assumes the plotters-doc-data directory exists.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/plotters/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --example <example_name>\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Analysis for Plotters\nDESCRIPTION: Commands to execute code coverage analysis using cargo-tarpaulin and generate a detailed report with pycobertura, covering both tests and doctests.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo tarpaulin --all-features --run-types Tests Doctests -o Xml --output-dir target/test\npycobertura show target/test/cobertura.xml\n```\n\n----------------------------------------\n\nTITLE: API Documentation Style Example in Rust\nDESCRIPTION: Example showing the preferred documentation style for Plotters APIs, following Doxygen-style formatting with parameter descriptions and return value documentation.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Some description to this API\n/// - `param_1`: What param_1 do\n/// - `param_2`: What param_2 do\n/// - **returns**: The return value description\nfn foo(param_1: u32, param_2: u32) -> u32{ 0 }\n```\n\n----------------------------------------\n\nTITLE: Updating Readme and Documentation in Plotters\nDESCRIPTION: Command to synchronize documentation between the readme template and source files after making changes to the documentation.\nSOURCE: https://github.com/plotters-rs/plotters/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash doc-template/update_readme.sh\n```"
  }
]