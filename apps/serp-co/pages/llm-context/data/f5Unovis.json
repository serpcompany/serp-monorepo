[
  {
    "owner": "f5",
    "repo": "unovis",
    "content": "TITLE: Creating a Line Chart with Unovis in TypeScript\nDESCRIPTION: Demonstrates how to create a basic line chart using Unovis in TypeScript. It includes data definition, component configuration, and chart initialization.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/ts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Axis, Line, XYContainer } from '@unovis/ts'\n\ntype DataRecord = { x: number; y: number }\n\nconst data: DataRecord[] = [\n  { x: 0, y: 0 },\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n\nconst line = new Line<DataRecord>({\n  x: d => d.x,\n  y: d => d.y,\n})\n\nconst container = document.getElementById('vis-container')\nconst chart = new XYContainer(container, {\n  components: [line],\n  xAxis: new Axis(),\n  yAxis: new Axis(),\n}, data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart with Unovis in TypeScript React\nDESCRIPTION: Example of creating a simple line chart using Unovis React components in TypeScript. The example demonstrates using the VisXYContainer, VisLine, and VisAxis components with typed data.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useCallback } from 'react'\nimport { VisXYContainer, VisLine, VisAxis } from '@unovis/react'\n\nexport type DataRecord = { x: number; y: number }\nexport const data: DataRecord[] = [\n  { x: 0, y: 0 },\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n\nexport function BasicLineChart (): JSX.Element {\n  return (\n    <VisXYContainer data={data} height={600}>\n      <VisLine<DataRecord>\n        x={useCallback(d => d.x, [])}\n        y={useCallback(d => d.y, [])}\n      ></VisLine>\n      <VisAxis type=\"x\"></VisAxis>\n      <VisAxis type=\"y\"></VisAxis>\n    </VisXYContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart with Unovis in JavaScript React\nDESCRIPTION: Example of creating a simple line chart using Unovis React components in JavaScript. Similar to the TypeScript example but without type definitions.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/react/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react'\nimport { VisXYContainer, VisLine, VisAxis } from '@unovis/react'\n\nexport const data = [\n  { x: 0, y: 0 },\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n\nexport function BasicLineChart () {\n  return (\n    <VisXYContainer data={data} height={600}>\n      <VisLine\n        x={useCallback(d => d.x, [])}\n        y={useCallback(d => d.y, [])}\n      ></VisLine>\n      <VisAxis type=\"x\"></VisAxis>\n      <VisAxis type=\"y\"></VisAxis>\n    </VisXYContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Components in Svelte\nDESCRIPTION: Shows how to import Unovis visualization components in a Svelte application, including the main container component and the visualization component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisXYContainer, VisLine } from '@unovis/svelte'\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Components in Solid\nDESCRIPTION: Shows how to import Unovis visualization components in a Solid application, including the main container component and the visualization component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisXYContainer, VisLine } from '@unovis/solid'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Tooltip Triggers for Different Chart Components\nDESCRIPTION: This example demonstrates how to define different tooltip triggers for multiple chart components (StackedBar, Scatter, and Line) in a composite chart. Each component has its own selector and custom formatting for its tooltip content.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Line, Scatter, StackedBar } from '@unovis/ts'\n\nconst triggers = {\n  [StackedBar.selectors.bar]: d => `${d.y1}<br/>${d.y2}<br/>${d.y3}`,\n  [Scatter.selectors.point]: d => `${(d.y1 + d.y2 + d.y3) / 3}`,\n  [Line.selectors.line]: () => 'Average value'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Components in React\nDESCRIPTION: Shows how to import Unovis visualization components in a React application. This includes the main container component (VisXYContainer) and the visualization component (VisLine).\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VisXYContainer, VisLine } from '@unovis/react'\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Components in Vue\nDESCRIPTION: Shows how to import Unovis visualization components in a Vue application, including the main container component and the visualization component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisXYContainer, VisLine } from '@unovis/vue'\n```\n\n----------------------------------------\n\nTITLE: Basic Component Class Structure in TypeScript\nDESCRIPTION: Template for implementing a component's main class file. It includes static selectors and CSS variables, configuration handling, and the basic structure for class methods and constructor.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, ConfigInterface } from './config'\nimport * as s from './style'\n\nexport class Component<Datum> {\n  static selectors = s\n  static cssVariables = s.variables\n  config: Config<Datum> = new Config()\n  events = {}\n\n  // Private fields\n\n  constructor (config?: ConfigInterface<Datum>) {...}\n\n  // Class methods\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart with Unovis and React\nDESCRIPTION: Example of how to create a simple line chart using Unovis components in a React application. It demonstrates importing necessary components, defining data, and rendering the chart with x and y axes.\nSOURCE: https://github.com/f5/unovis/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback } from 'react'\nimport { VisXYContainer, VisLine, VisAxis } from '@unovis/react'\n\ntype DataRecord = { x: number; y: number }\nconst data: DataRecord[] = [\n  { x: 0, y: 0 },\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n\nexport function BasicLineChart (): JSX.Element {\n  return (\n    <VisXYContainer data={data}>\n      <VisLine<DataRecord>\n        x={useCallback(d => d.x, [])}\n        y={useCallback(d => d.y, [])}\n      ></VisLine>\n      <VisAxis type=\"x\"></VisAxis>\n      <VisAxis type=\"y\"></VisAxis>\n    </VisXYContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Unovis in JavaScript\nDESCRIPTION: Shows how to create a basic line chart using Unovis in JavaScript. It includes data definition, component configuration, and chart initialization, similar to the TypeScript example but without type annotations.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/ts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Axis, Line, XYContainer } from '@unovis/ts'\n\nconst data = [\n  { x: 0, y: 0 },\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n\nconst line = new Line({\n  x: d => d.x,\n  y: d => d.y,\n})\n\nconst container = document.getElementById('vis-container')\nconst chart = new XYContainer(container, {\n  components: [line],\n  xAxis: new Axis(),\n  yAxis: new Axis(),\n}, data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart with Unovis and Solid JS\nDESCRIPTION: Example of how to create a simple line chart component using Unovis with Solid JS. The example shows how to set up the container, add a line visualization with data points, and include X and Y axes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/solid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VisXYContainer, VisLine, VisAxis } from '@unovis/solid'\n\ntype DataRecord = { x: number; y: number }\nconst data: DataRecord[] = [\n  { x: 0, y: 0 },\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n\nconst BasicLineChart = () => {\n  return (\n    <VisXYContainer height='50dvh'>\n      <VisLine data={data} x={(d) => d.x} y={(d) => d.y} />\n      <VisAxis type='x' />\n      <VisAxis type='y' />\n    </VisXYContainer>\n  )\n}\n\nexport default BasicLineChart\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis Core for TypeScript\nDESCRIPTION: NPM installation command for Unovis core TypeScript package without framework dependencies.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/intro.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Data Types in TypeScript\nDESCRIPTION: Type definitions for the Graph component's data structure, including NodeDatum and LinkDatum interfaces. The data structure consists of nodes and links arrays, with nodes optionally having unique IDs and position coordinates, and links requiring source and target references.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphData = {\n  nodes: NodeDatum[];\n  links: LinkDatum[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unovis Line Chart in Vue with TypeScript\nDESCRIPTION: A TypeScript example showing how to create a line chart using Unovis Vue components. The example demonstrates setting up data, accessor functions, and component configuration.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/vue/README.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { VisXYContainer, VisLine, VisAxis } from '@unovis/vue'\n  import { ref } from 'vue'\n\n  type DataRecord = { x: number; y: number }\n  const data = ref<DataRecord>([\\n    { x: 0, y: 0 },\n    { x: 1, y: 2 },\n    { x: 2, y: 1 },\n  ])\n  const x = (d: DataRecord) => d.x\n  const y = (d: DataRecord) => d.y\n</script>\n\n<VisXYContainer :height=\"600\">\n  <VisLine :data=\"data\" :x=\"x\" :y=\"y\"/>\n  <VisAxis type=\"x\"/>\n  <VisAxis type=\"y\"/>\n</VisXYContainer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart in Svelte with JavaScript\nDESCRIPTION: Example of creating a basic line chart using Unovis in a Svelte component with JavaScript. Shows the same functionality as the TypeScript example but without type annotations.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/svelte/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sveltehtml\nCODE:\n```\n<script>\n  import { VisXYContainer, VisLine, VisAxis } from '@unovis/svelte'\n\n  export let data = [\n    { x: 0, y: 0 },\n    { x: 1, y: 2 },\n    { x: 2, y: 1 },\n  ]\n  const x = d => d.x\n  const y = d => d.y\n</script>\n\n<VisXYContainer height={600}>\n  <VisLine {data} {x} {y}/>\n  <VisAxis type=\"x\"/>\n  <VisAxis type=\"y\"/>\n</VisXYContainer>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Template for Unovis XY Chart\nDESCRIPTION: HTML template for creating a basic line chart using Unovis components in Angular. It sets up an XY container with a line chart and axes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/angular/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<vis-xy-container [height]=\"500\">\n    <vis-line [data]=\"data\" [x]=\"x\" [y]=\"y\"></vis-line>\n    <vis-axis type=\"x\"></vis-axis>\n    <vis-axis type=\"y\"></vis-axis>\n</vis-xy-container>\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Unovis Components in Angular\nDESCRIPTION: Shows how to import individual Unovis component modules in an Angular application to potentially reduce bundle size, though tree-shaking makes this optional.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VisXYContainerModule } from '@unovis/angular/containers'\nimport { VisLineModule } from '@unovis/angular/components'\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Unovis Components in React\nDESCRIPTION: Shows how to import individual Unovis components in a React application to potentially reduce bundle size, though tree-shaking makes this optional.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VisXYContainer } from '@unovis/react/containers'\nimport { VisLine } from '@unovis/react/components'\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotations Component in React\nDESCRIPTION: Example of how to include and configure the Annotations component within an XY container in a React application. It demonstrates setting up basic annotation items with various properties.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapper\n  {...annotationsProps()}\n  height={300}\n  data={sampleData.slice(1, 9)}\n  containerProps={{\n    yDomain: [0, 15]\n  }}\n  components={[\n    { name: 'Area', props: { x: (d, i) => d.x, y: d => d.y, curveType: 'linear' }, key: 'components' },\n  ]}\n  items={[\n    { x: 12, y: 10, content: { text: 'Chart Title', fontSize: 30 }},\n    { x: 15, y: 50, width: 200, content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam rutrum dignissim lorem, a mollis lacus lacinia eget' },\n    { x: '50%', y: '20%', content: 'Label #1', subject: { x: '42%', y: '38%' }},\n    { x: '70%', y: '40%', content: 'Label #2', subject: { x: '86%', y: '50%' }},\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unovis Line Chart in Vue with JavaScript\nDESCRIPTION: A JavaScript example showing how to create a line chart using Unovis Vue components. Similar to the TypeScript example but without type definitions, better suited for JavaScript projects.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/vue/README.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import { VisXYContainer, VisLine, VisAxis } from '@unovis/vue'\n  import { ref } from 'vue'\n\n  export let data = ref([\n    { x: 0, y: 0 },\n    { x: 1, y: 2 },\n    { x: 2, y: 1 },\n  ])\n  const x = d => d.x\n  const y = d => d.y\n</script>\n\n<VisXYContainer :height=\"600\">\n  <VisLine :data=\"data\" :x=\"x\" :y=\"y\"/>\n  <VisAxis type=\"x\"/>\n  <VisAxis type=\"y\"/>\n</VisXYContainer>\n```\n\n----------------------------------------\n\nTITLE: Standalone Component Template Implementation\nDESCRIPTION: Template for creating independent components without core inheritance, including basic configuration and container handling.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, ConfigInterface } from './config'\n\nimport * as s from './style'\n\nexport class YourComponent {\n  static selectors = s\n  config: Config = new Config()\n  events = {}\n\n  private _container: HTMLElement\n\n  constructor (container: HTMLElement, config?: ConfigInterface) {\n    this._container = container\n  \n    if (config) this.config.init(config)\n    this.g.attr('class', s.root)\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Handlers for Stacked Bar Component\nDESCRIPTION: Demonstrates how to configure event handlers for Stacked Bar components, including click events for individual bars and mouseover events for bar groups.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/StackedBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StackedBar } from '@unovis/ts'\n...\nevents = {\n    [StackedBar.selectors.bar]: {\n        click: (d: DataRecord) => {},\n        ...\n    },\n    [StackedBar.selectors.barGroup]: {\n        mouseover: (d: DataRecord[]) => {},\n        ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Legend with StackedBar Chart in React\nDESCRIPTION: This React component demonstrates how to create an interactive legend for a StackedBar chart. It uses state to manage legend items and updates the chart data based on legend item clicks.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport function InteractiveLegend() {\n  const labels = ['Class A', 'Class B', 'Class C'].map(c => ({ name: c, inactive: false }))\n  const [items, setItems] = React.useState(labels)\n  const toggleClass = React.useCallback((item, i) => {\n    const legendItems = [...items]\n    legendItems[i].inactive = !legendItems[i].inactive\n    setItems(legendItems)\n  }, [items])\n  const yAccessors = [d => d.y, d => d.y2, d => d.y1]\n  return (\n    <BrowserOnly>{() => {\n      const { VisXYContainer, VisStackedBar, VisAxis, VisBulletLegend } = require('@unovis/react')\n      return (<>\n        <div style={{ margin: '20px'}}>\n          <VisBulletLegend items={items} bulletSize='25px' onLegendItemClick={toggleClass}/>\n        </div>\n        <VisXYContainer data={barData}>\n          <VisStackedBar x={d => d.x} y={yAccessors.map((y, i) => items[i].inactive ? 0 : y)}/>\n          <VisAxis type='y'/>\n        </VisXYContainer>\n      </>)\n    }}\n  </BrowserOnly>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart in Svelte with TypeScript\nDESCRIPTION: Example of creating a basic line chart using Unovis in a Svelte component with TypeScript. Demonstrates setting up a container, adding a line visualization, and configuring X and Y axes with typed data.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/svelte/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sveltehtml\nCODE:\n```\n<script lang=\"ts\">\n  import { VisXYContainer, VisLine, VisAxis } from '@unovis/svelte'\n\n  type DataRecord = { x: number; y: number }\n  export let data = [\n    { x: 0, y: 0 },\n    { x: 1, y: 2 },\n    { x: 2, y: 1 },\n  ]\n  const x = (d: DataRecord) => d.x\n  const y = (d: DataRecord) => d.y\n</script>\n\n<VisXYContainer height={600}>\n  <VisLine {data} {x} {y}/>\n  <VisAxis type=\"x\"/>\n  <VisAxis type=\"y\"/>\n</VisXYContainer>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Grouped Bar Chart in JSX\nDESCRIPTION: Demonstrates the minimal configuration for a Grouped Bar chart using the XYWrapper component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/GroupedBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapper {...groupedBarProps()} showContext=\"full\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis Core and Framework-Specific Packages\nDESCRIPTION: NPM command to install the core Unovis library and framework-specific packages for React, Angular, Svelte, Vue, or Solid.\nSOURCE: https://github.com/f5/unovis/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/<react|angular|svelte|vue|solid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Component for Unovis Line Chart\nDESCRIPTION: TypeScript code for an Angular component that provides data and accessor functions for a basic line chart using Unovis. It defines a DataRecord type and sets up sample data.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/angular/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core'\n\ntype DataRecord = { x: number; y: number }\n\n@Component({\n  selector: 'basic-line-chart',\n  templateUrl: './basic-line-chart.component.html'\n})\nexport class BasicLineChartComponent {\n  x = (d: DataRecord): number => d.x\n  y = (d: DataRecord): number => d.y\n  data: DataRecord[] = [\n    { x: 0, y: 0 },\n    { x: 1, y: 2 },\n    { x: 2, y: 1 },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers for Area Charts\nDESCRIPTION: Shows how to set up event handlers for the Area component. Demonstrates setting up click, mouseover, and mouseleave events that receive the relevant data records.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Area.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Area } from '@unovis/ts'\n\nevents = [Area.selectors.area]: {\n  click: (data: DataRecord[]) => {},\n  mouseover: (data: DataRecord[]) => {},\n  mouseleave: (data: DataRecord[]) => {}\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Scatter Plot with CSS Variables\nDESCRIPTION: CSS customization for Scatter plots that controls opacity, stroke width, hover effects, and label text color for customized appearance.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Scatter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.custom-vis {\n  --vis-scatter-fill-opacity: 0.5;\n  --vis-scatter-stroke-width: 1;\n  --vis-scatter-hover-stroke-width: 2;\n  --vis-scatter-point-label-text-color-dark: darkblue;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining X and Y Accessors for Crosshair Component\nDESCRIPTION: Example showing how to define x and y accessor functions for positioning the crosshair in relation to data points.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Crosshair.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: ((d: DataRecord) => number) = d.x + 0.5\nconst yStacked: ((d: DataRecord) => number)[] = [d => d.y, d => d.y1, d => d.y2]\n```\n\n----------------------------------------\n\nTITLE: Interactive Legend Implementation in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to create an interactive legend for a StackedBar chart using the Unovis library. It includes legend and chart initialization, and a function for toggling legend items.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst items = [\n  { name: 'Class A', inactive: false },\n  { name: 'Class B', inactive: false },\n  { name: 'Class C', inactive: false },\n]\n\nconst legend = new BulletLegend(container)\nconst chart = new XYContainer<DataRecord>(container, {\n  components: [new StackedBar({ x, y })],\n  xAxis: new Axis()\n}, data)\n\nfunction toggleItem (item: BulletLegendItemInterface, i: index): void {\n  const items = legend.config.items\n  items[i].active = !items[i].active\n  legend.update({ ...legend.config, items: items })\n  chart.updateComponents([{ x, y: items.map((item, i) => item.inactive ? 0 : y[i]) }])\n}\n\nlegend.update({ items, onLegendItemClick: toggleItem })\n```\n\n----------------------------------------\n\nTITLE: Using Component Selectors for Tooltip Triggers in TypeScript\nDESCRIPTION: This example shows how to import and use component selectors from Unovis to define trigger functions for tooltips. The selectors are used as keys in the triggers object to target specific chart elements.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StackedBar } from '@unovis/ts'\n\nconst triggers = {\n  [StackedBar.selectors.bar]: /* Your callback function*/\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Legend with StackedBar Chart in React\nDESCRIPTION: This React component demonstrates how to implement an interactive legend for a StackedBar chart. It uses hooks for state management and memoization for performance optimization.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Chart({ data, x, y }): JSX.Element {\n  const [items, setItems] = useState([\n    { name: 'Class A', inactive: false },\n    { name: 'Class B', inactive: false },\n    { name: 'Class C', inactive: false },\n  ])\n\n  const toggleItem = useCallback((item: BulletLegendItemInterface, i: number) => {\n    const itemsCopy = [...items]\n    itemsCopy[i].active = !itemsCopy[i].active\n    setItems(itemsCopy)\n  }, [items])\n\n  return (<>\n    <VisBulletLegend items={items} onLegendItemClick={toggleItem}/>\n    <VisXYContainer data={data}>\n      <VisStackedBar x={x} y={useMemo(() => items.map((item, i) => item.inactive ? 0 : y[i]), [items])}/>\n      <VisAxis type='y'/>\n    </VisXYContainer>\n  </>)\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Grouped Bar Chart with CSS Variables\nDESCRIPTION: Shows how to use CSS variables to customize the appearance of a Grouped Bar chart.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/GroupedBar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.custom-vis {\n  --vis-grouped-bar-stroke-width: 2px;\n  --vis-grouped-bar-stroke-color: #000;\n  --vis-grouped-bar-cursor: crosshair;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Node and Link Types in TypeScript\nDESCRIPTION: Type definitions for individual nodes and links in the graph. Nodes can have optional ID and position properties, while links must have source and target properties that can reference nodes by index, ID, or direct object reference.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype NodeDatum = {\n  id?: string;\n  x?: number;\n  y?: number;\n}\n\ntype LinkDatum = {\n  id?: string;\n  source: number | string | NodeDatum;\n  target: number | string | NodeDatum;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapArea Type for TopoJSON Map in TypeScript\nDESCRIPTION: Specifies the minimum required properties for a MapArea object used in TopoJSON Map.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapArea = {\n  id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic XY Container Configuration\nDESCRIPTION: Example showing component function for configuring XY Container with basic properties including x and y accessors\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/XY_Container.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst width = 200;\nconst height = 100;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Handlers for Chord Diagram in TypeScript\nDESCRIPTION: Example of how to configure event handlers for nodes and links in a Chord Diagram, including mouseover and mouseout events.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/ChordDiagram.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChordDiagram, ChordNode, ChordRibbon } from '@unovis/vis'\n\nevents = {\n  [ChordDiagram.selectors.node]: {\n    mouseover: (d: ChordNode<N>) => {},\n    mouseout: (d: ChordNode<N>) => {},\n  },\n  [ChordDiagram.selectors.link]: {\n    mouseover: (d: ChornRibbon<N>) => {},\n    mouseout: (d: ChornRibbon<N>) => {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Brush Event Handling with Tooltip\nDESCRIPTION: Code demonstrating how to use Brush component event listeners with a Tooltip. Shows implementation of onBrushStart, onBrushMove, and onBrushEnd event handlers.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BrowserOnly>\n  {() => {\n    const { Tooltip } = require('@unovis/ts')\n    const tooltip = new Tooltip({})\n    const action = (i) => `(selection, event, userDriven) => {\\n    if (userDriven) {\\n      ${i}\\n    }\\n  }`\n    return (\n      <XYWrapper {...brushProps()}\n        height={150}\n        containerProps={{ tooltip }}\n        onBrushStart={(selection, event, userDriven) => userDriven && tooltip.place({ x: 0, y: 0 })}\n        onBrushMove={(selection, event, userDriven) => userDriven && tooltip.show(selection)}\n        onBrushEnd={(selection, event, userDriven) => userDriven && tooltip.hide()}\n        showContext=\"container\"\n        declarations={{\n          tooltip: 'new Tooltip({})',\n          onBrushStart: action('tooltip.place({ x: 0, y: 0 }}'),\n          onBrushMove: action('tooltip.show(selection)'),\n          onBrushEnd: action('tooltip.hide()')\n        }}\n        imports={{\"unovis/ts\": [\"Tooltip\"]}}\n      />\n    )\n  }}\n</BrowserOnly>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip for LeafletMap Points and Clusters in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a tooltip for points and clusters in the LeafletMap component using TypeScript. It shows how to use the LeafletMap.selectors.point selector to set up tooltips for both regular points and clusters.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnew Tooltip({\n    triggers: {\n      [LeafletMap.selectors.point]: (d: LeafletMapPoint<MapDataRecord>) => {\n        return d.isCluster ? `${d.clusterPoints.length} cities` : d.properties.city\n      },\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Variable Layer Settings Implementation in Nested Donut\nDESCRIPTION: Example of configuring different settings for specific layers using an accessor function that takes the layer index as a parameter and returns custom settings.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlayers = [(d: Datum) => d.group, (d: Datum) => d.subgroup]\n\n// The accessor function that takes a layer index and returns a `NestedDonutLayerSettings` object:\nlayerSettings = (layer: number) => {\n  if (i === 0) {\n    return { width: 25 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Grouped Bar Chart (TypeScript)\nDESCRIPTION: Demonstrates how to set up event handlers for bars and bar groups in a Grouped Bar chart.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/GroupedBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GroupedBar } from '@unovis/ts'\n...\nevents = {\n    [GroupedBar.selectors.bar]: {\n        click: (d: DataRecord) => {},\n        ...\n    },\n    [GroupedBar.selectors.barGroup]: {\n        mouseover: (d: DataRecord[]) => {},\n        ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Handlers for Timeline Component\nDESCRIPTION: Shows how to set up event handlers for different elements of the Timeline component using selectors. Includes examples for background wheel events, line click events, and label mouseover events.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Timeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Timeline } from '@unovis/ts'\n\nconst events = {\n  [Timeline.selectors.background]: {\n    wheel: () => { ... },\n  },\n  [Timeline.selectors.line]: {\n    click: () => { ... },\n  }\n  [Timeline.selectors.label]: {\n    mouseover: () => { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying TopoJSON Layer to LeafletMap in TypeScript\nDESCRIPTION: This snippet shows how to apply a TopoJSON layer configuration to the LeafletMap component using TypeScript. It specifies the data source, feature name, and color properties for fill and stroke.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst topoJSONLayer = {\n  sources: topojson,\n  featureName: 'countries',\n  fillProperty: 'color',\n  strokeProperty: 'color-stroke',\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Tooltip Components in TypeScript\nDESCRIPTION: This code snippet shows how to manually configure a Tooltip instance with specific components. This approach is useful when you want to use the Tooltip independently from a container component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst tooltip = new Tooltip({\n  //highlight-next-line\n  components: [components],\n  ...tooltipConfig,\n})\n```\n\n----------------------------------------\n\nTITLE: XY Container Scale Configuration\nDESCRIPTION: Examples of configuring scales for the XY Container using d3-scale\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/XY_Container.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scale } from '@unovis/ts'\nconst yScale = Scale.scaleLinear()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst yScale = Scale.scalePow().exponent(2)\n```\n\n----------------------------------------\n\nTITLE: Creating Area Color Accessor for TopoJSON Map in TypeScript\nDESCRIPTION: Demonstrates how to create an area color accessor function for customizing area colors in TopoJSON Map.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst areaColor = (d: AreaDatum) => {\n  switch (d.id) {\n    case 'AU': return 'red'\n    case 'BR': return 'blue'\n    case 'CN': return 'green'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Area Accessors in TypeScript\nDESCRIPTION: Demonstrates the correct way to provide multiple y-accessors for stacked area charts. Shows the recommended approach of using an array of accessor functions versus the incorrect method of returning an array from a single accessor.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Area.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* ✅ Do this */\nconst y = [\n  () => Math.random(),\n  () => Math.random(),\n  () => Math.random(),\n]\n\n/* ⛔ Not this */\nconst y = d => [Math.random(), Math.random(), Math.random()]\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Trigger Types in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of tooltip triggers, where the key is a CSS selector and the value is a callback function that returns content to display in the tooltip based on the data point, index, and elements.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntypeof triggers = {\n  [selector: string]: (\n    datum: T,\n    i: number,\n    els: Element[]\n  ) => string | HTMLElement | null | void\n}\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Accessor for Ordinal X-axis Values in Unovis\nDESCRIPTION: This snippet shows how to create a numeric accessor function that returns the data index, which is useful for implementing ordinal scales in Unovis XY components that don't natively support ordinal scales.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/tips-and-tricks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = (d: DataRecord, i: number) => i\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Layout Customization in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the onLayoutCalculated callback to adjust node positions after the layout has been calculated. It allows for custom modifications to node properties based on specific criteria.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst onLayoutCalculated = (nodes: GraphNode<N, L>[], links: GraphLink<N, L>[]) => {\n  // Modify nodes based on custom criteria\n  nodes.forEach(node => {\n    if (node.group === 'special') {\n      // Set specific positions or styles for nodes in the 'special' group\n      node.x += 50;\n      node.y -= 30;\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Selectors for Donut Chart in TypeScript\nDESCRIPTION: Example of how to set up event selectors for different parts of the Donut chart, including segments, background, central label, and central sub-label.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/Donut.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Donut } from '@unovis/ts'\n...\nevents = {\n    [Donut.selectors.segment]: { },\n    [Donut.selectors.background]: { },\n    [Donut.selectors.centralLabel]: { },\n    [Donut.selectors.centralSubLabel]: { },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChordDiagram Data Types in TypeScript\nDESCRIPTION: TypeScript type definitions for the data structures required by the Chord Diagram component, including ChordInputNode and ChordInputLink types.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/ChordDiagram.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChordInputNode = {\n    id?: string;\n}\n\ntype ChordInputLink = {\n    source: number | string | ChordInputNode;\n    target: number | string | ChordInputNode;\n    value: number;\n}\n\ntype ChordData<ChordInputNode, ChordInputLink> = {\n  nodes: ChordInputNode[];\n  links: ChordInputLink[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Angular\nDESCRIPTION: NPM installation command for Unovis with Angular framework dependencies.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/intro.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/angular\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Callbacks for LeafletMap Data Layer in TypeScript\nDESCRIPTION: This snippet shows how to set up event callbacks for the data layer (points, clusters) in the LeafletMap component using TypeScript. It demonstrates configuring a click event for both regular points and clusters.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nevents: {\n  // One event for regular points and clusters\n  [LeafletMap.selectors.point]: {\n    click: (d: LeafletMapPoint<MapDataRecord> => {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Bounds for LeafletMap in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set initial bounds for the LeafletMap component using TypeScript. It shows the structure for specifying the north-east and south-west coordinates of the desired view area.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bounds = {\n  northEast: { lat: number; lng: number };\n  southWest: { lat: number; lng: number };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphForceLayoutSettings Type in TypeScript\nDESCRIPTION: This code snippet defines the type for Graph Force Layout Settings, specifying various properties that can be used to customize the force-directed layout algorithm.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphForceLayoutSettings = {\n  /** Preferred Link Distance. Default: `60` */\n  linkDistance?: number;\n  /** Link Strength [0:1]. Default: `0.45` */\n  linkStrength?: number;\n  /** Charge Force (<0 repulsion, >0 attraction). Default: `-500` */\n  charge?: number;\n  /** X-centring force. Default: `0.15` */\n  forceXStrength?: number;\n  /** Y-centring force. Default: `0.25` */\n  forceYStrength?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Colors for Legend Items\nDESCRIPTION: Examples of how to set custom colors for legend items using both array mapping and manual configuration.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst colors = ['red', 'blue', 'green']\nconst items = labels.map((label, i) => ({ name: label, color: colors[i] }))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst items = [\n  { name: 'A', color: 'red' },\n  { name: 'B', color: 'blue' },\n  { name: 'C', color: 'green' }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Axis Events in Unovis TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to set up event handlers for the Axis component. It demonstrates setting up mouseover and mouseout events for tick elements.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Axis.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Axis } from '@unovis/ts'\n\nevents = {\n  [Axis.selectors.tick]: {\n    mouseover: (d: number | Date) => {},\n    mouseout: (d: number | Date) => {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Vue\nDESCRIPTION: Command to install the required Unovis packages for a Vue project. This installs both the core TypeScript package and the Vue components wrapper.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/vue/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/vue\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Components in TypeScript\nDESCRIPTION: Shows how to import Unovis visualization components in a TypeScript application, including the main container component (XYContainer) and the visualization component (Line).\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XYContainer, Line } from '@unovis/ts'\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Unovis Components in Vue\nDESCRIPTION: Shows how to import individual Unovis components in a Vue application to potentially reduce bundle size, though tree-shaking makes this optional.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisXYContainer } from '@unovis/vue/containers'\nimport { VisLine } from '@unovis/vue/components'\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Callbacks for LeafletMap in TypeScript\nDESCRIPTION: This code block demonstrates the available callback functions for various map interactions in the LeafletMap component. It includes callbacks for initialization, move, zoom, and click events.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/** Function to be called after the map's async initialization is done. Default: `undefined` */\nonMapInitialized: (() => void)\n/** Map Move / Zoom unified callback function. Default: `undefined` */\nonMapMoveZoom: (({ mapCenter, zoomLevel, bounds }: MapZoomState) => void)\n/** Map Move Start callback function. Default: `undefined` */\nonMapMoveStart: (({ mapCenter, zoomLevel, bounds }: MapZoomState) => void)\n/** Map Move End callback function. Default: `undefined` */\nonMapMoveEnd: (({ mapCenter, zoomLevel, bounds }: MapZoomState) => void)\n/** Map Zoom Start callback function. Default: `undefined` */\nonMapZoomStart: (({ mapCenter, zoomLevel, bounds }: MapZoomState) => void)\n/** Map Zoom End callback function. Default: `undefined` */\nonMapZoomEnd: (({ mapCenter, zoomLevel, bounds }: MapZoomState) => void)\n/** Map Zoom Click callback function. Default: `undefined` */\nonMapClick: (({ mapCenter, zoomLevel, bounds }: MapZoomState) => void)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Gallery Examples in Unovis\nDESCRIPTION: The expected file structure for a new gallery example, showing required files for all supported frameworks including Angular, React, Svelte, and vanilla TypeScript.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nyour-example\n├── data.ts\n├── index.tsx\n├── your-example.component.html # ┓\n├── your-example.component.ts   # ┠ angular\n├── your-example.module.ts      # ┛\n├── your-example.svelte         # svelte\n├── your-example.ts             # typescript\n├── your-example.tsx            # react\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Selection Events\nDESCRIPTION: Example of setting up click events for node selection in the Graph component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst events = {\n  [Graph.selectors.node]: {\n      click: (d: GraphNode) => {\n          // Set the selected node id here, e.g.: config.selectedNodeId = d.id\n          // and trigger the component update if required by your UI framework\n       }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Unovis Components in Svelte\nDESCRIPTION: Shows how to import individual Unovis components in a Svelte application to potentially reduce bundle size, though tree-shaking makes this optional.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisXYContainer } from '@unovis/svelte/containers'\nimport { VisLine } from '@unovis/svelte/components'\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Tooltip Component Examples in React/JSX\nDESCRIPTION: This code defines utility functions for creating and configuring tooltips in example components. It includes functions to create new chart components, define class name selectors, and generate tooltip props with customizable triggers.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const newComponent = (name, props) => ({\n  name: name,\n  props: { x: d=>d.x, y: d => d.y, ...props},\n  key: \"components\"\n})\n\nexport const classnames = {\n  \"StackedBar\": \"[StackedBar.selectors.bar]\",\n  \"Line\": \"[Line.selectors.line]\",\n  \"Scatter\": \"[Scatter.selectors.point]\"\n}\n\nexport const tooltipProps = (chart=\"StackedBar\", components, n=10) => ({\n  name: \"Tooltip\",\n  configKey: \"tooltip\",\n  data: generateDataRecords(n).map(d => ({...d, y: Math.floor(d.y)})),\n  height: 150,\n  components: [newComponent(chart, components)],\n  triggers: {\n    [classnames[chart]]: d=> `\n      <span>${d.x}, ${d.y}</span>\n    `\n  },\n  showTriggers: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Area Colors in TopoJSON Map Data\nDESCRIPTION: Shows how to customize area colors by including a color property in the AreaDatum object.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = {\n  points: [],\n  links: [],\n  areas: [\n    { id: 'AU', color: 'red' },\n    { id: 'BR', color: 'blue' },\n    { id: 'CN', color: 'green' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onScroll Event Handler for Timeline Component\nDESCRIPTION: Demonstrates how to implement the onScroll callback for the Timeline component. The function receives the distance scrolled from the top of the timeline in pixels.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Timeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype onScroll = (n: number) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module for Unovis Gallery Examples\nDESCRIPTION: Angular configuration code required to test gallery examples, showing how to import modules and add component selectors to the app.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n@NgModule({\n  declarations: [AppComponent],\n  imports: [... /* your angular module here */],\n  bootstrap: [AppComponent],\n  providers: [BrowserModule],\n})\n```\n\n----------------------------------------\n\nTITLE: Event Selector Configuration in TypeScript\nDESCRIPTION: Event selector configuration for Sankey diagram components including nodes, links, and labels.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Sankey.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sankey } from '@unovis/ts'\n\nconst events = {\n  [Sankey.selectors.node]: { ... }\n  [Sankey.selectors.nodeGroup]: { ... }\n  [Sankey.selectors.link]: { ... },\n  [Sankey.selectors.label]: { ... },\n  [Sankey.selectors.sublabel]: { ... },\n  [Sankey.selectors.labelGroup]: { ... },\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Legend Implementation in Angular\nDESCRIPTION: This Angular example shows how to create an interactive legend for a StackedBar chart. It includes both the HTML template and TypeScript component code for managing legend items and updating the chart.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<vis-bullet-legend [items]=\"items\" [onLegendItemClick]=\"toggleItem\"></vis-bullet-legend>\n<vis-xy-container [data]=\"data\">\n  <vis-stacked-bar [x]=\"x\" [y]=\"y\"></vis-stacked-bar>\n  <vis-axis type=\"y\"></vis-axis>\n</vis-xy-container>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndata: DataRecord[]\nx: NumericAccessor<DataRecord>\ny: NumericAccessor<DataRecord>[]\nitems: BulletLegendItemInterface[] = [\n  { name: 'Class A', inactive: false },\n  { name: 'Class B', inactive: false },\n  { name: 'Class C', inactive: false },\n]\n\ntoggleItem (item: BulletLegendItemInterface, i: number): void {\n  const itemsCopy = [...items]\n  itemsCopy[i].active = !itemsCopy[i].active\n  this.items = itemsCopy\n  this.y = items.map((y, i) => item.inactive ? 0 : y[i])\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Event Selectors Configuration in TypeScript\nDESCRIPTION: Definition of available event selectors for the Graph component, including selectors for root, background, nodes, links, and panel elements. These selectors can be used to attach event handlers to specific graph elements.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Graph } from '@unovis/ts'\n\nconst events = {\n    [Graph.selectors.root]: { ... },\n    [Graph.selectors.background]: { ... },\n    [Graph.selectors.node]: { ... },\n    [Graph.selectors.nodeShape]: { ... },\n    [Graph.selectors.nodeGauge]: { ... },\n    [Graph.selectors.nodeSideLabel]: { ... },\n    [Graph.selectors.nodeLabel]: { ... },\n    [Graph.selectors.link]: { ... },\n    [Graph.selectors.linkLine]: { ... },\n    [Graph.selectors.panel]: { ... },\n    [Graph.selectors.panelRect]: { ... },\n    [Graph.selectors.panelSelection]: { ... },\n    [Graph.selectors.panelLabel]: { ... },\n    [Graph.selectors.panelLabelText]: { ... },\n    [Graph.selectors.panelSideIcon]: { ... },\n    [Graph.selectors.panelSideIconShape]: { ... },\n    [Graph.selectors.panelSideIconSymbol]: { ... },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Brush Selection\nDESCRIPTION: Example showing how to make the entire brush selection range draggable with one click by enabling the draggable property.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapper {...brushProps()} height={200} selectionMinLength={2} selection={[3,6]} draggable={true}/>\n```\n\n----------------------------------------\n\nTITLE: Defining MapDataRecord Type for LeafletMap in TypeScript\nDESCRIPTION: Defines the minimum viable data type for points on a LeafletMap, requiring latitude and longitude properties to position points on the map.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapDataRecord = {\n  latitude: number;\n  longitude: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Interaction Callback Types\nDESCRIPTION: TypeScript type definitions for node dragging and zoom/pan callback functions.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nonNodeDragStart: (n: GraphNode<N, L>, event: D3DragEvent<SVGGElement, GraphNode<N, L>, unknown>) => void | undefined;\nonNodeDrag: (n: GraphNode<N, L>, event: D3DragEvent<SVGGElement, GraphNode<N, L>, unknown>) => void | undefined;\nonNodeDragEnd: (n: GraphNode<N, L>, event: D3DragEvent<SVGGElement, GraphNode<N, L>, unknown>) => void | undefined;\n\nonZoom: (zoomScale: number, zoomScaleExtent: [number, number], event: D3ZoomEvent<SVGGElement, unknown> | undefined, transform: ZoomTransform) => void;\nonZoomStart: (zoomScale: number, zoomScaleExtent: [number, number], event: D3ZoomEvent<SVGGElement, unknown> | undefined, transform: ZoomTransform) => void;\nonZoomEnd: (zoomScale: number, zoomScaleExtent: [number, number], event: D3ZoomEvent<SVGGElement, unknown> | undefined, transform: ZoomTransform) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring TopoJSON Layer for LeafletMap in JavaScript\nDESCRIPTION: This snippet demonstrates the configuration object for adding a TopoJSON overlay to the LeafletMap component. It includes properties for specifying the data source, feature name, and styling options for fill and stroke.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntopoJSONLayer: {\n  /* Your `TopoJSON.Topology` object. Default: `undefined` */\n  sources: TopoJSON.Topology;\n  /* Name of the feature collection to be rendered. Default: `undefined` */\n  featureName: string;\n  /* Fill color property name. Default: `undefined` */\n  fillProperty: string;\n  /* Fill opacity. Default: `0.6` */\n  fillOpacity: number;\n  /* Stroke color property name. Default: `undefined` */\n  strokeProperty: string;\n  /* Stroke opacity. Default: `0.8` */\n  strokeOpacity: number;\n  /* Stroke width. Default: `2` */\n  strokeWidth: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component in React/JSX with BrowserOnly Wrapper\nDESCRIPTION: This React component implementation for Tooltip wraps the component with BrowserOnly to ensure it only renders in browser environments. It processes trigger configurations and passes them to either XYWrapper or XYWrapperWithInput components.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Tooltip = (props) => (\n  <BrowserOnly fallback={<div>Loading...</div>}>\n    {() => {\n      const { showTriggers, inputWrapper, triggers, ...rest } = props\n      const tsimports = { ['@unovis/ts']: [] }\n      const triggerConfig = Object.keys(triggers).reduce((obj,k) => {\n        const [component, _, selector] = k.substring(1, k.length-1).split('.')\n        if (showTriggers) tsimports['@unovis/ts'].push(component)\n        const { [component]: comp } = require('@unovis/ts')\n        obj[comp.selectors[selector]] = props.triggers[k]\n        if (!props.components.find(d => d.name === component)) {\n          props.components.push(newComponent(component))\n        }\n        return obj\n      }, {})\n      const wrapperProps = showTriggers ? { ...rest, triggers, imports: tsimports } : rest\n      return (\n        inputWrapper ?\n        <XYWrapperWithInput {...wrapperProps} hiddenProps={{ triggers: triggerConfig, ...props.hiddenProps }}/> :\n        <XYWrapper {...wrapperProps} hiddenProps={{ triggers: triggerConfig, ...props.hiddenProps }}/>\n      )\n    }}\n  </BrowserOnly>\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Legend Implementation in Svelte\nDESCRIPTION: This Svelte component showcases how to create an interactive legend for a StackedBar chart. It includes reactive declarations and event handling for legend item toggling.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang='ts'>\n  let data: DataRecord[]\n  let x: NumericAccessor<DataRecord>\n  let y: NumericAccessor<DataRecord>[]\n\n  let items = [\n    { name: 'Class A', inactive: false },\n    { name: 'Class B', inactive: false },\n    { name: 'Class C', inactive: false },\n  ])\n\n  function toggleItem (item: BulletLegendItemInterface, i: number): void {\n    items[i].inactive = !items[i].inactive\n    y = items.map((item, i) => item.inactive ? 0 : y[i])\n  }\n</script>\n\n<VisBulletLegend {items} onLegendItemClick={toggleItem}/>\n<VisXYContainer data={data}>\n  <VisStackedBar x={x} y={y}/>\n  <VisAxis type='y'/>\n</VisXYContainer>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Color Palette in Global Scope\nDESCRIPTION: This JavaScript snippet shows how to set a custom color palette for Unovis components using the global UNOVIS_COLORS variable. This needs to be done before importing the library.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/theming.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.UNOVIS_COLORS = [...]\n// or\nglobalThis.UNOVIS_COLORS = [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Selection Range in Brush\nDESCRIPTION: Example showing how to explicitly define the default selection range for the Brush component using the selection property.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapper {...brushProps()} selection={[3,6]}/>\n```\n\n----------------------------------------\n\nTITLE: D3 Selection Pattern Implementation\nDESCRIPTION: Standard pattern for implementing enter-update-exit transitions in D3-based components following Unovis conventions.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst selection  = this.g.selectAll<ElementType, DataType>(s.selectorName)\n  .data(data, /* unique identifier function */)\n    \nconst selectionEnter = selection.enter().append(/* element type */)\n  .attr('class', s.selectorName)\n  // enter properties here\n\nconst selectionMerged = selection.merge(selectionEnter)\n  // update properties here\n\nconst selectionExit = selection.exit()\n  // exit properties here\n  .remove()\n```\n\n----------------------------------------\n\nTITLE: Sankey CSS Variables Configuration\nDESCRIPTION: CSS variable definitions for styling Sankey diagram components including links, nodes, labels, and icons.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Sankey.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Links */\n--vis-sankey-link-cursor: default;\n--vis-sankey-link-color: var(--vis-color-main-light);\n--vis-sankey-link-opacity: 0.5;\n--vis-sankey-link-hover-opacity: 1.0;\n/* Nodes */\n--vis-sankey-node-cursor: default;\n--vis-sankey-node-color: var(--vis-color-main);\n--vis-sankey-node-label-color: #575c65;\n--vis-sankey-node-opacity: 0.9;\n--vis-sankey-node-hover-opacity: 1.0;\n/* Node Labels */\n--vis-sankey-node-label-background-fill-color: #ffffff;\n--vis-sankey-node-label-background-stroke-color: #eaeaea;\n--vis-sankey-node-label-background-opacity: 0.9;\n--vis-sankey-node-label-color: #575c65;\n--vis-sankey-node-label-cursor: default;\n--vis-sankey-node-label-font-weight: 600;\n--vis-sankey-node-label-font-size: 12px;\n--vis-sankey-node-label-text-decoration: none;\n--vis-sankey-node-sublabel-font-size: 10px;\n--vis-sankey-node-sublabel-font-weight: 500;\n/* Icons */\n--vis-sankey-icon-size: 22px;\n--vis-sankey-icon-color: #ffffff;\n--vis-sankey-icon-stroke-opacity: 0.6;\n--vis-sankey-icon-font-family: FontAwesome;\n/* Dark Theme */\n--vis-dark-sankey-link-color: var(--vis-color-main-dark);\n--vis-dark-sankey-node-color: var(--vis-color-main);\n--vis-dark-sankey-node-label-color: #eaeaea;\n--vis-dark-sankey-node-label-background-fill-color: #292b34;\n--vis-dark-sankey-node-label-background-stroke-color: #575c65;\n--vis-dark-sankey-icon-color: #292b34;\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Color Palettes in TypeScript\nDESCRIPTION: This code demonstrates how to import the default color palettes for light and dark themes from the Unovis TypeScript library. These palettes can be used for customizing the colors of visualization components.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/theming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { colors, colorsDark } from '@unovis/ts'\n```\n\n----------------------------------------\n\nTITLE: Configuring Color for Stacked Bars in Unovis\nDESCRIPTION: Demonstrates how to set colors for stacked bars using either an array of color strings or a callback function.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/StackedBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Either of these work\nconst colors = ['red', 'green', 'blue']\nconst color = (d: DataRecord, i: number) => ['red', 'green', 'blue'][i]\n```\n\n----------------------------------------\n\nTITLE: Customizing Bar Colors in Grouped Bar Chart\nDESCRIPTION: Shows how to set custom colors for each bar in the Grouped Bar chart based on its index.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/GroupedBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapper {...groupedBarProps()} showContext=\"minimal\" showAxes color={(d,i) => ['#04c0c7', '#5144d3', '#da348f'][i]}/>\n```\n\n----------------------------------------\n\nTITLE: Initializing TopoJSONMap Events in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the TopoJSONMap component and set up event handlers for map points and features.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TopoJSONMap } from '@unovis/ts'\n\nconst events = {\n  [TopoJSONMap.selectors.point]: {},\n  [TopoJSONMap.selectors.feature]: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Variables for Axis Styling in Unovis\nDESCRIPTION: This CSS snippet demonstrates the new variables introduced in Unovis 1.2 for customizing axis appearance. It includes variables for tick line width, grid line width, domain color, tick label cursor, and tick label text decoration.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/releases/1.2.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--vis-axis-tick-line-width: <value>;\n--vis-axis-grid-line-width: <value>;\n--vis-axis-domain-color: <color>;\n--vis-axis-tick-label-cursor: <cursor-style>;\n--vis-axis-tick-label-text-decoration: <text-decoration-style>;\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Styling Chord Diagram\nDESCRIPTION: CSS variables that can be used to customize the appearance of the Chord Diagram component, including link colors, opacity, and text colors for both light and dark themes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/ChordDiagram.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--vis-chord-diagram-link-fill-color: #cad5f6;\n--vis-chord-diagram-link-stroke-color: #777777;\n--vis-chord-diagram-link-stroke-opacity: 0.15;\n--vis-chord-diagram-label-text-fill-color-bright: #ffffff;\n--vis-chord-diagram-label-text-fill-color-dark: #a5abb2;\n/* Dark theme */\n--vis-dark-chord-diagram-link-fill-color: #575c65;\n```\n\n----------------------------------------\n\nTITLE: Defining ChordDiagram Hierarchical Node Types in TypeScript\nDESCRIPTION: TypeScript type definition for hierarchical nodes in the Chord Diagram, used when implementing multi-level visualizations with nodeLevels property.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/ChordDiagram.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChordHierarchyNode<N> = {\n  /* The property name (i.e. 'A') */\n  key: string;\n  /*  Array of descendant nodes */\n  values: (N | ChordHierarchyNode<N>)[];\n  /* Zero for the root node, and increasing by one for each descendant generation */\n  depth: number;\n  /* Zero for leaf nodes, and the greatest distance from any descendant leaf for internal nodes */\n  height: number;\n  /* Aggregated value calcualted from link data */\n  value: number;\n  /* Key values for the ancestor nodes. i.e ['A', 'Level 1', 'root'] */\n  ancestors: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Components in Angular\nDESCRIPTION: Shows how to import Unovis visualization components in an Angular application, including the main container component and the visualization component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VisXYContainerModule, VisLineModule } from '@unovis/angular'\n```\n\n----------------------------------------\n\nTITLE: Defining GraphCircleLabel Type for Node Side Labels in Unovis\nDESCRIPTION: This TypeScript snippet defines the GraphCircleLabel type used for configuring side labels on nodes in the Graph component. It specifies properties such as text, color, cursor, font size, and radius.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype GraphCircleLabel = {\n  text: string;\n  textColor?: string; // Optional text color. By default, the text color will depend on the brightness of the circle color.\n  color?: string | null; // Optional color\n  cursor?: string | null; // Optional cursor on hover\n  fontSize?: string | null; // Optional font size as a CSS string\n  radius?: number; // Circle radius in pixels\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Axis Component with CSS Variables in Unovis\nDESCRIPTION: This CSS snippet demonstrates how to customize the appearance of the Axis component using CSS variables. It sets custom font sizes, colors, and font family for various axis elements.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Axis.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  --vis-axis-tick-label-font-size: 20px;\n  --vis-axis-label-color: #1acb9a;\n  --vis-axis-font-family: monospace;\n  --vis-axis-tick-label-color:  #8777d9;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bordered Segments with CSS Variables\nDESCRIPTION: CSS variables for creating bordered segment effects in various chart components including Area, Donut, StackedBar, and Timeline. Defines stroke widths and colors for visual separation of elements.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/theming.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root  {\n  --stroke: #fff;\n  --stroke-dark: #292b34;\n\n  /* Area */\n  --vis-area-stroke-width: 1px;\n  --vis-area-stroke: var(--stroke);\n  --vis-dark-area-stroke: var(--stroke-dark);\n\n  /* Donut */\n  --vis-donut-segment-stroke-width: 1px;\n\n  /* StackedBar */\n  --vis-stacked-bar-stroke-width: 1px;\n  --vis-stacked-bar-stroke: var(--stroke);\n  --vis-dark-stacked-bar-stroke: var(--stroke-dark);\n\n  /* Timeline */\n  --vis-timeline-line-stroke-width: 1px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Free Brush Props in JavaScript\nDESCRIPTION: Function that generates configuration props for the Free Brush component with scatter plot integration. It sets up basic visualization parameters including height, data mapping, and axes display.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/FreeBrush.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const freeBrushProps = (showAxes = true) => ({\n    name: \"FreeBrush\",\n    height: 100,\n    components: [{\n        name: \"Scatter\",\n        props: {\n          x: d => d.x,\n          y: d => d.y,\n        },\n        key: \"components\",\n      },\n    ],\n    showAxes: showAxes,\n    data: generateScatterDataRecords()\n})\n```\n\n----------------------------------------\n\nTITLE: Graph Post-Render Callback Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the onRenderComplete callback function that enables post-render customization of the graph. The callback provides access to the SVG canvas, nodes, links, configuration, and various rendering parameters.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nonRenderComplete (\n  g: Selection<SVGGElement, unknown, null, undefined>,\n  nodes: GraphNode<N, L>[],\n  links: GraphLink<N, L>[],\n  config: GraphConfigInterface<N, L>,\n  duration: number,\n  zoomLevel: number,\n  width: number,\n  height: number\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Custom Node Shape Type Definition\nDESCRIPTION: Type definition for node data with custom shape property, used for implementing custom SVG shapes in the graph visualization. Defines possible shape values as literal types.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype NodeDatum = {\n  id: string;\n  shape: 'blob' | 'cloud' | 'diamond' | 'house'\n}\n```\n\n----------------------------------------\n\nTITLE: Default CSS Variables for Crosshair Component\nDESCRIPTION: Complete list of supported CSS variables with their default values for styling the Crosshair component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Crosshair.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--vis-crosshair-line-stroke-color: #888;\n--vis-crosshair-line-stroke-width: 1px;\n--vis-crosshair-circle-stroke-color: #fff;\n--vis-crosshair-circle-stroke-width: 1px;\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Angular\nDESCRIPTION: Command to install Unovis TypeScript and Angular packages using npm.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/angular/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/angular\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for Area Charts\nDESCRIPTION: Example of CSS styling for Area charts using CSS variables. Demonstrates how to customize the appearance of areas with variables for fill opacity, hover state, and stroke width.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Area.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.custom-area {\n  --vis-area-fill-opacity: 0.5;\n  --vis-area-hover-fill-opacity: 1;\n  --vis-area-stroke-width: 1px;\n```\n\n----------------------------------------\n\nTITLE: Defining City Data Type with Age Distribution for Color Map\nDESCRIPTION: Extends the basic MapDataRecord type to include age distribution data that can be visualized using the colorMap property on LeafletMap.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapDataRecord = {\n  ...\n  age0_18: number;\n  age19_64: number;\n  age65plus: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Props Configuration for Nested Donut Component\nDESCRIPTION: Defining the configuration for the Nested Donut component including container type, data binding, and layer definitions for hierarchical visualization.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const nestedDonutProps = () => ({\n  name: 'NestedDonut',\n  containerName: 'SingleContainer',\n  configKey: 'component',\n  data,\n  dataType: 'Datum',\n  layers: [(d) => d.group, (d) => d.subgroup],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Solid JS\nDESCRIPTION: Command to install the required Unovis packages for a Solid JS application. Installs both the core TypeScript library and the Solid component wrappers.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/solid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/solid\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Svelte\nDESCRIPTION: Command to install the required Unovis packages for Svelte integration. Installs both the core TypeScript library and the Svelte component wrappers.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/svelte/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/svelte\n```\n\n----------------------------------------\n\nTITLE: Defining TimeDataRecord Type in TypeScript\nDESCRIPTION: Defines the required properties for the TimeDataRecord type used by the Timeline component. Each record should have a timestamp (position on X axis), length (duration in X axis units), and type (row identifier).\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Timeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype TimeDataRecord = {\n  timestamp: Date; // Position on the X axis. Can be `number` or `Date`\n  length: number; // Length of the line in X axis values, i.e. milliseconds if you use `Date`\n  type: string; // The row it will be displayed in\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brush Handle Position\nDESCRIPTION: Example demonstrating how to change the placement of the Brush handles with respect to the XYChart using the handlePosition property.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapperWithInput {...brushProps()} containerProps={{ margin: { top: 0, bottom: 0, left: 10, right: 10 }}} property=\"handlePosition\" inputType=\"select\" options={['outside', 'inside']}/>\n```\n\n----------------------------------------\n\nTITLE: Defining ChordDiagram Props and Helper Functions in TypeScript\nDESCRIPTION: Functions that generate sample data and provide configurations for the Chord Diagram examples. Includes configuration for basic props, node coloring, and hierarchical data generation.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/ChordDiagram.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const chordDiagramProps = (n = 10) => ({\n  name: \"ChordDiagram\",\n  containerName: \"SingleContainer\",\n  configKey: \"component\",\n  height: 300,\n  dataType: 'ChordInputNode,ChordLinkDatum',\n  data: generateNodeLinkData(n),\n})\nexport const getNodeColor = (n) => ['#6A9DFF', '#1acb9a', '#8777d9'][Number(n.id) % 3]\nexport const hierarchyData = {\n  nodes:['A', 'B', 'C'].flatMap((g, i) =>\n    Array(4).fill(0).map((_, j) => ({\n      id: [g, j].join(''),\n      label: [g, j].join(''),\n      group: `Level ${j % 2 ? '1' : '2'}`,\n      subgroup: `${g}`,\n    }))\n  ),\n  links: [\n    { source: 'A0', target: 'B1' },\n    { source: 'A0', target: 'A2' },\n    { source: 'A1', target: 'B2' },\n    { source: 'B0', target: 'C1' },\n    { source: 'B1', target: 'C2' },\n    { source: 'C0', target: 'A2' },\n     { source: 'C2', target: 'B1' },\n  ].map((l) => ({ ...l, value: Math.random() })),\n}\nexport const colorMap = {'A': 'lightgreen', 'B': 'cornflowerblue', 'C': 'indigo'}\n```\n\n----------------------------------------\n\nTITLE: Group Colors Configuration for Nested Donut\nDESCRIPTION: Setting up a color mapping object that associates different groups with specific colors, used for customizing segment appearance based on group membership.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const groupColors = { A: 'red', B: 'green', C: 'blue' }\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Solid\nDESCRIPTION: NPM installation command for Unovis with Solid framework dependencies.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/intro.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/solid\n```\n\n----------------------------------------\n\nTITLE: Configuring Color for Non-Stacked Bars in Unovis\nDESCRIPTION: Shows how to set conditional colors for non-stacked bars based on data values using a callback function.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/StackedBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = (d: DataRecord) => d.y > 7 ? '#FF4F4E' : '#1acb9a'}\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Svelte\nDESCRIPTION: NPM installation command for Unovis with Svelte framework dependencies.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/intro.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/svelte\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip for TopoJSON Features\nDESCRIPTION: Example showing how to create a tooltip that responds to TopoJSON features on a LeafletMap. The tooltip displays the feature name when hovering over map areas.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst tooltipAreas = new Tooltip({\n  triggers: {\n    [LeafletMap.selectors.map]: (feature) => {\n      const name = feature && feature.properties.name\n      return name ? `<span>${name}</span>` : null\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data for Nested Donut in TypeScript\nDESCRIPTION: Creating an array of sample data objects with group, subgroup, and value properties for demonstration purposes. The data is randomly generated with groups A, B, and C, and corresponding subgroups and values.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const data = Array(100)\n  .fill(0)\n  .map(() => {\n    const group = sample(['A', 'B', 'C'])\n    return {\n      group,\n      subgroup: group + Math.floor(Math.random() * 3),\n      value: sample([10, 20, 30]),\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic Segment Value Calculation in Nested Donut\nDESCRIPTION: Example showing how segment values are calculated by default based on the count of occurrences in the data array, using a simple array of string values.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = ['A', 'A', 'A', 'B', 'B', 'C']\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for Vue\nDESCRIPTION: NPM installation command for Unovis with Vue framework dependencies.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/intro.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/vue\n```\n\n----------------------------------------\n\nTITLE: Default Label Configuration in TypeScript\nDESCRIPTION: Default configuration settings for Sankey diagram label properties.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Sankey.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  labelFit: FitMode.Trim,\n  labelMaxWidth: 70,\n  labelTrimMode: TrimMode.Middle,\n  labelExpandTrimmedOnHover: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Label Appearance with CSS Variables in Unovis\nDESCRIPTION: This CSS snippet defines variables for controlling the appearance of link labels in the Graph component. It includes settings for font size, background color, and text color for both default and dark themes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n--vis-graph-link-label-font-size: 9pt;\n\n--vis-graph-link-label-background: #e6e9f3;\n--vis-graph-link-label-text-color: #18181B;\n\n// Dark Theme\n--vis-dark-graph-link-label-background: #3f3f45;\n--vis-dark-graph-link-label-text-color: var(--vis-graph-link-label-text-color-bright);\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Flow Data Function\nDESCRIPTION: Helper function to generate random flow data points based on a source location with random offsets.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletFlowMap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getSampleFlow (s) {\n  return {\n    sourceLatitude: s.latitude + (Math.random() - 0.5) * 10,\n    sourceLongitude: s.longitude + (Math.random() - 0.5) * 15,\n    targetLatitude: s.latitude,\n    targetLongitude: s.longitude,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tick Values for Axis Using Filter Function\nDESCRIPTION: A function that creates custom tick values for an Axis by filtering the data to show only even x values. This allows for precise control over which tick marks appear on the axis.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Axis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tickValues() {\n  return data.filter(d => d.x % 2 == 0)\n})\n```\n\n----------------------------------------\n\nTITLE: Graph Panel CSS Styling Variables\nDESCRIPTION: CSS variables for customizing the appearance of graph panels, including colors, fonts, and theme-specific settings.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n  --vis-graph-panel-border-color: #E6E9F3;\n  --vis-graph-panel-border-opacity: 0.9;\n  --vis-graph-panel-fill-color: #ffffff;\n\n  --vis-graph-panel-label-color: #6c778c;\n  --vis-graph-panel-label-background: #ffffff;\n  --vis-graph-panel-label-font-family: var(--vis-font-family);\n  --vis-graph-panel-label-font-size: 10pt;\n  --vis-graph-panel-label-font-weight: 300;\n\n  --vis-graph-panel-dashed-outline-color: #b7b7b7;\n\n  --vis-graph-panel-side-icon-symbol-color: #9ea7b8;\n  --vis-graph-panel-side-icon-shape-fill-color: #ffffff;\n\n  /* Dark Theme */\n  --vis-dark-graph-panel-border-color: var(--vis-color-grey);\n  --vis-dark-graph-panel-fill-color: #292b34;\n  --vis-dark-graph-panel-label-color: #E6E9F3;\n  --vis-dark-graph-panel-label-background: var(--vis-color-grey);\n  --vis-dark-graph-panel-side-icon-symbol-color: #ffffff;\n  --vis-dark-graph-panel-side-icon-shape-fill-color: #6c778c;\n  --vis-dark-graph-panel-border-color: #a0a6ad;\n```\n\n----------------------------------------\n\nTITLE: Initializing Crosshair Props Configuration in TypeScript\nDESCRIPTION: Helper function to generate configuration props for the Crosshair component, setting up data, dimensions, and chart components.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Crosshair.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const crosshairProps = (chart=\"Line\", components, n=5) => ({\n  name: \"Crosshair\",\n  configKey: \"crosshair\",\n  data: generateDataRecords(n),\n  showAxes: true,\n  height: 150,\n  containerProps: { padding: { top: 5, bottom: 5 } },\n  components: [{ name: chart, props: { x: d=>d.x, y: [d=>d.y, d=>d.y1, d=>d.y2], ...components}, key: \"components\" }]\n})\n```\n\n----------------------------------------\n\nTITLE: Multi-Node Selection CSS Variables\nDESCRIPTION: CSS variables for customizing the appearance of brushed nodes in multi-node selection.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n--vis-graph-brushed-node-stroke-color;\n--vis-graph-brushed-node-label-text-color;\n--vis-graph-brushed-node-icon-fill-color;\n```\n\n----------------------------------------\n\nTITLE: Setting Selection Minimum Length in Brush\nDESCRIPTION: Code demonstrating how to set a constraint for the minimum selection value using the selectionMinLength property in the Brush component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapper {...brushProps()} selectionMinLength={5}/>\n```\n\n----------------------------------------\n\nTITLE: Segment Color Customization Example\nDESCRIPTION: Example of using the segmentColor accessor to assign colors to segments based on their root group, allowing for consistent color theming across the hierarchy.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const groupColors = {\n  A: 'red',\n  B: 'green',\n  C: 'blue',\n}\nsegmentColor = (d: NestedDonutSegment<Datum>) => groupColors[d.data.root]\n```\n\n----------------------------------------\n\nTITLE: Formatting X-axis Ticks with Predefined Categories for Ordinal Display\nDESCRIPTION: This code shows how to format axis ticks using a predefined array of category strings. This approach is useful when ordinal values are explicitly defined separately from the data.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/tips-and-tricks.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst categories = ['A', 'B', 'C', 'D', 'E']\nconst tickFormat = (tick: number) => categories[tick]\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Brush Selection\nDESCRIPTION: JSX example showing how to apply custom CSS variables to style a Brush component with custom selection colors and opacity.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{\n  '--vis-brush-selection-fill-color': '#0b1640',\n  '--vis-brush-selection-opacity': '0.6',\n  '--vis-brush-unselected-fill-color': '#fff',\n  '--vis-brush-unselected-opacity': '0.9',\n  }}>\n  <XYWrapper {...brushProps()} selection={[2,5]}/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Brush Handle Width\nDESCRIPTION: Example showing how to set the width in pixels of the Brush's handle using the handleWidth property with a range input.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapperWithInput {...brushProps()} property=\"handleWidth\" inputType=\"range\" defaultValue={20}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module for Unovis Components\nDESCRIPTION: TypeScript code for an Angular module that imports necessary Unovis modules and declares the BasicLineChartComponent. This setup allows the use of Unovis components in an Angular application.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/angular/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core'\nimport { VisXYContainerModule, VisLineModule, VisAxisModule } from '@unovis/angular'\n\nimport { BasicLineChartComponent } from './basic-line-chart.component'\n\n@NgModule({\n  imports: [VisXYContainerModule, VisLineModule, VisAxisModule],\n  declarations: [BasicLineChartComponent],\n  exports: [BasicLineChartComponent],\n})\nexport class BasicLineChartModule { }\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for Unovis Components\nDESCRIPTION: This code snippet defines a linear gradient SVG definition that can be used as a fill for Unovis visualization components. The gradient transitions through multiple blue and green colors with specified offsets.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/tips-and-tricks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient\" gradientTransform=\"rotate(90)\">\n  <stop offset=\"20%\" stop-color=\"#051937\" />\n  <stop offset=\"40%\" stop-color=\"#004d7a\" />\n  <stop offset=\"60%\" stop-color=\"#008793\" />\n  <stop offset=\"80%\" stop-color=\"#00bf72\" />\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Custom Value Accessor Example for Nested Donut\nDESCRIPTION: Sample data structure and value accessor configuration that uses explicit value properties instead of counting occurrences, allowing for custom segment sizing.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = [{ label: 'A', value: 3 }, { label: 'B', value: 2 }, { label: 'C', value: 1 }]\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Margin Example\nDESCRIPTION: Example showing how to set left and right margins in a SingleContainer. This affects the effective width available to the contained component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/Single_Container.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ left: 100, right: 100 }\n```\n\n----------------------------------------\n\nTITLE: Configuring colorMap for Age Distribution Visualization\nDESCRIPTION: Defines a colorMap object that specifies colors for different age groups, enabling visualization of age distribution data as pie/donut segments on map points.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst colorMap = {\n  age0_18: { color: '#0085FF' },\n  age19_64: { color: '#41A4FF' },\n  age65plus: { color: '#8BC7FF', className: 'age65plus' },\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Styling Donut Chart\nDESCRIPTION: List of CSS variables available for customizing the appearance of the Donut chart, including label fonts, colors, and background styling for both light and dark themes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/Donut.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--vis-donut-central-label-font-size: 16px;\n--vis-donut-central-label-text-color: #5b5f6d;\n--vis-donut-central-label-font-family\n--vis-donut-central-label-font-weight: 600;\n\n--vis-donut-central-sub-label-font-size: 12px;\n--vis-donut-central-sub-label-text-color: #5b5f6d;\n--vis-donut-central-sub-label-font-family\n--vis-donut-central-sub-label-font-weight: 500;\n\n--vis-donut-background-color: #E7E9F3;\n\n--vis-dark-donut-central-label-text-color: #C2BECE;\n--vis-dark-donut-central-sub-label-text-color: #C2BECE;\n--vis-dark-donut-background-color: #18160C;\n```\n\n----------------------------------------\n\nTITLE: Defining Sankey Data Structure in TypeScript\nDESCRIPTION: Type definition for Sankey diagram data structure showing the required format with nodes and links arrays.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Sankey.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SankeyData<NodeDatum, LinkDatum> = {\n  nodes: NodeDatum[];\n  links: LinkDatum[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layers with Missing Data in Nested Donut\nDESCRIPTION: Example of layer configuration that handles missing or undefined data, showing how the component treats cases where certain groups don't have child segments.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlayers = [(d: Datum) => d.group, (d: Datum) => d.value]\n```\n\n----------------------------------------\n\nTITLE: XY Container Sizing Type Definition\nDESCRIPTION: Type definition for the Sizing interface used to configure margin and padding properties\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/XY_Container.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Sizing = {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotation Subjects with Points\nDESCRIPTION: Example of configuring a subject for an annotation item with a visible point, specifying its position and radius.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nitems = [{\n  content: 'Item with Subject',\n  subject: { x: '50%', y: 2, radius: 4 }\n}]\n```\n\n----------------------------------------\n\nTITLE: Available CSS Variables for Stacked Bar Component\nDESCRIPTION: Lists all supported CSS variables for the Stacked Bar component with their default values, including cursor, fill color, stroke properties, and dark theme options.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/StackedBar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--vis-stacked-bar-cursor: default;\n--vis-stacked-bar-fill-color: var(--vis-color-main);\n--vis-stacked-bar-stroke-color: none;\n--vis-stacked-bar-stroke-width: 0px;\n--vis-stacked-bar-hover-stroke-width: none;\n--vis-stacked-bar-hover-stroke-color: none;\n \n/* Dark Theme */\n--vis-dark-stacked-bar-stroke-color: none;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sankey Link Properties in TypeScript\nDESCRIPTION: Type definition for Sankey link properties including source, target, and optional value attributes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Sankey.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SankeyLink = {\n  source: string | number | SankeyNode;\n  target: string | number | SankeyNode;\n  value?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: LeafletMap Event Selectors Definition\nDESCRIPTION: Definition of available event selectors for the LeafletMap component, including point, innerLabel, bottomLabel, and map selectors.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LeafletMap } from '@unovis/ts'\n...\nevents = {\n    [LeafletMap.selectors.point]: {},\n    [LeafletMap.selectors.innerLabel]: {},\n    [LeafletMap.selectors.bottomLabel]: {},\n    [LeafletMap.selectors.map]: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Unovis Components in Solid\nDESCRIPTION: Shows how to import individual Unovis components in a Solid application to potentially reduce bundle size, though tree-shaking makes this optional.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisXYContainer } from '@unovis/solid/containers'\nimport { VisLine } from '@unovis/solid/components'\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotation Subjects\nDESCRIPTION: Example of configuring a subject for an annotation item, specifying its position and visual properties.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nitems = [{\n  content: 'Item with Subject',\n  subject: { x: '50%', y: 20 }\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining BulletLegend Item Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for BulletLegend items, specifying the structure and available properties for legend entries.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BulletLegendItemInterface {\n  name: string | number;\n  color?: string;\n  shape?: BulletShape;\n  inactive?: boolean;\n  hidden?: boolean;\n  pointer?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Items in TypeScript\nDESCRIPTION: TypeScript definition of the items array for the Annotations component. It shows different ways to specify annotation content, positioning, and subjects.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet items: AnnotationItem[] = [\n  { x: 12, y: 10, content: { text: 'Chart Title', fontSize: 30 }},\n  { x: 15, y: 50, width: 200, content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam rutrum dignissim lorem, a mollis lacus lacinia eget' },\n  { x: '50%', y: '20%', content: 'Label #1', subject: { x: '42%', y: '38%' }},\n  { x: '70%', y: '40%', content: 'Label #2', subject: { x: '86%', y: '50%' }},\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Brush Appearance with CSS Variables\nDESCRIPTION: CSS code showing how to modify the appearance of the selected and unselected areas in the Brush component using CSS variables.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n--vis-brush-selection-fill-color: #0b1640;\n--vis-brush-selection-opacity: 0.6;\n--vis-brush-unselected-fill-color: #fff;\n--vis-brush-unselected-opacity: 0.9;\n```\n\n----------------------------------------\n\nTITLE: Creating Area Data for TopoJSON Map in TypeScript\nDESCRIPTION: Demonstrates how to create area data using country codes for TopoJSON Map.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst countryCodes = [\n  'AU','BR','CN','EG','FR','IN','JP','MX','NO','PE','PH','RU','TZ','US'\n]\nconst areaData = countryCodes.map(id => ({ id }))\nconst data = { areas: areaData }\n```\n\n----------------------------------------\n\nTITLE: Customizing Stacked Bar Component with CSS Variables\nDESCRIPTION: Shows how to style the Stacked Bar component using CSS variables to control stroke color, width, and hover effects.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/StackedBar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.custom-stacked-bar {\n  --vis-stacked-bar-stroke-color: #000;\n  --vis-stacked-bar-stroke-width: 5px;\n  --vis-stacked-bar-hover-stroke-width: 10px;\n  --vis-stacked-bar-hover-stroke-color: #8777d9;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Point Label Accessor for TopoJSON Map in TypeScript\nDESCRIPTION: Demonstrates how to create a point label accessor function for customizing point labels in TopoJSON Map.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapPoint = {\n  id: string;\n  latitude: number;\n  longitude: number;\n  city: string;\n}\n\nconst pointLabel = (d: MapPoint) => d.city\n```\n\n----------------------------------------\n\nTITLE: AnnotationItem Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the AnnotationItem type, detailing all available properties for configuring individual annotation items.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnnotationItem = {\n  // Base properties\n  content: string | UnovisText | UnovisText[];\n  subject?: AnnotationSubject;\n\n  // Position and size properties\n  x?: number | `${number}%` | `${number}px`\n  y?: number | `${number}%` | `${number}px`\n  width?: number | `${number}%` | `${number}px`\n  height?: number | `${number}%` | `${number}px`\n \n  // Wrapping and alignment properties\n  separator?: string | string[];\n  verticalAlign?: VerticalAlign | string;\n  textAlign?: TextAlign | string;\n  wordBreak?: boolean;\n  fastMode?: boolean;\n\n  // Miscellaneous\n  cursor: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Rendering Functions in Unovis Graph\nDESCRIPTION: This TypeScript snippet demonstrates how to implement custom rendering functions for nodes in the Graph component. It includes examples of nodeEnterCustomRenderFunction and nodeUpdateCustomRenderFunction, which allow for custom SVG rendering of nodes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { select, Selection } from 'd3-selection'\nimport { GraphNode, GraphConfigInterface } from '@unovis/ts'\n\nexport const nodeEnterCustomRenderFunction = (\n  datum: GraphNode,\n  g: Selection<SVGGElement, GraphNode, null, unknown>,\n  config: GraphConfigInterface\n) => {\n  // Initial rendering logic for the node\n  g.append('circle')\n\n  // Add custom icons, labels, or any additional elements\n  g.append('text')\n    .attr('dy', -10)\n    .attr('text-anchor', 'middle')\n}\n\nexport const nodeUpdateCustomRenderFunction = (\n  datum: GraphNode,\n  g: Selection<SVGGElement, GraphNode, null, unknown>,\n  config: GraphConfigInterface\n) => {\n  // Update the node's size, color\n  g.select('circle')\n    .attr('r', config.nodeSize ?? 20)\n    .style('fill', config.nodeFill ?? 'steelblue')\n\n  // Update labels or any custom elements based on node data\n  g.select('text')\n    .text(datum.id)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sankey Node Structure in TypeScript\nDESCRIPTION: Type definition for Sankey node properties including id, color, and label attributes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Sankey.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype SankeyNode = {\n  id: string;\n  color: string;\n  label: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Side Label Appearance with CSS Variables in Unovis\nDESCRIPTION: This CSS snippet defines variables for controlling the appearance of node side labels in the Graph component. It includes settings for background fill color, stroke color, and text fill colors for both default and dark themes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--vis-graph-node-side-label-background-fill-color: #a0a9af;\n--vis-graph-node-side-label-background-stroke-color: #ffffff;\n--vis-graph-node-side-label-fill-color-bright: #ffffff;\n--vis-graph-node-side-label-fill-color-dark: #494b56;\n\n// Dark Theme\n--vis-dark-graph-node-side-label-background-fill-color: #989aa3;\n--vis-dark-graph-node-side-label-background-stroke-color: var(--vis-color-grey);\n--vis-dark-graph-node-side-label-fill-color-bright: #f1f4f7;\n--vis-dark-graph-node-side-label-fill-color-dark: var(--vis-color-grey);\n```\n\n----------------------------------------\n\nTITLE: Styled Text Content in Annotations\nDESCRIPTION: Example of setting styled text content for an annotation item using the UnovisText object type.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nitems = [{\n  content: { text: 'Item 2', color: 'red' }\n}]\n```\n\n----------------------------------------\n\nTITLE: Handling Scatter Plot Event Binding in TypeScript\nDESCRIPTION: Example of binding event handlers to Scatter plot points using selectors. Shows how to setup click events for individual data points.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Scatter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Scatter } from '@unovis/ts'\n...\nevents = {\n    [Scatter.selectors.point]: {\n        click: (d: DataRecord) => {},\n        ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Inactive Legend Items\nDESCRIPTION: Example demonstrating how to configure inactive legend items with reduced opacity.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst items = labels.map(label => ({ name: label, inactive: true }))\n```\n\n----------------------------------------\n\nTITLE: Defining Interactive Legend Event Handler in TypeScript\nDESCRIPTION: This snippet defines the function signature for the onLegendItemClick event handler used in interactive legends. It specifies the parameters and return type for the function.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction (item: BulletLegendItemInterface, index: number): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Node Appearance with CSS Variables in Unovis\nDESCRIPTION: This CSS snippet defines variables for controlling the appearance of disabled (greyed out) nodes in the Graph component. It includes settings for node color, icon color, and side label background color for both default and dark themes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n--vis-graph-node-greyout-color: #ebeff7;\n--vis-graph-node-icon-greyout-color: #c6cad1;\n--vis-graph-node-side-label-background-greyout-color: #f1f4f7;\n\n// Dark Theme\n--vis-dark-graph-node-greyout-color: #494b56;\n--vis-dark-graph-node-icon-greyout-color: var(--vis-color-grey);\n--vis-dark-graph-node-side-label-background-greyout-color: #f1f4f7;\n```\n\n----------------------------------------\n\nTITLE: Defining Width and Height in SingleContainer\nDESCRIPTION: Simple example showing how to define explicit width and height values for a SingleContainer. These numeric values override the default container sizing behavior.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/Single_Container.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst width = 200;\nconst height = 100;\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Line Pattern Variables in CSS\nDESCRIPTION: Default CSS variables for configuring line patterns in Unovis Line components. Includes marker and dasharray patterns for six different line styles.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/theming.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--vis-pattern-marker0: var(--vis-pattern-marker-circle);\n\n--vis-pattern-marker1: var(--vis-pattern-marker-triangle);\n--vis-pattern-dasharray1: 9 1;\n\n--vis-pattern-marker2: var(--vis-pattern-marker-diamond);\n--vis-pattern-dasharray2: 2;\n\n--vis-pattern-marker3: var(--vis-pattern-marker-arrow);\n--vis-pattern-dasharray3: 2 3 8 3;\n\n--vis-pattern-marker4: var(--vis-pattern-marker-square);\n--vis-pattern-dasharray4: 6;\n\n--vis-pattern-marker5: var(--vis-pattern-marker-star);\n--vis-pattern-dasharray5: 1 6;\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend Item Shapes\nDESCRIPTION: Example showing how to configure different shapes for legend items using the BulletShape enum.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BulletShape } from '@unovis/ts'\n\nconst items = [\n  { name: 'Circle', shape: BulletShape.Circle },\n  { name: 'Square', shape: BulletShape.Square },\n  { name: 'Triangle', shape: BulletShape.Triangle }\n  { name: 'Star', shape: BulletShape.Star }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Data Types for Nested Donut in TypeScript\nDESCRIPTION: Type definition for the data structure used by the Nested Donut component, specifying the group and subgroup properties required for hierarchy construction.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Datum = {\n  group: string;\n  subgroup: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Crosshair Component with CSS Variables\nDESCRIPTION: CSS configuration for customizing the appearance of the Crosshair component, including line and circle stroke colors and widths.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Crosshair.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.visualization-container-div {\n  --vis-crosshair-line-stroke-color: #f88080;\n  --vis-crosshair-circle-stroke-color: #000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Scatter Data Generation Function in JSX/TSX\nDESCRIPTION: A utility function that generates scatter plot data records, setting up props with configurable number of points and coloring options.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Scatter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const scatterProps = (n = 10, colored = false) => ({\n  name: \"Scatter\",\n  data: generateScatterDataRecords(n, colored),\n  x: d => d.x,\n  y: d => d.y,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Unovis Large Size Styles in TypeScript\nDESCRIPTION: This snippet shows how to import large and extra-large size styles from the Unovis TypeScript library. These styles can be used to increase the font size of labels in charts.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/theming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { styleLargeSize } from '@unovis/ts' // ~1.3x larger\nimport { styleExtraLargeSize } from '@unovis/ts' // 2x larger\n```\n\n----------------------------------------\n\nTITLE: BulletShape Accessor Function Type\nDESCRIPTION: Type definition for the bulletShape accessor function used to customize bullet shapes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/BulletLegend.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction (d: BulletLegendItemInterface, i: number): BulletShape | string {}\n```\n\n----------------------------------------\n\nTITLE: Area Chart CSS Variables and Default Values\nDESCRIPTION: Complete list of supported CSS variables for Area charts with their default values. Includes options for controlling cursor, fill opacity, stroke properties, hover states, and dark theme settings.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Area.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--vis-area-cursor: default;\n--vis-area-fill-opacity: 1;\n--vis-area-stroke-color: none;\n--vis-area-stroke-width: 0px;\n--vis-area-stroke-dasharray: none;\n--vis-area-stroke-opacity: 1;\n--vis-area-hover-fill-opacity: none;\n--vis-area-hover-stroke-width: none;\n \n/* Dark Theme */\n--vis-dark-area-stroke-color: none;\n```\n\n----------------------------------------\n\nTITLE: Defining Margin and Padding Type in SingleContainer\nDESCRIPTION: Type definition for the Sizing object used for margin and padding properties in SingleContainer. It specifies numeric values for top, bottom, left, and right spacing.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/Single_Container.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Sizing = {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TopoJSON Structure for LeafletMap in JavaScript\nDESCRIPTION: This code snippet shows an example structure of a TopoJSON object that can be used with the LeafletMap component. It includes geometry and property information for countries.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletMap.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst topojson = {\n    \"type\": \"Topology\",\n    \"arcs\": [...],\n    \"objects\": {\n        \"countries\": {\n            \"type\": \"GeometryCollection\",\n            \"geometries\": [\n                {\n                    \"arcs\": [...],\n                    \"type\": \"MultiPolygon\",\n                    \"properties\": {\n                        \"name\": \"Canada\",\n                        \"color\": \"#1f77b4\",\n                        \"color-stroke\": \"#3E5FFF\"\n                    },\n                    \"id\": \"CA\"\n                },\n                ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Brush Configuration in JSX\nDESCRIPTION: Example showing the basic configuration of the Brush component inside an XYContainer. This shows how to implement a simple brush with an Area component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<XYWrapper {...brushProps(false)} showContext=\"full\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Graph Panel Configuration Example\nDESCRIPTION: Example implementation of a graph panel configuration showing how to style and customize a panel group.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst panels = [{\n  nodes: [...],\n  label: 'Group 1',\n  color: '#E3116C',\n  padding: 1,\n  dashedOutline: true,\n  sideIconSymbol: '⚾',\n  sideIconShape: 'circle',\n  sideIconShapeStroke: '#777',\n  sideIconCursor: 'pointer',\n  sideIconFontSize: '24pt',\n  sideIconShapeSize: 58,\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining MapPoint Type for TopoJSON Map in TypeScript\nDESCRIPTION: Specifies the minimum required properties for a MapPoint object used in TopoJSON Map.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapPoint = {\n  id: string;\n  latitude: number;\n  longitude: number;\n  color: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapLink Type for TopoJSON Map in TypeScript\nDESCRIPTION: Specifies the minimum required properties for a MapLink object used in TopoJSON Map.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapLink = {\n  source: string | number | MapPoint;\n  target: string | number | MapPoint;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling TopoJSONMap with CSS Variables\nDESCRIPTION: This CSS snippet shows all supported CSS variables for customizing the appearance of the TopoJSONMap component, including color schemes for both light and dark themes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n--vis-map-feature-color: #dce3eb;\n--vis-map-boundary-color: #ffffff;\n--vis-map-point-label-text-color-dark: #5b5f6d;\n--vis-map-point-label-text-color-light: #fff;\n--vis-map-point-label-font-weight: 600;\n--vis-map-point-label-font-size: 12px;\n--vis-map-point-label-font-family\n \n/* Dark Theme */\n--vis-dark-map-feature-color: #5b5f6d;\n--vis-dark-map-boundary-color: #2a2a2a;\n--vis-dark-map-point-label-text-color-dark: #fff;\n--vis-dark-map-point-label-text-color-light:#5b5f6d;\n```\n\n----------------------------------------\n\nTITLE: Tooltip CSS Styling Variables\nDESCRIPTION: CSS variables for customizing tooltip appearance including background color, text color, and other visual properties\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n--vis-tooltip-background-color: rgba(255, 255, 255, 0.95);\n--vis-tooltip-border-color: #e5e9f7;\n--vis-tooltip-text-color: #000;\n--vis-tooltip-shadow-color: rgba(172, 179, 184, 0.35);\n--vis-tooltip-backdrop-filter: none;\n--vis-tooltip-padding: 10px 15px;\n\n/* Dark Theme */\n--vis-dark-tooltip-background-color: rgba(30,30,30, 0.95);\n--vis-dark-tooltip-text-color: #e5e9f7;\n--vis-dark-tooltip-border-color: var(--vis-color-grey);\n--vis-dark-tooltip-shadow-color: rgba(0,0,0, 0.95);\n```\n\n----------------------------------------\n\nTITLE: Basic Text Content in Annotations\nDESCRIPTION: Example of setting basic text content for an annotation item using a simple string.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet items: AnnotationItem[] = [\n  { content: 'Item 1' }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining MapData Type for TopoJSON Map in TypeScript\nDESCRIPTION: Defines the MapData type used for TopoJSON Map data, including points, links, and areas.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/TopoJSONMap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapData = {\n  points: MapPoint[];\n  links: MapLink[];\n  areas: MapArea[];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting X-axis Ticks with Object Data for Ordinal Display\nDESCRIPTION: This code demonstrates how to format axis ticks to display ordinal values from an array of objects where each object contains a category property. This approach is used when data is an array of objects with categorical values.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/tips-and-tricks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tickFormat = (tick: number) => data[tick].category\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Label Appearance with CSS Variables in Unovis\nDESCRIPTION: This CSS snippet defines variables for controlling the appearance of node labels in the Graph component. It includes settings for font size, background color, text color, and font family for both default and dark themes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--vis-graph-node-label-font-size: 9pt;\n--vis-graph-node-label-background: #ffffff;\n--vis-graph-node-label-text-color: #0F1E57;\n--vis-graph-node-sublabel-text-color: #989aa3;\n--vis-graph-node-sublabel-font-size: 8pt;\n--vis-graph-node-label-font-family: var(--vis-font-family);\n\n/* Dark Theme */\n--vis-dark-graph-node-label-background: var(--vis-color-grey);\n--vis-dark-graph-node-label-text-color: #ffffff;\n--vis-dark-graph-node-sublabel-text-color: #989aa3;\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Grouped Bar Chart Styling\nDESCRIPTION: Lists all supported CSS variables for customizing the Grouped Bar chart appearance.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/GroupedBar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--vis-grouped-bar-cursor: default;\n--vis-grouped-bar-fill-color: var(--vis-color-main);\n--vis-grouped-bar-stroke-color: none;\n--vis-grouped-bar-stroke-width: 0px;\n--vis-grouped-bar-hover-stroke-width: 1px;\n--vis-grouped-bar-hover-stroke-color: none;\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Tooltip Button in React\nDESCRIPTION: React component implementation for a toggleable tooltip using BrowserOnly wrapper and Unovis tooltip functionality\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const ButtonTooltip = () => {\n  return (\n  <>\n    <BrowserOnly fallback={<div>Loading...</div>}>\n      {() => {\n        const { Tooltip } = require('@unovis/ts')\n        const { VisXYContainer, VisLine, VisTooltip } = require('@unovis/react')\n        const tooltip = new Tooltip({ container: document.body })\n        let toggled = false\n        function toggleTooltip(e) {\n          if (toggled) {\n            tooltip.hide()\n          } else {\n            tooltip.show(\"👋 I'm a tooltip\", { x: e.clientX, y: e.clientY})\n          }\n          toggled = !toggled\n        }\n        return <button onClick={toggleTooltip}>Toggle</button>\n      }}\n    </BrowserOnly>\n  </>\n)}\n```\n\n----------------------------------------\n\nTITLE: Free Brush CSS Variables Configuration\nDESCRIPTION: CSS variables for styling the Free Brush component, including selection colors, opacity, and handle styles. Includes both light and dark theme variables.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/FreeBrush.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--vis-free-brush-selection-fill-color: #0b1640;\n--vis-free-brush-selection-fill-opacity: 0.4;\n--vis-free-brush-selection-stroke-color: #acb2b9;\n--vis-free-brush-handle-fill-color: #6d778c;\n--vis-free-brush-handle-stroke-color: none;\n \n/* Dark Theme */\n--vis-dark-free-brush-selection-fill-color: #344174;\n--vis-dark-free-brush-selection-stroke-color: #0b1640;\n--vis-dark-free-brush-handle-fill-color: #6d778c;\n```\n\n----------------------------------------\n\nTITLE: Defining Data Accessor Function in TypeScript\nDESCRIPTION: An example of a data accessor function for the Axis component that multiplies the x value by 100. This function is used to transform data before displaying it on the axis.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Axis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = (d: DataRecord) => d.x * 100\n```\n\n----------------------------------------\n\nTITLE: Node Selection Callback Types\nDESCRIPTION: TypeScript type definitions for node selection and multi-node drag callback functions.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nonNodeSelectionBrush: (selectedNodes: GraphNode<N, L>[], event: D3BrushEvent<SVGGElement> | undefined) => void;\nonNodeSelectionDrag: (selectedNodes: GraphNode<N, L>[], event: D3DragEvent<SVGGElement, GraphNode<N, L>, unknown>) => void;\n```\n\n----------------------------------------\n\nTITLE: Example of Hierarchical Chord Diagram Configuration in TypeScript\nDESCRIPTION: Example showing how to configure a hierarchical Chord Diagram with custom accessors for node labels and colors based on group information.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/ChordDiagram.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Node datum\ntype N = {\n  label: string;\n  group: 'A' | 'B' | 'C'\n}\n\nconst colors =  { A: 'lightgreen', B: 'cornflowerblue', C: 'indigo'}\n\n// Configuration\nconst nodeLevels = ['group']\nconst nodeLabel = (d: N | ChordHierarchyNode<N>) => (d as N).label ?? `${d.key}: ${colors[d.key]}`\nconst nodeColor = (d: N | ChordHierarchyNode<N>) => colors[d.key ?? d.group]\nconst nodeLabelAlignment = (d: N | ChordHierarchyNode<N>) => d.height > 0 ? 'along' : 'perpendicular'\n```\n\n----------------------------------------\n\nTITLE: AnnotationSubject Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the AnnotationSubject type, detailing all available properties for configuring annotation subjects.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AnnotationSubject = {\n  x: LengthUnit | (() => LengthUnit);\n  y: LengthUnit | (() => LengthUnit);\n  /** Subject radius */\n  radius?: number;\n  /** Subject fill color */\n  fillColor?: string;\n  /** Subject stroke color */\n  strokeColor?: string;\n  /** Subject stroke-dasharray configuration */\n  strokeDasharray?: string;\n  /** Padding between the subject and the connector line */\n  padding?: number;\n  /** Connector line color */\n  connectorLineColor?: string;\n  /** Connector line stroke-dasharray configuration */\n  connectorLineStrokeDasharray?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-Line Text Content in Annotations\nDESCRIPTION: Example of creating multi-line text content for an annotation item using an array of UnovisText objects.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nitems = [{\n  content: [\n    {\n      text: 'Item 3',\n      fontSize: 24,\n      fontWeight: 600\n    },\n    {\n      text: 'contains multiple text blocks lines',\n      fontFamily: 'cursive',\n      fontSize: 16\n    },\n    {\n      text: 'with custom styles',\n      color: 'green',\n      fontWeight: 'bold'\n    },\n  ],\n}]\n```\n\n----------------------------------------\n\nTITLE: Layer Settings Type Definition for Nested Donut\nDESCRIPTION: TypeScript interface that defines the customization options available for each layer in the Nested Donut component, including width and label alignment properties.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype NestedDonutLayerSettings = {\n  width: number | string; // The layer's width in pixels or css string to be converted to pixels\n  labelAlignment: NestedDonutSegmentLabelAlignment; // Alignment of the layer's segment labels\n}\n```\n\n----------------------------------------\n\nTITLE: UnovisText Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the UnovisText type, detailing all available properties for styling text content in annotations.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnovisText = {\n  // The text content to be displayed.\n  text: string;\n  // The font size of the text in pixels.\n  fontSize: number;\n  // The font family of the text.\n  fontFamily?: string;\n  // The font weight of the text.\n  fontWeight?: number;\n  // The color of the text.\n  color?: string;\n  // The line height scaling factor for the text.\n  lineHeight?: number;\n  // The top margin of the text block in pixels\n  marginTop?: number;\n  // The bottom margin of the text block in pixels\n  marginBottom?: number;\n  // The font width-to-height ratio\n  fontWidthToHeightRatio?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Panel Configuration Type in TypeScript\nDESCRIPTION: TypeScript type definition for configuring graph panels, including properties for styling, labeling, and icon customization.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/networks-and-flows/Graph.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphPanelConfig = {\n  nodes: (string|number)[];\n  label?: string;\n  labelPosition?: Position.Top | Position.Bottom;\n  borderColor?: string;\n  borderWidth?: number;\n  padding?: number;\n  dashedOutline?: boolean;\n  sideIconSymbol?: string;\n  sideIconFontSize?: string;\n  sideIconSymbolColor?: string;\n  sideIconShape?: GraphNodeShape;\n  sideIconShapeSize?: number;\n  sideIconShapeStroke?: string;\n  sideIconCursor?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Point Event Handler Types\nDESCRIPTION: Type definitions for mouse event callback functions on flow source points including click, mouse enter, and mouse leave events.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletFlowMap.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** Flow source point click callback function. Default: `undefined` */\nonSourcePointClick: (f: FlowDatum, x: number, y: number, event: MouseEvent) => void;\n/** Flow source point mouse over callback function. Default: `undefined` */\nonSourcePointMouseEnter: (f: FlowDatum, x: number, y: number, event: MouseEvent) => void;\n/** Flow source point mouse leave callback function. Default: `undefined` */\nonSourcePointMouseLeave: (f: FlowDatum, event: MouseEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Default Fill Pattern CSS Variables\nDESCRIPTION: This CSS code block defines the default fill pattern variables used by Unovis when the 'theme-patterns' class is applied. It maps different pattern types to specific color indices.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/theming.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--vis-pattern-fill0: var(--vis-pattern-fill-stripes-diagonal);\n--vis-pattern-fill1: var(--vis-pattern-fill-dots);\n--vis-pattern-fill2: var(--vis-pattern-fill-stripes-vertical);\n--vis-pattern-fill3: var(--vis-pattern-fill-crosshatch);\n--vis-pattern-fill4: var(--vis-pattern-fill-waves);\n--vis-pattern-fill5: var(--vis-pattern-fill-circles);\n```\n\n----------------------------------------\n\nTITLE: Running React/TypeScript Examples in Unovis Gallery\nDESCRIPTION: Commands for starting and viewing React and TypeScript examples in the Unovis gallery website locally.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Default Layer Settings for Nested Donut\nDESCRIPTION: Default configuration values applied to all layers if not explicitly overridden, showing the standard width and label alignment settings.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  width: 50,\n  labelAlignment: NestedDonutSegmentLabelAlignment.Perpendicular;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Donut Half Angle Range Constants in TypeScript\nDESCRIPTION: How to import predefined angle range constants for creating half donut charts in different orientations from the Unovis library.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/Donut.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DONUT_HALF_ANGLE_RANGE_TOP,\n  DONUT_HALF_ANGLE_RANGE_RIGHT,\n  DONUT_HALF_ANGLE_RANGE_BOTTOM,\n  DONUT_HALF_ANGLE_RANGE_LEFT\n} from '@unovis/ts'\n```\n\n----------------------------------------\n\nTITLE: Defining Brush Props Function in JavaScript\nDESCRIPTION: Function that generates properties configuration for the Brush component examples. It creates a standard props object with configurable components and axis display.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Brush.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const brushProps = (showAxis = true) => ({\n    name: \"Brush\",\n    height: 75,\n    components: [{\n        name: showAxis ? 'StackedBar' : 'Area',\n        props: {\n          x: d => d.x,\n          y: d => d.y,\n        },\n        key: \"components\",\n      },\n    ].concat(showAxis ? axis('x') : []),\n    data: generateDataRecords(30)\n})\n```\n\n----------------------------------------\n\nTITLE: Positioning Annotations with Various Units\nDESCRIPTION: Example of positioning annotation items using different units (pixels, percentages) and alignment properties.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Annotations.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst items= [\n  {\n    content: 'Item A',\n    x: 0,\n    y: 10,\n    subject: { x: 50, y: 50 }\n  },\n  {\n    content: 'Item B',\n    x: '150px',\n    y: '20px',\n    textAlign: 'right',\n    subject: { x: '100px', y: '60px' }\n  },\n  {\n    content: 'Item C',\n    x: '50%',\n    y: '100%',\n    textAlign: 'center',\n    verticalAlign: 'bottom',\n    subject: { x: '50%', y: '70%' },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Segment Datum and Segment Type Definitions\nDESCRIPTION: Type definitions for the segment data structure used by the Nested Donut component for customization, showing how segments are represented internally with root, key, depth, and value properties.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype NestedDonutSegmentDatum<Datum> = {\n  key: Datum[keyof Datum] // the category based on the current layer\n  root: Datum[keyof Datum] // the highest parent node\n}\n\ntype NestedDonutSegment<Datum> = {\n  data: NestedDonutSegmentDatum<Datum>;\n  depth: number;\n  height: number;\n  value: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NodeDatum and LinkDatum Interfaces in TypeScript\nDESCRIPTION: These interfaces define the basic structure for nodes and links in graph data models. NodeDatum includes an optional id property, while LinkDatum includes id, source, and target properties for connecting nodes.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NodeDatum {\n  id?: string;\n}\n\nexport interface LinkDatum {\n  id?: number | string;\n  source: number | string | NodeDatum;\n  target: number | string | NodeDatum;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Scatter Plot CSS Variables\nDESCRIPTION: Complete list of supported CSS variables for the Scatter component with their default values, allowing for extensive styling customization.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/xy-charts/Scatter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--vis-scatter-cursor: default;\n--vis-scatter-fill-color: var(--vis-color-main);\n--vis-scatter-stroke-color: 'none';\n--vis-scatter-stroke-width: 1px;\n--vis-scatter-fill-opacity: 1;\n--vis-scatter-stroke-opacity: 1;\n--vis-scatter-hover-stroke-width: 2px;\n \n--vis-scatter-point-label-text-color-dark: #5b5f6d;\n--vis-scatter-point-label-text-color-light: #fff;\n--vis-scatter-point-label-text-font-weight: 500;\n--vis-scatter-point-label-text-font-size: 12px;\n--vis-scatter-point-label-text-font-family\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tooltip Function Generator\nDESCRIPTION: Utility function that generates tooltip toggle functionality with configurable indentation\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/auxiliary/Tooltip.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tooltipFn = (indent = 1) => {\n  const t = ' '.repeat(indent * 2)\n  return `\\n${t.substring(2)}${['function toggleTooltip() {',\n    'if (toggled) {',\n    `${t}tooltip.hide()`,\n    '} else {',\n    `${t}tooltip.show(\"👋 I\\'m a tooltip\", { x: 0, y: 0 })`,\n    '}',\n    'toggled = !toggled',\n  ].join(`\\n${t}`)}\\n${t.substring(2)}}`\n```\n\n----------------------------------------\n\nTITLE: XY Component Template Implementation in TypeScript\nDESCRIPTION: Base template for creating XY-based visualization components in Unovis, extending XYComponentCore with configuration and styling support.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Core\nimport { XYComponentCore } from 'core/xy-component'\n\nimport { Config, ConfigInterface } from './config'\nimport * as s from './style'\n\nexport class YourComponent<Datum> extends XYComponentCore<Datum, Config<Datum>, ConfigInterface<Datum>> {\n  static selectors = s\n  static cssVariables = s.variables\n  config: Config<Datum> = new Config()\n  events = {}\n\n  constructor (config?: ConfigInterface<Datum>) {\n    super()\n    if (config) this.config.init(config)\n\n    this.g.attr('class', s.root)\n  }\n\n  _render (customDuration?: number): void {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Circle Update Usage Example\nDESCRIPTION: Example showing how to use a modular update function in a component's render method.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst circlesMerged = circles.merge(circlesEnter)\n  .call(updateCircle, this.config, duration)\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Nested Donut Styling\nDESCRIPTION: List of CSS custom properties (variables) that can be used to style the Nested Donut component, including font settings, colors, and dimensions for various elements.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n/* Undefined by default to allow proper fallback to var(--vis-font-family) */\n--vis-nested-donut-font-family: undefined;\n\n/* Background */\n--vis-nested-donut-background-color: #e7e9f3\n\n/* Central label */\n--vis-nested-donut-central-label-font-size: 16px;\n--vis-nested-donut-central-label-font-weight: 600;\n--vis-nested-donut-central-label-text-color: #5b5f6d;\n\n/* Central sub-label */\n--vis-nested-donut-central-sublabel-font-size: 12px;\n--vis-nested-donut-central-sublabel-font-weight: 500;\n--vis-nested-donut-central-sublabel-text-color: #5b5f6d;\n\n/* Segments */\n--vis-nested-donut-segment-stroke-width: 1px;\n--vis-nested-donut-segment-stroke-color: var(--vis-nested-donut-background-color);\n--vis-nested-donut-segment-label-text-color-light: #5b5f6d;\n--vis-nested-donut-segment-label-text-color-dark: #fff;\n--vis-nested-donut-segment-label-font-size: 1em;\n\n/* Dark theme */\n--vis-dark-nested-donut-background-color: #18160c;\n--vis-dark-nested-donut-central-label-text-color: #fff;\n--vis-dark-nested-donut-central-sublabel-text-color: #fff;\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Unovis Components in TypeScript\nDESCRIPTION: Shows how to import individual Unovis components in a TypeScript application to potentially reduce bundle size, though tree-shaking makes this optional.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/quick-start.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XYContainer } from '@unovis/ts/containers'\nimport { Line } from '@unovis/ts/components'\n```\n\n----------------------------------------\n\nTITLE: Setting up Component Styling with CSS Variables\nDESCRIPTION: Template for creating a component's style file with CSS-in-JS using emotion. It defines CSS selectors, variables, and handles dark theme support through the injectGlobalCssVariables utility.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '@emotion/css'\nimport { getCssVarNames, injectGlobalCssVariables } from 'utils/style'\n\nexport const root = css`\n label: component-name;\n`\nconst cssVarDefaults = {\n  /* Mapping of CSS variables and their default values go here */\n}\n\nexport const variables = getCssVarNames(cssVarDefaults)\ninjectGlobaleCSSVariables(cssVarDefault, root)\n\nexport const selectorName = css`\n  label: selector-name;\n  /* Style declarations for selector-name go here */\n`\n```\n\n----------------------------------------\n\nTITLE: LeafletFlowMap Data Type Definition\nDESCRIPTION: Type definition for the expected data structure of LeafletFlowMap component with points and flows arrays.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletFlowMap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype LeafletMapData = {\n  points: MapPointRecord[];\n  flows: MapFlowRecord[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Configuration Structure in TypeScript\nDESCRIPTION: Template for implementing a component's configuration interface and class. The interface defines available configuration properties with JSDoc comments, while the Config class implements default values.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConfigInterface {\n  /** Property JSDoc. Default value: `` */\n}\nexport class Config implements ConfigInterface {\n  // Default values\n}\n```\n\n----------------------------------------\n\nTITLE: Circle Module Update Implementation\nDESCRIPTION: Example of a modular approach to updating circle elements in a visualization component.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function updateCircle<Datum> (\n  selection: Selection<SVGCircleElement, Datum, SVGGElement, unknown>,\n  config: Config<Datum>,\n  duration?: number,\n): void {\n  /** update logic goes here */\n}\n```\n\n----------------------------------------\n\nTITLE: MapFlowRecord Type Definition\nDESCRIPTION: Type definition for flow records specifying source and target coordinates for particle animations.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/maps/LeafletFlowMap.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapFlowRecord = {\n  sourceLongitude: number;\n  sourceLatitude: number;\n  targetLongitude: number;\n  targetLatitude: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Donut Component Styling\nDESCRIPTION: Practical example showing how CSS variables and selectors are applied in the Donut component's style file, including proper naming conventions and dark theme handling.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const root = css`\n  label: donut-component;\n`\n\nexport const cssVarDefaults = {\n  '--vis-donut-background-color': '#E7E9F3',\n  '--vis-dark-donut-background-color': '#18160C',\n}\n\nexport const variables = getCssVarNames(cssVarDefaults)\ninjectGlobaleCSSVariables(cssVarDefault, root)\n\nexport const background = css`\n  label: background;\n  fill: var(${variables.donutBackgroundColor});\n`\n```\n\n----------------------------------------\n\nTITLE: React Example Component Template\nDESCRIPTION: Basic template for creating test examples in the development environment using React.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\n\n/* Title and subtitle for the sidebar */\nexport const title = ''\nexport const subTitle = ''\n\nexport const component = (): JSX.Element => {\n  /* Your test component here */\n}\n```\n\n----------------------------------------\n\nTITLE: XY Container Margin Configuration\nDESCRIPTION: Example of setting margins for the XY Container\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/XY_Container.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst margin = { left: 100, right: 100 }\n```\n\n----------------------------------------\n\nTITLE: Core SVG Component Template Implementation\nDESCRIPTION: Base template for creating SVG-based visualization components, extending ComponentCore with basic configuration and styling.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Core\nimport { ComponentCore } from 'core/component'\n\nimport { Config, ConfigInterface } from './config'\nimport * as s from './style'\n\nexport class YourComponent<Datum> extends ComponentCore<Datum, Config<Datum>, ConfigInterface<Datum>> {\n  static selectors = s\n  static cssVariables = s.variables\n  config: Config<Datum> = new Config()\n  events = {}\n\n  constructor (config?: ConfigInterface<Datum>) {\n    super()\n    if (config) this.config.init(config)\n    this.g.attr('class', s.root)\n  }\n\n  _render (customDuration?: number): void {\n    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Svelte Examples in Unovis Gallery\nDESCRIPTION: Steps to test Svelte examples in the Unovis gallery, including updating the imports array and running the development server.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/svelte\nnpm run gallery\n```\n\n----------------------------------------\n\nTITLE: XY Container Padding Configuration\nDESCRIPTION: Example of setting padding for the XY Container\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/containers/XY_Container.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst padding = { left: 100, right: 100 }\n```\n\n----------------------------------------\n\nTITLE: Diagramming Unovis Container Classes with Mermaid\nDESCRIPTION: This Mermaid class diagram shows the relationships between different container classes in Unovis. It illustrates the inheritance structure and the configurations used by each container type, including SingleContainer and XYContainer.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/architecture.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class ContainerCore {\n    svg: Selection~SVGSVGElement~\n    element: SVGSVGElement;\n    config: ContainerConfigInterface;\n    constructor(element: HTMLElement);\n    render(duration: number): void;\n  }\n  class ContainerConfigInterface {\n    width: number;\n    height: number;\n    margin; Spacing;\n    padding: Spacing;\n  }\n  class SingleContainer~Data~ {\n    config: SingleContainerConfigInterface~Data~\n    data: Data;\n  }\n  class SingleContainerConfigInterface~Data~ {\n    component: ComponentCore~Data~;\n    tooltip?: Tooltip;\n    annotations?: Annotations;\n  }\n  class XYContainer~Datum~ {\n    config: XYContainerConfigInterface<Datum>;\n    datamodel: SeriesDataModel~Datum~;\n  }\n   class XYContainerConfigInterface~Datum~ {\n    components: XYComponentCore~Datum~[];\n    crosshair?: Crosshair<Datum>;\n    xAxis?: Axis<Datum>;\n    yAxis: Axis<Datum>;\n    annotations?: Annotations;\n    tooltip?: Tooltip;\n    xScale: Scale;\n    yScale: Scale;\n  }\n  ContainerCore -- ContainerConfigInterface : uses\n  SingleContainer -- SingleContainerConfigInterface : uses\n  ContainerCore <|-- SingleContainer : extends\n  ContainerCore <|-- XYContainer : extends\n  ContainerConfigInterface <|-- SingleContainerConfigInterface: extends\n  ContainerConfigInterface <|-- XYContainerConfigInterface: extends\n  XYContainer -- XYContainerConfigInterface : uses\n```\n\n----------------------------------------\n\nTITLE: Adding Angular Component Selector for Unovis Gallery\nDESCRIPTION: Angular component decorator configuration for including example components in the gallery application template.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n@Component({\n  selector: 'app-component',\n  template: `\n    ...\n    <!-- your angular selector -->\n  `\n})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unovis Component Classes with Mermaid\nDESCRIPTION: This Mermaid class diagram depicts the relationships between different component classes in Unovis. It shows the inheritance structure and the configurations used by each component type, including XYComponent and its relationship to ComponentCore.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/architecture.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class ComponentCore~Data~ {\n    g: Selection~SVGGElement|HTMLElement~\n    config: ConfigInterface;\n    static selectors;\n    datamodel: CoreDataModel~Data~;\n    constructor(type = ComponentType.SVG);\n    render(duration: number): void;\n    _bindEvents(): void;\n  }\n  class ComponentConfigInterface {\n    attributes: Map;\n    events: &lcub; [selector: string]: Events &rcub;\n    duration: number;\n  }\n  class XYComponentConfigInterface~Datum~ {\n    x: NumericAccessor~Datum~;\n    y: NumericAccessor~Datum~;\n    xScale: ContinousScale;\n    yScale: ContinuousScale;\n    excludeFromDomainCalculation: boolean;\n  }\n  class XYComponent~Datum~ {\n    g: Selection~SVGGElement~;\n    config: XYConfigInterface;\n    datamodel: SeriesDataModel~Datum~;\n    stacked: boolean;\n    getDataExtent(): number[];\n  }\n  ComponentCore --> ComponentConfigInterface: uses\n  ComponentCore <|-- XYComponent: extends\n  XYComponent --> XYComponentConfigInterface: uses\n  ComponentConfigInterface <|-- XYComponentConfigInterface: extends\n```\n\n----------------------------------------\n\nTITLE: Visualizing Unovis Data Models with Mermaid\nDESCRIPTION: This Mermaid class diagram illustrates the different data models used in Unovis, including SeriesDataModel, GraphDataModel, and MapDataModel. It shows how these models extend from the CoreDataModel and their specific properties.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/architecture.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n   class CoreDataModel~T~ {\n    data: T;\n    get data(): typeof data\n    set data(data: T): void;\n    }\n    class SeriesDataModel~T~ {\n        data: T[];\n    }\n    class GraphDataModel~N,L~ {\n      nodes: N[];\n      links: L[];\n      get data(): &lcub; nodes, links &rcub;\n    }\n    class MapDataModel~Area,Points,Link~ {\n      areas?: Area[];\n      points?: Points[];\n      links?: Link[];\n      get data(): &lcub; areas, points, links &rcub;\n    }\n    CoreDataModel <|-- SeriesDataModel: extends\n    CoreDataModel <|-- GraphDataModel: extends\n    CoreDataModel <|-- MapDataModel: extends\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis via npm\nDESCRIPTION: Command to install the main Unovis package (@unovis/ts) using npm.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/ts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts\n```\n\n----------------------------------------\n\nTITLE: Visualizing Unovis Package Structure with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the structure of the Unovis packages, showing the relationships between the core library, UI framework wrappers, and other components. It provides a visual representation of the package organization.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/architecture.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"theme\": \"neutral\"  } }%%\ngraph LR\n  subgraph root[Root directory]\n    style packages stroke:#333,stroke-width:2px;\n    style wrappers fill:none;\n    subgraph packages[\"exports @unovis/**\"]\n    direction LR\n      subgraph core[Core library]\n        ts[packages/ts]\n      end\n      subgraph wrappers[UI Framework Wrappers]\n        direction TB\n        angular[packages/angular]\n        react[packages/react]\n        svelte[packages/svelte]\n        vue[packages/vue]\n      end\n    end\n    subgraph misc[ ]\n      direction LR\n      style misc stroke: none;\n      subgraph internal[Internal directories]\n        direction LR\n        dev[packages/dev]\n        shared[packages/shared]\n      end\n      subgraph site[Website content]\n        website[packages/website]\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Displaying Unovis File Structure in YAML\nDESCRIPTION: This YAML snippet shows the file structure of the Unovis repository, outlining the contents of the 'packages' directory. It includes various framework-specific exports and other essential directories.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/architecture.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npackages\n├── angular # exports @unovis/angular \n├── dev # dev demo app\n├── react # exports @unovis/react\n├── shared # shared code and integrations\n├── solid # exports @unovis/solid\n├── svelte # exports @unovis/svelte\n├── ts # core library; exports @unovis/ts\n├── vue # UI framework wrapper\n├── website # unovis.dev website\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis for React\nDESCRIPTION: NPM installation command for Unovis with React framework dependencies.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/react\n```\n\n----------------------------------------\n\nTITLE: Example Commit Messages for Unovis Project\nDESCRIPTION: Examples of properly formatted commit messages for different types of contributions to the Unovis project, including core library changes, wrapper modifications, and website updates.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/pull-requests.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"Core | Utils: Refactoring shape rendering helpers\"\n\"Component | Timeline: Fixing enter transition bug\"\n\"Dev | Build: Upgrading rollup dependency\"\n\"React | Autogen: Tweaking component lifecycle logic\"\n\"Release: 1.4.0\"\n\"Website | Gallery: Adding a new example\"\n\"Website | Docs | Axis: Updating some property description\"\n```\n\n----------------------------------------\n\nTITLE: Summarizing Unovis Architecture with Mermaid\nDESCRIPTION: This Mermaid class diagram provides a comprehensive summary of the Unovis architecture, showing the relationships between containers, components, and their specialized variants. It illustrates the inheritance structure and composition of different elements in the library.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/architecture.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class ContainerCore {\n    svg: Selection~SVGSVGElement~;\n    config: ContainerConfigInterface;\n    constructor(element: HTMLElement);\n    render(duration: number): void;\n  }\n  class SingleContainer~Data~ {\n    component: ComponentCore~Data~;\n    config: SingleContainerConfigInterface;\n    data: CoreDataModel~Data~;\n  }\n  class ComponentCore~Datum,ConfigInterface~ {\n      g: Selection~SVGGElement~;\n      datamodel: CoreDataModel~Datum~;\n      config: ConfigInterface;\n  }\n  class SVGComponent {\n      g: Selection~SVGGElement~;\n  }\n  class HTMLComponent {\n      g: Selection~HTMLElement~;\n  }\n  class XYContainer~Datum~ {\n    components: XYComponent[];\n    datamodel: SeriesDataModel~Datum~;\n  }\n  class XYComponent~Datum,ConfigInterface~ {\n      datamodel: SeriesDataModel~Datum~;\n      config: XYComponentConfigInterface;\n      xScale: ContinuousScale;\n      yScale: ContinuousScale;\n  }\n\n  ContainerCore <|-- SingleContainer: extends\n  ContainerCore <|-- XYContainer: extends\n  XYContainer --* XYComponent: contains\n  SingleContainer --* SVGComponent: contains\n\n  ComponentCore <.. SVGComponent: instance of\n  ComponentCore <.. HTMLComponent: instance of\n\n  SVGComponent <|-- XYComponent: extends\n```\n\n----------------------------------------\n\nTITLE: Installing Unovis React Package via NPM\nDESCRIPTION: Command to install the Unovis TypeScript core package and React components using npm.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -P @unovis/ts @unovis/react\n```\n\n----------------------------------------\n\nTITLE: Rebasing Branch on Main in Git\nDESCRIPTION: Commands for rebasing your feature branch on the main branch before creating a pull request. This helps avoid merge conflicts and keeps the commit history clean.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/pull-requests.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main && git pull\ngit checkout <your-branch> && git rebase main\ngit push --force\n```\n\n----------------------------------------\n\nTITLE: HTML Component Template Implementation\nDESCRIPTION: Base template for creating HTML-based visualization components with container element handling and HTML-specific configuration.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/adding-a-component.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Core\nimport { ComponentCore } from 'core/component'\n\n// Types\nimport { ComponentType } from 'types/component'\n\nimport { Config, ConfigInterface } from './config'\nimport * as s from './style'\n\nexport class YourComponent<Datum> extends ComponentCore<Datum, Config<Datum>, ConfigInterface<Datum>> {\n  static selectors = s\n  static cssVariables = s.variables\n  config: Config<Datum> = new Config()\n  events = {}\n  type = ComponentType.HTML\n\n  protected _container: HTMLElement\n\n  constructor (container: HTMLElement, config?: ConfigInterface<Datum>, data?: Datum[]) {\n    super(this.type)\n    if (config) this.config.init(config)\n    this._container = container\n    this.g.attr('class', s.root)\n  }\n\n  _render (customDuration?: number): void {\n    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format in Git\nDESCRIPTION: The standard format for commit messages in the Unovis project. Messages should follow a specific pattern with type, scope, and subject.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/pull-requests.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"<type> | <scope>: <subject>\"\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Table\nDESCRIPTION: Table displaying npm package dependencies with their license information, versions, and authors. Key packages include TypeScript, Vite, SolidJS, and various build plugins.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/solid/licences.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nname                 license period  license type  installed version  author\n----                 --------------  ------------  -----------------  ------\neslint-plugin-solid  perpetual       MIT           0.13.2             Josh Wilson <joshwilsonvu@gmail.com>\nrollup               perpetual       MIT           4.38.0             Rich Harris\nsolid-js             perpetual       MIT           1.9.3              Ryan Carniato\ntsx                  perpetual       MIT           4.19.2             Hiroki Osame hiroki.osame@gmail.com\ntypescript           perpetual       Apache-2.0    5.6.3              Microsoft Corp.\nvite                 perpetual       MIT           6.2.4              Evan You\nvite-plugin-dts      perpetual       MIT           3.6.0              qmhc\nvite-plugin-solid    perpetual       MIT           2.10.2             Alexandre Mouton-Brady <amoutonbrady@gmail.com>\nsolid-js             perpetual       MIT           1.9.3              Ryan Carniato\n```\n\n----------------------------------------\n\nTITLE: Running Angular Examples in Unovis Gallery\nDESCRIPTION: Command for running the Angular gallery development server after configuring the required modules and components.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/angular\nnpm run gallery\n```\n\n----------------------------------------\n\nTITLE: Running Solid Examples in Unovis Gallery\nDESCRIPTION: Steps to test Solid framework examples in the Unovis gallery, including updating the imports array and starting the development server.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/solid\nnpm run gallery\n```\n\n----------------------------------------\n\nTITLE: Version Number Reference\nDESCRIPTION: Simple version number reference for Unovis 1.5 release\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/releases/1.5.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.5\n```\n\n----------------------------------------\n\nTITLE: Importing Contribution Guidelines in MDX\nDESCRIPTION: A markdown file with frontmatter configuration that imports and displays the project's contribution guidelines from CONTRIBUTING.md using MDX syntax.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Contributing\nsidebar_label: Overview\nsidebar_position: 1\nhide_title: true\n---\n\nimport ContributionDoc from '../../../CONTRIBUTING.md'\n\n<ContributionDoc/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Example Index File in React for Unovis Gallery\nDESCRIPTION: Template for the index.tsx file that configures how the example appears in the gallery. Includes component rendering, metadata, and imports of code snippets for all supported frameworks.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/* eslint-disable import/no-unresolved, import/no-webpack-loader-syntax, @typescript-eslint/no-var-requires */\nimport React from 'react'\nimport BrowserOnly from '@docusaurus/BrowserOnly'\nimport { Example } from '@site/src/types/example'\n\n// highlight-next-line\nconst pathname = ''\nconst example: Example = {\n  component: () => <BrowserOnly>{() => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const Component = require(`./${pathname}.tsx`).default\n    return <Component />\n  }}</BrowserOnly>,\n  pathname,\n  // highlight-next-line\n  title: '',\n  // highlight-next-line\n  description: <div></div>,\n  codeReact: require(`!!raw-loader!./${pathname}.tsx`).default,\n  codeTs: require(`!!raw-loader!./${pathname}.ts`).default,\n  codeAngular: {\n    html: require(`!!raw-loader!./${pathname}.component.html`).default,\n    component: require(`!!raw-loader!./${pathname}.component.ts`).default,\n    module: require(`!!raw-loader!./${pathname}.module.ts`).default,\n  },\n  codeSvelte: require(`!!raw-loader!./${pathname}.svelte`).default,\n  data: require('!!raw-loader!./data').default,\n  preview: require(`../_previews/${pathname}.png`).default,\n  previewDark: require(`../_previews/${pathname}-dark.png`).default,\n}\n\nexport default example\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Dependencies Table with License Information\nDESCRIPTION: A formatted table showing package dependencies with license information, versions, and authors. The table includes two packages: @angular/platform-browser from Angular and typescript from Microsoft, both with perpetual licenses.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/shared/licences.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nname                       license period  license type  installed version  author\n----                       --------------  ------------  -----------------  ------\n@angular/platform-browser  perpetual       MIT           12.2.17            angular\ntypescript                 perpetual       Apache-2.0    4.2.4              Microsoft Corp.\n```\n\n----------------------------------------\n\nTITLE: Running Vue Examples in Unovis Gallery\nDESCRIPTION: Commands for testing Vue examples in the Unovis gallery after adding the example to the imports array in App.vue.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/contributing/guides/gallery-examples.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/vue\nnpm run gallery\n```\n\n----------------------------------------\n\nTITLE: Segment Label Customization Example\nDESCRIPTION: Example showing how to customize segment labels and their colors using accessor functions that transform the default key values and apply group-based coloring.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/misc/NestedDonut.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst segmentColor = '#ddd'\nconst segmentLabel = (d: Datum) => {\n  switch (d.data.key) {\n    case 'A':\n      return 'Alpha'\n    case 'B':\n      return 'Beta'\n    case 'C':\n      return 'Charlie'\n      return d.data.key\n  }\n}\nconst segmentLabelColor = (d: Datum) => groupColors[d.data.root]\n```\n\n----------------------------------------\n\nTITLE: Converting TypeScript to JavaScript Helper Function\nDESCRIPTION: A helper function that removes TypeScript type annotations and declarations from code snippets. This function is used to transform TypeScript examples into JavaScript-compatible syntax.\nSOURCE: https://github.com/f5/unovis/blob/main/packages/website/docs/guides/js-usage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const removeTypes = (component) => component.props.children\n   .replace(/type D.*\\n\\s*/gm, '')\n    .replace(': JSX.Element ', '')\n    .replace(': DataRecord[]', '')\n    .replace('<DataRecord[]>', '')\n    .replace('<DataRecord>', '')\n```"
  }
]