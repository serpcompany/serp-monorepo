[
  {
    "owner": "chinosam",
    "repo": "sahomedb",
    "content": "TITLE: Initializing SahomeDB Collection and Performing Vector Search - Rust\nDESCRIPTION: This Rust example shows how to use SahomeDB to store and search vector data. After importing the SahomeDB prelude, it creates uniform vectors, randomizes records for demonstration, opens or creates a disk-based database, and initializes a collection. It then performs a nearest neighbor vector search within the collection and prints the result. Dependencies include the sahomedb crate and Rust's standard library, and the snippet expects uniform vector dimension and that the provided database path is writable. Input consists of randomly generated vectors; output is the ID of the nearest record.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/readme.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse sahomedb::prelude::*;\n\nfn main() {\n    // Vector dimension must be uniform.\n    let dimension = 128;\n\n    // Replace with your own data.\n    let records = Record::many_random(dimension, 100);\n    let query = Vector::random(dimension);\n\n    // Open the database and create a collection.\n    let mut db = Database::open(\"data/readme\").unwrap();\n    let collection =\n        db.create_collection(\"vectors\", None, Some(&records)).unwrap();\n\n    // Search for the nearest neighbors.\n    let result = collection.search(&query, 5).unwrap();\n    println!(\"Nearest ID: {}\", result[0].id);\n}\n```\n\n----------------------------------------\n\nTITLE: Storing and Extracting Vector Metadata with SahomeDB - Rust\nDESCRIPTION: This Rust snippet illustrates how to attach and retrieve metadata to/from vector records using SahomeDB. It demonstrates inserting string metadata into a Record and extracting it by matching the Metadata enum. The example requires the sahomedb crate and operates on a single randomly generated vector and text data. Inputs include a 128-dimensional vector and a text string; the output is the metadata value printed to stdout. It is limited to text metadata for demonstration.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/readme.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse sahomedb::prelude::*;\n\nfn main() {\n    // Inserting a metadata value into a record.\n    let data: &str = \"This is an example.\";\n    let vector = Vector::random(128);\n    let record = Record::new(&vector, &data.into());\n\n    // Extracting the metadata value.\n    let metadata = record.data.clone();\n    let data = match metadata {\n        Metadata::Text(value) => value,\n        _ => panic!(\"Data is not a text.\"),\n    };\n\n    println!(\"{}\", data);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SahomeDB Dependency using Cargo - Bash\nDESCRIPTION: This snippet demonstrates how to add the SahomeDB crate to your Rust project's dependencies using Cargo. It requires Cargo to be installed in your system. The command fetches the latest published SahomeDB version and adds it to the Cargo.toml file. No additional parameters are required.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add sahomedb\n```\n\n----------------------------------------\n\nTITLE: Running SahomeDB Benchmarks using Cargo - Bash\nDESCRIPTION: This bash command is used to execute SahomeDB's benchmarking suite, which measures vector search performance. It requires that Criterion and SahomeDB dependencies be set up in your Rust project. The command automatically fetches the dataset and runs all configured benchmarks, providing performance metrics as output.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Running SahomeDB Tests and Benchmarks in Bash\nDESCRIPTION: Commands for setting up the SahomeDB development environment, including running tests to verify functionality and benchmarks to measure performance. These commands should be executed in the root directory of the repository after cloning.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/docs/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Measuring SahomeDB Memory Usage via Rust Example Script - Bash\nDESCRIPTION: This snippet shows how to run the memory usage measurement script provided in the examples directory of a SahomeDB project. It uses Cargo's example-running functionality and requires that the example file (measure-memory.rs) exists and is properly configured. The command measures and prints the process memory usage during execution; parameters can be tweaked within the script as needed.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --example measure-memory\n```\n\n----------------------------------------\n\nTITLE: Importing SahomeDB Prelude in Rust\nDESCRIPTION: Demonstrates how to import the prelude module in SahomeDB v0.2.1, which re-exports commonly used types and traits for easier library usage.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/docs/changelog.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nuse sahomedb::prelude::*\n```\n\n----------------------------------------\n\nTITLE: Accessing Metadata Enum in Rust\nDESCRIPTION: Shows how to access the Metadata enum publicly in SahomeDB v0.2.1. This change allows users to use match statements to extract data from it.\nSOURCE: https://github.com/chinosam/sahomedb/blob/main/docs/changelog.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsahomedb::metadata::Metadata\n```"
  }
]