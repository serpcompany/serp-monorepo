[
  {
    "owner": "beehiiv",
    "repo": "typescript-sdk",
    "content": "TITLE: Initializing and Using the Beehiiv TypeScript Client\nDESCRIPTION: Illustrates how to import the `BeehiivClient`, instantiate it with a required API token, and make an asynchronous API call (e.g., `automationJourneys.create`). Ensure you replace 'YOUR_TOKEN' with your actual Beehiiv API key. The example shows creating an automation journey entry with specific parameters.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BeehiivClient } from \"@beehiiv/sdk\";\n\nconst client = new BeehiivClient({ token: \"YOUR_TOKEN\" });\nawait client.automationJourneys.create(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"aut_00000000-0000-0000-0000-000000000000\",\n    {\n        email: \"test@example.com\",\n        doubleOptOverride: \"on\",\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors from the Beehiiv TypeScript SDK\nDESCRIPTION: Provides an example of using a try-catch block to gracefully handle potential errors thrown by the SDK. Specifically, it shows how to catch instances of `BeehiivError`, which are thrown for non-success API responses (4xx or 5xx status codes), and access error details like `statusCode`, `message`, and `body`.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BeehiivError } from \"@beehiiv/sdk\";\n\ntry {\n    await client.automationJourneys.create(...);\n} catch (err) {\n    if (err instanceof BeehiivError) {\n        console.log(err.statusCode);\n        console.log(err.message);\n        console.log(err.body);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Beehiiv SDK Request/Response Types\nDESCRIPTION: Demonstrates importing TypeScript interfaces for request and response objects directly from the SDK using the `Beehiiv` namespace. This enables strong typing for request payloads and expected response structures, improving code safety and developer experience.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Beehiiv } from \"@beehiiv/sdk\";\n\nconst request: Beehiiv.AutomationJourneysCreateRequest = {\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Aborting Beehiiv SDK Requests in TypeScript\nDESCRIPTION: Demonstrates how to use the standard `AbortController` pattern to cancel an in-progress API request made through the SDK. An `AbortSignal` from the controller is passed in the request options, and calling `controller.abort()` will signal the SDK to terminate the request.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst controller = new AbortController();\nconst response = await client.automationJourneys.create(..., {\n    abortSignal: controller.signal\n});\ncontroller.abort(); // aborts the request\n```\n\n----------------------------------------\n\nTITLE: Configuring Request-Level Timeouts in TypeScript SDK\nDESCRIPTION: Illustrates how to customize the request timeout duration for a specific API call, overriding the SDK's default (60 seconds). The `timeoutInSeconds` option allows setting a custom timeout period (e.g., 30 seconds) for the request.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.automationJourneys.create(..., {\n    timeoutInSeconds: 30 // override timeout to 30s\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Request-Level Retries in TypeScript SDK\nDESCRIPTION: Shows how to override the default automatic retry behavior for a specific API request. By setting the `maxRetries` option (e.g., to 0 to disable retries), you can control the number of retry attempts. The SDK automatically retries requests returning specific HTTP status codes (408, 409, 429, 5xx) up to a default limit (usually 2).\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.automationJourneys.create(..., {\n    maxRetries: 0 // override maxRetries at the request level\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the Beehiiv SDK via npm\nDESCRIPTION: Shows the command to install the `@beehiiv/sdk` package using the Node Package Manager (npm). This command adds the SDK as a dependency to your project, enabling its use within your Node.js or compatible environment.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -s @beehiiv/sdk\n```\n\n----------------------------------------\n\nTITLE: Creating Automation Journey Enrollment via API (TypeScript)\nDESCRIPTION: Adds an existing subscriber to an automation flow using the API. Requires an automation with an active 'Add by API' trigger. The subscriber is identified by email or subscription ID via the `request` body and immediately enrolled if found. Use the Create Subscription endpoint for enrolling new subscribers.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.automationJourneys.create(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"aut_00000000-0000-0000-0000-000000000000\",\n    {\n        email: \"test@example.com\",\n        doubleOptOverride: \"on\",\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: List Subscriptions with Beehiiv TypeScript SDK\nDESCRIPTION: This code snippet shows how to retrieve all subscriptions belonging to a specific publication using the Beehiiv TypeScript SDK.  It accepts the publicationId as a parameter. The function returns a Promise that resolves to a list of subscriptions. It also demonstrates how to filter subscriptions by email.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.subscriptions.index(\"pub_00000000-0000-0000-0000-000000000000\", {\n    email: \"clark@dailyplanet.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieve a subscription by subscription ID with getById\nDESCRIPTION: Fetches a specific subscription within a publication using its subscription ID. Use getById method of the subscriptions client; the method returns a SubscriptionResponse. The API requires publication and subscription IDs as parameters.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptions.getById(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"sub_00000000-0000-0000-0000-000000000000\"\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieve subscription by email using getByEmail method\nDESCRIPTION: Fetches a subscription associated with a specific email address within a publication. Requires URL encoding of the email parameter. Utilizes the getByEmail method of the subscriptions client, returning a SubscriptionResponse. Dependencies include the client instance and appropriate request parameters.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptions.getByEmail(\"pub_00000000-0000-0000-0000-000000000000\", \"work@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Create Subscription with Beehiiv TypeScript SDK\nDESCRIPTION: This code demonstrates how to create new subscriptions for a publication using the Beehiiv TypeScript SDK. It takes the publicationId and an object with subscription details as parameters. It allows specifying email, reactivation preferences, welcome email sending, UTM parameters, referring site, custom fields, and a Stripe customer ID.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.subscriptions.create(\"pub_00000000-0000-0000-0000-000000000000\", {\n    email: \"bruce.wayne@wayneenterprise.com\",\n    reactivateExisting: false,\n    sendWelcomeEmail: false,\n    utmSource: \"WayneEnterprise\",\n    utmMedium: \"organic\",\n    utmCampaign: \"fall_2022_promotion\",\n    referringSite: \"www.wayneenterprise.com/blog\",\n    customFields: [\n        {\n            name: \"First Name\",\n            value: \"Bruce\",\n        },\n        {\n            name: \"Last Name\",\n            value: \"Wayne\",\n        },\n    ],\n    stripeCustomerId: \"stripe_customer_id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Posts Beehiiv TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all posts associated with a specific publication using the `client.posts.index` method. It requires the publication ID as a parameter and returns a response containing the list of posts.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.posts.index(\"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Retrieve Post with Beehiiv TypeScript SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a single post belonging to a specific publication using the Beehiiv TypeScript SDK. It requires a postId and publicationId as parameters to identify the post. The function returns a Promise that resolves to a Beehiiv.Post object.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.posts.show(\"post_00000000-0000-0000-0000-000000000000\", \"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Beehiiv TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new post for a specific publication using the `client.posts.create` method. It requires the publication ID and a request object containing post details like title, subtitle, and an array of content blocks. Note that this feature is currently in beta and limited to Enterprise users.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.posts.create(\"pub_00000000-0000-0000-0000-000000000000\", {\n    title: \"The Kitchen Sink Post (refactored version)\",\n    subtitle: \"Contains lots of examples of each block type and the various settings you could use\",\n    blocks: [\n        {\n            type: \"heading\",\n            level: \"2\",\n            textAlignment: \"center\",\n            text: \"This is my block!!!\",\n            anchorHeader: false,\n            anchorIncludeInToc: false,\n        },\n        {\n            type: \"list\",\n            listType: \"ordered\",\n            items: [\"a\", \"b\", \"c\"]\n        },\n        {\n            type: \"list\",\n            listType: \"ordered\",\n            items: [\"d\", \"e\", \"f\"],\n            startNumber: 4\n        },\n        {\n            type: \"list\",\n            listType: \"unordered\",\n            items: [\"g\", \"h\", \"i\"],\n            startNumber: 4\n        },\n        {\n            type: \"table\",\n            headerRow: true,\n            headerColumn: true,\n            rows: [\n                [\n                    {\n                        text: \"A\"\n                    },\n                    {\n                        text: \"B\",\n                        alignment: \"center\"\n                    },\n                    {\n                        text: \"C\",\n                        alignment: \"right\"\n                    }\n                ],\n                [\n                    {\n                        text: \"D\",\n                        alignment: \"right\"\n                    },\n                    {\n                        text: \"E\",\n                        alignment: \"center\"\n                    },\n                    {\n                        text: \"F\",\n                        alignment: \"left\"\n                    }\n                ]\n            ]\n        },\n        {\n            type: \"table\",\n            rows: [\n                [\n                    {\n                        text: \"A\"\n                    },\n                    {\n                        text: \"B\"\n                    },\n                    {\n                        text: \"C\"\n                    }\n                ],\n                [\n                    {\n                        text: \"D\"\n                    },\n                    {\n                        text: \"E\"\n                    },\n                    {\n                        text: \"F\"\n                    }\n                ]\n            ]\n        },\n        {\n            type: \"table\",\n            headerRow: false,\n            rows: [\n                [\n                    {\n                        text: \"A\"\n                    },\n                    {\n                        text: \"B\"\n                    },\n                    {\n                        text: \"C\"\n                    }\n                ],\n                [\n                    {\n                        text: \"D\"\n                    },\n                    {\n                        text: \"E\"\n                    },\n                    {\n                        text: \"F\"\n                    }\n                ]\n            ]\n        },\n        {\n            type: \"columns\",\n            columns: [\n                {\n                    blocks: [\n                        {\n                            type: \"paragraph\",\n                            plaintext: \"Marble Column 1 {{email}}\"\n                        }\n                    ]\n                },\n                {\n                    blocks: [\n                        {\n                            type: \"image\",\n                            imageUrl: \"https://cdn.britannica.com/89/164789-050-D6B5E2C7/Barack-Obama-2012.jpg\",\n                            url: \"https://www.whitehouse.gov/\",\n                            title: \"Barry O\",\n                            altText: \"A picture of Barry Obama\",\n                            caption: \"One Cool President\",\n                            captionAlignment: \"center\",\n                            imageAlignment: \"right\",\n                            width: 75\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            type: \"advertisement\",\n            opportunityId: \"d8dfa6be-24b5-4cad-8350-ae44366dbd4c\"\n        },\n        {\n            type: \"image\",\n            imageUrl: \"https://cdn.britannica.com/89/164789-050-D6B5E2C7/Barack-Obama-2012.jpg\",\n            url: \"https://www.whitehouse.gov/\",\n            title: \"Barry O\",\n            altText: \"A picture of Barry Obama\",\n            caption: \"One Cool President\",\n            captionAlignment: \"center\",\n            imageAlignment: \"right\",\n            width: 75\n        },\n        {\n            type: \"paragraph\",\n            formattedText: [\n                {\n                    text: \"This is going to be \"\n                },\n                {\n                    text: \"a really, really awesome time \",\n                    styling: [\"bold\"]\n                },\n                {\n                    text: \"Are you ready for this?\",\n                    styling: [\"italic\", \"bold\"]\n                }\n            ]\n        },\n        {\n            type: \"button\",\n            href: \"/subscribe\",\n            target: \"_blank\",\n            alignment: \"center\",\n            size: \"large\",\n            text: \"Subscribe\"\n        },\n        {\n            type: \"button\",\n            href: \"/signup\",\n            target: \"_blank\",\n            alignment: \"right\",\n            size: \"small\",\n            text: \"Sign Up\"\n        },\n        {\n            type: \"button\",\n            href: \"/\",\n            target: \"_blank\",\n            text: \"View Posts\"\n        },\n        {\n            type: \"heading\",\n            level: \"4\",\n            textAlignment: \"right\",\n            text: \"This is my block!!!\",\n            anchorHeader: true,\n            anchorIncludeInToc: true\n        }\n    ],\n    postTemplateId: \"post_template_00000000-0000-0000-0000-000000000000\",\n    scheduledAt: \"2024-12-25T12:00:00Z\",\n    customLinkTrackingEnabled: true,\n    emailCaptureTypeOverride: \"none\",\n    overrideScheduledAt: \"2022-10-26T14:01:16Z\",\n    socialShare: \"comments_and_likes_only\",\n    thumbnailImageUrl:\n        \"https://images.squarespace-cdn.com/content/v1/56e4ca0540261d39b90e4b18/1605047208324-PONGEYKEAKTMM1LANHJ5/1ED706BF-A70B-4F26-B3D5-266B449DDA8A_1_105_c.jpeg\",\n    emailSettings: {\n        fromAddress: \"from_address\",\n        customLiveUrl: \"https://beehiiv.com\",\n        displayTitleInEmail: true,\n        displayBylineInEmail: true,\n        displaySubtitleInEmail: true,\n        emailHeaderEngagementButtons: \"email_header_engagement_buttons\",\n        emailHeaderSocialShare: \"email_header_social_share\",\n        emailPreviewText: \"email_preview_text\",\n        emailSubjectLine: \"email_subject_line\"\n    },\n    webSettings: {\n        displayThumbnailOnWeb: true,\n        hideFromFeed: true,\n        slug: \"and-this-is-gonna-rock\"\n    },\n    seoSettings: {\n        defaultDescription: \"default_description\",\n        defaultTitle: \"default_title\",\n        ogDescription: \"OpenGraph description\",\n        ogTitle: \"Opengraph Title\",\n        twitterDescription: \"Twitter Stuff\",\n        twitterTitle: \"My Twitter Article\"\n    },\n    contentTags: [\"Obama\", \"Care\", \"Rocks\", \"Healthcare\"],\n    recipients: {\n        web: {\n            tierIds: [\"premium\"]\n        },\n        email: {\n            tierIds: [\"premium\", \"free\"],\n            includeSegmentIds: [\"seg_6426b403-39f5-42bd-86e9-9533fb0099e7\"],\n            excludeSegmentIds: [\"seg_e34b4085-aef6-449f-a699-7563f915f852\"]\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Fields Beehiiv TypeScript\nDESCRIPTION: Shows how to retrieve a list of all custom fields defined for a specific publication using the Beehiiv TypeScript SDK. The operation only requires the publication ID.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customFields.index(\"publicationId\");\n```\n\n----------------------------------------\n\nTITLE: Showing Custom Fields Beehiiv TypeScript\nDESCRIPTION: Demonstrates fetching details for a single custom field belonging to a publication using the Beehiiv TypeScript SDK. This requires both the publication ID and the specific custom field's ID.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customFields.show(\"publicationId\", \"id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Automations for a Publication (TypeScript)\nDESCRIPTION: Retrieves a list of all automations associated with a specific publication. This endpoint requires the publication ID and may accept optional parameters for filtering or pagination via the request object.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.automations.index(\"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Show Publication with Beehiiv TypeScript SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a single publication using the Beehiiv TypeScript SDK.  It uses a publicationId parameter to identify the target publication. The function returns a Promise that resolves to a Beehiiv.Publication object.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.publications.show(\"pub_ad76629e-4a39-43ad-8055-0ee89dc6db15\");\n```\n\n----------------------------------------\n\nTITLE: Show Referral Program with Beehiiv TypeScript SDK\nDESCRIPTION: This code snippet shows how to retrieve details about a publication's referral program, including milestones and rewards, using the Beehiiv TypeScript SDK. It requires the publicationId parameter to identify the publication. The function returns referral program details.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.referralProgram.show(\"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Patch a subscription with patch method\nDESCRIPTION: Partially updates a subscription's data, such as tier and custom fields, using the patch method. Requires publication ID, subscription ID, and update parameters, returning a SubscriptionResponse.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptions.patch(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"sub_00000000-0000-0000-0000-000000000000\",\n    {\n        tier: \"premium\",\n        stripeCustomerId: \"cus_12345abcde\",\n        customFields: [\n            {\n                name: \"First Name\",\n                value: \"Bruce\",\n            },\n            {\n                name: \"Last Name\",\n                value: \"Wayne\",\n            },\n        ],\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Update a subscription with put method\nDESCRIPTION: Updates a specific subscription's details such as tier, Stripe customer ID, and custom fields. Uses the put method, requiring publication ID, subscription ID, and the update parameters, returning a SubscriptionResponse.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptions.put(\"pub_00000000-0000-0000-0000-000000000000\", \"sub_00000000-0000-0000-0000-000000000000\", {\n    tier: \"premium\",\n    stripeCustomerId: \"cus_12345abcde\",\n    customFields: [\n        {\n            name: \"First Name\",\n            value: \"Bruce\",\n        },\n        {\n            name: \"Last Name\",\n            value: \"Wayne\",\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Generate JWT token for subscriber login with getJwtToken\nDESCRIPTION: Creates a JWT token that allows automatic subscriber login via URL. The token is short-lived and must be used immediately. This function requires publication and subscription IDs.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptions.getJwtToken(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"sub_00000000-0000-0000-0000-000000000000\"\n);\n```\n\n----------------------------------------\n\nTITLE: Create subscription tags with create method\nDESCRIPTION: Adds tags to a specific subscription within a publication. If a tag does not already exist, it is created automatically. It requires publication ID, subscription ID, and tag details, returning a SubscriptionTagsCreateResponse.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptionTags.create(\"publicationId\", \"subscriptionId\");\n```\n\n----------------------------------------\n\nTITLE: Create a new tier with create method\nDESCRIPTION: Creates a new tier for a specific publication, defining different subscription levels or plans. Requires publication ID and tier parameters, returning a TierResponse.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Example usage placeholder - actual parameters depend on implementation */\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication Tier with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new tier for a publication using the Beehiiv TypeScript SDK. Dependencies include the Beehiiv SDK client with tier API access and a valid publicationId. The function takes a publicationId string and a configuration object for the tier details, including name, description, and price attributes. Input: publicationId (string) and a tier configuration object. Output: Promise resolving to the created tier response. Ensure the publicationId and request payload conform to the documented types.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tiers.create(\"pub_00000000-0000-0000-0000-000000000000\", {\n    name: \"Gold Tier\",\n    description: \"Our premium tier with exclusive benefits\",\n    pricesAttributes: [\n        {\n            currency: \"usd\",\n            amountCents: 500,\n            enabled: true,\n            interval: \"month\",\n            intervalDisplay: \"Monthly\",\n            cta: \"Subscribe Now\",\n            features: [\"Exclusive content\", \"Ad-free experience\", \"Priority support\"],\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Publication Tier via PATCH with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet shows how to partially update a publication tier using the patch method of the Beehiiv SDK client. Inputs include publicationId, tierId, and an object containing only fields that need to be updated. Output is a promise resolving to the updated tier object. Suitable for making incremental changes without overwriting all tier properties. Ensure the object passed adheres to the UpdatePatchTierRequest.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tiers.patch(\"pub_00000000-0000-0000-0000-000000000000\", \"tier_00000000-0000-0000-0000-000000000000\", {\n    name: \"Gold\",\n    description: \"Our premium tier with exclusive benefits\",\n    pricesAttributes: [\n        {\n            id: \"price_00000000-0000-0000-0000-000000000000\",\n            currency: \"usd\",\n            amountCents: 500,\n            interval: \"month\",\n            intervalDisplay: \"Monthly\",\n            cta: \"Subscribe Now\",\n            features: [\"Exclusive content\"],\n            delete: true,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Publication Tier via PUT with Beehiiv SDK in TypeScript\nDESCRIPTION: This usage example illustrates updating all fields of an existing publication tier using the Beehiiv SDK's put method. Required inputs are publicationId, tierId, and a full update object conforming to the UpdatePutTierRequest type. Outputs a promise resolving to the updated tier response. Ensure all price attributes are correctly specified; missing or incorrect data may cause the update to fail.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tiers.put(\"pub_00000000-0000-0000-0000-000000000000\", \"tier_00000000-0000-0000-0000-000000000000\", {\n    name: \"Gold\",\n    description: \"Our premium tier with exclusive benefits\",\n    pricesAttributes: [\n        {\n            id: \"price_00000000-0000-0000-0000-000000000000\",\n            currency: \"usd\",\n            amountCents: 500,\n            interval: \"month\",\n            intervalDisplay: \"Monthly\",\n            cta: \"Subscribe Now\",\n            features: [\"Exclusive content\"],\n            delete: true,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication Webhook with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to register a new webhook endpoint to receive event notifications related to a given publication via the Beehiiv SDK. Dependencies include a Beehiiv client instance and a valid publicationId. The input requires a URL and a list of eventTypes that this webhook should listen to. Outputs a promise resolving to a webhook response. Ensure the webhook URL is reachable and eventTypes are valid.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.webhooks.create(\"pub_00000000-0000-0000-0000-000000000000\", {\n    url: \"https://example.com/webhook\",\n    eventTypes: [\"post.sent\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying All Publication Webhooks with Beehiiv SDK in TypeScript\nDESCRIPTION: This example retrieves all webhooks configured for a specific publication using the webhooks.index method in the Beehiiv SDK. Requires a publicationId as input and outputs a promise resolving to an array of webhook response objects. Optional filtering parameters may be included in the request, but are not required for basic retrieval.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.webhooks.index(\"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Publication Webhook with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet retrieves details of a specific webhook endpoint for a publication using the Beehiiv SDK client. Requires both the publicationId and the endpointId as input parameters. Outputs a promise resolving to the webhook response object. Use this method to inspect webhook configuration and endpoint metadata.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.webhooks.show(\"pub_00000000-0000-0000-0000-000000000000\", \"ep_0000000000000000000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Deleting a Publication Webhook with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet deletes an existing webhook from a publication by providing the publicationId and endpointId to the webhooks.delete method of the Beehiiv SDK. Inputs are both IDs as strings. The result is a promise that resolves when the webhook is successfully deleted. Take care to ensure the endpointId is correct, as this action cannot be undone.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.webhooks.delete(\"pub_00000000-0000-0000-0000-000000000000\", \"ep_0000000000000000000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Testing a Publication Webhook Endpoint with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet sends a test event to a specified webhook endpoint for a publication via the Beehiiv SDK. Requires a publicationId and endpointId as input. The output is a promise resolving with the result of the test delivery. Use this to verify that a configured webhook endpoint is working and receiving events as expected.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.webhooks.test(\"pub_00000000-0000-0000-0000-000000000000\", \"ep_0000000000000000000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Updating Bulk Subscriptions with Custom Fields Beehiiv TypeScript\nDESCRIPTION: Demonstrates how to perform a bulk update on multiple subscriptions using the Beehiiv TypeScript SDK. This includes updating subscription tiers, Stripe customer IDs, unsubscribe status, and associated custom fields. The method requires the publication ID and a request object containing an array of subscription update details.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.bulkSubscriptionUpdates.patch(\"publicationId\", {\n    subscriptions: [\n        {\n            subscriptionId: \"sub_1234-5678-9012-3456-7890\",\n            tier: \"premium\",\n            stripeCustomerId: \"cus_1234567890\",\n            unsubscribe: false,\n            customFields: [\n                {\n                    name: \"custom_field_name\",\n                    value: \"custom_field_value\",\n                },\n                {\n                    name: \"custom_field_name_2\",\n                    value: \"custom_field_value_2\",\n                },\n            ],\n        },\n        {\n            subscriptionId: \"sub_9876-5432-1098-7654-3210\",\n            tier: \"free\",\n            stripeCustomerId: \"cus_1234567890\",\n            unsubscribe: true,\n            customFields: [\n                {\n                    name: \"custom_field_name_3\",\n                    value: \"custom_field_value_3\",\n                },\n                {\n                    name: \"custom_field_name_4\",\n                    value: \"custom_field_value_4\",\n                },\n            ],\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Multiple Subscriptions (PUT) (TypeScript)\nDESCRIPTION: Performs a bulk update operation on multiple subscriptions within a publication using the PUT method. Allows modifying fields like tier, Stripe customer ID, unsubscribe status, and custom fields for a list of subscriptions specified in the request body.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.bulkSubscriptionUpdates.put(\"publicationId\", {\n    subscriptions: [\n        {\n            subscriptionId: \"sub_1234-5678-9012-3456-7890\",\n            tier: \"premium\",\n            stripeCustomerId: \"cus_1234567890\",\n            unsubscribe: false,\n            customFields: [\n                {\n                    name: \"custom_field_name\",\n                    value: \"custom_field_value\",\n                },\n                {\n                    name: \"custom_field_name_2\",\n                    value: \"custom_field_value_2\",\n                },\n            ],\n        },\n        {\n            subscriptionId: \"sub_9876-5432-1098-7654-3210\",\n            tier: \"free\",\n            stripeCustomerId: \"cus_1234567890\",\n            unsubscribe: true,\n            customFields: [\n                {\n                    name: \"custom_field_name_3\",\n                    value: \"custom_field_value_3\",\n                },\n                {\n                    name: \"custom_field_name_4\",\n                    value: \"custom_field_value_4\",\n                },\n            ],\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Bulk Subscription Status (PATCH) Beehiiv TypeScript\nDESCRIPTION: Illustrates how to update the status of multiple subscriptions in bulk using a PATCH request via the Beehiiv TypeScript SDK. Similar to the PUT method, it requires the publication ID, an array of subscription IDs, and the target new status.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.bulkSubscriptionUpdates.patchStatus(\"publicationId\", {\n    subscriptionIds: [\"sub_1234-5678-9012-3456-7890\", \"sub_9876-5432-1098-7654-3210\"],\n    newStatus: \"active\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Bulk Subscription Status (PUT) Beehiiv TypeScript\nDESCRIPTION: Shows how to update the status of multiple subscriptions in bulk using a PUT request via the Beehiiv TypeScript SDK. This operation requires the publication ID, an array of subscription IDs to update, and the desired new status.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.bulkSubscriptionUpdates.putStatus(\"publicationId\", {\n    subscriptionIds: [\"sub_1234-5678-9012-3456-7890\", \"sub_9876-5432-1098-7654-3210\"],\n    newStatus: \"active\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Fields (PUT) Beehiiv TypeScript\nDESCRIPTION: Illustrates updating a custom field's properties using a PUT request via the Beehiiv TypeScript SDK. The call requires the publication ID, the custom field's ID, and a request object with the fields to update, such as 'display'.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customFields.put(\"publicationId\", \"id\", {\n    display: \"New Display\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Fields (PATCH) Beehiiv TypeScript\nDESCRIPTION: Provides an example of updating a custom field's properties using a PATCH request via the Beehiiv TypeScript SDK. This method requires the publication ID, the custom field's ID, and a request object containing the specific fields to modify, like 'display'.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customFields.patch(\"publicationId\", \"id\", {\n    display: \"New Display\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Fields Beehiiv TypeScript\nDESCRIPTION: Demonstrates how to delete a specific custom field from a publication using the Beehiiv TypeScript SDK. The operation requires both the publication ID and the ID of the custom field to be deleted.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customFields.delete(\"publicationId\", \"id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Email Blasts Beehiiv TypeScript\nDESCRIPTION: Shows how to retrieve a list of all email blasts associated with a particular publication using the Beehiiv TypeScript SDK. This method requires the publication ID.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.emailBlasts.index(\"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Delete Post with Beehiiv TypeScript SDK\nDESCRIPTION: This code snippet shows how to delete or archive a post using the Beehiiv TypeScript SDK. It takes a postId and publicationId as parameters. Posts that have been confirmed will be archived, while posts in the draft status will be permanently deleted.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.posts.delete(\"post_00000000-0000-0000-0000-000000000000\", \"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Show Segment with Beehiiv TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to retrieve information about a specific segment belonging to a publication using the Beehiiv TypeScript SDK. It requires a publicationId and a segmentId.  The function returns a Promise that resolves to a Beehiiv.Segment object.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.segments.show(\"pub_00000000-0000-0000-0000-000000000000\", \"seg_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Expand Segment Results with Beehiiv TypeScript SDK\nDESCRIPTION: This code snippet demonstrates how to list the Subscriber Ids from the most recent calculation of a specific publication's segment using the Beehiiv TypeScript SDK. It takes publicationId and segmentId as parameters. This is useful for identifying the subscribers within a particular segment.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.segments.expandResults(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"seg_00000000-0000-0000-0000-000000000000\"\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Segment with Beehiiv TypeScript SDK\nDESCRIPTION: This snippet shows how to delete a segment using the Beehiiv TypeScript SDK. It requires a publicationId and a segmentId. Deleting a segment does not affect the subscriptions associated with it.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.segments.delete(\"pub_00000000-0000-0000-0000-000000000000\", \"seg_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Querying All Publication Tiers with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet retrieves all tiers associated with a specific publication by calling the Beehiiv SDK tier index method. It requires a Beehiiv SDK client instance and a valid publicationId. The function takes publicationId as input and returns a promise resolving to the indexed tiers response. No additional parameters are required unless pagination or filtering is desired.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tiers.index(\"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Automation by ID (TypeScript)\nDESCRIPTION: Fetches the details of a specific automation using its unique identifier and the publication ID. Provides detailed configuration and status information for a particular automation setup.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.automations.show(\"pub_00000000-0000-0000-0000-000000000000\", \"aut_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Showing Email Blasts Beehiiv TypeScript\nDESCRIPTION: Illustrates retrieving details for a single email blast belonging to a publication using the Beehiiv TypeScript SDK. The method requires both the publication ID and the specific email blast ID.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.emailBlasts.show(\"pub_00000000-0000-0000-0000-000000000000\", \"blast_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Bulk Subscription Update Task by ID (TypeScript)\nDESCRIPTION: Fetches the details of a specific bulk subscription update task using its unique identifier and the publication ID. Provides the status and details of a particular bulk update operation.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.bulkSubscriptionUpdates.show(\"publicationId\", \"id\");\n```\n\n----------------------------------------\n\nTITLE: Listing Bulk Subscription Update Tasks (TypeScript)\nDESCRIPTION: Retrieves a list of previously initiated bulk subscription update tasks for a given publication. Requires the publication ID to fetch the history of bulk operations performed.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.bulkSubscriptionUpdates.index(\"publicationId\");\n```\n\n----------------------------------------\n\nTITLE: List Segments with Beehiiv TypeScript SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve information about all segments belonging to a specific publication using the Beehiiv TypeScript SDK. It requires a publicationId parameter to identify the publication whose segments are to be listed. The function returns a Promise that resolves to a list of segments.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.segments.index(\"pub_00000000-0000-0000-0000-000000000000\");\n```\n\n----------------------------------------\n\nTITLE: Listing Automation Journeys for an Automation (TypeScript)\nDESCRIPTION: Retrieves a list of all automation journeys that have occurred within a specific automation. This allows viewing all instances where subscribers have gone through the automation flow, requiring both the publication ID and the automation ID.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.automationJourneys.index(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"aut_00000000-0000-0000-0000-000000000000\"\n);\n```\n\n----------------------------------------\n\nTITLE: Delete a subscription with delete method\nDESCRIPTION: Removes a subscription permanently from the system. Requires subscription ID and publication ID as parameters. This operation cannot be undone and will also delete associated data; use with caution.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptions.delete(\n    \"sub_00000000-0000-0000-0000-000000000000\",\n    \"pub_00000000-0000-0000-0000-000000000000\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fields Beehiiv TypeScript\nDESCRIPTION: Provides an example of creating a new custom field for a specific publication using the Beehiiv TypeScript SDK. The request requires the publication ID and a request object specifying the field's 'kind' (type) and 'display' name.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.customFields.create(\"publicationId\", {\n    kind: \"string\",\n    display: \"Display\",\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Fetch Client in Beehiiv TypeScript SDK\nDESCRIPTION: Shows how to provide a custom HTTP fetch implementation when initializing the `BeehiivClient`. This is achieved using the `fetcher` option, allowing integration with environments having non-standard fetch APIs or enabling custom request/response manipulation.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BeehiivClient } from \"@beehiiv/sdk\";\n\nconst client = new BeehiivClient({\n    ...\n    fetcher: // provide your implementation here\n});\n```\n\n----------------------------------------\n\nTITLE: List Publications with Beehiiv TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to retrieve all publications associated with your API key using the Beehiiv TypeScript SDK. It does not require any parameters. The function returns a Promise that resolves to a list of publications.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.publications.index();\n```\n\n----------------------------------------\n\nTITLE: Retrieve a subscription by subscriber ID with getBySubscriberId\nDESCRIPTION: Gets a subscription associated with a subscriber ID for a specific publication. The method returns a SubscriptionResponse. It requires publication ID and subscriber ID as inputs.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscriptions.getBySubscriberId(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"00000000-0000-0000-0000-000000000000\"\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Automation Journey by ID (TypeScript)\nDESCRIPTION: Fetches the details of a specific automation journey using its unique identifier, along with the publication and automation IDs. Provides the status and progress information for a particular subscriber within an automation.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.automationJourneys.show(\n    \"pub_00000000-0000-0000-0000-000000000000\",\n    \"aut_00000000-0000-0000-0000-000000000000\",\n    \"aj_00000000-0000-0000-0000-000000000000\"\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Publication Tier with Beehiiv SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch the details of a single tier using the Beehiiv SDK by providing the publicationId and the tierId. Inputs required are the prefixed publication and tier IDs. Outputs a promise resolving to the tier response object. The request may include additional options for customization, but at minimum both IDs must be supplied.\nSOURCE: https://github.com/beehiiv/typescript-sdk/blob/master/reference.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tiers.show(\"pub_00000000-0000-0000-0000-000000000000\", \"tier_00000000-0000-0000-0000-000000000000\");\n```"
  }
]