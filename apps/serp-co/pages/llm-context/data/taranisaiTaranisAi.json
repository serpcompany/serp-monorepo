[
  {
    "owner": "taranis-ai",
    "repo": "taranis-ai",
    "content": "TITLE: Starting a Tmux Session for Core, GUI, and Worker\nDESCRIPTION: Creates a new tmux session named 'taranis' with three windows: 'core', 'gui', and 'worker', each starting in their respective directories.  It then attaches to the session. This provides a convenient way to manage the core, GUI, and worker processes in separate terminals.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Start a new session named taranis with the first tab and cd to src/core\ntmux new-session -s taranis -n core -c src/core -d\n\n# Create the second tab and cd to src/gui\ntmux new-window -t taranis:1 -n gui -c src/gui\n\n# Create the third tab and cd to src/worker\ntmux new-window -t taranis:2 -n worker -c src/worker\n\n# Attach to the session\ntmux attach-session -t taranis\n```\n\n----------------------------------------\n\nTITLE: Setting up and Running Worker in Tmux\nDESCRIPTION: Sets up a virtual environment, activates it, installs the required dependencies, and runs the Celery worker.  Assumes the user is already in the correct tmux pane.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# If venv isn't setup already\nuv venv\n\n# Activate venv\nsource .venv/bin/activate\n\n# Install requirements\nuv sync --upgrade --all-extras\n\n# Run worker\ncelery -A worker worker\n```\n\n----------------------------------------\n\nTITLE: Setting up and Running Core in Tmux\nDESCRIPTION: Sets up a virtual environment, activates it, installs the required dependencies, and runs the core application using Flask. Assumes the user is already in the correct tmux pane.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# If venv isn't setup already\nuv venv\n\n# Activate venv\nsource .venv/bin/activate\n\n# Install requirements\nuv sync --upgrade --all-extras\n\n# Run core\nflask run\n```\n\n----------------------------------------\n\nTITLE: Setting up and Running GUI in Tmux\nDESCRIPTION: Installs `corepack` and enables `pnpm` if they are not already set up, installs node modules if necessary, and then runs the GUI using `pnpm run dev`. Assumes the user is already in the correct tmux pane.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# If pnpm isn't setup already\nnpm install --global corepack@latest\ncorepack enable pnpm\n\n# If node_modules isn't setup already\npnpm install\n\n# Run GUI\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Copying the environment configuration file\nDESCRIPTION: Copies the sample environment configuration file (`env.sample`) to `.env`. This is necessary for configuring the application's environment variables.  The `.env` file is then modified to set the required configuration values.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/docker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp env.sample .env\n```\n\n----------------------------------------\n\nTITLE: Copying Development Environment Variables\nDESCRIPTION: Copies the `env.dev` file to the `src/core/.env` and `src/worker/.env` locations. This configures the core and worker services with the development environment settings.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp dev/env.dev src/core/.env\ncp dev/env.dev src/worker/.env\n```\n\n----------------------------------------\n\nTITLE: Building Taranis AI Docker Images Individually\nDESCRIPTION: Builds the Docker images for the core, GUI, and worker components of the Taranis AI system. Each `docker build` command uses a specific `Containerfile` to define the build process for each component. The `-t` flag is used to tag the images with specific names.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/docker/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd \"Taranis AI\"\ndocker build -t taranis-core . -f ./docker/Containerfile.core\ndocker build -t taranis-gui . -f ./docker/Containerfile.gui\ndocker build -t taranis-worker . -f ./docker/Containerfile.worker\n```\n\n----------------------------------------\n\nTITLE: Setup Environment\nDESCRIPTION: Sets up the development environment for Taranis AI Core, creating a virtual environment and installing dependencies using uv and pip. The command installs the project in editable mode with development dependencies.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nuv pip install -Ue .[dev]\n```\n\n----------------------------------------\n\nTITLE: Starting the Taranis AI application with Docker Compose\nDESCRIPTION: Starts the Taranis AI application using Docker Compose. The `docker compose up -d` command builds and starts the services defined in the `docker-compose.yml` file in detached mode, meaning the containers run in the background.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/docker/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Install Taranis Worker\nDESCRIPTION: This snippet sets up a virtual environment using uv, activates it, and installs the Taranis worker with development dependencies.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/worker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\nuv pip install -Ue .[dev]\n```\n\n----------------------------------------\n\nTITLE: Run Development Server with pnpm\nDESCRIPTION: This command starts the development server for the Taranis GUI using pnpm. It enables hot-reloading and allows developers to see changes in real-time.  Ensure the .env file has `VITE_TARANIS_CONFIG_JSON = \"/config.local.json\"` to use the local configuration.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/gui/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Activate Virtual Environment and Install Dependencies (bash)\nDESCRIPTION: This snippet activates the virtual environment and installs the project dependencies from the local setup file, including development dependencies. It uses 'uv pip install' command to install the package in editable mode along with specified extras [dev].\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/models/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\nuv pip install -Ue .[dev]\n```\n\n----------------------------------------\n\nTITLE: Run Flask Application\nDESCRIPTION: Executes the Flask application. This starts the web server for the Taranis AI Core, making the API endpoints accessible.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflask run\n```\n\n----------------------------------------\n\nTITLE: Run Taranis Worker\nDESCRIPTION: This snippet shows how to run the Taranis worker as a celery worker.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/worker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncelery -A worker worker\n```\n\n----------------------------------------\n\nTITLE: Running Headless E2E Tests with Pytest\nDESCRIPTION: Executes end-to-end tests in headless mode using pytest. This is suitable for continuous integration environments.  The `--e2e-ci` flag specifies the test suite to run.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/tests/playwright/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --e2e-ci\n```\n\n----------------------------------------\n\nTITLE: Virtual Environment Setup with uv (bash)\nDESCRIPTION: This snippet installs uv and creates a virtual environment named '.venv' for the Taranis AI project. It allows for isolated dependency management. It assumes curl is installed.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/models/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv venv\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with pnpm\nDESCRIPTION: This command installs the necessary dependencies for the Taranis GUI project using the pnpm package manager. It is a prerequisite for developing and building the GUI.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/gui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Headful E2E Tests with Pytest\nDESCRIPTION: Runs end-to-end tests in headful mode using pytest. This allows visual inspection of the test execution.  The `--e2e-user` flag specifies the test suite to run.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/tests/playwright/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest --e2e-user\n```\n\n----------------------------------------\n\nTITLE: Cloning the Taranis AI Repository\nDESCRIPTION: Clones the Taranis AI repository from GitHub using `git clone`. The `--depth 1` flag is used to perform a shallow clone, retrieving only the most recent commit, to speed up the cloning process. Afterwards, changes the current directory to the `docker` folder inside the cloned repository.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/docker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1  https://github.com/taranis-ai/taranis-ai\ncd taranis-ai/docker/\n```\n\n----------------------------------------\n\nTITLE: Cloning the Taranis AI Repository\nDESCRIPTION: Clones the Taranis AI repository from GitHub and navigates into the cloned directory. This is the first step in setting up the development environment.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:taranis-ai/taranis-ai.git\ncd taranis-ai\n```\n\n----------------------------------------\n\nTITLE: Create a Python Virtual Environment\nDESCRIPTION: This command uses uv to create a virtual environment named .venv. This isolates project dependencies.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/frontend/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv venv\n```\n\n----------------------------------------\n\nTITLE: Activate Virtual Environment and Install Dependencies\nDESCRIPTION: This command activates the created virtual environment and installs the project dependencies, including development dependencies, using uv pip.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/frontend/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\nuv pip install -Ue .[dev]\n```\n\n----------------------------------------\n\nTITLE: Starting Support Services with Docker Compose\nDESCRIPTION: Starts the support services defined in the `dev/compose.yml` file using Docker Compose.  The `-d` flag runs the services in detached mode.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f dev/compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Run Tests and Linting with pnpm\nDESCRIPTION: These commands run the tests and linters for the Taranis GUI project using pnpm. They help ensure code quality and prevent errors.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/gui/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Creating GUI Configuration File\nDESCRIPTION: Creates a `config.local.json` file in the `src/gui/public/` directory, setting the `TARANIS_CORE_API` variable to the value of the `TARANIS_CORE_URL` environment variable.  This is used to configure the GUI's API endpoint.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"{\\n  \\\"TARANIS_CORE_API\\\": \\\"${TARANIS_CORE_URL}\\\"\\n}\" > src/gui/public/config.local.json\n```\n\n----------------------------------------\n\nTITLE: Cloning the Taranis AI Repository (Advanced Build)\nDESCRIPTION: Clones the Taranis AI repository from GitHub. This is the first step for building the Docker images individually. After cloning, you need to navigate into the directory.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/docker/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/taranis-ai/taranis-ai\n```\n\n----------------------------------------\n\nTITLE: Local Configuration JSON Example\nDESCRIPTION: This JSON snippet shows an example configuration file used for local development, overriding the default `TARANIS_CORE_API` endpoint to point to a local server. This file needs to be placed in the `/public` folder as `config.local.json` and the environment variable `VITE_TARANIS_CONFIG_JSON` needs to be defined in the `.env` file.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/gui/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"TARANIS_CORE_API\": \"<http://localhost:5000/api>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Script\nDESCRIPTION: Executes the `start_dev.sh` script. This script likely automates several steps necessary for starting the development environment.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./dev/start_dev.sh\n```\n\n----------------------------------------\n\nTITLE: Run Granian Server\nDESCRIPTION: Starts the Granian server, which is an alternative to running the Flask application directly. Granian can provide performance improvements.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n./start-granian.py\n```\n\n----------------------------------------\n\nTITLE: Generating Playwright Tests using Codegen\nDESCRIPTION: Utilizes the Playwright codegen tool to automatically generate test code by interacting with a running application. The `--viewport-size` parameter sets the viewport dimensions, and the `localhost:<port>` specifies the application's address.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/tests/playwright/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplaywright codegen --viewport-size=1920,1080 localhost:<port>\n```\n\n----------------------------------------\n\nTITLE: Download Tailwind CSS CLI\nDESCRIPTION: Downloads the Tailwind CSS CLI tool for Linux and makes it executable. It uses curl to download the latest version and chmod to set execute permissions.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/frontend/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sLo tailwindcss https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64\nchmod +x tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Pausing Test Execution for Codegen Connection\nDESCRIPTION: Pauses the test execution at a specific point, allowing the Playwright Codegen tool to connect to the running test instance and generate code based on interactions.  This requires Playwright and Python.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/tests/playwright/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage.pause()\n```\n\n----------------------------------------\n\nTITLE: Start Flask Development Server\nDESCRIPTION: This command starts the Flask development server, which hosts the frontend application.  It assumes that Flask is installed and configured.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/frontend/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflask run\n```\n\n----------------------------------------\n\nTITLE: Navigating to Git Root Directory\nDESCRIPTION: Changes the current directory to the root directory of the Git repository. This command ensures that subsequent commands are executed from the correct location, regardless of the current working directory.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $(git rev-parse --show-toplevel)\n```\n\n----------------------------------------\n\nTITLE: Copying Frontend Environment Variables\nDESCRIPTION: Copies the `env.sample` file from `src/frontend` to `src/frontend/.env`. This initializes the frontend's environment configuration.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp src/frontend/env.sample src/frontend/.env\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Pictures with Pytest\nDESCRIPTION: Executes tests specifically designed to generate screenshots for documentation purposes. The `--e2e-admin` flag triggers the execution of tests in the admin section and user sections (also).\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/tests/playwright/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest --e2e-admin\n```\n\n----------------------------------------\n\nTITLE: Start Tailwind CSS in Watch Mode\nDESCRIPTION: This command runs Tailwind CSS in watch mode, automatically rebuilding the CSS files when changes are detected in the input CSS file.  It takes input from frontend/static/css/input.css and outputs to frontend/static/css/tailwind.css.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/frontend/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./tailwindcss -i frontend/static/css/input.css -o frontend/static/css/tailwind.css --watch\n```\n\n----------------------------------------\n\nTITLE: Entering Debug Mode with Playwright\nDESCRIPTION: Enables debug mode for Playwright tests. The `PWDEBUG=1` environment variable activates the debugger. Replace `<--flag>` with relevant pytest flags for test execution.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/tests/playwright/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPWDEBUG=1 pytest <--flag>\n```\n\n----------------------------------------\n\nTITLE: Build Static Version with pnpm\nDESCRIPTION: This command builds the static version of the Taranis GUI using pnpm and Vite. The output will be located in the `dist/` subdirectory.  It is generally run before deploying the GUI to a production environment.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/gui/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Accessing the Taranis AI application\nDESCRIPTION: Provides the URL to access the Taranis AI application after it has been successfully started.  Replace `<url>` with the actual URL of the server and `<TARANIS_PORT>` with the configured port number for the application.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/docker/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttp://<url>:<TARANIS_PORT>/login\n```\n\n----------------------------------------\n\nTITLE: Syncing New Pictures for Documentation\nDESCRIPTION: Copies newly generated screenshots from the test environment to the documentation repository using a shell script. The script requires the paths to the screenshot folder and the documentation's static directory as arguments.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/tests/playwright/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./sync_new_pictures.sh <path/to/screenshot/folder_in_taranis-ai> <path_to_taranis.ai/static/docs>\n```\n\n----------------------------------------\n\nTITLE: Setting up Nginx (Debian-based)\nDESCRIPTION: Copies the provided nginx configuration file to the sites-available directory and creates a symbolic link in the sites-enabled directory.  Then tests the nginx configuration and restarts the service to apply the changes. This configures nginx to serve the Taranis AI application.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp dev/nginx.conf /etc/nginx/sites-available/local.taranis.ai\nsudo ln -s /etc/nginx/sites-available/local.taranis.ai /etc/nginx/sites-enabled/local.taranis.ai\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Setting up Nginx (Red Hat-based)\nDESCRIPTION: Copies the provided nginx configuration file to the conf.d directory. Then tests the nginx configuration and restarts the service to apply the changes.  This configures nginx to serve the Taranis AI application.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp dev/nginx.conf /etc/nginx/conf.d/local.taranis.ai.conf\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Template Structure and Data Access\nDESCRIPTION: This Jinja2 code defines the overall structure of the report. It accesses data from the 'data' object, specifically 'report_items', 'report', and 'stories'. It sets the report variable to the first element of report_items, and stories from data.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/core/static/presenter_templates/cert_at_daily_report.txt#_snippet_0\n\nLANGUAGE: Jinja2\nCODE:\n```\n{% if data.report_items|length != 1 -%}\nThis Template needs exactly one Report\n{% else -%}\n{% set report = data.report_items[0].attributes -%}\n{% set stories = data.report_items[0].stories %}\n\n=====================\n= End-of-Day report =\n=====================\n\nTimeframe:   {{ report.timeframe }}\nHandler:     {{ report.handler }}\nCo-Handler:  {{ report.co_handler }}\n\n```\n\n----------------------------------------\n\nTITLE: News Section Generation\nDESCRIPTION: This Jinja2 code iterates through news items associated with the report. It splits the news IDs, finds corresponding stories, and displays their titles, summaries or content, and links. The code iterates through news and story items to populate the news section of the report.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/core/static/presenter_templates/cert_at_daily_report.txt#_snippet_1\n\nLANGUAGE: Jinja2\nCODE:\n```\n=====================\n=       News        =\n=====================\n\n{% for group_id in report.news.split(',') -%}\n{% for story in stories -%}\n{% if story.id|string == group_id -%}\n\n*** {{ story.title }} ***\n---------------------------------------------\n{% if story.summary is defined and story.summary|length -%}\n{{ story.summary }}\n{% else -%}\n{{ story.news_items[0].content }}\n{%- endif %}\n---------------------------------------------\n{% for item in story.news_items -%}\n{{ item.link }}\n{% endfor %}\n\n{%- endif %}\n{%- endfor %}\n{%- endfor %}\n\n```\n\n----------------------------------------\n\nTITLE: Vulnerabilities Section Generation\nDESCRIPTION: This Jinja2 code iterates through vulnerability items associated with the report. It splits the vulnerability IDs, finds corresponding stories, and displays their titles, summaries or content, and links. The code iterates through the report's vulnerabilities to generate this section of the report.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/core/static/presenter_templates/cert_at_daily_report.txt#_snippet_2\n\nLANGUAGE: Jinja2\nCODE:\n```\n=====================\n=  Vulnerabilities  =\n=====================\n\n{% for group_id in report.vulnerabilities.split(',') -%}\n{% for story in stories -%}\n{% if story.id|string == group_id -%}\n\n*** {{ story.title }} ***\n---------------------------------------------\n{% if story.summary is defined and story.summary|length -%}\n{{ story.summary }}\n{% else -%}\n{{ story.news_items[0].content }}\n{%- endif %}\n---------------------------------------------\n{% for item in story.news_items -%}\n{{ item.link }}\n{% endfor %}\n\n{%- endif %}\n{%- endfor %}\n{%- endfor %}\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Application\nDESCRIPTION: This command starts the Flask application.  It assumes that the script `template_dev.py` is located in the current directory. Navigate to the folder containing the script and execute the command.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/template_dev/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython template_dev.py\n```\n\n----------------------------------------\n\nTITLE: Installing Flask\nDESCRIPTION: Installs the Flask web framework. Flask is a lightweight WSGI web application framework. It provides tools and libraries that allow you to build a web application.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/dev/template_dev/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npip install Flask\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Macro for Traversing Report Items\nDESCRIPTION: This Jinja2 macro, `traverse`, recursively iterates through a dictionary or list (`report_items`). It utilizes a namespace to track keys to omit (`omit_keys`) based on the report configuration. The macro handles different report types (OSINT, DISINFORMATION, VULNERABILITY, MISP) by adding corresponding headings. It renders the report data with upper-cased keys and values. It requires a dictionary named `data` with a key `report_items` as input.\nSOURCE: https://github.com/taranis-ai/taranis-ai/blob/master/src/core/core/static/presenter_templates/text_template.txt#_snippet_0\n\nLANGUAGE: Jinja2\nCODE:\n```\n{%- macro traverse(report_items, ns=None) %}\n{%- if ns is none -%}\n{%- set ns = namespace(item_list=[]) %}\n{%- endif %}\n{#- Arbitrary section to add a report name to the rendered product -#}\n{%- if report_items is mapping -%}\n{%- if 'report_item_type_id' in report_items %}\n{%- if report_items.get('report_item_type_id') == 1 %}\n# OSINT REPORT\n{%- elif report_items.get('report_item_type_id') == 2 %}\n# DISINFORMATION REPORT\n{%- elif report_items.get('report_item_type_id') == 3 %}\n# VULNERABILITY REPORT\n{%- elif report_items.get('report_item_type_id') == 4 %}\n# MISP REPORT\n{%- endif %}\n{%- endif %}\n{#- Handle omission of keys: Admin needs to create an attribute omit_keys in the Report Types section with the Name \"omission\" -#}\n{#- This is a text field where specific keys can be entered with comma separated -#}\n{%- if report_items.get('report_items') and report_items.get('report_items')[0].get('attributes').get('omission') %}\n{% set omit_keys = report_items.get('report_items')[0].get('attributes').get('omission') %}\n{% set ns.item_list = omit_keys.split(\",\") | map('trim') | map('lower') | list %}\nomit_keys: {{ ns.item_list }}\n{%- endif %}\n{#- Handle nested dictionaries -#}\n{% for key, value in report_items.items() %}\n{%- if value != \"\" and key.lower() not in ns.item_list %}\n{%- if value is mapping or (value is iterable and value is not string and value is not mapping) %}\n## {{ key.upper() }}:\n{{ traverse(value, ns) }}\n{%- else %}\n{{ key.upper() }}: {{ value }}\n{%- endif %}\n{%- endif %}\n{%- endfor %}\n{%- elif report_items is iterable and report_items is not string and report_items is not mapping %}\n{#- Handle lists -#}\n{% for item in report_items %}\n{{- traverse(item, ns) -}}\n{% endfor %}\n{%- endif %}\n{%- endmacro %}\n{{- traverse(data.report_items) -}}\n{%- if data.report_items|length == 0 -%}\nNo Report Items specified\n{%- endif %}\n```"
  }
]