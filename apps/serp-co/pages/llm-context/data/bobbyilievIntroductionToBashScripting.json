[
  {
    "owner": "bobbyiliev",
    "repo": "introduction-to-bash-scripting",
    "content": "TITLE: Specifying Bash Interpreter via Absolute Path (Bash Shebang)\nDESCRIPTION: This line, known as a Shebang, must be the very first line of a Bash script. It instructs the operating system to execute the script using the Bash interpreter located at the absolute path `/bin/bash`.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/002-bash-structure.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Specifying Bash Interpreter using env (Bash Shebang)\nDESCRIPTION: This Shebang line uses the `env` command to locate the `bash` executable within the directories listed in the system's `PATH` environment variable. This approach enhances script portability across different Unix-like systems where the `bash` path might vary.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/002-bash-structure.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n```\n\n----------------------------------------\n\nTITLE: Complete Bash Interactive Menu Script\nDESCRIPTION: The complete Bash script that combines system monitoring functions, color functionality, and an interactive menu system to provide a user-friendly interface for checking system information.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/016-creating-an-interactive-menu-in-bash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n##\n# BASH menu script that checks:\n#   - Memory usage\n#   - CPU load\n#   - Number of TCP connections \n#   - Kernel version\n##\n\nserver_name=$(hostname)\n\nfunction memory_check() {\n    echo \"\"\n\techo \"Memory usage on ${server_name} is: \"\n\tfree -h\n\techo \"\"\n}\n\nfunction cpu_check() {\n    echo \"\"\n\techo \"CPU load on ${server_name} is: \"\n    echo \"\"\n\tuptime\n    echo \"\"\n}\n\nfunction tcp_check() {\n    echo \"\"\n\techo \"TCP connections on ${server_name}: \"\n    echo \"\"\n\tcat  /proc/net/tcp | wc -l\n    echo \"\"\n}\n\nfunction kernel_check() {\n    echo \"\"\n\techo \"Kernel version on ${server_name} is: \"\n\techo \"\"\n\tuname -r\n    echo \"\"\n}\n\nfunction all_checks() {\n\tmemory_check\n\tcpu_check\n\ttcp_check\n\tkernel_check\n}\n\n##\n# Color  Variables\n##\ngreen='\\e[32m'\nblue='\\e[34m'\nclear='\\e[0m'\n\n##\n# Color Functions\n##\n\nColorGreen(){\n\techo -ne $green$1$clear\n}\nColorBlue(){\n\techo -ne $blue$1$clear\n}\n\nmenu(){\necho -ne \"\nMy First Menu\n$(ColorGreen '1)') Memory usage\n$(ColorGreen '2)') CPU load\n$(ColorGreen '3)') Number of TCP connections \n$(ColorGreen '4)') Kernel version\n$(ColorGreen '5)') Check All\n$(ColorGreen '0)') Exit\n$(ColorBlue 'Choose an option:') \"\n        read a\n        case $a in\n\t        1) memory_check ; menu ;;\n\t        2) cpu_check ; menu ;;\n\t        3) tcp_check ; menu ;;\n\t        4) kernel_check ; menu ;;\n\t        5) all_checks ; menu ;;\n\t\t0) exit 0 ;;\n\t\t*) echo -e $red\"Wrong option.\"$clear; WrongCommand;;\n        esac\n}\n\n# Call the menu function\nmenu\n```\n\n----------------------------------------\n\nTITLE: Bash Case Statement Syntax\nDESCRIPTION: The general syntax structure for a case statement in Bash, showing pattern matching, multiple patterns with pipe separator, command execution, and the default case with asterisk wildcard.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncase $some_variable in\n\n  pattern_1)\n    commands\n    ;;\n\n  pattern_2| pattern_3)\n    commands\n    ;;\n\n  *)\n    default commands\n    ;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Debugging Bash Scripts with Debug Flag\nDESCRIPTION: Execute a bash script with debugging enabled using the -x flag, which prints each command to the terminal as it's executed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash -x ./your_script.sh\n```\n\n----------------------------------------\n\nTITLE: Automating LAMP Stack and WordPress Setup with Bash Script (Bash)\nDESCRIPTION: This Bash script automates the installation and configuration of a LAMP stack (Apache, MariaDB, PHP), sets up a secure Apache virtual host with SSL, and deploys WordPress. It defines several functions to handle each step: installing core LAMP components, configuring firewall and security, preparing Apache virtual hosts, setting up self-signed SSL, managing the database for WordPress, and finally installing and configuring WordPress itself (including permissions and security salts). Dependencies include apt, ufw, apache2, mariadb-server, PHP and related extensions, openssl, and curl. The script collects user input for domain and database details, and uses several system utilities (sed, chown, cp, find) to enforce correct configurations. Key parameters are the domain name and database credentials. Input is prompted interactively; output includes status messages and a configured web hosting environment. Limitations: Assumes a Debian/Ubuntu environment, root/sudo privileges, network connectivity for package installation, and may overwrite existing configurations.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho 'Please enter your domain of preference without www:'\nread DOMAIN\necho \"Please enter your Database username:\"\nread DBUSERNAME\necho \"Please enter your Database password:\"\nread DBPASSWORD\necho \"Please enter your Database name:\"\nread DBNAME\n\nip=`hostname -I | cut -f1 -d' '`\n\nlamp_install () {\n\tapt update -y\n\tapt install ufw\n\tufw enable\n\tufw allow OpenSSH\n\tufw allow in \"WWW Full\"\n\n\tapt install apache2 -y\n\tapt install mariadb-server\n\tmysql_secure_installation -y\n\tapt install php libapache2-mod-php php-mysql -y\n\tsed -i \"2d\" /etc/apache2/mods-enabled/dir.conf\n\tsed -i \"2i\\\tDirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm\" /etc/apache2/mods-enabled/dir.conf\n\tsystemctl reload apache2\n\t\n}\n\napache_virtual_host_setup () {\n\tmkdir /var/www/$DOMAIN\n\tchown -R $USER:$USER /var/www/$DOMAIN\n\n\techo \"<VirtualHost *:80>\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tServerName $DOMAIN\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tServerAlias www.$DOMAIN\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tServerAdmin webmaster@localhost\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tDocumentRoot /var/www/$DOMAIN\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e '\\tErrorLog ${APACHE_LOG_DIR}/error.log' >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e '\\tCustomLog ${APACHE_LOG_DIR}/access.log combined' >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo \"</VirtualHost>\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\ta2ensite $DOMAIN\n\ta2dissite 000-default\n\tsystemctl reload apache2\n\n}\n\n\nssl_config () {\n\topenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n\t\n\techo \"SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLHonorCipherOrder On\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"Header always set X-Frame-Options DENY\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"Header always set X-Content-Type-Options nosniff\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLCompression off\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLUseStapling on\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLStaplingCache \\\"shmcb:logs/stapling-cache(150000)\\\"\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLSessionTickets Off\" >> /etc/apache2/conf-available/ssl-params.conf\n\t\n\tcp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bak\n\tsed -i \"s/var\\/www\\/html/var\\/www\\/$DOMAIN/1\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"s/etc\\/ssl\\/certs\\/ssl-cert-snakeoil.pem/etc\\/ssl\\/certs\\/apache-selfsigned.crt/1\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"s/etc\\/ssl\\/private\\/ssl-cert-snakeoil.key/etc\\/ssl\\/private\\/apache-selfsigned.key/1\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"4i\\\\t\\tServerName $ip\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"22i\\\\tRedirect permanent \\\"/\\\" \\\"https://$ip/\\\"\" /etc/apache2/sites-available/000-default.conf\n\ta2enmod ssl\n\ta2enmod headers\n\ta2ensite default-ssl\n\ta2enconf ssl-params\n\tsystemctl reload apache2\n}\n\t\ndb_config () {\n\tmysql -e \"CREATE DATABASE $DBNAME;\"\n\tmysql -e \"GRANT ALL ON $DBNAME.* TO '$DBUSERNAME'@'localhost' IDENTIFIED BY '$DBPASSWORD' WITH GRANT OPTION;\"\n\tmysql -e \"FLUSH PRIVILEGES;\"\n}\n\nwordpress_config () {\n\tdb_config\n\n\t\n\tapt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip -y\n\tsystemctl restart apache2\n\tsed -i \"8i\\\\t<Directory /var/www/$DOMAIN/>\" /etc/apache2/sites-available/$DOMAIN.conf\n\tsed -i \"9i\\\\t\\tAllowOverride All\" /etc/apache2/sites-available/$DOMAIN.conf\n\tsed -i \"10i\\\\t</Directory>\" /etc/apache2/sites-available/$DOMAIN.conf\n\n\ta2enmod rewrite\n\tsystemctl restart apache2\n\n\tapt install curl\n\tcd /tmp\n\tcurl -O https://wordpress.org/latest.tar.gz\n\ttar xzvf latest.tar.gz\n\ttouch /tmp/wordpress/.htaccess\n\tcp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php\n\tmkdir /tmp/wordpress/wp-content/upgrade\n\tcp -a /tmp/wordpress/. /var/www/$DOMAIN\n\tchown -R www-data:www-data /var/www/$DOMAIN\n\tfind /var/www/$DOMAIN/ -type d -exec chmod 750 {} \\;\n\tfind /var/www/$DOMAIN/ -type f -exec chmod 640 {} \\;\n\tcurl -s https://api.wordpress.org/secret-key/1.1/salt/ >> /var/www/$DOMAIN/wp-config.php\n\techo \"define('FS_METHOD', 'direct');\" >> /var/www/$DOMAIN/wp-config.php\n\tsed -i \"51,58d\" /var/www/$DOMAIN/wp-config.php\n\tsed -i \"s/database_name_here/$DBNAME/1\" /var/www/$DOMAIN/wp-config.php\n\tsed -i \"s/username_here/$DBUSERNAME/1\" /var/www/$DOMAIN/wp-config.php\n\tsed -i \"s/password_here/$DBPASSWORD/1\" /var/www/$DOMAIN/wp-config.php\n}\n\nexecute () {\n\tlamp_install\n\tapache_virtual_host_setup\n\tssl_config\n\twordpress_config\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Bash If Statement Structure\nDESCRIPTION: The fundamental syntax for an if statement in Bash, showing the proper formatting with conditional test brackets, then keyword, commands, and closing fi keyword.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [[ some_test ]]\nthen\n    <commands>\nfi\n```\n\n----------------------------------------\n\nTITLE: Defining Shebang in Bash Script\nDESCRIPTION: Specifies the interpreter to be used for executing the script. This line tells the system to use the Bash shell.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Server Monitoring BASH Script for System Checks\nDESCRIPTION: A BASH script that performs system checks including memory usage, CPU load, TCP connections, and kernel version on a server. It uses functions to organize different checks and displays the server's hostname with each result.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/017-executing-bash-script-on-multiple-remote-server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n##\n# BASH script that checks the following:\n#   - Memory usage\n#   - CPU load\n#   - Number of TCP connections\n#   - Kernel version\n##\n\n##\n# Memory check\n##\nserver_name=$(hostname)\n\nfunction memory_check() {\n    echo \"#######\"\n\techo \"The current memory usage on ${server_name} is: \"\n\tfree -h\n\techo \"#######\"\n}\n\n\nfunction cpu_check() {\n    echo \"#######\"\n\techo \"The current CPU load on ${server_name} is: \"\n    echo \"\"\n\tuptime\n    echo \"#######\"\n}\n\nfunction tcp_check() {\n    echo \"#######\"\n\techo \"Total TCP connections on ${server_name}: \"\n    echo \"\"\n\tcat  /proc/net/tcp | wc -l\n    echo \"#######\"\n}\n\nfunction kernel_check() {\n    echo \"#######\"\n\techo \"The exact Kernel version on ${server_name} is: \"\n\techo \"\"\n\tuname -r\n    echo \"#######\"\n}\n\nfunction all_checks() {\n\tmemory_check\n\tcpu_check\n\ttcp_check\n\tkernel_check\n}\n\nall_checks\n```\n\n----------------------------------------\n\nTITLE: Apache Virtual Host Configuration Function\nDESCRIPTION: This function sets up an Apache virtual host for the WordPress site. It creates the necessary directory structure, sets appropriate permissions, creates and configures the virtual host configuration file, and enables the site.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napache_virtual_host_setup () {\n\tmkdir /var/www/$DOMAIN\n\tchown -R $USER:$USER /var/www/$DOMAIN\n\n\techo \"<VirtualHost *:80>\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tServerName $DOMAIN\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tServerAlias www.$DOMAIN\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tServerAdmin webmaster@localhost\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e \"\\tDocumentRoot /var/www/$DOMAIN\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e '\\tErrorLog ${APACHE_LOG_DIR}/error.log' >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo -e '\\tCustomLog ${APACHE_LOG_DIR}/access.log combined' >> /etc/apache2/sites-available/$DOMAIN.conf\n\techo \"</VirtualHost>\" >> /etc/apache2/sites-available/$DOMAIN.conf\n\ta2ensite $DOMAIN\n\ta2dissite 000-default\n\tsystemctl reload apache2\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions in Bash Scripts - Bash\nDESCRIPTION: Demonstrates two ways to define a function in Bash: with the 'function' keyword, and without it. Shows how to structure function blocks for modular scripting. No special dependencies required. Both declarations create a user-defined function that can be called from anywhere in the script. No arguments are processed in this template.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/012-bash-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfunction function_name() {\n    your_commands\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nfunction_name() {\n    your_commands\n}\n```\n\n----------------------------------------\n\nTITLE: Piping Output of `ls` to `grep` in Bash\nDESCRIPTION: This command demonstrates piping. The standard output (STDOUT) of the `ls` command (listing directory contents) is sent as standard input (STDIN) to the `grep \".txt\"` command using the pipe (`|`). `grep` then filters this input, showing only lines containing \".txt\".\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nls | grep \".txt\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Bash While Loop Structure\nDESCRIPTION: This snippet shows the general structure of a `while` loop in Bash. The loop continues to execute `your_commands` as long as the specified `[ your_condition ]` evaluates to true.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhile [ your_condition ]\ndo\n    your_commands\ndone\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Check Function in Bash\nDESCRIPTION: Defines a function that checks and displays the current memory usage of the server. It uses the 'free' command to show memory information.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfunction memory_check() {\n    echo \"\"\n\techo \"The current memory usage on ${server_name} is: \"\n\tfree -h\n\techo \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Script on Multiple Remote Servers Using SSH\nDESCRIPTION: A BASH for loop that iterates through a list of servers in a text file and executes a script on each server remotely using SSH. This avoids having to manually copy the script to each server or connect to them individually.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/017-executing-bash-script-on-multiple-remote-server.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfor server in $(cat servers.txt) ; do ssh your_user@${server} 'bash -s' < ./remote_check.sh ; done\n```\n\n----------------------------------------\n\nTITLE: Basic If Statement Structure in Bash\nDESCRIPTION: Shows the fundamental syntax of an if statement in Bash scripting, demonstrating the required structure with condition testing and command execution.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [[ some_test ]]\nthen\n    <commands>\nfi\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Bash Functions - Bash\nDESCRIPTION: Shows how to pass positional arguments to a Bash function. The example function 'hello' prints a personalized greeting using the first argument supplied during invocation. Requires Bash interpreter; no external dependencies. The function accepts one parameter, accessed as $1, and outputs the customized greeting.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/012-bash-functions.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfunction hello() {\n    echo \"Hello $1!\"\n}\n\nhello DevDojo\n```\n\n----------------------------------------\n\nTITLE: Documenting Bash Functions with Structured Comments - Bash\nDESCRIPTION: Illustrates proper documentation for Bash functions using a detailed comment block describing function purposes, globals, arguments, outputs, and return values. The documented 'hello' function prints a customized greeting based on input and returns a standard exit status. No dependencies beyond Bash; the single argument is accessed as $1, and output is written to standard output.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/012-bash-functions.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#######################################\n# Description: Hello function\n# Globals:\n#   None\n# Arguments:\n#   Single input argument\n# Outputs:\n#   Value of input argument\n# Returns:\n#   0 if successful, non-zero on error.\n#######################################\nfunction hello() {\n    echo \"Hello $1!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Memory, CPU, TCP Connections, and Kernel with Bash Script - Bash\nDESCRIPTION: This Bash script defines and executes a set of system checks—memory usage, CPU load, total TCP connections, and kernel version—using separate functions for modularity. Each check includes descriptive output and leverages standard Linux commands like free, uptime, wc, and uname. No external dependencies are required beyond a standard Bash environment; the expected input is none, and the output is a sequential summary report printed to standard output. Save as 'remote_check.sh' and execute via Bash shell.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/017-executing-bash-script-on-multiple-remote-server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\\n\\n##\\n# BASH script that checks the following:\\n#   - Memory usage\\n#   - CPU load\\n#   - Number of TCP connections\\n#   - Kernel version\\n##\\n\\n##\\n# Memory check\\n##\\nserver_name=$(hostname)\\n\\nfunction memory_check() {\\n    echo \"#######\"\\n\\techo \"The current memory usage on ${server_name} is: \"\\n\\tfree -h\\n\\techo \"#######\"\\n}\\n\\n\\nfunction cpu_check() {\\n    echo \"#######\"\\n\\techo \"The current CPU load on ${server_name} is: \"\\n    echo \"\"\\n\\tuptime\\n    echo \"#######\"\\n}\\n\\nfunction tcp_check() {\\n    echo \"#######\"\\n\\techo \"Total TCP connections on ${server_name}: \"\\n    echo \"\"\\n\\tcat  /proc/net/tcp | wc -l\\n    echo \"#######\"\\n}\\n\\nfunction kernel_check() {\\n    echo \"#######\"\\n\\techo \"The exact Kernel version on ${server_name} is: \"\\n\\techo \"\"\\n\\tuname -r\\n    echo \"#######\"\\n}\\n\\nfunction all_checks() {\\n\\tmemory_check\\n\\tcpu_check\\n\\ttcp_check\\n\\tkernel_check\\n}\\n\\nall_checks\n```\n\n----------------------------------------\n\nTITLE: Complete Bash Script for QuizAPI Integration\nDESCRIPTION: A full Bash script that fetches a question from QuizAPI, extracts relevant information, and formats the output.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n##\n# Make an API call to QuizAPI and store the output in a variable\n##\noutput=$(curl 'https://quizapi.io/api/v1/questions?apiKey=API_KEY&limit=10' 2>/dev/null)\n\n##\n# Get only the first question\n##\noutput=$(echo $output | jq .[0])\n\n##\n# Get the question\n##\nquestion=$(echo $output | jq .question)\n\n##\n# Get the answers\n##\n\nanswer_a=$(echo $output | jq .answers.answer_a)\nanswer_b=$(echo $output | jq .answers.answer_b)\nanswer_c=$(echo $output | jq .answers.answer_c)\nanswer_d=$(echo $output | jq .answers.answer_d)\n\n##\n# Output the question\n##\n\necho \"\nQuestion: ${question}\n\nA) ${answer_a}\nB) ${answer_b}\nC) ${answer_c}\nD) ${answer_d}\n\n\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Accessing Bash Array Elements\nDESCRIPTION: Demonstrates how to initialize a Bash array and access its elements using different indexing techniques. Shows how to get the last element, all elements, and the total number of elements in the array.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/008-bash-arrays.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmy_array=(\"value 1\" \"value 2\" \"value 3\" \"value 4\")\n```\n\nLANGUAGE: bash\nCODE:\n```\necho ${my_array[1]}\n```\n\nLANGUAGE: bash\nCODE:\n```\necho ${my_array[-1]}\n```\n\nLANGUAGE: bash\nCODE:\n```\necho ${my_array[@]}\n```\n\nLANGUAGE: bash\nCODE:\n```\necho ${#my_array[@]}\n```\n\n----------------------------------------\n\nTITLE: Checking Successful Command Exit Status in Bash\nDESCRIPTION: Uses the `[[ $? -eq 0 ]]` conditional expression in Bash to check if the exit status (`$?`) of the most recently executed command is equal to 0, indicating successful execution without errors.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n[[ $? -eq 0 ]]\n```\n\n----------------------------------------\n\nTITLE: Checking Failed Command Exit Status in Bash\nDESCRIPTION: Uses the `[[ $? -gt 0 ]]` conditional expression in Bash to check if the exit status (`$?`) of the most recently executed command is greater than 0, indicating that the command execution was unsuccessful or encountered errors.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n[[ $? -gt 0 ]]\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Bash For Loop Structure\nDESCRIPTION: This snippet outlines the fundamental syntax for a `for` loop in Bash. It shows how to iterate over a list (`${list}`), assigning each item to a variable (`var`) and executing a set of commands (`your_commands`) for each item within the `do...done` block.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor var in ${list}\ndo\n    your_commands\ndone\n```\n\n----------------------------------------\n\nTITLE: Generating Random Alphanumeric String with /dev/urandom using Bash\nDESCRIPTION: Demonstrates generating a random string using `/dev/urandom`, considered suitable for most cryptographic purposes. The command reads from `/dev/urandom`, uses `tr -cd '[:alnum:]'` to delete all characters except alphanumeric ones, pipes the result to `fold -w10` to wrap lines at 10 characters, and uses `head -n 1` to take the first line (i.e., the first 10 alphanumeric characters).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntr -cd '[:alnum:]' < /dev/urandom | fold -w10 | head -n 1\n```\n\n----------------------------------------\n\nTITLE: Complete Server Status Check Bash Script\nDESCRIPTION: A full Bash script that checks various aspects of server status including memory usage, CPU load, TCP connections, and kernel version. It defines separate functions for each check and a function to run all checks.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n##\n# BASH script that checks:\n#   - Memory usage\n#   - CPU load\n#   - Number of TCP connections\n#   - Kernel version\n##\n\nserver_name=$(hostname)\n\nfunction memory_check() {\n    echo \"\"\n\techo \"Memory usage on ${server_name} is: \"\n\tfree -h\n\techo \"\"\n}\n\nfunction cpu_check() {\n    echo \"\"\n\techo \"CPU load on ${server_name} is: \"\n    echo \"\"\n\tuptime\n    echo \"\"\n}\n\nfunction tcp_check() {\n    echo \"\"\n\techo \"TCP connections on ${server_name}: \"\n    echo \"\"\n\tcat  /proc/net/tcp | wc -l\n    echo \"\"\n}\n\nfunction kernel_check() {\n    echo \"\"\n\techo \"Kernel version on ${server_name} is: \"\n\techo \"\"\n\tuname -r\n    echo \"\"\n}\n\nfunction all_checks() {\n\tmemory_check\n\tcpu_check\n\ttcp_check\n\tkernel_check\n}\n\nall_checks\n```\n\n----------------------------------------\n\nTITLE: Looping Through a Number Range with Bash For Loop\nDESCRIPTION: This Bash script shows how to use brace expansion (`{1..10}`) within a `for` loop to iterate through a sequence of numbers from 1 to 10, printing each number during the loop.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor num in {1..10}\ndo\n    echo ${num}\ndone\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Existence in Bash\nDESCRIPTION: Uses the `[[ -d ${file} ]]` conditional expression in Bash to verify if the path specified by `${file}` exists and is a directory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[[ -d ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration Function\nDESCRIPTION: This function configures SSL for the WordPress site by generating a self-signed certificate, configuring SSL parameters with secure settings, updating the Apache virtual host configuration to use SSL, and enabling the necessary modules.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssl_config () {\n\topenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n\t\n\techo \"SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLHonorCipherOrder On\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"Header always set X-Frame-Options DENY\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"Header always set X-Content-Type-Options nosniff\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLCompression off\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLUseStapling on\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLStaplingCache \\\"shmcb:logs/stapling-cache(150000)\\\"\" >> /etc/apache2/conf-available/ssl-params.conf\n\techo \"SSLSessionTickets Off\" >> /etc/apache2/conf-available/ssl-params.conf\n\t\n\tcp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bak\n\tsed -i \"s/var\\/www\\/html/var\\/www\\/$DOMAIN/1\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"s/etc\\/ssl\\/certs\\/ssl-cert-snakeoil.pem/etc\\/ssl\\/certs\\/apache-selfsigned.crt/1\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"s/etc\\/ssl\\/private\\/ssl-cert-snakeoil.key/etc\\/ssl\\/private\\/apache-selfsigned.key/1\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"4i\\\\\\t\\tServerName $ip\" /etc/apache2/sites-available/default-ssl.conf\n\tsed -i \"22i\\\\\\tRedirect permanent \\\"/\\\" \\\"https://$ip/\\\"\" /etc/apache2/sites-available/000-default.conf\n\ta2enmod ssl\n\ta2enmod headers\n\ta2ensite default-ssl\n\ta2enconf ssl-params\n\tsystemctl reload apache2\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Conditions with Logical AND/OR in Bash\nDESCRIPTION: Demonstrates combining two Bash conditional expressions (`[[ test_case_1 ]]` and `[[ test_case_2 ]]`) using the logical AND (`&&`) and logical OR (`||`) operators. The AND requires both conditions to be true, while the OR requires at least one to be true.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n[[ test_case_1 ]] && [[ test_case_2 ]] # And\n[[ test_case_1 ]] || [[ test_case_2 ]] # Or\n```\n\n----------------------------------------\n\nTITLE: Case Statement Syntax in Bash\nDESCRIPTION: Illustrates the basic structure of a case statement in Bash, showing pattern matching syntax, multiple patterns, and default case handling. This provides a template for implementing switch-case logic.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncase $some_variable in\n\n  pattern_1)\n    commands\n    ;;\n\n  pattern_2| pattern_3)\n    commands\n    ;;\n\n  *)\n    default commands\n    ;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Checking Non-Zero-Length String in Bash\nDESCRIPTION: Uses the `[[ -n ${string} ]]` conditional expression in Bash to check if the length of the value held by the `${string}` variable is non-zero (i.e., the string is not empty).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n[[ -n ${string} ]]\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence (Standard) in Bash\nDESCRIPTION: Uses the `[[ -e ${file} ]]` conditional expression in Bash to check if a file or directory specified by the variable `${file}` exists. This is the generally preferred test for existence.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[[ -e ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Prompting for Input with read -p - Bash - Bash\nDESCRIPTION: This Bash script demonstrates a more concise way of prompting for user input by using the read command with the -p flag, which allows the prompt to be displayed within the read statement. The user's input is assigned to the variable 'name' and is then used to print a personalized greeting. This method reduces code length and increases clarity while retaining the same input/output expectations as the previous example. The script depends only on the standard Bash shell environment.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/005-bash-user-input.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"What is your name? \" name\n\necho \"Hi there $name\"\necho \"Welcome to DevDojo!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Bash Until Loop\nDESCRIPTION: This Bash script exemplifies an `until` loop driven by a counter. It initializes `count` to 1. The loop continues executing until the condition `[[ $count -gt 10 ]]` becomes true (i.e., while `count` is less than or equal to 10). Inside the loop, it prints the current `count` and increments it.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncount=1\nuntil [[ $count -gt 10 ]]\ndo\n    echo $count\n    ((count++))\ndone\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop Structure in Bash\nDESCRIPTION: Demonstrates the basic structure of a for loop in Bash, showing the syntax pattern with placeholder variables.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor var in ${list}\ndo\n    ihre_befehle\ndone\n```\n\n----------------------------------------\n\nTITLE: Appending `echo` Output to a File using `>>` in Bash\nDESCRIPTION: This sequence first overwrites `file.txt` with \"Hello World!\" using `>`. Then, it appends \"How are you?\" to the end of `file.txt` using the `>>` operator, preserving the original content.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hello World!\" > file.txt\necho \"How are you?\" >> file.txt\n```\n\n----------------------------------------\n\nTITLE: Complete Bash Script for Generating Random Passwords\nDESCRIPTION: Provides the full Bash script for generating random passwords. It includes the shebang, clears the screen, prompts the user for the desired password length, and then uses a `for` loop to generate and print 10 random alphanumeric passwords of that length using `/dev/urandom`, `tr`, `fold`, and `head`. Finally, it prints a goodbye message. Note: The line `printf \"$pass_output\\n\"` might be redundant or incorrect as the loop already prints each password; `pass_output` is not assigned.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n#=======================================\n# Password generator with login option\n#=======================================\n\n# Ask user for the string length\nclear\nprintf \"\\n\"\nread -p \"How many characters you would like the password to have? \" pass_length\nprintf \"\\n\"\n\n# This is where the magic happens!\n# Generate a list of 10 strings and cut it to the desired value provided from the user\n\nfor i in {1..10}; do (tr -cd '[:alnum:]' < /dev/urandom | fold -w${pass_length} | head -n 1); done\n\n# Print the strings\nprintf \"$pass_output\\n\"\nprintf \"Goodbye, ${USER}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Bash Multiple Condition Check with AND Operator\nDESCRIPTION: A script that uses the AND (&&) operator to check multiple conditions: verifying that the user is neither the admin nor root. This demonstrates combining logical operators in Bash conditionals.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nadmin=\"devdojo\"\n\nread -p \"Enter your username? \" username\n\n# Check if the username provided is the admin\n\nif [[ \"${username}\" != \"${admin}\" ]] && [[ $EUID != 0 ]] ; then\n    echo \"You are not the admin or root user, but please be safe!\"\nelse\n    echo \"You are the admin user! This could be very destructive!\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Arguments in Bash\nDESCRIPTION: Shows how to access individual command-line arguments using $1, $2, $3, etc. in a Bash script.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/007-bash-arguments.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Argument one is $1\"\necho \"Argument two is $2\"\necho \"Argument three is $3\"\n```\n\n----------------------------------------\n\nTITLE: Redirecting STDOUT and STDERR to Separate Files in Bash\nDESCRIPTION: This command executes a script (`./install_package.sh`). Its standard output (STDOUT) is redirected to `output.txt` using `>`, and its standard error (STDERR) is redirected to `error.txt` using `2>`.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./install_package.sh > output.txt 2> error.txt\n```\n\n----------------------------------------\n\nTITLE: Redirecting STDOUT and STDERR to the Same File (Concise) in Bash\nDESCRIPTION: This command executes `./install_package.sh`, redirecting its standard output (STDOUT) to `file.txt` using `>`. Then, `2>&1` redirects standard error (STDERR, file descriptor 2) to the current location of standard output (file descriptor 1), which is `file.txt`. This is the standard way to send both streams to the same file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./install_package.sh > file.txt 2>&1\n```\n\n----------------------------------------\n\nTITLE: Checking Non-Empty File in Bash\nDESCRIPTION: Uses the `[[ -s ${file} ]]` conditional expression in Bash to check if the file specified by `${file}` exists and has a size greater than zero (is not empty).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[[ -s ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Defining Color Functions in Bash\nDESCRIPTION: This snippet creates color variables and functions to enhance the visual presentation of text in the terminal using ANSI color codes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/016-creating-an-interactive-menu-in-bash.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n##\n# Color  Variables\n##\ngreen='\\e[32m'\nblue='\\e[34m'\nclear='\\e[0m'\n\n##\n# Color Functions\n##\n\nColorGreen(){\n\techo -ne $green$1$clear\n}\nColorBlue(){\n\techo -ne $blue$1$clear\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing All Arguments in Bash\nDESCRIPTION: Demonstrates how to access all command-line arguments at once using $@ in a Bash script.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/007-bash-arguments.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"All arguments: $@\"\n```\n\n----------------------------------------\n\nTITLE: Redirecting Multi-line Input to `cat` using Heredoc in Bash\nDESCRIPTION: This snippet demonstrates using a Heredoc (`<< EOF ... EOF`) to provide multiple lines of text as standard input (STDIN) to the `cat` command. `cat` then prints this input to standard output (STDOUT).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF\nHello World!\nHow are you?\nEOF\n```\n\n----------------------------------------\n\nTITLE: Main Execution Function\nDESCRIPTION: This function orchestrates the entire WordPress installation process by calling all the previously defined functions in the correct order: LAMP installation, Apache virtual host setup, SSL configuration, and WordPress configuration.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexecute () {\n\tlamp_install\n\tapache_virtual_host_setup\n\tssl_config\n\twordpress_config\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Output with jq\nDESCRIPTION: Command to fetch data from QuizAPI and format the JSON output using jq.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=10\" | jq\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Menu in Bash\nDESCRIPTION: This function creates an interactive menu with multiple options, reads user input, and executes different functions based on the selection using a case statement.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/016-creating-an-interactive-menu-in-bash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmenu(){\necho -ne \"\nMy First Menu\n$(ColorGreen '1)') Memory usage\n$(ColorGreen '2)') CPU load\n$(ColorGreen '3)') Number of TCP connections\n$(ColorGreen '4)') Kernel version\n$(ColorGreen '5)') Check All\n$(ColorGreen '0)') Exit\n$(ColorBlue 'Choose an option:') \"\n        read a\n        case $a in\n\t        1) memory_check ; menu ;;\n\t        2) cpu_check ; menu ;;\n\t        3) tcp_check ; menu ;;\n\t        4) kernel_check ; menu ;;\n\t        5) all_checks ; menu ;;\n\t\t0) exit 0 ;;\n\t\t*) echo -e $red\"Wrong option.\"$clear; WrongCommand;;\n        esac\n}\n```\n\n----------------------------------------\n\nTITLE: Bash If-Else Statement Example with User Input\nDESCRIPTION: A script that asks for a name and responds differently based on whether input was provided. It uses the -z test to check for empty input and provides appropriate feedback in each case.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Bash if statement example\n\nread -p \"What is your name? \" name\n\nif [[ -z ${name} ]]\nthen\n    echo \"Please enter your name!\"\nelse\n    echo \"Hi there ${name}\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Input Validation Using If Statement in Bash\nDESCRIPTION: Demonstrates a simple if statement that prompts for user input and validates if the name was provided. It uses the -z test operator to check if the variable is empty.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Bash if statement beispiel\n\nread -p \"Wie heißt du? \" name\n\nif [[ -z ${name} ]]\nthen\n    echo \"Bitte gebe deinen Namen ein!\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Script with Multiple Variables - Bash - bash\nDESCRIPTION: A Bash script with shebang, defining 'name' and 'greeting' variables and echoing them together. Demonstrates use of multiple variables and formatted output. No dependencies or parameters required, outputs the composed greeting.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nname=\"DevDojo\"\ngreeting=\"Hello\"\n\necho \"$greeting $name\"\n```\n\n----------------------------------------\n\nTITLE: Using Comments in a Simple Bash Script\nDESCRIPTION: This example showcases a complete Bash script that incorporates comments to explain different sections. The script starts with a shebang, uses comments to describe the purpose of prompting the user for input and greeting them, reads user input using 'read', and prints messages using 'echo'. Comments enhance the script's readability and maintainability.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/006-bash-comments.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Ask the user for their name\n\nread -p \"What is your name? \" name\n\n# Greet the user\necho \"Hi there $name\"\necho \"Welcome to DevDojo!\"\n```\n\n----------------------------------------\n\nTITLE: Running Summarization Script on Apache Access Log with Bash\nDESCRIPTION: This example command runs the 'spike_check' script specifically on the default Apache access log file for Ubuntu systems. The script processes the log and outputs a summary including request statistics and IP address information. Requires access to '/var/log/apache2/access.log' and that the script is already executable.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./spike_check /var/log/apache2/access.log\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Function in Bash\nDESCRIPTION: Demonstrates how to define a function and then call it in a Bash script. This example defines and calls the memory_check function.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Define the function\nfunction memory_check() {\n    echo \"\"\n\techo \"The current memory usage on ${server_name} is: \"\n\tfree -h\n\techo \"\"\n}\n\n# Call the function\nmemory_check\n```\n\n----------------------------------------\n\nTITLE: Fetching First Element from QuizAPI and Formatting with jq - Bash\nDESCRIPTION: This command fetches the JSON array from QuizAPI using curl, then pipes the result to jq to return only the first array element using .[0]. It requires a valid API_KEY and both curl and jq installed. Input is the QuizAPI response; output is the first question object.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=10\" | jq.[0]\n```\n\n----------------------------------------\n\nTITLE: For Loop Example with User List in Bash\nDESCRIPTION: Example of a for loop that iterates through a list of users stored in a variable and prints each user name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nusers=\"devdojo bobby tony\"\n\nfor user in ${users}\ndo\n    echo \"${user}\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Exiting Nested Loops with Bash Break\nDESCRIPTION: This script demonstrates using `break [n]` to exit multiple nested loops in Bash. It has an outer `for` loop (variable `a`) and an inner `for` loop (variable `b`). When the inner loop variable `b` becomes greater than 5, the `break 2` command is executed, which terminates both the inner loop and the outer loop immediately.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor (( a = 1; a < 10; a++ ))\ndo\n    echo \"outer loop: $a\"\n    for (( b = 1; b < 100; b++ ))\n    do\n        if [[ $b -gt 5 ]] \n        then\n            break 2\n        fi\n        echo \"Inner loop: $b \"\n    done\ndone\n```\n\n----------------------------------------\n\nTITLE: Redirecting `echo` Output to a File (Overwrite) in Bash\nDESCRIPTION: This command uses the `>` operator to redirect the standard output (STDOUT) of the `echo` command to a file named `file.txt`. If `file.txt` exists, its contents are overwritten; otherwise, the file is created.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hello World!\" > file.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Bash Break Statement Syntax\nDESCRIPTION: This snippet outlines the syntax for the `break` statement in Bash loops. `break` immediately terminates the execution of the current loop. The optional argument `[n]` allows exiting from the n-th enclosing loop in nested loop structures.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbreak [n]\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Bash Until Loop Structure\nDESCRIPTION: This snippet presents the basic syntax of an `until` loop in Bash. Unlike `while`, the `until` loop executes `your_commands` repeatedly as long as the specified `[[ your_condition ]]` evaluates to false. It stops once the condition becomes true.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuntil [[ your_condition ]]\ndo\n    your_commands\ndone\n```\n\n----------------------------------------\n\nTITLE: String Comparison in Bash If-Else Statement\nDESCRIPTION: Shows how to compare string values in a conditional statement to check if the input username matches an admin username, demonstrating string equality testing.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nadmin=\"devdojo\"\n\nread -p \"Bitte gebe den Nutzernamen ein \" username\n\n# Überprüfen ob der eingegebene Benutzername der Administrator ist\n\nif [[ \"${username}\" == \"${admin}\" ]] ; then\n    echo \"Du bist der Admin!\"\nelse\n    echo \"Du bist NICHT der Admin!\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Complex Command Pipeline for File Ownership Analysis in Bash\nDESCRIPTION: This advanced example chains multiple commands using pipes (`|`) to analyze file ownership. `ls -l` lists files, `tail` skips the header, `sed` normalizes spaces, `cut` extracts the owner field (3rd field), `sort` sorts owners, and `uniq -c` counts occurrences for each owner.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nls -l /projects/bash_scripts | tail -n +2 | sed 's/\\s\\s*/ /g' | cut -d ' ' -f 3 | sort | uniq -c\n```\n\n----------------------------------------\n\nTITLE: Using `cat` with a Custom Delimiter Heredoc in Bash\nDESCRIPTION: This demonstrates a Heredoc using `randomword1` as the custom start and end delimiter. The lines between the delimiters are passed as standard input to the `cat` command, which then prints them to standard output.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncat << randomword1\n\tThis script will print these lines on the terminal.\n\tNote that cat can read from standard input. Using this heredoc, we can\n\tcreate a temporary file with these lines as it's content and pipe that\n\tinto cat.\nrandomword1\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a List with Bash For Loop\nDESCRIPTION: This script demonstrates a practical `for` loop in Bash. It defines a space-separated string of usernames in the `users` variable and then iterates through each username, printing it to the console.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nusers=\"devdojo bobby tony\"\n\nfor user in ${users}\ndo\n    echo \"${user}\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers (Less Than) in Bash\nDESCRIPTION: Uses the `[[ ${arg1} -lt ${arg2} ]]` arithmetic conditional expression in Bash to check if the numerical value of `${arg1}` is less than the numerical value of `${arg2}`. Both arguments should be integers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${arg1} -lt ${arg2} ]]\n```\n\n----------------------------------------\n\nTITLE: For Loop with Number Range in Bash\nDESCRIPTION: Demonstrates how to use a for loop to iterate through a range of numbers from 1 to 10 using Bash's brace expansion.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor num in {1..10}\ndo\n    echo ${num}\ndone\n```\n\n----------------------------------------\n\nTITLE: Array Slicing and Element Access in Bash\nDESCRIPTION: Illustrates array slicing techniques in Bash, including accessing single elements, printing a range of elements, and printing elements from a specific index to the end of the array.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/008-bash-arrays.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\narray=(\"A\" \"B\" \"C\" \"D\" \"E\")\n\n# Print entire array\necho \"${array[@]}\"  # Output: A B C D E\n\n# Access a single element\necho \"${array[1]}\"  # Output: B\n\n# Print a range of elements (requires Bash 4.0+)\necho \"${array[@]:1:3}\"  # Output: B C D\n\n# Print from an index to the end\necho \"${array[@]:3}\"  # Output: D E\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers (Greater Than or Equal) in Bash\nDESCRIPTION: Uses the `[[ ${arg1} -ge ${arg2} ]]` arithmetic conditional expression in Bash to check if the numerical value of `${arg1}` is greater than or equal to the numerical value of `${arg2}`. Both arguments should be integers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${arg1} -ge ${arg2} ]]\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Function\nDESCRIPTION: This function creates a MySQL/MariaDB database for WordPress, creates a database user with the necessary privileges, and flushes the privileges to apply the changes immediately.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndb_config () {\n\tmysql -e \"CREATE DATABASE $DBNAME;\"\n\tmysql -e \"GRANT ALL ON $DBNAME.* TO '$DBUSERNAME'@'localhost' IDENTIFIED BY '$DBPASSWORD' WITH GRANT OPTION;\"\n\tmysql -e \"FLUSH PRIVILEGES;\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Printing Multiple Passwords in Bash Loop\nDESCRIPTION: This snippet demonstrates the core password generation logic within a loop. It iterates 10 times (`for i in {1..10}`). In each iteration, it generates a random alphanumeric string of length specified by the `pass_length` variable using `/dev/urandom`, `tr`, `fold`, and `head`. The generated password for each iteration is printed to standard output by the command substitution itself. The final `printf` commands attempt to print a variable `pass_output` (which is not assigned in the snippet) and a goodbye message.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# This is where the magic happens!\n# Generate a list of 10 strings and cut it to the desired value provided from the user\n\nfor i in {1..10}; do (tr -cd '[:alnum:]' < /dev/urandom | fold -w${pass_length} | head -n 1); done\n\n# Print the strings\nprintf \"$pass_output\\n\"\nprintf \"Goodbye, ${USER}\\n\"\n```\n\n----------------------------------------\n\nTITLE: String Slicing in Bash\nDESCRIPTION: Demonstrates string slicing operations in Bash, including extracting substrings from a specific index, with a specified length, and handling cases where the requested length exceeds the remaining characters.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/008-bash-arrays.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ntext=\"ABCDE\"\n\n# Extract from index 0, maximum 2 characters\necho \"${text:0:2}\"  # Output: AB\n\n# Extract from index 3 to the end\necho \"${text:3}\"    # Output: DE\n\n# Extract 3 characters starting from index 1\necho \"${text:1:3}\"  # Output: BCD\n\n# If length exceeds remaining characters, it stops at the end\necho \"${text:3:3}\"  # Output: DE (only 2 characters available)\n```\n\nLANGUAGE: bash\nCODE:\n```\ntext=\"Hello, World!\"\n\n# Extract 5 characters starting from index 7\necho \"${text:7:5}\"  # Output: World\n\n# Attempt to extract 10 characters starting from index 7\n# (even though only 6 characters remain)\necho \"${text:7:10}\"  # Output: World!\n```\n\n----------------------------------------\n\nTITLE: Setting Bash Interpreter Shebang\nDESCRIPTION: Specifies the interpreter (`/bin/bash`) to be used for executing the script. This line, known as the shebang, should always be the first line of a Bash script to ensure it's executed with the correct interpreter.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Checking Symbolic Link Existence (Standard) in Bash\nDESCRIPTION: Uses the `[[ -L ${file} ]]` conditional expression in Bash to check if the path specified by `${file}` exists and is a symbolic link. This is equivalent to `-h`.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n[[ -L ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Bash Root User Check\nDESCRIPTION: A script that checks if it's being run as the root user by examining the EUID (Effective User ID). If executed as root, it displays a warning message and exits to prevent potentially harmful operations.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nif (( $EUID == 0 )); then\n    echo \"Please do not run as root\"\n    exit\nfi\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings for Inequality in Bash\nDESCRIPTION: Uses the `[[ ${string1} != ${string2} ]]` conditional expression in Bash to check if the values of `${string1}` and `${string2}` are not equal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${string1} != ${string2} ]]\n```\n\n----------------------------------------\n\nTITLE: Bash Case Statement Example with Car Brands\nDESCRIPTION: A complete script using a case statement to categorize car brands by country of origin. It demonstrates pattern matching, grouping multiple patterns, and providing a default fallback option.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"Enter the name of your car brand: \" car\n\ncase $car in\n\n  Tesla)\n    echo -n \"${car}'s car factory is in the USA.\"\n    ;;\n\n  BMW | Mercedes | Audi | Porsche)\n    echo -n \"${car}'s car factory is in Germany.\"\n    ;;\n\n  Toyota | Mazda | Mitsubishi | Subaru)\n    echo -n \"${car}'s car factory is in Japan.\"\n    ;;\n\n  *)\n    echo -n \"${car} is an unknown car brand\"\n    ;;\n\nesac\n```\n\n----------------------------------------\n\nTITLE: Case Statement for Car Brand Classification in Bash\nDESCRIPTION: A practical example of a case statement that categorizes car brands by country of origin. It demonstrates pattern matching with multiple options per case and includes a default case for handling unknown values.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"Gebe den Namen einer Automarke ein: \" car\n\ncase $car in\n\n  Tesla)\n    echo -n \"${car}'s fabrik steht in der USA.\"\n    ;;\n\n  BMW | Mercedes | Audi | Porsche)\n    echo -n \"${car}' fabrik steht in Deutschland.\"\n    ;;\n\n  Toyota | Mazda | Mitsubishi | Subaru)\n    echo -n \"${car}'s fabrik steht in Japan.\"\n    ;;\n\n  *)\n    echo -n \"${car} ist keine uns bekannte Automarke\"\n    ;;\n\nesac\n```\n\n----------------------------------------\n\nTITLE: Basic While Loop Structure in Bash\nDESCRIPTION: Shows the basic structure of a while loop in Bash with placeholder for the condition and commands.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhile [ ihre_bedingung ]\ndo\n    ihre_befehle\ndone\n```\n\n----------------------------------------\n\nTITLE: Checking Block Special File in Bash\nDESCRIPTION: Uses the `[[ -b ${file} ]]` conditional expression in Bash to determine if the file specified by `${file}` exists and is a block special file (e.g., a disk drive).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[[ -b ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Skipping Loop Iterations with Bash Continue\nDESCRIPTION: This Bash script demonstrates the use of `continue`. It iterates through numbers 1 to 5. If the loop variable `i` equals 2, it prints a message and executes `continue`, skipping the `echo \"i is equal to $i\"` command for that iteration and proceeding directly to the next number (3).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor i in 1 2 3 4 5\ndo\n    if [[ $i -eq 2 ]] \n    then\n        echo \"skipping number 2\"\n        continue\n    fi\n    echo \"i is equal to $i\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Assigning Variable in Bash\nDESCRIPTION: Shows how to assign the output of a command to a variable in Bash. In this case, it stores the server's hostname.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserver_name=$(hostname)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Bash While Loop\nDESCRIPTION: This Bash script demonstrates a `while` loop controlled by a counter. It initializes `counter` to 1 and loops as long as `counter` is less than or equal to 10 (`[[ $counter -le 10 ]]`). Inside the loop, it prints the counter's value and increments it using arithmetic expansion `((counter++))`. This ensures the loop runs exactly 10 times.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncounter=1\nwhile [[ $counter -le 10 ]]\ndo\n    echo $counter\n    ((counter++))\ndone\n```\n\n----------------------------------------\n\nTITLE: Basic Script with Variable and Echo - Bash - bash\nDESCRIPTION: Defines a Bash script that assigns 'DevDojo' to 'name' and echoes a message using the variable. The script includes a shebang and demonstrates combining variable assignment and usage. No additional dependencies; input/output is managed via standard input/output.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nname=\"DevDojo\"\n\necho \"Hi there $name\"\n```\n\n----------------------------------------\n\nTITLE: General Syntax for Heredoc Redirection in Bash\nDESCRIPTION: This illustrates the general syntax for a Heredoc (`<<`). Text between `<< DELIMITER` and the final `DELIMITER` line (here `EOF`) is treated as standard input for the `COMMAND`. The delimiter can be any word.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND << EOF\n\tContentOfDocument\n\t...\n\t...\nEOF\n```\n\n----------------------------------------\n\nTITLE: Executing a Bash Script with Arguments\nDESCRIPTION: Demonstrates how to run a Bash script with command-line arguments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/007-bash-arguments.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.com your_argument\n```\n\n----------------------------------------\n\nTITLE: LAMP Stack Installation Function\nDESCRIPTION: This function handles the installation of the LAMP stack components: Linux updates, UFW firewall configuration, Apache2, MariaDB, and PHP with essential modules. It also configures Apache to prioritize PHP files in directory listings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlamp_install () {\n\tapt update -y\n\tapt install ufw\n\tufw enable\n\tufw allow OpenSSH\n\tufw allow in \"WWW Full\"\n\n\tapt install apache2 -y\n\tapt install mariadb-server\n\tmysql_secure_installation -y\n\tapt install php libapache2-mod-php php-mysql -y\n\tsed -i \"2d\" /etc/apache2/mods-enabled/dir.conf\n\tsed -i \"2i\\\\\tDirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm\" /etc/apache2/mods-enabled/dir.conf\n\tsystemctl reload apache2\n\t\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting First Element from JSON Array\nDESCRIPTION: Command to fetch data from QuizAPI and extract only the first element using jq.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=10\" | jq.[0]\n```\n\n----------------------------------------\n\nTITLE: Validating User Input with Bash While Loop\nDESCRIPTION: This script uses a `while` loop to validate user input in Bash. It prompts the user for their name using `read -p`. The `while` loop continues as long as the `name` variable is empty (`[[ -z ${name} ]]`), repeatedly prompting the user until a non-empty name is entered.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"What is your name? \" name\n\nwhile [[ -z ${name} ]]\ndo\n    echo \"Your name can not be blank. Please enter a valid name!\"\n    read -p \"Enter your name again? \" name\ndone\n\necho \"Hi there ${name}\"\n```\n\n----------------------------------------\n\nTITLE: Nested Loops with Break Level in Bash\nDESCRIPTION: Demonstrates how to use break with a level argument to exit multiple nested loops at once.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor (( a = 1; a < 10; a++ ))\ndo\n    echo \"Schleife außen: $a\"\n    for (( b = 1; b < 100; b++ ))\n    do\n        if [[ $b –gt 5 ]]\n        then\n            break 2\n        fi\n    echo \"Schleife innen: $b \"\n    done\ndone\n```\n\n----------------------------------------\n\nTITLE: Echoing Variable with Braces - Bash - bash\nDESCRIPTION: Uses 'echo' with the variable 'name' wrapped in curly braces, following best practice for variable referencing to avoid ambiguity. This ensures clearer code and reduces errors when concatenating variables. No dependencies are needed; input is the 'name' variable.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho ${name}\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de uso de continue en un bucle for\nDESCRIPTION: Demuestra cómo usar la declaración continue en un bucle for para saltar la iteración actual cuando se cumple una condición específica.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor i in 1 2 3 4 5\ndo\n    if [[ $i -eq 2 ]] \n    then\n        echo \"saltando el número 2\"\n        continue\n    fi\n    echo \"i es igual a $i\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Querying TCP Connections on Specific Ports - Bash\nDESCRIPTION: This command line snippet counts the number of active TCP connections on ports 80 or 443, excluding those in the LISTEN state. It pipes the output of the 'netstat' command through 'grep' filters and finally counts the resulting lines using 'wc -l'. This snippet requires net-tools installed, and it must be run in a terminal with the necessary permissions to access network statistics. The main input is the current state of network connections, and the output is a numeric value representing the count.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnetstat -plant | grep '80\\|443' | grep -v LISTEN | wc -l\n```\n\n----------------------------------------\n\nTITLE: Canalización compleja para estadísticas de propiedad de archivos en Bash\nDESCRIPTION: Este comando avanzado utiliza una cadena de pipes para listar archivos, procesar la salida y contar cuántos archivos posee cada usuario en un directorio específico, combinando varios comandos en secuencia.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nls -l /proyectos/bash_scripts | tail -n +2 | sed 's/\\s\\s*/ /g' | cut -d ' ' -f 3 | sort | uniq -c\n```\n\n----------------------------------------\n\nTITLE: Creating Alias with Informational Message - Bash\nDESCRIPTION: This customized alias named 'conn' outputs an informational message before running the netstat pipeline, improving readability. It prints 'Total connections on port 80 and 443:' followed by the computed value. The alias must be set in the shell; dependencies include netstat availability. Output is a message and a connection count, while input is via current network status.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nalias conn=\"echo 'Total connections on port 80 and 443:' ; netstat -plant | grep '80\\|443' | grep -v LISTEN | wc -l\"\n```\n\n----------------------------------------\n\nTITLE: Defining Bash Continue Statement Syntax\nDESCRIPTION: This snippet shows the syntax for the `continue` statement in Bash loops. `continue` skips the remaining commands in the current loop iteration and proceeds to the next iteration. The optional argument `[n]` specifies skipping to the next iteration of the n-th enclosing loop.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncontinue [n]\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de bucle while con contador en Bash\nDESCRIPTION: Demuestra cómo usar un bucle while con un contador para ejecutar un conjunto de comandos un número específico de veces.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncontador=1\nwhile [[ $contador -le 10 ]]\ndo\n    echo $contador\n    ((contador++))\ndone\n```\n\n----------------------------------------\n\nTITLE: Defining Function in Bash\nDESCRIPTION: Shows the basic structure of defining a function in Bash. This is a template for creating functions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfunction function_name() {\n    your_commands\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Delete to End of Line\nDESCRIPTION: Keyboard shortcut to delete everything from the cursor position to the end of the current line in the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + k\n```\n\n----------------------------------------\n\nTITLE: Persisting Informational Alias in Bash Profile - Bash\nDESCRIPTION: By inserting this command into the shell profile file (e.g., '~/.bashrc'), the defined alias becomes persistent across terminal sessions. This ensures the custom 'conn' alias remains available after logout or reboot. Dependency: user permissions to edit bash profile; netstat required. Input is via editing; output affects future shell environments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nalias conn=\"echo 'Total connections on port 80 and 443:' ; netstat -plant | grep '80\\|443' | grep -v LISTEN | wc -l\"\n```\n\n----------------------------------------\n\nTITLE: Prompting and Reading User Input - Bash - Bash\nDESCRIPTION: This Bash script prompts the user for their name using the echo command and stores the input in the variable 'name'. It then uses echo to greet the user and display a welcome message. The script requires Bash to execute, uses basic shell commands (echo, read), and all variables are handled as plain text strings. Input is provided via standard input and output is written to standard output. This approach is foundational for beginner shell scripts and does not handle edge cases or input validation.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/005-bash-user-input.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"What is your name?\"\nread name\n\necho \"Hi there $name\"\necho \"Welcome to DevDojo!\"\n```\n\n----------------------------------------\n\nTITLE: Accediendo a una variable en Bash usando el símbolo $\nDESCRIPTION: Este snippet muestra cómo acceder al valor de una variable en Bash utilizando el símbolo $ como prefijo del nombre de la variable.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $nombre\n```\n\n----------------------------------------\n\nTITLE: Checking File Executability in Bash\nDESCRIPTION: Uses the `[[ -x ${file} ]]` conditional expression in Bash to check if the file specified by `${file}` exists and is executable by the current user.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n[[ -x ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Bucle for con rango numérico en Bash\nDESCRIPTION: Ejemplo de cómo utilizar un bucle for para iterar sobre un rango de números del 1 al 10 utilizando la notación de llaves.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor num in {1..10}\ndo\n    echo ${num}\ndone\n```\n\n----------------------------------------\n\nTITLE: If-Elif-Else Statement for Number Evaluation in Bash\nDESCRIPTION: Shows how to use if, elif, and else together to handle multiple conditions. This example evaluates whether a number is positive, negative, or zero using numeric comparison operators.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"Gebe eine Zahl ein: \" num\n\nif [[ $num -gt 0 ]] ; then\n    echo \"Die Zahl ist positiv\"\nelif [[ $num -lt 0 ]] ; then\n    echo \"Die Zahl ist negativ\"\nelse\n    echo \"Die Zahl ist 0\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Continue Statement Example in Bash\nDESCRIPTION: Example of using the continue statement to skip a specific iteration (number 2) in a for loop.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor i in 1 2 3 4 5\ndo\n    if [[ $i –eq 2 ]]\n    then\n        echo \"ueberspringe nummer 2\"\n    continue\n    fi\n    echo \"i ist gleich $i\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Bash If-Else Statement for Admin User Check\nDESCRIPTION: A script that checks if the provided username matches a predefined admin username. It demonstrates string comparison within conditional statements using the equality operator.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nadmin=\"devdojo\"\n\nread -p \"Enter your username? \" username\n\n# Check if the username provided is the admin\n\nif [[ \"${username}\" == \"${admin}\" ]] ; then\n    echo \"You are the admin user!\"\nelse\n    echo \"You are NOT the admin user!\"\nfi\n```\n\n----------------------------------------\n\nTITLE: General Syntax for Command Piping in Bash\nDESCRIPTION: This shows the general syntax for piping commands in Bash. `command1`'s output is sent to `command2`'s input via `|` (pipe). `|&` redirects both STDOUT and STDERR. Optional `time` and negation `!` can precede commands.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n[time [-p]] [!] command1 [ | or |& command2 ] …\n```\n\n----------------------------------------\n\nTITLE: Break Statement Example in Bash\nDESCRIPTION: Example of using the break statement to exit a while loop when a counter reaches 5.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nnum=1\nwhile [[ $num –lt 10 ]]\ndo\n    if [[ $num –eq 5 ]]\n    then\n        break\n    fi\n    ((num++))\ndone\necho \"Schleife abgeschlossen\"\n```\n\n----------------------------------------\n\nTITLE: Script Bash de autoeliminación\nDESCRIPTION: Un script de Bash que muestra su propio nombre de archivo utilizando $0 y luego se elimina a sí mismo.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/007-bash-arguments.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"El nombre del archivo es: $0 y se va a autoeliminar.\"\n\nrm -f $0\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers for Equality in Bash\nDESCRIPTION: Uses the `[[ ${arg1} -eq ${arg2} ]]` arithmetic conditional expression in Bash to check if the numerical values of `${arg1}` and `${arg2}` are equal. Both arguments should be integers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${arg1} -eq ${arg2} ]]\n```\n\n----------------------------------------\n\nTITLE: Counting Lines from Heredoc Input using `wc` in Bash\nDESCRIPTION: This snippet uses a Heredoc (`<< EOF ... EOF`) to pass multiple lines of text as standard input (STDIN) to the `wc -l` command. `wc -l` counts the number of lines received and prints the count (2) to standard output.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwc -l << EOF\nHello World!\nHow are you?\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Function - Bash\nDESCRIPTION: Defines a reusable 'hello' function in Bash that prints a static message. Demonstrates both function definition and invocation within the same script. Requires Bash; can be run as a standalone script. Accepts no parameters and outputs a static greeting to standard output.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/012-bash-functions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfunction hello() {\n    echo \"Hello World Function!\"\n}\n\nhello\n```\n\n----------------------------------------\n\nTITLE: Making Bash Script Executable\nDESCRIPTION: Command to make the bash script executable by adding execute permissions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/003-bash-hello-world.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Depurando scripts Bash con la opción -x\nDESCRIPTION: Muestra cómo usar la opción -x para depurar scripts Bash, imprimiendo todos los comandos ejecutados en la terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/013-debugging-and-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash -x ./su_script.sh\n```\n\n----------------------------------------\n\nTITLE: Script Bash para mostrar todos los argumentos\nDESCRIPTION: Un script de Bash que muestra cómo acceder a todos los argumentos pasados utilizando $@.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/007-bash-arguments.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Todos los argumentos: $@\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers (Less Than or Equal) in Bash\nDESCRIPTION: Uses the `[[ ${arg1} -le ${arg2} ]]` arithmetic conditional expression in Bash to check if the numerical value of `${arg1}` is less than or equal to the numerical value of `${arg2}`. Both arguments should be integers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${arg1} -le ${arg2} ]]\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Hash from Date using Bash\nDESCRIPTION: Demonstrates hashing the current date and time using the `md5sum` command. The output of the `date` command is piped to `md5sum` to produce a 32-character hexadecimal hash. This is presented as one method to generate a pseudo-random string, although not cryptographically secure for passwords.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndate | md5sum\n94cb1cdecfed0699e2d98acd9a7b8f6d  -\n```\n\n----------------------------------------\n\nTITLE: Bash If Statement Example with User Input Validation\nDESCRIPTION: A script that prompts the user for their name and checks if the input is empty using the -z conditional expression. If the name is empty, it displays a message asking for name entry.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Bash if statement example\n\nread -p \"What is your name? \" name\n\nif [[ -z ${name} ]]\nthen\n    echo \"Please enter your name!\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Making a Bash Script Executable\nDESCRIPTION: Demonstrates the command to make a Bash script executable using chmod.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/007-bash-arguments.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x arguments.sh\n```\n\n----------------------------------------\n\nTITLE: Pretty-printing JSON Output with jq - Bash\nDESCRIPTION: This command pipes the JSON output from the QuizAPI curl call into jq for formatted, colorized display in the terminal. Dependencies are curl, jq, and a valid API key. Input is raw JSON; output is pretty-printed JSON.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=10\" | jq\n```\n\n----------------------------------------\n\nTITLE: Haciendo ejecutable un script Bash\nDESCRIPTION: Comando para hacer ejecutable un script de Bash utilizando chmod.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/007-bash-arguments.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x argumentos.sh\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers (Greater Than) in Bash\nDESCRIPTION: Uses the `[[ ${arg1} -gt ${arg2} ]]` arithmetic conditional expression in Bash to check if the numerical value of `${arg1}` is greater than the numerical value of `${arg2}`. Both arguments should be integers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${arg1} -gt ${arg2} ]]\n```\n\n----------------------------------------\n\nTITLE: Executing Bash Script Method 1\nDESCRIPTION: Executes the bash script using the ./ notation after making it executable.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/003-bash-hello-world.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Sending an email with SSMTP from command line\nDESCRIPTION: Command to send an email using the mail command with SSMTP. The command pipes the email body to mail with subject and recipient specified.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"<^>Here add your email body<^>\" | mail -s \"<^>Here specify your email subject<^>\" <^>your_recepient_email@yourdomain.com<^>\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions Using Logical Operators in Bash\nDESCRIPTION: Demonstrates using logical OR (||) to combine conditions in an if statement. The script checks if the user is neither admin nor root, showing how to implement complex conditional logic.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nadmin=\"devdojo\"\n\nread -p \"Bitte gebe den Nutzernamen ein? \" username\n\n# Überprüfen ob der eingegebene Benutzername der Administrator ist\n\nif [[ \"${username}\" != \"${admin}\" ]] || [[ $EUID != 0 ]] ; then\n    echo \"Du bist  entweder nicht der Admin oder du bist der root Nutzer, bitte sicher bleiben\"\nelse\n    echo \"Du bist der Admin! Das könnte zerstörerisch werden\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Estructura básica de bucle until en Bash\nDESCRIPTION: Muestra la estructura básica de un bucle until en Bash, que ejecuta comandos hasta que una condición sea verdadera.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuntil [[ condición ]]\ndo\n    comandos\ndone\n```\n\n----------------------------------------\n\nTITLE: Ejecutando script Bash con argumentos\nDESCRIPTION: Muestra cómo ejecutar un script de Bash pasándole argumentos desde la línea de comandos.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/007-bash-arguments.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.com su_argumento\n```\n\n----------------------------------------\n\nTITLE: Discarding Standard Error (STDERR) using `/dev/null` in Bash\nDESCRIPTION: This command redirects the standard error (STDERR) generated by `ls --hello` to `/dev/null`. `/dev/null` is a special file that discards all data written to it, effectively silencing the error message.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nls --hello 2> /dev/null\n```\n\n----------------------------------------\n\nTITLE: Executing Bash Script Method 2\nDESCRIPTION: Alternative method to execute the bash script by explicitly calling the bash interpreter.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/003-bash-hello-world.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Using a Herestring (`<<<`) to Pipe a String to `wc` in Bash\nDESCRIPTION: This snippet demonstrates a Herestring (`<<<`). The string following `<<<` is passed directly as standard input (STDIN) to the `wc` command, which then processes it (e.g., counts words, lines, characters). Herestrings are convenient for single-line inputs.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nwc <<<\"this is an easy way of passing strings to the stdin of a program (here wc)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Zero-Length String in Bash\nDESCRIPTION: Uses the `[[ -z ${string} ]]` conditional expression in Bash to check if the length of the value held by the `${string}` variable is zero (i.e., the string is empty).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n[[ -z ${string} ]]\n```\n\n----------------------------------------\n\nTITLE: Making a Bash Script Executable\nDESCRIPTION: Command to make the bash script executable by changing its file permissions. The chmod +x command adds execution permission to the file owner.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/003-bash-hello-world.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Script Bash con múltiples variables\nDESCRIPTION: Este script Bash extendido define dos variables 'nombre' y 'saludo', y luego las combina en una salida. Demuestra cómo trabajar con múltiples variables en un script.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nnombre=\"DevDojo\"\nsaludo=\"Hola\"\n\necho \"$saludo $nombre\"\n```\n\n----------------------------------------\n\nTITLE: Exiting a Single Loop with Bash Break\nDESCRIPTION: This Bash script illustrates the `break` statement in a `while` loop. The loop increments `num` starting from 1. When `num` becomes equal to 5, the `if` condition is met, and the `break` statement executes, causing the loop to terminate immediately before reaching the condition `$num -lt 10`.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/011-bash-loops.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nnum=1\nwhile [[ $num -lt 10 ]] \ndo\n    if [[ $num -eq 5 ]] \n    then\n        break\n    fi\n    ((num++))\ndone\necho \"Loop completed\"\n```\n\n----------------------------------------\n\nTITLE: Asignando valor a una variable en Bash\nDESCRIPTION: Este snippet muestra la sintaxis básica para asignar un valor a una variable en Bash. Es importante notar que no debe haber espacios alrededor del signo igual.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnombre=\"DevDojo\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Key from JSON Array\nDESCRIPTION: Command to fetch data from QuizAPI and extract only the 'question' key from all elements.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=10\" | jq .[].question\n```\n\n----------------------------------------\n\nTITLE: While Loop for Input Validation in Bash\nDESCRIPTION: Practical example of a while loop that validates user input, ensuring a name is provided and not left empty.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"Wie ist ihr Name? \" name\n\nwhile [[ -z ${name} ]]\ndo\n    echo \"Ihr Name darf nicht leer sein. Bitte geben Sie einen gültigen Namen ein!\"\n    read -p \"Geben Sie Ihren Namen erneut ein? \" name\ndone\n\necho \"Hallo ${name}\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers for Inequality in Bash\nDESCRIPTION: Uses the `[[ ${arg1} -ne ${arg2} ]]` arithmetic conditional expression in Bash to check if the numerical values of `${arg1}` and `${arg2}` are not equal. Both arguments should be integers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${arg1} -ne ${arg2} ]]\n```\n\n----------------------------------------\n\nTITLE: Redirecting Standard Error (STDERR) to a File in Bash\nDESCRIPTION: This command runs `ls` with an invalid option, generating an error. The `2>` operator redirects standard error (file descriptor 2) to a file named `error.txt`, preventing the error message from appearing on the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nls --hello 2> error.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Variables for WordPress Installation\nDESCRIPTION: This snippet collects user input for domain name, database credentials, and determines the server IP address using the hostname command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho 'Please enter your domain of preference without www:'\nread DOMAIN\necho \"Please enter your Database username:\"\nread DBUSERNAME\necho \"Please enter your Database password:\"\nread DBPASSWORD\necho \"Please enter your Database name:\"\nread DBNAME\n\nip=`hostname -I | cut -f1 -d' '`\n```\n\n----------------------------------------\n\nTITLE: Estructura básica de bucle for en Bash\nDESCRIPTION: Muestra la estructura básica de un bucle for en Bash, que permite iterar sobre una lista de elementos.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor var in ${lista}\ndo\n    comandos\ndone\n```\n\n----------------------------------------\n\nTITLE: Encoding Date with Base64 using Bash\nDESCRIPTION: Illustrates encoding the current date and time string using the `base64` command. The output of `date` is piped to `base64`, transforming it into a Base64 encoded string. This is presented as another way to generate a seemingly random string.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndate | base64\n0YHQsSDRj9C90YMgMzAgMTk6NTE6NDggRUVUIDIwMjEK\n```\n\n----------------------------------------\n\nTITLE: Single SSH Command for Remote Script Execution\nDESCRIPTION: A command that uses SSH to execute a local script on a remote server without copying the script to the server first. The 'bash -s' option allows the script to be passed through standard input.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/017-executing-bash-script-on-multiple-remote-server.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh your_user@the_server_ip 'bash -s' < ./remote_check.sh\n```\n\n----------------------------------------\n\nTITLE: Lexicographically Comparing Strings (Less Than) in Bash\nDESCRIPTION: Uses the `[[ ${string1} < ${string2} ]]` conditional expression in Bash to check if `${string1}` sorts before `${string2}` lexicographically based on the current locale.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${string1} < ${string2} ]]\n```\n\n----------------------------------------\n\nTITLE: Piping Heredoc Output to `wc` in Bash\nDESCRIPTION: This snippet combines a Heredoc with piping. The `cat` command receives multi-line input via the Heredoc (`<< randomword1 ... randomword1`). The output of `cat` (the Heredoc content) is then piped (`|`) as input to the `wc` (word count) command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncat << randomword1 | wc\n\tThis script will print these lines on the terminal.\n\tNote that cat can read from standard input. Using this heredoc, we can\n\tcreate a temporary file with these lines as it's content and pipe that\n\tinto cat.\nrandomword1\n```\n\n----------------------------------------\n\nTITLE: Bash If-Elif-Else Statement for Number Evaluation\nDESCRIPTION: A script that evaluates whether a number is positive, negative, or zero using if, elif, and else statements. It demonstrates numeric comparison with the -gt and -lt operators.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/010-bash-conditionals.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"Enter a number: \" num\n\nif [[ $num -gt 0 ]] ; then\n    echo \"The number is positive\"\nelif [[ $num -lt 0 ]] ; then\n    echo \"The number is negative\"\nelse\n    echo \"The number is 0\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Until Loop Example in Bash\nDESCRIPTION: Example of an until loop that counts from 1 to 10, continuing until the counter exceeds 10.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncount=1\nuntil [[ $count -gt 10 ]]\ndo\n    echo $count\n    ((count++))\ndone\n```\n\n----------------------------------------\n\nTITLE: Using Color Functions for Text Output in Bash\nDESCRIPTION: This code demonstrates how to use the color functions to display colored text in the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/016-creating-an-interactive-menu-in-bash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho -ne $(ColorBlue 'Some text here')\n```\n\n----------------------------------------\n\nTITLE: Generating Random Base64 String with OpenSSL using Bash\nDESCRIPTION: Uses the `openssl rand` command to generate pseudo-random bytes and encodes them directly to Base64. The `-base64` flag handles the encoding, and `10` specifies the number of random bytes to generate before encoding. This requires the `openssl` tool to be installed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 10\n9+soM9bt8mhdcw==\n```\n\n----------------------------------------\n\nTITLE: Lexicographically Comparing Strings (Greater Than) in Bash\nDESCRIPTION: Uses the `[[ ${string1} > ${string2} ]]` conditional expression in Bash to check if `${string1}` sorts after `${string2}` lexicographically based on the current locale.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${string1} > ${string2} ]]\n```\n\n----------------------------------------\n\nTITLE: Installing jq on macOS with MacPorts\nDESCRIPTION: Command to install jq using MacPorts package manager on macOS systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nport install jq\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from QuizAPI\nDESCRIPTION: Curl command to fetch data from QuizAPI using the stored API key.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=10\"\n```\n\n----------------------------------------\n\nTITLE: Running the Spike Check Script on NGINX Logs - Bash\nDESCRIPTION: This command demonstrates how to analyze NGINX access logs by executing the 'spike_check' script and specifying the NGINX log file location ('/var/log/nginx/access.log'). It requires read permission on the log file and executes in the current directory where the script is located, generating a summary report of web requests.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./spike_check /var/log/nginx/access.log\n```\n\n----------------------------------------\n\nTITLE: Basic Until Loop Structure in Bash\nDESCRIPTION: Shows the basic structure of an until loop in Bash, which executes commands until the condition becomes true.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuntil [[ ihre_bedingung ]]\ndo\n    ihre_befehle\ndone\n```\n\n----------------------------------------\n\nTITLE: If-Else Statement for Input Validation in Bash\nDESCRIPTION: Extends the previous example with an else clause that provides feedback when the condition is not met. This shows how to implement branching logic based on user input.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Bash if statement example\n\nread -p \"Wie heißt du? \" name\n\nif [[ -z ${name} ]]\nthen\n    echo \"Bitte gebe deinen Namen ein!\"\nelse\n    echo \"Hey ${name}\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty File using touch (Bash)\nDESCRIPTION: This command uses the `touch` utility to create a new, empty file named `devdojo.sh`. This is often the first step in creating a new script file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/002-bash-structure.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Installing jq on Arch Linux\nDESCRIPTION: Command to install jq using pacman package manager on Arch Linux systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S jq\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific JSON Key Values with jq - Bash\nDESCRIPTION: This snippet uses jq to extract the 'question' field from each element of a JSON array. It applies .[].question on the result, producing a list of question values. The input is a JSON array with question objects; output is a list of question strings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njq .[].question\n```\n\n----------------------------------------\n\nTITLE: Uso avanzado de break con bucles anidados\nDESCRIPTION: Ejemplo de cómo usar break con un argumento numérico para salir de múltiples niveles de bucles anidados.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nfor (( a = 1; a < 10; a++ ))\ndo\n    echo \"bucle externo: $a\"\n    for (( b = 1; b < 100; b++ ))\n    do\n        if [[ $b -gt 5 ]] \n        then\n            break 2\n        fi\n    echo \"bucle interno: $b \"\n    done\ndone\n```\n\n----------------------------------------\n\nTITLE: Script Echoing Multiple Positional Parameters - Bash - bash\nDESCRIPTION: An enhanced Bash script that echoes three lines: the first line uses '$1', the second uses '$2', and the third uses '$@' to print all parameters. Shows best practices for handling and displaying multiple command line arguments. No external dependencies required.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Hello there\" $1\n\n# $1 : first parameter\n\necho \"Hello there\" $2\n\n# $2 : second parameter\n\necho \"Hello there\" $@\n\n# $@ : all\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Set Status in Bash\nDESCRIPTION: Uses the `[[ -v varname ]]` conditional expression in Bash to determine if the shell variable `varname` has been set (assigned any value). Note that `varname` should be the variable name itself, not its value (`${varname}`).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n[[ -v varname ]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Credentials in Bash Script\nDESCRIPTION: Shows the Bash variables within the 'protection.sh' script that must be updated with the user's Cloudflare Zone ID, email address, and API key. These credentials are required for authenticating API calls.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCF_CONE_ID=YOUR_CF_ZONE_ID\nCF_EMAIL_ADDRESS=YOUR_CF_EMAIL_ADDRESS\nCF_API_KEY=YOUR_CF_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing jq on Ubuntu/Debian\nDESCRIPTION: Command to install jq using apt package manager on Ubuntu or Debian-based systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install jq\n```\n\n----------------------------------------\n\nTITLE: Assigning Variables in Bash - Bash - bash\nDESCRIPTION: Assigns a value to a variable named 'name' using the '=' operator with no spaces. This establishes the basic pattern for defining variables in Bash, which can hold strings or numbers without explicit data types. No external dependencies are required and there are no required parameters; this is a foundational syntax element.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nname=\"DevDojo\"\n```\n\n----------------------------------------\n\nTITLE: Resultado de la ejecución del script\nDESCRIPTION: Esta es la salida esperada al ejecutar el script devdojo.sh, que muestra el valor de la variable nombre integrado en un mensaje de bienvenida.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nHola DevDojo\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings for Equality in Bash\nDESCRIPTION: Uses the `[[ ${string1} == ${string2} ]]` conditional expression in Bash to check if the values of `${string1}` and `${string2}` are equal. Within `[[`, `==` performs pattern matching.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n[[ ${string1} == ${string2} ]]\n```\n\n----------------------------------------\n\nTITLE: Checking Symbolic Link Existence (Alternative) in Bash\nDESCRIPTION: Uses the `[[ -h ${file} ]]` conditional expression in Bash to check if the path specified by `${file}` exists and is a symbolic link. This is equivalent to `-L`.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[[ -h ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Sintaxis de la declaración continue en Bash\nDESCRIPTION: Muestra la sintaxis de la declaración continue en Bash, que permite saltar a la siguiente iteración de un bucle.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncontinue [n]\n```\n\n----------------------------------------\n\nTITLE: Editing Bash Configuration File for Alias Persistence - Bash\nDESCRIPTION: This command opens the '~/.bashrc' file in the nano text editor to facilitate making the alias persistent across shell sessions. It ensures the user can add the alias definition and save it for permanent use. Prerequisite: nano must be installed. Input is the filename; output is the text editor interface.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hello World Bash Script\nDESCRIPTION: Creates a simple bash script that prints 'Hello World!' to the console. Includes the required shebang line to specify the interpreter.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/003-bash-hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Basic Bash Script - Bash - bash\nDESCRIPTION: Shows the expected output after running the basic devdojo.sh script, which prints 'Hi there DevDojo'. No input or dependencies involved; this output serves as validation for the script's correct function.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nHi there DevDojo\n```\n\n----------------------------------------\n\nTITLE: Checking File Writability in Bash\nDESCRIPTION: Uses the `[[ -w ${file} ]]` conditional expression in Bash to test if the file specified by `${file}` exists and is writable by the current user.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n[[ -w ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Echoing Variable in Bash\nDESCRIPTION: Demonstrates how to print the value of a variable in Bash using the echo command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho $server_name\n```\n\n----------------------------------------\n\nTITLE: Redirecting STDOUT and STDERR to the Same File (Verbose) in Bash\nDESCRIPTION: This command redirects both standard output (`> file.txt`) and standard error (`2> file.txt`) of the script `./install_package.sh` to the same file, `file.txt`. Note that this can lead to interleaved output if both streams write concurrently.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./install_package.sh > file.txt 2> file.txt\n```\n\n----------------------------------------\n\nTITLE: Executing a Bash Script Directly\nDESCRIPTION: Command to execute a bash script directly from the terminal. The ./ prefix indicates that the script is in the current directory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/003-bash-hello-world.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Informational Alias - Bash\nDESCRIPTION: Illustrates the output received after running the 'conn' alias that includes a custom message and a line with the connection count. This snippet represents terminal output rather than a command; it's a preview of what users will see.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTotal connections on port 80 and 443:\n12\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hello World Bash Script\nDESCRIPTION: A simple bash script that prints 'Hello World!' to the terminal. The script includes the bash shebang (#!/bin/bash) which indicates that the script should be executed using the bash shell.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/003-bash-hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Atajos de teclado para búsqueda y control de pantalla en Bash\nDESCRIPTION: Atajos de teclado para buscar en el historial, limpiar la pantalla y controlar la salida en la terminal Bash.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/013-debugging-and-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + r\n```\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + l\n```\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + s\n```\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + q\n```\n\n----------------------------------------\n\nTITLE: Checking File Readability in Bash\nDESCRIPTION: Uses the `[[ -r ${file} ]]` conditional expression in Bash to test if the file specified by `${file}` exists and is readable by the current user.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[[ -r ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Running Summarization Script on Custom Access Log with Bash\nDESCRIPTION: This command executes the 'spike_check' script, passing a custom access log file path as a parameter. The script expects a valid access log in the standard NGINX or Apache format as its argument. Outputs will include summary statistics of the access log, such as top URLs and IP addresses.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./spike_check /path/to/your/access_log\n```\n\n----------------------------------------\n\nTITLE: Making a Bash Script Executable with Chmod - Bash\nDESCRIPTION: This snippet shows how to update file permissions using chmod to make the 'spike_check' script executable. It requires that the user has permission to alter the file and that the script is present in the current directory. Output is not displayed unless there is a permission error, enabling the script to be run directly from the shell.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x spike_check\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Resume Screen Output\nDESCRIPTION: Keyboard shortcut to resume output to the terminal screen after it was halted with Ctrl+s.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + q\n```\n\n----------------------------------------\n\nTITLE: Running a Bash Script with the Bash Command\nDESCRIPTION: Alternative method to execute a bash script by explicitly invoking the bash interpreter. This method works even if the script doesn't have execution permissions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/003-bash-hello-world.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Spike Check Script with a Custom Log Path - Bash\nDESCRIPTION: This snippet exemplifies executing the 'spike_check' Bash script and supplying a custom access log file path as an argument. No output is provided unless specified by the script; it parses and summarizes the given log file. The user must ensure the provided path is correct and appropriately accessible.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./spike_check /path/to/your/access_log\n```\n\n----------------------------------------\n\nTITLE: Checking Regular File Existence in Bash\nDESCRIPTION: Uses the `[[ -f ${file} ]]` conditional expression in Bash to determine if the path specified by `${file}` exists and is a regular file (not a directory, symbolic link, or special file).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[[ -f ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Hash from Date using Bash\nDESCRIPTION: Shows how to hash the current date and time using the `sha256sum` command. Similar to the MD5 example, the `date` output is piped to `sha256sum`, resulting in a 64-character hexadecimal hash. This is another example of generating a string based on the current time.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndate | sha256sum\n30a0c6091e194c8c7785f0d7bb6e1eac9b76c0528f02213d1b6a5fbcc76ceff4  -\n```\n\n----------------------------------------\n\nTITLE: Activando la depuración en líneas específicas de un script Bash\nDESCRIPTION: Demuestra cómo usar set -x para activar la depuración en líneas específicas de un script Bash.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/013-debugging-and-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset -x\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Search Command History\nDESCRIPTION: Keyboard shortcut to search through previously executed commands in the terminal history, moving backward from the most recent commands.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + r\n```\n\n----------------------------------------\n\nTITLE: Echoing Variable Value - Bash - bash\nDESCRIPTION: Prints the value of the variable 'name' to standard output using the 'echo' command with direct variable substitution. This snippet demonstrates variable referencing in strings and does not require any special dependencies. The input is the previously set 'name' variable, and the output will be its value.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $name\n```\n\n----------------------------------------\n\nTITLE: Accediendo a una variable en Bash usando llaves\nDESCRIPTION: Este snippet muestra la forma recomendada de acceder a variables en Bash, utilizando llaves alrededor del nombre de la variable, lo que se considera una buena práctica.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho ${nombre}\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence (Alternative 1) in Bash\nDESCRIPTION: Uses the `[[ -a ${file} ]]` conditional expression in Bash to check if a file specified by the variable `${file}` exists. This test is generally equivalent to `-e`.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[[ -a ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Alias Command - Bash\nDESCRIPTION: This brief snippet shows the usage of the previously defined 'conn' alias to display the count of TCP connections. It relies on the 'conn' alias being present in the current shell session. No direct user input is required beyond running the command; output is the connection count.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconn\n```\n\n----------------------------------------\n\nTITLE: Editing Crontab for Script Scheduling\nDESCRIPTION: Opens the user's crontab file for editing using the 'crontab -e' command. This is the standard way to add, remove, or modify scheduled tasks (cron jobs) on Unix-like systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Delete Word Backward\nDESCRIPTION: Keyboard shortcut to delete one word backward from the current cursor position in the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + w\n```\n\n----------------------------------------\n\nTITLE: Script Echoing Positional Parameter - Bash - bash\nDESCRIPTION: A Bash script which echoes a greeting along with the first command-line parameter ('$1'). This script highlights how to access and use positional arguments in Bash. No dependencies required; input is provided at command line.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Hello there\" $1\n\n```\n\n----------------------------------------\n\nTITLE: Checking Character Special File in Bash\nDESCRIPTION: Uses the `[[ -c ${file} ]]` conditional expression in Bash to check if the file specified by `${file}` exists and is a character special file (e.g., a terminal device).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/009-bash-conditional-expressions.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[[ -c ${file} ]]\n```\n\n----------------------------------------\n\nTITLE: Running a Bash Script with Multiple Arguments\nDESCRIPTION: Shows how to execute a Bash script with multiple command-line arguments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/007-bash-arguments.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./arguments.sh dog cat bird\n```\n\n----------------------------------------\n\nTITLE: WordPress Installation and Configuration Function\nDESCRIPTION: This function calls the database configuration function, installs additional PHP modules required by WordPress, configures Apache with proper permissions, downloads and extracts WordPress, sets up the wp-config.php file with database credentials and security keys.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/024-automating-wordpress-lamp-with-bash.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwordpress_config () {\n\tdb_config\n\n\t\n\tapt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip -y\n\tsystemctl restart apache2\n\tsed -i \"8i\\\\\\t<Directory /var/www/$DOMAIN/>\" /etc/apache2/sites-available/$DOMAIN.conf\n\tsed -i \"9i\\\\\\t\\tAllowOverride All\" /etc/apache2/sites-available/$DOMAIN.conf\n\tsed -i \"10i\\\\\\t</Directory>\" /etc/apache2/sites-available/$DOMAIN.conf\n\n\ta2enmod rewrite\n\tsystemctl restart apache2\n\n\tapt install curl\n\tcd /tmp\n\tcurl -O https://wordpress.org/latest.tar.gz\n\ttar xzvf latest.tar.gz\n\ttouch /tmp/wordpress/.htaccess\n\tcp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php\n\tmkdir /tmp/wordpress/wp-content/upgrade\n\tcp -a /tmp/wordpress/. /var/www/$DOMAIN\n\tchown -R www-data:www-data /var/www/$DOMAIN\n\tfind /var/www/$DOMAIN/ -type d -exec chmod 750 {} \\;\n\tfind /var/www/$DOMAIN/ -type f -exec chmod 640 {} \\;\n\tcurl -s https://api.wordpress.org/secret-key/1.1/salt/ >> /var/www/$DOMAIN/wp-config.php\n\techo \"define('FS_METHOD', 'direct');\" >> /var/www/$DOMAIN/wp-config.php\n\tsed -i \"51,58d\" /var/www/$DOMAIN/wp-config.php\n\tsed -i \"s/database_name_here/$DBNAME/1\" /var/www/$DOMAIN/wp-config.php\n\tsed -i \"s/username_here/$DBUSERNAME/1\" /var/www/$DOMAIN/wp-config.php\n\tsed -i \"s/password_here/$DBPASSWORD/1\" /var/www/$DOMAIN/wp-config.php\n}\n```\n\n----------------------------------------\n\nTITLE: Script Bash básico con una variable\nDESCRIPTION: Este script Bash define una variable 'nombre' y la utiliza en un mensaje de bienvenida. Incluye el shebang en la primera línea para indicar que debe ejecutarse con Bash.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nnombre=\"DevDojo\"\n\necho \"Hola $nombre\"\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Script with Parameters - Bash - bash\nDESCRIPTION: Shows the expected output when running devdojo.sh with two arguments, demonstrating how each positional parameter and all parameters together are echoed. Used to validate command-line argument handling in the script.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nHello there Bobby\nHello there buddy!\nHello there Bobby buddy!\n```\n\n----------------------------------------\n\nTITLE: Self-Deleting Bash Script Using $0\nDESCRIPTION: Illustrates how to use $0 to reference the script name and create a self-deleting script. This script prints its name and then deletes itself.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/007-bash-arguments.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"The name of the file is: $0 and it is going to be self-deleted.\"\n\nrm -f $0\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Terminate Command\nDESCRIPTION: Keyboard shortcut to terminate the currently running command or process in the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + c\n```\n\n----------------------------------------\n\nTITLE: Explicitly Redirecting STDOUT using File Descriptor `1` in Bash\nDESCRIPTION: This command demonstrates an alternative syntax for redirecting standard output (STDOUT). `1>` explicitly specifies redirecting file descriptor 1 (STDOUT) to `file.txt`. It functions identically to `>`.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hello World!\" 1> file.txt\n```\n\n----------------------------------------\n\nTITLE: Setting API Key for QuizAPI\nDESCRIPTION: Bash command to set an environment variable for the QuizAPI key.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nAPI_KEY=YOUR_API_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Sintaxis de la declaración break en Bash\nDESCRIPTION: Muestra la sintaxis de la declaración break en Bash, que permite terminar la ejecución de un bucle inmediatamente.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbreak [n]\n```\n\n----------------------------------------\n\nTITLE: Running a Bash Script - Bash - bash\nDESCRIPTION: Executes the devdojo.sh Bash script from the terminal using a relative path. This assumes the script is executable and available in the current directory. No parameters required; the output is determined by the script’s contents.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Overwriting with `>` Redirection in Bash\nDESCRIPTION: This sequence first writes \"Hello World!\" to `file.txt`, overwriting any existing content. The second command then overwrites `file.txt` again with \"How are you?\". This illustrates that `>` truncates the file before writing.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hello World!\" > file.txt\necho \"How are you?\" > file.txt\n```\n\n----------------------------------------\n\nTITLE: While Loop Counter Example in Bash\nDESCRIPTION: Example of a while loop that counts from 1 to 10, demonstrating condition checking and counter incrementation.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncounter=1\nwhile [[ $counter -le 10 ]]\ndo\n    echo $counter\n    ((counter++))\ndone\n```\n\n----------------------------------------\n\nTITLE: Script Bash para mostrar argumentos\nDESCRIPTION: Un script de Bash que muestra cómo acceder a los argumentos pasados utilizando $1, $2, $3, etc.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/007-bash-arguments.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Argumento uno es $1\"\necho \"Argumento dos es $2\"\necho \"Argumento tres es $3\"\n```\n\n----------------------------------------\n\nTITLE: Sending an email with file attachment using mpack\nDESCRIPTION: Command to send an email with a file attachment using mpack. This specifies subject, attachment file, and recipient.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmpack -s \"<^>Your Subject here<^>\" your_file.zip <^>your_recepient_email@yourdomain.com<^>\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Bash Script\nDESCRIPTION: Demonstrates how to add comments to a Bash script for better readability and understanding of the script's purpose.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/015-writing-your-first-bash-script.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Script that returns the current server status\n```\n\n----------------------------------------\n\nTITLE: Installing Curl on RedHat/CentOS using Yum\nDESCRIPTION: Installs the 'curl' command-line tool on RedHat-based Linux distributions like CentOS using the 'yum' package manager. Curl is required to make HTTP requests to the Cloudflare API.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum install curl\n```\n\n----------------------------------------\n\nTITLE: Direct Terminal Command\nDESCRIPTION: Demonstrates how to run an echo command directly in the terminal without a script file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/003-bash-hello-world.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hello DevDojo!\"\n```\n\n----------------------------------------\n\nTITLE: Displaying File Content after Overwriting Redirection in Bash\nDESCRIPTION: This `cat` command displays the content of `file.txt` after it has been overwritten by the second `echo` command in the previous example, showing only the last written string.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat file.txt\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Clear Screen\nDESCRIPTION: Keyboard shortcut to clear the terminal screen, equivalent to running the 'clear' command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + l\n```\n\n----------------------------------------\n\nTITLE: Bucle while para validación de entrada de usuario\nDESCRIPTION: Ejemplo de cómo usar un bucle while para validar la entrada del usuario, solicitando repetidamente hasta que se proporcione un valor válido.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nread -p \"¿Cuál es su nombre? \" nombre\n\nwhile [[ -z ${nombre} ]]\ndo\n    echo \"Su nombre no puede estar en blanco. Por favor, introduzca un nombre válido\"\n    read -p \"Ingrese su nombre de nuevo \" nombre\ndone\n\necho \"Hola ${nombre}\"\n```\n\n----------------------------------------\n\nTITLE: SSMTP Configuration File Setup\nDESCRIPTION: Example configuration for SSMTP that connects to an external SMTP server. Includes settings for server, authentication, and TLS.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nroot=postmaster\nmailhub=<^>your_smtp_host.com<^>:587\nhostname=<^>your_hostname<^>\nAuthUser=<^>your_gmail_username@your_smtp_host.com<^>\nAuthPass=<^>your_gmail_password<^>\nFromLineOverride=YES\nUseSTARTTLS=YES\n```\n\n----------------------------------------\n\nTITLE: Installing jq on openSUSE\nDESCRIPTION: Command to install jq using zypper package manager on openSUSE systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install jq\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents with Bash\nDESCRIPTION: This snippet demonstrates how to read the contents of a file line by line using a while loop and the read command in Bash. It processes each line of the file 'example.txt'.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/fr/content/017-execution-des-scriptes-bash-sur-des-serveurs-distants-multiples.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwhile read line; do\n    echo \"$line\"\ndone < example.txt\n```\n\n----------------------------------------\n\nTITLE: Redirección de STDOUT a un archivo en Bash\nDESCRIPTION: Este ejemplo muestra cómo redirigir la salida estándar (STDOUT) del comando echo a un archivo llamado archivo.txt, creando o sobrescribiendo el archivo.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"¡Hola Mundo!\" > archivo.txt\n```\n\n----------------------------------------\n\nTITLE: Redirección de STDIN usando heredoc (EOF) en Bash\nDESCRIPTION: Este ejemplo muestra cómo usar la redirección STDIN con el operador << y un delimitador EOF para pasar múltiples líneas de texto al comando cat, que simplemente imprimirá el texto proporcionado en la terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF\n¡Hola Mundo!\n¿Cómo estás?\nEOF\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de uso de break en un bucle while\nDESCRIPTION: Demuestra cómo usar la declaración break en un bucle while para terminar el bucle cuando se cumple una condición específica.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nnum=1\nwhile [[ $num -lt 10 ]] \ndo\n    if [[ $num -eq 5 ]] \n    then\n        break\n    fi\n    ((num++))\ndone\necho \"Bucle completado\"\n```\n\n----------------------------------------\n\nTITLE: Checking jq Version\nDESCRIPTION: Command to check the installed version of jq on the system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njq --version\n```\n\n----------------------------------------\n\nTITLE: Displaying File Content after Appending Redirection in Bash\nDESCRIPTION: This `cat` command displays the content of `file.txt` after using the append operator `>>`, showing both lines that were written to the file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat file.txt\n```\n\n----------------------------------------\n\nTITLE: Uso de Herestring en Bash\nDESCRIPTION: Este ejemplo demuestra cómo usar herestrings (<<<) para pasar una cadena de texto de una sola línea como entrada al comando wc, ofreciendo una sintaxis más limpia que heredoc para entradas simples.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nwc <<<\"esta es una forma fácil de pasar cadenas a la entrada estándar de un programa (en este caso wc)»\n```\n\n----------------------------------------\n\nTITLE: Añadir contenido a un archivo con redirección en Bash\nDESCRIPTION: Este ejemplo muestra cómo usar el operador >> para añadir contenido a un archivo sin sobrescribir su contenido actual, preservando ambos mensajes en el archivo.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"¡Hola Mundo!\" > archivo.txt\necho \"¿Cómo estás?\" >> archivo.txt\n```\n\n----------------------------------------\n\nTITLE: Passing Command-Line Arguments to Script - Bash - bash\nDESCRIPTION: Shows how to execute the Bash script while passing two arguments, demonstrating Bash positional parameter handling. The command passes 'Bobby' and 'buddy!' as parameters to the script. No dependencies except that the script must accept and utilize positional parameters.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.sh Bobby buddy!\n```\n\n----------------------------------------\n\nTITLE: Ejecutando script Bash con múltiples argumentos\nDESCRIPTION: Ejemplo de cómo ejecutar un script de Bash pasándole múltiples argumentos.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/007-bash-arguments.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./argumentos.sh perro gato pájaro\n```\n\n----------------------------------------\n\nTITLE: Checking for Curl Installation in Bash\nDESCRIPTION: Command to verify if curl is installed on your server, which is required for making API requests to Cloudflare.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --version\n```\n\n----------------------------------------\n\nTITLE: Running Script with Multiple Variables - Bash - bash\nDESCRIPTION: Executes the devdojo.sh script, which now uses two variables and outputs their combined value. No additional dependencies; verifies functionality by displaying the updated greeting.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Canalización (piping) básica en Bash\nDESCRIPTION: Este ejemplo muestra cómo usar el operador pipe (|) para pasar la salida del comando ls como entrada al comando grep, que filtrará los resultados para mostrar solo archivos con extensión .txt.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nls | grep \".txt\"\n```\n\n----------------------------------------\n\nTITLE: Redirección de STDERR a un archivo en Bash\nDESCRIPTION: Este ejemplo muestra cómo redirigir los mensajes de error (STDERR) de un comando a un archivo usando el operador 2>, capturando solo los mensajes de error.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nls --hello 2> error.txt\n```\n\n----------------------------------------\n\nTITLE: Prompting User for Password Length in Bash\nDESCRIPTION: This snippet clears the terminal screen (`clear`), prints a newline (`printf \"\\n\"`), prompts the user to enter the desired password length using `read -p`, stores the input value in the `pass_length` variable, and prints another newline for spacing.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/022-bash-password-generator.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Ask user for password length\nclear\nprintf \"\\n\"\nread -p \"How many characters you would like the password to have? \" pass_length\nprintf \"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Access Log Summary Script with wget in Bash\nDESCRIPTION: This Bash command downloads the 'spike_check' script file directly from the GitHub repository to the current working directory using wget. The user must have wget installed and enabled, and internet access is required. Once downloaded, the user can inspect, make executable, and run the script for summarizing access logs.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/bobbyiliev/quick_access_logs_summary/master/spike_check\n```\n\n----------------------------------------\n\nTITLE: Updating APT cache for SSMTP installation in Bash\nDESCRIPTION: Command to update the APT package repository cache before installing packages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Running Summarization Script on NGINX Access Log with Bash\nDESCRIPTION: This command uses the 'spike_check' script to analyze an NGINX access log for summarized statistics. The path points to NGINX's standard access log location. Requires that the script is executable and the log file is accessible and in a compatible format.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./spike_check /var/log/nginx/access.log\n```\n\n----------------------------------------\n\nTITLE: Downloading the Spike Check Script with Wget - Bash\nDESCRIPTION: This snippet downloads the 'spike_check' Bash script directly from the 'quick_access_logs_summary' GitHub repository using wget. Users must have wget installed and access to the internet. The script is saved in the current directory and can then be inspected or made executable for use in access log summarization.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/bobbyiliev/quick_access_logs_summary/master/spike_check\n```\n\n----------------------------------------\n\nTITLE: Canalización de HereDocument a otro comando en Bash\nDESCRIPTION: Este ejemplo muestra cómo combinar un heredoc con una canalización adicional, pasando el contenido del heredoc primero a cat y luego canalizando su salida al comando wc para análisis adicional.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncat << palabraaleatoria1 | wc\n    Este script imprimirá estas líneas en la terminal.\n    Tenga en cuenta que cat puede leer desde la entrada estándar. Usando este heredoc, podemos\n    crear un archivo temporal con estas líneas como su contenido y canalizar ello\n    hacia cat.\npalabrasaleatoria1\n```\n\n----------------------------------------\n\nTITLE: Listing All Aliases in Bash Shell - Bash\nDESCRIPTION: This command lists all currently defined aliases in the active shell session. Useful for troubleshooting or managing custom commands. No parameters required; output is a list of aliases and their definitions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nalias\n```\n\n----------------------------------------\n\nTITLE: Installing jq on macOS with Homebrew\nDESCRIPTION: Command to install jq using Homebrew package manager on macOS systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install jq\n```\n\n----------------------------------------\n\nTITLE: Installing SSMTP package in Ubuntu\nDESCRIPTION: Command to install the SSMTP package which allows sending emails via an external SMTP server.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ssmtp\n```\n\n----------------------------------------\n\nTITLE: Invoking Informational Connection Alias - Bash\nDESCRIPTION: This example shows invoking the 'conn' alias that prints an informational header before the connection count. Assumes the relevant alias is defined in the shell session. Input is not needed; output includes a fixed string and the resultant count.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconn\n```\n\n----------------------------------------\n\nTITLE: Making the Protection Script Executable in Bash\nDESCRIPTION: Uses the 'chmod +x' command to grant execute permissions to the 'protection.sh' script located in the user's home directory. This allows the script to be run from the command line or by cron.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ~/protection.sh\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de bucle until con contador en Bash\nDESCRIPTION: Demuestra cómo usar un bucle until con un contador para ejecutar comandos hasta que se cumpla una condición específica.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncontador=1\nuntil [[ $contador -gt 10 ]]\ndo\n    echo $contador\n    ((contador++))\ndone\n```\n\n----------------------------------------\n\nTITLE: Uso de HereDocument con un delimitador personalizado en Bash\nDESCRIPTION: Este ejemplo muestra cómo usar un heredoc con un delimitador personalizado (palabraaleatoria1) para pasar múltiples líneas de texto al comando cat, que imprimirá el contenido en la terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncat << palabraaleatoria1\n    Este script imprimirá estas líneas en la terminal.\n    Tenga en cuenta que cat puede leer desde la entrada estándar. Usando este heredoc, podemos\n    crear un archivo temporal con estas líneas como su contenido y canalizar ello\n    hacia cat.\npalabrasaleatoria1\n```\n\n----------------------------------------\n\nTITLE: Installing jq on Fedora\nDESCRIPTION: Command to install jq using dnf package manager on Fedora systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install jq\n```\n\n----------------------------------------\n\nTITLE: Installing mail utilities in Ubuntu\nDESCRIPTION: Command to install mailutils package which provides essential mail handling commands.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install mailutils\n```\n\n----------------------------------------\n\nTITLE: Break Statement Syntax in Bash\nDESCRIPTION: Shows the syntax for the break statement in Bash loops, which exits the loop immediately.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbreak [n]\n```\n\n----------------------------------------\n\nTITLE: Editing the Protection Script with Nano\nDESCRIPTION: Opens the downloaded 'protection.sh' script in the 'nano' text editor. This step is necessary to configure the script with the user's specific Cloudflare API credentials.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnano protection.sh\n```\n\n----------------------------------------\n\nTITLE: Continue Statement Syntax in Bash\nDESCRIPTION: Shows the syntax for the continue statement in Bash loops, which can be used to skip to the next iteration.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/011-bash-schleifen.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncontinue [n]\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de bucle for para iterar sobre una lista de usuarios\nDESCRIPTION: Demuestra cómo usar un bucle for para iterar sobre una lista de usuarios definida en una variable y mostrar cada usuario en la consola.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nusuarios=\"devdojo bobby tony\"\n\nfor usuario in ${usuarios}\ndo\n    echo \"${user}\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Installing jq using Package Managers - Bash\nDESCRIPTION: These snippets provide various commands to install jq on different operating systems using their respective package managers. Each command installs jq for the corresponding system, and requires appropriate user permissions (typically via sudo). Inputs are the installation commands, output is a successful jq installation.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nport install jq\n```\n\n----------------------------------------\n\nTITLE: Downloading the Cloudflare Protection Script\nDESCRIPTION: Command to download the example Cloudflare DDoS protection script from GitHub using wget.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/bobbyiliev/cloudflare-ddos-protection/main/protection.sh\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON Data from QuizAPI - Bash\nDESCRIPTION: This command uses curl to fetch up to 10 questions from the QuizAPI, using the API_KEY variable in the URL. An API key is required. Output is raw JSON text from the endpoint.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=10\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Example Cloudflare Protection Script using wget\nDESCRIPTION: Downloads the example Bash script 'protection.sh' from a GitHub repository using the 'wget' command. This script serves as a reference implementation for the Cloudflare DDoS protection challenge.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/bobbyiliev/cloudflare-ddos-protection/main/protection.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Connection Count Alias - Bash\nDESCRIPTION: This snippet defines a Bash alias named 'conn' that executes the previous 'netstat' pipeline to count connections on ports 80 and 443. It allows the user to type 'conn' instead of the full command, improving workflow efficiency. This alias must be defined in an active shell session or profile and assumes netstat is installed. Input is implicit (network state), and output is the number of connections.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/014-creating-custom-bash-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nalias conn=\"netstat -plant | grep '80\\|443' | grep -v LISTEN | wc -l\"\n```\n\n----------------------------------------\n\nTITLE: Running the Spike Check Script on Apache Logs - Bash\nDESCRIPTION: This example shows how to run the 'spike_check' script on a typical Ubuntu Apache access log ('/var/log/apache2/access.log'). The command processes this specific log file to provide a concise summary of web traffic and possible suspicious requests. Prerequisites include having the script executable and sufficient permissions to read the log file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./spike_check /var/log/apache2/access.log\n```\n\n----------------------------------------\n\nTITLE: Checking jq Version - Bash\nDESCRIPTION: This command checks the installed version of jq. It requires jq to be present in the system PATH. The output displays the currently installed jq version.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njq --version\n```\n\n----------------------------------------\n\nTITLE: Opening the Protection Script in Nano Editor\nDESCRIPTION: Command to open the downloaded protection script with the nano text editor for configuration.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnano protection.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Curl on Debian/Ubuntu using apt-get\nDESCRIPTION: Installs the 'curl' command-line tool on Debian-based Linux distributions like Ubuntu using the 'apt-get' package manager. Curl is necessary for sending API requests to Cloudflare.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt-get install curl\n```\n\n----------------------------------------\n\nTITLE: QuizAPI jq Extraction Script - Bash\nDESCRIPTION: This Bash script demonstrates how to fetch data from QuizAPI, extract the first question and its answers using jq, assign answer options to variables, and print the question and answers in a formatted manner. Dependencies include curl, jq, and a valid QuizAPI API key (replace API_KEY with your own). Inputs are fetched automatically in the script, output is a formatted display of a question and its answer choices. Limitations: jq must be installed and accessible, and API_KEY must be set.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n##\n# Make an API call to QuizAPI and store the output in a variable\n##\noutput=$(curl 'https://quizapi.io/api/v1/questions?apiKey=API_KEY&limit=10' 2>/dev/null)\n\n##\n# Get only the first question\n##\noutput=$(echo $output | jq .[0])\n\n##\n# Get the question\n##\nquestion=$(echo $output | jq .question)\n\n##\n# Get the answers\n##\n\nanswer_a=$(echo $output | jq .answers.answer_a)\nanswer_b=$(echo $output | jq .answers.answer_b)\nanswer_c=$(echo $output | jq .answers.answer_c)\nanswer_d=$(echo $output | jq .answers.answer_d)\n\n##\n# Output the question\n##\n\necho \"\\nQuestion: ${question}\\n\\nA) ${answer_a}\\nB) ${answer_b}\\nC) ${answer_c}\\nD) ${answer_d}\\n\\n\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting the API Key as an Environment Variable - Bash\nDESCRIPTION: This snippet demonstrates how to store the QuizAPI API key in a Bash environment variable named API_KEY. Replace YOUR_API_KEY_HERE with your actual API key. The variable can be used in subsequent scripts or command-line operations to authenticate API requests.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAPI_KEY=YOUR_API_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Estructura básica de bucle while en Bash\nDESCRIPTION: Muestra la estructura básica de un bucle while en Bash, que ejecuta comandos mientras se cumpla una condición específica.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/011-bash-loops.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhile [[ condición ]]\ndo\n    comandos\ndone\n```\n\n----------------------------------------\n\nTITLE: SSH Command to Pipe and Execute Local Bash Script on Remote Host - Bash\nDESCRIPTION: This Bash/SSH command uses standard input redirection to transmit 'remote_check.sh' from the local machine to the remote server and run it using the remote host's bash interpreter. It is designed to be executed for a single target at a time, where 'your_user' is a valid SSH user and 'the_server_ip' is the remote host. The remote host must have Bash installed and user must have SSH access. No arguments to the script are required, and output is printed to the local terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/017-executing-bash-script-on-multiple-remote-server.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh your_user@the_server_ip 'bash -s' < ./remote_check.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Credentials in the Script\nDESCRIPTION: The section of the script that needs to be updated with your Cloudflare account details including Zone ID, email address, and API key.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCF_CONE_ID=YOUR_CF_ZONE_ID\nCF_EMAIL_ADDRESS=YOUR_CF_EMAIL_ADDRESS\nCF_API_KEY=YOUR_CF_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Curl on Debian/Ubuntu Systems\nDESCRIPTION: Command to install curl on Debian or Ubuntu based systems using the apt-get package manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt-get install curl\n```\n\n----------------------------------------\n\nTITLE: Executing Bash Script Remotely via SSH Loop - Bash\nDESCRIPTION: This Bash one-liner iterates over a list of server IPs in 'servers.txt', connecting to each remote host with SSH, and executes the local script 'remote_check.sh' by piping its content. Requires passwordless SSH keys set up for 'your_user' on all target servers. Input: 'servers.txt' listing IPs/hostnames and 'remote_check.sh' script file. This approach allows for rapid distribution and execution of the same script across multiple remote Linux hosts without manual copying.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/017-executing-bash-script-on-multiple-remote-server.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfor server in $(cat servers.txt) ; do ssh your_user@${server} 'bash -s' < ./remote_check.sh ; done\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Delete to Start of Line\nDESCRIPTION: Keyboard shortcut to delete everything from the cursor position to the beginning of the current line in the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + u\n```\n\n----------------------------------------\n\nTITLE: Checking Curl Installation in Bash\nDESCRIPTION: Checks if the 'curl' command-line tool is installed and displays its version. This command is used to verify a prerequisite for interacting with the Cloudflare API.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --version\n```\n\n----------------------------------------\n\nTITLE: Displaying File Content with `cat` in Bash\nDESCRIPTION: This command uses `cat` to display the contents of `file.txt` on the standard output (terminal). It's typically used here to verify the results of previous redirection operations.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat file.txt\n```\n\n----------------------------------------\n\nTITLE: Making the Protection Script Executable\nDESCRIPTION: Command to add execution permissions to the protection script using chmod.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ~/protection.sh\n```\n\n----------------------------------------\n\nTITLE: Ejecutando un script Bash\nDESCRIPTION: Este comando ejecuta el script devdojo.sh que acabamos de crear. Asegúrate de que el archivo tenga permisos de ejecución antes de ejecutar este comando.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Generating a Standard Error Message with `ls` in Bash\nDESCRIPTION: This command attempts to run `ls` with an invalid option (`--hello`), causing `ls` to produce an error message on standard error (STDERR).\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/023-bash-redirection.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nls --hello\n```\n\n----------------------------------------\n\nTITLE: Atajos de teclado para borrar líneas en la terminal Bash\nDESCRIPTION: Lista de atajos de teclado útiles para borrar partes de la línea de comando en Bash.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/013-debugging-and-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + k\n```\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + u\n```\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + w\n```\n\n----------------------------------------\n\nTITLE: Cloning Quick Access Logs Summary Script with Git - Bash\nDESCRIPTION: This snippet demonstrates how to clone the 'quick_access_logs_summary' repository from GitHub using git. The command downloads all files in the repository, including the log summary script, for local usage. It requires git to be installed on the system and internet access; outputs the cloned folder in the current working directory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bobbyiliev/quick_access_logs_summary.git\n```\n\n----------------------------------------\n\nTITLE: Redirección de STDOUT y STDERR al mismo archivo en Bash (método 1)\nDESCRIPTION: Esta primera forma de redirigir tanto la salida estándar como los errores al mismo archivo, especificando el mismo archivo de destino para ambos descriptores.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./instalar_paquete.sh > archivo.txt 2> archivo.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Jobs for Script Execution\nDESCRIPTION: Crontab entries to run the protection script every 30 seconds by combining a minute-based job with a delayed execution.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * /path-to-the-script/cloudflare/protection.sh\n* * * * * ( sleep 30 ; /path-to-the-script/cloudflare/protection.sh )\n```\n\n----------------------------------------\n\nTITLE: Using Echo Command Directly in Terminal\nDESCRIPTION: Direct use of the echo command in the terminal without creating a script. This demonstrates bash's interactive capability to run commands directly.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/003-bash-hello-world.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"Hallo DevDojo!\"\n```\n\n----------------------------------------\n\nTITLE: Installing mpack for sending attachments\nDESCRIPTION: Command to install the mpack utility which allows sending email attachments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install mpack\n```\n\n----------------------------------------\n\nTITLE: Scheduling the Protection Script with Cron\nDESCRIPTION: Provides example cron job entries to schedule the 'protection.sh' script to run every 30 seconds. The first line runs the script at the start of every minute, and the second uses 'sleep 30' to run it again 30 seconds later. The user must replace '/path-to-the-script/' with the actual path to the script.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * /path-to-the-script/cloudflare/protection.sh\n* * * * * ( sleep 30 ; /path-to-the-script/cloudflare/protection.sh )\n```\n\n----------------------------------------\n\nTITLE: Contando líneas con wc y heredoc en Bash\nDESCRIPTION: Este ejemplo usa el comando wc con la bandera -l para contar el número de líneas en un texto proporcionado a través de un heredoc con el delimitador EOF.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwc -l << EOF\n¡Hola Mundo!\n¿Cómo estás?\nEOF\n```\n\n----------------------------------------\n\nTITLE: Descartando mensajes de error en Bash con /dev/null\nDESCRIPTION: Este ejemplo muestra cómo descartar completamente los mensajes de error redirigiendo STDERR al dispositivo especial /dev/null, que descarta cualquier entrada recibida.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nls --hello 2> /dev/null\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Stop Screen Output\nDESCRIPTION: Keyboard shortcut to temporarily halt output to the terminal screen without stopping the process.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + s\n```\n\n----------------------------------------\n\nTITLE: Redirección de STDOUT y STDERR al mismo archivo en Bash (método 2)\nDESCRIPTION: Este método más eficiente redirecciona STDERR al descriptor de STDOUT (2>&1), haciendo que ambos flujos vayan al mismo destino especificado por la primera redirección.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./instalar_paquete.sh > archivo.txt 2>&1\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for eBook Content\nDESCRIPTION: Shows the directory structure for organizing different language translations of the eBook content. Each language has its own directory under 'ebook' with content files in markdown format.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nebook/\n    en/\n        content/\n            file1.md\n            file2.md\n    bg/\n        content/\n            file1.md\n            file2.md\n```\n\n----------------------------------------\n\nTITLE: Creating/Editing a File using nano (Bash)\nDESCRIPTION: This command launches the `nano` text editor to create or edit the file named `devdojo.sh`. It's an alternative to `touch` for initializing a script file while immediately opening it for content addition.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/002-bash-structure.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnano devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Redirección explícita de STDOUT usando el descriptor de archivo en Bash\nDESCRIPTION: Esta sintaxis alternativa usa el descriptor de archivo 1 explícitamente para redirigir STDOUT a un archivo, siendo funcionalmente equivalente al operador > simple.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho \"¡Hola Mundo!\" 1> file.txt\n```\n\n----------------------------------------\n\nTITLE: Expected Output with Multiple Variables - Bash - bash\nDESCRIPTION: Displays expected output after running devdojo.sh with multiple variables, outputting 'Hello DevDojo'. No input required; output serves as confirmation for variable handling.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nHello DevDojo\n```\n\n----------------------------------------\n\nTITLE: Sobrescritura de contenido con redirección en Bash\nDESCRIPTION: Este ejemplo demuestra cómo el operador > sobrescribe el contenido existente en un archivo cuando se usa múltiples veces, resultando solo en el último contenido redirigido.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"¡Hola Mundo!\" > archivo.txt\necho \"¿Cómo estás?\" > archivo.txt\n```\n\n----------------------------------------\n\nTITLE: Terminal Keyboard Shortcut: Background Command\nDESCRIPTION: Keyboard shortcut to send the currently running command or process to the background in the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/013-debugging-and-testing.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + z\n```\n\n----------------------------------------\n\nTITLE: Verificación del contenido del archivo con cat en Bash\nDESCRIPTION: Este comando muestra el contenido del archivo archivo.txt en la terminal, útil para verificar que la redirección anterior funcionó correctamente.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat archivo.txt\n```\n\n----------------------------------------\n\nTITLE: Atajos de teclado para control de procesos en Bash\nDESCRIPTION: Atajos de teclado para terminar comandos y enviar procesos al segundo plano en la terminal Bash.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/013-debugging-and-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + c\n```\n\nLANGUAGE: bash\nCODE:\n```\nCtrl + z\n```\n\n----------------------------------------\n\nTITLE: Counting Word Occurrences in File with Bash\nDESCRIPTION: This code demonstrates how to count the occurrences of a specific word in a file using grep and wc commands. It counts how many times 'example' appears in 'example.txt'.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/fr/content/017-execution-des-scriptes-bash-sur-des-serveurs-distants-multiples.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrep -c \"example\" example.txt\n```\n\n----------------------------------------\n\nTITLE: Searching for Pattern in File with Bash grep\nDESCRIPTION: This snippet shows how to use grep to search for a specific pattern in a file. It searches for the word 'example' in 'example.txt' and prints matching lines.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/fr/content/017-execution-des-scriptes-bash-sur-des-serveurs-distants-multiples.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrep \"example\" example.txt\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab for Editing\nDESCRIPTION: Command to edit the crontab file to set up scheduled execution of the protection script.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Making Bash Script Executable with chmod\nDESCRIPTION: This command sets the executable permission on the 'spike_check' Bash script, allowing it to be run directly from the terminal. The operation requires appropriate file system permissions for the target file. This command should be run before attempting to execute the script for summarizing access logs.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x spike_check\n```\n\n----------------------------------------\n\nTITLE: Opening SSMTP configuration file\nDESCRIPTION: Command to open the SSMTP configuration file with nano text editor for editing.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/021-how-to-send-emails-with-bash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/ssmtp/ssmtp.conf\n```\n\n----------------------------------------\n\nTITLE: Defining a Single-Line Comment in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for adding a comment in a Bash script. Any text following the '#' symbol on a line is treated as a comment and ignored by the Bash interpreter. This is useful for adding explanatory notes within the script.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/006-bash-comments.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This is a comment and will not be rendered on the screen\n```\n\n----------------------------------------\n\nTITLE: Opening a File with Nano - Bash - bash\nDESCRIPTION: Shows how to open the 'devdojo.sh' script with the nano text editor from the command line. This command allows editing the file directly in the terminal. The only dependency is that nano must be installed; it takes the filename as its parameter.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/004-bash-variables.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnano devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Abriendo un archivo con nano en Bash\nDESCRIPTION: Este comando abre el archivo devdojo.sh con el editor de texto nano para editarlo.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/004-bash-variables.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnano devdojo.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning Access Log Summary Script with Git in Bash\nDESCRIPTION: This command uses Git to clone the quick_access_logs_summary repository from GitHub, which contains a demo Bash script for summarizing access logs. Prerequisites include having Git installed on your system and internet connectivity. After execution, the repository and its scripts will be available locally; the user can then review and run the included Bash script as needed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/020-nginx-and-apache-log-parser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bobbyiliev/quick_access_logs_summary.git\n```\n\n----------------------------------------\n\nTITLE: Implementing System Monitoring Functions in Bash\nDESCRIPTION: This snippet defines several functions to check system status information including memory usage, CPU load, TCP connections, and kernel version on a server.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/016-creating-an-interactive-menu-in-bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n##\n# BASH menu script that checks:\n#   - Memory usage\n#   - CPU load\n#   - Number of TCP connections\n#   - Kernel version\n##\n\nserver_name=$(hostname)\n\nfunction memory_check() {\n    echo \"\"\n\techo \"Memory usage on ${server_name} is: \"\n\tfree -h\n\techo \"\"\n}\n\nfunction cpu_check() {\n    echo \"\"\n\techo \"CPU load on ${server_name} is: \"\n    echo \"\"\n\tuptime\n    echo \"\"\n}\n\nfunction tcp_check() {\n    echo \"\"\n\techo \"TCP connections on ${server_name}: \"\n    echo \"\"\n\tcat  /proc/net/tcp | wc -l\n    echo \"\"\n}\n\nfunction kernel_check() {\n    echo \"\"\n\techo \"Kernel version on ${server_name} is: \"\n\techo \"\"\n\tuname -r\n    echo \"\"\n}\n\nfunction all_checks() {\n\tmemory_check\n\tcpu_check\n\ttcp_check\n\tkernel_check\n}\n```\n\n----------------------------------------\n\nTITLE: Root User Check in Bash Script\nDESCRIPTION: A security-focused conditional that checks if the script is being run as root (EUID=0) and exits if true. This is a common pattern for preventing scripts from running with elevated privileges.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/de/content/010-bash-bedingungen.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nif (( $EUID == 0 )); then\n    echo \"Bitte führe das Skript nicht als root aus\"\n    exit\nfi\n```\n\n----------------------------------------\n\nTITLE: Getting the First Array Element with jq - Bash\nDESCRIPTION: This snippet demonstrates how to extract the first element from a JSON array using jq. It uses jq's index syntax .[0]. Input is a raw JSON array; output is the first array item.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/pt_br/content/018-working-with-json-in-bash-using-jq.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njq .[0]\n```\n\n----------------------------------------\n\nTITLE: Redirección de STDOUT y STDERR a archivos separados en Bash\nDESCRIPTION: Este ejemplo muestra cómo redirigir tanto la salida estándar como los mensajes de error de un script a diferentes archivos simultáneamente.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/es/content/023-bash-redirection.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./instalar_paquete.sh > salida.txt 2> error.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Curl on RedHat/CentOS Systems\nDESCRIPTION: Command to install curl on RedHat or CentOS based systems using the yum package manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/019-working-with-cloudflare-api-with-bash.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum install curl\n```"
  }
]