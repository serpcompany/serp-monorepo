[
  {
    "owner": "pennersr",
    "repo": "django-allauth",
    "content": "TITLE: Configuring Django settings for django-allauth\nDESCRIPTION: Required Django settings configuration for django-allauth, including templates, authentication backends, installed apps, middleware, and social account providers.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/installation/quickstart.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Specify the context processors as follows:\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                # Already defined Django-related contexts here\n\n                # `allauth` needs this from django\n                'django.template.context_processors.request',\n            ],\n        },\n    },\n]\n\nAUTHENTICATION_BACKENDS = [\n    ...\n    # Needed to login by username in Django admin, regardless of `allauth`\n    'django.contrib.auth.backends.ModelBackend',\n\n    # `allauth` specific authentication methods, such as login by email\n    'allauth.account.auth_backends.AuthenticationBackend',\n    ...\n]\n\nINSTALLED_APPS = [\n    ...\n    # The following apps are required:\n    'django.contrib.auth',\n    'django.contrib.messages',\n\n    'allauth',\n    'allauth.account',\n\n    # Optional -- requires install using `django-allauth[socialaccount]`.\n    'allauth.socialaccount',\n    # ... include the providers you want to enable:\n    'allauth.socialaccount.providers.agave',\n    'allauth.socialaccount.providers.amazon',\n    'allauth.socialaccount.providers.amazon_cognito',\n    'allauth.socialaccount.providers.angellist',\n    'allauth.socialaccount.providers.apple',\n    'allauth.socialaccount.providers.asana',\n    'allauth.socialaccount.providers.auth0',\n    'allauth.socialaccount.providers.authentiq',\n    'allauth.socialaccount.providers.baidu',\n    'allauth.socialaccount.providers.basecamp',\n    'allauth.socialaccount.providers.battlenet',\n    'allauth.socialaccount.providers.bitbucket_oauth2',\n    'allauth.socialaccount.providers.bitly',\n    'allauth.socialaccount.providers.box',\n    'allauth.socialaccount.providers.cilogon',\n    'allauth.socialaccount.providers.clever',\n    'allauth.socialaccount.providers.coinbase',\n    'allauth.socialaccount.providers.dataporten',\n    'allauth.socialaccount.providers.daum',\n    'allauth.socialaccount.providers.digitalocean',\n    'allauth.socialaccount.providers.dingtalk',\n    'allauth.socialaccount.providers.discord',\n    'allauth.socialaccount.providers.disqus',\n    'allauth.socialaccount.providers.douban',\n    'allauth.socialaccount.providers.doximity',\n    'allauth.socialaccount.providers.draugiem',\n    'allauth.socialaccount.providers.drip',\n    'allauth.socialaccount.providers.dropbox',\n    'allauth.socialaccount.providers.dwolla',\n    'allauth.socialaccount.providers.edmodo',\n    'allauth.socialaccount.providers.edx',\n    'allauth.socialaccount.providers.eventbrite',\n    'allauth.socialaccount.providers.eveonline',\n    'allauth.socialaccount.providers.evernote',\n    'allauth.socialaccount.providers.exist',\n    'allauth.socialaccount.providers.facebook',\n    'allauth.socialaccount.providers.feedly',\n    'allauth.socialaccount.providers.figma',\n    'allauth.socialaccount.providers.fivehundredpx',\n    'allauth.socialaccount.providers.flickr',\n    'allauth.socialaccount.providers.foursquare',\n    'allauth.socialaccount.providers.frontier',\n    'allauth.socialaccount.providers.fxa',\n    'allauth.socialaccount.providers.gitea',\n    'allauth.socialaccount.providers.github',\n    'allauth.socialaccount.providers.gitlab',\n    'allauth.socialaccount.providers.globus',\n    'allauth.socialaccount.providers.google',\n    'allauth.socialaccount.providers.gumroad',\n    'allauth.socialaccount.providers.hubic',\n    'allauth.socialaccount.providers.instagram',\n    'allauth.socialaccount.providers.jupyterhub',\n    'allauth.socialaccount.providers.kakao',\n    'allauth.socialaccount.providers.lemonldap',\n    \"allauth.socialaccount.providers.lichess\",\n    'allauth.socialaccount.providers.line',\n    'allauth.socialaccount.providers.linkedin',\n    'allauth.socialaccount.providers.linkedin_oauth2',\n    'allauth.socialaccount.providers.mailchimp',\n    'allauth.socialaccount.providers.mailru',\n    'allauth.socialaccount.providers.mediawiki',\n    'allauth.socialaccount.providers.meetup',\n    'allauth.socialaccount.providers.miro',\n    'allauth.socialaccount.providers.microsoft',\n    'allauth.socialaccount.providers.naver',\n    'allauth.socialaccount.providers.nextcloud',\n    'allauth.socialaccount.providers.notion',\n    'allauth.socialaccount.providers.odnoklassniki',\n    'allauth.socialaccount.providers.openid',\n    'allauth.socialaccount.providers.openid_connect',\n    'allauth.socialaccount.providers.openstreetmap',\n    'allauth.socialaccount.providers.orcid',\n    'allauth.socialaccount.providers.patreon',\n    'allauth.socialaccount.providers.paypal',\n    'allauth.socialaccount.providers.persona',\n    'allauth.socialaccount.providers.pinterest',\n    'allauth.socialaccount.providers.pocket',\n    \"allauth.socialaccount.providers.questrade\",\n    'allauth.socialaccount.providers.quickbooks',\n    'allauth.socialaccount.providers.reddit',\n    'allauth.socialaccount.providers.robinhood',\n    'allauth.socialaccount.providers.salesforce',\n    'allauth.socialaccount.providers.sharefile',\n    'allauth.socialaccount.providers.shopify',\n    'allauth.socialaccount.providers.slack',\n    'allauth.socialaccount.providers.snapchat',\n    'allauth.socialaccount.providers.soundcloud',\n    'allauth.socialaccount.providers.spotify',\n    'allauth.socialaccount.providers.stackexchange',\n    'allauth.socialaccount.providers.steam',\n    'allauth.socialaccount.providers.stocktwits',\n    'allauth.socialaccount.providers.strava',\n    'allauth.socialaccount.providers.stripe',\n    'allauth.socialaccount.providers.telegram',\n    'allauth.socialaccount.providers.trainingpeaks',\n    'allauth.socialaccount.providers.trello',\n    'allauth.socialaccount.providers.tumblr',\n    'allauth.socialaccount.providers.tumblr_oauth2',\n    'allauth.socialaccount.providers.twentythreeandme',\n    'allauth.socialaccount.providers.twitch',\n    'allauth.socialaccount.providers.twitter',\n    'allauth.socialaccount.providers.twitter_oauth2',\n    'allauth.socialaccount.providers.untappd',\n    'allauth.socialaccount.providers.vimeo',\n    'allauth.socialaccount.providers.vimeo_oauth2',\n    'allauth.socialaccount.providers.vk',\n    'allauth.socialaccount.providers.wahoo',\n    'allauth.socialaccount.providers.weibo',\n    'allauth.socialaccount.providers.weixin',\n    'allauth.socialaccount.providers.windowslive',\n    'allauth.socialaccount.providers.xing',\n    'allauth.socialaccount.providers.yahoo',\n    'allauth.socialaccount.providers.yandex',\n    'allauth.socialaccount.providers.ynab',\n    'allauth.socialaccount.providers.zoho',\n    'allauth.socialaccount.providers.zoom',\n    'allauth.socialaccount.providers.okta',\n    'allauth.socialaccount.providers.feishu',\n    \"allauth.socialaccount.providers.atlassian\",\n    ...\n]\n\nMIDDLEWARE = (\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n\n    # Add the account middleware:\n    \"allauth.account.middleware.AccountMiddleware\",\n)\n\n# Provider specific settings\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        # For each OAuth based provider, either add a ``SocialApp``\n        # (``socialaccount`` app) containing the required client\n        # credentials, or list them here:\n        'APP': {\n            'client_id': '123',\n            'secret': '456',\n            'key': ''\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SOCIALACCOUNT_PROVIDERS in Django Settings (Python)\nDESCRIPTION: This snippet demonstrates how to configure the SOCIALACCOUNT_PROVIDERS setting in Django's settings.py file. It shows examples for GitHub and Google providers, including how to set up client credentials, scopes, and other provider-specific settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/provider_configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"github\": {\n        # For each provider, you can choose whether or not the\n        # email address(es) retrieved from the provider are to be\n        # interpreted as verified.\n        \"VERIFIED_EMAIL\": True\n    },\n    \"google\": {\n        # For each OAuth based provider, either add a ``SocialApp``\n        # (``socialaccount`` app) containing the required client\n        # credentials, or list them here:\n        \"APPS\": [\n            {\n                \"client_id\": \"123\",\n                \"secret\": \"456\",\n                \"key\": \"\",\n                \"settings\": {\n                    # You can fine tune these settings per app:\n                    \"scope\": [\n                        \"profile\",\n                        \"email\",\n                    ],\n                    \"auth_params\": {\n                        \"access_type\": \"online\",\n                    },\n                },\n            },\n        ],\n        # The following provider-specific settings will be used for all apps:\n        \"SCOPE\": [\n            \"profile\",\n            \"email\",\n        ],\n        \"AUTH_PARAMS\": {\n            \"access_type\": \"online\",\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Reset Password From Key Form in Django-allauth\nDESCRIPTION: Example of overriding the ResetPasswordKeyForm class to add custom processing when resetting a password using a key. The custom form must be specified in the ACCOUNT_FORMS setting.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/forms.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.forms import ResetPasswordKeyForm\nclass MyCustomResetPasswordKeyForm(ResetPasswordKeyForm):\n\n    def save(self):\n\n        # Add your own processing here.\n\n        # Ensure you call the parent class's save.\n        # .save() does not return anything\n        super().save()\n```\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {'reset_password_from_key': 'mysite.forms.MyCustomResetPasswordKeyForm'}\n```\n\n----------------------------------------\n\nTITLE: Handling User Login Signal in Django-allauth\nDESCRIPTION: This signal is sent when a user successfully logs in. It provides the request object and the user instance.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.user_logged_in(request, user)\n```\n\n----------------------------------------\n\nTITLE: Implementing X-Session-Token Authentication with Django Ninja\nDESCRIPTION: Example code showing how to integrate X-Session-Token authentication with Django Ninja. This snippet demonstrates setting up a Ninja API endpoint that uses the x_session_token_auth class for authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/integrations.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.headless.contrib.ninja.security import x_session_token_auth\nfrom ninja import NinjaAPI\n\napi = NinjaAPI()\n\n@api.get(\"/your/own/api\", auth=[x_session_token_auth])\ndef your_own_api(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for Social Authentication in Django-allauth\nDESCRIPTION: Examples of correctly formatted callback URLs for social authentication providers in django-allauth. These URLs are crucial for successful OAuth login flows and must be configured correctly to avoid login failures.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.com/accounts/twitter/login/callback/\nhttp://example.com/accounts/soundcloud/login/callback/\n...\n\nhttp://127.0.0.1:8000/accounts/twitter/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URLs for django-allauth\nDESCRIPTION: URL configuration in Django's urls.py file to include django-allauth URLs. This replaces the need for django.contrib.auth.urls.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/installation/quickstart.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    ...\n    path('accounts/', include('allauth.urls')),\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Running database migrations for django-allauth\nDESCRIPTION: Command to create necessary database tables for django-allauth after installation.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/installation/quickstart.rst#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Django-Allauth for Custom User Models with Email Authentication\nDESCRIPTION: Settings configuration for using a custom user model with email as the identifying field instead of username. These settings disable username-related functionality and configure the signup and login process to use email authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/advanced.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']\nACCOUNT_LOGIN_METHODS = {'email'}\n```\n\n----------------------------------------\n\nTITLE: Overriding Authentication Forms in Django-allauth MFA\nDESCRIPTION: Example of how to create custom authentication forms for MFA in django-allauth. This includes forms for initial authentication, reauthentication, and WebAuthn authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.mfa.base.forms import AuthenticateForm, ReauthenticateForm\nfrom allauth.mfa.webauthn.forms import AuthenticateWebAuthnForm\n\n\nclass MyCustomAuthenticateForm(AuthenticateForm):\n    pass\n\n\nclass MyCustomReauthenticateForm(ReauthenticateForm):\n    pass\n\n\nclass MyCustomAuthenticateWebAuthnForm(AuthenticateWebAuthnForm):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Settings for Overriding Allauth Templates\nDESCRIPTION: Django settings configuration that enables overriding allauth templates by adding a project-specific template directory to the TEMPLATES setting. This setup allows custom templates to take precedence over the built-in ones.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/templates.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\n            BASE_DIR / \"templates\"\n        ],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Reset Password Form in Django-allauth\nDESCRIPTION: Example of overriding the ResetPasswordForm class to add custom processing when resetting a password. The custom form must be specified in the ACCOUNT_FORMS setting.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/forms.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.forms import ResetPasswordForm\nclass MyCustomResetPasswordForm(ResetPasswordForm):\n\n    def save(self, request):\n\n        # Ensure you call the parent class's save.\n        # .save() returns a string containing the email address supplied\n        email_address = super().save(request)\n\n        # Add your own processing here.\n\n        # Ensure you return the original result\n        return email_address\n```\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {'reset_password': 'mysite.forms.MyCustomResetPasswordForm'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OpenID Connect Providers in Django-Allauth Settings\nDESCRIPTION: Configuration example showing how to set up multiple OpenID Connect providers with different settings including client credentials, server URLs, and PKCE authentication. The configuration allows for setting global PKCE defaults and provider-specific settings including token authentication methods.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/openid_connect.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"openid_connect\": {\n        # Optional PKCE defaults to False, but may be required by your provider\n        # Can be set globally, or per app (settings).\n        \"OAUTH_PKCE_ENABLED\": True,\n        \"APPS\": [\n            {\n                \"provider_id\": \"my-server\",\n                \"name\": \"My Login Server\",\n                \"client_id\": \"your.service.id\",\n                \"secret\": \"your.service.secret\",\n                \"settings\": {\n                    \"server_url\": \"https://my.server.example.com\",\n                    # Optional token endpoint authentication method.\n                    # May be one of \"client_secret_basic\", \"client_secret_post\"\n                    # If omitted, a method from the the server's\n                    # token auth methods list is used\n                    \"token_auth_method\": \"client_secret_basic\",\n                    \"oauth_pkce_enabled\": True,\n                },\n            },\n            {\n                \"provider_id\": \"other-server\",\n                \"name\": \"Other Login Server\",\n                \"client_id\": \"your.other.service.id\",\n                \"secret\": \"your.other.service.secret\",\n                \"settings\": {\n                    \"server_url\": \"https://other.server.example.com\",\n                },\n            },\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django-allauth for Headless Mode\nDESCRIPTION: This snippet shows how to configure django-allauth to operate in headless mode, which is suitable for single-page and mobile applications. It demonstrates setting the HEADLESS_ONLY flag to True in the Django settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/introduction.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsettings.HEADLESS_ONLY = True\n```\n\n----------------------------------------\n\nTITLE: Customizing Signup Form in Django-allauth\nDESCRIPTION: Example of overriding the SignupForm class to add custom processing during user registration. The custom form must be specified in the ACCOUNT_FORMS setting.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/forms.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.forms import SignupForm\nclass MyCustomSignupForm(SignupForm):\n\n    def save(self, request):\n\n        # Ensure you call the parent class's save.\n        # .save() returns a User object.\n        user = super().save(request)\n\n        # Add your own processing here.\n\n        # You must return the original result.\n        return user\n```\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {'signup': 'mysite.forms.MyCustomSignupForm'}\n```\n\n----------------------------------------\n\nTITLE: Using the verified_email_required Decorator in Django-allauth\nDESCRIPTION: Demonstrates how to import and apply the verified_email_required decorator to a view function. This decorator ensures that only users with verified email addresses can access the decorated view, redirecting unverified users to a page informing them to verify their email.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/decorators.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.decorators import verified_email_required\n\n@verified_email_required\ndef verified_users_only_view(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Default Django-Allauth Form Configuration\nDESCRIPTION: Default configuration dictionary for overriding built-in Django-Allauth forms. Specifies the form classes used for various authentication and account management operations.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {\n    'add_email': 'allauth.account.forms.AddEmailForm',\n    'change_password': 'allauth.account.forms.ChangePasswordForm',\n    'confirm_login_code': 'allauth.account.forms.ConfirmLoginCodeForm',\n    'login': 'allauth.account.forms.LoginForm',\n    'request_login_code': 'allauth.account.forms.RequestLoginCodeForm',\n    'reset_password': 'allauth.account.forms.ResetPasswordForm',\n    'reset_password_from_key': 'allauth.account.forms.ResetPasswordKeyForm',\n    'set_password': 'allauth.account.forms.SetPasswordForm',\n    'signup': 'allauth.account.forms.SignupForm',\n    'user_token': 'allauth.account.forms.UserTokenForm',\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Add Email Form in Django-allauth\nDESCRIPTION: Example of overriding the AddEmailForm class to add custom processing when adding a new email address. The custom form must be specified in the ACCOUNT_FORMS setting.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/forms.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.forms import AddEmailForm\nclass MyCustomAddEmailForm(AddEmailForm):\n\n    def save(self, request):\n\n        # Ensure you call the parent class's save.\n        # .save() returns an allauth.account.models.EmailAddress object.\n        email_address_obj = supern().save(request)\n\n        # Add your own processing here.\n\n        # You must return the original result.\n        return email_address_obj\n```\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {'add_email': 'mysite.forms.MyCustomAddEmailForm'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Phone Authentication Settings in Django Settings.py\nDESCRIPTION: Essential settings configuration for enabling phone authentication in django-allauth. Includes setting up login methods, required signup fields, and a custom adapter for handling phone-related functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/phone.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Make sure that the login methods includes \"phone\" as a method.\nACCOUNT_LOGIN_METHODS = {\"phone\", \"email\"}\n\n# Add a required phone field to the signup fields.\n# ACCOUNT_SIGNUP_FIELDS = [\n  'phone*',\n  'email*'  # Can be left out if you want to only use 'phone'.\n]\n\n# You will need to provide methods for storing phone numbers, and\n# sending SMS messages in a custom adapter.\nACCOUNT_ADAPTER = 'project.users.adapter.MyAccountAdapter'\n```\n\n----------------------------------------\n\nTITLE: Securing Django Admin Login with Allauth Decorator in urls.py\nDESCRIPTION: This code snippet demonstrates how to protect the Django admin login with Django Allauth features by applying the secure_admin_login decorator to the admin site's login method. This ensures that features like rate limiting and two-factor authentication are applied to admin logins.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/admin.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom allauth.account.decorators import secure_admin_login\n\nadmin.autodiscover()\nadmin.site.login = secure_admin_login(admin.site.login)\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Form in Django-allauth\nDESCRIPTION: Example of overriding the LoginForm class to add custom processing during login. The custom form must be specified in the ACCOUNT_FORMS setting.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/forms.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.forms import LoginForm\nclass MyCustomLoginForm(LoginForm):\n\n    def login(self, *args, **kwargs):\n\n        # Add your own processing here.\n\n        # You must return the original result.\n        return super().login(*args, **kwargs)\n```\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {'login': 'mysite.forms.MyCustomLoginForm'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for WebAuthn Support\nDESCRIPTION: Django settings configuration to enable WebAuthn authentication, including MFA support types, passkey login, development mode settings, and required Django apps. Includes optional settings for local development and testing environments.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/webauthn.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Make sure \"webauthn\" is included.\nMFA_SUPPORTED_TYPES = [\"totp\", \"webauthn\", \"recovery_codes\"]\n\n# Optional: enable support for logging in using a (WebAuthn) passkey.\nMFA_PASSKEY_LOGIN_ENABLED = True\n\n# Optional -- use for local development only: the WebAuthn uses the\n#``fido2`` package, and versions up to including version 1.1.3 do not\n# regard localhost as a secure origin, which is problematic during\n# local development and testing.\nMFA_WEBAUTHN_ALLOW_INSECURE_ORIGIN = True\n\n# Add \"humanize\" contrib app if using default templates\nINSTALLED_APPS = [\n    ...,\n    \"django.contrib.humanize\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Django-Allauth\nDESCRIPTION: This snippet shows how to add django-allauth apps to the INSTALLED_APPS setting in Django's settings.py file. It includes both required and optional apps for full functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/installation.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n\n    # Required\n    'allauth.account',\n    'allauth.headless',\n\n    # Optional\n    'allauth.socialaccount',\n    'allauth.mfa',\n    'allauth.usersessions',\n\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MFA Authentication Forms in Django Settings\nDESCRIPTION: Settings configuration to use custom MFA authentication forms in django-allauth. This specifies the paths to the custom form classes for different authentication scenarios.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMFA_FORMS = {\n    'authenticate': 'mysite.forms.MyCustomAuthenticateForm',\n    'reauthenticate': 'mysite.forms.MyCustomReauthenticateForm',\n    'authenticate_webauthn: 'mysite.forms.MyCustomAuthenticateWebAuthnForm',\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Google Provider in Python for django-allauth\nDESCRIPTION: This snippet demonstrates how to create a custom Google provider that overrides the default scope. It subclasses the GoogleProvider and defines a custom id to avoid URL conflicts.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/advanced.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GoogleNoDefaultScopeProvider(GoogleProvider):\n    id = 'google_no_scope'\n\n    def get_default_scope(self):\n        return []\n\nprovider_classes = [GoogleNoDefaultScopeProvider]\n```\n\n----------------------------------------\n\nTITLE: Setting Up HEADLESS_FRONTEND_URLS for Django-Allauth\nDESCRIPTION: This configuration defines the URLs for the single-page application frontend that will interact with django-allauth's headless mode. It specifies endpoints for email confirmation, password reset, and signup.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/installation.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHEADLESS_FRONTEND_URLS = {\n    \"account_confirm_email\": \"https://app.project.org/account/verify-email/{key}\",\n    \"account_reset_password_from_key\": \"https://app.org/account/password/reset/key/{key}\",\n    \"account_signup\": \"https://app.org/account/signup\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing django-allauth with social account support in Python\nDESCRIPTION: Command to install the django-allauth package with social account functionality using pip.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/installation/quickstart.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install \"django-allauth[socialaccount]\"\n```\n\n----------------------------------------\n\nTITLE: Installing django-allauth with Social Account Support\nDESCRIPTION: Command to install django-allauth with social account functionality, including dependencies for most common providers.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/ChangeLog.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install \"django-allauth[socialaccount]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Allauth MFA\nDESCRIPTION: Python code snippet showing how to add the required apps to the INSTALLED_APPS setting in Django's settings.py file. This includes the core allauth apps and the MFA app.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/introduction.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    # The required `allauth` apps...\n    'allauth',\n    'allauth.account',\n\n    # The MFA app:\n    'allauth.mfa',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Provider Settings in Django\nDESCRIPTION: Python code snippet for configuring SAML provider settings in Django's settings file. It includes setup for multiple organizations, attribute mapping, IdP and SP configurations, and advanced settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/saml.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"saml\": {\n        \"APPS\": [\n            {\n                \"name\": \"Acme Inc\",\n                \"provider_id\": \"urn:example.com\",\n                \"client_id\": \"acme-inc\",\n                \"settings\": {\n                    \"attribute_mapping\": {\n                        \"uid\": \"http://schemas.auth0.com/clientID\",\n                        \"email_verified\": \"http://schemas.auth0.com/email_verified\",\n                        \"email\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n                    },\n                    \"use_nameid_for_email\": False,\n                    \"idp\": {\n                        \"entity_id\": \"urn:example.com\",\n                        \"metadata_url\": \"https://example.com/saml2/metadata\",\n                        \"sso_url\": \"https://example.com/saml2/sso\",\n                        \"slo_url\": \"https://example.com/saml2/slo\",\n                        \"x509cert\": \"\"\"\n-----BEGIN CERTIFICATE-----\nMIIDHTCCAgWgAwIBAgIJLogff5x+S0BlMA0GCSqGSIb3DQEBCwUAMCwxKjAoBgNV\nBAMTIWRldi1uYXAybWY1ZTFwMXR3Z2Rv................................\n................................G7qmyqcXRaf9HAuL/MvWz6zd96Ay6WHM\npXk92/DyUV48JxK/Bl7Bj8qjl5w5R7Dwps6wj+69PIAg\n-----END CERTIFICATE-----\n\"\"\",\n                    },\n                    \"sp\": {\n                        \"entity_id\": \"https://serviceprovider.com/sso/sp/metadata.xml\",\n                    },\n                    \"advanced\": {\n                        \"allow_repeat_attribute_name\": True,\n                        \"allow_single_label_domains\": False,\n                        \"authn_request_signed\": False,\n                        \"digest_algorithm\": \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\",\n                        \"logout_request_signed\": False,\n                        \"logout_response_signed\": False,\n                        \"metadata_signed\": False,\n                        \"name_id_encrypted\": False,\n                        \"name_id_format\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\",\n                        \"private_key\": \"MIID/zCCAuegAwIBAg...VGgdy+xoA==\",\n                        \"reject_deprecated_algorithm\": True,\n                        \"reject_idp_initiated_sso\": True,\n                        \"signature_algorithm\": \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\",\n                        \"want_assertion_encrypted\": False,\n                        \"want_assertion_signed\": False,\n                        \"want_attribute_statement\": True,\n                        \"want_message_signed\": False,\n                        \"want_name_id\": False,\n                        \"want_name_id_encrypted\": False,\n                        \"x509cert\": \"MIIEvQIBADANB...oddbXECo=\",\n                    },\n                    \"contact_person\": {\n                        \"technical\": {\n                            \"givenName\": \"Alice\",\n                            \"emailAddress\": \"alice@example.com\",\n                        },\n                        \"administrative\": {\n                            \"givenName\": \"Bob\",\n                            \"emailAddress\": \"bob@example.com\",\n                        },\n                    },\n                },\n            },\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend URLs for Django-Allauth Headless Mode\nDESCRIPTION: This snippet demonstrates how to configure frontend URLs for email confirmation and password reset in Django-Allauth's headless mode. It allows redirecting users to custom frontend pages after certain authentication actions.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nHEADLESS_FRONTEND_URLS = {\n    \"account_confirm_email\": \"https://app.project.org/account/verify-email/{key}\",\n    # Key placeholders are automatically populated. You are free to adjust this\n    # to your own needs, e.g.\n    #\n    # \"https://app.project.org/account/email/verify-email?token={key}\",\n    \"account_reset_password\": \"https://app.project.org/account/password/reset\",\n    \"account_reset_password_from_key\": \"https://app.project.org/account/password/reset/key/{key}\",\n    \"account_signup\": \"https://app.project.org/account/signup\",\n    # Fallback in case the state containing the `next` URL is lost and the handshake\n    # with the third-party provider fails.\n    \"socialaccount_login_error\": \"https://app.project.org/account/provider/callback\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Social Account Provider Settings in Django\nDESCRIPTION: Django settings configuration for Apple Sign-In authentication. Includes client ID, key ID, member ID configuration and private key certificate setup. Supports both web-based Services ID and iOS Bundle ID authentication flows.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/apple.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"apple\": {\n        \"APPS\": [{\n            # Your service identifier.\n            \"client_id\": \"your.service.id\",\n\n            # The Key ID (visible in the \"View Key Details\" page).\n            \"secret\": \"KEYID\",\n\n             # Member ID/App ID Prefix -- you can find it below your name\n             # at the top right corner of the page, or it's your App ID\n             # Prefix in your App ID.\n            \"key\": \"MEMAPPIDPREFIX\",\n\n            \"settings\": {\n                # The certificate you downloaded when generating the key.\n                \"certificate_key\": \"\"\"-----BEGIN PRIVATE KEY-----\ns3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr\n3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3\nc3ts3cr3t\n-----END PRIVATE KEY-----\n\"\"\"\n            }\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Redirect in Django-Allauth\nDESCRIPTION: Example of customizing redirect URLs in django-allauth by extending the DefaultAccountAdapter. This implementation redirects users to a personalized URL containing their username after login.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/advanced.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# project/settings.py:\nACCOUNT_ADAPTER = 'project.users.adapter.MyAccountAdapter'\n\n# project/users/adapter.py:\nfrom django.conf import settings\nfrom allauth.account.adapter import DefaultAccountAdapter\n\nclass MyAccountAdapter(DefaultAccountAdapter):\n\n    def get_login_redirect_url(self, request):\n        path = \"/accounts/{username}/\"\n        return path.format(username=request.user.username)\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth2 Settings\nDESCRIPTION: Configures Google OAuth2 provider settings including scope and authentication parameters\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/google.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',\n        },\n        'OAUTH_PKCE_ENABLED': True,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Provider Settings in Django-Allauth\nDESCRIPTION: This code snippet shows the available Facebook settings for Django-Allauth. It includes options for authentication method, SDK URL, permissions scope, API version, and various other parameters to customize the Facebook integration.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/facebook.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'facebook': {\n        'METHOD': 'oauth2',  # Set to 'js_sdk' to use the Facebook connect SDK\n        'SDK_URL': '//connect.facebook.net/{locale}/sdk.js',\n        'SCOPE': ['email', 'public_profile'],\n        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},\n        'INIT_PARAMS': {'cookie': True},\n        'FIELDS': [\n            'id',\n            'first_name',\n            'last_name',\n            'middle_name',\n            'name',\n            'name_format',\n            'picture',\n            'short_name'\n        ],\n        'EXCHANGE_TOKEN': True,\n        'LOCALE_FUNC': 'path.to.callable',\n        'VERIFIED_EMAIL': False,\n        'VERSION': 'v13.0',\n        'GRAPH_API_URL': 'https://graph.facebook.com/v13.0',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Username Validators in Django-allauth (Python)\nDESCRIPTION: Demonstrates how to set up custom username validators for django-allauth. It includes defining a list of validators in a separate file and referencing it in the settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/configuration.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# In validators.py\n\nfrom django.contrib.auth.validators import ASCIIUsernameValidator\n\ncustom_username_validators = [ASCIIUsernameValidator()]\n\n# In settings.py\n\nACCOUNT_USERNAME_VALIDATORS = 'some.module.validators.custom_username_validators'\n```\n\n----------------------------------------\n\nTITLE: Implementing X-Session-Token Authentication with Django REST Framework\nDESCRIPTION: Example code showing how to integrate X-Session-Token authentication with Django REST Framework. This snippet demonstrates creating an API view that uses XSessionTokenAuthentication for authentication and requires users to be authenticated.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/integrations.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.headless.contrib.rest_framework.authentication import (\n    XSessionTokenAuthentication,\n)\nfrom rest_framework import permissions\nfrom rest_framework.views import APIView\n\nclass YourOwnAPIView(APIView):\n\n    authentication_classes = [\n        XSessionTokenAuthentication,\n    ]\n    permission_classes = [permissions.IsAuthenticated]\n\n    def get(self, request):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Django-Allauth\nDESCRIPTION: This snippet demonstrates how to include django-allauth URLs in the project's urls.py file. It includes both the standard allauth URLs for third-party providers and the API endpoints for headless mode.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/installation.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    # Even when using headless, the third-party provider endpoints are stil\n    # needed for handling e.g. the OAuth handshake. The account views\n    # can be disabled using `HEADLESS_ONLY = True`.\n    path(\"accounts/\", include(\"allauth.urls\")),\n\n    # Include the API endpoints:\n    path(\"_allauth/\", include(\"allauth.headless.urls\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Default Form Configuration in Django-Allauth\nDESCRIPTION: Default configuration for overriding social account forms, specifying the disconnect and signup form classes.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/configuration.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_FORMS = {\n    'disconnect': 'allauth.socialaccount.forms.DisconnectForm',\n    'signup': 'allauth.socialaccount.forms.SignupForm',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Provider in Django Settings\nDESCRIPTION: Adds the Google authentication provider to Django's INSTALLED_APPS setting\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/google.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'allauth.socialaccount.providers.google',\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Provider Settings in Django-AllAuth\nDESCRIPTION: This Python code snippet demonstrates how to configure the Reddit provider in Django-AllAuth. It sets the authentication parameters for permanent access, specifies the required scope for identity and submission permissions, and defines a custom user agent to comply with Reddit's API rules.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/reddit.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'reddit': {\n        'AUTH_PARAMS': {'duration': 'permanent'},\n        'SCOPE': ['identity', 'submit'],\n        'USER_AGENT': 'django:myappid:1.0 (by /u/yourredditname)',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Social Account Signup Form in Django-Allauth\nDESCRIPTION: Example of extending the default SignupForm to add custom processing during social account signup. Shows how to properly override the save method while maintaining the parent class functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/forms.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.socialaccount.forms import SignupForm\nclass MyCustomSocialSignupForm(SignupForm):\n\n    def save(self, request):\n\n        # Ensure you call the parent class's save.\n        # .save() returns a User object.\n        user = super().save(request)\n\n        # Add your own processing here.\n\n        # You must return the original result.\n        return user\n```\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_FORMS = {'signup': 'mysite.forms.MyCustomSocialSignupForm'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Provider Scopes in Python for django-allauth\nDESCRIPTION: This snippet shows how to modify the scopes for the Google provider in the project's settings.py file. It adds the 'calendar.readonly' scope to the default scopes used by allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/advanced.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n            'openid',\n            'https://www.googleapis.com/auth/calendar.readonly'\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Scopes in Django-Allauth\nDESCRIPTION: Python configuration for setting GitHub OAuth scopes in django-allauth. Defines access levels for user data, repository access, and organization read permissions.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/github.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'github': {\n        'SCOPE': [\n            'user',\n            'repo',\n            'read:org',\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limits in Django Settings\nDESCRIPTION: Example of how to configure rate limits in the Django settings file. It shows how to disable all rate limits or override specific actions with custom limits.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/rate_limits.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_RATE_LIMITS = False  # Disable all rate limits\n\n# Or override specific actions\nACCOUNT_RATE_LIMITS = {\n    \"action\": \"your-rate-limit\",\n    # ... more action overrides\n}\n```\n\n----------------------------------------\n\nTITLE: Installing django-allauth without social account support in Python\nDESCRIPTION: Command to install the django-allauth package without social account functionality using pip.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/installation/quickstart.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install django-allauth\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Auto Field in Django-allauth\nDESCRIPTION: Demonstrates how to set the ALLAUTH_DEFAULT_AUTO_FIELD configuration option to specify the primary key type for all models in django-allauth. This setting allows customization of the default auto field, such as using a HashidAutoField.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"ALLAUTH_DEFAULT_AUTO_FIELD\": \"hashid_field.HashidAutoField\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Provider Settings in Django\nDESCRIPTION: This snippet shows how to configure the Auth0 provider settings in Django's settings file. It specifies the Auth0 domain URL and enables PKCE (Proof Key for Code Exchange) for enhanced security.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/auth0.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'auth0': {\n        'AUTH0_URL': 'https://your.auth0domain.auth0.com',\n        'OAUTH_PKCE_ENABLED': True,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Provider for Keycloak in Django-allauth\nDESCRIPTION: This code snippet demonstrates how to set up the SOCIALACCOUNT_PROVIDERS configuration for using Keycloak with Django-allauth's OpenID Connect provider. It includes settings for the provider ID, name, client credentials, and the Keycloak server URL.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/keycloak.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"openid_connect\": {\n        \"APPS\": [\n            {\n                \"provider_id\": \"keycloak\",\n                \"name\": \"Keycloak\",\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"server_url\": \"http://keycloak:8080/realms/master/.well-known/openid-configuration\",\n                },\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Set Password Form in Django-allauth\nDESCRIPTION: Example of overriding the SetPasswordForm class to add custom processing when setting a new password. The custom form must be specified in the ACCOUNT_FORMS setting.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/forms.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.forms import SetPasswordForm\nclass MyCustomSetPasswordForm(SetPasswordForm):\n\n    def save(self):\n\n        # Ensure you call the parent class's save.\n        # .save() does not return anything\n        super().save()\n\n        # Add your own processing here.\n```\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {'set_password': 'mysite.forms.MyCustomSetPasswordForm'}\n```\n\n----------------------------------------\n\nTITLE: Accessing User's Social Accounts in Templates\nDESCRIPTION: Template tags for accessing and checking user's connected social accounts within Django templates.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/templates.rst#2025-04-17_snippet_3\n\nLANGUAGE: django\nCODE:\n```\n{% get_social_accounts user as accounts %}\n\n{{accounts.twitter}} -- a list of connected Twitter accounts\n{{accounts.twitter.0}} -- the first Twitter account\n{% if accounts %} -- if there is at least one social account\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Provider Settings in Django-AllAuth\nDESCRIPTION: This code snippet demonstrates how to configure the GitLab provider in Django-AllAuth. It shows how to set the SCOPE, client_id, secret, and custom gitlab_url for a private GitLab server.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/gitlab.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"gitlab\": {\n        \"SCOPE\": [\"api\"],\n        \"APPS\": [\n            {\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"gitlab_url\": \"https://your.gitlab.server.tld\",\n                }\n            }\n        ]\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-Social Login Signal\nDESCRIPTION: Signal emitted after successful social provider authentication but before login completion. Provides access tokens and profile information during social login/signup process.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/signals.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nallauth.socialaccount.signals.pre_social_login(request, sociallogin)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Django Allauth Project\nDESCRIPTION: This snippet defines the required Python packages and their version constraints for a Django project using django-allauth with MFA and social account features. It also includes dependencies for QR code generation, API documentation with drf-spectacular, Django REST framework, and django-ninja.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/examples/react-spa/backend/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango-allauth[mfa,socialaccount]>=65.7.0\nqrcode >= 7.0.0\ndrf-spectacular == 0.28.0\ndjangorestframework >= 3.15.2,<4\ndjango-ninja >= 1.3.0,<2\n```\n\n----------------------------------------\n\nTITLE: Adding UserSessionsMiddleware to Django MIDDLEWARE\nDESCRIPTION: This code snippet demonstrates how to add the UserSessionsMiddleware to the MIDDLEWARE setting in Django. This middleware is optional and is only needed when USERSESSIONS_TRACK_ACTIVITY is set to True.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/usersessions/installation.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    ...\n    # Optional -- needed when: USERSESSIONS_TRACK_ACTIVITY = True\n    'allauth.usersessions.middleware.UserSessionsMiddleware',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Email Confirmation Sent Signal in Django-allauth\nDESCRIPTION: This signal is emitted immediately after an email confirmation is sent. It includes the confirmation object and a signup flag.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.email_confirmation_sent(request, confirmation, signup)\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph Provider in Django Allauth\nDESCRIPTION: This snippet shows how to configure the Microsoft Graph provider in Django Allauth's SOCIALACCOUNT_PROVIDERS setting. It includes options for setting the client ID, secret, tenant type, and custom login and graph URLs.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/microsoft.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"microsoft\": {\n        \"APPS\": [\n            {\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"tenant\": \"organizations\",\n                    # Optional: override URLs (use base URLs without path)\n                    \"login_url\": \"https://login.microsoftonline.com\",\n                    \"graph_url\": \"https://graph.microsoft.com\",\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Allauth with MFA Support using pip\nDESCRIPTION: Command to install django-allauth package with MFA extras using pip. This is required to use the MFA functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/introduction.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"django-allauth[mfa]\"\n```\n\n----------------------------------------\n\nTITLE: Loading Social Provider JavaScript Dependencies\nDESCRIPTION: Template tag to load all required JavaScript files for enabled social authentication providers.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/templates.rst#2025-04-17_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{% providers_media_js %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Provider Settings in Django-Allauth\nDESCRIPTION: Configuration dictionary for setting up Okta as a social authentication provider in Django-Allauth. Includes the base URL for the Okta instance and enables PKCE (Proof Key for Code Exchange) for enhanced security in the OAuth flow.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/okta.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'okta': {\n        'OKTA_BASE_URL': 'example.okta.com',\n        'OAUTH_PKCE_ENABLED': True,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django-Allauth for Authelia OpenID Connect\nDESCRIPTION: Example configuration for setting up Authelia SSO integration with Django-Allauth using OpenID Connect. Requires specifying the client ID, secret, and server URL from your Authelia instance.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/authelia.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"openid_connect\": {\n        \"APPS\": [\n            {\n                \"provider_id\": \"authelia\",\n                \"name\": \"Authelia SSO\",\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"server_url\": \"https://auth.example.com/.well-known/openid-configuration\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default MFA Forms in Django-Allauth\nDESCRIPTION: Default configuration for MFA_FORMS setting which allows overriding the forms used in the Multi-Factor Authentication flow. This dictionary maps different MFA actions to their corresponding form classes.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMFA_FORMS = {\n    'authenticate': 'allauth.mfa.base.forms.AuthenticateForm',\n    'reauthenticate': 'allauth.mfa.base.forms.AuthenticateForm',\n    'activate_totp': 'allauth.mfa.totp.forms.ActivateTOTPForm',\n    'deactivate_totp': 'allauth.mfa.totp.forms.DeactivateTOTPForm',\n    'generate_recovery_codes': 'allauth.mfa.recovery_codes.forms.GenerateRecoveryCodesForm',\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Social Account Connections URL Path in Django-Allauth\nDESCRIPTION: Specifies the URL configuration for accessing the social account connections management view. The ConnectionsView is accessible at '/accounts/social/connections/' and is named 'socialaccount_connections' in URL patterns.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/views.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsocialaccount_connections\n```\n\n----------------------------------------\n\nTITLE: Handling Password Reset Signal in Django-allauth\nDESCRIPTION: This signal is emitted when a user's password is successfully reset.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.password_reset(request, user)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configured Social Providers\nDESCRIPTION: Template tag to get list of configured social authentication providers for the current site.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/templates.rst#2025-04-17_snippet_4\n\nLANGUAGE: django\nCODE:\n```\n{% get_providers as socialaccount_providers %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Weixin OAuth2 Provider Settings in Django-Allauth\nDESCRIPTION: This code snippet shows how to configure the Weixin OAuth2 provider settings in Django-Allauth. It demonstrates setting the AUTHORIZE_URL for media platform and specifying a custom SCOPE. The AUTHORIZE_URL is set to the media platform URL, and the SCOPE is set to 'snsapi_base'.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/weixin.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'weixin': {\n        'AUTHORIZE_URL': 'https://open.weixin.qq.com/connect/oauth2/authorize',  # for media platform\n        'SCOPE': ['snsapi_base'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect for CERN SSO in Django-Allauth\nDESCRIPTION: This snippet shows the SOCIALACCOUNT_PROVIDERS configuration for setting up CERN SSO using OpenID Connect in Django-Allauth. It includes the provider ID, name, client credentials, and the CERN authentication server URL.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/cern.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"openid_connect\": {\n        \"APPS\": [\n            {\n                \"provider_id\": \"cern\",\n                \"name\": \"CERN\",\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"server_url\": \"https://auth.cern.ch/auth/realms/cern/.well-known/openid-configuration\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ORCID Provider Settings in Python for django-allauth\nDESCRIPTION: This code snippet demonstrates how to configure the ORCID provider settings in django-allauth. It shows how to set the base domain for the API and specify whether to use the Member API or Public API. This configuration is necessary when using non-default ORCID environments such as the sandbox.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/orcid.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'orcid': {\n        # Base domain of the API. Default value: 'orcid.org', for the production API\n        'BASE_DOMAIN':'sandbox.orcid.org',  # for the sandbox API\n        # Member API or Public API? Default: False (for the public API)\n        'MEMBER_API': True,  # for the member API\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DingTalk OAuth2 Settings in Django\nDESCRIPTION: This code snippet demonstrates how to set up the SOCIALACCOUNT_PROVIDERS dictionary in Django settings for DingTalk OAuth2 authentication. It includes the client_id and secret, which are required for OAuth2 authentication. The SCOPE can be optionally specified, defaulting to 'openapi' if not set.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/dingtalk.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'dingtalk': {\n        'APP': {\n            'client_id': 'xxxx',\n            'secret': 'xxxx',\n       },\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Social Account Disconnect Form in Django-Allauth\nDESCRIPTION: Example of extending the default DisconnectForm to add custom processing when disconnecting a social account. Demonstrates how to override the save method and access account information before deletion.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/forms.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.socialaccount.forms import DisconnectForm\nclass MyCustomSocialDisconnectForm(DisconnectForm):\n\n    def save(self):\n\n        # Add your own processing here if you do need access to the\n        # socialaccount being deleted.\n\n        # Ensure you call the parent class's save.\n        # .save() does not return anything\n        super().save()\n\n        # Add your own processing here if you don't need access to the\n        # socialaccount being deleted.\n```\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_FORMS = {'disconnect': 'mysite.forms.MyCustomSocialDisconnectForm'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Provider Settings in Django-Allauth\nDESCRIPTION: Configuration settings for the Telegram social account provider in Django-Allauth. Includes bot credentials and authentication parameter settings. The auth_date_validity parameter controls the expiration time of the authentication, defaulting to 30 seconds.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/telegram.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'telegram': {\n        'APP': {\n            'client_id': '<bot_id>',\n\n            # NOTE: For the secret, be sure to provide the complete bot token,\n            # which typically includes the bot ID as a prefix.\n            'secret': '<bot token>',\n        },\n        'AUTH_PARAMS': {'auth_date_validity': 30},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trello Authentication Parameters in Django Settings\nDESCRIPTION: Python configuration code for setting up Trello OAuth scope parameters in Django settings. This snippet shows how to customize the authentication scope to include read and write permissions.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/trello.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'trello': {\n        'AUTH_PARAMS': {\n            'scope': 'read,write',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox Accounts Provider Settings in Python for django-allauth\nDESCRIPTION: This code snippet demonstrates how to configure the Firefox Accounts provider settings in django-allauth. It includes options for setting the OAuth scope, OAuth endpoint, and profile endpoint. These settings allow customization of the authentication process for Firefox Accounts.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/fxa.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'fxa': {\n        'SCOPE': ['profile'],\n        'OAUTH_ENDPOINT': 'https://oauth.accounts.firefox.com/v1',\n        'PROFILE_ENDPOINT': 'https://profile.accounts.firefox.com/v1',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Element Template Implementation\nDESCRIPTION: Example of a custom h1 element template implementation with conditional styling. This shows how to override the default allauth element templates with project-specific versions that include custom classes and styling.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/templates.rst#2025-04-17_snippet_3\n\nLANGUAGE: django\nCODE:\n```\n{% load allauth %}\n<div class=\"myproject-h1 aa-{{ origin|slugify }}\"\n     style=\"font-size: {% if \"foo\" in attrs.tags %}3{% else %}5{% endif %}rem\">\n    {% slot %}{% endslot %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Untappd Provider Settings in Django\nDESCRIPTION: Configuration settings for the Untappd social authentication provider in django-allauth. Includes setting a custom user agent to comply with Untappd's API requirements and avoid rate limiting. The user agent should follow the format '<platform>:<app ID>:<version string>'.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/untappd.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'untappd': {\n        'USER_AGENT': 'django:myappid:1.0',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-hosted Gitea Instance in Django Settings\nDESCRIPTION: This snippet demonstrates how to configure the SOCIALACCOUNT_PROVIDERS setting in Django to specify the URL of a self-hosted Gitea instance. This is necessary when using a custom Gitea server instead of the default gitea.com.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/gitea.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'gitea': {\n        'GITEA_URL': 'https://your.gitea-server.domain',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flickr OAuth Permissions in Django-AllAuth\nDESCRIPTION: Configuration snippet for specifying Flickr authentication permissions in Django settings. Sets custom permission level using AUTH_PARAMS, defaulting to 'read' if not specified. Can be set to 'write' for additional access.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/flickr.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'flickr': {\n        'AUTH_PARAMS': {\n            'perms': 'write',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Primary Email Change Signal in Django-allauth\nDESCRIPTION: This signal is sent when a user's primary email address has been changed. It includes both the old and new email addresses.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.email_changed(request, user, from_email_address, to_email_address)\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Django-Allauth User Sessions\nDESCRIPTION: This snippet shows how to add the necessary applications to the INSTALLED_APPS setting in Django's settings file. It includes the 'django.contrib.humanize' and 'allauth.usersessions' apps.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/usersessions/installation.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'django.contrib.humanize',\n    'allauth.usersessions',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring DigitalOcean OAuth Scope Settings in Django-Allauth\nDESCRIPTION: Python configuration snippet for setting up DigitalOcean OAuth scopes in Django-Allauth. This configuration enables both read and write access to the DigitalOcean API through the OAuth authentication process.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/digitalocean.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'digitalocean': {\n        'SCOPE': [\n            'read write',\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Logout Signal in Django-allauth\nDESCRIPTION: This signal is emitted when a user logs out. It includes the request object and the user instance.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.user_logged_out(request, user)\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontier OAuth2 Provider Settings in Django\nDESCRIPTION: Python configuration for specifying the OAuth2 scope and email verification settings for the Frontier provider in django-allauth. Sets up authentication ('auth') and Companion API ('capi') scopes with verified email requirement.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/frontier.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n  'frontier': {\n    'SCOPE': ['auth', 'capi'],\n    'VERIFIED_EMAIL': True\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification in Django-allauth\nDESCRIPTION: Example demonstrating the configuration setting for unique email constraints in the EmailAddress model, showcasing the change from a simple unique constraint to a combined constraint of email and verified status.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2023.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_UNIQUE_EMAIL=True\n```\n\n----------------------------------------\n\nTITLE: Handling Email Confirmation Signal in Django-allauth\nDESCRIPTION: This signal is sent after an email address in the database is updated and set to confirmed status.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.email_confirmed(request, email_address)\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn OpenID Connect Provider in django-allauth\nDESCRIPTION: This snippet demonstrates how to set up LinkedIn as an OpenID Connect provider in django-allauth. It includes the necessary configuration for the SOCIALACCOUNT_PROVIDERS setting, specifying the provider ID, name, client credentials, and server URL.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/linkedin.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"openid_connect\": {\n        \"APPS\": [\n            {\n                \"provider_id\": \"linkedin\",\n                \"name\": \"LinkedIn\",\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"server_url\": \"https://www.linkedin.com/oauth\",\n                },\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding TOTP Deactivation Form in Django-allauth MFA\nDESCRIPTION: Example of how to create a custom form for deactivating Time-Based One-Time Password (TOTP) in django-allauth MFA.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.mfa.totp.forms import DeactivateTOTPForm\nclass MyCustomDeactivateTOTPForm(DeactivateTOTPForm):\n  pass\n```\n\n----------------------------------------\n\nTITLE: Configuring ShareFile Provider Settings in Django-AllAuth\nDESCRIPTION: Example configuration for setting up ShareFile social authentication provider in Django-AllAuth. Demonstrates how to specify the subdomain, API control plane (APICP), and default URL settings in the SOCIALACCOUNT_PROVIDERS dictionary.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/sharefile.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'sharefile': {\n        'SUBDOMAIN': 'TEST',\n        'APICP': 'sharefile.com',\n        'DEFAULT_URL': 'https://secure.sharefile.com',\n                 }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MediaWiki Provider Settings in Django-Allauth\nDESCRIPTION: Configuration dictionary for MediaWiki OAuth provider settings. Includes REST API endpoint for authentication and template for user profile pages. Default configuration points to meta.wikimedia.org services.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/mediawiki.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'mediawiki': {\n        'REST_API': 'https://meta.wikimedia.org/w/rest.php',\n        'USERPAGE_TEMPLATE': 'https://meta.wikimedia.org/wiki/{username}',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Provider Login URLs with Django Template Tags\nDESCRIPTION: Examples of using provider_login_url template tag to generate social authentication URLs for different providers like OpenID and Twitter. Shows basic usage with optional next parameter for redirect.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/templates.rst#2025-04-17_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% load socialaccount %}\n\n<a href=\"{% provider_login_url \"openid\" openid=\"https://www.google.com/accounts/o8/id\" next=\"/success/url/\" %}\">Google</a>\n<a href=\"{% provider_login_url \"twitter\" %}\">Twitter</a>\n```\n\n----------------------------------------\n\nTITLE: Customizing Change Password Form in Django-allauth\nDESCRIPTION: Example of overriding the ChangePasswordForm class to add custom processing when changing a password. The custom form must be specified in the ACCOUNT_FORMS setting.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/forms.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.account.forms import ChangePasswordForm\nclass MyCustomChangePasswordForm(ChangePasswordForm):\n\n    def save(self):\n\n        # Ensure you call the parent class's save.\n        # .save() does not return anything\n        super().save()\n\n        # Add your own processing here.\n```\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS = {'change_password': 'mysite.forms.MyCustomChangePasswordForm'}\n```\n\n----------------------------------------\n\nTITLE: Handling Email Removal Signal in Django-allauth\nDESCRIPTION: This signal is sent when an email address is deleted from a user's account.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.email_removed(request, user, email_address)\n```\n\n----------------------------------------\n\nTITLE: Configuring EDX Provider Settings in Django\nDESCRIPTION: Configuration snippet for setting up the EDX provider in SOCIALACCOUNT_PROVIDERS. Sets the EDX_URL parameter to point to a custom Open EDX installation instead of the default edx.org which is non-functional.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/edx.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n  'edx': {\n      'EDX_URL': \"https://openedx.local\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Session Client Changes Signal in Django-Allauth\nDESCRIPTION: Signal that is emitted when detecting changes in IP address or user agent during an active user session. This signal requires USERSESSIONS_TRACK_ACTIVITY setting to be enabled to function.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/usersessions/signals.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nallauth.usersessions.signals.session_client_changed(request, from_session, to_session)\n```\n\n----------------------------------------\n\nTITLE: Configuring SOCIALACCOUNT_PROVIDERS for Agave API in Django Settings\nDESCRIPTION: This code snippet demonstrates how to configure the SOCIALACCOUNT_PROVIDERS dictionary in Django settings for Agave API integration. It specifies the API_URL for the Agave tenant, with a default value provided if not explicitly set.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/agave.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'agave': {\n        'API_URL': 'https://api.tacc.utexas.edu',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QuickBooks Provider Settings in Django\nDESCRIPTION: Python configuration for QuickBooks social account provider including sandbox mode and API scope settings. Defines OpenID scope and QuickBooks-specific permissions for accounting and payment features.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/quickbooks.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'quickbooks': {\n        'SANDBOX': TRUE,\n        'SCOPE': [\n          'openid',\n          'com.intuit.quickbooks.accounting com.intuit.quickbooks.payment',\n          'profile',\n          'phone',\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Email Templates in django-allauth\nDESCRIPTION: Template file paths for customizing text email subjects and messages for account confirmation and signup confirmation emails.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/email.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naccount/email/email_confirmation_signup_subject.txt\naccount/email/email_confirmation_signup_message.txt\n\naccount/email/email_confirmation_subject.txt\naccount/email/email_confirmation_message.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Email Template in Django Allauth\nDESCRIPTION: A Django template for password reset emails that extends a base email template. It includes internationalized text explaining the password reset request, provides a reset URL link, and conditionally reminds the user of their username if that information is available.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_reset_key_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktrans %}You're receiving this email because you or someone else has requested a password reset for your user account.\nIt can be safely ignored if you did not request a password reset. Click the link below to reset your password.{% endblocktrans %}\n\n{{ password_reset_url }}{% if username %}\n\n{% blocktrans %}In case you forgot, your username is {{ username }}.{% endblocktrans %}{% endif %}{% endautoescape %}{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Facebook Locale Function in Django-Allauth\nDESCRIPTION: This snippet demonstrates how to customize the locale function for the Facebook SDK in Django-Allauth. It shows an example of setting a callable that returns a specific locale (US English) for all requests.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/facebook.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'facebook': {\n        'LOCALE_FUNC': lambda request: 'en_US'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Allauth with Social Account Support\nDESCRIPTION: Command to install Django-Allauth package with socialaccount extras using pip. This is required to use the social account functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/introduction.rst#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install \"django-allauth[socialaccount]\"\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Configuration for CERN in Django Settings\nDESCRIPTION: Example configuration for setting up CERN authentication using OpenID Connect in django-allauth after CERN's SSO upgrade.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2023.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"openid_connect\": {\n        \"APPS\": [\n            {\n                \"provider_id\": \"cern\",\n                \"name\": \"CERN\",\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"server_url\": \"https://auth.cern.ch/auth/realms/cern/.well-known/openid-configuration\",\n                },\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PayPal Provider Settings in Django-AllAuth\nDESCRIPTION: Python configuration dictionary for setting up PayPal authentication provider in Django-AllAuth. Defines the OAuth scope for accessing user data and sets the operating mode (live or sandbox).\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/paypal.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'paypal': {\n        'SCOPE': ['openid', 'email'],\n        'MODE': 'live',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication for Google Provider in Django-Allauth\nDESCRIPTION: Example configuration to enable email authentication specifically for the Google provider in Django-Allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'EMAIL_AUTHENTICATION': True\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom TOTP Activation Form in Django Settings\nDESCRIPTION: Settings configuration to use a custom TOTP activation form in django-allauth MFA.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMFA_FORMS = {\n    'activate_totp': 'mysite.forms.MyCustomActivateTOTPForm',\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Facebook Login with Django-Allauth Template Tags\nDESCRIPTION: This snippet demonstrates how to use Django-Allauth template tags to create a Facebook login link. It loads the necessary socialaccount template library and uses the provider_login_url tag to generate the login URL.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/facebook.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{% load socialaccount %}\n{% providers_media_js %}\n<a href=\"{% provider_login_url \"facebook\" %}\">Facebook Connect</a>\n```\n\n----------------------------------------\n\nTITLE: Overriding TOTP Activation Form in Django-allauth MFA\nDESCRIPTION: Example of how to create a custom form for activating Time-Based One-Time Password (TOTP) in django-allauth MFA.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.mfa.totp.forms import ActivateTOTPForm\nclass MyCustomActivateTOTPForm(ActivateTOTPForm):\n  pass\n```\n\n----------------------------------------\n\nTITLE: Embedding Malicious Logout Link Example\nDESCRIPTION: An example of how a malicious user could embed a logout link in an image tag, which demonstrates why logout should use POST requests rather than GET requests for security reasons.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/views.rst#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"http://example.com/accounts/logout/\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Userinfo Endpoint\nDESCRIPTION: Optional configuration to fetch user information from Google's userinfo endpoint for avatar URLs\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/google.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'FETCH_USERINFO' : True\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NetIQ/Microfocus AccessManager Settings in Django-Allauth\nDESCRIPTION: This code snippet demonstrates how to set up the SOCIALACCOUNT_PROVIDERS dictionary for NetIQ/Microfocus AccessManager in Django-Allauth. It specifies the NETIQ_URL setting, which should be set to the URL of your identity provider.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/netiq.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'netiq': {\n        'NETIQ_URL': 'https://my.identity.provider.example.org',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Social Auth Provider Settings in Django\nDESCRIPTION: Django settings configuration for Line social authentication. Specifies the client ID, secret, and required scope permissions for Line login integration. The scope includes profile, OpenID, and email access.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/line.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n              'line': {\n                  'APP': {\n                      'client_id': 'LINE_LOGIN_CHANNEL_ID',\n                      'secret': 'LINE_LOGIN_CHANNEL_SECRET'\n                  },\n                  \"SCOPE\": ['profile', 'openid', 'email']\n              }\n          }\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Backend for Development in Django\nDESCRIPTION: This snippet shows how to set up the email backend to print emails to the console during development, avoiding the need for an SMTP server.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/faq.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n```\n\n----------------------------------------\n\nTITLE: Handling User Signup Signal in Django-allauth\nDESCRIPTION: This signal is sent when a user signs up for a new account. It's typically followed by a user_logged_in signal, unless email verification prevents immediate login.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.user_signed_up(request, user)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Providers in Django Settings\nDESCRIPTION: This snippet demonstrates how to configure a list of OpenID providers in the Django settings file. It includes examples for Yahoo, Hyves, and Google.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/openid.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'openid': {\n        'SERVERS': [\n            {\n                'id': 'yahoo',\n                'name': 'Yahoo',\n                'openid_url': 'http://me.yahoo.com',\n            },\n            {\n                'id': 'hyves',\n                'name': 'Hyves',\n                'openid_url': 'http://hyves.nl',\n            },\n            {\n                'id': 'google',\n                'name': 'Google',\n                'openid_url': 'https://www.google.com/accounts/o8/id',\n            },\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TrainingPeaks OAuth Provider Settings in Django-allauth\nDESCRIPTION: Python configuration dictionary for TrainingPeaks social account provider settings. Defines OAuth scope for athlete profile access and environment selection between sandbox and production services.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/trainingpeaks.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'trainingpeaks': {\n        'SCOPE': ['athlete:profile'],\n        'USE_PRODUCTION': False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Globus Provider Settings in Django-Allauth\nDESCRIPTION: Configuration snippet for setting up Globus authentication scopes in Django-Allauth. Demonstrates how to specify OpenID Connect scopes including basic profile access and Globus transfer API permissions. The configuration includes openid, profile, email, and transfer API scopes.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/globus.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'globus': {\n        'SCOPE': [\n            'openid',\n            'profile',\n            'email',\n            'urn:globus:auth:scope:transfer.api.globus.org:all'\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon Cognito Domain for Django-Allauth\nDESCRIPTION: This snippet shows how to specify the Amazon Cognito User Pool domain in the Django settings. It's required for the authentication flow to work correctly with django-allauth. The domain should be set to the full URL of your Cognito User Pool, including the domain prefix or custom domain.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/amazon_cognito.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'amazon_cognito': {\n        'DOMAIN': 'https://<domain-prefix>.auth.us-east-1.amazoncognito.com',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlassian OAuth Scope Settings in Django\nDESCRIPTION: Python configuration code for specifying OAuth scopes in Django settings. Demonstrates how to set custom scopes for Atlassian authentication, with default scope being 'read:me' if not specified.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/atlassian.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'atlassian': {\n        'SCOPE': [\n            'read:me',\n            'write:jira-work',\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting USERSESSIONS_TRACK_ACTIVITY in Django-Allauth\nDESCRIPTION: Controls whether user sessions are kept updated with the latest IP address, user agent, and timestamp. Requires the UserSessionsMiddleware to be installed. Default is False.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/usersessions/configuration.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"USERSESSIONS_TRACK_ACTIVITY\": False\n```\n\n----------------------------------------\n\nTITLE: Rendering User Display with user_display Tag in Django Template\nDESCRIPTION: Demonstrates how to use the user_display template tag to render a user's name without making assumptions about the user representation. This tag is loaded from the 'account' template library.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/templates.rst#2025-04-17_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% load account %}\n\n{% user_display user %}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStreetMap OAuth 2.0 Settings in Django\nDESCRIPTION: Python configuration for setting up OpenStreetMap OAuth 2.0 using OpenID Connect in django-allauth. Includes client ID, secret, and required OAuth scopes for authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/openstreetmap.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n  \"openid_connect\": {\n      \"APPS\": [\n          {\n              \"provider_id\": \"openstreetmap\",\n              \"name\": \"OpenStreetMap\",\n              \"client_id\": \"<insert-id>\",\n              \"secret\": \"<insert-secret>\",\n              \"settings\": {\n                  \"server_url\": \"https://www.openstreetmap.org/.well-known/oauth-authorization-server\",\n                  \"scope\": [\"openid\", \"read_prefs\"],\n              },\n          },\n      ]\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Figma OAuth Callback URL for Django-Allauth\nDESCRIPTION: Development callback URL configuration for Figma OAuth integration with Django-Allauth. This URL needs to be configured in the Figma developer console for OAuth authentication flow.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/figma.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/figma/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Django-Allauth\nDESCRIPTION: This RST (reStructuredText) snippet defines the structure of the Django-Allauth documentation. It includes the project README and sets up a table of contents with sections covering various aspects of the library.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. django-allauth documentation master file, created by\n   sphinx-quickstart on Wed Jun  6 22:58:42 2012.\n\n.. include:: ../README.rst\n    :end-before: .. end-welcome\n\nContents\n********\n\n.. toctree::\n   :maxdepth: 2\n\n   introduction/index\n   installation/index\n   account/index\n   socialaccount/index\n   mfa/index\n   usersessions/index\n   headless/index\n   common/index\n   project/index\n   faq\n   release-notes/index\n\n\nIndices and tables\n******************\n\n* :ref:`genindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom TOTP Deactivation Form in Django Settings\nDESCRIPTION: Settings configuration to use a custom TOTP deactivation form in django-allauth MFA.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMFA_FORMS = {\n    'deactivate_totp': 'mysite.forms.MyCustomDeactivateTOTPForm',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentiq Provider Settings in Django Allauth\nDESCRIPTION: This code snippet demonstrates how to configure the Authentiq provider in the SOCIALACCOUNT_PROVIDERS setting of django-allauth. It specifies the scope of identity details to request from Authentiq.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/authentiq.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'authentiq': {\n      'SCOPE': ['email', 'aq:name']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Battle.net Provider Settings in Django-AllAuth\nDESCRIPTION: Configuration dictionary for Battle.net OAuth2 provider settings. Defines the scope for accessing WoW and StarCraft 2 profiles, and specifies the default region for authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/battlenet.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'battlenet': {\n        'SCOPE': ['wow.profile', 'sc2.profile'],\n        'REGION': 'us',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Email Verification Code Template in Django\nDESCRIPTION: A Django template for sending authentication codes via email. The template extends a base message template, includes translation blocks for internationalization, and displays a verification code with a security warning.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/login_code_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load account %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktranslate %}Your sign-in code is listed below. Please enter it in your open browser window.{% endblocktranslate %}{% endautoescape %}\n\n{{ code }}\n\n{% blocktranslate %}This mail can be safely ignored if you did not initiate this action.{% endblocktranslate %}{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Requesting Extra Attributes from OpenID Provider\nDESCRIPTION: This configuration shows how to request additional attributes from an OpenID provider (MojeId in this case). It specifies the attribute ID, name, and whether it's required.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/openid.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = \\\n    { 'openid':\n        { 'SERVERS':\n            [\n                {\n                    'id': 'mojeid',\n                    'name': 'MojeId',\n                    'openid_url': 'https://mojeid.cz/endpoint/',\n                    'extra_attributes': [\n                        ('phone', ''http://axschema.org/contact/phone/default', False),\n                        ('birth_date', 'http://axschema.org/birthDate', False),\n                    ]\n                },\n            ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Recovery Codes Generation Form in Django Settings\nDESCRIPTION: Settings configuration to use a custom recovery codes generation form in django-allauth MFA.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nMFA_FORMS = {\n    'generate_recovery_codes': 'mysite.forms.MyCustomGenerateRecoveryCodesForm',\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing DefaultAccountAdapter Class in Sphinx Documentation\nDESCRIPTION: A Sphinx directive to automatically generate documentation for the DefaultAccountAdapter class from the allauth.account.adapter module. The :members: option tells Sphinx to include documentation for all class members.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/adapter.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: allauth.account.adapter.DefaultAccountAdapter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Handling Email Addition Signal in Django-allauth\nDESCRIPTION: This signal is emitted when a new email address is added to a user's account.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.email_added(request, user, email_address)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataporten Callback URL for Django-Allauth\nDESCRIPTION: Specifies the development callback URL for Dataporten authentication in a Django project using django-allauth. This URL is used to handle the authentication response from Dataporten.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/dataporten.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/dataporten/login/callback\n```\n\n----------------------------------------\n\nTITLE: Configuring NextCloud Provider Settings in Python for django-allauth\nDESCRIPTION: This code snippet demonstrates how to configure the NextCloud social account provider settings in django-allauth. It includes the structure for specifying the client ID, secret, and server URL.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/nextcloud.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"nextcloud\": {\n        \"APPS\": [\n            {\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"server\": \"https://nextcloud.example.org\",\n                }\n            }\n        ]\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Enterprise URL in Django-Allauth\nDESCRIPTION: Python configuration for specifying a custom GitHub Enterprise server URL in django-allauth settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/github.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'github': {\n        'GITHUB_URL': 'https://your.github-server.domain',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Messages Framework Reference\nDESCRIPTION: Reference to Django's messaging framework configuration in settings.py. Shows that django.contrib.messages must be included in INSTALLED_APPS for message functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/messages.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.messages\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Email Template Structure with Django Template Language\nDESCRIPTION: A base email template with internationalization support that includes greeting and footer sections with the site name and domain. It contains a content block that can be overridden by templates that extend this one. The template uses autoescape tags to control HTML escaping behavior.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/base_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}{% autoescape off %}{% blocktrans with site_name=current_site.name %}Hello from {{ site_name }}!{% endblocktrans %}\n\n{% block content %}{% endblock content %}\n\n{% blocktrans with site_name=current_site.name site_domain=current_site.domain %}Thank you for using {{ site_name }}!\n{{ site_domain }}{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Configuring YNAB Provider Settings in Django-Allauth\nDESCRIPTION: Django settings configuration for YNAB social account provider. Sets up the authentication scope for read/write access. Default scope is read-only if not specified.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/ynab.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'ynab': {\n        'SCOPE': ''\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Password Change Signal in Django-allauth\nDESCRIPTION: This signal is sent when a user successfully changes their password.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.password_changed(request, user)\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Callback URL for django-allauth\nDESCRIPTION: Specifies the development callback URL for Discord integration in django-allauth. This URL is essential for the OAuth2 flow and must be added to the Discord application settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/discord.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/discord/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Evernote Provider Settings in Django-Allauth\nDESCRIPTION: Python configuration dictionary for setting up Evernote OAuth2 authentication. Specifies the Evernote hostname, which defaults to sandbox.evernote.com if not explicitly set. Used for determining whether to use production or sandbox environment.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/evernote.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'evernote': {\n        'EVERNOTE_HOSTNAME': 'evernote.com'  # defaults to sandbox.evernote.com\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinterest OAuth2 Settings in Django-Allauth\nDESCRIPTION: Python configuration dictionary for setting up Pinterest OAuth2 authentication. Specifies the scope for user account access and API version selection. Default scope is read access if not specified.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/pinterest.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'pinterest': {\n        'SCOPE': ['user_accounts:read'],\n        \"API_VERSION\": \"v5\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vimeo OAuth 2 for django-allauth\nDESCRIPTION: Instructions for setting up Vimeo OAuth 2 authentication in django-allauth. Includes the app registration URL to obtain API credentials and the development callback URL to be used during setup.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/vimeo_oauth2.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nApp registration (get your key and secret here)\n    https://developer.vimeo.com/apps\n\nDevelopment callback URL\n    http://localhost:8000/accounts/vimeo_oauth2/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Displaying Personalized Sign-in Success Message with Django-Allauth Templates\nDESCRIPTION: This Django template snippet loads required template tags, displays the user's name, and shows a translated success message. It uses the account template tags from django-allauth and Django's internationalization system for translation.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/logged_in.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load account %}\n{% load i18n %}\n{% user_display user as name %}\n{% blocktrans %}Successfully signed in as {{name}}.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Social Account Added Signal\nDESCRIPTION: Signal emitted when a user explicitly connects a social account to their local account. Not triggered for automatic social account creation.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/signals.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nallauth.socialaccount.signals.social_account_added(request, sociallogin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lichess Provider Settings in Django\nDESCRIPTION: Configuration dictionary for setting up Lichess OAuth provider in Django-Allauth. Requires self-generated client ID and secret strings. The callback URL should be configured to point to the local development server during testing.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/lichess.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n              'lichess': {\n                  'APP': {\n                      'client_id': 'LICHESS_CLIENT_ID',\n                      'secret': 'LICHESS_CLIENT_SECRET'\n                  },\n              }\n          }\n```\n\n----------------------------------------\n\nTITLE: Configuring Wahoo OAuth2 Provider in Django-AllAuth\nDESCRIPTION: This snippet demonstrates how to set up the SOCIALACCOUNT_PROVIDERS dictionary for Wahoo OAuth2 integration in Django-AllAuth. It specifies the default scope as 'user_read' for reading profile data. Additional scopes can be added for extended functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/wahoo.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'wahoo': {\n        'SCOPE': ['user_read'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Eventbrite OAuth Callback URL for django-allauth\nDESCRIPTION: This URL is used as both the Application URL and OAuth Redirect URI in the Eventbrite app settings. It specifies the endpoint where Eventbrite will redirect users after authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/eventbrite.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/eventbrite/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Implementing Google One Tap Sign-In\nDESCRIPTION: HTML template snippet for adding Google One Tap Sign-In functionality to a webpage\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/google.rst#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//accounts.google.com/gsi/client\" async></script>\n<div id=\"g_id_onload\"\n     data-client_id=\"123-secret.apps.googleusercontent.com\"\n     data-login_uri=\"{% url 'google_login_by_token' %}\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Template for Existing Account Notification in Django Allauth\nDESCRIPTION: A Django template that extends a base email message layout to provide notification when someone tries to create an account with an already registered email address. The template includes internationalization support through i18n and uses blocktrans for text translation. It provides the attempted email address and a password reset URL to help users recover their existing account.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/account_already_exists_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktrans %}You are receiving this email because you or someone else tried to signup for an\naccount using email address:\n\n{{ email }}\n\nHowever, an account using that email address already exists.  In case you have\nforgotten about this, please use the password forgotten procedure to recover\nyour account:\n\n{{ password_reset_url }}{% endblocktrans %}{% endautoescape %}{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Development Callback URL for Notion Integration in Django Allauth\nDESCRIPTION: The callback URL to be used during development for the Notion integration with Django Allauth. This URL should be entered in the 'Redirect URL' field of the Notion integration settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/notion.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/notion/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Social Account Updated Signal\nDESCRIPTION: Signal emitted after social account update, triggered on login with connected account or completing connect flow. Useful for processing extra social account data.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/signals.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nallauth.socialaccount.signals.social_account_updated(request, sociallogin)\n```\n\n----------------------------------------\n\nTITLE: Configuring JupyterHub API URL in Django Settings\nDESCRIPTION: This code snippet demonstrates how to specify the JupyterHub server URL in the SOCIALACCOUNT_PROVIDERS setting of a Django project. It's essential for proper authentication integration with JupyterHub.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/jupyterhub.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'jupyterhub': {\n        'API_URL': 'https://jupyterhub.example.com',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Email as Username in Django Template\nDESCRIPTION: Illustrates how to display the user's email as the username when ACCOUNT_USERNAME_REQUIRED is set to False and ACCOUNT_USER_MODEL_USERNAME_FIELD is set to None. This approach directly uses the user object in the template.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/templates.rst#2025-04-17_snippet_2\n\nLANGUAGE: django\nCODE:\n```\nIn case you forgot, your username is {{ user }}.\n```\n\n----------------------------------------\n\nTITLE: Configuring Tumblr OAuth2 Provider in Django settings.py\nDESCRIPTION: Demonstrates how to set up the Tumblr OAuth2 provider in the Django settings.py file. It includes setting the scope and app credentials.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/tumblr_oauth2.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"tumblr\": {\n        \"SCOPE\": [\"basic\", \"write\"],\n        \"APP\": {\n            \"client_id\": os.environ.get(\"TUMBLR_CLIENT_ID\", \"\"),\n            \"secret\": os.environ.get(\"TUMBLR_CLIENT_SECRET\", \"\"),\n            \"key\": \"\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Change Notification in Django Allauth\nDESCRIPTION: This Django template extends a base notification template and uses internationalization to display a message informing the user about an email address change. It includes placeholders for the old and new email addresses.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_changed_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}Your email has been changed from {{ from_email }} to {{ to_email }}.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Odnoklassniki App Registration URL for Django Allauth\nDESCRIPTION: The URL for registering an Odnoklassniki app to obtain the necessary key and secret for authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/odnoklassniki.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://apiok.ru/wiki/pages/viewpage.action?pageId=42476486\n```\n\n----------------------------------------\n\nTITLE: Social Account Removed Signal\nDESCRIPTION: Signal emitted when a user disconnects a social account from their local account.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/signals.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nallauth.socialaccount.signals.social_account_removed(request, socialaccount)\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon OAuth Callback URL for Django-Allauth\nDESCRIPTION: Specifies the development callback URL format for Amazon OAuth integration with Django-Allauth. This URL is essential for the OAuth flow and must be configured in the Amazon developer console.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/amazon.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://example.com/accounts/amazon/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Creating Password Reset Code Email Template in Django\nDESCRIPTION: A Django template that extends a base email message template to send password reset codes to users. The template includes the reset code and explanatory text that informs users about the purpose of the email and what to do with the code.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_reset_code_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load account %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktranslate %}Your password reset code is listed below. Please enter it in your open browser window.{% endblocktranslate %}{% endautoescape %}\n\n{{ code }}\n\n{% blocktranslate %}This mail can be safely ignored if you did not initiate this action.{% endblocktranslate %}{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch OAuth Development Callback URL\nDESCRIPTION: Development callback URL configuration for Twitch OAuth integration in django-allauth. This URL must be configured in the Twitch developer console for authentication to work properly.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitch.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/twitch/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Displaying Translated Error Message for Primary Email Removal in Django Allauth\nDESCRIPTION: This snippet loads the i18n translation tags and uses blocktrans to create a translatable error message. It informs the user that they cannot remove their primary email address, including the email address in the message.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/cannot_delete_primary_email.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}You cannot remove your primary email address ({{email}}).{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Localized Password Change Success Message in Django Allauth\nDESCRIPTION: This snippet uses Django's template language to display a localized success message after a user changes their password. It utilizes the i18n template tag library for internationalization and the blocktrans tag for translatable content.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/password_changed.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Password successfully changed.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Confirmation Message with Django Template\nDESCRIPTION: Template code that loads Django's internationalization module and uses blocktrans tag to display a localized confirmation message with the recipient's email address. The template supports multiple languages through Django's i18n system.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/email_confirmation_sent.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Confirmation email sent to {{email}}.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Using Element Templatetag for Template Customization\nDESCRIPTION: Examples of using the allauth element templatetag system to create customizable UI components. The first example shows basic heading usage, while the second shows how to override the template with custom styling.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/templates.rst#2025-04-17_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% load allauth %}\n{% element h1 tags=\"foo,bar\" %}Welcome{% endelement %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Twitter OAuth2 Callback URL for Development\nDESCRIPTION: The callback URL to be used during development for Twitter OAuth2 authentication. This URL should be set in the Twitter app settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter_oauth2.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/twitter_oauth2/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Salesforce OAuth2 Callback URL for Django Allauth\nDESCRIPTION: Specifies the development callback URL for Salesforce OAuth2 integration with Django Allauth. This URL is used to handle the OAuth2 response from Salesforce after successful authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/salesforce.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://localhost:8000/accounts/salesforce/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Patreon Provider Settings in Django-Allauth\nDESCRIPTION: This code snippet demonstrates how to configure the Patreon provider settings in Django-Allauth. It specifies the API version and the scope of permissions requested from Patreon.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/patreon.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'patreon': {\n        'VERSION': 'v1',\n        'SCOPE': ['pledges-to-me', 'users', 'my-campaign'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Email Removal Notification Template in Django\nDESCRIPTION: Template that extends the base email notification template to display a message when an email address is removed from a user's account. Uses Django's translation system for internationalization support.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_deleted_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}Email address {{ deleted_email }} has been removed from your account.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Translated Email Address Update Message in Django Template\nDESCRIPTION: Uses Django's translation system (i18n) with blocktrans tag to display a localized confirmation message when a primary email address has been set. The template loads the i18n translation library and wraps the message in blocktrans tags for internationalization support.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/primary_email_set.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Primary email address set.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Element Template with Named Slots\nDESCRIPTION: Implementation of a form element template that uses named slots. This example shows how override templates can arrange content from named slots in a custom layout.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/templates.rst#2025-04-17_snippet_5\n\nLANGUAGE: django\nCODE:\n```\n{% load allauth %}\n<form method=\"{{ attrs.method }}\" action=\"{{ attrs.action }}\">\n    {% slot body %}\n    {% endslot %}\n    <hr>\n    {% slot actions %}\n    {% endslot %}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Admin for SocialApp Configuration\nDESCRIPTION: This URL path is used to access the Django admin interface for configuring the Twitter SocialApp object.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter.rst#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/admin/socialaccount/socialapp/\n```\n\n----------------------------------------\n\nTITLE: Generating SAML Provider Login URL in Django Template\nDESCRIPTION: Django template tag for generating a login URL for a specific SAML provider.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/saml.rst#2025-04-17_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{% load socialaccount %}\n{% provider_login_url \"<provider_id>\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edmodo OAuth2 Provider Settings in Django\nDESCRIPTION: Configuration snippet for specifying Edmodo OAuth2 permission scopes in Django settings. Shows how to set custom scopes including basic access, group reading, connections, user email, message creation and library item management.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/edmodo.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'edmodo': {\n        'SCOPE': [\n            'basic',\n            'read_groups',\n            'read_connections',\n            'read_user_email',\n            'create_messages',\n            'write_library_items',\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Translated Account Connection Notification in Django Template\nDESCRIPTION: A Django template that displays a message confirming a third-party account connection. It loads the internationalization tags, disables autoescaping, and uses blocktrans to make the message translatable to different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/email/account_connected_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Third-Party Account Connected{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Sign-in Code Confirmation Message with Django Template\nDESCRIPTION: A Django template snippet that displays a localized confirmation message informing the user that a sign-in code has been sent to them. It uses the {% load i18n %} tag to enable translation functionality and {% blocktrans %} to make the text translatable while passing the recipient variable.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/login_code_sent.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}A sign-in code has been sent to {{recipient}}.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Confirmation Error Message in Django Allauth\nDESCRIPTION: A Django template snippet that loads the internationalization tag library and displays a translatable message when an email address is already confirmed by a different account. The message includes the specific email address using the {{email}} template variable.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/email_confirmation_failed.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Unable to confirm {{email}} because it is already confirmed by a different account.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Email Templates in django-allauth\nDESCRIPTION: Template file paths for customizing HTML email messages for account confirmation and signup confirmation emails.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/email.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\naccount/email/email_confirmation_signup_message.html\n\naccount/email/email_confirmation_message.html\n```\n\n----------------------------------------\n\nTITLE: Setting Odnoklassniki Development Callback URL for Django Allauth\nDESCRIPTION: The callback URL structure for Odnoklassniki authentication in a development environment using django-allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/odnoklassniki.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.com/accounts/odnoklassniki/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Handling Initial Password Set Signal in Django-allauth\nDESCRIPTION: This signal is emitted when a password is successfully set for the first time.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/signals.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nallauth.account.signals.password_set(request, user)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exist OAuth2 Settings in Django-AllAuth\nDESCRIPTION: This snippet demonstrates how to configure the SOCIALACCOUNT_PROVIDERS setting in Django to specify the desired scopes for the Exist OAuth2 integration. The default scopes include read access to mood, health, and productivity data.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/exist.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'exist': {\n        'SCOPE': ['mood_read', 'health_read', 'productivity_read'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Base Template and Adding Translated Message for New Security Key (Django)\nDESCRIPTION: This Django template extends a base notification template and adds a translated message block. The message informs the user that a new security key has been added to their account.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/webauthn_added_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}A new security key has been added.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Translating Authenticator Activation Message using Django Templates\nDESCRIPTION: A Django template that loads the internationalization tag library and uses blocktrans to enable translation of the authenticator activation confirmation message. The template has autoescape disabled for this block.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/totp_activated_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Authenticator App Activated{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Migrating TOTP and Recovery Codes from django-allauth-2fa to django-allauth MFA in Python\nDESCRIPTION: This Django management command migrates existing TOTP keys and recovery codes from django-allauth-2fa to the built-in MFA implementation in django-allauth. It reads existing TOTPDevice and StaticDevice objects, encrypts the data, and creates new Authenticator objects for both TOTP and recovery codes.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/django-allauth-2fa.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport base64\n\nfrom allauth.mfa.adapter import get_adapter\nfrom allauth.mfa.models import Authenticator\nfrom django.core.management.base import BaseCommand\nfrom django_otp.plugins.otp_static.models import StaticDevice\nfrom django_otp.plugins.otp_totp.models import TOTPDevice\n\n\nclass Command(BaseCommand):\n    def handle(self, **options):\n        adapter = get_adapter()\n        authenticators = []\n        for totp in TOTPDevice.objects.filter(confirmed=True).iterator():\n            recovery_codes = set()\n            for sdevice in StaticDevice.objects.filter(confirmed=True, user_id=totp.user_id).iterator():\n                recovery_codes.update(sdevice.token_set.values_list(\"token\", flat=True))\n            secret = base64.b32encode(bytes.fromhex(totp.key)).decode(\"ascii\")\n            totp_authenticator = Authenticator(\n                user_id=totp.user_id,\n                type=Authenticator.Type.TOTP,\n                data={\"secret\": adapter.encrypt(secret)},\n            )\n            authenticators.append(totp_authenticator)\n            authenticators.append(\n                Authenticator(\n                    user_id=totp.user_id,\n                    type=Authenticator.Type.RECOVERY_CODES,\n                    data={\n                        \"migrated_codes\": [adapter.encrypt(c) for c in recovery_codes],\n                    },\n                )\n            )\n        Authenticator.objects.bulk_create(authenticators)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket OAuth2 App Registration URL\nDESCRIPTION: The URL for registering a new Bitbucket OAuth2 consumer application. Replace {{yourusername}} with your actual Bitbucket username.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/bitbucket.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://bitbucket.org/account/user/{{yourusername}}/oauth-consumers/new\n```\n\n----------------------------------------\n\nTITLE: Default Element Template Implementation\nDESCRIPTION: Default implementation of an h1 element template in allauth. This template renders a standard HTML h1 tag with content provided through a slot.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/templates.rst#2025-04-17_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{% load allauth %}<h1>{% slot %}{% endslot %}</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox OAuth Callback URL\nDESCRIPTION: Default development callback URL configuration for Dropbox OAuth authentication in Django-Allauth. This URL needs to be configured in the Dropbox developer console.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/dropbox.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/dropbox/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Rendering Internationalized Security Key Added Message with Django Template Language\nDESCRIPTION: This template renders a notification that a security key has been added to a user account. It uses Django's internationalization tags to make the message translatable and disables HTML escaping for the content.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/webauthn_added_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Security Key Added{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Security Key Removal Email Template in Django\nDESCRIPTION: A Django template that extends the base email notification template and includes a translated message about security key removal. Uses the i18n template tag library for internationalization.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/webauthn_removed_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}A security key has been removed.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Twitter App Callback URL for Production\nDESCRIPTION: This URL template is used as the production callback URL for a Twitter app. It should be replaced with the actual domain of the production website.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://{{yourdomain}}.com/accounts/twitter/login/callback/\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Configuration for Keycloak in Django Settings\nDESCRIPTION: Example configuration for setting up Keycloak authentication using OpenID Connect in django-allauth after deprecation of dedicated Keycloak provider.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2023.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    \"openid_connect\": {\n        \"APPS\": [\n            {\n                \"provider_id\": \"keycloak\",\n                \"name\": \"Keycloak\",\n                \"client_id\": \"<insert-id>\",\n                \"secret\": \"<insert-secret>\",\n                \"settings\": {\n                    \"server_url\": \"http://keycloak:8080/realms/master/.well-known/openid-configuration\",\n                },\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Shopify App Settings\nDESCRIPTION: Configuration settings for enabling embedded Shopify app functionality in django-allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/shopify.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'shopify': {\n        'IS_EMBEDDED': True,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Stateless Mode for OpenID Provider\nDESCRIPTION: This configuration shows how to force an OpenID provider (Steam in this case) to operate in stateless mode.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/openid.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = \\\n    { 'openid':\n        { 'SERVERS':\n            [\n                {\n                    'id': 'steam',\n                    'name': 'Steam',\n                    'openid_url': 'https://steamcommunity.com/openid',\n                    'stateless': True,\n                },\n            ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Slack API Documentation for Sign-In Integration\nDESCRIPTION: Link to the official Slack API documentation for implementing the 'Sign in with Slack' feature. This resource provides detailed information on the authentication process and available API endpoints.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/slack.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI documentation\n    https://api.slack.com/docs/sign-in-with-slack\n```\n\n----------------------------------------\n\nTITLE: Extending Base Email Template for Two-Factor Authentication Recovery Codes Notification\nDESCRIPTION: This template extends a base notification email template and includes internationalization support. It defines a notification message block that informs users that a new set of two-factor authentication recovery codes has been generated.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/recovery_codes_generated_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}A new set of Two-Factor Authentication recovery codes has been generated.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Twitter OAuth2 Callback URL for Production\nDESCRIPTION: The callback URL to be used in production for Twitter OAuth2 authentication. Replace {{yourdomain}} with your actual domain name.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter_oauth2.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://{{yourdomain}}.com/accounts/twitter_oauth2/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Django-allauth User Token Form Configuration\nDESCRIPTION: Configuration example showing how to override the default UserTokenForm in PasswordResetFromKeyView through ACCOUNT_FORMS settings.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2023.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nACCOUNT_FORMS[\"user_token\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom OpenID Login Link in Django Template\nDESCRIPTION: This template tag demonstrates how to manually create a login link for a specific OpenID provider (Google in this example) with a custom success URL.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/openid.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{% load socialaccount %}\n<a href=\"{% provider_login_url \"openid\" openid=\"https://www.google.com/accounts/o8/id\" next=\"/success/url/\" %}\">Google</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Strava OAuth2 Callback URL for Django-allauth\nDESCRIPTION: Specifies the development callback URL format for Strava OAuth2 integration with django-allauth. This URL is essential for the OAuth2 flow to complete successfully.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/strava.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.com/accounts/strava/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Accessing Twitter App Keys\nDESCRIPTION: This URL template is used to access the keys tab of a Twitter application. The {{yourappid}} should be replaced with the actual Twitter app ID.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter.rst#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://apps.twitter.com/app/{{yourappid}}/keys\n```\n\n----------------------------------------\n\nTITLE: Displaying Internationalized Recovery Codes Notification in Django Template\nDESCRIPTION: This snippet shows how to display a translated notification message informing users that new recovery codes have been generated. It uses Django's template tags for internationalization (i18n) with blocktrans to enable translation of the message into different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/messages/recovery_codes_generated.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}A new set of recovery codes has been generated.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Weibo OAuth2 Callback URL Configuration\nDESCRIPTION: Example callback URL configuration for Weibo OAuth2 integration. Due to Weibo's limitation of not accepting port numbers in callback URLs, development setup requires running the server on port 80.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/weibo.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1/accounts/weibo/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack App Registration and Callback URL for Django Allauth\nDESCRIPTION: Instructions for registering a Slack app and setting up the development callback URL for use with django-allauth. The callback URL is essential for the OAuth flow to complete successfully.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/slack.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nApp registration (get your key and secret here)\n    https://api.slack.com/apps/new\n\nDevelopment callback URL\n    http://example.com/accounts/slack/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Documenting the DefaultHeadlessAdapter class in reStructuredText\nDESCRIPTION: This directive instructs Sphinx to automatically generate documentation for the DefaultHeadlessAdapter class from the allauth.headless.adapter module, including all its members. It's part of the API documentation for Django Allauth's headless functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/adapter.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: allauth.headless.adapter.DefaultHeadlessAdapter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Parameter for Social Login\nDESCRIPTION: Using the process parameter with provider_login_url to specify login behavior between login and connect modes.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/templates.rst#2025-04-17_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n<a href=\"{% provider_login_url \"twitter\" process=\"connect\" %}\">Connect a Twitter account</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorized Redirect URI for Zoho in Django-Allauth\nDESCRIPTION: Specifies the callback URL to be used when setting up Zoho authentication in django-allauth. This URL should be entered in the Zoho API console during app registration.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/zoho.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/zoho/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Third-party Account Connection Email Template in Django\nDESCRIPTION: Template that extends a base notification template to create an email message informing users when a third-party authentication provider has been connected to their account. Uses Django's internationalization features for translation support.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/email/account_connected_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}A third-party account from {{ provider }} has been connected to your account.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Miro App URL for Django-Allauth Integration\nDESCRIPTION: The URL for creating a Miro app and obtaining the Client ID and Client Secret required for django-allauth integration.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/miro.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://miro.com/app/settings/user-profile/apps\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoDoc Directive for DefaultUserSessionsAdapter\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the DefaultUserSessionsAdapter class, including all its members.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/usersessions/adapter.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: allauth.usersessions.adapter.DefaultUserSessionsAdapter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring LemonLDAP::NG Provider in Django Settings\nDESCRIPTION: This snippet shows how to configure the LemonLDAP::NG provider in Django settings. It sets the LEMONLDAP_URL in the SOCIALACCOUNT_PROVIDERS dictionary.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/lemonldap.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'lemonldap': {\n        'LEMONLDAP_URL': 'https://auth.example.com'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hubspot Authentication Callback URL for Django-Allauth\nDESCRIPTION: Specifies the development callback URL for Hubspot authentication when using Django-Allauth. This URL should be used in the Hubspot app configuration for local development environments.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/hubspot.rst#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://localhost:8000/accounts/hubspot/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in ReStructuredText for Django-allauth Headless Documentation\nDESCRIPTION: This snippet defines a table of contents structure for the django-allauth headless documentation using ReStructuredText format. It organizes the documentation into logical sections that users can navigate to learn about implementation details.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   introduction\n   installation\n   configuration\n   api\n   adapter\n   tokens\n   integrations\n   faq\n```\n\n----------------------------------------\n\nTITLE: Extending Django Allauth Social Account Template for Connected Messages\nDESCRIPTION: This template extends the base 'account_connected.txt' template from the socialaccount/messages directory. It uses Django's template inheritance to reuse the content from the parent template for consistency across the application.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/messages/account_connected_updated.txt#2025-04-17_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"socialaccount/messages/account_connected.txt\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating Shopify Login URL Template Tag\nDESCRIPTION: Demonstrates how to generate a Shopify login URL with shop parameter using Django template tags.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/shopify.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{% provider_login_url \"shopify\" shop=\"petstore\" %}\n```\n\n----------------------------------------\n\nTITLE: Django Settings Configuration Reference\nDESCRIPTION: Reference to Django settings configuration showing where messages framework should be listed.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/messages.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsettings.INSTALLED_APPS\n```\n\n----------------------------------------\n\nTITLE: Specifying Questrade Callback URL for Django-Allauth\nDESCRIPTION: This snippet shows the required format for the development callback URL when integrating Questrade with Django-Allauth. The URL must use HTTPS and follow the specified path structure.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/questrade.rst#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://example.com/accounts/questrade/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Setting Tumblr OAuth2 Callback URL for Production\nDESCRIPTION: Provides the format for the callback URL to be used in a production environment for Tumblr OAuth2 authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/tumblr_oauth2.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{{yourdomain}}.com/accounts/tumblr_oauth2/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for MFA Documentation in ReStructuredText\nDESCRIPTION: This snippet creates a table of contents using the toctree directive in ReStructuredText. It lists various subtopics related to multi-factor authentication in Django-Allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n   introduction\n   configuration\n   forms\n   adapter\n   webauthn\n   django-allauth-2fa\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Removal Notification with Internationalization in Django Template\nDESCRIPTION: A Django template snippet that displays a simple 'Email Removed' message with support for internationalization through the blocktrans tag. The autoescape off directive prevents HTML escaping of the translated content.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_deleted_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Email Removed{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Online/Per-User Access Mode\nDESCRIPTION: Settings configuration for enabling online/per-user access mode in Shopify authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/shopify.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'shopify': {\n        'AUTH_PARAMS': {'grant_options[]': 'per-user'},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing django-allauth with SAML support\nDESCRIPTION: Command to install django-allauth with SAML dependencies using pip.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/saml.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"django-allauth[saml]\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenID Dependencies for Django Allauth\nDESCRIPTION: This command installs the necessary dependencies for using OpenID authentication with django-allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/openid.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"django-allauth[socialaccount,openid]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VK authentication for django-allauth\nDESCRIPTION: Steps for setting up VK (VKontakte) authentication in django-allauth. Provides the app registration URL and the development callback URL (referred to as \"Site address\") to be used during configuration.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/vimeo_oauth2.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nApp registration\n    https://vk.com/editapp?act=create\n\nDevelopment callback URL (\"Site address\")\n    http://localhost\n```\n\n----------------------------------------\n\nTITLE: Generating Email Subject for Third-Party Account Disconnection in Django Allauth\nDESCRIPTION: This snippet uses Django template tags to create a translatable email subject line. It loads the i18n module for internationalization, disables auto-escaping, and uses blocktrans for translation of the subject text.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/email/account_disconnected_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Third-Party Account Disconnected{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Exchange Site Settings in Django-Allauth\nDESCRIPTION: Configuration settings for specifying which Stack Exchange site (e.g. Stack Overflow) to use for OAuth authentication. This setting determines what data will be stored in SocialAccount.extra_data.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/stackexchange.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'stackexchange': {\n        'SITE': 'stackoverflow',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using user_display Tag within blocktrans in Django Template\nDESCRIPTION: Shows how to use the user_display tag within a blocktrans block for internationalization. The user display is first assigned to a variable and then used in the translation block.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/templates.rst#2025-04-17_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% load account %}\n\n{% user_display user as user_display %}\n{% blocktrans %}{{ user_display }} has logged in...{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Allauth Package Requirements\nDESCRIPTION: Requirements specification for Django Allauth package version 65.7.0 or higher with optional features enabled including multi-factor authentication (MFA), SAML authentication, social account integration, and Steam authentication support.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/examples/regular-django/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango-allauth[mfa,saml,socialaccount,steam]>=65.7.0\n```\n\n----------------------------------------\n\nTITLE: Setting Tumblr OAuth2 Callback URL for Development\nDESCRIPTION: Specifies the callback URL to be used during development for Tumblr OAuth2 authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/tumblr_oauth2.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/tumblr_oauth2/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Including Email Confirmation Template in Django Allauth\nDESCRIPTION: Uses Django template include tag to embed the standard email confirmation message template from the account/email directory. This template contains the message content sent to users for email verification.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_confirmation_signup_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% include \"account/email/email_confirmation_message.txt\" %}\n```\n\n----------------------------------------\n\nTITLE: Documenting the DefaultMFAAdapter class in RST format\nDESCRIPTION: A reStructuredText directive that references the DefaultMFAAdapter class from the allauth.mfa.adapter module. The directive includes all class members in the generated documentation.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/adapter.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: allauth.mfa.adapter.DefaultMFAAdapter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in Sphinx Documentation for Django Allauth Installation\nDESCRIPTION: This code snippet defines a table of contents for the Django Allauth installation documentation using the Sphinx documentation system's toctree directive. It sets the maximum depth to 2 and includes links to requirements, quickstart, and examples pages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/installation/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   requirements\n   quickstart\n   examples\n```\n\n----------------------------------------\n\nTITLE: Configuring Dwolla Provider Settings in Django Allauth\nDESCRIPTION: This snippet shows how to configure the Dwolla provider in Django Allauth. It sets the required scope for API access and specifies the environment as 'sandbox' for development purposes.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/dwolla.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIALACCOUNT_PROVIDERS = {\n    'dwolla': {\n        'SCOPE': [\n            'Send',\n            'Transactions',\n            'Funding',\n            'AccountInfoFull',\n        ],\n        'ENVIROMENT':'sandbox',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Twitter App Callback URL for Development\nDESCRIPTION: This URL is used as the development callback URL when creating a new Twitter app. It specifies where Twitter should redirect users after authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/twitter/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Session Cookies for Sub-domain Routing\nDESCRIPTION: Django configuration for setting up session and CSRF cookie domains when using sub-domain based routing between frontend and backend.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/headless/spec/doc/description.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSESSION_COOKIE_DOMAIN = \"project.org\"\nCSRF_COOKIE_DOMAIN = \"project.org\"\n```\n\n----------------------------------------\n\nTITLE: Defining RestructuredText Table of Contents\nDESCRIPTION: Defines the table of contents structure for Django-allauth regular accounts documentation using RestructuredText directives.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/account/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n   introduction\n   configuration\n   rate_limits\n   views\n   templates\n   forms\n   decorators\n   signals\n   email\n   phone\n   adapter\n   advanced\n```\n\n----------------------------------------\n\nTITLE: Overriding Recovery Codes Generation Form in Django-allauth MFA\nDESCRIPTION: Example of how to create a custom form for generating recovery codes in django-allauth MFA.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/mfa/forms.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom allauth.mfa.recovery_codes.forms import GenerateRecoveryCodesForm\nclass MyCustomGenerateRecoveryCodesForm(GenerateRecoveryCodesForm):\n  pass\n```\n\n----------------------------------------\n\nTITLE: Configuring SoundCloud OAuth2 Callback URL\nDESCRIPTION: The callback URL that needs to be configured in the SoundCloud application settings for OAuth2 authentication. This URL should match your Django-Allauth application's callback endpoint.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/soundcloud.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.com/accounts/soundcloud/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Django-allauth Documentation\nDESCRIPTION: This snippet creates a table of contents using reStructuredText syntax. It includes links to various sections of the django-allauth documentation, focusing on common functionality topics.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   configuration\n   email\n   templates\n   messages\n   admin\n   https\n```\n\n----------------------------------------\n\nTITLE: Setting SOCIALACCOUNT_LOGIN_ON_GET in Django-allauth\nDESCRIPTION: A new setting introduced in version 0.47.0 to control whether social login endpoints require a POST request for initiating the handshake. The default value is False for improved security.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2021.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSOCIALACCOUNT_LOGIN_ON_GET\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom OAuth Callback URL for Django-Allauth\nDESCRIPTION: This snippet shows the callback URL to be used when registering a Zoom app for integration with Django-Allauth. It specifies the endpoint where Zoom will redirect after successful authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/zoom.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/zoom/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Running Account Management Command in Django\nDESCRIPTION: This command removes primary flags for email addresses that don't match user.email, addressing a rare bug affecting users who add Google social login to existing accounts.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2013.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py account_unsetmultipleprimaryemails\n```\n\n----------------------------------------\n\nTITLE: Including Features Section from README in RST\nDESCRIPTION: This RST directive includes the features section from the project's README file into the current document.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/introduction/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../README.rst\n    :start-after: .. begin-features\n    :end-before: .. end-features\n```\n\n----------------------------------------\n\nTITLE: Documenting AbstractTokenStrategy Class Using Sphinx\nDESCRIPTION: This RST directive instructs Sphinx to automatically generate documentation for the AbstractTokenStrategy class from the allauth.headless.tokens.base module. The :members: option tells Sphinx to include documentation for all members of the class.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/headless/tokens.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: allauth.headless.tokens.base.AbstractTokenStrategy\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Verification Message in Django Template\nDESCRIPTION: This Django template renders an email verification message for the django-allauth authentication system. It includes conditional logic to display either a verification code or an activation URL, depending on the context.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_confirmation_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load account %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% user_display user as user_display %}{% blocktranslate with site_name=current_site.name site_domain=current_site.domain %}You're receiving this email because user {{ user_display }} has given your email address to register an account on {{ site_domain }}.{% endblocktranslate %}\n\n{% if code %}{% blocktranslate %}Your email verification code is listed below. Please enter it in your open browser window.{% endblocktranslate %}\n\n{{ code }}{% else %}{% blocktranslate %}To confirm this is correct, go to {{ activate_url }}{% endblocktranslate %}{% endif %}{% endautoescape %}{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram OAuth Callback URL for Django-Allauth\nDESCRIPTION: Specifies the development callback URL to be used when setting up Instagram OAuth for a local Django project using django-allauth. This URL should be configured in the Instagram Developer portal.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/instagram.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/instagram/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Twitch API User Endpoint Documentation\nDESCRIPTION: URL reference to Twitch API user endpoint documentation for the new API\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2019.rst#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://dev.twitch.tv/docs/api/reference/#get-users\n```\n\n----------------------------------------\n\nTITLE: Defining Recent Changes Section in RST\nDESCRIPTION: RST markup for defining the recent changes section using toctree directive with maxdepth of 1\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   recent\n```\n\n----------------------------------------\n\nTITLE: Element Template with Named Slots\nDESCRIPTION: Example of using named slots in element templates for more complex components. This form element example demonstrates how to structure content in different named sections.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/common/templates.rst#2025-04-17_snippet_4\n\nLANGUAGE: django\nCODE:\n```\n{% load allauth %}\n{% element form method=\"post\" action=action_url %}\n    {% slot body %}\n        ...\n    {% endslot %}\n    {% slot actions %}\n        ...\n    {% endslot %}\n{% endelement %}\n```\n\n----------------------------------------\n\nTITLE: Setting Development Callback URL for Miro Authentication in Django-Allauth\nDESCRIPTION: The callback URL to be used during local development for Miro authentication in a django-allauth project.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/miro.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/miro/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Specifying Django and Sphinx Theme Dependencies\nDESCRIPTION: Defines exact version requirements for Django framework (4.2.16) and Sphinx Read The Docs theme (1.3.0) for use in a Python project. Uses pip-style package specification format.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDjango==4.2.16\nsphinx_rtd_theme==1.3.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Admin for SocialApp Configuration\nDESCRIPTION: The URL path to access the Django admin interface for configuring the Twitter SocialApp object.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter_oauth2.rst#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/admin/socialaccount/socialapp/\n```\n\n----------------------------------------\n\nTITLE: Unknown Account Email Template in Django-Allauth\nDESCRIPTION: A Django template that constructs an email message for cases where someone attempts to access a non-existent account. The template includes translations support and provides a signup link for new account creation.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/unknown_account_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktranslate %}You are receiving this email because you, or someone else, tried to access an account with email {{ email }}. However, we do not have any record of such an account in our database.{% endblocktranslate %}\n\n{% blocktranslate %}This mail can be safely ignored if you did not initiate this action.{% endblocktranslate %}\n\n{% blocktranslate %}If it was you, you can sign up for an account using the link below.{% endblocktranslate %}\n\n{{ signup_url }}{% endautoescape %}{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Django Template Tag Usage - User Display\nDESCRIPTION: Example of the user_display template tag that had security implications due to improper escaping, potentially leading to XSS vulnerabilities.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2018.rst#2025-04-17_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% user_display user %}\n```\n\n----------------------------------------\n\nTITLE: Setting Development Callback URL for Bitbucket OAuth2\nDESCRIPTION: The callback URL to be used during development for Bitbucket OAuth2 authentication with Django-AllAuth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/bitbucket.rst#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8000/accounts/bitbucket_oauth2/login/callback/\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Declaration\nDESCRIPTION: Defines the documentation structure using ReStructuredText toctree directive to organize content sections for Django Allauth user sessions.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/usersessions/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n   introduction\n   installation\n   configuration\n   signals\n   adapter\n```\n\n----------------------------------------\n\nTITLE: Password Reset Notification Template in Django\nDESCRIPTION: Email template that extends a base notification template and includes a translated message confirming password reset. Uses Django template inheritance and i18n translation tags.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_reset_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}Your password has been reset.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Locating Twitter OAuth2 Keys\nDESCRIPTION: The URL path to find the OAuth2.0 Client ID and Client Secret on the Twitter developer portal. Replace {project-id} and {app-id} with your actual project and app IDs.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/twitter_oauth2.rst#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://developer.twitter.com/en/portal/projects/{project-id}/apps/{app-id}/keys\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Live Callback URL for Django-AllAuth\nDESCRIPTION: Specifies the development callback URL for Windows Live authentication in Django-AllAuth. This URL is used to redirect users back to your application after successful authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/windowslive.rst#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8000/accounts/windowslive/login/callback/\n```\n\n----------------------------------------\n\nTITLE: Including Rationale Section from README in RST\nDESCRIPTION: This RST directive includes the rationale section from the project's README file into the current document.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/introduction/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../README.rst\n    :start-after: .. begin-rationale\n    :end-before: .. end-rationale\n```\n\n----------------------------------------\n\nTITLE: Displaying Internationalized Password Success Message with Django Template Language\nDESCRIPTION: A simple Django template that renders a translatable success message after a user successfully sets their password. The template uses Django's internationalization tags to enable translation of the success message across different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/password_set.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Password successfully set.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Adding django-extensions to INSTALLED_APPS in Django settings\nDESCRIPTION: This snippet shows how to add 'django_extensions' to the INSTALLED_APPS list in the Django settings file. This is required for running the development server with HTTPS support for local OAuth2 testing.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/mailchimp.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    ...\n    'django_extensions',\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Base Notification Template for Password Set Confirmation in Django\nDESCRIPTION: This Django template extends a base notification template and uses internationalization to display a message confirming that the user's password has been set. It's designed to be used in email notifications.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_set_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}Your password has been set.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Security Notice URL Reference\nDESCRIPTION: URL reference to CVE-2019-19844 security notice on Django's website\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2019.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCVE-2019-19844\n  <https://www.djangoproject.com/weblog/2019/dec/18/security-releases/>\n```\n\n----------------------------------------\n\nTITLE: Defining History Section in RST\nDESCRIPTION: RST markup for defining the historical changes section using toctree directive with maxdepth of 1\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   history\n```\n\n----------------------------------------\n\nTITLE: Rendering Internationalized Account Exists Message with Django Templates\nDESCRIPTION: A Django template snippet that loads i18n, disables autoescaping, and renders a translated message about account existence using blocktrans template tag.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/account_already_exists_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Account Already Exists{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Generating Email Subject for New Recovery Codes in Django Allauth\nDESCRIPTION: Template that defines the email subject when new recovery codes are generated in a Django Allauth application. Uses Django's translation system (blocktrans) to enable internationalization and turns off auto-escaping for the content.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/recovery_codes_generated_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}New Recovery Codes Generated{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Account Change Notification Email Template in Django\nDESCRIPTION: A Django template that extends a base email message template and provides a structure for notifying users about account changes. It includes placeholders for the specific notification message and displays security-related information like IP address, browser details, and timestamp.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/base_notification.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_message.txt\" %}\n{% load account %}\n{% load i18n %}\n\n{% block content %}{% autoescape off %}{% blocktrans %}You are receiving this mail because the following change was made to your account:{% endblocktrans %}\n\n{% block notification_message %}\n{% endblock notification_message%}\n\n{% blocktrans %}If you do not recognize this change then please take proper security precautions immediately. The change to your account originates from:\n\n- IP address: {{ip}}\n- Browser: {{user_agent}}\n- Date: {{timestamp}}{% endblocktrans %}{% endautoescape %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Translated Email Confirmation Header in Django Template\nDESCRIPTION: Uses Django template tags to load i18n internationalization and render a translated confirmation email header. The content is wrapped in autoescape off block for raw HTML rendering.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_confirmation_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Please Confirm Your Email Address{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Iterating and Displaying Unused Codes in Django Template\nDESCRIPTION: This snippet uses a Django template for loop to iterate over a collection of unused codes. Each code is then displayed within the loop. The 'unused_codes' variable is expected to be a list or queryset of code objects passed from the view context.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/recovery_codes/download.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% for code in unused_codes %}{{ code }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Loading Translation Tags and Creating Email Subject for Django-Allauth\nDESCRIPTION: This Django template loads the internationalization tags and creates a translatable email subject line for notifications sent when a user changes their email address. The template uses autoescape off to prevent HTML escaping of the subject text and blocktrans to make the text translatable into different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_changed_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Email Changed{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Subject with Translation Support in Django Templates\nDESCRIPTION: A Django template that defines the subject line for password reset emails with internationalization support. It uses the blocktrans tag to make the 'Password Reset' text translatable into different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_reset_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Password Reset{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Including Email Confirmation Subject Template in Django Allauth\nDESCRIPTION: Django template snippet that includes the email confirmation subject template from the account/email directory. This is typically used as part of Django Allauth's email confirmation flow.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_confirmation_signup_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% include \"account/email/email_confirmation_subject.txt\" %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Phone Verification Confirmation in Django Template\nDESCRIPTION: This snippet loads the internationalization tag and uses blocktrans to create a translatable message confirming phone number verification. It includes a dynamic placeholder for the verified phone number.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/phone_verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}You have verified phone number {{phone}}.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Internationalized Email Confirmation Subject in Django Template\nDESCRIPTION: This template loads Django's internationalization tags and displays the 'Email Confirmation' text with translation support. It uses the blocktrans tag to mark the text for translation while disabling auto-escaping with the autoescape tag.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_confirm_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Email Confirmation{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Password Reset Email Subject with Internationalization Support in Django Template\nDESCRIPTION: This template snippet creates the subject line for a password reset email with internationalization support. It disables autoescaping to prevent HTML encoding of special characters in the email subject and uses blocktrans for translation functionality.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_reset_key_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Password Reset Email{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Subject in Django-Allauth\nDESCRIPTION: This template snippet defines the subject line for password reset emails in django-allauth. It loads the internationalization tags, disables auto-escaping to prevent HTML encoding of the subject, and wraps the subject text in blocktrans tags to support translation.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_reset_code_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Password Reset Code{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Translated Email Verification Message in Django Allauth\nDESCRIPTION: This snippet loads the internationalization tags and displays a translated message informing the user that their primary email address must be verified. It uses the blocktrans tag for translation of the entire text block.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/unverified_primary_email.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Your primary email address must be verified.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Sign-In Code Message with Translation in Django Template\nDESCRIPTION: A simple Django template that displays a translated 'Sign-In Code' message with autoescaping disabled. This is likely used as an email subject template for sending authentication codes to users in django-allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/login_code_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-html\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Sign-In Code{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Connection Success Message with Translation in Django-Allauth\nDESCRIPTION: This snippet displays a translated success message when a third-party account has been connected to a user's profile. It uses Django's translation tags (i18n) and blocktrans to make the message available for internationalization.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/messages/account_connected.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}The third-party account has been connected.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Internationalized Password Set Message in Django Template\nDESCRIPTION: Django template code that loads i18n translation tags and displays a 'Password Set' message. Uses blocktrans for translation support and disables autoescaping for the message block.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_set_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Password Set{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Security Key Removal Confirmation in Django Template with Translation Support\nDESCRIPTION: This snippet shows how to display a localized message confirming that a security key has been removed. It uses Django's {% load i18n %} tag to enable translation functionality and {% blocktrans %} to make the message translatable across different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/messages/webauthn_removed.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Security key removed.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Localized Password Change Confirmation in Django Allauth\nDESCRIPTION: This snippet loads the internationalization tag, disables auto-escaping, and renders a localized 'Password Changed' message using Django's translation system. It's likely part of a larger password change flow in a Django application using Allauth.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/password_changed_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Password Changed{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Extending Base Email Template for Authenticator Activation in Django\nDESCRIPTION: Django template that extends a base email notification template to display a translated message confirming authenticator app activation. Uses Django's translation system with blocktrans tag for internationalization.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/totp_activated_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}Authenticator app activated.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Release History in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a table of contents in reStructuredText format. It lists years from 2023 to 2012, with each year as a separate section and a link to its corresponding document.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/history.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n2023\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2023\n\n\n2022\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2022\n\n\n2021\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2021\n\n\n2020\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2020\n\n\n2019\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2019\n\n\n2018\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2018\n\n\n2017\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2017\n\n\n2016\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2016\n\n\n2015\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2015\n\n\n2014\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2014\n\n\n2013\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2013\n\n\n2012\n****\n\n.. toctree::\n   :maxdepth: 1\n\n   2012\n```\n\n----------------------------------------\n\nTITLE: Rendering Localized Security Key Removal Message in Django Template\nDESCRIPTION: This snippet demonstrates how to create a template that displays a localized message for security key removal. It uses Django's translation tags and the blocktrans feature for internationalization. The message is rendered without HTML escaping.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/webauthn_removed_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Security Key Removed{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Localized Sign-out Message in Django Template\nDESCRIPTION: This snippet loads the internationalization tags and uses the blocktrans tag to display a localized message confirming that the user has signed out. It's typically used in a sign-out confirmation page in a Django application using the allauth library.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/messages/logged_out.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}You have signed out.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Extending Base Email Template for Authenticator App Deactivation Notification\nDESCRIPTION: Django template that extends a base email notification template and includes a translated message for authenticator app deactivation. Uses Django's translation system with blocktrans tag for internationalization.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/totp_deactivated_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}Authenticator app deactivated.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Translated 'Unknown Account' Message in Django Template\nDESCRIPTION: A template snippet that outputs the internationalized text 'Unknown Account'. The template uses Django's i18n loading, autoescape block, and blocktrans tag to ensure the text can be properly translated into different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/unknown_account_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Unknown Account{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Subject for Authenticator App Deactivation in Django Templates\nDESCRIPTION: This template defines the email subject line for notifications sent when a user deactivates their authenticator app. It uses Django's translation tags (i18n) to support multiple languages, and the autoescape block ensures proper handling of special characters.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/email/totp_deactivated_subject.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% autoescape off %}\n{% blocktrans %}Authenticator App Deactivated{% endblocktrans %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Extending Base Email Template for Third-Party Account Disconnection in Django-allauth\nDESCRIPTION: This Django template extends a base notification template and defines a custom message block for notifying users about a disconnected third-party account. It uses the i18n template tag for internationalization and the blocktrans tag for translatable content.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/email/account_disconnected_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}A third-party account from {{ provider }} has been disconnected from your account.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Email Validation in BaseSignupForm\nDESCRIPTION: Code location in allauth/account/forms.py showing fix for email validation when ACCOUNT_EMAIL_REQUIRED=False. Previously empty emails were incorrectly flagged as duplicates.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/release-notes/2012.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nBaseSignupForm.clean_email\n```\n\n----------------------------------------\n\nTITLE: Displaying Disconnection Message with Django i18n\nDESCRIPTION: Django template snippet that loads the i18n translation module and displays a localized message confirming third-party account disconnection using blocktrans tag.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/messages/account_disconnected.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}The third-party account has been disconnected.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Internationalized Activation Message in Django Template\nDESCRIPTION: A Django template snippet that displays a translated confirmation message when an authenticator app has been successfully activated. It uses Django's i18n template tag library and blocktrans tag to enable translation of the message into different languages.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/messages/totp_activated.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Authenticator app activated.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Translated Sign Out Confirmation Message in Django Template\nDESCRIPTION: This snippet loads the Django internationalization (i18n) tag library and uses the blocktranslate tag to make the sign-out confirmation message translatable. The message informs users they have successfully signed out of all other sessions.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/usersessions/messages/sessions_logged_out.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% blocktranslate %}Signed out of all other sessions.{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Localized Security Key Addition Message in Django Template\nDESCRIPTION: This snippet loads the i18n translation tag and uses the blocktrans tag to display a localized message indicating that a security key has been added. It's typically used in a Django project utilizing the django-allauth package for authentication.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/messages/webauthn_added.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Security key added.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Configuring USERSESSIONS_ADAPTER in Django-Allauth\nDESCRIPTION: Specifies the adapter class to use for user sessions, allowing customization of default behavior. The default value is the DefaultUserSessionsAdapter.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/usersessions/configuration.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"USERSESSIONS_ADAPTER\": \"allauth.usersessions.adapter.DefaultUserSessionsAdapter\"\n```\n\n----------------------------------------\n\nTITLE: Translating Third-Party Account Error Message in Django Template\nDESCRIPTION: Django template code that loads the i18n translation library and uses blocktrans tag to provide an internationalized error message for when a third-party account is already connected to another user account.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/socialaccount/messages/account_connected_other.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}The third-party account is already connected to a different account.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Django-Allauth Adapter\nDESCRIPTION: ReStructuredText documentation snippet showing the auto-documentation configuration for the DefaultSocialAccountAdapter class from the allauth.socialaccount.adapter module.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/adapter.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: allauth.socialaccount.adapter.DefaultSocialAccountAdapter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Extending Base Email Template with Confirmation Message in Django Template Language\nDESCRIPTION: This template extends a base notification email template and uses Django's internationalization support to display a confirmation message. The template loads the i18n module for translation support and uses blocktrans tags to make the confirmation message translatable.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/account/email/email_confirm_message.txt#2025-04-17_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% extends \"account/email/base_notification.txt\" %}\n{% load i18n %}\n\n{% block notification_message %}{% blocktrans %}Your email has been confirmed.{% endblocktrans %}{% endblock notification_message %}\n```\n\n----------------------------------------\n\nTITLE: Django Template i18n Block for Authenticator Deactivation Message\nDESCRIPTION: Django template code that loads the i18n translation tags and uses blocktrans to enable internationalization of a message indicating successful deactivation of an authenticator app.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/allauth/templates/mfa/messages/totp_deactivated.txt#2025-04-17_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% load i18n %}\n{% blocktrans %}Authenticator app deactivated.{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents for Social Accounts Documentation\nDESCRIPTION: A ReStructuredText directive that creates a table of contents listing all the major sections of the social accounts documentation with a maxdepth of 1.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   introduction\n   configuration\n   provider_configuration\n   views\n   templates\n   forms\n   signals\n   providers/index\n   adapter\n   advanced\n```\n\n----------------------------------------\n\nTITLE: Installing Steam Dependencies for Django Allauth\nDESCRIPTION: This command installs the necessary dependencies for using Steam authentication with Django Allauth. It includes the socialaccount and steam extras.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/docs/socialaccount/providers/steam.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"django-allauth[socialaccount,steam]\"\n```\n\n----------------------------------------\n\nTITLE: Installing django-allauth with Steam Provider Support\nDESCRIPTION: Command to install django-allauth with social account functionality, including support for the Steam provider.\nSOURCE: https://github.com/pennersr/django-allauth/blob/main/ChangeLog.rst#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install django-allauth[socialaccount,steam]\n```"
  }
]