[
  {
    "owner": "testing-library",
    "repo": "react-testing-library",
    "content": "TITLE: Testing React Components with React Testing Library\nDESCRIPTION: A complete test example showing how to use React Testing Library to test the HiddenMessage component. It demonstrates querying elements, triggering events, and making assertions with jest-dom.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// __tests__/hidden-message.js\n// these imports are something you'd normally configure Jest to import for you\n// automatically. Learn more in the setup docs: https://testing-library.com/docs/react-testing-library/setup#cleanup\nimport '@testing-library/jest-dom'\n// NOTE: jest-dom adds handy assertions to Jest and is recommended, but not required\n\nimport * as React from 'react'\nimport {render, fireEvent, screen} from '@testing-library/react'\nimport HiddenMessage from '../hidden-message'\n\ntest('shows the children when the checkbox is checked', () => {\n  const testMessage = 'Test Message'\n  render(<HiddenMessage>{testMessage}</HiddenMessage>)\n\n  // query* functions will return the element or null if it cannot be found\n  // get* functions will return the element or throw an error if it cannot be found\n  expect(screen.queryByText(testMessage)).toBeNull()\n\n  // the queries can accept a regex to make your selectors more resilient to content tweaks and changes.\n  fireEvent.click(screen.getByLabelText(/show/i))\n\n  // .toBeInTheDocument() is an assertion that comes from jest-dom\n  // otherwise you could use .toBeDefined()\n  expect(screen.getByText(testMessage)).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing React Login Component with Mock Service Worker\nDESCRIPTION: This test suite demonstrates how to test a React login component with RTL and Mock Service Worker. It includes tests for successful login and error handling, showing how to mock API responses, simulate user interactions, and verify UI updates and side effects.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// __tests__/login.js\n// again, these first two imports are something you'd normally handle in\n// your testing framework configuration rather than importing them in every file.\nimport '@testing-library/jest-dom'\nimport * as React from 'react'\n// import API mocking utilities from Mock Service Worker.\nimport {rest} from 'msw'\nimport {setupServer} from 'msw/node'\n// import testing utilities\nimport {render, fireEvent, screen} from '@testing-library/react'\nimport Login from '../login'\n\nconst fakeUserResponse = {token: 'fake_user_token'}\nconst server = setupServer(\n  rest.post('/api/login', (req, res, ctx) => {\n    return res(ctx.json(fakeUserResponse))\n  }),\n)\n\nbeforeAll(() => server.listen())\nafterEach(() => {\n  server.resetHandlers()\n  window.localStorage.removeItem('token')\n})\nafterAll(() => server.close())\n\ntest('allows the user to login successfully', async () => {\n  render(<Login />)\n\n  // fill out the form\n  fireEvent.change(screen.getByLabelText(/username/i), {\n    target: {value: 'chuck'},\n  })\n  fireEvent.change(screen.getByLabelText(/password/i), {\n    target: {value: 'norris'},\n  })\n\n  fireEvent.click(screen.getByText(/submit/i))\n\n  // just like a manual tester, we'll instruct our test to wait for the alert\n  // to show up before continuing with our assertions.\n  const alert = await screen.findByRole('alert')\n\n  // .toHaveTextContent() comes from jest-dom's assertions\n  // otherwise you could use expect(alert.textContent).toMatch(/congrats/i)\n  // but jest-dom will give you better error messages which is why it's recommended\n  expect(alert).toHaveTextContent(/congrats/i)\n  expect(window.localStorage.getItem('token')).toEqual(fakeUserResponse.token)\n})\n\ntest('handles server exceptions', async () => {\n  // mock the server error response for this test suite only.\n  server.use(\n    rest.post('/api/login', (req, res, ctx) => {\n      return res(ctx.status(500), ctx.json({message: 'Internal server error'}))\n    }),\n  )\n\n  render(<Login />)\n\n  // fill out the form\n  fireEvent.change(screen.getByLabelText(/username/i), {\n    target: {value: 'chuck'},\n  })\n  fireEvent.change(screen.getByLabelText(/password/i), {\n    target: {value: 'norris'},\n  })\n\n  fireEvent.click(screen.getByText(/submit/i))\n\n  // wait for the error message\n  const alert = await screen.findByRole('alert')\n\n  expect(alert).toHaveTextContent(/internal server error/i)\n  expect(window.localStorage.getItem('token')).toBeNull()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Login Component with API Integration\nDESCRIPTION: This code creates a React login component that handles form submission, API calls, and state management. It includes form validation, loading states, and success/error messages displayed to the user.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// login.js\nimport * as React from 'react'\n\nfunction Login() {\n  const [state, setState] = React.useReducer((s, a) => ({...s, ...a}), {\n    resolved: false,\n    loading: false,\n    error: null,\n  })\n\n  function handleSubmit(event) {\n    event.preventDefault()\n    const {usernameInput, passwordInput} = event.target.elements\n\n    setState({loading: true, resolved: false, error: null})\n\n    window\n      .fetch('/api/login', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          username: usernameInput.value,\n          password: passwordInput.value,\n        }),\n      })\n      .then(r => r.json().then(data => (r.ok ? data : Promise.reject(data))))\n      .then(\n        user => {\n          setState({loading: false, resolved: true, error: null})\n          window.localStorage.setItem('token', user.token)\n        },\n        error => {\n          setState({loading: false, resolved: false, error: error.message})\n        },\n      )\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"usernameInput\">Username</label>\n          <input id=\"usernameInput\" />\n        </div>\n        <div>\n          <label htmlFor=\"passwordInput\">Password</label>\n          <input id=\"passwordInput\" type=\"password\" />\n        </div>\n        <button type=\"submit\">Submit{state.loading ? '...' : null}</button>\n      </form>\n      {state.error ? <div role=\"alert\">{state.error}</div> : null}\n      {state.resolved ? (\n        <div role=\"alert\">Congrats! You're signed in!</div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Login\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation with Hooks\nDESCRIPTION: A simple React functional component called HiddenMessage that uses the useState hook to control the visibility of its children. This component serves as the subject under test in the example.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// hidden-message.js\nimport * as React from 'react'\n\n// NOTE: React Testing Library works well with React Hooks and classes.\n// Your tests will be the same regardless of how you write your components.\nfunction HiddenMessage({children}) {\n  const [showMessage, setShowMessage] = React.useState(false)\n  return (\n    <div>\n      <label htmlFor=\"toggle\">Show Message</label>\n      <input\n        id=\"toggle\"\n        type=\"checkbox\"\n        onChange={e => setShowMessage(e.target.checked)}\n        checked={showMessage}\n      />\n      {showMessage ? children : null}\n    </div>\n  )\n}\n\nexport default HiddenMessage\n```\n\n----------------------------------------\n\nTITLE: Suppressing act() Warnings in React DOM 16.8\nDESCRIPTION: A workaround to silence unnecessary act() warnings when using React Testing Library with React DOM 16.8. This snippet overwrites console.error to ignore specific warning patterns related to the act() function.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// this is just a little hack to silence a warning that we'll get until we\n// upgrade to 16.9. See also: https://github.com/facebook/react/pull/14853\nconst originalError = console.error\nbeforeAll(() => {\n  console.error = (...args) => {\n    if (/Warning.*not wrapped in act/.test(args[0])) {\n      return\n    }\n    originalError.call(console, ...args)\n  }\n})\n\nafterAll(() => {\n  console.error = originalError\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for React Testing Library\nDESCRIPTION: Commands to set up Git remote configuration for contributing to React Testing Library. This ensures your main branch stays synced with the upstream repository.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/testing-library/react-testing-library.git\ngit fetch upstream\ngit branch --set-upstream-to=upstream/main main\n```\n\n----------------------------------------\n\nTITLE: Commit Message Template for Manual Major Release\nDESCRIPTION: Template for the commit message required to manually trigger a major version release. It includes the fix type, release purpose, reference to relevant issue, and required BREAKING CHANGE section.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/other/manual-releases.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfix(release): manually release a major version\n\nThere was an issue with a major release, so this manual-releases.md\nchange is to release a new major version.\n\nReference: #<the number of a relevant pull request, issue, or commit>\n\nBREAKING CHANGE: <mention any relevant breaking changes (this is what triggers the major version change so don't skip this!)>\n```\n\n----------------------------------------\n\nTITLE: Commit Message Template for Manual Minor Release\nDESCRIPTION: Template for the commit message required to manually trigger a minor version release. It includes the feat type, release purpose, and reference to relevant issue.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/other/manual-releases.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(release): manually release a minor version\n\nThere was an issue with a minor release, so this manual-releases.md\nchange is to release a new minor version.\n\nReference: #<the number of a relevant pull request, issue, or commit>\n```\n\n----------------------------------------\n\nTITLE: Commit Message Template for Manual Patch Release\nDESCRIPTION: Template for the commit message required to manually trigger a patch version release. It includes the fix type, release purpose, and reference to relevant issue.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/other/manual-releases.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfix(release): manually release a patch version\n\nThere was an issue with a patch release, so this manual-releases.md\nchange is to release a new patch version.\n\nReference: #<the number of a relevant pull request, issue, or commit>\n```\n\n----------------------------------------\n\nTITLE: Referencing Commit Message Convention Link\nDESCRIPTION: Link to the conventional changelog angular commit message format that drives the semantic versioning releases. This is critical for maintainers to understand as it directly affects version numbering.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/other/MAINTAINING.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/conventional-changelog-archived-repos/conventional-changelog-angular/blob/ed32559941719a130bb0327f886d6a32a8cbc2ba/convention.md\n```\n\n----------------------------------------\n\nTITLE: Referencing Validation Workflow in GitHub Actions\nDESCRIPTION: Shows the path to the GitHub workflow file that runs validation actions automatically when pull requests are received. This helps maintainers understand where to find the CI configuration.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/other/MAINTAINING.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`.github/workflows/validate.yml`\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for User Listings\nDESCRIPTION: HTML comment containing the template format for adding new users to the list. Shows how to format entries with company/project name links and application links.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/other/USERS.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis file should just be a bulleted list like this:\n\n- [Company/Project/Person](https://example.com) uses it in [some app](https://example.com)\n-->\n```\n\n----------------------------------------\n\nTITLE: HTML Contributors Table Markup\nDESCRIPTION: HTML table structure used to display contributor information including avatars, names, and contribution types. The table is formatted with alignment attributes and percentage-based widths for consistent layout.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kentcdodds.com\"><img src=\"https://avatars.githubusercontent.com/u/1500684?v=3?s=100\" width=\"100px;\" alt=\"Kent C. Dodds\"/><br /><sub><b>Kent C. Dodds</b></sub></a><br /><a href=\"https://github.com/testing-library/react-testing-library/commits?author=kentcdodds\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/react-testing-library/commits?author=kentcdodds\" title=\"Documentation\">📖</a> <a href=\"#infra-kentcdodds\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"https://github.com/testing-library/react-testing-library/commits?author=kentcdodds\" title=\"Tests\">⚠️</a></td>\n      <!-- Additional contributor entries removed for brevity -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: HTML Contributors Table Structure\nDESCRIPTION: HTML table markup showing contributor information including avatars, names, and contribution types indicated by emoji icons. Each contributor cell has a consistent layout with profile image, name and contribution badges.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/johann-sonntagbauer\"><img src=\"https://avatars3.githubusercontent.com/u/1239401?v=4?s=100\" width=\"100px;\" alt=\"Johann Hubert Sonntagbauer\"/><br /><sub><b>Johann Hubert Sonntagbauer</b></sub></a><br /><a href=\"https://github.com/testing-library/react-testing-library/commits?author=johann-sonntagbauer\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/react-testing-library/commits?author=johann-sonntagbauer\" title=\"Documentation\">📖</a> <a href=\"https://github.com/testing-library/react-testing-library/commits?author=johann-sonntagbauer\" title=\"Tests\">⚠️</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Contributors Table in React Testing Library\nDESCRIPTION: An HTML table structure that displays contributor information including profile pictures, names, and contribution badges. Each contributor cell includes GitHub profile links, avatar images, and contribution type indicators.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/timbonicus\"><img src=\"https://avatars0.githubusercontent.com/u/556258?v=4?s=100\" width=\"100px;\" alt=\"Tim\"/><br /><sub><b>Tim</b></sub></a><br /><a href=\"https://github.com/testing-library/react-testing-library/issues?q=author%3Atimbonicus\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/testing-library/react-testing-library/commits?author=timbonicus\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/react-testing-library/commits?author=timbonicus\" title=\"Documentation\">📖</a> <a href=\"https://github.com/testing-library/react-testing-library/commits?author=timbonicus\" title=\"Tests\">⚠️</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table structure displaying contributor information including profile pictures, names, and contribution types using aligned table cells with consistent width and vertical alignment.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/sebsilbermann\"><img src=\"https://avatars3.githubusercontent.com/u/12292047?v=4?s=100\" width=\"100px;\" alt=\"Sebastian Silbermann\"/><br /><sub><b>Sebastian Silbermann</b></sub></a><br /><a href=\"https://github.com/testing-library/react-testing-library/pulls?q=is%3Apr+reviewed-by%3Aeps1lon\" title=\"Reviewed Pull Requests\">👀</a></td>\n```\n\n----------------------------------------\n\nTITLE: Contributors Table HTML Structure\nDESCRIPTION: HTML table structure displaying contributor information including profile images, names, and contribution types. Uses GitHub avatar URLs and includes contribution indicators.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://tkdodo.eu\"><img src=\"https://avatars.githubusercontent.com/u/1021430?v=4?s=100\" width=\"100px;\" alt=\"Dominik Dorfmeister\"/><br /><sub><b>Dominik Dorfmeister</b></sub></a><br /><a href=\"https://github.com/testing-library/react-testing-library/commits?author=TkDodo\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Markdown Reference Links\nDESCRIPTION: Markdown-style reference link definitions for project badges, social links, and documentation references used throughout the README.\nSOURCE: https://github.com/testing-library/react-testing-library/blob/main/README.md#2025-04-12_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n[npm]: https://www.npmjs.com/\n[yarn]: https://classic.yarnpkg.com\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/github/actions/workflow/status/testing-library/react-testing-library/validate.yml?branch=main&logo=github\n```"
  }
]