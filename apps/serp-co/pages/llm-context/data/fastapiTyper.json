[
  {
    "owner": "fastapi",
    "repo": "typer",
    "content": "TITLE: Installing Typer Package with Pip\nDESCRIPTION: Command to install the full Typer package including all standard dependencies (rich and shellingham) via pip. This is the recommended installation method for most users.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Required CLI Arguments to Typer Command in Python\nDESCRIPTION: Building upon the previous example, this snippet shows how to define multiple required command-line arguments: 'name' and 'lastname'. Both are defined as function parameters with string type hints. Typer expects these arguments to be provided in the specified order on the command line. If either is missing, Typer will report an error. The command prints a greeting using both provided arguments.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/first-steps.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str, lastname: str):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional CLI Arguments Using Annotated with Default Value in Typer and Python\nDESCRIPTION: Demonstrates how to declare an optional CLI argument in Typer by combining Python's 'Annotated' typing with 'typer.Argument()' and providing a default value (e.g., 'World'). This combination informs Typer that 'name' is a CLI argument, and the presence of a default value makes the argument optional. The CLI help output reflects this with bracketed argument notation '[NAME]', and the command can be run with or without the argument. Inputs include an optional string provided via CLI or absence thereof, and output changes based on whether the argument is supplied. Typer version 0.9.0 or higher is required.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/optional.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nname: Annotated[str, typer.Argument()] = \"World\"\n```\n\n----------------------------------------\n\nTITLE: Running a Typer Application\nDESCRIPTION: This code snippet shows how to run a Typer application from the command line. It assumes the application code is saved in a file named `main.py`.  Executing `python main.py` will run the Typer application. The output shown \"‚ú® The magic happens here ‚ú®\" is a placeholder for the actual output of the application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ python main.py\n\n‚ú® The magic happens here ‚ú®\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Typer CLI Application in Python\nDESCRIPTION: This snippet demonstrates the simplest possible Typer application. It initializes a Typer application instance, defines a single command using the `@app.command()` decorator, and includes a standard Python entry point to run the application. The command simply prints 'Hello World'. It serves as a basic template for all Typer applications.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/first-steps.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Converting a Required Argument to an Optional CLI Option in Python with Typer\nDESCRIPTION: Example showing how to convert the lastname parameter from a required CLI argument to an optional CLI option by giving it a default empty string value.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/first-steps.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str, lastname: str = \"\", formal: bool = False):\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n```\n\n----------------------------------------\n\nTITLE: Making Typer Option Required with Ellipsis (Python)\nDESCRIPTION: This snippet demonstrates another way to explicitly make a Typer command-line option required. It uses the `typer.Option` function and sets its `default` parameter to the Ellipsis (`...`) value. This clearly indicates that the option `--lastname` has no default value and must be provided by the user when running the script.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/required.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str, lastname: str = typer.Option(default=...)):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Using @app.command() Decorator to Register Commands\nDESCRIPTION: This snippet demonstrates how to register functions as commands in a Typer application via the '@app.command()' decorator. This approach facilitates mapping functions to CLI commands, enabling the CLI to execute specific code blocks based on the invoked subcommand.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/index.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.command()\ndef create():\n    \"\"\"Create a new user.\"\"\"\n    print(\"User created\")\n\n@app.command()\ndef delete():\n    \"\"\"Delete a user.\"\"\"\n    print(\"User deleted\")\n```\n\n----------------------------------------\n\nTITLE: Properly Switching Virtual Environments and Running a Python Script - Console\nDESCRIPTION: This snippet provides the correct workflow for switching virtual environments: changing the directory, deactivating the previous environment, activating the new one, and running the desired script. Dependencies are standard Python and virtual environment management tools like 'venv'. Key parameters are the environment activation scripts and the Python executable associated with each environment. The process ensures imports resolve correctly as per the currently active environment.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project üòé\n$ deactivate\n\n// Activate the virtual environment in prisoner-of-azkaban/.venv üöÄ\n$ source .venv/bin/activate\n\n// Now when you run python, it will find the package sirius installed in this virtual environment ‚ú®\n$ python main.py\n\nI solemnly swear üê∫\n\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to a CLI Argument in Typer\nDESCRIPTION: This snippet demonstrates how to use the `help` parameter within `typer.Argument()` to provide a descriptive text for a CLI argument. It's used to enhance the auto-generated help message when the `--help` option is invoked, improving user experience.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(name: str = Argument(..., help=\"The name of the user to greet\")):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Typer CLI with typer.run()\nDESCRIPTION: This Python code snippet demonstrates how to use Typer within a script.  It imports typer, defines a main function that accepts a name as input, and then uses `typer.run(main)` to execute the function, turning it into a CLI app.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Invoking Typer App with CliRunner (Python)\nDESCRIPTION: This snippet demonstrates how to use the initialized `CliRunner` to invoke the Typer application (`app`). The `invoke` method takes the app instance and a list of strings representing the command-line arguments.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef test_app():\n    result = runner.invoke(app, [\"Camila\", \"--city\", \"Berlin\"]) #hl\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with Standard Dependencies (Bash)\nDESCRIPTION: Command to install the full Typer library using pip. This installation includes Typer's core functionality along with its standard optional dependencies, 'rich' for enhanced error display and 'shellingham' for shell auto-detection during completion installation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with Rich Support (Python)\nDESCRIPTION: This command installs Typer with the \"all\" extra, which includes the Rich library for enhanced output formatting. Rich is used to improve the display of help messages, validation errors, and exception tracebacks in CLI applications built with Typer.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/release-notes.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"typer[all]\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Path Parameters in Typer (Python)\nDESCRIPTION: This snippet demonstrates the basic declaration of a command-line parameter using the standard Python `pathlib.Path` type hint. Typer automatically handles the conversion, providing your function with a `Path` object. This allows you to use `pathlib`'s methods (e.g., `is_file()`, `read_text()`) directly on the parameter.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/path.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nimport typer\n\ndef main(config: Path):\n    if config.is_file():\n        print(f\"Config file contents: {config.read_text()}\")\n    elif config.is_dir():\n        print(\"Config is a directory, will use all its config files\")\n    else:\n        print(\"No config file\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Integrating Typer for Direct Script Execution\nDESCRIPTION: Updates the simple script to import and use the `typer` library. The `typer.run(main)` call converts the `main` function into a Typer CLI application when the script is executed directly, enabling it to handle command-line arguments and options automatically.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Creating a Single-Function Typer CLI Application in Python\nDESCRIPTION: This snippet demonstrates a minimal Typer application where a single Python function forms the main CLI interface. Typer automatically uses the decorated function as the command entry point, parsing arguments from the CLI and providing generated help output. Requires the 'typer' Python package. The main function accepts a positional argument (e.g., NAME), outputs a greeting, and handles help and error output via Typer conventions. Expected input is a string argument from the user, and output is printed to the console.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/one-or-multiple.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Parameter in Typer\nDESCRIPTION: Shows how to define an integer CLI parameter in Typer using standard Python type annotations. This demonstrates the core concept of the framework where parameter types are declared simply with Python type hints.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ntotal: int\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Validation for Numeric CLI Parameters in Typer (Python)\nDESCRIPTION: This snippet demonstrates defining CLI arguments and options with minimum and maximum validation ranges using Typer. It shows how to enforce constraints on integer and float parameters, with sample command-line invocations illustrating valid and invalid inputs, including error messages for out-of-range values.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/number.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\n// Notice the extra RANGE in the help text for --age and --score\nUsage: main.py [OPTIONS] ID\n\nArguments:\n  ID  [required]\n\nOptions:\n  --age INTEGER RANGE   [default: 20]\n  --score FLOAT RANGE   [default: 0]\n  --help                Show this message and exit.\n\n// Pass all the CLI parameters\n$ python main.py 5 --age 20 --score 90\n\nID is 5\n--age is 20\n--score is 90.0\n\n// Pass an invalid ID\n$ python main.py 1002\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'ID': 1002 is not in the range 0<=x<=1000.\n\n// Pass an invalid age\n$ python main.py 5 --age 15\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--age': 15 is not in the range x>=18.\n\n// Pass an invalid score\n$ python main.py 5 --age 20 --score 100.5\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--score': 100.5 is not in the range x<=100.\n\n// But as we didn't specify a minimum score, this is accepted\n$ python main.py 5 --age 20 --score -5\n\nID is 5\n--age is 20\n--score is -5.0\n\n```\n\n----------------------------------------\n\nTITLE: Adding Path Validations in Typer (Python)\nDESCRIPTION: This snippet illustrates how to apply validations to a `pathlib.Path` parameter using `typer.Option`. Parameters like `exists`, `file_okay`, `dir_okay`, `writable`, and `readable` enable automatic validation checks before the parameter is passed to your function, derived from Click's parameter types.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/path.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nimport typer\n\ndef main(\n    config: Path = typer.Option(\n        ...,\n        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        writable=False,\n        readable=True,\n        resolve_path=False # This is default anyway\n    )\n):\n    # ... rest of the function logic from tutorial001 ...\n    if config.is_file():\n        print(f\"Config file contents: {config.read_text()}\")\n    elif config.is_dir():\n        print(\"Config is a directory, will use all its config files\")\n    else:\n        print(\"No config file\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Using CLI Arguments with Typer Commands in Python\nDESCRIPTION: This Python snippet illustrates how to define and use CLI arguments within Typer commands and subcommands. It shows how commands named 'create' and 'delete' accept a single required argument (e.g., USERNAME). Dependencies include the Typer library for CLI apps. The snippet demonstrates the implementation for capturing and handling these arguments, enabling dynamic command behavior based on input parameters.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/arguments.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typer import Typer\n\napp = Typer()\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n@app.command()\ndef delete(username: str):\n    print(f\"Deleting user: {username}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Enabling Help Display When No Arguments Are Provided\nDESCRIPTION: This code snippet shows configuring the Typer app with 'no_args_is_help=True' to automatically display help information when the CLI is invoked without any commands or arguments, improving usability and guiding users.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/index.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\napp = typer.Typer(no_args_is_help=True)\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional CLI Argument with a Static Default in Typer (Python)\nDESCRIPTION: This snippet demonstrates how to make a CLI argument optional by providing a default value directly to `typer.Argument()`. The `name` argument defaults to 'Wade Wilson' if not provided by the user. Because a default value is always provided (either user input or the default), the type hint is `str`, not `Optional[str]`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/default.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing_extensions import Annotated\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(name: Annotated[str, typer.Argument(help=\"The name to say hi to.\")] = \"Wade Wilson\"):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Interacting with a Multi-Command Typer Application\nDESCRIPTION: Demonstrates running the Python script containing the multi-command Typer application. It shows how to view the main application help, list the available subcommands (`goodbye`, `hello`), view specific help for each command, and execute the commands with required arguments (`name`) and optional boolean flags (`--formal`/`--no-formal`).\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\n Usage: main.py [OPTIONS] COMMAND [ARGS]...\n\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --install-completion          Install completion  ‚îÇ\n‚îÇ                               for the current     ‚îÇ\n‚îÇ                               shell.              ‚îÇ\n‚îÇ --show-completion             Show completion for ‚îÇ\n‚îÇ                               the current shell,  ‚îÇ\n‚îÇ                               to copy it or       ‚îÇ\n‚îÇ                               customize the       ‚îÇ\n‚îÇ                               installation.       ‚îÇ\n‚îÇ --help                        Show this message   ‚îÇ\n‚îÇ                               and exit.           ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ goodbye                                           ‚îÇ\n‚îÇ hello                                             ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// When you create a package you get ‚ú® auto-completion ‚ú® for free, installed with --install-completion\n\n// You have 2 subcommands (the 2 functions): goodbye and hello\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py hello --help\n\n Usage: main.py hello [OPTIONS] NAME\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --help          Show this message and exit.       ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py goodbye --help\n\n Usage: main.py goodbye [OPTIONS] NAME\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --formal    --no-formal      [default: no-formal] ‚îÇ\n‚îÇ --help                       Show this message    ‚îÇ\n‚îÇ                              and exit.            ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// Automatic --formal and --no-formal for the bool option üéâ\n```\n\nLANGUAGE: console\nCODE:\n```\n// Use it with the hello command\n\n$ python main.py hello Camila\n\nHello Camila\n\n// And with the goodbye command\n\n$ python main.py goodbye Camila\n\nBye Camila!\n\n// And with --formal\n\n$ python main.py goodbye --formal Camila\n\nGoodbye Ms. Camila. Have a good day.\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Value Typer Options in the Terminal (Console)\nDESCRIPTION: Provides console examples demonstrating how to invoke the script (assumed to be `main.py`) with the `--user` option. It shows checking the help message, passing valid sets of arguments (string, integer, boolean), and observing the error message when an incorrect number of arguments is provided.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/options-with-multiple-values.md#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\n// check the help\n$ python main.py --help\n\n// Notice the <TEXT INTEGER BOOLEAN>\nUsage: main.py [OPTIONS]\n\nOptions:\n  --user <TEXT INTEGER BOOLEAN>...\n  --help                          Show this message and exit.\n\n// Now try it\n$ python main.py --user Camila 50 yes\n\nThe username Camila has 50 coins\nAnd this user is a wizard!\n\n// With other values\n$ python main.py --user Morty 3 no\n\nThe username Morty has 3 coins\n\n// Try with invalid values (not enough)\n$ python main.py --user Camila 50\n\nError: Option '--user' requires 3 arguments\n```\n\n----------------------------------------\n\nTITLE: Making Typer Option Required with Annotated (Python)\nDESCRIPTION: This snippet demonstrates the recommended way to define a required command-line option in Typer using Python's type hints with `Annotated` and `typer.Option`. The option `--lastname` is made mandatory by simply defining the parameter `lastname` with `Annotated[str, typer.Option()]` and not providing a default value for the parameter itself.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/required.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing_extensions import Annotated\n\ndef main(name: str, lastname: Annotated[str, typer.Option()]):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Environment Variable for Program Execution\nDESCRIPTION: Shows how to set an environment variable directly on the command line for a single program invocation. The variable is available to the program but does not persist in the shell environment afterwards.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/environment-variables.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n// Create an env var MY_NAME in line for this program call\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n\n// The env var no longer exists afterwards\n$ python main.py\n\nHello World from Python\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Typer App\nDESCRIPTION: This Python code defines a simple CLI application using the Typer library. It creates an app, defines a callback function, and two commands: `shoot` and `load`. This snippet is a basic example to demonstrate Typer's core functionality within the context of package creation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\napp = typer.Typer()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Awesome Portal Gun\n    \"\"\"\n\n\n@app.command()\ndef shoot():\n    \"\"\"\n    Shoot the portal gun\n    \"\"\"\n    typer.echo(\"Shooting portal gun\")\n\n\n@app.command()\ndef load():\n    \"\"\"\n    Load the portal gun\n    \"\"\"\n    typer.echo(\"Loading portal gun\")\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Flag in Typer\nDESCRIPTION: Shows how to define a boolean flag in Typer using standard Python type annotations. This would create a CLI option that can be toggled by the user.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nforce: bool\n```\n\n----------------------------------------\n\nTITLE: Install Packages Using pip Directly - Console\nDESCRIPTION: This snippet shows how to install the 'typer' package into the currently activated virtual environment using pip. The command fetches and installs the package and its dependencies. Make sure the environment is active to avoid installing globally.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ pip install typer\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Creating an Explicit Typer Application\nDESCRIPTION: This snippet illustrates how to explicitly instantiate a Typer app using 'typer.Typer()', which allows for better customization and command registration when building complex CLI applications. It highlights that using 'typer.run()' internally performs similar steps, including creating a Typer app and registering a command function.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/index.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str):\n    \"\"\"Greet the user by name.\"\"\"\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Installing Typer-Slim with Standard Extras (Bash)\nDESCRIPTION: Command to install the minimal 'typer-slim' package while explicitly including the 'standard' extra dependencies ('rich' and 'shellingham') using pip. This method results in the same set of installed packages as `pip install typer`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\npip install \"typer-slim[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Rich Markup for Typer Help Messages\nDESCRIPTION: Explains how to enable Rich text formatting, including Markdown and other markup, within Typer help messages. This feature requires the `rich` library to be installed and is activated by setting the `rich_markup_mode` parameter of `typer.Typer()` to \"rich\".\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Declaring a Multi-Value Typer Option with Tuple (Python)\nDESCRIPTION: Demonstrates using `typing.Tuple[str, int, bool]` to define a Typer CLI option named `user` that expects exactly three arguments: a string, an integer, and a boolean. This requires importing `Tuple` from the `typing` module.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/options-with-multiple-values.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Tuple\n\n# ... other code ...\n\n@app.command()\ndef main(user: Tuple[str, int, bool] = typer.Option((None, None, None), help=\"User details: username, coins, wizard status\")):\n```\n\nLANGUAGE: Python\nCODE:\n```\nuser: Tuple[str, int, bool]\n```\n\n----------------------------------------\n\nTITLE: Defining CLI commands for towns using Typer in Python\nDESCRIPTION: This snippet presents a simple Typer CLI app managing 'towns' with two commands: 'burn' and 'found'. Using Typer, each command accepts a town name as input and executes the corresponding action, printing status messages. The CLI supports standard options such as help and shell completion.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/nested-subcommands.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python towns.py --help\n\nUsage: towns.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  burn\n  found\n\n$ python towns.py found \"New Asgard\"\n\nFounding town: New Asgard\n\n$ python towns.py burn Vizima\n\nBurning town: Vizima\n```\n\n----------------------------------------\n\nTITLE: Using Rich Console Markup in Typer App with Python\nDESCRIPTION: Demonstrates how to create a Typer CLI app with the rich_markup_mode=\"rich\" parameter to enable Rich Console Markup formatting in command docstrings and CLI argument and option help text. It shows usage of Rich features such as colors (e.g., making the word \"create\" bold and green), emojis, and underline styles in help output. This requires installing the Rich library as a dependency and importing Typer. The snippet illustrates enhanced help messages for the \"create\" and \"delete\" commands, showing visually rich terminal output with styled text and emoji support.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\napp = typer.Typer(rich_markup_mode=\"rich\")\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    [green][bold]create[/bold][/green] a new [italic]shiny[/italic] user. :sparkles:\n    This requires an [underline]username[/underline].\n    \"\"\"\n    pass\n\n@app.command()\ndef delete(\n    username: str = typer.Argument(..., help=\"The username to be [red]deleted[/red]\"),\n    force: bool = typer.Option(False, help=\"Force the [red]deletion[/red] :boom:\"),\n):\n    \"\"\"\n    [red][bold]delete[/bold][/red] a user with [italic]USERNAME[/italic].\n    \"\"\"\n    pass\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\nCreate a new shiny user. ‚ú®\nThis requires a username.\n\nArguments:\n  USERNAME  The username to be created  [required]\n\nOptions:\n  --help  Show this message and exit.\n\n$ python main.py delete --help\n\nUsage: main.py delete [OPTIONS] USERNAME\n\nDelete a user with USERNAME.\n\nArguments:\n  USERNAME  The username to be deleted  [required]\n\nOptions:\n  --force / --no-force  Force the deletion üí•  [default: no-force]\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Command CLI Application\nDESCRIPTION: This snippet exemplifies defining a CLI app with multiple subcommands ('create' and 'delete') to manage users. It shows how to register multiple functions as commands and invoke them via CLI, displaying command-specific output messages.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/index.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\napp = typer.Typer()\n\n@app.command()\ndef create():\n    \"\"\"Create a user.\"\"\"\n    print(\"Creating user: Hiro Hamada\")\n\n@app.command()\ndef delete():\n    \"\"\"Delete a user.\"\"\"\n    print(\"Deleting user: Hiro Hamada\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Documenting a CLI Application with Docstrings in Python using Typer\nDESCRIPTION: Example demonstrating how to add documentation to a Typer CLI application by using a docstring, which will appear in the help text when users run the command with --help.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/first-steps.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str, lastname: str = \"\", formal: bool = False):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n```\n\n----------------------------------------\n\nTITLE: Unpacking Values from a Multi-Value Tuple Option (Python)\nDESCRIPTION: Illustrates unpacking the three values (string, integer, boolean) received in the `user` tuple into separate variables `username`, `coins`, and `is_wizard`. This assumes the `user` variable holds a tuple with three elements corresponding to the types defined in the option.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/options-with-multiple-values.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nusername, coins, is_wizard = user\n```\n\n----------------------------------------\n\nTITLE: Basic `--version` CLI Option Implementation in Typer (Python)\nDESCRIPTION: This snippet demonstrates creating a simple `--version` CLI option using Typer. It defines a callback function `version_callback` that prints the program's version and exits if the `--version` flag is passed. The `typer.Option` is configured with `callback=version_callback` and explicitly named `--version` to avoid an automatic `--no-version`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/version.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n__version__ = \"0.1.0\"\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(\n    name: str = typer.Option(\"World\"),\n    version: bool = typer.Option(None, \"--version\", callback=version_callback),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple String CLI Options with Typer in Python\nDESCRIPTION: This snippet shows how to define a Typer CLI option that can be specified multiple times to collect multiple string values into a list. It uses Python's typing.List[str] to declare the parameter type. The code demonstrates processing multiple --user options, receiving them as a list of strings. Dependencies include Typer and Python's typing module. The input is multiple --user arguments and the output is a process log for each user. The snippet handles the default case where no users are provided.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/multiple-options.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(user: List[str] = typer.Option(None)):\n    if user is None:\n        print(\"No provided users (raw input = None)\")\n        raise typer.Abort()\n    for name in user:\n        print(f\"Processing user: {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Example CLI Invocation Demonstrating Optional Argument Behavior in Console\nDESCRIPTION: Shows example console commands and outputs to illustrate how optional CLI arguments behave in practice when using Typer. Running the program without the optional argument prints a default message, while providing an argument overrides the output. The CLI help output demonstrates that optional arguments are enclosed in brackets in the usage pattern to highlight their optionality.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/optional.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]\n\nOptions:\n  --help                Show this message and exit.\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py\n\nHello World!\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py Camila\n\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Formatting in Typer App with Python\nDESCRIPTION: Shows how to configure a Typer CLI app with rich_markup_mode=\"markdown\" to enable Markdown formatting in command docstrings and CLI help texts. This approach allows using Markdown syntax such as bold text, italics, lists, and emojis to enrich CLI documentation and help output. The snippet highlights the difference that Markdown does not support text color customization, so Rich markup may be preferred for colorized help. This requires Typer and Rich installed, and demonstrates styled help messages for \"create\" and \"delete\" commands with bullet points and emojis.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\napp = typer.Typer(rich_markup_mode=\"markdown\")\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    **Create** a new *shiny* user. ‚ú®\n\n    - Create a username\n    - Show that the username is created\n    \"\"\"\n    pass\n\n@app.command()\ndef delete(\n    username: str = typer.Argument(..., help=\"The username to be **deleted**\"),\n    force: bool = typer.Option(False, help=\"Force the **deletion** üí•\"),\n):\n    \"\"\"\n    **Delete** a user with *USERNAME*.\n    \"\"\"\n    pass\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\nCreate a new shiny user. ‚ú®\n\n ‚Ä¢ Create a username\n ‚Ä¢ Show that the username is created\n\nArguments:\n  USERNAME  The username to be created  [required]\n\nOptions:\n  --help  Show this message and exit.\n\n$ python main.py delete --help\n\nUsage: main.py delete [OPTIONS] USERNAME\n\nDelete a user with USERNAME.\n\nArguments:\n  USERNAME  The username to be deleted  [required]\n\nOptions:\n  --force / --no-force  Force the deletion üí•  [default: no-force]\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Testing Typer App with Simulated Input (Python)\nDESCRIPTION: This snippet shows how to test a Typer application that uses prompts. The `runner.invoke` method is used with the `input` parameter, providing a string that simulates the user typing and pressing Enter (represented by `\\n`).\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer.testing import CliRunner\n\nfrom app.main import app\n\nrunner = CliRunner()\n\ndef test_app_input():\n    result = runner.invoke(app, [\"Camila\"], input=\"camila@example.com\\n\") #hl\n    assert result.exit_code == 0\n    assert \"Hello Camila, your email is: camila@example.com\" in result.stdout\n```\n\n----------------------------------------\n\nTITLE: Help output for multi-command CLI\nDESCRIPTION: This console snippet shows the help output for a CLI application that uses the `typer.Typer()` and subcommands `goodbye` and `hello`. The help output provides details on available commands and options.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\n Usage: main.py [OPTIONS] COMMAND [ARGS]...\n\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --install-completion          Install completion  ‚îÇ\n‚îÇ                               for the current     ‚îÇ\n‚îÇ                               shell.              ‚îÇ\n‚îÇ --show-completion             Show completion for ‚îÇ\n‚îÇ                               the current shell,  ‚îÇ\n‚îÇ                               to copy it or       ‚îÇ\n‚îÇ                               customize the       ‚îÇ\n‚îÇ                               installation.       ‚îÇ\n‚îÇ --help                        Show this message   ‚îÇ\n‚îÇ                               and exit.           ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ goodbye                                           ‚îÇ\n‚îÇ hello                                             ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// When you create a package you get ‚ú® auto-completion ‚ú® for free, installed with --install-completion\n\n// You have 2 subcommands (the 2 functions): goodbye and hello\n```\n\n----------------------------------------\n\nTITLE: Using Python Generator Function with yield to Simplify Typer CLI Autocompletion Implementation\nDESCRIPTION: Shows a generator-based autocompletion function in Python that yields each completion candidate (string or tuple) instead of returning a list. This example highlights using 'yield' statements inside the completion callback to create an iterable, which Typer will consume to populate completion options. This simplifies memory usage and code structure without changing completion behavior. The function filters options based on the incomplete input before yielding.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef complete_name(incomplete: str):\n    options = [\n        (\"Camila\", \"The reader of books.\"),\n        (\"Carlos\", \"The writer of scripts.\"),\n        (\"Sebastian\", \"The type hints guy.\")\n    ]\n    for option, help_text in options:\n        if option.startswith(incomplete):\n            yield (option, help_text)\n```\n\n----------------------------------------\n\nTITLE: Confirm User Action with Abort in Typer\nDESCRIPTION: This snippet enhances the previous confirmation example by automatically aborting the program if the user does not confirm the action. This simplifies the code and provides a more user-friendly experience.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/prompt.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(delete: bool = typer.confirm(\"Are you sure you want to delete it?\", abort=True)):\n    print(\"Deleting it!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Initializing Typer CliRunner for Testing (Python)\nDESCRIPTION: This snippet shows the necessary imports and the initialization of `typer.testing.CliRunner`. The `CliRunner` object is the primary tool used to invoke the Typer application within tests, simulating command-line execution.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer.testing import CliRunner #hl\n\nfrom app.main import app #hl\n\nrunner = CliRunner() #hl\n```\n\n----------------------------------------\n\nTITLE: Accessing Tuple Elements by Index (Equivalent to Unpacking) (Python)\nDESCRIPTION: Shows an alternative method to access elements within the `user` tuple using index notation (`user[0]`, `user[1]`, `user[2]`), which is equivalent to tuple unpacking. This can be useful if direct variable assignment is not desired.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/options-with-multiple-values.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nusername = user[0]\ncoins = user[1]\nis_wizard = user[2]\n```\n\n----------------------------------------\n\nTITLE: Structuring a deeply nested CLI with users, items, and lands groups using Typer in Python\nDESCRIPTION: This snippet demonstrates building a comprehensive CLI app combining multiple Typer apps into a deeply nested command tree. The top-level commands are 'users', 'items', and 'lands'. Each has its own subcommands such as create/delete for users and items, and nested groups under lands for reigns and towns with respective subcommands. This structure shows how Typer supports complex CLI hierarchies with nested command groups, enabling modular command organization with single-entry execution via 'main.py'.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/nested-subcommands.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  lands\n  users\n\n$ python main.py users create Camila\n\nCreating user: Camila\n\n$ python main.py items create Sword\n\nCreating item: Sword\n\n$ python main.py lands reigns conquer Gondor\n\nConquering reign: Gondor\n\n$ python main.py lands towns found Cartagena\n\nFounding town: Cartagena\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `delete` Command with Confirmation in Typer CLI\nDESCRIPTION: Demonstrates invoking the 'delete' command with a username argument. The CLI prompts for confirmation before deletion, showing how user interactions are handled with prompts. The response ('y' or 'n') determines whether the user is deleted or the operation is canceled.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/options.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py delete Camila\n\n# Are you sure you want to delete the user? [y/n]: $ y\n\nDeleting user: Camila\n\n// Another example with cancellation\n$ python main.py delete Wade\n\n# Are you sure you want to delete the user? [y/n]: $ n\n\nOperation cancelled\n```\n\n----------------------------------------\n\nTITLE: Defining a Click Group with Subcommands\nDESCRIPTION: Demonstrates creating a Click application with multiple commands using `@click.group()`. The `cli` function becomes a `click.Group` object, allowing other `click.Command` objects (`hello`) to be added as subcommands using `@cli.command()`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/using-click.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n\n@click.group()\ndef cli():\n    pass\n\n\n@cli.command()\n@click.option(\"--name\", default=\"World\", help=\"The person to greet.\")\ndef hello(name: str):\n    \"\"\"Simple program that greets NAME.\"\"\"\n    print(f\"Hello {name}!\")\n\n\nif __name__ == \"__main__\":\n    cli()\n```\n\n----------------------------------------\n\nTITLE: Prompt for User Input with Typer\nDESCRIPTION: This snippet demonstrates how to use `typer.prompt()` to ask the user for input from the command line. The function displays the prompt message and returns the user's response as a string.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/prompt.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str = typer.prompt(\"What's your name?\")):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Asserting Typer CLI Test Results (Python)\nDESCRIPTION: This snippet shows how to verify the output and exit status of the CLI invocation. It asserts that the process exited successfully (code 0) and that the standard output (`result.stdout`) contains the expected text from the command.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n    assert result.exit_code == 0 #hl\n    assert \"Hello Camila\" in result.stdout #hl\n    assert \"Let's have a coffee in Berlin\" in result.stdout #hl\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Values for a Typer CLI Option with Autocompletion in Python\nDESCRIPTION: Presents a Typer CLI option declaration allowing multiple occurrences of '--name' by using a List[str] type hint for the parameter. This enables users to provide several values for the same option. The snippet requires importing List from typing and properly setting up Typer. It also shows usage examples with multiple '--name' entries resulting in multiple separate outputs. This snippet is foundational for implementing filtered autocompletion when multiple values are involved.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\nimport typer\n\ndef main(name: List[str] = typer.Option([])):\n    for n in name:\n        print(f\"Hello {n}\")\n```\n\n----------------------------------------\n\nTITLE: Sample Typer Application Script\nDESCRIPTION: A basic Python script demonstrating how to define a Typer application with multiple commands (`hello`, `bye`). It uses argument typing and optional parameters. This script is used as an example throughout the documentation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: Optional[str] = None):\n    if name:\n        typer.echo(f\"Hello {name}\")\n    else:\n        typer.echo(\"Hello World!\")\n\n\n@app.command()\ndef bye(name: Optional[str] = None):\n    if name:\n        typer.echo(f\"Bye {name}\")\n    else:\n        typer.echo(\"Goodbye!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Inferring Sub-app Help from Callback Docstring in Typer\nDESCRIPTION: Illustrates how the help text for a subcommand (a nested Typer app) can be inferred from the docstring of the function decorated with `@app.callback()`. This docstring will be used if no higher priority help is set.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Code from docs_src/subcommands/name_help/tutorial002.py, highlighted lines 9-13:\n# @users_app.callback()\n# def users_callback():\n#     \"\"\"\n#     Manage users in the app.\n#     \"\"\"\n@users_app.callback()\ndef users_callback():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Option with Short Name\nDESCRIPTION: This example shows how to declare a short name for a CLI option in Typer. It demonstrates how to specify both a custom long name (`--name`) and a short name (`-n`) using `typer.Option()`. Dependencies: Typer library.  Input: The desired long and short option names. Output: The CLI includes both the long and short option names.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/name.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[Optional[str], typer.Option(\"--name\", \"-n\")] = None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Checking 'delete' Command Help Output in Typer\nDESCRIPTION: Displays the console output for the `delete` command's help message. It outlines the command's usage, the required USERNAME argument, and options like `--force`, illustrating how help text for parameters is included in the command-specific help output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n// Check the help for delete\n$ python main.py delete --help\n\nUsage: main.py delete [OPTIONS] USERNAME\n\n  Delete a user with USERNAME.\n\n  If --force is not used, will ask for confirmation.\n\nOptions:\n  --force / --no-force  Force deletion without confirmation.  [required]\n  --help                Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Using `typer.FileText` for Reading Text Files\nDESCRIPTION: Demonstrates how to use `typer.FileText` to read text files as strings, handling non-English characters properly, and how it behaves similarly to the `open()` function in Python. This approach is suitable for ensuring correct encoding and providing editor support for text processing.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/file.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nwith open('file.txt') as f:\n    # Here f is the file-like object\n    read_data = f.read()\n    print(read_data)\n```\n\n----------------------------------------\n\nTITLE: Embedding a Typer App within a Click App\nDESCRIPTION: Illustrates how to incorporate a Typer application as a subcommand within a larger Click application. A standard Click group (`cli`) is defined. A separate Typer app (`typer_app`) is created, and its corresponding Click object is generated using `typer.main.get_command(typer_app)`. This Click object is then added as a subcommand (`sub`) to the main Click group (`cli`).\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/using-click.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nimport click\n\n\n@click.group()\ndef cli():\n    pass\n\n\n@cli.command()\ndef initdb():\n    print(\"Initialized the database\")\n\n\n@cli.command()\ndef dropdb():\n    print(\"Dropped the database\")\n\n\ntyper_app = typer.Typer()\n\n\n@typer_app.command()\ndef sub():\n    \"\"\"\n    A single-command Typer sub app\n    \"\"\"\n    print(\"Typer is now below Click, the Click app is the top level\")\n\n\ntyper_click_object = typer.main.get_command(typer_app)\ncli.add_command(typer_click_object, \"sub\")\n\n\nif __name__ == \"__main__\":\n    cli()\n```\n\n----------------------------------------\n\nTITLE: Getting Typer App Directory (Python)\nDESCRIPTION: This snippet shows how to obtain the user-specific application configuration directory using `typer.get_app_dir()`. It then constructs a potential configuration file path within this directory using `pathlib.Path` and checks if the file exists, printing a status message. Requires the `typer` and `pathlib` libraries.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/app-dir.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nfrom pathlib import Path\n\n# Get the standard application directory for the current user\n# app_name can be specified for isolation\napp_dir = typer.get_app_dir(app_name=\"MyApp\", force_posix=False)\n\n# Construct the path to a config file using pathlib's / operator\n# Explicitly type hint the variable\nconfig_path: Path = Path(app_dir) / \"config.json\"\n\n# Check if the config file exists and print a message\nif config_path.is_file():\n    print(\"Config file exists\")\nelse:\n    print(\"Config file doesn't exist yet\")\n\n# In a real application, you would typically create\n# the directory and the file if they don't exist.\n# Example:\n# config_path.parent.mkdir(parents=True, exist_ok=True)\n# config_path.write_text('{}') # Write empty JSON or default config\n```\n\n----------------------------------------\n\nTITLE: Typer: Defining Parameters with Help Panels\nDESCRIPTION: This code shows how to define Typer commands with arguments and options, assigning them to specific help panels using the `rich_help_panel` argument. This allows for a structured display of parameters in the command's `--help` output. It requires the `typer` library.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(\n    username: str = typer.Argument(..., help=\"The username to create\"),\n    lastname: str = typer.Argument(None, help=\"The last name of the new user\", rich_help_panel=\"Secondary Arguments\"),\n    force: bool = typer.Option(False, help=\"Force the creation of the user\"),\n    age: int = typer.Option(None, help=\"The age of the new user\", rich_help_panel=\"Additional Data\"),\n    favorite_color: str = typer.Option(None, help=\"The favorite color of the new user\", rich_help_panel=\"Additional Data\"),\n):\n    \"\"\"Create a new user. ‚ú®\"\"\"\n    print(f\"Creating user: {username}\")\n    if lastname:\n        print(f\"Last name: {lastname}\")\n    if force:\n        print(\"Forcing\")\n    if age:\n        print(f\"Age: {age}\")\n    if favorite_color:\n        print(f\"Favorite color: {favorite_color}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Interacting with Typer Callback and Help (Console)\nDESCRIPTION: Demonstrates how to interact with a Typer application that uses a callback. It shows checking the help message (which includes the callback's docstring and the `--verbose` option), running a command normally, and running it with the `--verbose` flag enabled. It also shows the error when placing the callback option after the command.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\n// Notice the main help text, extracted from the callback function: \"Manage users in the awesome CLI app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the awesome CLI app.\n\nOptions:\n  --verbose / --no-verbose  [default: False]\n  --install-completion      Install completion for the current shell.\n  --show-completion         Show completion for the current shell, to copy it or customize the installation.\n  --help                    Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Check the new top level CLI option --verbose\n\n// Try it normally\n$ python main.py create Camila\n\nCreating user: Camila\n\n// And now with --verbose\n$ python main.py --verbose create Camila\n\nWill write verbose output\nAbout to create a user\nCreating user: Camila\nJust created a user\n\n// Notice that --verbose belongs to the callback, it has to go before create or delete ‚õîÔ∏è\n$ python main.py create --verbose Camila\n\nUsage: main.py create [OPTIONS] USERNAME\nTry \"main.py create --help\" for help.\n\nError: No such option: --verbose\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Typer Subcommands in a Single Python File\nDESCRIPTION: Python script demonstrating a Typer application with 'users' and 'items' subcommands defined in one file. It uses separate `typer.Typer()` instances added to a main app via `app.add_typer()`. Functions like `users_create` are mapped to commands like `create` using `@sub_app.command('create')` to avoid naming conflicts while keeping CLI usage simple. Requires the `typer` library.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/single-file.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\nitems_app = typer.Typer()\napp.add_typer(users_app, name=\"users\")\napp.add_typer(items_app, name=\"items\")\n\n\n@users_app.command(\"create\")\ndef users_create(user_name: str):\n    print(f\"Creating user: {user_name}\")\n\n\n@users_app.command(\"delete\")\ndef users_delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")\n\n\n@items_app.command(\"create\")\ndef items_create(item_name: str):\n    print(f\"Creating item: {item_name}\")\n\n\n@items_app.command(\"delete\")\ndef items_delete(item_name: str):\n    print(f\"Deleting item: {item_name}\")\n\n\n@items_app.command(\"sell\")\ndef items_sell(item_name: str):\n    print(f\"Selling item: {item_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Boolean CLI Option with Short Names in Typer (Python)\nDESCRIPTION: This snippet illustrates how to assign short names to boolean CLI options in Typer, using `-f` for `--force` and `-F` for `--no-force`. It uses the `typer.Option` function with the short name and the long name separated by a comma. The program then executes different branches based on the selected flag.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/bool.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(force: bool = typer.Option(False, '-f, --force / -F, --no-force')):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Verifying `is_eager=True` Fix for `--version` Option\nDESCRIPTION: Console interaction demonstrating the effect of `is_eager=True` on the `--version` option. Even when an invalid name is provided before `--version`, the version is printed and the program exits because the `--version` option is now processed first due to `is_eager=True`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/version.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --name Rick --version\n\n// Now we only get the version, and the name is not used\nAwesome CLI Version: 0.1.0\n```\n\n----------------------------------------\n\nTITLE: Using invoke_without_command=True in Typer to run callback without subcommands\nDESCRIPTION: This code demonstrates configuring a Typer application to execute its callback even when no subcommand is provided, by setting `invoke_without_command=True`. It ensures initialization logic runs regardless of whether a command is invoked, and provides example usage with or without commands.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/context.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n// The callback is executed, we don't get the default help message\nInitializing database\n\n// Try with a command\n$ python main.py create Camila\n\n// The callback is still executed\nInitializing database\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: Exiting with a Non-Zero Error Code - Typer (Python)\nDESCRIPTION: This snippet demonstrates how to use typer.Exit with a non-zero code to signal an error exit in a Python Typer CLI program. The main command processes a username parameter and conditionally raises typer.Exit with code=1 if a reserved name (e.g., 'root') is entered. Otherwise, it acknowledges new user creation. Requires Typer installed. Input: username via CLI. Key output: distinguishes normal and error termination for system integration.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/terminating.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# File: docs_src/terminating/tutorial002.py\nimport typer\n\ndef main(username: str):\n    if username.lower() == \"root\":\n        typer.echo(\"The root user is reserved\")\n        raise typer.Exit(code=1)\n    typer.echo(f\"New user created: {username}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n\n```\n\n----------------------------------------\n\nTITLE: Building a Multi-Command Typer CLI Application in Python\nDESCRIPTION: This snippet showcases a Typer CLI app in Python with multiple commands, each implemented as a separate function and registered with the Typer app object. Each command (e.g., 'create', 'delete') is accessible via subcommands in the CLI, and Typer automatically generates a command hierarchy and contextual help. Requires the 'typer' Python package. Both commands print actions to the console, and the CLI exposes them as subcommands. Commands take no additional arguments in this example; all interactions are output only.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/one-or-multiple.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Arguments with Variable Length using `typing.List` in Typer (Python)\nDESCRIPTION: This snippet demonstrates how to define a Typer CLI argument (`files`) that accepts a variable number of values using `typing.List`. It specifies `pathlib.Path` as the type for the list items and shows how to process these arguments. A subsequent standard string argument (`celebration`) is also included to show how lists interact with other arguments.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/arguments-with-multiple-values.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom pathlib import Path\nfrom typing_extensions import Annotated\nfrom typing import List\n\n\ndef main(\n    files: Annotated[List[Path], typer.Argument()],\n    celebration: Annotated[str, typer.Argument()] = \"woohoo!\",\n):\n    for file in files:\n        if file.is_file():\n            print(f\"This file exists: {file.name}\")\n            print(celebration)\n        elif file.is_dir():\n            print(f\"This is a directory: {file.name}\")\n        elif not file.exists():\n            print(f\"The file doesn't exist: {file.name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Using Help Panels with Rich in Typer\nDESCRIPTION: This snippet demonstrates the use of help panels for organizing CLI argument help information using the `rich_help_panel` parameter. This allows for grouping arguments into logical sections in the help output, which is helpful for complex CLI applications, especially when Rich is installed.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(\n    name: str = Argument(..., help=\"Who to greet\", rich_help_panel=\"Arguments\"),\n    lastname: str = Argument(..., help=\"The last name\", rich_help_panel=\"Secondary Arguments\"),\n    age: int = Argument(..., help=\"The user's age\", rich_help_panel=\"Secondary Arguments\"),\n):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using `typer.FileTextWrite` for Writing Text Files\nDESCRIPTION: Shows how to employ `typer.FileTextWrite` for writing textual data to a file, such as configuration settings. It simplifies file writing by configuring the file mode automatically and ensures human-readable text is stored. It is a convenience wrapper around `typer.FileText` with mode set to 'w'.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/file.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n$ python main.py --config text.txt\n\nConfig written\n\n// Check the contents of the file\n$ cat text.txt\n\nSome config written by the app\n```\n\n----------------------------------------\n\nTITLE: Understanding Standard Input in CLI Applications\nDESCRIPTION: Provides an overview of standard input stream, which is used for reading user input from the keyboard, useful in advanced CLI interactions and testing.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Demonstrating Typer CLI Usage and Output from the Console\nDESCRIPTION: This code block displays example command-line interactions with Typer-generated Python CLI applications, including error messages for missing arguments, help text output, and example command invocation outputs. These console samples are not executable code, but serve to illustrate CLI behavior. No dependencies are required to read and understand the output. Expected input is user invocation of various CLI commands; output consists of Typer-generated help messages and print statements.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/one-or-multiple.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n// Without a CLI argument\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing argument 'NAME'.\n\n// With the NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Asking for help\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n```\n\nLANGUAGE: Console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test the commands\n$ python main.py create\n\nCreating user: Hiro Hamada\n\n$ python main.py delete\n\nDeleting user: Hiro Hamada\n```\n\nLANGUAGE: Console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\n// Notice the single command create\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// Try it\n$ python main.py create\n\nCreating user: Hiro Hamada\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py --help\n\n// Notice the help text from the docstring\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Creates a single user Hiro Hamada.\n\n  In the next version it will create 5 more users.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// And it still works the same, the callback does nothing\n$ python main.py create\n\nCreating user: Hiro Hamada\n```\n\n----------------------------------------\n\nTITLE: Customizing CLI Option Prompt Message in Python with Typer\nDESCRIPTION: This example shows how to customize the prompt message displayed to users when an option is missing. Instead of using a generic prompt, a custom string is provided to give more specific instructions.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/prompt.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(\n    name: str,\n    lastname: str = typer.Option(\n        ..., prompt=\"Please tell me your last name:\"\n    ),\n):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Install Packages from requirements.txt Using pip - Console\nDESCRIPTION: This snippet installs all Python dependencies listed in 'requirements.txt' using pip in the currently active virtual environment. Ensures reproducibility by installing specified package versions. Useful for collaborative or production projects.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Option with Custom Name\nDESCRIPTION: This snippet demonstrates how to customize a CLI option name using `typer.Option()`.  It shows how to change the default name (`--user-name`) to a custom name (`--name`). Dependencies: Typer library. Input: The desired option name as a string. Output: The CLI now uses the specified custom option name.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/name.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[Optional[str], typer.Option(\"--name\")] = None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Checking Typer CLI Completion with `typer` Command\nDESCRIPTION: Illustrates using the `typer` command-line tool to test shell completion for the script. It shows how to list available subcommands (`run`, `utils`), view help for a subcommand, list available options (`--help`, `--name`) via tab completion, and run the application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n// Hit the TAB key in your keyboard below where you see the: [TAB]\n$ typer ./main.py [TAB][TAB]\n\n// Depending on your terminal/shell you will get some completion like this ‚ú®\nrun    -- Run the provided Typer app.\nutils  -- Extra utility commands for Typer apps.\n\n// Then try with \"run\" and --help\n$ typer ./main.py run --help\n\n// You get a help text with your CLI options as you normally would\nUsage: typer run [OPTIONS]\n\n  Run the provided Typer app.\n\nOptions:\n  --name TEXT  [required]\n  --help       Show this message and exit.\n\n// Then try completion with your program\n$ typer ./main.py run --[TAB][TAB]\n\n// You get completion for CLI options\n--help  -- Show this message and exit.\n--name\n\n// And you can run it as if it was with Python directly\n$ typer ./main.py run --name Camila\n\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Using `is_eager=True` to Prioritize `--version` Option in Typer (Python)\nDESCRIPTION: This snippet shows how to resolve the CLI parameter processing order issue by adding `is_eager=True` to the `--version` option. This parameter tells Typer (via Click) to process the `--version` option before any other non-eager parameters, ensuring the version callback runs first, regardless of the order the options are provided on the command line.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/version.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n__version__ = \"0.1.0\"\n\n\ndef name_callback(name: str):\n    if name != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return name\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(\n    name: str = typer.Option(..., callback=name_callback),\n    version: bool = typer.Option(\n        None, \"--version\", callback=version_callback, is_eager=True\n    ),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Displaying Spinners with Rich in Python\nDESCRIPTION: Shows how to use Rich's features to display one or multiple spinners when you don't know the operation's duration. Multiple spinners can be initiated simultaneously to reflect different subtasks. Requires the 'rich' library. Each spinner is typically associated with a console status or progress task. Expected input: function/callable representing a long-running step; output: animated spinner(s) while task is running. Limitations: exact syntax depends on Rich's API, and animations can only be seen in a terminal.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/progressbar.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.progress import Progress, SpinnerColumn, TextColumn\n\nwith Progress(SpinnerColumn(), TextColumn(\"{task.description}\")) as progress:\n    progress.add_task(description=\"Processing...\", total=None)\n    progress.add_task(description=\"Preparing...\", total=None)\n    # Place your long-running code here\n```\n\n----------------------------------------\n\nTITLE: Running Typer App with `CallbackParam` Usage\nDESCRIPTION: Shows the console output when running the script that uses `typer.CallbackParam`. The output includes the message \"Validating param: name\", confirming that the callback accessed the parameter's name via the `param` object.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_8\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py --name Camila\n\nValidating param: name\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Capturing Raw CLI Parameters as List of Strings in Typer\nDESCRIPTION: This snippet explains how to retrieve all CLI parameters, including commands, options, and arguments, as a raw list of strings by declaring a parameter with type List[str]. This allows detailed inspection or custom processing of command-line input in Typer applications.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef main(args: List[str]):\n    print(args)\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment Using uv - Console\nDESCRIPTION: This snippet uses the third-party 'uv' tool to create a Python virtual environment called '.venv' in the current project directory. Requires uv to be installed system-wide. You can specify a different directory name by providing an additional argument.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uv venv\n```\n\n----------------------------------------\n\nTITLE: Declaring Required CLI Arguments Using Annotated with Typer in Python\nDESCRIPTION: Shows how to declare a required CLI argument in a Typer application using Python's standard 'Annotated' typing with 'typer.Argument()'. Requires Typer version 0.9.0 or later to support 'Annotated'. The parameter 'name' is typed as a string and wrapped with 'Annotated' to indicate it is a CLI argument. No default value is provided, making it required. This method explicitly marks the parameter as CLI argument metadata-compatible, though it behaves identically to the simpler 'name: str' declaration. The expected input is a mandatory string argument passed on the command line, and the absence of the argument results in a missing argument error.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/optional.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nname: Annotated[str, typer.Argument()]\n```\n\n----------------------------------------\n\nTITLE: Running Combined Typer/Click App (Click inside Typer)\nDESCRIPTION: Demonstrates the command-line usage of the application where a Click command is embedded within a Typer app. Shows how to invoke both the Typer-defined subcommand (`top`) and the Click-defined subcommand (`hello`) from the main entry point.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/using-click.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\n// Notice we have both subcommands, top and hello\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  hello\n  top\n\n// Call the Typer part\n$ python main.py top\n\nThe Typer app is at the top level\n\n// Call the Click part\n$ python main.py hello --name Camila\n\nHello Camila!\n```\n\n----------------------------------------\n\nTITLE: Installing Typer slim version with standard dependencies using bash\nDESCRIPTION: Alternative installation method for advanced users who want more control over dependencies. This installs typer-slim with the standard package set, equivalent to the default installation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"typer-slim[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Typer Callback on Creation - Typer - Python\nDESCRIPTION: Shows how to assign a callback function to a Typer sub-application by passing the function (here, a lambda) to the `callback` parameter during the `typer.Typer()` instance initialization. This callback executes before commands within the sub-application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/callback-override.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\napp = typer.Typer(name=\"users\", help=\"Manage users\", callback=lambda: print(\"Running a users command\"))\n```\n\n----------------------------------------\n\nTITLE: Type Parser with Typer Argument\nDESCRIPTION: This code snippet demonstrates how to create a custom parameter type using a `parser` function with `typer.Argument`. The `parser` function receives the input value as a string and returns the parsed value with a custom type. In this example, a `HexInt` type is created to parse hexadecimal integer strings.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/custom-types.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef parse_hex_int(hex_string: str) -> int:\n    return int(hex_string, 16)\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(value: int = typer.Argument(\"0xFF\", parser=parse_hex_int)):\n    print(f\"The value is: {value}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Running Combined Typer/Click App (Typer inside Click)\nDESCRIPTION: Demonstrates the command-line usage of the application where a Typer app is embedded as a subcommand within a Click app. Shows how to invoke both the Click-defined subcommands (`initdb`, `dropdb`) and the Typer-defined subcommand (`sub`) from the main Click application entry point.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/using-click.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n// We get our Typer app down there in the sub command\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dropdb\n  initdb\n  sub     A single-command Typer sub app\n\n\n// Use the Click part\n$ python main.py initdb\n\nInitialized the database\n\n// And use the Typer part\n$ python main.py sub\n\nTyper is now below Click, the Click app is the top level\n```\n\n----------------------------------------\n\nTITLE: Adding Sub-app with Explicit Help Text in Typer\nDESCRIPTION: Demonstrates adding a Typer sub-application and explicitly setting its help text using the `help` parameter in the `add_typer` method. This help text will appear in the main application's help output for this subcommand.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Code from docs_src/subcommands/name_help/tutorial001.py, highlighted line 6:\n# app.add_typer(users_app, name=\"users\", help=\"Manage users in the app.\")\napp.add_typer(users_app, name=\"users\", help=\"Manage users in the app.\")\n```\n\n----------------------------------------\n\nTITLE: Running Typer CLI using python\nDESCRIPTION: This console snippet shows how to execute a Python script using the python command. The script uses typer.run() to turn the code into a CLI application. It illustrates how to handle missing arguments and get help using --help. It also demonstrates how to pass the argument and get the correct output.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n// Run your application\n$ python main.py\n\n// You get a nice error, you are missing NAME\nUsage: main.py [OPTIONS] NAME\nTry 'main.py --help' for help.\n‚ï≠‚îÄ Error ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ Missing argument 'NAME'.                          ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n\n// You get a --help for free\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   | \n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --help          Show this message and exit.       ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// Now pass the NAME argument\n$ python main.py Camila\n\nHello Camila\n\n// It works! üéâ\n```\n\n----------------------------------------\n\nTITLE: Using Rich print() for Colored and Structured Output\nDESCRIPTION: Shows how to import 'print' from the Rich library to output data with colors and formatting, enhancing visualization in the terminal. Requires Rich installed via Typer.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nHere's the data\n<b>{</b>\n    <font color=\"#A6E22E‚Äô>‚Äôname‚Äô</font>: <font color=\"#A6E22E‚Äô>‚ÄôRick‚Äô</font>,\n    <font color=\"#A6E22E‚Äô>‚Äôage‚Äô</font>: <font color=\"#A1EFE4‚Äô>42</font>,\n    <font color=\"#A6E22E‚Äô>‚Äôitems‚Äô</font>: <b>[</b>\n        <b>{</b><font color=\"#A6E22E‚Äô>‚Äôname‚Äô</font>: <font color=\"#A6E22E‚Äô>‚ÄôPortal Gun‚Äô</font><b>}</b>,\n        <b>{</b><font color=\"#A6E22E‚Äô>‚Äôname‚Äô</font>: <font color=\"#A6E22E‚Äô>‚ÄôPlumbus‚Äô</font><b>}</b>\n    <b>]</b>,\n    <font color=\"#A6E22E‚Äô>‚Äôactive‚Äô</font>: <font color=\"#A6E22E‚Äô> <i>True</i></font>,\n    <font color=\"#A6E22E‚Äô>‚Äôaffiliation‚Äô</font>: <font color=\"#AE81FF‚Äô><i>None</i></font>\n<b>}</b>\n```\n\n----------------------------------------\n\nTITLE: Defining a CLI Argument with a Dynamic Default using `default_factory` in Typer (Python)\nDESCRIPTION: This example illustrates how to provide a dynamically generated default value for a CLI argument using the `default_factory` parameter in `typer.Argument()`. A function `get_name` is defined to return a random string, and this function is passed to `default_factory`. If the user doesn't provide the `name` argument, `get_name` is called to generate the default value.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/default.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport typer\nfrom typing_extensions import Annotated\n\n\ndef get_name():\n    return random.choice([\"Deadpool\", \"Rick\", \"Morty\", \"Hiro\"])\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(\n    name: Annotated[\n        str,\n        typer.Argument(default_factory=get_name, help=\"The name to say hi to.\"),\n    ] = \"Wade Wilson\",\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Example CLI Usage and Help Output for Typer Commands in Console\nDESCRIPTION: This console snippet demonstrates how to invoke help messages for the 'create' command and execute the 'create' and 'delete' commands with CLI arguments. It highlights the usage syntax, options available, and shows how input parameters are received and processed. This example requires the CLI application to be defined as per the Python snippet and is useful for end-users to understand command invocation and parameter passing.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/arguments.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n// Check the help for create\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\nOptions:\n  --help  Show this message and exit.\n\n// Call it with a CLI argument\n$ python main.py create Camila\n\nCreating user: Camila\n\n// The same for delete\n$ python main.py delete Camila\n\nDeleting user: Camila\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: This command installs the project's dependencies using Poetry. It reads the `poetry.lock` file and installs all dependencies in the current environment, which ensures that project dependencies are resolved and installed correctly.  The output shows the installation process.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ poetry install\n\nInstalling dependencies from lock file\n\nNo dependencies to install or update\n\n  - Installing the current project: rick-portal-gun (0.1.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Sub-app with Explicit Name in Typer\nDESCRIPTION: This snippet shows how to add a Typer sub-application to a main application and explicitly set the name of the command using the `name` parameter. This makes the sub-app accessible via the specified command name on the command line.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp.add_typer(users.app, name=\"users\")\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `delete-all` Command with and without `--force` in Typer CLI\nDESCRIPTION: Shows how to invoke the 'delete-all' command to remove all users, with optional confirmation prompts. When passing the '--force' flag, the confirmation prompt is skipped, and the operation proceeds directly. This highlights the use of CLI options to bypass prompts for batch operations.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/options.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py delete-all\n\n# Are you sure you want to delete ALL users? [y/n]: $ y\n\nDeleting all users\n\n// No confirmation when --force is used\n$ python main.py delete-all --force\n\nDeleting all users\n```\n\n----------------------------------------\n\nTITLE: Disabling Local Variable Display in Typer Exceptions (Python)\nDESCRIPTION: This snippet demonstrates how to configure a Typer application to prevent local variables from being displayed in exception tracebacks. This is achieved by explicitly creating a `typer.Typer` instance and setting `pretty_exceptions_show_locals=False`, which is useful for security when handling sensitive data like passwords or API keys.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer(pretty_exceptions_show_locals=False)\n\n\n@app.command()\ndef main(password: str):\n    print(password + 3)\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating a Typer App with an Intentional Error (Python)\nDESCRIPTION: This snippet defines a simple Typer application with a deliberate TypeError. The `main` function attempts to concatenate a string (`name`) with an integer (`3`), which is an invalid operation and will raise an exception.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str = \"morty\"):\n    print(name + 3)\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Defining CLI commands for reigns using Typer in Python\nDESCRIPTION: This snippet outlines a minimal Typer CLI app that allows managing 'reigns' through two commands: 'conquer' and 'destroy'. It requires the Typer library and defines functions mapped to these commands to handle actions with a reign name as input. The CLI provides standard options and command help messages and prints feedback messages upon command execution.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/nested-subcommands.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python reigns.py --help\n\nUsage: reigns.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  conquer\n  destroy\n\n$ python reigns.py conquer Cintra\n\nConquering reign: Cintra\n\n$ python reigns.py destroy Mordor\n\nDestroying reign: Mordor\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Coverage Report - Bash (console)\nDESCRIPTION: This command executes a testing and coverage script at 'scripts/test-cov-html.sh'. It runs all tests and generates a coverage HTML report in ./htmlcov/. Dependencies: Bash, Python testing tools (e.g., pytest), coverage tools. No input parameters required. Output: HTML coverage report for test analysis.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/test-cov-html.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic CLI Option Prompt in Python with Typer\nDESCRIPTION: This snippet demonstrates how to prompt for missing CLI options instead of showing an error by setting prompt=True on the option parameter. When the user doesn't provide the --lastname option, the program will interactively ask for it.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/prompt.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str, lastname: str = typer.Option(..., prompt=True)):\n    print(f\"Hello {name} {lastname}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Defining a User Sub-Command (Delete) in a Separate File\nDESCRIPTION: Similar to the 'add' command, this snippet defines a Typer app instance specifically for the 'delete' user sub-command. This modular approach keeps related command logic separate, improving clarity and maintenance.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/one-file-per-command.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ndelete_app = typer.Typer()\n\n@delete_app.command(name=\"delete\")\ndef delete_user(name: str):\n    typer.echo(f\"Deleting user: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Changing Command Order in Help Output\nDESCRIPTION: This code demonstrates how the order of command registration in the Python script affects their display order in the help message. Reversing the order in code results in the commands appearing in reverse order in the CLI help output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/index.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\napp = typer.Typer()\n\n@app.command()\ndef create():\n    \"\"\"Create a user.\"\"\"\n    print(\"Creating user\")\n\n@app.command()\ndef delete():\n    \"\"\"Delete a user.\"\"\"\n    print(\"Deleting user\")\n```\n\n----------------------------------------\n\nTITLE: Running a Typer Script with the Typer Command\nDESCRIPTION: Demonstrates executing the same Python script using the `typer` command. This requires prefixing the script path with `typer` and using the `run` subcommand. This method enables terminal completion for script arguments and options if completion is installed for `typer`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ typer my_custom_script.py run hello\n\nHello World!\n\n$ typer my_custom_script.py run hello --name Camila\n\nHello Camila!\n\n$ typer my_custom_script.py run bye --name Camila\n\nBye Camila\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed-Length CLI Arguments with Defaults using `typing.Tuple` in Typer (Python)\nDESCRIPTION: This snippet illustrates defining a Typer CLI argument (`names`) that requires a specific, fixed number of values (three strings) using `typing.Tuple`. It also demonstrates setting default values ('Harry', 'Hermione', 'Ron') for the tuple elements. Typer automatically validates that the correct number of arguments is provided if the defaults are overridden.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/arguments-with-multiple-values.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Tuple\n\nimport typer\nfrom typing_extensions import Annotated\n\n\ndef main(\n    names: Annotated[\n        Optional[Tuple[str, str, str]],\n        typer.Argument(help=\"Select 3 characters to play with.\"),\n    ] = (\"Harry\", \"Hermione\", \"Ron\"),\n):\n    for name in names:\n        print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Typing Pathlib Join Operation (Python)\nDESCRIPTION: This Python snippet demonstrates joining path components using `pathlib.Path` and the `/` operator while explicitly providing a type hint (`: Path`) for the resulting variable. This type annotation helps code editors provide accurate code completion and enables static type checking, ensuring the variable is recognized correctly as a `Path` object.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/app-dir.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nconfig_path: Path = Path(app_dir) / \"config.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a CLI Argument with an Environment Variable in Python\nDESCRIPTION: This snippet demonstrates how to set up a CLI argument that can read its value from an environment variable when not provided via command line. The 'name' argument has a default value of 'World' but will also check the 'AWESOME_NAME' environment variable.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/envvar.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str = typer.Argument(\"World\", envvar=\"AWESOME_NAME\")):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for CLI Script\nDESCRIPTION: This snippet modifies the `pyproject.toml` file to configure the CLI entry point.  It adds a `[tool.poetry.scripts]` section. This section defines `rick-portal-gun` as the command-line program name and specifies `rick_portal_gun.main:app` as the Python module and variable to execute when the program is invoked. It allows users to call the application from the command line.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez <rick@example.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ntyper = \"^0.12.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Boolean CLI Option with Alternative Names in Typer (Python)\nDESCRIPTION: This example shows how to define alternative names for a boolean CLI option in Typer using a single string with names separated by `/`. In this case, `--accept` and `--reject` are used instead of the default `--accept` and `--no-accept`. The application then prints a message depending on which flag is used.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/bool.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(accept: bool = typer.Option(False, '--accept/--reject')):\n    if accept:\n        print(\"Accepting!\")\n    else:\n        print(\"Rejecting!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Grouping Typer Options into Help Panels with Rich in Python\nDESCRIPTION: Illustrates how to organize Typer CLI options into custom help panels using the `rich_help_panel` parameter within `typer.Option`. Requires Rich library installed. Options without a custom panel appear in the default \"Options\" panel.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/help.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nfrom typing_extensions import Annotated # Or typing for newer Python\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    # ... other parameters ...\n    formal: Annotated[\n        bool, typer.Option(\"--formal\", \"-f\", help=\"Say hi formally.\", rich_help_panel=\"Customization and Utils\")\n    ] = False,\n    debug: Annotated[\n        bool, typer.Option(\"--debug\", \"-d\", help=\"Enable debugging.\", rich_help_panel=\"Customization and Utils\")\n    ] = False,\n):\n    # ... function body ...\n    pass # Simplified\n```\n\n----------------------------------------\n\nTITLE: Creating __main__.py for Python Package Invocation\nDESCRIPTION: A Python file that enables calling the package with 'python -m package_name' by importing and executing the Typer app from the main module.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom .main import app\napp()\n```\n\n----------------------------------------\n\nTITLE: Generating Typer Docs with Python -m Typer\nDESCRIPTION: Shows an alternative way to generate documentation using `python -m typer` followed by the script/module path and `utils docs`. This method is available even when the `typer` command is not globally installed (e.g., with `typer-slim`).\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ python -m typer some_script.py utils docs\n```\n\n----------------------------------------\n\nTITLE: Fixing Typer Completion with `typer.Context` in Callback (Python)\nDESCRIPTION: Introduces `typer.Context` to fix the shell completion issue. The callback now accepts an additional `ctx: typer.Context` parameter. It checks `ctx.resilient_parsing`, which is `True` during completion; if so, it returns early, avoiding the `print` statement and other side effects. Otherwise (normal execution), it proceeds with validation and printing.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef name_callback(ctx: typer.Context, value: str):\n    if ctx.resilient_parsing:\n        return  # Do nothing when completing\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: str = typer.Option(\n        ..., help=\"The name to say hi to.\", callback=name_callback\n    )\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Value String in CLI Argument Help\nDESCRIPTION: This snippet demonstrates using `show_default` to provide a custom string for the default value shown in the help text, rather than a boolean. This enables more user-friendly and descriptive representation of the default, like an explanation or a reference.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(name: str = Argument(\"Wade Wilson\", help=\"Who to greet\", show_default=\"(Deadpoolio the amazing's name)\")):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Program Name in __main__.py\nDESCRIPTION: Enhanced version of __main__.py that sets the correct program name in help text when the package is invoked using 'python -m'.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom .main import app\napp(prog_name=\"rick-portal-gun\")\n```\n\n----------------------------------------\n\nTITLE: Configuring File Parameters with Options for Mode, Encoding, Lazy, and Atomic\nDESCRIPTION: Details how to set additional parameters for file handling in Typer, such as `mode`, `encoding`, `lazy`, and `atomic`, providing control over file opening modes, character encoding, delayed I/O, and atomic write behavior. Demonstrates overriding default modes to perform append operations.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/file.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n$ python main.py --config config.txt\n\nConfig line written\n\n// Run multiple times to append\n$ python main.py --config config.txt\n\nConfig line written\n\n// Check file content\n$ cat config.txt\n\nThis is a single line\nThis is a single line\nThis is a single line\n```\n\n----------------------------------------\n\nTITLE: Sample zshrc Content Added by Completion Installation - Bash\nDESCRIPTION: This bash snippet shows an example of configuration lines added to ~/.zshrc for enabling zsh completion for Typer CLI. Modifies fpath and enables menu select. Dependencies: zsh. Inputs: none. Outputs: shell completion available after reload.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfpath+=~/.zfunc; autoload -Uz compinit; compinit\n\n\nzstyle ':completion:*' menu select\n```\n\n----------------------------------------\n\nTITLE: Overriding Sub-Typer Callback with add_typer - Typer - Python\nDESCRIPTION: Demonstrates the highest precedence method for defining a sub-application callback: specifying the callback function using the `callback` parameter of the `main_app.add_typer()` method. This overrides any callback defined within the sub-application's code itself (via initialization parameter or decorator).\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/callback-override.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmain_app.add_typer(\n    users_app,\n    name=\"users\",\n    callback=lambda: print(\"I have the high land! Running users command\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Running a Python Script with the Typer CLI Command\nDESCRIPTION: Demonstrates executing the basic `main.py` script using the `typer main.py run` command. It shows the command's usage, how it automatically generates help text based on the function signature, handles missing required arguments, and successfully runs when the required `NAME` argument is provided.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n// Run your application\n$ typer main.py run\n\n// You get a nice error, you are missing NAME\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\nTry 'typer [PATH_OR_MODULE] run --help' for help.\n‚ï≠‚îÄ Error ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ Missing argument 'NAME'.                          ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n\n// You get a --help for free\n$ typer main.py run --help\n\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\n\nRun the provided Typer app.\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   |\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --help          Show this message and exit.       ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// Now pass the NAME argument\n$ typer main.py run Camila\n\nHello Camila\n\n// It works! üéâ\n```\n\n----------------------------------------\n\nTITLE: Basic DateTime Parameter Usage in Typer\nDESCRIPTION: Shows how to define a CLI command that accepts a datetime parameter. The function receives a Python datetime object and can access its attributes like hour.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/datetime.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nimport typer\n\n\ndef main(birth: datetime):\n    print(f\"Interesting day to be born: {birth}\")\n    print(f\"Birth hour: {birth.hour}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Verify Virtual Environment Activation on Unix-like Systems - Console\nDESCRIPTION: This command verifies that the virtual environment is active by displaying the path to the 'python' executable being used. If the returned path includes '.venv/bin/python' under your project directory, the virtual environment is correctly activated. Useful for troubleshooting.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Raising Typer Exit in a CLI Command - Typer (Python)\nDESCRIPTION: This code illustrates how to terminate a Typer-powered CLI application early by raising the typer.Exit exception from within any function, stopping all subsequent execution. It defines a main command that accepts a user argument, potentially halts with Exit within a helper function (e.g., if a user already exists), and otherwise performs an operation like sending a notification. Requires the Typer library. Expected input: CLI username. Key behavior: stops execution cleanly without error if a condition is met.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/terminating.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# File: docs_src/terminating/tutorial001.py\nimport typer\n\ndef maybe_create_user(username: str):\n    if username.lower() == \"rick\":\n        typer.echo(\"The user already exists\")\n        raise typer.Exit()\n    typer.echo(f\"User created: {username}\")\n\ndef send_new_user_notification(username: str):\n    typer.echo(f\"Notification sent for new user: {username}\")\n\ndef main(username: str):\n    maybe_create_user(username)\n    send_new_user_notification(username)\n\nif __name__ == \"__main__\":\n    typer.run(main)\n\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Program with Help Option\nDESCRIPTION: This command tests the newly created CLI program by invoking it with the `--help` option. The output from the program confirms the program is running and displays the usage and available commands configured within the typer application. The help output is printed to the console.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ rick-portal-gun --help\n\n// You get all the standard help\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n```\n\n----------------------------------------\n\nTITLE: Adding a Label to Typer Progress Bar in Python\nDESCRIPTION: Demonstrates setting a custom label for the Typer (Click) progress bar to inform the user about the current operation. The 'label' parameter takes a string that is shown alongside the progress bar. Requires 'typer'. Inputs: iterable, optional length, label as string; output: progress bar with descriptive label in the CLI.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/progressbar.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\nwith typer.progressbar(range(100), label=\"Processing\") as progress:\n    for i in progress:\n        typer.echo(i)\n```\n\n----------------------------------------\n\nTITLE: Setting Package Version in __init__.py\nDESCRIPTION: Python code to define the version of the package that needs to be updated when releasing a new version.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n__version__ = '0.2.0'\n```\n\n----------------------------------------\n\nTITLE: Typer: Defining Commands with Help Panels\nDESCRIPTION: This code demonstrates how to define Typer commands and assign them to specific help panels using the `rich_help_panel` argument. This allows for better organization of commands in the `--help` output. It requires the `typer` library.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(name: str):\n    \"\"\"Create a new user. ‚ú®\"\"\"\n    print(f\"Creating user: {name}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef sync():\n    \"\"\"Synchronize the system or something fancy like that. ‚ôª\"\"\"\n    print(\"Synchronizing\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef config():\n    \"\"\"Configure the system. üîß\"\"\"\n    print(\"Configuring\")\n\n\n@app.command(rich_help_panel=\"Help and Others\")\ndef help():\n    \"\"\"Get help with the system. ‚ùì\"\"\"\n    print(\"Helping\")\n\n\n@app.command(rich_help_panel=\"Help and Others\")\ndef report():\n    \"\"\"Report an issue. üêõ\"\"\"\n    print(\"Reporting\")\n\n\n@app.command()\ndef delete(name: str):\n    \"\"\"Delete a user. üî•\"\"\"\n    print(f\"Deleting user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Styling Text with Typer.style()\nDESCRIPTION: Demonstrates creating styled strings with Typer.style() by setting foreground, background colors, and text attributes, then outputting with typer.echo().\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\neverything is <span style=\"color: green; font-weight: bold;\">good</span>\n'$ python main.py --no-good\n\neverything is <span style=\"color: white; background-color: red;\">bad</span>'\n```\n\n----------------------------------------\n\nTITLE: Aborting CLI Execution Explicitly - Typer (Python)\nDESCRIPTION: This code illustrates the use of typer.Abort to halt a Typer CLI command and provide an explicit 'Aborted!' message, commonly for user-driven cancellations. It checks for a reserved username and raises typer.Abort accordingly, otherwise proceeds with user creation. Needs Typer library. CLI argument: username. Outputs: user creation message or reserved warning and abort notice, with nonzero exit code. Designed for making aborts explicit in terminal output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/terminating.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# File: docs_src/terminating/tutorial003.py\nimport typer\n\ndef main(username: str):\n    if username.lower() == \"root\":\n        typer.echo(\"The root user is reserved\")\n        raise typer.Abort()\n    typer.echo(f\"New user created: {username}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for Typer Tests (Console)\nDESCRIPTION: This console snippet shows the command used to execute the tests written for the Typer application using `pytest`. It illustrates the typical output showing test discovery and the result of the test run.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_5\n\nLANGUAGE: Console\nCODE:\n```\n$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.10, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 1 item\n\n---> 100%\n\ntest_main.py <span style=\"color: green; white-space: pre;\">.                                 [100%]</span>\n\n<span style=\"color: green;\">================= 1 passed in 0.03s =================</span>\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Length for Typer Progress Bar in Python\nDESCRIPTION: Explains how to use Typer's 'progressbar()' with a generator or an iterable whose length is unknown. By specifying the 'length' parameter, the progress bar can depict progress accurately even when the iterable doesn't define '__len__'. This is necessary when fetching items from a web API or another dynamic source. Requires 'typer'. Inputs: generator/iterator and explicit 'length'; outputs: progress bar showing percent completed.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/progressbar.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ndef iterate_user_ids():\n    for i in range(100):\n        yield i\n\nwith typer.progressbar(iterate_user_ids(), length=100) as progress:\n    for user_id in progress:\n        typer.echo(user_id)\n```\n\n----------------------------------------\n\nTITLE: Using Typer 'users' Subcommands and Help\nDESCRIPTION: Demonstrates how to check the help for the 'users' subcommand group (`python main.py users --help`) and execute its `create` subcommand with an argument. The output confirms the command and its action.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/single-file.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py users --help\n\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Try it\n$ python main.py users create Camila\n\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with standard dependencies using bash\nDESCRIPTION: Standard Typer installation command for bash. This installs Typer with its default dependencies: rich and shellingham.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `create` Command in Typer CLI\nDESCRIPTION: Shows how to invoke the 'create' command with a username argument to create a new user. The command outputs confirmation of user creation. This illustrates passing positional arguments using the CLI.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/options.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py create Camila\n\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: Initializing the Main Typer Application and Adding Sub-Apps\nDESCRIPTION: This snippet demonstrates the main entry point of the multi-file CLI application. It initializes the primary Typer app and uses `app.add_typer()` to include Typer app instances from other modules (like 'version' and 'users') as sub-commands. Specifying `name=\"users\"` creates a distinct sub-command group.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/one-file-per-command.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\nfrom mycli.users import users_app\nfrom mycli.version import version_app\n\napp = typer.Typer()\n\napp.add_typer(version_app)\napp.add_typer(users_app, name=\"users\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining a Typer Callback During Initialization (Python)\nDESCRIPTION: This snippet shows an alternative way to define a callback by passing the function directly to the `typer.Typer()` constructor using the `callback` parameter. This achieves the same result as using the `@app.callback()` decorator.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ndef callback():\n    \"\"\"\n    Manage users CLI app.\n    \"\"\"\n    print(\"Running a command\")\n\n\napp = typer.Typer(callback=callback)\n\n\n@app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Prompting for Hidden Password with Confirmation Using Typer - Python\nDESCRIPTION: This snippet shows how to securely prompt users for a password in a Typer CLI application by combining hide_input=True and confirmation_prompt=True. The password input is not displayed as the user types and must be confirmed by re-entering. The Typer library must be installed. The script asks for the user's name as a positional argument and then interactively prompts for the password. After confirmation, it outputs a message including the password‚Äîa security flaw in real scenarios, but shown here for demonstration purposes. Limitations: actual password validation and secure storage are not handled.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/password.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str, password: str = typer.Option(..., prompt=True, hide_input=True, confirmation_prompt=True)):\n    typer.echo(f\"Hello {name}. Doing something very secure with password.\")\n    typer.echo(f\"...just kidding, here it is, very insecure: {password}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Building Wheel Package with Poetry\nDESCRIPTION: This command uses Poetry to build the project into a wheel package.  The wheel package is a standard format for Python packages. The output confirms the build process, including building both an sdist and a wheel, and indicates the paths to the generated distribution files.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ poetry build\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Command Names with @app.command() in Typer (Python)\nDESCRIPTION: Shows how to override the default command name generation in Typer by providing a string name as the first argument to the `@app.command()` decorator. This allows using different function names (`cli_create_user`, `cli_delete_user`) while defining specific command names (`create`, `delete`). Assumes a Typer `app` object is already defined.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/name.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command(\"create\")\ndef cli_create_user(username: str):\n    print(f\"Creating user: {username}\")\n\n\n@app.command(\"delete\")\ndef cli_delete_user(username: str):\n    print(f\"Deleting user: {username}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Option Processing Order Issue in Typer (Python)\nDESCRIPTION: This snippet illustrates a scenario where the default CLI parameter processing order in Typer can cause issues. A required `--name` option with a callback (`name_callback`) that might raise an error and exit is defined before the `--version` option. If `--name` is provided before `--version` on the command line and fails validation in its callback, the `--version` callback will not be executed.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/version.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n__version__ = \"0.1.0\"\n\n\ndef name_callback(name: str):\n    if name != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return name\n\n\ndef version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(\n    name: str = typer.Option(..., callback=name_callback),\n    version: bool = typer.Option(None, \"--version\", callback=version_callback),\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Registering a Single Typer Command with an Application Callback in Python\nDESCRIPTION: This snippet defines a Typer app in Python with one command registered, alongside a callback function that serves as the CLI app's entry point. The callback can prepare context or document the application, and Typer exposes the command as a subcommand, not the main entry. Requires the 'typer' package. The example includes a callback function (doing nothing or containing documentation) and a 'create' command printing to the console. The CLI user must invoke the subcommand explicitly.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/one-or-multiple.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.callback()\ndef main():\n    pass\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Adding a Required CLI Argument to Typer Command in Python\nDESCRIPTION: This example extends the basic Typer application by adding a required command-line argument named 'name'. The argument is defined as a function parameter with a type hint (str). Typer automatically handles parsing this argument from the command line. If the argument is not provided, Typer displays a helpful error message. The command prints a greeting using the provided name.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/first-steps.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Typer: Adding Epilog to Help - Python\nDESCRIPTION: This Python code snippet shows how to add an epilog to the help message of a Typer command. The `epilog` parameter of the `typer.Typer()` constructor is used to specify the epilog text. The epilog will be displayed at the end of the help message.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer(help=\"Create a new user. ‚ú®\", epilog=\"Made with ‚ù§ in Venus\")\n\n@app.command()\ndef main(username: str):\n    print(f\"Creating user: {username}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Hiding Default Value in CLI Argument Help\nDESCRIPTION: This snippet shows how to disable the display of a default value in the help text. This can be achieved by using the `show_default=False` option in `typer.Argument()`. This provides control over the amount of information displayed in the help, helping keep the output concise.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(name: str = Argument(\"World\", help=\"Who to greet\", show_default=False)):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Python Main Execution Block (`if __name__ == \"__main__\"`)\nDESCRIPTION: The standard Python construct `if __name__ == \"__main__\":` is used to make a script runnable directly. When using the `typer` command to run a script, this block is typically not executed, so it can optionally be removed if the script is only ever run via `typer`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Enum Choices for CLI Parameters in Python\nDESCRIPTION: This snippet shows how to make Enum choices case-insensitive in a Typer application by using the case_sensitive parameter. This allows users to input enum values in any case (lowercase, uppercase, or mixed) and have them correctly recognized.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/enum.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nfrom typing import Optional\n\nimport typer\n\n\nclass Network(enum.Enum):\n    simple = \"simple\"\n    conv = \"conv\"\n    lstm = \"lstm\"\n\n\ndef main(\n    network: Network = Network.simple,\n):\n    typer.echo(f\"Training neural network of type: {network.value}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main, case_sensitive=False)\n```\n\n----------------------------------------\n\nTITLE: Rich Markup with Fonts, Colors, and Emojis\nDESCRIPTION: Demonstrates how to use Rich's custom markup syntax for styling text with colors, bold, and emojis, enabling expressive terminal output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n<font color=\"#F92672\"><b>Alert!</b></font> <font color=\"#A6E22E\">Portal gun</font> shooting! üí•\n```\n\n----------------------------------------\n\nTITLE: Explicitly Naming Command Groups in Typer Python CLI Apps (Post-0.14.0 Requirement)\nDESCRIPTION: This Python example shows the updated Typer CLI app behavior, which requires developers to explicitly specify the subcommand group's name when using add_typer by passing the 'name' argument. The code sets up a main Typer app and a users_app, then adds users_app to the main app with name='users'. Callback and command functions are defined on users_app, with the callback serving as a group description and 'create' printing the given 'name'. The code requires Typer to be installed and expects user input from the command line. Failure to specify the 'name' parameter now prevents the group from being registered with an inferred name.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/release-notes.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\n\napp.add_typer(users_app, name=\"users\")  # <-- Explicitly set the command group name\n\n\n@users_app.callback()\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Customizing the Help Name for CLI Arguments (metavar)\nDESCRIPTION: This snippet illustrates customizing the text used in the help text to represent a CLI argument. By using the `metavar` parameter in `typer.Argument()`, the default name of the argument can be overridden to something more descriptive or consistent with style guidelines. The chosen text appears in the help instead of the default name in uppercase.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(username: str = Argument(..., help=\"\", metavar=\"‚ú®username‚ú®\")):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Declaring a Function with Type Hints\nDESCRIPTION: This code snippet demonstrates how to declare a Python function with type hints using the `typing` module. It shows how to specify the type of each parameter, including optional parameters with default values. The type hints enable features like autocomplete and error checking in editors and are used by Typer.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/index.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\ndef type_example(name: str, formal: bool = False, intro: Optional[str] = None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running the `multiapp sub bye` Command\nDESCRIPTION: Explains how to execute the `bye` subcommand within the `sub` group, used to 'Say bye'. This command primarily accepts standard options like `--help` for displaying usage information.\nSOURCE: https://github.com/fastapi/typer/blob/master/tests/assets/cli/multiapp-docs.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub bye [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Python Function for CLI\nDESCRIPTION: Defines a simple Python function `main` that takes a `name` string argument and prints a personalized greeting. This function serves as a minimal example script that can be executed as a command-line tool using the external `typer` command.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Executing Typer App with Initialization Callback (Console)\nDESCRIPTION: Shows the console output when running a command in a Typer application where the callback was defined during `Typer` initialization. The callback's message ('Running a command') is printed before the command's output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py create Camila\n\nRunning a command\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Windows Bash - Console\nDESCRIPTION: For users running Bash on Windows (for example, Git Bash), this snippet activates a Python virtual environment by sourcing the activation script in '.venv/Scripts/activate'. This enables isolation for Python and package commands in the Bash environment.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/Scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Click Custom Type with Typer Option\nDESCRIPTION: This code snippet demonstrates how to integrate an existing Click custom type into a Typer application using `typer.Option`. It utilizes `click.ParamType` to define a custom type and then employs it within a Typer option. In this case, a `Greet` type is created to validate and transform greeting strings to uppercase.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/custom-types.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport click\nimport typer\n\n\nclass Greet(click.ParamType):\n    name = \"greet\"\n\n    def convert(self, value, param, ctx):\n        return value.upper()\n\n\nGREET = Greet()\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(name: str = typer.Option(\"World\", click_type=GREET)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Enum Choices for CLI Parameters in Python\nDESCRIPTION: This snippet demonstrates how to use Python's enum.Enum class to define CLI parameters that can only take values from a predefined set of choices. The example creates a Network enum with three options (simple, conv, lstm) and uses it as a parameter type in a Typer CLI function.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/enum.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nfrom typing import Optional\n\nimport typer\n\n\nclass Network(enum.Enum):\n    simple = \"simple\"\n    conv = \"conv\"\n    lstm = \"lstm\"\n\n\ndef main(network: Network = Network.simple):\n    typer.echo(f\"Training neural network of type: {network.value}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Printing to Standard Error using print() or typer.echo()\nDESCRIPTION: This snippet shows alternative methods to write to standard error in environments where Rich is unavailable. Using print() with file=sys.stderr or typer.echo() with err=True allows output to standard error for debugging or informational messages without affecting standard output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nprint(\"Error details\", file=sys.stderr)\n# or\nimport typer\ntyper.echo(\"Error message\", err=True)\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Float CLI Options with Typer in Python\nDESCRIPTION: This snippet demonstrates how to use Typer to accept multiple float values from the command line by declaring a CLI option as a list of floats using typing.List[float]. It sums all provided numbers and prints the result. This example highlights Typer's automatic type conversion from string inputs to float. Dependencies include Typer and Python's typing module. Inputs are multiple --number arguments, output is their sum as a float. The code handles the default case where no numbers are provided by summing an empty list to zero.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/multiple-values/multiple-options.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(number: List[float] = typer.Option([])):\n    total = sum(number)\n    print(f\"The sum is {total}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Custom DateTime Format in Typer\nDESCRIPTION: Demonstrates how to specify custom datetime formats for CLI parameters using the formats parameter. This example accepts both ISO format and a custom month/day/year format with slash separators.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/datetime.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nimport typer\n\n\ndef main(\n    launch: datetime = typer.Argument(\n        ...,\n        formats=[\n            \"%Y-%m-%d\",\n            \"%Y-%m-%dT%H:%M:%S\",\n            \"%Y-%m-%d %H:%M:%S\",\n            \"%m/%d/%Y\",\n        ],\n    )\n):\n    print(f\"Launch will be at: {launch}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Linux/macOS - Console\nDESCRIPTION: This command activates a Python virtual environment located in '.venv' on Linux or macOS systems. It uses the 'source' command to set environment variables so that future Python and pip commands use the virtual environment's interpreter and installed packages. Execute this in the project root, every new terminal session.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Typer context to handle extra CLI parameters\nDESCRIPTION: This code demonstrates how to configure the Typer context to accept and process additional CLI parameters not explicitly declared in the CLI definition, using `ignore_unknown_options` and `allow_extra_args`. The extra arguments are accessible as a list of strings via `ctx.args`, capturing all raw CLI input details.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/context.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --name Camila --city Berlin\n\nGot extra arg: --name\nGot extra arg: Camila\nGot extra arg: --city\nGot extra arg: Berlin\n```\n\n----------------------------------------\n\nTITLE: Activating a Python Virtual Environment (Windows PowerShell) (Console)\nDESCRIPTION: This command activates a Python virtual environment named '.venv' in Windows PowerShell by running the activate script. The virtual environment must already exist (created via python -m venv .venv). On activation, the environment variables and shell session are modified to use the local Python and installed packages. Results in a prompt change indicating activation, but produces no standard output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ .venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback Help Inference with add_typer Callback Parameter in Python\nDESCRIPTION: Illustrates the highest precedence for inferred help text: providing a callback function directly to the `app.add_typer()` method via its `callback` parameter. This overrides help inferred from both `typer.Typer(callback=...)` and `@app.callback()`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Code from docs_src/subcommands/name_help/tutorial005.py, highlighted lines 15-18, 21:\n# def add_typer_users_callback():\n#     \"\"\"\n#     I have the highland! Create some users.\n#     \"\"\"\n# app.add_typer(users_app, name=\"new-users\", callback=add_typer_users_callback)\ndef add_typer_users_callback():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"\napp.add_typer(users_app, name=\"new-users\", callback=add_typer_users_callback)\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Python Package Version Using pip (Console)\nDESCRIPTION: This console snippet demonstrates how to install a specific version of a Python package, in this case 'harry' version 1, using the pip installer. The user must have pip installed and access to the Python package index (PyPI). The command expects the desired package name and version as input and installs it system-wide or in the active virtual environment. Output will include installation status and dependency resolutions. Use with caution in the global environment, as it may cause version conflicts.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"harry==1\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Typer Command (Python)\nDESCRIPTION: This snippet shows a basic Typer application script. It defines a command `main` that accepts a required `name` argument and an optional `city` argument, printing a greeting message.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(name: str, city: str = typer.Option(None)): #hl\n    print(f\"Hello {name}\")\n    if city:\n        print(f\"Let's have a coffee in {city}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment on Windows PowerShell - Console\nDESCRIPTION: This command activates a Python virtual environment from PowerShell on Windows. It runs the activation script located in '.venv\\Scripts\\Activate.ps1', setting up the correct environment for Python and pip to use the virtual environment's packages for subsequent commands.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ .venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Filtering Autocompletion Results Using Typer Context to Exclude Already Provided CLI Option Values in Python\nDESCRIPTION: Demonstrates accessing the Typer Context object as a function parameter to retrieve current CLI parameter values during autocompletion. The completion function excludes values already provided by the user to avoid duplicate suggestions. It requires importing 'typer' and typing 'typer.Context' for the context parameter. The function retrieves a list of existing values and yields completion candidates not already used. This enhances user experience by allowing dynamic, context-aware completions.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nfrom typing import List\n\ndef complete_name(incomplete: str, ctx: typer.Context):\n    options = [\n        (\"Camila\", \"The reader of books.\"),\n        (\"Carlos\", \"The writer of scripts.\"),\n        (\"Sebastian\", \"The type hints guy.\")\n    ]\n    names: List[str] = ctx.params.get(\"name\") or []\n    for option, help_text in options:\n        if option.startswith(incomplete) and option not in names:\n            yield (option, help_text)\n```\n\n----------------------------------------\n\nTITLE: Verifying Overwritten Command Help Output in Typer\nDESCRIPTION: Demonstrates the effect of overwriting a command's help text using the `help` parameter in `@app.command()`. The console output for the main application help now displays the explicitly provided help string instead of the function's docstring summary.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\n// Notice it uses the help passed to @app.command()\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy\n                        it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create  Create a new user with USERNAME.\n  delete  Delete a user with USERNAME.\n\n// It uses \"Create a new user with USERNAME.\" instead of \"Some internal utility function to create.\"\n```\n\n----------------------------------------\n\nTITLE: Using Typer Progress Bar with Python Context Manager\nDESCRIPTION: Demonstrates how to create a simple progress bar using Typer (actually, Click's) 'progressbar()' function within a 'with' statement. You pass the iterable to 'typer.progressbar()', and optionally customize the label and length. The object returned by the context manager can be iterated over, updating the progress bar as items are processed. Requires 'typer' (and 'click') to be installed. Input: any iterable; output: a progress bar in the CLI synchronized to iteration.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/progressbar.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\nusers = [\"Camila\", \"Rick\", \"Morty\"]\nwith typer.progressbar(users) as progress:\n    for user in progress:\n        typer.echo(user)\n```\n\n----------------------------------------\n\nTITLE: Activating a Python Virtual Environment (Linux/macOS) (Console)\nDESCRIPTION: This snippet shows how to activate a Python virtual environment named '.venv' on Linux or macOS systems using the 'source' command. This modifies environment variables, most notably PATH, to prioritize the venv's binaries and Python interpreter. The prerequisite is that a virtual environment has already been created (e.g. with python -m venv .venv). The command outputs no result on success but changes the shell environment to use the venv.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Hiding a CLI Argument from Help Text\nDESCRIPTION: This snippet explains how to prevent a CLI argument from appearing in the `Arguments` section of the help text. Using the `hidden=True` parameter within `typer.Argument()` hides the argument, making the help output cleaner. However, the argument is still listed in the usage line.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(name: str = Argument(..., help=\"Who to greet\", hidden=True)):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using `typer.FileBinaryRead` to Read Binary Files\nDESCRIPTION: Illustrates reading binary files using `typer.FileBinaryRead`, returning data as `bytes`. It is useful for binary data like images, allowing incremental processing of byte chunks during reading. Suitable for binary file processing in CLI applications.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/file.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n$ python main.py --file lena.jpg\n\nProcessed bytes total: 512\nProcessed bytes total: 1024\nProcessed bytes total: 1536\nProcessed bytes total: 2048\n```\n\n----------------------------------------\n\nTITLE: Inferring Command Help from Function Docstring in Typer\nDESCRIPTION: Shows how Typer automatically generates the help text for a command from the docstring of the function it decorates. This is the default behavior when no explicit help text is provided.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.command()\ndef create(item: str):\n    \"\"\"\n    Create an item.\n    \"\"\"\n    typer.echo(f\"Creating item: {item}\")\n```\n\n----------------------------------------\n\nTITLE: Checking Deprecated Command Status in Main Typer Help Output\nDESCRIPTION: Shows how a command marked as deprecated appears in the main application's help output. Typer automatically adds a \"(deprecated)\" marker next to the command name in the commands list to inform users of its status.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --install-completion          Install completion for the current  ‚îÇ\n‚îÇ                               shell.                              ‚îÇ\n‚îÇ --show-completion             Show completion for the current     ‚îÇ\n‚îÇ                               shell, to copy it or customize the  ‚îÇ\n‚îÇ                               installation.                       ‚îÇ\n‚îÇ --help                        Show this message and exit.         ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Commands ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ create        Create a user.                                      ‚îÇ\n‚îÇ delete        Delete a user.              (deprecated)            ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Virtual Environment - Console\nDESCRIPTION: This command deactivates the currently active Python virtual environment, restoring your shell to use the system Python interpreter. Run after finishing work to avoid unintentionally running code with project-specific dependencies.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ deactivate\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Table and Printing It\nDESCRIPTION: Provides an example of creating a Console and Table object in Rich, adding rows, and printing a formatted table for better data visualization in CLI applications.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ<b> Name  </b>‚îÉ<b> Item       </b>‚îÉ\n‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©\n‚îÇ Rick  ‚îÇ Portal Gun ‚îÇ\n‚îÇ Morty ‚îÇ Plumbus    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n----------------------------------------\n\nTITLE: Using List[str] for Autocompletion and Context in Typer\nDESCRIPTION: This example illustrates how Typer leverages type annotations such as str, List[str], and Context to facilitate autocompletion and context-aware command-line interfaces. It ensures that autocomplete suggestions and context handling adapt dynamically based on these type hints.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef autocomplete_name(incomplete: str, ctx: typer.Context, args: List[str]):\n    # Implementation for autocompletion based on provided context and args\n    pass\n```\n\n----------------------------------------\n\nTITLE: Confirm User Action with Typer\nDESCRIPTION: This code demonstrates how to use `typer.confirm()` to ask the user for confirmation before proceeding with an action. The function displays a confirmation message and returns a boolean value indicating the user's response.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/prompt.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(delete: bool = typer.confirm(\"Are you sure you want to delete it?\")):\n    if delete:\n        print(\"Deleting it!\")\n    else:\n        print(\"Not deleting\")\n        raise typer.Abort()\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Using Clamping for Numeric CLI Parameters in Typer (Python)\nDESCRIPTION: This snippet illustrates applying the 'clamp' parameter to numeric CLI options in Typer, which automatically adjusts out-of-range values to the nearest valid limit instead of raising errors. Examples show how out-of-range inputs are coerced to minimum or maximum allowed values using clamp.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/number.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py 1002\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'ID': 1002 is not in the range 0<=x<=1000.\n\n// But --rank and --score use clamp\n$ python main.py 5 --rank 11 --score -5\n\nID is 5\n--rank is 10\n--score is 0\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Typer Error Output with Rich Integration (Console)\nDESCRIPTION: Shows the formatted traceback output when running a Typer application with an error, specifically when the Rich library is installed. Typer utilizes Rich to provide clearer, more concise error messages by omitting internal Typer/Click frames and highlighting the error source and local variables.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n<font color=\"#F92672\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </font><font color=\"#F92672\"><b>Traceback (most recent call last)</b></font><font color=\"#F92672\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</font>\n<font color=\"#F92672\">‚îÇ</font> <font color=\"#A37F4E\">/home/user/code/superapp/</font><font color=\"#F4BF75\"><b>main.py</b></font>:<font color=\"#66D9EF\">5</font> in <font color=\"#A6E22E\">main</font>                        <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>                                                                   <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    2                                                              <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    3                                                              <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    4 <font color=\"#66D9EF\">def</font> <font color=\"#A6E22E\">main</font>(name: <font color=\"#A1EFE4\">str</font> = <font color=\"#F4BF75\">\"morty\"</font>):                               <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font> <font color=\"#F92672\">‚ù± </font> 5 ‚îÇ   <font color=\"#A1EFE4\">print</font>(name + <font color=\"#66D9EF\">3</font>)                                          <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    6                                                              <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    7                                                              <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    8 <font color=\"#66D9EF\">if</font> <font color=\"#F92672\">__name__</font> == <font color=\"#F4BF75\">\"__main__\"</font>:                                   <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>                                                                   <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font> <font color=\"#F4BF75\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ locals ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</font>                                                <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font> <font color=\"#F4BF75\">‚îÇ</font> name = <font color=\"#F4BF75\">'morty'</font> <font color=\"#F4BF75\">‚îÇ</font>                                                <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font> <font color=\"#F4BF75\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</font>                                                <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</font>\n<font color=\"#F92672\"><b>TypeError: </b></font>can only concatenate str <b>(</b>not <font color=\"#A6E22E\">\"int\"</font><b>)</b> to str\n```\n\n----------------------------------------\n\nTITLE: Examining PATH Environment Variable Before Virtualenv Activation (Windows) (Plaintext)\nDESCRIPTION: This snippet provides an example line of the PATH environment variable for Windows systems before activating a Python virtual environment. It includes standard Windows system directories used to resolve executables. No code is run; this snippet is for illustration purposes only.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Windows\\System32\n```\n\n----------------------------------------\n\nTITLE: Examining PATH Environment Variable After Virtualenv Activation (Linux/macOS) (Plaintext)\nDESCRIPTION: This snippet presents a sample PATH value after activating a Python virtual environment on Linux or macOS. The '.venv/bin' directory is prepended to the path, ensuring that binaries in the venv are prioritized. No execution is involved; it's to illustrate how virtualenv activation alters path lookup.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\n/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\n----------------------------------------\n\nTITLE: Displaying Typer Application Help (Top-Level)\nDESCRIPTION: Command to show the main help message for the Typer application using `python main.py --help`. The output lists available top-level command groups ('items', 'users').\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/single-file.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  users\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Typer Progress Bar in Python\nDESCRIPTION: Shows how to manually update Typer's progress bar when progress does not map directly to iterating over an iterable. You create a progress bar by specifying only 'length', then invoke the '.update()' method on the progress object as work is completed. This is useful for irregular updates, batch operations, or cases where increments are non-uniform. Requires 'typer'. Input: explicit 'length' argument and calls to 'progress.update()'; output: progress bar that advances as determined by manual updates.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/progressbar.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\nwith typer.progressbar(length=1000, label=\"Batches\") as progress:\n    for batch in batches:\n        process_batch(batch)\n        progress.update(100)\n```\n\n----------------------------------------\n\nTITLE: Disabling Pretty Exceptions in Typer for Debugging Python CLI Applications\nDESCRIPTION: This code demonstrates how to disable pretty exception formatting in Typer applications by setting the environment variable `_TYPER_STANDARD_TRACEBACK=1`. It allows viewing full, standard Python tracebacks during runtime errors, aiding in debugging complex issues.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nexport _TYPER_STANDARD_TRACEBACK=1\n```\n\n----------------------------------------\n\nTITLE: Locating File Path with Typer (Python)\nDESCRIPTION: Shows how to use `typer.launch` with the `locate=True` argument to prompt the operating system to open a file explorer or browser and highlight the specified file path. This is useful for helping users quickly find configuration files, output files, or other relevant directories generated by the application. Requires the `typer` and `pathlib` libraries.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/launch.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nimport os\nfrom pathlib import Path\n\napp = typer.Typer()\n\ndef create_config_file(config_dir: Path):\n    config_dir.mkdir(exist_ok=True)\n    config_file = config_dir / \"config.txt\"\n    config_file.write_text(\"Typer config data\")\n    return config_file.absolute()\n\n@app.command()\ndef main():\n    home_dir = Path.home()\n    app_dir = home_dir / \".my-typer-app\"\n    config_file_path = create_config_file(app_dir)\n\n    # Highlighted line\n    typer.launch(str(config_file_path), locate=True)\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Prompt in Python with Typer\nDESCRIPTION: This snippet demonstrates how to implement a confirmation prompt where users must type the same value twice for validation. This is useful for critical operations like deletion where you want to ensure the user's intent.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/prompt.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(\n    project_name: str = typer.Option(\n        ..., prompt=True, confirmation_prompt=True\n    ),\n):\n    print(f\"Deleting project {project_name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Running Minimal CLI with typer command\nDESCRIPTION: This console snippet shows how to run a python script (main.py) that defines a CLI, using the typer command. It shows a simple case where an argument is missing leading to an error message. It then demonstrates how to get help using the `--help` flag, showing the expected usage of the CLI application and also showing the correct usage with an example value for the NAME parameter.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n// Run your application\n$ typer main.py run\n\n// You get a nice error, you are missing NAME\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\nTry 'typer [PATH_OR_MODULE] run --help' for help.\n‚ï≠‚îÄ Error ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ Missing argument 'NAME'.                          ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n\n// You get a --help for free\n$ typer main.py run --help\n\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\n\nRun the provided Typer app.\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   | \n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --help          Show this message and exit.       ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// Now pass the NAME argument\n$ typer main.py run Camila\n\nHello Camila\n\n// It works! üéâ\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Click Command\nDESCRIPTION: Illustrates the fundamental structure of a Click application using the `@click.command()` decorator. The decorated function `hello` is converted into a `click.Command` object, which handles CLI argument parsing and execution.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/using-click.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n\n@click.command()\n@click.option(\"--name\", default=\"World\", help=\"The person to greet.\")\ndef hello(name: str):\n    \"\"\"Simple program that greets NAME.\"\"\"\n    print(f\"Hello {name}!\")\n\n\nif __name__ == \"__main__\":\n    hello()\n```\n\n----------------------------------------\n\nTITLE: Running Typer CLI Commands with Shell Autocompletion in Console\nDESCRIPTION: Demonstrates usage of the 'typer' command line utility to run a Typer Python application and trigger shell autocompletion for subcommands and CLI options. It shows invoking '[TAB]' to list top-level commands, option names with '--', and then executing the command with provided option values. This snippet requires a shell set up with completion support and a Typer CLI Python script 'main.py'. It highlights typical CLI usage and visualizes the autocompletion feature from the end-user perspective.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n$ typer ./main.py [TAB][TAB]\n\n// Depending on your terminal/shell you will get some completion like this ‚ú®\nrun    -- Run the provided Typer app.\nutils  -- Extra utility commands for Typer apps.\n\n// Then try with \"run\" and --\n$ typer ./main.py run --[TAB][TAB]\n\n// You will get completion for --name, depending on your terminal it will look something like this\n--name  -- The name to say hi to.\n\n// And you can run it as if it was with Python directly\n$ typer ./main.py run --name Camila\n\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Showing Default Value in CLI Argument Help\nDESCRIPTION: This snippet explains how default values for CLI arguments are displayed in the help text. It specifies that by default, Typer shows the default value in the help message, enhancing user understanding. The value is retrieved from the argument's default value.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(name: str = Argument(\"World\", help=\"Who to greet\")):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Command with Typer in Python\nDESCRIPTION: This snippet sets up a CLI command called 'hello' using Typer, specifying arguments for user names and options for message control. It includes argument definitions, default values, and options for shell completion and help, enabling users to interactively invoke custom greeting messages.\nSOURCE: https://github.com/fastapi/typer/blob/master/tests/assets/cli/richformattedapp-docs.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef hello(user_1: str, user_2: str = \"The World\", force: bool = False, install_completion: bool = False, show_completion: bool = False):\n    \"\"\"Send a greeting message to specified users.\"\"\"\n    if force:\n        message = f\"Hello, {user_1}!\"\n    else:\n        message = f\"Hello, {user_1}!\" if not force else \"\"  # Example conditional message\n    typer.echo(message)\n\n    if install_completion:\n        # Logic to install shell completion\n        typer.echo(\"Installing shell completion...\")\n\n    if show_completion:\n        # Logic to show shell completion script\n        typer.echo(\"Here is the shell completion script.\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining a Click Group Equivalent (Python)\nDESCRIPTION: This snippet shows the equivalent concept of a Typer callback in the Click library. The function decorated with `@click.group()` serves a similar purpose, acting as the entry point for a group of commands, analogous to how a Typer callback functions for a `typer.Typer()` application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport click\n\n@click.group()\ndef cli():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Launching URL with Typer (Python)\nDESCRIPTION: Demonstrates how to use `typer.launch` within a Typer application command to open a specific URL in the user's default web browser. This is useful for directing users to external web resources like documentation or help pages directly from the command line. Requires the `typer` library.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/launch.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main():\n    # Highlighted line\n    typer.launch(\"https://typer.tiangolo.com\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining a User Sub-Command (Add) in a Separate File\nDESCRIPTION: This snippet creates a dedicated Typer app instance for a specific user sub-command ('add'). This pattern allows organizing individual commands within a larger sub-command group ('users'). The app instance can then be included in the parent 'users' app.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/one-file-per-command.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\nadd_app = typer.Typer()\n\n@add_app.command(name=\"add\")\ndef add_user(name: str):\n    typer.echo(f\"Adding user: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Providing Help Text for Each CLI Option Value Completion in Typer Using Tuple Returns in Python\nDESCRIPTION: Demonstrates returning a list of tuples from the autocompletion function where each tuple contains the candidate string and a help text description. This enables enhanced autocompletion experiences on shells that support descriptive help (Zsh, Fish, PowerShell). The snippet shows that each completion item must be a tuple of two strings for Click (and Typer) to recognize the help text properly. Bash and similar shells ignore the help text but still complete normally.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef complete_name(incomplete: str):\n    options = [\n        (\"Camila\", \"The reader of books.\"),\n        (\"Carlos\", \"The writer of scripts.\"),\n        (\"Sebastian\", \"The type hints guy.\")\n    ]\n    return [option for option in options if option[0].startswith(incomplete)]\n```\n\n----------------------------------------\n\nTITLE: Working with Lists of Enum Values in Typer CLI Parameters\nDESCRIPTION: This snippet demonstrates how to create a CLI parameter that accepts a list of Enum values. It defines a Groceries enum and uses a List[Groceries] type hint with a default value containing multiple Enum members.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/enum.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nfrom typing import List, Optional\n\nimport typer\n\n\nclass Groceries(enum.Enum):\n    eggs = \"Eggs\"\n    bacon = \"Bacon\"\n    cheese = \"Cheese\"\n\n\ndef main(\n    groceries: List[Groceries] = [Groceries.eggs, Groceries.cheese],\n):\n    groceries_str = \", \".join(g.value for g in groceries)\n    typer.echo(f\"Buying groceries: {groceries_str}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Invoking Hello/Goodbye Subcommands with Completion - Shell (console)\nDESCRIPTION: This command demonstrates Typer's CLI completion when running a subcommand. Pressing <TAB> after 'run' lists available commands (hello, goodbye). Dependencies: Typer CLI and completion. Input: user invokes tab completion. Output: ['hello', 'goodbye'] shown.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ typer demo.py run <TAB>\n```\n\n----------------------------------------\n\nTITLE: Overriding Sub-Typer Callback with Decorator - Typer - Python\nDESCRIPTION: Illustrates that a callback defined using the `@app.callback()` decorator takes precedence over a callback specified during the `typer.Typer()` instance creation (using the `callback` parameter). When the sub-application is invoked, the decorator's callback function (`user_callback`) will be executed.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/callback-override.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\napp = typer.Typer(name=\"users\", help=\"Manage users\", callback=lambda: print(\"Users app init callback\"))\n\n\n@app.callback()\ndef user_callback():\n    print(\"Callback override, running users command\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional CLI Arguments Using typer.Argument() with Default Value in Python with Typer\nDESCRIPTION: Illustrates how to make CLI arguments optional in Typer by passing a default value to 'typer.Argument()', for instance 'None'. Declaring a parameter as 'name: str = typer.Argument(None)' tells Typer that the argument is optional and will receive 'None' if no value is provided via CLI. The optionality is governed by the default argument passed to 'typer.Argument()' and the corresponding Python function's parameter. This pattern allows flexible CLI argument definitions but is less explicit than the recommended 'Annotated' usage in modern Typer versions. The CLI behaves accordingly, accepting the argument optionally and falling back to the default.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/optional.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nname: str = typer.Argument(None)\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Typer Command with Decorator\nDESCRIPTION: Describes how to mark a specific command as deprecated within a Typer application. This is done by adding the `deprecated=True` parameter to the `@app.command()` decorator applied to the command function.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Adding a Boolean CLI Option in Python with Typer\nDESCRIPTION: Example of adding a --formal boolean CLI option to a Typer application, which defaults to False and changes the greeting style when enabled.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/first-steps.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str, lastname: str, formal: bool = False):\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with pip in console\nDESCRIPTION: Basic Typer installation command that includes default dependencies such as rich and shellingham. This is the recommended installation method for most users.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/install.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install typer\n---> 100%\nSuccessfully installed typer click shellingham rich\n```\n\n----------------------------------------\n\nTITLE: Running Simple Script or Module Function with Typer Command\nDESCRIPTION: Shows how to run the simple function script (`main.py`) or a function within a module (`my_package.main`) using the `typer` command and the `run` subcommand. The `typer` command automatically discovers the function and exposes its parameters as CLI options, including providing completion.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ typer main.py run --help\nUsage: typer run [OPTIONS]\n\n  Say hi to someone, by default to the World.\n\nOptions:\n  --name TEXT\n  --help       Show this message and exit.\n\n$ typer main.py run --name Camila\n\nHello Camila\n\n$ typer my_package.main run --help\nUsage: typer run [OPTIONS]\n\nOptions:\n  --name TEXT\n  --help       Show this message and exit.\n\n$ typer my_package.main run --name Camila\n\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Defining Typer App with Input Prompt (Python)\nDESCRIPTION: This snippet presents a Typer application that requires user input via a prompt. It uses `typer.prompt` to collect an email address after taking a name argument.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(name: str):\n    email = typer.prompt(\"Email\") #hl\n    print(f\"Hello {name}, your email is: {email}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Project Directory Using Console Commands - Console\nDESCRIPTION: This snippet demonstrates how to change the current terminal directory to the target Python project directory ('prisoner-of-azkaban') using the 'cd' command. No dependencies or special prerequisites are required. The input is the path to the desired project directory, and the output is the shell being positioned at that path, which is a common first step before managing virtual environments or running project files.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n```\n\n----------------------------------------\n\nTITLE: Using Typer's echo() for Simple Output\nDESCRIPTION: Describes Typer's built-in echo() function, which is a wrapper around print() with added checks, but recommends using Rich for advanced formatting.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Testing Required Typer Option in Console (Console)\nDESCRIPTION: This snippet shows console commands and output demonstrating the behavior of a Typer CLI application with a required option. It includes attempting to run the script without the required option (showing the error), running it correctly by providing the option, and viewing the help message which explicitly marks the option as required.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/required.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n// Pass the NAME CLI argument\n$ python main.py Camila\n\n// We didn't pass the now required --lastname CLI option\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing option '--lastname'.\n\n// Now update it to pass the required --lastname CLI option\n$ python main.py Camila --lastname Guti√©rrez\n\nHello Camila Guti√©rrez\n\n// And if you check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --lastname TEXT       [required]\n  --help                Show this message and exit.\n\n// It now tells you that --lastname is required üéâ\n```\n\n----------------------------------------\n\nTITLE: Boolean CLI Option with Only --force in Typer (Python)\nDESCRIPTION: This snippet demonstrates how to define a boolean CLI option in Typer that only accepts the `--force` flag, discarding the automatically generated `--no-force` option.  It uses the `typer.Option` function to set the desired flag name directly. The function then prints a message based on whether the `force` flag is set.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/bool.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(force: bool = typer.Option(False, '--force')): # Changed the name here\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Using typer.secho() for Styled Printing\nDESCRIPTION: Shows how to combine styling and printing in a single step with typer.secho(), which applies styling similar to style() and immediately outputs the styled message.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nWelcome here Camila\n```\n\n----------------------------------------\n\nTITLE: Install Packages Using uv - Console\nDESCRIPTION: This command demonstrates direct installation of the 'typer' package with pip emulation via 'uv'. Requires uv to be installed. Useful in environments where uv is the preferred package manager, ensuring package isolation in the virtual environment.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install typer\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Overriding Explicit Help in @app.callback() in Python\nDESCRIPTION: Demonstrates that setting the `help` parameter explicitly within the `@app.callback()` decorator takes precedence over help text set during the `typer.Typer()` initialization (via `typer.Typer(help=...)`) or inferred from callbacks. The command name is also explicitly set here.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Code from docs_src/subcommands/name_help/tutorial007.py, highlighted line 24:\n# @users_app.callback(name=\"users\", help=\"Help from callback for users.\")\n@users_app.callback(name=\"users\", help=\"Help from callback for users.\")\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Python\nDESCRIPTION: Shows a simple Python script that reads an environment variable named `MY_NAME` using the `os.getenv()` function. It demonstrates how to provide a default value ('World') if the variable is not set.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/environment-variables.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n```\n\n----------------------------------------\n\nTITLE: Checking Typer CLI Behavior with `--version`\nDESCRIPTION: Console interactions demonstrating how the basic `--version` option works. It shows the help message (including `--version`), normal execution with a name, and execution with the `--version` flag, which prints the version and exits before the main command logic runs.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/version.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\n// We get a --version, and don't get an awkward --no-version üéâ\nUsage: main.py [OPTIONS]\n\nOptions:\n  --version\n  --name TEXT\n  --help                Show this message and exit.\n\n\n// We can call it normally\n$ python main.py --name Camila\n\nHello Camila\n\n// And we can get the version\n$ python main.py --version\n\nAwesome CLI Version: 0.1.0\n\n// Because we exit in the callback, we don't get a \"Hello World\" message after the version üöÄ\n```\n\n----------------------------------------\n\nTITLE: Using Typer 'items' Subcommands and Help\nDESCRIPTION: Demonstrates how to check the help for the 'items' subcommand group (`python main.py items --help`) and execute its subcommands (`create`, `sell`) with arguments. The output confirms the commands and their actions.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/single-file.md#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\n// Check the help for items\n$ python main.py items --help\n\n// It shows its own commands (subcommands): create, delete, sell\nUsage: main.py items [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n  sell\n\n// Try it\n$ python main.py items create Wand\n\nCreating item: Wand\n\n$ python main.py items sell Vase\n\nSelling item: Vase\n```\n\n----------------------------------------\n\nTITLE: Declaring Required CLI Arguments Using typer.Argument() as Default Value in Python with Typer\nDESCRIPTION: Shows the older style of declaring required CLI arguments by using 'typer.Argument()' as the default value in a Python function parameter with Typer. Writing 'name: str = typer.Argument()' makes 'name' a required CLI argument despite being a default value, because by default 'typer.Argument()' marks parameters as required unless a specific default is supplied. This method is functionally equivalent to using 'Annotated' but is now considered less preferred. The special Python Ellipsis '...' can also be used explicitly to mark required arguments. Input is a mandatory string provided on the command line, and missing the argument triggers a usage error.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/optional.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nname: str = typer.Argument()\n```\n\n----------------------------------------\n\nTITLE: Checking 'create' Command Help Output in Typer\nDESCRIPTION: Shows the console output when requesting specific help for the `create` command. This output details the command's usage pattern, required arguments (like USERNAME), and any specific options it accepts, derived from the function signature and parameter annotations/help text.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n// Now the commands have inline help üéâ\n\n// Check the help for create\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\n  Create a new user with USERNAME.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter CLI Options in Typer (Python)\nDESCRIPTION: This snippet describes configuring CLI options as counters using the 'counter' parameter in Typer. It allows a flag like '--verbose' to count the number of times it is provided, facilitating different verbosity levels. Examples demonstrate various usages with and without short options and repeated flags.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/number.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n// Check it\n$ python main.py\n\nVerbose level is 0\n\n// Now use one --verbose\n$ python main.py --verbose\n\nVerbose level is 1\n\n// Now 3 --verbose\n$ python main.py --verbose --verbose --verbose\n\nVerbose level is 3\n\n// And with the short name\n$ python main.py -v\n\nVerbose level is 1\n\n// And with the short name 3 times\n$ python main.py -v -v -v\n\nVerbose level is 3\n\n// As short names can be put together, this also works\n$ python main.py -vvv\n\nVerbose level is 3\n\n```\n\n----------------------------------------\n\nTITLE: Testing Implicit Typer Command Function (Python)\nDESCRIPTION: This snippet demonstrates how to test a function not explicitly attached to a `Typer` instance in the main file. It creates a `Typer` instance in the test, registers the function as a command using `app.command()(main)`, and then invokes it via `CliRunner`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer.testing import CliRunner\n\nimport typer #hl\nfrom app.main import main #hl\n\nrunner = CliRunner()\n\ndef test_main_function():\n    app = typer.Typer() #hl\n\n    app.command()(main) #hl\n\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.stdout #hl\n```\n\n----------------------------------------\n\nTITLE: Checking 'delete-all' Command Help Output in Typer\nDESCRIPTION: Presents the console output for the `delete-all` command's help. It shows the command's usage and its specific options, such as `--force`, demonstrating how Typer automatically generates help text based on the command function's definition and parameter details.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n// Check the help for delete-all\n$ python main.py delete-all --help\n\nUsage: main.py delete-all [OPTIONS]\n\n  Delete ALL users in the database.\n\n  If --force is not used, will ask for confirmation.\n\nOptions:\n  --force / --no-force  Force deletion without confirmation.  [required]\n  --help                Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Running a Typer-Integrated Script Directly\nDESCRIPTION: Demonstrates executing the `main.py` script containing `typer.run(main)` directly via `python main.py`. It shows that Typer handles argument parsing, generates help messages, and executes the `main` function with the provided command-line input.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n// Run your application\n$ python main.py\n\n// You get a nice error, you are missing NAME\nUsage: main.py [OPTIONS] NAME\nTry 'main.py --help' for help.\n‚ï≠‚îÄ Error ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ Missing argument 'NAME'.                          ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n\n// You get a --help for free\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   |\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --help          Show this message and exit.       ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// Now pass the NAME argument\n$ python main.py Camila\n\nHello Camila\n\n// It works! üéâ\n```\n\n----------------------------------------\n\nTITLE: Creating a Generator with Yield in Python\nDESCRIPTION: Illustrates how to define and use a generator function that employs 'yield' to return multiple values over time. Generator functions are useful when you want to lazily produce a sequence, such as items retrieved from an API. Input: none for the function shown; output: yields integers from 0 to 99. No dependencies are required, and usage is demonstrated with a 'for' loop iterating over results.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/progressbar.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef iterate_user_ids():\n    # Let's imagine this is a web API, not a range()\n    for i in range(100):\n        yield i\n\nfor i in iterate_user_ids():\n    print(i)\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Package with pip (Console)\nDESCRIPTION: This snippet provides the pip command to install the 'typer' package, a popular library for building CLI applications in Python. Typing this into the terminal will download and install Typer and its dependencies from PyPI. Required prerequisites include pip and Python being properly installed. The command operates in the current active Python environment, and outputs the installation status along with download progress.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ pip install typer\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Boolean CLI Option with Only Names for False in Typer (Python)\nDESCRIPTION: This example demonstrates how to define only the names for setting a boolean CLI option to `False` in Typer.  It uses a space followed by `/` and then the negative name. In this case, it sets the `demo` option to `False` with the `-d` or `--demo` flags. The default is set to True, so passing the option will switch it to false.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/bool.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(demo: bool = typer.Option(True, ' /-d, --demo')):\n    if demo:\n        print(\"Running in production\")\n    else:\n        print(\"Running demo\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Slim Package with Standard Dependencies\nDESCRIPTION: Command to install the slim version of Typer with standard dependencies explicitly specified. This is equivalent to the default installation but shows the underlying package structure.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\npip install \"typer-slim[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Install Packages from requirements.txt Using uv - Console\nDESCRIPTION: This command uses uv to emulate 'pip install -r' for installing dependencies listed in 'requirements.txt'. Requires uv installed and an active virtual environment. Used for installing a group of dependencies with precise versions.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -r requirements.txt\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Typed CLI Parameter Behavior in Typer (console output) - Python\nDESCRIPTION: This snippet presents sample console output when invoking a Typer-based CLI application designed to accept typed arguments and options. It demonstrates help output, successful invocations with correct types, and error handling for incorrect types. No code is shown directly, but the output reveals dependencies on Typer, Click, and Python 3. Inputs are CLI arguments (e.g., NAME as str, --age as int, --height-meters as float, --female as bool), and outputs include help text and error messages. Limitations: the output is platform-dependent and does not include the underlying Python code.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\n// Notice how --age is an INTEGER and --height-meters is a FLOAT\nUsage: main.py [OPTIONS] NAME\n\nArguments:\n  NAME  [required]\n\nOptions:\n  --age INTEGER           [default: 20]\n  --height-meters FLOAT   [default: 1.89]\n  --female / --no-female  [default: True]\n  --help                  Show this message and exit.\n\n// Call it with CLI parameters\n$ python main.py Camila --age 15 --height-meters 1.70 --female\n\n// All the data has the correct Python type\nNAME is Camila, of type: class 'str'\n--age is 15, of type: class 'int'\n--height-meters is 1.7, of type: class 'float'\n--female is True, of type: class 'bool'\n\n// And if you pass an incorrect type\n$ python main.py Camila --age 15.3\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--age': '15.3' is not a valid integer\n\n// Because 15.3 is not an INTEGER (it's a float)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Dependencies\nDESCRIPTION: Specifies the required Python packages for the project using a standard requirements file format. It includes an editable install of the current project (`-e .`), the MkDocs Material theme, various MkDocs extensions for includes, redirects, and macros, image processing libraries (Pillow, CairoSVG), and a YAML parser. Commented lines suggest optional dependencies for features like Chinese search, automated code documentation, and code formatting.\nSOURCE: https://github.com/fastapi/typer/blob/master/requirements-docs.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n-e .\n\nmkdocs-material==9.5.50\nmdx-include >=1.4.1,<2.0.0\nmkdocs-redirects>=1.2.1,<1.3.0\npyyaml >=5.3.1,<7.0.0\n# For Material for MkDocs, Chinese search\n# jieba==0.42.1\n# For image processing by Material for MkDocs\npillow==11.1.0\n# For image processing by Material for MkDocs\ncairosvg==2.7.1\n# mkdocstrings[python]==0.25.1\n# Enable griffe-typingdoc once dropping Python 3.7 and upgrading typing-extensions\n# griffe-typingdoc==0.2.5\n# For griffe, it formats with black\n# black==24.3.0\nmkdocs-macros-plugin==1.3.7\nmarkdown-include-variants==0.0.4\n```\n\n----------------------------------------\n\nTITLE: Command Line Help Output for FastAPI Typer CLI\nDESCRIPTION: Displays the general help message for the CLI application, showing available options and commands such as create, delete, delete-all, and init. This helps users understand the overall CLI structure, options like --install-completion and --show-completion, and command usage syntax.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/options.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n// Check the help\npython main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n  delete-all\n  init\n```\n\n----------------------------------------\n\nTITLE: Using a Typer App with a Static Default Argument (Console)\nDESCRIPTION: Shows how to interact with the Python script defining a static default argument. It demonstrates checking the help message (which displays the default value), running the script without arguments (using the default), and running it with a provided argument.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/default.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\n// Notice the [default: Wade Wilson] ‚ú®\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: Wade Wilson]\n\nOptions:\n  --help                Show this message and exit.\n\n// With no optional CLI argument\n$ python main.py\n\nHello Wade Wilson\n\n// With one CLI argument\n$ python main.py Camila\n\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Comparing Desired vs. Undesired Typer Subcommand Invocation\nDESCRIPTION: Illustrates the correct way to call a nested Typer subcommand (`python main.py items create`) versus the less desirable way using the internal function name (`python main.py items items-create`), highlighting the benefit of explicit command naming.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/single-file.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n// We want this ‚úîÔ∏è\n$ python main.py items create\n```\n\nLANGUAGE: Console\nCODE:\n```\n// We don't want this ‚õîÔ∏è\n$ python main.py items items-create\n```\n\n----------------------------------------\n\nTITLE: Prompt with Rich Integration in Typer\nDESCRIPTION: This example shows how to use Rich library to enhance the prompt with style and emojis. `typer.prompt()` is used as before but Rich provides the styling when available.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/prompt.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str = typer.prompt(\"Enter your name üòé\")):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Running a Python Script in the Wrong Virtual Environment - Console\nDESCRIPTION: This sequence shows attempting to run a Python script ('main.py') after navigating to a project directory without deactivating the previous virtual environment. If required dependencies (here, the 'sirius' package) are missing from the current environment, import errors will occur. Prerequisites include Python installed, and the Python script must attempt to import a package not in the current environment. The output demonstrates a typical Traceback error resulting from an unresolved import.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importing sirius, it's not installed üò±\nTraceback (most recent call last):\n    File \"main.py\", line 1, in <module>\n        import sirius\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project with Poetry\nDESCRIPTION: This snippet shows how to use Poetry to create a new Python project named `rick-portal-gun`. It initializes the project structure including `pyproject.toml`, a README, and a basic Python package directory. It assumes Poetry is installed and accessible via the command line. The output confirms the project creation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ poetry new rick-portal-gun\n\nCreated package rick_portal_gun in rick-portal-gun\n\n// Enter the new project directory\ncd ./rick-portal-gun\n```\n\n----------------------------------------\n\nTITLE: Using a Typer App with a Dynamic Default Argument (Console)\nDESCRIPTION: Demonstrates interacting with the Python script that uses `default_factory`. It shows the help message indicating a dynamic default. Running the script multiple times without arguments results in different outputs due to the random default value generation. It also shows providing an argument overrides the dynamic default.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/default.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: (dynamic)]\n\nOptions:\n  --help                Show this message and exit.\n\n// Try it several times, it will use a random default each time\n$ python main.py\n\nHello Deadpool\n\n$ python main.py\n\nHello Hiro\n\n$ python main.py\n\nHello Rick\n\n// Now pass a value for the CLI argument\n$ python main.py Camila\n\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Overriding Typer Callback Help Inference with @app.callback() in Python\nDESCRIPTION: Demonstrates that a callback defined using the `@app.callback()` decorator takes precedence for help text inference over a callback specified via the `callback` parameter during `typer.Typer()` initialization.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Code from docs_src/subcommands/name_help/tutorial004.py, highlighted lines 16-20:\n# @users_app.callback()\n# def new_users_callback():\n#     \"\"\"\n#     Manage users in the app.\n#     \"\"\"\n@users_app.callback()\ndef new_users_callback():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Testing Installed CLI Program\nDESCRIPTION: This command tests the functionality of the installed CLI program. By running `rick-portal-gun shoot`, it executes the `shoot` command, which should output the text \"Shooting portal gun\". This verifies that the CLI program is correctly installed and that the defined commands work as expected. The expected output is printed to the console.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ rick-portal-gun shoot\n\n// It works üéâ\nShooting portal gun\n```\n\n----------------------------------------\n\nTITLE: Overwriting Default Typer Command Help Text\nDESCRIPTION: Explains how to override the default help text derived from a command function's docstring. This is achieved by providing a specific string value to the `help` parameter when using the `@app.command()` decorator for the function.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Defining a Custom Autocompletion Function in Typer for Option Values in Python\nDESCRIPTION: Shows a Python snippet defining a function 'complete_name()' that returns a list of string completions for a CLI option value in a Typer app. This function is used as the 'autocompletion' callback for a Typer option or argument to provide possible completion values when the user triggers shell completion. The snippet requires importing Typer and registering the completion function correctly. The completion function returns a fixed list of strings to suggest possible values.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef complete_name():\n    return [\"Camila\", \"Carlos\", \"Sebastian\"]\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to docs/ - Shell (console)\nDESCRIPTION: This shell command changes the active directory to 'docs/', preparing for manual documentation operations using mkdocs. Dependencies: standard shell. Input: none. Output: working directory now docs/.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ cd docs/\n```\n\n----------------------------------------\n\nTITLE: Executing the `multiapp` CLI Application\nDESCRIPTION: Demonstrates the basic syntax for running the `multiapp` command-line tool. It shows that the tool accepts optional global options (like --help, --install-completion), a main command (e.g., `top`, `sub`), and command-specific arguments.\nSOURCE: https://github.com/fastapi/typer/blob/master/tests/assets/cli/multiapp-docs.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp [OPTIONS] COMMAND [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Typer Command (Console)\nDESCRIPTION: This console snippet demonstrates running the basic Typer application from the command line with specific arguments. It shows the expected output printed to the standard output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py Camila --city Berlin\n\nHello Camila\nLet's have a coffee in Berlin\n```\n\n----------------------------------------\n\nTITLE: Checking Help Output for a Deprecated Typer Command\nDESCRIPTION: Illustrates the help message displayed when requesting help for a command that has been marked as deprecated. The output includes the \"(deprecated)\" marker and displays the command's specific help text, which can include details about the deprecation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py delete --help\n\nUsage: main.py delete [OPTIONS] USERNAME\n\n(deprecated)\nDelete a user.\nThis is deprecated and will stop being supported soon.\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    username      TEXT  [default: None] [required]               ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --help          Show this message and exit.                       ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n```\n\n----------------------------------------\n\nTITLE: Running the `multiapp top` Command\nDESCRIPTION: Shows how to execute the `top` command within the `multiapp` application. This specific command, described as 'Top command', primarily accepts the standard `--help` option for displaying usage information.\nSOURCE: https://github.com/fastapi/typer/blob/master/tests/assets/cli/multiapp-docs.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp top [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Typer Callback with Decorator (Python)\nDESCRIPTION: This snippet demonstrates defining a callback function using the `@app.callback()` decorator in Typer. The callback handles a global `--verbose` CLI option, modifying a global state variable based on its value. This allows defining application-level options that apply before specific commands are run.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\nstate = {\"verbose\": False}\n\ndef main(\n    verbose: bool = typer.Option(\n        False,\n        \"--verbose\",\n        \"-v\",\n        help=\"Enable verbose mode.\",\n    )\n):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    if verbose:\n        print(\"Will write verbose output\")\n        state[\"verbose\"] = True\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"\n    Create a new user with USERNAME.\n    \"\"\"\n    if state[\"verbose\"]:\n        print(\"About to create a user\")\n    print(f\"Creating user: {username}\")\n    if state[\"verbose\"]:\n        print(\"Just created a user\")\n\n\n@app.command()\ndef delete(username: str):\n    \"\"\"\n    Delete a user with USERNAME.\n    \"\"\"\n    if state[\"verbose\"]:\n        print(\"About to delete a user\")\n    print(f\"Deleting user: {username}\")\n    if state[\"verbose\"]:\n        print(\"Just deleted a user\")\n\n\n@app.callback()\ndef callback(\n    verbose: bool = typer.Option(\n        False,\n        help=\"Enable verbose mode.\",\n    )\n):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    if verbose:\n        print(\"Will write verbose output\")\n        state[\"verbose\"] = True\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: CLI Options: Multiple Short Names Together\nDESCRIPTION: This code example showcases the definition and usage of multiple short names for different CLI options. It demonstrates how to define options that accept values and boolean flags, using their short versions together. Dependencies: Typer. Input: various short and long options with and without values. Output: The command-line interface will recognize both long and short option names, and multiple short options can be used, including combinations that affect the ordering of options and values passed to them.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/name.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef main(\n    name: Annotated[str, typer.Option(\"--name\", \"-n\")] = typer.Option(\"Camila\"),\n    formal: Annotated[bool, typer.Option( \"-f\")] = False,\n):\n    if formal:\n        print(f\"Good day Ms. {name}.\")\n    else:\n        print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Executing `multiapp` Subcommands\nDESCRIPTION: Illustrates the usage pattern for invoking subcommands under the `sub` command group in the `multiapp` tool. It requires specifying `sub`, followed by optional options, the specific subcommand name (e.g., `hello`, `hi`, `bye`), and any arguments relevant to that subcommand.\nSOURCE: https://github.com/fastapi/typer/blob/master/tests/assets/cli/multiapp-docs.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub [OPTIONS] COMMAND [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Using a Typer Callback Primarily for Documentation (Python)\nDESCRIPTION: Shows how to use a Typer callback mainly to provide a detailed help message for the main application via its docstring. The callback function itself might have minimal or no logic, but its docstring is automatically used as the application's help text.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Manage users CLI app.\n\n    Use it with the create command.\n\n    A new user with the given NAME will be created.\n    \"\"\"\n\n\n@app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `init` Command in Typer CLI\nDESCRIPTION: Illustrates executing the 'init' command, which does not require any CLI parameters. This command initializes the user database and outputs a confirmation message, serving as a setup or initialization step within the CLI tool.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/options.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py init\n\nInitializing user database\n```\n\n----------------------------------------\n\nTITLE: Adding Typer Dependency with Poetry\nDESCRIPTION: This command adds the `typer` library to the project's dependencies using Poetry.  It resolves dependencies, installs required packages and creates a virtual environment for the project. The output displays the progress of dependency resolution and package installation, including version details.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ poetry add typer\n\n// It creates a virtual environment for your project\nCreating virtualenv rick-portal-gun-w31dJa0b-py3.10 in /home/rick/.cache/pypoetry/virtualenvs\nUsing version ^0.12.0 for typer\n\nUpdating dependencies\nResolving dependencies... (1.2s)\n\n---> 100%\n\nPackage operations: 8 installs, 0 updates, 0 removals\n\n  - Installing mdurl (0.1.2)\n  - Installing markdown-it-py (3.0.0)\n  - Installing pygments (2.17.2)\n  - Installing click (8.1.7)\n  - Installing rich (13.7.1)\n  - Installing shellingham (1.5.4)\n  - Installing typing-extensions (4.11.0)\n  - Installing typer (0.12.3)\n\nWriting lock file\n\n// Activate that new virtual environment\n$ poetry shell\n\nSpawning shell within /home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.10\n\n// Open an editor using this new environment, for example VS Code\n$ code ./\n```\n\n----------------------------------------\n\nTITLE: Examining PATH Environment Variable After Virtualenv Activation (Windows) (Plaintext)\nDESCRIPTION: This line shows the Windows PATH variable after activating a Python virtual environment, with the project‚Äôs venv\\Scripts directory at the start. This ensures that programs and Python executables in the venv are found before any globally installed ones. For context/illustration only; not executable code.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n```\n\n----------------------------------------\n\nTITLE: Running the `multiapp sub hi` Command\nDESCRIPTION: Shows how to run the `hi` subcommand under the `sub` group, used to 'Say Hi'. It accepts optional options and an optional positional argument `USER` which defaults to 'World', representing the name of the user to greet.\nSOURCE: https://github.com/fastapi/typer/blob/master/tests/assets/cli/multiapp-docs.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub hi [OPTIONS] [USER]\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements with uv inside Docker - Shell (console)\nDESCRIPTION: Inside the Docker container, this command uses 'uv pip' to install project dependencies as per requirements.txt. 'uv' is an alternative Python package installer allowing faster installs. Dependencies: uv, requirements.txt. Input: none. Output: installed Python packages inside the container.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Environment Variables with a CLI Argument in Python\nDESCRIPTION: This example shows how to configure a CLI argument to read from multiple environment variables in order of priority. The argument will check 'AWESOME_NAME' first, then 'GOD_NAME' if the first is not set.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/envvar.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str = typer.Argument(\"World\", envvar=[\"AWESOME_NAME\", \"GOD_NAME\"])):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Editing Shell Configuration File with nano - Bash\nDESCRIPTION: This bash command opens the zsh shell configuration file (~/.zshrc) using the nano editor. Used to review or edit shell completion configuration added by Typer. Dependencies: nano installed, zsh configuration present. Input: none. Output: opens editor for manual inspection.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Checking Which Python Interpreter is Active (Linux, macOS, Bash) (Console)\nDESCRIPTION: This command checks which Python binary is being used in the current shell session on Unix-like systems. After virtual environment activation, this should resolve to the python binary inside the .venv directory, confirming that the virtual environment is active. Prerequisites include a functioning shell and Python interpreter. Outputs the full filesystem path to the currently resolved 'python' executable.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Command Completion\nDESCRIPTION: Installs command-line completion for the `typer` command in the current user's shell configuration file (e.g., `.bashrc`). This provides suggestions for commands and options when typing `typer` in the terminal.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ntyper --install-completion\n\nbash completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n```\n\n----------------------------------------\n\nTITLE: Creating a Typer Application with Multiple Commands\nDESCRIPTION: Shows how to explicitly create a `typer.Typer` instance and define multiple command-line subcommands (`hello`, `goodbye`) using the `@app.command()` decorator. It demonstrates defining function arguments, including a boolean option with a default value, which Typer automatically converts to command-line arguments and options.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: str):\n    print(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        print(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        print(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Declaring an Integer CLI Argument/Option in Typer (Python)\nDESCRIPTION: Demonstrates declaring an integer command-line argument or option using standard Python type hints within a Typer application. Typer uses this type hint to handle input validation and type conversion from the command line input.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ntotal: int\n```\n\n----------------------------------------\n\nTITLE: Checking Which Python Interpreter is Active (Windows PowerShell) (Console)\nDESCRIPTION: This snippet uses 'Get-Command' in Windows PowerShell to display the location of the currently active 'python' interpreter. After activating the virtual environment, this should return a path within the project's .venv/Scripts directory, confirming that the correct Python is being used. Prerequisite is PowerShell environment with Python installed. Outputs the full path to the Python executable.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Standard Exception Traceback in Typer CLI Application\nDESCRIPTION: This snippet shows the full traceback output when a TypeError occurs in a Typer command with pretty exceptions disabled. It helps developers understand the error's origin and context in the call stack during debugging sessions.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n  File \"main.py\", line 12, in <module>\n    app()\n  ...\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n----------------------------------------\n\nTITLE: Minimal Typer CLI with main() function\nDESCRIPTION: This Python code defines a simple CLI application. It imports the typer module. The main function takes a string argument 'name' and prints a greeting message. The script doesn't use Typer internally, it is executed using the typer command. The expected output is a greeting message.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Python Executable Path in Virtual Environment (Linux/macOS) (Plaintext)\nDESCRIPTION: This snippet provides the path for the Python interpreter inside a virtual environment on Linux or macOS. This demonstrates which 'python' binary is used after venv activation. Strictly illustrative for output or configuration purposes; does not require execution.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Prompting for Email Confirmation with Typer - Python\nDESCRIPTION: This snippet demonstrates how to use Typer's CLI options to prompt users for an email address with a confirmation prompt by setting confirmation_prompt=True. The user is asked to enter and then re-enter their email for verification. Required dependency: the Typer library (install via pip). The script expects a positional argument for the user's name, then interactively prompts for the email address twice. The program outputs a greeting including the confirmed email. Limitations: email is shown as typed (not hidden), and validation is limited to confirmation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/password.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str, email: str = typer.Option(..., prompt=True, confirmation_prompt=True)):\n    typer.echo(f\"Hello {name}, your email is {email}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Executing Program Found via PATH\nDESCRIPTION: Demonstrates how typing a command like `python` relies on the operating system searching the directories listed in the `PATH` environment variable to find the corresponding executable file.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/environment-variables.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python\n```\n\nLANGUAGE: console\nCODE:\n```\n$ /opt/custompython/bin/python\n```\n\nLANGUAGE: console\nCODE:\n```\n$ C:\\opt\\custompython\\bin\\python\n```\n\n----------------------------------------\n\nTITLE: Starting MkDocs Live Server - Shell (console)\nDESCRIPTION: This shell command starts the MkDocs live server in development mode on port 8008. It serves documentation and automatically reloads on file changes. Dependencies: mkdocs installed. Inputs: none. Outputs: documentation available at localhost:8008 for live preview.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ mkdocs serve --dev-addr 8008\n```\n\n----------------------------------------\n\nTITLE: Initializing Typer with Full Exceptions Display (Python)\nDESCRIPTION: This snippet shows how to initialize a Typer application instance with the `pretty_exceptions_short` parameter set to `False`. This configuration disables the default behavior of shortening exception tracebacks, allowing the user to see the full call stack, including frames from Typer and Click, when an unhandled exception occurs during command execution. The code defines a simple command that raises a ValueError to demonstrate the output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer(pretty_exceptions_short=False)\n\n@app.command()\ndef main():\n    print(\"Doing something that will fail...\")\n    # This will raise an exception to demonstrate the output\n    raise ValueError(\"Something went wrong in the command!\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Demo Typer CLI Application - Python\nDESCRIPTION: This Python code defines a simple Typer CLI application with two commands: hello and goodbye. It demonstrates how to structure a Typer app, register commands, and execute the app. Dependencies: typer. Parameters: none. Input: CLI usage by the user. Output: prints 'Hello' or 'Goodbye' depending on invoked command.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello():\n    print(\"Hello\")\n\n\n@app.command()\ndef goodbye():\n    print(\"Goodbye\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Launching zsh in Docker Container - Shell (console)\nDESCRIPTION: This command starts an interactive zsh shell session within the Docker container. Useful for testing shell completion and configuration specific to zsh. Dependencies: zsh installed in container. Inputs: none. Outputs: new zsh session.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ zsh\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Environment Variables in Shell\nDESCRIPTION: Demonstrates how to create and use environment variables directly within the command line interface for different operating systems. This allows setting system-level variables accessible by programs.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/environment-variables.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n// You could create an env var MY_NAME with\n$ export MY_NAME=\"Wade Wilson\"\n\n// Then you could use it with other programs, like\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n```\n\nLANGUAGE: console\nCODE:\n```\n// Create an env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Use it with other programs, like\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n```\n\n----------------------------------------\n\nTITLE: Installing a Different Version of a Python Package Using pip (Console)\nDESCRIPTION: This console example shows how to install a different version of the 'harry' Python package, specifically version 3, using pip. Like previous pip commands, prerequisites include an installed pip, a working internet connection, and appropriate permissions. The command will change the version of 'harry' in the global or virtual environment, replacing existing versions if necessary which can potentially break dependencies in other projects. Output reflects progress and success/failure messages.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"harry==3\"\n```\n\n----------------------------------------\n\nTITLE: Displaying a Progress Bar with Rich in Python\nDESCRIPTION: Demonstrates using Rich's 'track()' function to display a visually appealing progress bar when processing an iterable. 'track()' wraps any iterable, providing a progress bar as you iterate through it. This requires the 'rich' library to be installed, and the iterable (e.g. a list or range) is passed as the first argument. The output is visually enhanced with colors and estimated durations. Expected input: any iterable; output: progress bar with information as items are processed.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/progressbar.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfor item in track(iterable, description=\"Processing...\"):\n    process(item)\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Typer Project using pip\nDESCRIPTION: This pip requirements file defines development dependencies for the Typer project, including an editable install of the project itself, inclusion of test and documentation requirements, and a pre-commit hooks package with version constraints.\nSOURCE: https://github.com/fastapi/typer/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e .\n\n-r requirements-tests.txt\n-r requirements-docs.txt\n\npre-commit >=2.17.0,<5.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Typer CLI command with a string parameter in Python\nDESCRIPTION: This snippet shows how to define a CLI command using Typer in Python with a command decorator, a string parameter with a default value, and a print statement concatenating the string parameter with an integer. It demonstrates basic command registration and parameter passing for CLI apps.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Typer\n\napp = Typer()\n\n@app.command()\ndef main(name: str = \"morty\"):\n    print(name + \"3\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring Typer Option Help with Annotated in Python\nDESCRIPTION: Demonstrates adding a help text to a Typer CLI option using the `help` parameter within `typer.Option` when defining the option via `Annotated`. This text is shown when the user requests help for the CLI application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/help.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlastname: Annotated[str, typer.Option(help=\"this option does this and that\")] = \"\"\n```\n\n----------------------------------------\n\nTITLE: Gitignore Pattern for Ignoring All Files - gitignore\nDESCRIPTION: This snippet shows the contents of a '.gitignore' file for ignoring all files within a directory (e.g., '.venv'). Useful to prevent committing any files in your virtual environment to version control. Use a single asterisk '*' to match all files and subdirectories.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_17\n\nLANGUAGE: gitignore\nCODE:\n```\n*\n```\n\n----------------------------------------\n\nTITLE: Using `typer.FileBinaryWrite` to Write Binary Files\nDESCRIPTION: Demonstrates writing binary data to a file using `typer.FileBinaryWrite`, requiring data as `bytes`. It is suitable for writing files like images or other binary formats in CLI programs, emphasizing the importance of encoding strings to bytes before writing.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/file.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n$ python main.py --file binary.dat\n\nBinary file written\n\n// Check the binary file\n$ ls ./binary.dat\n\n./binary.dat\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Shell Completion - Shell (console)\nDESCRIPTION: This command installs shell completion for Typer, enabling auto-completion of Typer CLI commands in the user's shell. Dependencies: Typer installed in environment. Input: none. Output: shell configuration updated for completion; effect applies after restarting shell.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ typer --install-completion\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Project Directory Structure with Shell Commands - Console\nDESCRIPTION: This code walks through the creation of a new project directory using common shell commands. It starts from the user's home directory, creates a parent 'code' directory and a subdirectory for the new project, and navigates into it. Requires a Unix-like shell or Windows command line with standard commands such as 'cd' and 'mkdir'.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n// Go to the home directory\n$ cd\n// Create a directory for all your code projects\n$ mkdir code\n// Enter into that code directory\n$ cd code\n// Create a directory for this project\n$ mkdir awesome-project\n// Enter into that project directory\n$ cd awesome-project\n```\n\n----------------------------------------\n\nTITLE: Declare UUID CLI Parameter with Typer\nDESCRIPTION: This snippet demonstrates how to declare a CLI parameter as a UUID using Typer. The `UUID` type annotation ensures that the input is validated as a valid UUID. If the input is a valid UUID, the Python code receives a standard Python `UUID` object, giving type checks and autocompletion. If the input is invalid, typer automatically returns an error.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/parameter-types/uuid.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport uuid\n\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(user_id: uuid.UUID):\n    print(f\"{user_id=}\")\n    print(f\"UUID version is: {user_id.version}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Combining Typer and Rich for CLI Content\nDESCRIPTION: Explains how Typer manages CLI structure while Rich handles content display; combining both tools leads to more visually appealing and functional command line apps.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Ignore All Files in .venv for Git - Console\nDESCRIPTION: This command creates a '.gitignore' file inside the '.venv' directory containing '*', instructing Git to ignore all files within the virtual environment. Prevents committing environment files and dependencies to version control. Run immediately after creating the virtual environment if using Git.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"*\" > .venv/.gitignore\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameter Info with `typer.CallbackParam` in Python\nDESCRIPTION: Demonstrates using `typer.CallbackParam` to access information about the CLI parameter itself within the callback. The callback function now accepts `param: typer.CallbackParam` and uses `param.name` to print which parameter is being validated. This is useful for generic callbacks used by multiple parameters.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef name_callback(value: str, param: typer.CallbackParam):\n    print(f\"Validating param: {param.name}\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: str = typer.Option(\n        ..., help=\"The name to say hi to.\", callback=name_callback\n    )\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Slim with pip\nDESCRIPTION: Installs a smaller version of the Typer library without the `typer` command. This is useful if you only need the library for building CLI apps but don't want the command tool globally installed.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install typer-slim\n```\n\n----------------------------------------\n\nTITLE: Displaying Typer Error Output with Rich and Hidden Locals (Console)\nDESCRIPTION: Shows the console output of a Typer application error when Rich is installed but local variable display has been disabled via `pretty_exceptions_show_locals=False`. The traceback is still formatted by Rich, but the 'locals' section is omitted, preventing potentially sensitive information from being logged.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py supersecret\n\n<font color=\"#F92672\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </font><font color=\"#F92672\"><b>Traceback (most recent call last)</b></font><font color=\"#F92672\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</font>\n<font color=\"#F92672\">‚îÇ</font> <font color=\"#A37F4E\">/home/user/code/superapp/</font><font color=\"#F4BF75\"><b>main.py</b></font>:<font color=\"#66D9EF\">8</font> in <font color=\"#A6E22E\">main</font>                        <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>                                                                   <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    5                                                              <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    6 <font color=\"#AE81FF\"><b>@app</b></font>.command()                                               <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    7 <font color=\"#66D9EF\">def</font> <font color=\"#A6E22E\">main</font>(password: <font color=\"#A1EFE4\">str</font>):                                     <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font> <font color=\"#F92672\">‚ù± </font> 8 ‚îÇ   <font color=\"#A1EFE4\">print</font>(password + <font color=\"#66D9EF\">3</font>)                                      <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>    9                                                              <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>   10                                                              <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚îÇ</font>   11 <font color=\"#66D9EF\">if</font> <font color=\"#F92672\">__name__</font> == <font color=\"#F4BF75\">\"__main__\"</font>:                                   <font color=\"#F92672\">‚îÇ</font>\n<font color=\"#F92672\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</font>\n<font color=\"#F92672\"><b>TypeError: </b></font>can only concatenate str <b>(</b>not <font color=\"#A6E22E\">\"int\"</font><b>)</b> to str\n```\n\n----------------------------------------\n\nTITLE: Executing subcommands\nDESCRIPTION: This console snippet demonstrates how to execute the hello and goodbye subcommands of the example CLI applications, showing how to use arguments and options.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n// Use it with the hello command\n\n$ python main.py hello Camila\n\nHello Camila\n\n// And with the goodbye command\n\n$ python main.py goodbye Camila\n\nBye Camila!\n\n// And with --formal\n\n$ python main.py goodbye --formal Camila\n\nGoodbye Ms. Camila. Have a good day.\n```\n\n----------------------------------------\n\nTITLE: Aggregating User Sub-Commands in a Package's __init__.py\nDESCRIPTION: This snippet shows how the `__init__.py` file within a sub-package (`users/`) can create a Typer app instance (`users_app`) and consolidate the individual command apps (`add_app`, `delete_app`) using `add_typer()`. This aggregated app is then added to the main application, forming the 'users' sub-command group.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/one-file-per-command.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\nfrom .add import add_app\nfrom .delete import delete_app\n\nusers_app = typer.Typer()\n\nusers_app.add_typer(add_app)\nusers_app.add_typer(delete_app)\n```\n\n----------------------------------------\n\nTITLE: Executing Typer CLI via Python Module\nDESCRIPTION: Demonstrates running the Typer command-line interface (CLI) tool by invoking the `typer` module directly using the Python interpreter. As noted for version 0.12.0, this method works even if the `typer-cli` package (which normally provides the standalone `typer` command) is not installed, because the core CLI logic remains within the main `typer` package.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/release-notes.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m typer\n```\n\n----------------------------------------\n\nTITLE: Inferring Sub-app Help from Typer Callback Parameter in Python\nDESCRIPTION: Shows how to specify a callback function directly when creating a `typer.Typer` instance using the `callback` parameter. The docstring of this function can be used to infer the help text for the command, although this method has the lowest precedence among inferred help sources.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Code from docs_src/subcommands/name_help/tutorial003.py, highlighted lines 6-9, 12:\n# def users_callback():\n#     \"\"\"\n#     Manage users in the app.\n#     \"\"\"\n# users_app = typer.Typer(callback=users_callback)\ndef users_callback():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\nusers_app = typer.Typer(callback=users_callback)\n```\n\n----------------------------------------\n\nTITLE: Adding Typer Command Help with Docstrings/Parameters\nDESCRIPTION: Illustrates how to provide help text for Typer commands and the main application. Command help can be defined in the function's docstring or explicitly via the `help` parameter of `@app.command()`, while application help is set using the `help` parameter of `typer.Typer()`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Activating a Python Virtual Environment (Windows Bash) (Console)\nDESCRIPTION: This snippet demonstrates activating a '.venv' Python virtual environment while using a Bash shell on Windows (e.g., via Git Bash). The 'source' command is used with the Windows-style Scripts directory. The prerequisite is that the virtual environment has already been created in the current directory. Activation modifies shell environment variables for Python and path resolution.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/Scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Executing Python with Environment Variables\nDESCRIPTION: Illustrates how the output of the Python script changes depending on whether the `MY_NAME` environment variable is set in the shell before execution. Shows the use of the default value when the variable is absent.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/environment-variables.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ export MY_NAME=\"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n```\n\nLANGUAGE: console\nCODE:\n```\n// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n```\n\n----------------------------------------\n\nTITLE: Combining reigns and towns as subcommands under lands CLI app using Typer in Python\nDESCRIPTION: This snippet integrates the previously defined 'reigns' and 'towns' Typer CLI apps into a single 'lands' CLI group. The 'lands' CLI exposes two command groups: 'reigns' and 'towns', each with their own subcommands for managing reigns or towns respectively. This allows managing lands via nested commands, with help support and individual command execution accessible under 'lands'.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/nested-subcommands.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python lands.py --help\n\nUsage: lands.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  reigns\n  towns\n\n$ python lands.py reigns --help\n\nUsage: lands.py reigns [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  conquer\n  destroy\n\n$ python lands.py towns --help\n\nUsage: lands.py towns [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  burn\n  found\n\n$ python lands.py reigns conquer Gondor\n\nConquering reign: Gondor\n\n$ python lands.py reigns destroy Nilfgaard\n\nDestroying reign: Nilfgaard\n\n$ python lands.py towns found Springfield\n\nFounding town: Springfield\n\n$ python lands.py towns burn Atlantis\n\nBurning town: Atlantis\n```\n\n----------------------------------------\n\nTITLE: Verifying Documentation Callback and Command Execution (Console)\nDESCRIPTION: This console output demonstrates the effect of using a callback primarily for documentation. Checking `--help` shows the detailed multi-line help text extracted from the callback's docstring. Running a command shows that the application still functions normally.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_7\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py --help\n\n// Notice all the help text extracted from the callback docstring\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Manage users CLI app.\n\n  Use it with the create command.\n\n  A new user with the given NAME will be created.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// And it just works as normally\n$ python main.py create Camila\n\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: CLI with Subcommands using typer.Typer()\nDESCRIPTION: This Python code demonstrates the creation of a CLI application with subcommands using the `typer.Typer()` class. It defines a Typer app object and adds two subcommands: `hello` and `goodbye`. The `hello` command takes a name as input, and the `goodbye` command takes a name and an optional boolean argument `formal`.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: str):\n    print(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        print(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        print(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Callback Breaking Shell Completion in Typer (Python)\nDESCRIPTION: Modifies the previous callback example by adding a `print(\"Validating name\")` statement inside the `name_callback` function. This side effect will interfere with the shell completion mechanism, as the printed text will be captured by the shell during completion requests.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ndef name_callback(value: str):\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: str = typer.Option(\n        ..., help=\"The name to say hi to.\", callback=name_callback\n    )\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Displaying Typer Error Output without Rich (Console)\nDESCRIPTION: Illustrates the standard traceback output generated by Typer when the Rich library is not installed. While less formatted than the Rich version, Typer still provides a cleaner traceback compared to the default Python output by simplifying some internal call stack details.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nTraceback (most recent call last):\n\n  File \"main.py\", line 12, in <module>\n    typer.run(main)\n\n  File \"main.py\", line 8, in main\n    print(name + 3)\n\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n----------------------------------------\n\nTITLE: Help for goodbye subcommand\nDESCRIPTION: This console snippet shows the help output for the `goodbye` subcommand, including the arguments it accepts, such as 'name', and the available options like --formal or --no-formal for the boolean parameter.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py goodbye --help\n\n Usage: main.py goodbye [OPTIONS] NAME\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --formal    --no-formal      [default: no-formal] ‚îÇ\n‚îÇ --help                       Show this message    ‚îÇ\n‚îÇ                              and exit.            ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n// Automatic --formal and --no-formal for the bool option üéâ\n```\n\n----------------------------------------\n\nTITLE: Documenting a Typer CLI App with a Callback Docstring in Python\nDESCRIPTION: This snippet uses the callback's docstring in a Typer CLI app to provide application-level help text, which is displayed in the autogenerated CLI help output. The callback function includes a descriptive docstring, enhancing usability and documentation of the CLI. Requires the 'typer' Python package. The only command, 'create', prints a message to the console. No additional parameters are required, and the CLI displays the docstring text in its help screen.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/one-or-multiple.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.callback()\ndef main():\n    \"\"\"\n    Creates a single user Hiro Hamada.\n\n    In the next version it will create 5 more users.\n    \"\"\"\n    pass\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Understanding Standard Output and Error Streams\nDESCRIPTION: Describes how Python CLI programs write output to standard output and standard error, and how these are handled by the operating system for display and error reporting.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Making Typer Option Required (Old Style, Python)\nDESCRIPTION: This snippet shows an older method for making a Typer command-line option required. It involves assigning `typer.Option()` directly as the default value for the function parameter (`lastname: str = typer.Option()`). By not passing any argument to the `default` parameter of `typer.Option`, the option becomes mandatory.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/required.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str, lastname: str = typer.Option()):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Using python -m to Run Module\nDESCRIPTION: This example demonstrates the equivalent of calling pip using `python -m`. It shows that the `pip` module can be run as a script using `python -m pip install fastapi`, where the `-m` option calls the module `pip`. This approach is useful in virtual environments and ensures that the `pip` from the active environment is used.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install fastapi\n```\n\n----------------------------------------\n\nTITLE: Illustrating Typer CLI Parameter Order Issue\nDESCRIPTION: Console interaction showing the problem when a required option (`--name`) with a potentially exiting callback is processed before `--version`. Providing an invalid name before the `--version` flag causes the name callback's error to trigger and abort execution, preventing the version from being displayed.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/version.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --name Rick --version\n\nOnly Camila is allowed\nAborted!\n```\n\n----------------------------------------\n\nTITLE: Printing to Standard Error with Rich Console in Python\nDESCRIPTION: This snippet demonstrates how to output messages to standard error using the Rich library's Console class with the stderr=True parameter. It emphasizes that writing to standard error does not interfere with the completion of the main program and is useful for separating logs or debug messages from standard output.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console(stderr=True)\nconsole.print(\"Error message\")\n```\n\n----------------------------------------\n\nTITLE: Validating Typer CLI Option with Callback in Python\nDESCRIPTION: Defines a callback function `name_callback` that validates the input `--name`. If the name is not 'Camila', it raises a `typer.BadParameter` exception. This callback is attached to the `name` parameter in the `main` function using `typer.Option(callback=name_callback)`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ndef name_callback(value: str):\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(\n    name: str = typer.Option(\n        ..., help=\"The name to say hi to.\", callback=name_callback\n    )\n):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Combining Help Text and Docstrings for CLI Arguments\nDESCRIPTION: This snippet combines the `help` parameter with a function's docstring to provide comprehensive documentation for a CLI argument. The `--help` option then combines the information from both, offering a richer description of the argument, including any defaults or usage details.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/help.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typer import Argument\n\n\ndef main(name: str = Argument(..., help=\"The name of the user to greet\")):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Hiding Environment Variables in Help Text for CLI Arguments in Python\nDESCRIPTION: This snippet shows how to hide environment variables from the help text while still allowing them to be used. The 'show_envvar=False' parameter prevents the environment variable from being displayed in the help documentation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/arguments/envvar.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(\n    name: str = typer.Argument(\"World\", envvar=\"AWESOME_NAME\", show_envvar=False)\n):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Conditional callback execution based on invoked subcommand in Typer\nDESCRIPTION: This snippet shows how to prevent the main callback from executing when a subcommand is invoked, by checking if `ctx.invoked_subcommand` is `None`. It allows for specific callback behavior only when the main program runs directly, not through subcommands.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/context.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n// The callback is executed\nInitializing database\n\n// Check it with a subcommand\n$ python main.py create Camila\n\n// This time the callback is not executed\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: Overriding Command Name and Help in app.add_typer()\nDESCRIPTION: Example showing how to override a Typer subcommand's name and help text using explicit parameters in app.add_typer(). This demonstrates the highest priority method for customizing command appearance in the CLI.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.add_typer(users_app, name=\"cake-sith-users\", help=\"Unlimited powder! Eh, users.\")\n```\n\n----------------------------------------\n\nTITLE: Observing Broken Typer Shell Completion\nDESCRIPTION: Shows the console output demonstrating the broken shell completion. When running normally, the extra \"Validating name\" message appears. When attempting tab completion (`--[TAB][TAB]`), the printed message interferes, causing a completion error.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n// Run it normally\n$ typer ./main.py run --name Camila\n\n// See the extra message \"Validating name\"\nValidating name\nHello Camila\n\n$ typer ./main.py run --[TAB][TAB]\n\n// Some weird broken error message ‚õîÔ∏è\n(eval):1: command not found: Validating\nrutyper ./main.pyed Typer app.\n```\n\n----------------------------------------\n\nTITLE: Installing Wheel Package with pip\nDESCRIPTION: This command installs the generated wheel package using pip. It specifies the path to the wheel file located in the dist directory and uses the `--user` flag to install in the user's directory. The output shows the installation process of the wheel package, including its version.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user /home/rick/rick-portal-gun/dist/rick_portal_gun-0.1.0-py3-none-any.whl\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Accessing subcommand name via Typer Context in Python\nDESCRIPTION: This snippet illustrates how to retrieve the name of the subcommand being executed by accessing the `typer.Context` object within a Typer application's callback function. It demonstrates how to dynamically respond based on which command is currently running.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/context.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py create Camila\n\n// We get the message from the callback\nAbout to execute command: create\nCreating user: Camila\n\n$ python main.py delete Camila\n\n// We get the message from the callback, this time with delete\nAbout to execute command: delete\nDeleting user: Camila\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Name and Help in Typer Initialization in Python\nDESCRIPTION: Shows how explicitly setting the `name` and `help` parameters when creating a `typer.Typer()` instance takes precedence over any inferred help text from callbacks. The `name` parameter also explicitly sets the command name.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/name-and-help.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Code from docs_src/subcommands/name_help/tutorial006.py, highlighted line 12:\n# users_app = typer.Typer(name=\"exp-users\", help=\"Explicit help.\")\nusers_app = typer.Typer(name=\"exp-users\", help=\"Explicit help.\")\n```\n\n----------------------------------------\n\nTITLE: Joining Paths with Pathlib (Python)\nDESCRIPTION: This Python snippet illustrates the use of the division operator (`/`) with a `pathlib.Path` object to concatenate path components. It shows how a `Path` object can be joined with a string representation of a filename or directory, automatically handling system-specific path separators to create a new `Path` object.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/app-dir.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nPath(app_dir) / \"config.json\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in the Virtual Environment - Console\nDESCRIPTION: After activating your virtual environment, this command upgrades 'pip' to its latest version. It uses the Python interpreter from the environment and installs the update locally, resolving many installation issues for other packages. Recommended immediately after environment creation.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install --upgrade pip\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Defining a Top-Level Typer Command in a Separate File\nDESCRIPTION: This snippet shows how to create a self-contained Typer application instance in a separate Python file dedicated to a specific top-level command (like 'version'). This app can then be added to a main application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/one-file-per-command.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\nversion_app = typer.Typer()\n\n@version_app.command()\ndef version():\n    typer.echo(\"My CLI Version 1.0\")\n```\n\n----------------------------------------\n\nTITLE: Embedding a Click Command within a Typer App\nDESCRIPTION: Shows how to include a standard Click command within a Typer application. It defines a Typer app with a callback (to ensure it generates a Click Group), retrieves the corresponding Click object using `typer.main.get_command(app)`, and then adds an existing Click command (`hello`) to this group using the `add_command` method.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/using-click.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nimport click\n\n\n@click.command()\n@click.option(\"--name\", default=\"World\", help=\"The person to greet.\")\ndef hello(name: str):\n    \"\"\"Simple program that greets NAME.\"\"\"\n    print(f\"Hello {name}!\")\n\n\napp = typer.Typer()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Typer app with a callback.\n    \"\"\"\n\n\n@app.command()\ndef top():\n    \"\"\"\n    The Typer app is at the top level.\n    \"\"\"\n    print(\"The Typer app is at the top level\")\n\n\ntyper_click_object = typer.main.get_command(app)\n\ntyper_click_object.add_command(hello, \"hello\")\n\n\nif __name__ == \"__main__\":\n    typer_click_object()\n```\n\n----------------------------------------\n\nTITLE: Verifying Fixed Typer Shell Completion\nDESCRIPTION: Shows the console output after applying the `typer.Context` fix. Tab completion (`--[TAB][TAB]`) now works correctly, displaying the available options without errors. Normal execution still includes the \"Validating name\" message as expected.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_6\n\nLANGUAGE: Console\nCODE:\n```\n$ typer ./main.py run --[TAB][TAB]\n\n// Now it works correctly üéâ\n--help  -- Show this message and exit.\n--name\n\n// And you can call it normally\n$ typer ./main.py run --name Camila\n\nValidating name\nHello Camila\n```\n\n----------------------------------------\n\nTITLE: Running App Directory Example (Console)\nDESCRIPTION: This console snippet demonstrates the output when executing the Python script that retrieves the application directory. It shows the message printed to the standard output when the configuration file, whose path is derived using `typer.get_app_dir()` and `pathlib.Path`, does not exist in the designated directory.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/app-dir.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py\n\nConfig file doesn't exist yet\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment Using venv - Console\nDESCRIPTION: This snippet demonstrates creating a Python virtual environment in the current project directory using the 'venv' module. The command requires Python installed and creates a local '.venv' directory to contain all isolated dependencies. Run this once per project from within your project directory.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Running Typer App with Callback Validation\nDESCRIPTION: Shows the console output when running the Typer script. The first command succeeds because the name is 'Camila'. The second command fails with a `BadParameter` error because the name 'Rick' triggers the validation exception in the callback.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/callback-and-context.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py --name Camila\n\nHello Camila\n\n$ python main.py --name Rick\n\nUsage: main.py [OPTIONS]\n\n// We get the error from the callback\nError: Invalid value for '--name': Only Camila is allowed\n```\n\n----------------------------------------\n\nTITLE: Python Executable Path in Virtual Environment (Windows) (Plaintext)\nDESCRIPTION: This snippet gives the example path to the Python executable within a virtual environment on Windows platforms after activation. This demonstrates the location and precedence of the venv‚Äôs Python interpreter in the PATH. Illustrative only; not meant for direct execution.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Defining a CLI Option with Only a Short Name\nDESCRIPTION: This snippet illustrates how to configure a CLI option to use *only* a short name.  By passing just the short name to `typer.Option()`, the default long name is overridden.  Dependencies: Typer.  Input: The short name of the option.  Output:  The option is only available via its short name.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/name.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[Optional[str], typer.Option(\"-n\")] = None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running the `multiapp sub hello` Command\nDESCRIPTION: Details the execution of the `hello` subcommand within the `sub` group, which is used to 'Say Hello'. It accepts optional parameters: `--name` (a text value defaulting to 'World') and `--age` (an integer value defaulting to 0).\nSOURCE: https://github.com/fastapi/typer/blob/master/tests/assets/cli/multiapp-docs.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub hello [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Intentional TypeError in Python CLI App\nDESCRIPTION: This snippet demonstrates a common mistake where a string and integer are concatenated without explicit conversion, resulting in a TypeError at runtime. It is part of a script that uses Typer to create CLI commands and highlights the importance of data type handling.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/exceptions.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nprint(name + 3)\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Typer Callback with Decorator - Typer - Python\nDESCRIPTION: Demonstrates defining a callback function for a Typer sub-application using the `@app.callback()` decorator. This callback executes before any commands within the sub-application, allowing for common setup or parameter handling. The docstring provides the help text for the sub-command group.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/callback-override.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.callback()\ndef main():\n    \"\"\"\n    Manage users.\n    \"\"\"\n    print(\"Running a users command\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Autocompletion Candidates Based On Incomplete CLI Input in Typer Using Python\nDESCRIPTION: Illustrates modifying the completion function to accept an input string representing the incomplete text typed by the user. The function returns only those completion candidates matching the input prefix, improving usability by filtering irrelevant completions. The snippet requires defining a single string parameter (incomplete) and returning a filtered list of strings starting with that prefix. This effectively narrows down possible completions dynamically.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options-autocompletion.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef complete_name(incomplete: str):\n    options = [\"Camila\", \"Carlos\", \"Sebastian\"]\n    return [option for option in options if option.startswith(incomplete)]\n```\n\n----------------------------------------\n\nTITLE: Sample requirements.txt File for Python Dependencies\nDESCRIPTION: This example represents a 'requirements.txt' file specifying package dependencies and their exact versions ('typer' and 'rich'). Used for deterministic installation across different environments with pip or compatible tools. Place in your project root.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_14\n\nLANGUAGE: requirements.txt\nCODE:\n```\ntyper==0.13.0\nrich==13.7.1\n```\n\n----------------------------------------\n\nTITLE: Running a Python Program Using the Virtual Environment - Console\nDESCRIPTION: This command runs 'main.py' using the Python interpreter from the active virtual environment. Ensures the program uses the isolated environment's packages and settings. Output will include standard program output, here showing 'Hello World'.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nHello World\n```\n\n----------------------------------------\n\nTITLE: Defining version-constrained dependencies for Python project\nDESCRIPTION: Lists required Python packages with version constraints for the fastapi/typer project. The dependencies include GitHub API client, data validation library, HTTP client, and a visualization tool.\nSOURCE: https://github.com/fastapi/typer/blob/master/requirements-github-actions.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGithub>=2.3.0,<3.0.0\npydantic>=2.5.3,<3.0.0\npydantic-settings>=2.1.0,<3.0.0\nhttpx>=0.27.0,<0.29.0\nsmokeshow\n```\n\n----------------------------------------\n\nTITLE: Verify Virtual Environment Activation on Windows PowerShell - Console\nDESCRIPTION: This PowerShell command checks which 'python' executable is being used to ensure the virtual environment is active. If the result points to '.venv\\Scripts\\python' inside your project path, your virtual environment is in use.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: CLI Option with Short Name and Default Long Name\nDESCRIPTION: This code shows how to define a CLI option with its default long name and also a short name.  Dependencies: Typer. Input: the original long name and the short name.  Output: Both the default long name and the short name can be used to pass the option.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/name.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[Optional[str], typer.Option(\"--user-name\", \"-n\")] = None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Declaring a Boolean CLI Flag in Typer (Python)\nDESCRIPTION: Shows how to declare a boolean flag (e.g., `--force`) for a Typer CLI application using standard Python type hints. Typer interprets this type hint to create a command-line flag that is true if present and false otherwise.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nforce: bool\n```\n\n----------------------------------------\n\nTITLE: Generating Typer Docs with the Typer Command\nDESCRIPTION: Uses the `typer` command with the `utils docs` subcommand to automatically generate Markdown documentation for a specified Typer application script or module. This command helps document the CLI structure, commands, options, and help text.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ typer some_script.py utils docs\n\n$ typer my_package.main utils docs --name awesome-cli --output README.md\n\nDocs saved to: README.md\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Implicit Typer Command (Python)\nDESCRIPTION: This snippet shows a Python script that defines a function (`main`) intended to be a Typer command but does not explicitly create or use a `typer.Typer()` instance within this file.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport typer #hl\n\ndef main(name: str = \"World\"): #hl\n    \"Say hi to NAME.\" #hl\n    print(f\"Hello {name}\") #hl\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Default String in Typer Option Help in Python\nDESCRIPTION: Shows how to display a custom string instead of the actual default value in the help text for a Typer CLI option by providing a string value to the `show_default` parameter within `typer.Option`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/help.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nfrom typing_extensions import Annotated # Or typing for newer Python\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    fullname: Annotated[str, typer.Option(help=\"Full name of person to greet.\", show_default=\"(Deadpoolio the amazing's name)\")] = \"Wade Wilson\"\n):\n    # ... function body ...\n    pass # Simplified\n```\n\n----------------------------------------\n\nTITLE: Executing Typer App with Prompt (Console)\nDESCRIPTION: This console snippet shows how to run the Typer application that includes a prompt. It demonstrates the interactive nature where the user provides input (`camila@example.com`) when requested by the application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/testing.md#_snippet_7\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py Camila\n\n# Email: $ camila@example.com\n\nHello Camila, your email is: camila@example.com\n```\n\n----------------------------------------\n\nTITLE: Install Typer via pip\nDESCRIPTION: This code snippet demonstrates the installation of the Typer library using pip.  It shows the command executed in the terminal to install the necessary package.  It also indicates the successful installation of typer and its dependencies like rich and shellingham.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install typer\n---> 100%\nSuccessfully installed typer rich shellingham\n```\n\n----------------------------------------\n\nTITLE: Hiding Default Value in Typer Option Help in Python\nDESCRIPTION: Explains how to prevent the default value of a Typer CLI option from being displayed in the help text by setting the `show_default` parameter to `False` within `typer.Option`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/help.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nfrom typing_extensions import Annotated # Or typing for newer Python\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    fullname: Annotated[str, typer.Option(help=\"Full name of person to greet.\", show_default=False)] = \"Wade Wilson\"\n):\n    # ... function body ...\n    pass # Simplified\n```\n\n----------------------------------------\n\nTITLE: Running Typer Launch Examples (Console)\nDESCRIPTION: Provides the console commands used to execute the Python examples demonstrating the `typer.launch` functionality. These commands show how to run the Typer application scripts and observe the resulting actions (opening a browser or a file explorer).\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/launch.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nOpening Typer docs\n\n// Opens browser with Typer's docs\n```\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nOpening config directory\n\n// Opens a file browser indicating where the config file is located\n```\n\n----------------------------------------\n\nTITLE: Overriding an Initialization Typer Callback (Python)\nDESCRIPTION: Illustrates how to override a callback previously defined during `typer.Typer()` initialization. By applying the `@app.callback()` decorator to a new function (`new_callback`), the application will use this new function instead of the one provided during initialization.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\ndef main_callback():\n    print(\"Main callback, running a command\")\n\n\napp = typer.Typer(callback=main_callback)\n\n\n@app.callback()\ndef new_callback():\n    \"\"\"\n    Manage users CLI app.\n    \"\"\"\n    print(\"Override callback, running a command\")\n\n\n@app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Default Typer Command Name Generation (Python)\nDESCRIPTION: Illustrates Typer's default behavior for command name generation. A function name like `create` becomes the command `create`. Underscores in the function name, like `create_user`, are automatically converted to dashes, resulting in the command `create-user`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/name.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef create(username: str):\n    ...\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef create_user(username: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Typer Option Help with Default Value in Python\nDESCRIPTION: Shows how to add a help text to a Typer CLI option using the `help` parameter within `typer.Option` when defining the option using the parameter's default value directly. This is an alternative to using `Annotated`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/options/help.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlastname: str = typer.Option(default=\"\", help=\"this option does this and that\")\n```\n\n----------------------------------------\n\nTITLE: Running a Typer Script Directly with Python\nDESCRIPTION: Shows how to execute a Python script containing a Typer application directly using the `python` interpreter. Arguments and options are passed after the script name. This method does not provide command completion.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python my_custom_script.py hello\n\nHello World!\n\n$ python my_custom_script.py hello --name Camila\n\nHello Camila!\n\n$ python my_custom_script.py bye --name Camila\n\nBye Camila\n```\n\n----------------------------------------\n\nTITLE: Running Typer as a Module\nDESCRIPTION: Executes the Typer command-line tool by running the installed Typer module directly with Python. This method works even if `typer` is not in the system's PATH, for example, when using `typer-slim`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m typer\n```\n\n----------------------------------------\n\nTITLE: Examining PATH Environment Variable Before Virtualenv Activation (Linux/macOS) (Plaintext)\nDESCRIPTION: This snippet shows an example of the PATH environment variable before activating a Python virtual environment on Linux or macOS. The string contains standard system binary directories. It demonstrates the default system path order used to resolve executables such as Python. No code execution; purely illustrative system context.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/virtual-environments.md#_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/bin:/bin:/usr/sbin:/sbin\n```\n\n----------------------------------------\n\nTITLE: Installing Completion for CLI Program\nDESCRIPTION: This command installs shell completion for the `rick-portal-gun` program using the program's built-in completion support, which installs the completion script to the user's shell configuration file (e.g., `~/.zshrc`). The output informs the user about the successful installation and the need to restart the terminal for the changes to take effect.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ rick-portal-gun --install-completion\n\nzsh completion installed in /home/rick/.zshrc.\nCompletion will take effect once you restart the terminal.\n```\n\n----------------------------------------\n\nTITLE: Example PATH Environment Variable Content\nDESCRIPTION: Provides examples of the structure and content of the `PATH` environment variable, showing lists of directories where the operating system searches for executable programs. Demonstrates the different separators used on Linux/macOS (colon) and Windows (semicolon).\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/environment-variables.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n```\n\n----------------------------------------\n\nTITLE: Printing to Standard Error with Rich Console\nDESCRIPTION: Shows how to create a Rich Console with stderr=True to output messages on standard error stream, useful for debugging or error reporting.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nHere is something written to standard error\n```\n\n----------------------------------------\n\nTITLE: Sample Simple Function Script for Typer Run\nDESCRIPTION: A Python script containing a simple function that can be executed as a command-line application using `typer run`, even though the script itself doesn't import or use the Typer library explicitly within its definition.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef main(name: str = \"World\"):\n    \"\"\"\n    Say hi to someone, by default to the World.\n    \"\"\"\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with pip\nDESCRIPTION: Installs the Typer library along with the `typer` command-line tool using pip. This is the standard way to get the full Typer functionality.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Installing the Typer Library via Pip\nDESCRIPTION: Shows the command `pip install typer` for installing the Typer library and its dependencies. This is the standard method to get the library ready for use in a virtual environment.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install typer\n---> 100%\nSuccessfully installed typer rich shellingham\n```\n\n----------------------------------------\n\nTITLE: Invoking Typer CLI with Completion - Shell (console)\nDESCRIPTION: This shell command runs the Typer demo application using the Typer CLI and triggers shell completion by pressing <TAB>. It illustrates how completion shows available app commands. Dependencies: Typer installed with completion. Input: user presses <TAB> after command. Output: lists available base commands: run, utils.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ typer demo.py <TAB>\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Scripts in pyproject.toml\nDESCRIPTION: TOML configuration for Poetry that defines the command-line entrypoint for the application.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_15\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Program Completion\nDESCRIPTION: This series of commands tests the shell completion setup for the CLI program, `rick-portal-gun`.  By typing `rick-portal-gun` followed by a tab, the user is prompted with the available commands, confirming that the shell completion feature is properly configured and that the program suggests command names when tab is pressed. The expected output shows the available commands for autocompletion.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ rick-portal-gun [TAB][TAB]\n\n// You get completion for your CLI program ‚ú®\nload   -- Load the portal gun\nshoot  -- Shoot the portal gun\n```\n\n----------------------------------------\n\nTITLE: Help for hello subcommand\nDESCRIPTION: This snippet shows the help output specific to the `hello` subcommand, showing the arguments it expects, which is only the name.\nSOURCE: https://github.com/fastapi/typer/blob/master/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py hello --help\n\n Usage: main.py hello [OPTIONS] NAME\n\n‚ï≠‚îÄ Arguments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ *    name      TEXT  [default: None] [required]   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚ï≠‚îÄ Options ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ --help          Show this message and exit.       ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n```\n\n----------------------------------------\n\nTITLE: Installing Typer for a Script Environment\nDESCRIPTION: Installs the Typer library using `python -m pip`, ensuring it's installed in the environment associated with the Python interpreter being used. This is shown in the context of setting up the environment to run the sample script.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/typer-command.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install typer\n---> 100%\nSuccessfully installed typer\n```\n\n----------------------------------------\n\nTITLE: Checking 'init' Command Help Output in Typer\nDESCRIPTION: Shows the console output for the `init` command's help message. It details the command's usage and any associated options, highlighting how Typer extracts and formats help information for simple commands.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n// Check the help for init\n$ python main.py init --help\n\nUsage: main.py init [OPTIONS]\n\n  Initialize the users database.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Version in pyproject.toml\nDESCRIPTION: TOML configuration showing how to update the package version in the project metadata file.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_16\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.2.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez <rick@example.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ntyper = \"^0.12.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Checking Main Application Help Output in Typer\nDESCRIPTION: Demonstrates the console output when requesting help for the main Typer application. It shows the overall usage syntax, available global options, and a list of registered commands along with their brief descriptions derived from docstrings or help parameters.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/help.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n// Check the new help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Awesome CLI user manager.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create      Create a new user with USERNAME.\n  delete      Delete a user with USERNAME.\n  delete-all  Delete ALL users in the database.\n  init        Initialize the users database.\n```\n\n----------------------------------------\n\nTITLE: Exiting the Current Shell - Shell (console)\nDESCRIPTION: This shell command cleanly exits the current shell session. Used after installing completion so a new shell can be started to load completion configurations. Dependencies: none. Input: none. Output: session terminated.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ exit\n```\n\n----------------------------------------\n\nTITLE: Verifying Custom Typer Command Names in Console\nDESCRIPTION: Displays the console output when running the Typer application with custom command names defined via the `@app.command()` decorator. It shows the `--help` output listing the custom command names (`create`, `delete`) and demonstrates executing the `create` command, confirming the names are derived from the decorator arguments, not the function names.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/name.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test it\n$ python main.py create Camila\n\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: Checking Installed CLI Program\nDESCRIPTION: This command checks if the created CLI program, `rick-portal-gun`, is accessible in the current environment by using the `which` command. It shows the path where the CLI executable is located, confirming that it's in the environment created by Poetry. The output displays the path to the CLI executable.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/package.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ which rick-portal-gun\n\n```\n\n----------------------------------------\n\nTITLE: Executing Typer App with Overridden Callback (Console)\nDESCRIPTION: Demonstrates the console output of a Typer app where the initialization callback has been overridden using the `@app.callback()` decorator. The output confirms that the message from the `new_callback` function is printed, not the original `main_callback`.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/commands/callback.md#_snippet_5\n\nLANGUAGE: Console\nCODE:\n```\n$ python main.py create Camila\n\n// Notice that the message is the one from new_callback()\nOverride callback, running a command\nCreating user: Camila\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Live Server with script - Shell (console)\nDESCRIPTION: This command launches the documentation live server by running the provided Python script, which watches for changes and serves the documentation on a local URL. Dependencies: python, scripts/docs.py, documentation requirements. Input: none. Output: docs live at http://127.0.0.1:8008.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py live\n```\n\n----------------------------------------\n\nTITLE: Adding and Naming Command Groups in Typer Python CLI Apps (Pre-0.14.0 Behavior)\nDESCRIPTION: This Python snippet demonstrates how Typer CLI apps previously inferred the group name for subcommands from the callback function's name when using add_typer. The users_app is added to the main app without specifying a name, allowing 'users' to be inferred from the callback def users(). The snippet depends on the Typer library and initializes separate Typer instances for the app and users_app. The callback function provides group-level help, and the command function 'create' takes a required 'name' parameter to print a message. Input is taken from the command line, and the group name is automatically set based on the users() function.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/release-notes.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\n\napp.add_typer(users_app)\n\n\n@users_app.callback()\ndef users():  # <-- This was the inferred command group name\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Illustrating Git Subcommands with Console Output\nDESCRIPTION: This console output block demonstrates the concept of command groups and subcommands using the `git remote` command. It shows how `git remote` itself is a command group with subcommands like `add`, illustrating how nested functionality works in CLI tools.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/subcommands/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n// git remote alone shows the current remote repositories\n$ git remote\n\norigin\n\n// Use -v to make it verbose and show more info\n$ git remote -v\n\norigin  git@github.com:yourusername/typer.git (fetch)\norigin  git@github.com:yourusername/typer.git (push)\n\n// git remote add takes 2 CLI arguments, a name and URL\n$ git remote add upstream https://github.com/fastapi/typer.git\n\n// Doesn't output anything, but now you have another remote repository called upstream\n\n// Now check again\n$ git remote -v\n\norigin  git@github.com:yourusername/typer.git (fetch)\norigin  git@github.com:yourusername/typer.git (push)\nupstream        https://github.com/fastapi/typer.git (fetch)\nupstream        https://github.com/fastapi/typer.git (push)\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements with pip - Shell (console)\nDESCRIPTION: This shell command installs all dependencies listed in 'requirements.txt' using pip within the currently activated virtual environment. It must be run after activating the development environment. This step installs Typer in editable mode as defined by the requirements file. Inputs: none. Outputs: installs Python packages relative to project requirements.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using Standard print() for Output in Python\nDESCRIPTION: Demonstrates simple use of Python's built-in print() function to display information on the terminal without additional formatting or styling.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/tutorial/printing.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nHello World\n```\n\n----------------------------------------\n\nTITLE: Formatting and Sorting Imports with format.sh - Bash (console)\nDESCRIPTION: This shell command runs a formatting script located at 'scripts/format.sh'. The script automatically formats code and sorts imports using predefined project tools. Dependencies: Bash, the formatting tools defined by the project (usually black, isort, etc.). Inputs: none. Outputs: reformatted codebase.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/format.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Private Git Dependencies using pip's VCS Support\nDESCRIPTION: Specifies project dependencies to be installed directly from private Git repositories using pip's Version Control System (VCS) support format. It lists specific commits or tags for MkDocs Material Insiders, a Griffe typing extension, and the mkdocstrings Python handler. Access requires an environment variable `${TOKEN}` containing a valid authentication token (e.g., a GitHub Personal Access Token).\nSOURCE: https://github.com/fastapi/typer/blob/master/requirements-docs-insiders.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\ngit+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11\ngit+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git\ngit+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n```\n\n----------------------------------------\n\nTITLE: Running Typer Docker Compose Bash Session - Shell (console)\nDESCRIPTION: This command starts an interactive bash session inside the Typer Docker container using docker-compose. The container includes all needed shells and editors to test completion. Dependencies: Docker, docker-compose, a valid docker-compose.yaml in the directory. Input: none. Output: shell access inside container, with project code mounted.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run typer bash\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Docker Scripts - Shell (console)\nDESCRIPTION: This shell command changes the working directory to './scripts/docker/', preparing the environment for Docker-based development or testing tasks. No dependencies beyond standard shell. Required input: none. Output: working directory is './scripts/docker/'.\nSOURCE: https://github.com/fastapi/typer/blob/master/docs/contributing.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd scripts/docker/\n```"
  }
]