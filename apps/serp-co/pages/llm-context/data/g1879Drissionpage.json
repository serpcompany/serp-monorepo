[
  {
    "owner": "g1879",
    "repo": "drissionpage",
    "content": "TITLE: Multi-threaded Web Scraping Using DrissionPage and ChromiumPage\nDESCRIPTION: Python script that implements multi-threaded web scraping using DrissionPage to control multiple browser tabs. It scrapes repository names from Gitee's explore pages and saves them to a CSV file using a DataRecorder.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/demos/multithreading_with_tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Thread\n\nfrom DrissionPage import ChromiumPage\nfrom DataRecorder import Recorder\n\n\ndef collect(tab, recorder, title):\n    \"\"\"Method used for web scraping\n    :param tab: ChromiumTab object\n    :param recorder: Recorder object\n    :param title: Category title\n    :return: None\n    \"\"\"\n    num = 1  # Current page number being scraped\n    while True:\n        # Traverse all title elements\n        for i in tab.eles('.title project-namespace-path'):\n            # Obtain the names of all repositories on a certain page and record them in the recorder\n            recorder.add_data((title, i.text, num))\n\n        # If there is a next page, click on it\n        btn = tab('@rel=next', timeout=2)\n        if btn:\n            btn.click(by_js=True)\n            tab.wait.load_start()\n            num += 1\n\n        # Otherwise, scraping is finished\n        else:\n            break\n\n\ndef main():\n    # Create a page object\n    page = ChromiumPage()\n    # First tab visits the URL\n    page.get('https://gitee.com/explore/ai')\n    # Get the first tab object\n    tab1 = page.get_tab()\n    # Create a new tab and visit another URL\n    tab2 = page.new_tab('https://gitee.com/explore/machine-learning')\n    # Get the second tab object\n    tab2 = page.get_tab(tab2)\n\n    # Create a recorder object\n    recorder = Recorder('data.csv')\n\n    # Use multiple threads to process multiple pages simultaneously\n    Thread(target=collect, args=(tab1, recorder, 'ai')).start()\n    Thread(target=collect, args=(tab2, recorder, 'Machine Learning')).start()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Collecting Repository Data with DrissionPage SessionPage\nDESCRIPTION: Python script that uses DrissionPage's SessionPage to crawl Gitee's explore pages and collect repository information. It iterates through 3 pages and extracts repository names and links using CSS selectors.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/examples/data_packets.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\n# Create a page object\npage = SessionPage()\n\n# Crawl 3 pages\nfor i in range(1, 4):\n    # Visit a specific page\n    page.get(f'https://gitee.com/explore/all?page={i}')\n    # Get a list of all repository <a> elements\n    links = page.eles('.title project-namespace-path')\n    # Iterate through all <a> elements\n    for link in links:\n        # Print link information\n        print(link.text, link.link)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File Using DrissionPage in Python\nDESCRIPTION: This code snippet demonstrates how to use DrissionPage to download a file from a specified URL and save it to a local directory. It utilizes the WebPage class and its download method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/features_demos/download_file.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\n\npage = WebPage('s')\npage.download(url, save_path)\n```\n\n----------------------------------------\n\nTITLE: Accessing Web Pages with get() Method in DrissionPage\nDESCRIPTION: Demonstrates how to create a SessionPage instance and use the get() method to access a web page. This basic example shows the simplest form of web page access with DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/visit_web_page.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.get('http://g1879.gitee.io/drissionpage')\n```\n\n----------------------------------------\n\nTITLE: Browser Control with ChromiumPage\nDESCRIPTION: Demonstrates basic browser automation using ChromiumPage to interact with Baidu's search functionality.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\n# Create a page object\npage = ChromiumPage()\n# Control the browser to visit Baidu\npage.get('https://www.baidu.com')\n# Locate the input box and enter the keyword\npage.ele('#kw').input('DrissionPage')\n# Click the \"百度一下\" button\npage.ele('@value=百度一下').click()\n```\n\n----------------------------------------\n\nTITLE: Performing Baidu Search with ChromiumPage in Python\nDESCRIPTION: Demonstrates basic usage of ChromiumPage to automate a search on Baidu.com. The script creates a browser instance, navigates to Baidu, performs a search for 'DrissionPage', and extracts search results. Shows core functionality including page navigation, element interaction, and text extraction.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import\nfrom DrissionPage import ChromiumPage\n\n# Create an object\npage = ChromiumPage()\n# Access the web page\npage.get('https://www.baidu.com')\n# Enter text\npage('#kw').input('DrissionPage')\n# Click the button\npage('#su').click()\n# Wait for page redirection\npage.wait.load_start()\n# Get all results\nlinks = page.eles('tag:h3')\n# Traverse and print the results\nfor link in links:\n    print(link.text)\n```\n\n----------------------------------------\n\nTITLE: Switching Between Browser and Packet Modes in DrissionPage\nDESCRIPTION: This code demonstrates how to start by controlling a browser to search for 'DrissionPage' on Gitee.com, then switch to packet mode to efficiently extract search results. The example shows how to find elements, interact with them, and extract data after switching modes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/examples/switch_mode.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\n# Create a page object\npage = WebPage()\n# Access the URL\npage.get('https://gitee.com/explore')\n# Find the text box element and enter the keyword\npage('#q').input('DrissionPage')\n# Click the search button\npage('t:button@tx():搜索').click()\n# Wait for the page to load\npage.wait.load_start()\n# Switch to packet mode\npage.change_mode()\n# Get all row elements\nitems = page('#hits-list').eles('.item')\n# Traverse the retrieved elements\nfor item in items:\n    # Print the element's text\n    print(item('.title').text)\n    print(item('.desc').text)\n    print()\n```\n\n----------------------------------------\n\nTITLE: Automating Gitee Login with DrissionPage in Python\nDESCRIPTION: This code demonstrates how to automate login to Gitee using DrissionPage's ChromiumPage class. The script locates the login form elements using their id attributes, enters credentials, and clicks the login button using a text-based selector. It showcases basic web automation techniques for authentication processes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/demos/login_gitee.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\n# Create a page object in 'd' mode (default mode)\npage = ChromiumPage()\n# Navigate to the login page\npage.get('https://gitee.com/login')\n\n# Locate the account input box and enter the account\npage.ele('#user_login').input('Your account')\n# Locate the password input box and enter the password\npage.ele('#user_password').input('Your password')\n\n# Click the login button\npage.ele('@value=登 录').click()\n```\n\n----------------------------------------\n\nTITLE: DrissionPage Object Relationship Structure\nDESCRIPTION: Displays the hierarchical relationship between different objects in the DrissionPage framework.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n├─ SessionPage\n|     └─ SessionElement\n|           └─ SessionElement\n├─ ChrmoiumPage\n|     ├─ ChromiumTab\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumFrame\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumElement\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     └─ ChromiumShadowElement\n|           └─ ChromiumElement\n|           └─ SessionElement\n├─ WebPage\n|     ├─ ChromiumTab\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumFrame\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumElement\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumShadowElement\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     └─ SessionElement\n|           └─ SessionElement\n├─ SessionOptions\n└─ ChrmoiumOptions\n```\n\n----------------------------------------\n\nTITLE: Basic URL Navigation in DrissionPage\nDESCRIPTION: Demonstrates how to navigate to a URL using the get() method. The method includes retry logic for failed connections.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npage.get('https://www.baidu.com')\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements with DrissionPage in Python\nDESCRIPTION: Demonstrates different ways to click on elements using the click() method, including simulated clicks and JavaScript-based clicks. It also shows how to handle click failures globally.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Simulate clicking on the element ele, click if obstructed\nele.click()\n\n# Click the element ele with JS, regardless of any coverings\nele.click(by_js=True)\n\n# If the element is not obstructed, simulate clicking, otherwise click with JS\nele.click(by_js=None)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Settings\n\nSettings.raise_click_failed = True\nele.click()  # Throw an exception if unable to click\n```\n\n----------------------------------------\n\nTITLE: Element Manipulation with ChromiumElement\nDESCRIPTION: Shows common operations that can be performed with ChromiumElement objects including clicking, text input, and attribute manipulation.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get the element object with ID 'kw'\nele = page('#kw')\n# Click the element\nele.click()\n# Enter text\nele.input('some text')\n# Get the class attribute\nattr = ele.attr('class')\n# Set the style attribute\nele.set.attr('style', 'display:none;')\n# Get all the 'a' elements among its sub-elements\nlinks = ele.eles('tag:a')\n```\n\n----------------------------------------\n\nTITLE: Screen Recording with DrissionPage in Python\nDESCRIPTION: Example showing how to record a browser screen with DrissionPage, including setting the save path, configuring the recording mode, starting the recording, and stopping it after a delay.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/screen_recording.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.screencast.set_save_path('video')  # Set the video save path\npage.screencast.set_mode.video_mode()  # Set the recording mode\npage.screencast.start()  # Start recording\nsleep(3)\npage.screencast.stop()  # Stop recording\n```\n\n----------------------------------------\n\nTITLE: Sending POST Requests with DrissionPage\nDESCRIPTION: Shows how to use the post() method to send data to a web server. The example demonstrates both data and JSON parameter usage for sending form data or JSON payloads.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/visit_web_page.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\ndata = {'username': 'xxxxx', 'pwd': 'xxxxx'}\n\npage.post('http://example.com', data=data)\n# Or\npage.post('http://example.com', json=data)\n```\n\n----------------------------------------\n\nTITLE: Creating ChromiumPage Object Directly - Python\nDESCRIPTION: Simplest method to create a ChromiumPage object using default configuration from ini file.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromiumPage and Testing Browser Control\nDESCRIPTION: Basic code to create a ChromiumPage instance and test browser control by accessing the documentation website.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/before_start.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('http://g1879.gitee.io/DrissionPageDocs')\n```\n\n----------------------------------------\n\nTITLE: Automating Gitee Login with DrissionPage\nDESCRIPTION: This code demonstrates how to use ChromiumPage to automate a login process on Gitee. It navigates to the login page, locates input fields using selectors, enters credentials, and clicks the login button.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/examples/control_browser.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\n# Create a page object and start or take over the browser\npage = ChromiumPage()\n# Navigate to the login page\npage.get('https://gitee.com/login')\n\n# Locate the username textbox and get the element\nele = page.ele('#user_login')\n# Input the account into the textbox\nele.input('Your account')\n# Locate the password textbox and input the password\npage.ele('#user_password').input('Your password')\n# Click the login button\npage.ele('@value=登录').click()\n```\n\n----------------------------------------\n\nTITLE: Scraping Maoyan Movie Rankings with DrissionPage and DataRecorder in Python\nDESCRIPTION: This Python script uses DrissionPage to navigate and interact with the Maoyan movie rankings website. It iterates through movie entries, extracts relevant information, and saves it using a DataRecorder object. The script handles pagination by clicking the 'Next' button until all pages are processed.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/demos/maoyan_TOP100.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom DataRecorder import Recorder\n\n# Create page object\npage = ChromiumPage()\n# Create recorder object\nrecorder = Recorder('data.csv')\n# Access web page\npage.get('https://www.maoyan.com/board/4')\n\nwhile True:\n    # Iterate through all dd elements on the page\n    for mov in page.eles('t:dd'):\n        # Get the required information\n        num = mov('t:i').text\n        score = mov('.score').text\n        title = mov('@data-act=boarditem-click').attr('title')\n        star = mov('.star').text\n        time = mov('.releasetime').text\n        # Write to the recorder\n        recorder.add_data((num, title, star, time, score))\n\n    # Get the next page button, if it exists, click it\n    btn = page('下一页', timeout=2)\n    if btn:\n        btn.click()\n        page.wait.load_start()\n    # Exit the program if it doesn't exist\n    else:\n        break\n\nrecorder.record()\n```\n\n----------------------------------------\n\nTITLE: Handling Alert Messages in DrissionPage (Python)\nDESCRIPTION: Shows various ways to handle alert messages using the handle_alert() method, including confirming alerts, canceling alerts, entering text for prompt boxes, and retrieving alert text without processing.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Confirm the alert and get the text content of the alert\ntxt = page.handle_alert()\n\n# Click cancel\npage.handle_alert(accept=False)\n\n# Enter text for the prompt box and click OK\npage.handle_alert(accept=True, send='some text')\n\n# Do not process the message box, just get the text content of the message box\ntxt = page.handle_alert(accept=None)\n```\n\n----------------------------------------\n\nTITLE: Chained Element Selection\nDESCRIPTION: Demonstrates chained element selection operations to simplify element location code.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nele = page.ele('#s_fm').ele('#su')\n```\n\n----------------------------------------\n\nTITLE: Downloading Book Cover Images from Douban Using DrissionPage in Python\nDESCRIPTION: This Python script uses DrissionPage to scrape book cover images from Douban's website. It navigates through 4 pages of books, finds each book's cover image element using CSS selectors, and saves these images directly to a local 'imgs' folder using the element's save() method. The script also demonstrates automatic pagination by clicking the 'next page' button.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/demos/douban_book_pics.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\n# Create a page object\npage = ChromiumPage()\n# Visit the target webpage\npage.get('https://book.douban.com/tag/小说?start=0&type=T')\n\n# Scrape 4 pages\nfor _ in range(4):\n    # Iterate through all the books on a single page\n    for book in page.eles('.subject-item'):\n        # Get the cover image object\n        img = book('t:img')\n        # Save the image\n        img.save(r'.\\imgs')\n\n    # Click the next page\n    page('后页>').click()\n    page.wait.load_start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Settings with ChromiumOptions in Python\nDESCRIPTION: This snippet shows how to adjust browser settings using the ChromiumOptions object and pass it to a WebPage object for initialization.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage, ChromiumOptions\n\n# Creating the configuration object (reading configurations from an ini file by default)\nco = ChromiumOptions()\n# Setting not to load images and mute\nco.no_imgs(True).mute(True)\n\n# Creating the page object with this configuration\npage = WebPage(chromium_options=co)\n```\n\n----------------------------------------\n\nTITLE: Cookie Management\nDESCRIPTION: Demonstrates various ways to set cookies using different data formats including lists, tuples, strings, and dictionaries.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# It can accept multiple types of parameters\ncookies1 = ['name1=value1', 'name2=value2'],\ncookies2 = ('name1=value1', 'name2=value2', 'secure')\ncookies3 = 'name1=value1; name2=value2; path=/; domain=.example.com; secure'\ncookies4 = {'name1': 'value1', 'name2': 'value2'}\npage.set_cookies(cookies1)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Download Progress in Python\nDESCRIPTION: Example showing how to track download progress in real-time using a DownloadMission object. The code prints the download percentage continuously until the download is complete.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmission = page.wait.download_begin()\n\nwhile not mission.is_done:\n    print(f'\\r{mission.rate}%', end='')\n```\n\n----------------------------------------\n\nTITLE: Basic Element Selection with DrissionPage\nDESCRIPTION: Demonstrates basic usage of the ele() method to find elements using SessionPage. Shows how to find elements both at page level and within other elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\n\n# Find an element within the page\nele1 = page.ele('#one')\n\n# Find a descendant element within ele1\nele2 = ele1.ele('The second row')\n\n```\n\n----------------------------------------\n\nTITLE: Logging in and Switching Modes with DrissionPage in Python\nDESCRIPTION: This snippet demonstrates logging into Gitee.com using DrissionPage's WebPage object in browser mode, then switching to requests mode for faster page access. It includes steps for entering credentials, submitting the login form, and verifying successful login.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/features_demos/switch_mode.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\nfrom time import sleep\n\n# Create a page object with the default d mode\npage = WebPage()  \n# Visit the personal center page (not logged in, redirect to the login page)\npage.get('https://gitee.com/profile')  \n\n# Enter the account password to log in\npage.ele('@id:user_login').input('your_user_name')  \npage.ele('@id:user_password').input('your_password\\n')\npage.wait.load_start()\n\n# Switch to the s mode\npage.change_mode()  \n# Output of session mode after login\nprint('Logged in title:', page.title, '\\n')  \n```\n\n----------------------------------------\n\nTITLE: Using Built-in Action Chains in DrissionPage 4.0\nDESCRIPTION: Demonstrates the usage of the new built-in action chains in DrissionPage 4.0. These chains automatically wait for page load completion before executing each operation.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage.actions.hold(ele).move(50).release()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element to Stop Moving in Python using DrissionPage\nDESCRIPTION: This code snippet demonstrates how to use the wait.stop_moving() method to wait for an element to stabilize before clicking on it. It's useful for handling dynamic elements that may be in motion when trying to interact with them.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Wait for element to stabilize\npage.ele('#button1').wait.stop_moving()\n# Click on the element\npage.ele('#button1').click()\n```\n\n----------------------------------------\n\nTITLE: Setting Advanced Browser Options with ChromiumOptions in Python\nDESCRIPTION: This example demonstrates how to set advanced browser options like incognito mode, headless mode, and no-sandbox mode using ChromiumOptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions, ChromiumPage\n\nco = ChromiumOptions()\nco.incognito()  # Incognito mode\nco.headless()  # Headless mode\nco.set_argument('--no-sandbox')  # No sandbox mode\npage = ChromiumPage(co)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Execution with Arguments\nDESCRIPTION: Demonstrates executing JavaScript code with argument passing to show an alert dialog.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Execute the JavaScript script by passing in the arguments, displaying a popup with the message Hello world!\npage.run_js('alert(arguments[0]+arguments[1]);', 'Hello', ' world!')\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Actions Attribute in DrissionPage\nDESCRIPTION: This snippet demonstrates how to use the built-in actions attribute of a ChromiumPage object to perform a series of actions such as moving the mouse, clicking, and typing.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://www.baidu.com')\npage.actions.move_to('#kw').click().type('DrissionPage')\npage.actions.move_to('#su').click()\n```\n\n----------------------------------------\n\nTITLE: Packet Capturing Example in Python with DrissionPage\nDESCRIPTION: Demonstrates the new packet capturing functionality using ChromiumPage's built-in listener to monitor and capture API requests. Uses timing for performance comparison.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom TimePinner import Pinner\nfrom pprint import pprint\n\npage = ChromiumPage()\npage.listen.start('api/getkeydata')  # Specify the listening target and start listening\npinner = Pinner(True, False)\npage.get('http://www.hao123.com/')  # Visit website\npacket = page.listen.wait()  # Wait for data packet\npprint(packet.response.body)  # Print the body of the data packet\npinner.pin('Time taken', True)\n```\n\nLANGUAGE: shell\nCODE:\n```\n{'hao123.new.shishi.bangdan.recom': [{'index': '1',\n                                      'pure_title': 'The first detained persons are transferred by Israel and Hamas'},\n                                     {'index': '2',\n                                      'pure_title': 'The French Foreign Minister laughed when he heard about the visa-free policy'},\n                                     ......\nTime taken: 3.3114853000151925\n```\n\n----------------------------------------\n\nTITLE: Scraping Gitee Projects with SessionPage\nDESCRIPTION: Example demonstrating how to use SessionPage to scrape recommended projects from Gitee's explore page. Shows initialization, page access, element selection, and data extraction.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import\nfrom DrissionPage import SessionPage\n# Create a page object\npage = SessionPage()\n# Access the webpage\npage.get('https://gitee.com/explore/all')\n# Find elements on the page\nitems = page.eles('t:h3')\n# Iterate through the elements\nfor item in items[:-1]:\n    # Get the <a> element under the current <h3> element\n    lnk = item('tag:a')\n    # Print the text and href attribute of the <a> element\n    print(lnk.text, lnk.link)\n```\n\nLANGUAGE: shell\nCODE:\n```\n七年觐汐/wx-calendar https://gitee.com/qq_connect-EC6BCC0B556624342/wx-calendar\nThingsPanel/thingspanel-go https://gitee.com/ThingsPanel/thingspanel-go\nAPITable/APITable https://gitee.com/apitable/APITable\nIndexea/ideaseg https://gitee.com/indexea/ideaseg\nCcSimple/vue-plugin-hiprint https://gitee.com/CcSimple/vue-plugin-hiprint\nwilliam_lzw/ExDUIR.NET https://gitee.com/william_lzw/ExDUIR.NET\nanolis/ancert https://gitee.com/anolis/ancert\ncozodb/cozo https://gitee.com/cozodb/cozo\n... (omitted)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies in Python using DrissionPage\nDESCRIPTION: Demonstrates how to retrieve cookies for the current page and iterate through them.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_page_info.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('http://www.baidu.com')\n\nfor i in page.get_cookies(as_dict=False):\n    print(i)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Download Example\nDESCRIPTION: Example showing how to wait for a download to begin after clicking a button.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npage('#download_btn').click()  # Click the button to trigger the download\npage.wait.download_begin()  # Wait for the download to start\n```\n\n----------------------------------------\n\nTITLE: POST Request Data Format Options in DrissionPage\nDESCRIPTION: Demonstrates the four different ways to pass data in POST requests using DrissionPage: string or dictionary format with either the data or json parameters, depending on server requirements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/visit_web_page.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Pass a string to the data parameter\npage.post(url, data='abc=123')\n\n# Pass a dictionary to the data parameter\npage.post(url, data={'abc': '123'})\n\n# Pass a string to the json parameter\npage.post(url, json='abc=123')\n\n# Pass a dictionary to the json parameter\npage.post(url, json={'abc': '123'})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tab with ChromiumPage in Python\nDESCRIPTION: Example of creating a new tab using ChromiumPage and operating it with the tab object. This demonstrates the basic workflow of tab creation and navigation.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\ntab = page.new_tab()  # Create a new tab and get the tab object\ntab.get('https://www.baidu.com')  # Operate the tab using the tab object\n```\n\n----------------------------------------\n\nTITLE: Managing Browser Downloads with ChromiumPage in Python\nDESCRIPTION: Shows how to configure and control browser download tasks using ChromiumPage. Includes setting download path, custom filename, and waiting for download completion.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.download_path('save_path')  # Set the file save path\npage.set.download_file_name('file_name')  # Set the renamed file name\npage('t:a').click()  # Click on a link that triggers a download\npage.wait.download_begin()  # Wait for the download to begin\npage.wait.downloads_done()  # Wait for the download to finish\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Loading in DrissionPage\nDESCRIPTION: Example demonstrating how to wait for a specific element to be loaded in the DOM before proceeding with subsequent actions. This prevents errors that might occur if the program tries to interact with elements that haven't loaded yet.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nele1.click()  # Click a certain element\npage.wait.ele_loaded('#div1')  # Wait for the element with id 'div1' to load\nele2.click()  # Proceed with the next step after the 'div1' element has finished loading\n```\n\n----------------------------------------\n\nTITLE: DrissionPage Default Configuration File Structure\nDESCRIPTION: Default content of the ini configuration file showing all available settings including paths, chromium options, session options, timeouts, proxies and other settings.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/ini_file.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[paths]\ndownload_path = \ntmp_path = \n\n[chromium_options]\naddress = 127.0.0.1:9222\nbrowser_path = chrome\narguments = ['--no-default-browser-check', '--disable-suggestions-ui', '--no-first-run', '--disable-infobars', '--disable-popup-blocking', '--disable-popup-blocking']\nextensions = []\nprefs = {'profile.default_content_settings.popups': 0, 'profile.default_content_setting_values': {'notifications': 2}}\nflags = {}\nload_mode = normal\nuser = Default\nauto_port = False\nsystem_user_path = False\nexisting_only = False\n\n[session_options]\nheaders = {'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'connection': 'keep-alive', 'accept-charset': 'GB2312,utf-8;q=0.7,*;q=0.7'}\n\n[timeouts]\nbase = 10\npage_load = 30\nscript = 30\n\n[proxies]\nhttp =\nhttps = \n\n[others]\nretry_times = 3\nretry_interval = 2\n```\n\n----------------------------------------\n\nTITLE: Creating ChromiumPage with Custom Configuration - Python\nDESCRIPTION: Creates a ChromiumPage object using ChromiumOptions for custom browser configuration, specifically setting the browser path.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage, ChromiumOptions\n\n# Create a browser configuration object and specify the browser path\nco = ChromiumOptions().set_browser_path(r'D:\\chrome.exe')\n# Create a page object using this configuration\npage = ChromiumPage(addr_or_opts=co)\n```\n\n----------------------------------------\n\nTITLE: Clearing and Inputting Text in DrissionPage\nDESCRIPTION: Shows how to clear text from elements and input new text or key combinations using the clear() and input() methods. It also demonstrates inputting file paths for upload controls.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nele.clear()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Input text\nele.input('Hello world!')\n\n# Input text and press enter\nele.input('Hello world!\\n')\n```\n\n----------------------------------------\n\nTITLE: Capturing Element Screenshot in Python with DrissionPage\nDESCRIPTION: Example demonstrating how to take a screenshot of a specific element using the element object's get_screenshot method, including how to get the result as bytes in PNG format.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/screen_recording.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimg = page('tag:img')\nimg.get_screenshot()\nbytes_str = img.get_screenshot(as_bytes='png')  # Returns the screenshot as a binary string\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Element Waiting in DrissionPage\nDESCRIPTION: Demonstrates how to use the basic wait functionality to wait for an element to be displayed on a page. The example shows importing ChromiumPage, navigating to a webpage, and waiting for a div element to be displayed.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('http://g1879.gitee.io/drissionpagedocs/')\npage.wait.ele_displayed('tag:div')\n```\n\n----------------------------------------\n\nTITLE: Integrated Web Automation with WebPage\nDESCRIPTION: Shows how to use WebPage to combine browser control and data packet handling, including mode switching and element manipulation.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\n# Create a WebPage object\npage = WebPage()\n# Access a website\npage.get('https://gitee.com/explore')\n# Find the text box element and enter a keyword\npage('#q').input('DrissionPage')\n# Click the search button\npage('t:button@tx():搜索').click()\n# Wait for the page to load\npage.wait.load_start()\n# Switch to data packet mode\npage.change_mode()\n# Get all row elements\nitems = page('#hits-list').eles('.item')\n# Iterate through the elements\nfor item in items:\n    # Print the element text\n    print(item('.title').text)\n    print(item('.desc').text)\n    print()\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Search Timeouts in DrissionPage\nDESCRIPTION: Demonstrates various ways to set and use timeout values for element searches in DrissionPage. Shows both global page-level timeout configuration and individual search-level timeout settings.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\n# Set the timeout for searching elements to 15 seconds when initializing the page\npage = ChromiumPage(timeout=15)\n# Set the timeout for searching elements to 5 seconds\npage.set.timeouts(5)\n\n# Use the page timeout to search for elements (5 seconds)\nele1 = page.ele('search text')\n# Set an independent waiting time for this search (1 second)\nele1 = page.ele('search text', timeout=1)\n# Search for descendant elements, using the page timeout (5 seconds)\nele2 = ele1.ele('search text')\n# Search for descendant elements, using the separately set timeout (1 second)\nele2 = ele1.ele('some text', timeout=1)\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements in Cross-Domain iframes in DrissionPage\nDESCRIPTION: Demonstrates how to work with iframes that have different domain names by first accessing the iframe element and then searching within it. This approach works for both same-origin and cross-origin iframes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\niframe = page('#iframe1')\nele = iframe('#abc')\n```\n\n----------------------------------------\n\nTITLE: Navigating to URL with ChromiumPage in Python\nDESCRIPTION: This snippet demonstrates how to use the get() method of ChromiumPage to navigate to a URL. It initializes a ChromiumPage object and uses it to access the Baidu homepage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://www.baidu.com')\n```\n\n----------------------------------------\n\nTITLE: Initiating Direct Download with SessionPage in Python\nDESCRIPTION: Demonstrates how to use the download() method with SessionPage to directly download a file. The method automatically handles cookie synchronization.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.download('https://dldir1.qq.com/qqfile/qq/TIM3.4.8/TIM3.4.8.22092.exe')\n```\n\n----------------------------------------\n\nTITLE: Waiting and Capturing Network Data Packets in DrissionPage\nDESCRIPTION: This Python example demonstrates how to start a network listener in DrissionPage, click through pagination pages, and wait for network data packets after each click action.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://gitee.com/explore/all')  # Access the website, the data packet generated by this line is not captured\n\npage.listen.start('gitee.com/explore')  # Start the listener, specifying to capture data packets containing this text\nfor _ in range(5):\n    page('@rel=next').click()  # Click on the next page\n    res = page.listen.wait()  # Wait for and capture a data packet\n    print(res.url)  # Print the data packet URL\n```\n\n----------------------------------------\n\nTITLE: Creating SessionPage Object Directly in Python\nDESCRIPTION: This snippet demonstrates the simplest way to create a SessionPage object by directly initializing it. The program automatically generates the page object by reading the configuration from the default configuration file.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/create_page_object.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\n```\n\n----------------------------------------\n\nTITLE: Accessing Web Pages with Connection Parameters in DrissionPage\nDESCRIPTION: Shows how to use the get() method with additional connection parameters like headers, cookies, and proxies. This demonstrates how to customize web requests when connecting to a website.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/visit_web_page.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\n\nurl = 'https://www.baidu.com'\nheaders = {'referer': 'gitee.com'}\ncookies = {'name': 'value'}\nproxies = {'http': '127.0.0.1:1080', 'https': '127.0.0.1:1080'}\npage.get(url, headers=headers, cookies=cookies, proxies=proxies)\n```\n\n----------------------------------------\n\nTITLE: Real-time Capturing of Network Data in DrissionPage\nDESCRIPTION: This Python example demonstrates how to use the steps() method for real-time capture of network data packets while navigating through pagination pages.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.listen.start('gitee.com/explore')  # Start the listener, specifying to capture data packets containing this text\npage.get('https://gitee.com/explore/all')  # Access the website\n\ni = 0\nfor packet in page.listen.steps():\n    print(packet.url)  # Print the data packet URL\n    page('@rel=next').click()  # Click on the next page\n    i += 1\n    if i == 5:\n        break\n```\n\n----------------------------------------\n\nTITLE: Element Deletion Wait Example\nDESCRIPTION: Example demonstrating how to wait for an element to be deleted from the DOM.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Wait for the element to be displayed. Use the timeout of the ele's page\nele.wait.deleted()\n```\n\n----------------------------------------\n\nTITLE: Using WebPageTab to Navigate Websites in DrissionPage\nDESCRIPTION: This example demonstrates how to create a WebPage instance, navigate to Baidu, create a tab, change its mode, and then navigate to Gitee. The code showcases tab creation, mode switching, and basic navigation functionality.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/WebPage/webpage_function.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\npage = WebPage()\npage.get('https://www.baidu.com')\ntab = page.get_tab()\ntab.change_mode()\ntab.get('https://gitee.com')\nprint(tab.title)\n```\n\n----------------------------------------\n\nTITLE: Comparing iframe Element Access Between Selenium and DrissionPage\nDESCRIPTION: Shows how DrissionPage simplifies accessing elements within nested iframes compared to Selenium. DrissionPage can access elements directly across multiple iframe levels without needing to switch contexts.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/intimate_design.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Using selenium:\ndriver.switch_to.frame(0)\ndriver.switch_to.frame(0)\nele = driver.find_element(By.ID, 'div1')\ndriver.switch_to.default_content()\n\n# Using DrissionPage:\nele = page('#div1')\n```\n\n----------------------------------------\n\nTITLE: Taking Full Page Screenshot in Python with DrissionPage\nDESCRIPTION: Example of taking a full-page screenshot using the page object's get_screenshot method, saving the image to a specified path with a custom filename.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/screen_recording.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Take a full-page screenshot and save it\npage.get_screenshot(path='tmp', name='pic.jpg', full_page=True)\n```\n\n----------------------------------------\n\nTITLE: Single-threaded Download with SessionPage\nDESCRIPTION: Example showing how to perform a basic single-threaded download using the download() method with SessionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/DownloadKit.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\n\nres = page.download(url, save_path)\nprint(res)\n```\n\nLANGUAGE: shell\nCODE:\n```\nurl: https://www.baidu.com/img/flexible/logo/pc/result.png\nfilename: result.png\ndestination path: C:\\download\n100% download complete C:\\download\\result.png\n\n('success', 'C:\\\\download\\\\result.png')\n```\n\n----------------------------------------\n\nTITLE: Element Search Within Parent Elements\nDESCRIPTION: Shows how to search for child elements within a parent element using various methods like ele(), eles(), child(), and children().\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nele1 = page.ele('#s_fm')\nele2 = ele1.ele('#su')\n\nson = ele1.child('tag:div')  # Get the first direct child div element\nsons = ele1.children('tag:div')  # Get all direct child div elements\n```\n\n----------------------------------------\n\nTITLE: Dragging Elements in DrissionPage\nDESCRIPTION: Shows how to drag elements to new positions or other elements using the drag() and drag_to() methods, with control over speed and destination.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Drag the current element to the position 50*50, taking 1 second\nele.drag(50, 50, 1)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Drag ele1 to ele2\nele1 = page.ele('#div1')\nele2 = page.ele('#div2')\nele1.drag_to(ele2)\n\n# Drag ele1 to the position 50, 50 on the webpage\nele1.drag_to((50, 50))\n```\n\n----------------------------------------\n\nTITLE: Multiple Browser Management - Python\nDESCRIPTION: Creates and manages multiple ChromiumPage instances with different ports and user data paths.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage, ChromiumOptions\n\n# Create multiple configuration objects, each specifying a different port number and user folder path\ndo1 = ChromiumOptions().set_paths(local_port=9111, user_data_path=r'D:\\data1')\ndo2 = ChromiumOptions().set_paths(local_port=9222, user_data_path=r'D:\\data2')\n\n# Create multiple page objects\npage1 = ChromiumPage(addr_or_opts=do1)\npage2 = ChromiumPage(addr_or_opts=do2)\n\n# Each page object controls a browser\npage1.get('https://www.baidu.com')\npage2.get('http://www.163.com')\n```\n\n----------------------------------------\n\nTITLE: Working with ShadowRoot Elements in DrissionPage\nDESCRIPTION: Shows how to access and interact with ShadowRoot elements in the DOM using DrissionPage. The library treats ShadowRoot as an element object that can search for sub-elements and perform relative positioning like ordinary elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Get a shadow-root element\nsr_ele = page.ele('#app').shadow_root\n\n# Find sub-elements under this element\nele1 = sr_ele.ele('tag:div')\n\n# Get other elements through relative positioning\nele1 = sr_ele.parent(2)\nele1 = sr_ele.next('tag:div', 1)\nele1 = sr_ele.after('tag:div', 1)\neles = sr_ele.nexts('tag:div')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Independent Browser Pages\nDESCRIPTION: Shows how to create and use multiple independent ChromiumPage instances with different URLs.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage1 = ChromiumPage()\npage2 = ChromiumPage()\n\npage1.get('https://www.baidu.com')\npage2.get('http://www.163.com')\n```\n\n----------------------------------------\n\nTITLE: Download Management Example in Python\nDESCRIPTION: Demonstrates the new download management features including path setting, file naming, and download progress tracking.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://office.qq.com/download.html')\npage.set.download_path('tmp')  # Set the file save path\npage.set.download_file_name('qq')  # Set the filename\npage('#downloadWin').click()  # Click to trigger the download\nmission = page.wait.download_begin()  # Wait for the download to begin and get the task object\nmission.wait()  # Wait for the download task to complete\n```\n\nLANGUAGE: shell\nCODE:\n```\nurl：https://dldir1.qq.com/qqfile/qq/TIM3.4.8/TIM3.4.8.22124.exe\n文件名：qq.exe\n目标路径：D:\\coding\\projects\\DrissionPge\\tmp\n100.0% 下载完成 D:\\coding\\projects\\DrissionPage\\tmp\\qq.exe\n```\n\n----------------------------------------\n\nTITLE: Obtaining iframe Object as Normal Element in Python\nDESCRIPTION: This snippet demonstrates how to obtain an iframe object using the same method as obtaining a normal element, and then wrapping it with get_frame() for better IDE recognition.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\niframe = page('#sss')\nprint(iframe.html)\n\n# Recommended approach for better IDE recognition\niframe = page('#sss')\niframe = page.get_frame(iframe)\n```\n\n----------------------------------------\n\nTITLE: Multiple Class Selection Examples\nDESCRIPTION: Demonstrates how to select elements with multiple classes using different matching methods.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Exact matching of the element with the class attribute equal to \"p_cls1 p_cls2\"\nele2 = ele1.ele('.p_cls1 p_cls2')\n\n# Fuzzy matching of the element with the class attribute containing the class name 'p_cls2'\nele2 = ele1.ele('.:p_cls2')\n```\n\n----------------------------------------\n\nTITLE: Creating ChromiumPage with Custom INI File - Python\nDESCRIPTION: Creates a ChromiumPage object using configuration from a specified ini file location.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage, ChromiumOptions\n\n# Specify the ini file path when creating the configuration object\nco = ChromiumOptions(ini_path=r'./config1.ini')\n# Use this configuration object to create the page\npage = ChromiumPage(addr_or_opts=co)\n```\n\n----------------------------------------\n\nTITLE: Advanced Text Matching with Attributes in Python\nDESCRIPTION: Demonstrates more complex element selection combining text matching with attribute conditions using DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Find the element with text \"第二行\"\nele2 = ele1.ele('@text()=第二行')\n\n# Find the element with text containing \"第二行\"\nele2 = ele1.ele('@text():二行')\n\n# Find the element with text starting with \"第二\" and class attribute \"p_cls\"\nele2 = ele1.ele('@@text()^第二@@class=p_cls')\n\n# Find the element with text \"二行\" and no attributes (because the first @@ is empty)\nele2 = ele1.ele('@@@@text():二行')\n\n# Find the element with direct child text containing the string \"二行\"\nele = page.ele('@text():二行')\n```\n\n----------------------------------------\n\nTITLE: Using 'none' Load Mode with Listener in Python\nDESCRIPTION: This example shows how to use the 'none' load mode with a listener to actively stop loading when a specific data packet is received. It listens for a target API, accesses a website, and stops loading when the data is obtained.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.load_mode.none()  # Set the load mode to none\n\npage.listen.start('api/getkeydata')  # Specify the target to listen and start listening\npage.get('http://www.hao123.com/')  # Access the website\npacket = page.listen.wait()  # Wait for the data packet\npage.stop_loading()  # Actively stop loading\nprint(packet.response.body)  # Print the body of the data packet\n```\n\n----------------------------------------\n\nTITLE: Practical DrissionPage Implementation with Portable Browser\nDESCRIPTION: Complete example showing how to configure DrissionPage with a portable Chrome browser using relative paths and without ini files\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/packaging.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage, ChromiumOptions\n\nco = ChromiumOptions(read_file=False).set_paths(local_port='9888',\n                                                browser_path=r'.\\Chrome\\chrome.exe',\n                                                user_data_path=r'.\\Chrome\\userData')\npage = WebPage(chromium_options=co, session_or_options=False)\n# Note: session_or_options=False\n\npage.get('https://www.baidu.com')\n```\n\n----------------------------------------\n\nTITLE: Querying Elements with Attribute Conditions in Python\nDESCRIPTION: Demonstrates how to query elements based on attribute conditions using DrissionPage's custom syntax.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Match elements with arg1 not equal to \"abc\"\npage.ele('@!arg1=abc')\n\n# Match elements with no arg1 attribute\npage.ele('@!arg1')\n```\n\n----------------------------------------\n\nTITLE: Saving SessionOptions Configuration to File in Python\nDESCRIPTION: Demonstrates how to save SessionOptions configuration to an INI file. It shows two methods: saving to the currently read configuration file and saving to a specified path.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Save the currently read ini file\nso.save()\n\n# Save current configuration to a specified path\nso.save(path=r'D:\\tmp\\settings.ini')\n```\n\n----------------------------------------\n\nTITLE: Comparing Element Content Extraction in Requests vs DrissionPage\nDESCRIPTION: This snippet compares how to extract an H1 element's text from a webpage using both requests+lxml and DrissionPage. DrissionPage requires significantly less code and automatically handles headers.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/features_demos/compare_with_requests.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurl = 'https://baike.baidu.com/item/python'\n\n# Using requests:\nfrom lxml import etree\nheaders = {'User-Agent':'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'}\nresponse = requests.get(url, headers = headers)\nhtml = etree.HTML(response.text)\nelement = html.xpath('//h1')[0]\ntitle = element.text\n\n# Using DrissionPage:\npage = WebPage('s')\npage.get(url)\ntitle = page('tag:h1').text\n```\n\n----------------------------------------\n\nTITLE: Concurrent Download Tasks\nDESCRIPTION: Demonstrates how to add multiple concurrent download tasks using the download.add() method\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/DownloadKit.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl1 = 'https://dldir1.qq.com/qqfile/qq/TIM3.4.8/TIM3.4.8.22092.exe'\nurl2 = 'https://dldir1.qq.com/qqfile/qq/PCQQ9.7.16/QQ9.7.16.29187.exe'\nsave_path = 'files'\n\npage = SessionPage()\npage.download.add(url1, save_path)\npage.download.add(url2, save_path)\n```\n\n----------------------------------------\n\nTITLE: Basic Element Selection in DrissionPage\nDESCRIPTION: Demonstrates basic element selection using SessionPage to find elements on a webpage using CSS selectors.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.get('https://www.baidu.com')\nele = page.ele('#su')\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript on Elements in Python with DrissionPage\nDESCRIPTION: Demonstrates the use of the run_js() method to execute JavaScript code on an element. The 'this' keyword in the script refers to the element itself.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Click on the element by executing JS\nele.run_js('this.click();')\n\n# Get the height of the element using JS\nheight = ele.run_js('return this.offsetHeight;')\n```\n\n----------------------------------------\n\nTITLE: Complete Working Example\nDESCRIPTION: Full working example demonstrating element selection and text extraction from a live website.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.get('https://gitee.com/explore')\n\n# Get the ul element that contains the text \"Recommended Projects\"\nul_ele = page.ele('tag:ul@@text():Recommended Projects')  \n\n# Get all a elements under this ul element\ntitles = ul_ele.eles('tag:a')  \n\n# Iterate over the list and print the text of each a element\nfor i in titles:  \n    print(i.text)\n```\n\n----------------------------------------\n\nTITLE: Comparing Tab Objects With and Without Singleton Mode in Python\nDESCRIPTION: A complete example demonstrating the difference between singleton mode (default) and non-singleton mode for Tab objects, showing object IDs for comparison.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom DrissionPage.common import Settings\n\npage = ChromiumPage()\npage.new_tab()\npage.new_tab()\n\n# Without using multiple instances:\ntab1 = page.get_tab(1)\ntab2 = page.get_tab(1)\nprint(id(tab1), id(tab2))\n\n# Using multiple instances:\nSettings.singleton_tab_obj = False\ntab1 = page.get_tab(1)\ntab2 = page.get_tab(1)\nprint(id(tab1), id(tab2))\n```\n\n----------------------------------------\n\nTITLE: Getting Element Location in Python using DrissionPage\nDESCRIPTION: This code shows how to retrieve the coordinates of the top-left corner of an element on the entire page using the rect.location attribute. It returns a tuple with x and y coordinates.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nloc = ele.rect.location\n# Returns: (50, 50)\n```\n\n----------------------------------------\n\nTITLE: Advanced Element Selection Examples\nDESCRIPTION: Practical examples of element selection using various selectors and methods.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Get the element with id one\ndiv1 = page.ele('#one')\n\n# Get the element with name attribute row1\np1 = page.ele('@name=row1')\n\n# Get the element that contains the text \"Second div\"\ndiv2 = page.ele('Second div')\n\n# Get all div elements\ndiv_list = page.eles('tag:div')\n```\n\n----------------------------------------\n\nTITLE: Creating WebPage with Custom Configuration for Single Mode\nDESCRIPTION: Example showing how to create a WebPage object with custom configuration for only one mode (browser mode in this case) while using default configuration from ini file for the other mode.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/WebPage/create_page_object.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage, ChromiumOptions\n\nco = ChromiumOptions()\npage = WebPage(chromium_options=co)\n```\n\n----------------------------------------\n\nTITLE: CSS and XPath Selector Usage in Python\nDESCRIPTION: Demonstrates how to use CSS and XPath selectors for element selection in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Find div elements\nele2 = ele1.ele('css:.div')\n\n# Find div child elements, this syntax is unique to this library and not natively supported\nele2 = ele1.ele('css:>div')\n```\n\nLANGUAGE: python\nCODE:\n```\n# Find the first div element in descendants\nele2 = ele1.ele('xpath:.//div')\n\n# Same as the previous line, when finding descendants of an element, the `.` in front of `//` can be omitted\nele2 = ele1.ele('xpath://div')\n\n# Use xpath to retrieve the class attribute of a div element (this functionality is not available in the page source)\nele_class_str = ele1.ele('xpath://div/@class')\n```\n\n----------------------------------------\n\nTITLE: Text Input Examples\nDESCRIPTION: Various examples of entering text using the type() method including single text, multiple segments and key combinations\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Enter a segment of text\nac.type('text')\n\n# Enter multiple segments of text\nac.type(('ab', 'cd'))\n\n# Move the cursor to the left by one character and then enter text\nac.type((Keys.LEFT, 'abc'))\n```\n\n----------------------------------------\n\nTITLE: Converting and Working with Static Elements in DrissionPage\nDESCRIPTION: Demonstrates various ways to convert dynamic elements to static elements using the s_ele() method for improved performance. Shows how to get static versions of individual elements and entire pages, with examples of searching within static elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\n\n# Find an element in the page and get its static version\nele1 = page.s_ele('search text')\n\n# Find an element in a dynamic element and get its static version\nele = page.ele('search text')\nele2 = ele.s_ele()\n\n# Get the static copy of a page element (no parameter passed in)\ns_page = page.s_ele()\n\n# Get the static copy of a dynamic element\ns_ele = ele.s_ele()\n\n# Search for descendant elements in the static copy (since it is already a static element, the result of using ele() to find elements is also static)\nele3 = s_page.ele('search text')\nele4 = s_ele.ele('search text')\n```\n\n----------------------------------------\n\nTITLE: Select Option Using by_option() Method in DrissionPage\nDESCRIPTION: Demonstrates how to select an option from a dropdown using the select.by_option() method. This code shows initialization of ChromiumPage and selecting an option element from a select tag.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\nselect = page('t:select')\noption = select('t:option')\nselect.select.by_option(option)\n```\n\n----------------------------------------\n\nTITLE: Cross-Page Search of iframe in Python\nDESCRIPTION: This snippet demonstrates how to search for elements inside an iframe directly from the page object, without obtaining a ChromiumFrame object first.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nele = page('Homepage')\nprint(ele)\n```\n\n----------------------------------------\n\nTITLE: Setting User Data Path in ChromiumOptions\nDESCRIPTION: This method sets the user folder path for storing browser data and settings. It allows using an independent user folder for custom configurations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nset_user_data_path(path)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Display in DrissionPage\nDESCRIPTION: Examples showing different ways to wait for an element to be displayed on a page. This includes waiting for elements by selector, with custom timeouts, and waiting for previously obtained element objects to be displayed.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Wait for the element with id \"div1\" to be displayed, using the page settings for timeout\npage.wait.ele_displayed('#div1')\n\n# Wait for the element with id \"div1\" to be displayed, set timeout to 3 seconds\npage.wait.ele_displayed('#div1', timeout=3)\n\n# Wait for the already obtained element to be displayed\nele = page.ele('#div1')\npage.wait.ele_displayed(ele)\n```\n\n----------------------------------------\n\nTITLE: Using New Tab Features in DrissionPage 4.0\nDESCRIPTION: Demonstrates the usage of new features in the 'new_tab()' method, including creating new windows, background tabs, and incognito windows.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntab = page.new_tab()\ntab.get('https://g1879.gitee.io/drissionpagedocs')\n```\n\n----------------------------------------\n\nTITLE: Inputting Key Combinations in DrissionPage\nDESCRIPTION: Demonstrates how to input key combinations using the Keys class and the input() method, allowing for complex keyboard interactions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Keys\n\nele.input((Keys.CTRL, 'a', Keys.DEL))  # ctrl+a+del\n```\n\n----------------------------------------\n\nTITLE: Removing Element Attributes in Python with DrissionPage\nDESCRIPTION: Shows how to use the remove_attr() method to remove an attribute from an element. It requires the attribute name as a parameter.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nele.remove_attr('href')\n```\n\n----------------------------------------\n\nTITLE: Ctrl+A Simulation Example\nDESCRIPTION: Two approaches to simulate pressing Ctrl+A: step by step and chain writing\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom DrissionPage.common import Keys, Actions\n\n# Create a page\npage = ChromiumPage()\n# Create an Actions object\nac = Actions(page)\n\n# Move the mouse to the <input> element\nac.move_to('tag:input')\n# Click the mouse to place the cursor in the element\nac.click()\n# Press the ctrl key\nac.key_down(Keys.CTRL)\n# Type 'a'\nac.type('a')\n# Release the ctrl key\nac.key_up(Keys.CTRL)\n```\n\nLANGUAGE: python\nCODE:\n```\nac.click('tag:input').key_down(Keys.CTRL).type('a').key_up(Keys.CTRL)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tab with URL in Python\nDESCRIPTION: Example showing how to create a new tab with a specific URL using the new_tab method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npage.new_tab(url='https://www.baidu.com')\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Paths in ChromiumOptions for Python\nDESCRIPTION: This example shows how to use the set_paths() method to configure various browser-related paths, including local port and user data path. It allows for flexible configuration of browser settings.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nco.set_paths(local_port=9333, user_data_path=r'D:\\tmp')\n```\n\n----------------------------------------\n\nTITLE: Finding Elements Across Multiple iframe Levels in DrissionPage\nDESCRIPTION: Demonstrates DrissionPage's ability to directly access elements within nested iframes of the same origin without having to explicitly switch contexts. Provides comparison with the more cumbersome approach required in Selenium.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\nele = page('#abc')\n```\n\n----------------------------------------\n\nTITLE: Scrolling Elements in Python with DrissionPage\nDESCRIPTION: Shows various methods for scrolling element content or scrolling the element into view using the scroll attribute.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Scroll to the bottom\nele.scroll.to_bottom()\n\n# Scroll to the rightmost\nele.scroll.to_rightmost()\n\n# Scroll down 200 pixels\nele.scroll.down(200)\n\n# Scroll to a specific position\nele.scroll.to_location(100, 300)\n\n# Scroll the page to make the element visible\nele.scroll.to_see()\n```\n\n----------------------------------------\n\nTITLE: Element Removal from Page\nDESCRIPTION: Shows different ways to remove elements from the page using either element references or locators.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Remove an element that has been obtained\nele = page('tag:a')\npage.remove_ele(ele)\n\n# Remove an element found using a locator\npage.remove_ele('tag:a')\n```\n\n----------------------------------------\n\nTITLE: Element Display State Wait Example\nDESCRIPTION: Example demonstrating how to wait for an element to become displayed.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Wait for the element to be displayed. Use the timeout of the ele's page\nele.wait.displayed()\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome Browser Options in DrissionPage\nDESCRIPTION: Demonstrates how to configure Chrome browser preferences and arguments to disable password saving prompts and crash restore bubbles. Shows initialization of ChromiumOptions with specific preferences.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/Q&A.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nco = ChromiumOptions()\n\n# Disable the prompt bubble for \"Save Password\"\nco.set_pref('credentials_enable_service', False)\n\n# Disable the prompt bubble for \"Do you want to restore this page? Chrome didn't shut down correctly.\"\nco.set_argument('--hide-crash-restore-bubble')\n\npage = ChromiumPage(co)\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Element in DrissionPage (Python)\nDESCRIPTION: Demonstrates how to scroll the page to make an element visible using the scroll.to_see() method. It shows two ways: scrolling to an already obtained element and scrolling to an element found by a locator.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Scroll to an element already obtained\nele = page.ele('tag:div')\npage.scroll.to_see(ele)\n\n# Scroll to an element found by locator\npage.scroll.to_see('tag:div')\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence with Default NoneElement Behavior in Python\nDESCRIPTION: Demonstrates how to check if an element exists using the default behavior where a NoneElement object is returned for non-existent elements. This object evaluates to False in conditional statements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/not_found.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nele = page.ele('xxxxxxx')\n\n# Check if the element is found\nif ele:\n    print('Element found.')\n\nif not ele:\n    print('Element not found.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Port Assignment in DrissionPage\nDESCRIPTION: Demonstrates how to automatically assign and save port configuration to an ini file for independent browser instances.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n\nChromiumOptions().auto_port().save()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Download Tasks to Complete\nDESCRIPTION: Demonstrates how to click a download button and properly wait for the download to start and finish, which is necessary for correct file renaming.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\npage('#button').click()  # Click the download button\npage.wait.download_begin()  # Wait for the download to start\npage.wait.all_downloads_done()  # Wait for all tasks to finish\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Static Elements with s_eles() in DrissionPage\nDESCRIPTION: Shows how to retrieve multiple static elements using the s_eles() method, which returns a list of all matching SessionElement objects. This is useful for processing multiple elements at once in a performant way.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\npage = WebPage()\nfor ele in page.s_eles('search text'):\n    print(ele.text)\n```\n\n----------------------------------------\n\nTITLE: Saving Images Directly with DrissionPage\nDESCRIPTION: Shows how DrissionPage can directly save images from a webpage without controlling the browser to perform save operations. It accesses the image data directly and saves it to a file.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/intimate_design.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimg = page('tag:img')\nimg.save('img.png')  # Save the image directly to a folder\n```\n\n----------------------------------------\n\nTITLE: Using 'none' Load Mode with Page Features in Python\nDESCRIPTION: This example shows how to use the 'none' load mode to stop loading when the page reaches a certain state. It waits for the title to change to a specific text before stopping the loading process.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.load_mode.none()  # Set the load mode to none\n\npage.get('http://www.hao123.com/')  # Access the website\npage.wait.title_change('hao123')  # Wait for the title to change to the target text\npage.stop_loading()  # Actively stop loading\n```\n\n----------------------------------------\n\nTITLE: Selenium Locator Usage in Python\nDESCRIPTION: Shows how to use Selenium-style locators in DrissionPage for easier project migration.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import By\n\n# Find the element with id \"one\"\nloc1 = (By.ID, 'one')\nele = page.ele(loc1)\n\n# Find using xpath\nloc2 = (By.XPATH, '//p[@class=\"p_cls\"]')\nele = page.ele(loc2)\n```\n\n----------------------------------------\n\nTITLE: Configuring User Preferences in ChromiumOptions\nDESCRIPTION: These methods set or remove configuration items in the user profile. They can be used to customize browser behavior like disabling popups or hiding password prompts.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Disable all pop-up windows\nco.set_pref(arg='profile.default_content_settings.popups', value='0')\n# Hide the prompt to save passwords\nco.set_pref('credentials_enable_service', False)\n\n# Remove a preference\nco.remove_pref(arg='profile.default_content_settings.popups')\n\n# Remove a preference from the user profile file\nco.remove_pref_from_file(arg='profile.default_content_settings.popups')\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for SessionPage in Python\nDESCRIPTION: This example shows how to set the connection timeout for a SessionPage instance using the set.timeout() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/set_session.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npage.set.timeout(20)\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Connection Retrying in DrissionPage\nDESCRIPTION: Shows how to configure automatic connection retrying when accessing a webpage. The example sets 5 retry attempts with a 3-second interval between retries if an error occurs during page access.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/intimate_design.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npage.get('xxxxxx', retry=5, interval=3)  # Retry 5 times with a 3-second interval when an error occurs\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a New Actions Object in DrissionPage\nDESCRIPTION: This example shows how to create a new Actions object by importing it from DrissionPage.common and passing a ChromiumPage object. It then demonstrates using this object to perform a series of actions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom DrissionPage.common import Actions\n\npage = ChromiumPage()\nac = Actions(page)\npage.get('https://www.baidu.com')\nac.move_to('#kw').click().type('DrissionPage')\nac.move_to('#su').click()\n```\n\n----------------------------------------\n\nTITLE: Attribute Negation Examples\nDESCRIPTION: Demonstrates using attribute negation selectors in combination with AND/OR conditions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Match elements with arg1 equal to \"abc\" and arg2 not equal to \"def\"\npage.ele('@@arg1=abc@!arg2=def')\n\n# Match div elements with arg1 equal to \"abc\" or arg2 not equal to \"def\"\npage.ele('t:div@|arg1=abc@!arg2=def')\n```\n\n----------------------------------------\n\nTITLE: Obtaining iframe Object with get_frame() Method in Python\nDESCRIPTION: This Python code snippet shows how to obtain an iframe object using the get_frame() method, which is the recommended approach in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get it using a locator\niframe = page.get_frame('#sss')\n\n# Get the second iframe\niframe = page.get_frame(1)\n```\n\n----------------------------------------\n\nTITLE: Creating WebPage Objects with Custom Configuration\nDESCRIPTION: Example showing how to create a WebPage object using custom configurations via ChromiumOptions and SessionOptions objects for both browser and request modes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/WebPage/create_page_object.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage, ChromiumOptions, SessionOptions\n\nco = ChromiumOptions()\nso = SessionOptions()\n\npage = WebPage(chromium_options=co, session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Optimized Page Loading with None Mode in Python\nDESCRIPTION: Shows improved page loading control using none mode and active loading termination for better performance.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom TimePinner import Pinner\nfrom pprint import pprint\n\npage = ChromiumPage()\npage.set_load_mode.none()  # Set the load mode to none\npage.listen.start('api/getkeydata')  # Specify the target to listen to and start listening\npinner = Pinner(True, False)\npage.get('http://www.hao123.com/')  # Access the website\npacket = page.listen.wait()  # Wait for the packet\npage.stop_loading()  # Stop loading actively\npprint(packet.response.body)  # Print the packet body\npinner.pin('用时', True)\n```\n\n----------------------------------------\n\nTITLE: Creating ChromiumPage with Specific Address - Python\nDESCRIPTION: Creates a ChromiumPage object by specifying a direct browser address in ip:port format.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage(addr_or_opts='127.0.0.1:9333')\n```\n\n----------------------------------------\n\nTITLE: Accessing the Currently Focused Element in DrissionPage\nDESCRIPTION: Demonstrates how to get the element that currently has focus on the page using the active_ele attribute of the page object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nele = page.active_ele\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Immediate Exception Throwing Configuration in DrissionPage\nDESCRIPTION: A full example showing how to configure DrissionPage to immediately throw ElementNotFoundError when an element is not found, including initialization and element search attempts.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/not_found.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom DrissionPage.common import Settings\n\nSettings.raise_when_ele_not_found = True\n\npage = ChromiumPage(timeout=1)\npage.get('https://www.baidu.com')\nele = page('#abcd')  # ('#abcd') element does not exist\n```\n\n----------------------------------------\n\nTITLE: Importing WebPage for Combined Functionality\nDESCRIPTION: Import the WebPage class when you need comprehensive functionality to both control the browser and handle data packets. This is the most feature-complete page class.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n```\n\n----------------------------------------\n\nTITLE: Element Dragging Examples\nDESCRIPTION: Demonstrates two ways to drag elements: by pixel distance and to another element\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom DrissionPage.common import Actions\n\n# Create a page\npage = ChromiumPage()\n# Create an Actions object\nac = Actions(page)\n\n# Hold down the left mouse button on the element\nac.hold('#div1')\n# Move the mouse 300 pixels to the right\nac.right(300)\n# Release the left mouse button\nac.release()\n```\n\nLANGUAGE: python\nCODE:\n```\nac.hold('#div1').release('#div2')\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionPage and Getting Basic Page Information\nDESCRIPTION: Creates a SessionPage instance, navigates to a website, and retrieves the page title and HTML content. This demonstrates the basic usage of SessionPage for accessing web content.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_page_info.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.get('http://www.baidu.com')\n# Get page title\nprint(page.title)\n# Get page html\nprint(page.html)\n```\n\nLANGUAGE: shell\nCODE:\n```\n百度一下，你就知道\n<!DOCTYPE html>\n<!--STATUS OK--><html> <head><meta http-equi...\n```\n\n----------------------------------------\n\nTITLE: Getting Tab Objects by Different Methods in Python\nDESCRIPTION: Example showing different ways to get tab objects using the get_tab method, including by index and by specific ID.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntab = page.get_tab()  # Get the current tab object\ntab = page.get_tab(1)  # Get the object of the second tab in the list\ntab = page.get_tab('5399F4ADFE3A27503FFAA56390344EE5')  # Get the object of the specified id tab in the list\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts in DrissionPage 3.2\nDESCRIPTION: Shows the new syntax for setting timeouts in DrissionPage 3.2 compared to the old version.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/3_2.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old version:\npage.set_timeouts(20, 30, 40)\n\n# New version:\npage.set.timeouts(20, 30, 40)\n```\n\n----------------------------------------\n\nTITLE: Downloading Starbucks Product Images with DrissionPage\nDESCRIPTION: Python script that uses DrissionPage to scrape product images from Starbucks' website. It extracts image URLs from div elements' style attributes, retrieves product names, and downloads images with proper naming. The script handles illegal characters in filenames and manages filename conflicts automatically.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/demos/starbucks_pics.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\nfrom re import search\n\n# Create a session page object using secure connection\npage = SessionPage()\n# Access the target webpage\npage.get('https://www.starbucks.com.cn/menu/')\n\n# Get all elements with class attribute set to 'preview circle'\ndivs = page.eles('.preview circle')\n# Iterate through these elements\nfor div in divs:\n    # Use relative positioning to fetch the next sibling element of the current div element and retrieve its text\n    name = div.next().text\n\n    # Extract the image URL from the style attribute of the div element and concatenate it\n    img_url = div.attr('style')\n    img_url = search(r'\"(.*)\"', img_url).group(1)\n    img_url = f'https://www.starbucks.com.cn{img_url}'\n\n    # Perform the download\n    page.download(img_url, r'.\\imgs', rename=name)\n```\n\n----------------------------------------\n\nTITLE: Parallel Chunked Download Configuration\nDESCRIPTION: Shows how to configure chunk size and enable/disable chunked downloading for large files\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/DownloadKit.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npage = SessionPage()\npage.download.set.block_size('30m')  # Set the chunk size\npage.download.add('http://xxxx/demo.zip')  # Download with default chunking\npage.download.add('http://xxxx/demo.zip', split=False)  # Download without chunking\n```\n\n----------------------------------------\n\nTITLE: Shadow Root Element Selection\nDESCRIPTION: Examples of accessing and searching within shadow root elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nshadow = page.ele('#ele1').shadow_root\nele = shadow.ele('#ele2')\n```\n\n----------------------------------------\n\nTITLE: Clicking with Offsets in DrissionPage\nDESCRIPTION: Demonstrates how to click on specific points relative to an element using the click.at() method, allowing for precise interaction with element regions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Click 50*50 above the element\nele.click.at(50, -50)\n\n# Click the upper middle part of the element, offset_x is 50 relative to the top-left corner to the right, offset_y stays at the middle of the element\nele.click.at(offset_x=50)\n\n# Same as click(), but without retrying\nele.click.at()\n```\n\n----------------------------------------\n\nTITLE: Static Element Iteration Performance Test\nDESCRIPTION: Demonstrates the improved performance when using static elements (s_eles) instead of dynamic elements for data retrieval\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/accelerate_reading.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom TimePinner import Pinner  # Import the timing tool\n\npinner = Pinner()  # Create a timer object\npage = ChromiumPage()\npage.get('https://www.163.com')\n\npinner.pin()  # Mark the start of recording\n\n# Get all link objects and iterate through them\nlinks = page('t:body').s_eles('t:a')\nfor lnk in links:\n    print(lnk.text)\n\npinner.pin('Time Elapsed')  # Record and print the time elapsed\n```\n\n----------------------------------------\n\nTITLE: Using SessionOptions with SessionPage in Python\nDESCRIPTION: Example demonstrating how to create a SessionOptions object, configure it with proxies and cookies, and pass it to SessionPage constructor.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage, SessionOptions\n\n# Create a configuration object (read configuration from ini file by default)\nso = SessionOptions()\n# Set the proxy\nso.set_proxies('http://localhost:1080')\n# Set cookies\ncookies = ['key1=val1; domain=xxxx', 'key2=val2; domain=xxxx']\nso.set_cookies(cookies)\n\n# Create the page object with this configuration\npage = SessionPage(session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Setting Download Paths for Multiple Tabs\nDESCRIPTION: Shows how to configure download paths when working with multiple tabs, including setting a temporary path for the Page object and specific paths for individual Tab objects.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\npage.set.download_path('tmp')  # Set the overall path\n\ntab1 = page.get_tab(page.tabs[1])\ntab1.set.download_path('path1')\n\ntab2 = page.get_tab(page.tabs[2])\ntab2.set.download_path('path2')\n```\n\n----------------------------------------\n\nTITLE: Comparing Element Search Timeout Syntax Between Selenium and DrissionPage\nDESCRIPTION: Demonstrates the difference in syntax for timed element searches between Selenium and DrissionPage. The DrissionPage syntax is significantly more concise while providing the same functionality.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/intimate_design.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Using selenium:\nelement = WebDriverWait(driver, 10).until(ec.presence_of_element_located((By.XPATH, '//*[contains(text(), \"some text\")]')))\n\n# Using DrissionPage:\nelement = page('some text', timeout=10)\n```\n\n----------------------------------------\n\nTITLE: Clicking Left Mouse Button on Element in DrissionPage\nDESCRIPTION: This example shows how to click the left mouse button on a specific element using the click() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nac.click('#div1')\n```\n\n----------------------------------------\n\nTITLE: Creating WebPage with Custom ini File Configuration\nDESCRIPTION: Example showing how to create a WebPage object using configuration from a custom ini file path rather than the default location.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/WebPage/create_page_object.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage, ChromiumOptions, SessionOptions\n\nco = ChromiumOptions(ini_path=r'./config1.ini')\nso = SessionOptions(ini_path=r'./config1.ini')\n\npage = ChromiumPage(addr_or_opts=co, session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionPage and Setting Cookies in Python\nDESCRIPTION: This snippet demonstrates how to create a SessionPage instance and set cookies using the set.cookies() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/set_session.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.set.cookies([{'name': 'a', 'value': '1'}, {'name': 'b', 'value': '2'}])\n```\n\n----------------------------------------\n\nTITLE: Multiple Element Selection with eles()\nDESCRIPTION: Shows how to use the eles() method to find multiple elements and access them using list indexing.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get all p elements within the page\np_eles = page.eles('tag:p')\n\n# Get all p elements within ele1\np_eles = ele1.eles('tag:p')\n\n# Print the text of the first p element\nprint(p_eles[0])\n```\n\n----------------------------------------\n\nTITLE: Waiting for Page Load Start in DrissionPage\nDESCRIPTION: Example showing how to wait for a page to start loading after clicking an element. This helps ensure actions are performed only after navigation has begun, preventing access to soon-to-be invalid elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nele.click()  # Click a certain element\npage.wait.load_start()  # Wait for the page to start loading\n# Perform actions on the new page\nprint(page.title)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Next Sibling Elements in Python using DrissionPage\nDESCRIPTION: Examples of using the nexts() method to retrieve multiple sibling elements after the current element. Shows how to get all siblings or filter by specific criteria.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Get all the sibling elements after ele1\neles = ele1.nexts()\n\n# Get all the sibling div elements after ele1\ndivs = ele1.nexts('tag:div')\n\n# Get all the text nodes after ele1\ntxts = ele1.nexts('xpath:text()')\n```\n\n----------------------------------------\n\nTITLE: Importing ChromiumPage for Browser Control\nDESCRIPTION: Import the ChromiumPage class when you only need to control the browser without data packet handling. This is used for browser automation tasks only.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n```\n\n----------------------------------------\n\nTITLE: Operating Multiple Browser Tabs Concurrently with DrissionPage\nDESCRIPTION: Demonstrates how DrissionPage can operate multiple browser tabs concurrently, a feature not available in standard Selenium. This example shows accessing different websites in two different tabs simultaneously.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/intimate_design.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntab1 = page.get_tab(page.tabs[0])\ntab2 = page.get_tab(page.tabs[1])\n\ntab1.get('https://www.baidu.com')\ntab2.get('https://www.163.com')\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Alert Handling in DrissionPage (Python)\nDESCRIPTION: Demonstrates how to set up automatic handling of alert boxes using the set.auto_handle_alert() method, which prevents alert boxes from popping up and processes them directly.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\np = ChromiumPage()\np.set.auto_handle_alert()  # After this, pop-ups will be automatically confirmed\n```\n\n----------------------------------------\n\nTITLE: URL Blocking Configuration\nDESCRIPTION: Demonstrates how to block specific URLs from loading, supporting wildcard patterns.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npage.set.blocked_urls('*.css*')  # Do not load CSS files\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Return Values for Missing Elements in DrissionPage\nDESCRIPTION: Demonstrates how to configure DrissionPage to return a custom value when elements are not found, which is useful for scraping scenarios where some elements might be missing without needing to handle exceptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/not_found.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.NoneElement_value('Not Found')\nfor li in page.eles('t:li'):\n    name = li('.name').text\n    age = li('.age').text\n    phone = li('.phone').text\n```\n\n----------------------------------------\n\nTITLE: URL Change Waiting Example\nDESCRIPTION: Example showing how to wait for URL changes during website navigation, particularly useful during login redirections.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Access the website\npage.get('https://www.*****.cn/login/')  # Access the login page\npage.ele('#username').input('***')  # Execute login logic\npage.ele('#password').input('***\\n')\n\npage.wait.url_change('https://www.*****.cn/center/')  # Wait for the URL to change to the background URL\n```\n\n----------------------------------------\n\nTITLE: Using Try-Except to Handle Element Not Found Exceptions in Python\nDESCRIPTION: Shows how to use a try-except block to catch ElementNotFoundError exceptions that occur when methods are called on non-existent elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/not_found.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    ele.click()\nexcept ElementNotFoundError:\n    print('Element not found.')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subsequent Elements in Python using DrissionPage\nDESCRIPTION: Examples of using the after() method to retrieve elements after the current element in the entire DOM document. Demonstrates various ways to filter and select specific subsequent nodes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Get the second element after ele1\nele2 = ele1.after(index=2)\n\n# Get the third div element after ele1\nele2 = ele1.after('tag:div', 3)\n\n# Get the text of the first text node after ele1\ntxt = ele1.after('xpath:text()', 1)\n```\n\n----------------------------------------\n\nTITLE: Importing SessionPage for HTTP Requests\nDESCRIPTION: Import the SessionPage class when you only need to send or receive data packets without browser control. This is used for API interactions and web scraping.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n```\n\n----------------------------------------\n\nTITLE: Comparing DrissionPage and Selenium iframe Handling in Python\nDESCRIPTION: This code compares the simplicity of DrissionPage's approach to handling iframes with the more complex process required by Selenium.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\npage = WebPage()\nele = page('Homepage')\n\n# Selenium-based approach (more complex)\nfrom DrissionPage import MixPage\n\npage = MixPage()\npage.to_frame('#iframeResult')\npage.to_frame('#sss')\nele = page('Homepage')\npage.to_frame.main()\n```\n\n----------------------------------------\n\nTITLE: Data Packet Handling with SessionPage\nDESCRIPTION: Demonstrates how to use SessionPage for handling data packets and accessing page elements without browser control.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\n# Create a page object\npage = SessionPage()\n# Visit Baidu\npage.get('https://www.baidu.com')\n# Get the element object\nele = page('#kw')\n# Print the element's HTML\nprint(ele.html)\n```\n\n----------------------------------------\n\nTITLE: Retrieving localStorage Data in Python\nDESCRIPTION: The `get_local_storage()` method is used to retrieve localStorage information. It can return all items as a dictionary or a specific item's content as a string. The method takes an optional 'item' parameter to specify which item to retrieve.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_page_info.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_local_storage(item: str = None) -> Union[dict, str]:\n    # Implementation not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Multiple Attribute Selection Examples\nDESCRIPTION: Demonstrates using multiple attribute selectors with AND conditions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Find elements with the name attribute equal to \"row1\" and the class attribute containing the text \"cls\"\nele2 = ele1.ele('@@name=row1@@class:cls')\n\nele = page.ele('tag:div@@class=p_cls@@name=row1')\n```\n\n----------------------------------------\n\nTITLE: Complete Element Information Example\nDESCRIPTION: Comprehensive example showing how to use DrissionPage to get element information from a web page\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.get('https://gitee.com/explore')\n\n# Get all `a` elements under the recommended directory\nli_eles = page('tag:ul@@text():Recommended projects').eles('t:a')\n\n# Iterate through the list\nfor i in li_eles:  \n    # Get and print the tag name, text, and href attribute\n    print(i.tag, i.text, i.attr('href'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Size in Python using DrissionPage\nDESCRIPTION: This snippet demonstrates how to get the size of an element using the rect.size attribute of a ChromiumElement object. It returns a tuple containing the width and height of the element.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsize = ele.rect.size\n# Returns: (50, 50)\n```\n\n----------------------------------------\n\nTITLE: Importing Keys for Keyboard Simulation\nDESCRIPTION: Import the Keys class to simulate keyboard key presses, particularly for control, alt, and other special keys during browser automation.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Keys\n```\n\n----------------------------------------\n\nTITLE: Creating New Browser with Custom Port and Path\nDESCRIPTION: Demonstrates how to create a completely new browser instance by specifying a custom port and user data path.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage, ChromiumOptions\n\nco = ChromiumOptions().set_local_port(9333).set_user_data_path(r'C:\\tmp')\npage = ChromiumPage(co)\n```\n\n----------------------------------------\n\nTITLE: Switching WebPage Modes with Navigation\nDESCRIPTION: Example showing how to switch between modes and verify the change, including accessing a webpage and checking the title across different modes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/WebPage/mode_switch.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\npage = WebPage()\npage.get('https://www.baidu.com')\nprint(page.mode)\npage.change_mode()\nprint(page.mode)\nprint(page.title)\n```\n\nLANGUAGE: shell\nCODE:\n```\nd\ns\n百度一下，你就知道\n```\n\n----------------------------------------\n\nTITLE: File Upload Interception in DrissionPage 3.2\nDESCRIPTION: Demonstrates how to intercept file uploads in DrissionPage 3.2 without directly interacting with the file input element.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/3_2.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Set the file path to be uploaded\npage.set.upload_files('demo.txt')\n# Click the button to trigger the file selection box\nbtn_ele.click()\n# Wait for the path to be filled\npage.wait.upload_paths_inputted()\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse to Element in DrissionPage\nDESCRIPTION: This snippet demonstrates how to move the mouse to a specific element using the move_to() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nele = page('tag:a')\nac.move_to(ele_or_loc=ele)\n```\n\n----------------------------------------\n\nTITLE: File Upload Path Input Example\nDESCRIPTION: Example demonstrating how to wait for file upload path to be automatically filled after setting up the upload.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Set the file path to be uploaded\npage.set.upload_files('demo.txt')\n# Click the button to trigger the file selection dialog\nbtn_ele.click()\n# Wait for the path to be filled in\npage.wait.upload_paths_inputted()\n```\n\n----------------------------------------\n\nTITLE: Using 'none' Load Mode with Element Retrieval in Python\nDESCRIPTION: This snippet demonstrates using the 'none' load mode with element retrieval to stop loading when a specific element is found. It accesses a website, retrieves an element, and then stops loading.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.load_mode.none()  # Set the load mode to none\n\npage.get('http://www.hao123.com/')  # Access the website\nele = page.ele('中国日报')  # Retrieve the element with text containing \"中国日报\"\npage.stop_loading()  # Actively stop loading\nprint(ele.text)  # Print element text\n```\n\n----------------------------------------\n\nTITLE: Accessing Pseudo-element Content in Python using DrissionPage\nDESCRIPTION: This code shows how to retrieve the content of ::before and ::after pseudo-elements of an element using the pseudo.before and pseudo.after attributes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbefore_txt = ele.pseudo.before\nafter_txt = ele.pseudo.after\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Functions\nDESCRIPTION: Import various utility functions for waiting on conditions, creating elements from HTML, copying configuration files, and handling blob resources.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import wait_until\nfrom DrissionPage.common import make_session_ele\nfrom DrissionPage.common import configs_to_here\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Subsequent Elements in Python using DrissionPage\nDESCRIPTION: Examples of using the afters() method to retrieve multiple elements after the current element in the entire DOM document. Shows how to get all subsequent elements or filter by specific criteria.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# Get all elements after ele1\neles = ele1.afters()\n\n# Get all div elements after ele1\ndivs = ele1.afters('tag:div')\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Redirecting Downloads\nDESCRIPTION: Demonstrates how to intercept a download task, cancel it, and then use the URL to download the file using a different method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\npage('t:a').click()\ndata = page.wait.download_begin(cancel_it=True)\npage.download(data['url'])\n```\n\n----------------------------------------\n\nTITLE: Hovering Over Elements in Python with DrissionPage\nDESCRIPTION: Demonstrates how to use the hover() method to simulate mouse hover over an element. It accepts optional x and y offsets relative to the element's upper left corner.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Hover 50*50 above the element at the upper right corner\nele.hover(50, -50)\n\n# Hover in the middle of the element, x offset 50 relative to the upper left corner, y remains at the center of the element\nele.hover(offset_x=50)\n\n# Hover in the center of the element\nele.hover()\n```\n\n----------------------------------------\n\nTITLE: Setting User Profile in ChromiumOptions\nDESCRIPTION: This method selects which user profile to use in Chromium-based browsers. It allows switching between different user configurations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nco.set_user(user='Profile 1')\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Extension in ChromiumOptions\nDESCRIPTION: This method adds a browser extension to be loaded when the browser starts. It's recommended to unzip plugin files into a separate folder for stability.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nco.add_extension(r'D:\\SwitchyOmega')\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSS Style Properties in Python using DrissionPage\nDESCRIPTION: This snippet demonstrates how to get the value of a CSS style property for an element, including pseudo-elements, using the style() method. It can retrieve both regular and pseudo-element styles.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get the color value of the CSS property\nprop = ele.style('color')\n\n# Get the content of the after pseudo element\nprop = ele.style('content', 'after')\n```\n\n----------------------------------------\n\nTITLE: Importing By for Element Selection\nDESCRIPTION: Import the By class to use Selenium-style element selectors, which can help with migrating projects from Selenium to DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import By\n```\n\n----------------------------------------\n\nTITLE: Blocking Multi-threaded Downloads\nDESCRIPTION: Example of sequential multi-threaded downloads using add() and wait() methods\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/DownloadKit.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage = SessionPage()\npage.download.add('http://xxxx/demo.zip').wait()\npage.download.add('http://xxxx/demo.zip').wait()\n```\n\n----------------------------------------\n\nTITLE: Creating ChromiumOptions Object in Python\nDESCRIPTION: This example demonstrates how to create a ChromiumOptions object, which is used to manage browser initialization configurations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n\nco = ChromiumOptions()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Midpoint in Python using DrissionPage\nDESCRIPTION: This snippet demonstrates how to get the coordinates of the center of an element on the entire page using the rect.midpoint attribute. It returns a tuple with x and y coordinates.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nloc = ele.rect.midpoint\n# Returns: (55, 55)\n```\n\n----------------------------------------\n\nTITLE: Single Attribute Selector Examples\nDESCRIPTION: Shows various ways to use single attribute selectors for finding elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Find the element with the name attribute equal to \"row1\"\nele2 = ele1.ele('@name=row1')\n\n# Find the element with the name attribute containing the text \"row\"\nele2 = ele1.ele('@name:row')\n\n# Find the element with the name attribute starting with \"row\"\nele2 = ele1.ele('@name^row')\n\n# Find elements with a name attribute\nele2 = ele1.ele('@name')\n\n# Find elements with no attributes\nele2 = ele1.ele('@')\n\n# Find the element with the email attribute equal to \"abc@def.com\", even if there are multiple @, it will not be repeated\nele2 = ele1.ele('@email=abc@def.com')\n\n# Example of attribute with special characters, match elements with the attribute abc@def equal to v\nele2 = ele1.ele('css:div[abc\\@def=\"v\"]')\n```\n\n----------------------------------------\n\nTITLE: Reading Local HTML Files with DrissionPage\nDESCRIPTION: Demonstrates how to use the get() method to parse local HTML files instead of requesting online resources. This functionality allows working with offline content using the same API.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/visit_web_page.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.get(r'D:\\demo.html')\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Actions in ChromiumPage\nDESCRIPTION: Demonstrates how to use the built-in actions attribute to perform mouse movements in DrissionPage. The example shows chained mouse actions including moving to coordinates, holding, moving a relative distance, and releasing.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.actions.move_to((300, 500)).hold().move(300).release()\n```\n\n----------------------------------------\n\nTITLE: Browser History Navigation - Back\nDESCRIPTION: Shows how to navigate backward in browser history by specified number of steps.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npage.back(2)  # Go back two web pages\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Tab after Link Click in Python\nDESCRIPTION: Example showing how to get a tab object for a newly created tab after clicking a link. It demonstrates waiting for a new tab and retrieving it using the latest_tab property.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.ele('Some link').click()  # Click on a link to create a new tab\npage.wait.new_tab()  # Wait for the new tab to appear\ntab = page.get_tab(page.latest_tab)  # Get the specified tab object\ntab.get('https://www.baidu.com')  # Operate the tab using the tab object\n```\n\n----------------------------------------\n\nTITLE: Checking WebPage Mode in Python\nDESCRIPTION: Demonstrates how to check the current mode of a WebPage instance using the mode property.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/WebPage/mode_switch.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\npage = WebPage()\nprint(page.mode)\n```\n\nLANGUAGE: shell\nCODE:\n```\nd\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Arguments for Browser Startup in Python\nDESCRIPTION: This snippet shows how to set various command line arguments for browser startup using the set_argument() method of ChromiumOptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Setting to start in maximized mode\nco.set_argument('--start-maximized')\n# Setting the initial window size\nco.set_argument('--window-size', '800,600')\n# Opening the browser in guest mode\nco.set_argument('--guest')\n```\n\n----------------------------------------\n\nTITLE: Modifying Retry Settings in Python using DrissionPage\nDESCRIPTION: Shows how to modify the number of retries and waiting interval for network connection failures.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_page_info.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Modify the number of retries\npage.retry_times = 5\n\n# Modify the waiting interval for retrying\npage.retry_interval = 1.5\n```\n\n----------------------------------------\n\nTITLE: Setting Load Strategy During Runtime in Python\nDESCRIPTION: This code demonstrates how to dynamically set the load strategy to 'none' mode during runtime using the ChromiumPage object's set.load_mode method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.load_mode.none()\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout When Creating or Modifying SessionPage\nDESCRIPTION: Demonstrates how to specify a timeout value when creating a SessionPage instance or modifying it after creation. The timeout parameter controls how long the page will wait for network responses.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_page_info.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Specify the timeout when creating the page object\npage = SessionPage(timeout=5)\n\n# Modify the timeout\npage.timeout = 20\n```\n\n----------------------------------------\n\nTITLE: Browser History Navigation - Forward\nDESCRIPTION: Demonstrates navigating forward in browser history by specified number of steps.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npage.forward(2)  # Go forward two steps\n```\n\n----------------------------------------\n\nTITLE: Navigating Within iframe Using get() Method in Python\nDESCRIPTION: This snippet shows how to navigate to another page within an iframe using the get() method of the ChromiumFrame object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\niframe.get('https://www.runoob.com/css3/css3-tutorial.html')\n```\n\n----------------------------------------\n\nTITLE: Handling Not Found Elements in DrissionPage 3.2\nDESCRIPTION: Demonstrates the correct approach to handle not found elements in DrissionPage 3.2 using if statements or try-except blocks.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/3_2.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nele = page.ele('xxxxxxx')\n\n# using if statement\nif not ele:\n    print('Not found.')\n\nif ele:\n    print('Found.')\n\n# using try statement\ntry:\n    ele.click()\nexcept ElementNotFoundError:\n    print('Not found.')\n```\n\n----------------------------------------\n\nTITLE: Tag-based Element Selection in Python\nDESCRIPTION: Shows how to select elements based on their HTML tag, optionally combined with other conditions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Locate the div element\nele2 = ele1.ele('tag:div')\n\n# Locate the p element with class attribute \"p_cls\"\nele2 = ele1.ele('tag:p@class=p_cls')\n\n# Locate the p element with text \"第二行\"\nele2 = ele1.ele('tag:p@text()=第二行')\n\n# Locate the p element with class attribute \"p_cls\" and text \"第二行\"\nele2 = ele1.ele('tag:p@@class=p_cls@@text()=第二行')\n\n# Locate the p element with class attribute \"p_cls\" or text \"第二行\"\nele2 = ele1.ele('tag:p@|class=p_cls@|text()=第二行')\n\n# Find p elements containing the string \"二行\" in direct text nodes\nele2 = ele1.ele('tag:p@text():二行')\n\n# Find p elements containing the string \"二行\" in internal text nodes\nele2 = ele1.ele('tag:p@@text():二行')\n```\n\n----------------------------------------\n\nTITLE: Getting All Tab IDs in Python\nDESCRIPTION: Example showing how to get a list of all tab IDs using the tabs property.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(page.tabs)\n```\n\n----------------------------------------\n\nTITLE: Mode Switching in Python using DrissionPage\nDESCRIPTION: Demonstrates how to switch between d mode and s mode in DrissionPage for handling different page interaction scenarios.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npage.change_mode()\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Settings in DrissionPage\nDESCRIPTION: Shows how to import and modify DrissionPage's global settings. This example demonstrates setting the raise_when_wait_failed option to True.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/settings.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Settings\n\nSettings.raise_when_wait_failed = True\n```\n\n----------------------------------------\n\nTITLE: Working with iframe Elements in DrissionPage\nDESCRIPTION: Shows how to find and interact with iframe elements using get_frame() method. This approach is recommended over using ele() for iframes as it provides better IDE support and additional capabilities for locating iframes by index, id, or name.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\niframe = page.get_frame(1)  # Get the first iframe element on the page\niframe = page.get_frame('#theFrame')  # Get the iframe element object with the id \"theFrame\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Address in Python using DrissionPage\nDESCRIPTION: Demonstrates how to retrieve the page address and port controlled by the current ChromiumPage object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_page_info.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(page.address)\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration File to Project Directory\nDESCRIPTION: Example of copying the default configuration file to the current project directory using Python.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/ini_file.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import configs_to_here\n\nconfigs_to_here()\n```\n\n----------------------------------------\n\nTITLE: Removing Command Line Arguments for Browser Startup in Python\nDESCRIPTION: This example demonstrates how to remove command line arguments from the browser startup configuration using the remove_argument() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Removing the --start-maximized argument\nco.remove_argument('--start-maximized')\n# Removing the --window-size argument\nco.remove_argument('--window-size')\n```\n\n----------------------------------------\n\nTITLE: Converting Table Elements to S Mode in DrissionPage\nDESCRIPTION: Shows how to convert specific page elements from d mode to s mode for faster processing, specifically demonstrating with table elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Get the table element on the page\nele = page.ele('tag:table')\n# Convert the element to s mode element\nele = ele.s_ele()\n# Get all row elements\nrows = ele.eles('tag:tr')\n```\n\n----------------------------------------\n\nTITLE: Upgrading DrissionPage to Latest Version\nDESCRIPTION: Command to upgrade an existing DrissionPage installation to the latest stable version using pip with the --upgrade flag.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install DrissionPage --upgrade\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Timeouts in DrissionPage\nDESCRIPTION: Example of setting base and page load timeout values.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npage.set.timeouts(base=10, page_load=30)\n```\n\n----------------------------------------\n\nTITLE: Initializing DrissionPage with Custom INI Path\nDESCRIPTION: Demonstrates how to initialize WebPage with custom ini file paths using relative paths for both Chromium and Session options\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/packaging.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage, ChromiumOptions, SessionOptions\n\nco = ChromiumOptions(ini_path=r'.\\configs.ini')\nso = SessionOptions(ini_path=r'.\\configs.ini')\npage = WebPage(chromium_options=co, session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Accessing Driver Object in Python\nDESCRIPTION: The `driver` property returns the `Driver` object used by the current page object. This allows direct access to the underlying driver for advanced operations or custom implementations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_page_info.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef driver(self) -> Driver:\n    # Implementation not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Loading DrissionPage with Default Configuration\nDESCRIPTION: Example of initializing a WebPage object using the default configuration file.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/ini_file.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\npage = WebPage()\n```\n\n----------------------------------------\n\nTITLE: Example of Enabling Exception Raising for Missing Elements\nDESCRIPTION: Demonstrates setting DrissionPage to raise exceptions when elements are not found instead of returning NoneElement. The example attempts to find a non-existent element on the Baidu homepage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/settings.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\nfrom DrissionPage.common import Settings\n\nSettings.raise_when_ele_not_found = True\n\npage = SessionPage()\npage.get('https://www.baidu.com')\nele = page('#abcd')\n```\n\n----------------------------------------\n\nTITLE: Multiple Attribute OR Selection Examples\nDESCRIPTION: Shows how to use multiple attribute selectors with OR conditions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Find elements with the id attribute equal to \"one\" or the id attribute equal to \"two\"\nele2 = ele1.ele('@|id=one@|id=two')\n\nele = page.ele('tag:div@|class=p_cls@|name=row1')\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse Relative to Current Position in DrissionPage\nDESCRIPTION: This example shows how to move the mouse a certain distance relative to its current position using the move() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nac.move(300, 0)\n```\n\n----------------------------------------\n\nTITLE: Importing ChromiumOptions for Browser Configuration\nDESCRIPTION: Import the ChromiumOptions class to configure browser startup options. These settings only affect the browser when it's launched and won't change an already running browser's configuration.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Attribute Value\nDESCRIPTION: Demonstrates retrieving a specific attribute value from an element\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.attr('id'))\n```\n\n----------------------------------------\n\nTITLE: Creating SessionPage with Custom Configuration in Python\nDESCRIPTION: This code shows how to create a SessionPage object using a custom configuration. It uses SessionOptions to set proxy information before initializing the SessionPage object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/create_page_object.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage, SessionOptions\n\n# Create a configuration object and set the proxy information\nso = SessionOptions().set_proxies(http='127.0.0.1:1080')\n# Create the page object using this configuration\npage = SessionPage(session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Auto-Port Configuration for Multiple Browsers - Python\nDESCRIPTION: Creates multiple ChromiumPage instances using auto_port() for automatic port assignment.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage, ChromiumOptions\n\nco1 = ChromiumOptions().auto_port()\nco2 = ChromiumOptions().auto_port()\n\npage1 = ChromiumPage(addr_or_opts=co1)\npage2 = ChromiumPage(addr_or_opts=co2)\n\npage1.get('https://www.baidu.com')\npage2.get('http://www.163.com')\n```\n\n----------------------------------------\n\nTITLE: Launching Browser with DrissionPage CLI\nDESCRIPTION: Commands for launching the browser and waiting for program control, with port specification where 0 means use the value from the configuration file.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Full format\ndp --launch-browser 9333\n\n# Abbreviated format\ndp -l 0\n```\n\n----------------------------------------\n\nTITLE: Disabling Smooth Scrolling in DrissionPage (Python)\nDESCRIPTION: Shows how to disable smooth scrolling for web pages using the set.scroll.smooth() method. This is recommended to ensure more predictable scrolling behavior.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\npage.set.scroll.smooth(on_off=False)\n```\n\n----------------------------------------\n\nTITLE: Page Refresh Operation\nDESCRIPTION: Shows how to refresh the current page using the refresh() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage.refresh()  # Refresh the page\n```\n\n----------------------------------------\n\nTITLE: Defining DataPacket Object Properties in Markdown\nDESCRIPTION: A markdown table defining the properties of the DataPacket object, including their names, data types, and descriptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|   Property Name   |  Data Type  | Description                    |\n|:--------------:|:----------:|----------------------------|\n|    `tab_id`    |   `str`    | ID of the tab that made the request |\n|   `frameId`    |   `str`    | ID of the frame that made the request |\n|    `target`    |   `str`    | Listening target that made the request |\n|     `url`      |   `str`    | URL of the data packet request |\n|    `method`    |   `str`    | Type of request |\n|  `is_failed`   |   `bool`   | Whether the connection failed |\n| `resourceType` |   `str`    | Type of resource |\n|   `request`    | `Request`  | Object that holds request information |\n|   `response`   | `Response` | Object that holds response information |\n|  `fail_info`   | `FailInfo` | Object that holds connection failure information |\n```\n\n----------------------------------------\n\nTITLE: Importing Settings for Global Configuration\nDESCRIPTION: Import the Settings class to configure global runtime behavior, such as exception handling when elements are not found. This affects how the library operates across all instances.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Settings\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in SessionOptions\nDESCRIPTION: Example of setting the entire headers dictionary in a SessionOptions object, which will override the original headers.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nso.set_headers = {'user-agent': 'Mozilla/5.0 (Macint...', 'connection': 'keep-alive' ...}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Download to Begin\nDESCRIPTION: Shows how to wait for a download to start after clicking a download link, which is necessary for capturing the download task.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\npage('t:a').click()  # Click a link that triggers the download\npage.wait.download_begin()\n```\n\n----------------------------------------\n\nTITLE: Creating SessionPage without ini File in Python\nDESCRIPTION: This code shows how to create a SessionPage object without using an ini file. It sets the configuration directly in the code by setting read_file to False in SessionOptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/create_page_object.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage, SessionOptions\n\nso = SessionOptions(read_file=False)  # Set `read_file` to False\nso.set_retry(5)\npage = SessionPage(so)\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Port Allocation for Browser in Python\nDESCRIPTION: This snippet shows how to enable automatic port allocation for the browser using the auto_port() method of ChromiumOptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nco.auto_port(True)\n```\n\n----------------------------------------\n\nTITLE: Getting Element HTML Content\nDESCRIPTION: Demonstrates retrieving the outerHTML of an element using the html attribute\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.html)\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top in Python with DrissionPage\nDESCRIPTION: Demonstrates how to use the scroll.to_top() method to scroll an element to the top while maintaining its horizontal position.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npage.scroll.to_top()\n```\n\n----------------------------------------\n\nTITLE: Error Output When Element Not Found Exception is Raised\nDESCRIPTION: Shows the error message generated when the raise_when_ele_not_found setting is enabled and an element is not found on the page.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/settings.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n...omitted...\nDrissionPage.errors.ElementNotFoundError: \nElement not found.\nmethod: ele()\nargs: {'locator': '#abcd'}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Object Properties in Markdown\nDESCRIPTION: A markdown table defining the properties of the Request object, including their names, data types, and descriptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Property Name | Data Type | Description |\n| ------------- | --------- | ----------- |\n| `headers` | `CaseInsensitiveDict` | Returns headers data as a case-insensitive dictionary |\n| `postData` | `str`<br/>`dict` | Data submitted for requests of type post |\n```\n\n----------------------------------------\n\nTITLE: Text Matching for Element Selection in Python\nDESCRIPTION: Shows various ways to select elements based on their text content using DrissionPage's text matching operators.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Find the element with text \"第二行\"\nele2 = ele1.ele('text=第二行')\n\n# Find the element with text containing \"第二\"\nele2 = ele1.ele('text:第二')\n\n# Equivalent to the previous line\nele2 = ele1.ele('第二')\n```\n\nLANGUAGE: python\nCODE:\n```\nele2 = page.ele('text:text:')\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Cache in DrissionPage\nDESCRIPTION: Example showing how to clear browser cache while excluding cookies.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npage.clear_cache(cookies=False)  # Clear everything except cookies\n```\n\n----------------------------------------\n\nTITLE: Setting Load Strategy for ChromiumPage in Python\nDESCRIPTION: This example demonstrates how to set the load strategy for ChromiumPage to 'eager' mode. It sets the strategy and then navigates to a URL using the get() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.load_strategy.eager()\npage.get('https://g1879.gitee.io/drissionpagedocs')\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow Root Elements with Simplified Syntax in DrissionPage (Python)\nDESCRIPTION: Example showing how to access shadow DOM elements using the simplified '.sr' property instead of the longer '.shadow_root' syntax. This improves code readability in chain operations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/simplify.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntxt = ele.sr('t:div').text\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Text Content\nDESCRIPTION: Demonstrates retrieving unformatted raw text content from an element\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.raw_text)\n```\n\n----------------------------------------\n\nTITLE: Muting Browser in ChromiumOptions\nDESCRIPTION: This method sets whether the browser should be muted. It can be useful for silent operation or when running automated tests.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nco.mute(True)\n```\n\n----------------------------------------\n\nTITLE: Using Other HTTP Request Methods with DrissionPage\nDESCRIPTION: Shows how to access the internal Session object to use HTTP methods beyond get() and post() that aren't directly exposed by DrissionPage, such as HEAD, OPTIONS, PUT, etc.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/visit_web_page.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\n# Get the builtin session object\nsession = page.session\n# Send a request using the head method\nresponse = session.head('https://www.baidu.com')\nprint(response.headers)\n```\n\n----------------------------------------\n\nTITLE: Loading DrissionPage with Custom Configuration Files\nDESCRIPTION: Example of loading custom configuration files using ChromiumOptions and SessionOptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/ini_file.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions, SessionOptions, WebPage\n\nco = ChromiumOptions(ini_path=r'D:\\setting.ini')\nso = SessionOptions(ini_path=r'D:\\setting.ini')\n\npage = WebPage(chromium_options=co, session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers in DrissionPage\nDESCRIPTION: Example of setting custom request headers for the browser.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nh = {'connection': 'keep-alive', 'accept-charset': 'GB2312,utf-8;q=0.7,*;q=0.7'}\npage.set.headers(headers=h)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy in DrissionPage\nDESCRIPTION: Examples of setting different page load strategies.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npage.set.load_strategy.normal()\npage.set.load_strategy.eager()\npage.set.load_strategy.none()\n```\n\n----------------------------------------\n\nTITLE: Installing DrissionPage via pip\nDESCRIPTION: Command to install DrissionPage using pip package manager. This is the standard method for installing the library in Python environments.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install DrissionPage\n```\n\n----------------------------------------\n\nTITLE: Using System Browser User Directory\nDESCRIPTION: Configures ChromiumPage to use the system's default browser user directory for accessing existing user data and plugins.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage, ChromiumOptions\n\nco = ChromiumOptions().use_system_user_path()\npage = ChromiumPage(co)\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Headers in SessionOptions\nDESCRIPTION: Example of setting individual header items using set_a_header method, which allows adding or modifying specific header values.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nso.set_a_header('accept', 'text/html')\nso.set_a_header('Accept-Charset', 'GB2312')\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Previous Elements with befores() Method in Python\nDESCRIPTION: Examples of using the befores() method to retrieve multiple nodes that appear before the current element. Shows how to get all preceding elements or filter them by specific tag names.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# Get all elements before ele1\neles = ele1.befores()\n\n# Get all div elements before ele1\ndivs = ele1.befores('tag:div')\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser Methods\nDESCRIPTION: Key methods and properties added across versions for browser interaction and control\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/history/3.x.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndownload_set\nwait_download_begin()\nget_tab()\nset_paths()\nset_headers()\nchange_mode()\nwait_loading()\ns_ele()\nrun_js()\nrun_async_js()\nm_click()\nr_hold()\nr_release()\nm_hold()\nm_release()\n```\n\n----------------------------------------\n\nTITLE: Setting Element Properties in Python with DrissionPage\nDESCRIPTION: Shows how to use the set.prop() method to set a property attribute of an element. It requires the property name and value as parameters.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nele.set.prop('value', 'Hello world!')\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse Upwards in DrissionPage\nDESCRIPTION: This snippet demonstrates how to move the mouse upwards by a specified number of pixels using the up() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nac.up(50)\n```\n\n----------------------------------------\n\nTITLE: Accessing Timeout Settings in ChromiumOptions for Python\nDESCRIPTION: This snippet shows how to access the timeout settings property of ChromiumOptions. It returns a dictionary containing base, pageLoad, and script timeout values.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nprint(co.timeouts)\n```\n\n----------------------------------------\n\nTITLE: Setting Element Attributes in Python with DrissionPage\nDESCRIPTION: Demonstrates the use of the set.attr() method to set an attribute of an element. It requires the attribute name and value as parameters.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nele.set.attr('href', 'http://www.gitee.com')\n```\n\n----------------------------------------\n\nTITLE: Getting Element Text Content\nDESCRIPTION: Shows how to retrieve formatted text content from an element\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.text)\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy in SessionOptions\nDESCRIPTION: Example of configuring a proxy server for HTTP requests in the SessionOptions object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nso.set_proxies('http://127.0.0.1:1080')\n```\n\n----------------------------------------\n\nTITLE: Configuring DrissionPage to Raise Exceptions Immediately for Missing Elements\nDESCRIPTION: Demonstrates how to configure DrissionPage to immediately throw an exception when an element is not found, rather than returning a NoneElement object. This setting applies globally.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/not_found.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Settings\n\nSettings.raise_when_ele_not_found = True\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse Left in DrissionPage\nDESCRIPTION: This example shows how to move the mouse left by a specified number of pixels using the left() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nac.left(50)\n```\n\n----------------------------------------\n\nTITLE: Managing Download Tasks\nDESCRIPTION: Demonstrates how to monitor and manage download tasks using Mission objects\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/DownloadKit.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmission = page.download.add('http://xxxx.pdf')\nprint(mission.id)  # Get the task ID\nprint(mission.rate)  # Print the download progress (percentage)\nprint(mission.state)  # Print the task status\nprint(mission.info)  # Print the task information\nprint(mission.result)  # Print the task result\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Locator Syntax in DrissionPage (Python)\nDESCRIPTION: Examples demonstrating the simplified syntax for element location in DrissionPage. The code shows how to find elements by tag, XPath, and text content using both original and shortened syntax forms.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/simplify.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Find elements with tag div\nele = page.ele('tag:div')  # Original syntax\nele = page('t:div')  # Simplified syntax\n\n# Find elements with xpath\nele = page.ele('xpath://xxxxx')  # Original syntax\nele = page('x://xxxxx')  # Simplified syntax\n\n# Find elements with text 'something'\nele = page.ele('text=something')  # Original syntax\nele = page('tx=something')  # Simplified syntax\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to New Tabs in DrissionPage 4.0\nDESCRIPTION: Illustrates the new method for creating and switching to new tabs in DrissionPage 4.0, replacing the old 'to_tab()' function with 'new_tab()' and 'get_tab()'.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ------ Old code ------\ntab = page.new_tab(switch_to=True)\n\n# ------ New code ------\ntab = page.new_tab()\n```\n\nLANGUAGE: python\nCODE:\n```\n# ------ Old code ------\npage.to_tab(page.tabs[1])\n\n# ------ New code ------\ntab = page.get_tab(1)  # Create a tab object that can be used in parallel with the page object\n```\n\n----------------------------------------\n\nTITLE: Chrome DevTools Protocol Command Execution\nDESCRIPTION: Shows how to execute Chrome DevTools Protocol commands, specifically stopping page loading.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Stop loading the page\npage.run_cdp('Page.stopLoading')\n```\n\n----------------------------------------\n\nTITLE: Managing Window Properties in DrissionPage\nDESCRIPTION: Examples of maximizing window and hiding browser window.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npage.set.window.max()\npage.set.window.hide()\n```\n\n----------------------------------------\n\nTITLE: Performing Right and Middle Clicks in DrissionPage\nDESCRIPTION: Shows how to perform right-clicks and middle-clicks on elements using the click.right() and click.middle() methods.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/element_operation.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nele.click.right()\n```\n\nLANGUAGE: python\nCODE:\n```\nele.click.middle()\n```\n\n----------------------------------------\n\nTITLE: Generic Wait Method Example\nDESCRIPTION: Example of using the generic wait method, which is equivalent to time.sleep().\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npage.wait(1)  # Wait for 1 second forcefully\n\nimport time\ntime.sleep(1)  # No difference with this line\n```\n\n----------------------------------------\n\nTITLE: Accessing the Response Object for Advanced Operations\nDESCRIPTION: Demonstrates how to access the underlying Response object from the requests library for operations not directly implemented in DrissionPage, such as checking HTTP status codes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_page_info.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Print connection status\nr = page.response\nprint(r.status_code)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mission Objects\nDESCRIPTION: Shows how to retrieve specific mission objects using mission ID\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/DownloadKit.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmission_id = mission.id\nmission = page.download.get_mission(mission_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Tab-Specific Download Path\nDESCRIPTION: Shows how to set a download path for a specific Tab object, which only affects downloads triggered by that tab.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\ntab = page.get_tab(page.tabs[1])  # Create a Tab object\ntab.set.download_path(r'C:\\tmp1')  # Set the Tab download path\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts in ChromiumOptions\nDESCRIPTION: This method sets various timeout values for operations like page loading and script execution. It allows fine-tuning the waiting times for different browser operations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nco.set_timeouts(base=10)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Previous Sibling Elements in Python using DrissionPage\nDESCRIPTION: Examples of using the prev() method to retrieve sibling elements before the current element. Demonstrates various ways to filter and select specific previous sibling nodes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Get the first sibling element before ele1\nele2 = ele1.prev()\n\n# Get the third sibling element before ele1\nele2 = ele1.prev(3)\n\n# Get the third sibling div element before ele1\nele2 = ele1.prev(3, 'tag:div')\n\n# Get the text of the first text node before ele1\ntxt = ele1.prev(1, 'xpath:text()')\n```\n\n----------------------------------------\n\nTITLE: Comparing Element Objects in DrissionPage\nDESCRIPTION: Example demonstrating how to compare two element objects using the equality operator to check if they refer to the same element.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nele1 = page('t:div')\nele2 = page('t:div')\nprint(ele1==ele2)  # Outputs True\n```\n\n----------------------------------------\n\nTITLE: Clicking Right Mouse Button on Element in DrissionPage\nDESCRIPTION: This snippet demonstrates how to click the right mouse button on a specific element using the r_click() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nac.r_click('#div1')\n```\n\n----------------------------------------\n\nTITLE: Removing Headers in SessionOptions\nDESCRIPTION: Example of removing a specific header setting from the SessionOptions configuration using the remove_a_header method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nso.remove_a_header('accept')\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to SessionElement with make_session_ele() in Python\nDESCRIPTION: Demonstrates how to use the make_session_ele() function to convert HTML text into a SessionElement object, which allows for static element manipulation.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/tools.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import make_session_ele\n\nhtml = '''\n<html><body><div>abc</div></body></html>\n'''\nele = make_session_ele(html)\nprint(ele.text)\n```\n\n----------------------------------------\n\nTITLE: Element Object Initialization Example\nDESCRIPTION: Example showing how to initialize and use element waiting methods.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('http://g1879.gitee.io/drissionpagedocs/')\nele = page('tag:div')\nele.wait.covered()\n```\n\n----------------------------------------\n\nTITLE: New Version Element Search with Default Values\nDESCRIPTION: Demonstrates the new simplified approach to handling missing elements using default values.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.set.NoneElement_value('没找到')\nfor li in page.eles('t:li'):\n    name = li('.name').text\n    age = li('.age').text\n    phone = li('.phone').text\n```\n\n----------------------------------------\n\nTITLE: Keyboard Key Press Example\nDESCRIPTION: Demonstrates two ways to press the ENTER key using key_down() method\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Keys\n\nac.key_down('ENTER')  # Input the key name\n\nac.key_down(Keys.ENTER)  # Get the key from Keys\n```\n\n----------------------------------------\n\nTITLE: Saving DrissionPage Configuration Settings\nDESCRIPTION: Example of modifying and saving configuration settings to different locations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/ini_file.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n\nco = ChromiumOptions()\n\n# Modify some settings\nco.no_imgs()\n\n# Save to the currently opened ini file\nco.save()\n# Save to a specified location for the configuration file\nco.save(r'D:\\config1.ini')\n# Save to the default configuration file\nco.save_to_default()\n```\n\n----------------------------------------\n\nTITLE: Refreshing iframe Content in Python\nDESCRIPTION: This code demonstrates how to refresh the content of an iframe using the refresh() method of the ChromiumFrame object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\niframe.refresh()\n```\n\n----------------------------------------\n\nTITLE: Output Example for Network Data Capture in DrissionPage\nDESCRIPTION: This shows the output from the previous code example, displaying the URLs of network data packets captured when clicking through pagination pages.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhttps://gitee.com/explore/all?page=2\nhttps://gitee.com/explore/all?page=3\nhttps://gitee.com/explore/all?page=4\nhttps://gitee.com/explore/all?page=5\nhttps://gitee.com/explore/all?page=6\n```\n\n----------------------------------------\n\nTITLE: Saving ChromiumOptions Configuration to File in Python\nDESCRIPTION: These snippets demonstrate how to save ChromiumOptions configurations to INI files. The save() method allows saving to a specified path or the current configuration file, while save_to_default() saves to the default INI file.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Save the currently read ini file\nco.save()\n\n# Save the current configuration to the specified path\nco.save(path=r'D:\\tmp\\settings.ini')\n```\n\nLANGUAGE: python\nCODE:\n```\nco.save_to_default()\n```\n\n----------------------------------------\n\nTITLE: Initializing DrissionPage Without INI File\nDESCRIPTION: Example of configuring DrissionPage without using an ini file by setting options directly in code and using read_file=False\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/packaging.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage, ChromiumOptions, SessionOptions\n\nco = ChromiumOptions(read_file=False)  # Create a new configuration object without reading the file\nco.set_browser_path(r'.\\chrome.exe')  # Enter the configuration information\nso = SessionOptions(read_file=False)\n\npage = WebPage(chromium_options=co, session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Relative Element Positioning in Python\nDESCRIPTION: Demonstrates methods for selecting elements relative to a given element, such as parents and children.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Get the second level parent element of ele1\nele2 = ele1.parent(2)\n\n# Get the element with id \"id1\" in the parent element of ele1\nele2 = ele1.parent('#id1')\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout and Retry for ChromiumPage in Python\nDESCRIPTION: This code shows how to set custom timeout, retry, and interval values when using the get() method of ChromiumPage. It navigates to a specific URL with 1 retry, 1-second interval, and 1.5-second timeout.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://g1879.gitee.io/drissionpagedocs', retry=1, interval=1, timeout=1.5)\n```\n\n----------------------------------------\n\nTITLE: Setting Window Dimensions in DrissionPage\nDESCRIPTION: Examples of setting window size and position.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npage.set.window.size(500, 500)\npage.set.window.location(500, 500)\n```\n\n----------------------------------------\n\nTITLE: Mouse Button Hold Example\nDESCRIPTION: Demonstrates how to hold down the left mouse button on an element using the hold() method\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nac.hold('#div1')\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Experiment Flags\nDESCRIPTION: Shows how to set experimental Chrome flags using the new ChromiumOptions API.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n\nco = ChromiumOptions()\nco.set_flag('temporary-unexpire-flags-m118', '1')\nco.set_flag('disable-accelerated-2d-canvas')\n```\n\n----------------------------------------\n\nTITLE: Creating SessionOptions Object in Python\nDESCRIPTION: Example of creating a basic SessionOptions object that reads configuration from an ini file by default.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionOptions\n\nso = SessionOptions()\n```\n\n----------------------------------------\n\nTITLE: Enabling Exception Raising for Not Found Elements\nDESCRIPTION: Shows how to configure DrissionPage to raise exceptions when elements are not found, instead of returning NoneElement objects.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/3_2.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\nfrom DrissionPage.easy_set import raise_when_ele_not_found\n\nraise_when_ele_not_found(True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Sibling Elements in Python using DrissionPage\nDESCRIPTION: Examples of using the next() method to retrieve sibling elements after the current element. Demonstrates various ways to filter and select specific sibling nodes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Get the first sibling element after ele1\nele2 = ele1.next()\n\n# Get the third sibling element after ele1\nele2 = ele1.next(3)\n\n# Get the third sibling div element after ele1\nele2 = ele1.next('tag:div', 3)\n\n# Get the text of the first text node after ele1\ntxt = ele1.next('xpath:text()', 1)\n```\n\n----------------------------------------\n\nTITLE: Accessing History Items Through Shadow Root in Chrome\nDESCRIPTION: Example showing how to access browser history items through multiple levels of shadow root elements using DrissionPage. The code navigates to Chrome's history page and prints the first page of history items.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('chrome://history/')\n\nitems = page('#history-app').sr('#history').sr.eles('t:history-item')\nfor i in items:\n    print(i.sr('#item-container').text.replace('\\n', ''))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Previous Sibling Elements in Python using DrissionPage\nDESCRIPTION: Examples of using the prevs() method to retrieve multiple sibling elements before the current element. Shows how to get all preceding siblings or filter by specific criteria.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Get all preceding sibling elements of ele1\neles = ele1.prevs()\n\n# Get all preceding sibling div elements of ele1\ndivs = ele1.prevs('tag:div')\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration File to Current Directory\nDESCRIPTION: Shows how to use the configs_to_here() utility to automatically copy the configuration file to the current project directory\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/packaging.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import configs_to_here\n\nconfigs_to_here()\n```\n\n----------------------------------------\n\nTITLE: Exact Matching Example\nDESCRIPTION: Demonstrates exact matching using the = operator to find elements with specific attribute values.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get the element with name attribute 'row1'\nele = page.ele('@name=row1')\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration via Command Line\nDESCRIPTION: Command line instruction to copy the configuration file to the current project directory.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/ini_file.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndp --configs-to-here\n```\n\n----------------------------------------\n\nTITLE: Setting User Agent in ChromiumOptions for Python\nDESCRIPTION: This snippet demonstrates how to set the user agent using the set_user_agent() method of ChromiumOptions. It allows customization of the browser's user agent string.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nco.set_user_agent(user_agent='Mozilla/5.0 (Macintos.....')\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Matching Example\nDESCRIPTION: Shows fuzzy matching using the : operator to find elements containing specific text.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get the element with name attribute containing 'row1'\nele = page.ele('@name:row1')\n```\n\n----------------------------------------\n\nTITLE: Comparing File Download in Requests vs DrissionPage\nDESCRIPTION: This snippet compares the process of downloading a file using both requests and DrissionPage. DrissionPage provides a simpler API with built-in functionality for saving files with custom names and handling filename conflicts.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/features_demos/compare_with_requests.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\n\n# Using requests:\nr = requests.get(url)\nwith open(f'{save_path}\\\\img.png', 'wb') as fd:\n   for chunk in r.iter_content():\n       fd.write(chunk)\n\n# Using DrissionPage:\npage.download(url, save_path, 'img')  # Supports renaming, handles filename conflicts\n```\n\n----------------------------------------\n\nTITLE: Using get_src() Method in DrissionPage\nDESCRIPTION: Example of using the get_src() method to retrieve the source from an image element in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimg = page('tag:img')\nsrc = img.get_src()\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Elements with before() Method in Python\nDESCRIPTION: Examples of using the before() method to find specific elements or nodes that appear before the current element. Demonstrates different filtering approaches including index-based selection, tag filtering, and XPath text node selection.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# Get the second element before ele1\nele2 = ele1.before(index=2)\n\n# Get the third div element before ele1\nele2 = ele1.before('tag:div', 3)\n\n# Get the text of the first text node before ele1\ntxt = ele1.before('xpath:text()', 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Path with DrissionPage CLI\nDESCRIPTION: Commands for setting the browser path in the DrissionPage configuration file, shown in both full and abbreviated formats.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Full format\ndp --set-browser-path D:\\chrome\\Chrome.exe\n\n# Abbreviated format\ndp -p D:\\chrome\\Chrome.exe\n```\n\n----------------------------------------\n\nTITLE: End With Matching Example\nDESCRIPTION: Shows matching at the end using the $ operator.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Get the element with name attribute ending with 'w1'\nele = page.ele('@name$w1')\n```\n\n----------------------------------------\n\nTITLE: Start With Matching Example\nDESCRIPTION: Demonstrates matching at the beginning using the ^ operator.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get the element with name attribute starting with 'row1'\nele = page.ele('@name^ro')\n```\n\n----------------------------------------\n\nTITLE: Generating Relationship Diagram for DrissionPage Objects\nDESCRIPTION: This diagram illustrates the generation relationships between various objects used in the DrissionPage library. It shows the hierarchy and connections between different page types, elements, and configuration objects.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/usage_introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├─ SessionPage\n|     └─ SessionElement\n|           └─ SessionElement\n├─ ChromiumPage\n|     ├─ ChromiumTab\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumFrame\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumElement\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     └─ ChromiumShadowElement\n|           └─ ChromiumElement\n|           └─ SessionElement\n├─ WebPage\n|     ├─ ChromiumTab\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumFrame\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumElement\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     ├─ ChromiumShadowElement\n|     |     └─ ChromiumElement\n|     |     └─ SessionElement\n|     └─ SessionElement\n|           └─ SessionElement\n├─ SessionOptions\n└─ ChromiumOptions\n```\n\n----------------------------------------\n\nTITLE: Tab IDs Output in Shell\nDESCRIPTION: Sample output showing the list of tab IDs returned by the tabs property.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n['0B300BEA6F1F1F4D5DE406872B79B1AD', 'B838E91F38121B32940B47E8AC59D015']\n```\n\n----------------------------------------\n\nTITLE: Element Location Comparison - Sibling Elements\nDESCRIPTION: Compares element location syntax between DrissionPage and Selenium for finding sibling elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# DrissionPage\nele1 = ele.next()  # Get the next element\nele1 = ele.prev(index=2)  # Get the second previous element\n\n# selenium\nele1 = ele.find_element(By.XPATH, './/following-sibling::*')  # Get the next element\nele1 = ele.find_element(By.XPATH, './/preceding-sibling::*[2]')  # Get the second previous element\n```\n\n----------------------------------------\n\nTITLE: Browser Launch Command - Shell\nDESCRIPTION: Command line configuration for launching Chrome browser with remote debugging enabled.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"D:\\chrome.exe\" --remote-debugging-port=9222 --remote-allow-origins=*\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in SessionOptions\nDESCRIPTION: Example of setting cookie information in a SessionOptions object, which will overwrite all previously set cookie information.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncookies = ['key1=val1; domain=xxxx', 'key2=val2; domain=xxxx']\nso.set_cookies(cookies)\n```\n\n----------------------------------------\n\nTITLE: Renaming Downloaded Files\nDESCRIPTION: Demonstrates how to set a custom file name before triggering a download, which renames the file once the download is complete.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\npage.set.download_file_name('new_file')\npage('t:a').click()  # Click a link that triggers the download\npage.wait.download_begin()\npage.wait.all_download_done()  # Remember to wait for the task to trigger and end\n```\n\n----------------------------------------\n\nTITLE: Importing ChromiumOptions in Python\nDESCRIPTION: This snippet shows how to import the ChromiumOptions class from the DrissionPage library.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n```\n\n----------------------------------------\n\nTITLE: Class Definitions\nDESCRIPTION: Core classes introduced or modified in the DrissionPage framework\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/history/3.x.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nChromiumPage\nChromiumOptions\nSessionOptions\nWebPage\nChromiumFrame\nSessionElement\nSessionPage\nChromiumTab\nActionChains\n```\n\n----------------------------------------\n\nTITLE: Basic Link Element Count with DrissionPage\nDESCRIPTION: Demonstrates counting all <a> elements on a webpage using the standard dynamic element method\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/accelerate_reading.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://www.163.com')\nprint(len(page('t:body').eles('t:a')))\n```\n\n----------------------------------------\n\nTITLE: Removing All Extensions in ChromiumOptions\nDESCRIPTION: This method removes all saved plugin paths in the configuration object. It's useful when you want to reset or change the set of extensions being used.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nco.remove_extensions()\n```\n\n----------------------------------------\n\nTITLE: Class Selector Examples\nDESCRIPTION: Shows different ways to use class selectors for finding elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Find the element with the class attribute equal to \"p_cls\"\nele2 = ele1.ele('.p_cls')\n\n# Find the element with the class attribute starting with \"_cls\"\nele2 = ele1.ele('.^_cls')\n```\n\n----------------------------------------\n\nTITLE: Baidu Search Input Example\nDESCRIPTION: Example of navigating to Baidu and entering search text using actions\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\np = ChromiumPage()\np.get('https://www.baidu.com')\np.actions.click('#kw').input('DrissionPage')\n```\n\n----------------------------------------\n\nTITLE: Getting Tab Count in Python\nDESCRIPTION: Example showing how to get the number of open tabs using the tabs_count property.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(page.tabs_count)\n```\n\n----------------------------------------\n\nTITLE: Element Not Found Error Example in Python\nDESCRIPTION: Demonstrates the improved error messaging when an element is not found in the chain of element searches.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage(timeout=1)\npage.get('https://baidu.com')\nprint(page('#wrapper')('#s_tab')('#abcd').text)  # The element with ('#abcd') does not exist\n```\n\n----------------------------------------\n\nTITLE: Dynamic Element Iteration Performance Test\nDESCRIPTION: Shows the performance of iterating through link elements using the standard dynamic element method with timing measurement\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/accelerate_reading.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\nfrom TimePinner import Pinner  # Import the timing tool\n\npinner = Pinner()  # Create a timer object\npage = ChromiumPage()\npage.get('https://www.163.com')\n\npinner.pin()  # Mark the start of recording\n\n# Get all link objects and iterate through them\nlinks = page('t:body').eles('t:a')\nfor lnk in links:\n    print(lnk.text)\n\npinner.pin('Time Elapsed')  # Record and print the time elapsed\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse Right in DrissionPage\nDESCRIPTION: This snippet demonstrates how to move the mouse right by a specified number of pixels using the right() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nac.right(50)\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name\nDESCRIPTION: Demonstrates retrieving the tag name of an element\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.tag)\n```\n\n----------------------------------------\n\nTITLE: Getting All Tab Information in Python\nDESCRIPTION: Example showing how to get detailed information about all tabs using find_tabs with single=False parameter.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntabs = page.find_tabs(single=False)\nprint(tab)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Download Path\nDESCRIPTION: Demonstrates how to set the download path for the Page object, which affects all tabs that haven't specified their own paths.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/download/browser.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npage = ChromiumPage()\npage.set.download_path(r'C:\\tmp')\n```\n\n----------------------------------------\n\nTITLE: Tab Count Output in Shell\nDESCRIPTION: Sample output showing the number of tabs returned by the tabs_count property.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n2\n```\n\n----------------------------------------\n\nTITLE: Old Version Element Search with Error Handling\nDESCRIPTION: Shows the old approach to handling missing elements when traversing a list of elements on a webpage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\nfor li in page.eles('t:li'):\n    ele = li('.name')\n    name = ele.text if ele else None\n    ele = li('.age')\n    age = ele.text if ele else None\n    ele = li('.phone')\n    phone = ele.text if ele else None\n```\n\n----------------------------------------\n\nTITLE: Importing Exception Classes\nDESCRIPTION: Import specific exceptions from the errors module to handle error cases in your automation scripts. ElementNotFoundError is shown as an example.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.errors import ElementNotFoundError\n```\n\n----------------------------------------\n\nTITLE: Clicking Middle Mouse Button on Element in DrissionPage\nDESCRIPTION: This example shows how to click the middle mouse button on a specific element using the m_click() method of the Actions object in DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nac.m_click('#div1')\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Interval for Network Connection Failures\nDESCRIPTION: Demonstrates how to adjust the waiting interval between retry attempts when a network connection fails. The default interval is 2 seconds.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_page_info.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Modify the waiting interval for retries\npage.retry_interval = 1.5\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Gitee Repository Collection\nDESCRIPTION: Example output showing the repository names and URLs collected from Gitee's explore pages using the SessionPage script.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/examples/data_packets.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n小熊派开源社区/BearPi-HM_Nano https://gitee.com/bearpi/bearpi-hm_nano\n明月心/PaddleSegSharp https://gitee.com/raoyutian/PaddleSegSharp\nRockChin/QChatGPT https://gitee.com/RockChin/QChatGPT\nTopIAM/eiam https://gitee.com/topiam/eiam\n\n...省略...\n```\n\n----------------------------------------\n\nTITLE: Tab ID Output in Shell\nDESCRIPTION: Sample output showing the tab ID returned when finding a tab with a specific URL.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n'8460E5D55BCA5798AF83BC4D243652A9'\n```\n\n----------------------------------------\n\nTITLE: Element Location Comparison - Text Content\nDESCRIPTION: Compares element location syntax between DrissionPage and Selenium for finding elements containing specific text.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# DrissionPage\nele = page('abc')\n\n# selenium\nele = driver.find_element(By.XPATH, '//*[contains(text(), \"abc\"]')\n```\n\n----------------------------------------\n\nTITLE: Importing Derived Object Types\nDESCRIPTION: Import derived object types for type checking during development. These include various element types, tabs, and frames that are generated from Page objects.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.items import SessionElement\nfrom DrissionPage.items import ChromiumElement\nfrom DrissionPage.items import ShadowRoot\nfrom DrissionPage.items import NoneElement\nfrom DrissionPage.items import ChromiumTab\nfrom DrissionPage.items import WebPageTab\nfrom DrissionPage.items import ChromiumFrame\n```\n\n----------------------------------------\n\nTITLE: Selenium Approach to iframe Element Access for Comparison\nDESCRIPTION: Shows the traditional Selenium approach to accessing elements within nested iframes for comparison with DrissionPage's simpler approach. This requires explicit frame switching before and after element access.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/more.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndriver = webdriver.Chrome()\ndriver.switch_to.frame(0)\ndriver.switch_to.frame(0)\nele = driver.find_element(By.ID, 'abc')\ndriver.switch_to.default_content()\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure with Nested iframes\nDESCRIPTION: This HTML snippet demonstrates the structure of a page with nested iframe elements, used as an example throughout the guide.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Runoob.com</title>\n</head>\n\n<body>\n<iframe id=\"sss\" src=\"https://www.runoob.com\">\n    <p>Your browser does not support iframe tags.</p>\n</iframe>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Path with Configuration Save\nDESCRIPTION: Code to set and save the browser executable path in the DrissionPage configuration file for future use.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/before_start.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n\npath = r'D:\\Chrome\\Chrome.exe'  # Please change to the executable file path of Chrome on your computer\nChromiumOptions().set_browser_path(path).save()\n```\n\n----------------------------------------\n\nTITLE: Finding Elements Inside iframe in Python\nDESCRIPTION: This code shows how to find elements inside an iframe using the obtained ChromiumFrame object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nele = iframe('Home')\nprint(ele)\n```\n\n----------------------------------------\n\nTITLE: Tab Information Output in Shell\nDESCRIPTION: Sample output showing the detailed information for all tabs, including ID, title, URL, and other properties.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n[{'description': '',\n  'devtoolsFrontendUrl': '/devtools/inspector.html?ws=127.0.0.1:9222/devtools/page/8460E5D55BCA5798AF83BC4D243652A9',\n  'faviconUrl': 'https://www.baidu.com/img/baidu_85beaf5496f291521eb75ba38eacbd87.svg',\n  'id': '8460E5D55BCA5798AF83BC4D243652A9',\n  'title': '百度一下，你就知道',\n  'type': 'page',\n  'url': 'https://www.baidu.com/',\n  'webSocketDebuggerUrl': 'ws://127.0.0.1:9222/devtools/page/8460E5D55BCA5798AF83BC4D243652A9'}]\n```\n\n----------------------------------------\n\nTITLE: HTML Element Structure Example\nDESCRIPTION: Sample HTML div element structure used for demonstration throughout the documentation\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"div1\" class=\"divs\">Hello World!\n    <p>行元素</p>\n    <!--这是注释-->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific DrissionPage Version\nDESCRIPTION: Command to install a specific version of DrissionPage, in this case version 4.0.0b17, which may be needed for compatibility with certain projects.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install DrissionPage==4.0.0b17\n```\n\n----------------------------------------\n\nTITLE: Accessing Timeouts Dictionary in Python using DrissionPage\nDESCRIPTION: Demonstrates how to retrieve the timeouts dictionary containing base, page load, and script execution timeout values.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_page_info.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(page.timeouts)\n```\n\n----------------------------------------\n\nTITLE: Setting User Data Path with DrissionPage CLI\nDESCRIPTION: Commands for setting the browser user data path in the DrissionPage configuration file, shown in both full and abbreviated formats.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Full format\ndp --set-user-path D:\\chrome\\user_data\n\n# Abbreviated format\ndp -u D:\\chrome\\user_data\n```\n\n----------------------------------------\n\nTITLE: SessionPage Import Statement\nDESCRIPTION: Import statement for the DrissionPage SessionPage class used for HTTP requests.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/examples/data_packets.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n```\n\n----------------------------------------\n\nTITLE: Getting Element Comments\nDESCRIPTION: Demonstrates retrieving HTML comments from within an element\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.comments)\n```\n\n----------------------------------------\n\nTITLE: Accessing Tab Window Properties in DrissionPage 4.0\nDESCRIPTION: Shows how to access and manipulate tab window properties such as size, location, and state in DrissionPage 4.0, which now supports these operations for independent window tabs.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntab = page.get_tab(1)\nprint(tab.rect.window_state)  # Get the window state\nprint(tab.rect.window_location)  # Get the window location\nprint(tab.rect.window_size)  # Get the window size\n```\n\nLANGUAGE: python\nCODE:\n```\ntab.set.window.size(500, 500)  # Set window size\ntab.set.window.location(500, 500)  # Set window location\ntab.set.window.max()  # Maximize window\n```\n\n----------------------------------------\n\nTITLE: Keyboard Key Release Example\nDESCRIPTION: Shows different approaches to release the ENTER key using key_up() method\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Keys\n\nac.key_up('ENTER')  # Input the key name\n\nac.key_up(Keys.ENTER)  # Get the key from Keys\n```\n\n----------------------------------------\n\nTITLE: Getting Element Inner HTML\nDESCRIPTION: Shows how to get the innerHTML content of an element using the inner_html attribute\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.inner_html)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies from Multiple Domains\nDESCRIPTION: Shows how to retrieve cookies from all visited domains with detailed information. This example demonstrates accessing cookies after visiting multiple websites.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_page_info.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage\n\npage = SessionPage()\npage.get('http://www.baidu.com')\npage.get('http://gitee.com')\n\nfor i in page.get_cookies(as_dict=False, all_domains=True):\n    print(i)\n```\n\nLANGUAGE: shell\nCODE:\n```\n{'domain': '.baidu.com', 'domain_specified': True, ......}\n......\n{'domain': 'gitee.com', 'domain_specified': False, ......}\n......\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attributes\nDESCRIPTION: Shows how to retrieve all attributes of an element as a dictionary\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(ele.attrs)\n```\n\n----------------------------------------\n\nTITLE: Mouse Button Release Example\nDESCRIPTION: Shows how to release the left mouse button on a specific element\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nac.release('#div1')\n```\n\n----------------------------------------\n\nTITLE: Defining wait_extra_info Method Parameters in Markdown\nDESCRIPTION: A markdown table describing the parameters of the wait_extra_info() method, including their names, types, default values, and descriptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|   Parameter Name    |        Type         | Default | Description                    |\n|:---------------:|:-----------------:|:-------:|----------------------------|\n|     `timeout`    | `float`<br/>`None` |  `None` | Timeout duration, set to `None` for unlimited wait. |\n```\n\n----------------------------------------\n\nTITLE: Accessing State Information in DrissionPage 4.0\nDESCRIPTION: Shows how to access state information in DrissionPage 4.0, which has been consolidated into the 'states' attribute, replacing the previous individual attributes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# ------ Old Version Code ------\nprint(page.is_loading)\n\n# ------ New Version Code ------\nprint(page.states.is_loading)\n```\n\n----------------------------------------\n\nTITLE: Sample Output from DrissionPage Mode Switching Example\nDESCRIPTION: This shows the console output from the mode switching example. After searching for 'DrissionPage' on Gitee.com and extracting data in packet mode, the program retrieves and prints the title and description of each search result.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/examples/switch_mode.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ng1879/DrissionPage\nA web automation tool based on Python. It can control the browser and send/receive packets. It can combine the convenience of browser automation and the efficiency of requests. It has powerful features and built-in humanized designs and convenient functions. The syntax is concise and elegant, with minimal code.\n\nmirrors_g1879/DrissionPage\nDrissionPage\n\ng1879/DrissionPageDocs\nDocumentation for DrissionPage\n```\n\n----------------------------------------\n\nTITLE: SessionPage Page Access and Element Selection\nDESCRIPTION: Code fragments showing page access with SessionPage and CSS selector usage for finding repository elements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/examples/data_packets.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage = SessionPage()\n\nfor i in range(1, 4):\n    p.get(f'https://gitee.com/explore/all?page={i}')\n\n    links = p.eles('.title project-namespace-path')\n\n    for link in links:\n        print(link.text, link.link)\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Relative Positioning in DrissionPage (Python)\nDESCRIPTION: Examples of simplified relative positioning syntax where numerical index values can be passed directly as the first argument instead of using the named 'index' parameter, making the code more concise.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/simplify.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nele2 = ele1.parent(2)\nele2 = ele1.next(2)('tx=xxxxx')\nele2 = ele1.before(2)\n# and so on\n```\n\n----------------------------------------\n\nTITLE: Defining wait_extra_info Method Return Type in Markdown\nDESCRIPTION: A markdown table specifying the return type and description of the wait_extra_info() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Return Type | Description |\n| ----------- | ----------- |\n| `bool` | Whether it waits successfully |\n```\n\n----------------------------------------\n\nTITLE: Defining FailInfo Object Properties in Markdown\nDESCRIPTION: A markdown table defining the properties of the FailInfo object, including their names, data types, and descriptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Property Name | Data Type | Description |\n| ------------- | --------- | ----------- |\n| `errorText` | `str` | Error message text |\n| `canceled` | `bool` | Whether it is canceled |\n| `blockedReason` | `str` | Reasons for being blocked |\n| `corsErrorStatus` | `str` | CORS error status |\n```\n\n----------------------------------------\n\nTITLE: Element Location Comparison - Class Name\nDESCRIPTION: Compares element location syntax between DrissionPage and Selenium for finding elements by class name.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/basic_concept.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# DrissionPage\nele = page('.abc')\n\n# selenium\nele = driver.find_element(By.CLASS_NAME, 'abc')\n```\n\n----------------------------------------\n\nTITLE: Finding Tabs by URL in Python\nDESCRIPTION: Example showing how to find tabs that contain a specific URL string and create an object from the result.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://www.baidu.com')\n\ntab_id = page.find_tabs(url='baidu.com')\nprint(tab_id)\n```\n\n----------------------------------------\n\nTITLE: Importing SessionOptions for HTTP Configuration\nDESCRIPTION: Import the SessionOptions class to configure the Session object's parameters. This is used to set connection parameters for SessionPage or WebPage modes.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionOptions\n```\n\n----------------------------------------\n\nTITLE: Displaying Login Confirmation in Shell\nDESCRIPTION: This snippet shows the expected output after successfully logging in and switching modes. It displays the page title to confirm that the user has accessed their personal information page on Gitee.com.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/features/features_demos/switch_mode.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nLogged in title: Personal Information - Gitee.com\n```\n\n----------------------------------------\n\nTITLE: Using DrissionPage Command Line Format\nDESCRIPTION: Basic format for using the 'dp' command line interface of DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndp full command name or abbreviation <parameters>\n```\n\n----------------------------------------\n\nTITLE: Creating SessionPage from Specified ini File in Python\nDESCRIPTION: This snippet demonstrates how to create a SessionPage object using a configuration from a specific ini file. It specifies the path of the ini file when creating the SessionOptions object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/create_page_object.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionPage, SessionOptions\n\n# Specify the ini file path when creating the configuration object\nso = SessionOptions(ini_path=r'./config1.ini')\n# Create the page object using this configuration object\npage = SessionPage(session_or_options=so)\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output from Maoyan Movie Rankings Scraper\nDESCRIPTION: This CSV snippet shows the structure and format of the data collected by the Maoyan movie rankings scraper. Each row represents a movie, including its ranking, title, starring actors, release date, and score.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/demos/maoyan_TOP100.md#2025-04-22_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n1,I Am Not Madame Bovary,\"Starring: Fan Bingbing, Guo Tao, Zhang Jiayi\",Release Date: 2016-11-18,9.0\n2,Uncle Drew,\"Starring: Kyrie Irving, Lil Rel Howery, Shaquille O'Neal\",Release Date: 2018-06-29,8.6\n3,Escape Plan 2: Hades,\"Starring: Sylvester Stallone, Dave Bautista, Xiaoming Huang\",Release Date: 2018-06-29,6.5\n4,Pacific Rim: Uprising,\"Starring: John Boyega, Scott Eastwood, Cailee Spaeny\",Release Date: 2018-03-23,7.2\n5,Big Fish & Begonia,\"Starring: Ji Guanlin, Pan Shulan, Su Shangqing\",Release Date: 2016-07-08,8.3\n\nFollowing contents are omitted...\n```\n\n----------------------------------------\n\nTITLE: Copying Default Configuration File with DrissionPage CLI\nDESCRIPTION: Commands for copying the default configuration file to the current directory, shown in both full and abbreviated formats.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Full format\ndp --configs-to-here\n\n# Abbreviated format\ndp -c\n```\n\n----------------------------------------\n\nTITLE: Defining Response Object Properties in Markdown\nDESCRIPTION: A markdown table defining the properties of the Response object, including their names, data types, and descriptions.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/network_listener.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Property Name | Data Type | Description |\n| ------------- | --------- | ----------- |\n| `headers` | `CaseInsensitiveDict` | Returns headers data as a case-insensitive dictionary |\n| `body` | `str`<br/>`bytes`<br/>`dict` | Automatically converted if it is in json format, converted to base64 if it is an image format, directly returned as text for other formats |\n| `raw_body` | `str` | Unprocessed body text |\n```\n\n----------------------------------------\n\nTITLE: Relative Element Selection\nDESCRIPTION: Shows how to perform relative element selection using parent, next, and after methods.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nele = page.ele('#su')\n\nparent = ele.parent(2)  # Get the second level parent element of the ele element\nbrother = ele.next('tag:a')  # Get the first a element after the ele element\nafter = ele.after('tag:div')  # Get the first div element in the document after the ele element\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output Format\nDESCRIPTION: Example of the CSV output format showing how the scraped repository data is stored. Each row contains the category, repository name, and page number.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/demos/multithreading_with_tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nMachine Learning, MindSpore/mindspore, 1\nMachine Learning, PaddlePaddle/Paddle, 1\nMachine Learning, MindSpore/docs, 1\nMachine Learning, scruel/Notes-ML-AndrewNg, 1\nMachine Learning, MindSpore/graphengine, 1\nMachine Learning, inspur-inna/inna1.0, 1\nai, drinkjava2/人工生命, 1\nMachine Learning, MindSpore/course, 1\n\nMore content is omitted...\n```\n\n----------------------------------------\n\nTITLE: Tab Object ID Comparison Output in Shell\nDESCRIPTION: Output showing the difference in object IDs when using singleton mode versus non-singleton mode for Tab objects.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n2347582903056 2347582903056\n2347588741840 2347588877712\n```\n\n----------------------------------------\n\nTITLE: Importing SessionOptions in Python\nDESCRIPTION: Import statement for the SessionOptions class from DrissionPage library, which is used to manage the initialization configuration of the Session object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import SessionOptions\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History\nDESCRIPTION: Detailed version history documentation showing evolution of DrissionPage from v1.5 to v2.7.3, including feature additions, API changes, and improvements.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/history/2.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.5-v2.x\ndescription: DrissionPage Version History\n---\n\nVersion 1.5 to 2.x, control the browser based on selenium and use the author's homemade functions to send and receive data packets.\n\n## v2.7.3\n\n- Merged the `screenshot_as_bytes()` method of the page object and element object into `screenshot()`.\n- The `input()` method automatically converts non-text parameters to text input.\n\n[...remaining version history...]\n```\n\n----------------------------------------\n\nTITLE: Enabling Wait for Scroll Completion in DrissionPage (Python)\nDESCRIPTION: Demonstrates how to enable waiting for scroll completion before performing subsequent actions using the set.scroll.wait_complete() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\npage.set.scroll.wait_complete(on_off=True)\n```\n\n----------------------------------------\n\nTITLE: Saving Element Resources with save() Method\nDESCRIPTION: Example of using the save() method to save an image element's resource to a specified file path.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_element_info.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimg = page('tag:img')\nimg.save('D:\\\\img.png')\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Markdown format used to document version changes and feature additions in DrissionPage\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/history/1.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.4.0\n\n- In d mode, use js to handle xpath through the `evaluate()` method, abandoning the use of selenium's native methods in order to support directly obtaining text nodes and element attributes using xpath.\n- Added support in d mode to obtain element text and attributes using xpath.\n- Optimized and fixed minor issues.\n```\n\n----------------------------------------\n\nTITLE: Installing Old Version Package\nDESCRIPTION: Command to install the old version of DrissionPage (MixPage) using pip.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npip install MixPage\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Tab Instances in Python\nDESCRIPTION: Example showing how to configure DrissionPage to allow multiple Tab objects to control the same tab by disabling singleton mode.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Settings\n\nSettings.singleton_tab_obj = False\n```\n\n----------------------------------------\n\nTITLE: Page Scrolling Operations in DrissionPage\nDESCRIPTION: Examples of various page scrolling operations.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npage.scroll.to_top()\npage.scroll.to_location(300, 50)\npage.scroll.up(30)\n```\n\n----------------------------------------\n\nTITLE: Passing Control Between SessionPage Objects in Python\nDESCRIPTION: This snippet demonstrates how to pass control between multiple SessionPage objects by sharing the same Session object. It creates two page objects and passes the Session from one to another.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/create_page_object.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a page object\npage1 = SessionPage()\n# Get the built-in Session object from the page object\nsession = page1.session\n# Pass the session object when initializing the second page object\npage2 = SessionPage(session_or_options=session)\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Strategy in ChromiumOptions for Python\nDESCRIPTION: This snippet shows how to set the load strategy using a ChromiumOptions object when initializing ChromiumPage. It sets the load mode to 'none' before creating the page object.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/visit_web_page.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions, ChromiumPage\n\nco = ChromiumOptions().set_load_mode('none')\npage = ChromiumPage(co)\n```\n\n----------------------------------------\n\nTITLE: Disabling JavaScript in ChromiumOptions\nDESCRIPTION: This method sets whether JavaScript should be disabled in the browser. It can be useful for testing or specific browsing scenarios where JavaScript is not desired.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/browser_options.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nco.no_js(True)\n```\n\n----------------------------------------\n\nTITLE: Temporary Browser Path Configuration\nDESCRIPTION: Code to temporarily set and test a different browser path without saving to configuration.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/before_start.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage, ChromiumOptions\n\npath = r'D:\\Chrome\\Chrome.exe'  # Please change to the executable file path of Chrome on your computer\nco = ChromiumOptions().set_browser_path(path)\npage = ChromiumPage(co)\npage.get('http://g1879.gitee.io/DrissionPageDocs')\n```\n\n----------------------------------------\n\nTITLE: Scrolling iframe Element in Python\nDESCRIPTION: Demonstrates how to scroll the iframe element down by 300 pixels using the ChromiumFrame object's scroll method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/frame_operation.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\niframe.scroll.down(300)\n```\n\n----------------------------------------\n\nTITLE: Closing Other Browser Tabs Example\nDESCRIPTION: Example demonstrating how to close tabs except for specified ones using close_other_tabs()\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Close all tabs except the current tab\npage.close_other_tabs()\n\n# Close all tabs except the first tab\npage.close_other_tabs(page.tab[0])\n\n# Close tabs except for specified IDs\nreserve_list = ('0B300BEA6F...', 'B838E91...')\npage.close_other_tabs(reserve_list)\n```\n\n----------------------------------------\n\nTITLE: Modifying Retry Times for Network Connection Failures\nDESCRIPTION: Shows how to modify the number of retry attempts when a network connection fails. By default, SessionPage will attempt to reconnect 3 times before giving up.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_page_info.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Modify the number of retries\npage.retry_times = 5\n```\n\n----------------------------------------\n\nTITLE: Multi-tab Automation Example\nDESCRIPTION: Example showing how to handle multiple tabs while scraping data from Gitee's recommended projects page\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumPage\n\npage = ChromiumPage()\npage.get('https://gitee.com/explore/all')\n\nlinks = page.eles('t:h3')\nfor link in links[:-1]:\n    # Click the link\n    link.click()\n    # Wait for the new tab to appear\n    page.wait.new_tab()\n    # Get the new tab object\n    new_tab = page.get_tab(0)\n    # Wait for the new tab to load\n    new_tab.wait.load_start()\n    # Print the title of the tab\n    print(new_tab.title)\n    # Close all tabs except the list page\n    page.close_other_tabs()\n```\n\n----------------------------------------\n\nTITLE: Element Position and Size Access Changes in Python\nDESCRIPTION: Shows the changes in accessing element position and size information, moving from separate attributes to a unified rect attribute.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ------ Old code ------\nele.size\nele.location\nele.locations.midpoint\n\n# ------ New code ------\nele.rect.size\nele.rect.location\nele.rect.midpoint\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for ChromiumPage in Python\nDESCRIPTION: Shows how to set the default timeout for various operations when creating a ChromiumPage object or modifying it later.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/get_page_info.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Specify when creating the page object\npage = ChromiumPage(timeout=5)\n\n# Modify the timeout\npage.timeout = 20\n```\n\n----------------------------------------\n\nTITLE: Using Latest Tab in Python\nDESCRIPTION: Example showing how to get the object of the latest activated tab using the latest_tab property.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Open a tab\nele.click()\n# Get the object of the latest tab\ntab = page.get_tab(page.latest_tab)  # Equivalent to page.get_tab(0)\n```\n\n----------------------------------------\n\nTITLE: Element Hidden State Wait Example\nDESCRIPTION: Example showing how to wait for an element to become hidden.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/waiting.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Wait for the element to be hidden for 3 seconds\nele.wait.hidden(timeout=3)\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Path via Command Line in DrissionPage\nDESCRIPTION: Demonstrates how to use the command line tool to set the browser path in the configuration file for DrissionPage.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/3_2.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndp --set-browser-path '/Application/Goolge Chrome.app/Contents/MacOS/Google Chrome'\n```\n\n----------------------------------------\n\nTITLE: Importing DrissionPage Exceptions\nDESCRIPTION: Shows how to import all exceptions from the DrissionPage.errors module. This import statement makes all custom exceptions available for use in error handling.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/advance/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.errors import *\n```\n\n----------------------------------------\n\nTITLE: Query Syntax Example\nDESCRIPTION: Demonstrates basic query syntax for finding elements using different selectors.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/usage.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Find the element with the id attribute equal to \"one\" on the page\nele1 = page.ele('#one')\n\n# Find the element within ele1 that has an id attribute containing the text \"ne\"\nele2 = ele1.ele('#:ne')\n```\n\n----------------------------------------\n\nTITLE: Wait Action Example\nDESCRIPTION: Demonstrates how to pause the action chain for a specified duration\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nac.wait(3)\n```\n\n----------------------------------------\n\nTITLE: Sample HTML Structure\nDESCRIPTION: Example HTML structure used for demonstrating element selection techniques.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_elements/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n<div id=\"one\">\n    <p class=\"p_cls\" name=\"row1\">First line</p>\n    <p class=\"p_cls\" name=\"row2\">Second line</p>\n    <p class=\"p_cls\">Third line</p>\n</div>\n<div id=\"two\">\n    Second div\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Closing Multiple Browser Tabs Example\nDESCRIPTION: Example showing how to close current tab and multiple specific tabs using the close_tabs() method\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/tab_operation.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Close the current tab\npage.close_tabs()\n\n# Close the 1st and 3rd tabs\ntabs = page.tabs\npage.close_tabs(tabs_or_ids=(tabs[0], tabs[2]))\n```\n\n----------------------------------------\n\nTITLE: Setting Session Storage in DrissionPage\nDESCRIPTION: Example of setting a session storage item with a key-value pair.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/page_operation.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npage.set_session_storage(item='abc', value='123')\n```\n\n----------------------------------------\n\nTITLE: Using Updated Element Locator Syntax in DrissionPage 4.0\nDESCRIPTION: Demonstrates the new element locator syntax in DrissionPage 4.0, which uses '@!' for negation instead of '@@-' or '@|-' for improved clarity and flexibility.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/whatsnew/4_0.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ------ Old syntax ------\npage.ele('@@arg1=abc@@-arg2=def')\n# ------ New syntax ------\npage.ele('@@arg1=abc@!arg2=def')\n\n# ------ Old syntax ------\npage.ele('t:div@|arg1=abc@|-arg2=def')\n# ------ New syntax ------\npage.ele('t:div@|arg1=abc@!arg2=def')\n\n# ------ Old syntax ------\npage.ele('@@-arg1=abc')\n# ------ New syntax ------\npage.ele('@!arg1=abc')\n```\n\n----------------------------------------\n\nTITLE: Configuration Properties\nDESCRIPTION: Configuration properties and settings for browser initialization and control\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/history/3.x.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbrowser_path\ntimeout\nsession_options\nexperimental_options\nprefs\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Path via Command Line\nDESCRIPTION: Shell command to set the browser path using DrissionPage's command-line interface.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/before_start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndp -p D:\\Chrome\\chrome.exe\n```\n\n----------------------------------------\n\nTITLE: Saving SessionOptions Configuration to Default File in Python\nDESCRIPTION: Shows how to save SessionOptions configuration to the default INI file built into DrissionPage using the save_to_default() method.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/session_options.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nso.save_to_default()\n```\n\n----------------------------------------\n\nTITLE: Browser Connection Error Message\nDESCRIPTION: Shows the error message displayed when browser connection conflicts occur.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nDrissionPage.errors.BrowserConnectError: \nFailed to connect to 127.0.0.1:9222.\nPlease make sure:\n1. The port belongs to a browser.\n2. '--remote-debugging-port=9222' flag has been added as a startup option.\n3. There is no conflict with an already open browser in the user's folder.\n4. For headless systems, '--headless=new' parameter should be added.\n5. For Linux systems, '--no-sandbox' startup parameter might also be required.\nYou can set the port and user folder path using ChromiumOptions.\n```\n\n----------------------------------------\n\nTITLE: Saving System User Path Configuration\nDESCRIPTION: Saves the system user path configuration to an ini file for persistent settings.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/ChromiumPage/create_page_object.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import ChromiumOptions\n\nChromiumOptions().use_system_user_path().save()\n```\n\n----------------------------------------\n\nTITLE: Importing Actions for Action Sequences\nDESCRIPTION: Import the Actions class to create sequences of browser actions. This is already built into browser page objects but can be imported separately if needed.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/get_start/import.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage.common import Actions\n```\n\n----------------------------------------\n\nTITLE: Creating WebPage Objects with Default Configuration\nDESCRIPTION: Example showing how to create WebPage objects in both default browser mode ('d') and request mode ('s') using the default configuration from the ini file.\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/WebPage/create_page_object.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom DrissionPage import WebPage\n\n# Create an object in d mode by default\npage = WebPage()\n\n# Create an object in s mode\npage = WebPage('s')\n```\n\n----------------------------------------\n\nTITLE: Getting Element Texts Method\nDESCRIPTION: Shows how to get texts from direct child nodes with optional filtering\nSOURCE: https://github.com/g1879/drissionpage/blob/master/docs_en/SessionPage/get_element_info.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(e.texts())\nprint(e.texts(text_node_only=True))\n```"
  }
]