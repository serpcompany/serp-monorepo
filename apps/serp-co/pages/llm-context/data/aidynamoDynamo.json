[
  {
    "owner": "ai-dynamo",
    "repo": "dynamo",
    "content": "TITLE: Installing Dynamo with System Prerequisites\nDESCRIPTION: Commands to install system dependencies, set up a Python virtual environment, and install the Dynamo package with all optional components.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\nDEBIAN_FRONTEND=noninteractive apt-get install -yq python3-dev python3-pip python3-venv libucx0\npython3 -m venv venv\nsource venv/bin/activate\n\npip install ai-dynamo[all]\n```\n\n----------------------------------------\n\nTITLE: Starting Disaggregated Serving Deployment\nDESCRIPTION: Command to start a disaggregated serving deployment using Dynamo serve. This deploys a configuration where prefill and decode operations are performed by separate workers that can scale independently.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $DYNAMO_HOME/examples/llm\ndynamo serve graphs.disagg:Frontend -f ./configs/disagg.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamo CLI and Setting Up Python Environment\nDESCRIPTION: This snippet shows how to install the necessary dependencies, create a Python virtual environment, and install the Dynamo package with all its optional dependencies. It installs required system packages, sets up a virtual environment, and uses pip to install the Dynamo tool.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\nDEBIAN_FRONTEND=noninteractive apt-get install -yq python3-dev python3-pip python3-venv libucx0\npython3 -m venv venv\nsource venv/bin/activate\n\npip install ai-dynamo[all]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamo Service Class in Python\nDESCRIPTION: Comprehensive example of a Dynamo service class implementation, including dependency injection, async initialization, shutdown hooks, and endpoint definition.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ServiceB\n\n@service(dynamo={\"enabled\": True, \"namespace\": \"dynamo\"}, resources={\"gpu\": 1})\nclass ServiceA:\n    # Define service dependencies\n    service_b = depends(ServiceB)\n\n    def __init__(self, model_name=\"meta-llama/Llama-3.1-8B-Instruct\"):\n        self.model_name = model_name\n        self.engine = None\n\n    @async_on_start\n    async def async_init(self):\n        # Initialize resources that require async operations\n        self.engine = await initialize_model_engine(self.model_name)\n        print(f\"ServiceA initialized with model: {self.model_name}\")\n\n    @async_on_shutdown\n    async def async_shutdown(self):\n        # Clean up resources\n        if self.engine:\n            await self.engine.shutdown()\n            print(\"ServiceA engine shut down\")\n\n    @dynamo_endpoint()\n    async def generate(self, request: ChatCompletionRequest):\n        # Call dependent service\n        processed_request = await self.service_b.preprocess(request)\n\n        # Use the engine to generate a response\n        response = await self.engine.generate(processed_request)\n        return response\n```\n\n----------------------------------------\n\nTITLE: Running LLM Model Locally with Dynamo\nDESCRIPTION: Command to run a Hugging Face model locally using Dynamo's run command with the vLLM backend.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndynamo run out=vllm deepseek-ai/DeepSeek-R1-Distill-Llama-8B\n```\n\n----------------------------------------\n\nTITLE: Starting Aggregated Serving Deployment\nDESCRIPTION: Command to start an aggregated serving deployment using Dynamo serve. This deploys a configuration where prefill and decode operations are performed by the same worker.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd $DYNAMO_HOME/examples/llm\ndynamo serve graphs.agg:Frontend -f ./configs/agg.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo with Model Path and Custom Arguments\nDESCRIPTION: Complete command example showing model loading, parallelism configuration, and custom arguments. This demonstrates real-world usage with TensorRT-LLM.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run out=pystr:my_engine.py /opt/models/Llama-3.2-3B-Instruct/ --model-name llama_3.2 --tensor-parallel-size 4 -- -n 1\n```\n\n----------------------------------------\n\nTITLE: Starting Dynamo LLM Serving Components\nDESCRIPTION: Command to start a minimal Dynamo configuration with an HTTP server, round-robin router, and a worker using the specified graph and configuration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/llm\ndynamo serve graphs.agg:Frontend -f configs/agg.yaml\n```\n\n----------------------------------------\n\nTITLE: Sending a Request to Dynamo's OpenAI-compatible API\nDESCRIPTION: Curl command to send a chat completion request to the Dynamo server using the OpenAI-compatible API endpoint.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8000/v1/chat/completions   -H \"Content-Type: application/json\"   -d '{\n    \"model\": \"deepseek-ai/DeepSeek-R1-Distill-Llama-8B\",\n    \"messages\": [\n    {\n        \"role\": \"user\",\n        \"content\": \"Hello, how are you?\"\n    }\n    ],\n    \"stream\":false,\n    \"max_tokens\": 300\n  }' | jq\n```\n\n----------------------------------------\n\nTITLE: Starting Disaggregated Serving with KV Routing\nDESCRIPTION: Command to start a disaggregated serving deployment with KV Routing using Dynamo serve. This adds routing capabilities to the standard disaggregated deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd $DYNAMO_HOME/examples/llm\ndynamo serve graphs.disagg_router:Frontend -f ./configs/disagg_router.yaml\n```\n\n----------------------------------------\n\nTITLE: Running TensorRT-LLM with Dynamo\nDESCRIPTION: Command to load and run a TensorRT-LLM model with dynamo-run, using a configuration file. This shows how to integrate TensorRT-LLM with Dynamo.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndynamo run out=pystr:/workspace/examples/tensorrt_llm/engines/trtllm_engine.py  -- --engine_args /workspace/examples/tensorrt_llm/configs/llm_api_config.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing a Distributed Pipeline with Dynamo SDK in Python\nDESCRIPTION: Example Python code demonstrating how to build a three-component distributed pipeline using Dynamo SDK decorators and classes. The pipeline includes a Frontend service that exposes an API endpoint, a Middle service that processes requests, and a Backend service that performs final processing.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# filename: pipeline.py\n\nfrom dynamo.sdk import service, dynamo_endpoint, depends, api\nfrom pydantic import BaseModel\n\nclass RequestType(BaseModel):\n    text: str\n\n@service(resources={\"cpu\": \"1\"})\nclass Frontend:\n    middle = depends(Middle)\n\n    @api\n    async def generate(self, text: str):\n        request = RequestType(text=text)\n        async for response in self.middle.generate(request.model_dump_json()):\n            yield f\"Frontend: {response}\"\n\n@service(\n    resources={\"cpu\": \"1\"},\n    dynamo={\"enabled\": True, \"namespace\": \"inference\"}\n)\nclass Middle:\n    backend = depends(Backend)\n\n    @dynamo_endpoint()\n    async def generate(self, req: RequestType):\n        text = f\"{req.text}-mid\"\n        for token in text.split():\n            yield f\"Mid: {token}\"\n\n@service(\n    resources={\"cpu\": \"1\"},\n    dynamo={\"enabled\": True, \"namespace\": \"inference\"}\n)\nclass Backend:\n    @dynamo_endpoint()\n    async def generate(self, req: RequestType):\n        text = f\"{req.text}-back\"\n        for token in text.split():\n            yield f\"Backend: {token}\"\n```\n\n----------------------------------------\n\nTITLE: Submitting LLM Inference Request to Dynamo API\nDESCRIPTION: Example curl command to send a chat completion request to the Dynamo API endpoint, demonstrating how to interact with the deployed LLM model in a streaming fashion.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# this test request has around 200 tokens isl\n\ncurl <node1-ip>:8000/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: text/event-stream\" \\\n  -d '{\n    \"model\": \"nvidia/Llama-3.1-405B-Instruct-FP8\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"In the heart of Eldoria, an ancient land of boundless magic and mysterious creatures, lies the long-forgotten city of Aeloria. Once a beacon of knowledge and power, Aeloria was buried beneath the shifting sands of time, lost to the world for centuries. You are an intrepid explorer, known for your unparalleled curiosity and courage, who has stumbled upon an ancient map hinting at ests that Aeloria holds a secret so profound that it has the potential to reshape the very fabric of reality. Your journey will take you through treacherous deserts, enchanted forests, and across perilous mountain ranges. Your Task: Character Background: Develop a detailed background for your character. Describe their motivations for seeking out Aeloria, their skills and weaknesses, and any personal connections to the ancient city or its legends. Are they driven by a quest for knowledge, a search for lost familt clue is hidden.\"\n      }\n    ],\n    \"stream\": true,\n    \"max_tokens\": 300\n  }'\n```\n\n----------------------------------------\n\nTITLE: Disaggregated Serving with KV Routing\nDESCRIPTION: Commands to deploy disaggregated serving with KV routing using UCX.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/examples/tensorrt_llm\nTRTLLM_USE_UCX_KVCACHE=1 dynamo serve graphs.disagg_router:Frontend -f ./configs/disagg_router.yaml\n```\n\n----------------------------------------\n\nTITLE: Frontend Component Definition\nDESCRIPTION: Definition of the Frontend component that handles incoming HTTP requests with its service dependencies.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_serve.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Frontend:\n    worker = depends(VllmWorker)\n    worker_routerless = depends(VllmWorkerRouterLess)\n    processor = depends(Processor)\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Worker Component Definition\nDESCRIPTION: Definition of the VllmWorker component that handles LLM inference tasks.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_serve.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass VllmWorker:\n    prefill_worker = depends(PrefillWorker)\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Aggregated Serving with KV Routing\nDESCRIPTION: Commands to deploy aggregated serving with KV routing configuration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/examples/tensorrt_llm\ndynamo serve graphs.agg_router:Frontend -f ./configs/agg_router.yaml\n```\n\n----------------------------------------\n\nTITLE: Running a Dynamo Pipeline Locally\nDESCRIPTION: Command to serve a Dynamo pipeline locally using the Dynamo CLI, specifically starting the Frontend service which will automatically initialize the dependent services.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndynamo serve pipeline:Frontend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment Using Container\nDESCRIPTION: Commands to build and run the development container, compile the Rust components, and set up the Python environment for local development.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./container/build.sh\n./container/run.sh -it --mount-workspace\n\ncargo build --release\nmkdir -p /workspace/deploy/dynamo/sdk/src/dynamo/sdk/cli/bin\ncp /workspace/target/release/http /workspace/deploy/dynamo/sdk/src/dynamo/sdk/cli/bin\ncp /workspace/target/release/llmctl /workspace/deploy/dynamo/sdk/src/dynamo/sdk/cli/bin\ncp /workspace/target/release/dynamo-run /workspace/deploy/dynamo/sdk/src/dynamo/sdk/cli/bin\n\nuv pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dynamo Disaggregation Workflow with Mermaid Sequence Diagram\nDESCRIPTION: This diagram illustrates the sequence of operations in Dynamo's disaggregation process, showing interactions between the Worker, PrefillQueue, and PrefillWorker. It demonstrates the decision-making process for local or remote prefill, KV block allocation, and the flow of requests through the system.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/disagg_serving.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant D as Worker\n    participant Q as PrefillQueue\n    participant P as PrefillWorker\n\n    Note over D: Request is routed to decode\n    D->>D: Decide if prefill should be done locally or remotely\n\n        D->>D: Allocate KV blocks\n        D->>Q: Put RemotePrefillRequest on the queue\n\n        P->>Q: Pull request from the queue\n        P-->>D: Read cached KVs from Decode\n\n        D->>D: Decode other requests\n        P->>P: Run prefill\n        P-->>D: Write prefilled KVs into allocated blocks\n        P->>D: Send completion notification\n        Note over D: Notification received when prefill is done\n        D->>D: Schedule decoding\n```\n\n----------------------------------------\n\nTITLE: Disaggregated Serving Deployment\nDESCRIPTION: Commands to deploy disaggregated serving using UCX for KV cache transfer.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/examples/tensorrt_llm\nTRTLLM_USE_UCX_KVCACHE=1 dynamo serve graphs.disagg:Frontend -f ./configs/disagg.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo Docker Container\nDESCRIPTION: Command to run the Dynamo Docker container in interactive mode. This provides a working environment for the LLM deployment examples.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./container/run.sh -it\n```\n\n----------------------------------------\n\nTITLE: Deploying Pipeline with Helm\nDESCRIPTION: Commands to deploy the containerized pipeline using Helm chart with custom values and configurations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $PROJECT_ROOT/deploy/Kubernetes/pipeline\nexport HELM_RELEASE=hello-world-manual\ndynamo get frontend > pipeline-values.yaml\nhelm upgrade -i \"$HELM_RELEASE\" ./chart \\\n    -f pipeline-values.yaml \\\n    --set image=<TAG> \\\n    --set dynamoIdentifier=\"hello_world:Frontend\" \\\n    -n \"$NAMESPACE\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamo Service with Python Decorator\nDESCRIPTION: Example of using the @service decorator to define a Dynamo service with configuration options for Dynamo settings, resource requirements, and worker count.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@service(\n    dynamo={\n        \"enabled\": True,\n        \"namespace\": \"dynamo\",\n    },\n    resources={\"gpu\": 2, \"cpu\": \"10\", \"memory\": \"20Gi\"},\n    workers=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Aggregated Serving with KV Routing\nDESCRIPTION: Command to start an aggregated serving deployment with KV Routing using Dynamo serve. This adds routing capabilities to the standard aggregated deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd $DYNAMO_HOME/examples/llm\ndynamo serve graphs.agg_router:Frontend -f ./configs/agg_router.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo CLI Commands\nDESCRIPTION: Basic commands to get started with Dynamo CLI. It shows how to access help and run a specific model.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/container/launch_message.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> dynamo --help\n> dynamo run Qwen/Qwen2.5-3B-Instruct\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Pipeline\nDESCRIPTION: Commands to test the deployed pipeline by port forwarding and sending a test request to the API endpoint.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n ${NAMESPACE} port-forward svc/${HELM_RELEASE}-frontend 3000:80\ncurl -X 'POST' 'http://localhost:3000/generate' \\\n    -H 'accept: text/event-stream' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"text\": \"test\"}'\n```\n\n----------------------------------------\n\nTITLE: Starting Aggregated Serving with DeepSeek-R1 Model in Dynamo\nDESCRIPTION: Command to start the Dynamo deployment on the head node for aggregated serving of DeepSeek-R1 model using a specific configuration file that manages the multi-node tensor parallelism setup.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $DYNAMO_HOME/examples/llm\ndynamo serve graphs.agg:Frontend -f ./configs/multinode_agg_r1.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Image for Kubernetes Deployment\nDESCRIPTION: Commands to build the Dynamo image for Kubernetes deployment. This prepares the project and builds a tagged version of the Dynamo application for deployment to Kubernetes.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Set runtime image name\nexport DYNAMO_IMAGE=<dynamo_docker_image_name>\n\n# Prepare your project for deployment.\ncd $PROJECT_ROOT/examples/llm\nDYNAMO_TAG=$(dynamo build graphs.agg:Frontend | grep \"Successfully built\" |  awk '{ print $NF }' | sed 's/\\.$//')\n```\n\n----------------------------------------\n\nTITLE: Using Extra Engine Arguments with Dynamo\nDESCRIPTION: Command showing how to pass extra engine arguments to the sglang backend using a JSON configuration file. This allows customizing engine-specific parameters.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run out=sglang ~/llm_models/Llama-3.2-3B-Instruct --extra-engine-args sglang_extra.json\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Text with HuggingFace Tokenizer in Rust\nDESCRIPTION: This snippet shows how to encode text into token IDs and decode it back using a HuggingFace tokenizer. It demonstrates the use of the Encoder and Decoder traits from the dynamo_llm::tokenizers::traits module.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/llm/src/tokenizers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse dynamo_llm::tokenizers::{HuggingFaceTokenizer, traits::{Encoder, Decoder}};\n\nlet tokenizer = HuggingFaceTokenizer::from_file(\"tests/data/sample-models/TinyLlama_v1.1/tokenizer.json\")\n    .expect(\"Failed to load HuggingFace tokenizer\");\n\nlet text = \"Your sample text here\";\nlet encoding = tokenizer.encode(text)\n    .expect(\"Failed to encode text\");\n\nprintln!(\"Encoding: {:?}\", encoding);\n\nlet decoded_text = tokenizer.decode(&encoding.token_ids, false)\n    .expect(\"Failed to decode token IDs\");\n\nassert_eq!(text, decoded_text);\n```\n\n----------------------------------------\n\nTITLE: Using KVIndexer to Find Matched Blocks in Dynamo\nDESCRIPTION: Demonstrates how to initialize the KVIndexer and use it to find matched KV blocks across workers. The KVIndexer maintains a global view of cached blocks in a prefix tree and returns the number of matched blocks for each worker based on input tokens.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/kv_cache_routing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dynamo.llm import KvIndexer\nfrom dynamo.sdk import dynamo_context\n\nruntime = dynamo_context[\"runtime\"]\nkv_listener = runtime.namespace(\"dynamo\").component(\"VllmWorker\")\nawait kv_listener.create_service()\n\nindexer = KvIndexer(kv_listener, block_size=16)\nindexer.find_matches_for_request([INPUT SEQUENCE OF TOKEN IDs])\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend, Processor, Router, and VllmWorker on Node 1 in Dynamo\nDESCRIPTION: Command to start the frontend components on the first node using the aggregated router graph and a specific configuration file for the 405B model deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# node 1\ncd $DYNAMO_HOME/examples/llm\ndynamo serve graphs.agg_router:Frontend -f ./configs/multinode-405b.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying to Kubernetes with Dynamo CLI\nDESCRIPTION: Commands to deploy the built Dynamo image to a Kubernetes cluster. This creates a Dynamo deployment named 'llm-agg' using the specified configuration file.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho $DYNAMO_TAG\nexport DEPLOYMENT_NAME=llm-agg\ndynamo deployment create $DYNAMO_TAG --no-wait -n $DEPLOYMENT_NAME -f ./configs/agg.yaml\n```\n\n----------------------------------------\n\nTITLE: Launching Frontend, Processor and Router Services\nDESCRIPTION: Command to start the Frontend, Processor and Router services using the Dynamo serve command with the components graph.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd dynamo/examples/hello_world/disagg_skeleton\ndynamo serve components.graph:Frontend\n```\n\n----------------------------------------\n\nTITLE: Defining Service Dependencies with depends()\nDESCRIPTION: Example showing how to define service dependencies using the depends() method to create type-safe client connections between services.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_serve.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom components.worker import VllmWorker\n\nclass Processor:\n    worker = depends(VllmWorker)\n\n    # Now you can call worker methods directly\n    async def process(self, request):\n        result = await self.worker.generate(request)\n```\n\n----------------------------------------\n\nTITLE: Using KvMetricsAggregator to Monitor Worker Performance\nDESCRIPTION: Shows how to instantiate the KvMetricsAggregator and retrieve aggregated metrics from workers. The aggregator collects metrics like GPU cache usage, request queue size, and cache hit rates from all workers in the system.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/kv_cache_routing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dynamo.llm import KvMetricsAggregator\nfrom dynamo.sdk import dynamo_context\n\nruntime = dynamo_context[\"runtime\"]\nkv_listener = runtime.namespace(\"dynamo\").component(\"VllmWorker\")\nawait kv_listener.create_service()\nmetrics_aggregator = KvMetricsAggregator(kv_listener)\n\nfor endpoint in metrics_aggregator.get_metrics().endpoints:\n    print(\"Worker ID: \", endpoint.worker_id)\n    print(\"GPU Cache Usage: \", endpoint.gpu_cache_usage_perc)\n    print(\"Number of Requests Waiting: \", endpoint.num_requests_waiting)\n    print(\"GPU Prefix Cache Hit Rate: \", endpoint.gpu_prefix_cache_hit_rate)\n    print(\"***\")\n```\n\n----------------------------------------\n\nTITLE: Service Composition with depends() and link()\nDESCRIPTION: Example of how to compose services in Dynamo using the Processor component. Shows how dependencies are defined with depends() and can be modified at runtime with link().\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Processor(ProcessMixIn):\n    \"\"\"\n    vLLM pre and post processing\n    \"\"\"\n\n    worker = depends(VllmWorker)\n    router = depends(Router)\n\n    # logic for processing a request based on router or worker\n```\n\n----------------------------------------\n\nTITLE: Starting Disaggregated Services\nDESCRIPTION: Commands to start disaggregated services for benchmarking in the LLM example directory.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/examples/llm\ndynamo serve benchmarks.disagg:Frontend -f benchmarks/disagg.yaml 1> disagg.log 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Deploying Worker Service\nDESCRIPTION: Commands to deploy the Worker service on a node, setting up required environment variables and using Dynamo serve.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NATS_SERVER=\"nats://Node_1_IP_ADDRESS:4222\"\nexport ETCD_ENDPOINTS=\"http://Node_1_IP_ADDRESS:2379\"\ncd dynamo/examples/hello_world/disagg_skeleton\ndynamo serve components.worker:DummyWorker\n```\n\n----------------------------------------\n\nTITLE: Dynamic Graph Composition with link()\nDESCRIPTION: Shows how to dynamically compose services into a graph using the link() method to establish dependencies between components.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_serve.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom components.frontend import Frontend\nfrom components.processor import Processor\nfrom components.worker import VllmWorker\n\nFrontend.link(Processor).link(VllmWorker)\n```\n\n----------------------------------------\n\nTITLE: Linking Services to Modify the Dependency Graph\nDESCRIPTION: Shows how to use the link() method to modify the dependency graph at runtime, removing specific dependencies from a service.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nProcessor.link(Router)\n```\n\n----------------------------------------\n\nTITLE: Complete Service Definition with Configuration\nDESCRIPTION: A comprehensive example showing a service definition with default configuration in the @service decorator and additional configuration from ServiceConfig.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@service(\n    dynamo={\"enabled\": True, \"namespace\": \"default\"},\n    resources={\"gpu\": 1},\n    workers=1,\n)\nclass LLMService:\n    def __init__(self, model_name=\"gpt-2\", temperature=0.7, max_tokens=1024):\n        self.model_name = model_name\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n\n        # Get additional configuration\n        config = ServiceConfig.get_instance()\n        service_config = config.get(\"LLMService\", {})\n\n        # Extract service-specific parameters\n        self.cache_size = service_config.get(\"cache_size\", 1000)\n        self.use_kv_cache = service_config.get(\"use_kv_cache\", True)\n```\n\n----------------------------------------\n\nTITLE: Starting vLLM Baseline Services\nDESCRIPTION: Commands to start vLLM serve instances for baseline benchmarking with specific GPU configurations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCUDA_VISIBLE_DEVICES=0,1,2,3 vllm serve neuralmagic/DeepSeek-R1-Distill-Llama-70B-FP8-dynamic \\\n  --block-size 128 \\\n  --max-model-len 3500 \\\n  --max-num-batched-tokens 3500 \\\n  --tensor-parallel-size 4 \\\n  --gpu-memory-utilization 0.95 \\\n  --disable-log-requests \\\n  --port 8001 1> vllm_0.log 2>&1 &\nCUDA_VISIBLE_DEVICES=4,5,6,7 vllm serve neuralmagic/DeepSeek-R1-Distill-Llama-70B-FP8-dynamic \\\n  --block-size 128 \\\n  --max-model-len 3500 \\\n  --max-num-batched-tokens 3500 \\\n  --tensor-parallel-size 4 \\\n  --gpu-memory-utilization 0.95 \\\n  --disable-log-requests \\\n  --port 8002 1> vllm_1.log 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Deploying Prefill Worker for Disaggregated Serving\nDESCRIPTION: Commands to deploy the Prefill Worker on a separate node for the disaggregated serving example.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport NATS_SERVER=\"nats://Node_1_IP_ADDRESS:4222\"\nexport ETCD_ENDPOINTS=\"http://Node_1_IP_ADDRESS:2379\"\ncd dynamo/examples/hello_world/disagg_skeleton\ndynamo serve components.prefill_worker:PrefillWorker\n```\n\n----------------------------------------\n\nTITLE: Serving a Dynamo Service Locally\nDESCRIPTION: Examples of using the dynamo serve command to run a defined inference graph locally. Shows how to spin up all components and how to target a specific component in the graph.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\n# Spin up Frontend, Middle, and Backend components\ndynamo serve hello_world:Frontend\n\n# Spin up only the Middle component in the graph that is discoverable from the Frontend service\ndynamo serve  --service-name Middle hello_world:Frontend\n```\n\n----------------------------------------\n\nTITLE: Visualizing Efficient KV Transfer in Dynamo with Mermaid Sequence Diagram\nDESCRIPTION: This diagram shows the sequence of operations for efficient KV transfer in Dynamo's disaggregation process. It illustrates the interactions between Worker, WorkerScheduler, PrefillWorkerScheduler, and PrefillWorker, highlighting the use of NIXL for direct VRAM-to-VRAM KV cache transfer and non-blocking operations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/disagg_serving.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant D as Worker\n    participant SD as WorkerScheduler\n    participant SP as PrefillWorkerScheduler\n    participant P as PrefillWorker\n\n    Note over SD: KV blocks allocated\n    SD->>SP: Issue remote prefill request <br> with KV block descriptors via prefill queue\n    SP->>P: Add to in-flight batch\n\n    P-->>D: Remote NIXL read for prefix hit KV blocks (non-block)\n    P->>P: Execute prefill\n    P-->>D: Remote NIXL write for comptued KV blocks (non-block)\n\n    P->>SP: Notify finish\n    SP->>SD: Notify finish\n    SD->>D: Add to in-flight batch\n\n    D->>D: Execute decode\n```\n\n----------------------------------------\n\nTITLE: Aggregated Serving Deployment\nDESCRIPTION: Commands to deploy aggregated serving configuration using Dynamo.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/examples/tensorrt_llm\ndynamo serve graphs.agg:Frontend -f ./configs/agg.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting up Ray Cluster for Multi-Node Tensor Parallelism in Dynamo\nDESCRIPTION: Commands to start and verify a Ray cluster across multiple nodes to support tensor parallelism for large models like DeepSeek-R1, enabling vLLM to access resources collectively.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# head node\nray start --head --port=6379\n\n# example output and keep note of the IP address of the head node\n# Local node IP: <head-node-address>\n\n# set vLLM env arg\nexport VLLM_HOST_IP=<head-node-address>\n\n# other node\nray start  --address=<head-node-address>:6379\nexport VLLM_HOST_IP=<current-node-address>\n\n# verify the accessibility by checking aggregated GPU count shown in ray status\nray status\n\n# Expected/Sample output for 2 nodes:\n# ```bash\n# ======== Autoscaler status: 2025-04-16 15:35:42.751688 ========\n# Node status\n# ---------------------------------------------------------------\n# Active:\n#  1 node_<hash_1>\n#  1 node_<hash_2>\n# Pending:\n#  (no pending nodes)\n# Recent failures:\n#  (no failures)\n# Resources\n# ---------------------------------------------------------------\n# Usage:\n# XXX CPU\n# XXX GPU\n# XXX memory\n# XXX object_store_memory\n# Demands:\n#  (no resource demands)\n\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Service Archive for Deployment\nDESCRIPTION: Commands to set the Dynamo image name and build the service archive for deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport DYNAMO_IMAGE=<dynamo_docker_image_name>\n\ncd $PROJECT_ROOT/examples/hello_world\nDYNAMO_TAG=$(dynamo build hello_world:Frontend | grep \"Successfully built\" | awk -F\"\\\"\" '{ print $2 }')\n```\n\n----------------------------------------\n\nTITLE: Python Engine Implementation with OpenAI-compatible Streaming Response\nDESCRIPTION: Example of a Python engine implementing async generate function that yields OpenAI-compatible streaming responses. This demonstrates how to create a simple engine that returns tokens with simulated delay.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def generate(request):\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"The\",\"role\":\"assistant\"}}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n    await asyncio.sleep(0.1)\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" capital\",\"role\":\"assistant\"}}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n    await asyncio.sleep(0.1)\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" of\",\"role\":\"assistant\"}}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n    await asyncio.sleep(0.1)\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" France\",\"role\":\"assistant\"}}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n    await asyncio.sleep(0.1)\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" is\",\"role\":\"assistant\"}}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n    await asyncio.sleep(0.1)\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Paris\",\"role\":\"assistant\"}}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n    await asyncio.sleep(0.1)\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\",\"role\":\"assistant\"}}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n    await asyncio.sleep(0.1)\n    yield {\"id\":\"1\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"\",\"role\":\"assistant\"},\"finish_reason\":\"stop\"}],\"created\":1841762283,\"model\":\"Llama-3.2-3B-Instruct\",\"system_fingerprint\":\"local\",\"object\":\"chat.completion.chunk\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Prefill Worker on Secondary Nodes in Dynamo\nDESCRIPTION: Commands to start prefill workers on additional nodes with environment variables for NATS and ETCD endpoints to enable cross-node communication.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# node 2\nexport NATS_SERVER = '<your-nats-server-address>' # note this should start with nats://...\nexport ETCD_ENDPOINTS = '<your-etcd-endpoints-address>'\n\ncd $DYNAMO_HOME/examples/llm\ndynamo serve components.prefill_worker:PrefillWorker -f ./configs/multinode-405b.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting NATS/ETCD on Head Node with Docker Compose in Dynamo\nDESCRIPTION: Command to start NATS and ETCD services on the head node using Docker Compose. These services provide discovery and communication infrastructure for the distributed system.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# node 1\ndocker compose -f deploy/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Dynamo Service in Kubernetes\nDESCRIPTION: Commands to port-forward the deployed service and test it using cURL.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n ${KUBE_NS} port-forward svc/${HELM_RELEASE}-frontend 3000:3000\n\ncurl -X 'POST' 'http://localhost:3000/generate' \\\n    -H 'accept: text/event-stream' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"text\": \"test\"}'\n```\n\n----------------------------------------\n\nTITLE: Python Generate Function Interface\nDESCRIPTION: Required Python function signature for implementing a custom engine generator\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def generate(request):\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in Python Service Class\nDESCRIPTION: Shows how to access configuration values in a service using the ServiceConfig class. Demonstrates getting values with defaults, requiring specific values, and retrieving all service configuration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom dynamo.sdk.lib.config import ServiceConfig\n\nclass MyService:\n    def __init__(self):\n        config = ServiceConfig.get_instance()\n\n        # Get with default value\n        self.model_name = config.get(\"MyService\", {}).get(\"model_name\", \"deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B\")\n        self.temperature = config.get(\"MyService\", {}).get(\"temperature\", 0.7)\n\n        # Require a config value (raises error if missing)\n        self.api_key = config.require(\"MyService\", \"api_key\")\n\n        # Get all config for this service\n        all_my_config = config.get(\"MyService\", {})\n```\n\n----------------------------------------\n\nTITLE: Managing Token Sequences with Tokenizer in Rust\nDESCRIPTION: This snippet illustrates how to use the Sequence object for encoding and decoding text, as well as appending individual token IDs. It demonstrates the use of the Tokenizer and Sequence structs from dynamo_llm::tokenizers.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/llm/src/tokenizers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse dynamo_llm::tokenizers::{Sequence, Tokenizer};\nuse std::sync::{Arc, RwLock};\n\nlet tokenizer = Tokenizer::from(Arc::new(tokenizer));\nlet mut sequence = Sequence::new(tokenizer.clone());\n\nsequence.append_text(\"Your sample text here\")\n    .expect(\"Failed to append text\");\n\nlet delta = sequence.append_token_id(1337)\n    .expect(\"Failed to append token_id\");\n```\n\n----------------------------------------\n\nTITLE: Starting Required Services with Docker Compose\nDESCRIPTION: Command to start etcd and NATS services using Docker Compose as prerequisites for deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f deploy/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Example API Request to Test Deployment\nDESCRIPTION: cURL command to test the deployed inference graph by sending a chat completion request to the frontend service.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_serve.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8000/v1/chat/completions   -H \"Content-Type: application/json\"   -d '{\n    \"model\": \"deepseek-ai/DeepSeek-R1-Distill-Llama-8B\",\n    \"messages\": [\n    {\n        \"role\": \"user\",\n        \"content\": \"In the heart of Eldoria, an ancient land of boundless magic and mysterious creatures, lies the long-forgotten city of Aeloria. Once a beacon of knowledge and power, Aeloria was buried beneath the shifting sands of time, lost to the world for centuries. You are an intrepid explorer, known for your unparalleled curiosity and courage, who has stumbled upon an ancient map hinting at ests that Aeloria holds a secret so profound that it has the potential to reshape the very fabric of reality. Your journey will take you through treacherous deserts, enchanted forests, and across perilous mountain ranges. Your Task: Character Background: Develop a detailed background for your character. Describe their motivations for seeking out Aeloria, their skills and weaknesses, and any personal connections to the ancient city or its legends. Are they driven by a quest for knowledge, a search for lost familt clue is hidden.\"\n    }\n    ],\n    \"stream\":false,\n    \"max_tokens\": 30\n  }'\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Dynamo Kubernetes Deployment\nDESCRIPTION: Comprehensive documentation explaining the two deployment paths for Dynamo inference graphs: Dynamo Cloud Platform and Manual Deployment with Helm Charts. Includes links to detailed documentation and setup instructions.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Deploying Dynamo inference graphs to Kubernetes\n\n## Deployment Paths in Dynamo\n\nDynamo provides two distinct deployment paths, each serving different purposes:\n\n1. **Dynamo Cloud Platform** (`deploy/dynamo/helm/`)\n   - Contains the infrastructure components required for the Dynamo cloud platform\n   - Used when deploying with the `dynamo deploy` CLI commands\n   - Provides a managed deployment experience\n   - This README focuses on setting up this platform infrastructure\n   - For Dynamo cloud installation instructions, see [Installing Dynamo Cloud](./helm/README.md), which walks through installing and configuring the Dynamo cloud components on your Kubernetes cluster.\n\n2. **Manual Deployment with Helm Charts** (`deploy/Kubernetes/`)\n   - Used for manually deploying inference graphs to Kubernetes\n   - Contains Helm charts and configurations for deploying individual inference pipelines\n   - Documentation:\n        - [Deploying Dynamo Inference Graphs to Kubernetes using Helm](../Kubernetes/pipeline/README.md)\n        - [Dynamo Deploy Guide](../../docs/guides/dynamo_deploy.md)\n\nChoose the appropriate deployment path based on your needs:\n- Use `deploy/Kubernetes/` if you want to manually manage your inference graph deployments\n- Use `deploy/dynamo/helm/` if you want to use the Dynamo cloud platform and CLI tools\n\n## Hello World example\nSee [examples/hello_world/README.md#deploying-to-kubernetes-using-dynamo-cloud-and-dynamo-deploy-cli](../../examples/hello_world/README.md#deploying-to-kubernetes-using-dynamo-cloud-and-dynamo-deploy-cli)\n```\n\n----------------------------------------\n\nTITLE: Python Engine Request Structure for Token Processing\nDESCRIPTION: Example of the JSON request structure received by a Python engine in token-based processing mode. This includes token IDs, stop conditions, sampling options, and other metadata.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{'token_ids': [128000, 128006, 9125, 128007, ... lots more ... ], 'stop_conditions': {'max_tokens': 8192, 'stop': None, 'stop_token_ids_hidden': [128001, 128008, 128009], 'min_tokens': None, 'ignore_eos': None}, 'sampling_options': {'n': None, 'best_of': None, 'presence_penalty': None, 'frequency_penalty': None, 'repetition_penalty': None, 'temperature': None, 'top_p': None, 'top_k': None, 'min_p': None, 'use_beam_search': None, 'length_penalty': None, 'seed': None}, 'eos_token_ids': [128001, 128008, 128009], 'mdc_sum': 'f1cd44546fdcbd664189863b7daece0f139a962b89778469e4cffc9be58ccc88', 'annotations': []}\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFace Tokenizer in Rust\nDESCRIPTION: This snippet demonstrates how to initialize a HuggingFace tokenizer from a file. It uses the HuggingFaceTokenizer struct from the dynamo_llm::tokenizers::hf module.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/llm/src/tokenizers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse dynamo_llm::tokenizers::hf::HuggingFaceTokenizer;\n\nlet hf_tokenizer = HuggingFaceTokenizer::from_file(\"tests/data/sample-models/TinyLlama_v1.1/tokenizer.json\")\n    .expect(\"Failed to load HuggingFace tokenizer\");\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Dependencies\nDESCRIPTION: Command to start required services (NATS.io and etcd) using docker-compose\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/lib/bindings/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Completion Request\nDESCRIPTION: Example curl command to make a chat completion request to the HTTP API endpoint\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"model\": \"Llama-3.2-3B-Instruct-Q4_K_M\", \"max_completion_tokens\": 2049, \"messages\":[{\"role\":\"user\", \"content\": \"What is the capital of South Africa?\" }]}' -H 'Content-Type: application/json' http://localhost:8080/v1/chat/completions\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo with Token-based Processing\nDESCRIPTION: Command to run a Python engine with Dynamo handling the tokenization. In this mode, the engine receives and returns token IDs rather than raw text.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run out=pytok:/home/user/my_python_engine.py --model-path <hf-repo-checkout>\n```\n\n----------------------------------------\n\nTITLE: Creating a Client for Dynamo Component Endpoint in Python\nDESCRIPTION: Creates a client connection to the 'generate' endpoint of the 'VllmWorker' component within the 'dynamo' namespace, which enables sending requests to workers.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/kv_cache_routing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = namespace('dynamo').component('VllmWorker').endpoint('generate').client()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamo Service with YAML\nDESCRIPTION: YAML configuration file example for a Dynamo service, including service arguments and instance parameters.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nMyService:\n  # Override service decorator settings\n  ServiceArgs:\n    workers: 4\n    resources:\n      gpu: 4\n\n  # Service instance parameters\n  model_name: \"deepseek-ai/DeepSeek-R1-Distill-Llama-8B\"\n  temperature: 0.8\n```\n\n----------------------------------------\n\nTITLE: Starting NATS and ETCD Services\nDESCRIPTION: Docker Compose command to start the required NATS and ETCD services for the benchmarking environment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f deploy/docker_compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Running echo_core Engine with HTTP Input\nDESCRIPTION: Command to run the echo_core engine with HTTP input and a Hugging Face model path. This engine is useful for testing pre-processing functionality.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run in=http out=echo_core --model-path <hf-repo-checkout>\n```\n\n----------------------------------------\n\nTITLE: Running Python Engine with String Processing in Dynamo\nDESCRIPTION: Command example showing how to run a Python engine that handles string processing itself. This approach allows the Python engine to manage prompt templating and tokenization.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run out=pystr:/home/user/my_python_engine.py\n```\n\n----------------------------------------\n\nTITLE: Block Copy Function Signature in Rust\nDESCRIPTION: Function signature for copying blocks from one storage type to another. This async function takes destination and source KvBlock arrays with generic type parameters, allowing for specialized implementations based on storage types.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/kv_cache_manager.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npub async fn copy_blocks<D, S>(dst: &[KvBlock<D>], src: &[KvBlock<S>]) -> Result<()>;\n```\n\n----------------------------------------\n\nTITLE: Building and Containerizing a Dynamo Service\nDESCRIPTION: Command to package an inference graph and its dependencies using the dynamo build command, creating an archive that can be containerized.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/hello_world\ndynamo build hello_world:Frontend\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus and Grafana for Visualization\nDESCRIPTION: Command to start Prometheus and Grafana services using Docker Compose for visualizing the metrics being exposed by the metrics component.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f deploy/docker-compose.yml --profile metrics up -d\n```\n\n----------------------------------------\n\nTITLE: Running echo_full Engine with HTTP Input\nDESCRIPTION: Command to run the echo_full engine with HTTP input. This engine echoes the entire prompt back as the response, useful for debugging full request structures.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run in=http out=echo_full --model-name my_model\n```\n\n----------------------------------------\n\nTITLE: Running a Model with Dynamo CLI\nDESCRIPTION: Command to quickly chat with a model using the dynamo run command, which utilizes the dynamo-run Rust binary.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndynamo run deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B\n```\n\n----------------------------------------\n\nTITLE: DynamoService Implementation for ServiceArgs Processing\nDESCRIPTION: Shows the internal implementation of how ServiceArgs are processed by the DynamoService class. This retrieves configuration from environment variables and extracts service-specific arguments.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef _get_service_args(self, service_name: str) -> Optional[dict]:\n    \"\"\"Get ServiceArgs from environment config if specified\"\"\"\n    config_str = os.environ.get(\"DYNAMO_SERVICE_CONFIG\")\n    if config_str:\n        config = json.loads(config_str)\n        service_config = config.get(service_name, {})\n        return service_config.get(\"ServiceArgs\")\n    return None\n```\n\n----------------------------------------\n\nTITLE: Expected Output from the Dynamo Pipeline\nDESCRIPTION: The expected response from the Dynamo pipeline after processing the request, showing how the text is transformed through the pipeline components.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfederer-mid-back\n```\n\n----------------------------------------\n\nTITLE: Testing Kubernetes Deployment with Port Forwarding\nDESCRIPTION: Commands to test the Kubernetes deployment by port forwarding the service and sending a test request. This verifies that the deployment is working correctly by accessing the API endpoint through a local port.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Forward the service port to localhost\nkubectl -n ${KUBE_NS} port-forward svc/${DEPLOYMENT_NAME}-frontend 3000:3000\n\n# Test the API endpoint\ncurl localhost:3000/v1/chat/completions   -H \"Content-Type: application/json\"   -d '{\n    \"model\": \"deepseek-ai/DeepSeek-R1-Distill-Llama-8B\",\n    \"messages\": [\n    {\n        \"role\": \"user\",\n        \"content\": \"In the heart of Eldoria, an ancient land of boundless magic and mysterious creatures, lies the long-forgotten city of Aeloria. Once a beacon of knowledge and power, Aeloria was buried beneath the shifting sands of time, lost to the world for centuries. You are an intrepid explorer, known for your unparalleled curiosity and courage, who has stumbled upon an ancient map hinting at ests that Aeloria holds a secret so profound that it has the potential to reshape the very fabric of reality. Your journey will take you through treacherous deserts, enchanted forests, and across perilous mountain ranges. Your Task: Character Background: Develop a detailed background for your character. Describe their motivations for seeking out Aeloria, their skills and weaknesses, and any personal connections to the ancient city or its legends. Are they driven by a quest for knowledge, a search for lost familt clue is hidden.\"\n    }\n    ],\n    \"stream\":false,\n    \"max_tokens\": 30\n  }'\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamo Service with Configuration in Python\nDESCRIPTION: Example of defining a Dynamo service with configurable parameters in the service decorator and constructor.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@service(\n    dynamo={\"enabled\": True, \"namespace\": \"prod\"},\n    resources={\"gpu\": 2, \"cpu\": \"4\", \"memory\": \"16Gi\"},\n    workers=2,\n)\nclass MyService:\n    def __init__(self, model_name=\"deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B\", temperature=0.7):\n        self.model_name = model_name\n        self.temperature = temperature\n```\n\n----------------------------------------\n\nTITLE: Installing MicroK8s and Setting Up Permissions\nDESCRIPTION: Commands for installing MicroK8s, configuring user permissions, and setting up kubectl access to the local Kubernetes cluster.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install microk8s --classic\nsudo usermod -a -G microk8s $USER\nsudo chown -R $USER ~/.kube\n```\n\n----------------------------------------\n\nTITLE: Making a Request to a Dynamo Pipeline with curl\nDESCRIPTION: Example curl command to send a POST request to the Dynamo pipeline's generate endpoint with a JSON payload containing text to be processed.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/generate \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"text\": \"federer\"}'\n```\n\n----------------------------------------\n\nTITLE: Testing LLM Deployment with cURL Request\nDESCRIPTION: cURL command to test the LLM deployment by sending a chat completion request to the API endpoint. This example uses a sample prompt with approximately 200 tokens and limits the response to 30 tokens.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8000/v1/chat/completions   -H \"Content-Type: application/json\"   -d '{\n    \"model\": \"deepseek-ai/DeepSeek-R1-Distill-Llama-8B\",\n    \"messages\": [\n    {\n        \"role\": \"user\",\n        \"content\": \"In the heart of Eldoria, an ancient land of boundless magic and mysterious creatures, lies the long-forgotten city of Aeloria. Once a beacon of knowledge and power, Aeloria was buried beneath the shifting sands of time, lost to the world for centuries. You are an intrepid explorer, known for your unparalleled curiosity and courage, who has stumbled upon an ancient map hinting at ests that Aeloria holds a secret so profound that it has the potential to reshape the very fabric of reality. Your journey will take you through treacherous deserts, enchanted forests, and across perilous mountain ranges. Your Task: Character Background: Develop a detailed background for your character. Describe their motivations for seeking out Aeloria, their skills and weaknesses, and any personal connections to the ancient city or its legends. Are they driven by a quest for knowledge, a search for lost familt clue is hidden.\"\n    }\n    ],\n    \"stream\":false,\n    \"max_tokens\": 30\n  }'\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo Client Example\nDESCRIPTION: Command to run the client side of the hello_world example, which will connect to the running server instances and distribute requests among them.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/bindings/python/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./examples/hello_world/client.py\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Namespace and Secret Configuration\nDESCRIPTION: Commands to create and configure Kubernetes namespace and Docker registry secrets for deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd deploy/dynamo/helm\\nkubectl create namespace $NAMESPACE\\nkubectl config set-context --current --namespace=$NAMESPACE\\n\\nkubectl create secret docker-registry docker-imagepullsecret \\n  --docker-server=$DOCKER_SERVER \\n  --docker-username=$DOCKER_USERNAME \\n  --docker-password=$DOCKER_PASSWORD \\n  --namespace=$NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Overriding Service Decorator with YAML Configuration\nDESCRIPTION: Shows how to use ServiceArgs in YAML configuration to override parameters defined in the @service decorator. This allows for environment-specific configuration without code changes.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nMyService:\n  ServiceArgs:\n    dynamo:\n      namespace: \"staging\"  # Override namespace\n    resources:\n      gpu: 4  # Use more GPUs\n    workers: 8  # Scale up workers\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo in Batch Mode with JSONL Input\nDESCRIPTION: Command to run Dynamo in batch mode with a JSONL file of prompts. This processes multiple requests in sequence and writes results to output.jsonl.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run in=batch:prompts.jsonl out=llamacpp <model>\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Dynamo Service\nDESCRIPTION: Sets up port forwarding for the deployed service and sends a test request to verify functionality.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/operator_deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Forward the service port to localhost\nkubectl -n ${KUBE_NS} port-forward svc/${DEPLOYMENT_NAME}-frontend 3000:3000\n\n# Test the API endpoint\ncurl -X 'POST' 'http://localhost:3000/generate' \\\n    -H 'accept: text/event-stream' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"text\": \"test\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo Server Instance\nDESCRIPTION: Command to run a Dynamo server instance using the hello_world example, which demonstrates the distributed computing capabilities.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/bindings/python/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./examples/hello_world/server.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment using UV, and install maturin for building Rust extensions for Python.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/bindings/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\nuv pip install maturin\n```\n\n----------------------------------------\n\nTITLE: Querying the Frontend with Curl\nDESCRIPTION: Curl commands to test the deployment by sending POST requests to the Frontend with different prompts, demonstrating how the router assigns different workers.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:3000/generate' \\\n  -H 'accept: text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"prompt\": \"Tell me a joke\",\n  \"request_id\":\"id_number\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Dynamo Service\nDESCRIPTION: Commands to test the deployed Dynamo service by port-forwarding the Kubernetes service to localhost and making a curl request to verify functionality.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/Kubernetes/pipeline/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Forward the service port to localhost\nkubectl -n <k8s_namespace> port-forward svc/hello-world-frontend 3000:80\n\n# In another terminal window, test the API endpoint\ncurl -X 'POST' 'http://localhost:3000/generate' \\\n    -H 'accept: text/event-stream' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"text\": \"test\"}'\n```\n\n----------------------------------------\n\nTITLE: Parsing Configuration as CLI Arguments\nDESCRIPTION: Demonstrates how to extract service configuration as command-line arguments using the as_args method. This is useful when integrating with external libraries that require CLI-style arguments.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dynamo.sdk.lib.config import ServiceConfig\n\ndef setup_my_lib():\n    config = ServiceConfig.get_instance()\n\n    # Get all MyService config with prefix \"lib_\" as CLI args\n    cli_args = config.as_args(\"MyService\", prefix=\"lib_\")\n    # Returns: [\"--option1\", \"value1\", \"--flag2\", \"--option3\", \"value3\"]\n\n    # Pass to an external library's argument parser\n    lib_parser = MyLibArgumentParser()\n    lib_args = lib_parser.parse_args(cli_args)\n    return lib_args\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics with Curl in Pull Mode\nDESCRIPTION: Example showing how to query the metrics exposed by the metrics component in pull mode using curl, displaying Prometheus-formatted output with measurements like KV cache blocks.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:9091/metrics\n\n# # HELP llm_kv_blocks_active Active KV cache blocks\n# # TYPE llm_kv_blocks_active gauge\n# llm_kv_blocks_active{component=\"my_component\",endpoint=\"my_endpoint\",worker_id=\"7587884888253033398\"} 40\n# llm_kv_blocks_active{component=\"my_component\",endpoint=\"my_endpoint\",worker_id=\"7587884888253033401\"} 2\n# # HELP llm_kv_blocks_total Total KV cache blocks\n# # TYPE llm_kv_blocks_total gauge\n# llm_kv_blocks_total{component=\"my_component\",endpoint=\"my_endpoint\",worker_id=\"7587884888253033398\"} 100\n# llm_kv_blocks_total{component=\"my_component\",endpoint=\"my_endpoint\",worker_id=\"7587884888253033401\"} 100\n```\n\n----------------------------------------\n\nTITLE: Installing Rust and Cargo\nDESCRIPTION: Command to install Rust and Cargo package manager using rustup installer script\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Testing Disaggregated Prefill Serving\nDESCRIPTION: Curl command to test the disaggregated serving setup, where decode workers push requests to the prefill queue and prefill workers pull tasks.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:3000/generate' \\\n  -H 'accept: text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"prompt\": \"This is prefill disagg serving example\",\n  \"request_id\":\"12345\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Deploying Dynamo Helm Chart\nDESCRIPTION: Script command for deploying the Dynamo application to Kubernetes using a provided deployment script with examples for different scenarios.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/Kubernetes/pipeline/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DYNAMO_IMAGE=<dynamo_docker_image_name>\n./deploy.sh <docker_registry> <k8s_namespace> <path_to_dynamo_directory> <dynamo_identifier> [<dynamo_config_file>]\n\n# example: export DYNAMO_IMAGE=nvcr.io/nvidian/nim-llm-dev/dynamo-base-worker:0.0.1\n# example: ./deploy.sh nvcr.io/nvidian/nim-llm-dev my-namespace ../../../examples/hello_world/ hello_world:Frontend\n# example: ./deploy.sh nvcr.io/nvidian/nim-llm-dev my-namespace ../../../examples/llm graphs.disagg_router:Frontend ../../../examples/llm/configs/disagg_router.yaml\n```\n\n----------------------------------------\n\nTITLE: HTTP Request to echo_core with ignore_eos Flag\nDESCRIPTION: Example curl command to send a request to echo_core with the ignore_eos flag set. This is necessary when using HTTP input to prevent the engine from stopping at templated stop tokens.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -N -d '{\"nvext\": {\"ignore_eos\": true}, \"stream\": true, \"model\": \"Qwen2.5-3B-Instruct\", \"max_completion_tokens\": 4096, \"messages\":[{\"role\":\"user\", \"content\": \"Tell me a story\" }]}' ...\n```\n\n----------------------------------------\n\nTITLE: Deploying Helm Chart\nDESCRIPTION: Command to deploy the Dynamo Cloud Helm chart using the deployment script.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf Compiler on Debian/Ubuntu\nDESCRIPTION: Command to install the protobuf compiler (protoc) on Debian-based systems, which is required for the protobuf functionality used by Dynamo.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/bindings/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt install protobuf-compiler\n```\n\n----------------------------------------\n\nTITLE: Deployment Architecture Diagram\nDESCRIPTION: ASCII diagram showing the overview of major components in the deployment architecture, including HTTP, processor, workers, router, and prefill queue.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n                                                 +----------------+\n                                                 | prefill worker |-------+\n                                                 |                |       |\n                                                 +----------------+       | pull\n                                                                          v\n+------+      +-----------+      +------------------+    push     +---------------+\n| HTTP |----->| processor |----->|  decode/monolith |------------>| prefill queue |\n|      |<-----|           |<-----|      worker      |             |               |\n+------+      +-----------+      +------------------+             +---------------+\n                  |    ^\n       query best |    | return\n           worker |    | worker_id\n                  |    |         +------------------+\n                  |    +---------|      router      |\n                  +------------->|                  |\n                                 +------------------+\n```\n\n----------------------------------------\n\nTITLE: Diagram of a Distributed Pipeline Architecture\nDESCRIPTION: ASCII art diagram showing the structure of a three-component distributed pipeline with Frontend, Middle, and Backend services and the flow of data between them.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsers/Clients (HTTP)\n      │\n      ▼\n┌─────────────┐\n│  Frontend   │  HTTP API endpoint (/generate)\n└─────────────┘\n      │\n      ▼\n┌─────────────┐\n│   Middle    │\n└─────────────┘\n      │\n      ▼\n┌─────────────┐\n│  Backend    │\n└─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Setting Token Echo Delay with Environment Variable\nDESCRIPTION: Command showing how to set the token echo delay for echo engines using an environment variable. This allows controlling the simulated generation speed.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Set token echo delay to 1ms (1000 tokens per second)\nDYN_TOKEN_ECHO_DELAY_MS=1 dynamo-run in=http out=echo_full\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarking Container\nDESCRIPTION: Command to run the benchmarking container with workspace mounting.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./container/run.sh --mount-workspace\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Environment Variables for Dynamo Build\nDESCRIPTION: Sets required environment variables for Docker image building including container registry and image tag information.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_SERVER=<CONTAINER_REGISTRY>\\nexport IMAGE_TAG=<TAG>\n```\n\n----------------------------------------\n\nTITLE: Downloading Model from Hugging Face\nDESCRIPTION: Command to download a GGUF model file from Hugging Face using curl\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o Llama-3.2-3B-Instruct-Q4_K_M.gguf \"https://huggingface.co/bartowski/Llama-3.2-3B-Instruct-GGUF/resolve/main/Llama-3.2-3B-Instruct-Q4_K_M.gguf?download=true\"\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Container\nDESCRIPTION: Commands for building the Dynamo container using the TensorRT-LLM framework.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./container/build.sh --framework tensorrtllm\n```\n\n----------------------------------------\n\nTITLE: Building the Dynamo Kubernetes Operator\nDESCRIPTION: Command to build the Dynamo Kubernetes Operator using the provided Makefile. This is the primary build command for developers working with the project.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/operator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Running Metrics in Pull Mode with Custom Port\nDESCRIPTION: Examples showing how to run the metrics component in pull mode (default) with either default or custom port settings for the Prometheus metrics endpoint.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Start metrics server on default host (0.0.0.0) and port (9091)\nmetrics --component my_component --endpoint my_endpoint\n\n# Or specify a custom port\nmetrics --component my_component --endpoint my_endpoint --port 9092\n```\n\n----------------------------------------\n\nTITLE: Starting Required Services with Docker Compose\nDESCRIPTION: Command to start ETCD and NATS services using Docker Compose, which are required for the local execution of the Dynamo pipeline.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f deploy/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Submitting Inference Request to DeepSeek-R1 Model in Dynamo\nDESCRIPTION: Example curl command to send a chat completion request to the Dynamo API endpoint specifically targeting the DeepSeek-R1 model deployed with tensor parallelism across multiple nodes.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# this test request has around 200 tokens isl\n\ncurl <node1-ip>:8000/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: text/event-stream\" \\\n  -d '{\n    \"model\": \"deepseek-ai/DeepSeek-R1\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"In the heart of Eldoria, an ancient land of boundless magic and mysterious creatures, lies the long-forgotten city of Aeloria. Once a beacon of knowledge and power, Aeloria was buried beneath the shifting sands of time, lost to the world for centuries. You are an intrepid explorer, known for your unparalleled curiosity and courage, who has stumbled upon an ancient map hinting at ests that Aeloria holds a secret so profound that it has the potential to reshape the very fabric of reality. Your journey will take you through treacherous deserts, enchanted forests, and across perilous mountain ranges. Your Task: Character Background: Develop a detailed background for your character. Describe their motivations for seeking out Aeloria, their skills and weaknesses, and any personal connections to the ancient city or its legends. Are they driven by a quest for knowledge, a search for lost familt clue is hidden.\"\n      }\n    ],\n    \"stream\": true,\n    \"max_tokens\": 300\n  }'\n```\n\n----------------------------------------\n\nTITLE: Accessing Command Line Arguments in Python Engine\nDESCRIPTION: Example showing how to access command line arguments in a Python engine. Arguments are passed to the script via sys.argv, including both standard Dynamo arguments and custom arguments.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def generate(request):\n    .. as before ..\n\nif __name__ == \"__main__\":\n    print(f\"MAIN: {sys.argv}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamo SDK with pip\nDESCRIPTION: Command to install the Dynamo SDK package from PyPI.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ai-dynamo\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with GPU Support\nDESCRIPTION: Commands to initialize Minikube with Docker driver, GPU support, and specific resource allocations. Also enables required Kubernetes addons including Istio and storage provisioner.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/minikube.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start Minikube with GPU support (if configured)\nminikube start --driver docker --container-runtime docker --gpus all --memory=16000mb --cpus=8\n\n# Enable required addons\nminikube addons enable istio-provisioner\nminikube addons enable istio\nminikube addons enable storage-provisioner-rancher\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamo Image Environment Variable\nDESCRIPTION: Command to set the DYNAMO_IMAGE environment variable to the custom-built image location in a container registry.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DYNAMO_IMAGE=<your-registry>/dynamo-base:latest-vllm\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmarking Script\nDESCRIPTION: Command to execute the performance benchmarking script with debug output enabled.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbash -x /workspace/examples/llm/benchmarks/perf.sh\n```\n\n----------------------------------------\n\nTITLE: Querying the Frontend with Another Prompt\nDESCRIPTION: Additional curl command showing how to query the Frontend with a different prompt to demonstrate worker routing.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:3000/generate' \\\n  -H 'accept: text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"prompt\": \"Which team won 2020 World Series\",\n  \"request_id\":\"id_number\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Extra Engine Arguments JSON Configuration\nDESCRIPTION: Example of a JSON configuration file for passing extra arguments to the vllm and sglang backends. This allows customizing engine behavior with parameters like dtype and remote code trust settings.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dtype\": \"half\",\n    \"trust_remote_code\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Service and Capturing Tag\nDESCRIPTION: Sets the Dynamo image name, navigates to the project directory, builds the service, and captures the build tag for deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/operator_deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set your runtime image name\nexport DYNAMO_IMAGE=<dynamo_docker_image_name>\n\n# Navigate to your project directory\ncd $PROJECT_ROOT/examples/hello_world\n\n# Build the service and capture the tag\nDYNAMO_TAG=$(dynamo build hello_world:Frontend | grep \"Successfully built\" | awk -F\"\\\"\" '{ print $2 }')\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Dynamo Base Docker Image\nDESCRIPTION: Instructions for building the Dynamo base Docker image, tagging it, and pushing to a container registry for Kubernetes deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./container/build.sh\ndocker tag dynamo:latest-vllm <your-registry>/dynamo-base:latest-vllm\ndocker login <your-registry>\ndocker push <your-registry>/dynamo-base:latest-vllm\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring NGINX Load Balancer\nDESCRIPTION: Commands to install NGINX and configure it as a load balancer for the benchmarking setup.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\napt update && apt install -y nginx\ncp /workspace/examples/llm/benchmarks/nginx.conf /etc/nginx/nginx.conf\nservice nginx restart\n```\n\n----------------------------------------\n\nTITLE: Testing Similar Prefix Routing\nDESCRIPTION: Curl command to test how prompts with similar prefixes are routed to the same worker based on the routing algorithm.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:3000/generate' \\\n  -H 'accept: text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"prompt\": \"Tell me a fact\",\n  \"request_id\":\"id_number\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Building All Dynamo Cloud Components with Earthly\nDESCRIPTION: Command to build and push all Dynamo Cloud platform components using Earthly build system.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/dynamo_cloud.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nearthly --push +all-docker --DOCKER_SERVER=$DOCKER_SERVER --IMAGE_TAG=$IMAGE_TAG\n```\n\n----------------------------------------\n\nTITLE: Running Python Engine with Custom Arguments\nDESCRIPTION: Command example showing how to pass custom arguments to a Python engine. Arguments after double-dash are forwarded to the Python script via sys.argv.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndynamo-run out=pystr:my_python_engine.py -- -n 42 --custom-arg Orange --yes\n```\n\n----------------------------------------\n\nTITLE: Deploying Dynamo Service to Kubernetes\nDESCRIPTION: Sets the deployment name and creates a Dynamo deployment in Kubernetes using the previously built service tag.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/operator_deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Set your Helm release name\nexport DEPLOYMENT_NAME=hello-world\n\n# Create the deployment\ndynamo deployment create $DYNAMO_TAG --no-wait -n $DEPLOYMENT_NAME\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtual Environment with UV\nDESCRIPTION: Creates a new Python virtual environment using the UV package manager.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/api-store/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamo Frontend API with cURL\nDESCRIPTION: cURL command to send a POST request to the Frontend service's /generate endpoint for testing the pipeline.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:3000/generate' \\\n  -H 'accept: text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"text\": \"test\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Pull Secret in Kubernetes\nDESCRIPTION: Command to create a Kubernetes secret for Docker registry authentication, allowing the cluster to pull images from private repositories.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/Kubernetes/pipeline/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry docker-imagepullsecret \\\n    --docker-server=<registry-server> \\\n    --docker-username=<username> \\\n    --docker-password=<password> \\\n    -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Launching Dynamo Services Locally\nDESCRIPTION: Command to start all three services (Frontend, Middle, Backend) using the Dynamo serve command.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/examples/hello_world\ndynamo serve hello_world:Frontend\n```\n\n----------------------------------------\n\nTITLE: Running Rust Hello World Client\nDESCRIPTION: Commands to navigate to hello world example directory and run the client with example output\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/hello_world\ncargo run --bin client\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager\nDESCRIPTION: Command to install the UV package manager, which is a prerequisite for setting up the Dynamo Python bindings environment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/bindings/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment and Logging into Dynamo Cloud\nDESCRIPTION: Sets up environment variables for the project root, Kubernetes namespace, and Dynamo Cloud endpoint. Then logs into the Dynamo cloud using the CLI.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/operator_deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set your project root directory\nexport PROJECT_ROOT=$(pwd)\n\n# Set your Kubernetes namespace (must match the namespace where Dynamo cloud is installed)\nexport KUBE_NS=hello-world\n\n# Externally accessible endpoint to the `dynamo-store` service within your Dynamo Cloud installation\nexport DYNAMO_CLOUD=https://${KUBE_NS}.dev.aire.nvidia.com\n\n# Login to the Dynamo cloud\ndynamo cloud login --api-token TEST-TOKEN --endpoint $DYNAMO_CLOUD\n```\n\n----------------------------------------\n\nTITLE: Setting Deployment Environment Variables\nDESCRIPTION: Sets required environment variables for Dynamo Cloud deployment including Docker credentials and namespace configuration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_USERNAME=<your-docker-username>\\nexport DOCKER_PASSWORD=<your-docker-password>\\nexport DOCKER_SERVER=<your-docker-server>\\nexport IMAGE_TAG=<TAG>  # Use the same tag you used when building the images\\nexport NAMESPACE=dynamo-cloud    # change this to whatever you want!\n```\n\n----------------------------------------\n\nTITLE: Deploying Dynamo Service to Kubernetes\nDESCRIPTION: Commands to deploy the built Dynamo service to a Kubernetes cluster using the Dynamo deployment create command.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho $DYNAMO_TAG\nexport HELM_RELEASE=ci-hw\ndynamo deployment create $DYNAMO_TAG --no-wait -n $HELM_RELEASE\n```\n\n----------------------------------------\n\nTITLE: Starting the Metrics Visualization Stack with Docker Compose\nDESCRIPTION: Command to start the Prometheus and Grafana services using Docker Compose with the metrics profile enabled in detached mode.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/metrics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile metrics up -d\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Dynamo Wheel\nDESCRIPTION: Command to build and install the Dynamo wheel package using maturin with UV package manager integration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/bindings/python/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmaturin develop --uv\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Docker Container\nDESCRIPTION: Command to build the Docker container for Dynamo. This builds the necessary environment for running the LLM deployment examples.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./container/build.sh\n```\n\n----------------------------------------\n\nTITLE: Building TensorRT-LLM Base Image Prerequisites\nDESCRIPTION: Commands to install git-lfs and prepare the environment for building TensorRT-LLM base image.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt-get update && apt-get -y install git git-lfs\ngit lfs install\n\n./container/build_trtllm_base_image.sh\n```\n\n----------------------------------------\n\nTITLE: Sample Output from KVIndexer Request\nDESCRIPTION: Shows the expected output format from the KVIndexer's find_matches_for_request method. The output is a dictionary mapping worker IDs to the number of matched KV blocks for each worker.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/kv_cache_routing.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t123456789: 10,\n\t987654321: 3,\n\t543219876: 7,\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Mock Worker Metrics\nDESCRIPTION: Command to run the metrics component to monitor the metrics being published by mock workers on a specific component and endpoint.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmetrics --component my_component --endpoint my_endpoint\n```\n\n----------------------------------------\n\nTITLE: Logging into Dynamo Cloud for Kubernetes Deployment\nDESCRIPTION: Commands to set up environment variables and login to Dynamo Cloud for Kubernetes deployment. This establishes the connection to the Dynamo Cloud endpoint for deployment management.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport PROJECT_ROOT=$(pwd)\nexport KUBE_NS=dynamo-cloud  # Note: This must match the Kubernetes namespace where you installed Dynamo Cloud\nexport DYNAMO_CLOUD=https://${KUBE_NS}.dev.aire.nvidia.com # Externally accessible endpoint to the `dynamo-store` service within your Dynamo Cloud installation\ndynamo cloud login --api-token TEST-TOKEN --endpoint $DYNAMO_CLOUD\n```\n\n----------------------------------------\n\nTITLE: Starting the Metrics Component in Default Mode\nDESCRIPTION: Example showing how to start the metrics component to monitor workers in a specific component and endpoint. The default namespace is 'dynamo' and can be configured with the --namespace flag.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Default namespace is \"dynamo\", but can be configured with --namespace\n# For more detailed output, try setting the env var: DYN_LOG=debug\nmetrics --component my_component --endpoint my_endpoint\n\n# 2025-03-17T00:07:05.202558Z  INFO metrics: Scraping endpoint dynamo/my_component/my_endpoint for stats\n# 2025-03-17T00:07:05.202955Z  INFO metrics: Prometheus metrics server started at 0.0.0.0:9091/metrics\n# ...\n```\n\n----------------------------------------\n\nTITLE: Sample Output from KvMetricsAggregator\nDESCRIPTION: Demonstrates the output format of the KvMetricsAggregator's get_metrics method, showing performance statistics for each worker in the system including GPU cache usage, request queue size, and cache hit rates.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/kv_cache_routing.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nWorker ID: 123456789\nGPU Cache Usage: 0.5\nNumber of Requests Waiting: 2\nGPU Prefix Cache Hit Rate: 0.1\n***\nWorker ID: 987654321\nGPU Cache Usage: 0.5\nNumber of Requests Waiting: 1\nGPU Prefix Cache Hit Rate: 0.1\n***\n```\n\n----------------------------------------\n\nTITLE: Loading YAML Configuration for Dynamo Service\nDESCRIPTION: Command-line instruction to serve a Dynamo service with a specified YAML configuration file.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndynamo serve service:MyService -f config.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing NATS Messaging System\nDESCRIPTION: Commands to add NATS Helm repository and install NATS with custom values in the specified namespace.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $PROJECT_ROOT/deploy/Kubernetes/pipeline/dependencies\nhelm repo add nats https://nats-io.github.io/k8s/helm/charts/\nhelm repo update\nhelm install --namespace ${NAMESPACE} ${RELEASE_NAME}-nats nats/nats \\\n    --values nats-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Running TensorRT-LLM Container\nDESCRIPTION: Command to run the TensorRT-LLM container interactively.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./container/run.sh --framework tensorrtllm -it\n```\n\n----------------------------------------\n\nTITLE: Running Metrics in Push Mode\nDESCRIPTION: Example showing how to configure the metrics component to run in push mode, periodically pushing metrics to a Prometheus PushGateway instead of exposing an endpoint for scraping.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Push metrics to a Prometheus PushGateway every --push-interval seconds\nmetrics \\\n    --component my_component \\\n    --endpoint my_endpoint \\\n    --host 127.0.0.1 \\\n    --port 9091 \\\n    --push\n```\n\n----------------------------------------\n\nTITLE: Layer-Aware Block Copy Function Signature in Rust\nDESCRIPTION: Function signature for copying blocks between storage types with layer-specific control. This allows transfers to be performed on specific layers only, enabling more granular control over data movement between different storage mediums.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/kv_cache_manager.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npub async fn copy_blocks_by_layer<D, S>(dst: &[KvBlock<D>], src: &[KvBlock<S>, layers: &[usize]) -> Result<()>;\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container Locally\nDESCRIPTION: Builds and runs the Dynamo service in a Docker container for local development.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/api-store/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nearthly +docker && docker run -it my-registry/ai-dynamo-store:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Dependencies on Ubuntu\nDESCRIPTION: Command to install required system libraries and build tools on Ubuntu for compiling Dynamo from source\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y build-essential libhwloc-dev libudev-dev pkg-config libssl-dev libclang-dev protobuf-compiler python3-dev cmake\n```\n\n----------------------------------------\n\nTITLE: Downloading HuggingFace Model\nDESCRIPTION: Command to download the DeepSeek-R1-Distill-Llama-70B model from HuggingFace for benchmarking.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli download neuralmagic/DeepSeek-R1-Distill-Llama-70B-FP8-dynamic\n```\n\n----------------------------------------\n\nTITLE: Running a Mock Worker for Testing\nDESCRIPTION: Example showing how to run a Rust-based mock worker that registers a StatsHandler under a specific endpoint and publishes random data for metrics testing purposes.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Can run multiple workers in separate shells to see aggregation as well.\n# Or to build/run from source: cargo run --bin mock_worker\nmock_worker\n\n# 2025-03-16T23:49:28.101668Z  INFO mock_worker: Starting Mock Worker on Endpoint: dynamo/my_component/my_endpoint\n```\n\n----------------------------------------\n\nTITLE: Building and Running Metrics from Source\nDESCRIPTION: Command to build and run the metrics component from source code using Cargo, useful for development and testing changes to the component.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin metrics -- --component my_component --endpoint my_endpoint\n```\n\n----------------------------------------\n\nTITLE: Starting Dynamo Service\nDESCRIPTION: Launches the Dynamo API Server service.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/api-store/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nai-dynamo-store\n```\n\n----------------------------------------\n\nTITLE: Configuring MicroK8s Addons and kubectl\nDESCRIPTION: Commands to start MicroK8s, enable GPU and storage support, and configure kubectl with the cluster configuration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmicrok8s start\n# Enable GPU support\nmicrok8s enable gpu\n# Enable storage support\nmicrok8s enable storage\nmkdir -p ~/.kube\nmicrok8s config >> ~/.kube/config\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for LLM Benchmarking\nDESCRIPTION: Command to build the benchmarking Docker image for LLM deployment testing.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./container/build.sh\n```\n\n----------------------------------------\n\nTITLE: Monitoring VLLM Worker Metrics\nDESCRIPTION: Command to monitor the metrics of VLLM workers that expose statistics on the 'load_metrics' endpoint, which is a hard-coded endpoint name used for python-based workers that register a KvMetricsPublisher.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmetrics --component VllmWorker --endpoint load_metrics\n```\n\n----------------------------------------\n\nTITLE: Running a Real Worker Deployment\nDESCRIPTION: Command to set up a more realistic deployment for gathering metrics from, specifically a VLLM + KV Routing based deployment that exposes statistics on a specified endpoint.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd deploy/examples/llm\ndynamo serve <vllm kv routing example args>\n```\n\n----------------------------------------\n\nTITLE: Verifying Running Docker Compose Services\nDESCRIPTION: Command to check the status of services started with Docker Compose, useful for troubleshooting the metrics visualization stack.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/metrics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Starting Required Services with Docker Compose\nDESCRIPTION: Command to start etcd and NATS services using Docker Compose as prerequisites for the deployment examples.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f deploy/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Building and Containerizing Pipeline\nDESCRIPTION: Commands to build and containerize the Frontend service of the Dynamo pipeline.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd $PROJECT_ROOT/examples/hello_world\nexport DYNAMO_IMAGE=<dynamo_base_image>\ndynamo build --containerize hello_world:Frontend\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Example Server\nDESCRIPTION: Commands to navigate to hello world example directory and start the server\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/lib/bindings/python/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/hello_world\ncargo run --bin server\n```\n\n----------------------------------------\n\nTITLE: Visualizing Disaggregated Deployment Workflow with Mermaid\nDESCRIPTION: A sequence diagram showing the interaction between VllmWorker (decode), PrefillQueue, and PrefillWorker in a disaggregated deployment architecture. It illustrates the process of remote prefill execution and KV cache management.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant D as VllmWorker\n    participant Q as PrefillQueue\n    participant P as PrefillWorker\n\n    Note over D: Request is routed to decode\n    D->>D: Decide if prefill should be done locally or remotely\n\n        D->>D: Allocate KV blocks\n        D->>Q: Put RemotePrefillRequest on the queue\n\n        P->>Q: Pull request from the queue\n        P-->>D: Read cached KVs from Decode\n\n        D->>D: Decode other requests\n        P->>P: Run prefill\n        P-->>D: Write prefilled KVs into allocated blocks\n        P->>D: Send completion notification\n        Note over D: Notification received when prefill is done\n        D->>D: Schedule decoding\n```\n\n----------------------------------------\n\nTITLE: Installing Rust and Cargo\nDESCRIPTION: Command to install Rust and Cargo package manager using rustup installer script\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/lib/bindings/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Verifying Storage Class Configuration\nDESCRIPTION: Commands to check for default storage class availability in the Kubernetes cluster.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Check if default storage class exists\\nkubectl get storageclass\\n\\n# Expected output should show at least one storage class marked as (default)\\n# Example:\\n# NAME                 PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\\n# standard (default)   kubernetes.io/gce-pd    Delete          Immediate              true                   1d\n```\n\n----------------------------------------\n\nTITLE: Starting Required Services with Docker Compose\nDESCRIPTION: Command to start the required backend services (etcd and NATS) using Docker Compose. These services are prerequisites for running the LLM deployment examples.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f deploy/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Dependencies\nDESCRIPTION: Command to start required services (NATS.io and etcd) using docker-compose\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Example Client\nDESCRIPTION: Commands to navigate to hello world example directory and start the client\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/lib/bindings/python/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/hello_world\ncargo run --bin client\n```\n\n----------------------------------------\n\nTITLE: Python Engine Response Structure for Token Processing\nDESCRIPTION: Example of the JSON response structure that a Python engine should yield in token-based processing mode. This includes token IDs and optional metadata fields.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{\"token_ids\":[791],\"tokens\":None,\"text\":None,\"cum_log_probs\":None,\"log_probs\":None,\"finish_reason\":None}\n```\n\n----------------------------------------\n\nTITLE: Checking Istio Installation\nDESCRIPTION: Commands to verify Istio installation in the Kubernetes cluster.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Check if Istio is installed\\nkubectl get pods -n istio-system\\n\\n# Expected output should show running Istio pods\\n# istiod-* pods should be in Running state\n```\n\n----------------------------------------\n\nTITLE: Starting Dynamo Distributed Runtime Services\nDESCRIPTION: Command to start Dynamo's distributed runtime services using Docker Compose configuration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f deploy/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Starting a Prometheus PushGateway via Docker\nDESCRIPTION: Command to start a Prometheus PushGateway service using Docker for use with the metrics component in push mode.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -d -p 9091:9091 --name pushgateway prom/pushgateway\n```\n\n----------------------------------------\n\nTITLE: Installing etcd Key-Value Store\nDESCRIPTION: Command to install etcd using Bitnami Helm chart with custom values in the specified namespace.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --namespace ${NAMESPACE} ${RELEASE_NAME}-etcd \\\n    oci://registry-1.docker.io/bitnamicharts/etcd \\\n    --values etcd-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing a Token-based Python Engine\nDESCRIPTION: Example implementation of a Python engine that generates token IDs with simulated delay. This demonstrates token-based generation with asyncio.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def generate(request):\n    yield {\"token_ids\":[791]}\n    await asyncio.sleep(0.1)\n    yield {\"token_ids\":[6864]}\n    await asyncio.sleep(0.1)\n    yield {\"token_ids\":[315]}\n    await asyncio.sleep(0.1)\n    yield {\"token_ids\":[9822]}\n    await asyncio.sleep(0.1)\n    yield {\"token_ids\":[374]}\n    await asyncio.sleep(0.1)\n    yield {\"token_ids\":[12366]}\n    await asyncio.sleep(0.1)\n    yield {\"token_ids\":[13]}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment Using Conda\nDESCRIPTION: Alternative approach for setting up a local development environment using Conda, building components from source, and testing the setup.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nconda activate <ENV_NAME>\n\npip install nixl # Or install https://github.com/ai-dynamo/nixl from source\n\ncargo build --release\n\n# To install ai-dynamo-runtime from source\ncd lib/bindings/python\npip install .\n\ncd ../../../\npip install .[all]\n\n# To test\ndocker compose -f deploy/docker-compose.yml up -d\ncd examples/llm\ndynamo serve graphs.agg:Frontend -f configs/agg.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting the Dynamo Server with Debug Logging\nDESCRIPTION: Command to run the server binary with debug-level logging enabled to view detailed output about service operations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/examples/service_metrics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDYN_LOG=debug cargo run --bin server\n```\n\n----------------------------------------\n\nTITLE: Running Dynamo Examples\nDESCRIPTION: Commands to navigate to the examples folder and serve a hello world frontend. It requires etcd and nats instances running on the host system.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/container/launch_message.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> cd examples/hello_world\n> dynamo serve hello_world:Frontend\n```\n\n----------------------------------------\n\nTITLE: Batch Input File Format Example\nDESCRIPTION: Example of the input JSONL format for batch processing. Each line contains a JSON object with a 'text' field containing the prompt.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"What is the capital of France?\"}\n{\"text\": \"What is the capital of Spain?\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Registry Environment Variables\nDESCRIPTION: Sets up required environment variables for building and pushing Docker images to a container registry.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/dynamo_cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set your container registry\nexport DOCKER_SERVER=<CONTAINER_REGISTRY>\n# Set the image tag (e.g., latest, 0.0.1, etc.)\nexport IMAGE_TAG=<TAG>\n```\n\n----------------------------------------\n\nTITLE: Verifying Minikube Installation\nDESCRIPTION: Commands to verify the successful installation and configuration of Minikube, including checks for Minikube status, Istio pods, and storage class configuration.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/minikube.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Check Minikube status\nminikube status\n\n# Verify Istio installation\nkubectl get pods -n istio-system\n\n# Verify storage class\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Defining Inference Graph for Aggregated Router in Dynamo\nDESCRIPTION: Python code that defines the inference graph connecting Frontend, Processor, Router, and VllmWorker components for the disaggregated serving architecture in Dynamo.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/multinode-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# graphs/agg_router.py\nFrontend.link(Processor).link(Router).link(VllmWorker)\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Login Command\nDESCRIPTION: Command to log into the container registry before pushing images.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker login <CONTAINER_REGISTRY>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Services\nDESCRIPTION: Commands to set environment variables for NATS and etcd services, configuring their endpoints for the deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/disagg_skeleton/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NATS_SERVER=\"nats://Node_1_IP_ADDRESS:4222\"\nexport ETCD_ENDPOINTS=\"http://Node_1_IP_ADDRESS:2379\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Deployment\nDESCRIPTION: Setting up environment variables for namespace, release name, and project root directory used in deployment.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/manual_helm_deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=dynamo-playground\nexport RELEASE_NAME=dynamo-platform\nexport PROJECT_ROOT=$(pwd)\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo with Custom TRTLLM Base Image\nDESCRIPTION: Command to build Dynamo image with a custom TensorRT-LLM base image.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./container/build.sh --framework TENSORRTLLM --base-image <trtllm-base-image> --base-image-tag <trtllm-base-image-tag>\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamo Runtime Client in Python\nDESCRIPTION: Example of directly accessing the Dynamo runtime client to create a connection to another service without using the depends() function.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport VllmWorker\n\nruntime = dynamo_context[\"runtime\"]\ncomp_ns, comp_name = VllmWorker.dynamo_address() # dynamo://{namespace}/{name}\nprint(f\"[Processor] comp_ns: {comp_ns}, comp_name: {comp_name}\")\nself.worker_client = (\n    await runtime.namespace(comp_ns)\n    .component(comp_name)\n    .endpoint(\"generate\")\n    .client()\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Existing Dynamo Deployment from Kubernetes\nDESCRIPTION: Command to remove an existing Dynamo deployment from the Kubernetes cluster.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete dynamodeployment $HELM_RELEASE\n```\n\n----------------------------------------\n\nTITLE: Deleting Existing Dynamo Deployment\nDESCRIPTION: Provides a command to delete an existing Dynamo deployment from Kubernetes if needed.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/operator_deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete dynamodeployment $DEPLOYMENT_NAME\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Project\nDESCRIPTION: Commands to build the project and run tests using Cargo\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Running the Dynamo Client with Info Logging\nDESCRIPTION: Command to run the client binary with info-level logging to observe service statistics and metrics information.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/examples/service_metrics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDYN_LOG=info cargo run --bin client\n```\n\n----------------------------------------\n\nTITLE: Integration Example with vLLM Argument Parsing\nDESCRIPTION: Shows a real-world example of parsing configuration into CLI arguments for the vLLM library. Demonstrates combining custom arguments with library-specific arguments.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef parse_vllm_args(service_name, prefix) -> AsyncEngineArgs:\n    config = ServiceConfig.get_instance()\n    vllm_args = config.as_args(service_name, prefix=prefix)\n    parser = FlexibleArgumentParser()\n\n    # Add custom arguments\n    parser.add_argument(\"--router\", type=str, choices=[\"random\", \"round-robin\", \"kv\"], default=\"random\")\n    parser.add_argument(\"--remote-prefill\", action=\"store_true\")\n\n    # Add VLLM's arguments\n    parser = AsyncEngineArgs.add_cli_args(parser)\n\n    # Parse both custom and VLLM arguments\n    args = parser.parse_args(vllm_args)\n\n    # Convert to engine arguments\n    engine_args = AsyncEngineArgs.from_cli_args(args)\n\n    # Add custom args to the engine args\n    engine_args.router = args.router\n    engine_args.remote_prefill = args.remote_prefill\n\n    return engine_args\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Installs additional development dependencies using UV pip with the dev extras.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/api-store/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dynamo Pipeline Architecture\nDESCRIPTION: ASCII diagram illustrating the flow of data through the Frontend, Middle, and Backend services in the Dynamo pipeline.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsers/Clients (HTTP)\n      │\n      ▼\n┌─────────────┐\n│  Frontend   │  HTTP API endpoint (/generate)\n└─────────────┘\n      │ dynamo/runtime\n      ▼\n┌─────────────┐\n│   Middle    │\n└─────────────┘\n      │ dynamo/runtime\n      ▼\n┌─────────────┐\n│  Backend    │\n└─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Runtime\nDESCRIPTION: Commands to build the project and run tests using Cargo\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/lib/bindings/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment in Shells\nDESCRIPTION: Command to activate the previously created virtual environment in each shell instance for running the Dynamo examples.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/bindings/python/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Production YAML Configuration Example\nDESCRIPTION: Example of a production YAML configuration file that overrides service decorator parameters and provides service-specific configuration values.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# prod_config.yaml\nLLMService:\n  ServiceArgs:\n    dynamo:\n      namespace: \"prod\"\n    resources:\n      gpu: 4\n      memory: \"64Gi\"\n    workers: 8\n\n  # Constructor parameters\n  model_name: \"llama-3-70b-instruct\"\n  temperature: 0.8\n  max_tokens: 2048\n\n  # Service-specific parameters\n  cache_size: 10000\n  use_kv_cache: true\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Actions locally with act tool\nDESCRIPTION: Command for running the pre-merge-rust workflow locally using the act tool, which allows contributors to test GitHub actions on their local machine before submitting a PR.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nact -j pre-merge-rust\n```\n\n----------------------------------------\n\nTITLE: Running Rust Hello World Server\nDESCRIPTION: Commands to navigate to hello world example directory and start the server\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/hello_world\ncargo run --bin server\n```\n\n----------------------------------------\n\nTITLE: Building Dynamo Platform Components\nDESCRIPTION: Earthly command to build and push all Dynamo platform Docker images.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/helm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nearthly --push +all-docker --DOCKER_SERVER=$DOCKER_SERVER --IMAGE_TAG=$IMAGE_TAG\n```\n\n----------------------------------------\n\nTITLE: Deploying with Mixed Configuration Using CLI\nDESCRIPTION: Shows how to deploy a service with mixed configuration sources, combining YAML configuration with command-line overrides.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndynamo serve service:LLMService -f prod_config.yaml --LLMService.temperature=0.9\n```\n\n----------------------------------------\n\nTITLE: Handling No Matching Endpoints\nDESCRIPTION: Example showing the warning logs that appear when no matching endpoints are found for metrics collection. These warnings will stop once a worker with a matching endpoint becomes available.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n2025-03-17T00:07:06.204756Z  WARN metrics: No endpoints found matching dynamo/my_component/my_endpoint\n```\n\n----------------------------------------\n\nTITLE: Deleting Dynamo Deployment from Kubernetes\nDESCRIPTION: Command to delete an existing Dynamo deployment from a Kubernetes cluster. This removes all resources associated with the specified deployment name.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete dynamodeployment $DEPLOYMENT_NAME\n```\n\n----------------------------------------\n\nTITLE: Deployment Architecture Diagram\nDESCRIPTION: ASCII diagram showing the component interactions in the deployment architecture.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/tensorrt_llm/README.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n+------+      +-----------+      +------------------+             +---------------+\n| HTTP |----->| processor |----->|      Worker      |------------>|     Prefill   |\n|      |<-----|           |<-----|                  |<------------|     Worker    |\n+------+      +-----------+      +------------------+             +---------------+\n                  |    ^                  |\n       query best |    | return           | publish kv events\n           worker |    | worker_id        v\n                  |    |         +------------------+\n                  |    +---------|     kv-router    |\n                  +------------->|                  |\n                                 +------------------+\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Compose Service Logs\nDESCRIPTION: Commands to view logs from Prometheus and Grafana services for troubleshooting purposes.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/metrics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs prometheus\ndocker compose logs grafana\n```\n\n----------------------------------------\n\nTITLE: Viewing PushGateway Metrics\nDESCRIPTION: Command to view all metrics that have been pushed to the Prometheus PushGateway using curl.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/components/metrics/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# View all metrics\n# curl http://<pushgateway_ip>:<pushgateway_port>/metrics\ncurl 127.0.0.1:9091/metrics\n```\n\n----------------------------------------\n\nTITLE: Example Output Showing Service Metrics\nDESCRIPTION: Sample output from the client showing annotated data response and service metrics information. The output includes processing time, error counts, and request statistics from the custom stats_handler implementation.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/examples/service_metrics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAnnotated { data: Some(\"h\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"e\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"l\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"l\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"o\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\" \"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"w\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"o\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"r\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"l\"), id: None, event: None, comment: None }\nAnnotated { data: Some(\"d\"), id: None, event: None, comment: None }\nServiceSet { services: [ServiceInfo { name: \"dynamo_init_backend_720278f8\", id: \"eOHMc4ndRw8s5flv4WOZx7\", version: \"0.0.1\", started: \"2025-02-26T18:54:04.917294605Z\", endpoints: [EndpointInfo { name: \"dynamo_init_backend_720278f8-generate-694d951a80e06abf\", subject: \"dynamo_init_backend_720278f8.generate-694d951a80e06abf\", data: Some(Metrics(Object {\"average_processing_time\": Number(53662), \"data\": Object {\"val\": Number(10)}, \"last_error\": String(\"\"), \"num_errors\": Number(0), \"num_requests\": Number(2), \"processing_time\": Number(107325), \"queue_group\": String(\"q\")})) }] }] }\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamo Service\nDESCRIPTION: Installs the main Dynamo service package using UV pip.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/api-store/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install .\n```\n\n----------------------------------------\n\nTITLE: Custom Metrics Data Structure\nDESCRIPTION: Sample output showing the custom metrics data structure returned by the stats_handler in server.rs. This demonstrates how custom data is included in service metrics.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/lib/runtime/examples/service_metrics/README.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndata: Some(Metrics(Object {..., \"data\": Object {\"val\": Number(10)}, ...))\n```\n\n----------------------------------------\n\nTITLE: Navigating to Pipeline Deployment Directory\nDESCRIPTION: Command to change to the Kubernetes pipeline deployment directory as a prerequisite.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/Kubernetes/pipeline/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd deploy/Kubernetes/pipeline\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Activates the Python virtual environment for development.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/api-store/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements Definition\nDESCRIPTION: Comprehensive list of Python package dependencies with specific version requirements. Includes FastAPI for web services, gRPC tools for communication, Kubernetes client for container orchestration, and various ML-related packages like transformers and numpy.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/container/deps/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi==0.115.6\nftfy\ngrpcio-tools==1.66.0\nhttpx\nkubernetes==32.0.1\nmsgspec\nmypy\nnumpy\nopentelemetry-api\nopentelemetry-sdk\npip==25.0.1\npre-commit\nprotobuf==5.27.3\npydantic==2.7.1\npyright\nPyYAML\nsentencepiece\ntransformers\ntritonclient==2.53.0\ntypes-PyYAML\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Class Configuration\nDESCRIPTION: Command to verify PVC support and default storage class availability in the Kubernetes cluster.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/dynamo_cloud.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Check if default storage class exists\nkubectl get storageclass\n\n# Expected output should show at least one storage class marked as (default)\n# Example:\n# NAME                 PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\n# standard (default)   kubernetes.io/gce-pd    Delete          Immediate              true                   1d\n```\n\n----------------------------------------\n\nTITLE: Specifying NATS Python Client Dependency\nDESCRIPTION: Lists the nats-py package as a dependency for the project. NATS is a lightweight messaging system, and this dependency indicates the project requires the Python client library for NATS.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/container/deps/requirements.nats.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnats-py\n```\n\n----------------------------------------\n\nTITLE: Python Testing Dependencies List\nDESCRIPTION: A comprehensive list of Python packages required for testing, including pytest and its plugins for asyncio support, benchmarking, code coverage, and type checking. Also includes PyYAML type stubs for static type analysis.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/container/deps/requirements.test.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npyright\npytest\npytest-asyncio\npytest-benchmark\npytest-codeblocks\npytest-cov\npytest-md-report\npytest-mypy\npytest-timeout\n# add types library stub for PyYAML\ntypes-PyYAML\n```\n\n----------------------------------------\n\nTITLE: Logging into Dynamo Cloud for Kubernetes Deployment\nDESCRIPTION: Bash commands to set up environment variables and log into Dynamo Cloud for deployment preparation.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/hello_world/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PROJECT_ROOT=$(pwd)\nexport KUBE_NS=hello-world  # Must match your Kubernetes namespace\nexport DYNAMO_CLOUD=https://${KUBE_NS}.dev.aire.nvidia.com\ndynamo cloud login --api-token TEST-TOKEN --endpoint $DYNAMO_CLOUD\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS and ETCD for Multi-node\nDESCRIPTION: Environment variable configuration for NATS and ETCD services in multi-node setup.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/examples/llm/benchmarks/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport NATS_SERVER=\"nats://<node_0_ip_addr>\"\nexport ETCD_ENDPOINTS=\"<node_0_ip_addr>:2379\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AI Dynamo\nDESCRIPTION: This code snippet defines the exact versions of Python packages required for the AI Dynamo project. It includes web framework, AI, data validation, and machine learning libraries.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/container/deps/requirements.tensorrtllm.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfastapi==0.111.0\nopenai==1.39.0\npydantic==2.7.1\ntransformers==4.48.3\ntriton==3.1.0\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Legal Text\nDESCRIPTION: The complete legal text of the Apache License Version 2.0, including definitions, terms and conditions for use, reproduction, and distribution of software. The license covers copyright grants, patent licenses, redistribution requirements, and liability limitations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text\nDESCRIPTION: Complete text of the Apache License Version 2.0, which outlines definitions, copyright grants, patent licenses, redistribution terms, warranty disclaimers, and liability limitations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nApache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text\nDESCRIPTION: The complete legal text of the Apache License Version 2.0, including definitions, terms and conditions, warranty disclaimers, and liability limitations. This license governs the use, modification, and distribution of software projects.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n```\n\n----------------------------------------\n\nTITLE: Declaring Apache 2.0 License Header for AI-Dynamo Project\nDESCRIPTION: This code snippet contains the SPDX copyright notice and the full text of the Apache 2.0 license. It specifies the copyright years, license type, and provides the standard terms and conditions for using the software.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/operator/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: HTML License Header Comment\nDESCRIPTION: Apache 2.0 license header comment block containing copyright information and license terms for the NVIDIA project.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nSPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\nSPDX-License-Identifier: Apache-2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n```\n\n----------------------------------------\n\nTITLE: NumPy BSD 3-Clause License\nDESCRIPTION: Complete BSD 3-clause license text used by the NumPy project. Includes copyright notice, conditions for redistribution, and disclaimer of warranties.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2005-2025, NumPy Developers.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n       copyright notice, this list of conditions and the following\n       disclaimer in the documentation and/or other materials provided\n       with the distribution.\n\n    * Neither the name of the NumPy Developers nor the names of any\n       contributors may be used to endorse or promote products derived\n       from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Batch Output File Format Example\nDESCRIPTION: Example of the output JSONL format from batch processing. Each line contains the original prompt, the model's response, token counts, and timing information.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_run.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\"text\":\"What is the capital of France?\",\"response\":\"The capital of France is Paris.\",\"tokens_in\":7,\"tokens_out\":7,\"elapsed_ms\":1566}\n{\"text\":\"What is the capital of Spain?\",\"response\":\".The capital of Spain is Madrid.\",\"tokens_in\":7,\"tokens_out\":7,\"elapsed_ms\":855}\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate\nDESCRIPTION: This snippet provides a template for applying the Apache License 2.0 to a work. It includes placeholders for the copyright year and owner's name, and specifies the location to obtain the full license text.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: BSD 2-Clause License Text for pytest-benchmark\nDESCRIPTION: The complete BSD 2-Clause License text specifying terms and conditions for pytest-benchmark package usage. Includes copyright notice and disclaimers.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nBSD 2-Clause License\n\nCopyright (c) 2014-2023, Ionel Cristian Mărieș. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following\ndisclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Uvicorn BSD License Notice\nDESCRIPTION: BSD 3-Clause License notice for the Uvicorn ASGI server implementation, including copyright notice and terms.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nCopyright © 2017-present, [Encode OSS Ltd](https://www.encode.io/).\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace and Image Pull Secrets\nDESCRIPTION: Commands to create a new Kubernetes namespace, set it as default, and configure image pull secrets for Docker registry access.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/dynamo_cloud.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd deploy/dynamo/helm\nkubectl create namespace $NAMESPACE\nkubectl config set-context --current --namespace=$NAMESPACE\n\nkubectl create secret docker-registry docker-imagepullsecret \\\n  --docker-server=$DOCKER_SERVER \\\n  --docker-username=$DOCKER_USERNAME \\\n  --docker-password=$DOCKER_PASSWORD \\\n  --namespace=$NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: MIT License - UUID\nDESCRIPTION: MIT license text for uuid v1.12.1 package, covering both Rust Project Developers and current maintainers\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2014 The Rust Project Developers\nCopyright (c) 2018 Ashley Mannix, Christopher Armstrong, Dylan DPC, Hunar Roop Kahlon\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Boost License - xxhash-rust\nDESCRIPTION: Boost Software License v1.0 text for xxhash-rust v0.8.15 package\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License - Tokio Util\nDESCRIPTION: MIT license text for tokio-util v0.7.13 package, providing standard MIT terms for utility components\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nMIT License\n\nCopyright (c) Tokio Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License for assert_matches 1.5.0\nDESCRIPTION: MIT license text for the assert_matches library, including copyright notice for Murarth and standard MIT license terms.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2016 Murarth\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Notice for Dynamo\nDESCRIPTION: This snippet contains the SPDX copyright and license information for Dynamo, specifying the Apache 2.0 license terms and conditions.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!--\nSPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.\nSPDX-License-Identifier: Apache-2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n```\n\n----------------------------------------\n\nTITLE: MIT License for anyhow 1.0.95\nDESCRIPTION: Standard MIT license text for the anyhow library, granting permissions for use, modification, and distribution with copyright notice requirements.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: BSD 3-Clause License for httpx Library\nDESCRIPTION: The full text of the BSD 3-Clause License that applies to the httpx library. It outlines the copyright notice, redistribution conditions, and disclaimer of warranty for the software developed by Encode OSS Ltd.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright © 2019, [Encode OSS Ltd](https://www.encode.io/).\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header\nDESCRIPTION: This snippet contains the copyright notice and states that the code is licensed under the Apache License 2.0.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\" Copyright 2018- The Hugging Face team. All rights reserved.\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\"\n```\n\n----------------------------------------\n\nTITLE: Full Apache License 2.0 Text\nDESCRIPTION: Complete text of the Apache License Version 2.0 that defines terms and conditions for software use, reproduction, and distribution. Includes sections on definitions, copyright license, patent license, redistribution requirements, and liability limitations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: Specifying UCX-Py CUDA 12 Dependency\nDESCRIPTION: A dependency specification line that indicates the requirement for UCX-Py package with CUDA 12 support. This is typically used in package management or requirements files.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/container/deps/requirements.standard.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nucx-py-cu12\n```\n\n----------------------------------------\n\nTITLE: Setting Deployment Environment Variables\nDESCRIPTION: Sets up environment variables required for deploying Dynamo Cloud components to Kubernetes.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/dynamo_cloud.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_USERNAME=<your-docker-username>\nexport DOCKER_PASSWORD=<your-docker-password>\nexport DOCKER_SERVER=<your-docker-server>\nexport IMAGE_TAG=<TAG>  # Use the same tag you used when building the images\nexport NAMESPACE=dynamo-cloud    # change this to whatever you want!\n```\n\n----------------------------------------\n\nTITLE: Open Source Attribution Header\nDESCRIPTION: This snippet introduces the section for listing open source components used in Dynamo, along with their license information.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Open Source License Attribution\n\n   Dynamo uses Open Source components. You can find the details of these open-source projects along with license information below.\n   We are grateful to the developers for their contributions to open source and acknowledge these below.\n```\n\n----------------------------------------\n\nTITLE: Apache License Notice Template\nDESCRIPTION: Standard boilerplate notice template for applying Apache License to works, including copyright notice and license terms.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Verifying Istio Installation\nDESCRIPTION: Command to check if Istio service mesh is properly installed in the Kubernetes cluster.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/dynamo_cloud.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Check if Istio is installed\nkubectl get pods -n istio-system\n\n# Expected output should show running Istio pods\n# istiod-* pods should be in Running state\n```\n\n----------------------------------------\n\nTITLE: Full Apache License 2.0 Text\nDESCRIPTION: Complete text of the Apache License Version 2.0 from January 2004, defining terms, conditions, and permissions for software usage, modification, and distribution.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Text for ftfy\nDESCRIPTION: The Apache License 2.0 text detailing terms and conditions for ftfy package usage. Includes copyright notice and conditions.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2023 Robyn Speer\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Processor Component Definition\nDESCRIPTION: Definition of the Processor component that handles request processing and routing.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_serve.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Processor(ProcessMixIn):\n    worker = depends(VllmWorker)\n    router = depends(Router)\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice text to be included in source files, with placeholders for copyright year and owner information.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text for opentelemetry-sdk\nDESCRIPTION: The complete text of the Apache License 2.0 that applies to the opentelemetry-sdk Python library. It covers definitions, copyright and patent licenses, redistribution conditions, contribution terms, trademark usage, warranty disclaimers, and liability limitations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: Deploying Helm Chart\nDESCRIPTION: Command to deploy the Dynamo Cloud platform using Helm chart deployment script.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/docs/guides/dynamo_deploy/dynamo_cloud.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamo SDK with pip\nDESCRIPTION: Command to install the Dynamo SDK using pip package manager.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/deploy/dynamo/sdk/docs/sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ai-dynamo\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Text\nDESCRIPTION: This snippet contains the full text of the Apache License 2.0. It defines the terms and conditions for using, reproducing, and distributing the licensed work. The license includes sections on definitions, grants of copyright and patent licenses, redistribution, submission of contributions, trademarks, disclaimer of warranty, limitation of liability, and acceptance of warranty or additional liability.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n\"                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \\\"License\\\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \\\"Legal Entity\\\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \\\"control\\\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \\\"Source\\\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \\\"Object\\\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \\\"Work\\\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \\\"Contribution\\\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \\\"submitted\\\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\n\n      \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\"\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: This snippet provides the complete text of the MIT License. It outlines the permissions granted to users of the software, including the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software.  It also includes disclaimers of warranty and limitations of liability.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"The MIT License (MIT)\n\nCopyright (c) 2017 to present Pydantic Services Inc. and individual contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache License 2.0 Text for flashinfer Project\nDESCRIPTION: This snippet shows the full text of the Apache License 2.0 as applied to the flashinfer project. It includes all sections of the license, covering definitions, grant of copyright and patent licenses, redistribution terms, contribution submissions, trademarks, warranty disclaimers, and liability limitations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for pytest-timeout\nDESCRIPTION: The MIT License text specifying terms and conditions for pytest-timeout package usage. Includes copyright notice and permissions.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License\n\nCopyright (C) 2012, 2014 Floris Bruynooghe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for pytest-cov\nDESCRIPTION: The MIT License text detailing terms and conditions for pytest-cov package usage. Includes copyright notice and permissions.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License\n\nCopyright (c) 2010 Meme Dough\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Mypy and Mypyc License Text\nDESCRIPTION: The full text of the MIT License and other licenses that apply to different portions of the Mypy and Mypyc projects. Includes MIT License, PSF 2 License, BeOpen Python License, and CNRI License for Python 1.6.1.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nMypy (and mypyc) are licensed under the terms of the MIT license, reproduced below.\n\n= = = = =\n\nThe MIT License\n\nCopyright (c) 2012-2023 Jukka Lehtosalo and contributors\nCopyright (c) 2015-2023 Dropbox, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n= = = = =\n\nPortions of mypy and mypyc are licensed under different licenses.\nThe files\nmypyc/lib-rt/pythonsupport.h, mypyc/lib-rt/getargs.c and\nmypyc/lib-rt/getargsfast.c are licensed under the PSF 2 License, reproduced\nbelow.\n\n= = = = =\n\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n--------------------------------------------\n\n1. This LICENSE AGREEMENT is between the Python Software Foundation\n(\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using this software (\"Python\") in source or binary form and\nits associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative version,\nprovided, however, that PSF's License Agreement and PSF's notice of copyright,\ni.e., \"Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012 Python Software Foundation; All Rights Reserved\" are retained in Python\nalone or in any derivative version prepared by Licensee.\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python.\n\n4. PSF is making Python available to Licensee on an \"AS IS\"\nbasis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. Nothing in this License Agreement shall be deemed to create any\nrelationship of agency, partnership, or joint venture between PSF and\nLicensee.  This License Agreement does not grant permission to use PSF\ntrademarks or trade name in a trademark sense to endorse or promote\nproducts or services of Licensee, or any third party.\n\n8. By copying, installing or otherwise using Python, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\n\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\n-------------------------------------------\n\nBEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1\n\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an\noffice at 160 Saratoga Avenue, Santa Clara, CA 95051, and the\nIndividual or Organization (\"Licensee\") accessing and otherwise using\nthis software in source or binary form and its associated\ndocumentation (\"the Software\").\n\n2. Subject to the terms and conditions of this BeOpen Python License\nAgreement, BeOpen hereby grants Licensee a non-exclusive,\nroyalty-free, world-wide license to reproduce, analyze, test, perform\nand/or display publicly, prepare derivative works, distribute, and\notherwise use the Software alone or in any derivative version,\nprovided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n\n3. BeOpen is making the Software available to Licensee on an \"AS IS\"\nbasis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE\nSOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS\nAS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY\nDERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n5. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n6. This License Agreement shall be governed by and interpreted in all\nrespects by the law of the State of California, excluding conflict of\nlaw provisions.  Nothing in this License Agreement shall be deemed to\ncreate any relationship of agency, partnership, or joint venture\nbetween BeOpen and Licensee.  This License Agreement does not grant\npermission to use BeOpen trademarks or trade names in a trademark\nsense to endorse or promote products or services of Licensee, or any\nthird party.  As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the\npermissions granted on that web page.\n\n7. By copying, installing or otherwise using the software, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\n\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n---------------------------------------\n\n1. This LICENSE AGREEMENT is between the Corporation for National\nResearch Initiatives, having an office at 1895 Preston White Drive,\nReston, VA 20191 (\"CNRI\"), and the Individual or Organization\n(\"Licensee\") accessing and otherwise using Python 1.6.1 software in\nsource or binary form and its associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, CNRI\nhereby grants Licensee a nonexclusive, royalty-free, world-wide\nlicense to reproduce, analyze, test, perform and/or display publicly,\nprepare derivative works, distribute, and otherwise use Python 1.6.1\nalone or in any derivative version, provided, however, that CNRI's\nLicense Agreement and CNRI's notice of copyright, i.e., \"Copyright (c)\n1995-2001 Corporation for National Research Initiatives; All Rights\nReserved\" are retained in Python 1.6.1 alone or in any derivative\nversion prepared by Licensee.  Alternately, in lieu of CNRI's License\nAgreement, Licensee may substitute the following text (omitting the\nquotes): \"Python 1.6.1 is made available subject to the terms and\nconditions in CNRI's License Agreement.  This Agreement together with\nPython 1.6.1 may be located on the Internet using the following\nunique, persistent identifier (known as a handle): 1895.22/1013.  This\nAgreement may also be obtained from a proxy server on the Internet\nusing the following URL: http://hdl.handle.net/1895.22/1013\".\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python 1.6.1 or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python 1.6.1.\n\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\"\nbasis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\n1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. This License Agreement shall be governed by the federal\nintellectual property law of the United States, including without\nlimitation the federal copyright law, and, to the extent such\nU.S. federal law does not apply, by the law of the Commonwealth of\nVirginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based\non Python 1.6.1 that incorporate non-separable material that was\npreviously distributed under the GNU General Public License (GPL), the\nlaw of the Commonwealth of Virginia shall govern this License\nAgreement only as to issues arising under or with respect to\nParagraphs 4, 5, and 7 of this License Agreement.  Nothing in this\nLicense Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between CNRI and Licensee.  This\nLicense Agreement does not grant permission to use CNRI trademarks or\ntrade name in a trademark sense to endorse or promote products or\n```\n\n----------------------------------------\n\nTITLE: MIT License - Tracing\nDESCRIPTION: MIT license text for tracing v0.1.41 package, defining terms for the tracing instrumentation framework\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2019 Tokio Contributors\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text\nDESCRIPTION: The complete legal text of the Apache License Version 2.0, including definitions, terms and conditions for use, reproduction and distribution, warranty disclaimers, and liability limitations.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: Triton Client BSD License Notice\nDESCRIPTION: BSD 3-Clause License notice for NVIDIA's Triton Inference Server client library, including copyright notice and disclaimer.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2021, NVIDIA CORPORATION. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n * Neither the name of NVIDIA CORPORATION nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Copyright Notice Template\nDESCRIPTION: Boilerplate copyright notice template for applying the Apache License 2.0 to software projects. Includes placeholder fields for year and copyright owner name.\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS.md#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: MIT License - Tokio Core\nDESCRIPTION: Standard MIT license text for Tokio core library, granting permissions for use, modification, and distribution while disclaiming warranties\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nMIT License\n\nCopyright (c) Tokio Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MIT License - Validator\nDESCRIPTION: MIT license text for validator v0.20.0 package by Vincent Prouillet\nSOURCE: https://github.com/ai-dynamo/dynamo/blob/main/ATTRIBUTIONS-Rust.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2016 Vincent Prouillet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```"
  }
]