[
  {
    "owner": "thorgilis",
    "repo": "python.template.microservice",
    "content": "TITLE: Cloning and Setting Up the Python Microservice Template\nDESCRIPTION: Commands for cloning the repository, setting up a virtual environment, and installing the required dependencies.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/thorgilis/Python.Template.Microservice.git\ncd Python.Template.Microservice\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Requirements\nDESCRIPTION: Specifies the required Python packages and their minimum versions for a microservice application. Uses FastAPI as the web framework, Uvicorn as the ASGI server, Pydantic for data validation, python-dotenv for environment management, and httpx for HTTP requests.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfastapi>=0.109.0\nuvicorn>=0.27.0\npydantic>=2.6.0\npython-dotenv>=1.0.0\npydantic-settings>=2.0.0\nhttpx\n```\n\n----------------------------------------\n\nTITLE: Running the Application in Local Development Mode\nDESCRIPTION: Command for starting the FastAPI application using uvicorn with auto-reload for development.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn app.main:app --reload\n```\n\n----------------------------------------\n\nTITLE: Running the Application with Docker\nDESCRIPTION: Command for building and running the containerized application using Docker Compose.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Listing Python Development Dependencies for a Microservice Template\nDESCRIPTION: This snippet contains a list of Python package dependencies with version constraints that are required for developing a microservice. It includes tools for code formatting (black, isort), linting (flake8, pylint), static type checking (mypy), security scanning (bandit), testing (pytest), and runtime dependencies (pydantic-settings, httpx).\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/requirements-dev.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblack>=24.2.0\nisort>=5.13.2\nflake8>=7.0.0\nflake8-docstrings>=1.7.0\nmypy>=1.8.0\npylint>=3.0.3\nbandit>=1.8.0\npytest>=8.0.0\npytest-cov>=4.1.0\npre-commit>=3.6.0\npydantic-settings>=2.0.0\nhttpx\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands for installing production and development dependencies from requirements files.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands for creating a Python virtual environment and activating it for development.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Reporting\nDESCRIPTION: Command for executing tests with pytest and generating a coverage report in XML format.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest --cov=app tests/ --cov-report=xml\n```\n\n----------------------------------------\n\nTITLE: Executing All Linters via Pre-commit\nDESCRIPTION: Command for running all configured linters and code quality tools through pre-commit.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks\nDESCRIPTION: Command for installing pre-commit hooks to automate code quality checks before committing.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Commands for setting up the project configuration by copying the template environment file.\nSOURCE: https://github.com/thorgilis/python.template.microservice/blob/main/readme.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.template .env\n# Edit values as needed\n```"
  }
]