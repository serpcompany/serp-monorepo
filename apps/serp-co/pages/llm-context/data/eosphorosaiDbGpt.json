[
  {
    "owner": "eosphoros-ai",
    "repo": "db-gpt",
    "content": "TITLE: Generating Training and Development Data for Text2SQL\nDESCRIPTION: Shell command to generate the training and development datasets for Text2SQL fine-tuning using the Spider dataset. This script processes raw data into the required format for model training.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Generate train data and dev(eval) data\nsh dbgpt_hub/scripts/gen_train_eval_data.sh\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Summarizer Agent with DB-GPT\nDESCRIPTION: This code demonstrates how to initialize and use a custom summarizer agent with DB-GPT. It shows the process of creating an agent context, connecting to OpenAI's API, building the agent with necessary configurations, and initiating a chat to summarize content about nuclear power.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom dbgpt.agent import AgentContext, ConversableAgent, AgentMemory, LLMConfig, UserProxyAgent\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nclass MySummarizerAgent(ConversableAgent):\n    ...\n\nasync def main():\n    llm_client = OpenAILLMClient(model_alias=\"gpt-3.5-turbo\")\n    context: AgentContext = AgentContext(conv_id=\"summarize\")\n\n    agent_memory: AgentMemory = AgentMemory()\n\n    summarizer = (\n        await MySummarizerAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .build()\n    )\n\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n  \n\n    await user_proxy.initiate_chat(\n        recipient=summarizer,\n        reviewer=user_proxy,\n        message=\"\"\"I want to summarize advantages of Nuclear Power according to the following content.\n            Nuclear power in space is the use of nuclear power in outer space, typically either small fission systems or radioactive decay for electricity or heat. Another use is for scientific observation, as in a MÃ¶ssbauer spectrometer. The most common type is a radioisotope thermoelectric generator, which has been used on many space probes and on crewed lunar missions. Small fission reactors for Earth observation satellites, such as the TOPAZ nuclear reactor, have also been flown.[1] A radioisotope heater unit is powered by radioactive decay and can keep components from becoming too cold to function, potentially over a span of decades.[2]\n            The United States tested the SNAP-10A nuclear reactor in space for 43 days in 1965,[3] with the next test of a nuclear reactor power system intended for space use occurring on 13 September 2012 with the Demonstration Using Flattop Fission (DUFF) test of the Kilopower reactor.[4]\n            After a ground-based test of the experimental 1965 Romashka reactor, which used uranium and direct thermoelectric conversion to electricity,[5] the USSR sent about 40 nuclear-electric satellites into space, mostly powered by the BES-5 reactor. The more powerful TOPAZ-II reactor produced 10 kilowatts of electricity.[3]\n            Examples of concepts that use nuclear power for space propulsion systems include the nuclear electric rocket (nuclear powered ion thruster(s)), the radioisotope rocket, and radioisotope electric propulsion (REP).[6] One of the more explored concepts is the nuclear thermal rocket, which was ground tested in the NERVA program. Nuclear pulse propulsion was the subject of Project Orion.[7]\n            Regulation and hazard prevention[edit]\n            After the ban of nuclear weapons in space by the Outer Space Treaty in 1967, nuclear power has been discussed at least since 1972 as a sensitive issue by states.[8] Particularly its potential hazards to Earth's environment and thus also humans has prompted states to adopt in the U.N. General Assembly the Principles Relevant to the Use of Nuclear Power Sources in Outer Space (1992), particularly introducing safety principles for launches and to manage their traffic.[8]\n            Benefits\n            Both the Viking 1 and Viking 2 landers used RTGs for power on the surface of Mars. (Viking launch vehicle pictured)\n            While solar power is much more commonly used, nuclear power can offer advantages in some areas. Solar cells, although efficient, can only supply energy to spacecraft in orbits where the solar flux is sufficiently high, such as low Earth orbit and interplanetary destinations close enough to the Sun. Unlike solar cells, nuclear power systems function independently of sunlight, which is necessary for deep space exploration. Nuclear-based systems can have less mass than solar cells of equivalent power, allowing more compact spacecraft that are easier to orient and direct in space. In the case of crewed spaceflight, nuclear power concepts that can power both life support and propulsion systems may reduce both cost and flight time.[9]\n            Selected applications and/or technologies for space include:\n            Radioisotope thermoelectric generator\n            Radioisotope heater unit\n            Radioisotope piezoelectric generator\n            Radioisotope rocket\n            Nuclear thermal rocket\n            Nuclear pulse propulsion\n            Nuclear electric rocket\n            \"\"\",\n    )\n    print(await agent_memory.gpts_memory.one_chat_completions(\"summarize\"))\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Stream Response Format\nDESCRIPTION: This snippet shows the format of a streaming chat completion response from the DB-GPT API. It includes multiple data events containing partial responses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/chat.md#2025-04-09_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"Hello\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"!\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \" How\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \" can\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \" I\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \" assist\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \" you\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \" today\"}}]}\n\ndata: {\"id\": \"chatcmpl-ba6fb52e-e5b2-11ee-b031-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"?\"}}]}\n\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Complete Chat Data Implementation with AWEL in Python\nDESCRIPTION: This snippet provides the full code for implementing the Chat Data system using AWEL in DB-GPT. It includes all the components: SQL generation, execution, and custom processing logic.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport json\nimport shutil\n\nimport pandas as pd\n\nfrom dbgpt.core import (\n    ChatPromptTemplate,\n    HumanPromptTemplate,\n    SQLOutputParser,\n    SystemPromptTemplate,\n)\nfrom dbgpt.core.awel import (\n    DAG,\n    BranchOperator,\n    InputOperator,\n    InputSource,\n    JoinOperator,\n    MapOperator,\n    is_empty_data,\n)\nfrom dbgpt.core.operators import PromptBuilderOperator, RequestBuilderOperator\nfrom dbgpt.datasource.operators import DatasourceOperator\nfrom dbgpt.datasource.rdbms.conn_sqlite import SQLiteTempConnector\nfrom dbgpt.model.operators import LLMOperator\nfrom dbgpt.model.proxy import OpenAILLMClient\nfrom dbgpt_ext.rag import ChunkParameters\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\nfrom dbgpt.rag.operators import DBSchemaAssemblerOperator, DBSchemaRetrieverOperator\nfrom dbgpt.storage.vector_store.chroma_store import ChromaVectorConfig, ChromaStore\n\n# Delete old vector store directory(/tmp/awel_with_data_vector_store)\nshutil.rmtree(\"/tmp/awel_with_data_vector_store\", ignore_errors=True)\n\nembeddings = DefaultEmbeddingFactory.openai()\n\n# Here we use the openai LLM model, if you want to use other models, you can replace\n```\n\n----------------------------------------\n\nTITLE: Integrating DB-GPT with OpenAI SDK\nDESCRIPTION: Python code demonstrating how to use DB-GPT's OpenAI-compatible API for chat completions with streaming and reasoning content support.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\nDBGPT_API_KEY = \"dbgpt\"\n\nclient = OpenAI(\n    api_key=DBGPT_API_KEY,\n    base_url=\"http://localhost:5670/api/v2\",\n)\n\nmessages = [\n    {\n        \"role\": \"user\",\n        \"content\": \"Hello, how are you?\",\n    },\n]\n\nhas_thinking = False\nreasoning_content = \"\"\nfor chunk in client.chat.completions.create(\n    model=\"deepseek-chat\",\n    messages=messages,\n    extra_body={\n        \"chat_mode\": \"chat_normal\",\n    },\n    stream=True,\n    max_tokens=4096,\n):\n    delta_content = chunk.choices[0].delta.content\n    if hasattr(chunk.choices[0].delta, \"reasoning_content\"):\n        reasoning_content = chunk.choices[0].delta.reasoning_content\n    if reasoning_content:\n        if not has_thinking:\n            print(\"<thinking>\", flush=True)\n        print(reasoning_content, end=\"\", flush=True)\n        has_thinking = True\n    if delta_content:\n        if has_thinking:\n            print(\"</thinking>\", flush=True)\n        print(delta_content, end=\"\", flush=True)\n        has_thinking = False\n```\n\n----------------------------------------\n\nTITLE: LoRA Fine-tuning Script for Text2SQL Model Training\nDESCRIPTION: Detailed training script with parameters for LoRA fine-tuning of a CodeLlama model for Text2SQL tasks. It configures batch size, learning rate, epochs, and other hyperparameters for optimal training.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nCUDA_VISIBLE_DEVICES=0 python dbgpt_hub/train/sft_train.py \\\n    --model_name_or_path Your_download_CodeLlama-13b-Instruct-hf_path \\\n    --do_train \\\n    --dataset example_text2sql_train \\\n    --max_source_length 2048 \\\n    --max_target_length 512 \\\n    --finetuning_type lora \\\n    --lora_target q_proj,v_proj \\\n    --template llama2 \\\n    --lora_rank 64 \\\n    --lora_alpha 32 \\\n    --output_dir dbgpt_hub/output/adapter/code_llama-13b-2048_epoch8_lora \\\n    --overwrite_cache \\\n    --overwrite_output_dir \\\n    --per_device_train_batch_size 1 \\\n    --gradient_accumulation_steps 16 \\\n    --lr_scheduler_type cosine_with_restarts \\\n    --logging_steps 50 \\\n    --save_steps 2000 \\\n    --learning_rate 2e-4 \\\n    --num_train_epochs 8 \\\n    --plot_loss \\\n    --bf16\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Parameter Handling in Agent Prompt\nDESCRIPTION: Complete implementation of the summarizer agent with dynamic parameter handling by overriding the _init_reply_message method to populate template variables used in constraints.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import AgentMessage, ConversableAgent, ProfileConfig\n\nNOT_RELATED_MESSAGE = \"Did not find the information you want.\"\n\n\nclass MySummarizerAgent(ConversableAgent):\n    profile: ProfileConfig = ProfileConfig(\n        # The name of the agent\n        name=\"Aristotle\",\n        # The role of the agent\n        role=\"Summarizer\",\n        # The core functional goals of the agent tell LLM what it can do with it.\n        goal=(\n            \"Summarize answer summaries based on user questions from provided \"\n            \"resource information or from historical conversation memories.\"\n        ),\n        # Introduction and description of the agent, used for task assignment and display.\n        # If it is empty, the goal content will be used.\n        desc=(\n            \"You can summarize provided text content according to user's questions\"\n            \" and output the summarization.\"\n        ),\n        # Refer to the following. It can contain multiple constraints and reasoning\n        # restriction logic, and supports the use of parameter template {{ param_name }}.\n        constraints=[\n            \"Prioritize the summary of answers to user questions from the improved resource\"\n            \" text. If no relevant information is found, summarize it from the historical \"\n            \"dialogue memory given. It is forbidden to make up your own.\",\n            \"You need to first detect user's question that you need to answer with your\"\n            \" summarization.\",\n            \"Extract the provided text content used for summarization.\",\n            \"Then you need to summarize the extracted text content.\",\n            \"Output the content of summarization ONLY related to user's question. The \"\n            \"output language must be the same to user's question language.\",\n            \"If you think the provided text content is not related to user questions at \"\n            \"all, ONLY output '{{ not_related_message }}'!!.\",\n        ],\n    )\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def _init_reply_message(self, received_message: AgentMessage) -> AgentMessage:\n        reply_message = super()._init_reply_message(received_message)\n        # Fill in the dynamic parameters in the prompt template\n        reply_message.context = {\"not_related_message\": NOT_RELATED_MESSAGE}\n        return reply_message\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent with Tool Integration in Python\nDESCRIPTION: Complete example showing how to set up and use tools with agents in DB-GPT, including OpenAI integration and async handling.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/tools.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom dbgpt.agent import AgentContext, AgentMemory, LLMConfig, UserProxyAgent\nfrom dbgpt.agent.expand.tool_assistant_agent import ToolAssistantAgent\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nasync def main():\n\n    llm_client = OpenAILLMClient(\n        model_alias=\"gpt-3.5-turbo\",  # or other models, eg. \"gpt-4o\"\n        api_base=os.getenv(\"OPENAI_API_BASE\"),\n        api_key=os.getenv(\"OPENAI_API_KEY\"),\n    )\n    context: AgentContext = AgentContext(\n        conv_id=\"test123\", language=\"en\", temperature=0.5, max_new_tokens=2048\n    )\n    agent_memory = AgentMemory()\n\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n\n    tool_man = (\n        await ToolAssistantAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .bind(tools)\n        .build()\n    )\n\n    await user_proxy.initiate_chat(\n        recipient=tool_man,\n        reviewer=user_proxy,\n        message=\"Calculate the product of 10 and 99\",\n    )\n\n    await user_proxy.initiate_chat(\n        recipient=tool_man,\n        reviewer=user_proxy,\n        message=\"Count the number of files in /tmp\",\n    )\n\n    # dbgpt-vis message infos\n    print(await agent_memory.gpts_memory.one_chat_completions(\"test123\"))\n    \nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Agent Package\nDESCRIPTION: Commands to install the DB-GPT agent package with pip, which is required for building agent applications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"dbgpt[agent]>=0.5.9rc0\"\n```\n\n----------------------------------------\n\nTITLE: AWEL DSL Example for RAG Workflow\nDESCRIPTION: Shows how to define a RAG workflow using AWEL's DSL syntax, including HTTP request handling, embedding generation, data retrieval, and LLM processing with error handling.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCREATE WORKFLOW RAG AS\nBEGIN\n    DATA requestData = RECEIVE REQUEST FROM \n    \t\thttp_source(\"/examples/rags\", method = \"post\");\n        \n    DATA processedData = TRANSFORM requestData USING embedding(model = \"text2vec\");\n    DATA retrievedData = RETRIEVE DATA \n    \t\tFROM vstore(database = \"chromadb\", key = processedData)\n    \t\tON ERROR FAIL;\n        \n    DATA modelResult = APPLY LLM \"vicuna-13b\" \n    \t\tWITH DATA retrievedData AND PARAMETERS (temperature = 0.7)\n    \t\tON ERROR RETRY 2 TIMES;\n        \n    RESPOND TO http_source WITH modelResult\n    \t\tON ERROR LOG \"Failed to respond to request\";\nEND;\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG DAG for Question Answering in Python\nDESCRIPTION: This snippet creates a DAG for Retrieval-Augmented Generation. It includes tasks for input handling, retrieval, prompt building, and language model interaction to answer questions based on retrieved context.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprompt = \"\"\"Based on the known information below, provide users with professional and concise answers to their questions. \nIf the answer cannot be obtained from the provided content, please say: \n\"The information provided in the knowledge base is not sufficient to answer this question.\". \nIt is forbidden to make up information randomly. When answering, it is best to summarize according to points 1.2.3.\n          known information: \n          {context}\n          question:\n          {question}\n\"\"\"\n\nwith DAG(\"llm_rag_dag\") as rag_dag:\n    input_task = InputOperator(input_source=InputSource.from_callable())\n    retriever_task = EmbeddingRetrieverOperator(\n        top_k=3,\n        index_store=vector_store,\n    )\n    content_task = MapOperator(lambda cks: \"\\n\".join(c.content for c in cks))\n\n    merge_task = JoinOperator(\n        lambda context, question: {\"context\": context, \"question\": question})\n\n    prompt_task = PromptBuilderOperator(prompt)\n    # The model is gpt-3.5-turbo, you can replace it with other models.\n    req_build_task = RequestBuilderOperator(model=\"gpt-3.5-turbo\")\n    llm_task = LLMOperator(llm_client=llm_client)\n    result_task = MapOperator(lambda r: r.text)\n\n    input_task >> retriever_task >> content_task >> merge_task\n    input_task >> merge_task\n\n    merge_task >> prompt_task >> req_build_task >> llm_task >> result_task\n\nprint(asyncio.run(result_task.call(\"What is the AWEL?\")))\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus for RAG Storage in DB-GPT\nDESCRIPTION: TOML configuration settings for the Milvus vector database connection. This specifies the storage type as Milvus and provides connection parameters including the URI and port, with optional username and password settings commented out.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/milvus_rag_install.md#2025-04-09_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rag.storage]\n[rag.storage.vector]\ntype = \"Milvus\"\nuri = \"127.0.0.1\"\nport = \"19530\"\n#username=\"dbgpt\"\n#password=19530\n```\n\n----------------------------------------\n\nTITLE: Configuring VLLM Model\nDESCRIPTION: TOML configuration snippet to set up the VLLM model and embedding model for DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\nname = \"THUDM/glm-4-9b-chat-hf\"\nprovider = \"vllm\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n\n[[models.embeddings]]\nname = \"BAAI/bge-large-zh-v1.5\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Round Chat Using AWEL DAG and OpenAI\nDESCRIPTION: Main implementation of a multi-round chat system using AWEL's DAG structure. Sets up prompt templates, chat history management, and LLM interaction using OpenAI's API. Includes example conversation flow with history retention.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/multi_round_chat_withllm.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, MapOperator, BaseOperator\nfrom dbgpt.core import (\n    ChatPromptTemplate,\n    HumanPromptTemplate,\n    InMemoryStorage,\n    MessagesPlaceholder,\n    ModelRequestContext,\n    SystemPromptTemplate,\n)\nfrom dbgpt.core.operators import (\n    ChatComposerInput,\n    ChatHistoryPromptComposerOperator,\n)\nfrom dbgpt.model.proxy import OpenAILLMClient\nfrom dbgpt.model.operators import LLMOperator\n\nwith DAG(\"multi_round_chat_with_lll_dag\") as dag:\n    prompt = ChatPromptTemplate(\n        messages=[\n            SystemPromptTemplate.from_template(\"You are a helpful chatbot.\"),\n            MessagesPlaceholder(variable_name=\"chat_history\"),\n            HumanPromptTemplate.from_template(\"{user_input}\"),\n        ]\n    )\n\n    composer_operator = ChatHistoryPromptComposerOperator(\n        prompt_template=prompt,\n        keep_end_rounds=5,\n        storage=InMemoryStorage(),\n        message_storage=InMemoryStorage(),\n    )\n    \n    input_task = MapOperator(\n        lambda req: ChatComposerInput(\n            context=ModelRequestContext(conv_uid=req[\"conv_uid\"]),\n            prompt_dict={\"user_input\": req[\"user_input\"]},\n            model_dict={\"model\": \"gpt-3.5-turbo\"},\n        )\n    )\n\n    # Use LLMOperator to generate response.\n    llm_task = LLMOperator(task_name=\"llm_task\", llm_client=OpenAILLMClient())\n    out_parse_task = MapOperator(lambda out: out.text)\n    \n    input_task >> composer_operator >> llm_task >> out_parse_task\n\n\nasync def main(task: BaseOperator):\n    conv_uid = \"conv_1234\"\n    first_user_input = \"Who is elon musk?\"\n    second_user_input = \"Is he rich?\"\n    \n    print(f\"First round\\nUser: {first_user_input}\")\n    first_ai_response = await task.call({\"conv_uid\": conv_uid, \"user_input\": first_user_input})\n    print(f\"AI: {first_ai_response}\")\n    \n    print(f\"\\nSecond round\\nUser: {second_user_input}\")\n    second_ai_response = await task.call({\"conv_uid\": conv_uid, \"user_input\": second_user_input})\n    print(f\"AI: {second_ai_response}\")\n\nasyncio.run(main(out_parse_task))\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream of Numbers with StreamifyAbsOperator in Python\nDESCRIPTION: This example shows how to create a stream of numbers using a custom StreamifyAbsOperator. It demonstrates the implementation of the operator, its usage within a DAG, and how to consume the stream asynchronously.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.5_streamify_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"Create a stream of numbers from 0 to `n-1`\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nwith DAG(\"numbers_dag\") as dag:\n    task = NumberProducerOperator()\n\nasync def print_stream(t, n: int):\n    # Call the streaming operator by `call_stream` method\n    async for i in await t.call_stream(call_data=n):\n        print(i)\n\nasyncio.run(print_stream(task, 10))\n```\n\n----------------------------------------\n\nTITLE: Processing Stream Data with InputOperator\nDESCRIPTION: This example demonstrates how to use InputOperator with a stream data source. It creates an async generator that yields numbers 0-9 and then processes this stream data.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, InputOperator, SimpleInputSource\n\nasync def stream_data():\n    for i in range(10):\n        yield i\n\nwith DAG(\"awel_input_operator\") as dag:\n    input_source = SimpleInputSource(data=stream_data())\n    input_task = InputOperator(input_source=input_source)\n\nasync def print_stream(t: InputOperator):\n    async for i in await t.call_stream():\n        print(i)\n\nasyncio.run(print_stream(input_task))\n```\n\n----------------------------------------\n\nTITLE: Creating System Prompt Template for Database Expert LLM in Python\nDESCRIPTION: Defines a system prompt template that instructs the LLM to act as a database expert. The prompt includes context about the database, tables, constraints for SQL generation, and expected response format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsystem_prompt = \"\"\"You are a database expert. Please answer the user's question based on the database selected by the user and some of the available table structure definitions of the database.\nDatabase name:\n    {db_name}\nTable structure definition:\n    {table_info}\n\nConstraint:\n1.Please understand the user's intention based on the user's question, and use the given table structure definition to create a grammatically correct {dialect} sql. If sql is not required, answer the user's question directly.. \n2.Always limit the query to a maximum of {top_k} results unless the user specifies in the question the specific number of rows of data he wishes to obtain.\n3.You can only use the tables provided in the table structure information to generate sql. If you cannot generate sql based on the provided table structure, please say: \"The table structure information provided is not enough to generate sql queries.\" It is prohibited to fabricate information at will.\n4.Please be careful not to mistake the relationship between tables and columns when generating SQL.\n5.Please check the correctness of the SQL and ensure that the query performance is optimized under correct conditions.\n6.Please choose the best one from the display methods given below for data rendering, and put the type name into the name parameter value that returns the required format. If you cannot find the most suitable one, use 'Table' as the display method.\nthe available data display methods are as follows: {display_type}\n\nUser Question:\n    {user_input}\nPlease think step by step and respond according to the following JSON format:\n    {response}\nEnsure the response is correct json and can be parsed by Python json.loads.\n\"\"\"\n\nRESPONSE_FORMAT_SIMPLE = {\n    \"thoughts\": \"thoughts summary to say to user\",\n    \"sql\": \"SQL Query to run\",\n    \"display_type\": \"Data display method\",\n}\n\nprompt = ChatPromptTemplate(\n    messages=[\n        SystemPromptTemplate.from_template(\n            system_prompt,\n            response_format=json.dumps(\n                RESPONSE_FORMAT_SIMPLE, ensure_ascii=False, indent=4\n            ),\n        ),\n        HumanPromptTemplate.from_template(\"{user_input}\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Upgrading DB-GPT Database Schema with SQL\nDESCRIPTION: This SQL script modifies existing tables and creates new ones in the DB-GPT database. It adds columns to tables like chat_history, gpts_app, and connect_config, and creates new tables such as recommend_question and user_recent_apps. The script also includes table definitions for file storage, variables, and plugin management.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/upgrade/v0.6.0.md#2025-04-09_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUSE dbgpt;\n-- chat_history\nALTER TABLE  chat_history ADD COLUMN `app_code` varchar(255) DEFAULT NULL COMMENT 'App unique code' after `message_ids`;\n\n-- gpts_app\nALTER TABLE  gpts_app ADD COLUMN `published` varchar(64) DEFAULT 'false' COMMENT 'Has it been published?';\nALTER TABLE  gpts_app ADD COLUMN `param_need` text DEFAULT NULL COMMENT 'Parameter information supported by the application';\nALTER TABLE  gpts_app ADD COLUMN `admins` text DEFAULT NULL COMMENT 'administrator';\n\n\n-- connect_config\nALTER TABLE  connect_config ADD COLUMN `user_name` varchar(255) DEFAULT NULL COMMENT 'user name';\nALTER TABLE  connect_config ADD COLUMN `user_id` varchar(255) DEFAULT NULL COMMENT 'user id';\n\n-- document_chunk\nALTER TABLE  document_chunk ADD COLUMN `questions` text DEFAULT NULL COMMENT 'chunk related questions';\n\n-- knowledge_document\nALTER TABLE  knowledge_document ADD COLUMN `doc_token` varchar(100) DEFAULT NULL COMMENT 'doc token';\nALTER TABLE  knowledge_document ADD COLUMN `questions` text DEFAULT NULL COMMENT 'document related questions';\n\n-- gpts_messages\nALTER TABLE  gpts_messages ADD COLUMN `is_success` int(4)  NULL DEFAULT 0 COMMENT 'agent message is success';\nALTER TABLE  gpts_messages ADD COLUMN `app_code` varchar(255) NOT NULL COMMENT 'Current AI assistant code';\nALTER TABLE  gpts_messages ADD COLUMN `app_name` varchar(255) NOT NULL COMMENT 'Current AI assistant name';\nALTER TABLE  gpts_messages ADD COLUMN `resource_info` text DEFAULT NULL  COMMENT 'Current conversation resource info';\n\n-- prompt_manage\nALTER TABLE  prompt_manage ADD COLUMN `prompt_code` varchar(255) NULL COMMENT 'Prompt code';\nALTER TABLE  prompt_manage ADD COLUMN `response_schema` text  NULL COMMENT 'Prompt response schema';\nALTER TABLE  prompt_manage ADD COLUMN `user_code` varchar(128)  NULL COMMENT 'User code';\n\n-- chat_feed_back\nALTER TABLE  chat_feed_back ADD COLUMN `message_id` varchar(255)  NULL COMMENT 'Message id';\nALTER TABLE  chat_feed_back ADD COLUMN `feedback_type` varchar(50)  NULL COMMENT 'Feedback type like or unlike';\nALTER TABLE  chat_feed_back ADD COLUMN `reason_types` varchar(255)  NULL COMMENT 'Feedback reason categories';\nALTER TABLE  chat_feed_back ADD COLUMN `user_code` varchar(128)  NULL COMMENT 'User code';\nALTER TABLE  chat_feed_back ADD COLUMN `remark` text NULL COMMENT 'Feedback remark';\n\n-- dbgpt_serve_flow\nALTER TABLE dbgpt_serve_flow ADD COLUMN `variables` text DEFAULT NULL COMMENT 'Flow variables, JSON format';\n\n-- dbgpt.recommend_question definition\nCREATE TABLE `recommend_question` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'autoincrement id',\n  `gmt_create` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',\n  `gmt_modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'last update time',\n  `app_code` varchar(255) DEFAULT NULL COMMENT 'Current AI assistant code',\n  `question` text DEFAULT NULL COMMENT 'question',\n  `user_code` int(11) DEFAULT NULL COMMENT 'user code',\n  `sys_code` varchar(255) DEFAULT NULL COMMENT 'system app code',\n  `valid` varchar(10) DEFAULT 'true' COMMENT 'is it effectiveï¼true/false',\n  `chat_mode` varchar(255) DEFAULT NULL COMMENT 'Conversation scene modeï¼chat_knowledge...',\n  `params` text DEFAULT NULL COMMENT 'question param',\n  `is_hot_question` varchar(10) DEFAULT 'false' COMMENT 'Is it a popular recommendation question?',\n  PRIMARY KEY (`id`),\n  KEY `idx_rec_q_app_code` (`app_code`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=\"AI application related recommendation issues\";\n\n-- dbgpt.user_recent_apps definition\nCREATE TABLE `user_recent_apps` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'autoincrement id',\n  `gmt_create` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',\n  `gmt_modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'last update time',\n  `app_code` varchar(255) DEFAULT NULL COMMENT 'AI assistant code',\n  `last_accessed` timestamp NULL DEFAULT NULL COMMENT 'User recent usage time',\n  `user_code` varchar(255) DEFAULT NULL COMMENT 'user code',\n  `sys_code` varchar(255) DEFAULT NULL COMMENT 'system app code',\n  PRIMARY KEY (`id`),\n  KEY `idx_user_r_app_code` (`app_code`),\n  KEY `idx_last_accessed` (`last_accessed`),\n  KEY `idx_user_code` (`user_code`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='User recently used apps';\n\n-- dbgpt.dbgpt_serve_file definition\nCREATE TABLE `dbgpt_serve_file` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'Auto increment id',\n  `bucket` varchar(255) NOT NULL COMMENT 'Bucket name',\n  `file_id` varchar(255) NOT NULL COMMENT 'File id',\n  `file_name` varchar(256) NOT NULL COMMENT 'File name',\n  `file_size` int DEFAULT NULL COMMENT 'File size',\n  `storage_type` varchar(32) NOT NULL COMMENT 'Storage type',\n  `storage_path` varchar(512) NOT NULL COMMENT 'Storage path',\n  `uri` varchar(512) NOT NULL COMMENT 'File URI',\n  `custom_metadata` text DEFAULT NULL COMMENT 'Custom metadata, JSON format',\n  `file_hash` varchar(128) DEFAULT NULL COMMENT 'File hash',\n  `user_name` varchar(128) DEFAULT NULL COMMENT 'User name',\n  `sys_code` varchar(128) DEFAULT NULL COMMENT 'System code',\n  `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'Record creation time',\n  `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Record update time',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_bucket_file_id` (`bucket`, `file_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- dbgpt.dbgpt_serve_variables definition\nCREATE TABLE `dbgpt_serve_variables` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'Auto increment id',\n  `key` varchar(128) NOT NULL COMMENT 'Variable key',\n  `name` varchar(128) DEFAULT NULL COMMENT 'Variable name',\n  `label` varchar(128) DEFAULT NULL COMMENT 'Variable label',\n  `value` text DEFAULT NULL COMMENT 'Variable value, JSON format',\n  `value_type` varchar(32) DEFAULT NULL COMMENT 'Variable value type(string, int, float, bool)',\n  `category` varchar(32) DEFAULT 'common' COMMENT 'Variable category(common or secret)',\n  `encryption_method` varchar(32) DEFAULT NULL COMMENT 'Variable encryption method(fernet, simple, rsa, aes)',\n  `salt` varchar(128) DEFAULT NULL COMMENT 'Variable salt',\n  `scope` varchar(32) DEFAULT 'global' COMMENT 'Variable scope(global,flow,app,agent,datasource,flow_priv,agent_priv, \"\"etc)',\n  `scope_key` varchar(256) DEFAULT NULL COMMENT 'Variable scope key, default is empty, for scope is \"flow_priv\", the scope_key is dag id of flow',\n  `enabled` int DEFAULT 1 COMMENT 'Variable enabled, 0: disabled, 1: enabled',\n  `description` text DEFAULT NULL COMMENT 'Variable description',\n  `user_name` varchar(128) DEFAULT NULL COMMENT 'User name',\n  `sys_code` varchar(128) DEFAULT NULL COMMENT 'System code',\n  `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'Record creation time',\n  `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Record update time',\n  PRIMARY KEY (`id`),\n  KEY `ix_your_table_name_key` (`key`),\n  KEY `ix_your_table_name_name` (`name`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- dbgpt.dbgpt_serve_dbgpts_my definition\nCREATE TABLE `dbgpt_serve_dbgpts_my` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'autoincrement id',\n  `name` varchar(255)  NOT NULL COMMENT 'plugin name',\n  `user_name` varchar(255)  DEFAULT NULL COMMENT 'user name',\n  `file_name` varchar(255)  NOT NULL COMMENT 'plugin package file name',\n  `type` varchar(255)  DEFAULT NULL COMMENT 'plugin type',\n  `version` varchar(255)  DEFAULT NULL COMMENT 'plugin version',\n  `use_count` int DEFAULT NULL COMMENT 'plugin total use count',\n  `succ_count` int DEFAULT NULL COMMENT 'plugin total success count',\n  `sys_code` varchar(128) DEFAULT NULL COMMENT 'System code',\n  `gmt_created` TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'plugin install time',\n  `gmt_modified` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name` (`name`, `user_name`),\n  KEY `ix_my_plugin_sys_code` (`sys_code`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- dbgpt.dbgpt_serve_dbgpts_hub definition\nCREATE TABLE `dbgpt_serve_dbgpts_hub` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'autoincrement id',\n  `name` varchar(255) NOT NULL COMMENT 'plugin name',\n  `description` varchar(255)  NULL COMMENT 'plugin description',\n  `author` varchar(255) DEFAULT NULL COMMENT 'plugin author',\n  `email` varchar(255) DEFAULT NULL COMMENT 'plugin author email',\n  `type` varchar(255) DEFAULT NULL COMMENT 'plugin type',\n  `version` varchar(255) DEFAULT NULL COMMENT 'plugin version',\n  `storage_channel` varchar(255) DEFAULT NULL COMMENT 'plugin storage channel',\n  `storage_url` varchar(255) DEFAULT NULL COMMENT 'plugin download url',\n  `download_param` varchar(255) DEFAULT NULL COMMENT 'plugin download param',\n  `gmt_created` TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'plugin upload time',\n  `gmt_modified` TIMESTAMP    DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',\n  `installed` int DEFAULT NULL COMMENT 'plugin already installed count',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chat Completion Stream Response\nDESCRIPTION: This snippet shows the expected response format for a chat completion stream. It includes the response structure with details such as message ID, creation timestamp, model used, and the content of the assistant's response.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/app.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"id\": \"109bfc28-fe87-452c-8e1f-d4fe43283b7d\", \"created\": 1710919480, \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"```agent-plans\\n[{\\\"name\\\": \\\"Introduce Awel\\\", \\\"num\\\": 2, \\\"status\\\": \\\"complete\\\", \\\"agent\\\": \\\"Human\\\", \\\"markdown\\\": \\\"```agent-messages\\\\n[{\\\\\\\"sender\\\\\\\": \\\\\\\"Summarizer\\\\\\\", \\\\\\\"receiver\\\\\\\": \\\\\\\"Human\\\\\\\", \\\\\\\"model\\\\\\\": \\\\\\\"gpt-4o\\\\\\\", \\\\\\\"markdown\\\\\\\": \\\\\\\"Agentic Workflow Expression Language (AWEL) is a specialized language designed for developing large model applications with intelligent agent workflows. It offers flexibility and functionality, allowing developers to focus on business logic for LLMs applications without getting bogged down in model and environment details. AWEL uses a layered API design architecture, making it easier to work with. You can find examples and source code to get started with AWEL, and it supports various operators and environments. AWEL is a powerful tool for building native data applications through workflows and agents.\\\\\\\"}]\\\\n```\"}}]}\n\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Pattern with AWEL DAG API\nDESCRIPTION: Example showing how to build a Retrieval-Augmented Generation (RAG) workflow using AWEL's DAG API. The workflow includes HTTP triggering, request parsing, prompt management, chat history, embeddings, and model operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith DAG(\"simple_rag_example\") as dag:\n    trigger_task = HttpTrigger(\n        \"/examples/simple_rag\", methods=\"POST\", request_body=ConversationVo\n    )\n    req_parse_task = RequestParseOperator()\n    # TODO should register prompt template first\n    prompt_task = PromptManagerOperator()\n    history_storage_task = ChatHistoryStorageOperator()\n    history_task = ChatHistoryOperator()\n    embedding_task = EmbeddingEngingOperator()\n    chat_task = BaseChatOperator()\n    model_task = ModelOperator()\n    output_parser_task = MapOperator(lambda out: out.to_dict()[\"text\"])\n\n    (\n        trigger_task\n        >> req_parse_task\n        >> prompt_task\n        >> history_storage_task\n        >> history_task\n        >> embedding_task\n        >> chat_task\n        >> model_task\n        >> output_parser_task\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Data Streams with StreamifyAbsOperator\nDESCRIPTION: Two examples of StreamifyAbsOperator - one generating a sequence of numbers and another simulating a streaming LLM service. StreamifyAbsOperator converts input data into asynchronous data streams.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"åå»ºä» 0 å° n-1 çæ°å­æµ\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nwith DAG(\"numbers_dag\") as dag:\n    task = NumberProducerOperator()\n    \n# ä½¿ç¨ç¤ºä¾\nasync def print_stream(t, n: int):\n    async for i in await t.call_stream(call_data=n):\n        print(i)\n\n# è¾åº: 0, 1, 2, 3, 4\nawait print_stream(task, 5)\n```\n\n----------------------------------------\n\nTITLE: Creating Directory File Counter Tool in Python\nDESCRIPTION: A tool that counts the number of files in a specified directory. Uses type annotations and documentation for better integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/tools.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom typing_extensions import Annotated, Doc\n\n@tool\ndef count_directory_files(path: Annotated[str, Doc(\"The directory path\")]) -> int:\n    \"\"\"Count the number of files in a directory.\"\"\"\n    if not os.path.isdir(path):\n        raise ValueError(f\"Invalid directory path: {path}\")\n    return len(os.listdir(path))\n```\n\n----------------------------------------\n\nTITLE: Implementing an Agent with Database Integration in Python\nDESCRIPTION: This code demonstrates how to create and use an agent with database integration. It sets up the necessary components such as LLM client, agent context, memory, and resources, then initiates a chat to query the database.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/database.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom dbgpt.agent import AgentContext, AgentMemory, LLMConfig, UserProxyAgent\nfrom dbgpt.agent.expand.data_scientist_agent import DataScientistAgent\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nasync def main():\n\n    llm_client = OpenAILLMClient(\n        model_alias=\"gpt-3.5-turbo\",  # or other models, eg. \"gpt-4o\"\n        api_base=os.getenv(\"OPENAI_API_BASE\"),\n        api_key=os.getenv(\"OPENAI_API_KEY\"),\n    )\n    context: AgentContext = AgentContext(\n        conv_id=\"test123\", language=\"en\", temperature=0.5, max_new_tokens=2048\n    )\n    agent_memory = AgentMemory()\n\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n\n    sql_boy = (\n        await DataScientistAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(db_resource)\n        .bind(agent_memory)\n        .build()\n    )\n\n    await user_proxy.initiate_chat(\n        recipient=sql_boy,\n        reviewer=user_proxy,\n        message=\"What is the name and age of the user with age less than 18\",\n    )\n\n    ## dbgpt-vis message infos\n    print(await agent_memory.gpts_memory.one_chat_completions(\"test123\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Simple MapOperator Examples\nDESCRIPTION: Two examples of using MapOperator: a simple lambda function example and a custom operator class that doubles a number. MapOperator transforms input data into output data using a mapping function.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n with DAG(\"awel_hello_world\") as dag:\n    task = MapOperator(map_function=lambda x: f\"Hello, {x}!\")\n    \n    \nclass DoubleNumberOperator(MapOperator[int, int]):\n    async def map(self, x: int) -> int:\n        return x * 2 \n\nwith DAG(\"awel_double_number\") as dag:\n    task = DoubleNumberOperator()\n```\n\n----------------------------------------\n\nTITLE: Simulating Streaming LLM Service with StreamifyAbsOperator\nDESCRIPTION: Example of creating a mock LLM service that produces a stream of text chunks. This demonstrates how StreamifyAbsOperator can be used to simulate streaming responses from language models.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# æ¨¡ææµå¼LLMæå¡\nclass MockLLMService(StreamifyAbsOperator[str, str]):\n    \"\"\"æ¨¡ææµå¼LLMæå¡\"\"\"\n    def __init__(self, mock_data: List[str], **kwargs):\n        self.mock_data = mock_data\n        super().__init__(**kwargs)\n        \n    async def streamify(self, user_input: str) -> AsyncIterator[str]:\n        for data in self.mock_data:\n            yield data\n\nwith DAG(\"mock_llm\") as dag:\n    # ä½¿ç¨ç¤ºä¾\n    task = MockLLMService(\n        mock_data=[\"Hello, \", \"how \", \"can \", \"I \", \"help \", \"you?\"]\n    )\n\nasync for text in await task.call_stream(\"Hello\"):\n    print(text, end=\"\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector Store and Loading Knowledge in Python\nDESCRIPTION: This snippet sets up a ChromaStore vector store and creates a DAG to load knowledge from a URL. It uses KnowledgeOperator and EmbeddingAssemblerOperator to process and store the data.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Delete old vector store directory(/tmp/awel_rag_test_vector_store)\nshutil.rmtree(\"/tmp/awel_rag_test_vector_store\", ignore_errors=True)\n\nvector_store = ChromaStore(\n    vector_store_config=ChromaVectorConfig(\n        name=\"test_vstore\",\n        persist_path=\"/tmp/awel_rag_test_vector_store\",\n        embedding_fn=embeddings\n    ),\n)\n\nwith DAG(\"load_knowledge_dag\") as knowledge_dag:\n    # Load knowledge from URL\n    knowledge_task = KnowledgeOperator(knowledge_type=KnowledgeType.URL.name)\n    assembler_task = EmbeddingAssemblerOperator(\n        index_store=vector_store,\n        chunk_parameters=ChunkParameters(chunk_strategy=\"CHUNK_BY_SIZE\")\n    )\n    knowledge_task >> assembler_task\n\nchunks = asyncio.run(assembler_task.call(\"https://docs.dbgpt.site/docs/awel/\"))\nprint(f\"Chunk length: {len(chunks)}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Loading DAG with DB-GPT AWEL Framework in Python\nDESCRIPTION: Creates a Directed Acyclic Graph (DAG) for loading database schema into the vector store. It uses InputOperator and DBSchemaAssemblerOperator to extract and store schema information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwith DAG(\"load_schema_dag\") as load_schema_dag:\n    input_task = InputOperator.dummy_input()\n    # Load database schema to vector store\n    assembler_task = DBSchemaAssemblerOperator(\n        connector=db_conn,\n        index_store=vector_store,\n        chunk_parameters=ChunkParameters(chunk_strategy=\"CHUNK_BY_SIZE\"),\n    )\n    input_task >> assembler_task\n\nchunks = asyncio.run(assembler_task.call())\nprint(chunks)\n```\n\n----------------------------------------\n\nTITLE: Building Calculator with Code Assistant and User Proxy Agents\nDESCRIPTION: Complete implementation of a calculator agent using DB-GPT's agent framework. Creates a code assistant agent that generates and executes Python code, and a user proxy agent that initiates the conversation and reviews responses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/introduction.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom dbgpt.agent import LLMConfig, UserProxyAgent\nfrom dbgpt.agent.expand.code_assistant_agent import CodeAssistantAgent\n\n\nasync def main():\n\n    # Create a code assistant agent\n    coder = (\n        await CodeAssistantAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .build()\n    )\n\n    # Create a user proxy agent\n    user_proxy = await UserProxyAgent().bind(context).bind(agent_memory).build()\n\n    # Initiate a chat with the user proxy agent\n    await user_proxy.initiate_chat(\n        recipient=coder,\n        reviewer=user_proxy,\n        message=\"Calculate the result of 321 * 123\",\n    )\n    # Obtain conversation history messages between agents\n    print(await agent_memory.gpts_memory.one_chat_completions(\"test123\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Integration in DB-GPT YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up Ollama integration within DB-GPT. It specifies the model name, API base URL, and other essential parameters for connecting to an Ollama instance.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/ollama_llm_install.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nllm:\n  - type: ollama\n    model: llama2\n    # model: mistral\n    context_length: 4096\n    api_base: \"http://localhost:11434/api\"\n    generate_config:\n      temperature: 0.9\n      top_k: 1\n      top_p: 0.85\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Package\nDESCRIPTION: Command to install the OpenAI package, which is used as the LLM provider for the agent example.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/introduction.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install openai\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Profile Configuration\nDESCRIPTION: Implementation of a custom agent with a defined profile that includes name, role, goal, and description to establish the agent's identity and purpose.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ConversableAgent, ProfileConfig\n\nclass MySummarizerAgent(ConversableAgent):\n    profile: ProfileConfig = ProfileConfig(\n        # The name of the agent\n        name=\"Aristotle\",\n        # The role of the agent\n        role=\"Summarizer\",\n        # The core functional goals of the agent tell LLM what it can do with it.\n        goal=(\n            \"Summarize answer summaries based on user questions from provided \"\n            \"resource information or from historical conversation memories.\"\n        ),\n        # Introduction and description of the agent, used for task assignment and display. \n        # If it is empty, the goal content will be used.\n        desc=(\n            \"You can summarize provided text content according to user's questions\"\n            \" and output the summarization.\"\n        ),\n    )\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: List Flows Using Python Client\nDESCRIPTION: Example of using the Python client to list all available flows. This demonstrates how to use the dbgpt_client library to list flows.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.flow import list_flow\n\nDBGPT_API_KEY = \"dbgpt\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await list_flow(client=client)\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Initiating Multi-Agent Conversation between Bob and Alice in Python\nDESCRIPTION: This snippet demonstrates the creation of two agents, Bob and Alice, with specific profiles. It then initiates a chat between them, showcasing how to set up and start a multi-agent conversation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/conversation.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.agent import ConversableAgent, ProfileConfig, LLMConfig, BlankAction\n\n\nasync def main():\n    bob_profile = ProfileConfig(\n        name=\"Bob\",\n        role=\"Comedians\",\n        system_prompt_template=system_prompt_template,\n        user_prompt_template=user_prompt_template,\n    )\n    bob = (\n        await ConversableAgent(profile=bob_profile)\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .bind(BlankAction)\n        .build()\n    )\n    alice_profile = ProfileConfig(\n        name=\"Alice\",\n        role=\"Comedians\",\n        system_prompt_template=system_prompt_template,\n        user_prompt_template=user_prompt_template,\n    )\n    alice = (\n        await ConversableAgent(profile=alice_profile)\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .bind(BlankAction)\n        .build()\n    )\n\n    await bob.initiate_chat(alice, message=\"Tell me a joke.\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Complete Even/Odd Number Processing DAG Example\nDESCRIPTION: A full example demonstrating how to build a DAG with branch operations, including input handling, conditional processing, and result joining for even and odd numbers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.4_branch_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import (\n    DAG, BranchOperator, MapOperator, JoinOperator, \n    InputOperator, SimpleCallDataInputSource,\n    is_empty_data\n)\n\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nbranch_mapping = {\n    branch_even: \"even_task\",\n    branch_odd: \"odd_task\"\n}\n\ndef even_func(x: int) -> int:\n    print(f\"Branch even, {x} is even, multiply by 10\")\n    return x * 10\n\ndef odd_func(x: int) -> int:\n    print(f\"Branch odd, {x} is odd, multiply by itself\")\n    return x * x\n\ndef combine_function(x: int, y: int) -> int:\n    print(f\"Received {x} and {y}\")\n    # Return the first non-empty data\n    return x if not is_empty_data(x) else y\n    \nwith DAG(\"awel_branch_operator\") as dag:\n    input_task = InputOperator(input_source=SimpleCallDataInputSource())\n    task = BranchOperator(branches=branch_mapping)\n    even_task = MapOperator(task_name=\"even_task\", map_function=even_func)\n    odd_task = MapOperator(task_name=\"odd_task\", map_function=odd_func)\n    join_task = JoinOperator(combine_function=combine_function, can_skip_in_branch=False)\n    input_task >> task >> even_task >> join_task\n    input_task >> task >> odd_task >> join_task\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI SDK to call DB-GPT local models\nDESCRIPTION: This code demonstrates how to use the OpenAI SDK to interact with DB-GPT's local models, configured to use a specific endpoint and model. The example shows setting up the client connection and making a simple chat completion request.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/api.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport openai\nopenai.api_key = \"EMPTY\"\nopenai.api_base = \"http://127.0.0.1:8100/api/v1\"\nmodel = \"vicuna-13b-v1.5\"\n\ncompletion = openai.ChatCompletion.create(\n  model=model,\n  messages=[{\"role\": \"user\", \"content\": \"hello\"}]\n)\n# print the completion\nprint(completion.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Generating SQL with LLM using AWEL in Python\nDESCRIPTION: This snippet demonstrates how to use AWEL operators to generate SQL queries from user input using a language model. It includes setting up the DAG, defining prompts, and processing the LLM response.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport json\n\nfrom dbgpt.core import (\n    ChatPromptTemplate,\n    HumanPromptTemplate,\n    SystemPromptTemplate,\n    SQLOutputParser\n)\nfrom dbgpt.core.awel import DAG, InputOperator, InputSource, MapOperator, JoinOperator\nfrom dbgpt.core.operators import PromptBuilderOperator, RequestBuilderOperator\nfrom dbgpt.rag.operators import DBSchemaRetrieverOperator\nfrom dbgpt.model.operators import LLMOperator\n\nsystem_prompt = \"\"\"You are a database expert. Please answer the user's question based on the database selected by the user and some of the available table structure definitions of the database.\nDatabase name:\n    {db_name}\nTable structure definition:\n    {table_info}\n    \nConstraint:\n1.Please understand the user's intention based on the user's question, and use the given table structure definition to create a grammatically correct {dialect} sql. If sql is not required, answer the user's question directly.. \n2.Always limit the query to a maximum of {top_k} results unless the user specifies in the question the specific number of rows of data he wishes to obtain.\n3.You can only use the tables provided in the table structure information to generate sql. If you cannot generate sql based on the provided table structure, please say: \"The table structure information provided is not enough to generate sql queries.\" It is prohibited to fabricate information at will.\n4.Please be careful not to mistake the relationship between tables and columns when generating SQL.\n5.Please check the correctness of the SQL and ensure that the query performance is optimized under correct conditions.\n6.Please choose the best one from the display methods given below for data rendering, and put the type name into the name parameter value that returns the required format. If you cannot find the most suitable one, use 'Table' as the display method.\nthe available data display methods are as follows: {display_type}\n \nUser Question:\n    {user_input}\nPlease think step by step and respond according to the following JSON format:\n    {response}\nEnsure the response is correct json and can be parsed by Python json.loads.\n\"\"\"\n\nRESPONSE_FORMAT_SIMPLE = {\n    \"thoughts\": \"thoughts summary to say to user\",\n    \"sql\": \"SQL Query to run\",\n    \"display_type\": \"Data display method\",\n}\n\nprompt = ChatPromptTemplate(\n    messages=[\n        SystemPromptTemplate.from_template(\n            system_prompt,\n            response_format=json.dumps(\n                RESPONSE_FORMAT_SIMPLE, ensure_ascii=False, indent=4\n            ),\n        ),\n        HumanPromptTemplate.from_template(\"{user_input}\"),\n    ]\n)\n\n\nwith DAG(\"chat_data_dag\") as chat_data_dag:\n    input_task = InputOperator(input_source=InputSource.from_callable())\n    retriever_task = DBSchemaRetrieverOperator(\n        top_k=1,\n        index_store=vector_store,\n    )\n    content_task = MapOperator(lambda cks: [c.content for c in cks]) \n    merge_task = JoinOperator(lambda table_info, ext_dict: {\"table_info\": table_info, **ext_dict}) \n    prompt_task = PromptBuilderOperator(prompt)\n    req_build_task = RequestBuilderOperator(model=\"gpt-3.5-turbo\")\n    llm_task = LLMOperator(llm_client=llm_client) \n    # Parse the pure json response, then transform it to the python dict\n    sql_parse_task = SQLOutputParser()\n \n    input_task >> MapOperator(lambda x: x[\"user_input\"]) >> retriever_task >> content_task >> merge_task\n    input_task >> merge_task\n    merge_task >> prompt_task >> req_build_task >> llm_task >> sql_parse_task\n \n\nresult = asyncio.run(sql_parse_task.call({\n    \"user_input\": \"Query the name and age of users younger than 18 years old\",\n    \"db_name\": \"user_management\",\n    \"dialect\": \"SQLite\",\n    \"top_k\": 1,\n    \"display_type\": display_type,\n    \"response\": json.dumps(RESPONSE_FORMAT_SIMPLE, ensure_ascii=False, indent=4)\n}))\n\nprint(\"Result:\\n\", result)\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Milvus Storage Dependencies\nDESCRIPTION: Command to install the required DB-GPT packages including the Milvus storage extension using the uv package manager. This installs base dependencies, OpenAI proxy, RAG functionality, Milvus storage, and dbgpts modules.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/milvus_rag_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_milvus\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Reading and Prompt Building in DB-GPT\nDESCRIPTION: Demonstrates the setup of an agent context with memory integration, including OpenAI LLM client configuration and custom prompt template that incorporates recent memories. Shows how to implement memory-aware prompt generation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/memory.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport asyncio\nfrom dbgpt.agent import (\n    AgentContext,\n    ShortTermMemory,\n    AgentMemory,\n    ConversableAgent,\n    ProfileConfig,\n    LLMConfig,\n    BlankAction,\n    UserProxyAgent,\n)\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nllm_client = OpenAILLMClient(\n    model_alias=\"gpt-4o\",\n    api_base=os.getenv(\"OPENAI_API_BASE\"),\n    api_key=os.getenv(\"OPENAI_API_KEY\"),\n)\n\ncontext: AgentContext = AgentContext(\n    conv_id=\"test123\",\n    language=\"en\",\n    temperature=0.9,\n    max_new_tokens=2048,\n    verbose=True,  # Add verbose=True to print out the conversation history\n)\n\n# Create an agent memory, which contains a short-term memory\nmemory = ShortTermMemory(buffer_size=2)\nagent_memory: AgentMemory = AgentMemory(memory=memory)\n\n# Custom user prompt template, which includes most recent memories and question\nuser_prompt_template = \"\"\"\\\n{% if most_recent_memories %}\\\nMost recent observations:\n{{ most_recent_memories }}\n{% endif %}\\\n\n{% if question %}\\\nQuestion: {{ question }}\n{% endif %}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Chat Knowledge Space with Python Client\nDESCRIPTION: Example of how to query the Chat Knowledge Space using the DB-GPT Python client. This code demonstrates streaming chat responses based on a message and specified knowledge space.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\n\nDBGPT_API_KEY = \"dbgpt\"\nSPACE_NAME=\"{YOUR_SPACE_NAME}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\n\nasync for data in client.chat_stream(\n    messages=\"Introduce AWEL\", \n    model=\"gpt-4o\", \n    chat_mode=\"chat_knowledge\", \n    chat_param=SPACE_NAME\n):\n    print(data)\n```\n\n----------------------------------------\n\nTITLE: Complete RAG Implementation\nDESCRIPTION: Full implementation combining knowledge retrieval with LLM for question answering\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport shutil\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, JoinOperator, InputSource\nfrom dbgpt.core.operators import PromptBuilderOperator, RequestBuilderOperator\nfrom dbgpt_ext.rag import ChunkParameters\nfrom dbgpt.rag.knowledge import KnowledgeType\nfrom dbgpt.rag.operators import EmbeddingAssemblerOperator, KnowledgeOperator,\n    EmbeddingRetrieverOperator\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\nfrom dbgpt.storage.vector_store.chroma_store import ChromaStore, ChromaVectorConfig\nfrom dbgpt.model.operators import LLMOperator\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nembeddings = DefaultEmbeddingFactory.openai()\nllm_client = OpenAILLMClient()\n```\n\n----------------------------------------\n\nTITLE: DB-GPT Main Configuration in TOML Format\nDESCRIPTION: Example of the new TOML-based configuration system in DB-GPT V0.7.0. This configuration file shows system settings, web service configuration, vector storage settings, and model configuration with DeepSeek integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[system]\n# Load language from environment variable(It is set by the hook)\nlanguage = \"${env:DBGPT_LANG:-zh}\"\napi_keys = []\nencrypt_key = \"your_secret_key\"\n\n# Server Configurations\n[service.web]\nhost = \"0.0.0.0\"\nport = 5670\n\n[service.web.database]\ntype = \"sqlite\"\npath = \"pilot/meta_data/dbgpt.db\"\n[service.model.worker]\nhost = \"127.0.0.1\"\n\n[rag.storage]\n[rag.storage.vector]\ntype = \"chroma\"\npersist_path = \"pilot/data\"\n\n# Model Configurations\n[models]\n[[models.llms]]\nname = \"deepseek-reasoner\"\n# name = \"deepseek-chat\"\nprovider = \"proxy/deepseek\"\napi_key = \"your_deepseek_api_key\"\n```\n\n----------------------------------------\n\nTITLE: Model Start Command Options\nDESCRIPTION: Comprehensive options for starting model instances including deployment configuration, hardware settings, and model-specific parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt model start  --help\nAlready connect 'dbgpt'\nUsage: dbgpt model start [OPTIONS]\n\n  Start model instances\n\nOptions:\n  --model_name TEXT           The model name to deploy  [required]\n  --model_path TEXT           The model path to deploy\n  --host TEXT                 The remote host to deploy model  [default:\n                              30.183.153.197]\n  --port INTEGER              The remote port to deploy model  [default: 5000]\n  --worker_type TEXT          Worker type  [default: llm]\n  --device TEXT               Device to run model. If None, the device is\n                              automatically determined\n  --model_type TEXT           Model type: huggingface, llama.cpp, proxy and\n                              vllm  [default: huggingface]\n  --prompt_template TEXT      Prompt template. If None, the prompt template is\n                              automatically determined from model path,\n                              supported template: zero_shot,vicuna_v1.1,llama-\n                              2,codellama,alpaca,baichuan-chat,internlm-chat\n  --max_context_size INTEGER  Maximum context size  [default: 4096]\n  --num_gpus INTEGER          The number of gpus you expect to use, if it is\n                              empty, use all of them as much as possible\n  --max_gpu_memory TEXT       The maximum memory limit of each GPU, only valid\n                              in multi-GPU configuration\n  --cpu_offloading            CPU offloading\n  --load_8bit                 8-bit quantization\n  --load_4bit                 4-bit quantization\n  --quant_type TEXT           Quantization datatypes, `fp4` (four bit float)\n                              and `nf4` (normal four bit float), only valid\n                              when load_4bit=True  [default: nf4]\n  --use_double_quant          Nested quantization, only valid when\n                              load_4bit=True  [default: True]\n  --compute_dtype TEXT        Model compute type\n  --trust_remote_code         Trust remote code  [default: True]\n  --verbose                   Show verbose output.\n  --help                      Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent Memory with GptsMemory Integration\nDESCRIPTION: Shows how to create an agent memory that includes both ShortTermMemory and GptsMemory for storing conversation and plan information. GptsMemory is used as an additional storage component outside the main memory structure.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/memory.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import AgentMemory, ShortTermMemory, GptsMemory\n\n# Create an agent memory, default memory is ShortTermMemory\nmemory = ShortTermMemory(buffer_size=5)\n# Store the conversation and plan information\ngpts_memory = GptsMemory()\nagent_memory = AgentMemory(memory=memory, gpts_memory=gpts_memory)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Agent Memory with ShortTermMemory in Python\nDESCRIPTION: Demonstrates how to create a basic agent memory instance using ShortTermMemory with a specified buffer size. The example shows the minimal setup required for memory initialization in DB-GPT agents.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/memory.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import AgentMemory, ShortTermMemory\n\n# Create an agent memory, default memory is ShortTermMemory\nmemory = ShortTermMemory(buffer_size=5)\nagent_memory = AgentMemory(memory=memory)\n```\n\n----------------------------------------\n\nTITLE: Implementing SummaryAction Class in Python\nDESCRIPTION: Defines the SummaryAction class that extends Action, implementing methods for resource needs, rendering protocol, output model type, and the main run method for executing the summary action.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass SummaryAction(Action[SummaryActionInput]):\n    def __init__(self):\n        super().__init__()\n\n    @property\n    def resource_need(self) -> Optional[ResourceType]:\n        # The resource type that the current Agent needs to use\n        # here we do not need to use resources, just return None\n        return None\n\n    @property\n    def render_protocol(self) -> Optional[Vis]:\n        # The visualization rendering protocol that the current Agent needs to use\n        # here we do not need to use visualization rendering, just return None\n        return None\n\n    @property\n    def out_model_type(self):\n        return SummaryActionInput\n\n    async def run(\n        self,\n        ai_message: str,\n        resource: Optional[AgentResource] = None,\n        rely_action_out: Optional[ActionOutput] = None,\n        need_vis_render: bool = True,\n        **kwargs,\n    ) -> ActionOutput:\n        \"\"\"Perform the action.\n\n        The entry point for actual execution of Action. Action execution will be\n        automatically initiated after model inference.\n        \"\"\"\n        extra_param = kwargs.get(\"action_extra_param_key\", None)\n        try:\n            # Parse the input message\n            param: SummaryActionInput = self._input_convert(\n                ai_message, SummaryActionInput\n            )\n        except Exception:\n            return ActionOutput(\n                is_exe_success=False,\n                content=\"The requested correctly structured answer could not be found, \"\n                f\"ai message: {ai_message}\",\n            )\n        # Check if the summary content is not related to user questions\n        if param.summary and cmp_string_equal(\n            param.summary,\n            NOT_RELATED_MESSAGE,\n            ignore_case=True,\n            ignore_punctuation=True,\n            ignore_whitespace=True,\n        ):\n            return ActionOutput(\n                is_exe_success=False,\n                content=\"the provided text content is not related to user questions at all.\"\n                f\"ai message: {ai_message}\",\n            )\n        else:\n            return ActionOutput(\n                is_exe_success=True,\n                content=param.summary,\n            )\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary SQLite Database Connector in Python\nDESCRIPTION: This code creates a temporary SQLite database connector and populates it with sample data for testing purposes. The database is created in a temporary directory and will be deleted after the program exits.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/database.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.datasource.rdbms.conn_sqlite import SQLiteTempConnector\n\nconnector = SQLiteTempConnector.create_temporary_db()\nconnector.create_temp_tables(\n    {\n        \"user\": {\n            \"columns\": {\n                \"id\": \"INTEGER PRIMARY KEY\",\n                \"name\": \"TEXT\",\n                \"age\": \"INTEGER\",\n            },\n            \"data\": [\n                (1, \"Tom\", 10),\n                (2, \"Jerry\", 16),\n                (3, \"Jack\", 18),\n                (4, \"Alice\", 20),\n                (5, \"Bob\", 22),\n            ],\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Running Model Prediction with Text2SQL Fine-tuned Model\nDESCRIPTION: Shell command to run predictions using the fine-tuned Text2SQL model. This script evaluates the model's performance on the development set and outputs the results to a specified directory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsh ./dbgpt_hub/scripts/predict_sft.sh\n```\n\n----------------------------------------\n\nTITLE: Adding DB-GPT Dependency - Bash Command\nDESCRIPTION: Command to add DB-GPT package as a project dependency\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.1_hello_world.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry add \"dbgpt>=0.5.1\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Action for Summary in Python\nDESCRIPTION: This snippet shows how to create a custom action for summarization by inheriting from the Action base class. It defines input parameters, resource needs, and the main execution logic.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom pydantic import BaseModel, Field\nfrom dbgpt.vis import Vis\nfrom dbgpt.agent import Action, ActionOutput, AgentResource, ResourceType\nfrom dbgpt.agent.util import cmp_string_equal\n\nNOT_RELATED_MESSAGE = \"Did not find the information you want.\"\n\n# The parameter object that the Action that the current Agent needs to execute needs to output.\nclass SummaryActionInput(BaseModel):\n    summary: str = Field(\n        ...,\n        description=\"The summary content\",\n    )\n\nclass SummaryAction(Action[SummaryActionInput]):\n    def __init__(self):\n        super().__init__()\n\n    @property\n    def resource_need(self) -> Optional[ResourceType]:\n        # The resource type that the current Agent needs to use\n        # here we do not need to use resources, just return None\n        return None\n    \n    @property\n    def render_protocol(self) -> Optional[Vis]:\n        # The visualization rendering protocol that the current Agent needs to use\n        # here we do not need to use visualization rendering, just return None\n        return None\n    \n    @property\n    def out_model_type(self):\n        return SummaryActionInput\n\n    async def run(\n        self,\n        ai_message: str,\n        resource: Optional[AgentResource] = None,\n        rely_action_out: Optional[ActionOutput] = None,\n        need_vis_render: bool = True,\n        **kwargs,\n    ) -> ActionOutput:\n        \"\"\"Perform the action.\n        \n        The entry point for actual execution of Action. Action execution will be \n        automatically initiated after model inference. \n        \"\"\"\n        try:\n            # Parse the input message\n            param: SummaryActionInput = self._input_convert(ai_message, SummaryActionInput)\n        except Exception:\n            return ActionOutput(\n                is_exe_success=False,\n                content=\"The requested correctly structured answer could not be found, \"\n                f\"ai message: {ai_message}\",\n            )\n        # Check if the summary content is not related to user questions\n        if param.summary and cmp_string_equal(\n            param.summary, \n            NOT_RELATED_MESSAGE,\n            ignore_case=True,\n            ignore_punctuation=True,\n            ignore_whitespace=True,\n        ):\n            return ActionOutput(\n                is_exe_success=False,\n                content=\"the provided text content is not related to user questions at all.\"\n                f\"ai message: {ai_message}\",\n            )\n        else:\n            return ActionOutput(\n                is_exe_success=True,\n                content=param.summary,\n            )\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Inputs with JoinOperator\nDESCRIPTION: Example demonstrating how to join results from two separate processing paths using JoinOperator. The workflow splits an input into two branches, processes each branch separately, then combines the results.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith DAG(\"sum_numbers_dag\") as dag:\n    # åå»ºè¾å¥èç¹\n    input_task = InputOperator(input_source=SimpleCallDataInputSource())\n    \n    # åå»ºä¸¤ä¸ªå¤çåæ¯\n    task1 = MapOperator(map_function=lambda x: x[\"t1\"])\n    task2 = MapOperator(map_function=lambda x: x[\"t2\"])\n    \n    # åå»ºåå¹¶èç¹\n    sum_task = JoinOperator(combine_function=lambda x, y: x + y)\n    # æå»ºDAG\n    input_task >> task1 >> sum_task\n    input_task >> task2 >> sum_task\n# è¿è¡ç¤ºä¾\nresult = await sum_task.call({\"t1\": 5, \"t2\": 8})  # è¾åºï¼13\nresult\n```\n\n----------------------------------------\n\nTITLE: Creating Data Chat DAG with LLM Integration in Python\nDESCRIPTION: Defines a complex DAG for processing data queries using LLM and database operations. The workflow includes schema retrieval, prompt building, LLM processing, SQL parsing, and conditional data processing based on query results.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nwith DAG(\"chat_data_dag\") as chat_data_dag:\n    input_task = InputOperator(input_source=InputSource.from_callable())\n    retriever_task = DBSchemaRetrieverOperator(\n        top_k=1,\n        index_store=vector_store,\n    )\n    content_task = MapOperator(lambda cks: [c.content for c in cks])\n    merge_task = JoinOperator(\n        lambda table_info, ext_dict: {\"table_info\": table_info, **ext_dict}\n    )\n    prompt_task = PromptBuilderOperator(prompt)\n    req_build_task = RequestBuilderOperator(model=\"gpt-3.5-turbo\")\n    llm_task = LLMOperator(llm_client=llm_client)\n    sql_parse_task = SQLOutputParser()\n    db_query_task = DatasourceOperator(connector=db_conn)\n\n    (\n            input_task\n            >> MapOperator(lambda x: x[\"user_input\"])\n            >> retriever_task\n            >> content_task\n            >> merge_task\n    )\n    input_task >> merge_task\n    merge_task >> prompt_task >> req_build_task >> llm_task >> sql_parse_task\n    sql_parse_task >> MapOperator(lambda x: x[\"sql\"]) >> db_query_task\n\n    two_sum_task = TwoSumOperator()\n    decision_task = DataDecisionOperator(\n        odd_task_name=\"odd_task\", even_task_name=\"even_task\"\n    )\n    odd_task = OddOperator(task_name=\"odd_task\")\n    even_task = EvenOperator(task_name=\"even_task\")\n    merge_task = MergeOperator()\n\n    db_query_task >> two_sum_task >> decision_task\n    decision_task >> odd_task >> merge_task\n    decision_task >> even_task >> merge_task\n```\n\n----------------------------------------\n\nTITLE: Editor API Endpoints for DB-GPT\nDESCRIPTION: List of available Editor API endpoints in DB-GPT, focusing on database table operations, SQL execution, and chart generation. These endpoints allow interaction with database tables, running SQL queries, and creating/managing visualizations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/api.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napi/v1/editor/db/tables\napi/v1/editor/sql/rounds\napi/v1/editor/sql\napi/v1/editor/sql/run\napi/v1/sql/editor/submit\napi/v1/editor/chart/list\napi/v1/editor/chart/info\napi/v1/editor/chart/run\napi/v1/chart/editor/submit\n```\n\n----------------------------------------\n\nTITLE: Executing the Workflow with Sample Query in Python\nDESCRIPTION: Runs the chat data workflow with a sample user query about young users. The code executes the entire DAG asynchronously and prints the final result of the query processing pipeline.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfinal_result = asyncio.run(\n    merge_task.call(\n        {\n            \"user_input\": \"Query the name and age of users younger than 18 years old\",\n            \"db_name\": \"user_management\",\n            \"dialect\": \"SQLite\",\n            \"top_k\": 1,\n            \"display_type\": display_type,\n            \"response\": json.dumps(\n                RESPONSE_FORMAT_SIMPLE, ensure_ascii=False, indent=4\n            ),\n        }\n    )\n)\nprint(\"The final result is:\")\nprint(final_result)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hello World Custom Operator in AWEL\nDESCRIPTION: A simple example showing how to create a custom operator by inheriting from MapOperator to print a 'Hello, world!' message. The operator takes a string input and outputs None, demonstrating the basic structure of AWEL custom operators.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.3_custom_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, MapOperator\n\nclass HelloWorldOperator(MapOperator[str, None]):\n    async def map(self, x: str) -> None:\n        print(f\"Hello, {x}!\")\n\nwith DAG(\"awel_hello_world\") as dag:\n    task = HelloWorldOperator()\n    \nasyncio.run(task.call(call_data=\"world\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Summarizer Agent in DB-GPT\nDESCRIPTION: This code provides the full implementation of a custom summarizer agent in DB-GPT. It defines the agent's profile configuration, initialization, and includes a correctness checking mechanism to validate if the summary properly addresses the user's question based on the provided content.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import Any, Dict, Optional, Tuple\n\nfrom dbgpt.agent import (\n    Action,\n    ActionOutput,\n    AgentContext,\n    AgentMemory,\n    AgentMessage,\n    AgentResource,\n    ConversableAgent,\n    LLMConfig,\n    ProfileConfig,\n    ResourceType,\n    UserProxyAgent,\n)\nfrom dbgpt.agent.util import cmp_string_equal\nfrom dbgpt.core import ModelMessageRoleType\nfrom dbgpt.model.proxy import OpenAILLMClient\nfrom dbgpt.vis import Vis\nfrom pydantic import BaseModel, Field\n\nNOT_RELATED_MESSAGE = \"Did not find the information you want.\"\n\nCHECK_RESULT_SYSTEM_MESSAGE = (\n    \"You are an expert in analyzing the results of a summary task.\"\n    \"Your responsibility is to check whether the summary results can summarize the \"\n    \"input provided by the user, and then make a judgment. You need to answer \"\n    \"according to the following rules:\\n\"\n    \"    Rule 1: If you think the summary results can summarize the input provided\"\n    \" by the user, only return True.\\n\"\n    \"    Rule 2: If you think the summary results can NOT summarize the input \"\n    \"provided by the user, return False and the reason, split by | and ended \"\n    \"by TERMINATE. For instance: False|Some important concepts in the input are \"\n    \"not summarized. TERMINATE\"\n)\n\n\nclass MySummarizerAgent(ConversableAgent):\n    profile: ProfileConfig = ProfileConfig(\n        # The name of the agent\n        name=\"Aristotle\",\n        # The role of the agent\n        role=\"Summarizer\",\n        # The core functional goals of the agent tell LLM what it can do with it.\n        goal=(\n            \"Summarize answer summaries based on user questions from provided \"\n            \"resource information or from historical conversation memories.\"\n        ),\n        # Introduction and description of the agent, used for task assignment and display.\n        # If it is empty, the goal content will be used.\n        desc=(\n            \"You can summarize provided text content according to user's questions\"\n            \" and output the summarization.\"\n        ),\n        # Refer to the following. It can contain multiple constraints and reasoning\n        # restriction logic, and supports the use of parameter template {{ param_name }}.\n        constraints=[\n            \"Prioritize the summary of answers to user questions from the improved resource\"\n            \" text. If no relevant information is found, summarize it from the historical \"\n            \"dialogue memory given. It is forbidden to make up your own.\",\n            \"You need to first detect user's question that you need to answer with your\"\n            \" summarization.\",\n            \"Extract the provided text content used for summarization.\",\n            \"Then you need to summarize the extracted text content.\",\n            \"Output the content of summarization ONLY related to user's question. The \"\n            \"output language must be the same to user's question language.\",\n            \"If you think the provided text content is not related to user questions at \"\n            \"all, ONLY output '{{ not_related_message }}'!!.\",\n        ],\n    )\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([SummaryAction])\n\n    def _init_reply_message(self, received_message: AgentMessage) -> AgentMessage:\n        reply_message = super()._init_reply_message(received_message)\n        # Fill in the dynamic parameters in the prompt template\n        reply_message.context = {\"not_related_message\": NOT_RELATED_MESSAGE}\n        return reply_message\n\n    def prepare_act_param(self) -> Dict[str, Any]:\n        return {\"action_extra_param_key\": \"this is extra param\"}\n\n    async def correctness_check(\n        self, message: AgentMessage\n    ) -> Tuple[bool, Optional[str]]:\n        current_goal = message.current_goal\n        action_report = message.action_report\n        task_result = \"\"\n        if action_report:\n            task_result = action_report.get(\"content\", \"\")\n\n        check_result, model = await self.thinking(\n            messages=[\n                AgentMessage(\n                    role=ModelMessageRoleType.HUMAN,\n                    content=(\n                        \"Please understand the following user input and summary results\"\n                        \" and give your judgment:\\n\"\n                        f\"User Input: {current_goal}\\n\"\n                        f\"Summary Results: {task_result}\"\n                    ),\n                )\n            ],\n            prompt=CHECK_RESULT_SYSTEM_MESSAGE,\n        )\n\n        fail_reason = \"\"\n        if check_result and (\n            \"true\" in check_result.lower() or \"yes\" in check_result.lower()\n        ):\n            success = True\n        else:\n            success = False\n            try:\n                _, fail_reason = check_result.split(\"|\")\n                fail_reason = (\n                    \"The summary results cannot summarize the user input due\"\n                    f\" to: {fail_reason}. Please re-understand and complete the summary\"\n                    \" task.\"\n                )\n            except Exception:\n                fail_reason = (\n                    \"The summary results cannot summarize the user input. \"\n                    \"Please re-understand and complete the summary task.\"\n                )\n        return success, fail_reason\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Embeddings\nDESCRIPTION: Setting up embeddings using OpenAI's API through DefaultEmbeddingFactory\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\nembeddings = DefaultEmbeddingFactory.openai()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Simple AWEL DAG in Python\nDESCRIPTION: This snippet demonstrates how to create a basic AWEL DAG with an InputOperator and a MapOperator. It shows the DAG structure, visualizes it, and executes a task asynchronously.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.2_how_works.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleCallDataInputSource\n\nwith DAG(\"awel_hello_world\") as dag:\n    input_task = InputOperator(\n        input_source=SimpleCallDataInputSource()\n    )\n    task = MapOperator(map_function=lambda x: print(f\"Hello, {x}!\"))\n    input_task >> task\n\ndag.visualize_dag()\nasyncio.run(task.call(call_data=\"world\"))\n```\n\n----------------------------------------\n\nTITLE: Storing Database Schema in Vector Store\nDESCRIPTION: Implements a DAG to store database schema information in a Chroma vector store using AWEL operators.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport shutil\nfrom dbgpt.core.awel import DAG, InputOperator\nfrom dbgpt_ext.rag import ChunkParameters\nfrom dbgpt.rag.operators import DBSchemaAssemblerOperator\nfrom dbgpt.storage.vector_store.chroma_store import ChromaVectorConfig, ChromaStore\n\nshutil.rmtree(\"/tmp/awel_with_data_vector_store\", ignore_errors=True)\n\nvector_store = ChromaStore(\n    ChromaVectorConfig(\n        persist_path=\"/tmp/tmp_ltm_vector_store\",\n        name=\"ltm_vector_store\",\n        embedding_fn=embeddings,\n    )\n)\n\nwith DAG(\"load_schema_dag\") as load_schema_dag:\n    input_task = InputOperator.dummy_input()\n    assembler_task = DBSchemaAssemblerOperator(\n        connector=db_conn,\n        index_store=vector_store,\n        chunk_parameters=ChunkParameters(chunk_strategy=\"CHUNK_BY_SIZE\")\n    )\n    input_task >> assembler_task\n\nchunks = asyncio.run(assembler_task.call())\nprint(chunks)\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World DAG Implementation\nDESCRIPTION: Simple implementation of a DAG using MapOperator to print Hello World\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.1_hello_world.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, MapOperator\n\nwith DAG(\"awel_hello_world\") as dag:\n    task = MapOperator(map_function=lambda x: print(f\"Hello, {x}!\"))\ntask._blocking_call(call_data=\"world\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Two Sum Using JoinOperator in Python\nDESCRIPTION: Complete example demonstrating how to use JoinOperator to sum two numbers using input tasks, map operators, and a join operation in a DAG workflow.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.3_join_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import (\n    DAG, JoinOperator, MapOperator, InputOperator, SimpleCallDataInputSource\n)\n\nwith DAG(\"sum_numbers_dag\") as dag:\n    # Create a input task to receive data from call_data\n    input_task = InputOperator(input_source=SimpleCallDataInputSource())\n    task1 = MapOperator(map_function=lambda x: x[\"t1\"])\n    task2 = MapOperator(map_function=lambda x: x[\"t2\"])\n    sum_task = JoinOperator(combine_function=lambda x, y: x + y)\n    input_task >> task1 >> sum_task\n    input_task >> task2 >> sum_task\n\nif asyncio.run(sum_task.call(call_data={\"t1\": 5, \"t2\": 8})) == 13:\n    print(\"Success!\")\nelse:\n    print(\"Failed\")\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI LLM Client and SQLite Connector in Python\nDESCRIPTION: Sets up the OpenAI LLM client and creates a temporary SQLite database with a user table containing sample data for demonstration purposes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nllm_client = OpenAILLMClient()\n\ndb_conn = SQLiteTempConnector.create_temporary_db()\ndb_conn.create_temp_tables(\n    {\n        \"user\": {\n            \"columns\": {\n                \"id\": \"INTEGER PRIMARY KEY\",\n                \"name\": \"TEXT\",\n                \"age\": \"INTEGER\",\n            },\n            \"data\": [\n                (1, \"Tom\", 10),\n                (2, \"Jerry\", 16),\n                (3, \"Jack\", 18),\n                (4, \"Alice\", 20),\n                (5, \"Bob\", 22),\n            ],\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Mock LLM Service Example in Bash\nDESCRIPTION: This bash command runs the Python script that demonstrates the StreamifyAbsOperator mocking a streaming LLM service.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.5_streamify_operator.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/streamify_operator_mock_llm_service.py\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Visualization Options for Data Display in Python\nDESCRIPTION: Creates a list of visualization chart types with their descriptions, which will be offered as display options for query results. The list includes various chart types suitable for different data visualization scenarios.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nantv_charts = [\n    {\"response_line_chart\": \"used to display comparative trend analysis data\"},\n    {\n        \"response_pie_chart\": \"suitable for scenarios such as proportion and distribution statistics\"\n    },\n    {\n        \"response_table\": \"suitable for display with many display columns or non-numeric columns\"\n    },\n    # {\"response_data_text\":\" the default display method, suitable for single-line or simple content display\"},\n    {\n        \"response_scatter_plot\": \"Suitable for exploring relationships between variables, detecting outliers, etc.\"\n    },\n    {\n        \"response_bubble_chart\": \"Suitable for relationships between multiple variables, highlighting outliers or special situations, etc.\"\n    },\n    {\n        \"response_donut_chart\": \"Suitable for hierarchical structure representation, category proportion display and highlighting key categories, etc.\"\n    },\n    {\n        \"response_area_chart\": \"Suitable for visualization of time series data, comparison of multiple groups of data, analysis of data change trends, etc.\"\n    },\n    {\n        \"response_heatmap\": \"Suitable for visual analysis of time series data, large-scale data sets, distribution of classified data, etc.\"\n    },\n]\ndisplay_type = \"\\n\".join(\n    f\"{key}:{value}\" for dict_item in antv_charts for key, value in dict_item.items()\n)\n```\n\n----------------------------------------\n\nTITLE: Knowledge Retrieval Implementation\nDESCRIPTION: DAG implementation for retrieving knowledge from vector store\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import MapOperator\nfrom dbgpt.rag.operators import EmbeddingRetrieverOperator\n\nwith DAG(\"retriever_dag\") as retriever_dag:\n    retriever_task = EmbeddingRetrieverOperator(\n        top_k=3,\n        index_store=vector_store,\n    )\n    content_task = MapOperator(lambda cks: \"\\n\".join(c.content for c in cks))\n    retriever_task >> content_task\n\nchunks = asyncio.run(content_task.call(\"What is the AWEL?\"))\nprint(chunks)\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in HTTP Authorization Header\nDESCRIPTION: Format for including your DB-GPT API key in the Authorization HTTP header of API requests. This header must be included in all API requests for authentication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Bearer DBGPT_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Processing Streaming JSON Responses with UnstreamifyAbsOperator\nDESCRIPTION: Example showing how to process streaming JSON chunks and combine them into a complete dictionary. This demonstrates a practical use case for processing LLM responses that come as JSON fragments.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# LLM JSONååºå¤çåºæ¯\nmock_data = [\n    '{\"na',\n    'me\": \"Jo',\n    'hn\", \"a',\n    'ge\": 2',\n    '5}'\n]\n# 2. JSONååºå¤çå¨\nclass JsonResponseOperator(UnstreamifyAbsOperator[str, dict]):\n    async def unstreamify(self, it: AsyncIterator[str]) -> dict:\n        # åå¹¶æµå¼å­ç¬¦ä¸²\n        full_response = \"\"\n        async for chunk in it:\n            # æå°æµå¼ç»æ\n            print(chunk)\n            full_response += chunk\n            \n        # è§£æJSON\n        return json.loads(full_response)\n# 3. ä½¿ç¨ç¤ºä¾\nwith DAG(\"json_response_dag\") as dag:\n    llm_task = MockLLMService(mock_data=mock_data)\n    json_task = JsonResponseOperator()\n    llm_task >> json_task\nawait json_task.call(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Knowledge Loading and Vector Store Setup\nDESCRIPTION: DAG implementation for loading knowledge from URL and storing in vector store\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport shutil\nfrom dbgpt.core.awel import DAG\nfrom dbgpt_ext.rag import ChunkParameters\nfrom dbgpt.rag.knowledge import KnowledgeType\nfrom dbgpt.rag.operators import EmbeddingAssemblerOperator, KnowledgeOperator\nfrom dbgpt.storage.vector_store.chroma_store import ChromaStore, ChromaVectorConfig\n\nshutil.rmtree(\"/tmp/awel_rag_test_vector_store\", ignore_errors=True)\n\nvector_store = ChromaStore(\n    vector_store_config=ChromaVectorConfig(\n        name=\"test_vstore\",\n        persist_path=\"/tmp/awel_rag_test_vector_store\",\n        embedding_fn=embeddings\n    )\n)\n\nwith DAG(\"load_knowledge_dag\") as knowledge_dag:\n    knowledge_task = KnowledgeOperator(knowledge_type=KnowledgeType.URL.name)\n    assembler_task = EmbeddingAssemblerOperator(\n        index_store=vector_store,\n        chunk_parameters=ChunkParameters(chunk_strategy=\"CHUNK_BY_SIZE\")\n    )\n    knowledge_task >> assembler_task\n\nchunks = asyncio.run(assembler_task.call(\"https://docs.dbgpt.site/docs/awel/\"))\nprint(f\"Chunk length: {len(chunks)}\")\n```\n\n----------------------------------------\n\nTITLE: Mocking Streaming LLM Service with StreamifyAbsOperator in Python\nDESCRIPTION: This example demonstrates how to use StreamifyAbsOperator to mock a streaming LLM service. It creates a MockLLMService that yields a predefined list of strings as a stream.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.5_streamify_operator.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncIterator, List\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator\n\nclass MockLLMService(StreamifyAbsOperator[str, str]):\n    \"\"\"Mock a streaming LLM service\"\"\"\n    def __init__(self, mock_data: List[str], **kwargs):\n        self.mock_data = mock_data\n        super().__init__(**kwargs)\n        \n    async def streamify(self, user_input: str) -> AsyncIterator[str]:\n        for data in self.mock_data:\n            yield data\n\nwith DAG(\"mock_llm_service_dag\") as dag:\n    task = MockLLMService(mock_data=[\"Hello, \", \"how \", \"can \", \"I \", \"help \", \"you?\"])\n\nasync def print_stream(t, user_input: str):\n    # Call the streaming operator by `call_stream` method\n    async for i in await t.call_stream(call_data=user_input):\n        print(i, end=\"\")\n\nasyncio.run(print_stream(task, \"Hi\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TransformStreamAbsOperator in Python\nDESCRIPTION: Basic example showing how to implement a custom TransformStreamAbsOperator that doubles incoming numbers in a stream. Demonstrates the minimal implementation required by overriding the transform_stream method.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.7_transform_stream_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, TransformStreamAbsOperator\n\nclass NumberDoubleOperator(TransformStreamAbsOperator[int, int]):\n    async def transform_stream(self, it: AsyncIterator) -> AsyncIterator[int]:\n        async for i in it:\n            # Double the number\n            yield i * 2\n\nwith DAG(\"numbers_dag\") as dag:\n    task = NumberDoubleOperator()\n```\n\n----------------------------------------\n\nTITLE: Executing SQL with DatasourceOperator in Python\nDESCRIPTION: This snippet shows how to execute the generated SQL query using the DatasourceOperator. It extends the previous DAG to include SQL execution and result retrieval.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.datasource.operators import DatasourceOperator\n\n    # previous code ...\n    db_query_task = DatasourceOperator(connector=db_conn)\n    sql_parse_task >> MapOperator(lambda x: x[\"sql\"]) >> db_query_task\n    \n    db_result = asyncio.run(db_query_task.call({\n        \"user_input\": \"Query the name and age of users younger than 18 years old\",\n        \"db_name\": \"user_management\",\n        \"dialect\": \"SQLite\",\n        \"top_k\": 1,\n        \"display_type\": display_type,\n        \"response\": json.dumps(RESPONSE_FORMAT_SIMPLE, ensure_ascii=False, indent=4)\n    }))\n    print(\"The result of the query is:\")\n    print(db_result)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Request Handler Operator in Python\nDESCRIPTION: This snippet defines a custom operator that extends MapOperator to process the request body and generate a response string.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/get_started.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RequestHandleOperator(MapOperator[TriggerReqBody, str]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    async def map(self, input_value: TriggerReqBody) -> str:\n        print(f\"Receive input value: {input_value}\")\n        return f\"Hello, {input_value.name}, your age is {input_value.age}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UnstreamifyAbsOperator in Python\nDESCRIPTION: This snippet shows how to create a custom UnstreamifyAbsOperator by overriding the unstreamify method. It demonstrates summing a stream of integers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.6_unstreamify_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, UnstreamifyAbsOperator\n\nclass SumOperator(UnstreamifyAbsOperator[int, int]):\n    \"\"\"Unstreamify the stream of numbers\"\"\"\n    async def unstreamify(self, it: AsyncIterator[int]) -> int:\n        return sum([i async for i in it])\n\nwith DAG(\"sum_dag\") as dag:\n    task = SumOperator()\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Webserver with Ollama Proxy\nDESCRIPTION: Commands to start DB-GPT webserver using Ollama proxy configuration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-proxy-ollama.toml\n\n# Alternative command\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-ollama.toml\n```\n\n----------------------------------------\n\nTITLE: Wrapping Tools into ToolPack in Python\nDESCRIPTION: Demonstrates how to combine multiple tools into a ToolPack for organized tool management in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/tools.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent.resource import ToolPack\n\ntools = ToolPack([simple_calculator, count_directory_files])\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Memory with Default Values in Python\nDESCRIPTION: This snippet demonstrates how to create a Hybrid Memory instance using default values, which include the OpenAI Embedding API and ChromaStore. It also shows how to set up an AgentMemory with the created Hybrid Memory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/hybrid_memory.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport shutil\nfrom dbgpt.agent import HybridMemory, AgentMemory\n\n# Delete old vector store directory(/tmp/tmp_ltm_vector_stor)\nshutil.rmtree(\"/tmp/tmp_ltm_vector_store\", ignore_errors=True)\nhybrid_memory = HybridMemory.from_chroma(\n    vstore_name=\"agent_memory\", vstore_path=\"/tmp/tmp_ltm_vector_store\"\n)\n\nagent_memory: AgentMemory = AgentMemory(memory=hybrid_memory)\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Chat Completion Request with Python\nDESCRIPTION: This snippet shows how to use the dbgpt_client library in Python to send a stream chat completion request. It demonstrates client initialization and streaming the response.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/chat.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\n\nDBGPT_API_KEY = \"dbgpt\"\nclient = Client(api_key=DBGPT_API_KEY)\n\nasync for data in client.chat_stream(\n    model=\"gpt-4o\",\n    messages=\"hello\",\n):\n    print(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring DB-GPT Environment Variables\nDESCRIPTION: Environment configuration for DB-GPT to use Ollama as a proxy model server, including LLM and embedding model settings\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/ollama.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLLM_MODEL=ollama_proxyllm\nPROXY_SERVER_URL=http://127.0.0.1:11434\nPROXYLLM_BACKEND=\"qwen:0.5b\"\nPROXY_API_KEY=not_used\nEMBEDDING_MODEL=proxy_ollama\nproxy_ollama_proxy_server_url=http://127.0.0.1:11434\nproxy_ollama_proxy_backend=\"nomic-embed-text:latest\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Vector Database in DB-GPT\nDESCRIPTION: Configuration snippet for setting up Milvus as the vector store in DB-GPT. Includes settings for connection URL, port, and optional authentication parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/rag.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n### Milvus vector db config\nVECTOR_STORE_TYPE=Milvus\nMILVUS_URL=127.0.0.1\nMILVUS_PORT=19530\n#MILVUS_USERNAME\n#MILVUS_PASSWORD\n#MILVUS_SECURE=\n```\n\n----------------------------------------\n\nTITLE: Sample Tool Usage Output in Bash\nDESCRIPTION: Example output showing the interaction between user and LLM agent when using the calculator and file counting tools.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/tools.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--------------------------------------------------------------------------------\nUser (to LuBan)-[]:\n\n\"Calculate the product of 10 and 99\"\n\n--------------------------------------------------------------------------------\nun_stream ai response: {\n  \"thought\": \"To calculate the product of 10 and 99, we need to use a tool that can perform multiplication operation.\",\n  \"tool_name\": \"simple_calculator\",\n  \"args\": {\n    \"first_number\": 10,\n    \"second_number\": 99,\n    \"operator\": \"*\"\n  }\n}\n\n--------------------------------------------------------------------------------\nLuBan (to User)-[gpt-3.5-turbo]:\n\n\"{\\n  \\\"thought\\\": \\\"To calculate the product of 10 and 99, we need to use a tool that can perform multiplication operation.\\\",\\n  \\\"tool_name\\\": \\\"simple_calculator\\\",\\n  \\\"args\\\": {\\n    \\\"first_number\\\": 10,\\n    \\\"second_number\\\": 99,\\n    \\\"operator\\\": \\\"*\\\"\\n  }\\n}\"\n>>>>>>>>LuBan Review info: \nPass(None)\n>>>>>>>>LuBan Action report: \nexecution succeeded,\n990\n\n--------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------\nUser (to LuBan)-[]:\n\n\"Count the number of files in /tmp\"\n\n--------------------------------------------------------------------------------\nun_stream ai response: {\n  \"thought\": \"To count the number of files in /tmp directory, we should use a tool that can perform this operation.\",\n  \"tool_name\": \"count_directory_files\",\n  \"args\": {\n    \"path\": \"/tmp\"\n  }\n}\n\n--------------------------------------------------------------------------------\nLuBan (to User)-[gpt-3.5-turbo]:\n\n\"{\\n  \\\"thought\\\": \\\"To count the number of files in /tmp directory, we should use a tool that can perform this operation.\\\",\\n  \\\"tool_name\\\": \\\"count_directory_files\\\",\\n  \\\"args\\\": {\\n    \\\"path\\\": \\\"/tmp\\\"\\n  }\\n}\"\n>>>>>>>>LuBan Review info: \nPass(None)\n>>>>>>>>LuBan Action report: \nexecution succeeded,\n19\n\n--------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Preparing ChromaStore Vector Store for Hybrid Memory in Python\nDESCRIPTION: This snippet demonstrates how to set up a ChromaStore vector store for use in a Hybrid Memory system. It includes deleting an old vector store directory and configuring a new ChromaStore instance with custom settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/hybrid_memory.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport shutil\nfrom dbgpt.storage.vector_store.chroma_store import ChromaVectorConfig, ChromaStore\n\n# Delete old vector store directory(/tmp/tmp_ltm_vector_stor)\nshutil.rmtree(\"/tmp/tmp_ltm_vector_store\", ignore_errors=True)\nvector_store = ChromaStore(\n    ChromaVectorConfig(\n        embedding_fn=embeddings,\n        vector_store_config=ChromaVectorConfig(\n            name=\"ltm_vector_store\",\n            persist_path=\"/tmp/tmp_ltm_vector_store\",\n        ),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Test Messages and Context\nDESCRIPTION: Configures OpenAI client and creates test messages for conversation. Sets up AgentContext with specific parameters including conversation ID, language, and token limits.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/sensory_memory.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dbgpt.agent import AgentContext\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nllm_client = OpenAILLMClient(\n    model_alias=\"gpt-4o\",\n    api_base=os.getenv(\"OPENAI_API_BASE\"),\n    api_key=os.getenv(\"OPENAI_API_KEY\"),\n)\n\ncontext: AgentContext = AgentContext(\n    conv_id=\"test123\",\n    language=\"en\",\n    temperature=0.9,\n    max_new_tokens=2048,\n)\n\nmessages = [\n    \"When I was 4 years old, I went to primary school for the first time, please tell me a joke\",\n    \"When I was 10 years old, I went to middle school for the first time, please tell me a joke\",\n    \"When I was 16 years old, I went to high school for the first time, please tell me a joke\",\n    \"When I was 18 years old, I went to college for the first time, please tell me a joke\",\n]\n```\n\n----------------------------------------\n\nTITLE: Custom BranchOperator Implementation in Python\nDESCRIPTION: Shows how to create a custom BranchOperator by extending the base class and overriding the branches method to provide conditional routing logic.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.4_branch_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, BranchOperator, MapOperator\n\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nclass MyBranchOperator(BranchOperator[int]):\n    def __init__(self, even_task_name: str, odd_task_name: str, **kwargs):\n        self.even_task_name = even_task_name\n        self.odd_task_name = odd_task_name\n        super().__init__(**kwargs)\n        \n    async def branches(self):\n        return {\n            branch_even: self.even_task_name,\n            branch_odd: self.odd_task_name\n        }\n\nwith DAG(\"awel_branch_operator\") as dag:\n    task = MyBranchOperator(even_task_name=\"even_task\", odd_task_name=\"odd_task\")\n    even_task = MapOperator(\n        task_name=\"even_task\", \n        map_function=lambda x: print(f\"{x} is even\")\n    )\n    odd_task = MapOperator(\n        task_name=\"odd_task\", \n        map_function=lambda x: print(f\"{x} is odd\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory-Limited Conversable Agent with Python\nDESCRIPTION: This function demonstrates a conversable agent (Joy) with limited memory capacity defined by buffer_size=2. The code initiates a series of conversations with the agent, then tests its ability to recall information from earlier interactions. When asked about information shared in previous messages, the agent cannot recall it after the buffer is filled.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/sensory_memory.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def verify_forget():\n    joy = (\n        await ConversableAgent(profile=ProfileConfig(name=\"Joy\", role=\"Comedians\"))\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .bind(BlankAction)\n        .build()\n    )\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n    for message in messages:\n        await user_proxy.initiate_chat(\n            recipient=joy,\n            reviewer=user_proxy,\n            message=message,\n        )\n    await user_proxy.initiate_chat(\n        recipient=joy,\n        reviewer=user_proxy,\n        message=\"How old was I when I went to primary school?\",\n    )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(verify_forget())\n```\n\n----------------------------------------\n\nTITLE: Print Input Data Using InputOperator and MapOperator\nDESCRIPTION: This example shows how to use an InputOperator with a SimpleInputSource to read data and a MapOperator to print it. The code creates a DAG with an input task that feeds data to a print task.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleInputSource\n\nwith DAG(\"awel_input_operator\") as dag:\n    input_source = SimpleInputSource(data=\"Hello, World!\")\n    input_task = InputOperator(input_source=input_source)\n    print_task = MapOperator(map_function=lambda x: print(x))\n    input_task >> print_task\n\nasyncio.run(print_task.call())\n```\n\n----------------------------------------\n\nTITLE: Using API Key with curl Command\nDESCRIPTION: Example of making an API request to DB-GPT using curl with the Authorization header. This demonstrates how to call the chat completions endpoint with proper authentication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/introduction.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:5670/api/v2/chat/completions\" \\\n-H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n```\n\n----------------------------------------\n\nTITLE: Initializing ReduceStreamOperator with Lambda Function in Python\nDESCRIPTION: This snippet demonstrates how to build a ReduceStreamOperator using a lambda function as the reduce function. It uses the AWEL framework's DAG context manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.2_reduce_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, ReduceStreamOperator\n\nwith DAG(\"awel_reduce_operator\") as dag:\n    task = ReduceStreamOperator(reduce_function=lambda x, y: x + y)\n```\n\n----------------------------------------\n\nTITLE: Configuring Weaviate Vector Database in DB-GPT\nDESCRIPTION: Configuration snippet for setting up Weaviate as the vector store in DB-GPT. Includes the URL setting for connecting to a Weaviate instance.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/rag.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n### Weaviate vector db config\nVECTOR_STORE_TYPE=Weaviate\n#WEAVIATE_URL=https://kt-region-m8hcy0wc.weaviate.network\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple HTTP Trigger with AWEL in Python\nDESCRIPTION: This code snippet demonstrates how to create a basic HTTP trigger using AWEL. It sets up a DAG with an HttpTrigger and a MapOperator to respond with 'Hello, world!' when the endpoint is accessed.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.1_http_trigger.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, HttpTrigger, MapOperator, setup_dev_environment\n\nwith DAG(\"awel_hello_world\") as dag:\n    trigger_task = HttpTrigger(endpoint=\"/awel_tutorial/hello_world\")\n    task = MapOperator(map_function=lambda x: f\"Hello, world!\")\n    trigger_task >> task  \n    \nsetup_dev_environment([dag], port=5555)\n```\n\n----------------------------------------\n\nTITLE: Accessing Chat Knowledge Space with cURL\nDESCRIPTION: Example of how to query the Chat Knowledge Space using cURL. This request passes a message to a specified knowledge space and uses a designated model for completion.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nSPACE_NAME={YOUR_SPACE_NAME}\n\ncurl -X POST \"http://localhost:5670/api/v2/chat/completions\" \\\n    -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n    -H \"accept: application/json\" \\\n    -H \"Content-Type: application/json\" \\\n    -d \"{\\\"messages\\\":\\\"Hello\\\",\\\"model\\\":\\\"gpt-4o\\\", \\\"chat_mode\\\": \\\"chat_knowledge\\\", \\\"chat_param\\\": \\\"$SPACE_NAME\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Profile Using ProfileConfig in Python\nDESCRIPTION: This snippet demonstrates how to create an agent profile using the ProfileConfig class in DB-GPT. It includes all available parameters such as name, role, goal, constraints, and examples.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_creation.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ProfileConfig\n\nprofile: ProfileConfig = ProfileConfig(\n    # The name of the agent\n    name=\"Aristotle\",\n    # The role of the agent\n    role=\"Summarizer\",\n    # The core functional goals of the agent tell LLM what it can do with it.\n    goal=(\n        \"Summarize answer summaries based on user questions from provided \"\n        \"resource information or from historical conversation memories.\"\n    ),\n    # Constraints of the agent\n    constraints=[\n        \"Prioritize the summary of answers to user questions from the improved \"\n        \"resource text. If no relevant information is found, summarize it from \"\n        \"the historical dialogue memory given. It is forbidden to make up your \"\n        \"own.\",\n        \"You need to first detect user's question that you need to answer with \"\n        \"your summarization.\",\n        \"Extract the provided text content used for summarization.\",\n        \"Then you need to summarize the extracted text content.\",\n        \"Output the content of summarization ONLY related to user's question. \"\n        \"The output language must be the same to user's question language.\",\n        \"If you think the provided text content is not related to user \"\n        \"questions at all, ONLY output 'Did not find the information you \"\n        \"want.'!!.\",\n    ],\n    # Introduction and description of the agent, used for task assignment and display.\n    # If it is empty, the goal content will be used.\n    desc=(\n        \"You can summarize provided text content according to user's questions\"\n        \" and output the summarization.\"\n    ),\n    expand_prompt=\"Keep your answer concise\",\n    # Some examples in your prompt\n    examples=\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple AWEL Workflow with OpenAI LLM Integration\nDESCRIPTION: Python code that defines a simple AWEL DAG workflow that generates SQL queries. It connects three operators: a prompt builder, a request builder, and an LLM operator that uses the OpenAI client. The workflow takes dialect and table_name parameters to generate appropriate SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/quickstart_basic_awel_workflow.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG\nfrom dbgpt.core.operators import (\n    PromptBuilderOperator,\n    RequestBuilderOperator,\n)\nfrom dbgpt.model.proxy import OpenAILLMClient\nfrom dbgpt.model.operators import LLMOperator\n\nwith DAG(\"simple_sdk_llm_example_dag\") as dag:\n    prompt_task = PromptBuilderOperator(\n        \"Write a SQL of {dialect} to query all data of {table_name}.\"\n    )\n    model_pre_handle_task = RequestBuilderOperator(model=\"gpt-3.5-turbo\")\n    llm_task = LLMOperator(OpenAILLMClient())\n    prompt_task >> model_pre_handle_task >> llm_task\n    \noutput = asyncio.run(\n    llm_task.call({\n        \"dialect\": \"MySQL\", \n        \"table_name\": \"users\"\n    }\n))\nprint(output)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Vector Database in DB-GPT\nDESCRIPTION: Configuration snippet for setting up Chroma as the vector store in DB-GPT. Chroma is the default vector database option that stores embeddings locally.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/rag.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n### Chroma vector db config\nVECTOR_STORE_TYPE=Chroma\n#CHROMA_PERSIST_PATH=/root/DB-GPT/pilot/data\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Profile in Python for DB-GPT\nDESCRIPTION: This snippet demonstrates how to create a custom agent class with a defined profile using the ProfileConfig class. It sets the agent's name, role, goal, and description.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ConversableAgent, ProfileConfig\n\nclass MySummarizerAgent(ConversableAgent):\n    profile: ProfileConfig = ProfileConfig(\n        # The name of the agent\n        name=\"Aristotle\",\n        # The role of the agent\n        role=\"Summarizer\",\n        # The core functional goals of the agent tell LLM what it can do with it.\n        goal=(\n            \"Summarize answer summaries based on user questions from provided \"\n            \"resource information or from historical conversation memories.\"\n        ),\n        # Introduction and description of the agent, used for task assignment and display. \n        # If it is empty, the goal content will be used.\n        desc=(\n            \"You can summarize provided text content according to user's questions\"\n            \" and output the summarization.\"\n        ),\n    )\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Memory from Vector Store in Python\nDESCRIPTION: This snippet illustrates how to create a Hybrid Memory instance from an existing vector store. It uses default values for sensory memory and short-term memory while utilizing the provided vector store and embeddings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/hybrid_memory.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import HybridMemory, AgentMemory\n\nhybrid_memory = HybridMemory.from_vstore(\n    vector_store=vector_store, embeddings=embeddings\n)\n\nagent_memory: AgentMemory = AgentMemory(memory=hybrid_memory)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Embedding Model in Python\nDESCRIPTION: Configures OpenAI's embedding model using environment variables for API URL and key to convert text into vectors.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/long_term_memory.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\napi_url = os.getenv(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\") + \"/embeddings\"\napi_key = os.getenv(\"OPENAI_API_KEY\")\nembeddings = DefaultEmbeddingFactory.openai(api_url=api_url, api_key=api_key)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wenxin (Ernie) Proxy Settings in .env for DB-GPT\nDESCRIPTION: This code snippet demonstrates the environment variable configurations needed to use Wenxin (Ernie) as a proxy LLM in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/More_proxyllms.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# .env\nLLM_MODEL=wenxin_proxyllm\nWEN_XIN_MODEL_VERSION={version} # ERNIE-Bot or ERNIE-Bot-turbo\nWEN_XIN_API_KEY={your-wenxin-sk}\nWEN_XIN_API_SECRET={your-wenxin-sct}\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed DB-GPT Models\nDESCRIPTION: This command lists all deployed models, showing their details such as model name, type, host, port, health status, and last heartbeat.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ dbgpt model list\n```\n\n----------------------------------------\n\nTITLE: Adding Prompt Constraints to Agent Profile\nDESCRIPTION: Enhanced agent implementation with constraints that guide the agent's behavior when summarizing content, including prioritization rules, detection of user questions, and output formatting requirements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ConversableAgent, ProfileConfig\n\nclass MySummarizerAgent(ConversableAgent):\n    profile: ProfileConfig = ProfileConfig(\n        # The name of the agent\n        name=\"Aristotle\",\n        # The role of the agent\n        role=\"Summarizer\",\n        # The core functional goals of the agent tell LLM what it can do with it.\n        goal=(\n            \"Summarize answer summaries based on user questions from provided \"\n            \"resource information or from historical conversation memories.\"\n        ),\n        # Introduction and description of the agent, used for task assignment and display. \n        # If it is empty, the goal content will be used.\n        desc=(\n            \"You can summarize provided text content according to user's questions\"\n            \" and output the summarization.\"\n        ),\n        # Refer to the following. It can contain multiple constraints and reasoning \n        # restriction logic, and supports the use of parameter template {{ param_name }}.\n        constraints=[\n            \"Prioritize the summary of answers to user questions from the improved resource\"\n            \" text. If no relevant information is found, summarize it from the historical \"\n            \"dialogue memory given. It is forbidden to make up your own.\",\n            \"You need to first detect user's question that you need to answer with your\"\n            \" summarization.\",\n            \"Extract the provided text content used for summarization.\",\n            \"Then you need to summarize the extracted text content.\",\n            \"Output the content of summarization ONLY related to user's question. The \"\n            \"output language must be the same to user's question language.\",\n            \"If you think the provided text content is not related to user questions at \"\n            \"all, ONLY output '{{ not_related_message }}'!!.\",\n        ]\n    )\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Long-term Memory with ThreadPoolExecutor\nDESCRIPTION: Creates an agent memory instance with long-term memory capabilities using ThreadPoolExecutor and the configured vector store.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/long_term_memory.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom concurrent.futures import ThreadPoolExecutor\nfrom dbgpt.agent import AgentMemory, LongTermMemory\n\n# Create an agent memory, which contains a long-term memory\nmemory = LongTermMemory(\n    executor=ThreadPoolExecutor(), vector_store=vector_store, _default_importance=0.5\n)\nagent_memory: AgentMemory = AgentMemory(memory=memory)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with DB-GPT Client in Python\nDESCRIPTION: Example showing how to initialize the DB-GPT Client in Python using an API key. This creates a client instance that will automatically handle authentication for all API requests.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/introduction.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\n\nDBGPT_API_KEY = \"dbgpt\"\nclient = Client(api_key=DBGPT_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Defining SummaryActionInput Class for Python\nDESCRIPTION: Defines a Pydantic model class SummaryActionInput with a required 'summary' field to represent the input for the summary action.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass SummaryActionInput(BaseModel):\n    summary: str = Field(\n        ...,\n        description=\"The summary content\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Rendering Gemini Configuration Component in JSX\nDESCRIPTION: This code uses a ConfigDetail component to render a detailed configuration schema for Google Gemini proxy LLM integration. The configuration includes essential parameters like API keys, model names, and connection settings needed to use Gemini models within the DB-GPT ecosystem.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/gemini_geminideploymodelparameters_5113b9.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"GeminiDeployModelParameters\",\n  \"description\": \"Google Gemini proxy LLM configuration.\",\n  \"documentationUrl\": \"https://ai.google.dev/gemini-api/docs\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/gemini\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the gemini API.\",\n      \"defaultValue\": \"${env:GEMINI_PROXY_API_BASE}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the gemini API.\",\n      \"defaultValue\": \"${env:GEMINI_PROXY_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphRAG Vector Retriever in TOML\nDESCRIPTION: Configuration example for the Vector graph retriever feature in GraphRAG. This setup enables vector-based retrieval on knowledge graphs, allowing for more ambiguous questions to be identified compared to keyword-based retrieval.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rag.storage.graph]\ntype = \"TuGraph\"\nhost=\"127.0.0.1\"\nport=7687\nusername=\"admin\"\npassword=\"73@TuGraph\"\n\nenable_summary=\"True\"\ntriplet_graph_enabled=\"True\"\ndocument_graph_enabled=\"True\"\n\n# Vector graph retrieval configuration items\nenable_similarity_search=\"True\"\nknowledge_graph_embedding_batch_size=20\nsimilarity_search_topk=5\nextract_score_threshold=0.7\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request with Python\nDESCRIPTION: This snippet shows how to use the dbgpt_client library in Python to send a non-streaming chat completion request. It demonstrates client initialization and making the API call.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/chat.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\n\nDBGPT_API_KEY = \"dbgpt\"\nclient = Client(api_key=DBGPT_API_KEY)\nresponse = await client.chat(model=\"gpt-4o\" ,messages=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Setting up AutoPlanChatManager for Database Analysis in Python\nDESCRIPTION: This code demonstrates how to configure and use the AutoPlanChatManager to analyze a database. It shows the process of initializing agents, connecting to a language model, and establishing the workflow for automatic task planning and execution.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/planning.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\n\nfrom dbgpt.agent import (\n    AgentContext,\n    AgentMemory,\n    AutoPlanChatManager,\n    LLMConfig,\n    UserProxyAgent,\n)\nfrom dbgpt.agent.expand.data_scientist_agent import DataScientistAgent \nfrom dbgpt.model.proxy import OpenAILLMClient\n\nasync def main():\n    llm_client = OpenAILLMClient(\n        model_alias=\"gpt-3.5-turbo\",  # or other models, eg. \"gpt-4o\"\n        api_base=os.getenv(\"OPENAI_API_BASE\"),\n        api_key=os.getenv(\"OPENAI_API_KEY\"),\n    )\n    context: AgentContext = AgentContext(\n        conv_id=\"test123\", language=\"en\", temperature=0.5, max_new_tokens=2048\n    )\n    agent_memory = AgentMemory()\n\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n\n    sql_boy = (\n        await DataScientistAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(db_resource)\n        .bind(agent_memory)\n        .build()\n    )\n    manager = (\n        await AutoPlanChatManager()\n        .bind(context)\n        .bind(agent_memory)\n        .bind(LLMConfig(llm_client=llm_client))\n        .build()\n    )\n    manager.hire([sql_boy])\n\n    await user_proxy.initiate_chat(\n        recipient=manager,\n        reviewer=user_proxy,\n        message=\"Analyze student scores from at least three dimensions\",\n    )\n\n    # dbgpt-vis message infos\n    print(await agent_memory.gpts_memory.one_chat_completions(\"test123\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Preparing OpenAI Embedding Model for Hybrid Memory in Python\nDESCRIPTION: This code snippet shows how to prepare an embedding model using the OpenAI Embedding API. It sets up the API URL and key, and creates an embedding instance using DefaultEmbeddingFactory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/hybrid_memory.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\napi_url = os.getenv(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\") + \"/embeddings\"\napi_key = os.getenv(\"OPENAI_API_KEY\")\nembeddings = DefaultEmbeddingFactory.openai(api_url=api_url, api_key=api_key)\n```\n\n----------------------------------------\n\nTITLE: Starting the API Server\nDESCRIPTION: The dbgpt start apiserver command launches the model's API service on the default port 8100. It can be configured with various options including host, port, controller address, API keys, and logging settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt start apiserver --help\nAlready connect 'dbgpt'\nUsage: dbgpt start apiserver [OPTIONS]\n\n  Start apiserver\n\nOptions:\n  --host TEXT                Model API server deploy host  [default: 0.0.0.0]\n  --port INTEGER             Model API server deploy port  [default: 8100]\n  --daemon                   Run Model API server in background\n  --controller_addr TEXT     The Model controller address to connect\n                             [default: http://127.0.0.1:8000]\n  --api_keys TEXT            Optional list of comma separated API keys\n  --log_level TEXT           Logging level\n  --log_file TEXT            The filename to store log  [default:\n                             dbgpt_model_apiserver.log]\n  --tracer_file TEXT         The filename to store tracer span records\n                             [default: dbgpt_model_apiserver_tracer.jsonl]\n  --tracer_storage_cls TEXT  The storage class to storage tracer span records\n  --help                     Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Context and Memory\nDESCRIPTION: Code to create an agent context with conversation parameters and an agent memory for storing conversation history. The default memory is ShortTermMemory which keeps recent conversation turns.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/introduction.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import AgentContext, AgentMemory\n\n# language=\"zh\" for Chinese\ncontext: AgentContext = AgentContext(\n    conv_id=\"test123\", language=\"en\", temperature=0.5, max_new_tokens=2048\n) \n# Create an agent memory, default memory is ShortTermMemory\nagent_memory: AgentMemory = AgentMemory()\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Verification\nDESCRIPTION: Demonstrates memory verification through an async function that creates a conversational agent and tests its ability to remember previous conversations using the configured SensoryMemory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/sensory_memory.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.agent import (\n    ConversableAgent,\n    ProfileConfig,\n    LLMConfig,\n    BlankAction,\n    UserProxyAgent,\n)\n\nasync def verify_remember():\n    joy = (\n        await ConversableAgent(profile=ProfileConfig(name=\"Joy\", role=\"Comedians\"))\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .bind(BlankAction)\n        .build()\n    )\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n    # The turns not more than 2, make sure the agent remembers the previous conversation\n    for message in messages[:2]:\n        await user_proxy.initiate_chat(\n            recipient=joy,\n            reviewer=user_proxy,\n            message=message,\n        )\n    await user_proxy.initiate_chat(\n        recipient=joy,\n        reviewer=user_proxy,\n        message=\"How old was I when I went to primary school?\"\n    )\n\nif __name__ == \"__main__\":\n    asyncio.run(verify_remember())\n```\n\n----------------------------------------\n\nTITLE: Data Visualization Configuration - JSON\nDESCRIPTION: JSON configuration for visualizing the analyzed student data using GPT-Vis protocol. Includes metadata and processed results from the SQL query showing student performance metrics across different dimensions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/planning.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"sql\": \"SELECT student_id, student_name, course_name, credit, AVG(score) AS average_score, COUNT(score) AS total_scores, MAX(score) AS highest_score, MIN(score) AS lowest_score, SUM(score) AS total_score, AVG(semester) AS average_semester FROM (SELECT s.student_id, s.student_name, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id) GROUP BY student_id, course_name\", \n\"type\": \"response_table\", \n\"title\": \"\", \n\"describe\": \"The SQL query provided will generate a table with the analyzed data including average score, total scores, highest score, lowest score, total score, and average semester for each student in each course. This table can be further used for visualization purposes to represent student scores from different dimensions effectively.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Embedding Model Worker\nDESCRIPTION: This command starts an embedding model worker for text2vec, specifying the model path, worker type, port, and controller address.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndbgpt start worker --model_name text2vec \\\n--model_path /app/models/text2vec-large-chinese \\\n--worker_type text2vec \\\n--port 8003 \\\n--controller_addr http://127.0.0.1:8000\n```\n\n----------------------------------------\n\nTITLE: Deploying DB-GPT Web Server\nDESCRIPTION: Bash command to start the DB-GPT web server in a high availability configuration, connecting to multiple model controllers and using remote embedding.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster_ha.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLLM_MODEL=glm-4-9b-chat EMBEDDING_MODEL=text2vec \\\ndbgpt start webserver \\\n--light \\\n--remote_embedding \\\n--controller_addr \"http://server1:8000,http://server2:8000\"\n```\n\n----------------------------------------\n\nTITLE: Executing the Custom Streaming Operators\nDESCRIPTION: Command to run the custom streaming operators example, demonstrating how to execute a script containing AWEL streaming operators from the command line using Poetry.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.3_custom_operator.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/custom_streaming_operator.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Graph RAG Retrieval and Question Answering\nDESCRIPTION: Python code that demonstrates loading knowledge from a file, chunking it, storing it in a knowledge graph, and then retrieving relevant information to answer a specific question.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom dbgpt.configs.model_config import ROOT_PATH\nfrom dbgpt.core import Chunk, HumanPromptTemplate, ModelMessage, ModelRequest\nfrom dbgpt_ext.rag import ChunkParameters\nfrom dbgpt_ext.rag.assembler import EmbeddingAssembler\nfrom dbgpt_ext.rag.knowledge import KnowledgeFactory\nfrom dbgpt.rag.retriever import RetrieverStrategy\n\nasync def test_community_graph_rag():\n    await __run_graph_rag(\n        knowledge_file=\"examples/test_files/graphrag-mini.md\",\n        chunk_strategy=\"CHUNK_BY_MARKDOWN_HEADER\",\n        knowledge_graph=__create_community_kg_connector(),\n        question=\"What's the relationship between TuGraph and DB-GPT ?\",\n    )\n\nasync def __run_graph_rag(knowledge_file, chunk_strategy, knowledge_graph, question):\n    file_path = os.path.join(ROOT_PATH, knowledge_file).format()\n    knowledge = KnowledgeFactory.from_file_path(file_path)\n    try:\n        chunk_parameters = ChunkParameters(chunk_strategy=chunk_strategy)\n\n        # get embedding assembler\n        assembler = await EmbeddingAssembler.aload_from_knowledge(\n            knowledge=knowledge,\n            chunk_parameters=chunk_parameters,\n            index_store=knowledge_graph,\n            retrieve_strategy=RetrieverStrategy.GRAPH,\n        )\n        await assembler.apersist()\n\n        # get embeddings retriever\n        retriever = assembler.as_retriever(1)\n        chunks = await retriever.aretrieve_with_scores(question, score_threshold=0.3)\n\n        # chat\n        print(f\"{await ask_chunk(chunks[0], question)}\")\n\n    finally:\n        knowledge_graph.delete_vector_name(knowledge_graph.get_config().name)\n\nasync def ask_chunk(chunk: Chunk, question) -> str:\n    rag_template = (\n        \"Based on the following [Context] {context}, \"\n        \"answer [Question] {question}.\"\n    )\n    template = HumanPromptTemplate.from_template(rag_template)\n    messages = template.format_messages(context=chunk.content, question=question)\n    model_messages = ModelMessage.from_base_messages(messages)\n    request = ModelRequest(model=model_name, messages=model_messages)\n    response = await llm_client.generate(request=request)\n\n    if not response.success:\n        code = str(response.error_code)\n        reason = response.text\n        raise Exception(f\"request llm failed ({code}) {reason}\")\n\n    return response.text\n```\n\n----------------------------------------\n\nTITLE: Installing vLLM Dependencies for DB-GPT\nDESCRIPTION: Command to install vLLM as an optional dependency in DB-GPT using pip with the [vllm] extra.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/vLLM_inference.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[vllm]\"\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Model for Tool Parameters\nDESCRIPTION: Demonstrates using Pydantic BaseModel to define tool parameters through the args_schema parameter of the @tool decorator.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, Field\nfrom dbgpt.agent.resource import tool\n\nclass ArgsSchema(BaseModel):\n    a: int = Field(description=\"The first number.\")\n    b: int = Field(description=\"The second number.\")\n\n\n@tool(args_schema=ArgsSchema)\ndef two_sum(a: int, b: int) -> int:\n    \"\"\"Add two numbers and return the sum.\"\"\"\n    return a + b\n```\n\n----------------------------------------\n\nTITLE: Analyzing Student Academic Performance with SQL Aggregation\nDESCRIPTION: This SQL query joins student, course, and score data to calculate performance metrics including average score, total scores, highest score, lowest score, total score, and average semester for each student-course combination.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/planning.md#2025-04-09_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT student_id, student_name, course_name, credit, AVG(score) AS average_score, COUNT(score) AS total_scores, MAX(score) AS highest_score, MIN(score) AS lowest_score, SUM(score) AS total_score, AVG(semester) AS average_semester FROM (SELECT s.student_id, s.student_name, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id) GROUP BY student_id, course_name\n```\n\n----------------------------------------\n\nTITLE: Defining BitsandbytesQuantization Configuration Component in JSX\nDESCRIPTION: This code snippet defines a configuration component for bits and bytes quantization parameters using JSX. It specifies two boolean parameters: load_in_8bits for 8-bit quantization using LLM.int8() algorithm, and load_in_4bits for 4-bit quantization. Both parameters default to False.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/parameter_bitsandbytesquantization_d40e3b.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"BitsandbytesQuantization\",\n  \"description\": \"Bits and bytes quantization parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"load_in_8bits\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to load the model in 8 bits(LLM.int8() algorithm), default is False.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"load_in_4bits\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to load the model in 4 bits, default is False.\",\n      \"defaultValue\": \"False\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing WrappedAWELLayoutManager with Multiple Agents in Python\nDESCRIPTION: This code snippet demonstrates how to set up and use WrappedAWELLayoutManager with multiple agents in DB-GPT. It includes the creation of a UserProxyAgent, ToolAssistantAgent, and SummaryAssistantAgent, and shows how to bind them to a context, memory, and LLM configuration. The example processes a user query about the weather in Beijing using these agents.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/plan/plan.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\n\nfrom dbgpt.agent import (\n    AgentContext,\n    AgentMemory,\n    LLMConfig,\n    UserProxyAgent,\n    WrappedAWELLayoutManager,\n)\nfrom dbgpt.agent.expand.resources.search_tool import baidu_search\nfrom dbgpt.agent.expand.summary_assistant_agent import SummaryAssistantAgent\nfrom dbgpt.agent.expand.tool_assistant_agent import ToolAssistantAgent\nfrom dbgpt.agent.resource import ToolPack\nfrom dbgpt.model.proxy import OpenAILLMClient\n\n\nasync def main():\n    llm_client = OpenAILLMClient(\n        model_alias=\"gpt-4o\",\n        api_base=os.getenv(\"OPENAI_API_BASE\"),\n        api_key=os.getenv(\"OPENAI_API_KEY\"),\n    )\n    context: AgentContext = AgentContext(\n        conv_id=\"test123\", language=\"en\", temperature=0.5, max_new_tokens=2048\n    )\n    agent_memory = AgentMemory()\n\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n\n    tools = ToolPack([baidu_search])\n    tool_engineer = (\n        await ToolAssistantAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .bind(tools)\n        .build()\n    )\n    summarizer = (\n        await SummaryAssistantAgent()\n        .bind(context)\n        .bind(agent_memory)\n        .bind(LLMConfig(llm_client=llm_client))\n        .build()\n    )\n\n    manager = (\n        await WrappedAWELLayoutManager()\n        .bind(context)\n        .bind(agent_memory)\n        .bind(LLMConfig(llm_client=llm_client))\n        .build()\n    )\n    manager.hire([tool_engineer, summarizer])\n\n    await user_proxy.initiate_chat(\n        recipient=manager,\n        reviewer=user_proxy,\n        message=\"Query the weather in Beijing\",\n    )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n----------------------------------------\n\nTITLE: Generating Prompts from ProfileConfig in Python\nDESCRIPTION: This snippet shows how to generate system and user prompts from a ProfileConfig object. It demonstrates the use of format_system_prompt and format_user_prompt methods.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_creation.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal_profile = profile.create_profile()\nsystem_prompt = real_profile.format_system_prompt(question=\"What can you do?\")\nuser_prompt = real_profile.format_user_prompt(question=\"What can you do?\")\nprint(f\"System Prompt: \\n{system_prompt}\")\nprint(\"#\" * 50)\nprint(f\"User Prompt: \\n{user_prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Delete Datasource Curl Example\nDESCRIPTION: Example of using curl to delete a datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nDATASOURCE_ID={YOUR_DATASOURCE_ID}\n \n curl -X DELETE \"http://localhost:5670/api/v2/serve/datasources/$DATASOURCE_ID\" \\\n    -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n```\n\n----------------------------------------\n\nTITLE: Custom Processing Logic with AWEL Operators in Python\nDESCRIPTION: This snippet demonstrates how to implement custom processing logic after SQL execution using AWEL operators. It includes custom operators for branching, mapping, and merging results.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nfrom dbgpt.core.awel import MapOperator, BranchOperator, JoinOperator, is_empty_data\n\n\nclass TwoSumOperator(MapOperator[pd.DataFrame, int]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        \n    async def map(self, df: pd.DataFrame) -> int:\n        return await self.blocking_func_to_async(self._two_sum, df)\n    \n    def _two_sum(self, df: pd.DataFrame) -> int:\n        return df['age'].sum()\n\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nclass DataDecisionOperator(BranchOperator[int, int]):\n    def __init__(self, odd_task_name: str, even_task_name: str, **kwargs):\n        super().__init__(**kwargs)\n        self.odd_task_name = odd_task_name\n        self.even_task_name = even_task_name\n        \n    async def branches(self):\n        return {\n            branch_even: self.even_task_name,\n            branch_odd: self.odd_task_name\n        }\n\nclass OddOperator(MapOperator[int, str]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n    async def map(self, x: int) -> str:\n        print(f\"{x} is odd\")\n        return f\"{x} is odd\"\n\nclass EvenOperator(MapOperator[int, str]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n    async def map(self, x: int) -> str:\n        print(f\"{x} is even\")\n        return f\"{x} is even\"\n\nclass MergeOperator(JoinOperator[str]):\n    def __init__(self, **kwargs):\n        super().__init__(combine_function=self.merge_func, **kwargs)\n        \n    async def merge_func(self, odd: str, even: str) -> str:\n        return odd if not is_empty_data(odd) else even\n\n# Add these operators to the DAG\n    # previous code ...\n    two_sum_task = TwoSumOperator()\n    decision_task = DataDecisionOperator(odd_task_name=\"odd_task\", even_task_name=\"even_task\")\n    odd_task = OddOperator(task_name=\"odd_task\")\n    even_task = EvenOperator(task_name=\"even_task\")\n    merge_task = MergeOperator()\n    \n    db_query_task >> two_sum_task >> decision_task\n    decision_task >> odd_task >> merge_task\n    decision_task >> even_task >> merge_task\n\n\nfinal_result = asyncio.run(merge_task.call({\n    \"user_input\": \"Query the name and age of users younger than 18 years old\",\n    \"db_name\": \"user_management\",\n    \"dialect\": \"SQLite\",\n    \"top_k\": 1,\n    \"display_type\": display_type,\n    \"response\": json.dumps(RESPONSE_FORMAT_SIMPLE, ensure_ascii=False, indent=4) \n}))\nprint(\"The final result is:\")\nprint(final_result)\n```\n\n----------------------------------------\n\nTITLE: AWEL AgentFream Example with Text Processing Pipeline\nDESCRIPTION: Demonstrates using AgentFream API to create a text processing pipeline that includes vectorization, filtering, LLM processing, and custom transformations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naf = AgentFream(HttpSource(\"/examples/run_code\", method = \"post\"))\nresult = (\n    af\n    .text2vec(model=\"text2vec\")\n    .filter(vstore, store = \"chromadb\", db=\"default\")\n    .llm(model=\"vicuna-13b\", temperature=0.7)\n    .map(code_parse_func)\n    .map(run_sql_func)\n    .reduce(lambda a, b: a + b)\n)\nresult.write_to_sink(type='source_slink')\n```\n\n----------------------------------------\n\nTITLE: Starting the Controller Service\nDESCRIPTION: The controller service can be started using the dbgpt start controller command. It manages and controls the model services and listens on port 8000 by default.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n(dbgpt_env) magic@B-4TMH9N3X-2120 ~ % dbgpt start controller\nAlready connect 'dbgpt'\nINFO:     Started server process [96797]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI LLM Client\nDESCRIPTION: Code to initialize the OpenAI LLM client that serves as the 'brain' of the agent. This client connects to OpenAI's API using environment variables for authentication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/introduction.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nllm_client = OpenAILLMClient(\n    model_alias=\"gpt-3.5-turbo\", # or other models, eg. \"gpt-4o\"\n    api_base=os.getenv(\"OPENAI_API_BASE\"),\n    api_key=os.getenv(\"OPENAI_API_KEY\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Streaming Operators in AWEL\nDESCRIPTION: An example of creating streaming operators in AWEL: a NumberProducerOperator that generates a sequence of numbers and a NumberDoubleOperator that doubles each number. The example demonstrates operator chaining using the >> operator and handling of asynchronous streaming data.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.3_custom_operator.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator, TransformStreamAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nclass NumberDoubleOperator(TransformStreamAbsOperator[int, int]):\n    async def transform_stream(self, it: AsyncIterator) -> AsyncIterator[int]:\n        async for i in it:\n            # Double the number\n            yield i * 2\n            \nwith DAG(\"numbers_dag\") as dag:\n    task = NumberProducerOperator()\n    double_task = NumberDoubleOperator()\n    task >> double_task\n\nasync def helper_call_fn(t, n: int):\n    # Call the streaming operator by `call_stream` method\n    async for i in await t.call_stream(call_data=n):\n        print(i)\n        \nasyncio.run(helper_call_fn(double_task, 10))\n```\n\n----------------------------------------\n\nTITLE: Testing the HTTP Trigger with cURL\nDESCRIPTION: This cURL command sends a GET request to the HTTP trigger endpoint to test its functionality and receive the 'Hello, world!' response.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.1_http_trigger.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://127.0.0.1:5555/api/v1/awel/trigger/awel_tutorial/hello_world\n```\n\n----------------------------------------\n\nTITLE: Building Llama-cpp DB-GPT Docker Image\nDESCRIPTION: Command to build a CUDA-based DB-GPT Docker image with Llama-cpp support, including all default features plus Llama-cpp and Llama-cpp server with CUDA acceleration enabled.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode llama-cpp\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT MSSQL Dependencies\nDESCRIPTION: Command to install required packages for MSSQL datasource integration including base, datasource_mssql, rag, storage_chromadb, and dbgpts components.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/mssql_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"datasource_mssql\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with cURL\nDESCRIPTION: cURL command to generate embeddings for input text using the text2vec model through the DB-GPT API server.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/OpenAI_SDK_call.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:8100/api/v1/embeddings \\\n-H \"Authorization: Bearer EMPTY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"model\": \"text2vec\",\n    \"input\": \"Hello world!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Function Tool with FunctionTool Class\nDESCRIPTION: Shows how to create a tool using the FunctionTool class by passing a function name and implementation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent.resource import FunctionTool\n\n\ndef two_sum(a: int, b: int) -> int:\n    \"\"\"Add two numbers and return the sum.\"\"\"\n    return a + b\n\n\ntool = FunctionTool(\"two_sum\", two_sum)\n\n\nasync def show_prompts():\n    print(await tool.get_prompt())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(show_prompts())\n```\n\n----------------------------------------\n\nTITLE: Creating a File Counting Tool and ToolPack in Python\nDESCRIPTION: This snippet demonstrates creating a tool for counting files in a directory and wrapping it with the simple_calculator tool into a ToolPack for use in agents.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom typing_extensions import Annotated, Doc\n\nfrom dbgpt.agent.resource import ToolPack\n\n@tool\ndef count_directory_files(path: Annotated[str, Doc(\"The directory path\")]) -> int:\n    \"\"\"Count the number of files in a directory.\"\"\"\n    if not os.path.isdir(path):\n        raise ValueError(f\"Invalid directory path: {path}\")\n    return len(os.listdir(path))\n\ntools = ToolPack([simple_calculator, count_directory_files])\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Vector Store Parameters in JavaScript/React\nDESCRIPTION: A React component configuration object that defines the parameters for connecting to and using a Milvus vector database. It includes connection details like URI and port, authentication credentials, field mappings for primary key, text content, vector embeddings, and metadata storage.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/vector_store/milvus_store_milvusvectorconfig_20af52.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"MilvusVectorConfig\",\n  \"description\": \"Milvus vector config.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The user of vector store, if not set, will use the default user.\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The password of vector store, if not set, will use the default password.\"\n    },\n    {\n      \"name\": \"uri\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The uri of milvus store, if not set, will use the default uri.\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The port of milvus store, if not set, will use the default port.\",\n      \"defaultValue\": \"19530\"\n    },\n    {\n      \"name\": \"alias\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The alias of milvus store, if not set, will use the default alias.\",\n      \"defaultValue\": \"default\"\n    },\n    {\n      \"name\": \"primary_field\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The primary field of milvus store, if not set, will use the default primary field.\",\n      \"defaultValue\": \"pk_id\"\n    },\n    {\n      \"name\": \"text_field\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The text field of milvus store, if not set, will use the default text field.\",\n      \"defaultValue\": \"content\"\n    },\n    {\n      \"name\": \"embedding_field\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The embedding field of milvus store, if not set, will use the default embedding field.\",\n      \"defaultValue\": \"vector\"\n    },\n    {\n      \"name\": \"metadata_field\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The metadata field of milvus store, if not set, will use the default metadata field.\",\n      \"defaultValue\": \"metadata\"\n    },\n    {\n      \"name\": \"secure\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The secure of milvus store, if not set, will use the default \",\n      \"defaultValue\": \"\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Knowledge Base for DB-GPT Applications\nDESCRIPTION: This snippet shows the structure for defining intents, app codes, descriptions, and slots for different intelligent applications in DB-GPT. It's used for intent classification and routing user questions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/app/data_analysis_app_develop.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n#######################\nIntent:DBç­ç App Code:a41d0274-8ac4-11ef-8735-3ea07eeef889 Describe: ææDBé¢åç¸å³ç¥è¯çå¨è¯¢ç­çï¼åå«äºæ¥å¸¸DBAçFAQé®é¢æ°æ®ãOceanBase(OB)çå®æ¹ææ¡£æåï¼æä½æåãé®é¢ææ¥æåãæ¥å¸¸çé¾é®é¢çç¥è¯æ»ç»ãå¯ä»¥è¿è¡ä¸ä¸çDBAé¢åç¥è¯ç­çã åªè¦åDBç¸å³çä¸å±äºå¶ä»åºç¨è´è´£èç´çé½å¯ä»¥ä½¿ç¨ææ¥åç­ é®é¢èä¾: 1.æä¹æ¥çOBæå¨ï¼ 2.DMSæéå¦ä½ç³è¯· 3.å¦ä½ç¡®è®¤xxxxx ç±»å:ç¥è¯åºå¨è¯¢\n#######################\nIntent:æ°æ®å¯¹è¯ App Code:516963c4-8ac9-11ef-8735-3ea07eeef889 Describe: éè¿SQLæ¥è¯¢åæå½åæ°æ®åº(dbgpt-test:åå«ç¨æ·åç¨æ·éå®è®¢åæ°æ®çæ°æ®åºï¼ ç±»å:æ°æ®æ¥è¯¢\n#######################\nIntent:å¤©æ°æ£ç´¢å©æ App Code:f93610cc-8acc-11ef-8735-3ea07eeef889 Describe: å¯ä»¥è¿è¡å¤©æ°æ¥è¯¢ Slots:\nä½ç½®: è¦è·åå¤©æ°ä¿¡æ¯çå·ä½ä½ç½®\næ¶é´: è¦è·åçå¤©æ°ä¿¡æ¯çæ¶é´ï¼å¦ææ²¡ææç¡®æå°ï¼ä½¿ç¨å½åæ¶é´\n```\n\n----------------------------------------\n\nTITLE: Chat API Endpoints for DB-GPT\nDESCRIPTION: List of available Chat API endpoints in DB-GPT, including database management, dialogue interactions, and chat completions. These endpoints allow clients to manage database connections, create and manage chat dialogues, and interact with the chat interface.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/api.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi/v1/chat/db/list\napi/v1/chat/db/add\napi/v1/chat/db/edit\napi/v1/chat/db/delete\napi/v1/chat/db/test/connect\napi/v1/chat/db/summary\napi/v1/chat/db/support/type\napi/v1/chat/dialogue/list\napi/v1/chat/dialogue/scenes\napi/v1/chat/dialogue/new\napi/v1/chat/mode/params/list\napi/v1/chat/mode/params/file/load\napi/v1/chat/dialogue/delete\napi/v1/chat/dialogue/messages\napi/v1/chat/prepare\napi/v1/chat/completions\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TwoSum Operator for Pandas DataFrame Processing in Python\nDESCRIPTION: Creates a custom MapOperator that calculates the sum of the 'age' column in a Pandas DataFrame. The operator uses asynchronous processing by converting blocking operations to async.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass TwoSumOperator(MapOperator[pd.DataFrame, int]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    async def map(self, df: pd.DataFrame) -> int:\n        return await self.blocking_func_to_async(self._two_sum, df)\n\n    def _two_sum(self, df: pd.DataFrame) -> int:\n        return df[\"age\"].sum()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI ChatGPT Integration\nDESCRIPTION: Configuration settings for using OpenAI's ChatGPT service with DB-GPT. Requires setting the LLM model to proxyllm and configuring API credentials.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/llm.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nLLM_MODEL=proxyllm\n```\n\nLANGUAGE: shell\nCODE:\n```\nPROXY_API_KEY={your-openai-sk}\nPROXY_SERVER_URL=https://api.openai.com/v1/chat/completions\n```\n\n----------------------------------------\n\nTITLE: DAG Visualization Implementation\nDESCRIPTION: Extended implementation adding DAG visualization functionality\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.1_hello_world.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleCallDataInputSource\n\nwith DAG(\"awel_hello_world\") as dag:\n    input_task = InputOperator(\n        input_source=SimpleCallDataInputSource()\n    )\n    task = MapOperator(map_function=lambda x: print(f\"Hello, {x}!\"))\n    input_task >> task\n\ndag.visualize_dag()\nasyncio.run(task.call(call_data=\"world\"))\n```\n\n----------------------------------------\n\nTITLE: Importing Fine-tuning Modules\nDESCRIPTION: Importing required modules for data preprocessing, training, prediction, and evaluation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/dbgpt_hub.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_hub.data_process import preprocess_sft_data\nfrom dbgpt_hub.train import train_sft\nfrom dbgpt_hub.predict import start_predict\nfrom dbgpt_hub.eval import start_evaluate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Conda Environment for DB-GPT\nDESCRIPTION: These commands create a new Conda environment named 'dbgpt_env' with Python 3.10 and activate it for use with DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# create a virtual environment\nconda create -n dbgpt_env python=3.10\n\n# activate virtual environment\nconda activate dbgpt_env\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Environment configuration settings for using llama.cpp server with DB-GPT\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/Llamacpp_server.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLLM_MODEL=qwen2.5-0.5b-instruct\nLLM_MODEL_PATH=/tmp/qwen2.5-0.5b-instruct-q4_k_m.gguf\nMODEL_TYPE=llama_cpp_server\n```\n\n----------------------------------------\n\nTITLE: Cloning DB-GPT Repository\nDESCRIPTION: Command to clone the DB-GPT source code repository from GitHub.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/eosphoros-ai/DB-GPT.git\n```\n\n----------------------------------------\n\nTITLE: Using the dbgpt start Command\nDESCRIPTION: The dbgpt start command provides interfaces for service registration and discovery. It supports starting different server types: apiserver, controller, worker, and webserver.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt start --help\nAlready connect 'dbgpt'\nUsage: dbgpt start [OPTIONS] COMMAND [ARGS]...\n\n  Start specific server.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  apiserver   Start apiserver\n  controller  Start model controller\n  webserver   Start webserver(dbgpt_server.py)\n  worker      Start model worker\n```\n\n----------------------------------------\n\nTITLE: Creating and Formatting Agent Profile in Python for DB-GPT\nDESCRIPTION: This code snippet shows how to create a ProfileConfig object, generate a real profile from it, and format system and user prompts. It demonstrates the process of converting a profile into LLM-ready prompts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ProfileConfig\n\nprofile: ProfileConfig = ProfileConfig(\n    # The name of the agent\n    name=\"Aristotle\",\n    # The role of the agent\n    role=\"Summarizer\",\n    # The core functional goals of the agent tell LLM what it can do with it.\n    goal=(\n        \"Summarize answer summaries based on user questions from provided \"\n        \"resource information or from historical conversation memories.\"\n    ),\n    # Introduction and description of the agent, used for task assignment and display. \n    # If it is empty, the goal content will be used.\n    desc=(\n        \"You can summarize provided text content according to user's questions\"\n        \" and output the summarization.\"\n    ),\n)\n\n# Create a profile from the configuration\nreal_profile = profile.create_profile()\nsystem_prompt = real_profile.format_system_prompt(question=\"What can you do?\")\nuser_prompt = real_profile.format_user_prompt(question=\"What can you do?\")\n\nprint(f\"System Prompt: \\n{system_prompt}\")\nprint(\"#\" * 50)\nprint(f\"User Prompt: \\n{user_prompt}\")\n```\n\n----------------------------------------\n\nTITLE: TuGraph Configuration Component with React/JSX\nDESCRIPTION: React component defining the configuration schema for TuGraph store including connection settings, vertex/edge types, and feature flags. Uses a ConfigDetail component to render the configuration documentation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/graph_store/tugraph_store_tugraphstoreconfig_7ca8a8.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"TuGraphStoreConfig\",\n  \"description\": \"TuGraph store config.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"127.0.0.1\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"7687\"\n    },\n    {\n      \"name\": \"username\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"admin\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"73@TuGraph\"\n    },\n    {\n      \"name\": \"vertex_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"entity\"\n    },\n    {\n      \"name\": \"document_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"document\"\n    },\n    {\n      \"name\": \"chunk_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"chunk\"\n    },\n    {\n      \"name\": \"edge_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"relation\"\n    },\n    {\n      \"name\": \"include_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"include\"\n    },\n    {\n      \"name\": \"next_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"next\"\n    },\n    {\n      \"name\": \"plugin_names\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"['leiden']\"\n    },\n    {\n      \"name\": \"enable_summary\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"enable_similarity_search\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"False\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Get Flow API Endpoint\nDESCRIPTION: API endpoint for retrieving a specific flow by its ID.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nGET /api/v2/serve/awel/flows/{flow_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic DeepSpeed ZeRO-1 Settings for Distributed Training\nDESCRIPTION: A basic DeepSpeed configuration using ZeRO stage 1 optimization with mixed precision training. This configuration includes offloading optimizer states to CPU and specifies key parameters for training efficiency.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/agents_design.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zero_optimization\": {\n    \"stage\": 1\n  },\n  \"fp16\": {\n    \"enabled\": true\n  },\n  \"optimizer\": {\n    \"type\": \"AdamW\",\n    \"params\": {\n      \"lr\": 3e-4,\n      \"weight_decay\": 0.01\n    }\n  },\n  \"train_micro_batch_size_per_gpu\": 4,\n  \"gradient_accumulation_steps\": 2,\n  \"steps_per_print\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multi-Round Chat Script\nDESCRIPTION: Command to run the multi-round chat implementation script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/multi_round_chat_withllm.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython multi_round_chat_with_llm.py\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database for DB-GPT\nDESCRIPTION: TOML configuration snippet for setting up MySQL as the database for DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[service.web.database]\ntype = \"mysql\"\nhost = \"127.0.0.1\"\nport = 3306\nuser = \"root\"\ndatabase = \"dbgpt\"\npassword = \"aa123456\"\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary SQLite Database with Sample Data\nDESCRIPTION: Creates a temporary SQLite database with three tables (students, courses, scores) and populates them with sample educational data. The database includes student information, course details, and student scores.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/planning.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.datasource.rdbms.conn_sqlite import SQLiteTempConnector\n\nconnector = SQLiteTempConnector.create_temporary_db()\nconnector.create_temp_tables(\n    {\n        \"students\": {\n            \"columns\": {\n                \"student_id\": \"INTEGER PRIMARY KEY\",\n                \"student_name\": \"TEXT\",\n                \"major\": \"TEXT\",\n                \"year_of_enrollment\": \"INTEGER\",\n                \"student_age\": \"INTEGER\",\n            },\n            \"data\": [\n                (1, \"Zhang San\", \"Computer Science\", 2020, 20),\n                (2, \"Li Si\", \"Computer Science\", 2021, 19),\n                (3, \"Wang Wu\", \"Physics\", 2020, 21),\n                (4, \"Zhao Liu\", \"Mathematics\", 2021, 19),\n                (5, \"Zhou Qi\", \"Computer Science\", 2022, 18),\n                (6, \"Wu Ba\", \"Physics\", 2020, 21),\n                (7, \"Zheng Jiu\", \"Mathematics\", 2021, 19),\n                (8, \"Sun Shi\", \"Computer Science\", 2022, 18),\n                (9, \"Liu Shiyi\", \"Physics\", 2020, 21),\n                (10, \"Chen Shier\", \"Mathematics\", 2021, 19),\n            ],\n        },\n        \"courses\": {\n            \"columns\": {\n                \"course_id\": \"INTEGER PRIMARY KEY\",\n                \"course_name\": \"TEXT\",\n                \"credit\": \"REAL\",\n            },\n            \"data\": [\n                (1, \"Introduction to Computer Science\", 3),\n                (2, \"Data Structures\", 4),\n                (3, \"Advanced Physics\", 3),\n                (4, \"Linear Algebra\", 4),\n                (5, \"Calculus\", 5),\n                (6, \"Programming Languages\", 4),\n                (7, \"Quantum Mechanics\", 3),\n                (8, \"Probability Theory\", 4),\n                (9, \"Database Systems\", 4),\n                (10, \"Computer Networks\", 4),\n            ],\n        },\n        \"scores\": {\n            \"columns\": {\n                \"student_id\": \"INTEGER\",\n                \"course_id\": \"INTEGER\",\n                \"score\": \"INTEGER\",\n                \"semester\": \"TEXT\",\n            },\n            \"data\": [\n                (1, 1, 90, \"Fall 2020\"),\n                (1, 2, 85, \"Spring 2021\"),\n                (2, 1, 88, \"Fall 2021\"),\n                (2, 2, 90, \"Spring 2022\"),\n                (3, 3, 92, \"Fall 2020\"),\n                (3, 4, 85, \"Spring 2021\"),\n                (4, 3, 88, \"Fall 2021\"),\n                (4, 4, 86, \"Spring 2022\"),\n                (5, 1, 90, \"Fall 2022\"),\n                (5, 2, 87, \"Spring 2023\"),\n            ],\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Vector Store in Python\nDESCRIPTION: Sets up a ChromaStore instance with custom configuration for vector storage, including cleanup of existing storage and embedding function setup.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/long_term_memory.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport shutil\nfrom dbgpt.storage.vector_store.chroma_store import ChromaVectorConfig, ChromaStore\n\n# Delete old vector store directory(/tmp/tmp_ltm_vector_stor)\nshutil.rmtree(\"/tmp/tmp_ltm_vector_store\", ignore_errors=True)\nvector_store = ChromaStore(\n    ChromaVectorConfig(\n        embedding_fn=embeddings,\n        vector_store_config=ChromaVectorConfig(\n            name=\"ltm_vector_store\",\n            persist_path=\"/tmp/tmp_ltm_vector_store\",\n        ),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Two-Task Hello World DAG Implementation\nDESCRIPTION: Implementation of Hello World DAG with InputOperator and MapOperator\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.1_hello_world.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleCallDataInputSource\n\nwith DAG(\"awel_hello_world\") as dag:\n    input_task = InputOperator(\n        input_source=SimpleCallDataInputSource()\n    )\n    task = MapOperator(map_function=lambda x: print(f\"Hello, {x}!\"))\n    input_task >> task\n    \n\nasyncio.run(task.call(call_data=\"world\"))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenAI Proxy\nDESCRIPTION: Command to install dependencies required for using DB-GPT with OpenAI proxy model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Implementing BranchOperator with Branch Mapping in Python\nDESCRIPTION: Demonstrates how to create a BranchOperator using a dictionary of branch functions and task names to route even and odd numbers to different processing paths.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.4_branch_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, BranchOperator, MapOperator\n\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nbranch_mapping = {\n    branch_even: \"even_task\",\n    branch_odd: \"odd_task\"\n}\n\nwith DAG(\"awel_branch_operator\") as dag:\n    task = BranchOperator(branches=branch_mapping)\n    even_task = MapOperator(\n        task_name=\"even_task\", \n        map_function=lambda x: print(f\"{x} is even\")\n    )\n    odd_task = MapOperator(\n        task_name=\"odd_task\", \n        map_function=lambda x: print(f\"{x} is odd\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring OceanBase Vector Database in DB-GPT\nDESCRIPTION: Configuration snippet for setting up OceanBase as the vector store in DB-GPT. Includes connection settings like host, port, user, database name, and optional parameters for password and vector normalization.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/rag.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nOB_HOST=127.0.0.1\nOB_PORT=2881\nOB_USER=root@test\nOB_DATABASE=test\n## Optional\n# OB_PASSWORD=\n## Optional: If {OB_ENABLE_NORMALIZE_VECTOR} is set, the vector stored in OceanBase is normalized.\n# OB_ENABLE_NORMALIZE_VECTOR=True\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for DeepSeek Proxy\nDESCRIPTION: Command to install dependencies required for using DB-GPT with DeepSeek proxy model, including optional Hugging Face integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\" \\\n--extra \"hf\" \\\n--extra \"cpu\"\n```\n\n----------------------------------------\n\nTITLE: Listing Knowledge Spaces with cURL\nDESCRIPTION: Example of listing all knowledge spaces using cURL. Shows GET request format for retrieving all spaces.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\n\ncurl -X GET 'http://localhost:5670/api/v2/serve/knowledge/spaces' -H \"Authorization: Bearer $DBGPT_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom ProfileFactory with ProfileConfig in Python\nDESCRIPTION: This snippet shows how to use a custom ProfileFactory with the ProfileConfig class. It demonstrates creating a ProfileConfig object with the custom factory and generating prompts from it.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_creation.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ProfileConfig\n\nprofile: ProfileConfig = ProfileConfig(\n    factory=MyProfileFactory(),\n)\n\nreal_profile = profile.create_profile()\nsystem_prompt = real_profile.format_system_prompt(question=\"What can you do?\")\nuser_prompt = real_profile.format_user_prompt(question=\"What can you do?\")\nprint(f\"System Prompt: \\n{system_prompt}\")\nprint(\"#\" * 50)\nprint(f\"User Prompt: \\n{user_prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Class Table in JSX/React\nDESCRIPTION: JSX component usage that displays a table of reranker configuration classes. The component accepts an array of class objects containing name, description, and link properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/reranker/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"CrossEncoderRerankEmbeddingsParameters\",\n    \"description\": \"CrossEncoder Rerank Embeddings Parameters.\",\n    \"link\": \"./rerank_crossencoderrerankembeddingsparameters_63ec13\"\n  },\n  {\n    \"name\": \"OpenAPIRerankerDeployModelParameters\",\n    \"description\": \"OpenAPI Reranker Deploy Model Parameters.\",\n    \"link\": \"./rerank_openapirerankerdeploymodelparameters_778108\"\n  },\n  {\n    \"name\": \"SiliconFlowRerankEmbeddingsParameters\",\n    \"description\": \"SiliconFlow Rerank Embeddings Parameters.\",\n    \"link\": \"./rerank_siliconflowrerankembeddingsparameters_af0257\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring ChromaStore Vector Database with Embeddings in Python\nDESCRIPTION: Initializes a ChromaStore vector database with embedding function and persistence configuration. This vector store will be used to store and retrieve database schema information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nvector_store = ChromaStore(\n    ChromaVectorConfig(\n        embedding_fn=embeddings,\n        name=\"db_schema_vector_store\",\n        persist_path=\"/tmp/awel_with_data_vector_store\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT Webserver with DeepSeek Proxy\nDESCRIPTION: Command to start the DB-GPT webserver using the DeepSeek proxy configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-proxy-deepseek.toml\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT Webserver with Local GLM4 Model\nDESCRIPTION: Command to start the DB-GPT webserver using the local GLM4 model configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-local-glm.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring StarRocks Connection Parameters in DB-GPT\nDESCRIPTION: This JSON configuration defines all parameters needed to establish a connection to a StarRocks database. It includes required fields like host, port, user, and database name, as well as optional parameters for connection pooling and authentication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_starrocks_starrocksparameters_e511f7.mdx#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"StarRocksParameters\",\n  \"description\": \"An Open-Source, High-Performance Analytical Database.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database host, e.g., localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Database port, e.g., 3306\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database user to connect\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database name\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name for starrocks, default is starrocks.\",\n      \"defaultValue\": \"starrocks\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"pool_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool size, default 5\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"max_overflow\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Max overflow connections, default 10\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"pool_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool timeout, default 30\",\n      \"defaultValue\": \"30\"\n    },\n    {\n      \"name\": \"pool_recycle\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool recycle, default 3600\",\n      \"defaultValue\": \"3600\"\n    },\n    {\n      \"name\": \"pool_pre_ping\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Connection pool pre ping, default True\",\n      \"defaultValue\": \"True\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering RAG Knowledge Embedding Process via HTTP POST (Bash)\nDESCRIPTION: This curl command sends a POST request to trigger the RAG knowledge embedding process. It uses the local endpoint and includes an empty JSON payload.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/templates/Embedding.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:5670/api/v1/awel/trigger/rag/knowledge/embedding/process' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tool Class\nDESCRIPTION: Demonstrates creating a custom tool class by inheriting from BaseTool and implementing required methods.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict, Optional\nfrom dbgpt.agent.resource import BaseTool, ToolParameter\n\nclass MyTwoSumTool(BaseTool):\n\n    def __init__(self, name: Optional[str] = None) -> None:\n        self._name = name or \"two_sum\"\n        self._args = _TWO_SUM_ARGS\n\n    @property\n    def name(self) -> str:\n        \"\"\"Return the name of the tool.\"\"\"\n        return self._name\n\n    @property\n    def description(self) -> str:\n        return \"Add two numbers and return the sum.\"\n\n    @property\n    def args(self) -> Dict[str, ToolParameter]:\n        return self._args\n\n    @property\n    def is_async(self) -> bool:\n        \"\"\"Return whether the tool is asynchronous.\"\"\"\n        return False\n\n    def execute(\n        self,\n        *args,\n        resource_name: Optional[str] = None,\n        **kwargs,\n    ) -> Any:\n        return _two_sum(*args, **kwargs)\n\n    async def async_execute(\n        self,\n        *args,\n        resource_name: Optional[str] = None,\n        **kwargs,\n    ) -> Any:\n        raise ValueError(\"The function is not asynchronous\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Model Performance on Spider Dataset\nDESCRIPTION: Python command for evaluating the model's SQL generation performance on the Spider dataset. It calls the evaluation script with the plug_value flag and specifies the input file containing model predictions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npython dbgpt_hub/eval/evaluation.py --plug_value --input  Your_model_pred.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Local GLM4 Model\nDESCRIPTION: TOML configuration snippet to set up the local GLM4 model and embedding model for DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\nname = \"THUDM/glm-4-9b-chat-hf\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n\n[[models.embeddings]]\nname = \"BAAI/bge-large-zh-v1.5\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Evaluation with Python Client\nDESCRIPTION: Example of creating an evaluation using the Python client for DB-GPT, showing how to construct an evaluation request object and pass it to the run_evaluation function.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/evaluation.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.evaluation import run_evaluation\nfrom dbgpt.serve.evaluate.api.schemas import EvaluateServeRequest\n\nDBGPT_API_KEY = \"dbgpt\"\nclient = Client(api_key=DBGPT_API_KEY)\nrequest = EvaluateServeRequest(\n    # The scene type of the evaluation, e.g. support app, recall\n    scene_key=\"recall\",\n    # e.g. app id(when scene_key is app), space id(when scene_key is recall)\n    scene_value=\"147\",\n    context={\"top_k\": 5},\n    evaluate_metrics=[\n        \"RetrieverHitRateMetric\",\n        \"RetrieverMRRMetric\",\n        \"RetrieverSimilarityMetric\",\n    ],\n    datasets=[\n        {\n            \"query\": \"what awel talked about\",\n            \"doc_name\": \"awel.md\",\n        }\n    ],\n)\ndata = await run_evaluation(client, request=request)\n```\n\n----------------------------------------\n\nTITLE: Configuring DeepSeek Model\nDESCRIPTION: TOML configuration snippet to set up the DeepSeek model and embedding model for DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\n# name = \"deepseek-chat\"\nname = \"deepseek-reasoner\"\nprovider = \"proxy/deepseek\"\napi_key = \"your-deepseek-api-key\"\n[[models.embeddings]]\nname = \"BAAI/bge-large-zh-v1.5\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\npath = \"/data/models/bge-large-zh-v1.5\"\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Statement Production Rules in MySQL Grammar\nDESCRIPTION: These rules define the syntax for DELETE statements in MySQL, including single and multiple table delete operations, as well as optional clauses like WHERE, ORDER BY, and LIMIT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_68\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deleteStatement : multipleDeleteStatement */\n\n/*! Production::    deleteStatement : singleDeleteStatement */\n\n/*! Production::    delete_basic_stmt : delete_with_opt_hint FROM tbl_name opt_where opt_order_by opt_limit_clause */\n\n/*! Production::    delete_basic_stmt : delete_with_opt_hint multi_delete_table opt_where */\n\n/*! Production::    delete_stmt : delete_basic_stmt */\n\n/*! Production::    delete_stmt : delete_with_opt_hint FROM table_factor opt_where_extension opt_returning */\n\n/*! Production::    delete_stmt : delete_with_opt_hint table_factor opt_where opt_returning */\n\n/*! Production::    delete_stmt : with_clause delete_basic_stmt */\n\n/*! Production::    delete_with_opt_hint : DELETE */\n\n/*! Production::    delete_with_opt_hint : DELETE_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: DB-GPT Local LLama.cpp Configuration\nDESCRIPTION: TOML configuration file for setting up DB-GPT with local LLama.cpp model and embedding settings\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\nname = \"DeepSeek-R1-Distill-Qwen-1.5B\"\nprovider = \"llama.cpp\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n\n[[models.embeddings]]\nname = \"BAAI/bge-large-zh-v1.5\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Column Definition Grammar Rules\nDESCRIPTION: Production rules for column definitions including constraints, data types, and various attributes like AUTO_INCREMENT, DEFAULT, and COMMENT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    columnConstraint : AUTO_INCREMENT */\n```\n\n----------------------------------------\n\nTITLE: Updating Knowledge Space with cURL\nDESCRIPTION: Example of updating an existing knowledge space using cURL. Shows PUT request format with required parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=\"dbgpt\"\n\ncurl --location --request PUT 'http://localhost:5670/api/v2/serve/knowledge/spaces' \\\n--header 'Authorization: Bearer $DBGPT_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"desc\": \"for client space desc v2\", \"id\": \"49\", \"name\": \"test_space_2\", \"owner\": \"dbgpt\", \"vector_type\": \"Chroma\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLite Database Connector from File Path in Python\nDESCRIPTION: This code creates a SQLite database connector by providing the file path to an existing SQLite database.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/database.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.datasource.rdbms.conn_sqlite import SQLiteConnector\n\nconnector = SQLiteConnector.from_file_path(\"path/to/your/database.db\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphRAG Text2GQL Retriever in TOML\nDESCRIPTION: Configuration example for the Intent Recognition+Text2GQL graph retriever in GraphRAG. This setup enables precise graph queries by translating natural language to GQL statements using intent recognition and Text2GQL models.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[rag.storage.graph]\ntype = \"TuGraph\"\nhost=\"127.0.0.1\"\nport=7687\nusername=\"admin\"\npassword=\"73@TuGraph\"\n\nenable_summary=\"True\"\ntriplet_graph_enabled=\"True\"\ndocument_graph_enabled=\"True\"\n\n# Intent Recognition+Text2GQL graph retrieval configuration items\nenable_text_search=\"True\"\n\n# Use Ollama to deploy independent text2gql model, enable the following configuration items\n# text2gql_model_enabled=\"True\"\n# text2gql_model_name=\"tugraph/CodeLlama-7b-Cypher-hf:latest\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Prompt Templates in DB-GPT\nDESCRIPTION: This code defines custom system and user prompt templates using Jinja2 syntax. The templates are simpler versions of DB-GPT's default templates.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_to_prompt.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_system_prompt_template = \"\"\"\\\nYou are a {{ role }}, {% if name %}named {{ name }}, {% endif %}your goal is {{ goal }}.\nPlease think step by step to achieve the goal. You can use the resources given below. \nAt the same time, please strictly abide by the constraints and specifications in IMPORTANT REMINDER.\n\n*** IMPORTANT REMINDER ***\n{% if language == 'zh' %}\\\nPlease answer in simplified Chinese.\n{% else %}\\\nPlease answer in English.\n{% endif %}\\\n\"\"\"  # noqa\n\nmy_user_prompt_template = \"User question: {{ question }}\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Embedding Model for DB-GPT\nDESCRIPTION: These commands create a models directory, navigate to it, and clone the text2vec-large-chinese embedding model from Hugging Face.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir models && cd models\n\n# download embedding model, eg: text2vec-large-chinese\ngit clone https://huggingface.co/GanymedeNil/text2vec-large-chinese\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Input Source by Extending BaseInputSource\nDESCRIPTION: This example demonstrates how to create a custom input source by implementing the BaseInputSource interface and overriding the _read_data method. It includes a complete example with DAG setup and execution.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, InputOperator, MapOperator, BaseInputSource, TaskContext\n\nclass MyInputSource(BaseInputSource):\n    \"\"\"Create an input source with a single data\"\"\"\n    def _read_data(self, ctx: TaskContext) -> str:\n        return \"Hello, World!\"\n\nwith DAG(\"awel_input_operator\") as dag:\n    input_source = MyInputSource()\n    input_task = InputOperator(input_source=input_source)\n    print_task = MapOperator(map_function=lambda x: print(x))\n\n    input_task >> print_task\n\nasyncio.run(print_task.call())\n```\n\n----------------------------------------\n\nTITLE: Complete Stream Transformation Example with Producer and Consumer\nDESCRIPTION: Comprehensive example showing a complete streaming pipeline that produces numbers and doubles them. Includes both producer and transformer operators along with execution code.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.7_transform_stream_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, TransformStreamAbsOperator, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"Create a stream of numbers from 0 to `n-1`\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nclass NumberDoubleOperator(TransformStreamAbsOperator[int, int]):\n    async def transform_stream(self, it: AsyncIterator) -> AsyncIterator[int]:\n        async for i in it:\n            # Double the number\n            yield i * 2\n\nwith DAG(\"numbers_dag\") as dag:\n    task = NumberProducerOperator()\n    double_task = NumberDoubleOperator()\n    task >> double_task\nasync def print_stream(t, n: int):\n    # Call the streaming operator by `call_stream` method\n    async for i in await t.call_stream(call_data=n):\n        print(i)\n\nasyncio.run(print_stream(double_task, 10))\n```\n\n----------------------------------------\n\nTITLE: Sample Response from RAG Knowledge Embedding Process (Bash)\nDESCRIPTION: This code block shows a sample response from the RAG knowledge embedding process. It includes an array of embedded document chunks with content, metadata, and other relevant information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/templates/Embedding.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[\n    {\n        \"content\": \"\\\"What is AWEL?\\\": Agentic Workflow Expression Language(AWEL) is a set of intelligent agent workflow expression language specially designed for large model application\\ndevelopment. It provides great functionality and flexibility. Through the AWEL API, you can focus on the development of business logic for LLMs applications\\nwithout paying attention to cumbersome model and environment details.  \\nAWEL adopts a layered API design. AWEL's layered API design architecture is shown in the figure below.  \\n<p align=\\\"left\\\">\\n<img src={'/img/awel.png'} width=\\\"480px\\\"/>\\n</p>\",\n        \"metadata\": {\n            \"Header1\": \"What is AWEL?\",\n            \"source\": \"../../docs/docs/awel/awel.md\"\n        },\n        \"chunk_id\": \"c1ffa671-76d0-4c7a-b2dd-0b08dfd37712\",\n        \"chunk_name\": \"\",\n        \"score\": 0.0,\n        \"summary\": \"\",\n        \"separator\": \"\\n\",\n        \"retriever\": null\n    },...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Llama.cpp Server Dependencies\nDESCRIPTION: Commands for installing llama.cpp server dependencies with optional CUDA support for GPU acceleration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/Llamacpp_server.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[llama_cpp_server]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nCMAKE_ARGS=\"-DGGML_CUDA=ON\" pip install -e \".[llama_cpp_server]\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Embedding API Server\nDESCRIPTION: Establishes connection to a remote embedding API server in a DB-GPT cluster. Requires the API URL, key, and model name to initialize the remote embedding factory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/short_term_memory.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\nembeddings = DefaultEmbeddingFactory.remote(\n  api_url=\"http://localhost:8100/api/v1/embeddings\",\n  api_key=\"{your_api_key}\",\n  model_name=\"text2vec\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initiating Stream Chat with DB-GPT API\nDESCRIPTION: This snippet demonstrates how to initiate a stream chat using the DB-GPT API. It includes examples in both cURL and Python, showing how to send a POST request to the chat completions endpoint with necessary parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/app.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nAPP_ID={YOUR_APP_ID}\n\ncurl -X POST \"http://localhost:5670/api/v2/chat/completions\" \\\n   -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n   -H \"accept: application/json\" \\\n   -H \"Content-Type: application/json\" \\\n   -d \"{\\\"messages\\\":\\\"Hello\\\",\\\"model\\\":\\\"gpt-4o\\\", \\\"chat_mode\\\": \\\"chat_app\\\", \\\"chat_param\\\": \\\"$APP_ID\\\"}\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\n\nDBGPT_API_KEY = \"dbgpt\"\nAPP_ID=\"{YOUR_APP_ID}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\n\nasync for data in client.chat_stream(\n    messages=\"Introduce AWEL\", \n    model=\"gpt-4o\", \n    chat_mode=\"chat_app\", \n    chat_param=APP_ID\n):\n    print(data)\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Webserver with Local LLama.cpp\nDESCRIPTION: Command to start DB-GPT webserver using local LLama.cpp configuration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-local-llama-cpp.toml\n```\n\n----------------------------------------\n\nTITLE: Defining Table Constraint Grammar\nDESCRIPTION: Production rules for table constraints such as CHECK, FOREIGN KEY, PRIMARY KEY, and UNIQUE constraints. These define the grammar for constraints that can be applied to tables.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_202\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tableConstraint : opt_tableConstraint CHECK LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    tableConstraint : opt_tableConstraint FOREIGN KEY opt_uid indexColumnNames referenceDefinition */\n\n/*! Production::    tableConstraint : opt_tableConstraint PRIMARY KEY opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    tableConstraint : opt_tableConstraint UNIQUE opt_tableConstraintFormat opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    tableConstraintFormat : INDEX */\n\n/*! Production::    tableConstraintFormat : KEY */\n```\n\n----------------------------------------\n\nTITLE: Customizing Tool Parameters with Args Dictionary\nDESCRIPTION: Shows how to customize tool parameters using the args parameter in the @tool decorator with detailed parameter descriptions and requirements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent.resource import tool\n\n@tool(\n    args={\n        \"a\": {\n            \"type\": \"integer\",\n            \"description\": \"First number to add\",\n            \"required\": True,\n        },\n        \"b\": {\n            \"type\": \"integer\",\n            \"description\": \"Second number to add\",\n            \"required\": True,\n        },\n    }\n)\ndef two_sum(a: int, b: int) -> int:\n    \"\"\"Add two numbers and return the sum.\"\"\"\n    return a + b\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT API Server for OpenAI SDK Compatibility\nDESCRIPTION: Command to start the DB-GPT API server on port 8100 with a controller address and empty API key configuration for local model service access.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/OpenAI_SDK_call.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt start apiserver --controller_addr http://127.0.0.1:8000 --api_keys EMPTY\n```\n\n----------------------------------------\n\nTITLE: Installing uv Package Manager (PyPI)\nDESCRIPTION: Commands to install uv using pip and pipx.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --upgrade pip\npython -m pip install --upgrade pipx\npython -m pipx ensurepath\npipx install uv --global\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for DB-GPT V0.5.0 Upgrade\nDESCRIPTION: SQL script to create new database tables required for V0.5.0, including dbgpt_serve_flow, gpts_app, gpts_app_collection, and gpts_app_detail tables. These tables support flow management, GPT applications, and application details in the upgraded version.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/changelog/Released_V0.5.0.md#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- dbgpt.dbgpt_serve_flow definition\nCREATE TABLE `dbgpt_serve_flow` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'Auto increment id',\n  `uid` varchar(128) NOT NULL COMMENT 'Unique id',\n  `dag_id` varchar(128) DEFAULT NULL COMMENT 'DAG id',\n  `name` varchar(128) DEFAULT NULL COMMENT 'Flow name',\n  `flow_data` text COMMENT 'Flow data, JSON format',\n  `user_name` varchar(128) DEFAULT NULL COMMENT 'User name',\n  `sys_code` varchar(128) DEFAULT NULL COMMENT 'System code',\n  `gmt_created` datetime DEFAULT NULL COMMENT 'Record creation time',\n  `gmt_modified` datetime DEFAULT NULL COMMENT 'Record update time',\n  `flow_category` varchar(64) DEFAULT NULL COMMENT 'Flow category',\n  `description` varchar(512) DEFAULT NULL COMMENT 'Flow description',\n  `state` varchar(32) DEFAULT NULL COMMENT 'Flow state',\n  `source` varchar(64) DEFAULT NULL COMMENT 'Flow source',\n  `source_url` varchar(512) DEFAULT NULL COMMENT 'Flow source url',\n  `version` varchar(32) DEFAULT NULL COMMENT 'Flow version',\n  `label` varchar(128) DEFAULT NULL COMMENT 'Flow label',\n  `editable` int DEFAULT NULL COMMENT 'Editable, 0: editable, 1: not editable',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_uid` (`uid`),\n  KEY `ix_dbgpt_serve_flow_sys_code` (`sys_code`),\n  KEY `ix_dbgpt_serve_flow_uid` (`uid`),\n  KEY `ix_dbgpt_serve_flow_dag_id` (`dag_id`),\n  KEY `ix_dbgpt_serve_flow_user_name` (`user_name`),\n  KEY `ix_dbgpt_serve_flow_name` (`name`)\n) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- dbgpt.gpts_app definition\nCREATE TABLE `gpts_app` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'autoincrement id',\n  `app_code` varchar(255) NOT NULL COMMENT 'Current AI assistant code',\n  `app_name` varchar(255) NOT NULL COMMENT 'Current AI assistant name',\n  `app_describe` varchar(2255) NOT NULL COMMENT 'Current AI assistant describe',\n  `language` varchar(100) NOT NULL COMMENT 'gpts language',\n  `team_mode` varchar(255) NOT NULL COMMENT 'Team work mode',\n  `team_context` text COMMENT 'The execution logic and team member content that teams with different working modes rely on',\n  `user_code` varchar(255) DEFAULT NULL COMMENT 'user code',\n  `sys_code` varchar(255) DEFAULT NULL COMMENT 'system app code',\n  `created_at` datetime DEFAULT NULL COMMENT 'create time',\n  `updated_at` datetime DEFAULT NULL COMMENT 'last update time',\n  `icon` varchar(1024) DEFAULT NULL COMMENT 'app icon, url',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_gpts_app` (`app_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\nCREATE TABLE `gpts_app_collection` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'autoincrement id',\n  `app_code` varchar(255) NOT NULL COMMENT 'Current AI assistant code',\n  `user_code` int(11) NOT NULL COMMENT 'user code',\n  `sys_code` varchar(255) NOT NULL COMMENT 'system app code',\n  `created_at` datetime DEFAULT NULL COMMENT 'create time',\n  `updated_at` datetime DEFAULT NULL COMMENT 'last update time',\n  PRIMARY KEY (`id`),\n  KEY `idx_app_code` (`app_code`),\n  KEY `idx_user_code` (`user_code`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=\"gpt collections\";\n\n-- dbgpt.gpts_app_detail definition\nCREATE TABLE `gpts_app_detail` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'autoincrement id',\n  `app_code` varchar(255) NOT NULL COMMENT 'Current AI assistant code',\n  `app_name` varchar(255) NOT NULL COMMENT 'Current AI assistant name',\n  `agent_name` varchar(255) NOT NULL COMMENT ' Agent name',\n  `node_id` varchar(255) NOT NULL COMMENT 'Current AI assistant Agent Node id',\n  `resources` text COMMENT 'Agent bind  resource',\n  `prompt_template` text COMMENT 'Agent bind  template',\n  `llm_strategy` varchar(25) DEFAULT NULL COMMENT 'Agent use llm strategy',\n  `llm_strategy_value` text COMMENT 'Agent use llm strategy value',\n  `created_at` datetime DEFAULT NULL COMMENT 'create time',\n  `updated_at` datetime DEFAULT NULL COMMENT 'last update time',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_gpts_app_agent_node` (`app_name`,`agent_name`,`node_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Resource for Agent Use in Python\nDESCRIPTION: This code creates a database resource using the RDBMSConnectorResource class, which can be used by agents to interact with the database.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/database.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent.resource import RDBMSConnectorResource\n\ndb_resource = RDBMSConnectorResource(\"user_manager\", connector=connector)\n```\n\n----------------------------------------\n\nTITLE: Downloading the CodeLlama-13b-Instruct-hf Base Model\nDESCRIPTION: Command to download the CodeLlama-13b-Instruct-hf model from HuggingFace using Git LFS, which will be used as the base model for fine-tuning in the Text2SQL pipeline.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd Your_model_dir\ngit lfs install\ngit clone git@hf.co:codellama/CodeLlama-13b-Instruct-hf\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Supported Data Sources in DB-GPT\nDESCRIPTION: This markdown table lists various data sources, their support status in DB-GPT, and brief notes about each. It includes popular databases like MySQL, PostgreSQL, and emerging technologies like StarRocks.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/modules/connections.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| DataSource                                                                      | support | Notes                                       |\n| ------------------------------------------------------------------------------  |---------| ------------------------------------------- |\n| [MySQL](https://www.mysql.com/)                                                 | Yes     |  MySQL is the world's most popular open source database.                             |\n| [PostgresSQL](https://www.postgresql.org/)                                      | Yes     |  The World's Most Advanced Open Source Relational Database                                   |\n| [Vertica](https://www.vertica.com/)                                             | Yes     |  Vertica is a strongly consistent, ACID-compliant, SQL data warehouse, built for the scale and complexity of today's data-driven world.                                   |\n| [Spark](https://github.com/apache/spark)                                        | Yes     |  Unified Engine for large-scale data analytics                                |\n| [DuckDB](https://github.com/duckdb/duckdb)                                      | Yes     |  DuckDB is an in-process SQL OLAP database management system                                          |\n| [Sqlite](https://github.com/sqlite/sqlite)                                      | Yes     |                                             |\n| [MSSQL](https://github.com/microsoft/mssql-jdbc)                                | Yes     |                                             |\n| [ClickHouse](https://github.com/ClickHouse/ClickHouse)                          | Yes     |  ClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics.                                      |\n| [Oracle](https://github.com/oracle)                                             | No      |           TODO                              |\n| [Redis](https://github.com/redis/redis)                                         | No      |  The Multi-model NoSQL Database                              |\n| [MongoDB](https://github.com/mongodb/mongo)                                     | No      |  MongoDB is a source-available cross-platform document-oriented database program                              |\n| [HBase](https://github.com/apache/hbase)                                        | No      |  Open-source, distributed, versioned, column-oriented store modeled                              |\n| [Doris](https://github.com/apache/doris)                                        | Yes     |  Apache Doris is an easy-to-use, high performance and unified analytics database.                              |\n| [DB2](https://github.com/IBM/Db2)                                               | No      |           TODO                              |\n| [Couchbase](https://github.com/couchbase)                                       | No      |           TODO                              |\n| [Elasticsearch](https://github.com/elastic/elasticsearch)                       | No      |  Free and Open, Distributed, RESTful Search Engine                              |\n| [OceanBase](https://github.com/OceanBase)                                       | No      |  OceanBase is a distributed relational database.                               |\n| [TiDB](https://github.com/pingcap/tidb)                                         | No      |           TODO                              |\n| [StarRocks](https://github.com/StarRocks/starrocks)                             | Yes     | StarRocks is a next-gen, high-performance analytical data warehouse                               |\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom StreamifyAbsOperator in Python\nDESCRIPTION: This snippet demonstrates how to implement a custom StreamifyAbsOperator by overriding the streamify method. It creates a NumberProducerOperator that generates a stream of numbers from 0 to n-1.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.5_streamify_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"Create a stream of numbers from 0 to `n-1`\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nwith DAG(\"numbers_dag\") as dag:\n    task = NumberProducerOperator()\n```\n\n----------------------------------------\n\nTITLE: Processing Call Data with SimpleCallDataInputSource\nDESCRIPTION: This example shows how to use InputOperator with SimpleCallDataInputSource to read data passed to the call method. It demonstrates passing different call data values to the same operator.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleCallDataInputSource\n\nwith DAG(\"awel_input_operator\") as dag:\n    input_source = SimpleCallDataInputSource()\n    input_task = InputOperator(input_source=input_source)\n    print_task = MapOperator(map_function=lambda x: print(x))\n    input_task >> print_task\n\nasyncio.run(print_task.call(call_data=\"Hello, World!\"))\nasyncio.run(print_task.call(call_data=\"AWEL is cool!\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Embedding Model for Enhanced Memory\nDESCRIPTION: Sets up an OpenAI embedding model for use with enhanced short-term memory. Uses environment variables for the API URL and key to initialize the embedding factory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/short_term_memory.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\napi_url = os.getenv(\"OPENAI_API_BASE\", \"https://api.openai.com/v1\") + \"/embeddings\"\napi_key = os.getenv(\"OPENAI_API_KEY\")\nembeddings = DefaultEmbeddingFactory.openai(api_url=api_url, api_key=api_key)\n```\n\n----------------------------------------\n\nTITLE: Integrating Tools with Agent in Python\nDESCRIPTION: This code demonstrates how to integrate tools into an agent context, setting up a UserProxyAgent and a ToolAssistantAgent with the defined tools for interaction.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom dbgpt.agent import AgentContext, AgentMemory, LLMConfig, UserProxyAgent\nfrom dbgpt.agent.expand.tool_assistant_agent import ToolAssistantAgent\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nasync def main():\n\n    llm_client = OpenAILLMClient(\n        model_alias=\"gpt-3.5-turbo\",  # or other models, eg. \"gpt-4o\"\n        api_base=os.getenv(\"OPENAI_API_BASE\"),\n        api_key=os.getenv(\"OPENAI_API_KEY\"),\n    )\n    context: AgentContext = AgentContext(\n        conv_id=\"test123\", language=\"en\", temperature=0.5, max_new_tokens=2048\n    )\n    agent_memory = AgentMemory()\n\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n\n    tool_man = (\n        await ToolAssistantAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .bind(tools)\n        .build()\n    )\n\n    await user_proxy.initiate_chat(\n        recipient=tool_man,\n        reviewer=user_proxy,\n        message=\"Calculate the product of 10 and 99\",\n    )\n\n    await user_proxy.initiate_chat(\n        recipient=tool_man,\n        reviewer=user_proxy,\n        message=\"Count the number of files in /tmp\",\n    )\n    \nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Advanced DeepSpeed ZeRO-3 Configuration with Parameter Partitioning\nDESCRIPTION: A comprehensive DeepSpeed configuration using ZeRO stage 3 optimization that partitions model parameters, gradients, and optimizer states across GPUs. This configuration enables training very large models that exceed the memory capacity of a single GPU.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/agents_design.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zero_optimization\": {\n    \"stage\": 3,\n    \"offload_optimizer\": {\n      \"device\": \"cpu\"\n    },\n    \"offload_param\": {\n      \"device\": \"cpu\"\n    },\n    \"overlap_comm\": true,\n    \"contiguous_gradients\": true,\n    \"reduce_scatter\": true,\n    \"stage3_prefetch_bucket_size\": 5e8,\n    \"stage3_param_persistence_threshold\": 1e6\n  },\n  \"fp16\": {\n    \"enabled\": true,\n    \"loss_scale\": 0,\n    \"loss_scale_window\": 1000,\n    \"initial_scale_power\": 16,\n    \"hysteresis\": 2,\n    \"min_loss_scale\": 1\n  },\n  \"optimizer\": {\n    \"type\": \"AdamW\",\n    \"params\": {\n      \"lr\": 1e-5,\n      \"weight_decay\": 0.1\n    }\n  },\n  \"scheduler\": {\n    \"type\": \"WarmupLR\",\n    \"params\": {\n      \"warmup_min_lr\": 0,\n      \"warmup_max_lr\": 1e-5,\n      \"warmup_num_steps\": 200\n    }\n  },\n  \"train_micro_batch_size_per_gpu\": 1,\n  \"gradient_accumulation_steps\": 8,\n  \"gradient_clipping\": 1.0,\n  \"wall_clock_breakdown\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Text2Vec Embeddings\nDESCRIPTION: Setting up local text2vec embeddings model\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\nembeddings = DefaultEmbeddingFactory.default(\"/data/models/text2vec-large-chinese\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: TOML configuration snippet for setting up the OpenAI API key in the DB-GPT configuration file.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\n...\napi_key = \"your-openai-api-key\"\n[[models.embeddings]]\n...\napi_key = \"your-openai-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Function Expression Productions for Advanced Operations\nDESCRIPTION: This snippet defines production rules for more advanced SQL function expressions, including timestamp operations, string trimming, and statistical variance functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_84\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_expr : TIMESTAMPADD \"(\" timestamp_params \")\" */\n\n/*! Production::    func_expr : TIMESTAMPDIFF \"(\" timestamp_params \")\" */\n\n/*! Production::    func_expr : TOP_K_FRE_HIST \"(\" bit_expr \",\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    func_expr : TRIM \"(\" parameterized_trim \")\" */\n\n/*! Production::    func_expr : VALUES \"(\" column_definition_ref \")\" */\n\n/*! Production::    func_expr : VARIANCE \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : VAR_POP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : VAR_SAMP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : WEEK \"(\" expr \")\" */\n\n/*! Production::    func_expr : WEEK \"(\" expr \",\" expr \")\" */\n```\n\n----------------------------------------\n\nTITLE: Customizing Tool Name and Description with Decorator\nDESCRIPTION: Demonstrates how to use the @tool decorator to create a custom tool with specified name and description parameters for adding two numbers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent.resource import tool\n\n@tool(\"my_two_sum\", description=\"Add two numbers and return the sum.\")\ndef two_sum(a: int, b: int) -> int:\n    return a + b\n```\n\n----------------------------------------\n\nTITLE: Update Datasource Endpoint\nDESCRIPTION: Endpoint for updating an existing datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPUT /api/v2/serve/datasources\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT Webserver with OpenAI Proxy\nDESCRIPTION: Command to start the DB-GPT webserver using the OpenAI proxy configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Function Expression Productions for String and Date Operations\nDESCRIPTION: This snippet defines production rules for SQL function expressions related to string weighting, date/time operations, and general function calls with various parameter structures.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_85\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr \",\" INTNUM \",\" INTNUM \",\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr AS BINARY ws_nweights \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr opt_ws_as_char opt_ws_levels \")\" */\n\n/*! Production::    func_expr : YEAR \"(\" expr \")\" */\n\n/*! Production::    func_expr : cur_date_func */\n\n/*! Production::    func_expr : cur_time_func */\n\n/*! Production::    func_expr : cur_timestamp_func */\n\n/*! Production::    func_expr : function_name \"(\" opt_expr_as_list \")\" */\n\n/*! Production::    func_expr : json_value_expr */\n\n/*! Production::    func_expr : relation_name \".\" function_name \"(\" opt_expr_as_list \")\" */\n\n/*! Production::    func_expr : substr_or_substring \"(\" substr_params \")\" */\n\n/*! Production::    func_expr : sys_interval_func */\n\n/*! Production::    func_expr : sysdate_func */\n\n/*! Production::    func_expr : utc_date_func */\n\n/*! Production::    func_expr : utc_time_func */\n\n/*! Production::    func_expr : utc_timestamp_func */\n```\n\n----------------------------------------\n\nTITLE: LLM Management API Endpoints for DB-GPT\nDESCRIPTION: List of available LLM Management API endpoints in DB-GPT, providing model control, parameter management, and text generation functionality. These endpoints allow for starting/stopping models, generating text, creating embeddings, and managing model parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/api.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napi/v1/worker/model/params\napi/v1/worker/model/list\napi/v1/worker/model/stop\napi/v1/worker/model/start\napi/worker/generate_stream\napi/worker/generate\napi/worker/embeddings\napi/worker/apply\napi/worker/parameter/descriptions\napi/worker/models/supports\napi/worker/models/startup\napi/worker/models/shutdown\napi/controller/models\napi/controller/heartbeat\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Short-term Memory in DB-GPT\nDESCRIPTION: Creates a basic short-term memory for agents with a specified buffer size. When the buffer is full, it follows a FIFO (First In, First Out) mechanism to discard older memories while transferring some to long-term memory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/short_term_memory.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import AgentMemory, ShortTermMemory\n\n# Create an agent memory, which contains a short-term memory\nmemory = ShortTermMemory(buffer_size=2)\nagent_memory: AgentMemory = AgentMemory(memory=memory)\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Connection in DB-GPT\nDESCRIPTION: Environment variables to set in the .env file for connecting DB-GPT to Elasticsearch.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/keyword_rag_app_develop.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nELASTICSEARCH_URL=localhost\nELASTICSEARCH_PORT=9200\nELASTICSEARCH_USERNAME=elastic\nELASTICSEARCH_PASSWORD=dbgpt\n```\n\n----------------------------------------\n\nTITLE: Create Datasource Endpoint\nDESCRIPTION: Endpoint for creating a new datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPOST /api/v2/serve/datasources\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT Webserver with VLLM Model\nDESCRIPTION: Command to start the DB-GPT webserver using the VLLM model configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-local-vllm.toml\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table for DB-GPT Cluster Registry\nDESCRIPTION: SQL script to create the 'dbgpt_cluster_registry_instance' table for storing model registry data in MySQL. This table is essential for the StorageModelRegistry used in high availability setups.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster_ha.md#2025-04-09_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `dbgpt_cluster_registry_instance` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Auto increment id',\n  `model_name` varchar(128) NOT NULL COMMENT 'Model name',\n  `host` varchar(128) NOT NULL COMMENT 'Host of the model',\n  `port` int(11) NOT NULL COMMENT 'Port of the model',\n  `weight` float DEFAULT 1.0 COMMENT 'Weight of the model',\n  `check_healthy` tinyint(1) DEFAULT 1 COMMENT 'Whether to check the health of the model',\n  `healthy` tinyint(1) DEFAULT 0 COMMENT 'Whether the model is healthy',\n  `enabled` tinyint(1) DEFAULT 1 COMMENT 'Whether the model is enabled',\n  `prompt_template` varchar(128) DEFAULT NULL COMMENT 'Prompt template for the model instance',\n  `last_heartbeat` datetime DEFAULT NULL COMMENT 'Last heartbeat time of the model instance',\n  `user_name` varchar(128) DEFAULT NULL COMMENT 'User name',\n  `sys_code` varchar(128) DEFAULT NULL COMMENT 'System code',\n  `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'Record creation time',\n  `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Record update time',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_model_instance` (`model_name`, `host`, `port`, `sys_code`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT='Cluster model instance table, for registering and managing model instances';\n```\n\n----------------------------------------\n\nTITLE: Using Rerank API with Python Client\nDESCRIPTION: Python code example showing how to use the reranking capability programmatically through the OpenAPIRerankEmbeddings class to score documents based on relevance to a query.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/OpenAI_SDK_call.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.rag.embedding import OpenAPIRerankEmbeddings\n\nrerank = OpenAPIRerankEmbeddings(api_key=\"EMPTY\", model_name=\"bge-reranker-base\")\nrerank.predict(\n    query=\"what is awel talk about?\", \n    candidates=[\n        \"Agentic Workflow Expression Language(AWEL) is a set of intelligent agent workflow expression language specially designed for large model application development.\",\n        \"Autonomous agents have long been a research focus in academic and industry communities\",\n        \"AWEL is divided into three levels in deign, namely the operator layer, AgentFream layer and DSL layer.\",\n        \"Elon musk is a famous entrepreneur and inventor, he is the founder of SpaceX and Tesla.\"\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Space with Python Client\nDESCRIPTION: Example of creating a new knowledge space using the DB-GPT Python client library. Demonstrates how to set space name, vector type, description and owner.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.knowledge import create_space\nfrom dbgpt_client.schema import SpaceModel\n\nDBGPT_API_KEY = \"dbgpt\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await create_space(client, SpaceModel(\n    name=\"test_space\",\n    vector_type=\"Chroma\",\n    desc=\"for client space\",\n    owner=\"dbgpt\"\n))\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma Vector Store Dependencies\nDESCRIPTION: Command to install the chromadb package required for vector storage functionality.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/long_term_memory.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install chromadb\n```\n\n----------------------------------------\n\nTITLE: Starting Model Controller with Storage Model Registry\nDESCRIPTION: Bash command to start a DB-GPT model controller using a MySQL database as the storage backend for the model registry. This setup enables high availability by allowing multiple controllers to share metadata.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster_ha.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt start controller \\\n--port 8000 \\\n--registry_type database \\\n--registry_db_type mysql \\\n--registry_db_name dbgpt \\\n--registry_db_host 127.0.0.1 \\\n--registry_db_port 3306 \\\n--registry_db_user root \\\n--registry_db_password aa123456\n```\n\n----------------------------------------\n\nTITLE: Alternative Command for Running DB-GPT Webserver\nDESCRIPTION: Alternative command to start the DB-GPT webserver using Python directly.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel Execution Options in Oracle SQL\nDESCRIPTION: BNF production rules for parallel execution options in Oracle SQL, including PARALLEL_ENABLE with optional partitioning and NOPARALLEL settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_144\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    parallel_enable : PARALLEL_ENABLE \"(\" PARTITION argument BY partition_by \")\" */\n\n/*! Production::    parallel_enable : PARALLEL_ENABLE */\n\n/*! Production::    parallel_hint : INTNUM */\n\n/*! Production::    parallel_hint : qb_name_option relation_factor_in_hint opt_comma INTNUM */\n\n/*! Production::    parallel_option : NOPARALLEL */\n\n/*! Production::    parallel_option : PARALLEL opt_equal_mark INTNUM */\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GLM4 Local Model\nDESCRIPTION: Command to install dependencies required for using DB-GPT with the local GLM4 model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"cuda121\" \\\n--extra \"hf\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"quant_bnb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Model API Endpoints for DB-GPT\nDESCRIPTION: List of available Model API endpoints in DB-GPT for retrieving model information. These endpoints provide information about the types of models supported and available in the system.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/api.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napi/v1/model/types\napi/v1/model/supports\n```\n\n----------------------------------------\n\nTITLE: Initializing SensoryMemory in Python\nDESCRIPTION: Creates an instance of SensoryMemory with a specified buffer size and initializes AgentMemory. The buffer_size parameter determines how many previous conversations will be remembered.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/sensory_memory.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import AgentMemory, SensoryMemory\n\n# Create an agent memory, which contains a sensory memory\nmemory = SensoryMemory(buffer_size=2)\nagent_memory: AgentMemory = AgentMemory(memory=memory)\n```\n\n----------------------------------------\n\nTITLE: Model Restart Command Options\nDESCRIPTION: Options for restarting specific model instances with model name and type specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt model restart  --help\nAlready connect 'dbgpt'\nUsage: dbgpt model restart [OPTIONS]\n\n  Restart model instances\n\nOptions:\n  --model_name TEXT  The name of model  [required]\n  --model_type TEXT  The type of model\n  --help             Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Get Flow Using Python Client\nDESCRIPTION: Example of using the Python client to retrieve a flow by its ID. This demonstrates how to use the dbgpt_client library to get flow details.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.flow import get_flow\n\nDBGPT_API_KEY = \"dbgpt\"\nflow_id = \"{your_flow_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await get_flow(client=client, flow_id=flow_id)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Oceanbase Vector Storage Settings\nDESCRIPTION: TOML configuration for setting up Oceanbase Vector connection parameters including host, port, and optional authentication credentials.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/oceanbase_rag_install.md#2025-04-09_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rag.storage]\n[rag.storage.vector]\ntype = \"Oceanbase\"\nuri = \"127.0.0.1\"\nport = \"19530\"\n#username=\"dbgpt\"\n#password=19530\n```\n\n----------------------------------------\n\nTITLE: Running the AWEL Streaming Example Server\nDESCRIPTION: Command to execute the streaming HTTP service using Poetry. This command runs the Python script that sets up the AWEL DAG with streaming capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.4_http_trigger_streaming.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/http_trigger_stream_numbers.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Prompt Templates in DB-GPT\nDESCRIPTION: This code creates a ProfileConfig object and displays the default system and user prompt templates that DB-GPT uses to generate prompts from profiles.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_to_prompt.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ProfileConfig\nprofile: ProfileConfig = ProfileConfig(\n    # The name of the agent\n    name=\"Aristotle\",\n    # The role of the agent\n    role=\"Summarizer\",\n    # The core functional goals of the agent tell LLM what it can do with it.\n    goal=(\n        \"Summarize answer summaries based on user questions from provided \"\n        \"resource information or from historical conversation memories.\"\n    ),\n    # Introduction and description of the agent, used for task assignment and display. \n    # If it is empty, the goal content will be used.\n    desc=(\n        \"You can summarize provided text content according to user's questions\"\n        \" and output the summarization.\"\n    ),\n)\n\nreal_profile = profile.create_profile()\n\nprint(f\"System Prompt Template: \\n{real_profile.get_system_prompt_template()}\")\nprint(\"#\" * 50)\nprint(f\"User Prompt Template: \\n{real_profile.get_user_prompt_template()}\")\n```\n\n----------------------------------------\n\nTITLE: Trace List Command Help Documentation\nDESCRIPTION: Detailed help documentation for the trace list command, showing all available options including filtering by trace ID, span ID, time range, and output format options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace list --help\n```\n\n----------------------------------------\n\nTITLE: Rendering Ollama Configuration Component in JSX/React\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render detailed configuration information for Ollama proxy LLM integration. The component displays documentation for all configuration parameters including model name, backend settings, provider details, and API connection settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/ollama_ollamadeploymodelparameters_d55be6.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"OllamaDeployModelParameters\",\n  \"description\": \"Ollama proxy LLM configuration.\",\n  \"documentationUrl\": \"https://ollama.com/library\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/ollama\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Ollama API.\",\n      \"defaultValue\": \"${env:OLLAMA_API_BASE:-http://localhost:11434}\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running TuGraph Docker Container\nDESCRIPTION: Commands to download and run the TuGraph graph database Docker image, which is required as the graph storage backend for Graph RAG. Sets up the container with necessary ports and configurations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/graph_rag_install.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull tugraph/tugraph-runtime-centos7:4.5.1\ndocker run -d -p 7070:7070  -p 7687:7687 -p 9090:9090 --name tugraph_demo tugraph/tugraph-runtime-centos7:latest lgraph_server -d run --enable_plugin true\n```\n\n----------------------------------------\n\nTITLE: Configuring Local GLM4 Model\nDESCRIPTION: TOML configuration snippet for setting up the local GLM4 model and embedding model in the DB-GPT configuration file.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\nname = \"THUDM/glm-4-9b-chat-hf\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n\n[[models.embeddings]]\nname = \"BAAI/bge-large-zh-v1.5\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parsing Productions for Parameterized Trim Operations\nDESCRIPTION: This snippet defines parsing productions for various forms of parameterized TRIM operations in SQL, including LEADING, TRAILING, and general TRIM syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_146\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    parameterized_trim : LEADING FROM bit_expr */\n\n/*! Production::    parameterized_trim : LEADING FROM expr */\n\n/*! Production::    parameterized_trim : LEADING bit_expr FROM bit_expr */\n\n/*! Production::    parameterized_trim : LEADING expr FROM expr */\n\n/*! Production::    parameterized_trim : TRAILING FROM bit_expr */\n\n/*! Production::    parameterized_trim : TRAILING FROM expr */\n\n/*! Production::    parameterized_trim : TRAILING bit_expr FROM bit_expr */\n\n/*! Production::    parameterized_trim : TRAILING expr FROM expr */\n\n/*! Production::    parameterized_trim : bit_expr */\n\n/*! Production::    parameterized_trim : bit_expr FROM bit_expr */\n\n/*! Production::    parameterized_trim : expr */\n\n/*! Production::    parameterized_trim : expr FROM expr */\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT Webserver with Local GLM4 Model\nDESCRIPTION: Command to start the DB-GPT webserver using the local GLM4 model configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-local-glm.toml\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parsing Productions for Password Management\nDESCRIPTION: This snippet defines parsing productions for password-related operations in SQL, including password functions and password policy parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_148\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    password : INTNUM */\n\n/*! Production::    password : NAME_OB */\n\n/*! Production::    password : STRING_VALUE */\n\n/*! Production::    password : unreserved_keyword */\n\n/*! Production::    passwordFunctionClause : OLD_PASSWORD LR_BRACKET functionArg RR_BRACKET */\n\n/*! Production::    passwordFunctionClause : PASSWORD LR_BRACKET functionArg RR_BRACKET */\n\n/*! Production::    password_parameter : password_parameter_type password_parameter_value */\n\n/*! Production::    password_parameter_type : FAILED_LOGIN_ATTEMPTS */\n\n/*! Production::    password_parameter_type : PASSWORD_LOCK_TIME */\n\n/*! Production::    password_parameter_type : PASSWORD_VERIFY_FUNCTION */\n\n/*! Production::    password_parameter_value : DEFAULT */\n\n/*! Production::    password_parameter_value : number_literal */\n\n/*! Production::    password_parameter_value : verify_function_name */\n\n/*! Production::    password_parameters : password_parameter */\n\n/*! Production::    password_parameters : password_parameters password_parameter */\n```\n\n----------------------------------------\n\nTITLE: Agent API Endpoints for DB-GPT\nDESCRIPTION: List of available Agent API endpoints in DB-GPT for managing and interacting with agents. These endpoints allow for updating, querying, installing, and uninstalling agents, as well as personal agent uploads.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/api.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napi/v1/agent/hub/update\napi/v1/agent/query\napi/v1/agent/my\napi/v1/agent/install\napi/v1/agent/uninstall\napi/v1/personal/agent/upload\n```\n\n----------------------------------------\n\nTITLE: Visualizing DAGs in Python\nDESCRIPTION: Shows how to visualize the created DAGs for better understanding of the workflow. The code demonstrates both standard visualization and Jupyter notebook display options for the DAG structure.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n```python\nload_schema_dag.visualize_dag()\nchat_data_dag.visualize_dag()\n```\n\nIf you execute the code in Jupyter Notebook, you can see the DAGs in the notebook.\n```python\ndisplay(load_schema_dag)\ndisplay(chat_data_dag)\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Unstreamify Operator Example in Bash\nDESCRIPTION: This snippet shows the command to run the Python script that demonstrates the UnstreamifyAbsOperator for summing numbers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.6_unstreamify_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/unstreamify_operator_sum_numbers.py\n```\n\n----------------------------------------\n\nTITLE: Datasource Providers Installation Commands\nDESCRIPTION: Markdown table showing supported datasource providers and their corresponding installation packages for DB-GPT integration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Provider    | Supported | Install Packages     |\n|-------------|-----------|----------------------|\n| MySQL       | â        | --extra datasource_mysql |\n| OceanBase   | â        |  |\n| ClickHouse  | â        | --extra datasource_clickhouse |\n| Hive        | â        | --extra datasource_hive |\n| MSSQL       | â        | --extra datasource_mssql |\n| PostgreSQL  | â        | --extra datasource_postgres |\n| ApacheDoris | â        |                      |\n| StarRocks   | â        | --extra datasource_starroks |\n| Spark       | â        | --extra datasource_spark |\n| Oracle      | â        |                      |\n```\n\n----------------------------------------\n\nTITLE: Summing Numbers with ReduceStreamOperator in Python\nDESCRIPTION: This comprehensive example demonstrates how to use ReduceStreamOperator to sum a stream of numbers. It includes a NumberProducerOperator to generate numbers, a MySumOperator to sum them, and a DAG to connect the operators.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.2_reduce_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, ReduceStreamOperator, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"Create a stream of numbers from 0 to `n-1`\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n            \nclass MySumOperator(ReduceStreamOperator[int, int]):\n    async def reduce(self, x: int, y: int) -> int:\n        return x + y\n\nwith DAG(\"sum_numbers_dag\") as dag:\n    task = NumberProducerOperator()\n    sum_task = MySumOperator()\n    task >> sum_task\n\no1 = asyncio.run(sum_task.call(call_data=5))\nif o1 == sum(range(5)):\n    print(f\"Success! n is 5, sum is {o1}\")\nelse:\n    print(\"Failed\")\no2 = asyncio.run(sum_task.call(call_data=10))\nif o2 == sum(range(10)):\n    print(f\"Success! n is 10, sum is {o2}\")\nelse:\n    print(\"Failed\")\n```\n\n----------------------------------------\n\nTITLE: Generating Prompts from Dynamic Profile\nDESCRIPTION: Demonstrates how to create a profile from the configuration and generate system and user prompts using the dynamic values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_dynamic.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreal_profile = profile.create_profile()\nsystem_prompt = real_profile.format_system_prompt(question=\"What can you do?\")\nuser_prompt = real_profile.format_user_prompt(question=\"What can you do?\")\nprint(f\"System Prompt: \\n{system_prompt}\")\nprint(\"#\" * 50)\nprint(f\"User Prompt: \\n{user_prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Running JSON Response Server\nDESCRIPTION: Command to start the HTTP server for the JSON response example.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.2_http_trigger_get.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/http_trigger_say_hello_json.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for AWEL DAG in Python\nDESCRIPTION: This Python code sets up a development environment for testing the DAG locally without starting the full dbgpt_server.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/get_started.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    if dag.leaf_nodes[0].dev_mode:\n        # Development mode, you can run the dag locally for debugging.\n        from dbgpt.core.awel import setup_dev_environment\n        setup_dev_environment([dag], port=5555)\n    else:\n        # Production mode, DB-GPT will automatically load and execute the current file after startup.\n        pass\n```\n\n----------------------------------------\n\nTITLE: Basic DB-GPT CLI Usage Command\nDESCRIPTION: Main command line interface showing available commands including install, knowledge, model, start, stop and trace options with their basic usage.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt --help\nAlready connect 'dbgpt'\nUsage: dbgpt [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --log-level TEXT  Log level\n  --version         Show the version and exit.\n  --help            Show this message and exit.\n\nCommands:\n  install    Install dependencies, plugins, etc.\n  knowledge  Knowledge command line tool\n  model      Clients that manage model serving\n  start      Start specific server.\n  stop       Stop specific server.\n  trace      Analyze and visualize trace spans.\n```\n\n----------------------------------------\n\nTITLE: Implementing BufferWindowGPTsAppMemoryConfig Component in React/JSX\nDESCRIPTION: Renders a ConfigDetail component that displays the BufferWindowGPTsAppMemoryConfig settings. The configuration controls buffer window memory by specifying how many conversation rounds to keep from the start and end of a conversation history.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/memory/config_bufferwindowgptsappmemoryconfig_c31071.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"BufferWindowGPTsAppMemoryConfig\",\n  \"description\": \"Buffer window memory configuration.\\n\\n    This configuration is used to control the buffer window memory.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"keep_start_rounds\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The number of start rounds to keep in memory\",\n      \"defaultValue\": \"0\"\n    },\n    {\n      \"name\": \"keep_end_rounds\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The number of end rounds to keep in memory\",\n      \"defaultValue\": \"0\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT with Local GPU Model\nDESCRIPTION: Command to run the DB-GPT Docker container with GPU support and locally mounted models. This setup requires GPU hardware and NVIDIA Container Toolkit.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ipc host --gpus all \\\n  -it --rm \\\n  -p 5670:5670 \\\n  -v ./dbgpt-local-gpu.toml:/app/configs/dbgpt-local-gpu.toml \\\n  -v ./models:/app/models \\\n  --name dbgpt \\\n  eosphorosai/dbgpt \\\n  dbgpt start webserver --config /app/configs/dbgpt-local-gpu.toml\n```\n\n----------------------------------------\n\nTITLE: Starting Docker-Compose Deployment with SiliconFlow API Key\nDESCRIPTION: Command to start the Docker-Compose deployment using a SiliconFlow API key environment variable\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker_compose.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSILICONFLOW_API_KEY=${SILICONFLOW_API_KEY} docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Privilege Level Productions\nDESCRIPTION: Grammar rules defining privilege level specifications in SQL statements\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_158\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    privilegeLevel : uid */\n/*! Production::    privilegeLevel : uid DOT STAR */\n/*! Production::    privilegeLevel : uid dottedId */\n```\n\n----------------------------------------\n\nTITLE: Successful Deployment Output\nDESCRIPTION: Example output showing successful creation of network and container startup\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker_compose.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[+] Running 3/3\n â Network dbgptnet              Created                                            0.0s \n â Container db-gpt-db-1         Started                                            0.2s \n â Container db-gpt-webserver-1  Started                                            0.2s \n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Profile Configuration in Python\nDESCRIPTION: Creates a ProfileConfig object with a dynamic name field using DynConfig. The name can be configured through environment variables with a default value of 'Aristotle'.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_dynamic.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ProfileConfig, DynConfig\n\nprofile: ProfileConfig = ProfileConfig(\n    # The name of the agent\n    name=DynConfig(\n        \"Aristotle\",\n       key=\"summary_profile_name\",\n       provider=\"env\"\n    ),\n    # The role of the agent\n    role=\"Summarizer\",\n)\n```\n\n----------------------------------------\n\nTITLE: Stream Chat Flow Using cURL\nDESCRIPTION: Example of using cURL to make a streaming chat request to a flow. Requires DBGPT_API_KEY and a valid flow ID.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nFLOW_ID={YOUR_FLOW_ID}\n\ncurl -X POST \"http://localhost:5670/api/v2/chat/completions\" \\\n    -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n    -H \"accept: application/json\" \\\n    -H \"Content-Type: application/json\" \\\n    -d \"{\\\"messages\\\":\\\"Hello\\\",\\\"model\\\":\\\"chatgpt_proxyllm\\\", \\\"chat_mode\\\": \\\"chat_flow\\\", \\\"chat_param\\\": \\\"$FLOW_ID\\\"}\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating Public URL for Website Access using Gradio in Python\nDESCRIPTION: This code snippet demonstrates how to use Gradio's networking module to create a public URL for accessing a website. It generates a secure token, sets up a tunnel on a specified local port, and prints the public URL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/install.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport secrets\nfrom gradio import networking\ntoken=secrets.token_urlsafe(32)\nlocal_port=5670\nurl = networking.setup_tunnel('0.0.0.0', local_port, token)\nprint(f'Public url: {url}')\ntime.sleep(60 * 60 * 24)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Calculator Tool in Python\nDESCRIPTION: A basic calculator tool that performs arithmetic operations (+, -, *, /) on two numbers. Uses the @tool decorator for integration with DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/tools.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@tool\ndef simple_calculator(first_number: int, second_number: int, operator: str) -> float:\n    \"\"\"Simple calculator tool. Just support +, -, *, /.\"\"\"\n    if isinstance(first_number, str):\n        first_number = int(first_number)\n    if isinstance(second_number, str):\n        second_number = int(second_number)\n    if operator == \"+\":\n        return first_number + second_number\n    elif operator == \"-\":\n        return first_number - second_number\n    elif operator == \"*\":\n        return first_number * second_number\n    elif operator == \"/\":\n        return first_number / second_number\n    else:\n        raise ValueError(f\"Invalid operator: {operator}\")\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server with OpenAI Proxy Configuration\nDESCRIPTION: This command starts the DB-GPT server using a specific configuration file for OpenAI proxy settings. It initializes the webserver for handling requests.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/clickhouse_install.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Visualization of LLM Configuration Relationships using Mermaid\nDESCRIPTION: A Mermaid diagram showing the relationships between HFLLMDeployModelParameters and various quantization configurations in the LLM module.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/overview.mdx#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    HFLLMDeployModelParameters -->|quantization| BitsandbytesQuantization\n    HFLLMDeployModelParameters -->|quantization| BitsandbytesQuantization8bits\n    HFLLMDeployModelParameters -->|quantization| BitsandbytesQuantization4bits\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install the dbgpt library with RAG support\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"dbgpt[rag]>=0.5.2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI LLM Client for Graph RAG\nDESCRIPTION: Python code to initialize the OpenAI LLM client for use with Graph RAG. This requires setting the OPENAI_API_KEY environment variable.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nllm_client = OpenAILLMClient()\n```\n\n----------------------------------------\n\nTITLE: Installing Qwen (Tongyi) Dependencies for DB-GPT\nDESCRIPTION: This snippet shows how to install the necessary dependency for using Qwen (Tongyi) as a proxy LLM with DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/More_proxyllms.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npip install dashscope\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT with Proxy Model\nDESCRIPTION: Command to run DB-GPT Docker container with SiliconFlow API key for using a proxy model. This deployment does not require a GPU environment.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -e SILICONFLOW_API_KEY=${SILICONFLOW_API_KEY} \\\n -p 5670:5670 --name dbgpt eosphorosai/dbgpt-openai\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for DB-GPT Docker Build Script\nDESCRIPTION: Command to show all available options and their descriptions for the DB-GPT Docker build script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --help\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Type Definitions\nDESCRIPTION: This snippet defines various types of SQL statements, including administration, DDL, DML, and transaction statements. It provides a high-level categorization of SQL commands.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_193\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sqlStatement : administrationStatement */\n\n/*! Production::    sqlStatement : ddlStatement */\n\n/*! Production::    sqlStatement : dmlStatement */\n\n/*! Production::    sqlStatement : emptyStatement */\n\n/*! Production::    sqlStatement : preparedStatement */\n\n/*! Production::    sqlStatement : replicationStatement */\n\n/*! Production::    sqlStatement : transactionStatement */\n\n/*! Production::    sqlStatement : utilityStatement */\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Packages to DB-GPT Docker Build\nDESCRIPTION: Command to keep the default extras and add more Python package extras to the DB-GPT Docker image build.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --add-extras \"storage_milvus,storage_elasticsearch,datasource_postgres\"\n```\n\n----------------------------------------\n\nTITLE: Defining Table Option Grammar Productions in SQL\nDESCRIPTION: These productions define various table options in SQL, including storage, compression, and performance-related settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_208\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    table_option : AUTO_INCREMENT opt_equal_mark int_or_decimal */\n\n/*! Production::    table_option : AUTO_INCREMENT_MODE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : AVG_ROW_LENGTH opt_equal_mark INTNUM */\n\n/*! Production::    table_option : BLOCK_SIZE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : CHECKSUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : COMMENT opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : COMPRESSION opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : DELAY_KEY_WRITE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : DISABLE ROW MOVEMENT */\n\n/*! Production::    table_option : DUPLICATE_SCOPE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : ENABLE ROW MOVEMENT */\n\n/*! Production::    table_option : ENABLE_EXTENDED_ROWID opt_equal_mark BOOL_VALUE */\n\n/*! Production::    table_option : ENGINE_ opt_equal_mark relation_name_or_string */\n\n/*! Production::    table_option : EXPIRE_INFO opt_equal_mark \"(\" bit_expr \")\" */\n\n/*! Production::    table_option : EXPIRE_INFO opt_equal_mark \"(\" expr \")\" */\n\n/*! Production::    table_option : LOCALITY opt_equal_mark locality_name opt_force */\n\n/*! Production::    table_option : MAX_USED_PART_ID opt_equal_mark INTNUM */\n\n/*! Production::    table_option : PCTFREE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n\n/*! Production::    table_option : PROGRESSIVE_MERGE_NUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : REPLICA_NUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : ROW_FORMAT opt_equal_mark row_format_option */\n\n/*! Production::    table_option : STORAGE_FORMAT_VERSION opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLEGROUP opt_equal_mark relation_name_or_string */\n\n/*! Production::    table_option : TABLESPACE tablespace */\n\n/*! Production::    table_option : TABLET_SIZE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLE_ID opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLE_MODE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : USE_BLOOM_FILTER opt_equal_mark BOOL_VALUE */\n\n/*! Production::    table_option : compress_option */\n\n/*! Production::    table_option : opt_default_mark COLLATE opt_equal_mark collation_name */\n\n/*! Production::    table_option : opt_default_mark charset_key opt_equal_mark charset_name */\n\n/*! Production::    table_option : parallel_option */\n\n/*! Production::    table_option : physical_attributes_option */\n\n/*! Production::    table_option : read_only_or_write */\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI LLM Client\nDESCRIPTION: Sets up the OpenAI LLM client for generating SQL queries from natural language.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nllm_client = OpenAILLMClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Space with cURL\nDESCRIPTION: Example of creating a new knowledge space using cURL commands. Shows how to make a POST request with required parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=\"dbgpt\"\n\ncurl --location --request POST 'http://localhost:5670/api/v2/serve/knowledge/spaces' \\\n--header 'Authorization: Bearer $DBGPT_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"desc\": \"for client space desc\", \"name\": \"test_space_2\", \"owner\": \"dbgpt\", \"vector_type\": \"Chroma\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining ModelAPIServerParameters Configuration in Python\nDESCRIPTION: This code snippet defines the ModelAPIServerParameters class with various optional parameters for configuring the Model API server. It includes settings for network, logging, tracing, controller connection, and processing options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/parameter_modelapiserverparameters_763bec.mdx#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nModelAPIServerParameters(host: Optional[str] = '0.0.0.0', port: Optional[int] = 8100, daemon: Optional[bool] = False, log: dbgpt.util.utils.LoggingParameters = <factory>, trace: Optional[dbgpt.util.tracer.tracer_impl.TracerParameters] = None, controller_addr: Optional[str] = 'http://127.0.0.1:8000', api_keys: Optional[str] = None, embedding_batch_size: Optional[int] = None, ignore_stop_exceeds_error: Optional[bool] = False)\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceWebParameters Configuration in Python\nDESCRIPTION: This code snippet defines the ServiceWebParameters configuration class with various parameters for setting up a web service. It includes options for host, port, database connection, model storage, logging, caching, and other service-specific settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/config_servicewebparameters_3ab7fd.mdx#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nServiceWebParameters(\n    host: str = '0.0.0.0',\n    port: int = 5670,\n    light: Optional[bool] = False,\n    controller_addr: Optional[str] = None,\n    database: dbgpt.datasource.parameter.BaseDatasourceParameters = <factory>,\n    model_storage: Optional[str] = None,\n    trace: Optional[dbgpt.util.tracer.tracer_impl.TracerParameters] = None,\n    log: Optional[dbgpt.util.utils.LoggingParameters] = None,\n    disable_alembic_upgrade: Optional[bool] = False,\n    db_ssl_verify: Optional[bool] = False,\n    default_thread_pool_size: Optional[int] = None,\n    remote_embedding: Optional[bool] = False,\n    remote_rerank: Optional[bool] = False,\n    awel_dirs: Optional[str] = None,\n    new_web_ui: bool = True,\n    model_cache: dbgpt.storage.cache.manager.ModelCacheParameters = <factory>,\n    embedding_model_max_seq_len: Optional[int] = 512\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Apps from DB-GPT API\nDESCRIPTION: This snippet shows how to retrieve a list of all apps. It includes examples in both cURL and Python, demonstrating how to send a GET request to the app listing endpoint.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/app.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\n\ncurl -X GET 'http://localhost:5670/api/v2/serve/apps' -H \"Authorization: Bearer $DBGPT_API_KEY\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.app import list_app\n\nDBGPT_API_KEY = \"dbgpt\"\napp_id = \"{your_app_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await list_app(client=client)\n```\n\n----------------------------------------\n\nTITLE: Verifying DB-GPT Model Chat Functionality\nDESCRIPTION: This command initiates an interactive chat session with the GLM-4-9b-chat model to verify its functionality.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt model chat --model_name glm-4-9b-chat\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom dbgpts App in Python\nDESCRIPTION: Python script to create a custom dbgpts app named 'simple_chat_app.py' using the AWEL framework, defining a DAG with HttpTrigger, RequestHandleOperator, LLMOperator, and MapOperator.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dbgpt._private.pydantic import BaseModel, Field\nfrom dbgpt.core import ModelMessage, ModelRequest\nfrom dbgpt.core.awel import DAG, HttpTrigger, MapOperator\nfrom dbgpt.model.proxy import OpenAILLMClient\nfrom dbgpt.model.operators import LLMOperator\n\n\nclass TriggerReqBody(BaseModel):\n    model: str = Field(..., description=\"Model name\")\n    messages: str = Field(..., description=\"User input\")\n\n\nclass RequestHandleOperator(MapOperator[TriggerReqBody, ModelRequest]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    async def map(self, input_value: TriggerReqBody) -> ModelRequest:\n        messages = [ModelMessage.build_human_message(input_value.messages)]\n        return ModelRequest.build_request(input_value.model, messages)\n\n\nwith DAG(\"dbgpts_simple_chat_app\") as dag:\n    # Receive http request and trigger dag to run.\n    trigger = HttpTrigger(\n        \"/dbgpts/simple_chat_app\", methods=\"POST\", request_body=TriggerReqBody\n    )\n    llm_client = OpenAILLMClient(\n        model_alias=\"gpt-3.5-turbo\",  # or other models, eg. \"gpt-4o\"\n        api_base=os.getenv(\"OPENAI_API_BASE\"),\n        api_key=os.getenv(\"OPENAI_API_KEY\"),\n    )\n    request_handle_task = RequestHandleOperator()\n    llm_task = LLMOperator(llm_client=llm_client)\n    model_parse_task = MapOperator(lambda out: out.text)\n    trigger >> request_handle_task >> llm_task >> model_parse_task\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Embedding Service\nDESCRIPTION: Connecting to a remote embedding API server\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\nembeddings = DefaultEmbeddingFactory.remote(\n  api_url=\"http://localhost:8100/api/v1/embeddings\",\n  api_key=\"{your_api_key}\",\n  model_name=\"text2vec\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Full-featured DB-GPT Docker Image\nDESCRIPTION: Command to build a CUDA-based DB-GPT Docker image with all available features, including components from all other modes plus embedding capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode full\n```\n\n----------------------------------------\n\nTITLE: Listing Available Models with cURL\nDESCRIPTION: cURL command to list all available models through the DB-GPT API server by calling the models endpoint with appropriate authorization headers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/OpenAI_SDK_call.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:8100/api/v1/models \\\n-H \"Authorization: Bearer EMPTY\" \\\n-H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs\nDESCRIPTION: Command to view and follow the logs of the DB-GPT webserver container\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker_compose.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs db-gpt-webserver-1 -f\n```\n\n----------------------------------------\n\nTITLE: Building Development DB-GPT with Milvus Support\nDESCRIPTION: Command to build a development version of DB-GPT with VLLM, Milvus vector store support, and a 'dev' image name suffix.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode vllm \\\n  --add-extras \"storage_milvus\" \\\n  --image-name-suffix dev\n```\n\n----------------------------------------\n\nTITLE: SQL Unreserved Keywords Declarations\nDESCRIPTION: A comprehensive list of unreserved SQL keywords defined as directives for a SQL parser. These keywords can be used as identifiers in SQL without requiring quotes, while still maintaining their special meaning in specific contexts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_220\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : PASSWORD_VERIFY_FUNCTION */\n```\n\n----------------------------------------\n\nTITLE: Creating an InputOperator with SimpleInputSource in Python\nDESCRIPTION: This snippet demonstrates how to create an InputOperator using a SimpleInputSource with static data in a DAG context.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, InputOperator, SimpleInputSource\n\nwith DAG(\"awel_input_operator\") as dag:\n    input_source = SimpleInputSource(data=\"Hello, World!\")\n    input_task = InputOperator(input_source=input_source)\n```\n\n----------------------------------------\n\nTITLE: Using Different CUDA Base Image for DB-GPT Build\nDESCRIPTION: Troubleshooting command to build DB-GPT with a different CUDA base image to resolve CUDA-related errors.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# Try building with a different CUDA base image\nbash docker/base/build_image.sh --base-image nvidia/cuda:12.1.0-devel-ubuntu22.04\n```\n\n----------------------------------------\n\nTITLE: Doubling Numbers with Custom MapOperator in Python\nDESCRIPTION: This code snippet defines a DoubleNumberOperator that doubles input integers. It demonstrates creating a custom MapOperator, using it within a DAG, and testing it with asyncio.run().\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.1_map_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, MapOperator\n\nclass DoubleNumberOperator(MapOperator[int, int]):\n    async def map(self, x: int) -> int:\n        print(f\"Received {x}, returning {x * 2}\")\n        return x * 2\n\nwith DAG(\"awel_double_number\") as dag:\n    task = DoubleNumberOperator()  \nassert asyncio.run(task.call(2)) == 4\n```\n\n----------------------------------------\n\nTITLE: Chat Command Help Documentation\nDESCRIPTION: Command to display help information for the chat trace functionality, showing available options and their descriptions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace chat --help\n```\n\n----------------------------------------\n\nTITLE: Listing Remote AWEL Workflows in DB-GPT\nDESCRIPTION: This command lists all available AWEL sample processes in the remote repository. It displays the repository, type, and name of each workflow.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/app/data_analysis_app_develop.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt app list-remote\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in Environment Configuration File\nDESCRIPTION: Configuration example showing how to set API keys in a .env file. This allows for separation of credentials from application code, improving security and configurability.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/introduction.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAPI_KEYS=dbgpt\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Storage in DB-GPT\nDESCRIPTION: TOML configuration for setting up Elasticsearch connection parameters in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/bm25_rag_install.md#2025-04-09_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rag.storage]\n[rag.storage.full_text]\ntype = \"ElasticSearch\"\nuri = \"127.0.0.1\"\nport = \"9200\"\n```\n\n----------------------------------------\n\nTITLE: Implementing HttpTrigger for POST Requests in Python\nDESCRIPTION: This snippet defines an AWEL DAG with an HttpTrigger that handles POST requests. It uses a Pydantic model for request body validation and a MapOperator to generate a greeting message based on the input.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.3_http_trigger_post.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt._private.pydantic import BaseModel, Field\nfrom dbgpt.core.awel import DAG, HttpTrigger, MapOperator, setup_dev_environment\n\nclass TriggerReqBody(BaseModel):\n    name: str = Field(..., description=\"User name\")\n    age: int = Field(18, description=\"User age\")\n\nwith DAG(\"awel_say_hello_post\") as dag:\n    trigger_task = HttpTrigger(\n        endpoint=\"/awel_tutorial/say_hello_post\", \n        methods=\"POST\", \n        request_body=TriggerReqBody,\n        status_code=200\n    )\n    task = MapOperator(\n        map_function=lambda x: {\"message\": f\"Hello, {x.name}! You are {x.age} years old.\"}\n    )\n    trigger_task >> task\n\nsetup_dev_environment([dag], port=5555)\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT ClickHouse Datasource Dependencies\nDESCRIPTION: This command installs the necessary packages for using ClickHouse as a datasource in DB-GPT, including base dependencies, ClickHouse datasource, RAG, ChromaDB storage, and DBGPTs.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/clickhouse_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"datasource_clickhouse\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Rendering HookConfig Documentation Component in JSX\nDESCRIPTION: This code renders a ConfigDetail component that displays documentation for the HookConfig configuration. It includes the configuration name, description, and parameters such as path, init_params, params, and enabled flag.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/manager_hookconfig_d9a481.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"HookConfig\",\n  \"description\": \"Hook configuration.\\n\\n    You can define a hook configuration with a path and optional parameters.\\n    It will be used to dynamically load and execute a hook function or a callable\\n    object.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"path\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Hook path, it can be a class path or a function path. eg: 'dbgpt.config.hooks.env_var_hook'\"\n    },\n    {\n      \"name\": \"init_params\",\n      \"type\": \"object\",\n      \"required\": false,\n      \"description\": \"Hook init params to pass to the hook constructor(Just for class hook), must be key-value pairs\",\n      \"defaultValue\": \"{}\"\n    },\n    {\n      \"name\": \"params\",\n      \"type\": \"object\",\n      \"required\": false,\n      \"description\": \"Hook params to pass to the hook, must be key-value pairs\",\n      \"defaultValue\": \"{}\"\n    },\n    {\n      \"name\": \"enabled\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the hook is enabled, default is True\",\n      \"defaultValue\": \"True\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Converting LLM Text Streams to Uppercase with TransformStreamAbsOperator\nDESCRIPTION: Example showing how to transform a streaming LLM output by converting text chunks to uppercase. This demonstrates text transformation on streaming API responses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# LLM çæµå¼ææ¬è½¬å¤§å\n\n# æ¨¡æLLMæµå¼è¾åº\nclass MockLLMService(StreamifyAbsOperator[str, str]):\n    def __init__(self, **kwargs):\n        self.mock_data = [\"Hello\", \" \", \"world\", \"!\"]\n        super().__init__(**kwargs)\n        \n    async def streamify(self, user_input: str) -> AsyncIterator[str]:\n        for token in self.mock_data:\n            yield token\n\n# å°ææ¬è½¬æ¢ä¸ºå¤§å\nclass UpperCaseOperator(TransformStreamAbsOperator[str, str]):\n    async def transform_stream(self, it: AsyncIterator[str]) -> AsyncIterator[str]:\n        async for token in it:\n            yield token.upper()\n\n# ä½¿ç¨ç¤ºä¾\nwith DAG(\"text_transform_dag\") as dag:\n    llm_task = MockLLMService()\n    upper_task = UpperCaseOperator()\n    llm_task >> upper_task\n\nasync for text in await upper_task.call_stream(\"Hi\"):\n    print(text, end=\"\")\n```\n\n----------------------------------------\n\nTITLE: Performing Chat Completions with cURL\nDESCRIPTION: cURL command to perform a chat completion request through the DB-GPT API server, specifying the model (glm-4-9b-chat) and a simple user message.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/OpenAI_SDK_call.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:8100/api/v1/chat/completions \\\n-H \"Authorization: Bearer EMPTY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"model\": \"glm-4-9b-chat\", \"messages\": [{\"role\": \"user\", \"content\": \"hello\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Building Enterprise DB-GPT with PostgreSQL and Elasticsearch\nDESCRIPTION: Complex command to build a full-featured enterprise version of DB-GPT with PostgreSQL and Elasticsearch support, custom image suffix, specific Python version, and disabled example loading.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode full \\\n  --add-extras \"storage_elasticsearch,datasource_postgres\" \\\n  --image-name-suffix enterprise \\\n  --python-version 3.10 \\\n  --load-examples false\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Command Line Tools\nDESCRIPTION: This snippet shows how to install the DB-GPT project to use the 'dbgpt' command. It can be installed using pip or run as a Python script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install -e \".[default]\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python pilot/scripts/cli_scripts.py\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TABLE Production in MySQL\nDESCRIPTION: This production rule defines the syntax for the ALTER TABLE statement in MySQL, including optional inline actions, IGNORE keyword, and alter specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alterTable : ALTER opt_intimeAction opt_IGNORE TABLE tableName opt_alterSpecifications opt_partitionDefinitions */\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Model Controller\nDESCRIPTION: This command starts the Model Controller, which manages the model workers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ dbgpt start controller\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER INDEX Productions in MySQL\nDESCRIPTION: These production rules define various ALTER INDEX operations, including adding primary keys, unique constraints, and spatial indexes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_index_option : ADD PRIMARY KEY \"(\" column_name_list \")\" opt_index_option_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_index_option : ADD UNIQUE opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_index_option : ADD SPATIAL opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n```\n\n----------------------------------------\n\nTITLE: Using SimpleInputSource with InputOperator\nDESCRIPTION: Example showing how to use InputOperator with a SimpleInputSource to provide fixed data to a workflow. The source provides a constant string value to the downstream task.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# 1. SimpleInputSource - åºå®æ°æ®æº\n\n# åºå®æ°æ®ç¤ºä¾\nwith DAG(\"simple_input_dag\") as dag:\n    input_source = SimpleInputSource(data=\"Hello, World!\")\n    input_task = InputOperator(input_source=input_source)\n    \n    print_task = MapOperator(map_function=lambda x: print(x))\n    input_task >> print_task\n\nawait print_task.call()\n```\n\n----------------------------------------\n\nTITLE: Markdown Links for DB-GPT Applications\nDESCRIPTION: List of markdown links to different chat application documentation pages in DB-GPT\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/apps/app_explore.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Chat Excel](chat_excel.md)\n- Chat Normal\n- [Chat DB](chat_db.md)\n- [Chat DashBoard](chat_dashboard.md)\n- [Chat Data](chat_data.md)\n- [Chat Knowledge Base](chat_knowledge.md)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic JoinOperator in Python\nDESCRIPTION: Basic example of creating a JoinOperator with a combine function that adds two values together using the AWEL DAG framework.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.3_join_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, JoinOperator\n\nwith DAG(\"awel_join_operator\") as dag:\n    task = JoinOperator(combine_function=lambda x, y: x + y)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Custom Agent\nDESCRIPTION: Basic implementation of a custom agent by inheriting from the ConversableAgent class without any additional customization.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ConversableAgent\n\nclass MySummarizerAgent(ConversableAgent):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Agent with Memory Handling in Python\nDESCRIPTION: This code defines a JoyAgent class that inherits from ConversableAgent and overrides the read_memories and write_memories methods to customize memory handling. It includes a custom profile configuration and memory templates.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/memory.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom dbgpt.agent import (\n    ConversableAgent,\n    AgentMemoryFragment,\n    ProfileConfig,\n    BlankAction,\n    ActionOutput,\n)\n\nwrite_memory_template = \"\"\"\n{% if question %}user: {{ question }} {% endif %}\n{% if thought %}assistant: {{ thought }} {% endif %}\n\"\"\"\n\n\nclass JoyAgent(ConversableAgent):\n    profile: ProfileConfig = ProfileConfig(\n        name=\"Joy\",\n        role=\"Comedians\",\n        write_memory_template=write_memory_template,\n    )\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._init_actions([BlankAction])\n\n    async def read_memories(\n        self,\n        question: str,\n    ) -> str:\n        \"\"\"Read the memories from the memory.\"\"\"\n        memories = await self.memory.read(observation=question)\n        recent_messages = [m.raw_observation for m in memories]\n        # Merge the recent messages.\n        return \"\".join(recent_messages)\n\n    async def write_memories(\n        self,\n        question: str,\n        ai_message: str,\n        action_output: Optional[ActionOutput] = None,\n        check_pass: bool = True,\n        check_fail_reason: Optional[str] = None,\n    ) -> None:\n        \"\"\"Write the memories to the memory.\n\n        We suggest you to override this method to save the conversation to memory\n        according to your needs.\n\n        Args:\n            question(str): The question received.\n            ai_message(str): The AI message, LLM output.\n            action_output(ActionOutput): The action output.\n            check_pass(bool): Whether the check pass.\n            check_fail_reason(str): The check fail reason.\n        \"\"\"\n        if not action_output:\n            raise ValueError(\"Action output is required to save to memory.\")\n\n        mem_thoughts = action_output.thoughts or ai_message\n        memory_map = {\n            \"question\": question,\n            \"thought\": mem_thoughts,\n        }\n        # This is the template to write the memory.\n        # It configured in the agent's profile.\n        write_memory_template = self.write_memory_template\n        memory_content: str = self._render_template(write_memory_template, **memory_map)\n        fragment = AgentMemoryFragment(memory_content)\n        await self.memory.write(fragment)\n```\n\n----------------------------------------\n\nTITLE: Example of Starting the API Server\nDESCRIPTION: This example demonstrates the output when starting the API server with the dbgpt start apiserver command. The server initializes components and starts listening on the default port 8100.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt start apiserver\n\n    Already connect 'dbgpt'\n    2023-12-07 14:35:21 B-4TMH9N3X-2120.local pilot.component[95201] INFO Register component with name dbgpt_model_registry and instance: <pilot.model.cluster.controller.controller.ModelRegistryClient object at 0x28f4e0c70>\n    2023-12-07 14:35:21 B-4TMH9N3X-2120.local pilot.component[95201] INFO Register component with name dbgpt_worker_manager_factory and instance: <pilot.model.cluster.worker.manager._DefaultWorkerManagerFactory object at 0x28f4e2110>\n    2023-12-07 14:35:21 B-4TMH9N3X-2120.local pilot.component[95201] INFO Register component with name dbgpt_model_api_server and instance: <pilot.model.cluster.apiserver.api.APIServer object at 0x28f4e2170>\n    INFO:     Started server process [95201]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\n    INFO:     Uvicorn running on http://0.0.0.0:8100 (Press CTRL+C to quit)\n    INFO:     127.0.0.1:56638 - \"GET /docs HTTP/1.1\" 200 OK\n    INFO:     127.0.0.1:56665 - \"GET /openapi.json HTTP/1.1\" 200 OK\n    ^CINFO:     Shutting down\n    INFO:     Waiting for application shutdown.\n    INFO:     Application shutdown complete.\n    INFO:     Finished server process [95201]\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT Webserver with OpenAI Proxy\nDESCRIPTION: Commands to start the DB-GPT webserver using the OpenAI proxy configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-proxy-openai.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database for DB-GPT\nDESCRIPTION: TOML configuration snippet for setting up SQLite as the database for DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[service.web.database]\ntype = \"sqlite\"\npath = \"pilot/meta_data/dbgpt.db\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Weaviate Vector Store Parameters using JSX Component\nDESCRIPTION: MDX component configuration that defines the Weaviate vector store parameters including authentication credentials, server URL, and persistence settings. Used to document the WeaviateVectorConfig configuration options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/vector_store/weaviate_store_weaviatevectorconfig_093ce3.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"WeaviateVectorConfig\",\n  \"description\": \"Weaviate vector config.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The user of vector store, if not set, will use the default user.\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The password of vector store, if not set, will use the default password.\"\n    },\n    {\n      \"name\": \"weaviate_url\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\"\n    },\n    {\n      \"name\": \"persist_path\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Model Evaluation Configuration\nDESCRIPTION: Setting up evaluation arguments and running accuracy assessment on test datasets.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/dbgpt_hub.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nevaluate_args =  {\n            \"input\": \"./dbgpt_hub/output/pred/pred_sql_dev_skeleton.sql\",\n            \"gold\": \"./dbgpt_hub/data/eval_data/gold.txt\",\n            \"gold_natsql\": \"./dbgpt_hub/data/eval_data/gold_natsql2sql.txt\",\n            \"db\": \"./dbgpt_hub/data/spider/database\",\n            \"table\": \"./dbgpt_hub/data/eval_data/tables.json\",\n            \"table_natsql\": \"./dbgpt_hub/data/eval_data/tables_for_natsql2sql.json\",\n            \"etype\": \"exec\",\n            \"plug_value\": True,\n            \"keep_distict\": False,\n            \"progress_bar_for_each_datapoint\": False,\n            \"natsql\": False,\n}\nstart_evaluate(evaluate_args)\n```\n\n----------------------------------------\n\nTITLE: Configuring vLLM Inference in DB-GPT\nDESCRIPTION: Sample configuration for the .env file to enable vLLM inference, specifying the LLM model and model type settings with an optional GPU memory utilization parameter.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/vLLM_inference.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nLLM_MODEL=glm-4-9b-chat\nMODEL_TYPE=vllm\n# modify the following configuration if you possess GPU resources\n# gpu_memory_utilization=0.8\n```\n\n----------------------------------------\n\nTITLE: Overriding Environment Variables for DB-GPT Docker Build\nDESCRIPTION: Command to replace the default environment variables with custom ones, particularly setting CMAKE_ARGS for Llama-cpp compilation with CUDA support.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --env-vars \"CMAKE_ARGS=\\\"$-DGGML_CUDA=ON -DLLAMA_CUBLAS=ON\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Viewing DB-GPT Webserver Logs\nDESCRIPTION: This command allows viewing the logs of the DB-GPT webserver container.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker logs db-gpt-webserver-1 -f\n```\n\n----------------------------------------\n\nTITLE: MySQL Global Hint Definitions\nDESCRIPTION: Defines global hints for query optimization including parallel processing, statistics gathering, and execution parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_71\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    global_hint : APPEND */\n/*! Production::    global_hint : DOP \"(\" INTNUM \",\" INTNUM \")\" */\n/*! Production::    global_hint : QUERY_TIMEOUT \"(\" INTNUM \")\" */\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Reranking Model Worker\nDESCRIPTION: This command starts a reranking model worker, specifying the worker type, model path, model name, port, and controller address.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndbgpt start worker --worker_type text2vec \\\n--rerank \\\n--model_path /app/models/bge-reranker-base \\\n--model_name bge-reranker-base \\\n--port 8004 \\\n--controller_addr http://127.0.0.1:8000\n```\n\n----------------------------------------\n\nTITLE: Creating Odd and Even Number Processors in Python\nDESCRIPTION: Implements two custom MapOperators to handle odd and even numbers respectively. Each operator formats a string message based on the input integer value.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass OddOperator(MapOperator[int, str]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    async def map(self, x: int) -> str:\n        print(f\"{x} is odd\")\n        return f\"{x} is odd\"\n\n\nclass EvenOperator(MapOperator[int, str]):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    async def map(self, x: int) -> str:\n        print(f\"{x} is even\")\n        return f\"{x} is even\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Financial Report Dataset from ModelScope\nDESCRIPTION: Optional command to download a financial report dataset from ModelScope for testing and demonstration purposes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/apps/chat_financial_report.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone http://www.modelscope.cn/datasets/modelscope/chatglm_llm_fintech_raw_dataset.git\n```\n\n----------------------------------------\n\nTITLE: Rendering OceanBase Configuration with React Component\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render the configuration details for OceanBase vector store. It includes parameters such as user credentials, host, port, and database settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/vector_store/oceanbase_store_oceanbaseconfig_220e36.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"OceanBaseConfig\",\n  \"description\": \"OceanBase vector store config.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The user of vector store, if not set, will use the default user.\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The password of vector store, if not set, will use the default password.\"\n    },\n    {\n      \"name\": \"ob_host\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The host of oceanbase, if not set, will use the default host.\"\n    },\n    {\n      \"name\": \"ob_port\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The port of oceanbase, if not set, will use the default port.\"\n    },\n    {\n      \"name\": \"ob_user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The user of oceanbase, if not set, will use the default user.\"\n    },\n    {\n      \"name\": \"ob_password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The password of oceanbase, if not set, will use the default password\"\n    },\n    {\n      \"name\": \"ob_database\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The database for vector tables, if not set, will use the default database.\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Creating an Evaluation with Curl\nDESCRIPTION: Example of how to create an evaluation using curl, showing a POST request to the evaluation endpoint with authentication and a JSON payload for a retrieval scenario.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/evaluation.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nSPACE_ID={YOUR_SPACE_ID}\n\ncurl -X POST \"http://localhost:5670/api/v2/serve/evaluate/evaluation\" \n-H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n-H \"accept: application/json\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"scene_key\": \"recall\",\n  \"scene_value\":147,\n  \"context\":{\"top_k\":5},\n  \"sys_code\":\"xx\",\n  \"evaluate_metrics\":[\"RetrieverHitRateMetric\",\"RetrieverMRRMetric\",\"RetrieverSimilarityMetric\"],\n  \"datasets\": [{\n            \"query\": \"what awel talked about\",\n            \"doc_name\":\"awel.md\"\n        }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server\nDESCRIPTION: Command to start the DB-GPT server using Python\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/ollama.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython dbgpt/app/dbgpt_server.py\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL Database Connector in Python\nDESCRIPTION: This code creates a MySQL database connector by providing the necessary connection information such as host, port, user, password, and database name.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/database.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.datasource.rdbms.conn_mysql import MySQLConnector\n\nconnector = MySQLConnector.from_uri_db(\n    host=\"localhost\",\n    port=3307,\n    user=\"root\",\n    pwd=\"********\",\n    db_name=\"user_manager\",\n    engine_args={\"connect_args\": {\"charset\": \"utf8mb4\"}},\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading DB-GPT Source Code\nDESCRIPTION: Command to clone the DB-GPT repository from GitHub.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/eosphoros-ai/DB-GPT.git\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection Parameters in JSX\nDESCRIPTION: A JSX component that defines and documents all PostgreSQL connection parameters for DB-GPT. Includes required parameters like host, port, user, and database name, as well as optional parameters for connection pooling and authentication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_postgresql_postgresqlparameters_22efa5.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"PostgreSQLParameters\",\n  \"description\": \"Powerful open-source relational database with extensibility and SQL standards.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database host, e.g., localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Database port, e.g., 3306\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database user to connect\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database name\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name for postgres, default is postgresql+psycopg2.\",\n      \"defaultValue\": \"postgresql+psycopg2\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"pool_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool size, default 5\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"max_overflow\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Max overflow connections, default 10\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"pool_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool timeout, default 30\",\n      \"defaultValue\": \"30\"\n    },\n    {\n      \"name\": \"pool_recycle\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool recycle, default 3600\",\n      \"defaultValue\": \"3600\"\n    },\n    {\n      \"name\": \"pool_pre_ping\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Connection pool pre ping, default True\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"schema\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database schema, defaults to 'public'\",\n      \"defaultValue\": \"public\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Python Package\nDESCRIPTION: Command to install the Ollama Python package using pip\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/ollama.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install ollama\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to DB-GPT Docker Build\nDESCRIPTION: Command to add additional environment variables to a specific installation mode (llama-cpp in this case) for the DB-GPT Docker build.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode llama-cpp --add-env-vars \"FORCE_CMAKE=1\"\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Webserver in Light Mode\nDESCRIPTION: This command starts the DB-GPT webserver in light mode, which means not starting the embedded model service.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndbgpt start webserver --light\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Productions\nDESCRIPTION: Grammar rules defining syntax for INSERT statements and value lists\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_79\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    insert_vals : insert_vals \",\" expr_or_default */\n/*! Production::    insert_vals_list : \"(\" insert_vals \")\" */\n/*! Production::    insert_vals_list : insert_vals_list \",\" \"(\" insert_vals \")\" */\n/*! Production::    insert_with_opt_hint : INSERT */\n/*! Production::    insert_with_opt_hint : INSERT_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: Starting GLM-4-9B-Chat Model Worker\nDESCRIPTION: Bash command to start a DB-GPT model worker for the GLM-4-9B-Chat model. The worker registers with multiple controllers for high availability.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster_ha.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt start worker --model_name glm-4-9b-chat \\\n--model_path /app/models/glm-4-9b-chat \\\n--port 8001 \\\n--controller_addr \"http://server1:8000,http://server2:8000\"\n```\n\n----------------------------------------\n\nTITLE: Lock Table Productions\nDESCRIPTION: Grammar rules defining table locking syntax including READ/WRITE locks and lock types\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_84\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    lockTables : LOCK TABLES lockTableElements */\n\n/*! Production::    lockType : DEFAULT */\n\n/*! Production::    lockType : EXCLUSIVE */\n\n/*! Production::    lockType : NONE */\n\n/*! Production::    lockType : SHARED */\n```\n\n----------------------------------------\n\nTITLE: Implementing Merge Operator for Combining Branch Results in Python\nDESCRIPTION: Creates a custom JoinOperator that combines results from different branches of the workflow. It merges outputs from the odd and even branches, prioritizing non-empty data.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass MergeOperator(JoinOperator[str]):\n    def __init__(self, **kwargs):\n        super().__init__(combine_function=self.merge_func, **kwargs)\n\n    async def merge_func(self, odd: str, even: str) -> str:\n        return odd if not is_empty_data(odd) else even\n```\n\n----------------------------------------\n\nTITLE: Rendering ChatNormalConfig Configuration in JSX\nDESCRIPTION: This code snippet uses a custom ConfigDetail component to render the configuration details for ChatNormalConfig. It includes parameters for LLM generation settings, app naming, and memory configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/config_chatnormalconfig_83c865.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ChatNormalConfig\",\n  \"description\": \"Chat Normal Configuration\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The top k for LLM generation\"\n    },\n    {\n      \"name\": \"top_p\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The top p for LLM generation\"\n    },\n    {\n      \"name\": \"temperature\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The temperature for LLM generation\"\n    },\n    {\n      \"name\": \"max_new_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max new tokens for LLM generation\"\n    },\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The name of your app\"\n    },\n    {\n      \"name\": \"memory\",\n      \"type\": \"BaseGPTsAppMemoryConfig\",\n      \"required\": false,\n      \"description\": \"Memory configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"window configuration\",\n          \"url\": \"../memory/config_bufferwindowgptsappmemoryconfig_c31071\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"token configuration\",\n          \"url\": \"../memory/config_tokenbuffergptsappmemoryconfig_6a2000\"\n        }\n      ],\n      \"defaultValue\": \"TokenBufferGPTsAppMemoryConfig\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Viewing Chat Details by Trace ID\nDESCRIPTION: Command to retrieve specific chat trace details using a trace ID, showing conversation parameters and model outputs.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace chat --hide_run_params --trace_id ec30d733-7b35-4d61-b02e-2832fd2e29ff\n```\n\n----------------------------------------\n\nTITLE: Creating Custom InputSource for InputOperator\nDESCRIPTION: Example showing how to implement a custom InputSource by extending BaseInputSource. The custom source adds a prefix to the input data, demonstrating how to create specialized data sources.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# 3. èªå®ä¹ InputSource - å®ç°èªå®ä¹æ°æ®è¯»å\nfrom dbgpt.core.awel import BaseInputSource, TaskContext\nfrom dbgpt.core.awel.task.base import EMPTY_DATA\n\nclass MyInputSource(BaseInputSource):\n    def __init__(self, prefix: str):\n        self.prefix = prefix\n        super().__init__()\n    \n    def _read_data(self, ctx: TaskContext) -> str:\n        # è·å call_data å¹¶æ·»å åç¼\n        call_data = ctx.call_data\n        data = call_data.get(\"data\", EMPTY_DATA) if call_data else EMPTY_DATA\n        if is_empty_data(data):\n            raise ValueError(\"No call data for current SimpleCallDataInputSource\")\n            \n        return f\"{self.prefix}: {data}\"\n\n# ä½¿ç¨èªå®ä¹æ°æ®æº\nwith DAG(\"custom_input_dag\") as dag:\n    input_source = MyInputSource(prefix=\"Message\")\n    input_task = InputOperator(input_source=input_source)\n    print_task = MapOperator(map_function=lambda x: print(x))\n    input_task >> print_task\n\n# è¿è¡\nawait print_task.call(\"Hello!\")\n# è¾åº: Message: Hello!\n```\n\n----------------------------------------\n\nTITLE: Alternative Command for Starting DB-GPT Webserver\nDESCRIPTION: This is an alternative command to start the DB-GPT webserver, using the same configuration file as the previous command. It provides users with flexibility in how they initiate the server.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/postgres_install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Listing Available DB-GPT Installation Modes\nDESCRIPTION: Command to display all available installation modes and their configurations for the DB-GPT Docker build script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --list-modes\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Text2Vec Embedding Model\nDESCRIPTION: Configures a local text2vec embedding model for enhanced short-term memory. Requires a local path to the model files.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/short_term_memory.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\nembeddings = DefaultEmbeddingFactory.default(\"/data/models/text2vec-large-chinese\")\n```\n\n----------------------------------------\n\nTITLE: Get Flow Using cURL\nDESCRIPTION: Example of using cURL to retrieve a flow by its ID. Requires DBGPT_API_KEY and a valid flow ID.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nFLOW_ID={YOUR_FLOW_ID}\n\ncurl -X GET \"http://localhost:5670/api/v2/serve/awel/flows/$FLOW_ID\" -H \"Authorization: Bearer $DBGPT_API_KEY\"\n\n```\n\n----------------------------------------\n\nTITLE: Rendering MSSQL Configuration Parameters in React\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render a detailed configuration object for MSSQL database connection parameters. It includes settings for host, port, user, database, driver, password, and connection pool properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_mssql_mssqlparameters_d79d1c.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"MSSQLParameters\",\n  \"description\": \"Powerful, scalable, secure relational database system by Microsoft.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database host, e.g., localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Database port, e.g., 3306\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database user to connect\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database name\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name for MSSQL, default is mssql+pymssql.\",\n      \"defaultValue\": \"mssql+pymssql\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"pool_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool size, default 5\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"max_overflow\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Max overflow connections, default 10\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"pool_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool timeout, default 30\",\n      \"defaultValue\": \"30\"\n    },\n    {\n      \"name\": \"pool_recycle\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool recycle, default 3600\",\n      \"defaultValue\": \"3600\"\n    },\n    {\n      \"name\": \"pool_pre_ping\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Connection pool pre ping, default True\",\n      \"defaultValue\": \"True\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Viewing Call Tree by Trace ID\nDESCRIPTION: Command to view the detailed operation call tree for a specific trace, showing the hierarchical flow of operations with timing information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace chat --help\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server\nDESCRIPTION: Command to start the DB-GPT server with llama.cpp integration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/Llamacpp_server.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython dbgpt/app/dbgpt_server.py\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Extras for DB-GPT Docker Build\nDESCRIPTION: Command to completely replace the default extras with a custom selection of Python package extras for the DB-GPT Docker image.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --extras \"base,proxy_openai,rag,storage_chromadb\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for OpenAI Dependencies\nDESCRIPTION: Bash command to build a Docker image for DB-GPT that includes only OpenAI dependencies, used for deploying a high availability cluster with Docker Compose.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster_ha.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbash ./docker/base/build_proxy_image.sh --pip-index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar for Table and Query Modifiers\nDESCRIPTION: These productions define optional modifiers for SQL statements, including table options, user specifications, and update clauses. They provide flexibility in constructing complex SQL queries and data manipulation statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_92\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_flushTableOption : %epsilon */\n\n/*! Production::    opt_flushTableOption : flushTableOption */\n\n/*! Production::    opt_forUser : %epsilon */\n\n/*! Production::    opt_forUser : FOR userName */\n\n/*! Production::    opt_for_each_row : %epsilon */\n\n/*! Production::    opt_for_each_row : FOR EACH ROW */\n\n/*! Production::    opt_for_grant_user : FOR CURRENT_USER \"(\" \")\" */\n\n/*! Production::    opt_for_grant_user : FOR CURRENT_USER */\n\n/*! Production::    opt_for_grant_user : opt_for_user */\n\n/*! Production::    opt_for_update : %epsilon */\n\n/*! Production::    opt_for_update : FOR UPDATE opt_for_update_wait */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Dependencies with Pip\nDESCRIPTION: This command installs the default dependencies for DB-GPT using pip in editable mode.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[default]\"\n```\n\n----------------------------------------\n\nTITLE: Constructing AWEL DAG Pipeline in Python\nDESCRIPTION: This code creates a DAG with two nodes: an HttpTrigger and the custom RequestHandleOperator, linking them together to form the workflow.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/get_started.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith DAG(\"simple_dag_example\") as dag:\n    trigger = HttpTrigger(\"/examples/hello\", request_body=TriggerReqBody)\n    map_node = RequestHandleOperator()\n    trigger >> map_node\n```\n\n----------------------------------------\n\nTITLE: Rendering RagParameters Configuration in JSX\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render the configuration options for RagParameters. It includes a detailed schema with various parameters for controlling RAG behavior, knowledge graph operations, and search settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/config_ragparameters_7483b2.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"RagParameters\",\n  \"description\": \"Rag configuration.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"chunk_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Whether to verify the SSL certificate of the database\",\n      \"defaultValue\": \"500\"\n    },\n    {\n      \"name\": \"chunk_overlap\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The default thread pool size, If None, use default config of python thread pool\",\n      \"defaultValue\": \"50\"\n    },\n    {\n      \"name\": \"similarity_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge search top k\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"similarity_score_threshold\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"knowledge search top similarity score\",\n      \"defaultValue\": \"0.0\"\n    },\n    {\n      \"name\": \"query_rewrite\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"knowledge search rewrite\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"max_chunks_once_load\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge max chunks once load\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"max_threads\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge max load thread\",\n      \"defaultValue\": \"1\"\n    },\n    {\n      \"name\": \"rerank_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge rerank top k\",\n      \"defaultValue\": \"3\"\n    },\n    {\n      \"name\": \"storage\",\n      \"type\": \"StorageConfig\",\n      \"required\": false,\n      \"description\": \"Storage configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"storageconfig configuration\",\n          \"url\": \"config_storageconfig_028579\"\n        }\n      ],\n      \"defaultValue\": \"StorageConfig\"\n    },\n    {\n      \"name\": \"knowledge_graph_chunk_search_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge graph search top k\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"kg_enable_summary\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"graph community summary enabled\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"llm_model\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"kg extract llm model\"\n    },\n    {\n      \"name\": \"kg_extract_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"kg extract top k\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"kg_extract_score_threshold\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"kg extract score threshold\",\n      \"defaultValue\": \"0.3\"\n    },\n    {\n      \"name\": \"kg_community_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"kg community top k\",\n      \"defaultValue\": \"50\"\n    },\n    {\n      \"name\": \"kg_community_score_threshold\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"kg_community_score_threshold\",\n      \"defaultValue\": \"0.3\"\n    },\n    {\n      \"name\": \"kg_triplet_graph_enabled\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"kg_triplet_graph_enabled\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"kg_document_graph_enabled\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"kg_document_graph_enabled\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"kg_chunk_search_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"kg_chunk_search_top_k\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"kg_extraction_batch_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"kg_extraction_batch_size\",\n      \"defaultValue\": \"3\"\n    },\n    {\n      \"name\": \"kg_community_summary_batch_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"kg_community_summary_batch_size\",\n      \"defaultValue\": \"20\"\n    },\n    {\n      \"name\": \"kg_embedding_batch_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"kg_embedding_batch_size\",\n      \"defaultValue\": \"20\"\n    },\n    {\n      \"name\": \"kg_similarity_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"kg_similarity_top_k\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"kg_similarity_score_threshold\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"kg_similarity_score_threshold\",\n      \"defaultValue\": \"0.7\"\n    },\n    {\n      \"name\": \"kg_enable_text_search\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"kg_enable_text_search\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"kg_text2gql_model_enabled\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"kg_text2gql_model_enabled\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"kg_text2gql_model_name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"text2gql_model_name\"\n    },\n    {\n      \"name\": \"bm25_k1\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"bm25_k1\",\n      \"defaultValue\": \"2.0\"\n    },\n    {\n      \"name\": \"bm25_b\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"bm25_b\",\n      \"defaultValue\": \"0.75\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Creating Branch Condition Functions for Decision Logic in Python\nDESCRIPTION: Defines two utility functions for branching logic based on whether a number is even or odd. These functions will be used by the DataDecisionOperator to route data flow.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n```\n\n----------------------------------------\n\nTITLE: Generating Cypher Query for Entity Search\nDESCRIPTION: Example of a Cypher query generated by the text2gql search feature to efficiently retrieve information about the DB-GPT entity from the knowledge graph.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_12\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (n) WHERE n.id = 'DB-GPT' RETURN n LIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Dependencies with UV\nDESCRIPTION: Command to install required DB-GPT packages including base, proxy_openai, rag, storage_obvector, and dbgpts using the UV package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/oceanbase_rag_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_obvector\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: ModelControllerParameters Class Definition in Python\nDESCRIPTION: Defines the configuration parameters for the DB-GPT model controller, including host, port, daemon mode, logging, tracing, model registry, and heartbeat settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/parameter_modelcontrollerparameters_689309.mdx#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nModelControllerParameters(host: Optional[str] = '0.0.0.0', port: Optional[int] = 8000, daemon: Optional[bool] = False, log: dbgpt.util.utils.LoggingParameters = <factory>, trace: Optional[dbgpt.util.tracer.tracer_impl.TracerParameters] = None, registry: Optional[dbgpt.model.parameter.BaseModelRegistryParameters] = None, heartbeat_interval_secs: Optional[int] = 20, heartbeat_timeout_secs: Optional[int] = 60)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version for DB-GPT Docker Build\nDESCRIPTION: Command to build a DB-GPT Docker image with a specific Python version (3.10 in this case). The default is Python 3.11.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --python-version 3.10\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy LLM for DB-GPT\nDESCRIPTION: This snippet shows how to configure the .env file for using a proxy LLM like OpenAI with DB-GPT, including setting the model type, API key, and server URL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#set LLM_MODEL TYPE\nLLM_MODEL=proxyllm\n#set your Proxy Api key and Proxy Server url\nPROXY_API_KEY={your-openai-sk}\nPROXY_SERVER_URL=https://api.openai.com/v1/chat/completions\n```\n\n----------------------------------------\n\nTITLE: Viewing Latest Conversation Information in DB-GPT (Python)\nDESCRIPTION: This command displays the latest conversation information in DB-GPT, hiding the run parameters. It shows details such as trace_id, span_id, user_input, chat_mode, and model output.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace chat --hide_run_params\n```\n\n----------------------------------------\n\nTITLE: Downloading Qwen Model\nDESCRIPTION: Command to download the qwen2.5-0.5b-instruct model from Huggingface\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/Llamacpp_server.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://huggingface.co/Qwen/Qwen2.5-0.5B-Instruct-GGUF/resolve/main/qwen2.5-0.5b-instruct-q4_k_m.gguf?download=true -O /tmp/qwen2.5-0.5b-instruct-q4_k_m.gguf\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for Data Persistence\nDESCRIPTION: TOML configuration snippet for specifying the database path for data persistence in the DB-GPT configuration file.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[service.web.database]\ntype = \"sqlite\"\npath = \"/app/pilot/message/dbgpt.db\"\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Webserver with GLM Model\nDESCRIPTION: This command starts the DB-GPT webserver using the GLM-4-9b-chat model on port 6006.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nLLM_MODEL=glm-4-9b-chat \ndbgpt start webserver --port 6006\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parsing Productions for DB-GPT\nDESCRIPTION: This snippet showcases the structure of production rules used in DB-GPT for parsing SQL and PL/SQL statements. Each rule is defined with a specific format, indicating the production name and its components.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_108\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    parameterized_trim : LEADING FROM bit_expr */\n\n/*! Production::    parameterized_trim : LEADING FROM expr */\n\n/*! Production::    parameterized_trim : LEADING bit_expr FROM bit_expr */\n\n/*! Production::    parameterized_trim : LEADING expr FROM expr */\n\n/*! Production::    parameterized_trim : TRAILING FROM bit_expr */\n\n/*! Production::    parameterized_trim : TRAILING FROM expr */\n\n/*! Production::    parameterized_trim : TRAILING bit_expr FROM bit_expr */\n\n/*! Production::    parameterized_trim : TRAILING expr FROM expr */\n\n/*! Production::    parameterized_trim : bit_expr */\n\n/*! Production::    parameterized_trim : bit_expr FROM bit_expr */\n\n/*! Production::    parameterized_trim : expr */\n\n/*! Production::    parameterized_trim : expr FROM expr */\n```\n\n----------------------------------------\n\nTITLE: Configuring ChatWithDBQA Component in React/MDX\nDESCRIPTION: React/MDX component configuration that defines the parameters and settings for the ChatWithDBQA feature. Includes settings for LLM generation, memory management, schema retrieval, and query result limits.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/config_chatwithdbqaconfig_62cbe4.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ChatWithDBQAConfig\",\n  \"description\": \"Chat With DB QA Configuration\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The top k for LLM generation\"\n    },\n    {\n      \"name\": \"top_p\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The top p for LLM generation\"\n    },\n    {\n      \"name\": \"temperature\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The temperature for LLM generation\"\n    },\n    {\n      \"name\": \"max_new_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max new tokens for LLM generation\"\n    },\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The name of your app\"\n    },\n    {\n      \"name\": \"memory\",\n      \"type\": \"BaseGPTsAppMemoryConfig\",\n      \"required\": false,\n      \"description\": \"Memory configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"window configuration\",\n          \"url\": \"../memory/config_bufferwindowgptsappmemoryconfig_c31071\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"token configuration\",\n          \"url\": \"../memory/config_tokenbuffergptsappmemoryconfig_6a2000\"\n        }\n      ],\n      \"defaultValue\": \"BufferWindowGPTsAppMemoryConfig\"\n    },\n    {\n      \"name\": \"schema_retrieve_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The number of tables to retrieve from the database.\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"schema_max_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The maximum number of tokens to pass to the model, default 100 * 1024.Just work for the schema retrieval failed, and load all tables schema.\",\n      \"defaultValue\": \"102400\"\n    },\n    {\n      \"name\": \"max_num_results\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The maximum number of results to return from the query.\",\n      \"defaultValue\": \"50\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: RAG Storage Providers Installation Commands\nDESCRIPTION: Markdown table showing supported RAG storage providers and their corresponding installation packages for DB-GPT integration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Provider    | Supported | Install Packages               |\n|-------------|-----------|--------------------------------|\n| Chroma      | â         | --extra storage_chroma         |       \n| Milvus      | â         | --extra storage_milvus         |       \n| Elasticsearch | â         | --extra storage_elasticsearch   |        \n| OceanBase   | â         | --extra storage_obvector      |\n```\n\n----------------------------------------\n\nTITLE: SHOW CREATE Type Production Rules in SQL\nDESCRIPTION: Grammar production rules for SHOW CREATE statements that display the creation syntax for various database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_136\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCreateType : EVENT */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCreateType : FUNCTION */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCreateType : PROCEDURE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCreateType : TABLE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCreateType : TRIGGER */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCreateType : VIEW */\n```\n\n----------------------------------------\n\nTITLE: Launching Documentation Server\nDESCRIPTION: Starts the documentation development server on port 3000 using yarn.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Parameters Component in JSX\nDESCRIPTION: React/JSX component that defines MySQL connection configuration parameters including required fields for host, port, user, database and optional parameters for connection pooling and driver settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_mysql_mysqlparameters_4393c4.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"MySQLParameters\",\n  \"description\": \"Fast, reliable, scalable open-source relational database management system.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database host, e.g., localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Database port, e.g., 3306\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database user to connect\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database name\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name for MySQL, default is mysql+pymysql.\",\n      \"defaultValue\": \"mysql+pymysql\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"pool_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool size, default 5\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"max_overflow\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Max overflow connections, default 10\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"pool_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool timeout, default 30\",\n      \"defaultValue\": \"30\"\n    },\n    {\n      \"name\": \"pool_recycle\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool recycle, default 3600\",\n      \"defaultValue\": \"3600\"\n    },\n    {\n      \"name\": \"pool_pre_ping\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Connection pool pre ping, default True\",\n      \"defaultValue\": \"True\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Boolean Expression Grammar Rules\nDESCRIPTION: Parsing rules for boolean expressions including comparison operators, NULL checks, and subquery conditions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    bool_pri : bit_expr COMP_EQ SOME bit_expr */\n/*! Production::    bool_pri : bit_expr COMP_EQ bit_expr */\n/*! Production::    bool_pri : bit_expr IS NULLX */\n/*! Production::    bool_pri : bit_expr IS not NULLX */\n```\n\n----------------------------------------\n\nTITLE: Predicting SQL with Fine-tuned Model using CUDA\nDESCRIPTION: This bash script demonstrates how to run SQL prediction with a fine-tuned LoRA model. It specifies the base model path, template, fine-tuning approach, checkpoint directory, and output filename for storing prediction results.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nCUDA_VISIBLE_DEVICES=0 python dbgpt_hub/predict/predict.py \\\n    --model_name_or_path Your_download_CodeLlama-13b-Instruct-hf_path \\\n    --template llama2 \\\n    --finetuning_type lora \\\n    --checkpoint_dir Your_last_peft_checkpoint-4000  \\\n    --predicted_out_filename Your_model_pred.sql\n\necho \"predict End time: $(date)\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Format for Text2SQL Training Data\nDESCRIPTION: Example of the JSON format used for training data in the Text2SQL fine-tuning process. Each record contains database information, instructions, input query, expected SQL output, and conversation history.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"db_id\": \"department_management\",\n  \"instruction\": \"I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.\\n\\\"\\n##Instruction:\\ndepartment_management contains tables such as department, head, management. Table department has columns such as Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees. Department_ID is the primary key.\\nTable head has columns such as head_ID, name, born_state, age. head_ID is the primary key.\\nTable management has columns such as department_ID, head_ID, temporary_acting. department_ID is the primary key.\\nThe head_ID of management is the foreign key of head_ID of head.\\nThe department_ID of management is the foreign key of Department_ID of department.\\n\\n\",\n  \"input\": \"###Input:\\nHow many heads of the departments are older than 56 ?\\n\\n###Response:\",\n  \"output\": \"SELECT count(*) FROM head WHERE age  >  56\",\n  \"history\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Running Custom dbgpts App in Command Mode\nDESCRIPTION: Command to run the custom dbgpts app 'simple_chat_app.py' locally in command mode, specifying the file, name, and providing input data in JSON format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt run flow --local --file simple_chat_app.py \\\ncmd \\\n--name dbgpts_simple_chat_app \\\n-d '\n{\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": \"hello\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Delete Datasource Python Example\nDESCRIPTION: Example of using Python client to delete a datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.datasource import delete_datasource\n\nDBGPT_API_KEY = \"dbgpt\"\ndatasource_id = \"{your_datasource_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await delete_datasource(client=client, datasource_id=datasource_id)\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Component for BitsandbytesQuantization4bits in React\nDESCRIPTION: This code snippet renders a ConfigDetail React component that displays the BitsandbytesQuantization4bits configuration options. The component displays parameters for 4-bit and 8-bit model quantization including load settings, compute datatypes, quantization types, and nested quantization options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/parameter_bitsandbytesquantization4bits_52b778.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"BitsandbytesQuantization4bits\",\n  \"description\": \"Bits and bytes quantization 4 bits parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"load_in_8bits\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to load the model in 8 bits(LLM.int8() algorithm), default is False.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"load_in_4bits\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to load the model in 4 bits.\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"bnb_4bit_compute_dtype\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"To speedup computation, you can change the data type from float32 (the default value) to bfloat16\",\n      \"validValues\": [\n        \"bfloat16\",\n        \"float16\",\n        \"float32\"\n      ]\n    },\n    {\n      \"name\": \"bnb_4bit_quant_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Quantization datatypes, `fp4` (four bit float) and `nf4` (normal four bit float), only valid when load_4bit=True\",\n      \"defaultValue\": \"nf4\",\n      \"validValues\": [\n        \"nf4\",\n        \"fp4\"\n      ]\n    },\n    {\n      \"name\": \"bnb_4bit_use_double_quant\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Nested quantization is a technique that can save additional memory at no additional performance cost. This feature performs a second quantization of the already quantized weights to save an additional 0.4 bits/parameter. \",\n      \"defaultValue\": \"True\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Searching Trace Information in Python\nDESCRIPTION: Command to search through trace information using a keyword, displaying matching traces in a tabulated format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace list --search Hello\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Model Worker for GLM-4-9B-Chat\nDESCRIPTION: This command starts a model worker for the GLM-4-9B-Chat model, specifying the model path, port, and controller address.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndbgpt start worker --model_name glm-4-9b-chat \\\n--model_path /app/models/glm-4-9b-chat \\\n--port 8001 \\\n--controller_addr http://127.0.0.1:8000\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for VLLM Model\nDESCRIPTION: Command to install dependencies required for using DB-GPT with a VLLM model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"hf\" \\\n--extra \"cuda121\" \\\n--extra \"vllm\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"quant_bnb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Web Server\nDESCRIPTION: Command to start the DB-GPT web server using the configured TOML file with UV runner.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/oceanbase_rag_install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Simple Identifiers\nDESCRIPTION: This snippet defines grammar productions for a wide range of simple identifiers used in SQL statements, including keywords and reserved words.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_153\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simpleId : ACCOUNT */\n\n/*! Production::    simpleId : ACTION */\n\n/*! Production::    simpleId : AFTER */\n\n/*! Production::    simpleId : AGGREGATE */\n\n/*! Production::    simpleId : ALGORITHM */\n\n/*! Production::    simpleId : ANY */\n\n/*! Production::    simpleId : ARCHIVE */\n\n/*! Production::    simpleId : AT */\n\n/*! Production::    simpleId : AUDIT_ADMIN */\n\n/*! Production::    simpleId : AUTHORS */\n\n/*! Production::    simpleId : AUTOCOMMIT */\n\n/*! Production::    simpleId : AUTOEXTEND_SIZE */\n\n/*! Production::    simpleId : AUTO_INCREMENT */\n\n/*! Production::    simpleId : AVG */\n\n/*! Production::    simpleId : AVG_ROW_LENGTH */\n\n/*! Production::    simpleId : BACKUP_ADMIN */\n\n/*! Production::    simpleId : BEGIN */\n\n/*! Production::    simpleId : BINLOG */\n\n/*! Production::    simpleId : BINLOG_ADMIN */\n\n/*! Production::    simpleId : BINLOG_ENCRYPTION_ADMIN */\n\n/*! Production::    simpleId : BIT */\n\n/*! Production::    simpleId : BIT_AND */\n\n/*! Production::    simpleId : BIT_OR */\n\n/*! Production::    simpleId : BIT_XOR */\n\n/*! Production::    simpleId : BLACKHOLE */\n\n/*! Production::    simpleId : BLOCK */\n\n/*! Production::    simpleId : BOOL */\n\n/*! Production::    simpleId : BOOLEAN */\n\n/*! Production::    simpleId : BTREE */\n\n/*! Production::    simpleId : CACHE */\n\n/*! Production::    simpleId : CASCADED */\n\n/*! Production::    simpleId : CATALOG_NAME */\n\n/*! Production::    simpleId : CHAIN */\n\n/*! Production::    simpleId : CHANGED */\n\n/*! Production::    simpleId : CHANNEL */\n\n/*! Production::    simpleId : CHECKSUM */\n\n/*! Production::    simpleId : CIPHER */\n\n/*! Production::    simpleId : CLASS_ORIGIN */\n\n/*! Production::    simpleId : CLIENT */\n\n/*! Production::    simpleId : CLONE_ADMIN */\n\n/*! Production::    simpleId : CLOSE */\n\n/*! Production::    simpleId : COALESCE */\n\n/*! Production::    simpleId : CODE */\n\n/*! Production::    simpleId : COLUMNS */\n\n/*! Production::    simpleId : COLUMN_FORMAT */\n\n/*! Production::    simpleId : COLUMN_NAME */\n\n/*! Production::    simpleId : COMMENT */\n\n/*! Production::    simpleId : COMMIT */\n\n/*! Production::    simpleId : COMPACT */\n\n/*! Production::    simpleId : COMPLETION */\n\n/*! Production::    simpleId : COMPRESSED */\n\n/*! Production::    simpleId : COMPRESSION */\n\n/*! Production::    simpleId : CONCURRENT */\n\n/*! Production::    simpleId : CONNECTION */\n\n/*! Production::    simpleId : CONNECTION_ADMIN */\n\n/*! Production::    simpleId : CONSISTENT */\n\n/*! Production::    simpleId : CONSTRAINT_CATALOG */\n\n/*! Production::    simpleId : CONSTRAINT_NAME */\n\n/*! Production::    simpleId : CONSTRAINT_SCHEMA */\n\n/*! Production::    simpleId : CONTAINS */\n\n/*! Production::    simpleId : CONTEXT */\n\n/*! Production::    simpleId : CONTRIBUTORS */\n\n/*! Production::    simpleId : COPY */\n\n/*! Production::    simpleId : CPU */\n\n/*! Production::    simpleId : CSV */\n\n/*! Production::    simpleId : CURRENT */\n\n/*! Production::    simpleId : CURSOR_NAME */\n\n/*! Production::    simpleId : DATA */\n\n/*! Production::    simpleId : DATAFILE */\n\n/*! Production::    simpleId : DATETIME */\n\n/*! Production::    simpleId : DEALLOCATE */\n\n/*! Production::    simpleId : DEFAULT_AUTH */\n\n/*! Production::    simpleId : DEFINER */\n\n/*! Production::    simpleId : DELAY_KEY_WRITE */\n\n/*! Production::    simpleId : DES_KEY_FILE */\n\n/*! Production::    simpleId : DIAGNOSTICS */\n\n/*! Production::    simpleId : DIRECTORY */\n\n/*! Production::    simpleId : DISABLE */\n\n/*! Production::    simpleId : DISCARD */\n\n/*! Production::    simpleId : DISK */\n\n/*! Production::    simpleId : DO */\n\n/*! Production::    simpleId : DUMPFILE */\n\n/*! Production::    simpleId : DUPLICATE */\n\n/*! Production::    simpleId : DYNAMIC */\n\n/*! Production::    simpleId : ENABLE */\n\n/*! Production::    simpleId : ENCRYPTION */\n\n/*! Production::    simpleId : ENCRYPTION_KEY_ADMIN */\n\n/*! Production::    simpleId : END */\n\n/*! Production::    simpleId : ENDS */\n\n/*! Production::    simpleId : ENGINE */\n\n/*! Production::    simpleId : ENGINES */\n\n/*! Production::    simpleId : ENUM */\n\n/*! Production::    simpleId : ERROR */\n\n/*! Production::    simpleId : ERRORS */\n\n/*! Production::    simpleId : ESCAPE */\n\n/*! Production::    simpleId : EVEN */\n\n/*! Production::    simpleId : EVENT */\n\n/*! Production::    simpleId : EVENTS */\n\n/*! Production::    simpleId : EVERY */\n\n/*! Production::    simpleId : EXCHANGE */\n\n/*! Production::    simpleId : EXCLUSIVE */\n\n/*! Production::    simpleId : EXPIRE */\n\n/*! Production::    simpleId : EXPORT */\n\n/*! Production::    simpleId : EXTENDED */\n\n/*! Production::    simpleId : EXTENT_SIZE */\n\n/*! Production::    simpleId : FAST */\n\n/*! Production::    simpleId : FAULTS */\n\n/*! Production::    simpleId : FEDERATED */\n\n/*! Production::    simpleId : FIELDS */\n\n/*! Production::    simpleId : FILE_BLOCK_SIZE */\n\n/*! Production::    simpleId : FILTER */\n\n/*! Production::    simpleId : FIREWALL_ADMIN */\n\n/*! Production::    simpleId : FIREWALL_USER */\n\n/*! Production::    simpleId : FIRST */\n\n/*! Production::    simpleId : FIXED */\n\n/*! Production::    simpleId : FLUSH */\n\n/*! Production::    simpleId : FOLLOWS */\n\n/*! Production::    simpleId : FOUND */\n\n/*! Production::    simpleId : FULL */\n\n/*! Production::    simpleId : FUNCTION */\n\n/*! Production::    simpleId : GENERAL */\n\n/*! Production::    simpleId : GLOBAL */\n\n/*! Production::    simpleId : GRANTS */\n\n/*! Production::    simpleId : GROUP_CONCAT */\n\n/*! Production::    simpleId : GROUP_REPLICATION */\n\n/*! Production::    simpleId : GROUP_REPLICATION_ADMIN */\n\n/*! Production::    simpleId : HANDLER */\n\n/*! Production::    simpleId : HASH */\n\n/*! Production::    simpleId : HELP */\n\n/*! Production::    simpleId : HOST */\n\n/*! Production::    simpleId : HOSTS */\n\n/*! Production::    simpleId : ID */\n\n/*! Production::    simpleId : IDENTIFIED */\n\n/*! Production::    simpleId : IGNORE_SERVER_IDS */\n\n/*! Production::    simpleId : IMPORT */\n\n/*! Production::    simpleId : INDEXES */\n\n/*! Production::    simpleId : INITIAL_SIZE */\n\n/*! Production::    simpleId : INNODB */\n\n/*! Production::    simpleId : INNODB_REDO_LOG_ARCHIVE */\n\n/*! Production::    simpleId : INPLACE */\n\n/*! Production::    simpleId : INSERT_METHOD */\n\n/*! Production::    simpleId : INSTALL */\n\n/*! Production::    simpleId : INSTANCE */\n\n/*! Production::    simpleId : INTERNAL */\n\n/*! Production::    simpleId : INVOKER */\n\n/*! Production::    simpleId : IO */\n\n/*! Production::    simpleId : IO_THREAD */\n\n/*! Production::    simpleId : IPC */\n\n/*! Production::    simpleId : ISOLATION */\n\n/*! Production::    simpleId : ISSUER */\n\n/*! Production::    simpleId : JSON */\n\n/*! Production::    simpleId : KEY_BLOCK_SIZE */\n\n/*! Production::    simpleId : LANGUAGE */\n\n/*! Production::    simpleId : LAST */\n\n/*! Production::    simpleId : LEAVES */\n\n/*! Production::    simpleId : LESS */\n\n/*! Production::    simpleId : LEVEL */\n\n/*! Production::    simpleId : LIST */\n\n/*! Production::    simpleId : LOCAL */\n\n/*! Production::    simpleId : LOGFILE */\n\n/*! Production::    simpleId : LOGS */\n\n/*! Production::    simpleId : MASTER */\n\n/*! Production::    simpleId : MASTER_AUTO_POSITION */\n\n/*! Production::    simpleId : MASTER_CONNECT_RETRY */\n\n/*! Production::    simpleId : MASTER_DELAY */\n\n/*! Production::    simpleId : MASTER_HEARTBEAT_PERIOD */\n\n/*! Production::    simpleId : MASTER_HOST */\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Webserver with Postgres Configuration\nDESCRIPTION: This command starts the DB-GPT webserver using a specific configuration file for Postgres integration. It uses the 'uv run' command to execute the Python script with the specified configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/postgres_install.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Get Datasource Endpoint\nDESCRIPTION: Endpoint for retrieving a specific datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nGET /api/v2/serve/datasources/{datasource_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connector Parameters in JSX\nDESCRIPTION: This code snippet defines the configuration for SQLite connector parameters using a custom React component. It specifies the required and optional parameters for establishing a SQLite connection, including the database file path, thread checking option, and driver name.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_sqlite_sqliteconnectorparameters_82c8b5.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"SQLiteConnectorParameters\",\n  \"description\": \"Lightweight embedded relational database with simplicity and portability.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"path\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"SQLite database file path. Use ':memory:' for in-memory database\"\n    },\n    {\n      \"name\": \"check_same_thread\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Check same thread or not, default is False. Set False to allow sharing connection across threads\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name, default is sqlite\",\n      \"defaultValue\": \"sqlite\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Column Partitioning and Complex Column References\nDESCRIPTION: These production rules define syntax for column partitioning options and various ways to reference columns, including with table qualifiers, wildcards, and reserved keywords. They support advanced SQL query features like table joins and schema-qualified references.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    column_partition_option : PARTITION BY COLUMN \"(\" vertical_column_name \")\" */\n\n/*! Production::    column_partition_option : PARTITION BY COLUMN \"(\" vertical_column_name \",\" aux_column_list \")\" */\n\n/*! Production::    column_ref : \".\" mysql_reserved_keyword \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : \".\" relation_name \".\" column_name */\n\n/*! Production::    column_ref : \".\" relation_name \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : CASCADE */\n\n/*! Production::    column_ref : FORCE */\n\n/*! Production::    column_ref : column_name */\n\n/*! Production::    column_ref : mysql_reserved_keyword \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : relation_name \".\" \"*\" */\n\n/*! Production::    column_ref : relation_name \".\" column_name */\n\n/*! Production::    column_ref : relation_name \".\" mysql_reserved_keyword \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : relation_name \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : relation_name \".\" relation_name \".\" \"*\" */\n\n/*! Production::    column_ref : relation_name \".\" relation_name \".\" column_name */\n\n/*! Production::    column_ref : relation_name \".\" relation_name \".\" mysql_reserved_keyword */\n```\n\n----------------------------------------\n\nTITLE: Rendering ChatWithDBExecuteConfig Component in JSX\nDESCRIPTION: This code renders a ConfigDetail component that displays the complete configuration structure for ChatWithDBExecuteConfig, including parameters for LLM generation, memory management, and database schema retrieval settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/config_chatwithdbexecuteconfig_64fe0f.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ChatWithDBExecuteConfig\",\n  \"description\": \"Chat With DB Execute Configuration\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The top k for LLM generation\"\n    },\n    {\n      \"name\": \"top_p\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The top p for LLM generation\"\n    },\n    {\n      \"name\": \"temperature\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The temperature for LLM generation\"\n    },\n    {\n      \"name\": \"max_new_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max new tokens for LLM generation\"\n    },\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The name of your app\"\n    },\n    {\n      \"name\": \"memory\",\n      \"type\": \"BaseGPTsAppMemoryConfig\",\n      \"required\": false,\n      \"description\": \"Memory configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"window configuration\",\n          \"url\": \"../memory/config_bufferwindowgptsappmemoryconfig_c31071\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"token configuration\",\n          \"url\": \"../memory/config_tokenbuffergptsappmemoryconfig_6a2000\"\n        }\n      ],\n      \"defaultValue\": \"BufferWindowGPTsAppMemoryConfig\"\n    },\n    {\n      \"name\": \"schema_retrieve_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The number of tables to retrieve from the database.\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"schema_max_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The maximum number of tokens to pass to the model, default 100 * 1024.Just work for the schema retrieval failed, and load all tables schema.\",\n      \"defaultValue\": \"102400\"\n    },\n    {\n      \"name\": \"max_num_results\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The maximum number of results to return from the query.\",\n      \"defaultValue\": \"50\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Dependencies for Database Integration\nDESCRIPTION: This command installs the necessary dependencies to use databases with agents in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/database.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"dbgpt[simple_framework]>=0.5.9rc0\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Volcengine Proxy LLM Configuration Component in JSX\nDESCRIPTION: This code snippet renders a ConfigDetail component with detailed configuration for Volcengine proxy LLM. It includes various parameters such as model name, backend, provider, API settings, and other options for configuring the language model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/volcengine_volcenginedeploymodelparameters_938015.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"VolcengineDeployModelParameters\",\n  \"description\": \"Volcengine proxy LLM configuration.\",\n  \"documentationUrl\": \"https://www.volcengine.com/docs/82379/1298454\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/volcengine\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Volcengine API.\",\n      \"defaultValue\": \"${env:ARK_API_BASE:-https://ark.cn-beijing.volces.com/api/v3}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Volcengine API.\",\n      \"defaultValue\": \"${env:ARK_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Model Worker for Vicuna-13B-V1.5\nDESCRIPTION: This command starts a model worker for the Vicuna-13B-V1.5 model, specifying the model path, port, and controller address.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndbgpt start worker --model_name vicuna-13b-v1.5 \\\n--model_path /app/models/vicuna-13b-v1.5 \\\n--port 8002 \\\n--controller_addr http://127.0.0.1:8000\n```\n\n----------------------------------------\n\nTITLE: List Datasources Curl Example\nDESCRIPTION: Example of using curl to list datasources\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\n\ncurl -X GET \"http://localhost:5670/api/v2/serve/datasources\" -H \"Authorization: Bearer $DBGPT_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Rendering TuGraph Configuration Details in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to display the configuration parameters for TuGraph. It includes details such as host, user, password, port, and database name, along with their descriptions and default values where applicable.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_tugraph_tugraphparameters_0c844e.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"TuGraphParameters\",\n  \"description\": \"TuGraph is a high-performance graph database jointly developed by Ant Group and Tsinghua University.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"TuGraph server host\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"TuGraph server user\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"TuGraph server port, default 7687\",\n      \"defaultValue\": \"7687\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database name, default 'default'\",\n      \"defaultValue\": \"default\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies for DB-GPT\nDESCRIPTION: Command to install the necessary OpenTelemetry packages for DB-GPT tracing functionality.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/observability.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-api opentelemetry-sdk opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Starting Text2Vec Embedding Model Worker\nDESCRIPTION: Bash command to start a DB-GPT embedding model worker for the Text2Vec model. This worker also registers with multiple controllers for redundancy.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster_ha.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt start worker --model_name text2vec \\\n--model_path /app/models/text2vec-large-chinese \\\n--worker_type text2vec \\\n--port 8003 \\\n--controller_addr \"http://server1:8000,http://server2:8000\"\n```\n\n----------------------------------------\n\nTITLE: Installing uv Package Manager\nDESCRIPTION: Commands to install the uv package manager using different methods: direct installation script, PyPI, or other options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --upgrade pip\npython -m pip install --upgrade pipx\npython -m pipx ensurepath\npipx install uv --global\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Viewing Service Runtime Information in DB-GPT (Python)\nDESCRIPTION: This command displays the service runtime information for DB-GPT, hiding the conversation details. It shows configuration details for various components like Webserver, EmbeddingModel, ModelWorker, and WorkerManager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace chat --hide_conv\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Simple Expressions and Statements\nDESCRIPTION: A comprehensive set of grammar production rules that define the syntax for various SQL language constructs including expressions, statements, functions, and clauses. These rules are used for parsing and processing SQL in the DB-GPT project.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_155\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    simpleId : transactionLevelBase */\n\n/*! Production::    simpleStrings : STRING_LITERALList */\n\n/*! Production::    simple_dml_trigger : before_or_after dml_event_option opt_referencing_list opt_for_each_row opt_enable_or_disable opt_when_condition simple_trigger_body */\n\n/*! Production::    simple_expr : \"(\" bit_expr \")\" */\n\n/*! Production::    simple_expr : \"(\" expr \")\" */\n\n/*! Production::    simple_expr : \"(\" expr_list \",\" bit_expr \")\" */\n\n/*! Production::    simple_expr : \"(\" expr_list \",\" expr \")\" */\n\n/*! Production::    simple_expr : \"+\" simple_expr */\n\n/*! Production::    simple_expr : \"-\" simple_expr */\n\n/*! Production::    simple_expr : \"{\" relation_name expr \"}\" */\n\n/*! Production::    simple_expr : \"~\" simple_expr */\n\n/*! Production::    simple_expr : BINARY simple_expr */\n\n/*! Production::    simple_expr : CONNECT_BY_ROOT unary_expr */\n\n/*! Production::    simple_expr : CURSOR \"(\" select_stmt \")\" */\n\n/*! Production::    simple_expr : EXISTS select_with_parens */\n\n/*! Production::    simple_expr : LEVEL */\n\n/*! Production::    simple_expr : MATCH \"(\" column_list \")\" AGAINST \"(\" STRING_VALUE opt_mode_flag \")\" */\n\n/*! Production::    simple_expr : PRIOR unary_expr */\n\n/*! Production::    simple_expr : ROW \"(\" expr_list \",\" expr \")\" */\n\n/*! Production::    simple_expr : ROWNUM */\n\n/*! Production::    simple_expr : SET \"(\" bit_expr \")\" */\n\n/*! Production::    simple_expr : USER_VARIABLE */\n\n/*! Production::    simple_expr : case_expr */\n\n/*! Production::    simple_expr : column_definition_ref JSON_EXTRACT complex_string_literal */\n\n/*! Production::    simple_expr : column_definition_ref JSON_EXTRACT_UNQUOTED complex_string_literal */\n\n/*! Production::    simple_expr : column_ref */\n\n/*! Production::    simple_expr : cursor_attribute_expr */\n\n/*! Production::    simple_expr : expr_const */\n\n/*! Production::    simple_expr : func_expr */\n\n/*! Production::    simple_expr : not2 simple_expr */\n\n/*! Production::    simple_expr : obj_access_ref */\n\n/*! Production::    simple_expr : obj_access_ref COLUMN_OUTER_JOIN_SYMBOL */\n\n/*! Production::    simple_expr : select_with_parens */\n\n/*! Production::    simple_expr : simple_expr CNNOP simple_expr */\n\n/*! Production::    simple_expr : simple_expr collation */\n\n/*! Production::    simple_expr : sql_function */\n\n/*! Production::    simple_expr : window_function */\n\n/*! Production::    simple_num : \"+\" DECIMAL_VAL */\n\n/*! Production::    simple_num : \"+\" INTNUM */\n\n/*! Production::    simple_num : \"-\" DECIMAL_VAL */\n\n/*! Production::    simple_num : \"-\" INTNUM */\n\n/*! Production::    simple_num : DECIMAL_VAL */\n\n/*! Production::    simple_num : INTNUM */\n\n/*! Production::    simple_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where opt_groupby opt_having */\n\n/*! Production::    simple_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where opt_groupby opt_having opt_named_windows */\n\n/*! Production::    simple_select_with_order_and_limit : simple_select opt_order_by limit_clause */\n\n/*! Production::    simple_select_with_order_and_limit : simple_select order_by */\n\n/*! Production::    simple_trigger_body : pl_block */\n\n/*! Production::    simple_type_i : SIMPLE_DOUBLE */\n\n/*! Production::    simple_type_i : SIMPLE_FLOAT */\n\n/*! Production::    simple_when_clause : WHEN bit_expr THEN bit_expr */\n\n/*! Production::    simple_when_clause_list : simple_when_clause */\n\n/*! Production::    simple_when_clause_list : simple_when_clause_list simple_when_clause */\n\n/*! Production::    singleDeleteStatement : DELETE opt_LOW_PRIORITY opt_QUICK opt_IGNORE FROM tableName opt_partitonValueList opt_whereClause opt_orderByClause opt_limitClause */\n\n/*! Production::    singleUpdateStatement : UPDATE opt_LOW_PRIORITY opt_IGNORE tableName opt_asUid SET updatedElements opt_whereClause opt_orderByClause opt_limitClause */\n\n/*! Production::    single_row_function : character_function */\n\n/*! Production::    single_row_function : conversion_function */\n\n/*! Production::    single_row_function : environment_id_function */\n\n/*! Production::    single_row_function : extract_function */\n\n/*! Production::    single_row_function : hierarchical_function */\n\n/*! Production::    single_row_function : numeric_function */\n\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging \"(\" \")\" values_clause opt_returning */\n\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging \"(\" column_list \")\" values_clause opt_returning */\n\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging values_clause opt_returning */\n\n/*! Production::    single_table_insert : dml_table_name \"(\" \")\" values_clause */\n\n/*! Production::    single_table_insert : dml_table_name \"(\" column_list \")\" values_clause */\n\n/*! Production::    single_table_insert : dml_table_name SET update_asgn_list */\n\n/*! Production::    single_table_insert : dml_table_name values_clause */\n\n/*! Production::    size_clause : SIZE AUTO */\n\n/*! Production::    size_clause : SIZE REPEAT */\n\n/*! Production::    size_clause : SIZE SKEWONLY */\n\n/*! Production::    size_clause : SIZE number_literal */\n\n/*! Production::    size_option : INTNUM opt_unit_of_size */\n\n/*! Production::    sort_column_key : column_name opt_sort_column_key_length opt_asc_desc opt_column_id */\n\n/*! Production::    sort_column_key : index_expr opt_asc_desc opt_column_id */\n\n/*! Production::    sort_column_list : sort_column_key */\n\n/*! Production::    sort_column_list : sort_column_list \",\" sort_column_key */\n\n/*! Production::    sort_key : bit_expr opt_asc_desc */\n\n/*! Production::    sort_key : expr opt_asc_desc */\n\n/*! Production::    sort_key_for_group_by : expr opt_asc_desc_for_group_by */\n\n/*! Production::    sort_list : sort_key */\n\n/*! Production::    sort_list : sort_list \",\" sort_key */\n\n/*! Production::    sort_list_for_group_by : sort_key_for_group_by */\n\n/*! Production::    sort_list_for_group_by : sort_list_for_group_by \",\" sort_key_for_group_by */\n\n/*! Production::    source_relation_factor : relation_factor */\n\n/*! Production::    source_relation_factor : select_with_parens */\n\n/*! Production::    sp_alter_clause : procedure_compile_clause */\n\n/*! Production::    sp_alter_clause : sp_editionable */\n\n/*! Production::    sp_cparam : opt_cexpr opt_sp_cparam_with_assign */\n\n/*! Production::    sp_cparam_list : \"(\" opt_sp_cparams \")\" */\n\n/*! Production::    sp_deterministic : DETERMINISTIC */\n\n/*! Production::    sp_editionable : EDITIONABLE */\n\n/*! Production::    sp_editionable : NONEDITIONABLE */\n\n/*! Production::    sp_if : bool_expr THEN pl_lang_stmt_list opt_sp_elseifs */\n\n/*! Production::    sp_param : param_name opt_sp_inout pl_outer_data_type opt_default */\n\n/*! Production::    sp_param_list : sp_param */\n\n/*! Production::    sp_param_list : sp_param_list \",\" sp_param */\n\n/*! Production::    sp_when : WHEN bool_expr THEN pl_lang_stmt_list */\n\n/*! Production::    sp_when_list : sp_when */\n\n/*! Production::    sp_when_list : sp_when_list sp_when */\n\n/*! Production::    special_func_expr : CHARACTER \"(\" expr_list \")\" */\n\n/*! Production::    special_func_expr : CHARACTER \"(\" expr_list USING charset_name \")\" */\n\n/*! Production::    special_func_expr : DATE \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : DEFAULT \"(\" column_definition_ref \")\" */\n\n/*! Production::    special_func_expr : INSERT \"(\" bit_expr \",\" bit_expr \",\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : ISNULL \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : LEFT \"(\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : MONTH \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : POSITION \"(\" bit_expr IN bit_expr \")\" */\n\n/*! Production::    special_func_expr : TIME \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : VALUES \"(\" column_definition_ref \")\" */\n\n/*! Production::    special_func_expr : YEAR \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : cur_timestamp_func */\n\n/*! Production::    special_partition_define : PARTITION opt_part_id */\n\n/*! Production::    special_partition_define : PARTITION relation_factor opt_part_id */\n\n/*! Production::    special_partition_list : special_partition_define */\n\n/*! Production::    special_partition_list : special_partition_list \",\" special_partition_define */\n\n/*! Production::    specificFunction : CASE caseFuncAlternatives ELSE functionArg END */\n\n/*! Production::    specificFunction : CASE caseFuncAlternatives END */\n\n/*! Production::    specificFunction : CASE expression caseFuncAlternatives ELSE functionArg END */\n\n/*! Production::    specificFunction : CASE expression caseFuncAlternatives END */\n\n/*! Production::    specificFunction : CAST LR_BRACKET expression AS convertedDataType RR_BRACKET */\n\n/*! Production::    specificFunction : CHAR LR_BRACKET functionArgs RR_BRACKET */\n\n/*! Production::    specificFunction : CHAR LR_BRACKET functionArgs USING charsetName RR_BRACKET */\n\n/*! Production::    specificFunction : CONVERT LR_BRACKET expression COMMA convertedDataType RR_BRACKET */\n\n/*! Production::    specificFunction : CONVERT LR_BRACKET expression USING charsetName RR_BRACKET */\n\n/*! Production::    specificFunction : CURRENT_DATE */\n\n/*! Production::    specificFunction : CURRENT_DATE LR_BRACKET RR_BRACKET */\n\n/*! Production::    specificFunction : CURRENT_TIME */\n\n/*! Production::    specificFunction : CURRENT_TIME LR_BRACKET RR_BRACKET */\n\n/*! Production::    specificFunction : CURRENT_TIMESTAMP */\n\n/*! Production::    specificFunction : CURRENT_TIMESTAMP LR_BRACKET RR_BRACKET */\n\n/*! Production::    specificFunction : CURRENT_USER */\n\n/*! Production::    specificFunction : CURRENT_USER LR_BRACKET RR_BRACKET */\n\n/*! Production::    specificFunction : EXTRACT LR_BRACKET intervalType FROM stringOrExpr RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Resource Preloading for Agent\nDESCRIPTION: Example implementation of the preload_resource method for loading specific resources when the agent is initialized, which is optional and depends on the agent's requirements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ConversableAgent, AgentMessage\n\nclass MySummarizerAgent(ConversableAgent):\n    # ... other code\n    async def preload_resource(self) -> None:\n        # Load the required resources\n        for resource in self.resources:\n            # Load your resource, please write your own code here\n            pass\n```\n\n----------------------------------------\n\nTITLE: Filtering Traces by Span Type in Python\nDESCRIPTION: Command to filter and display trace information based on a specific span type (chat), showing relevant trace details in tabulated format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace list --span_type chat\n```\n\n----------------------------------------\n\nTITLE: Defining Table Subquery Productions in SQL Grammar\nDESCRIPTION: These productions define various forms of table subqueries, including those with ordering, fetching, and flashback clauses. They also cover naming and transposition of subquery results.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_170\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens */\n\n/*! Production::    table_subquery : select_with_parens AS relation_name */\n\n/*! Production::    table_subquery : select_with_parens fetch_next_clause */\n\n/*! Production::    table_subquery : select_with_parens relation_name */\n\n/*! Production::    table_subquery : select_with_parens relation_name transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback */\n\n/*! Production::    table_subquery : select_with_parens use_flashback AS relation_name */\n\n/*! Production::    table_subquery : select_with_parens use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback relation_name */\n\n/*! Production::    table_subquery : select_with_parens use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback transpose_clause */\n```\n\n----------------------------------------\n\nTITLE: Starting the Web Server\nDESCRIPTION: The dbgpt start webserver command launches the front-end service on port 5670 by default. It can be configured with various options including host, port, controller address, model settings, and logging options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt start webserver --help\nAlready connect 'dbgpt'\nUsage: dbgpt start webserver [OPTIONS]\n\n  Start webserver(dbgpt_server.py)\n\nOptions:\n  --host TEXT                Webserver deploy host  [default: 0.0.0.0]\n  --port INTEGER             Webserver deploy port  [default: 5000]\n  --daemon                   Run Webserver in background\n  --controller_addr TEXT     The Model controller address to connect. If None,\n                             read model controller address from environment\n                             key `MODEL_SERVER`.\n  --model_name TEXT          The default model name to use. If None, read\n                             model name from environment key `LLM_MODEL`.\n  --share                    Whether to create a publicly shareable link for\n                             the interface. Creates an SSH tunnel to make your\n                             UI accessible from anywhere.\n  --remote_embedding         Whether to enable remote embedding models. If it\n                             is True, you need to start a embedding model\n                             through `dbgpt start worker --worker_type\n                             text2vec --model_name xxx --model_path xxx`\n  --log_level TEXT           Logging level\n  --light                    enable light mode\n  --log_file TEXT            The filename to store log  [default:\n                             dbgpt_webserver.log]\n  --tracer_file TEXT         The filename to store tracer span records\n                             [default: dbgpt_webserver_tracer.jsonl]\n  --tracer_storage_cls TEXT  The storage class to storage tracer span records\n  --disable_alembic_upgrade  Whether to disable alembic to initialize and\n                             upgrade database metadata\n  --help                     Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenAI Compatible Configuration Parameters with React Component\nDESCRIPTION: JSX code that renders a ConfigDetail component with OpenAI compatibility parameters. The component displays a comprehensive list of configuration options including model name, backend, provider settings, API connections, and performance parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/chatgpt_openaicompatibledeploymodelparameters_c3d426.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"OpenAICompatibleDeployModelParameters\",\n  \"description\": \"OpenAI Compatible Proxy LLM\",\n  \"documentationUrl\": \"https://platform.openai.com/docs/api-reference/chat\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/openai\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the OpenAI API.\",\n      \"defaultValue\": \"${env:OPENAI_API_BASE:-https://api.openai.com/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the OpenAI API.\",\n      \"defaultValue\": \"${env:OPENAI_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Grant, Group By, and Having Operations\nDESCRIPTION: These production rules define optional clauses for SQL GRANT operations, GROUP BY clauses, and HAVING clauses. They also include options for hash partitioning and subpartitioning.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_121\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_grant_options : %epsilon */\n\n/*! Production::    opt_grant_options : WITH GRANT OPTION */\n\n/*! Production::    opt_groupby : %epsilon */\n\n/*! Production::    opt_groupby : GROUP BY groupby_clause */\n\n/*! Production::    opt_hash_partition_list : \"(\" hash_partition_list \")\" */\n\n/*! Production::    opt_hash_partition_list : %epsilon */\n\n/*! Production::    opt_hash_subpartition_list : \"(\" hash_subpartition_list \")\" */\n\n/*! Production::    opt_having : %epsilon */\n\n/*! Production::    opt_having : HAVING expr */\n\n/*! Production::    opt_havingClause : %epsilon */\n\n/*! Production::    opt_havingClause : HAVING expression */\n```\n\n----------------------------------------\n\nTITLE: VLLM Configuration Component in TypeScript/MDX\nDESCRIPTION: React/MDX component displaying configuration documentation for VLLM model deployment parameters. Includes detailed parameter definitions with types, requirements, descriptions and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/vllm_adapter_vllmdeploymodelparameters_1d4a24.mdx#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigDetail } from \"@site/src/components/mdx/ConfigDetail\";\n\n<ConfigDetail config={{\n  \"name\": \"VLLMDeployModelParameters\",\n  \"description\": \"Local deploy model parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\", \n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    // Additional parameters omitted for brevity\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Training Data\nDESCRIPTION: Configuration and execution of data preprocessing for Spider dataset, converting it into the required fine-tuning format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/dbgpt_hub.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata_folder = \"dbgpt_hub/data\"\ndata_info = [\n     {\n        \"data_source\": \"spider\",\n        \"train_file\": [\"train_spider.json\", \"train_others.json\"],\n        \"dev_file\": [\"dev.json\"],\n        \"tables_file\": \"tables.json\",\n        \"db_id_name\": \"db_id\",\n        \"is_multiple_turn\": False,\n        \"train_output\": \"spider_train.json\",\n        \"dev_output\": \"spider_dev.json\",\n    }\n]\n\npreprocess_sft_data(\n      data_folder = data_folder,\n      data_info = data_info\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing OSSStorageConfig Class for Alibaba Cloud OSS Integration in Python\nDESCRIPTION: Constructor signature for the OSSStorageConfig class that configures integration with Alibaba Cloud Object Storage Service (OSS). This configuration allows DB-GPT to use OSS for file storage with parameters for endpoint, region, authentication, bucket management, and chunked uploads.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/utils/config_ossstorageconfig_1ad505.mdx#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nOSSStorageConfig(endpoint: str, region: str, access_key_id: Optional[str] = None, access_key_secret: Optional[str] = None, use_environment_credentials: Optional[bool] = False, fixed_bucket: Optional[str] = None, bucket_prefix: Optional[str] = 'dbgpt-fs-', auto_create_bucket: Optional[bool] = True, save_chunk_size: Optional[int] = 1048576)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen (Tongyi) Proxy Settings in .env for DB-GPT\nDESCRIPTION: This code snippet demonstrates the environment variable configurations needed to use Qwen (Tongyi) as a proxy LLM in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/More_proxyllms.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# .env\n# Aliyun tongyiqianwen\nLLM_MODEL=tongyi_proxyllm\nTONGYI_PROXY_API_KEY={your-tongyi-sk}\nPROXY_SERVER_URL={your_service_url}\n```\n\n----------------------------------------\n\nTITLE: Chat Datasource API Endpoint\nDESCRIPTION: Base endpoint for chat completions with datasources\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST /api/v2/chat/completions\n```\n\n----------------------------------------\n\nTITLE: Running dbgpts App Locally in Chat Mode\nDESCRIPTION: Command to run the awel-flow-simple-streaming-chat app locally in chat mode, specifying the model, messages, and stream option.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt run flow --local chat \\\n--name awel-flow-simple-streaming-chat \\\n--model \"gpt-3.5-turbo\" \\\n--messages \"hello\" \\\n--stream\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Resource Connection\nDESCRIPTION: Creates a database resource connection using the RDBMSConnectorResource class with the previously created SQLite connector.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/planning.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent.resource import RDBMSConnectorResource\n\ndb_resource = RDBMSConnectorResource(\"student_manager\", connector=connector)\n```\n\n----------------------------------------\n\nTITLE: Cloning DB-GPT Repository in Bash\nDESCRIPTION: These commands clone the DB-GPT repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# download source code\ngit clone https://github.com/eosphoros-ai/DB-GPT.git\n\ncd DB-GPT\n```\n\n----------------------------------------\n\nTITLE: Installing uv Package Manager (macOS and Linux)\nDESCRIPTION: Command to install the uv package manager using a shell script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing in DB-GPT\nDESCRIPTION: Environment variables to enable OpenTelemetry tracing in DB-GPT and specify the OTLP exporter endpoint.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/observability.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTRACER_TO_OPEN_TELEMETRY=True\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Statements in SQL\nDESCRIPTION: These productions define various transaction-related statements in SQL, including BEGIN, COMMIT, ROLLBACK, SAVEPOINT, and LOCK TABLES.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_178\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    transactionStatement : beginWork */\n\n/*! Production::    transactionStatement : commitWork */\n\n/*! Production::    transactionStatement : lockTables */\n\n/*! Production::    transactionStatement : releaseStatement */\n\n/*! Production::    transactionStatement : rollbackStatement */\n\n/*! Production::    transactionStatement : rollbackWork */\n\n/*! Production::    transactionStatement : savepointStatement */\n\n/*! Production::    transactionStatement : startTransaction */\n\n/*! Production::    transactionStatement : unlockTables */\n```\n\n----------------------------------------\n\nTITLE: Defining GPTsAppConfig Structure in JSON\nDESCRIPTION: This JSON structure defines the configuration options for GPTs applications, including general settings, LLM parameters, memory configuration, and app-specific configs.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/config_gptsappconfig_134d16.mdx#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"GPTsAppConfig\",\n  \"description\": \"GPTs application configuration.\\n\\n    For global configuration, you can set the parameters here.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The name of your app\"\n    },\n    {\n      \"name\": \"top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The top k for LLM generation\"\n    },\n    {\n      \"name\": \"top_p\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The top p for LLM generation\"\n    },\n    {\n      \"name\": \"temperature\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The temperature for LLM generation\"\n    },\n    {\n      \"name\": \"max_new_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max new tokens for LLM generation\"\n    },\n    {\n      \"name\": \"memory\",\n      \"type\": \"BaseGPTsAppMemoryConfig\",\n      \"required\": false,\n      \"description\": \"The memory configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"window configuration\",\n          \"url\": \"../memory/config_bufferwindowgptsappmemoryconfig_c31071\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"token configuration\",\n          \"url\": \"../memory/config_tokenbuffergptsappmemoryconfig_6a2000\"\n        }\n      ]\n    },\n    {\n      \"name\": \"configs\",\n      \"type\": \"GPTsAppCommonConfig\",\n      \"required\": false,\n      \"description\": \"The configs for specific app\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"chat_knowledge configuration\",\n          \"url\": \"config_chatknowledgeconfig_d51d9e\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"chat_with_db_qa configuration\",\n          \"url\": \"config_chatwithdbqaconfig_62cbe4\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"chat_with_db_execute configuration\",\n          \"url\": \"config_chatwithdbexecuteconfig_64fe0f\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"chat_normal configuration\",\n          \"url\": \"config_chatnormalconfig_83c865\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"chat_excel configuration\",\n          \"url\": \"config_chatexcelconfig_8dcf86\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"chat_dashboard configuration\",\n          \"url\": \"config_chatdashboardconfig_2480d0\"\n        }\n      ],\n      \"defaultValue\": \"[]\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Knowledge Query Rewrite in DB-GPT Configuration\nDESCRIPTION: Code snippet showing how to enable the Knowledge Search Rewrite mode by setting the appropriate environment variable in the .env file. This feature enhances the quality of knowledge-based searches.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/rag.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Whether to enable Chat Knowledge Search Rewrite Mode\nKNOWLEDGE_SEARCH_REWRITE=True\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Graph RAG in DB-GPT\nDESCRIPTION: Command to install the dbgpt library with necessary extras for Graph RAG functionality including proxy_openai, rag, storage_chromadb, dbgpts, and graph_rag.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages --frozen \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n--extra \"graph_rag\"\n```\n\n----------------------------------------\n\nTITLE: LlamaCppModelParameters Configuration Component in React/JSX\nDESCRIPTION: React/JSX component that renders configuration details for LlamaCppModelParameters using a ConfigDetail component. The configuration includes comprehensive parameter definitions with types, requirements, descriptions and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/llama_cpp_py_adapter_llamacppmodelparameters_e88874.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"LlamaCppModelParameters\",\n  \"description\": \"LlamaCppModelParameters(name: str, provider: str = 'llama.cpp', verbose: Optional[bool] = False, concurrency: Optional[int] = 5, backend: Optional[str] = None, prompt_template: Optional[str] = None, context_length: Optional[int] = None, reasoning_model: Optional[bool] = None, path: Optional[str] = None, device: Optional[str] = None, seed: Optional[int] = -1, n_threads: Optional[int] = None, n_batch: Optional[int] = 512, n_gpu_layers: Optional[int] = 1000000000, n_gqa: Optional[int] = None, rms_norm_eps: Optional[float] = 5e-06, cache_capacity: Optional[str] = None, prefer_cpu: Optional[bool] = False)\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    // ... additional parameters omitted for brevity\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: SQL Limit Productions\nDESCRIPTION: Grammar rules defining LIMIT clause syntax for result set pagination\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_82\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    limitClause : LIMIT limitClauseAtom */\n/*! Production::    limitClause : LIMIT limitClauseAtom COMMA limitClauseAtom */\n/*! Production::    limitClause : LIMIT limitClauseAtom OFFSET limitClauseAtom */\n/*! Production::    limitClauseAtom : decimalLiteral */\n/*! Production::    limitClauseAtom : mysqlVariable */\n/*! Production::    limitClauseAtom : simpleId */\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Components Table in JSX/MDX\nDESCRIPTION: A React component table that displays configuration classes and their descriptions for different chat functionalities in the DB-GPT application. The table includes class names, descriptions, and navigation links.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"ChatDashboardConfig\",\n    \"description\": \"Chat Dashboard Configuration\",\n    \"link\": \"./config_chatdashboardconfig_2480d0\"\n  },\n  {\n    \"name\": \"ChatExcelConfig\",\n    \"description\": \"Chat Excel Configuration\",\n    \"link\": \"./config_chatexcelconfig_8dcf86\"\n  },\n  {\n    \"name\": \"ChatKnowledgeConfig\",\n    \"description\": \"Chat Knowledge Configuration\",\n    \"link\": \"./config_chatknowledgeconfig_d51d9e\"\n  },\n  {\n    \"name\": \"ChatNormalConfig\",\n    \"description\": \"Chat Normal Configuration\",\n    \"link\": \"./config_chatnormalconfig_83c865\"\n  },\n  {\n    \"name\": \"ChatWithDBExecuteConfig\",\n    \"description\": \"Chat With DB Execute Configuration\",\n    \"link\": \"./config_chatwithdbexecuteconfig_64fe0f\"\n  },\n  {\n    \"name\": \"ChatWithDBQAConfig\",\n    \"description\": \"Chat With DB QA Configuration\",\n    \"link\": \"./config_chatwithdbqaconfig_62cbe4\"\n  }\n]} />\n```\n\n----------------------------------------\n\nTITLE: Multi-GPU Configuration for DB-GPT\nDESCRIPTION: Commands for specifying GPU usage in DB-GPT. Allows selection of specific GPUs using CUDA_VISIBLE_DEVICES environment variable.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/llm.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Specify 1 gpu\nCUDA_VISIBLE_DEVICES=0 python3 dbgpt/app/dbgpt_server.py\n\n# Specify 4 gpus\nCUDA_VISIBLE_DEVICES=3,4,5,6 python3 dbgpt/app/dbgpt_server.py\n```\n\n----------------------------------------\n\nTITLE: Creating Test Database in MySQL\nDESCRIPTION: SQL command to create a test database named dbgpt_test with UTF-8 character encoding for testing report analysis capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/apps/chat_dashboard.md#2025-04-09_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE DATABASE IF NOT EXISTS dbgpt_test CHARACTER SET utf8;\n```\n\n----------------------------------------\n\nTITLE: Alternative TuGraph Docker Image Download\nDESCRIPTION: Optional commands to download the TuGraph Docker image from Alibaba OSS instead of Docker Hub and load it into Docker. Useful for users who may have trouble accessing Docker Hub.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/graph_rag_install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget 'https://tugraph-web.oss-cn-beijing.aliyuncs.com/tugraph/tugraph-4.5.1/tugraph-runtime-centos7-4.5.1.tar' -O tugraph-runtime-centos7-4.5.1.tar\ndocker load -i tugraph-runtime-centos7-4.5.1.tar\n```\n\n----------------------------------------\n\nTITLE: Example of Processed Table Information Format\nDESCRIPTION: Sample of the processed table information dictionary format used in the Text2SQL data preparation. Each database ID is mapped to its corresponding table structure information for generating instructions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"department_management\": department_management contains tables such as department, head, management. Table department has columns such as Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees. Department_ID is the primary key.\\nTable head has columns such as head_ID, name, born_state, age. head_ID is the primary key.\\nTable management has columns such as department_ID, head_ID, temporary_acting. department_ID is the primary key.\\nThe head_ID of management is the foreign key of head_ID of head.\\nThe department_ID of management is the foreign key of Department_ID of department.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Llama.cpp Inference in TOML\nDESCRIPTION: Configuration example for setting up production-level llama.cpp inference in DB-GPT. This configuration uses the DeepSeek-R1-Distill-Qwen-1.5B model with llama.cpp.server provider for efficient, multi-user parallel inference.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\nname = \"DeepSeek-R1-Distill-Qwen-1.5B\"\nprovider = \"llama.cpp.server\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# https://huggingface.co/bartowski/DeepSeek-R1-Distill-Qwen-1.5B-GGUF\n# path = \"the-model-path-in-the-local-file-system\"\npath = \"models/DeepSeek-R1-Distill-Qwen-1.5B-Q4_K_M.gguf\n```\n\n----------------------------------------\n\nTITLE: Getting Knowledge Space with cURL\nDESCRIPTION: Example of retrieving a specific knowledge space using cURL. Shows GET request format with space ID parameter.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nSPACE_ID={YOUR_SPACE_ID}\ncurl -X GET \"http://localhost:5670/api/v2/serve/knowledge/spaces/$SPACE_ID\" -H \"Authorization: Bearer $DBGPT_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Installing AWEL Workflow for Web Info Search in DB-GPT\nDESCRIPTION: This command installs the 'awel-flow-web-info-search' workflow locally. It shows the installation process and confirmation of successful installation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/app/data_analysis_app_develop.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt app install awel-flow-web-info-search\n```\n\n----------------------------------------\n\nTITLE: Running Web Front-end Separately\nDESCRIPTION: Commands to set up and run the web front-end separately from the main DB-GPT server.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd web && npm install\ncp .env.template .env\n// Set API_BASE_URL to your DB-GPT server address, usually http://localhost:5670\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Model List Command Options\nDESCRIPTION: Options for listing deployed model instances with filtering capabilities by model name and type.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt model list --help\nAlready connect 'dbgpt'\nUsage: dbgpt model list [OPTIONS]\n\n  List model instances\n\nOptions:\n  --model_name TEXT  The name of model\n  --model_type TEXT  The type of model\n  --help             Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords (P-S)\nDESCRIPTION: This snippet defines a series of unreserved keywords for SQL, focusing on those starting with letters P through S. Each keyword is marked with a production comment indicating its normal usage in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_184\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : PASSWORD_VERIFY_FUNCTION */\n\n/*! Production::    unreserved_keyword_normal : PAUSE */\n\n/*! Production::    unreserved_keyword_normal : PCTFREE */\n\n/*! Production::    unreserved_keyword_normal : PERCENT */\n\n/*! Production::    unreserved_keyword_normal : PERCENTAGE */\n\n/*! Production::    unreserved_keyword_normal : PERCENT_RANK */\n\n/*! Production::    unreserved_keyword_normal : PERFORMANCE */\n\n/*! Production::    unreserved_keyword_normal : PHASE */\n\n/*! Production::    unreserved_keyword_normal : PHYSICAL */\n\n/*! Production::    unreserved_keyword_normal : PIVOT */\n\n/*! Production::    unreserved_keyword_normal : PL */\n\n/*! Production::    unreserved_keyword_normal : PLAN */\n\n/*! Production::    unreserved_keyword_normal : PLANREGRESS */\n\n/*! Production::    unreserved_keyword_normal : PLUGIN */\n\n/*! Production::    unreserved_keyword_normal : PLUGINS */\n\n/*! Production::    unreserved_keyword_normal : PLUGIN_DIR */\n\n/*! Production::    unreserved_keyword_normal : PLUS */\n\n/*! Production::    unreserved_keyword_normal : POINT */\n\n/*! Production::    unreserved_keyword_normal : POLICY */\n\n/*! Production::    unreserved_keyword_normal : POLYGON */\n\n/*! Production::    unreserved_keyword_normal : POOL */\n\n/*! Production::    unreserved_keyword_normal : PORT */\n\n/*! Production::    unreserved_keyword_normal : POSITION */\n\n/*! Production::    unreserved_keyword_normal : PRECEDING */\n\n/*! Production::    unreserved_keyword_normal : PREPARE */\n\n/*! Production::    unreserved_keyword_normal : PRESERVE */\n\n/*! Production::    unreserved_keyword_normal : PRETTY */\n\n/*! Production::    unreserved_keyword_normal : PRETTY_COLOR */\n\n/*! Production::    unreserved_keyword_normal : PREV */\n\n/*! Production::    unreserved_keyword_normal : PREVIEW */\n\n/*! Production::    unreserved_keyword_normal : PRIMARY_ZONE */\n\n/*! Production::    unreserved_keyword_normal : PRIORITY */\n\n/*! Production::    unreserved_keyword_normal : PRIVILEGE */\n\n/*! Production::    unreserved_keyword_normal : PRIVILEGES */\n\n/*! Production::    unreserved_keyword_normal : PROCESS */\n\n/*! Production::    unreserved_keyword_normal : PROCESSLIST */\n\n/*! Production::    unreserved_keyword_normal : PROFILE */\n\n/*! Production::    unreserved_keyword_normal : PROFILES */\n\n/*! Production::    unreserved_keyword_normal : PROGRESSIVE_MERGE_NUM */\n\n/*! Production::    unreserved_keyword_normal : PROTECTION */\n\n/*! Production::    unreserved_keyword_normal : PROXY */\n\n/*! Production::    unreserved_keyword_normal : PS */\n\n/*! Production::    unreserved_keyword_normal : PUBLIC */\n\n/*! Production::    unreserved_keyword_normal : PURGE */\n\n/*! Production::    unreserved_keyword_normal : P_CHUNK */\n\n/*! Production::    unreserved_keyword_normal : P_ENTITY */\n\n/*! Production::    unreserved_keyword_normal : QUARTER */\n\n/*! Production::    unreserved_keyword_normal : QUERY */\n\n/*! Production::    unreserved_keyword_normal : QUERY_RESPONSE_TIME */\n\n/*! Production::    unreserved_keyword_normal : QUEUE_TIME */\n\n/*! Production::    unreserved_keyword_normal : QUICK */\n\n/*! Production::    unreserved_keyword_normal : RANGE */\n\n/*! Production::    unreserved_keyword_normal : RANK */\n\n/*! Production::    unreserved_keyword_normal : RATIO_TO_REPORT */\n\n/*! Production::    unreserved_keyword_normal : READS */\n\n/*! Production::    unreserved_keyword_normal : READ_ONLY */\n\n/*! Production::    unreserved_keyword_normal : READ_WRITE */\n\n/*! Production::    unreserved_keyword_normal : REBUILD */\n\n/*! Production::    unreserved_keyword_normal : RECOVER */\n\n/*! Production::    unreserved_keyword_normal : RECOVERY */\n\n/*! Production::    unreserved_keyword_normal : RECOVERY_WINDOW */\n\n/*! Production::    unreserved_keyword_normal : RECURSIVE */\n\n/*! Production::    unreserved_keyword_normal : RECYCLE */\n\n/*! Production::    unreserved_keyword_normal : RECYCLEBIN */\n\n/*! Production::    unreserved_keyword_normal : REDACTION */\n\n/*! Production::    unreserved_keyword_normal : REDOFILE */\n\n/*! Production::    unreserved_keyword_normal : REDO_BUFFER_SIZE */\n\n/*! Production::    unreserved_keyword_normal : REDO_TRANSPORT_OPTIONS */\n\n/*! Production::    unreserved_keyword_normal : REDUNDANCY */\n\n/*! Production::    unreserved_keyword_normal : REDUNDANT */\n\n/*! Production::    unreserved_keyword_normal : REFRESH */\n\n/*! Production::    unreserved_keyword_normal : REGEXP_LIKE */\n\n/*! Production::    unreserved_keyword_normal : REGION */\n\n/*! Production::    unreserved_keyword_normal : REGR_AVGX */\n\n/*! Production::    unreserved_keyword_normal : REGR_AVGY */\n\n/*! Production::    unreserved_keyword_normal : REGR_COUNT */\n\n/*! Production::    unreserved_keyword_normal : REGR_INTERCEPT */\n\n/*! Production::    unreserved_keyword_normal : REGR_R2 */\n\n/*! Production::    unreserved_keyword_normal : REGR_SLOPE */\n\n/*! Production::    unreserved_keyword_normal : REGR_SXX */\n\n/*! Production::    unreserved_keyword_normal : REGR_SXY */\n\n/*! Production::    unreserved_keyword_normal : REGR_SYY */\n\n/*! Production::    unreserved_keyword_normal : REJECT */\n\n/*! Production::    unreserved_keyword_normal : RELAY */\n\n/*! Production::    unreserved_keyword_normal : RELAYLOG */\n\n/*! Production::    unreserved_keyword_normal : RELAY_LOG_FILE */\n\n/*! Production::    unreserved_keyword_normal : RELAY_LOG_POS */\n\n/*! Production::    unreserved_keyword_normal : RELAY_THREAD */\n\n/*! Production::    unreserved_keyword_normal : RELEASE */\n\n/*! Production::    unreserved_keyword_normal : RELOAD */\n\n/*! Production::    unreserved_keyword_normal : RELY */\n\n/*! Production::    unreserved_keyword_normal : REMOTE_OSS */\n\n/*! Production::    unreserved_keyword_normal : REMOVE */\n\n/*! Production::    unreserved_keyword_normal : REORGANIZE */\n\n/*! Production::    unreserved_keyword_normal : REPAIR */\n\n/*! Production::    unreserved_keyword_normal : REPEAT */\n\n/*! Production::    unreserved_keyword_normal : REPEATABLE */\n\n/*! Production::    unreserved_keyword_normal : REPLACE */\n\n/*! Production::    unreserved_keyword_normal : REPLICA */\n\n/*! Production::    unreserved_keyword_normal : REPLICATION */\n\n/*! Production::    unreserved_keyword_normal : REPLICA_NUM */\n\n/*! Production::    unreserved_keyword_normal : REPLICA_TYPE */\n\n/*! Production::    unreserved_keyword_normal : REPORT */\n\n/*! Production::    unreserved_keyword_normal : REQUIRE */\n\n/*! Production::    unreserved_keyword_normal : RESET */\n\n/*! Production::    unreserved_keyword_normal : RESIGNAL */\n\n/*! Production::    unreserved_keyword_normal : RESOURCE */\n\n/*! Production::    unreserved_keyword_normal : RESOURCE_POOL_LIST */\n\n/*! Production::    unreserved_keyword_normal : RESPECT */\n\n/*! Production::    unreserved_keyword_normal : RESTART */\n\n/*! Production::    unreserved_keyword_normal : RESTORE */\n\n/*! Production::    unreserved_keyword_normal : RESTRICT */\n\n/*! Production::    unreserved_keyword_normal : RESUME */\n\n/*! Production::    unreserved_keyword_normal : RETURN */\n\n/*! Production::    unreserved_keyword_normal : RETURNED_SQLSTATE */\n\n/*! Production::    unreserved_keyword_normal : RETURNING */\n\n/*! Production::    unreserved_keyword_normal : RETURNS */\n\n/*! Production::    unreserved_keyword_normal : REVERSE */\n\n/*! Production::    unreserved_keyword_normal : REWRITE_MERGE_VERSION */\n\n/*! Production::    unreserved_keyword_normal : RIGHT */\n\n/*! Production::    unreserved_keyword_normal : RLIKE */\n\n/*! Production::    unreserved_keyword_normal : ROLLBACK */\n\n/*! Production::    unreserved_keyword_normal : ROLLING */\n\n/*! Production::    unreserved_keyword_normal : ROLLUP */\n\n/*! Production::    unreserved_keyword_normal : ROOT */\n\n/*! Production::    unreserved_keyword_normal : ROOTSERVICE */\n\n/*! Production::    unreserved_keyword_normal : ROOTSERVICE_LIST */\n\n/*! Production::    unreserved_keyword_normal : ROOTTABLE */\n\n/*! Production::    unreserved_keyword_normal : ROTATE */\n\n/*! Production::    unreserved_keyword_normal : ROUTINE */\n\n/*! Production::    unreserved_keyword_normal : ROW */\n\n/*! Production::    unreserved_keyword_normal : ROWCOUNT */\n\n/*! Production::    unreserved_keyword_normal : ROWS */\n\n/*! Production::    unreserved_keyword_normal : ROW_COUNT */\n\n/*! Production::    unreserved_keyword_normal : ROW_FORMAT */\n\n/*! Production::    unreserved_keyword_normal : ROW_NUMBER */\n\n/*! Production::    unreserved_keyword_normal : RT */\n\n/*! Production::    unreserved_keyword_normal : RTREE */\n\n/*! Production::    unreserved_keyword_normal : RUN */\n\n/*! Production::    unreserved_keyword_normal : SAMPLE */\n\n/*! Production::    unreserved_keyword_normal : SAVEPOINT */\n\n/*! Production::    unreserved_keyword_normal : SCHEDULE */\n\n/*! Production::    unreserved_keyword_normal : SCHEMAS */\n\n/*! Production::    unreserved_keyword_normal : SCHEMA_NAME */\n\n/*! Production::    unreserved_keyword_normal : SCN */\n\n/*! Production::    unreserved_keyword_normal : SCOPE */\n\n/*! Production::    unreserved_keyword_normal : SEARCH */\n\n/*! Production::    unreserved_keyword_normal : SECOND */\n\n/*! Production::    unreserved_keyword_normal : SECOND_MICROSECOND */\n\n/*! Production::    unreserved_keyword_normal : SECURITY */\n\n/*! Production::    unreserved_keyword_normal : SEED */\n\n/*! Production::    unreserved_keyword_normal : SENSITIVE */\n\n/*! Production::    unreserved_keyword_normal : SEPARATOR */\n\n/*! Production::    unreserved_keyword_normal : SEQUENCE */\n\n/*! Production::    unreserved_keyword_normal : SEQUENCES */\n\n/*! Production::    unreserved_keyword_normal : SERIAL */\n\n/*! Production::    unreserved_keyword_normal : SERIALIZABLE */\n\n/*! Production::    unreserved_keyword_normal : SERVER */\n\n/*! Production::    unreserved_keyword_normal : SERVER_IP */\n\n/*! Production::    unreserved_keyword_normal : SERVER_PORT */\n\n/*! Production::    unreserved_keyword_normal : SERVER_TYPE */\n\n/*! Production::    unreserved_keyword_normal : SERVICE */\n\n/*! Production::    unreserved_keyword_normal : SESSION */\n```\n\n----------------------------------------\n\nTITLE: Installing Financial Report Applications from dbgpts\nDESCRIPTION: Instructions for installing Poetry package manager and the financial report applications from dbgpts, including the knowledge processing pipeline and the financial robot app workflows.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/apps/chat_financial_report.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# install poetry\npip install poetry\n\n# install financial report knowledge process pipeline workflow and financial-robot-app workflow\ndbgpt app install financial-robot-app financial-report-knowledge-factory\n```\n\n----------------------------------------\n\nTITLE: Configuring Xunfei Spark LLM Parameters using React Component\nDESCRIPTION: React/JSX component implementation displaying detailed configuration parameters for Xunfei Spark LLM integration. Includes model settings, API configuration, and deployment parameters with their types, requirements and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/spark_sparkdeploymodelparameters_afba3c.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"SparkDeployModelParameters\",\n  \"description\": \"Xunfei Spark proxy LLM configuration.\",\n  \"documentationUrl\": \"https://www.xfyun.cn/doc/spark/HTTP%E8%B0%83%E7%94%A8%E6%96%87%E6%A1%A3.html#_1-%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/spark\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Spark API.\",\n      \"defaultValue\": \"${env:XUNFEI_SPARK_API_BASE:-https://spark-api-open.xf-yun.com/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Spark API.\",\n      \"defaultValue\": \"${env:XUNFEI_SPARK_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Aggregate Window Function Syntax\nDESCRIPTION: This snippet defines the syntax for aggregate window functions like GROUP_CONCAT, JSON_ARRAYAGG, and JSON_OBJECTAGG. It specifies how these functions are used with the OVER clause and optional parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_191\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : GROUP_CONCAT \"(\" opt_distinct expr_list opt_order_by opt_separator \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : JSON_ARRAYAGG \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : JSON_OBJECTAGG \"(\" expr \",\" expr \")\" OVER new_generalized_window_clause */\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ConfigDetail Component in JSX\nDESCRIPTION: This code snippet shows a JSX component for displaying model cache configuration parameters. It imports the ConfigDetail component and passes the configuration object that defines model caching options including enable flag, storage type, memory limits, and persistence directory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/utils/manager_modelcacheparameters_152367.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigDetail } from \"@site/src/components/mdx/ConfigDetail\";\n\n<ConfigDetail config={{\n  \"name\": \"ModelCacheParameters\",\n  \"description\": \"Model cache configuration.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"enable_model_cache\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to enable model cache, default is True\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"storage_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The storage type, default is memory\",\n      \"defaultValue\": \"memory\"\n    },\n    {\n      \"name\": \"max_memory_mb\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max memory in MB, default is 256\",\n      \"defaultValue\": \"256\"\n    },\n    {\n      \"name\": \"persist_dir\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The persist directory, default is model_cache\",\n      \"defaultValue\": \"model_cache\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Classes Table in Markdown\nDESCRIPTION: This code snippet uses a custom React component called ConfigClassTable to render a table of configuration classes. It includes details like class names, descriptions, and links to further documentation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/memory/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"BufferWindowGPTsAppMemoryConfig\",\n    \"description\": \"Buffer window memory configuration.\\n\\n    This configuration is used to control the buffer window memory.\",\n    \"link\": \"./config_bufferwindowgptsappmemoryconfig_c31071\"\n  },\n  {\n    \"name\": \"TokenBufferGPTsAppMemoryConfig\",\n    \"description\": \"Token buffer memory configuration.\\n\\n    This configuration is used to control the token buffer memory.\",\n    \"link\": \"./config_tokenbuffergptsappmemoryconfig_6a2000\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Hint Options\nDESCRIPTION: These productions define various hint options for SQL queries, including join methods, aggregation techniques, and optimization strategies.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    hint_option : USE_BNL \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_CONCAT opt_qb_name */\n\n/*! Production::    hint_option : USE_HASH \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_HASH_AGGREGATION */\n\n/*! Production::    hint_option : USE_JIT */\n\n/*! Production::    hint_option : USE_LATE_MATERIALIZATION */\n\n/*! Production::    hint_option : USE_MERGE \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_NL \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_NL_MATERIALIZATION \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_PLAN_CACHE \"(\" use_plan_cache_type \")\" */\n\n/*! Production::    hint_option : USE_PX */\n\n/*! Production::    hint_option : error */\n\n/*! Production::    hint_option : global_hint */\n\n/*! Production::    hint_option : optimize_hint */\n\n/*! Production::    hint_option : transform_hint */\n```\n\n----------------------------------------\n\nTITLE: Configuring Baichuan LLM Parameters using React Component\nDESCRIPTION: A React component configuration object that defines all available parameters for setting up a Baichuan LLM proxy model. Includes API connection settings, model behavior controls, and deployment configurations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/baichuan_baichuandeploymodelparameters_0bf9cc.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"BaichuanDeployModelParameters\",\n  \"description\": \"Baichuan Proxy LLM\",\n  \"documentationUrl\": \"https://platform.baichuan-ai.com/docs/api\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/baichuan\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Baichuan API.\",\n      \"defaultValue\": \"${env:BAICHUAN_API_BASE:-https://api.baichuan-ai.com/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Baichuan API.\",\n      \"defaultValue\": \"${env:BAICHUAN_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Checking uv Installation\nDESCRIPTION: Command to verify the successful installation of uv by checking its version.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv --version\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Dependencies without CUDA\nDESCRIPTION: Command to install DB-GPT dependencies without CUDA support using uv package manager with core extensions\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"hf\" \\\n--extra \"llama_cpp\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"quant_bnb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Local Models for DB-GPT with GPU\nDESCRIPTION: These commands create a models directory, clone the GLM-4-9b-chat model and text2vec-large-chinese embedding model from Hugging Face for local GPU deployment.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir models && cd models\n\n# # download embedding model, eg: glm-4-9b-chat or  \ngit clone https://huggingface.co/THUDM/glm-4-9b-chat\n\n# download embedding model, eg: text2vec-large-chinese\ngit clone https://huggingface.co/GanymedeNil/text2vec-large-chinese\n\npopd\n```\n\n----------------------------------------\n\nTITLE: Setting up the DB-GPT-Hub Environment with Conda\nDESCRIPTION: Instructions for cloning the DB-GPT-Hub repository and setting up a conda virtual environment for Text2SQL fine-tuning. This creates a dedicated Python 3.10 environment with all required dependencies.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngit clone https://github.com/eosphoros-ai/DB-GPT-Hub.git\ncd DB-GPT-Hub\nconda create -n dbgpt_hub python=3.10 \nconda activate dbgpt_hub\nconda install -c conda-forge poetry>=1.4.0\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Proxy Settings in .env for DB-GPT\nDESCRIPTION: This snippet shows the necessary environment variable configurations for using OpenAI as a proxy LLM in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/More_proxyllms.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# .env\nLLM_MODEL=chatgpt_proxyllm\nPROXY_API_KEY={your-openai-sk}\nPROXY_SERVER_URL=https://api.openai.com/v1/chat/completions\n# If you use gpt-4\n# PROXYLLM_BACKEND=gpt-4\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Reduction with ReduceStreamOperator\nDESCRIPTION: Example showing how to create a stream of numbers and then reduce them using a sum operation. The NumberProducerOperator generates a stream, and MySumOperator combines stream elements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"Create a stream of numbers from 0 to `n-1`\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nclass MySumOperator(ReduceStreamOperator[int, int]):\n    async def reduce(self, x: int, y: int) -> int:\n        return x + y\n\nwith DAG(\"sum_numbers_dag\") as dag:\n    task = NumberProducerOperator()\n    sum_task = MySumOperator()\n    task >> sum_task\n\nres = await sum_task.call(5)\nres\n```\n\n----------------------------------------\n\nTITLE: Building Default CUDA-based DB-GPT Docker Image\nDESCRIPTION: Command to build the default DB-GPT Docker image with CUDA support, proxy integrations, RAG capabilities, and other standard features.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database for DB-GPT\nDESCRIPTION: MySQL command to create the database and tables for DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ mysql -h127.0.0.1 -uroot -p{your_password} < ./assets/schema/dbgpt.sql\n```\n\n----------------------------------------\n\nTITLE: SQL Function Type Rules\nDESCRIPTION: Production rules defining the main types of SQL functions, including aggregate functions, single row functions, and special function expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_162\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    sql_function : aggregate_function */\n\n/*! Production::    sql_function : single_row_function */\n\n/*! Production::    sql_function : special_func_expr */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Ranking Window Function Syntax\nDESCRIPTION: This snippet defines the syntax for ranking window functions like RANK, DENSE_RANK, ROW_NUMBER, and NTILE. It specifies how these functions are used with the OVER clause.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_193\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : ROW_NUMBER \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : ROW_NUMBER \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : NTILE \"(\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : NTILE \"(\" expr \")\" OVER new_generalized_window_clause */\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Component for Ollama Embedding Model Parameters in JSX\nDESCRIPTION: This snippet renders a ConfigDetail component that displays the complete configuration schema for OllamaEmbeddingDeployModelParameters. It includes all required and optional parameters with their types, descriptions, and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/embedding/ollama_ollamaembeddingdeploymodelparameters_b511e0.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"OllamaEmbeddingDeployModelParameters\",\n  \"description\": \"Ollama Embeddings deploy model parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/ollama\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"api_url\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The URL of the embeddings API.\",\n      \"defaultValue\": \"http://localhost:11434\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Select with Parentheses Production Rules\nDESCRIPTION: This snippet defines production rules for SQL select statements enclosed in parentheses, including options for ordering, fetching, and nesting of select statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_143\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_with_parens : \"(\" select_no_parens \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_no_parens fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_no_parens order_by \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_no_parens order_by fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_with_parens \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select order_by \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select order_by fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens_with_order_and_limit : select_with_parens opt_order_by limit_clause */\n\n/*! Production::    select_with_parens_with_order_and_limit : select_with_parens order_by */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Core SDK\nDESCRIPTION: Command to install the dbgpt core SDK which includes AWEL operator orchestration capabilities\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/changelog/Released_V0.5.0.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dbgpt\n```\n\n----------------------------------------\n\nTITLE: Initializing ServiceConfig in Python\nDESCRIPTION: This code snippet shows the signature for initializing a ServiceConfig object. It takes two optional parameters: web for web service configuration and model for model service configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/config_serviceconfig_81a10f.mdx#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nServiceConfig(web: dbgpt_app.config.ServiceWebParameters = <factory>, model: dbgpt.model.parameter.ModelServiceConfig = <factory>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tongyi Embedding Model Parameters in JSON\nDESCRIPTION: JSON configuration for TongyiEmbeddingDeployModelParameters that defines the required and optional parameters for deploying a Tongyi embedding model. This includes the model name, provider specification, verbosity settings, concurrency limits, API key, and backend model name.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/embedding/tongyi_tongyiembeddingdeploymodelparameters_a7cbb4.mdx#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"TongyiEmbeddingDeployModelParameters\",\n  \"description\": \"Qianfan Embeddings deploy model parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/tongyi\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key for the embeddings API.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\",\n      \"defaultValue\": \"text-embedding-v1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning Configuration and Training\nDESCRIPTION: Setting up training arguments and starting the fine-tuning process using LoRA on CodeLlama-13b model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/dbgpt_hub.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrain_args = {\n            \"model_name_or_path\": \"codellama/CodeLlama-13b-Instruct-hf\",\n            \"do_train\": True,\n            \"dataset\": \"example_text2sql_train\",\n            \"max_source_length\": 2048,\n            \"max_target_length\": 512,\n            \"finetuning_type\": \"lora\",\n            \"lora_target\": \"q_proj,v_proj\",\n            \"template\": \"llama2\",\n            \"lora_rank\": 64,\n            \"lora_alpha\": 32,\n            \"output_dir\": \"dbgpt_hub/output/adapter/CodeLlama-13b-sql-lora\",\n            \"overwrite_cache\": True,\n            \"overwrite_output_dir\": True,\n            \"per_device_train_batch_size\": 1,\n            \"gradient_accumulation_steps\": 16,\n            \"lr_scheduler_type\": \"cosine_with_restarts\",\n            \"logging_steps\": 50,\n            \"save_steps\": 2000,\n            \"learning_rate\": 2e-4,\n            \"num_train_epochs\": 8,\n            \"plot_loss\": True,\n            \"bf16\": True,\n}\n\nstart_sft(train_args)\n```\n\n----------------------------------------\n\nTITLE: Generating Tool Prompts in Python\nDESCRIPTION: This asynchronous function demonstrates how to generate tool prompts for both default and OpenAI formats using the get_prompt method of the tool object.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def show_prompts():\n    from dbgpt.agent.resource import BaseTool\n    tool: BaseTool= simple_calculator._tool\n\n    tool_prompt = await tool.get_prompt()\n    openai_tool_prompt = await tool.get_prompt(prompt_type=\"openai\")\n    print(f\"Tool Prompt: \\n{tool_prompt}\\n\")\n    print(f\"OpenAI Tool Prompt: \\n{openai_tool_prompt}\\n\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(show_prompts())\n```\n\n----------------------------------------\n\nTITLE: Installing Git and Git LFS for Model Download\nDESCRIPTION: Commands to install Git and Git Large File Storage (LFS) which are required for downloading models from ModelScope or Hugging Face.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git git-lfs\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Environment Variables\nDESCRIPTION: Bash commands to set the necessary environment variables for authenticating with the OpenAI API, including the API key and base URL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/quickstart_basic_awel_workflow.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=sk-xx\nexport OPENAI_API_BASE=https://xx:80/v1\n```\n\n----------------------------------------\n\nTITLE: Pulling Nomic Embed Text Model\nDESCRIPTION: Command to pull the Nomic embedding model using Ollama\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/ollama.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nollama pull nomic-embed-text\n```\n\n----------------------------------------\n\nTITLE: Using SimpleCallDataInputSource with InputOperator\nDESCRIPTION: Example showing how to use InputOperator with a SimpleCallDataInputSource to accept data during workflow execution. This demonstrates passing runtime data to a workflow.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# 2. SimpleCallDataInputSource - è°ç¨æ¶ä¼ å¥æ°æ®\n\nwith DAG(\"call_data_dag\") as dag:\n    input_source = SimpleCallDataInputSource()\n    input_task = InputOperator(input_source=input_source)\n    \n    print_task = MapOperator(map_function=lambda x: print(f\"Received: {x}\"))\n    input_task >> print_task\n\n# è¿è¡æ¶ä¼ å¥æ°æ®\nawait print_task.call({\"name\": \"John\", \"age\": 25})\n```\n\n----------------------------------------\n\nTITLE: Grammar Production Rules for ALTER Statements\nDESCRIPTION: Collection of grammar production rules that define the syntax for various ALTER statements in SQL. These rules are used by a parser to validate and process SQL ALTER commands for different database objects like indexes, resources, systems, and more.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_8\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n/*! Production::    alter_index_option : ALTER CHECK constraint_name check_state */\n\n/*! Production::    alter_index_option : ALTER CONSTRAINT constraint_name check_state */\n\n/*! Production::    alter_index_option : ALTER INDEX index_name parallel_option */\n\n/*! Production::    alter_index_option : ALTER INDEX index_name visibility_option */\n\n/*! Production::    alter_index_option : DROP PRIMARY KEY */\n\n/*! Production::    alter_index_option : DROP key_or_index index_name */\n\n/*! Production::    alter_index_option : MODIFY CONSTRAINT constraint_name opt_rely_option opt_enable_option opt_validate_option */\n\n/*! Production::    alter_index_option : RENAME key_or_index index_name TO index_name */\n\n/*! Production::    alter_index_option_oracle : RENAME TO index_name */\n\n/*! Production::    alter_index_stmt : ALTER INDEX relation_factor alter_index_actions */\n\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT ALTER KEYSTORE PASSWORD IDENTIFIED BY password SET password */\n\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY password */\n\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT SET KEYSTORE CLOSE IDENTIFIED BY password */\n\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY password */\n\n/*! Production::    alter_or_change_or_modify : ALTER */\n\n/*! Production::    alter_or_change_or_modify : CHANGE */\n\n/*! Production::    alter_or_change_or_modify : MODIFY */\n\n/*! Production::    alter_outline_stmt : ALTER OUTLINE relation_name ADD explainable_stmt opt_outline_target */\n\n/*! Production::    alter_package_clause : COMPILE opt_debug opt_compile_unit opt_reuse_settings */\n\n/*! Production::    alter_package_clause : EDITIONABLE */\n\n/*! Production::    alter_package_clause : NONEDITIONABLE */\n\n/*! Production::    alter_package_stmt : ALTER PACKAGE_P pl_schema_name alter_package_clause */\n\n/*! Production::    alter_partition_option : ADD PARTITION opt_partition_range_or_list */\n\n/*! Production::    alter_partition_option : DROP PARTITION drop_partition_name_list */\n\n/*! Production::    alter_partition_option : DROP SUBPARTITION drop_partition_name_list */\n\n/*! Production::    alter_partition_option : REORGANIZE PARTITION name_list INTO opt_partition_range_or_list */\n\n/*! Production::    alter_partition_option : SPLIT PARTITION relation_factor split_actions */\n\n/*! Production::    alter_partition_option : TRUNCATE PARTITION name_list */\n\n/*! Production::    alter_partition_option : TRUNCATE SUBPARTITION name_list */\n\n/*! Production::    alter_partition_option : add_range_or_list_partition */\n\n/*! Production::    alter_partition_option : modify_partition_info */\n\n/*! Production::    alter_procedure_stmt : ALTER PROCEDURE pl_schema_name sp_alter_clause */\n\n/*! Production::    alter_profile_stmt : ALTER PROFILE profile_name LIMIT password_parameters */\n\n/*! Production::    alter_resource_pool_option : UNIT opt_equal_mark relation_name_or_string */\n\n/*! Production::    alter_resource_pool_option : UNIT_NUM opt_equal_mark INTNUM opt_shrink_unit_option */\n\n/*! Production::    alter_resource_pool_option : ZONE_LIST opt_equal_mark \"(\" zone_list \")\" */\n\n/*! Production::    alter_resource_pool_option_list : alter_resource_pool_option */\n\n/*! Production::    alter_resource_pool_option_list : alter_resource_pool_option_list \",\" alter_resource_pool_option */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL MERGE \"(\" resource_pool_list \")\" INTO \"(\" resource_pool_list \")\" */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL relation_name SPLIT INTO \"(\" resource_pool_list \")\" ON \"(\" zone_list \")\" */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL relation_name alter_resource_pool_option_list */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE TENANT relation_name UNIT_NUM opt_equal_mark INTNUM opt_shrink_tenant_unit_option */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE UNIT relation_name opt_resource_unit_option_list */\n\n/*! Production::    alter_sequence_stmt : ALTER SEQUENCE relation_factor opt_sequence_option_list */\n\n/*! Production::    alter_session_set_clause : set_system_parameter_clause_list */\n\n/*! Production::    alter_session_stmt : ALTER SESSION SET CURRENT_SCHEMA COMP_EQ current_schema */\n\n/*! Production::    alter_session_stmt : ALTER SESSION SET ISOLATION_LEVEL COMP_EQ session_isolation_level */\n\n/*! Production::    alter_session_stmt : ALTER SESSION SET alter_session_set_clause */\n\n/*! Production::    alter_system_set_clause : set_system_parameter_clause */\n\n/*! Production::    alter_system_set_clause_list : alter_system_set_clause */\n\n/*! Production::    alter_system_set_clause_list : alter_system_set_clause_list alter_system_set_clause */\n\n/*! Production::    alter_system_set_parameter_action : BACKUP_BACKUP_DEST COMP_EQ STRING_VALUE opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : CLUSTER_ID COMP_EQ conf_const opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : NAME_OB COMP_EQ conf_const opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : OBCONFIG_URL COMP_EQ STRING_VALUE opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : ROOTSERVICE_LIST COMP_EQ STRING_VALUE opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : TABLET_SIZE COMP_EQ conf_const opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_actions : alter_system_set_parameter_action */\n\n/*! Production::    alter_system_set_parameter_actions : alter_system_set_parameter_actions \",\" alter_system_set_parameter_action */\n\n/*! Production::    alter_system_settp_actions : %epsilon */\n\n/*! Production::    alter_system_settp_actions : alter_system_settp_actions \",\" settp_option */\n\n/*! Production::    alter_system_settp_actions : settp_option */\n\n/*! Production::    alter_system_stmt : ALTER DISKGROUP relation_name ADD DISK STRING_VALUE opt_disk_alias ip_port opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER DISKGROUP relation_name DROP DISK STRING_VALUE ip_port opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ADD ARBITRATION SERVICE STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ADD RESTORE SOURCE STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ADD ZONE relation_name_or_string add_or_alter_zone_options */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ALTER PLAN BASELINE opt_tenant_name opt_sql_id opt_baseline_id SET baseline_asgn_factor */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ARCHIVELOG opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP BACKUPPIECE opt_equal_mark INTNUM opt_with_active_piece opt_tenant_info opt_backup_backup_dest */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP BACKUPSET ALL opt_tenant_info opt_backup_backup_dest */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP BACKUPSET opt_equal_mark INTNUM opt_tenant_info opt_backup_backup_dest */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP DATABASE opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP DATABASE opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL DATABASE opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL DATABASE opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL opt_backup_tenant_list opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL opt_backup_tenant_list opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP opt_backup_tenant_list opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP opt_backup_tenant_list opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BOOTSTRAP opt_cluster_type server_info_list opt_primary_rootservice_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BOOTSTRAP server_info_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL ALL BACKUP FORCE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL BACKUP BACKUPPIECE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL BACKUP BACKUPSET */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL BACKUP opt_backup_tenant_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL DELETE BACKUP opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL MIGRATE UNIT INTNUM */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL VALIDATE INTNUM opt_copy_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL cancel_task_type TASK STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CHANGE TENANT change_tenant_name_or_tenant_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CHECKPOINT */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CHECKPOINT SLOG opt_tenant_info ip_port */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR LOCATION CACHE opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR MERGE ERROR_P */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR MERGE ERROR_P opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR RESTORE SOURCE */\n```\n\n----------------------------------------\n\nTITLE: Setting Language Preference for DB-GPT Docker Build\nDESCRIPTION: Command to set the preferred language (Chinese in this case) for the DB-GPT Docker image. The default is English.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --language zh\n```\n\n----------------------------------------\n\nTITLE: Loading Test Data (Windows)\nDESCRIPTION: Batch command to load test data into the local database for DB-GPT on Windows systems.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n.\\scripts\\examples\\load_examples.bat\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Miscellaneous Production Rules\nDESCRIPTION: This snippet defines production rules for various SQL constructs, including pragmas, server options, actions, and set statements for variables, passwords, and transactions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_145\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    serially_reusable_pragma : PRAGMA SERIALLY_REUSABLE */\n\n/*! Production::    serverOption : DATABASE STRING_LITERAL */\n\n/*! Production::    serverOption : HOST STRING_LITERAL */\n\n/*! Production::    serverOption : OWNER STRING_LITERAL */\n\n/*! Production::    serverOption : PASSWORD STRING_LITERAL */\n\n/*! Production::    serverOption : PORT decimalLiteral */\n\n/*! Production::    serverOption : SOCKET STRING_LITERAL */\n\n/*! Production::    serverOption : USER STRING_LITERAL */\n\n/*! Production::    serverOptions : serverOption */\n\n/*! Production::    serverOptions : serverOption COMMA serverOptions */\n\n/*! Production::    server_action : ADD */\n\n/*! Production::    server_action : CANCEL DELETE */\n\n/*! Production::    server_action : DELETE */\n\n/*! Production::    server_action : FORCE STOP */\n\n/*! Production::    server_action : ISOLATE */\n\n/*! Production::    server_action : START */\n\n/*! Production::    server_action : STOP */\n\n/*! Production::    setAutocommitStatement : SET AUTOCOMMIT EQUAL_SYMBOL boolNumValue */\n\n/*! Production::    setFullIdAssign : fullId assign expression */\n\n/*! Production::    setFullIdAssign : fullId assign expression COMMA setFullIdAssign */\n\n/*! Production::    setPasswordStatement : SET PASSWORD opt_forUser EQUAL_SYMBOL setPasswordValue */\n\n/*! Production::    setPasswordValue : STRING_LITERAL */\n\n/*! Production::    setPasswordValue : passwordFunctionClause */\n\n/*! Production::    setStatement : SET NAMES DEFAULT */\n\n/*! Production::    setStatement : SET NAMES charsetName opt_collateConfig */\n\n/*! Production::    setStatement : SET charsetKeywords charsetValues */\n\n/*! Production::    setStatement : SET setFullIdAssign */\n\n/*! Production::    setStatement : SET setVariablesAssign */\n\n/*! Production::    setStatement : setAutocommitStatement */\n\n/*! Production::    setStatement : setPasswordStatement */\n\n/*! Production::    setStatement : setTransactionStatement */\n\n/*! Production::    setTransactionStatement : SET opt_transactionScope TRANSACTION transactionOptions */\n\n/*! Production::    setVariablesAssign : variableClause assign expression */\n\n/*! Production::    setVariablesAssign : variableClause assign expression COMMA setVariablesAssign */\n```\n\n----------------------------------------\n\nTITLE: Defining Additional ALTER SYSTEM Operations in SQL\nDESCRIPTION: This snippet continues defining ALTER SYSTEM statements, including operations for system freezing, unit migration, replica management, and various system-wide refreshes and reloads.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_system_stmt : ALTER SYSTEM MAJOR FREEZE opt_ignore_server_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MAJOR FREEZE opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MIGRATE UNIT opt_equal_mark INTNUM DESTINATION opt_equal_mark STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MINOR FREEZE opt_tenant_list_or_ls_or_tablet_id opt_server_list opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MINOR FREEZE opt_tenant_list_or_partition_id_desc opt_server_list opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM NOARCHIVELOG opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RECYCLE REPLICA opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH IO CALIBRATION opt_storage_name opt_calibration_list opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH MEMORY STAT opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH SCHEMA opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH TABLES IN SESSION INTNUM */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH TIME_ZONE_INFO */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD GTS */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD SERVER */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD UNIT */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD ZONE */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Select Clause Production Rules\nDESCRIPTION: This snippet defines production rules for various forms of SQL select clauses, including simple selects, hierarchical queries, and selects with ordering and limiting.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_139\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_clause : no_table_select */\n\n/*! Production::    select_clause : no_table_select_with_hierarchical_query */\n\n/*! Production::    select_clause : no_table_select_with_order_and_limit */\n\n/*! Production::    select_clause : select_with_hierarchical_query */\n\n/*! Production::    select_clause : select_with_parens_with_order_and_limit */\n\n/*! Production::    select_clause : simple_select */\n\n/*! Production::    select_clause : simple_select_with_order_and_limit */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER SYSTEM Statements for System Management and Upgrades in SQL\nDESCRIPTION: This snippet defines ALTER SYSTEM statements for stopping upgrades, suspending backups, switching replicas, validating backups, and various system-wide operations and upgrades.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_system_stmt : ALTER SYSTEM STOP UPGRADE JOB */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SUSPEND BACKUP */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SWITCH REPLICA ls_role ls_server_or_server_or_zone_or_tenant */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SWITCH REPLICA partition_role partition_id_or_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SWITCH ROOTSERVICE partition_role server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM UPGRADE VIRTUAL SCHEMA */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM VALIDATE BACKUPSET INTNUM opt_copy_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM VALIDATE DATABASE opt_copy_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM WASH MEMORY FRAGMENTATION opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM alter_or_change_or_modify REPLICA partition_id_desc ip_port alter_or_change_or_modify change_actions opt_force */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM alter_or_change_or_modify ZONE relation_name_or_string opt_set add_or_alter_zone_options */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM opt_set alter_system_set_parameter_actions */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM server_action SERVER server_list opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM suspend_or_resume MERGE opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM suspend_or_resume MERGE opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM suspend_or_resume RECOVERY opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM upgrade_action ROLLING UPGRADE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM upgrade_action UPGRADE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM zone_action ZONE relation_name_or_string */\n\n/*! Production::    alter_system_stmt : SET DECRYPTION IDENTIFIED BY string_list */\n\n/*! Production::    alter_system_stmt : SET ENCRYPTION ON IDENTIFIED BY STRING_VALUE ONLY */\n```\n\n----------------------------------------\n\nTITLE: Initializing TracerParameters Configuration with Optional Parameters in Python\nDESCRIPTION: The TracerParameters class constructor with optional parameters for configuring OpenTelemetry tracing in DB-GPT. Parameters include file path for storing traces, root operation name, exporter type, OTLP endpoint and connection settings, and custom tracer storage class.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/utils/tracer_impl_tracerparameters_f8f272.mdx#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTracerParameters(file: Optional[str] = None, root_operation_name: Optional[str] = None, exporter: Optional[str] = None, otlp_endpoint: Optional[str] = None, otlp_insecure: Optional[bool] = None, otlp_timeout: Optional[int] = None, tracer_storage_cls: Optional[str] = None)\n```\n\n----------------------------------------\n\nTITLE: Rendering PGVector Configuration Details in JSX\nDESCRIPTION: This code snippet uses a ConfigDetail component to render the PGVector configuration documentation. It includes parameters for user authentication and connection settings for PostgreSQL vector databases.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/vector_store/pgvector_store_pgvectorconfig_3ef448.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"PGVectorConfig\",\n  \"description\": \"PG vector config.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The user of vector store, if not set, will use the default user.\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The password of vector store, if not set, will use the default password.\"\n    },\n    {\n      \"name\": \"connection_string\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Delete Flow API Endpoint\nDESCRIPTION: API endpoint for deleting a flow within DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nDELETE /api/v2/serve/awel/flows\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request with cURL\nDESCRIPTION: This snippet demonstrates how to send a non-streaming chat completion request to the DB-GPT API using cURL. It includes setting the API key, specifying headers, and sending the request body.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/chat.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=\"dbgpt\"\n\ncurl -X POST \"http://localhost:5670/api/v2/chat/completions\" \\\n   -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n   -H \"accept: application/json\" \\\n   -H \"Content-Type: application/json\" \\\n   -d \"{\\\"messages\\\":\\\"Hello\\\",\\\"model\\\":\\\"gpt-4o\\\", \\\"stream\\\": false}\"\n```\n\n----------------------------------------\n\nTITLE: Chat Datasource Python Example\nDESCRIPTION: Example of using Python client to make a chat completion request\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\n\nDBGPT_API_KEY = \"dbgpt\"\nDB_NAME=\"{your_db_name}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = client.chat(\n    messages=\"show space datas limit 5\", \n    model=\"gpt-4o\", \n    chat_mode=\"chat_data\", \n    chat_param=DB_NAME\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Test Data (Linux)\nDESCRIPTION: Bash command to load test data into the local database for DB-GPT on Linux systems.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nbash ./scripts/examples/load_examples.sh\n```\n\n----------------------------------------\n\nTITLE: Example Chat Output\nDESCRIPTION: Sample output showing the multi-round conversation between user and AI about Elon Musk.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/multi_round_chat_withllm.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nFirst round\nUser: Who is elon musk?\nAI: Elon Musk is a well-known entrepreneur and business magnate. He is the CEO and founder of SpaceX, Tesla Inc., Neuralink, and The Boring Company. Musk is known for his work in the technology and space industries, and he is also involved in the development of electric vehicles, renewable energy, and artificial intelligence.\n\nSecond round\nUser: Is he rich?\nAI: Yes, Elon Musk is one of the richest people in the world. As the CEO and founder of multiple successful companies, including SpaceX and Tesla, his net worth fluctuates but is consistently in the billions of dollars.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenAI Proxy\nDESCRIPTION: Command to install dependencies required for using DB-GPT with OpenAI proxy.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Request Body Model in Python\nDESCRIPTION: This code defines a Pydantic model for the HTTP request body, specifying the expected fields and their types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/get_started.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TriggerReqBody(BaseModel):\n    name: str = Field(..., description=\"User name\")\n    age: int = Field(18, description=\"User age\")\n```\n\n----------------------------------------\n\nTITLE: Compound Statement Grammar Rules\nDESCRIPTION: Production rules for compound statements including blocks, loops, conditionals and cursor operations\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    compoundStatement : blockStatement */\n\n/*! Production::    compoundStatement : caseStatement */\n\n/*! Production::    compoundStatement : cursorStatement */\n\n/*! Production::    compoundStatement : ifStatement */\n```\n\n----------------------------------------\n\nTITLE: Disabling Tsinghua Ubuntu Mirror for DB-GPT Docker Build\nDESCRIPTION: Command to disable the use of Tsinghua Ubuntu mirror during DB-GPT Docker image building.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --use-tsinghua-ubuntu false\n```\n\n----------------------------------------\n\nTITLE: Creating Models Directory\nDESCRIPTION: Command to create a directory for storing downloaded models locally before running the Docker container.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ./models\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER SYSTEM Statements in SQL\nDESCRIPTION: This snippet defines the syntax for various ALTER SYSTEM statements, including operations like clearing root tables, managing backups, enabling/disabling SQL throttling, flushing caches, and managing system-wide settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR ROOTTABLE opt_tenant_name */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE BACKUPPIECE INTNUM opt_copy_id opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE BACKUPSET INTNUM opt_copy_id opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE OBSOLETE BACKUP opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DISABLE SQL THROTTLE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DROP DELETE BACKUP policy_name opt_backup_tenant_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DROP REPLICA partition_id_desc ip_port opt_create_timestamp opt_zone_desc opt_force */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DROP TABLES IN SESSION INTNUM */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ENABLE SQL THROTTLE opt_sql_throttle_for_priority opt_sql_throttle_using_cond */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH DAG WARNINGS */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH ILOGCACHE opt_file_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH KVCACHE opt_tenant_name opt_cache_name */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH SQL cache_type opt_tenant_list flush_scope */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH cache_type CACHE opt_namespace opt_sql_id opt_databases opt_tenant_list flush_scope */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH cache_type CACHE opt_tenant_list flush_scope */\n```\n\n----------------------------------------\n\nTITLE: SQL Bit Expression Production Rules\nDESCRIPTION: Grammar rules defining various bit and arithmetic expressions including operators like -, /, ^, |, and special operators like DIV, MOD.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    bit_expr : bit_expr \"-\" INTERVAL expr date_unit */\n/*! Production::    bit_expr : bit_expr \"-\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"/\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"^\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"|\" bit_expr */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for AUDIT Operations\nDESCRIPTION: These productions define the syntax for various AUDIT and NOAUDIT operations, including specifying audit options, users, and objects to be audited.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    audit_all_shortcut : ALTER */\n\n/*! Production::    audit_all_shortcut : ALTER SEQUENCE */\n\n/*! Production::    audit_all_shortcut : ALTER SYSTEM */\n\n/*! Production::    audit_all_shortcut : ALTER TABLE */\n\n/*! Production::    audit_all_shortcut : AUDIT */\n\n/*! Production::    audit_all_shortcut : CLUSTER */\n\n/*! Production::    audit_all_shortcut : COMMENT */\n\n/*! Production::    audit_all_shortcut : COMMENT TABLE */\n\n/*! Production::    audit_all_shortcut : CONTEXT */\n\n/*! Production::    audit_all_shortcut : DATABASE LINK */\n\n/*! Production::    audit_all_shortcut : DELETE */\n\n/*! Production::    audit_all_shortcut : DELETE TABLE */\n\n/*! Production::    audit_all_shortcut : EXECUTE */\n\n/*! Production::    audit_all_shortcut : EXECUTE PROCEDURE */\n\n/*! Production::    audit_all_shortcut : FLASHBACK */\n\n/*! Production::    audit_all_shortcut : GRANT */\n\n/*! Production::    audit_all_shortcut : GRANT PROCEDURE */\n\n/*! Production::    audit_all_shortcut : GRANT SEQUENCE */\n\n/*! Production::    audit_all_shortcut : GRANT TABLE */\n\n/*! Production::    audit_all_shortcut : GRANT TYPE */\n\n/*! Production::    audit_all_shortcut : INDEX */\n\n/*! Production::    audit_all_shortcut : INSERT */\n\n/*! Production::    audit_all_shortcut : INSERT TABLE */\n\n/*! Production::    audit_all_shortcut : MATERIALIZED VIEW */\n\n/*! Production::    audit_all_shortcut : NOT EXISTS */\n\n/*! Production::    audit_all_shortcut : OUTLINE */\n\n/*! Production::    audit_all_shortcut : PROCEDURE */\n\n/*! Production::    audit_all_shortcut : PROFILE */\n\n/*! Production::    audit_all_shortcut : PUBLIC DATABASE LINK */\n\n/*! Production::    audit_all_shortcut : PUBLIC SYNONYM */\n\n/*! Production::    audit_all_shortcut : RENAME */\n\n/*! Production::    audit_all_shortcut : ROLE */\n\n/*! Production::    audit_all_shortcut : SELECT */\n\n/*! Production::    audit_all_shortcut : SELECT SEQUENCE */\n\n/*! Production::    audit_all_shortcut : SELECT TABLE */\n\n/*! Production::    audit_all_shortcut : SEQUENCE */\n\n/*! Production::    audit_all_shortcut : SESSION */\n\n/*! Production::    audit_all_shortcut : SYNONYM */\n\n/*! Production::    audit_all_shortcut : SYSTEM AUDIT */\n\n/*! Production::    audit_all_shortcut : SYSTEM GRANT */\n\n/*! Production::    audit_all_shortcut : TABLE */\n\n/*! Production::    audit_all_shortcut : TABLESPACE */\n\n/*! Production::    audit_all_shortcut : TRIGGER */\n\n/*! Production::    audit_all_shortcut : TYPE */\n\n/*! Production::    audit_all_shortcut : UPDATE */\n\n/*! Production::    audit_all_shortcut : UPDATE TABLE */\n\n/*! Production::    audit_all_shortcut : USER */\n\n/*! Production::    audit_all_shortcut : VIEW */\n\n/*! Production::    audit_all_shortcut_list : audit_all_shortcut */\n\n/*! Production::    audit_all_shortcut_list : audit_all_shortcut_list \",\" audit_all_shortcut */\n\n/*! Production::    audit_by_session_access_option : BY ACCESS */\n\n/*! Production::    audit_clause : audit_operation_clause auditing_by_user_clause op_audit_tail_clause */\n\n/*! Production::    audit_clause : audit_operation_clause auditing_on_clause op_audit_tail_clause */\n\n/*! Production::    audit_clause : audit_operation_clause op_audit_tail_clause */\n\n/*! Production::    audit_operation_clause : ALL */\n\n/*! Production::    audit_operation_clause : ALL STATEMENTS */\n\n/*! Production::    audit_operation_clause : audit_all_shortcut_list */\n\n/*! Production::    audit_or_noaudit : AUDIT */\n\n/*! Production::    audit_or_noaudit : NOAUDIT */\n\n/*! Production::    audit_stmt : audit_or_noaudit audit_clause */\n\n/*! Production::    audit_user : NAME_OB */\n\n/*! Production::    audit_user : STRING_VALUE */\n\n/*! Production::    audit_user : unreserved_keyword_normal */\n\n/*! Production::    audit_user_list : audit_user_list \",\" audit_user_with_host_name */\n\n/*! Production::    audit_user_list : audit_user_with_host_name */\n\n/*! Production::    audit_user_with_host_name : audit_user opt_host_name */\n\n/*! Production::    audit_whenever_option : WHENEVER NOT SUCCESSFUL */\n\n/*! Production::    audit_whenever_option : WHENEVER SUCCESSFUL */\n\n/*! Production::    auditing_by_user_clause : BY audit_user_list */\n\n/*! Production::    auditing_by_user_clause : BY user_list */\n\n/*! Production::    auditing_on_clause : ON DEFAULT */\n\n/*! Production::    auditing_on_clause : ON normal_relation_factor */\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Details for ServeConfig in React JSX\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render the configuration details for the ServeConfig object. It includes parameters for API keys and default model selection.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_313252.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the conversation serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    },\n    {\n      \"name\": \"default_model\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Default model for the conversation\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing DB Expert Assistant AWEL Workflow in DB-GPT\nDESCRIPTION: This command installs the 'db-expert-assisant' AWEL workflow for intent recognition. It demonstrates the installation process and confirmation of successful installation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/app/data_analysis_app_develop.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt app install db-expert-assisant\n```\n\n----------------------------------------\n\nTITLE: Current Timestamp Function Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for timestamp functions that return the current timestamp with various options for format and precision.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : CURRENT_TIMESTAMP \"(\" INTNUM \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : LOCALTIMESTAMP \"(\" INTNUM \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : NOW \"(\" \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : NOW \"(\" INTNUM \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : SYSDATE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : SYSTIMESTAMP \"(\" INTNUM \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : now_synonyms_func opt_time_func_fsp_i */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func_params : \"(\" cur_timestamp_func_params \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func_params : cur_timestamp_func */\n```\n\n----------------------------------------\n\nTITLE: Rendering RDBMSDatasourceParameters Configuration in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to render the configuration details for RDBMSDatasourceParameters. It includes a detailed object with all the necessary parameters for connecting to and configuring an RDBMS datasource.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/base_rdbmsdatasourceparameters_4f774f.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"RDBMSDatasourceParameters\",\n  \"description\": \"RDBMS datasource parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database host, e.g., localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Database port, e.g., 3306\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database user to connect\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database name\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database driver, e.g., mysql+pymysql\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"pool_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool size, default 5\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"max_overflow\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Max overflow connections, default 10\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"pool_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool timeout, default 30\",\n      \"defaultValue\": \"30\"\n    },\n    {\n      \"name\": \"pool_recycle\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool recycle, default 3600\",\n      \"defaultValue\": \"3600\"\n    },\n    {\n      \"name\": \"pool_pre_ping\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Connection pool pre ping, default True\",\n      \"defaultValue\": \"True\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Prompt Templates with ProfileConfig\nDESCRIPTION: This code creates a ProfileConfig with custom prompt templates and demonstrates how to generate formatted system and user prompts from these templates with specific question input.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_to_prompt.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent import ProfileConfig\n\nprofile: ProfileConfig = ProfileConfig(\n    # The name of the agent\n    name=\"Aristotle\",\n    # The role of the agent\n    role=\"Summarizer\",\n    # The core functional goals of the agent tell LLM what it can do with it.\n    goal=(\n        \"Summarize answer summaries based on user questions from provided \"\n        \"resource information or from historical conversation memories.\"\n    ),\n    # Introduction and description of the agent, used for task assignment and display. \n    # If it is empty, the goal content will be used.\n    desc=(\n        \"You can summarize provided text content according to user's questions\"\n        \" and output the summarization.\"\n    ),\n    system_prompt_template=my_system_prompt_template,\n    user_prompt_template=my_user_prompt_template,\n)\n\nreal_profile = profile.create_profile()\n\nsystem_prompt = real_profile.format_system_prompt(question=\"What can you do?\")\nuser_prompt = real_profile.format_user_prompt(question=\"What can you do?\")\nprint(f\"System Prompt: \\n{system_prompt}\")\nprint(\"#\" * 50)\nprint(f\"User Prompt: \\n{user_prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Running the Print Data Example\nDESCRIPTION: Bash command to execute the input_operator_print_data.py script using Poetry.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/input_operator_print_data.py\n```\n\n----------------------------------------\n\nTITLE: Visualizing DAGs in Python\nDESCRIPTION: This snippet demonstrates how to visualize the created DAGs using AWEL's visualization capabilities. It shows methods for both standard Python environments and Jupyter Notebooks.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/first_rag_with_awel.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nknowledge_dag.visualize_dag()\nrag_dag.visualize_dag()\n\n# For Jupyter Notebook\ndisplay(knowledge_dag.show())\ndisplay(rag_dag.show())\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Knowledge Graph Processing API\nDESCRIPTION: Example response from the knowledge graph processing API showing retrieved document chunks with metadata. The response includes content, metadata, chunk identifiers, and other properties of the processed knowledge chunks.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/templates/Knowledge_Graph.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[\n    {\n        \"content\": \"\\\"What is AWEL?\\\": Agentic Workflow Expression Language(AWEL) is a set of intelligent agent workflow expression language specially designed for large model application\\ndevelopment. It provides great functionality and flexibility. Through the AWEL API, you can focus on the development of business logic for LLMs applications\\nwithout paying attention to cumbersome model and environment details.  \\nAWEL adopts a layered API design. AWEL's layered API design architecture is shown in the figure below.  \\n<p align=\\\"left\\\">\\n<img src={'/img/awel.png'} width=\\\"480px\\\"/>\\n</p>\",\n        \"metadata\": {\n            \"Header1\": \"What is AWEL?\",\n            \"source\": \"../../docs/docs/awel/awel.md\"\n        },\n        \"chunk_id\": \"c1ffa671-76d0-4c7a-b2dd-0b08dfd37712\",\n        \"chunk_name\": \"\",\n        \"score\": 0.0,\n        \"summary\": \"\",\n        \"separator\": \"\\n\",\n        \"retriever\": null\n    },...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Webserver with Specific Model and Remote Embedding\nDESCRIPTION: This command starts the DB-GPT webserver with a specific LLM model (glm-4-9b-chat) in light mode and using remote embedding.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nLLM_MODEL=glm-4-9b-chat dbgpt start webserver --light --remote_embedding\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Database and Schema Production Rules\nDESCRIPTION: This set of production rules defines database and schema-related constructs in MySQL, including database options, naming conventions, and associated keywords.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_45\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    databaseOrSchema : DATABASE */\n\n/*! Production::    databaseOrSchema : SCHEMA */\n\n/*! Production::    database_factor : relation_name */\n\n/*! Production::    database_key : DATABASE */\n\n/*! Production::    database_key : SCHEMA */\n\n/*! Production::    database_name : NAME_OB */\n\n/*! Production::    database_option : DATABASE_ID opt_equal_mark INTNUM */\n\n/*! Production::    database_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n\n/*! Production::    database_option : REPLICA_NUM opt_equal_mark INTNUM */\n\n/*! Production::    database_option : default_tablegroup */\n\n/*! Production::    database_option : opt_default_mark COLLATE opt_equal_mark collation_name */\n\n/*! Production::    database_option : opt_default_mark charset_key opt_equal_mark charset_name */\n\n/*! Production::    database_option : read_only_or_write */\n\n/*! Production::    database_option_list : database_option */\n\n/*! Production::    database_option_list : database_option_list database_option */\n\n/*! Production::    database_or_schema : DATABASE */\n\n/*! Production::    database_or_schema : SCHEMA */\n\n/*! Production::    databases_expr : DATABASES opt_equal_mark STRING_VALUE */\n\n/*! Production::    databases_or_schemas : DATABASES */\n\n/*! Production::    databases_or_schemas : SCHEMAS */\n```\n\n----------------------------------------\n\nTITLE: Adding Mode-Specific Extras to DB-GPT Docker Build\nDESCRIPTION: Command to add specific extras to a particular installation mode (VLLM in this case) for the DB-GPT Docker image.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode vllm --add-extras \"storage_milvus,datasource_postgres\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Models from ModelScope\nDESCRIPTION: Commands to clone model repositories from ModelScope, including a Qwen Coder model and an embedding model. This is recommended for users in China.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ./models\ngit lfs install\ngit clone https://www.modelscope.cn/Qwen/Qwen2.5-Coder-0.5B-Instruct.git\ngit clone https://www.modelscope.cn/BAAI/bge-large-zh-v1.5.git\ncd ..\n```\n\n----------------------------------------\n\nTITLE: MySQL Alter User Productions\nDESCRIPTION: Grammar rules for ALTER USER statements including authentication options, TLS requirements and resource limits.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alterUser : ALTER USER opt_ifExists userAuthOptions REQUIRE user_tlsOpt opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    alterUser : ALTER USER opt_ifExists userAuthOptions opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    alterUser : ALTER USER userSpecifications */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Various SQL Constructs\nDESCRIPTION: A collection of SQL grammar production rules defining syntax for various SQL constructs including column options, table expressions, comparison operators, statements, and other database elements. These rules specify the syntax for keywords like COLUMNS, FIELDS, COMMIT, and various statement types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    columns_or_fields : COLUMNS */\n\n/*! Production::    columns_or_fields : FIELDS */\n\n/*! Production::    commentAssign : COMMENT EQUAL_SYMBOL STRING_LITERAL */\n\n/*! Production::    commentAssign : COMMENT STRING_LITERAL */\n\n/*! Production::    commitWork : COMMIT opt_WORK */\n\n/*! Production::    commitWork : COMMIT opt_WORK AND opt_NO CHAIN */\n\n/*! Production::    commitWork : COMMIT opt_WORK opt_NO RELEASE */\n\n/*! Production::    commit_stmt : COMMIT COMMENT STRING_VALUE */\n\n/*! Production::    commit_stmt : COMMIT opt_hint_value opt_work */\n\n/*! Production::    commit_stmt : COMMIT opt_work */\n\n/*! Production::    common_cursor_attribute : FOUND */\n\n/*! Production::    common_cursor_attribute : ISOPEN */\n\n/*! Production::    common_cursor_attribute : NOTFOUND */\n\n/*! Production::    common_cursor_attribute : ROWCOUNT */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_no_parens \")\" */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_no_parens \")\" opt_search_clause opt_cycle_clause */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_with_parens \")\" */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_with_parens \")\" opt_search_clause opt_cycle_clause */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" subquery order_by opt_fetch_next \")\" opt_search_clause opt_cycle_clause */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" with_select \")\" */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" with_select \")\" opt_search_clause opt_cycle_clause */\n\n/*! Production::    comparisonOperator : EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : EXCLAMATION_SYMBOL EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : GREATER_SYMBOL */\n\n/*! Production::    comparisonOperator : GREATER_SYMBOL EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL EQUAL_SYMBOL GREATER_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL GREATER_SYMBOL */\n\n/*! Production::    compiler_parameter : identifier \"=\" identifier */\n\n/*! Production::    compiler_parameter_list : compiler_parameter */\n\n/*! Production::    compiler_parameter_list : compiler_parameter_list compiler_parameter */\n\n/*! Production::    complex_string_literal : STRING_VALUE */\n\n/*! Production::    complex_string_literal : STRING_VALUE string_val_list */\n\n/*! Production::    complex_string_literal : charset_introducer HEX_STRING_VALUE */\n\n/*! Production::    complex_string_literal : charset_introducer STRING_VALUE */\n\n/*! Production::    compoundStatement : blockStatement */\n\n/*! Production::    compoundStatement : caseStatement */\n\n/*! Production::    compoundStatement : cursorStatement */\n\n/*! Production::    compoundStatement : ifStatement */\n\n/*! Production::    compoundStatement : iterateStatement */\n\n/*! Production::    compoundStatement : leaveStatement */\n\n/*! Production::    compoundStatement : loopStatement */\n\n/*! Production::    compoundStatement : repeatStatement */\n\n/*! Production::    compoundStatement : returnStatement */\n\n/*! Production::    compoundStatement : whileStatement */\n\n/*! Production::    compound_dml_trigger : FOR dml_event_option opt_enable_or_disable opt_when_condition compound_trigger_body */\n\n/*! Production::    compound_trigger_body : COMPOUND TRIGGER opt_decl_stmt_ext_list timing_point_section_list END_KEY opt_tail_name */\n\n/*! Production::    compress_option : COMPRESS opt_compress_str */\n\n/*! Production::    compress_option : NOCOMPRESS */\n\n/*! Production::    condition_arg : BOOL_VALUE */\n\n/*! Production::    condition_arg : INTNUM */\n\n/*! Production::    condition_arg : QUESTIONMARK */\n\n/*! Production::    condition_arg : STRING_VALUE */\n\n/*! Production::    condition_arg : USER_VARIABLE */\n\n/*! Production::    condition_arg : column_name */\n\n/*! Production::    condition_information_item : QUESTIONMARK COMP_EQ condition_information_item_name */\n\n/*! Production::    condition_information_item : USER_VARIABLE COMP_EQ condition_information_item_name */\n\n/*! Production::    condition_information_item : diagnostics_info_ref COMP_EQ condition_information_item_name */\n\n/*! Production::    condition_information_item_list : condition_information_item */\n\n/*! Production::    condition_information_item_list : condition_information_item_list \",\" condition_information_item */\n\n/*! Production::    condition_information_item_name : CATALOG_NAME */\n\n/*! Production::    condition_information_item_name : CLASS_ORIGIN */\n\n/*! Production::    condition_information_item_name : COLUMN_NAME */\n\n/*! Production::    condition_information_item_name : CONSTRAINT_CATALOG */\n\n/*! Production::    condition_information_item_name : CONSTRAINT_NAME */\n\n/*! Production::    condition_information_item_name : CONSTRAINT_SCHEMA */\n\n/*! Production::    condition_information_item_name : CURSOR_NAME */\n\n/*! Production::    condition_information_item_name : MESSAGE_TEXT */\n\n/*! Production::    condition_information_item_name : MYSQL_ERRNO */\n\n/*! Production::    condition_information_item_name : RETURNED_SQLSTATE */\n```\n\n----------------------------------------\n\nTITLE: Shrink Space Statement Productions\nDESCRIPTION: Grammar rules for ALTER statements related to shrinking space on tables and tenants\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_150\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    shrink_space_stmt : ALTER TABLE relation_factor SHRINK SPACE */\n\n/*! Production::    shrink_space_stmt : ALTER TENANT ALL SHRINK SPACE */\n\n/*! Production::    shrink_space_stmt : ALTER TENANT relation_name SHRINK SPACE */\n```\n\n----------------------------------------\n\nTITLE: CREATE Statement Production Rules - SQL\nDESCRIPTION: SQL grammar production rules defining syntax for CREATE statements including tables, views, indexes, users, and other database objects. Each rule specifies the exact syntax pattern required for different types of CREATE operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_index_stmt : create_with_opt_hint opt_index_keyname INDEX opt_if_not_exists normal_relation_factor opt_index_using_algorithm ON relation_factor \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    create_keystore_stmt : ADMINISTER KEY MANAGEMENT CREATE KEYSTORE relation_name IDENTIFIED BY password */\n\n/*! Production::    create_outline_stmt : CREATE opt_replace OUTLINE relation_name ON STRING_VALUE USING HINT_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: Rendering Prompt Serve Configuration Details in JSX\nDESCRIPTION: This code snippet renders a ConfigDetail component with the configuration for the prompt serve module. It includes parameters for API keys, default user, and default system code.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_854dad.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the prompt serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    },\n    {\n      \"name\": \"default_user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Default user name for prompt\"\n    },\n    {\n      \"name\": \"default_sys_code\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Default system code for prompt\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Launching TuGraph Database Docker Container\nDESCRIPTION: Docker commands to pull and run TuGraph database, which is the first graph database supported by DB-GPT. It sets up the necessary ports for bolt protocol and enables plugins.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull tugraph/tugraph-runtime-centos7:4.5.1\ndocker run -d -p 7070:7070  -p 7687:7687 -p 9090:9090 --name tugraph_demo tugraph/tugraph-runtime-centos7:latest lgraph_server -d run --enable_plugin true\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Unreserved Keywords\nDESCRIPTION: This snippet showcases the pattern used throughout the file to define SQL keywords as unreserved normal keywords. Each keyword is defined separately using a production rule comment.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_183\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : M */\n\n/*! Production::    unreserved_keyword_normal : MAJOR */\n\n/*! Production::    unreserved_keyword_normal : MANAGEMENT */\n```\n\n----------------------------------------\n\nTITLE: Listing Knowledge Spaces with Python Client\nDESCRIPTION: Example of listing all knowledge spaces using the Python client library. Shows how to retrieve all spaces.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.knowledge import list_space\n\nDBGPT_API_KEY = \"dbgpt\"\nspace_id = \"{your_space_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await list_space(client=client)\n```\n\n----------------------------------------\n\nTITLE: Knowledge Delete Command Options\nDESCRIPTION: Command options for deleting knowledge spaces or specific documents within a space, with confirmation settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt knowledge delete --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge delete [OPTIONS]\n\n  Delete your knowledge space or document in space\n\nOptions:\n  --space_name TEXT  Your knowledge space name  [default: default]\n  --doc_name TEXT    The document name you want to delete. If doc_name is\n                     None, this command will delete the whole space.\n  -y                 Confirm your choice\n  --help             Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Expected Streaming Response Output\nDESCRIPTION: The expected output from the streaming endpoint when requested with n=5. The response returns numbers from 0 to 4, each on a new line, delivered as a stream.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.4_http_trigger_streaming.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0\n1\n2\n3\n4\n```\n\n----------------------------------------\n\nTITLE: Cloning Models from Hugging Face\nDESCRIPTION: Commands to clone model repositories from Hugging Face, including a Qwen Coder model and an embedding model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ./models\ngit lfs install\ngit clone https://huggingface.co/Qwen/Qwen2.5-Coder-0.5B-Instruct\ngit clone https://huggingface.co/BAAI/bge-large-zh-v1.5\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Connecting to Model Service API for Graph RAG\nDESCRIPTION: Python code to connect to a DB-GPT cluster API server to use LLM models. The API is compatible with OpenAI API format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nllm_client = OpenAILLMClient(api_base=\"http://localhost:8100/api/v1/\", api_key=\"{your_api_key}\")\n```\n\n----------------------------------------\n\nTITLE: Listing DB-GPT Model Services\nDESCRIPTION: This command displays all available model services in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/stand_alone.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt model list \n```\n\n----------------------------------------\n\nTITLE: ORDER BY Clause Grammar Productions\nDESCRIPTION: Grammar rules defining the structure of ORDER BY clauses in Oracle SQL, including sort expressions and direction specifiers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_104\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    orderByClause : ORDER BY orderByExprList */\n/*! Production::    orderByExprList : orderByExpression */\n/*! Production::    orderByExprList : orderByExpression COMMA orderByExprList */\n/*! Production::    orderByExpression : expression */\n/*! Production::    orderByExpression : expression ASC */\n/*! Production::    orderByExpression : expression DESC */\n```\n\n----------------------------------------\n\nTITLE: Building Lightweight OpenAI Proxy DB-GPT\nDESCRIPTION: Command to build a minimal DB-GPT OpenAI proxy image with official pip index, no Tsinghua Ubuntu mirror, and disabled example loading.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode openai \\\n  --use-tsinghua-ubuntu false \\\n  --pip-index-url https://pypi.org/simple \\\n  --load-examples false\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server with OpenAI Proxy Configuration\nDESCRIPTION: Command to start the DB-GPT server using a proxy configuration for OpenAI integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/hive_install.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Simple Identifier Productions\nDESCRIPTION: Extensive list of grammar rules defining valid simple identifiers in MySQL\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_152\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    simpleId : ACCOUNT */\n/*! Production::    simpleId : ACTION */\n/*! Production::    simpleId : AFTER */\n/* ... and many more simpleId productions ... */\n```\n\n----------------------------------------\n\nTITLE: SQL Diagnostics Information Productions\nDESCRIPTION: Grammar productions defining diagnostic information names and scopes for SQL error handling and condition information retrieval.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_52\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    diagnosticsConditionInformationName : COLUMN_NAME */\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_CATALOG */\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_NAME */\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_SCHEMA */\n/*! Production::    diagnosticsConditionInformationName : CURSOR_NAME */\n/*! Production::    diagnosticsConditionInformationName : MESSAGE_TEXT */\n/*! Production::    diagnosticsConditionInformationName : MYSQL_ERRNO */\n/*! Production::    diagnosticsConditionInformationName : RETURNED_SQLSTATE */\n/*! Production::    diagnosticsConditionInformationName : SCHEMA_NAME */\n/*! Production::    diagnosticsConditionInformationName : SUBCLASS_ORIGIN */\n/*! Production::    diagnosticsConditionInformationName : TABLE_NAME */\n```\n\n----------------------------------------\n\nTITLE: Creating Synonym Statements in SQL\nDESCRIPTION: Defines various syntax options for creating synonyms with different relation name combinations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_synonym_stmt : CREATE opt_replace opt_public SYNONYM relation_name \".\" relation_name FOR relation_name \".\" relation_name opt_dlink\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_synonym_stmt : CREATE opt_replace opt_public SYNONYM relation_name \".\" relation_name FOR relation_name opt_dlink\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_synonym_stmt : CREATE opt_replace opt_public SYNONYM relation_name FOR relation_name \".\" relation_name opt_dlink\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_synonym_stmt : CREATE opt_replace opt_public SYNONYM relation_name FOR relation_name opt_dlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Jina Embeddings Model Parameters with React MDX\nDESCRIPTION: JSX/MDX component that renders configuration documentation for Jina AI Embeddings deployment parameters. Includes detailed specifications for model name, provider, API settings, and performance configurations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/embedding/jina_jinaembeddingsdeploymodelparameters_40b0f2.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"JinaEmbeddingsDeployModelParameters\",\n  \"description\": \"Jina AI Embeddings deploy model parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/jina\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"api_url\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The URL of the embeddings API.\",\n      \"defaultValue\": \"https://api.jina.ai/v1/embeddings\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key for the embeddings API.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\",\n      \"defaultValue\": \"jina-embeddings-v2-base-en\"\n    },\n    {\n      \"name\": \"timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The timeout for the request in seconds.\",\n      \"defaultValue\": \"60\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: TuGraph Database Configuration for DB-GPT\nDESCRIPTION: Environment variable settings for .env file to configure the TuGraph graph database connection and Graph RAG behavior in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGRAPH_STORE_TYPE=TuGraph\nTUGRAPH_HOST=127.0.0.1\nTUGRAPH_PORT=7687\nTUGRAPH_USERNAME=admin\nTUGRAPH_PASSWORD=73@TuGraph\nGRAPH_COMMUNITY_SUMMARY_ENABLED=True  # enable the graph community summary\nTRIPLET_GRAPH_ENABLED=True  # enable the graph search for the triplets\nDOCUMENT_GRAPH_ENABLED=True  # enable the graph search for documents and chunks\nKNOWLEDGE_GRAPH_CHUNK_SEARCH_TOP_SIZE=5  # the number of the searched triplets in a retrieval\nKNOWLEDGE_GRAPH_EXTRACTION_BATCH_SIZE=20  # the batch size of triplet extraction from the text\nCOMMUNITY_SUMMARY_BATCH_SIZE=20  # the batch size of parallel community summary process\n```\n\n----------------------------------------\n\nTITLE: SQL Unreserved Keyword Definitions\nDESCRIPTION: A comprehensive list of SQL unreserved keywords marked as production definitions. These keywords are likely used in a SQL parser or grammar specification to define terms that have special meaning but aren't fully reserved words.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_181\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : CANCEL */\n\n/*! Production::    unreserved_keyword_normal : CASCADED */\n\n/*! Production::    unreserved_keyword_normal : CAST */\n\n/*! Production::    unreserved_keyword_normal : CATALOG_NAME */\n\n/*! Production::    unreserved_keyword_normal : CHAIN */\n\n/*! Production::    unreserved_keyword_normal : CHANGED */\n\n/*! Production::    unreserved_keyword_normal : CHARSET */\n\n/*! Production::    unreserved_keyword_normal : CHECKPOINT */\n\n/*! Production::    unreserved_keyword_normal : CHECKSUM */\n\n/*! Production::    unreserved_keyword_normal : CHUNK */\n\n/*! Production::    unreserved_keyword_normal : CIPHER */\n\n/*! Production::    unreserved_keyword_normal : CLASS_ORIGIN */\n\n/*! Production::    unreserved_keyword_normal : CLEAN */\n\n/*! Production::    unreserved_keyword_normal : CLEAR */\n\n/*! Production::    unreserved_keyword_normal : CLIENT */\n\n/*! Production::    unreserved_keyword_normal : CLOB */\n\n/*! Production::    unreserved_keyword_normal : CLOG */\n\n/*! Production::    unreserved_keyword_normal : CLOSE */\n\n/*! Production::    unreserved_keyword_normal : CLUSTER */\n\n/*! Production::    unreserved_keyword_normal : CLUSTER_ID */\n\n/*! Production::    unreserved_keyword_normal : CLUSTER_NAME */\n\n/*! Production::    unreserved_keyword_normal : COALESCE */\n\n/*! Production::    unreserved_keyword_normal : CODE */\n\n/*! Production::    unreserved_keyword_normal : COLLATE */\n\n/*! Production::    unreserved_keyword_normal : COLLATION */\n\n/*! Production::    unreserved_keyword_normal : COLLECT */\n\n/*! Production::    unreserved_keyword_normal : COLUMNS */\n\n/*! Production::    unreserved_keyword_normal : COLUMN_FORMAT */\n\n/*! Production::    unreserved_keyword_normal : COLUMN_NAME */\n\n/*! Production::    unreserved_keyword_normal : COLUMN_OUTER_JOIN_SYMBOL */\n\n/*! Production::    unreserved_keyword_normal : COLUMN_STAT */\n\n/*! Production::    unreserved_keyword_normal : COMMENT */\n\n/*! Production::    unreserved_keyword_normal : COMMIT */\n\n/*! Production::    unreserved_keyword_normal : COMMITTED */\n\n/*! Production::    unreserved_keyword_normal : COMPACT */\n\n/*! Production::    unreserved_keyword_normal : COMPLETION */\n\n/*! Production::    unreserved_keyword_normal : COMPRESSED */\n\n/*! Production::    unreserved_keyword_normal : COMPRESSION */\n\n/*! Production::    unreserved_keyword_normal : COMPUTE */\n\n/*! Production::    unreserved_keyword_normal : CONCURRENT */\n\n/*! Production::    unreserved_keyword_normal : CONDENSED */\n\n/*! Production::    unreserved_keyword_normal : CONNECTION */\n\n/*! Production::    unreserved_keyword_normal : CONNECT_BY_ISCYCLE */\n\n/*! Production::    unreserved_keyword_normal : CONNECT_BY_ISLEAF */\n\n/*! Production::    unreserved_keyword_normal : CONSISTENT */\n\n/*! Production::    unreserved_keyword_normal : CONSISTENT_MODE */\n\n/*! Production::    unreserved_keyword_normal : CONSTRAINT_CATALOG */\n\n/*! Production::    unreserved_keyword_normal : CONSTRAINT_NAME */\n\n/*! Production::    unreserved_keyword_normal : CONSTRAINT_SCHEMA */\n\n/*! Production::    unreserved_keyword_normal : CONTAINS */\n\n/*! Production::    unreserved_keyword_normal : CONTEXT */\n\n/*! Production::    unreserved_keyword_normal : CONTRIBUTORS */\n\n/*! Production::    unreserved_keyword_normal : CONVERT */\n\n/*! Production::    unreserved_keyword_normal : COPY */\n\n/*! Production::    unreserved_keyword_normal : CORR */\n\n/*! Production::    unreserved_keyword_normal : COUNT */\n\n/*! Production::    unreserved_keyword_normal : COVAR_POP */\n\n/*! Production::    unreserved_keyword_normal : COVAR_SAMP */\n\n/*! Production::    unreserved_keyword_normal : CPU */\n\n/*! Production::    unreserved_keyword_normal : CREATE_TIMESTAMP */\n\n/*! Production::    unreserved_keyword_normal : CROSS */\n\n/*! Production::    unreserved_keyword_normal : CTXCAT */\n\n/*! Production::    unreserved_keyword_normal : CTX_ID */\n\n/*! Production::    unreserved_keyword_normal : CUBE */\n\n/*! Production::    unreserved_keyword_normal : CUME_DIST */\n\n/*! Production::    unreserved_keyword_normal : CURDATE */\n\n/*! Production::    unreserved_keyword_normal : CURRENT */\n\n/*! Production::    unreserved_keyword_normal : CURRENT_DATE */\n\n/*! Production::    unreserved_keyword_normal : CURRENT_SCHEMA */\n\n/*! Production::    unreserved_keyword_normal : CURRENT_TIMESTAMP */\n\n/*! Production::    unreserved_keyword_normal : CURRENT_USER */\n\n/*! Production::    unreserved_keyword_normal : CURSOR_NAME */\n\n/*! Production::    unreserved_keyword_normal : CURTIME */\n\n/*! Production::    unreserved_keyword_normal : CYCLE */\n\n/*! Production::    unreserved_keyword_normal : DAG */\n\n/*! Production::    unreserved_keyword_normal : DATA */\n\n/*! Production::    unreserved_keyword_normal : DATABASES */\n\n/*! Production::    unreserved_keyword_normal : DATABASE_ID */\n\n/*! Production::    unreserved_keyword_normal : DATAFILE */\n\n/*! Production::    unreserved_keyword_normal : DATA_TABLE_ID */\n\n/*! Production::    unreserved_keyword_normal : DATE */\n\n/*! Production::    unreserved_keyword_normal : DATETIME */\n\n/*! Production::    unreserved_keyword_normal : DATE_ADD */\n\n/*! Production::    unreserved_keyword_normal : DATE_SUB */\n\n/*! Production::    unreserved_keyword_normal : DAY */\n\n/*! Production::    unreserved_keyword_normal : DAY_HOUR */\n\n/*! Production::    unreserved_keyword_normal : DAY_MICROSECOND */\n\n/*! Production::    unreserved_keyword_normal : DAY_MINUTE */\n\n/*! Production::    unreserved_keyword_normal : DAY_SECOND */\n\n/*! Production::    unreserved_keyword_normal : DBA_RECYCLEBIN */\n\n/*! Production::    unreserved_keyword_normal : DBTIMEZONE */\n\n/*! Production::    unreserved_keyword_normal : DEALLOCATE */\n\n/*! Production::    unreserved_keyword_normal : DECRYPTION */\n\n/*! Production::    unreserved_keyword_normal : DEFAULT_AUTH */\n\n/*! Production::    unreserved_keyword_normal : DEFAULT_TABLEGROUP */\n\n/*! Production::    unreserved_keyword_normal : DEFINER */\n\n/*! Production::    unreserved_keyword_normal : DELAY */\n\n/*! Production::    unreserved_keyword_normal : DELAYED */\n\n/*! Production::    unreserved_keyword_normal : DELAY_KEY_WRITE */\n\n/*! Production::    unreserved_keyword_normal : DENSE_RANK */\n\n/*! Production::    unreserved_keyword_normal : DEPTH */\n\n/*! Production::    unreserved_keyword_normal : DESCRIBE */\n\n/*! Production::    unreserved_keyword_normal : DESCRIPTION */\n\n/*! Production::    unreserved_keyword_normal : DESTINATION */\n\n/*! Production::    unreserved_keyword_normal : DES_KEY_FILE */\n\n/*! Production::    unreserved_keyword_normal : DETERMINISTIC */\n\n/*! Production::    unreserved_keyword_normal : DIAGNOSTICS */\n\n/*! Production::    unreserved_keyword_normal : DICTIONARY */\n\n/*! Production::    unreserved_keyword_normal : DIRECTORY */\n\n/*! Production::    unreserved_keyword_normal : DISABLE */\n\n/*! Production::    unreserved_keyword_normal : DISCARD */\n\n/*! Production::    unreserved_keyword_normal : DISCONNECT */\n\n/*! Production::    unreserved_keyword_normal : DISK */\n\n/*! Production::    unreserved_keyword_normal : DISKGROUP */\n\n/*! Production::    unreserved_keyword_normal : DISTINCTROW */\n\n/*! Production::    unreserved_keyword_normal : DIV */\n\n/*! Production::    unreserved_keyword_normal : DO */\n\n/*! Production::    unreserved_keyword_normal : DUMP */\n\n/*! Production::    unreserved_keyword_normal : DUMPFILE */\n\n/*! Production::    unreserved_keyword_normal : DUPLICATE */\n\n/*! Production::    unreserved_keyword_normal : DUPLICATE_SCOPE */\n\n/*! Production::    unreserved_keyword_normal : DYNAMIC */\n\n/*! Production::    unreserved_keyword_normal : E */\n\n/*! Production::    unreserved_keyword_normal : EFFECTIVE */\n\n/*! Production::    unreserved_keyword_normal : ELSEIF */\n\n/*! Production::    unreserved_keyword_normal : EMPTY */\n\n/*! Production::    unreserved_keyword_normal : ENABLE */\n\n/*! Production::    unreserved_keyword_normal : ENABLE_ARBITRATION_SERVICE */\n\n/*! Production::    unreserved_keyword_normal : ENABLE_EXTENDED_ROWID */\n\n/*! Production::    unreserved_keyword_normal : ENCLOSED */\n\n/*! Production::    unreserved_keyword_normal : ENCRYPTION */\n\n/*! Production::    unreserved_keyword_normal : END */\n\n/*! Production::    unreserved_keyword_normal : ENDS */\n\n/*! Production::    unreserved_keyword_normal : ENFORCED */\n\n/*! Production::    unreserved_keyword_normal : ENGINES */\n\n/*! Production::    unreserved_keyword_normal : ENGINE_ */\n\n/*! Production::    unreserved_keyword_normal : ENTITY */\n\n/*! Production::    unreserved_keyword_normal : ENUM */\n\n/*! Production::    unreserved_keyword_normal : ERRORS */\n\n/*! Production::    unreserved_keyword_normal : ERROR_CODE */\n\n/*! Production::    unreserved_keyword_normal : ERROR_INDEX */\n\n/*! Production::    unreserved_keyword_normal : ERROR_P */\n\n/*! Production::    unreserved_keyword_normal : ESCAPE */\n\n/*! Production::    unreserved_keyword_normal : ESCAPED */\n\n/*! Production::    unreserved_keyword_normal : ESTIMATE */\n\n/*! Production::    unreserved_keyword_normal : EVENT */\n\n/*! Production::    unreserved_keyword_normal : EVENTS */\n\n/*! Production::    unreserved_keyword_normal : EVERY */\n\n/*! Production::    unreserved_keyword_normal : EXCEPT */\n\n/*! Production::    unreserved_keyword_normal : EXCHANGE */\n\n/*! Production::    unreserved_keyword_normal : EXCLUDE */\n\n/*! Production::    unreserved_keyword_normal : EXECUTE */\n\n/*! Production::    unreserved_keyword_normal : EXEMPT */\n\n/*! Production::    unreserved_keyword_normal : EXIT */\n\n/*! Production::    unreserved_keyword_normal : EXPANSION */\n\n/*! Production::    unreserved_keyword_normal : EXPIRE */\n\n/*! Production::    unreserved_keyword_normal : EXPIRED */\n\n/*! Production::    unreserved_keyword_normal : EXPIRE_INFO */\n\n/*! Production::    unreserved_keyword_normal : EXPORT */\n\n/*! Production::    unreserved_keyword_normal : EXTENDED */\n\n/*! Production::    unreserved_keyword_normal : EXTENDED_NOADDR */\n\n/*! Production::    unreserved_keyword_normal : EXTENT_SIZE */\n```\n\n----------------------------------------\n\nTITLE: Configuring Clickhouse Connection Parameters in JSX\nDESCRIPTION: React/JSX component that defines configuration parameters for connecting to a Clickhouse database. Includes required fields like host, port, user, and database name, along with optional settings for connection pooling and timeouts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_clickhouse_clickhouseparameters_4a1237.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ClickhouseParameters\",\n  \"description\": \"Columnar database for high-performance analytics and real-time queries.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database host, e.g., localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Database port, e.g., 8123\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database user to connect\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database name\"\n    },\n    {\n      \"name\": \"engine\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Storage engine, e.g., MergeTree\",\n      \"defaultValue\": \"MergeTree\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"http_pool_maxsize\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"http pool maxsize\",\n      \"defaultValue\": \"16\"\n    },\n    {\n      \"name\": \"http_pool_num_pools\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"http pool num_pools\",\n      \"defaultValue\": \"12\"\n    },\n    {\n      \"name\": \"connect_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Database connect timeout, default 15s\",\n      \"defaultValue\": \"15\"\n    },\n    {\n      \"name\": \"distributed_ddl_task_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Distributed ddl task timeout, default 300s\",\n      \"defaultValue\": \"300\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Knowledge Base Command Options\nDESCRIPTION: Commands for managing knowledge base operations including delete, list, and load functionalities with detailed options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt knowledge --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge [OPTIONS] COMMAND [ARGS]...\n\n  Knowledge command line tool\n\nOptions:\n  --address TEXT  Address of the Api server(If not set, try to read from\n                  environment variable: API_ADDRESS).  [default:\n                  http://127.0.0.1:5670]\n  --help          Show this message and exit.\n\nCommands:\n  delete  Delete your knowledge space or document in space\n  list    List knowledge space\n  load    Load your local documents to DB-GPT\n```\n\n----------------------------------------\n\nTITLE: Embedding Model Configuration Component in React/JSX\nDESCRIPTION: React component showing configuration details for OpenAPI embedding model deployment parameters, including model name, provider, API settings, and performance options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/embedding/embeddings_openapiembeddingdeploymodelparameters_f9ba47.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"OpenAPIEmbeddingDeployModelParameters\",\n  \"description\": \"OpenAPI embedding deploy model parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/openai\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"api_url\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The URL of the embeddings API.\",\n      \"defaultValue\": \"http://localhost:8100/api/v1/embeddings\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key for the embeddings API.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The timeout for the request in seconds.\",\n      \"defaultValue\": \"60\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Processing GPT-4 Stream Response Data in JSON Format\nDESCRIPTION: JSON-formatted chunks from a streaming GPT-4 API response. Each chunk contains an ID, model name, and a delta containing role and content information. The content is delivered word by word or in small phrases.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"chatcmpl-86f60a0c-e686-11ee-9322-acde48001122\",\n  \"model\": \"gpt-4o\",\n  \"choices\": [{\n    \"index\": 0,\n    \"delta\": {\n      \"role\": \"assistant\",\n      \"content\": \".\"\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Profile Script with Environment Variable\nDESCRIPTION: Demonstrates running the profile script with a custom name set through an environment variable.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_dynamic.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsummary_profile_name=\"Plato\" python profile_dynamic.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Local GLM4 Model\nDESCRIPTION: Command to install dependencies required for using DB-GPT with a local GLM4 model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"cuda121\" \\\n--extra \"hf\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"quant_bnb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: CREATE PACKAGE and PROCEDURE Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating Oracle-style packages, package bodies, and procedures with editionable options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_41\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_package_body_stmt : CREATE opt_replace opt_editionable package_body_block */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_package_stmt : CREATE opt_replace opt_editionable package_block */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_procedure_stmt : CREATE opt_replace opt_editionable plsql_procedure_source */\n```\n\n----------------------------------------\n\nTITLE: Building DB-GPT with Minimal Extras for Troubleshooting\nDESCRIPTION: Troubleshooting command to build DB-GPT with fewer extras to isolate package installation problems.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# Try building with fewer extras to isolate the problem\nbash docker/base/build_image.sh --extras \"base,proxy_openai,rag\"\n```\n\n----------------------------------------\n\nTITLE: Alternative DB-GPT Server Startup Command\nDESCRIPTION: Alternative command to start the DB-GPT webserver using the same OpenAI proxy configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/duckdb_install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production Rules\nDESCRIPTION: This snippet contains multiple SQL grammar production rules defining various table operations, relation factors, and query components. It covers rules for table names, sampling, partitioning, and tenant operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_171\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tbl_name : relation_factor sample_clause AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause relation_name */\n\n/*! Production::    tbl_name : relation_factor sample_clause relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause relation_name transpose_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed AS relation_name */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed relation_name */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed relation_name transpose_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed transpose_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed use_flashback */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed use_flashback fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed use_flashback relation_name */\n\n/*! Production::    tbl_name : relation_factor sample_clause transpose_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause use_flashback */\n\n/*! Production::    tbl_name : relation_factor sample_clause use_flashback fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause use_flashback relation_name */\n\n/*! Production::    tbl_name : relation_factor transpose_clause */\n\n/*! Production::    tbl_name : relation_factor use_flashback */\n\n/*! Production::    tbl_name : relation_factor use_flashback AS relation_name */\n\n/*! Production::    tbl_name : relation_factor use_flashback fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_flashback relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition */\n\n/*! Production::    tbl_name : relation_factor use_partition AS relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition relation_name transpose_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause AS relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause relation_name transpose_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed AS relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed relation_name transpose_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed transpose_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed use_flashback */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed use_flashback fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause seed use_flashback relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause transpose_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause use_flashback */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause use_flashback fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause use_flashback relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition transpose_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition use_flashback */\n\n/*! Production::    tbl_name : relation_factor use_partition use_flashback AS relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition use_flashback fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition use_flashback relation_name */\n\n/*! Production::    temporary_option : %epsilon */\n\n/*! Production::    temporary_option : GLOBAL TEMPORARY */\n\n/*! Production::    temporary_option : TEMPORARY */\n\n/*! Production::    tenant : USER_VARIABLE */\n\n/*! Production::    tenant_list_tuple : TENANT opt_equal_mark \"(\" tenant_name_list \")\" */\n\n/*! Production::    tenant_list_tuple : TENANT opt_equal_mark tenant_name_list */\n\n/*! Production::    tenant_name : TENANT opt_equal_mark relation_name_or_string */\n\n/*! Production::    tenant_name_list : relation_name_or_string */\n\n/*! Production::    tenant_name_list : tenant_name_list \",\" relation_name_or_string */\n\n/*! Production::    tenant_option : COLLATE opt_equal_mark collation_name */\n\n/*! Production::    tenant_option : COMMENT opt_equal_mark STRING_VALUE */\n\n/*! Production::    tenant_option : ENABLE_ARBITRATION_SERVICE opt_equal_mark BOOL_VALUE */\n\n/*! Production::    tenant_option : ENABLE_EXTENDED_ROWID opt_equal_mark BOOL_VALUE */\n\n/*! Production::    tenant_option : LOCALITY opt_equal_mark STRING_VALUE opt_force */\n\n/*! Production::    tenant_option : LOGONLY_REPLICA_NUM opt_equal_mark INTNUM */\n\n/*! Production::    tenant_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n\n/*! Production::    tenant_option : PROGRESSIVE_MERGE_NUM opt_equal_mark INTNUM */\n\n/*! Production::    tenant_option : REPLICA_NUM opt_equal_mark INTNUM */\n\n/*! Production::    tenant_option : RESOURCE_POOL_LIST opt_equal_mark \"(\" resource_pool_list \")\" */\n\n/*! Production::    tenant_option : REWRITE_MERGE_VERSION opt_equal_mark INTNUM */\n\n/*! Production::    tenant_option : STORAGE_FORMAT_VERSION opt_equal_mark INTNUM */\n\n/*! Production::    tenant_option : STORAGE_FORMAT_WORK_VERSION opt_equal_mark INTNUM */\n\n/*! Production::    tenant_option : ZONE_LIST opt_equal_mark \"(\" zone_list \")\" */\n\n/*! Production::    tenant_option : charset_key opt_equal_mark charset_name */\n\n/*! Production::    tenant_option : default_tablegroup */\n\n/*! Production::    tenant_option : read_only_or_write */\n\n/*! Production::    testValue : FALSE */\n\n/*! Production::    testValue : TRUE */\n\n/*! Production::    testValue : UNKNOWN */\n\n/*! Production::    text_string : HEX_STRING_VALUE */\n\n/*! Production::    text_string : STRING_VALUE */\n\n/*! Production::    text_type_i : LONGTEXT */\n\n/*! Production::    text_type_i : MEDIUMTEXT */\n\n/*! Production::    text_type_i : MEDIUMTEXT VARCHAR */\n\n/*! Production::    text_type_i : TEXT */\n\n/*! Production::    text_type_i : TINYTEXT */\n\n/*! Production::    tg_hash_partition_option : PARTITION BY HASH INTNUM tg_subpartition_option opt_partitions */\n\n/*! Production::    tg_hash_partition_option : PARTITION BY HASH tg_subpartition_option opt_partitions */\n\n/*! Production::    tg_key_partition_option : PARTITION BY KEY INTNUM tg_subpartition_option opt_partitions */\n\n/*! Production::    tg_list_partition_option : PARTITION BY BISON_LIST COLUMNS INTNUM tg_subpartition_option opt_partitions opt_list_partition_list */\n\n/*! Production::    tg_list_partition_option : PARTITION BY BISON_LIST tg_subpartition_option opt_partitions opt_list_partition_list */\n\n/*! Production::    tg_list_partition_option : PARTITION BY LIST COLUMNS INTNUM tg_subpartition_option opt_list_partition_list */\n\n/*! Production::    tg_modify_partition_info : MODIFY tg_hash_partition_option */\n\n/*! Production::    tg_modify_partition_info : MODIFY tg_list_partition_option */\n\n/*! Production::    tg_modify_partition_info : MODIFY tg_range_partition_option */\n\n/*! Production::    tg_range_partition_option : PARTITION BY RANGE COLUMNS INTNUM tg_subpartition_option opt_partitions opt_range_partition_list */\n\n/*! Production::    tg_range_partition_option : PARTITION BY RANGE COLUMNS INTNUM tg_subpartition_option opt_range_partition_list */\n\n/*! Production::    tg_range_partition_option : PARTITION BY RANGE tg_subpartition_option opt_partitions opt_range_partition_list */\n\n/*! Production::    tg_subpartition_option : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: SQL Drop Statement Productions\nDESCRIPTION: Grammar productions for DROP statements that remove database objects like tables, views, indexes, and other schema elements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_55\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    dropDatabase : DROP dbFormat opt_ifExists uid */\n/*! Production::    dropEvent : DROP EVENT opt_ifExists fullId */\n/*! Production::    dropFunction : DROP FUNCTION opt_ifExists fullId */\n/*! Production::    dropIndex : DROP INDEX opt_intimeAction uid ON tableName optIndexLockAndAlgorithmAssigns */\n/*! Production::    dropTable : DROP opt_TEMPORARY TABLE opt_ifExists tables opt_dropType */\n/*! Production::    dropView : DROP VIEW opt_ifExists fullIds opt_dropType */\n```\n\n----------------------------------------\n\nTITLE: Column Reference Grammar Rules\nDESCRIPTION: Production rules for column references including qualified and unqualified names, wildcards, and special keywords\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    column_ref : column_name */\n\n/*! Production::    column_ref : relation_name \".\" \"*\" */\n\n/*! Production::    column_ref : relation_name \".\" column_name */\n\n/*! Production::    column_ref : relation_name \".\" relation_name \".\" \"*\" */\n```\n\n----------------------------------------\n\nTITLE: MySQL Data Type Production Rules\nDESCRIPTION: Production rules defining ENUM and SET data types in MySQL. These rules specify how ENUM and SET types are parsed in MySQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_57\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    enumOrSet : ENUM */\n\n/*! Production::    enumOrSet : SET */\n```\n\n----------------------------------------\n\nTITLE: Rendering Spark Configuration Component in JSX/MDX\nDESCRIPTION: This code snippet renders a ConfigDetail component that displays Apache Spark configuration parameters. It includes the configuration name, description, and a parameter for specifying the file path of the data source.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_spark_sparkparameters_174bbc.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"SparkParameters\",\n  \"description\": \"Unified engine for large-scale data analytics.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"path\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The file path of the data source.\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining Knowledge Graph Components in GraphRAG\nDESCRIPTION: Expands the definition of 'Graph' in GraphRAG to include both triplets and document structure graphs, enhancing the knowledge representation capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```\nKnowledge Graph = Triplets Graph + Document Structure Graph\n```\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Select with Hierarchical Query Production Rules\nDESCRIPTION: This snippet defines production rules for SQL select statements with hierarchical queries, including options for hints, query expression options, and hierarchical query clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_142\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_with_hierarchical_query : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where start_with connect_by opt_groupby opt_having */\n\n/*! Production::    select_with_opt_hint : SELECT */\n\n/*! Production::    select_with_opt_hint : SELECT_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: Using ConfigDetail Component to Display File Serve Configuration in React\nDESCRIPTION: This code snippet demonstrates the use of a custom React component called ConfigDetail to render the ServeConfig configuration documentation. It includes all configuration parameters such as API keys, network settings, chunk sizes, and storage backend configurations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_cb64c6.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the file serve module. In DB-GPT, you can store yourfiles in the file server.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    },\n    {\n      \"name\": \"check_hash\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Check the hash of the file when downloading\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The host of the file server\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The port of the file server, default is 5670\",\n      \"defaultValue\": \"5670\"\n    },\n    {\n      \"name\": \"download_chunk_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The chunk size when downloading the file\",\n      \"defaultValue\": \"1048576\"\n    },\n    {\n      \"name\": \"save_chunk_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The chunk size when saving the file\",\n      \"defaultValue\": \"1048576\"\n    },\n    {\n      \"name\": \"transfer_chunk_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The chunk size when transferring the file\",\n      \"defaultValue\": \"1048576\"\n    },\n    {\n      \"name\": \"transfer_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The timeout when transferring the file\",\n      \"defaultValue\": \"360\"\n    },\n    {\n      \"name\": \"local_storage_path\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The local storage path\"\n    },\n    {\n      \"name\": \"default_backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The default storage backend\"\n    },\n    {\n      \"name\": \"backends\",\n      \"type\": \"StorageBackendConfig\",\n      \"required\": false,\n      \"description\": \"The storage backend configurations\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"s3 configuration\",\n          \"url\": \"../utils/config_s3storageconfig_f0cdc9\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"oss configuration\",\n          \"url\": \"../utils/config_ossstorageconfig_1ad505\"\n        }\n      ],\n      \"defaultValue\": \"[]\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: AWEL API Endpoints for DB-GPT\nDESCRIPTION: List of available AWEL (Automated Workflow Execution Language) API endpoints in DB-GPT, providing access to example triggers. These endpoints demonstrate different workflow examples including RAG, chat, and hello world examples.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/api.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napi/v1/awel/trigger/examples/simple_rag\napi/v1/awel/trigger/examples/simple_chat\napi/v1/awel/trigger/examples/hello\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger All-in-One Docker Container\nDESCRIPTION: Docker command to start a Jaeger all-in-one instance for tracing visualization.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/observability.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 14250:14250 \\\n  -p 14268:14268 \\\n  -p 14269:14269 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:1.58\n```\n\n----------------------------------------\n\nTITLE: Using DB-GPT Command Line Tool\nDESCRIPTION: Example of using the dbgpt command line tool to access help documentation for managing services and models.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/smmf.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt --help\ndbgpt start --help\n```\n\n----------------------------------------\n\nTITLE: Downloading TuGraph Docker Image from OSS\nDESCRIPTION: Alternative commands to download and import the TuGraph Docker image package directly from OSS storage instead of pulling from Docker Hub.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget 'https://tugraph-web.oss-cn-beijing.aliyuncs.com/tugraph/tugraph-4.5.1/tugraph-runtime-centos7-4.5.1.tar' -O tugraph-runtime-centos7-4.5.1.tar\ndocker load -i tugraph-runtime-centos7-4.5.1.tar\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request with cURL\nDESCRIPTION: This cURL command sends a POST request to the HTTP trigger endpoint with a JSON payload containing a name and age. It demonstrates how to interact with the created endpoint.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.3_http_trigger_post.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n\"http://127.0.0.1:5555/api/v1/awel/trigger/awel_tutorial/say_hello_post\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"name\": \"John\", \"age\": 25}'\n```\n\n----------------------------------------\n\nTITLE: CREATE SEQUENCE Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating sequences with optional sequence options and existence checks.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_45\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_sequence_stmt : CREATE SEQUENCE relation_factor opt_sequence_option_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_sequence_stmt : create_with_opt_hint SEQUENCE opt_if_not_exists relation_factor opt_sequence_option_list */\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT with Data Persistence\nDESCRIPTION: Enhanced Docker run command that includes volume mounts for persisting application data, messages, and database files to the host machine.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ipc host --gpus all \\\n  -it --rm \\\n  -p 5670:5670 \\\n  -v ./dbgpt-local-gpu.toml:/app/configs/dbgpt-local-gpu.toml \\\n  -v ./models:/app/models \\\n  -v ./pilot/data:/app/pilot/data \\\n  -v ./pilot/message:/app/pilot/message \\\n  -v ./pilot/alembic_versions:/app/pilot/meta_data/alembic/versions \\\n  --name dbgpt \\\n  eosphorosai/dbgpt \\\n  dbgpt start webserver --config /app/configs/dbgpt-local-gpu.toml\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definition for Chat Knowledge Space\nDESCRIPTION: The POST endpoint for accessing the Chat Knowledge Space functionality in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST /api/v2/chat/completions\n```\n\n----------------------------------------\n\nTITLE: Common Table Expression Grammar Rules\nDESCRIPTION: Grammar rules for defining Common Table Expressions (CTEs) including relation names, column aliases and subqueries\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_no_parens \")\" */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_with_parens \")\" opt_search_clause opt_cycle_clause */\n```\n\n----------------------------------------\n\nTITLE: MySQL Execute Statement Production Rules\nDESCRIPTION: Production rules for EXECUTE statements, including immediate execution, statement execution with parameters, and dynamic SQL execution with various clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_62\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    executeStatement : EXECUTE uid */\n\n/*! Production::    executeStatement : EXECUTE uid USING userVariables */\n\n/*! Production::    execute_immediate_stmt : EXECUTE IMMEDIATE expr opt_normal_into_clause opt_using_clause opt_dynamic_returning_clause */\n\n/*! Production::    execute_section : BEGIN_KEY pl_lang_stmt_list opt_exception_section */\n\n/*! Production::    execute_stmt : EXECUTE stmt_name opt_using_args */\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Component in React\nDESCRIPTION: React/TypeScript component implementation showing the ConfigDetail component with S3StorageConfig parameters. Defines the configuration interface for S3 storage including endpoint settings, authentication credentials, bucket management, and additional S3-specific options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/utils/config_s3storageconfig_f0cdc9.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"S3StorageConfig\",\n  \"description\": \"S3StorageConfig(endpoint: str, region: str, access_key_id: Optional[str] = None, access_key_secret: Optional[str] = None, use_environment_credentials: Optional[bool] = False, fixed_bucket: Optional[str] = None, bucket_prefix: Optional[str] = 'dbgpt-fs-', auto_create_bucket: Optional[bool] = True, save_chunk_size: Optional[int] = 1048576, signature_version: Optional[str] = None, s3_config: Optional[Dict[str, Any]] = <factory>)\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"endpoint\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The endpoint of the s3 server. e.g. https://s3.us-east-1.amazonaws.com\"\n    },\n    {\n      \"name\": \"region\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The region of the s3 server. e.g. us-east-1\"\n    },\n    {\n      \"name\": \"access_key_id\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The access key ID of the s3 server. You can also set it in the environment variable AWS_ACCESS_KEY_ID\"\n    },\n    {\n      \"name\": \"access_key_secret\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The access key secret of the s3 server. You can also set it in the environment variable AWS_SECRET_ACCESS_KEY\"\n    },\n    {\n      \"name\": \"use_environment_credentials\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to use the environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as the credentials. Default is False.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"fixed_bucket\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The fixed bucket name to use. If set, all logical buckets in DB-GPT will be mapped to this bucket. We suggest you set this value to avoid bucket name conflicts.\"\n    },\n    {\n      \"name\": \"bucket_prefix\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The prefix of the bucket name. If set, all logical buckets in DB-GPT will be prefixed with this value. Just work when fixed_bucket is None.\",\n      \"defaultValue\": \"dbgpt-fs-\"\n    },\n    {\n      \"name\": \"auto_create_bucket\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to create the bucket automatically if it does not exist. If set to False, the bucket must exist before using it.\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"save_chunk_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The chunk size when saving the file. When the file is larger 10x than this value, it will be uploaded in multiple parts. Default is 1M.\",\n      \"defaultValue\": \"1048576\"\n    },\n    {\n      \"name\": \"signature_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The signature version of the s3 server. e.g. s3v4, s3v2, None (default)\"\n    },\n    {\n      \"name\": \"s3_config\",\n      \"type\": \"object\",\n      \"required\": false,\n      \"description\": \"The additional configuration for the S3 client.\",\n      \"defaultValue\": \"{}\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Creating Table Statements in SQL\nDESCRIPTION: Specifies various syntax options for creating tables, including temporary tables, table-like structures, and tables with subqueries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_like_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor \"(\" LIKE relation_factor \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_like_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor LIKE relation_factor\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : CREATE temporary_option TABLE relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option AS subquery opt_order_by opt_fetch_next\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : CREATE temporary_option TABLE relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option on_commit_option\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : CREATE temporary_option TABLE relation_factor AS subquery opt_order_by opt_fetch_next\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : CREATE temporary_option TABLE relation_factor partition_option AS subquery opt_order_by opt_fetch_next\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : CREATE temporary_option TABLE relation_factor table_option_list opt_partition_option AS subquery opt_order_by opt_fetch_next\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option opt_as select_stmt\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor AS select_stmt\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor partition_option opt_as select_stmt\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor select_stmt\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor table_option_list opt_partition_option opt_as select_stmt\n```\n\n----------------------------------------\n\nTITLE: Defining System Parameters Configuration using React/MDX\nDESCRIPTION: Configuration component that defines system parameters including language settings, logging levels, API keys and encryption. Uses a custom ConfigDetail component to render the parameter definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/config_systemparameters_fd92b9.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"SystemParameters\",\n  \"description\": \"System parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"language\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Language setting\",\n      \"defaultValue\": \"en\",\n      \"validValues\": [\n        \"en\",\n        \"zh\",\n        \"fr\",\n        \"ja\",\n        \"ko\",\n        \"ru\"\n      ]\n    },\n    {\n      \"name\": \"log_level\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Logging level\",\n      \"defaultValue\": \"INFO\",\n      \"validValues\": [\n        \"DEBUG\",\n        \"INFO\",\n        \"WARNING\",\n        \"ERROR\",\n        \"CRITICAL\"\n      ]\n    },\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys\",\n      \"defaultValue\": \"[]\"\n    },\n    {\n      \"name\": \"encrypt_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The key to encrypt the data\",\n      \"defaultValue\": \"your_secret_key\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedding Models for DB-GPT\nDESCRIPTION: Examples of configuring different embedding models (OpenAI, Qwen, Qianfan) in the .env file for use with DB-GPT's similarity search feature.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n## Openai embedding model, See dbgpt/model/parameter.py\n# EMBEDDING_MODEL=proxy_openai\n# proxy_openai_proxy_server_url=https://api.openai.com/v1\n# proxy_openai_proxy_api_key={your-openai-sk}\n# proxy_openai_proxy_backend=text-embedding-ada-002\n\n## qwen embedding model, See dbgpt/model/parameter.py\n# EMBEDDING_MODEL=proxy_tongyi\n# proxy_tongyi_proxy_backend=text-embedding-v1\n# proxy_tongyi_proxy_api_key={your-api-key}\n\n## qianfan embedding model, See dbgpt/model/parameter.py\n#EMBEDDING_MODEL=proxy_qianfan\n#proxy_qianfan_proxy_backend=bge-large-zh\n#proxy_qianfan_proxy_api_key={your-api-key}\n#proxy_qianfan_proxy_api_secret={your-secret-key}\n```\n\n----------------------------------------\n\nTITLE: MySQL Expression Production Rules\nDESCRIPTION: Production rules for expressions in MySQL, including logical operations (AND, OR, XOR), comparison operations (IS, IS NOT), and nested expressions with parentheses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_66\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    explicit_cursor_attribute : obj_access_ref \"%\" common_cursor_attribute */\n\n/*! Production::    expr : \"(\" expr \")\" */\n\n/*! Production::    expr : %epsilon */\n\n/*! Production::    expr : NOT expr */\n\n/*! Production::    expr : USER_VARIABLE SET_VAR expr */\n\n/*! Production::    expr : USER_VARIABLE set_var_op bit_expr */\n\n/*! Production::    expr : bit_expr */\n\n/*! Production::    expr : bool_pri */\n\n/*! Production::    expr : bool_pri IS BOOL_VALUE */\n\n/*! Production::    expr : bool_pri IS UNKNOWN */\n\n/*! Production::    expr : bool_pri IS not BOOL_VALUE */\n\n/*! Production::    expr : bool_pri IS not UNKNOWN */\n\n/*! Production::    expr : expr AND expr */\n\n/*! Production::    expr : expr AND_OP expr */\n\n/*! Production::    expr : expr OR expr */\n\n/*! Production::    expr : expr OR_OP expr */\n\n/*! Production::    expr : expr XOR expr */\n```\n\n----------------------------------------\n\nTITLE: Model Prediction Configuration\nDESCRIPTION: Setting up prediction arguments and generating output results using the fine-tuned model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/dbgpt_hub.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npredict_args = {\n            \"model_name_or_path\": \"codellama/CodeLlama-13b-Instruct-hf\",\n            \"template\": \"llama2\",\n            \"finetuning_type\": \"lora\",\n            \"checkpoint_dir\": \"dbgpt_hub/output/adapter/CodeLlama-13b-sql-lora\",\n            \"predict_file_path\": \"dbgpt_hub/data/eval_data/dev_sql.json\",\n            \"predict_out_dir\": \"dbgpt_hub/output/\",\n            \"predicted_out_filename\": \"pred_sql.sql\",\n}\nstart_predict(predict_args)\n```\n\n----------------------------------------\n\nTITLE: Starting OceanBase Docker Container\nDESCRIPTION: Docker command to start an OceanBase container for vector database usage.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/kbqa.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name=ob433 -e MODE=slim -p 2881:2881 -d quay.io/oceanbase/oceanbase-ce:4.3.3.0-100000142024101215\n```\n\n----------------------------------------\n\nTITLE: Example Output in Bash\nDESCRIPTION: Expected output from running the JoinOperator example script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.3_join_operator.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Displaying Baseline Scores\nDESCRIPTION: Python code to import and display baseline performance scores for the model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/dbgpt_hub.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_hub.baseline import show_scores\nshow_scores()\n```\n\n----------------------------------------\n\nTITLE: Enabling Text2GQL Search in DB-GPT\nDESCRIPTION: Environment variable to be set in the .env file to enable text-to-GQL search functionality in DB-GPT for more efficient entity and relation queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nTEXT2GQL_SEARCH_ENABLED=True # enable the text2gql search for entities and relations.\n```\n\n----------------------------------------\n\nTITLE: Pulling Qwen LLM Model\nDESCRIPTION: Command to pull the Qwen 0.5b language model using Ollama\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/ollama.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull qwen:0.5b\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Simple DESCRIBE Statement\nDESCRIPTION: This snippet defines the grammar production for a simple DESCRIBE statement, used to show information about table structure.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_152\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simpleDescribeStatement : descKeyword tableName */\n\n/*! Production::    simpleDescribeStatement : descKeyword tableName uid */\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for Data Persistence\nDESCRIPTION: Commands to create local directories for persisting DB-GPT data, messages, and database migration files across container restarts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ./pilot/data\nmkdir -p ./pilot/message\nmkdir -p ./pilot/alembic_versions\n```\n\n----------------------------------------\n\nTITLE: Parsing Streamed GPT-4o Response in JSON Format\nDESCRIPTION: This code snippet shows the structure of individual data packets in a streamed response from a GPT-4o model. Each packet contains metadata and a small portion of the assistant's message, allowing for real-time display of the response as it's generated.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"id\": \"chatcmpl-86f60a0c-e686-11ee-9322-acde48001122\", \"model\": \"gpt-4o\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"AW\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Creating Tablegroup and Tablespace Statements in SQL\nDESCRIPTION: Defines syntax for creating tablegroups and tablespaces with various options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_tablegroup_stmt : CREATE TABLEGROUP relation_name opt_tablegroup_option_list opt_tg_partition_option\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_tablegroup_stmt : create_with_opt_hint TABLEGROUP opt_if_not_exists relation_name opt_tablegroup_option_list opt_tg_partition_option\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_tablespace_stmt : CREATE TABLESPACE tablespace permanent_tablespace\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_tablespace_stmt : create_with_opt_hint TABLESPACE tablespace permanent_tablespace\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Field Options\nDESCRIPTION: Specifies the grammar production for field options, including columns or fields and a list of field terms.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_opt : columns_or_fields field_term_list */\n```\n\n----------------------------------------\n\nTITLE: Configuring Similarity Search in DB-GPT\nDESCRIPTION: Environment variables to be set in the .env file to enable and configure similarity search functionality in DB-GPT, including batch size and search parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nSIMILARITY_SEARCH_ENABLED=True # enable the similarity search for entities and chunks\nKNOWLEDGE_GRAPH_EMBEDDING_BATCH_SIZE=20 # the batch size of embedding from the text\nKNOWLEDGE_GRAPH_SIMILARITY_SEARCH_TOP_SIZE=5 # set the topk of the vector similarity search\nKNOWLEDGE_GRAPH_SIMILARITY_SEARCH_RECALL_SCORE=0.3 # set the reacall score of the vector similarity search\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for DML Events and Clauses\nDESCRIPTION: Defines the syntax for DML events, event trees, table clauses, and related constructs used in trigger and statement definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_54\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dml_event : DELETE */\n\n/*! Production::    dml_event : INSERT */\n\n/*! Production::    dml_event : UPDATE opt_column_list */\n\n/*! Production::    dml_event_list : dml_event_tree */\n\n/*! Production::    dml_event_option : dml_event_list ON pl_schema_name */\n\n/*! Production::    dml_event_tree : dml_event */\n\n/*! Production::    dml_event_tree : dml_event_tree OR dml_event */\n\n/*! Production::    dml_table_clause : \"(\" subquery fetch_next_clause \")\" opt_table_alias */\n\n/*! Production::    dml_table_clause : \"(\" subquery order_by opt_fetch_next \")\" opt_table_alias */\n\n/*! Production::    dml_table_clause : ONLY \"(\" dml_table_name \")\" opt_table_alias */\n\n/*! Production::    dml_table_clause : dml_table_name opt_table_alias */\n\n/*! Production::    dml_table_clause : select_with_parens opt_table_alias */\n\n/*! Production::    dml_table_name : relation_factor */\n\n/*! Production::    dml_table_name : relation_factor opt_use_partition */\n\n/*! Production::    dml_table_name : relation_factor use_partition */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Function Name Bases\nDESCRIPTION: This snippet defines base function names for various MySQL operations. Each line specifies a different function name using a production rule format. These definitions cover a wide range of MySQL functions, including geometric operations, string manipulations, and mathematical calculations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_82\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    functionNameBase : ISCLOSED */\n\n/*! Production::    functionNameBase : ISEMPTY */\n\n/*! Production::    functionNameBase : ISNULL */\n\n/*! Production::    functionNameBase : ISSIMPLE */\n\n/*! Production::    functionNameBase : IS_FREE_LOCK */\n\n/*! Production::    functionNameBase : IS_IPV4 */\n\n/*! Production::    functionNameBase : IS_IPV4_COMPAT */\n\n/*! Production::    functionNameBase : IS_IPV4_MAPPED */\n\n/*! Production::    functionNameBase : IS_IPV6 */\n\n/*! Production::    functionNameBase : IS_USED_LOCK */\n\n/*! Production::    functionNameBase : JSON_SCHEMA_VALID */\n\n/*! Production::    functionNameBase : JSON_VALID */\n\n/*! Production::    functionNameBase : LAST_INSERT_ID */\n\n/*! Production::    functionNameBase : LCASE */\n\n/*! Production::    functionNameBase : LEAST */\n\n/*! Production::    functionNameBase : LEFT */\n\n/*! Production::    functionNameBase : LENGTH */\n\n/*! Production::    functionNameBase : LINEFROMTEXT */\n\n/*! Production::    functionNameBase : LINEFROMWKB */\n\n/*! Production::    functionNameBase : LINESTRING */\n\n/*! Production::    functionNameBase : LINESTRINGFROMTEXT */\n\n/*! Production::    functionNameBase : LINESTRINGFROMWKB */\n\n/*! Production::    functionNameBase : LN */\n\n/*! Production::    functionNameBase : LOAD_FILE */\n\n/*! Production::    functionNameBase : LOCATE */\n\n/*! Production::    functionNameBase : LOG */\n\n/*! Production::    functionNameBase : LOG10 */\n\n/*! Production::    functionNameBase : LOG2 */\n\n/*! Production::    functionNameBase : LOWER */\n\n/*! Production::    functionNameBase : LPAD */\n\n/*! Production::    functionNameBase : LTRIM */\n\n/*! Production::    functionNameBase : MAKEDATE */\n\n/*! Production::    functionNameBase : MAKETIME */\n\n/*! Production::    functionNameBase : MAKE_SET */\n\n/*! Production::    functionNameBase : MASTER_POS_WAIT */\n\n/*! Production::    functionNameBase : MBRCONTAINS */\n\n/*! Production::    functionNameBase : MBRDISJOINT */\n\n/*! Production::    functionNameBase : MBREQUAL */\n\n/*! Production::    functionNameBase : MBRINTERSECTS */\n\n/*! Production::    functionNameBase : MBROVERLAPS */\n\n/*! Production::    functionNameBase : MBRTOUCHES */\n\n/*! Production::    functionNameBase : MBRWITHIN */\n\n/*! Production::    functionNameBase : MD5 */\n\n/*! Production::    functionNameBase : MICROSECOND */\n\n/*! Production::    functionNameBase : MINUTE */\n\n/*! Production::    functionNameBase : MLINEFROMTEXT */\n\n/*! Production::    functionNameBase : MLINEFROMWKB */\n\n/*! Production::    functionNameBase : MOD */\n\n/*! Production::    functionNameBase : MONTH */\n\n/*! Production::    functionNameBase : MONTHNAME */\n\n/*! Production::    functionNameBase : MPOINTFROMTEXT */\n\n/*! Production::    functionNameBase : MPOINTFROMWKB */\n\n/*! Production::    functionNameBase : MPOLYFROMTEXT */\n\n/*! Production::    functionNameBase : MPOLYFROMWKB */\n\n/*! Production::    functionNameBase : MULTILINESTRING */\n\n/*! Production::    functionNameBase : MULTILINESTRINGFROMTEXT */\n\n/*! Production::    functionNameBase : MULTILINESTRINGFROMWKB */\n\n/*! Production::    functionNameBase : MULTIPOINT */\n\n/*! Production::    functionNameBase : MULTIPOINTFROMTEXT */\n\n/*! Production::    functionNameBase : MULTIPOINTFROMWKB */\n\n/*! Production::    functionNameBase : MULTIPOLYGON */\n\n/*! Production::    functionNameBase : MULTIPOLYGONFROMTEXT */\n\n/*! Production::    functionNameBase : MULTIPOLYGONFROMWKB */\n\n/*! Production::    functionNameBase : NAME_CONST */\n\n/*! Production::    functionNameBase : NULLIF */\n\n/*! Production::    functionNameBase : NUMGEOMETRIES */\n\n/*! Production::    functionNameBase : NUMINTERIORRINGS */\n\n/*! Production::    functionNameBase : NUMPOINTS */\n\n/*! Production::    functionNameBase : OCT */\n\n/*! Production::    functionNameBase : OCTET_LENGTH */\n\n/*! Production::    functionNameBase : ORD */\n\n/*! Production::    functionNameBase : OVERLAPS */\n\n/*! Production::    functionNameBase : PERIOD_ADD */\n\n/*! Production::    functionNameBase : PERIOD_DIFF */\n\n/*! Production::    functionNameBase : PI */\n\n/*! Production::    functionNameBase : POINT */\n\n/*! Production::    functionNameBase : POINTFROMTEXT */\n\n/*! Production::    functionNameBase : POINTFROMWKB */\n\n/*! Production::    functionNameBase : POINTN */\n\n/*! Production::    functionNameBase : POLYFROMTEXT */\n\n/*! Production::    functionNameBase : POLYFROMWKB */\n\n/*! Production::    functionNameBase : POLYGON */\n\n/*! Production::    functionNameBase : POLYGONFROMTEXT */\n\n/*! Production::    functionNameBase : POLYGONFROMWKB */\n\n/*! Production::    functionNameBase : POSITION */\n\n/*! Production::    functionNameBase : POW */\n\n/*! Production::    functionNameBase : POWER */\n\n/*! Production::    functionNameBase : QUARTER */\n\n/*! Production::    functionNameBase : QUOTE */\n\n/*! Production::    functionNameBase : RADIANS */\n\n/*! Production::    functionNameBase : RAND */\n\n/*! Production::    functionNameBase : RANDOM_BYTES */\n\n/*! Production::    functionNameBase : RELEASE_LOCK */\n\n/*! Production::    functionNameBase : REVERSE */\n\n/*! Production::    functionNameBase : RIGHT */\n\n/*! Production::    functionNameBase : ROUND */\n\n/*! Production::    functionNameBase : ROW_COUNT */\n\n/*! Production::    functionNameBase : RPAD */\n\n/*! Production::    functionNameBase : RTRIM */\n\n/*! Production::    functionNameBase : SCHEMA */\n\n/*! Production::    functionNameBase : SECOND */\n\n/*! Production::    functionNameBase : SEC_TO_TIME */\n\n/*! Production::    functionNameBase : SESSION_USER */\n\n/*! Production::    functionNameBase : SESSION_VARIABLES_ADMIN */\n\n/*! Production::    functionNameBase : SHA */\n\n/*! Production::    functionNameBase : SHA1 */\n\n/*! Production::    functionNameBase : SHA2 */\n\n/*! Production::    functionNameBase : SIGN */\n\n/*! Production::    functionNameBase : SIN */\n\n/*! Production::    functionNameBase : SLEEP */\n\n/*! Production::    functionNameBase : SOUNDEX */\n\n/*! Production::    functionNameBase : SQL_THREAD_WAIT_AFTER_GTIDS */\n\n/*! Production::    functionNameBase : SQRT */\n\n/*! Production::    functionNameBase : SRID */\n\n/*! Production::    functionNameBase : STARTPOINT */\n\n/*! Production::    functionNameBase : STRCMP */\n\n/*! Production::    functionNameBase : STR_TO_DATE */\n\n/*! Production::    functionNameBase : ST_AREA */\n\n/*! Production::    functionNameBase : ST_ASBINARY */\n\n/*! Production::    functionNameBase : ST_ASTEXT */\n\n/*! Production::    functionNameBase : ST_ASWKB */\n\n/*! Production::    functionNameBase : ST_ASWKT */\n\n/*! Production::    functionNameBase : ST_BUFFER */\n\n/*! Production::    functionNameBase : ST_CENTROID */\n\n/*! Production::    functionNameBase : ST_CONTAINS */\n\n/*! Production::    functionNameBase : ST_CROSSES */\n\n/*! Production::    functionNameBase : ST_DIFFERENCE */\n\n/*! Production::    functionNameBase : ST_DIMENSION */\n\n/*! Production::    functionNameBase : ST_DISJOINT */\n\n/*! Production::    functionNameBase : ST_DISTANCE */\n\n/*! Production::    functionNameBase : ST_ENDPOINT */\n\n/*! Production::    functionNameBase : ST_ENVELOPE */\n\n/*! Production::    functionNameBase : ST_EQUALS */\n\n/*! Production::    functionNameBase : ST_EXTERIORRING */\n\n/*! Production::    functionNameBase : ST_GEOMCOLLFROMTEXT */\n\n/*! Production::    functionNameBase : ST_GEOMCOLLFROMTXT */\n\n/*! Production::    functionNameBase : ST_GEOMCOLLFROMWKB */\n\n/*! Production::    functionNameBase : ST_GEOMETRYCOLLECTIONFROMTEXT */\n\n/*! Production::    functionNameBase : ST_GEOMETRYCOLLECTIONFROMWKB */\n\n/*! Production::    functionNameBase : ST_GEOMETRYFROMTEXT */\n\n/*! Production::    functionNameBase : ST_GEOMETRYFROMWKB */\n\n/*! Production::    functionNameBase : ST_GEOMETRYN */\n\n/*! Production::    functionNameBase : ST_GEOMETRYTYPE */\n\n/*! Production::    functionNameBase : ST_GEOMFROMTEXT */\n\n/*! Production::    functionNameBase : ST_GEOMFROMWKB */\n\n/*! Production::    functionNameBase : ST_INTERIORRINGN */\n\n/*! Production::    functionNameBase : ST_INTERSECTION */\n\n/*! Production::    functionNameBase : ST_INTERSECTS */\n\n/*! Production::    functionNameBase : ST_ISCLOSED */\n\n/*! Production::    functionNameBase : ST_ISEMPTY */\n\n/*! Production::    functionNameBase : ST_ISSIMPLE */\n\n/*! Production::    functionNameBase : ST_LINEFROMTEXT */\n\n/*! Production::    functionNameBase : ST_LINEFROMWKB */\n\n/*! Production::    functionNameBase : ST_LINESTRINGFROMTEXT */\n\n/*! Production::    functionNameBase : ST_LINESTRINGFROMWKB */\n\n/*! Production::    functionNameBase : ST_NUMGEOMETRIES */\n\n/*! Production::    functionNameBase : ST_NUMINTERIORRING */\n\n/*! Production::    functionNameBase : ST_NUMINTERIORRINGS */\n\n/*! Production::    functionNameBase : ST_NUMPOINTS */\n\n/*! Production::    functionNameBase : ST_OVERLAPS */\n\n/*! Production::    functionNameBase : ST_POINTFROMTEXT */\n\n/*! Production::    functionNameBase : ST_POINTFROMWKB */\n\n/*! Production::    functionNameBase : ST_POINTN */\n\n/*! Production::    functionNameBase : ST_POLYFROMTEXT */\n\n/*! Production::    functionNameBase : ST_POLYFROMWKB */\n\n/*! Production::    functionNameBase : ST_POLYGONFROMTEXT */\n\n/*! Production::    functionNameBase : ST_POLYGONFROMWKB */\n\n/*! Production::    functionNameBase : ST_SRID */\n\n/*! Production::    functionNameBase : ST_STARTPOINT */\n\n/*! Production::    functionNameBase : ST_SYMDIFFERENCE */\n\n/*! Production::    functionNameBase : ST_TOUCHES */\n\n/*! Production::    functionNameBase : ST_UNION */\n\n/*! Production::    functionNameBase : ST_WITHIN */\n\n/*! Production::    functionNameBase : ST_X */\n\n/*! Production::    functionNameBase : ST_Y */\n\n/*! Production::    functionNameBase : SUBDATE */\n\n/*! Production::    functionNameBase : SUBSTRING_INDEX */\n\n/*! Production::    functionNameBase : SUBTIME */\n\n/*! Production::    functionNameBase : SYSTEM_USER */\n\n/*! Production::    functionNameBase : TAN */\n\n/*! Production::    functionNameBase : TIME */\n\n/*! Production::    functionNameBase : TIMEDIFF */\n\n/*! Production::    functionNameBase : TIMESTAMP */\n```\n\n----------------------------------------\n\nTITLE: Running dbgpts App in DB-GPT Webserver in Command Mode\nDESCRIPTION: Command to run the awel-flow-simple-streaming-chat app in the DB-GPT webserver in command mode, providing input data in JSON format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt run flow cmd \\\n--name awel-flow-simple-streaming-chat \\\n-d '\n{\n    \"model\": \"chatgpt_proxyllm\",\n    \"messages\": \"hello\",\n    \"stream\": true\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Migrating Meta Tables from DuckDB to SQLite using Python Script\nDESCRIPTION: This command runs a Python script to migrate meta tables (chat_history and connect_config) from DuckDB to SQLite.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/install.md#2025-04-09_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\npython docker/examples/metadata/duckdb2sqlite.py\n```\n\n----------------------------------------\n\nTITLE: SQL Diagnostics Grammar Rules\nDESCRIPTION: Production rules defining SQL diagnostics statements and condition information names.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_69\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    diagnosticsConditionInformationName : COLUMN_NAME */\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_CATALOG */\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_NAME */\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_SCHEMA */\n/*! Production::    diagnosticsConditionInformationName : CURSOR_NAME */\n/*! Production::    diagnosticsConditionInformationName : MESSAGE_TEXT */\n/*! Production::    diagnosticsConditionInformationName : MYSQL_ERRNO */\n/*! Production::    diagnosticsConditionInformationName : RETURNED_SQLSTATE */\n/*! Production::    diagnosticsConditionInformationName : SCHEMA_NAME */\n/*! Production::    diagnosticsConditionInformationName : SUBCLASS_ORIGIN */\n/*! Production::    diagnosticsConditionInformationName : TABLE_NAME */\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Parameters with React Component\nDESCRIPTION: React/JSX component configuration for DuckDB connector parameters, specifying path and driver settings. The configuration includes required file path and optional driver name parameters for establishing DuckDB connections.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_duckdb_duckdbconnectorparameters_c672c7.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"DuckDbConnectorParameters\",\n  \"description\": \"In-memory analytical database with efficient query processing.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"path\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Path to the DuckDB file.\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name for DuckDB, default is duckdb.\",\n      \"defaultValue\": \"duckdb\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Details for dbgpts Serve Module in JSX\nDESCRIPTION: A React component that displays the configuration documentation for the dbgpts serve module. It includes the component name, description, and parameters such as API keys.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_1a9284.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the my dbgpts serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: List Datasources Python Example\nDESCRIPTION: Example of using Python client to list datasources\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.datasource import list_datasource\n\nDBGPT_API_KEY = \"dbgpt\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await list_datasource(client=client)\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Postgres Datasource Dependencies\nDESCRIPTION: This command installs the necessary dependencies for using Postgres as a datasource in DB-GPT. It uses the 'uv sync' command to install packages with specific extras.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/postgres_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"datasource_postgres\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Chat Details and Call Chain in DB-GPT\nDESCRIPTION: Command to display the chat trace tree showing the operation flow from DB-GPT web entry through various internal operations with timing details.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace chat --hide_run_params --tree\n```\n\n----------------------------------------\n\nTITLE: Adding Image Name Suffix for DB-GPT Docker Build\nDESCRIPTION: Command to add a suffix to the DB-GPT Docker image name for versioning or environment identification.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --image-name-suffix v1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Subpartition Options in SQL\nDESCRIPTION: These productions define various subpartitioning options in SQL, including LIST, HASH, KEY, and RANGE subpartitioning with different parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_172\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tg_subpartition_option : SUBPARTITION BY BISON_LIST COLUMNS INTNUM SUBPARTITION TEMPLATE opt_list_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY BISON_LIST SUBPARTITION TEMPLATE opt_list_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY HASH opt_subpartitions */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY KEY INTNUM opt_subpartitions */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY LIST COLUMNS INTNUM SUBPARTITION TEMPLATE opt_list_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY RANGE COLUMNS INTNUM SUBPARTITION TEMPLATE opt_range_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY RANGE SUBPARTITION TEMPLATE opt_range_subpartition_list */\n```\n\n----------------------------------------\n\nTITLE: Configuration File for Local GPU Model\nDESCRIPTION: TOML configuration file for DB-GPT specifying local paths to the LLM and embedding models. This configuration is used when running DB-GPT with local models.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[models]\n[[models.llms]]\nname = \"Qwen2.5-Coder-0.5B-Instruct\"\nprovider = \"hf\"\n# Specify the model path in the local file system\npath = \"/app/models/Qwen2.5-Coder-0.5B-Instruct\"\n\n[[models.embeddings]]\nname = \"BAAI/bge-large-zh-v1.5\"\nprovider = \"hf\"\n# Specify the model path in the local file system\npath = \"/app/models/bge-large-zh-v1.5\"\n```\n\n----------------------------------------\n\nTITLE: Update Flow API Endpoint\nDESCRIPTION: API endpoint for updating an existing flow within DB-GPT. The request and response both use the Flow Object format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPUT /api/v2/serve/awel/flows\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Database Object Drop Statements\nDESCRIPTION: Defines the syntax for DROP statements that remove databases, tables, views, functions, procedures, and other database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_56\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dropDatabase : DROP dbFormat opt_ifExists uid */\n\n/*! Production::    dropEvent : DROP EVENT opt_ifExists fullId */\n\n/*! Production::    dropFunction : DROP FUNCTION opt_ifExists fullId */\n\n/*! Production::    dropIndex : DROP INDEX opt_intimeAction uid ON tableName optIndexLockAndAlgorithmAssigns */\n\n/*! Production::    dropLogfileGroup : DROP LOGFILE GROUP uid ENGINE EQUAL_SYMBOL engineName */\n\n/*! Production::    dropProcedure : DROP PROCEDURE opt_ifExists fullId */\n\n/*! Production::    dropServer : DROP SERVER opt_ifExists uid */\n\n/*! Production::    dropTable : DROP opt_TEMPORARY TABLE opt_ifExists tables opt_dropType */\n\n/*! Production::    dropTablespace : DROP TABLESPACE uid */\n\n/*! Production::    dropTablespace : DROP TABLESPACE uid ENGINE opt_MULT_ASSIGN engineName */\n\n/*! Production::    dropTrigger : DROP TRIGGER opt_ifExists fullId */\n\n/*! Production::    dropUser : DROP USER opt_ifExists userNames */\n\n/*! Production::    dropView : DROP VIEW opt_ifExists fullIds opt_dropType */\n```\n\n----------------------------------------\n\nTITLE: MySQL Function Name Base Definitions\nDESCRIPTION: Defines base function names available in MySQL including timestamp, string manipulation, cryptographic and other utility functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_83\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    functionNameBase : TIMESTAMPADD */\n/*! Production::    functionNameBase : TIMESTAMPDIFF */\n/*! Production::    functionNameBase : TIME_FORMAT */\n/*! Production::    functionNameBase : TIME_TO_SEC */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Control Flow Statements\nDESCRIPTION: Defines syntax for control flow statements in stored procedures, including ELSEIF alternatives and empty statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    elifAlternative : ELSEIF expression THEN procedureSqlStatements */\n\n/*! Production::    elifAlternatives : elifAlternative */\n\n/*! Production::    elifAlternatives : elifAlternative elifAlternatives */\n\n/*! Production::    emptyStatement : SEMI */\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary SQLite Database\nDESCRIPTION: Creates a temporary SQLite database with a sample user table containing basic user information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.datasource.rdbms.conn_sqlite import SQLiteTempConnector\n\ndb_conn = SQLiteTempConnector.create_temporary_db()\ndb_conn.create_temp_tables(\n    {\n        \"user\": {\n            \"columns\": {\n                \"id\": \"INTEGER PRIMARY KEY\",\n                \"name\": \"TEXT\",\n                \"age\": \"INTEGER\",\n            },\n            \"data\": [\n                (1, \"Tom\", 10),\n                (2, \"Jerry\", 16),\n                (3, \"Jack\", 18),\n                (4, \"Alice\", 20),\n                (5, \"Bob\", 22),\n            ],\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating Meta Tables from DuckDB to MySQL using Python Script\nDESCRIPTION: These commands describe the process of migrating meta tables from DuckDB to MySQL. It involves updating MySQL credentials in a Python script and then running the script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/install.md#2025-04-09_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\n1. update your mysql username and password in docker/examples/metadata/duckdb2mysql.py\n2.  python docker/examples/metadata/duckdb2mysql.py\n```\n\n----------------------------------------\n\nTITLE: Function Expression Grammar Rules\nDESCRIPTION: Grammar rules for various SQL function expressions including aggregate functions, string functions, and date functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_81\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_expr : ADDDATE \"(\" date_params \")\" */\n/*! Production::    func_expr : COUNT \"(\" DISTINCT expr_list \")\" */\n/*! Production::    func_expr : DATE_ADD \"(\" date_params \")\" */\n/*! Production::    func_expr : EXTRACT \"(\" date_unit FROM expr \")\" */\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Class Table in JSX\nDESCRIPTION: JSX component that displays a table of embedding configuration classes with their names, descriptions, and links. Uses the ConfigClassTable component to render the structured data.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/embedding/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"HFEmbeddingDeployModelParameters\",\n    \"description\": \"HFEmbeddingDeployModelParameters(name: str, provider: str = 'hf', verbose: Optional[bool] = False, concurrency: Optional[int] = 100, path: Optional[str] = None, device: Optional[str] = None, cache_folder: Optional[str] = None, normalize_embeddings: bool = False, multi_process: bool = False, model_kwargs: Dict[str, Any] = <factory>, encode_kwargs: Dict[str, Any] = <factory>, embed_instruction: Optional[str] = None, query_instruction: Optional[str] = None)\",\n    \"link\": \"./embeddings_hfembeddingdeploymodelparameters_f588e1\"\n  },\n  {\n    \"name\": \"JinaEmbeddingsDeployModelParameters\",\n    \"description\": \"Jina AI Embeddings deploy model parameters.\",\n    \"link\": \"./jina_jinaembeddingsdeploymodelparameters_40b0f2\"\n  },\n  {\n    \"name\": \"OllamaEmbeddingDeployModelParameters\",\n    \"description\": \"Ollama Embeddings deploy model parameters.\",\n    \"link\": \"./ollama_ollamaembeddingdeploymodelparameters_b511e0\"\n  },\n  {\n    \"name\": \"OpenAPIEmbeddingDeployModelParameters\",\n    \"description\": \"OpenAPI embedding deploy model parameters.\",\n    \"link\": \"./embeddings_openapiembeddingdeploymodelparameters_f9ba47\"\n  },\n  {\n    \"name\": \"QianfanEmbeddingDeployModelParameters\",\n    \"description\": \"Qianfan Embeddings deploy model parameters.\",\n    \"link\": \"./qianfan_qianfanembeddingdeploymodelparameters_257d2a\"\n  },\n  {\n    \"name\": \"TongyiEmbeddingDeployModelParameters\",\n    \"description\": \"Qianfan Embeddings deploy model parameters.\",\n    \"link\": \"./tongyi_tongyiembeddingdeploymodelparameters_a7cbb4\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Libro Serve Module Parameters using JSX Component\nDESCRIPTION: Configuration component implementation for the Libro serve module that defines API key parameters and documentation structure. The configuration allows for optional API key specification to control endpoint access.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_b1c2b9.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the libro serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing OceanBase Python Package\nDESCRIPTION: Pip command to install the OceanBase Python package for vector operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/kbqa.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade --quiet pyobvector\n```\n\n----------------------------------------\n\nTITLE: Listing Model Instances in High Availability Cluster\nDESCRIPTION: Bash command to list all model instances registered in the high availability DB-GPT cluster, connecting to multiple controllers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/model_service/cluster_ha.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCONTROLLER_ADDRESS=\"http://server1:8000,http://server2:8000\" dbgpt model list\n```\n\n----------------------------------------\n\nTITLE: Listing All Trace Information in Python\nDESCRIPTION: Command to display all trace information including Trace ID, Span ID, Operation Name and Conversation UID in a tabulated format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/debugging.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace list\n```\n\n----------------------------------------\n\nTITLE: Displaying ToolPack Prompts in Python\nDESCRIPTION: This asynchronous function shows how to generate and display the prompt for a ToolPack, which includes descriptions and parameters for all tools in the pack.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def show_tool_pack_prompts():\n\n    # Just show the default prompt type\n    tool_pack_prompt = await tools.get_prompt()\n    print(tool_pack_prompt)\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(show_tool_pack_prompts())\n```\n\n----------------------------------------\n\nTITLE: Defining SQL User Authentication Production Rules\nDESCRIPTION: This snippet defines production rules for SQL user authentication operations, including user creation, identification methods, and password options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_189\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    userAuthOption : userName */\n\n/*! Production::    userAuthOption : userName IDENTIFIED BY PASSWORD STRING_LITERAL */\n\n/*! Production::    userAuthOption : userName IDENTIFIED BY STRING_LITERAL */\n\n/*! Production::    userAuthOption : userName IDENTIFIED WITH authPlugin */\n\n/*! Production::    userAuthOption : userName IDENTIFIED WITH authPlugin AS STRING_LITERAL */\n\n/*! Production::    userAuthOption : userName IDENTIFIED WITH authPlugin BY STRING_LITERAL */\n\n/*! Production::    userAuthOptions : userAuthOption */\n\n/*! Production::    userAuthOptions : userAuthOption COMMA userAuthOptions */\n\n/*! Production::    userLockOption : ACCOUNT LOCK */\n\n/*! Production::    userLockOption : ACCOUNT UNLOCK */\n\n/*! Production::    userName : ID */\n\n/*! Production::    userName : STRING_LITERAL */\n\n/*! Production::    userName : STRING_USER_NAME */\n\n/*! Production::    userNames : userName */\n\n/*! Production::    userNames : userName COMMA userNames */\n\n/*! Production::    userPasswordOption : PASSWORD EXPIRE */\n\n/*! Production::    userPasswordOption : PASSWORD EXPIRE DEFAULT */\n\n/*! Production::    userPasswordOption : PASSWORD EXPIRE INTERVAL decimalLiteral DAY */\n\n/*! Production::    userPasswordOption : PASSWORD EXPIRE NEVER */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Elasticsearch Dependencies\nDESCRIPTION: Command to install required packages for DB-GPT with Elasticsearch storage support using UV package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/bm25_rag_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages --frozen \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_elasticsearch\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Delete Flow Using cURL\nDESCRIPTION: Example of using cURL to delete a flow by its ID. Requires DBGPT_API_KEY and a valid flow ID.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nFLOW_ID={YOUR_FLOW_ID}\n \n curl -X DELETE \"http://localhost:5670/api/v2/serve/awel/flows/$FLOW_ID\" \\\n    -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Production Rules\nDESCRIPTION: Grammar rules for exception handling including exception declarations, handlers, and patterns.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_63\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    exception_decl : exception_name EXCEPTION */\n/*! Production::    exception_handler : WHEN exception_pattern THEN pl_lang_stmt_list */\n/*! Production::    exception_pattern : OTHERS */\n/*! Production::    exception_pattern : exception_list */\n/*! Production::    exception_section : exception_handler */\n/*! Production::    exception_section : exception_handler exception_section */\n```\n\n----------------------------------------\n\nTITLE: SQL Object Inheritance Clauses Productions\nDESCRIPTION: Grammar rules for object-oriented concepts in SQL, defining inheritance and instantiation properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_101\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    inheritance_clauses : FINAL */\n\n/*! Production::    inheritance_clauses : INSTANTIABLE */\n\n/*! Production::    inheritance_clauses : NOT FINAL */\n\n/*! Production::    inheritance_clauses : NOT INSTANTIABLE */\n\n/*! Production::    inheritance_clauses : NOT OVERRIDING */\n\n/*! Production::    inheritance_clauses : OVERRIDING */\n\n/*! Production::    inheritance_clauses_list : inheritance_clauses */\n\n/*! Production::    inheritance_clauses_list : inheritance_clauses_list inheritance_clauses */\n\n/*! Production::    inline_pragma : PRAGMA INLINE \"(\" identifier \",\" STRING \")\" */\n```\n\n----------------------------------------\n\nTITLE: Chat Flow API Endpoint Definition\nDESCRIPTION: The main endpoint for chat completions when using Flow API. This is used to interact with flows created in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST /api/v2/chat/completions\n```\n\n----------------------------------------\n\nTITLE: SQL Function Expression Grammar Productions\nDESCRIPTION: This collection of grammar production rules defines the syntax for SQL function expressions. It covers a wide range of function types including aggregates, date/time functions, string manipulation, mathematical operations, and geometric functions. These rules are part of a parser grammar specification.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_67\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_expr : MAX \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : MICROSECOND \"(\" expr \")\" */\n\n/*! Production::    func_expr : MIN \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : MINUTE \"(\" expr \")\" */\n\n/*! Production::    func_expr : MOD \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : MONTH \"(\" expr \")\" */\n\n/*! Production::    func_expr : MULTILINESTRING \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : MULTIPOINT \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : MULTIPOLYGON \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : POINT \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : POLYGON \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : POSITION \"(\" bit_expr IN expr \")\" */\n\n/*! Production::    func_expr : QUARTER \"(\" expr \")\" */\n\n/*! Production::    func_expr : SECOND \"(\" expr \")\" */\n\n/*! Production::    func_expr : STD \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV_POP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV_SAMP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : SUBDATE \"(\" date_params \")\" */\n\n/*! Production::    func_expr : SUBDATE \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : SUM \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : TIME \"(\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMP \"(\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMP \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMPADD \"(\" timestamp_params \")\" */\n\n/*! Production::    func_expr : TIMESTAMPDIFF \"(\" timestamp_params \")\" */\n\n/*! Production::    func_expr : TOP_K_FRE_HIST \"(\" bit_expr \",\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    func_expr : TRIM \"(\" parameterized_trim \")\" */\n\n/*! Production::    func_expr : VALUES \"(\" column_definition_ref \")\" */\n\n/*! Production::    func_expr : VARIANCE \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : VAR_POP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : VAR_SAMP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : WEEK \"(\" expr \")\" */\n\n/*! Production::    func_expr : WEEK \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr \",\" INTNUM \",\" INTNUM \",\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr AS BINARY ws_nweights \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr opt_ws_as_char opt_ws_levels \")\" */\n\n/*! Production::    func_expr : YEAR \"(\" expr \")\" */\n\n/*! Production::    func_expr : cur_date_func */\n\n/*! Production::    func_expr : cur_time_func */\n\n/*! Production::    func_expr : cur_timestamp_func */\n\n/*! Production::    func_expr : function_name \"(\" opt_expr_as_list \")\" */\n\n/*! Production::    func_expr : json_value_expr */\n\n/*! Production::    func_expr : relation_name \".\" function_name \"(\" opt_expr_as_list \")\" */\n\n/*! Production::    func_expr : substr_or_substring \"(\" substr_params \")\" */\n\n/*! Production::    func_expr : sys_interval_func */\n\n/*! Production::    func_expr : sysdate_func */\n\n/*! Production::    func_expr : utc_date_func */\n\n/*! Production::    func_expr : utc_time_func */\n\n/*! Production::    func_expr : utc_timestamp_func */\n\n/*! Production::    func_name : identifier */\n\n/*! Production::    func_param : bit_expr */\n\n/*! Production::    func_param : func_param_with_assign */\n\n/*! Production::    func_param_list : func_param */\n\n/*! Production::    func_param_list : func_param_list \",\" func_param */\n\n/*! Production::    func_param_with_assign : var_name PARAM_ASSIGN_OPERATOR bit_expr */\n\n/*! Production::    functionArg : expression */\n\n/*! Production::    functionArgs : functionArg */\n\n/*! Production::    functionArgs : functionArg COMMA functionArgs */\n\n/*! Production::    functionCall : aggregateWindowedFunction */\n\n/*! Production::    functionCall : fullId LR_BRACKET opt_functionArgs RR_BRACKET */\n\n/*! Production::    functionCall : passwordFunctionClause */\n\n/*! Production::    functionCall : scalarFunctionName LR_BRACKET opt_functionArgs RR_BRACKET */\n\n/*! Production::    functionCall : specificFunction */\n\n/*! Production::    functionNameBase : ABS */\n\n/*! Production::    functionNameBase : ACOS */\n\n/*! Production::    functionNameBase : ADDDATE */\n\n/*! Production::    functionNameBase : ADDTIME */\n\n/*! Production::    functionNameBase : AES_DECRYPT */\n\n/*! Production::    functionNameBase : AES_ENCRYPT */\n\n/*! Production::    functionNameBase : AREA */\n\n/*! Production::    functionNameBase : ASBINARY */\n\n/*! Production::    functionNameBase : ASIN */\n\n/*! Production::    functionNameBase : ASTEXT */\n\n/*! Production::    functionNameBase : ASWKB */\n\n/*! Production::    functionNameBase : ASWKT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_DECRYPT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_DERIVE */\n\n/*! Production::    functionNameBase : ASYMMETRIC_ENCRYPT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_SIGN */\n\n/*! Production::    functionNameBase : ASYMMETRIC_VERIFY */\n\n/*! Production::    functionNameBase : ATAN */\n\n/*! Production::    functionNameBase : ATAN2 */\n\n/*! Production::    functionNameBase : BENCHMARK */\n\n/*! Production::    functionNameBase : BIN */\n\n/*! Production::    functionNameBase : BIT_COUNT */\n\n/*! Production::    functionNameBase : BIT_LENGTH */\n\n/*! Production::    functionNameBase : BUFFER */\n\n/*! Production::    functionNameBase : CEIL */\n\n/*! Production::    functionNameBase : CEILING */\n\n/*! Production::    functionNameBase : CENTROID */\n\n/*! Production::    functionNameBase : CHARACTER_LENGTH */\n\n/*! Production::    functionNameBase : CHARSET */\n\n/*! Production::    functionNameBase : CHAR_LENGTH */\n\n/*! Production::    functionNameBase : COERCIBILITY */\n\n/*! Production::    functionNameBase : COLLATION */\n\n/*! Production::    functionNameBase : COMPRESS */\n\n/*! Production::    functionNameBase : CONCAT */\n\n/*! Production::    functionNameBase : CONCAT_WS */\n\n/*! Production::    functionNameBase : CONNECTION_ID */\n\n/*! Production::    functionNameBase : CONV */\n\n/*! Production::    functionNameBase : CONVERT_TZ */\n\n/*! Production::    functionNameBase : COS */\n\n/*! Production::    functionNameBase : COT */\n\n/*! Production::    functionNameBase : COUNT */\n\n/*! Production::    functionNameBase : CRC32 */\n\n/*! Production::    functionNameBase : CREATE_ASYMMETRIC_PRIV_KEY */\n\n/*! Production::    functionNameBase : CREATE_ASYMMETRIC_PUB_KEY */\n\n/*! Production::    functionNameBase : CREATE_DH_PARAMETERS */\n\n/*! Production::    functionNameBase : CREATE_DIGEST */\n\n/*! Production::    functionNameBase : CROSSES */\n\n/*! Production::    functionNameBase : DATABASE */\n\n/*! Production::    functionNameBase : DATE */\n\n/*! Production::    functionNameBase : DATEDIFF */\n\n/*! Production::    functionNameBase : DATE_FORMAT */\n\n/*! Production::    functionNameBase : DAY */\n\n/*! Production::    functionNameBase : DAYNAME */\n\n/*! Production::    functionNameBase : DAYOFMONTH */\n\n/*! Production::    functionNameBase : DAYOFWEEK */\n\n/*! Production::    functionNameBase : DAYOFYEAR */\n\n/*! Production::    functionNameBase : DECODE */\n\n/*! Production::    functionNameBase : DEGREES */\n\n/*! Production::    functionNameBase : DES_DECRYPT */\n\n/*! Production::    functionNameBase : DES_ENCRYPT */\n\n/*! Production::    functionNameBase : DIMENSION */\n\n/*! Production::    functionNameBase : DISJOINT */\n\n/*! Production::    functionNameBase : ELT */\n\n/*! Production::    functionNameBase : ENCODE */\n\n/*! Production::    functionNameBase : ENCRYPT */\n\n/*! Production::    functionNameBase : ENDPOINT */\n\n/*! Production::    functionNameBase : ENVELOPE */\n\n/*! Production::    functionNameBase : EQUALS */\n\n/*! Production::    functionNameBase : EXP */\n\n/*! Production::    functionNameBase : EXPORT_SET */\n\n/*! Production::    functionNameBase : EXTERIORRING */\n\n/*! Production::    functionNameBase : EXTRACTVALUE */\n\n/*! Production::    functionNameBase : FIELD */\n\n/*! Production::    functionNameBase : FIND_IN_SET */\n\n/*! Production::    functionNameBase : FLOOR */\n\n/*! Production::    functionNameBase : FORMAT */\n\n/*! Production::    functionNameBase : FOUND_ROWS */\n\n/*! Production::    functionNameBase : FROM_BASE64 */\n\n/*! Production::    functionNameBase : FROM_DAYS */\n\n/*! Production::    functionNameBase : FROM_UNIXTIME */\n\n/*! Production::    functionNameBase : GEOMCOLLFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMCOLLFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTION */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTIONFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTIONFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMETRYFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYN */\n\n/*! Production::    functionNameBase : GEOMETRYTYPE */\n\n/*! Production::    functionNameBase : GEOMFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMFROMWKB */\n\n/*! Production::    functionNameBase : GET_FORMAT */\n\n/*! Production::    functionNameBase : GET_LOCK */\n\n/*! Production::    functionNameBase : GLENGTH */\n\n/*! Production::    functionNameBase : GREATEST */\n\n/*! Production::    functionNameBase : GTID_SUBSET */\n\n/*! Production::    functionNameBase : GTID_SUBTRACT */\n\n/*! Production::    functionNameBase : HEX */\n\n/*! Production::    functionNameBase : HOUR */\n\n/*! Production::    functionNameBase : IFNULL */\n\n/*! Production::    functionNameBase : INET6_ATON */\n\n/*! Production::    functionNameBase : INET6_NTOA */\n\n/*! Production::    functionNameBase : INET_ATON */\n\n/*! Production::    functionNameBase : INET_NTOA */\n\n/*! Production::    functionNameBase : INSTR */\n\n/*! Production::    functionNameBase : INTERIORRINGN */\n\n/*! Production::    functionNameBase : INTERSECTS */\n\n/*! Production::    functionNameBase : INVISIBLE */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Various SQL Language Constructs\nDESCRIPTION: A collection of BNF (Backus-Naur Form) grammar productions that define the syntax rules for various SQL language constructs used in a SQL parser. These rules specify the valid structure for SQL statements and expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_104\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    insert_vals : insert_vals \",\" expr_or_default */\n\n/*! Production::    insert_vals_list : \"(\" insert_vals \")\" */\n\n/*! Production::    insert_vals_list : insert_vals_list \",\" \"(\" insert_vals \")\" */\n\n/*! Production::    insert_with_opt_hint : INSERT */\n\n/*! Production::    insert_with_opt_hint : INSERT_HINT_BEGIN hint_list_with_end */\n\n/*! Production::    installPlugin : INSTALL PLUGIN uid SONAME STRING_LITERAL */\n\n/*! Production::    int_or_decimal : DECIMAL_VAL */\n\n/*! Production::    int_or_decimal : INTNUM */\n\n/*! Production::    int_or_unlimited : INTNUM */\n\n/*! Production::    int_or_unlimited : UNLIMITED */\n\n/*! Production::    int_type_i : BIGINT */\n\n/*! Production::    int_type_i : DECIMAL */\n\n/*! Production::    int_type_i : INT */\n\n/*! Production::    int_type_i : INTEGER */\n\n/*! Production::    int_type_i : MEDIUMINT */\n\n/*! Production::    int_type_i : NUMERIC */\n\n/*! Production::    int_type_i : SMALLINT */\n\n/*! Production::    int_type_i : TINYINT */\n\n/*! Production::    interface_pragma : PRAGMA INTERFACE \"(\" C \",\" identifier \")\" */\n\n/*! Production::    intervalExpr : PLUS INTERVAL intervalValue intervalType */\n\n/*! Production::    intervalExprs : intervalExpr */\n\n/*! Production::    intervalExprs : intervalExpr intervalExprs */\n\n/*! Production::    intervalType : DAY_HOUR */\n\n/*! Production::    intervalType : DAY_MICROSECOND */\n\n/*! Production::    intervalType : DAY_MINUTE */\n\n/*! Production::    intervalType : DAY_SECOND */\n\n/*! Production::    intervalType : HOUR_MICROSECOND */\n\n/*! Production::    intervalType : HOUR_MINUTE */\n\n/*! Production::    intervalType : HOUR_SECOND */\n\n/*! Production::    intervalType : MINUTE_MICROSECOND */\n\n/*! Production::    intervalType : MINUTE_SECOND */\n\n/*! Production::    intervalType : SECOND_MICROSECOND */\n\n/*! Production::    intervalType : YEAR */\n\n/*! Production::    intervalType : YEAR_MONTH */\n\n/*! Production::    intervalType : intervalTypeBase */\n\n/*! Production::    intervalTypeBase : DAY */\n\n/*! Production::    intervalTypeBase : HOUR */\n\n/*! Production::    intervalTypeBase : MICROSECOND */\n\n/*! Production::    intervalTypeBase : MINUTE */\n\n/*! Production::    intervalTypeBase : MONTH */\n\n/*! Production::    intervalTypeBase : QUARTER */\n\n/*! Production::    intervalTypeBase : SECOND */\n\n/*! Production::    intervalTypeBase : WEEK */\n\n/*! Production::    intervalValue : expression */\n\n/*! Production::    intnum_list : INTNUM */\n\n/*! Production::    intnum_list : INTNUM relation_sep_option intnum_list */\n\n/*! Production::    into_clause : BULK COLLECT INTO into_var_list */\n\n/*! Production::    into_clause : INTO DUMPFILE STRING_VALUE */\n\n/*! Production::    into_clause : INTO OUTFILE STRING_VALUE opt_charset field_opt line_opt */\n\n/*! Production::    into_clause : INTO into_var_list */\n\n/*! Production::    into_clause : INTO pl_left_value_list */\n\n/*! Production::    into_opt : %epsilon */\n\n/*! Production::    into_opt : INTO DUMPFILE STRING_VALUE */\n\n/*! Production::    into_opt : INTO OUTFILE STRING_VALUE opt_charset field_opt line_opt */\n\n/*! Production::    into_opt : into_clause */\n\n/*! Production::    into_var : NAME_OB */\n\n/*! Production::    into_var : QUESTIONMARK */\n\n/*! Production::    into_var : USER_VARIABLE */\n\n/*! Production::    into_var : obj_access_ref_normal */\n\n/*! Production::    into_var : unreserved_keyword_normal */\n\n/*! Production::    into_var_list : into_var */\n\n/*! Production::    into_var_list : into_var_list \",\" into_var */\n\n/*! Production::    invoke_right : AUTHID CURRENT_USER */\n\n/*! Production::    invoke_right : AUTHID DEFINER */\n\n/*! Production::    ip_port : HOST STRING_VALUE */\n\n/*! Production::    ip_port : SERVER opt_equal_mark STRING_VALUE */\n\n/*! Production::    is_or_as : AS */\n\n/*! Production::    is_or_as : IS */\n\n/*! Production::    isolation_level : READ COMMITTED */\n\n/*! Production::    isolation_level : READ UNCOMMITTED */\n\n/*! Production::    isolation_level : REPEATABLE READ */\n\n/*! Production::    isolation_level : SERIALIZABLE */\n\n/*! Production::    item_decl : constant_decl */\n\n/*! Production::    item_decl : exception_decl */\n\n/*! Production::    item_decl : pragma_stmt */\n\n/*! Production::    item_decl : var_decl */\n\n/*! Production::    iterateStatement : ITERATE uid */\n\n/*! Production::    joinPart : NATURAL JOIN tableSourceItem */\n\n/*! Production::    joinPart : NATURAL leftOrRight opt_OUTER JOIN tableSourceItem */\n\n/*! Production::    joinPart : STRAIGHT_JOIN tableSourceItem */\n\n/*! Production::    joinPart : STRAIGHT_JOIN tableSourceItem ON expression */\n\n/*! Production::    joinPart : leftOrRight opt_OUTER JOIN tableSourceItem innerJoinBody */\n\n/*! Production::    joinPart : opt_innerOrCross JOIN tableSourceItem innerJoinBody */\n\n/*! Production::    joinParts : joinPart */\n\n/*! Production::    joinParts : joinPart joinParts */\n\n/*! Production::    join_condition : ON expr */\n\n/*! Production::    join_condition : USING \"(\" column_list \")\" */\n\n/*! Production::    join_outer : %epsilon */\n\n/*! Production::    join_outer : OUTER */\n\n/*! Production::    joined_table : table_reference CROSS JOIN table_factor */\n\n/*! Production::    joined_table : table_reference FULL */\n\n/*! Production::    joined_table : table_reference FULL JOIN opt_full_table_factor join_condition */\n\n/*! Production::    joined_table : table_reference FULL OUTER JOIN opt_full_table_factor join_condition */\n\n/*! Production::    joined_table : table_reference INNER JOIN table_factor ON expr */\n\n/*! Production::    joined_table : table_reference INNER JOIN table_factor USING \"(\" column_list \")\" */\n\n/*! Production::    joined_table : table_reference JOIN table_factor ON expr */\n\n/*! Production::    joined_table : table_reference JOIN table_factor USING \"(\" column_list \")\" */\n\n/*! Production::    joined_table : table_reference except_full_outer_join_type opt_full_table_factor join_condition */\n\n/*! Production::    joined_table : table_reference inner_join_type opt_full_table_factor */\n\n/*! Production::    joined_table : table_reference inner_join_type opt_full_table_factor ON expr */\n\n/*! Production::    joined_table : table_reference inner_join_type opt_full_table_factor USING \"(\" column_list \")\" */\n\n/*! Production::    joined_table : table_reference natural_join_type opt_full_table_factor */\n\n/*! Production::    joined_table : table_reference natural_join_type table_factor */\n\n/*! Production::    joined_table : table_reference outer_join_type JOIN table_factor join_condition */\n\n/*! Production::    json_on_response : ERROR_P */\n\n/*! Production::    json_on_response : NULLX */\n\n/*! Production::    key_for_group_by : bit_expr */\n\n/*! Production::    key_or_index : INDEX */\n\n/*! Production::    key_or_index : KEY */\n\n/*! Production::    key_partition_option : PARTITION BY KEY \"(\" \")\" subpartition_option opt_partitions */\n\n/*! Production::    key_partition_option : PARTITION BY KEY \"(\" \")\" subpartition_option opt_partitions opt_hash_partition_list */\n\n/*! Production::    key_partition_option : PARTITION BY KEY \"(\" column_name_list \")\" subpartition_option opt_partitions */\n\n/*! Production::    key_partition_option : PARTITION BY KEY \"(\" column_name_list \")\" subpartition_option opt_partitions opt_hash_partition_list */\n\n/*! Production::    killStatement : KILL CONNECTION decimalLiterals */\n\n/*! Production::    killStatement : KILL QUERY decimalLiterals */\n\n/*! Production::    killStatement : KILL decimalLiterals */\n\n/*! Production::    kill_stmt : KILL CONNECTION bit_expr */\n\n/*! Production::    kill_stmt : KILL CONNECTION expr */\n\n/*! Production::    kill_stmt : KILL QUERY bit_expr */\n\n/*! Production::    kill_stmt : KILL QUERY expr */\n\n/*! Production::    kill_stmt : KILL bit_expr */\n\n/*! Production::    kill_stmt : KILL expr */\n\n/*! Production::    label_def : LABEL_LEFT label_name LABEL_RIGHT */\n\n/*! Production::    label_list : label_def */\n\n/*! Production::    label_list : label_list label_def */\n\n/*! Production::    label_name : identifier */\n\n/*! Production::    labeled_pl_lang_stmt : opt_label_list pl_lang_stmt */\n\n/*! Production::    leaveStatement : LEAVE uid */\n\n/*! Production::    leftOrRight : LEFT */\n\n/*! Production::    leftOrRight : RIGHT */\n\n/*! Production::    lengthOneDimension : LR_BRACKET decimalLiteral RR_BRACKET */\n\n/*! Production::    lengthTwoDimension : LR_BRACKET decimalLiteral COMMA decimalLiteral RR_BRACKET */\n\n/*! Production::    lengthTwoOptionalDimension : LR_BRACKET decimalLiteral COMMA decimalLiteral RR_BRACKET */\n\n/*! Production::    lengthTwoOptionalDimension : LR_BRACKET decimalLiteral RR_BRACKET */\n\n/*! Production::    levelInWeightListElement : decimalLiteral levelInWeightListElement_orderType */\n\n/*! Production::    levelInWeightListElement_orderType : %epsilon */\n\n/*! Production::    levelInWeightListElement_orderType : ASC */\n\n/*! Production::    levelInWeightListElement_orderType : DESC */\n\n/*! Production::    levelInWeightListElement_orderType : REVERSE */\n\n/*! Production::    levelInWeightListElements : levelInWeightListElement */\n\n/*! Production::    levelInWeightListElements : levelInWeightListElement COMMA levelInWeightListElements */\n\n/*! Production::    levelsInWeightString : LEVEL decimalLiteral MINUS decimalLiteral */\n\n/*! Production::    levelsInWeightString : LEVEL levelInWeightListElements */\n\n/*! Production::    limitClause : LIMIT limitClauseAtom */\n\n/*! Production::    limitClause : LIMIT limitClauseAtom COMMA limitClauseAtom */\n\n/*! Production::    limitClause : LIMIT limitClauseAtom OFFSET limitClauseAtom */\n\n/*! Production::    limitClauseAtom : decimalLiteral */\n\n/*! Production::    limitClauseAtom : mysqlVariable */\n\n/*! Production::    limitClauseAtom : simpleId */\n\n/*! Production::    limit_clause : LIMIT limit_expr \",\" limit_expr */\n\n/*! Production::    limit_clause : LIMIT limit_expr */\n\n/*! Production::    limit_clause : LIMIT limit_expr OFFSET limit_expr */\n\n/*! Production::    limit_expr : INTNUM */\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Type Decisions\nDESCRIPTION: Defines a list of chart types and their use cases for data visualization decisions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nantv_charts = [\n    {\"response_line_chart\": \"used to display comparative trend analysis data\"},\n    {\n        \"response_pie_chart\": \"suitable for scenarios such as proportion and distribution statistics\"\n    },\n    {\n        \"response_table\": \"suitable for display with many display columns or non-numeric columns\"\n    },\n    {\n        \"response_scatter_plot\": \"Suitable for exploring relationships between variables, detecting outliers, etc.\"\n    },\n    {\n        \"response_bubble_chart\": \"Suitable for relationships between multiple variables, highlighting outliers or special situations, etc.\"\n    },\n    {\n        \"response_donut_chart\": \"Suitable for hierarchical structure representation, category proportion display and highlighting key categories, etc.\"\n    },\n    {\n        \"response_area_chart\": \"Suitable for visualization of time series data, comparison of multiple groups of data, analysis of data change trends, etc.\"\n    },\n    {\n        \"response_heatmap\": \"Suitable for visual analysis of time series data, large-scale data sets, distribution of classified data, etc.\"\n    },\n]\ndisplay_type = \"\\n\".join(\n    f\"{key}:{value}\" for dict_item in antv_charts for key, value in dict_item.items()\n)\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Python SDK with DB-GPT Local Models\nDESCRIPTION: Python code demonstrating how to configure the OpenAI SDK to connect to the local DB-GPT API server and perform a chat completion request using the glm-4-9b-chat model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/OpenAI_SDK_call.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nimport openai\nopenai.api_key = \"EMPTY\"\nopenai.api_base = \"http://127.0.0.1:8100/api/v1\"\nmodel = \"glm-4-9b-chat\"\n\ncompletion = openai.ChatCompletion.create(\n  model=model,\n  messages=[{\"role\": \"user\", \"content\": \"hello\"}]\n)\n# print the completion\nprint(completion.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Defining Oracle-Specific ORDER BY Variants\nDESCRIPTION: BNF production rules for Oracle SQL's specific ORDER BY clause variants, including the optional SIBLINGS keyword and sort list specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_139\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    order_by : ORDER BY sort_list */\n\n/*! Production::    order_by : ORDER opt_siblings BY sort_list */\n\n/*! Production::    order_or_cluster : CLUSTER */\n\n/*! Production::    order_or_cluster : ORDER */\n```\n\n----------------------------------------\n\nTITLE: Running dbgpts App in DB-GPT Webserver\nDESCRIPTION: Command to run the awel-flow-simple-streaming-chat app in the DB-GPT webserver, specifying the model, messages, and stream option.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt run flow chat \\\n--name awel-flow-simple-streaming-chat \\\n--model \"chatgpt_proxyllm\" \\\n--messages \"hello\" \\\n--stream\n```\n\n----------------------------------------\n\nTITLE: Configuring Feedback Service Component with MDX and React\nDESCRIPTION: React component implementation for displaying feedback service configuration details using MDX and a custom ConfigDetail component. Defines the service configuration structure including API key parameters and documentation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_fa1f35.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigDetail } from \"@site/src/components/mdx/ConfigDetail\";\n\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the feedback serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Executing StreamifyAbsOperator Example in Bash\nDESCRIPTION: This bash command runs the Python script that demonstrates the StreamifyAbsOperator creating a stream of numbers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.5_streamify_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/streamify_operator_numbers.py\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server with OpenAI Proxy Configuration\nDESCRIPTION: Command to start the DB-GPT webserver using a specific OpenAI proxy configuration file. Can be executed using uv run.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/mssql_install.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Stream Response Format\nDESCRIPTION: Example of the response format when using streaming chat with a flow. Shows the JSON structure returned for each chunk of the response.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\ndata: {\"id\": \"579f8862-fc4b-481e-af02-a127e6d036c8\", \"created\": 1710918094, \"model\": \"chatgpt_proxyllm\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"\\n\\n\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Dockerfile for DB-GPT Docker Build\nDESCRIPTION: Command to use a custom Dockerfile instead of the default one for building the DB-GPT Docker image.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --dockerfile Dockerfile.custom\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Privilege Create Types and Levels\nDESCRIPTION: Grammar rules for privilege create types in SQL GRANT statements, defining what kinds of database objects can be created with the CREATE privilege, and rules for privilege levels using wildcard notation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_157\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    privilegeCreateType : %epsilon */\n\n/*! Production::    privilegeCreateType : ROLE */\n\n/*! Production::    privilegeCreateType : ROUTINE */\n\n/*! Production::    privilegeCreateType : TABLESPACE */\n\n/*! Production::    privilegeCreateType : TEMPORARY TABLES */\n\n/*! Production::    privilegeCreateType : USER */\n\n/*! Production::    privilegeCreateType : VIEW */\n\n/*! Production::    privilegeLevel : STAR */\n\n/*! Production::    privilegeLevel : STAR DOT STAR */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT DuckDB Dependencies\nDESCRIPTION: Command to install required packages including DuckDB datasource, RAG, and ChromaDB storage using UV package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/duckdb_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"datasource_duckdb\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n\n```\n\n----------------------------------------\n\nTITLE: List Flows Using cURL\nDESCRIPTION: Example of using cURL to list all available flows. Requires DBGPT_API_KEY.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\n\ncurl -X GET \"http://localhost:5670/api/v2/serve/awel/flows\" -H \"Authorization: Bearer $DBGPT_API_KEY\"\n\n```\n\n----------------------------------------\n\nTITLE: SET ROLE Statement Production Rule in SQL\nDESCRIPTION: Grammar production rule for the SET ROLE statement that assigns roles to the current session.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_129\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_role_stmt : SET ROLE default_role_clause */\n```\n\n----------------------------------------\n\nTITLE: Replication Statement Grammar Rules\nDESCRIPTION: Grammar productions for replication-related SQL statements including master/slave operations and transaction management.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_133\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    replicationStatement : changeMaster */\n/*! Production::    replicationStatement : changeReplicationFilter */\n/*! Production::    replicationStatement : purgeBinaryLogs */\n/*! Production::    replicationStatement : resetMaster */\n/*! Production::    replicationStatement : resetSlave */\n```\n\n----------------------------------------\n\nTITLE: Executing Stream Transformation Script\nDESCRIPTION: Command to execute the stream transformation example script using Poetry package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.7_transform_stream_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/transform_stream_operator_double_numbers.py\n```\n\n----------------------------------------\n\nTITLE: SHOW Log Format Production Rules in SQL\nDESCRIPTION: Grammar production rules for log formats used in SHOW LOGS statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_140\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showLogFormat : BINLOG */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showLogFormat : RELAYLOG */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT RAG Dependencies\nDESCRIPTION: Installation command for DB-GPT library with RAG support, requiring version 0.5.3rc0 or higher.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"dbgpt[rag]>=0.5.3rc0\" -U\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Rerank API with cURL\nDESCRIPTION: cURL command to use the experimental document reranking feature, which reorders candidate documents based on relevance to a query using the bge-reranker-base model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/OpenAI_SDK_call.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:8100/api/v1/beta/relevance \\\n-H \"Authorization: Bearer EMPTY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"model\": \"bge-reranker-base\",\n    \"query\": \"what is awel talk about?\",\n    \"documents\": [\n      \"Agentic Workflow Expression Language(AWEL) is a set of intelligent agent workflow expression language specially designed for large model application development.\",\n      \"Autonomous agents have long been a research focus in academic and industry communities\",\n      \"AWEL is divided into three levels in deign, namely the operator layer, AgentFream layer and DSL layer.\",\n      \"Elon musk is a famous entrepreneur and inventor, he is the founder of SpaceX and Tesla.\"\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Baidu Wenxin Proxy LLM Parameters in JSON\nDESCRIPTION: JSON configuration object detailing all parameters needed for setting up Baidu Wenxin as a proxy LLM in DB-GPT. The configuration includes authentication details, model specifications, and operational parameters with their types, descriptions, and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/wenxin_wenxindeploymodelparameters_63c66b.mdx#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"WenxinDeployModelParameters\",\n  \"description\": \"Baidu Wenxin proxy LLM configuration.\",\n  \"documentationUrl\": \"https://cloud.baidu.com/doc/WENXINWORKSHOP/s/clntwmv7t\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/wenxin\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Wenxin API.\",\n      \"defaultValue\": \"${env:WEN_XIN_API_KEY}\"\n    },\n    {\n      \"name\": \"api_secret\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API secret key of the Wenxin API.\",\n      \"defaultValue\": \"${env:WEN_XIN_API_SECRET}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ConfigClassTable Component in Markdown\nDESCRIPTION: This snippet imports a custom React component called ConfigClassTable, which is used to render a table of configuration classes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { ConfigClassTable } from '@site/src/components/mdx/ConfigClassTable';\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Class Documentation with React\nDESCRIPTION: JSX component usage for rendering a table of configuration classes with their descriptions and links. Uses a ConfigClassTable component to display storage configuration options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/utils/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"OSSStorageConfig\",\n    \"description\": \"OSSStorageConfig(endpoint: str, region: str, access_key_id: Optional[str] = None, access_key_secret: Optional[str] = None, use_environment_credentials: Optional[bool] = False, fixed_bucket: Optional[str] = None, bucket_prefix: Optional[str] = 'dbgpt-fs-', auto_create_bucket: Optional[bool] = True, save_chunk_size: Optional[int] = 1048576)\",\n    \"link\": \"./config_ossstorageconfig_1ad505\"\n  },\n  {\n    \"name\": \"S3StorageConfig\",\n    \"description\": \"S3StorageConfig(endpoint: str, region: str, access_key_id: Optional[str] = None, access_key_secret: Optional[str] = None, use_environment_credentials: Optional[bool] = False, fixed_bucket: Optional[str] = None, bucket_prefix: Optional[str] = 'dbgpt-fs-', auto_create_bucket: Optional[bool] = True, save_chunk_size: Optional[int] = 1048576, signature_version: Optional[str] = None, s3_config: Optional[Dict[str, Any]] = <factory>)\",\n    \"link\": \"./config_s3storageconfig_f0cdc9\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Stream Transformation Output Example\nDESCRIPTION: Example output showing the results of the number doubling transformation, displaying numbers 0 through 9 doubled.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.7_transform_stream_operator.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n```\n\n----------------------------------------\n\nTITLE: App Scene Evaluation Request Example\nDESCRIPTION: Example JSON structure for an evaluation request in the 'app' scene, which includes app ID, context parameters like top_k and model, and an answer relevancy metric.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/evaluation.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scene_key\": \"app\",\n  \"scene_value\":\"2c76eea2-83b6-11ef-b482-acde48001122\",\n  \"context\":{\"top_k\":5, \"prompt\":\"942acd7e33b54ce28565f89f9b278044\",\"model\":\"zhipu_proxyllm\"},\n  \"sys_code\":\"xx\",\n  \"evaluate_metrics\":[\"AnswerRelevancyMetric\"],\n  \"datasets\": [{\n            \"query\": \"what awel talked about\",\n            \"doc_name\":\"awel.md\"\n        }]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Custom dbgpts App in Chat Mode\nDESCRIPTION: Command to run the custom dbgpts app 'simple_chat_app.py' locally in chat mode, specifying the file, name, model, and messages.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt run flow --local --file simple_chat_app.py \\\nchat \\\n--name dbgpts_simple_chat_app \\\n--model \"gpt-3.5-turbo\" \\\n--messages \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server with OpenAI Proxy Configuration\nDESCRIPTION: Command to start the DB-GPT webserver using a specific configuration file for OpenAI proxy settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/duckdb_install.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Defining XA Transaction Statement Productions in SQL\nDESCRIPTION: These productions define the syntax for XA (eXtended Architecture) transaction statements in SQL, including begin, commit, end, prepare, and rollback operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_232\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    xa_begin_stmt : XA START STRING_VALUE */\n\n/*! Production::    xa_commit_stmt : XA COMMIT STRING_VALUE */\n\n/*! Production::    xa_end_stmt : XA END STRING_VALUE */\n\n/*! Production::    xa_prepare_stmt : XA PREPARE STRING_VALUE */\n\n/*! Production::    xa_rollback_stmt : XA ROLLBACK STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Graph RAG Dependencies\nDESCRIPTION: Command to install the necessary packages for using Graph RAG in DB-GPT, including base, proxy_openai, rag, storage_chromadb, dbgpts, and graph_rag extras.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/graph_rag_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\" \\\n--extra \"graph_rag\"\n```\n\n----------------------------------------\n\nTITLE: Get Datasource Curl Example\nDESCRIPTION: Example of using curl to get a datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nDATASOURCE_ID={YOUR_DATASOURCE_ID}\n\ncurl -X GET \"http://localhost:5670/api/v2/serve/datasources/$DATASOURCE_ID\" -H \"Authorization: Bearer $DBGPT_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for SHUTDOWN Statement\nDESCRIPTION: This snippet defines the grammar production for the SHUTDOWN statement.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_147\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    shutdownStatement : SHUTDOWN */\n```\n\n----------------------------------------\n\nTITLE: Defining Oracle System Privileges in Grammar Production Rules\nDESCRIPTION: Lists grammar production rules for Oracle system privileges including table, view, trigger, procedure, and user management privileges. These define the syntax for various system-level privileges in Oracle databases.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_169\n\nLANGUAGE: Oracle SQL\nCODE:\n```\n/*! Production::    system_privilege : CREATE ANY TABLE */\n\n/*! Production::    system_privilege : CREATE ANY TRIGGER */\n\n/*! Production::    system_privilege : CREATE ANY TYPE */\n\n/*! Production::    system_privilege : CREATE ANY VIEW */\n\n/*! Production::    system_privilege : CREATE DATABASE LINK */\n\n/*! Production::    system_privilege : CREATE PROCEDURE */\n\n/*! Production::    system_privilege : CREATE PROFILE */\n\n/*! Production::    system_privilege : CREATE PUBLIC DATABASE LINK */\n\n/*! Production::    system_privilege : CREATE PUBLIC SYNONYM */\n\n/*! Production::    system_privilege : CREATE ROLE */\n\n/*! Production::    system_privilege : CREATE SEQUENCE */\n\n/*! Production::    system_privilege : CREATE SESSION */\n\n/*! Production::    system_privilege : CREATE SYNONYM */\n\n/*! Production::    system_privilege : CREATE TABLE */\n\n/*! Production::    system_privilege : CREATE TABLESPACE */\n\n/*! Production::    system_privilege : CREATE TRIGGER */\n\n/*! Production::    system_privilege : CREATE TYPE */\n\n/*! Production::    system_privilege : CREATE USER */\n\n/*! Production::    system_privilege : CREATE VIEW */\n\n/*! Production::    system_privilege : DELETE ANY TABLE */\n\n/*! Production::    system_privilege : DROP ANY INDEX */\n\n/*! Production::    system_privilege : DROP ANY OUTLINE */\n\n/*! Production::    system_privilege : DROP ANY PROCEDURE */\n\n/*! Production::    system_privilege : DROP ANY ROLE */\n\n/*! Production::    system_privilege : DROP ANY SEQUENCE */\n\n/*! Production::    system_privilege : DROP ANY SYNONYM */\n\n/*! Production::    system_privilege : DROP ANY TABLE */\n\n/*! Production::    system_privilege : DROP ANY TRIGGER */\n\n/*! Production::    system_privilege : DROP ANY TYPE */\n\n/*! Production::    system_privilege : DROP ANY VIEW */\n\n/*! Production::    system_privilege : DROP DATABASE LINK */\n\n/*! Production::    system_privilege : DROP PROFILE */\n\n/*! Production::    system_privilege : DROP PUBLIC SYNONYM */\n\n/*! Production::    system_privilege : DROP TABLESPACE */\n\n/*! Production::    system_privilege : DROP USER */\n\n/*! Production::    system_privilege : EXECUTE ANY PROCEDURE */\n\n/*! Production::    system_privilege : EXECUTE ANY TYPE */\n\n/*! Production::    system_privilege : EXEMPT REDACTION POLICY */\n\n/*! Production::    system_privilege : FLASHBACK ANY TABLE */\n\n/*! Production::    system_privilege : GRANT ANY OBJECT PRIVILEGE */\n\n/*! Production::    system_privilege : GRANT ANY PRIVILEGE */\n\n/*! Production::    system_privilege : GRANT ANY ROLE */\n\n/*! Production::    system_privilege : INSERT ANY TABLE */\n\n/*! Production::    system_privilege : LOCK ANY TABLE */\n\n/*! Production::    system_privilege : PURGE DBA_RECYCLEBIN */\n\n/*! Production::    system_privilege : SELECT ANY DICTIONARY */\n\n/*! Production::    system_privilege : SELECT ANY SEQUENCE */\n\n/*! Production::    system_privilege : SELECT ANY TABLE */\n\n/*! Production::    system_privilege : SHOW PROCESS */\n\n/*! Production::    system_privilege : SYSBACKUP */\n\n/*! Production::    system_privilege : SYSDBA */\n\n/*! Production::    system_privilege : SYSKM */\n\n/*! Production::    system_privilege : SYSOPER */\n\n/*! Production::    system_privilege : UNDER ANY TYPE */\n\n/*! Production::    system_privilege : UPDATE ANY TABLE */\n\n/*! Production::    system_privilege_list : system_privilege */\n\n/*! Production::    system_privilege_list : system_privilege_list \",\" system_privilege */\n```\n\n----------------------------------------\n\nTITLE: Running dbgpts App Locally in Command Mode\nDESCRIPTION: Command to run the awel-flow-simple-streaming-chat app locally in command mode, providing input data in JSON format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt run flow --local cmd \\\n--name awel-flow-simple-streaming-chat \\\n-d '\n{\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": \"hello\",\n    \"stream\": true\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Signal Condition Components\nDESCRIPTION: This snippet defines grammar productions for various components of signal conditions, including catalog names, constraint information, and error details.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_149\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    signalConditionLeft : CATALOG_NAME */\n\n/*! Production::    signalConditionLeft : CLASS_ORIGIN */\n\n/*! Production::    signalConditionLeft : COLUMN_NAME */\n\n/*! Production::    signalConditionLeft : CONSTRAINT_CATALOG */\n\n/*! Production::    signalConditionLeft : CONSTRAINT_NAME */\n\n/*! Production::    signalConditionLeft : CONSTRAINT_SCHEMA */\n\n/*! Production::    signalConditionLeft : CURSOR_NAME */\n\n/*! Production::    signalConditionLeft : MESSAGE_TEXT */\n\n/*! Production::    signalConditionLeft : MYSQL_ERRNO */\n\n/*! Production::    signalConditionLeft : SCHEMA_NAME */\n\n/*! Production::    signalConditionLeft : SUBCLASS_ORIGIN */\n\n/*! Production::    signalConditionLeft : TABLE_NAME */\n\n/*! Production::    signalConditionRight : DECIMAL_LITERAL */\n\n/*! Production::    signalConditionRight : mysqlVariable */\n\n/*! Production::    signalConditionRight : simpleId */\n\n/*! Production::    signalConditionRight : stringLiteral */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table References List\nDESCRIPTION: Defines production rules for table_references in SQL grammar. These rules specify how multiple table references can be defined in SQL queries as a comma-separated list.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_182\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_references : table_reference */\n\n/*! Production::    table_references : table_references \",\" table_reference */\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Setting in DB-GPT\nDESCRIPTION: Instructions for switching the language in DB-GPT by modifying the LANGUAGE parameter in the .env configuration file. The default language is English, with options for Chinese (zh) and English (en).\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Language Switching\n    In the .env configuration file, modify the LANGUAGE parameter to switch to different languages. The default is English (Chinese: zh, English: en, other languages to be added later).\n```\n\n----------------------------------------\n\nTITLE: Building OpenAI-optimized DB-GPT Docker Image\nDESCRIPTION: Command to build a CPU-based DB-GPT Docker image optimized for OpenAI API usage, including basic functionality, all proxy integrations, and RAG capabilities without GPU acceleration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode openai\n```\n\n----------------------------------------\n\nTITLE: Rendering Deepseek Proxy LLM Configuration in JSX\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render the configuration for the Deepseek proxy LLM. It includes a detailed set of parameters such as name, backend, provider, API settings, and other model-specific options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/deepseek_deepseekdeploymodelparameters_194cbd.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"DeepSeekDeployModelParameters\",\n  \"description\": \"Deepseek proxy LLM configuration.\",\n  \"documentationUrl\": \"https://api-docs.deepseek.com/\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/deepseek\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the DeepSeek API.\",\n      \"defaultValue\": \"${env:DEEPSEEK_API_BASE:-https://api.deepseek.com/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the DeepSeek API.\",\n      \"defaultValue\": \"${env:DEEPSEEK_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Knowledge List Command Options\nDESCRIPTION: Options for listing and displaying knowledge base information, including space details, document content, and chunk information display settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt knowledge list --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge list [OPTIONS]\n\n  List knowledge space\n\nOptions:\n  --space_name TEXT               Your knowledge space name. If None, list all\n                                  spaces\n  --doc_id INTEGER                Your document id in knowledge space. If Not\n                                  None, list all chunks in current document\n  --page INTEGER                  The page for every query  [default: 1]\n  --page_size INTEGER             The page size for every query  [default: 20]\n  --show_content                  Query the document content of chunks\n  --output [text|html|csv|latex|json]\n                                  The output format\n  --help                          Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Upgrading Transformers Library for Llama 3.1 Support in Python\nDESCRIPTION: This command upgrades the transformers library to version 4.43.0 or higher, which is required for Llama 3.1 support in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2024-07-24-db-gpt-llama-3.1-support.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade \"transformers>=4.43.0\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Yi LLM Configuration Component in React/JSX\nDESCRIPTION: React/JSX component implementation that displays a configuration detail component with Yi LLM parameters. It defines the complete configuration schema including all available parameters, their types, requirements, and default values for Yi proxy LLM integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/yi_yideploymodelparameters_92dbaa.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"YiDeployModelParameters\",\n  \"description\": \"Yi proxy LLM configuration.\",\n  \"documentationUrl\": \"https://platform.lingyiwanwu.com/docs\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/yi\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Yi API.\",\n      \"defaultValue\": \"${env:YI_API_BASE:-https://api.lingyiwanwu.com/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Yi API.\",\n      \"defaultValue\": \"${env:YI_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Web Server with Llama 3.1 Support\nDESCRIPTION: This command starts the DB-GPT web server, which will now use the configured Llama 3.1 model for inference.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2024-07-24-db-gpt-llama-3.1-support.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt start webserver\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Knowledge Graph Processing in DB-GPT\nDESCRIPTION: A cURL command to trigger the knowledge graph processing workflow via HTTP POST request to the DB-GPT API endpoint. This request initiates the knowledge graph processing workflow with an empty JSON payload.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/templates/Knowledge_Graph.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:5670/api/v1/awel/trigger/rag/knowledge/kg/process' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{}'\n```\n\n----------------------------------------\n\nTITLE: MySQL Alter Database Productions\nDESCRIPTION: Grammar rules for ALTER DATABASE statements including upgrading data directory, character sets and options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alterDatabase : ALTER dbFormat uid UPGRADE DATA DIRECTORY NAME */\n\n/*! Production::    alter_database_stmt : ALTER database_key opt_database_name opt_set database_option_list */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Hive Dependencies\nDESCRIPTION: Command to install required packages for Hive integration including base, datasource_hive, rag, storage_chromadb, and dbgpts extras using uv package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/hive_install.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"datasource_hive\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: List Datasources Endpoint\nDESCRIPTION: Endpoint for listing all datasources\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nGET /api/v2/serve/datasources\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Productions for Statement Lists and Delimiters\nDESCRIPTION: This snippet defines parser productions for statement lists, including handling of delimiters and end markers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_158\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    stmt_list : DELIMITER */\n\n/*! Production::    stmt_list : END_P */\n\n/*! Production::    stmt_list : stmt DELIMITER opt_end_p */\n\n/*! Production::    stmt_list : stmt END_P */\n```\n\n----------------------------------------\n\nTITLE: Visualization of Cross-Type Configuration Relationships using Mermaid\nDESCRIPTION: A Mermaid diagram illustrating the relationships between different configuration types in the DB-GPT project, showing connections between service, datasource, memory, and other components.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/overview.mdx#2025-04-09_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    other[other - 1 classes]\n    datasource[datasource - 14 classes]\n    llm[llm - 22 classes]\n    embedding[embedding - 6 classes]\n    reranker[reranker - 3 classes]\n    service[service - 1 classes]\n    graph_store[graph_store - 4 classes]\n    vector_store[vector_store - 6 classes]\n    serve[serve - 13 classes]\n    memory[memory - 2 classes]\n    app[app - 6 classes]\n    utils[utils - 2 classes]\n    service -->|14 connections| datasource\n    other -->|13 connections| serve\n    serve -->|2 connections| utils\n    app -->|14 connections| memory\n```\n\n----------------------------------------\n\nTITLE: Installing dbgpts Package\nDESCRIPTION: Command to install the awel-flow-simple-streaming-chat package using the dbgpt app install command.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/dbgpts/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt app install awel-flow-simple-streaming-chat -U\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Productions for Storage Options\nDESCRIPTION: This snippet defines parser productions for various storage options, including initial size, max extents, min extents, and next size.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_160\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    storage_option : INITIAL_ size_option */\n\n/*! Production::    storage_option : MAXEXTENTS int_or_unlimited */\n\n/*! Production::    storage_option : MINEXTENTS INTNUM */\n\n/*! Production::    storage_option : NEXT size_option */\n\n/*! Production::    storage_options_list : storage_option */\n\n/*! Production::    storage_options_list : storage_options_list storage_option */\n```\n\n----------------------------------------\n\nTITLE: Navigating to DB-GPT Root Directory in Bash\nDESCRIPTION: This command changes the current directory to the DB-GPT root directory, which is necessary for the subsequent configuration steps.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2024-07-24-db-gpt-llama-3.1-support.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd DB-GPT\n```\n\n----------------------------------------\n\nTITLE: Building VLLM-enhanced DB-GPT Docker Image\nDESCRIPTION: Command to build a CUDA-based DB-GPT Docker image with VLLM support for optimized inference, including all default features plus VLLM capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode vllm\n```\n\n----------------------------------------\n\nTITLE: Instruction Prompt Template for Text2SQL\nDESCRIPTION: The template used for generating instructions in the Text2SQL fine-tuning process. It specifies the model's role as a SQL terminal and sets expectations for the response format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nINSTRUCTION_PROMPT = \"I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.\\n ##Instruction:\\n{}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Agent Dependencies\nDESCRIPTION: Command to install the required packages for creating and using agents in DB-GPT, including the agent module and OpenAI for LLM integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"dbgpt[agent]>=0.5.6rc1\" -U\npip install openai\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Embedding Model\nDESCRIPTION: Sets up the DefaultEmbeddingFactory using OpenAI's embedding model for vector embeddings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.rag.embedding import DefaultEmbeddingFactory\n\nembeddings = DefaultEmbeddingFactory.openai()\n```\n\n----------------------------------------\n\nTITLE: Configuring Moonshot LLM Parameters using React Component\nDESCRIPTION: A React component configuration object that defines all required and optional parameters for setting up a Moonshot proxy LLM. Includes API connection settings, model behavior controls, and deployment configurations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/moonshot_moonshotdeploymodelparameters_aa2f6b.mdx#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"MoonshotDeployModelParameters\",\n  \"description\": \"Moonshot proxy LLM configuration.\",\n  \"documentationUrl\": \"https://platform.moonshot.cn/docs/api/chat#%E5%85%AC%E5%BC%80%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/moonshot\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Moonshot API.\",\n      \"defaultValue\": \"${env:MOONSHOT_API_BASE:-https://api.moonshot.cn/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Moonshot API.\",\n      \"defaultValue\": \"${env:MOONSHOT_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Configuring LoggingParameters Component in JSX\nDESCRIPTION: React/JSX component that defines logging configuration parameters including log levels and file output settings. Supports multiple log levels (FATAL through NOTSET) and optional file-based logging.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/utils/utils_loggingparameters_4ba5c6.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"LoggingParameters\",\n  \"description\": \"Logging parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"level\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Logging level, just support FATAL, ERROR, WARNING, INFO, DEBUG, NOTSET\",\n      \"defaultValue\": \"${env:DBGPT_LOG_LEVEL:-INFO}\",\n      \"validValues\": [\n        \"FATAL\",\n        \"ERROR\",\n        \"WARNING\",\n        \"WARNING\",\n        \"INFO\",\n        \"DEBUG\",\n        \"NOTSET\"\n      ]\n    },\n    {\n      \"name\": \"file\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The filename to store logs\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Hello World Operator Output\nDESCRIPTION: The expected output from running the HelloWorld custom operator, displaying the greeting message that confirms the operator is working correctly.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.3_custom_operator.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Deleting Knowledge Space with cURL\nDESCRIPTION: Example of deleting a knowledge space using cURL. Shows DELETE request format with space ID parameter.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nSPACE_ID={YOUR_SPACE_ID}\n\ncurl -X DELETE \"http://localhost:5670/api/v2/serve/knowledge/spaces/$SPACE_ID\" \\\n    -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n    -H \"accept: application/json\" \\\n    -H \"Content-Type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Cursor Attribute Production Rules\nDESCRIPTION: This set of production rules defines cursor attributes in MySQL, including both explicit and implicit cursor attributes, as well as cursor declarations and definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursor_attribute_bulk_rowcount : BULK_ROWCOUNT \"(\" bit_expr \")\" */\n\n/*! Production::    cursor_attribute_expr : explicit_cursor_attribute */\n\n/*! Production::    cursor_attribute_expr : implicit_cursor_attribute */\n\n/*! Production::    cursor_decl : CURSOR cursor_name opt_sp_param_list return_type */\n\n/*! Production::    cursor_def : CURSOR cursor_name opt_sp_param_list opt_return_type IS sql_stmt */\n\n/*! Production::    cursor_for_loop_sql : sql_keyword */\n\n/*! Production::    cursor_name : identifier */\n```\n\n----------------------------------------\n\nTITLE: Alternative DB-GPT Server Start Command\nDESCRIPTION: Alternative command to start the DB-GPT server using the same OpenAI proxy configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/hive_install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: Initialize Poetry Project - Bash Commands\nDESCRIPTION: Commands to create new Poetry project for AWEL tutorial\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.1_hello_world.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry new awel-tutorial\ncd awel-tutorial\n```\n\n----------------------------------------\n\nTITLE: System Privilege Productions\nDESCRIPTION: Grammar productions defining various system privileges like CREATE, DROP, SELECT, and administrative privileges\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_164\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    system_privilege : CREATE ANY TABLE */\n/*! Production::    system_privilege : CREATE ANY TRIGGER */\n/*! Production::    system_privilege : CREATE ANY TYPE */\n/*! Production::    system_privilege : DROP ANY TABLE */\n/*! Production::    system_privilege : SYSDBA */\n/*! Production::    system_privilege : SYSOPER */\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Details for AWEL Flow Serve in React\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to render the configuration details for the AWEL Flow Serve module. It includes parameters for API keys, DBGPT loading interval, and encryption key.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_c0b589.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the flow serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    },\n    {\n      \"name\": \"load_dbgpts_interval\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Interval to load dbgpts from installed packages\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"encrypt_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The key to encrypt the data\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Various Database Statements\nDESCRIPTION: Defines SQL grammar production rules for repair operations, repeat statements, and replace statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_168\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    repairTable : REPAIR analyzeTable TABLE tables opt_QUICK opt_EXTENDED opt_USE_FRM */\n\n/*! Production::    repeatStatement : opt_StmtLabel REPEAT procedureSqlStatements UNTIL expression END REPEAT opt_uid */\n\n/*! Production::    replaceStatement : REPLACE opt_replacePriority opt_INTO tableName opt_partitonValueList insertStatement_value */\n\n/*! Production::    replace_with_opt_hint : REPLACE */\n\n/*! Production::    replace_with_opt_hint : REPLACE_HINT_BEGIN hint_list_with_end */\n\n/*! Production::    replica_type : REPLICA_TYPE opt_equal_mark STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenAPIRerankerDeployModelParameters Configuration in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to render the configuration details for OpenAPIRerankerDeployModelParameters. It includes parameters such as name, provider, verbose output, concurrency, API URL, API key, backend, and timeout.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/reranker/rerank_openapirerankerdeploymodelparameters_778108.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"OpenAPIRerankerDeployModelParameters\",\n  \"description\": \"OpenAPI Reranker Deploy Model Parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/openapi\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"50\"\n    },\n    {\n      \"name\": \"api_url\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The URL of the rerank API.\",\n      \"defaultValue\": \"http://localhost:8100/v1/beta/relevance\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key for the rerank API.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The timeout for the request in seconds.\",\n      \"defaultValue\": \"60\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT and Dependencies\nDESCRIPTION: Commands to install DB-GPT and the OpenAI package via pip, which are necessary prerequisites for running AWEL workflows.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/quickstart_basic_awel_workflow.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install dbgpt --upgrade\npip install openai\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Docker Container\nDESCRIPTION: Launches a Docker container for serving the documentation with nginx configuration on port 8089.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -p 8089:8089 \\\n--name my-dbgpt-docs \\\n-v $(pwd)/docs/nginx/nginx-docs.conf:/etc/nginx/nginx.conf \\\neosphorosai/dbgpt-docs\n```\n\n----------------------------------------\n\nTITLE: Rendering RAG Serve Configuration Component in JSX\nDESCRIPTION: This code snippet renders a ConfigDetail component with the ServeConfig configuration object. It includes various parameters for the RAG serve module such as API keys, embedding models, chunk size, similarity settings, and reranking options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_7889f9.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the RAG serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    },\n    {\n      \"name\": \"embedding_model\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Embedding Model\",\n      \"defaultValue\": \"None\"\n    },\n    {\n      \"name\": \"rerank_model\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Embedding Model\",\n      \"defaultValue\": \"None\"\n    },\n    {\n      \"name\": \"chunk_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Whether to verify the SSL certificate of the database\",\n      \"defaultValue\": \"500\"\n    },\n    {\n      \"name\": \"chunk_overlap\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The default thread pool size, If None, use default config of python thread pool\",\n      \"defaultValue\": \"50\"\n    },\n    {\n      \"name\": \"similarity_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge search top k\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"similarity_score_threshold\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge search top similarity score\",\n      \"defaultValue\": \"0.0\"\n    },\n    {\n      \"name\": \"query_rewrite\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"knowledge search rewrite\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"max_chunks_once_load\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge max chunks once load\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"max_threads\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge max load thread\",\n      \"defaultValue\": \"1\"\n    },\n    {\n      \"name\": \"rerank_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge rerank top k\",\n      \"defaultValue\": \"3\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing dbgpt_hub Package\nDESCRIPTION: Command to install the dbgpt_hub package via pip package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/dbgpt_hub.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dbgpt_hub\n```\n\n----------------------------------------\n\nTITLE: Building MapOperator with a Map Function in Python\nDESCRIPTION: This snippet shows how to create a MapOperator using a lambda function to print a greeting. It demonstrates the basic usage of MapOperator within a DAG context.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.1_map_operator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, MapOperator\n\nwith DAG(\"awel_hello_world\") as dag:\n    task = MapOperator(map_function=lambda x: print(f\"Hello, {x}!\"))\n```\n\n----------------------------------------\n\nTITLE: Defining LLaMA API Configuration Options in JSON\nDESCRIPTION: This JSON structure defines various configuration parameters for the LLaMA API. It includes options for speculative decoding, API authentication, LoRA adapters, context shifting, web UI, and server startup timeout.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/llama_cpp_adapter_llamaserverparameters_421f40.mdx#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Minimum number of draft tokens to use for speculative decoding (default: 5)\"\n},\n{\n  \"name\": \"api_key\",\n  \"type\": \"string\",\n  \"required\": false,\n  \"description\": \"API key to use for authentication (env: LLAMA_API_KEY)\"\n},\n{\n  \"name\": \"lora_files\",\n  \"type\": \"string\",\n  \"required\": false,\n  \"description\": \"Path to LoRA adapter (can be repeated to use multiple adapters)\",\n  \"defaultValue\": \"[]\"\n},\n{\n  \"name\": \"no_context_shift\",\n  \"type\": \"boolean\",\n  \"required\": false,\n  \"description\": \"Disables context shift on infinite text generation\",\n  \"defaultValue\": \"False\"\n},\n{\n  \"name\": \"no_webui\",\n  \"type\": \"boolean\",\n  \"required\": false,\n  \"description\": \"Disable web UI\"\n},\n{\n  \"name\": \"startup_timeout\",\n  \"type\": \"integer\",\n  \"required\": false,\n  \"description\": \"Server startup timeout in seconds\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Component for Tongyi Proxy LLM Configuration Documentation\nDESCRIPTION: A React component that displays detailed configuration parameters for the Tongyi proxy LLM. The component uses a ConfigDetail custom component to render a structured documentation of all available parameters including their types, requirements, and descriptions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/tongyi_tongyideploymodelparameters_02a91b.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"TongyiDeployModelParameters\",\n  \"description\": \"Tongyi proxy LLM configuration.\",\n  \"documentationUrl\": \"https://help.aliyun.com/zh/model-studio/getting-started/first-api-call-to-qwen\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/tongyi\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the tongyi API.\",\n      \"defaultValue\": \"https://dashscope.aliyuncs.com/compatible-mode/v1\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the tongyi API.\",\n      \"defaultValue\": \"${env:DASHSCOPE_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Dependencies with pip\nDESCRIPTION: Commands for installing various DB-GPT dependencies using pip. These commands allow users to selectively install dependencies based on their specific needs, ranging from core functionalities to specialized features like model quantization and knowledge base integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/modules/smmf.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e .\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[core]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[framework]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[openai]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[default]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[vllm]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[quantization]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[knowledge]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[torch]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[llama_cpp]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[vstore]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip install -e \".[datasource]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Column to knowledge_space Table\nDESCRIPTION: MySQL commands to add a 'context' column to the knowledge_space table in the knowledge_management database.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/kbqa.md#2025-04-09_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nmysql> use knowledge_management;\nmysql> ALTER TABLE knowledge_space ADD COLUMN context TEXT COMMENT \"arguments context\";\n```\n\n----------------------------------------\n\nTITLE: MySQL Function Name Base Definitions\nDESCRIPTION: A collection of MySQL function name base definitions marked with Production comments. These definitions are likely used for parser generation or function identification in a database system that needs to recognize MySQL function names.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_68\n\nLANGUAGE: C++\nCODE:\n```\n/*! Production::    functionNameBase : ISCLOSED */\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for DeepSeek Proxy\nDESCRIPTION: Command to install dependencies required for using DB-GPT with DeepSeek proxy.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_openai\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI and Uvicorn for HTTP Trigger in Python\nDESCRIPTION: This command installs the necessary packages (FastAPI and Uvicorn) for implementing HTTP triggers in the AWEL tutorial project using Poetry.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.1_http_trigger.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add fastapi uvicorn\n```\n\n----------------------------------------\n\nTITLE: Thread Type Grammar Rules\nDESCRIPTION: Grammar rules defining thread types (IO_THREAD, SQL_THREAD) and their combinations\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_214\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    threadType : IO_THREAD */\n/*! Production::    threadType : SQL_THREAD */\n/*! Production::    threadTypes : threadType */\n/*! Production::    threadTypes : threadType COMMA threadTypes */\n```\n\n----------------------------------------\n\nTITLE: Configuring VLLM Model Parameters in JSON\nDESCRIPTION: JSON schema defining configuration parameters for VLLM model deployment. Includes settings for model revision, tokenization, quantization methods, sequence length limits, and worker configuration. Each parameter is defined with type, requirements, description and valid values where applicable.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/vllm_adapter_vllmdeploymodelparameters_1d4a24.mdx#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"tokenizer_revision\",\n  \"type\": \"string\",\n  \"required\": false,\n  \"description\": \"Revision of the huggingface tokenizer to use. It can be a branch name, a tag name, or a commit id. If unspecified, will use the default version.\"\n},\n{\n  \"name\": \"tokenizer_mode\",\n  \"type\": \"string\",\n  \"required\": false,\n  \"description\": \"The tokenizer mode.\\n\\n* \\\"auto\\\" will use the fast tokenizer if available.\\n* \\\"slow\\\" will always use the slow tokenizer. \\n* \\\"mistral\\\" will always use the `mistral_common` tokenizer.\",\n  \"defaultValue\": \"auto\",\n  \"validValues\": [\n    \"auto\",\n    \"slow\",\n    \"mistral\"\n  ]\n},\n{\n  \"name\": \"quantization\",\n  \"type\": \"string\",\n  \"required\": false,\n  \"description\": \"Method used to quantize the weights. If None, we first check the `quantization_config` attribute in the model config file. If that is None, we assume the model weights are not quantized and use `dtype` to determine the data type of the weights.\",\n  \"validValues\": [\n    \"aqlm\",\n    \"awq\",\n    \"deepspeedfp\",\n    \"tpu_int8\",\n    \"fp8\",\n    \"ptpc_fp8\",\n    \"fbgemm_fp8\",\n    \"modelopt\",\n    \"marlin\",\n    \"gguf\",\n    \"gptq_marlin_24\",\n    \"gptq_marlin\",\n    \"awq_marlin\",\n    \"gptq\",\n    \"compressed-tensors\",\n    \"bitsandbytes\",\n    \"qqq\",\n    \"hqq\",\n    \"experts_int8\",\n    \"neuron_quant\",\n    \"ipex\",\n    \"quark\",\n    \"moe_wna16\"\n  ]\n},\n{\n  \"name\": \"max_seq_len_to_capture\",\n  \"type\": \"integer\",\n  \"required\": false,\n  \"description\": \"Maximum sequence length covered by CUDA graphs. When a sequence has context length larger than this, we fall back to eager mode. Additionally for encoder-decoder models, if the sequence length of the encoder input is larger than this, we fall back to the eager mode.\",\n  \"defaultValue\": \"8192\"\n},\n{\n  \"name\": \"worker_cls\",\n  \"type\": \"string\",\n  \"required\": false,\n  \"description\": \"The worker class to use for distributed execution.\",\n  \"defaultValue\": \"auto\"\n},\n{\n  \"name\": \"extras\",\n  \"type\": \"object\",\n  \"required\": false,\n  \"description\": \"Extra parameters, it will be passed to the vllm engine.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Table Analysis Rules\nDESCRIPTION: Production rules for ANALYZE TABLE statements including statistics computation and histogram management.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    analyzeTable : ANALYZE analyzeTable TABLE tables */\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor DROP HISTOGRAM ON column_name_list */\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor UPDATE HISTOGRAM ON column_name_list WITH INTNUM BUCKETS */\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor analyze_statistics_clause */\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor use_partition analyze_statistics_clause */\n```\n\n----------------------------------------\n\nTITLE: Running the AWEL Workflow Script\nDESCRIPTION: Command to execute the Python script containing the AWEL workflow definition and execution code.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/quickstart_basic_awel_workflow.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython simple_sdk_llm_example_dag.py\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 and OSS Storage in TOML\nDESCRIPTION: Configuration example for setting up cloud storage backends in DB-GPT. This shows how to configure both Alibaba OSS and Tencent COS (S3-compatible) storage services for file storage in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[serves]]\ntype = \"file\"\n# Default backend for file server\ndefault_backend = \"s3\"\n\n[[serves.backends]]\ntype = \"oss\"\nendpoint = \"https://oss-cn-beijing.aliyuncs.com\"\nregion = \"oss-cn-beijing\"\naccess_key_id = \"${env:OSS_ACCESS_KEY_ID}\"\naccess_key_secret = \"${env:OSS_ACCESS_KEY_SECRET}\"\nfixed_bucket = \"{your_bucket_name}\"\n\n[[serves.backends]]\n# Use Tencent COS s3 compatible API as the file server\ntype = \"s3\"\nendpoint = \"https://cos.ap-beijing.myqcloud.com\"\nregion = \"ap-beijing\"\naccess_key_id = \"${env:COS_SECRETID}\"\naccess_key_secret = \"${env:COS_SECRETKEY}\"\nfixed_bucket = \"{your_bucket_name}\n```\n\n----------------------------------------\n\nTITLE: Sequence Options Grammar Productions\nDESCRIPTION: BNF grammar rules defining options for sequence objects including cache, cycle, increment, and value limits.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_179\n\nLANGUAGE: bnf\nCODE:\n```\n/*! Production::    sequence_option : CACHE simple_num */\n\n/*! Production::    sequence_option : CYCLE */\n\n/*! Production::    sequence_option : INCREMENT BY simple_num */\n\n/*! Production::    sequence_option : MAXVALUE simple_num */\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Unstreamify Operator for Summing Numbers in Python\nDESCRIPTION: This snippet provides a complete example of using UnstreamifyAbsOperator and StreamifyAbsOperator to sum a stream of numbers. It includes a NumberProducerOperator to generate numbers and a SumOperator to sum them.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.6_unstreamify_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, UnstreamifyAbsOperator, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"Create a stream of numbers from 0 to `n-1`\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nclass SumOperator(UnstreamifyAbsOperator[int, int]):\n    \"\"\"Unstreamify the stream of numbers\"\"\"\n    async def unstreamify(self, it: AsyncIterator[int]) -> int:\n        return sum([i async for i in it])\n\nwith DAG(\"sum_dag\") as dag:\n    task = NumberProducerOperator()\n    sum_task = SumOperator()\n    task >> sum_task\n\nprint(asyncio.run(sum_task.call(call_data=5)))\nprint(asyncio.run(sum_task.call(call_data=10)))\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Configuration Component in JSX\nDESCRIPTION: Imports and renders a ConfigDetail component that displays configuration documentation for the ServeConfig module. The configuration includes API key settings with an option to allow all if no keys are specified.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_ec2d70.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigDetail } from \"@site/src/components/mdx/ConfigDetail\";\n\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the hub dbgpts serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Financial Chat Environment Variables\nDESCRIPTION: Configuration settings for the Financial Chat system, specifying the path to the pre-trained embedding model used for financial report analysis.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/apps/chat_financial_report.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#*******************************************************************#\n#**                     FINANCIAL CHAT Config                     **#\n#*******************************************************************#\nFIN_REPORT_MODEL=/app/DB-GPT/models/bge-large-zh-v1.5\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: Command to install git pre-commit hooks for code quality checks.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/CONTRIBUTING.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server with Milvus Configuration\nDESCRIPTION: Command to launch the DB-GPT server with the Milvus configuration. This uses the uv run command to start the Python server with the specified configuration file that contains the Milvus connection settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/milvus_rag_install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-openai.toml\n```\n\n----------------------------------------\n\nTITLE: SQL Hint Option Production Rules\nDESCRIPTION: Grammar production rules defining various SQL optimizer hints including USE_BNL, USE_HASH, USE_MERGE, and other execution plan directives.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_89\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    hint_option : USE_BNL \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_CONCAT opt_qb_name */\n\n/*! Production::    hint_option : USE_HASH \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_HASH_AGGREGATION */\n\n/*! Production::    hint_option : USE_JIT */\n\n/*! Production::    hint_option : USE_LATE_MATERIALIZATION */\n\n/*! Production::    hint_option : USE_MERGE \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_NL \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_NL_MATERIALIZATION \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    hint_option : USE_PLAN_CACHE \"(\" use_plan_cache_type \")\" */\n\n/*! Production::    hint_option : USE_PX */\n\n/*! Production::    hint_option : error */\n\n/*! Production::    hint_option : global_hint */\n\n/*! Production::    hint_option : optimize_hint */\n\n/*! Production::    hint_option : transform_hint */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Core Dependencies with CUDA Support\nDESCRIPTION: Command to install DB-GPT dependencies including CUDA support using uv package manager with various extensions like base, HF, CUDA, LLama.cpp, RAG and ChromaDB\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCMAKE_ARGS=\"-DGGML_CUDA=ON\" uv sync --all-packages \\\n--extra \"base\" \\\n--extra \"hf\" \\\n--extra \"cuda121\" \\\n--extra \"llama_cpp\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"quant_bnb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response from POST Request\nDESCRIPTION: This snippet shows the expected JSON response from the HTTP trigger when sending a POST request with a name and age. It demonstrates the output format of the greeting message.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.3_http_trigger_post.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"message\":\"Hello, John! You are 20 years old.\"}\n```\n\n----------------------------------------\n\nTITLE: SET Password SQL Grammar Rules\nDESCRIPTION: SQL grammar production rules for SET PASSWORD commands, including user password setting syntax variations\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_181\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_password_stmt : SET PASSWORD FOR user opt_host_name COMP_EQ STRING_VALUE */\n/*! Production::    set_password_stmt : SET PASSWORD opt_for_user COMP_EQ PASSWORD \"(\" password \")\" */\n/*! Production::    set_password_stmt : SET PASSWORD opt_for_user COMP_EQ STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitee LLM Parameters using React Component\nDESCRIPTION: React/MDX component implementation that defines the configuration schema for Gitee's proxy LLM service. Includes comprehensive parameter definitions for model settings, API configuration, and deployment options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/gitee_giteedeploymodelparameters_d1bdb3.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"GiteeDeployModelParameters\",\n  \"description\": \"Gitee proxy LLM configuration.\",\n  \"documentationUrl\": \"https://ai.gitee.com/docs/getting-started/intro\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/gitee\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Gitee API.\",\n      \"defaultValue\": \"${env:GITEE_API_BASE:-https://ai.gitee.com/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Gitee API.\",\n      \"defaultValue\": \"${env:GITEE_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Comparison Operators and Compound Statements\nDESCRIPTION: These production rules define comparison operators (like =, !=, >, <) and compound statement structures used in procedural SQL (like blocks, if statements, loops). They form the foundation for SQL's conditional logic and procedural capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    comparisonOperator : EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : EXCLAMATION_SYMBOL EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : GREATER_SYMBOL */\n\n/*! Production::    comparisonOperator : GREATER_SYMBOL EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL EQUAL_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL EQUAL_SYMBOL GREATER_SYMBOL */\n\n/*! Production::    comparisonOperator : LESS_SYMBOL GREATER_SYMBOL */\n\n/*! Production::    compiler_parameter : identifier \"=\" identifier */\n\n/*! Production::    compiler_parameter_list : compiler_parameter */\n\n/*! Production::    compiler_parameter_list : compiler_parameter_list compiler_parameter */\n\n/*! Production::    complex_string_literal : STRING_VALUE */\n\n/*! Production::    complex_string_literal : STRING_VALUE string_val_list */\n\n/*! Production::    complex_string_literal : charset_introducer HEX_STRING_VALUE */\n\n/*! Production::    complex_string_literal : charset_introducer STRING_VALUE */\n\n/*! Production::    compoundStatement : blockStatement */\n\n/*! Production::    compoundStatement : caseStatement */\n\n/*! Production::    compoundStatement : cursorStatement */\n\n/*! Production::    compoundStatement : ifStatement */\n\n/*! Production::    compoundStatement : iterateStatement */\n\n/*! Production::    compoundStatement : leaveStatement */\n\n/*! Production::    compoundStatement : loopStatement */\n\n/*! Production::    compoundStatement : repeatStatement */\n\n/*! Production::    compoundStatement : returnStatement */\n\n/*! Production::    compoundStatement : whileStatement */\n```\n\n----------------------------------------\n\nTITLE: Configuring HF Embedding Model Parameters using React Component\nDESCRIPTION: React component implementation showing configuration details for HFEmbeddingDeployModelParameters, including all supported parameters, their types, requirements, and default values. Uses a custom ConfigDetail component to render the configuration documentation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/embedding/embeddings_hfembeddingdeploymodelparameters_f588e1.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"HFEmbeddingDeployModelParameters\",\n  \"description\": \"HFEmbeddingDeployModelParameters(name: str, provider: str = 'hf', verbose: Optional[bool] = False, concurrency: Optional[int] = 100, path: Optional[str] = None, device: Optional[str] = None, cache_folder: Optional[str] = None, normalize_embeddings: bool = False, multi_process: bool = False, model_kwargs: Dict[str, Any] = <factory>, encode_kwargs: Dict[str, Any] = <factory>, embed_instruction: Optional[str] = None, query_instruction: Optional[str] = None)\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"path\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The path of the model, if you want to deploy a local model.\"\n    },\n    {\n      \"name\": \"device\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Device to run model. If None, the device is automatically determined\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"hf\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"cache_folder\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Path of the cache folder.\"\n    },\n    {\n      \"name\": \"normalize_embeddings\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Normalize embeddings.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"multi_process\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Run encode() on multiple GPUs.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"model_kwargs\",\n      \"type\": \"object\",\n      \"required\": false,\n      \"description\": \"Keyword arguments to pass to the model.\",\n      \"defaultValue\": \"{}\"\n    },\n    {\n      \"name\": \"encode_kwargs\",\n      \"type\": \"object\",\n      \"required\": false,\n      \"description\": \"Keyword arguments to pass when calling the `encode` method.\",\n      \"defaultValue\": \"{}\"\n    },\n    {\n      \"name\": \"embed_instruction\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Instruction to use for embedding documents. Just for Instructor model.\"\n    },\n    {\n      \"name\": \"query_instruction\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Instruction to use for embedding query. Just for Instructor model.\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Testing Development Environment HTTP Request in Bash\nDESCRIPTION: This bash command tests the HTTP endpoint in the development environment, sending a GET request to the local server.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/get_started.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://127.0.0.1:5555/api/v1/awel/trigger/examples/hello\\?name\\=zhangsan\n\"Hello, zhangsan, your age is 18\"\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to gpts_conversations Table for DB-GPT v0.5.0 Upgrade in MySQL\nDESCRIPTION: This SQL script adds two new columns, 'team_mode' and 'current_goal', to the existing gpts_conversations table as part of the DB-GPT v0.5.0 upgrade process.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/upgrade/v0.5.0.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `gpts_conversations`\nADD COLUMN `team_mode` varchar(255) NULL COMMENT 'agent team work mode';\n\nALTER TABLE `gpts_conversations`\nADD COLUMN  `current_goal` text COMMENT 'The target corresponding to the current message';\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for SELECT Statements and Related Elements\nDESCRIPTION: These productions define grammar rules for various elements of SELECT statements, including select elements, into clauses, and select specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_176\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    selectElement : expression */\n\n/*! Production::    selectElement : expression AS uid */\n\n/*! Production::    selectElement : expression uid */\n\n/*! Production::    selectElement : fullId DOT STAR */\n\n/*! Production::    selectElementPart : COMMA selectElement */\n\n/*! Production::    selectElementPart : COMMA selectElement selectElementPart */\n\n/*! Production::    selectElements : STAR opt_selectElementPart */\n\n/*! Production::    selectElements : selectElement opt_selectElementPart */\n\n/*! Production::    selectFieldsInto : ESCAPED BY STRING_LITERAL */\n\n/*! Production::    selectFieldsInto : TERMINATED BY STRING_LITERAL */\n\n/*! Production::    selectFieldsInto : opt_OPTIONALLY ENCLOSED BY STRING_LITERAL */\n\n/*! Production::    selectFieldsIntos : selectFieldsInto */\n\n/*! Production::    selectFieldsIntos : selectFieldsInto selectFieldsIntos */\n\n/*! Production::    selectIntoExpression : INTO DUMPFILE STRING_LITERAL */\n\n/*! Production::    selectIntoExpression : INTO OUTFILE STRING_LITERAL opt_characterSet opt_selectIntoExpressionFormat opt_selectIntoExpressionLines */\n\n/*! Production::    selectIntoExpression : INTO assignmentFields */\n\n/*! Production::    selectLinesInto : STARTING BY STRING_LITERAL */\n\n/*! Production::    selectLinesInto : TERMINATED BY STRING_LITERAL */\n\n/*! Production::    selectLinesIntos : selectLinesInto */\n\n/*! Production::    selectLinesIntos : selectLinesInto selectLinesIntos */\n\n/*! Production::    selectSpec : ALL */\n\n/*! Production::    selectSpec : DISTINCT */\n\n/*! Production::    selectSpec : DISTINCTROW */\n\n/*! Production::    selectSpec : HIGH_PRIORITY */\n\n/*! Production::    selectSpec : SQL_BIG_RESULT */\n\n/*! Production::    selectSpec : SQL_BUFFER_RESULT */\n\n/*! Production::    selectSpec : SQL_CACHE */\n\n/*! Production::    selectSpec : SQL_CALC_FOUND_ROWS */\n\n/*! Production::    selectSpec : SQL_NO_CACHE */\n\n/*! Production::    selectSpec : SQL_SMALL_RESULT */\n\n/*! Production::    selectSpec : STRAIGHT_JOIN */\n\n/*! Production::    selectSpecs : selectSpec */\n\n/*! Production::    selectSpecs : selectSpec selectSpecs */\n\n/*! Production::    selectStatement : queryExpression opt_lockClause */\n\n/*! Production::    selectStatement : queryExpressionNointo opt_lockClause */\n```\n\n----------------------------------------\n\nTITLE: Configuring OceanBase for Vector Data\nDESCRIPTION: Python code to connect to OceanBase and set memory usage ratio for vector data.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/kbqa.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyobvector import ObVecClient\n\ntmp_client = ObVecClient()\ntmp_client.perform_raw_text_sql(\n    \"ALTER SYSTEM ob_vector_memory_limit_percentage = 30\"\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering DBModelRegistryParameters Configuration in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to render the configuration details for DBModelRegistryParameters. It specifies the name, description, and parameters of the configuration, including various database connection types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/parameter_dbmodelregistryparameters_87d036.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"DBModelRegistryParameters\",\n  \"description\": \"Database model registry parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"database\",\n      \"type\": \"BaseDatasourceParameters\",\n      \"required\": false,\n      \"description\": \"Database configuration for model registry\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"rdbmsdatasourceparameters configuration\",\n          \"url\": \"../datasource/base_rdbmsdatasourceparameters_4f774f\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"sqlite configuration\",\n          \"url\": \"../datasource/conn_sqlite_sqliteconnectorparameters_82c8b5\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"tugraph configuration\",\n          \"url\": \"../datasource/conn_tugraph_tugraphparameters_0c844e\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"spark configuration\",\n          \"url\": \"../datasource/conn_spark_sparkparameters_174bbc\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"clickhouse configuration\",\n          \"url\": \"../datasource/conn_clickhouse_clickhouseparameters_4a1237\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"doris configuration\",\n          \"url\": \"../datasource/conn_doris_dorisparameters_e33c53\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"duckdb configuration\",\n          \"url\": \"../datasource/conn_duckdb_duckdbconnectorparameters_c672c7\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"hive configuration\",\n          \"url\": \"../datasource/conn_hive_hiveparameters_ec3601\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"mssql configuration\",\n          \"url\": \"../datasource/conn_mssql_mssqlparameters_d79d1c\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"mysql configuration\",\n          \"url\": \"../datasource/conn_mysql_mysqlparameters_4393c4\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"oceanbase configuration\",\n          \"url\": \"../datasource/conn_oceanbase_oceanbaseparameters_260d2d\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"postgresql configuration\",\n          \"url\": \"../datasource/conn_postgresql_postgresqlparameters_22efa5\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"starrocks configuration\",\n          \"url\": \"../datasource/conn_starrocks_starrocksparameters_e511f7\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"vertica configuration\",\n          \"url\": \"../datasource/conn_vertica_verticaparameters_c712b8\"\n        }\n      ]\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies for Financial Report Analysis\nDESCRIPTION: Installs the necessary Python packages pdfplumber for PDF extraction and fuzzywuzzy for string matching, which are required for financial report processing.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/apps/chat_financial_report.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pdfplumber\npip install fuzzywuzzy\n```\n\n----------------------------------------\n\nTITLE: Rendering QianfanEmbeddingDeployModelParameters Configuration in JSX\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render the configuration details for QianfanEmbeddingDeployModelParameters. It includes parameters like name, provider, API keys, and other deployment settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/embedding/qianfan_qianfanembeddingdeploymodelparameters_257d2a.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"QianfanEmbeddingDeployModelParameters\",\n  \"description\": \"Qianfan Embeddings deploy model parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/qianfan\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key for the embeddings API.\"\n    },\n    {\n      \"name\": \"api_secret\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The Secret key for the embeddings API. It's the sk for qianfan.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Install AWEL Workflow Command\nDESCRIPTION: Command to install a specific AWEL workflow from the remote repository\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/changelog/Released_V0.5.0.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndbgpt app install awel-flow-web-info-search\n```\n\n----------------------------------------\n\nTITLE: UTC Time Function Productions\nDESCRIPTION: Grammar rules defining the syntax for UTC time and timestamp functions, including optional precision parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_225\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    utc_time_func : UTC_TIME */\n\n/*! Production::    utc_timestamp_func : UTC_TIMESTAMP \"(\" \")\" */\n\n/*! Production::    utc_timestamp_func : UTC_TIMESTAMP \"(\" INTNUM \")\" */\n\n/*! Production::    utc_timestamp_func : UTC_TIMESTAMP */\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: TOML configuration snippet to set the OpenAI API key for the proxy model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\n...\napi_key = \"your-openai-api-key\"\n[[models.embeddings]]\n...\napi_key = \"your-openai-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Using Host Network for DB-GPT Build\nDESCRIPTION: Troubleshooting command to build DB-GPT using the host network to resolve network-related problems during the build process.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# Use a specific network\nbash docker/base/build_image.sh --network host\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Keyword Rules\nDESCRIPTION: These rules define various SQL keywords used in SQL statements and operations, covering a wide range of SQL functionality.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_238\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       ABORT */\n\n/*! Rule::       ACCEPT */\n\n/*! Rule::       ACCESS */\n\n/*! Rule::       ACCESSIBLE */\n\n/*! Rule::       ACCOUNT */\n\n/*! Rule::       ACTION */\n\n/*! Rule::       ACTIVE */\n\n/*! Rule::       ADD */\n\n/*! Rule::       ADDDATE */\n\n/*! Rule::       ADMIN */\n\n/*! Rule::       ADMINISTER */\n\n/*! Rule::       AFTER */\n\n/*! Rule::       AGAINST */\n\n/*! Rule::       AGGREGATE */\n\n/*! Rule::       ALGORITHM */\n\n/*! Rule::       ALL */\n\n/*! Rule::       ALLOCATE */\n\n/*! Rule::       ALTER */\n\n/*! Rule::       ALWAYS */\n\n/*! Rule::       ANALYSE */\n\n/*! Rule::       ANALYZE */\n\n/*! Rule::       AND */\n\n/*! Rule::       ANY */\n\n/*! Rule::       APPROX_COUNT_DISTINCT */\n\n/*! Rule::       APPROX_COUNT_DISTINCT_SYNOPSIS */\n\n/*! Rule::       APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE */\n\n/*! Rule::       ARCHIVE */\n\n/*! Rule::       ARCHIVELOG */\n\n/*! Rule::       ARRAY */\n\n/*! Rule::       ARRAYLEN */\n\n/*! Rule::       AS */\n\n/*! Rule::       ASC */\n\n/*! Rule::       ASENSITIVE */\n\n/*! Rule::       ASSERT */\n\n/*! Rule::       ASSIGN */\n\n/*! Rule::       AT */\n\n/*! Rule::       AUDIT */\n\n/*! Rule::       AUTHID */\n\n/*! Rule::       AUTHORIZATION */\n\n/*! Rule::       AUTHORS */\n\n/*! Rule::       AUTO */\n\n/*! Rule::       AUTOEXTEND_SIZE */\n\n/*! Rule::       AVG */\n\n/*! Rule::       AVG_ROW_LENGTH */\n\n/*! Rule::       BACKUP */\n\n/*! Rule::       BALANCE */\n\n/*! Rule::       BASE */\n\n/*! Rule::       BASELINE */\n\n/*! Rule::       BASELINE_ID */\n\n/*! Rule::       BASE_TABLE */\n\n/*! Rule::       BASIC */\n\n/*! Rule::       BECOME */\n\n/*! Rule::       BEFORE */\n\n/*! Rule::       BEGIN */\n\n/*! Rule::       BETWEEN */\n\n/*! Rule::       BINARY */\n\n/*! Rule::       BINARY_DOUBLE */\n\n/*! Rule::       BINARY_FLOAT */\n\n/*! Rule::       BINARY_INTEGER */\n\n/*! Rule::       BINDING */\n\n/*! Rule::       BINLOG */\n\n/*! Rule::       BIT */\n\n/*! Rule::       BLOB */\n\n/*! Rule::       BLOCK */\n\n/*! Rule::       BLOCK_SIZE */\n\n/*! Rule::       BODY */\n\n/*! Rule::       BOOL */\n\n/*! Rule::       BOOLEAN */\n\n/*! Rule::       BOOTSTRAP */\n\n/*! Rule::       BOTH */\n\n/*! Rule::       BREADTH */\n\n/*! Rule::       BTREE */\n\n/*! Rule::       BULK */\n\n/*! Rule::       BULK_EXCEPTIONS */\n\n/*! Rule::       BULK_ROWCOUNT */\n\n/*! Rule::       BY */\n\n/*! Rule::       BYTE */\n\n/*! Rule::       CACHE */\n\n/*! Rule::       CALL */\n\n/*! Rule::       CANCEL */\n\n/*! Rule::       CASCADE */\n\n/*! Rule::       CASCADED */\n\n/*! Rule::       CASE */\n\n/*! Rule::       CAST */\n\n/*! Rule::       CATALOG_NAME */\n\n/*! Rule::       CHAIN */\n\n/*! Rule::       CHANGE */\n\n/*! Rule::       CHANGED */\n\n/*! Rule::       CHAR */\n\n/*! Rule::       CHARACTER */\n\n/*! Rule::       CHARSET */\n\n/*! Rule::       CHAR_BASE */\n\n/*! Rule::       CHECK */\n\n/*! Rule::       CHECKPOINT */\n\n/*! Rule::       CHECKSUM */\n\n/*! Rule::       CIPHER */\n\n/*! Rule::       CLASS_ORIGIN */\n\n/*! Rule::       CLEAN */\n\n/*! Rule::       CLEAR */\n\n/*! Rule::       CLIENT */\n\n/*! Rule::       CLOB */\n\n/*! Rule::       CLOSE */\n\n/*! Rule::       CLUSTER */\n\n/*! Rule::       CLUSTERS */\n\n/*! Rule::       COALESCE */\n\n/*! Rule::       COBOL */\n\n/*! Rule::       CODE */\n\n/*! Rule::       COLAUTH */\n\n/*! Rule::       COLLATE */\n\n/*! Rule::       COLLATION */\n\n/*! Rule::       COLLECT */\n\n/*! Rule::       COLUMN */\n\n/*! Rule::       COLUMNS */\n\n/*! Rule::       COLUMN_FORMAT */\n\n/*! Rule::       COLUMN_NAME */\n\n/*! Rule::       COMMENT */\n\n/*! Rule::       COMMIT */\n\n/*! Rule::       COMMITTED */\n\n/*! Rule::       COMPACT */\n\n/*! Rule::       COMPILE */\n\n/*! Rule::       COMPLETION */\n\n/*! Rule::       COMPRESS */\n\n/*! Rule::       COMPRESSED */\n\n/*! Rule::       COMPRESSION */\n\n/*! Rule::       COMPUTE */\n\n/*! Rule::       CONCURRENT */\n\n/*! Rule::       CONNECT */\n\n/*! Rule::       CONNECTION */\n\n/*! Rule::       CONNECT_BY_ISCYCLE */\n\n/*! Rule::       CONNECT_BY_ISLEAF */\n\n/*! Rule::       CONNECT_BY_ROOT */\n\n/*! Rule::       CONSISTENT */\n\n/*! Rule::       CONSTANT */\n\n/*! Rule::       CONSTRAINT */\n\n/*! Rule::       CONSTRAINTS */\n\n/*! Rule::       CONSTRAINT_CATALOG */\n\n/*! Rule::       CONSTRAINT_NAME */\n\n/*! Rule::       CONSTRAINT_SCHEMA */\n\n/*! Rule::       CONSTRUCTOR */\n\n/*! Rule::       CONTAINS */\n\n/*! Rule::       CONTENTS */\n\n/*! Rule::       CONTEXT */\n\n/*! Rule::       CONTINUE */\n\n/*! Rule::       CONTRIBUTORS */\n\n/*! Rule::       CONTROLFILE */\n\n/*! Rule::       CONVERT */\n\n/*! Rule::       COPY */\n\n/*! Rule::       CORR */\n\n/*! Rule::       COUNT */\n\n/*! Rule::       COVAR_POP */\n\n/*! Rule::       COVAR_SAMP */\n\n/*! Rule::       CPU */\n\n/*! Rule::       CRASH */\n\n/*! Rule::       CREATE */\n\n/*! Rule::       CREATE_TIMESTAMP */\n\n/*! Rule::       CROSS */\n\n/*! Rule::       CUBE */\n\n/*! Rule::       CUME_DIST */\n\n/*! Rule::       CURRENT */\n\n/*! Rule::       CURRENT_DATE */\n\n/*! Rule::       CURRENT_SCHEMA */\n\n/*! Rule::       CURRENT_TIMESTAMP */\n\n/*! Rule::       CURRENT_USER */\n\n/*! Rule::       CURRVAL */\n\n/*! Rule::       CURSOR */\n\n/*! Rule::       CUSTOMDATUM */\n\n/*! Rule::       CYCLE */\n\n/*! Rule::       DATA */\n\n/*! Rule::       DATABASE */\n\n/*! Rule::       DATABASES */\n\n/*! Rule::       DATABASE_ID */\n\n/*! Rule::       DATAFILE */\n\n/*! Rule::       DATA_BASE */\n\n/*! Rule::       DATA_TABLE_ID */\n\n/*! Rule::       DATE */\n\n/*! Rule::       DATETIME */\n\n/*! Rule::       DATE_ADD */\n\n/*! Rule::       DATE_SUB */\n\n/*! Rule::       DAY */\n\n/*! Rule::       DAY_HOUR */\n\n/*! Rule::       DAY_MICROSECOND */\n\n/*! Rule::       DAY_MINUTE */\n\n/*! Rule::       DAY_SECOND */\n\n/*! Rule::       DBA */\n\n/*! Rule::       DBA_RECYCLEBIN */\n\n/*! Rule::       DBTIMEZONE */\n\n/*! Rule::       DEALLOCATE */\n\n/*! Rule::       DEBUG */\n\n/*! Rule::       DEBUGOFF */\n\n/*! Rule::       DEBUGON */\n\n/*! Rule::       DEC */\n\n/*! Rule::       DECIMAL */\n\n/*! Rule::       DECLARE */\n\n/*! Rule::       DEFAULT */\n\n/*! Rule::       DEFAULT_AUTH */\n\n/*! Rule::       DEFAULT_TABLEGROUP */\n\n/*! Rule::       DEFINER */\n\n/*! Rule::       DEFINITION */\n\n/*! Rule::       DELAY */\n\n/*! Rule::       DELAYED */\n\n/*! Rule::       DELAY_KEY_WRITE */\n\n/*! Rule::       DELETE */\n\n/*! Rule::       DELTA */\n\n/*! Rule::       DENSE_RANK */\n\n/*! Rule::       DEPTH */\n\n/*! Rule::       DESC */\n\n/*! Rule::       DESCRIBE */\n\n/*! Rule::       DESTINATION */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Numeric Literal Rules\nDESCRIPTION: These rules define the syntax for various types of numeric literals in SQL, including integers, decimals, and scientific notation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_237\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       (({DEC_DIGIT}+)?\\.{DEC_DIGIT}+|{DEC_DIGIT}+\\.{EXPONENT_NUM_PART}|({DEC_DIGIT}+)?\\.(({DEC_DIGIT}+{EXPONENT_NUM_PART})|{DEC_DIGIT}+{EXPONENT_NUM_PART})) */\n\n/*! Rule::       (X'({HEX_DIGIT}{HEX_DIGIT})+'|0X{HEX_DIGIT}+) */\n\n/*! Rule::       ([0-9]+E[-+]?[0-9]+D|[0-9]+\\.[0-9]*E[-+]?[0-9]+D|\\.[0-9]+E[-+]?[0-9]+D) */\n\n/*! Rule::       ([0-9]+E[-+]?[0-9]+F|[0-9]+\\.[0-9]*E[-+]?[0-9]+F|\\.[0-9]+E[-+]?[0-9]+F) */\n\n/*! Rule::       ([0-9]+E[-+]?[0-9]+|[0-9]+\\.[0-9]*E[-+]?[0-9]+|\\.[0-9]+E[-+]?[0-9]+) */\n\n/*! Rule::       ([0-9]+\\.[0-9.]+|[0-9A-F:]+COLON_SYMB[0-9A-F:]+) */\n\n/*! Rule::       ([0-9]+\\.[0-9]*D|[0-9]+D|\\.[0-9]+D) */\n\n/*! Rule::       ([0-9]+\\.[0-9]*F|[0-9]+F|\\.[0-9]+F) */\n\n/*! Rule::       ([0-9]+\\.[0-9]*|\\.[0-9]+) */\n```\n\n----------------------------------------\n\nTITLE: Executing AWEL Lifecycle Hooks Script in Bash\nDESCRIPTION: This command runs the Python script that demonstrates AWEL lifecycle hooks using Poetry for dependency management.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/advanced_guide/4.1_lifecycle.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/lifecycle_hooks.py\n```\n\n----------------------------------------\n\nTITLE: Git Operations for Changes\nDESCRIPTION: Series of commands for staging, committing, and pushing changes to the repository.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/CONTRIBUTING.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add xxxx\ngit commit -m \"your commit message\"\ngit push origin <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Rendering ChatDashboardConfig Component with Configuration Parameters in JSX\nDESCRIPTION: This code renders a ConfigDetail component that displays the ChatDashboardConfig configuration parameters. It includes settings for LLM generation (top_k, top_p, temperature), token limits, memory configuration, and schema retrieval options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/config_chatdashboardconfig_2480d0.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ChatDashboardConfig\",\n  \"description\": \"Chat Dashboard Configuration\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The top k for LLM generation\"\n    },\n    {\n      \"name\": \"top_p\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The top p for LLM generation\"\n    },\n    {\n      \"name\": \"temperature\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The temperature for LLM generation\"\n    },\n    {\n      \"name\": \"max_new_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max new tokens for LLM generation\"\n    },\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The name of your app\"\n    },\n    {\n      \"name\": \"memory\",\n      \"type\": \"BaseGPTsAppMemoryConfig\",\n      \"required\": false,\n      \"description\": \"The memory configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"window configuration\",\n          \"url\": \"../memory/config_bufferwindowgptsappmemoryconfig_c31071\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"token configuration\",\n          \"url\": \"../memory/config_tokenbuffergptsappmemoryconfig_6a2000\"\n        }\n      ]\n    },\n    {\n      \"name\": \"schema_retrieve_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The number of tables to retrieve from the database.\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"schema_max_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The maximum number of tokens to pass to the model, default 100 * 1024.Just work for the schema retrieval failed, and load all tables schema.\",\n      \"defaultValue\": \"102400\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Print Stream Data Example\nDESCRIPTION: The expected console output when running the input_operator_print_stream_data.py script, showing numbers 0-9 printed on separate lines.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyword Retrieval from Elasticsearch\nDESCRIPTION: Asynchronous function demonstrating how to load knowledge from a file, persist it in Elasticsearch, and retrieve relevant chunks based on a query.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/keyword_rag_app_develop.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom dbgpt.configs.model_config import ROOT_PATH\nfrom dbgpt_ext.rag import ChunkParameters\nfrom dbgpt_ext.rag.assembler import EmbeddingAssembler\nfrom dbgpt_ext.rag.knowledge import KnowledgeFactory\n\nasync def main():\n    file_path = os.path.join(ROOT_PATH, \"docs/docs/awel/awel.md\")\n    knowledge = KnowledgeFactory.from_file_path(file_path)\n    keyword_store = _create_es_connector()\n    chunk_parameters = ChunkParameters(chunk_strategy=\"CHUNK_BY_SIZE\")\n    # get embedding assembler\n    assembler = EmbeddingAssembler.load_from_knowledge(\n        knowledge=knowledge,\n        chunk_parameters=chunk_parameters,\n        index_store=keyword_store,\n    )\n    assembler.persist()\n    # get embeddings retriever\n    retriever = assembler.as_retriever(3)\n    chunks = await retriever.aretrieve_with_scores(\"what is awel talk about\", 0.3)\n    print(f\"keyword rag example results:{chunks}\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Class Table in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigClassTable' to render a table of vector store configuration classes. It includes details such as class names, descriptions, and links to further documentation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/vector_store/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"ChromaVectorConfig\",\n    \"description\": \"Chroma vector store config.\",\n    \"link\": \"./chroma_store_chromavectorconfig_16224f\"\n  },\n  {\n    \"name\": \"ElasticsearchStoreConfig\",\n    \"description\": \"Elasticsearch vector config.\",\n    \"link\": \"./elastic_store_elasticsearchstoreconfig_15bdb6\"\n  },\n  {\n    \"name\": \"MilvusVectorConfig\",\n    \"description\": \"Milvus vector config.\",\n    \"link\": \"./milvus_store_milvusvectorconfig_20af52\"\n  },\n  {\n    \"name\": \"OceanBaseConfig\",\n    \"description\": \"OceanBase vector store config.\",\n    \"link\": \"./oceanbase_store_oceanbaseconfig_220e36\"\n  },\n  {\n    \"name\": \"PGVectorConfig\",\n    \"description\": \"PG vector config.\",\n    \"link\": \"./pgvector_store_pgvectorconfig_3ef448\"\n  },\n  {\n    \"name\": \"WeaviateVectorConfig\",\n    \"description\": \"Weaviate vector config.\",\n    \"link\": \"./weaviate_store_weaviatevectorconfig_093ce3\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Running String Response Server\nDESCRIPTION: Command to start the HTTP server for the string response example.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.2_http_trigger_get.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/http_trigger_say_hello.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Serve Parameters using MDX Component\nDESCRIPTION: MDX configuration component that defines the model serve parameters including API keys for endpoint access and model storage configuration options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_7a0577.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the model serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    },\n    {\n      \"name\": \"model_storage\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The storage type of model configures, if None, use the default storage(current database). When you run in light mode, it will not use any storage.\",\n      \"validValues\": [\n        \"database\",\n        \"memory\"\n      ]\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Running the Custom Input Source Example\nDESCRIPTION: Bash command to execute the my_input_source.py script using Poetry.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/my_input_source.py\n```\n\n----------------------------------------\n\nTITLE: BLOB Type Definitions\nDESCRIPTION: Grammar rules for different BLOB data type variations\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    blob_type_i : BLOB */\n/*! Production::    blob_type_i : LONGBLOB */\n/*! Production::    blob_type_i : MEDIUMBLOB */\n/*! Production::    blob_type_i : MEDIUMTEXT VARBINARY */\n/*! Production::    blob_type_i : TINYBLOB */\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Alembic Database Migration Errors in DB-GPT\nDESCRIPTION: These commands provide solutions for the 'Target database is not up to date' error in Alembic. They include upgrading the database, cleaning migration scripts and history, and a cautionary command for dropping all tables.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/install.md#2025-04-09_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration upgrade\n```\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration clean -y\n```\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration clean --drop_all_tables -y --confirm_drop_all_tables\n```\n\nLANGUAGE: commandline\nCODE:\n```\nrm -rf pilot/meta_data/alembic/versions/*\nrm -rf pilot/meta_data/alembic/dbgpt.db\n```\n\n----------------------------------------\n\nTITLE: Installing gettext on Arch Linux\nDESCRIPTION: Command to install gettext package on Arch Linux systems\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/i18n/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -Sy gettext\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Column References and Names\nDESCRIPTION: These production rules define how columns can be referenced in SQL statements, including fully qualified column names with relation (table) prefixes. They form the foundation for column identification in SQL queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    column_definition_ref : column_name */\n\n/*! Production::    column_definition_ref : relation_name \".\" column_name */\n\n/*! Production::    column_definition_ref : relation_name \".\" relation_name \".\" column_name */\n\n/*! Production::    column_label : NAME_OB */\n\n/*! Production::    column_label : unreserved_keyword */\n\n/*! Production::    column_list : column */\n\n/*! Production::    column_list : column_definition_ref */\n\n/*! Production::    column_list : column_list \",\" column */\n\n/*! Production::    column_list : column_list \",\" column_definition_ref */\n\n/*! Production::    column_list : column_list \",\" no_param_column_ref */\n\n/*! Production::    column_list : no_param_column_ref */\n\n/*! Production::    column_name : NAME_OB */\n\n/*! Production::    column_name : ROWID */\n\n/*! Production::    column_name : unreserved_keyword */\n\n/*! Production::    column_name_list : column_name */\n\n/*! Production::    column_name_list : column_name_list \",\" column_name */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Database Object Creation\nDESCRIPTION: This snippet showcases multiple SQL grammar production rules for creating various database objects such as databases, tables, functions, and indexes. It defines the syntax structure for these SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    createDatabase : CREATE dbFormat opt_ifNotExists uid */\n\n/*! Production::    createDatabase : CREATE dbFormat opt_ifNotExists uid createDatabaseOptions */\n\n/*! Production::    createTable : CREATE opt_TEMPORARY TABLE opt_ifNotExists tableName opt_createDefinitions opt_tableOptions opt_partitionDefinitions */\n\n/*! Production::    createFunction : CREATE FUNCTION uid LR_BRACKET opt_functionParameters RR_BRACKET RETURNS dataType opt_routineOptions returnStatement */\n\n/*! Production::    createIndex : CREATE opt_intimeAction opt_indexCategory INDEX uid opt_indexType ON tableName indexColumnNames opt_indexOptions optIndexLockAndAlgorithmAssigns */\n```\n\n----------------------------------------\n\nTITLE: Running the Print Call Data Example\nDESCRIPTION: Bash command to execute the input_operator_print_call_data.py script using Poetry.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/input_operator_print_call_data.py\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Enable Types and Engine Names\nDESCRIPTION: Defines the syntax for enable/disable options and recognized storage engine names in MySQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_61\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    enableType : DISABLE */\n\n/*! Production::    enableType : DISABLE ON SLAVE */\n\n/*! Production::    enableType : ENABLE */\n\n/*! Production::    engineName : ARCHIVE */\n\n/*! Production::    engineName : BLACKHOLE */\n\n/*! Production::    engineName : CSV */\n\n/*! Production::    engineName : FEDERATED */\n\n/*! Production::    engineName : ID */\n```\n\n----------------------------------------\n\nTITLE: List Flows API Endpoint\nDESCRIPTION: API endpoint for listing all available flows within DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nGET /api/v2/serve/awel/flows\n```\n\n----------------------------------------\n\nTITLE: Installing gettext on CentOS/RHEL\nDESCRIPTION: Commands to install gettext on CentOS/RHEL systems, showing both yum and dnf methods\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/i18n/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# CentOS/RHEL 7 And Older\nsudo yum install gettext\n# CentOS/RHEL 8 And Newer\nsudo dnf install gettext\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Lifecycle Hooks in Python for AWEL\nDESCRIPTION: This code snippet demonstrates how to create a custom task class with lifecycle hooks in AWEL. It implements 'before_dag_run' and 'after_dag_end' hooks, and a 'map' method for task execution. The example uses asyncio for asynchronous execution.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/advanced_guide/4.1_lifecycle.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dbgpt.core.awel import DAG, MapOperator\n\nclass MyLifecycleTask(MapOperator[str, str]):\n    async def before_dag_run(self):\n        print(\"Before DAG run\")\n\n    async def after_dag_end(self):\n        print(\"After DAG end\")\n\n    async def map(self, x: str) -> str:\n        return f\"Hello, {x}!\"\n\nwith DAG(\"awel_lifecycle_hooks\") as dag:\n    task = MyLifecycleTask()\n\nprint(asyncio.run(task.call(\"world\")))\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigClassTable with Service Configuration Classes\nDESCRIPTION: This code renders the ConfigClassTable component with an array of configuration classes. In this case, it includes the DBModelRegistryParameters class with its name, description, and link.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/index.mdx#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"DBModelRegistryParameters\",\n    \"description\": \"Database model registry parameters.\",\n    \"link\": \"./parameter_dbmodelregistryparameters_87d036\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Installing Git LFS for text2vec-large-chinese Model\nDESCRIPTION: Commands to install Git LFS on different operating systems to download the text2vec-large-chinese embedding model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/kbqa.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncentos:yum install git-lfs\nubuntu:apt-get install git-lfs -y\nmacos:brew install git-lfs\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Class Table in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigClassTable' to render a table of configuration classes for graph stores. It includes class names, descriptions, and links to detailed documentation for each graph store type.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/graph_store/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"BuiltinKnowledgeGraphConfig\",\n    \"description\": \"\",\n    \"link\": \"./knowledge_graph_builtinknowledgegraphconfig_f26e05\"\n  },\n  {\n    \"name\": \"Neo4jStoreConfig\",\n    \"description\": \"\",\n    \"link\": \"./neo4j_store_neo4jstoreconfig_a4db5d\"\n  },\n  {\n    \"name\": \"OpenSPGConfig\",\n    \"description\": \"\",\n    \"link\": \"./open_spg_openspgconfig_a744fd\"\n  },\n  {\n    \"name\": \"TuGraphStoreConfig\",\n    \"description\": \"TuGraph store config.\",\n    \"link\": \"./tugraph_store_tugraphstoreconfig_7ca8a8\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Installing Pydantic Dependency\nDESCRIPTION: Command to install the pydantic package version 2.6.0 or higher using Poetry package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.2_http_trigger_get.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add \"pydantic>=2.6.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for Quoted Identifiers\nDESCRIPTION: These rules define patterns for quoted identifiers in SQL, typically used for object names that contain special characters or spaces.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_247\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       `([^`]|``)*` */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       `[^`]*` */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       `[^`]+` */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       `{CHARSET_NAME}` */\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Store Settings\nDESCRIPTION: Example of vector store settings in the .env file, including options for Chroma, Milvus, and Weaviate.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/kbqa.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n#*******************************************************************#\n#**                  VECTOR STORE SETTINGS                       **#\n#*******************************************************************#\nVECTOR_STORE_TYPE=Chroma\n#MILVUS_URL=127.0.0.1\n#MILVUS_PORT=19530\n#MILVUS_USERNAME\n#MILVUS_PASSWORD\n#MILVUS_SECURE=\n\n#WEAVIATE_URL=https://kt-region-m8hcy0wc.weaviate.network\n```\n\n----------------------------------------\n\nTITLE: Procedure Clause Productions\nDESCRIPTION: Grammar rules for procedure clause definitions\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_161\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    proc_clause : accessible_by */\n/*! Production::    proc_clause : invoke_right */\n/*! Production::    proc_clause_list : proc_clause */\n/*! Production::    proc_clause_list : proc_clause_list proc_clause */\n```\n\n----------------------------------------\n\nTITLE: User Management Rules\nDESCRIPTION: Production rules for ALTER USER statements to modify user profiles and roles.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_user_profile_stmt : ALTER USER user_with_host_name user_profile */\n/*! Production::    alter_user_stmt : ALTER USER user_with_host_name DEFAULT ROLE default_role_clause */\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Print Call Data Example\nDESCRIPTION: The expected console output when running the input_operator_print_call_data.py script, showing two different messages.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nHello, World!\nAWEL is cool!\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Statement in SQL\nDESCRIPTION: Defines multiple variations for creating an outline, including options for hints and explanations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_outline_stmt : CREATE opt_replace OUTLINE relation_name ON STRING_VALUE USING HINT_HINT_BEGIN hint_list_with_end\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_outline_stmt : CREATE opt_replace OUTLINE relation_name ON explainable_stmt opt_outline_target\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_outline_stmt : create_with_opt_hint opt_replace OUTLINE relation_name ON STRING_VALUE USING HINT_HINT_BEGIN hint_list_with_end\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_outline_stmt : create_with_opt_hint opt_replace OUTLINE relation_name ON explainable_stmt opt_outline_target\n```\n\n----------------------------------------\n\nTITLE: SQL Index Configuration Options Productions\nDESCRIPTION: Grammar rules for index configuration options including block size, comments, locality settings, and physical attributes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_99\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    index_option : BLOCK_SIZE opt_equal_mark INTNUM */\n\n/*! Production::    index_option : COMMENT STRING_VALUE */\n\n/*! Production::    index_option : DATA_TABLE_ID opt_equal_mark INTNUM */\n\n/*! Production::    index_option : GLOBAL */\n\n/*! Production::    index_option : INDEX_TABLE_ID opt_equal_mark INTNUM */\n\n/*! Production::    index_option : LOCAL */\n\n/*! Production::    index_option : MAX_USED_PART_ID opt_equal_mark INTNUM */\n\n/*! Production::    index_option : REVERSE */\n\n/*! Production::    index_option : STORING \"(\" column_name_list \")\" */\n\n/*! Production::    index_option : VIRTUAL_COLUMN_ID opt_equal_mark INTNUM */\n\n/*! Production::    index_option : WITH PARSER STRING_VALUE */\n\n/*! Production::    index_option : WITH_ROWID */\n\n/*! Production::    index_option : index_using_algorithm */\n\n/*! Production::    index_option : parallel_option */\n\n/*! Production::    index_option : physical_attributes_option */\n\n/*! Production::    index_option : visibility_option */\n```\n\n----------------------------------------\n\nTITLE: Sample Output from AutoPlanChatManager Database Analysis in Bash\nDESCRIPTION: This output shows the execution flow of the AutoPlanChatManager as it plans and delegates database analysis tasks. It demonstrates how the manager breaks down a complex analysis request into sequential steps and assigns them to the DataScientist agent.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/planning.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--------------------------------------------------------------------------------\nUser (to AutoPlanChatManager)-[]:\n\n\"Analyze student scores from at least three dimensions\"\n\n--------------------------------------------------------------------------------\nun_stream ai response: [\n    {\n        \"serial_number\": \"1\",\n        \"agent\": \"DataScientist\",\n        \"content\": \"Retrieve student scores data from the database including scores for each subject, overall performance, and attendance records.\",\n        \"rely\": \"\"\n    },\n    {\n        \"serial_number\": \"2\",\n        \"agent\": \"DataScientist\",\n        \"content\": \"Analyze student scores data to identify trends and patterns in academic performance, subject-wise scores, and attendance correlation.\",\n        \"rely\": \"1\"\n    },\n    {\n        \"serialjson_number\": \"3\",\n        \"agent\": \"DataScientist\",\n        \"content\": \"Visualize the analyzed data using appropriate graphs and charts to represent the student scores from different dimensions effectively.\",\n        \"rely\": \"2\"\n    }\n]\n\n--------------------------------------------------------------------------------\nPlanner (to AutoPlanChatManager)-[gpt-3.5-turbo]:\n\n\"[\\n    {\\n        \\\"serial_number\\\": \\\"1\\\",\\n        \\\"agent\\\": \\\"DataScientist\\\",\\n        \\\"content\\\": \\\"Retrieve student scores data from the database including scores for each subject, overall performance, and attendance records.\\\",\\n        \\\"rely\\\": \\\"\\\"\\n    },\\n    {\\n        \\\"serial_number\\\": \\\"2\\\",\\n        \\\"agent\\\": \\\"DataScientist\\\",\\n        \\\"content\\\": \\\"Analyze student scores data to identify trends and patterns in academic performance, subject-wise scores, and attendance correlation.\\\",\\n        \\\"rely\\\": \\\"1\\\"\\n    },\\n    {\\n        \\\"serialjson_number\\\": \\\"3\\\",\\n        \\\"agent\\\": \\\"DataScientist\\\",\\n        \\\"content\\\": \\\"Visualize the analyzed data using appropriate graphs and charts to represent the student scores from different dimensions effectively.\\\",\\n        \\\"rely\\\": \\\"2\\\"\\n    }\\n]\"\n>>>>>>>>Planner Review info: \nPass(None)\n>>>>>>>>Planner Action report: \nexecution succeeded,\n[\n    {\n        \"serial_number\": \"1\",\n        \"agent\": \"DataScientist\",\n        \"content\": \"Retrieve student scores data from the database including scores for each subject, overall performance, and attendance records.\",\n        \"rely\": \"\"\n    },\n    {\n        \"serial_number\": \"2\",\n        \"agent\": \"DataScientist\",\n        \"content\": \"Analyze student scores data to identify trends and patterns in academic performance, subject-wise scores, and attendance correlation.\",\n        \"rely\": \"1\"\n    },\n    {\n        \"serialjson_number\": \"3\",\n        \"agent\": \"DataScientist\",\n        \"content\": \"Visualize the analyzed data using appropriate graphs and charts to represent the student scores from different dimensions effectively.\",\n        \"rely\": \"2\"\n    }\n]\n\n--------------------------------------------------------------------------------\nGroupChat select_speaker failed to resolve the next speaker's name. This is because the speaker selection OAI call returned:\nDataScientist\n\n--------------------------------------------------------------------------------\nAutoPlanChatManager (to Edgar)-[]:\n\n\"Retrieve student scores data from the database including scores for each subject, overall performance, and attendance records.\"\n\n--------------------------------------------------------------------------------\nun_stream ai response: {\n  \"display_type\": \"response_table\",\n  \"sql\": \"SELECT s.student_id, s.student_name, s.major, s.year_of_enrollment, s.student_age, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id\",\n  \"thought\": \"I have crafted a SQL query that retrieves student scores data including scores for each subject, overall performance, and attendance records by joining the 'students', 'scores', and 'courses' tables on their respective keys.\"\n}\n\n--------------------------------------------------------------------------------\nEdgar (to AutoPlanChatManager)-[gpt-3.5-turbo]:\n\n\"{\\n  \\\"display_type\\\": \\\"response_table\\\",\\n  \\\"sql\\\": \\\"SELECT s.student_id, s.student_name, s.major, s.year_of_enrollment, s.student_age, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id\\\",\\n  \\\"thought\\\": \\\"I have crafted a SQL query that retrieves student scores data including scores for each subject, overall performance, and attendance records by joining the 'students', 'scores', and 'courses' tables on their respective keys.\\\"\\n}\"\n>>>>>>>>Edgar Review info: \nPass(None)\n>>>>>>>>Edgar Action report: \nexecution succeeded,\n{\"display_type\":\"response_table\",\"sql\":\"SELECT s.student_id, s.student_name, s.major, s.year_of_enrollment, s.student_age, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id\",\"thought\":\"I have crafted a SQL query that retrieves student scores data including scores for each subject, overall performance, and attendance records by joining the 'students', 'scores', and 'courses' tables on their respective keys.\"}\n\n--------------------------------------------------------------------------------\nGroupChat select_speaker failed to resolve the next speaker's name. This is because the speaker selection OAI call returned:\nDataScientist\n\n--------------------------------------------------------------------------------\nAutoPlanChatManager (to Edgar)-[]:\n\n\"Read the result data of the dependent steps in the above historical message to complete the current goal:Analyze student scores data to identify trends and patterns in academic performance, subject-wise scores, and attendance correlation.\"\n\n--------------------------------------------------------------------------------\nun_stream ai response: {\n  \"display_type\": \"response_table\",\n  \"sql\": \"SELECT student_id, student_name, course_name, credit, AVG(score) AS average_score, COUNT(score) AS total_scores, MAX(score) AS highest_score, MIN(score) AS lowest_score, SUM(score) AS total_score, AVG(semester) AS average_semester FROM (SELECT s.student_id, s.student_name, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id) GROUP BY student_id, course_name\",\n  \"thought\": \"I have created a SQL query that analyzes student scores data to identify trends and patterns in academic performance, subject-wise scores, and attendance correlation. The query calculates average score, total scores, highest score, lowest score, total score, and average semester for each student in each course.\"\n}\n\n--------------------------------------------------------------------------------\nEdgar (to AutoPlanChatManager)-[gpt-3.5-turbo]:\n\n\"{\\n  \\\"display_type\\\": \\\"response_table\\\",\\n  \\\"sql\\\": \\\"SELECT student_id, student_name, course_name, credit, AVG(score) AS average_score, COUNT(score) AS total_scores, MAX(score) AS highest_score, MIN(score) AS lowest_score, SUM(score) AS total_score, AVG(semester) AS average_semester FROM (SELECT s.student_id, s.student_name, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id) GROUP BY student_id, course_name\\\",\\n  \\\"thought\\\": \\\"I have created a SQL query that analyzes student scores data to identify trends and patterns in academic performance, subject-wise scores, and attendance correlation. The query calculates average score, total scores, highest score, lowest score, total score, and average semester for each student in each course.\\\"\\n}\"\n>>>>>>>>Edgar Review info: \nPass(None)\n>>>>>>>>Edgar Action report: \nexecution succeeded,\n```\n\n----------------------------------------\n\nTITLE: Citation for DB-GPT Architecture Paper\nDESCRIPTION: BibTeX citation for the paper describing the overall architecture of DB-GPT. This citation should be used when referencing the project's architecture in academic or research contexts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: BibTeX\nCODE:\n```\n@article{xue2023dbgpt,\n      title={DB-GPT: Empowering Database Interactions with Private Large Language Models}, \n      author={Siqiao Xue and Caigao Jiang and Wenhui Shi and Fangyin Cheng and Keting Chen and Hongjun Yang and Zhiping Zhang and Jianshan He and Hongyang Zhang and Ganglin Wei and Wang Zhao and Fan Zhou and Danrui Qi and Hong Yi and Shaodong Liu and Faqiang Chen},\n      year={2023},\n      journal={arXiv preprint arXiv:2312.17449},\n      url={https://arxiv.org/abs/2312.17449}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering CrossEncoderRerankEmbeddingsParameters Configuration with React Component\nDESCRIPTION: JSX code that uses a ConfigDetail React component to render the configuration details for CrossEncoderRerankEmbeddingsParameters. The configuration includes parameter definitions with names, types, descriptions, and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/reranker/rerank_crossencoderrerankembeddingsparameters_63ec13.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"CrossEncoderRerankEmbeddingsParameters\",\n  \"description\": \"CrossEncoder Rerank Embeddings Parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"path\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The path of the model, if you want to deploy a local model.\"\n    },\n    {\n      \"name\": \"device\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Device to run model. If None, the device is automatically determined\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"hf\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"50\"\n    },\n    {\n      \"name\": \"max_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Max length for input sequences. Longer sequences will be truncated.\"\n    },\n    {\n      \"name\": \"model_kwargs\",\n      \"type\": \"object\",\n      \"required\": false,\n      \"description\": \"Keyword arguments to pass to the model.\",\n      \"defaultValue\": \"{}\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Elasticsearch Configuration Details in JSX\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render the configuration details for Elasticsearch vector storage. It includes parameters such as user credentials, connection details, and index configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/vector_store/elastic_store_elasticsearchstoreconfig_15bdb6.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ElasticsearchStoreConfig\",\n  \"description\": \"Elasticsearch vector config.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The user of vector store, if not set, will use the default user.\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The password of vector store, if not set, will use the default password.\"\n    },\n    {\n      \"name\": \"uri\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"9200\"\n    },\n    {\n      \"name\": \"alias\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"default\"\n    },\n    {\n      \"name\": \"index_name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"index_name_test\"\n    },\n    {\n      \"name\": \"metadata_field\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"metadata\"\n    },\n    {\n      \"name\": \"secure\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": \"\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Providing Link to Release Notes in Markdown\nDESCRIPTION: This snippet contains text that directs users to the GitHub releases page for detailed version release information, including a hyperlink to the ReleaseNotes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/changelog/doc.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nOur version release information is maintained on GitHub. For more details, please visit [ReleaseNotes](https://github.com/eosphoros-ai/DB-GPT/releases)\n```\n\n----------------------------------------\n\nTITLE: DB-GPT Command Line Help\nDESCRIPTION: Simple Python command to display the help information for the DB-GPT trace command-line interface. This provides details about available options and parameters for the trace functionality.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndbgpt trace --help\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Python Client Package\nDESCRIPTION: Command to install the official DB-GPT Client package from PyPI. This installs the client library with all required dependencies for interacting with the DB-GPT API.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/introduction.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install \"dbgpt[client]>=0.5.2\"\n```\n\n----------------------------------------\n\nTITLE: Querying Student Performance Metrics - SQL\nDESCRIPTION: SQL query that joins students, scores and courses tables to calculate comprehensive performance metrics including average scores, total scores, highest/lowest scores, and semester averages. Groups results by student and course.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/planning.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT student_id, student_name, course_name, credit, AVG(score) AS average_score, COUNT(score) AS total_scores, MAX(score) AS highest_score, MIN(score) AS lowest_score, SUM(score) AS total_score, AVG(semester) AS average_semester FROM (SELECT s.student_id, s.student_name, c.course_name, c.credit, sc.score, sc.semester FROM students s JOIN scores sc ON s.student_id = sc.student_id JOIN courses c ON sc.course_id = c.course_id) GROUP BY student_id, course_name\n```\n\n----------------------------------------\n\nTITLE: System Privilege Productions\nDESCRIPTION: Grammar rules defining various system level privileges like ALTER, CREATE, AUDIT permissions on different objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_199\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    system_privilege : ALTER ANY INDEX */\n/*! Production::    system_privilege : ALTER ANY OUTLINE */\n/*! Production::    system_privilege : ALTER ANY PROCEDURE */\n/*! Production::    system_privilege : CREATE ANY INDEX */\n/*! Production::    system_privilege : CREATE ANY OUTLINE */\n/*! Production::    system_privilege : CREATE ANY PROCEDURE */\n```\n\n----------------------------------------\n\nTITLE: Window Function Grammar Productions in SQL\nDESCRIPTION: Grammar production rules for SQL window functions including RANK, DENSE_RANK, ROW_NUMBER, and statistical functions. These rules define how window functions are structured with OVER clauses and window specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_228\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    window_function : CUME_DIST \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : DENSE_RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : DENSE_RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : FIRST_VALUE win_fun_first_last_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : FIRST_VALUE win_fun_first_last_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : GROUP_CONCAT \"(\" opt_distinct expr_list opt_order_by opt_separator \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : HYBRID_HIST \"(\" bit_expr \",\" bit_expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : JSON_ARRAYAGG \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : JSON_OBJECTAGG \"(\" expr \",\" expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LAG win_fun_lead_lag_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LAG win_fun_lead_lag_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LAST_VALUE win_fun_first_last_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LAST_VALUE win_fun_first_last_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LEAD win_fun_lead_lag_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LEAD win_fun_lead_lag_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LISTAGG \"(\" opt_all expr_list opt_separator \")\" WITHIN GROUP \"(\" order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LISTAGG \"(\" opt_distinct expr_list opt_order_by opt_separator \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : MAX \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MAX \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MAX \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : MIN \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MIN \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MIN \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : NTH_VALUE \"(\" bit_expr \",\" bit_expr \")\" opt_from_first_or_last opt_respect_or_ignore_nulls OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : NTH_VALUE \"(\" expr \",\" expr \")\" opt_from_first_or_last opt_respect_or_ignore_nulls OVER new_generalized_window_clause */\n\n/*! Production::    window_function : NTILE \"(\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : NTILE \"(\" expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : PERCENT_RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : PERCENT_RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : RATIO_TO_REPORT \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_AVGX \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_AVGY \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_COUNT \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_INTERCEPT \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_R2 \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SLOPE \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SXX \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SXY \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SYY \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : ROW_NUMBER \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : ROW_NUMBER \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STD \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : STDDEV \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : STDDEV_POP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV_POP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : STDDEV_SAMP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV_SAMP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : SUM \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : SUM \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : SUM \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : TOP_K_FRE_HIST \"(\" bit_expr \",\" bit_expr \",\" bit_expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VARIANCE \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VARIANCE \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : VARIANCE \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : VAR_POP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VAR_POP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : VAR_SAMP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VAR_SAMP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n```\n\n----------------------------------------\n\nTITLE: Installing gettext on Ubuntu/Debian\nDESCRIPTION: Commands to install the gettext package on Ubuntu/Debian based systems\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/i18n/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install gettext\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for FETCH Statement with INTO Clause\nDESCRIPTION: Specifies the grammar production for a FETCH statement using a PL/SQL access name with INTO clause.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_73\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    fetch_stmt : FETCH pl_access_name into_clause */\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Class Table in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigClassTable' to render a table of LLM configuration classes. It passes an array of class objects containing name, description, and link properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"BaichuanDeployModelParameters\",\n    \"description\": \"Baichuan Proxy LLM\",\n    \"link\": \"./baichuan_baichuandeploymodelparameters_0bf9cc\"\n  },\n  {\n    \"name\": \"BitsandbytesQuantization\",\n    \"description\": \"Bits and bytes quantization parameters.\",\n    \"link\": \"./parameter_bitsandbytesquantization_d40e3b\"\n  },\n  // ... additional class entries ...\n  {\n    \"name\": \"ZhipuDeployModelParameters\",\n    \"description\": \"Zhipu proxy LLM configuration.\",\n    \"link\": \"./zhipu_zhipudeploymodelparameters_c51e31\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Request in Bash\nDESCRIPTION: This bash command tests the HTTP endpoint created by the AWEL DAG, sending a GET request with a query parameter.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/get_started.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n% curl -X GET http://127.0.0.1:5670/api/v1/awel/trigger/examples/hello\\?name\\=zhangsan\n\"Hello, zhangsan, your age is 18\"\n```\n\n----------------------------------------\n\nTITLE: Cloning DB-GPT Repository\nDESCRIPTION: Command to clone the forked DB-GPT repository to local machine. Requires replacing placeholder with actual GitHub username.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<YOUR-GITHUB-USERNAME>/DB-GPT\n```\n\n----------------------------------------\n\nTITLE: Referencing GPT-Vis Project Link\nDESCRIPTION: Markdown link to the GPT-Vis project repository where the visualization modules are maintained\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/modules/visual.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Visualization\nDB-GPT provides rich visualization capabilities, which are developed independently as reusable modules in the [GPT-Vis](https://github.com/eosphoros-ai/GPT-Vis) project\n```\n\n----------------------------------------\n\nTITLE: Rendering Vertica Configuration Parameters with React Component\nDESCRIPTION: This code uses a custom React component called ConfigDetail to render a structured configuration interface for Vertica database connections. It defines all the necessary parameters including connection details, authentication, and connection pool settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_vertica_verticaparameters_c712b8.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"VerticaParameters\",\n  \"description\": \"Vertica is a strongly consistent, ACID-compliant, SQL data warehouse, built for the scale and complexity of today`s data-driven world.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database host, e.g., localhost\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": true,\n      \"description\": \"Database port, e.g., 3306\"\n    },\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database user to connect\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Database name\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name for vertica, default is vertica+vertica_python\",\n      \"defaultValue\": \"vertica+vertica_python\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database password, you can write your password directly, of course, you can also use environment variables, such as ${env:DBGPT_DB_PASSWORD}\",\n      \"defaultValue\": \"${env:DBGPT_DB_PASSWORD}\"\n    },\n    {\n      \"name\": \"pool_size\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool size, default 5\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"max_overflow\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Max overflow connections, default 10\",\n      \"defaultValue\": \"10\"\n    },\n    {\n      \"name\": \"pool_timeout\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool timeout, default 30\",\n      \"defaultValue\": \"30\"\n    },\n    {\n      \"name\": \"pool_recycle\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Connection pool recycle, default 3600\",\n      \"defaultValue\": \"3600\"\n    },\n    {\n      \"name\": \"pool_pre_ping\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Connection pool pre ping, default True\",\n      \"defaultValue\": \"True\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Dependencies\nDESCRIPTION: Installs required node dependencies for the documentation system using yarn package manager.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Using the dbgpt model stop Command\nDESCRIPTION: The dbgpt model stop command is used to stop running model instances. It requires model name, host, and port parameters, with an optional model_type parameter.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt model stop  --help\nAlready connect 'dbgpt'\nUsage: dbgpt model stop [OPTIONS]\n\n  Stop model instances\n\nOptions:\n  --model_name TEXT  The name of model  [required]\n  --model_type TEXT  The type of model\n  --host TEXT        The remote host to stop model  [required]\n  --port INTEGER     The remote port to stop model  [required]\n  --help             Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Chat Completion Request with cURL\nDESCRIPTION: This snippet demonstrates how to send a stream chat completion request to the DB-GPT API using cURL. It includes setting the API key, specifying headers, and sending the request body.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/chat.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=\"dbgpt\"\n\ncurl -X POST \"http://localhost:5670/api/v2/chat/completions\" \\\n   -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n   -H \"accept: application/json\" \\\n   -H \"Content-Type: application/json\" \\\n   -d \"{\\\"messages\\\":\\\"Hello\\\",\\\"model\\\":\\\"gpt-4o\\\", \\\"stream\\\": true}\"\n```\n\n----------------------------------------\n\nTITLE: Query Hint Productions\nDESCRIPTION: Grammar rules defining various query optimization hints including index hints, parallel execution, and query block naming\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_75\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    hint_option : FULL_HINT \"(\" qb_name_option relation_factor_in_hint \")\" */\n/*! Production::    hint_option : INDEX_HINT \"(\" qb_name_option relation_factor_in_hint NAME_OB \")\" */\n/*! Production::    hint_option : NO_USE_PX */\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE LIKE Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating tables based on the structure of existing tables using the LIKE syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_like_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor \"(\" LIKE relation_factor \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_like_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor LIKE relation_factor */\n```\n\n----------------------------------------\n\nTITLE: Audit Operation Rules\nDESCRIPTION: Production rules for audit operations including enabling/disabling auditing on various database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    audit_all_shortcut : ALTER */\n/*! Production::    audit_all_shortcut : ALTER SEQUENCE */\n/*! Production::    audit_all_shortcut : ALTER SYSTEM */\n/*! Production::    audit_stmt : audit_or_noaudit audit_clause */\n/*! Production::    audit_clause : audit_operation_clause auditing_by_user_clause op_audit_tail_clause */\n```\n\n----------------------------------------\n\nTITLE: Installing gettext on MacOS\nDESCRIPTION: Command to install gettext package using Homebrew on MacOS\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/i18n/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gettext\n```\n\n----------------------------------------\n\nTITLE: Defining Server Option and Action Grammar Productions in SQL\nDESCRIPTION: These productions define various server options and actions, including database, host, owner, password, port, socket, and user settings. They also cover server actions like add, delete, start, stop, and isolate, providing a comprehensive set of server management operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_125\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    serverOption : DATABASE STRING_LITERAL */\n\n/*! Production::    serverOption : HOST STRING_LITERAL */\n\n/*! Production::    serverOption : OWNER STRING_LITERAL */\n\n/*! Production::    serverOption : PASSWORD STRING_LITERAL */\n\n/*! Production::    serverOption : PORT decimalLiteral */\n\n/*! Production::    serverOption : SOCKET STRING_LITERAL */\n\n/*! Production::    serverOption : USER STRING_LITERAL */\n\n/*! Production::    serverOptions : serverOption */\n\n/*! Production::    serverOptions : serverOption COMMA serverOptions */\n\n/*! Production::    server_action : ADD */\n\n/*! Production::    server_action : CANCEL DELETE */\n\n/*! Production::    server_action : DELETE */\n\n/*! Production::    server_action : FORCE STOP */\n\n/*! Production::    server_action : ISOLATE */\n\n/*! Production::    server_action : START */\n\n/*! Production::    server_action : STOP */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Temporary Table Options\nDESCRIPTION: These productions define the syntax for specifying temporary table options in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_192\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    temporary_option : %epsilon */\n\n/*! Production::    temporary_option : GLOBAL TEMPORARY */\n\n/*! Production::    temporary_option : TEMPORARY */\n```\n\n----------------------------------------\n\nTITLE: Changing Directory\nDESCRIPTION: Command to navigate to the DB-GPT project directory.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/CONTRIBUTING.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd DB-GPT\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script with Poetry in Bash\nDESCRIPTION: This bash command demonstrates how to run the Python script containing the DoubleNumberOperator example using Poetry, a Python dependency management tool.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.1_map_operator.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/map_operator_double_number.py\n```\n\n----------------------------------------\n\nTITLE: Creating New Branch\nDESCRIPTION: Command to create and switch to a new branch for development.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/CONTRIBUTING.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Buffer Memory using ConfigDetail Component\nDESCRIPTION: React/MDX component implementation that defines token buffer memory configuration parameters including maximum token limits. The configuration uses a ConfigDetail component to display the settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/memory/config_tokenbuffergptsappmemoryconfig_6a2000.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"TokenBufferGPTsAppMemoryConfig\",\n  \"description\": \"Token buffer memory configuration.\\n\\n    This configuration is used to control the token buffer memory.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"max_token_limit\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max token limit. Default is 100k\",\n      \"defaultValue\": \"102400\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Hive Configuration Details using React Component\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to render the configuration details for Apache Hive. It includes parameters like host, port, database, authentication modes, and other connection settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/datasource/conn_hive_hiveparameters_ec3601.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"HiveParameters\",\n  \"description\": \"A distributed fault-tolerant data warehouse system.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"host\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Hive server host\"\n    },\n    {\n      \"name\": \"port\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Hive server port, default 10000\",\n      \"defaultValue\": \"10000\"\n    },\n    {\n      \"name\": \"database\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Database name, default 'default'\",\n      \"defaultValue\": \"default\"\n    },\n    {\n      \"name\": \"auth\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Authentication mode: NONE, NOSASL, LDAP, KERBEROS, CUSTOM\",\n      \"defaultValue\": \"NONE\",\n      \"validValues\": [\n        \"NONE\",\n        \"NOSASL\",\n        \"LDAP\",\n        \"KERBEROS\",\n        \"CUSTOM\"\n      ]\n    },\n    {\n      \"name\": \"username\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Username for authentication\",\n      \"defaultValue\": \"\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Password for LDAP or CUSTOM auth\",\n      \"defaultValue\": \"\"\n    },\n    {\n      \"name\": \"kerberos_service_name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Kerberos service name\",\n      \"defaultValue\": \"hive\"\n    },\n    {\n      \"name\": \"transport_mode\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Transport mode: binary or http\",\n      \"defaultValue\": \"binary\"\n    },\n    {\n      \"name\": \"driver\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Driver name for Hive, default is hive.\",\n      \"defaultValue\": \"hive\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Installing gettext on Fedora\nDESCRIPTION: Command to install gettext package on Fedora systems\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/i18n/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install gettext\n```\n\n----------------------------------------\n\nTITLE: Get Datasource Python Example\nDESCRIPTION: Example of using Python client to get a datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.datasource import get_datasource\n\nDBGPT_API_KEY = \"dbgpt\"\ndatasource_id = \"{your_datasource_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await get_datasource(client=client, datasource_id=datasource_id)\n```\n\n----------------------------------------\n\nTITLE: MySQL Expression Atom Production Rules\nDESCRIPTION: Production rules for atomic expressions that can be combined to form larger expressions, including operators, functions, variables, and constants.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_68\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    expression : expression logicalOperator expression */\n\n/*! Production::    expression : predicate */\n\n/*! Production::    expression : predicate IS opt_NOT testValue */\n\n/*! Production::    expressionAtom : BINARY expressionAtom */\n\n/*! Production::    expressionAtom : BIT_NOT_OP expressionAtom */\n\n/*! Production::    expressionAtom : EXCLAMATION_SYMBOL expressionAtom */\n\n/*! Production::    expressionAtom : INTERVAL expression intervalType */\n\n/*! Production::    expressionAtom : LR_BRACKET expressions RR_BRACKET */\n\n/*! Production::    expressionAtom : LR_BRACKET selectStatement RR_BRACKET */\n\n/*! Production::    expressionAtom : PLUS expressionAtom */\n\n/*! Production::    expressionAtom : constant */\n\n/*! Production::    expressionAtom : expressionAtom COLLATE collationName */\n\n/*! Production::    expressionAtom : expressionAtom bitOperator expressionAtom */\n\n/*! Production::    expressionAtom : expressionAtom jsonOperator expressionAtom */\n\n/*! Production::    expressionAtom : expressionAtom mathOperator expressionAtom */\n\n/*! Production::    expressionAtom : fullColumnName */\n\n/*! Production::    expressionAtom : functionCall */\n\n/*! Production::    expressionAtom : mysqlVariable */\n\n/*! Production::    expressionOrDefault : DEFAULT */\n\n/*! Production::    expressionOrDefault : expression */\n\n/*! Production::    expressions : expression */\n\n/*! Production::    expressions : expression COMMA expressions */\n\n/*! Production::    expressionsWithDefaults : expressionOrDefault */\n\n/*! Production::    expressionsWithDefaults : expressionOrDefault COMMA expressionsWithDefaults */\n```\n\n----------------------------------------\n\nTITLE: CREATE INDEX Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating indexes in SQL, including optional hints, algorithm specifications, and index options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_index_stmt : create_with_opt_hint opt_index_keyname INDEX opt_if_not_exists normal_relation_factor opt_index_using_algorithm ON relation_factor \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords\nDESCRIPTION: This code block defines a series of unreserved keywords used in SQL databases. Each keyword is specified using a production rule format, indicating that these are normal unreserved keywords.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_219\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : M */\n\n/*! Production::    unreserved_keyword_normal : MAJOR */\n\n/*! Production::    unreserved_keyword_normal : MANAGEMENT */\n\n/*! Production::    unreserved_keyword_normal : MANUAL */\n\n/*! Production::    unreserved_keyword_normal : MASTER */\n\n/*! Production::    unreserved_keyword_normal : MASTER_AUTO_POSITION */\n\n/*! Production::    unreserved_keyword_normal : MASTER_BIND */\n\n/*! Production::    unreserved_keyword_normal : MASTER_CONNECT_RETRY */\n\n/*! Production::    unreserved_keyword_normal : MASTER_DELAY */\n\n/*! Production::    unreserved_keyword_normal : MASTER_HEARTBEAT_PERIOD */\n\n/*! Production::    unreserved_keyword_normal : MASTER_HOST */\n\n/*! Production::    unreserved_keyword_normal : MASTER_LOG_FILE */\n\n/*! Production::    unreserved_keyword_normal : MASTER_LOG_POS */\n\n/*! Production::    unreserved_keyword_normal : MASTER_PASSWORD */\n\n/*! Production::    unreserved_keyword_normal : MASTER_PORT */\n\n/*! Production::    unreserved_keyword_normal : MASTER_RETRY_COUNT */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SERVER_ID */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CA */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CAPATH */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CERT */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CIPHER */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CRL */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CRLPATH */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_KEY */\n\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_VERIFY_SERVER_CERT */\n\n/*! Production::    unreserved_keyword_normal : MASTER_USER */\n\n/*! Production::    unreserved_keyword_normal : MATCH */\n\n/*! Production::    unreserved_keyword_normal : MATCHED */\n\n/*! Production::    unreserved_keyword_normal : MATERIALIZED */\n\n/*! Production::    unreserved_keyword_normal : MAX */\n\n/*! Production::    unreserved_keyword_normal : MAXIMIZE */\n\n/*! Production::    unreserved_keyword_normal : MAX_CONNECTIONS_PER_HOUR */\n\n/*! Production::    unreserved_keyword_normal : MAX_CPU */\n\n/*! Production::    unreserved_keyword_normal : MAX_DISK_SIZE */\n\n/*! Production::    unreserved_keyword_normal : MAX_IOPS */\n\n/*! Production::    unreserved_keyword_normal : MAX_MEMORY */\n\n/*! Production::    unreserved_keyword_normal : MAX_QUERIES_PER_HOUR */\n\n/*! Production::    unreserved_keyword_normal : MAX_ROWS */\n\n/*! Production::    unreserved_keyword_normal : MAX_SESSION_NUM */\n\n/*! Production::    unreserved_keyword_normal : MAX_SIZE */\n\n/*! Production::    unreserved_keyword_normal : MAX_UPDATES_PER_HOUR */\n\n/*! Production::    unreserved_keyword_normal : MAX_USED_PART_ID */\n\n/*! Production::    unreserved_keyword_normal : MAX_USER_CONNECTIONS */\n\n/*! Production::    unreserved_keyword_normal : MEDIUM */\n\n/*! Production::    unreserved_keyword_normal : MEDIUMBLOB */\n\n/*! Production::    unreserved_keyword_normal : MEDIUMINT */\n\n/*! Production::    unreserved_keyword_normal : MEDIUMTEXT */\n\n/*! Production::    unreserved_keyword_normal : MEMBER */\n\n/*! Production::    unreserved_keyword_normal : MEMORY */\n\n/*! Production::    unreserved_keyword_normal : MEMORY_SIZE */\n\n/*! Production::    unreserved_keyword_normal : MEMSTORE_PERCENT */\n\n/*! Production::    unreserved_keyword_normal : MEMTABLE */\n\n/*! Production::    unreserved_keyword_normal : MERGE */\n\n/*! Production::    unreserved_keyword_normal : MESSAGE_TEXT */\n\n/*! Production::    unreserved_keyword_normal : META */\n\n/*! Production::    unreserved_keyword_normal : MICROSECOND */\n\n/*! Production::    unreserved_keyword_normal : MIDDLEINT */\n\n/*! Production::    unreserved_keyword_normal : MIGRATE */\n\n/*! Production::    unreserved_keyword_normal : MIGRATION */\n\n/*! Production::    unreserved_keyword_normal : MIN */\n\n/*! Production::    unreserved_keyword_normal : MINOR */\n\n/*! Production::    unreserved_keyword_normal : MINUS */\n\n/*! Production::    unreserved_keyword_normal : MINUTE */\n\n/*! Production::    unreserved_keyword_normal : MINUTE_MICROSECOND */\n\n/*! Production::    unreserved_keyword_normal : MINUTE_SECOND */\n\n/*! Production::    unreserved_keyword_normal : MINVALUE */\n\n/*! Production::    unreserved_keyword_normal : MIN_CPU */\n\n/*! Production::    unreserved_keyword_normal : MIN_IOPS */\n\n/*! Production::    unreserved_keyword_normal : MIN_MEMORY */\n\n/*! Production::    unreserved_keyword_normal : MIN_ROWS */\n\n/*! Production::    unreserved_keyword_normal : MOD */\n\n/*! Production::    unreserved_keyword_normal : MODE */\n\n/*! Production::    unreserved_keyword_normal : MODIFIES */\n\n/*! Production::    unreserved_keyword_normal : MODIFY */\n\n/*! Production::    unreserved_keyword_normal : MONTH */\n\n/*! Production::    unreserved_keyword_normal : MOVE */\n\n/*! Production::    unreserved_keyword_normal : MOVEMENT */\n\n/*! Production::    unreserved_keyword_normal : MULTILINESTRING */\n\n/*! Production::    unreserved_keyword_normal : MULTIPOINT */\n\n/*! Production::    unreserved_keyword_normal : MULTIPOLYGON */\n\n/*! Production::    unreserved_keyword_normal : MUTEX */\n\n/*! Production::    unreserved_keyword_normal : MYSQL_ERRNO */\n\n/*! Production::    unreserved_keyword_normal : NAME */\n\n/*! Production::    unreserved_keyword_normal : NAMES */\n\n/*! Production::    unreserved_keyword_normal : NAMESPACE */\n\n/*! Production::    unreserved_keyword_normal : NATIONAL */\n\n/*! Production::    unreserved_keyword_normal : NATURAL */\n\n/*! Production::    unreserved_keyword_normal : NCHAR */\n\n/*! Production::    unreserved_keyword_normal : NDB */\n\n/*! Production::    unreserved_keyword_normal : NDBCLUSTER */\n\n/*! Production::    unreserved_keyword_normal : NETWORK */\n\n/*! Production::    unreserved_keyword_normal : NEW */\n\n/*! Production::    unreserved_keyword_normal : NEXT */\n\n/*! Production::    unreserved_keyword_normal : NO */\n\n/*! Production::    unreserved_keyword_normal : NOARCHIVELOG */\n\n/*! Production::    unreserved_keyword_normal : NOAUDIT */\n\n/*! Production::    unreserved_keyword_normal : NOCACHE */\n\n/*! Production::    unreserved_keyword_normal : NOCYCLE */\n\n/*! Production::    unreserved_keyword_normal : NODEGROUP */\n\n/*! Production::    unreserved_keyword_normal : NOLOGGING */\n\n/*! Production::    unreserved_keyword_normal : NOMAXVALUE */\n\n/*! Production::    unreserved_keyword_normal : NOMINVALUE */\n\n/*! Production::    unreserved_keyword_normal : NONE */\n\n/*! Production::    unreserved_keyword_normal : NOORDER */\n\n/*! Production::    unreserved_keyword_normal : NOPARALLEL */\n\n/*! Production::    unreserved_keyword_normal : NORELY */\n\n/*! Production::    unreserved_keyword_normal : NORMAL */\n\n/*! Production::    unreserved_keyword_normal : NOVALIDATE */\n\n/*! Production::    unreserved_keyword_normal : NOW */\n\n/*! Production::    unreserved_keyword_normal : NOWAIT */\n\n/*! Production::    unreserved_keyword_normal : NO_WAIT */\n\n/*! Production::    unreserved_keyword_normal : NO_WRITE_TO_BINLOG */\n\n/*! Production::    unreserved_keyword_normal : NTH_VALUE */\n\n/*! Production::    unreserved_keyword_normal : NTILE */\n\n/*! Production::    unreserved_keyword_normal : NULLS */\n\n/*! Production::    unreserved_keyword_normal : NUMBER */\n\n/*! Production::    unreserved_keyword_normal : NVARCHAR */\n\n/*! Production::    unreserved_keyword_normal : NVARCHAR2 */\n\n/*! Production::    unreserved_keyword_normal : OBCONFIG_URL */\n\n/*! Production::    unreserved_keyword_normal : OBJECT */\n\n/*! Production::    unreserved_keyword_normal : OBSOLETE */\n\n/*! Production::    unreserved_keyword_normal : OCCUR */\n\n/*! Production::    unreserved_keyword_normal : OF */\n\n/*! Production::    unreserved_keyword_normal : OFF */\n\n/*! Production::    unreserved_keyword_normal : OFFSET */\n\n/*! Production::    unreserved_keyword_normal : OJ */\n\n/*! Production::    unreserved_keyword_normal : OLD */\n\n/*! Production::    unreserved_keyword_normal : OLD_KEY */\n\n/*! Production::    unreserved_keyword_normal : OLD_PASSWORD */\n\n/*! Production::    unreserved_keyword_normal : OLTP */\n\n/*! Production::    unreserved_keyword_normal : ONE */\n\n/*! Production::    unreserved_keyword_normal : ONE_SHOT */\n\n/*! Production::    unreserved_keyword_normal : ONLY */\n\n/*! Production::    unreserved_keyword_normal : OPEN */\n\n/*! Production::    unreserved_keyword_normal : OPTIMIZE */\n\n/*! Production::    unreserved_keyword_normal : OPTIONALLY */\n\n/*! Production::    unreserved_keyword_normal : OPTIONS */\n\n/*! Production::    unreserved_keyword_normal : ORA_ROWSCN */\n\n/*! Production::    unreserved_keyword_normal : ORIG_DEFAULT */\n\n/*! Production::    unreserved_keyword_normal : OUT */\n\n/*! Production::    unreserved_keyword_normal : OUTER */\n\n/*! Production::    unreserved_keyword_normal : OUTFILE */\n\n/*! Production::    unreserved_keyword_normal : OUTLINE */\n\n/*! Production::    unreserved_keyword_normal : OVER */\n\n/*! Production::    unreserved_keyword_normal : OWNER */\n\n/*! Production::    unreserved_keyword_normal : P */\n\n/*! Production::    unreserved_keyword_normal : PACK_KEYS */\n\n/*! Production::    unreserved_keyword_normal : PAGE */\n\n/*! Production::    unreserved_keyword_normal : PARALLEL */\n\n/*! Production::    unreserved_keyword_normal : PARAMETERS */\n\n/*! Production::    unreserved_keyword_normal : PARAM_ASSIGN_OPERATOR */\n\n/*! Production::    unreserved_keyword_normal : PARSER */\n\n/*! Production::    unreserved_keyword_normal : PARTIAL */\n\n/*! Production::    unreserved_keyword_normal : PARTITION */\n\n/*! Production::    unreserved_keyword_normal : PARTITIONING */\n\n/*! Production::    unreserved_keyword_normal : PARTITIONS */\n\n/*! Production::    unreserved_keyword_normal : PARTITION_ID */\n\n/*! Production::    unreserved_keyword_normal : PASSWORD */\n\n/*! Production::    unreserved_keyword_normal : PASSWORD_LOCK_TIME */\n```\n\n----------------------------------------\n\nTITLE: Translation Utility Script Usage\nDESCRIPTION: Command to run the translation utility script for generating translations for specified modules and languages\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/i18n/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython ./translate_util.py --lang zh_CN --modules app,core,model,rag,serve,storage,util\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Optional Production Rules\nDESCRIPTION: Grammar production rules defining optional syntax components in SQL statements. Each rule specifies alternative forms that a particular optional syntax element can take, using epsilon to indicate the empty/optional case.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_113\n\nLANGUAGE: grammar\nCODE:\n```\n/*! Production::    opt_lengthOneDimension : lengthOneDimension */\n\n/*! Production::    opt_lengthTwoDimension : %epsilon */\n\n/*! Production::    opt_lengthTwoDimension : lengthTwoDimension */\n\n/*! Production::    opt_lengthTwoOptionalDimension : %epsilon */\n\n/*! Production::    opt_lengthTwoOptionalDimension : lengthTwoOptionalDimension */\n\n/*! Production::    opt_length_semantics_i : %epsilon */\n\n/*! Production::    opt_length_semantics_i : BYTE */\n\n/*! Production::    opt_length_semantics_i : CHAR */\n\n/*! Production::    opt_length_semantics_i : CHARACTER */\n\n/*! Production::    opt_levelsInWeightString : %epsilon */\n\n/*! Production::    opt_levelsInWeightString : levelsInWeightString */\n\n/*! Production::    opt_limit : %epsilon */\n\n/*! Production::    opt_limit : LIMIT INTNUM \",\" INTNUM */\n\n/*! Production::    opt_limit : LIMIT INTNUM */\n\n/*! Production::    opt_limit : LIMIT expr */\n\n/*! Production::    opt_limitClause : %epsilon */\n\n/*! Production::    opt_limitClause : limitClause */\n\n/*! Production::    opt_limit_clause : %epsilon */\n\n/*! Production::    opt_limit_clause : limit_clause */\n\n/*! Production::    opt_linearKeyAlgType : %epsilon */\n\n/*! Production::    opt_linearKeyAlgType : ALGORITHM EQUAL_SYMBOL STRING_LITERAL */\n\n/*! Production::    opt_list_partition_list : \"(\" list_partition_list \")\" */\n\n/*! Production::    opt_list_subpartition_list : \"(\" list_subpartition_list \")\" */\n\n/*! Production::    opt_loadIgnore : %epsilon */\n\n/*! Production::    opt_loadIgnore : IGNORE decimalLiteral linesFormat */\n\n/*! Production::    opt_loadPriority : %epsilon */\n\n/*! Production::    opt_loadPriority : CONCURRENT */\n\n/*! Production::    opt_loadPriority : LOW_PRIORITY */\n\n/*! Production::    opt_load_charset : %epsilon */\n\n/*! Production::    opt_load_charset : CHARACTER SET charset_name_or_default */\n\n/*! Production::    opt_load_data_extended_option_list : %epsilon */\n\n/*! Production::    opt_load_data_extended_option_list : load_data_extended_option_list */\n\n/*! Production::    opt_load_fieldFormat : %epsilon */\n\n/*! Production::    opt_load_fieldFormat : fieldsFormat selectFieldsIntos */\n\n/*! Production::    opt_load_ignore_rows : %epsilon */\n\n/*! Production::    opt_load_ignore_rows : GENERATED INTNUM lines_or_rows */\n\n/*! Production::    opt_load_ignore_rows : IGNORE INTNUM lines_or_rows */\n\n/*! Production::    opt_load_lines : %epsilon */\n\n/*! Production::    opt_load_lines : LINES selectLinesIntos */\n\n/*! Production::    opt_load_local : %epsilon */\n\n/*! Production::    opt_load_local : LOCAL */\n\n/*! Production::    opt_load_local : REMOTE_OSS */\n\n/*! Production::    opt_load_set_spec : %epsilon */\n\n/*! Production::    opt_load_set_spec : SET load_set_list */\n\n/*! Production::    opt_loadedTableFormat : %epsilon */\n\n/*! Production::    opt_loadedTableFormat : opt_tableConstraintFormat LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_loadedTablePartition : %epsilon */\n\n/*! Production::    opt_loadedTablePartition : PARTITION LR_BRACKET ALL RR_BRACKET */\n\n/*! Production::    opt_loadedTablePartition : PARTITION LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_loadxmlrows : %epsilon */\n\n/*! Production::    opt_loadxmlrows : ROWS IDENTIFIED BY LESS_SYMBOL STRING_LITERAL GREATER_SYMBOL */\n\n/*! Production::    opt_local : %epsilon */\n\n/*! Production::    opt_local : LOCAL */\n\n/*! Production::    opt_lockClause : %epsilon */\n\n/*! Production::    opt_lockClause : lockClause */\n\n/*! Production::    opt_match_option : %epsilon */\n\n/*! Production::    opt_match_option : MATCH match_action */\n\n/*! Production::    opt_materialized : %epsilon */\n\n/*! Production::    opt_materialized : MATERIALIZED */\n\n/*! Production::    opt_merge_update_delete : %epsilon */\n\n/*! Production::    opt_merge_update_delete : DELETE WHERE expr */\n\n/*! Production::    opt_mode_flag : %epsilon */\n\n/*! Production::    opt_mode_flag : IN BOOLEAN MODE */\n\n/*! Production::    opt_mode_flag : IN NATURAL LANGUAGE MODE */\n\n/*! Production::    opt_multiset_modifier : %epsilon */\n\n/*! Production::    opt_multiset_modifier : ALL */\n\n/*! Production::    opt_multiset_modifier : DISTINCT */\n\n/*! Production::    opt_named_windows : %epsilon */\n\n/*! Production::    opt_named_windows : WINDOW named_windows */\n\n/*! Production::    opt_namespace : %epsilon */\n\n/*! Production::    opt_namespace : namespace_expr */\n\n/*! Production::    opt_nodeGroupAssign : %epsilon */\n\n/*! Production::    opt_nodeGroupAssign : NODEGROUP EQUAL_SYMBOL uid */\n\n/*! Production::    opt_nodeGroupAssign : NODEGROUP uid */\n\n/*! Production::    opt_nologging : %epsilon */\n\n/*! Production::    opt_nologging : NOLOGGING */\n\n/*! Production::    opt_normal_into_clause : %epsilon */\n\n/*! Production::    opt_normal_into_clause : normal_into_clause */\n\n/*! Production::    opt_not_identified : %epsilon */\n\n/*! Production::    opt_not_identified : NOT IDENTIFIED */\n\n/*! Production::    opt_not_null : %epsilon */\n\n/*! Production::    opt_not_null : NOT NULLX */\n\n/*! Production::    opt_null_pos : %epsilon */\n\n/*! Production::    opt_null_pos : NULLS FIRST */\n\n/*! Production::    opt_null_pos : NULLS LAST */\n\n/*! Production::    opt_number_precision : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_number_precision : \"(\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    opt_number_precision : %epsilon */\n\n/*! Production::    opt_number_precision : number_precision */\n\n/*! Production::    opt_obj_access_ref : \".\" \"*\" */\n\n/*! Production::    opt_obj_access_ref : \".\" obj_access_ref */\n\n/*! Production::    opt_obj_access_ref : %epsilon */\n\n/*! Production::    opt_obj_access_ref_normal : \".\" obj_access_ref_normal */\n\n/*! Production::    opt_obj_access_ref_normal : %epsilon */\n\n/*! Production::    opt_of : %epsilon */\n\n/*! Production::    opt_of : OF */\n\n/*! Production::    opt_oid_clause : %epsilon */\n\n/*! Production::    opt_oid_clause : OID STRING */\n\n/*! Production::    opt_on_duplicate_key_clause : %epsilon */\n\n/*! Production::    opt_on_duplicate_key_clause : ON DUPLICATE KEY UPDATE update_asgn_list */\n\n/*! Production::    opt_on_empty_or_error : on_empty */\n\n/*! Production::    opt_on_empty_or_error : on_empty on_error */\n\n/*! Production::    opt_on_empty_or_error : on_error */\n\n/*! Production::    opt_orReplace : %epsilon */\n\n/*! Production::    opt_orReplace : OR REPLACE */\n\n/*! Production::    opt_orderByClause : %epsilon */\n\n/*! Production::    opt_orderByClause : orderByClause */\n\n/*! Production::    opt_order_by : %epsilon */\n\n/*! Production::    opt_order_by : ORDER BY orderByExprList */\n\n/*! Production::    opt_order_by : order_by */\n\n/*! Production::    opt_outer : %epsilon */\n\n/*! Production::    opt_outer : OUTER */\n\n/*! Production::    opt_outline_target : %epsilon */\n\n/*! Production::    opt_outline_target : TO explainable_stmt */\n\n/*! Production::    opt_ownerStatement : %epsilon */\n\n/*! Production::    opt_ownerStatement : ownerStatement */\n\n/*! Production::    opt_part_id : %epsilon */\n\n/*! Production::    opt_part_id : ID INTNUM */\n\n/*! Production::    opt_partitionCount : %epsilon */\n\n/*! Production::    opt_partitionCount : PARTITIONS decimalLiteral */\n\n/*! Production::    opt_partitionDefinitions : %epsilon */\n\n/*! Production::    opt_partitionDefinitions : partitionDefinitions */\n\n/*! Production::    opt_partitionOptions : %epsilon */\n\n/*! Production::    opt_partitionOptions : partitionOptions */\n\n/*! Production::    opt_partition_by : %epsilon */\n\n/*! Production::    opt_partition_by : PARTITION BY expr_list */\n\n/*! Production::    opt_partition_option : %epsilon */\n\n/*! Production::    opt_partition_option : auto_partition_option */\n\n/*! Production::    opt_partition_option : opt_column_partition_option */\n\n/*! Production::    opt_partition_option : partition_option */\n\n/*! Production::    opt_partition_range_or_list : opt_list_partition_list */\n\n/*! Production::    opt_partition_range_or_list : opt_range_partition_list */\n\n/*! Production::    opt_partitions : %epsilon */\n\n/*! Production::    opt_partitions : PARTITIONS INTNUM */\n\n/*! Production::    opt_partitonValueList : %epsilon */\n\n/*! Production::    opt_partitonValueList : partitonValueList */\n\n/*! Production::    opt_physical_attributes_options : %epsilon */\n\n/*! Production::    opt_physical_attributes_options : physical_attributes_option_list */\n\n/*! Production::    opt_pipelined : %epsilon */\n\n/*! Production::    opt_pipelined : PIPELINED */\n\n/*! Production::    opt_position_column : %epsilon */\n\n/*! Production::    opt_position_column : AFTER column_name */\n\n/*! Production::    opt_position_column : BEFORE column_name */\n\n/*! Production::    opt_position_column : FIRST */\n\n/*! Production::    opt_preview : %epsilon */\n\n/*! Production::    opt_preview : PREVIEW */\n\n/*! Production::    opt_primary : %epsilon */\n\n/*! Production::    opt_primary : PRIMARY */\n\n/*! Production::    opt_primary_rootservice_list : %epsilon */\n\n/*! Production::    opt_primary_rootservice_list : PRIMARY_ROOTSERVICE_LIST STRING_VALUE */\n\n/*! Production::    opt_privilege : %epsilon */\n\n/*! Production::    opt_privilege : PRIVILEGES */\n\n/*! Production::    opt_procDirection : %epsilon */\n\n/*! Production::    opt_procDirection : IN */\n\n/*! Production::    opt_procDirection : INOUT */\n\n/*! Production::    opt_procDirection : OUT */\n\n/*! Production::    opt_proc_clause : %epsilon */\n\n/*! Production::    opt_proc_clause : proc_clause_list */\n\n/*! Production::    opt_procedureParameters : %epsilon */\n\n/*! Production::    opt_procedureParameters : procedureParameters */\n\n/*! Production::    opt_procedureSqlStatements : %epsilon */\n\n/*! Production::    opt_procedureSqlStatements : procedureSqlStatements */\n\n/*! Production::    opt_profile : %epsilon */\n\n/*! Production::    opt_profile : user_profile */\n\n/*! Production::    opt_public : %epsilon */\n\n/*! Production::    opt_public : PUBLIC */\n\n/*! Production::    opt_purge : %epsilon */\n\n/*! Production::    opt_purge : PURGE */\n```\n\n----------------------------------------\n\nTITLE: Configuring Zhipu LLM Parameters using MDX Component\nDESCRIPTION: React/MDX component configuration object that defines all available parameters for Zhipu LLM integration, including model settings, API credentials, and deployment options. The configuration specifies required and optional parameters with their types, descriptions, and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/zhipu_zhipudeploymodelparameters_c51e31.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ZhipuDeployModelParameters\",\n  \"description\": \"Zhipu proxy LLM configuration.\",\n  \"documentationUrl\": \"https://open.bigmodel.cn/dev/api/normal-model/glm-4#overview\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/zhipu\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the Zhipu API.\",\n      \"defaultValue\": \"${env:ZHIPUAI_BASE_URL:-https://open.bigmodel.cn/api/paas/v4}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the Zhipu API.\",\n      \"defaultValue\": \"${env:ZHIPUAI_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Print Data Example\nDESCRIPTION: The expected console output when running the input_operator_print_data.py script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Configuring SiliconFlow Proxy LLM Parameters in React/JSX\nDESCRIPTION: React component implementation using ConfigDetail to display SiliconFlow LLM configuration parameters. Includes comprehensive model settings, API configuration, and deployment options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/siliconflow_siliconflowdeploymodelparameters_abe22f.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"SiliconFlowDeployModelParameters\",\n  \"description\": \"SiliconFlow proxy LLM configuration.\",\n  \"documentationUrl\": \"https://docs.siliconflow.cn/en/api-reference/chat-completions/chat-completions\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/siliconflow\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the SiliconFlow API.\",\n      \"defaultValue\": \"${env:SILICONFLOW_API_BASE:-https://api.siliconflow.cn/v1}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the SiliconFlow API.\",\n      \"defaultValue\": \"${env:SILICONFLOW_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining Select Statement Variations Grammar Productions in SQL\nDESCRIPTION: These productions define various forms of select statements, including those with hierarchical queries, hints, and parentheses. They also cover combinations with 'ORDER BY' and 'FETCH NEXT' clauses, providing flexibility in query construction.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_123\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_with_hierarchical_query : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where start_with connect_by opt_groupby opt_having */\n\n/*! Production::    select_with_opt_hint : SELECT */\n\n/*! Production::    select_with_opt_hint : SELECT_HINT_BEGIN hint_list_with_end */\n\n/*! Production::    select_with_parens : \"(\" select_no_parens \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_no_parens fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_no_parens order_by \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_no_parens order_by fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens : \"(\" select_with_parens \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select order_by \")\" */\n\n/*! Production::    select_with_parens : \"(\" with_select order_by fetch_next_clause \")\" */\n\n/*! Production::    select_with_parens_with_order_and_limit : select_with_parens opt_order_by limit_clause */\n\n/*! Production::    select_with_parens_with_order_and_limit : select_with_parens order_by */\n```\n\n----------------------------------------\n\nTITLE: Stream Chat Flow Using Python Client\nDESCRIPTION: Example of using the Python client to make a streaming chat request to a flow. This demonstrates how to use the dbgpt_client library to interact with flows.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\n\nDBGPT_API_KEY = \"dbgpt\"\nFLOW_ID=\"{YOUR_FLOW_ID}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nasync for data in client.chat_stream(\n    messages=\"Introduce AWEL\", \n    model=\"chatgpt_proxyllm\", \n    chat_mode=\"chat_flow\", \n    chat_param=FLOW_ID\n):\n    print(data)\n```\n\n----------------------------------------\n\nTITLE: Defining Thread Types in SQL\nDESCRIPTION: These productions define thread types used in SQL, specifically IO_THREAD and SQL_THREAD, and how they can be combined.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_173\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    threadType : IO_THREAD */\n\n/*! Production::    threadType : SQL_THREAD */\n\n/*! Production::    threadTypes : threadType */\n\n/*! Production::    threadTypes : threadType COMMA threadTypes */\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the project from local source with default dependencies.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/CONTRIBUTING.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[default]\"\n```\n\n----------------------------------------\n\nTITLE: Defining PL/SQL-Related Productions\nDESCRIPTION: This snippet showcases production rules for PL/SQL-specific constructs, including blocks, data types, and DDL statements specific to PL/SQL objects like packages and triggers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_110\n\nLANGUAGE: PL/SQL\nCODE:\n```\n/*! Production::    pl_block : opt_declare_section execute_section END_KEY opt_tail_name */\n\n/*! Production::    pl_body : declare_section execute_section END_KEY opt_tail_name */\n\n/*! Production::    pl_body : execute_section END_KEY opt_tail_name */\n\n/*! Production::    pl_common_scalar_data_type : BOOL */\n\n/*! Production::    pl_common_scalar_data_type : BOOLEAN */\n\n/*! Production::    pl_common_scalar_data_type : pl_int_type_i */\n\n/*! Production::    pl_ddl_stmt : alter_function_stmt */\n\n/*! Production::    pl_ddl_stmt : alter_package_stmt */\n\n/*! Production::    pl_ddl_stmt : alter_procedure_stmt */\n\n/*! Production::    pl_ddl_stmt : create_function_stmt */\n\n/*! Production::    pl_ddl_stmt : create_package_body_stmt */\n\n/*! Production::    pl_ddl_stmt : create_package_stmt */\n\n/*! Production::    pl_ddl_stmt : create_procedure_stmt */\n\n/*! Production::    pl_ddl_stmt : create_trigger_stmt */\n\n/*! Production::    pl_ddl_stmt : create_type_body_stmt */\n\n/*! Production::    pl_ddl_stmt : create_type_stmt */\n\n/*! Production::    pl_ddl_stmt : drop_function_stmt */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Operations\nDESCRIPTION: These production rules define optional clauses for various SQL operations, including FORCE and VALIDATE options, FROM clauses, and database-related clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_118\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_for_user : %epsilon */\n\n/*! Production::    opt_for_user : FOR user opt_host_name */\n\n/*! Production::    opt_force : %epsilon */\n\n/*! Production::    opt_force : FORCE */\n\n/*! Production::    opt_force_or_validate : FORCE */\n\n/*! Production::    opt_force_or_validate : VALIDATE */\n\n/*! Production::    opt_force_purge : %epsilon */\n\n/*! Production::    opt_force_purge : FORCE */\n\n/*! Production::    opt_force_purge : PURGE */\n\n/*! Production::    opt_fromClause : %epsilon */\n\n/*! Production::    opt_fromClause : fromClause */\n\n/*! Production::    opt_from_first_or_last : %epsilon */\n\n/*! Production::    opt_from_first_or_last : FROM first_or_last */\n\n/*! Production::    opt_from_or_in_database_clause : %epsilon */\n\n/*! Production::    opt_from_or_in_database_clause : from_or_in database_factor */\n\n/*! Production::    opt_from_or_in_database_clause : from_or_in relation_name */\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Custom Input Source Example\nDESCRIPTION: The expected console output when running the my_input_source.py script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Running DB-GPT Webserver with DeepSeek Proxy\nDESCRIPTION: Commands to start the DB-GPT webserver using the DeepSeek proxy configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuv run dbgpt start webserver --config configs/dbgpt-proxy-deepseek.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-proxy-deepseek.toml\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER DATABASE Production in MySQL\nDESCRIPTION: This production rule specifies the syntax for the ALTER DATABASE statement, allowing for optional database name and SET options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_database_stmt : ALTER database_key opt_database_name opt_set database_option_list */\n```\n\n----------------------------------------\n\nTITLE: Getting Knowledge Space with Python Client\nDESCRIPTION: Example of retrieving a specific knowledge space using the Python client library. Shows how to fetch space details by ID.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.knowledge import get_space\n\nDBGPT_API_KEY = \"dbgpt\"\nspace_id = \"{your_space_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await get_space(client=client, space_id=space_id)\n```\n\n----------------------------------------\n\nTITLE: Utility Statement Productions\nDESCRIPTION: Grammar rules for various utility statements including diagnostics, describe, help, signal, and use statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_226\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    utilityStatement : diagnosticsStatement */\n\n/*! Production::    utilityStatement : fullDescribeStatement */\n\n/*! Production::    utilityStatement : helpStatement */\n\n/*! Production::    utilityStatement : resignalStatement */\n\n/*! Production::    utilityStatement : signalStatement */\n\n/*! Production::    utilityStatement : simpleDescribeStatement */\n\n/*! Production::    utilityStatement : useStatement */\n```\n\n----------------------------------------\n\nTITLE: Commented YouTube Video Embed in Markdown\nDESCRIPTION: HTML iframe code for embedding a YouTube video, currently commented out in the document.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/tutorials/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- <iframe width=\"800\" height=\"480\" src=\"https://www.youtube.com/embed/f5_g0OObZBQ\" frameborder=\"0\" allow=\"encrypted-media\" allowfullscreen></iframe> -->\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Expression Production Rules\nDESCRIPTION: This snippet defines production rules for various types of SQL expressions, including boolean expressions, compound expressions, and expressions with aliases.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    expr : \"(\" expr \")\" */\n\n/*! Production::    expr : %epsilon */\n\n/*! Production::    expr : NOT expr */\n\n/*! Production::    expr : USER_VARIABLE SET_VAR expr */\n\n/*! Production::    expr : USER_VARIABLE set_var_op bit_expr */\n\n/*! Production::    expr : bit_expr */\n\n/*! Production::    expr : bool_pri */\n\n/*! Production::    expr : bool_pri IS BOOL_VALUE */\n\n/*! Production::    expr : bool_pri IS UNKNOWN */\n\n/*! Production::    expr : bool_pri IS not BOOL_VALUE */\n\n/*! Production::    expr : bool_pri IS not UNKNOWN */\n\n/*! Production::    expr : expr AND expr */\n\n/*! Production::    expr : expr AND_OP expr */\n\n/*! Production::    expr : expr OR expr */\n\n/*! Production::    expr : expr OR_OP expr */\n\n/*! Production::    expr : expr XOR expr */\n\n/*! Production::    expr_as_list : expr_as_list \",\" expr_with_opt_alias */\n\n/*! Production::    expr_as_list : expr_with_opt_alias */\n\n/*! Production::    expr_const : GLOBAL_ALIAS \".\" column_name */\n\n/*! Production::    expr_const : QUESTIONMARK */\n\n/*! Production::    expr_const : SESSION_ALIAS \".\" column_name */\n\n/*! Production::    expr_const : SYSTEM_VARIABLE */\n\n/*! Production::    expr_const : global_or_session_alias \".\" column_name */\n\n/*! Production::    expr_const : literal */\n\n/*! Production::    expr_list : bit_expr */\n\n/*! Production::    expr_list : expr */\n\n/*! Production::    expr_list : expr_list \",\" bit_expr */\n\n/*! Production::    expr_list : expr_list \",\" expr */\n\n/*! Production::    expr_or_default : DEFAULT */\n\n/*! Production::    expr_or_default : bit_expr */\n\n/*! Production::    expr_or_default : expr */\n\n/*! Production::    expr_with_opt_alias : expr */\n\n/*! Production::    expr_with_opt_alias : expr opt_as STRING_VALUE */\n\n/*! Production::    expr_with_opt_alias : expr opt_as column_label */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Memory and Diagnostics\nDESCRIPTION: Defines syntax for memory-related diagnostic statements, including dumping memory chunks, entities, and setting leak detection options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_58\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dump_memory_stmt : DUMP CHUNK ALL */\n\n/*! Production::    dump_memory_stmt : DUMP CHUNK P_CHUNK COMP_EQ STRING_VALUE */\n\n/*! Production::    dump_memory_stmt : DUMP CHUNK TENANT_ID COMP_EQ INTNUM \",\" CTX_ID COMP_EQ relation_name_or_string */\n\n/*! Production::    dump_memory_stmt : DUMP ENTITY ALL */\n\n/*! Production::    dump_memory_stmt : DUMP ENTITY P_ENTITY COMP_EQ STRING_VALUE \",\" SLOT_IDX COMP_EQ INTNUM */\n\n/*! Production::    dump_memory_stmt : DUMP MEMORY LEAK */\n\n/*! Production::    dump_memory_stmt : SET OPTION LEAK_MOD COMP_EQ STRING_VALUE */\n\n/*! Production::    dump_memory_stmt : SET OPTION LEAK_RATE COMP_EQ INTNUM */\n```\n\n----------------------------------------\n\nTITLE: Expected Output of AWEL Lifecycle Hooks Execution\nDESCRIPTION: This snippet shows the expected console output when running the AWEL lifecycle hooks example. It demonstrates the order of execution for the lifecycle hooks and the task's main functionality.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/advanced_guide/4.1_lifecycle.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nBefore DAG run\nAfter DAG end\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements\nDESCRIPTION: Commands to install development and linting requirements for the project.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/CONTRIBUTING.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements/dev-requirements.txt\npip install -r requirements/lint-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Sequence Option Grammar Productions in SQL\nDESCRIPTION: These productions define various options for sequence objects, including cache size, cycle behavior, increment values, and min/max values. They provide the building blocks for creating and modifying sequence objects in a database.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_124\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sequence_option : CACHE simple_num */\n\n/*! Production::    sequence_option : CYCLE */\n\n/*! Production::    sequence_option : INCREMENT BY simple_num */\n\n/*! Production::    sequence_option : MAXVALUE simple_num */\n\n/*! Production::    sequence_option : MINVALUE simple_num */\n\n/*! Production::    sequence_option : NOCACHE */\n\n/*! Production::    sequence_option : NOCYCLE */\n\n/*! Production::    sequence_option : NOMAXVALUE */\n\n/*! Production::    sequence_option : NOMINVALUE */\n\n/*! Production::    sequence_option : NOORDER */\n\n/*! Production::    sequence_option : ORDER */\n\n/*! Production::    sequence_option : RESTART */\n\n/*! Production::    sequence_option : START WITH simple_num */\n\n/*! Production::    sequence_option_list : sequence_option */\n\n/*! Production::    sequence_option_list : sequence_option_list sequence_option */\n```\n\n----------------------------------------\n\nTITLE: Knowledge Load Command Options\nDESCRIPTION: Detailed options for loading documents into the knowledge base, including space configuration, vector store settings, and document processing parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt knowledge load --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge load [OPTIONS]\n\n  Load your local documents to DB-GPT\n\nOptions:\n  --space_name TEXT         Your knowledge space name  [default: default]\n  --vector_store_type TEXT  Vector store type.  [default: Chroma]\n  --local_doc_path TEXT     Your document directory or document file path.\n                            [default: /Users/magic/workspace/github/eosphoros-\n                            ai/DB-GPT/pilot/datasets]\n  --skip_wrong_doc          Skip wrong document.\n  --overwrite               Overwrite existing document(they has same name).\n  --max_workers INTEGER     The maximum number of threads that can be used to\n                            upload document.\n  --pre_separator TEXT      Preseparator, this separator is used for pre-\n                            splitting before the document is actually split by\n                            the text splitter. Preseparator are not included\n                            in the vectorized text.\n  --separator TEXT          This is the document separator. Currently, only\n                            one separator is supported.\n  --chunk_size INTEGER      Maximum size of chunks to split.\n  --chunk_overlap INTEGER   Overlap in characters between chunks.\n  --help                    Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Database and Schema Production Rules\nDESCRIPTION: Grammar rules defining database and schema related syntax including options, names and properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    databaseOrSchema : DATABASE */\n/*! Production::    databaseOrSchema : SCHEMA */\n/*! Production::    database_option : DATABASE_ID opt_equal_mark INTNUM */\n/*! Production::    database_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n/*! Production::    database_option : REPLICA_NUM opt_equal_mark INTNUM */\n/*! Production::    database_option : default_tablegroup */\n/*! Production::    database_option : opt_default_mark COLLATE opt_equal_mark collation_name */\n/*! Production::    database_option : opt_default_mark charset_key opt_equal_mark charset_name */\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Header for Changelog\nDESCRIPTION: This snippet shows the main header for the changelog file, indicating its purpose.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/changelog/doc.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ChangeLog \n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for REVOKE Statements\nDESCRIPTION: These productions define grammar rules for various forms of REVOKE statements, including revoking all privileges, specific privileges, and system privileges from users or roles.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_173\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    revokeProxy : REVOKE PROXY ON userName FROM userNames */\n\n/*! Production::    revokeStatement : REVOKE ALL opt_PRIVILEGES COMMA GRANT OPTION FROM userNames */\n\n/*! Production::    revokeStatement : REVOKE privelegeClauses ON privilegeObject privilegeLevel FROM userNames */\n\n/*! Production::    revoke_stmt : REVOKE ALL opt_privilege \",\" GRANT OPTION FROM user_list */\n\n/*! Production::    revoke_stmt : REVOKE grant_privileges ON priv_level FROM user_list */\n\n/*! Production::    revoke_stmt : REVOKE obj_privileges ON obj_clause FROM user_list */\n\n/*! Production::    revoke_stmt : REVOKE revoke_system_privilege */\n\n/*! Production::    revoke_system_privilege : ALL PRIVILEGES FROM grantee_clause */\n\n/*! Production::    revoke_system_privilege : role_list FROM grantee_clause */\n\n/*! Production::    revoke_system_privilege : system_privilege_list FROM grantee_clause */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Diagnostics Condition Information\nDESCRIPTION: Defines the various diagnostic condition information names that can be used in MySQL diagnostic statements, such as column names, constraint details, and error information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_49\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    diagnosticsConditionInformationName : COLUMN_NAME */\n\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_CATALOG */\n\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_NAME */\n\n/*! Production::    diagnosticsConditionInformationName : CONSTRAINT_SCHEMA */\n\n/*! Production::    diagnosticsConditionInformationName : CURSOR_NAME */\n\n/*! Production::    diagnosticsConditionInformationName : MESSAGE_TEXT */\n\n/*! Production::    diagnosticsConditionInformationName : MYSQL_ERRNO */\n\n/*! Production::    diagnosticsConditionInformationName : RETURNED_SQLSTATE */\n\n/*! Production::    diagnosticsConditionInformationName : SCHEMA_NAME */\n\n/*! Production::    diagnosticsConditionInformationName : SUBCLASS_ORIGIN */\n\n/*! Production::    diagnosticsConditionInformationName : TABLE_NAME */\n```\n\n----------------------------------------\n\nTITLE: Defining Additional SQL Function Expression Productions\nDESCRIPTION: This snippet continues defining production rules for SQL function expressions, including string manipulation functions, statistical functions, and more complex date/time operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_83\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_expr : POSITION \"(\" bit_expr IN expr \")\" */\n\n/*! Production::    func_expr : QUARTER \"(\" expr \")\" */\n\n/*! Production::    func_expr : SECOND \"(\" expr \")\" */\n\n/*! Production::    func_expr : STD \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV_POP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV_SAMP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : SUBDATE \"(\" date_params \")\" */\n\n/*! Production::    func_expr : SUBDATE \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : SUM \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : TIME \"(\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMP \"(\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMP \"(\" expr \",\" expr \")\" */\n```\n\n----------------------------------------\n\nTITLE: Displaying LLMs Management Interface Image in Markdown\nDESCRIPTION: This snippet shows how to embed an image in Markdown to display the LLMs management interface in DB-GPT version 0.6. It uses HTML within Markdown for centered alignment and specific width.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/llms.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n  <img src={'/img/app/llms_v0.6.jpg'} width=\"800px\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - DB-GPT Terminology Definitions\nDESCRIPTION: A markdown table defining key terminology used in the DB-GPT framework, including concepts like Text2SQL, KBQA, GBI, LLMOps, and AWEL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| terminology          | Description                                                   |\n|----------------------|---------------------------------------------------------------|\n| <center> `DB-GPT`       </center>| DataBase Generative Pre-trained Transformer, an open source framework around databases and large language models |\n|<center> `Data App` </center> | an intelligent Data application built on DB-GPT. |\n| <center> `Text2SQL/NL2SQL`  </center>  | Text to SQL uses large language model capabilities to generate SQL statements based on natural language, or provide explanations based on SQL statements |\n| <center>`KBQA`   </center>  | Knowledge-Based Q&A system |\n| <center>`GBI`            </center>  | Generative Business Intelligence, based on large language models and data analysis, provides business intelligence analysis and decision-making through dialogue |\n| <center>`LLMOps`   </center>  | A large language model operation framework that provides a standard end-to-end workflow for training, tuning, deploying, and monitoring LLM to accelerate application deployment of generated AI models |\n|<center> `Embedding`  </center>   | Methods to convert text, audio, video and other materials into vectors |\n|<center> `RAG`   </center>| Retrieval Augmented Generation |\n|<center> `AWEL` </center> | Agentic Workflow Expression Language, intelligent Workflow Expression Language |\n|<center> `AWEL Flow` </center> | workflow orchestration using the intelligent workflow Expression Language |\n|<center> `SMMF` </center> | a service-oriented multi-model management framework.\n```\n\n----------------------------------------\n\nTITLE: Defining Set-Related Grammar Productions in SQL\nDESCRIPTION: These productions define various set-related operations, including setting character sets, comments, and passwords. They also cover set expressions and options for set operations, providing a comprehensive set of set-related functionalities in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_127\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_charset_stmt : SET charset_key charset_name_or_default */\n\n/*! Production::    set_comment_stmt : COMMENT ON TABLE normal_relation_factor IS STRING_VALUE */\n\n/*! Production::    set_expr_or_default : BINARY */\n\n/*! Production::    set_expr_or_default : DEFAULT */\n\n/*! Production::    set_expr_or_default : ON */\n\n/*! Production::    set_expr_or_default : bit_expr */\n\n/*! Production::    set_expr_or_default : expr */\n\n/*! Production::    set_expression_option : %epsilon */\n\n/*! Production::    set_expression_option : ALL */\n\n/*! Production::    set_expression_option : DISTINCT */\n\n/*! Production::    set_expression_option : UNIQUE */\n\n/*! Production::    set_names_stmt : SET NAMES charset_name_or_default opt_collation */\n\n/*! Production::    set_password_stmt : ALTER USER user_with_host_name IDENTIFIED BY VALUES STRING_VALUE */\n\n/*! Production::    set_password_stmt : ALTER USER user_with_host_name IDENTIFIED BY password */\n\n/*! Production::    set_password_stmt : ALTER USER user_with_host_name WITH resource_option_list */\n\n/*! Production::    set_password_stmt : ALTER USER user_with_host_name require_specification */\n\n/*! Production::    set_password_stmt : SET PASSWORD COMP_EQ PASSWORD \"(\" password \")\" */\n\n/*! Production::    set_password_stmt : SET PASSWORD COMP_EQ STRING_VALUE */\n\n/*! Production::    set_password_stmt : SET PASSWORD FOR user opt_host_name COMP_EQ PASSWORD \"(\" password \")\" */\n```\n\n----------------------------------------\n\nTITLE: Model Chat Command Options\nDESCRIPTION: Options for interacting with models through command line chat interface, including model selection and system prompt configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/cli.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n~ dbgpt model chat --help\nAlready connect 'dbgpt'\nUsage: dbgpt model chat [OPTIONS]\n\n  Interact with your bot from the command line\n\nOptions:\n  --model_name TEXT  The name of model  [required]\n  --system TEXT      System prompt\n  --help             Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: XA Transaction Grammar in SQL\nDESCRIPTION: Grammar production rules for XA transactions in SQL, which enable distributed transactions across multiple resource managers. These rules define syntax for starting, committing, rolling back, and managing XA transactions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_231\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    xaAction : %epsilon */\n\n/*! Production::    xaAction : JOIN */\n\n/*! Production::    xaAction : RESUME */\n\n/*! Production::    xaCommitWork : XA COMMIT xid */\n\n/*! Production::    xaCommitWork : XA COMMIT xid ONE PHASE */\n\n/*! Production::    xaEndTransaction : XA END xid */\n\n/*! Production::    xaEndTransaction : XA END xid SUSPEND */\n\n/*! Production::    xaEndTransaction : XA END xid SUSPEND FOR MIGRATE */\n\n/*! Production::    xaPrepareStatement : XA PREPARE xid */\n\n/*! Production::    xaRecoverWork : XA RECOVER */\n\n/*! Production::    xaRecoverWork : XA RECOVER CONVERT xid */\n\n/*! Production::    xaRollbackWork : XA ROLLBACK xid */\n\n/*! Production::    xaStart : BEGIN */\n\n/*! Production::    xaStart : START */\n\n/*! Production::    xaStartTransaction : XA xaStart xid xaAction */\n\n/*! Production::    xa_begin_stmt : XA BEGI STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLEGROUP and TABLESPACE Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating tablegroups and tablespaces with various options and partitioning.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_49\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_tablegroup_stmt : CREATE TABLEGROUP relation_name opt_tablegroup_option_list opt_tg_partition_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_tablegroup_stmt : create_with_opt_hint TABLEGROUP opt_if_not_exists relation_name opt_tablegroup_option_list opt_tg_partition_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_tablespace_stmt : CREATE TABLESPACE tablespace permanent_tablespace */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_tablespace_stmt : create_with_opt_hint TABLESPACE tablespace permanent_tablespace */\n```\n\n----------------------------------------\n\nTITLE: SQL Expression Productions\nDESCRIPTION: Grammar rules for IN expressions and various forms of expressions in SQL queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_94\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    in_expr : \"(\" expr_list \")\" */\n\n/*! Production::    in_expr : bit_expr */\n\n/*! Production::    in_expr : select_with_parens */\n```\n\n----------------------------------------\n\nTITLE: Delete Datasource Endpoint\nDESCRIPTION: Endpoint for deleting a datasource\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nDELETE /api/v2/serve/datasources\n```\n\n----------------------------------------\n\nTITLE: WITH Clause Grammar Rules in SQL\nDESCRIPTION: Defines the syntax for WITH clauses in SQL, including common table expressions (CTEs). These production rules specify how WITH clauses are structured, supporting both simple and recursive common table expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_221\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    with_clause : WITH RECURSIVE common_table_expr */\n\n/*! Production::    with_clause : WITH RECURSIVE with_list */\n\n/*! Production::    with_clause : WITH with_list */\n\n/*! Production::    with_list : common_table_expr */\n\n/*! Production::    with_list : with_list \",\" common_table_expr */\n\n/*! Production::    with_select : with_clause select_no_parens opt_when */\n\n/*! Production::    with_select : with_clause select_with_parens */\n```\n\n----------------------------------------\n\nTITLE: Upgrading MySQL Database Schema\nDESCRIPTION: Bash command for upgrading the DB-GPT MySQL database schema from v0.6.3 to v0.7.0.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h127.0.0.1 -uroot -p{your_password} < ./assets/schema/upgrade/v0_7_0/upgrade_to_v0.7.0.sql\n```\n\n----------------------------------------\n\nTITLE: Delete Statement Production Rules\nDESCRIPTION: Grammar productions for DELETE statements including multiple table delete operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_107\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    multi_delete_table : FROM relation_with_star_list USING table_references */\n\n/*! Production::    multi_delete_table : relation_with_star_list FROM table_references */\n\n/*! Production::    multipleDeleteStatement : DELETE opt_LOW_PRIORITY opt_QUICK opt_IGNORE FROM tableWithOptStars USING tableSources opt_whereClause */\n\n/*! Production::    multipleDeleteStatement : DELETE opt_LOW_PRIORITY opt_QUICK opt_IGNORE tableWithOptStars FROM tableSources opt_whereClause */\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Cluster with Docker Compose\nDESCRIPTION: Command to start the DB-GPT cluster using Docker Compose, including environment variables for OpenAI API integration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/observability.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=\"{your api key}\" OPENAI_API_BASE=\"https://api.openai.com/v1\" docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Timing Points for SQL Triggers\nDESCRIPTION: These productions define the timing points for SQL triggers, including BEFORE, AFTER, and INSTEAD OF, for both row and statement level triggers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_175\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    timing_point : AFTER EACH ROW */\n\n/*! Production::    timing_point : AFTER STATEMENT */\n\n/*! Production::    timing_point : BEFORE EACH ROW */\n\n/*! Production::    timing_point : BEFORE STATEMENT */\n\n/*! Production::    timing_point : INSTEAD OF EACH ROW */\n\n/*! Production::    timing_point_section : timing_point IS tps_body timing_point */\n\n/*! Production::    timing_point_section_list : timing_point_section */\n\n/*! Production::    timing_point_section_list : timing_point_section_list \",\" timing_point_section */\n```\n\n----------------------------------------\n\nTITLE: SQL DML Statement Rules\nDESCRIPTION: Production rules for Data Manipulation Language (DML) statements including SELECT, INSERT, UPDATE, DELETE etc.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_71\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    dmlStatement : callStatement */\n/*! Production::    dmlStatement : deleteStatement */\n/*! Production::    dmlStatement : doStatement */\n/*! Production::    dmlStatement : handlerStatement */\n/*! Production::    dmlStatement : insertStatement */\n/*! Production::    dmlStatement : loadDataStatement */\n/*! Production::    dmlStatement : loadXmlStatement */\n/*! Production::    dmlStatement : replaceStatement */\n/*! Production::    dmlStatement : selectStatement */\n/*! Production::    dmlStatement : updateStatement */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER SYSTEM Statement Syntax in OceanBase SQL\nDESCRIPTION: This snippet defines multiple grammar productions for the ALTER SYSTEM statement in OceanBase SQL. It covers various system-level operations such as backup management, cache flushing, freeze operations, and configuration changes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR ROOTTABLE opt_tenant_name */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE BACKUPPIECE INTNUM opt_copy_id opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE BACKUPSET INTNUM opt_copy_id opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE OBSOLETE BACKUP opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DISABLE SQL THROTTLE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DROP DELETE BACKUP policy_name opt_backup_tenant_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DROP REPLICA partition_id_desc ip_port opt_create_timestamp opt_zone_desc opt_force */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM DROP TABLES IN SESSION INTNUM */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ENABLE SQL THROTTLE opt_sql_throttle_for_priority opt_sql_throttle_using_cond */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH DAG WARNINGS */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH ILOGCACHE opt_file_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH KVCACHE opt_tenant_name opt_cache_name */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH SQL cache_type opt_tenant_list flush_scope */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH cache_type CACHE opt_namespace opt_sql_id opt_databases opt_tenant_list flush_scope */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM FLUSH cache_type CACHE opt_tenant_list flush_scope */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MAJOR FREEZE opt_ignore_server_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MAJOR FREEZE opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MIGRATE UNIT opt_equal_mark INTNUM DESTINATION opt_equal_mark STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MINOR FREEZE opt_tenant_list_or_ls_or_tablet_id opt_server_list opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM MINOR FREEZE opt_tenant_list_or_partition_id_desc opt_server_list opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM NOARCHIVELOG opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RECYCLE REPLICA opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH IO CALIBRATION opt_storage_name opt_calibration_list opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH MEMORY STAT opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH SCHEMA opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH TABLES IN SESSION INTNUM */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REFRESH TIME_ZONE_INFO */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD GTS */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD SERVER */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD UNIT */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RELOAD ZONE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REMOVE ARBITRATION SERVICE STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REMOVE BALANCE TASK opt_tenant_list opt_zone_list opt_balance_task_type */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REPLACE ARBITRATION SERVICE STRING_VALUE WITH STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REPORT REPLICA opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RESTORE relation_name opt_backup_dest opt_restore_until WITH STRING_VALUE opt_description opt_preview */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RESUME BACKUP */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RUN JOB STRING_VALUE opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RUN UPGRADE JOB STRING_VALUE opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET DISK VALID ip_port */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET NETWORK BANDWIDTH REGION relation_name_or_string TO relation_name_or_string conf_const */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET alter_system_set_clause_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET_TP alter_system_settp_actions */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET_TP alter_system_settp_actions opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM START BACKUP ARCHIVELOG */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM START MERGE zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM STOP BACKUP ARCHIVELOG */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM STOP UPGRADE JOB */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SUSPEND BACKUP */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SWITCH REPLICA ls_role ls_server_or_server_or_zone_or_tenant */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SWITCH REPLICA partition_role partition_id_or_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SWITCH ROOTSERVICE partition_role server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM UPGRADE VIRTUAL SCHEMA */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM VALIDATE BACKUPSET INTNUM opt_copy_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM VALIDATE DATABASE opt_copy_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM WASH MEMORY FRAGMENTATION opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM alter_or_change_or_modify REPLICA partition_id_desc ip_port alter_or_change_or_modify change_actions opt_force */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM alter_or_change_or_modify ZONE relation_name_or_string opt_set add_or_alter_zone_options */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM opt_set alter_system_set_parameter_actions */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM server_action SERVER server_list opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM suspend_or_resume MERGE opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM suspend_or_resume MERGE opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM suspend_or_resume RECOVERY opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM upgrade_action ROLLING UPGRADE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM upgrade_action UPGRADE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM zone_action ZONE relation_name_or_string */\n\n/*! Production::    alter_system_stmt : SET DECRYPTION IDENTIFIED BY string_list */\n\n/*! Production::    alter_system_stmt : SET ENCRYPTION ON IDENTIFIED BY STRING_VALUE ONLY */\n```\n\n----------------------------------------\n\nTITLE: XA Transaction Grammar Rules in SQL\nDESCRIPTION: Defines the syntax for XA transactions in SQL. These production rules specify the structure of distributed transaction statements including XA START, END, PREPARE, COMMIT, ROLLBACK, and RECOVER operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_223\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    xaAction : %epsilon */\n\n/*! Production::    xaAction : JOIN */\n\n/*! Production::    xaAction : RESUME */\n\n/*! Production::    xaCommitWork : XA COMMIT xid */\n\n/*! Production::    xaCommitWork : XA COMMIT xid ONE PHASE */\n\n/*! Production::    xaEndTransaction : XA END xid */\n\n/*! Production::    xaEndTransaction : XA END xid SUSPEND */\n\n/*! Production::    xaEndTransaction : XA END xid SUSPEND FOR MIGRATE */\n\n/*! Production::    xaPrepareStatement : XA PREPARE xid */\n\n/*! Production::    xaRecoverWork : XA RECOVER */\n\n/*! Production::    xaRecoverWork : XA RECOVER CONVERT xid */\n\n/*! Production::    xaRollbackWork : XA ROLLBACK xid */\n\n/*! Production::    xaStart : BEGIN */\n\n/*! Production::    xaStart : START */\n\n/*! Production::    xaStartTransaction : XA xaStart xid xaAction */\n\n/*! Production::    xa_begin_stmt : XA BEGI STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Model Prediction Echo Statement\nDESCRIPTION: A simple echo command that displays the start time of the prediction process. This is part of the predict_sft.sh script used for logging purposes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/fine_tuning_manual/text_to_sql.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\necho \" predict Start time: $(date)\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Grant Statement Syntax\nDESCRIPTION: Defines syntax for grant statements including privilege assignments, proxy grants and user authorizations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_72\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    grantStatement : GRANT privelegeClauses ON privilegeObject privilegeLevel TO userAuthOptions REQUIRE user_tlsOpt opt_withGrantOptions */\n/*! Production::    grantProxy : GRANT PROXY ON userName TO userNames WITH GRANT OPTION */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Factor Productions in SQL Grammar\nDESCRIPTION: These productions define various forms of table factors in SQL queries, including parenthesized references, subqueries, and simple table names.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_168\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    table_factor : \"(\" table_reference \")\" */\n\n/*! Production::    table_factor : \"(\" table_references \")\" */\n\n/*! Production::    table_factor : TABLE \"(\" simple_expr \")\" */\n\n/*! Production::    table_factor : TABLE \"(\" simple_expr \")\" relation_name */\n\n/*! Production::    table_factor : select_with_parens */\n\n/*! Production::    table_factor : select_with_parens use_flashback */\n\n/*! Production::    table_factor : table_subquery */\n\n/*! Production::    table_factor : tbl_name */\n```\n\n----------------------------------------\n\nTITLE: Defining UTC Time Function Production Rules in SQL\nDESCRIPTION: These rules define the syntax for UTC time functions in SQL, including UTC_TIME and UTC_TIMESTAMP with optional precision arguments.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_214\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    utc_time_func : UTC_TIME */\n\n/*! Production::    utc_timestamp_func : UTC_TIMESTAMP \"(\" \")\" */\n\n/*! Production::    utc_timestamp_func : UTC_TIMESTAMP \"(\" INTNUM \")\" */\n\n/*! Production::    utc_timestamp_func : UTC_TIMESTAMP */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for OceanBase\nDESCRIPTION: This code snippet contains a series of SQL grammar production rules for the OceanBase database system. Each rule is defined using the format '/*! Production:: rule_name : rule_definition */', covering various SQL language constructs.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_111\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    now_or_signed_literal : signed_literal_params */\n\n/*! Production::    now_synonyms_func : CURRENT_TIMESTAMP */\n\n/*! Production::    now_synonyms_func : LOCALTIME */\n\n/*! Production::    now_synonyms_func : LOCALTIMESTAMP */\n\n/*! Production::    nullNotnull : opt_NOT NULL_LITERAL */\n\n/*! Production::    nullNotnull : opt_NOT NULL_SPEC_LITERAL */\n\n/*! Production::    null_stmt : NULLX */\n\n/*! Production::    numberOrCount : NUMBER */\n\n/*! Production::    numberOrCount : ROW_COUNT */\n\n/*! Production::    number_literal : DECIMAL_VAL */\n\n/*! Production::    number_literal : INTNUM */\n\n/*! Production::    number_precision : \"(\" \"*\" \")\" */\n\n/*! Production::    number_precision : \"(\" \"*\" \",\" signed_int_num \")\" */\n\n/*! Production::    number_precision : \"(\" signed_int_num \")\" */\n\n/*! Production::    number_precision : \"(\" signed_int_num \",\" signed_int_num \")\" */\n\n/*! Production::    number_type_i : DECIMAL */\n\n/*! Production::    number_type_i : NUMERIC */\n\n/*! Production::    numeric_function : MOD \"(\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    nvarchar_type_i : NVARCHAR */\n\n/*! Production::    nvarchar_type_i : NVARCHAR2 */\n\n/*! Production::    ob_unreserved_keyword : ACCESSIBLE */\n\n/*! Production::    ob_unreserved_keyword : AUTHID */\n\n/*! Production::    ob_unreserved_keyword : BULK */\n\n/*! Production::    ob_unreserved_keyword : BYTE */\n\n/*! Production::    ob_unreserved_keyword : C */\n\n/*! Production::    ob_unreserved_keyword : CALL */\n\n/*! Production::    ob_unreserved_keyword : CHARSET */\n\n/*! Production::    ob_unreserved_keyword : COLLATE */\n\n/*! Production::    ob_unreserved_keyword : COLLATION */\n\n/*! Production::    ob_unreserved_keyword : COLLECT */\n\n/*! Production::    ob_unreserved_keyword : COMPILE */\n\n/*! Production::    ob_unreserved_keyword : CONTINUE */\n\n/*! Production::    ob_unreserved_keyword : CURRENT_USER */\n\n/*! Production::    ob_unreserved_keyword : CUSTOMDATUM */\n\n/*! Production::    ob_unreserved_keyword : DAY */\n\n/*! Production::    ob_unreserved_keyword : DEFINER */\n\n/*! Production::    ob_unreserved_keyword : DETERMINISTIC */\n\n/*! Production::    ob_unreserved_keyword : EDITIONABLE */\n\n/*! Production::    ob_unreserved_keyword : EXECUTE */\n\n/*! Production::    ob_unreserved_keyword : FORCE */\n\n/*! Production::    ob_unreserved_keyword : HASH */\n\n/*! Production::    ob_unreserved_keyword : HOUR */\n\n/*! Production::    ob_unreserved_keyword : IMMEDIATE */\n\n/*! Production::    ob_unreserved_keyword : INDICES */\n\n/*! Production::    ob_unreserved_keyword : INSTEAD */\n\n/*! Production::    ob_unreserved_keyword : INTERFACE */\n\n/*! Production::    ob_unreserved_keyword : JAVA */\n\n/*! Production::    ob_unreserved_keyword : LIMIT */\n\n/*! Production::    ob_unreserved_keyword : LOCAL */\n\n/*! Production::    ob_unreserved_keyword : LONG */\n\n/*! Production::    ob_unreserved_keyword : MINUTE */\n\n/*! Production::    ob_unreserved_keyword : MONTH */\n\n/*! Production::    ob_unreserved_keyword : NAME */\n\n/*! Production::    ob_unreserved_keyword : NO */\n\n/*! Production::    ob_unreserved_keyword : NONEDITIONABLE */\n\n/*! Production::    ob_unreserved_keyword : OBJECT */\n\n/*! Production::    ob_unreserved_keyword : OID */\n\n/*! Production::    ob_unreserved_keyword : ORADATA */\n\n/*! Production::    ob_unreserved_keyword : PARALLEL_ENABLE */\n\n/*! Production::    ob_unreserved_keyword : PIPE */\n\n/*! Production::    ob_unreserved_keyword : PIPELINED */\n\n/*! Production::    ob_unreserved_keyword : REF */\n\n/*! Production::    ob_unreserved_keyword : RELIES_ON */\n\n/*! Production::    ob_unreserved_keyword : REPLACE */\n\n/*! Production::    ob_unreserved_keyword : RESTRICT_REFERENCES */\n\n/*! Production::    ob_unreserved_keyword : RESULT */\n\n/*! Production::    ob_unreserved_keyword : RESULT_CACHE */\n\n/*! Production::    ob_unreserved_keyword : RETURNING */\n\n/*! Production::    ob_unreserved_keyword : RNDS */\n\n/*! Production::    ob_unreserved_keyword : RNPS */\n\n/*! Production::    ob_unreserved_keyword : SAVE */\n\n/*! Production::    ob_unreserved_keyword : SERIALLY_REUSABLE */\n\n/*! Production::    ob_unreserved_keyword : SETTINGS */\n\n/*! Production::    ob_unreserved_keyword : SPECIFICATION */\n\n/*! Production::    ob_unreserved_keyword : SQLDATA */\n\n/*! Production::    ob_unreserved_keyword : TIME */\n\n/*! Production::    ob_unreserved_keyword : TRUST */\n\n/*! Production::    ob_unreserved_keyword : UDF */\n\n/*! Production::    ob_unreserved_keyword : UNDER */\n\n/*! Production::    ob_unreserved_keyword : USING */\n\n/*! Production::    ob_unreserved_keyword : USING_NLS_COMP */\n\n/*! Production::    ob_unreserved_keyword : VALIDATE */\n\n/*! Production::    ob_unreserved_keyword : VALUE */\n\n/*! Production::    ob_unreserved_keyword : VARIABLE */\n\n/*! Production::    ob_unreserved_keyword : VARRAY */\n\n/*! Production::    ob_unreserved_keyword : VARYING */\n\n/*! Production::    ob_unreserved_keyword : WNDS */\n\n/*! Production::    ob_unreserved_keyword : WNPS */\n\n/*! Production::    ob_unreserved_keyword : YEAR */\n\n/*! Production::    ob_unreserved_keyword : ZONE */\n\n/*! Production::    obj_access_ref : access_func_expr opt_func_access_ref */\n\n/*! Production::    obj_access_ref : column_ref \".\" FIRST \"(\" \")\" */\n\n/*! Production::    obj_access_ref : column_ref \".\" LAST \"(\" \")\" */\n\n/*! Production::    obj_access_ref : column_ref opt_obj_access_ref */\n\n/*! Production::    obj_access_ref_normal : access_func_expr opt_func_access_ref_normal */\n\n/*! Production::    obj_access_ref_normal : var_name opt_obj_access_ref_normal */\n\n/*! Production::    obj_clause : \"*\" \".\" \"*\" */\n\n/*! Production::    obj_clause : \"*\" */\n\n/*! Production::    obj_clause : DIRECTORY relation_name */\n\n/*! Production::    obj_clause : relation_name \".\" \"*\" */\n\n/*! Production::    obj_clause : relation_name \".\" relation_name */\n\n/*! Production::    obj_clause : relation_name */\n\n/*! Production::    obj_privileges : ALL opt_privilege */\n\n/*! Production::    obj_privileges : priv_type_list */\n\n/*! Production::    obj_with_col_priv : ALL opt_privilege opt_column_list */\n\n/*! Production::    obj_with_col_priv : priv_type opt_column_list */\n\n/*! Production::    obj_with_col_priv_list : obj_with_col_priv */\n\n/*! Production::    obj_with_col_priv_list : obj_with_col_priv_list \",\" obj_with_col_priv */\n\n/*! Production::    object_or_under : UNDER pl_schema_name */\n\n/*! Production::    object_or_under : is_or_as OBJECT */\n\n/*! Production::    object_type_def : opt_invoke_right object_or_under opt_sqlj_obj_type attr_and_element_spec opt_final_inst_list */\n\n/*! Production::    on_commit_option : %epsilon */\n\n/*! Production::    on_commit_option : ON COMMIT DELETE ROWS */\n\n/*! Production::    on_commit_option : ON COMMIT PRESERVE ROWS */\n\n/*! Production::    on_empty : json_on_response ON EMPTY */\n\n/*! Production::    op_audit_tail_clause : %epsilon */\n\n/*! Production::    op_audit_tail_clause : audit_by_session_access_option */\n\n/*! Production::    op_audit_tail_clause : audit_by_session_access_option audit_whenever_option */\n\n/*! Production::    op_audit_tail_clause : audit_whenever_option */\n\n/*! Production::    open_stmt : OPEN cursor_name for_sql opt_using_clause */\n\n/*! Production::    open_stmt : OPEN pl_access_name opt_sp_cparam_list */\n\n/*! Production::    optEventDo : %epsilon */\n\n/*! Production::    optEventDo : DO routineBody */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : %epsilon */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : algorithmAssign indexLockAndAlgorithmAssign */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : indexLockAssign indexLockAndAlgorithmAssign */\n\n/*! Production::    optShowFromOrInId : %epsilon */\n\n/*! Production::    optShowFromOrInId : fromOrIn uid */\n\n/*! Production::    opt_ALL : %epsilon */\n\n/*! Production::    opt_ALL : ALL */\n\n/*! Production::    opt_AND : %epsilon */\n\n/*! Production::    opt_AND : AND */\n\n/*! Production::    opt_AS : %epsilon */\n\n/*! Production::    opt_AS : AS */\n\n/*! Production::    opt_BINARY : %epsilon */\n\n/*! Production::    opt_BINARY : BINARY */\n\n/*! Production::    opt_COLUMN : %epsilon */\n\n/*! Production::    opt_COLUMN : COLUMN */\n\n/*! Production::    opt_DEFAULT : %epsilon */\n\n/*! Production::    opt_DEFAULT : DEFAULT */\n\n/*! Production::    opt_DISTINCT : %epsilon */\n\n/*! Production::    opt_DISTINCT : DISTINCT */\n\n/*! Production::    opt_EXTENDED : %epsilon */\n\n/*! Production::    opt_EXTENDED : EXTENDED */\n\n/*! Production::    opt_FULL : %epsilon */\n\n/*! Production::    opt_FULL : FULL */\n\n/*! Production::    opt_IGNORE : %epsilon */\n\n/*! Production::    opt_IGNORE : IGNORE */\n\n/*! Production::    opt_INTEGER : %epsilon */\n\n/*! Production::    opt_INTEGER : INTEGER */\n\n/*! Production::    opt_INTO : %epsilon */\n\n/*! Production::    opt_INTO : INTO */\n\n/*! Production::    opt_LINEAR : %epsilon */\n\n/*! Production::    opt_LINEAR : LINEAR */\n\n/*! Production::    opt_LOCAL : %epsilon */\n\n/*! Production::    opt_LOCAL : LOCAL */\n\n/*! Production::    opt_LOW_PRIORITY : %epsilon */\n\n/*! Production::    opt_LOW_PRIORITY : LOW_PRIORITY */\n\n/*! Production::    opt_MINUSMINUS : %epsilon */\n\n/*! Production::    opt_MINUSMINUS : MINUSMINUS */\n\n/*! Production::    opt_NO : %epsilon */\n\n/*! Production::    opt_NO : NO */\n\n/*! Production::    opt_NOT : %epsilon */\n\n/*! Production::    opt_NOT : NOT */\n\n/*! Production::    opt_OPTIONALLY : %epsilon */\n\n/*! Production::    opt_OPTIONALLY : OPTIONALLY */\n\n/*! Production::    opt_OUTER : %epsilon */\n\n/*! Production::    opt_OUTER : OUTER */\n\n/*! Production::    opt_PRECISION : %epsilon */\n\n/*! Production::    opt_PRECISION : PRECISION */\n\n/*! Production::    opt_PRIVILEGES : %epsilon */\n\n/*! Production::    opt_PRIVILEGES : PRIVILEGES */\n\n/*! Production::    opt_QUICK : %epsilon */\n\n/*! Production::    opt_QUICK : QUICK */\n\n/*! Production::    opt_RESTRICT : %epsilon */\n\n/*! Production::    opt_RESTRICT : RESTRICT */\n\n/*! Production::    opt_ROUTINE : %epsilon */\n\n/*! Production::    opt_ROUTINE : ROUTINE */\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Handler with String Response\nDESCRIPTION: Implementation of an HTTP trigger that accepts name and age parameters and returns a formatted string response. Uses Pydantic for request validation and AWEL's DAG for workflow definition.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.2_http_trigger_get.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt._private.pydantic import BaseModel, Field\nfrom dbgpt.core.awel import DAG, HttpTrigger, MapOperator, setup_dev_environment\n\nclass TriggerReqBody(BaseModel):\n    name: str = Field(..., description=\"User name\")\n    age: int = Field(18, description=\"User age\")\n\nwith DAG(\"awel_say_hello\") as dag:\n    trigger_task = HttpTrigger(\n        endpoint=\"/awel_tutorial/say_hello\", \n        methods=\"GET\", \n        request_body=TriggerReqBody,\n        status_code=200\n    )\n    task = MapOperator(\n        map_function=lambda x: f\"Hello, {x.name}! You are {x.age} years old.\"\n    )\n    trigger_task >> task\n\nsetup_dev_environment([dag], port=5555)\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Column Definitions and References\nDESCRIPTION: A collection of SQL grammar production rules defining the syntax for various column-related operations including column definitions, references, attributes, and naming conventions. These rules specify how columns can be defined, referenced, and used in different SQL contexts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_42\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    column_clause : column_name */\n\n/*! Production::    column_clause : extension */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_column_attribute_list opt_position_column */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_generated_keyname AS \"(\" expr \")\" opt_storage_type opt_generated_column_attribute_list opt_position_column */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n\n/*! Production::    column_definition : column_definition_ref opt_visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition : column_definition_ref opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n\n/*! Production::    column_definition_list : column_definition */\n\n/*! Production::    column_definition_list : column_definition_list \",\" column_definition */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref data_type opt_visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref data_type opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref opt_column_attribute_list column_attribute */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype_list : column_definition_opt_datatype */\n\n/*! Production::    column_definition_opt_datatype_list : column_definition_opt_datatype_list \",\" column_definition_opt_datatype */\n\n/*! Production::    column_definition_ref : column_name */\n\n/*! Production::    column_definition_ref : relation_name \".\" column_name */\n\n/*! Production::    column_definition_ref : relation_name \".\" relation_name \".\" column_name */\n\n/*! Production::    column_label : NAME_OB */\n\n/*! Production::    column_label : unreserved_keyword */\n\n/*! Production::    column_list : column */\n\n/*! Production::    column_list : column_definition_ref */\n\n/*! Production::    column_list : column_list \",\" column */\n\n/*! Production::    column_list : column_list \",\" column_definition_ref */\n\n/*! Production::    column_list : column_list \",\" no_param_column_ref */\n\n/*! Production::    column_list : no_param_column_ref */\n\n/*! Production::    column_name : NAME_OB */\n\n/*! Production::    column_name : ROWID */\n\n/*! Production::    column_name : unreserved_keyword */\n\n/*! Production::    column_name_list : column_name */\n\n/*! Production::    column_name_list : column_name_list \",\" column_name */\n\n/*! Production::    column_partition_option : PARTITION BY COLUMN \"(\" vertical_column_name \")\" */\n\n/*! Production::    column_partition_option : PARTITION BY COLUMN \"(\" vertical_column_name \",\" aux_column_list \")\" */\n\n/*! Production::    column_ref : \".\" mysql_reserved_keyword \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : \".\" relation_name \".\" column_name */\n\n/*! Production::    column_ref : \".\" relation_name \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : CASCADE */\n\n/*! Production::    column_ref : FORCE */\n\n/*! Production::    column_ref : column_name */\n\n/*! Production::    column_ref : mysql_reserved_keyword \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : relation_name \".\" \"*\" */\n\n/*! Production::    column_ref : relation_name \".\" column_name */\n\n/*! Production::    column_ref : relation_name \".\" mysql_reserved_keyword \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : relation_name \".\" mysql_reserved_keyword */\n\n/*! Production::    column_ref : relation_name \".\" relation_name \".\" \"*\" */\n\n/*! Production::    column_ref : relation_name \".\" relation_name \".\" column_name */\n\n/*! Production::    column_ref : relation_name \".\" relation_name \".\" mysql_reserved_keyword */\n```\n\n----------------------------------------\n\nTITLE: Transaction Control Rules\nDESCRIPTION: Production rules for transaction control statements like BEGIN and START TRANSACTION.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    beginWork : BEGIN */\n/*! Production::    beginWork : BEGIN WORK */\n/*! Production::    begin_stmt : BEGI opt_hint_value opt_work */\n/*! Production::    begin_stmt : START TRANSACTION opt_with_consistent_snapshot */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Replication Filters and Statements\nDESCRIPTION: Defines SQL grammar production rules for replication filters and statements used in database replication configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_169\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    replicationFilter : REPLICATE_DO_DB EQUAL_SYMBOL LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    replicationFilter : REPLICATE_DO_TABLE EQUAL_SYMBOL LR_BRACKET tables RR_BRACKET */\n\n/*! Production::    replicationFilter : REPLICATE_IGNORE_DB EQUAL_SYMBOL LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    replicationFilter : REPLICATE_IGNORE_TABLE EQUAL_SYMBOL LR_BRACKET tables RR_BRACKET */\n\n/*! Production::    replicationFilter : REPLICATE_REWRITE_DB EQUAL_SYMBOL LR_BRACKET tablePairs RR_BRACKET */\n\n/*! Production::    replicationFilter : REPLICATE_WILD_DO_TABLE EQUAL_SYMBOL LR_BRACKET simpleStrings RR_BRACKET */\n\n/*! Production::    replicationFilter : REPLICATE_WILD_IGNORE_TABLE EQUAL_SYMBOL LR_BRACKET simpleStrings RR_BRACKET */\n\n/*! Production::    replicationFilters : replicationFilter */\n\n/*! Production::    replicationFilters : replicationFilter COMMA replicationFilters */\n\n/*! Production::    replicationStatement : changeMaster */\n\n/*! Production::    replicationStatement : changeReplicationFilter */\n\n/*! Production::    replicationStatement : purgeBinaryLogs */\n\n/*! Production::    replicationStatement : resetMaster */\n\n/*! Production::    replicationStatement : resetSlave */\n\n/*! Production::    replicationStatement : startGroupReplication */\n\n/*! Production::    replicationStatement : startSlave */\n\n/*! Production::    replicationStatement : stopGroupReplication */\n\n/*! Production::    replicationStatement : stopSlave */\n\n/*! Production::    replicationStatement : xaCommitWork */\n\n/*! Production::    replicationStatement : xaEndTransaction */\n\n/*! Production::    replicationStatement : xaPrepareStatement */\n\n/*! Production::    replicationStatement : xaRecoverWork */\n\n/*! Production::    replicationStatement : xaRollbackWork */\n\n/*! Production::    replicationStatement : xaStartTransaction */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Constraints in Grammar Production Rules\nDESCRIPTION: Specifies grammar production rules for table constraints including CHECK, FOREIGN KEY, PRIMARY KEY, and UNIQUE constraints. These rules define the syntax for creating and managing constraints on Oracle database tables.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_170\n\nLANGUAGE: Oracle SQL\nCODE:\n```\n/*! Production::    tableConstraint : opt_tableConstraint CHECK LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    tableConstraint : opt_tableConstraint FOREIGN KEY opt_uid indexColumnNames referenceDefinition */\n\n/*! Production::    tableConstraint : opt_tableConstraint PRIMARY KEY opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    tableConstraint : opt_tableConstraint UNIQUE opt_tableConstraintFormat opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    tableConstraintFormat : INDEX */\n\n/*! Production::    tableConstraintFormat : KEY */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER SYSTEM Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for various system-level operations, including backup, restore, zone management, and system parameter settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_system_set_clause : set_system_parameter_clause */\n\n/*! Production::    alter_system_set_clause_list : alter_system_set_clause */\n\n/*! Production::    alter_system_set_clause_list : alter_system_set_clause_list alter_system_set_clause */\n\n/*! Production::    alter_system_set_parameter_action : BACKUP_BACKUP_DEST COMP_EQ STRING_VALUE opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : CLUSTER_ID COMP_EQ conf_const opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : NAME_OB COMP_EQ conf_const opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : OBCONFIG_URL COMP_EQ STRING_VALUE opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : ROOTSERVICE_LIST COMP_EQ STRING_VALUE opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_action : TABLET_SIZE COMP_EQ conf_const opt_comment opt_config_scope opt_server_or_zone opt_tenant_name */\n\n/*! Production::    alter_system_set_parameter_actions : alter_system_set_parameter_action */\n\n/*! Production::    alter_system_set_parameter_actions : alter_system_set_parameter_actions \",\" alter_system_set_parameter_action */\n\n/*! Production::    alter_system_settp_actions : %epsilon */\n\n/*! Production::    alter_system_settp_actions : alter_system_settp_actions \",\" settp_option */\n\n/*! Production::    alter_system_settp_actions : settp_option */\n\n/*! Production::    alter_system_stmt : ALTER DISKGROUP relation_name ADD DISK STRING_VALUE opt_disk_alias ip_port opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER DISKGROUP relation_name DROP DISK STRING_VALUE ip_port opt_zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ADD ARBITRATION SERVICE STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ADD RESTORE SOURCE STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ADD ZONE relation_name_or_string add_or_alter_zone_options */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ALTER PLAN BASELINE opt_tenant_name opt_sql_id opt_baseline_id SET baseline_asgn_factor */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM ARCHIVELOG opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP BACKUPPIECE opt_equal_mark INTNUM opt_with_active_piece opt_tenant_info opt_backup_backup_dest */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP BACKUPSET ALL opt_tenant_info opt_backup_backup_dest */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP BACKUPSET opt_equal_mark INTNUM opt_tenant_info opt_backup_backup_dest */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP DATABASE opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP DATABASE opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL DATABASE opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL DATABASE opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL opt_backup_tenant_list opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP INCREMENTAL opt_backup_tenant_list opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP opt_backup_tenant_list opt_backup_to PLUS ARCHIVELOG opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP opt_backup_tenant_list opt_backup_to opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BOOTSTRAP opt_cluster_type server_info_list opt_primary_rootservice_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM BOOTSTRAP server_info_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL ALL BACKUP FORCE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL BACKUP BACKUPPIECE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL BACKUP BACKUPSET */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL BACKUP opt_backup_tenant_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL DELETE BACKUP opt_backup_tenant_list opt_description */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL MIGRATE UNIT INTNUM */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL VALIDATE INTNUM opt_copy_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CANCEL cancel_task_type TASK STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CHANGE TENANT change_tenant_name_or_tenant_id */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CHECKPOINT */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CHECKPOINT SLOG opt_tenant_info ip_port */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR LOCATION CACHE opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR MERGE ERROR_P */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR MERGE ERROR_P opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR RESTORE SOURCE */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords (S-T)\nDESCRIPTION: This code snippet defines numerous unreserved SQL keywords starting with letters S and T. These keywords can be used both as SQL syntax elements and as identifiers without requiring quotes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_185\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : SESSIONTIMEZONE */\n\n/*! Production::    unreserved_keyword_normal : SESSION_ALIAS */\n\n/*! Production::    unreserved_keyword_normal : SESSION_USER */\n\n/*! Production::    unreserved_keyword_normal : SET_MASTER_CLUSTER */\n\n/*! Production::    unreserved_keyword_normal : SET_SLAVE_CLUSTER */\n\n/*! Production::    unreserved_keyword_normal : SET_TP */\n\n/*! Production::    unreserved_keyword_normal : SHARE */\n\n/*! Production::    unreserved_keyword_normal : SHOW */\n\n/*! Production::    unreserved_keyword_normal : SHRINK */\n\n/*! Production::    unreserved_keyword_normal : SHUTDOWN */\n\n/*! Production::    unreserved_keyword_normal : SIBLINGS */\n\n/*! Production::    unreserved_keyword_normal : SIGNAL */\n\n/*! Production::    unreserved_keyword_normal : SIGNED */\n\n/*! Production::    unreserved_keyword_normal : SIMPLE */\n\n/*! Production::    unreserved_keyword_normal : SIZE */\n\n/*! Production::    unreserved_keyword_normal : SKEWONLY */\n\n/*! Production::    unreserved_keyword_normal : SLAVE */\n\n/*! Production::    unreserved_keyword_normal : SLOT_IDX */\n\n/*! Production::    unreserved_keyword_normal : SLOW */\n\n/*! Production::    unreserved_keyword_normal : SNAPSHOT */\n\n/*! Production::    unreserved_keyword_normal : SOCKET */\n\n/*! Production::    unreserved_keyword_normal : SOME */\n\n/*! Production::    unreserved_keyword_normal : SONAME */\n\n/*! Production::    unreserved_keyword_normal : SOUNDS */\n\n/*! Production::    unreserved_keyword_normal : SOURCE */\n\n/*! Production::    unreserved_keyword_normal : SPACE */\n\n/*! Production::    unreserved_keyword_normal : SPATIAL */\n\n/*! Production::    unreserved_keyword_normal : SPECIFIC */\n\n/*! Production::    unreserved_keyword_normal : SPFILE */\n\n/*! Production::    unreserved_keyword_normal : SPLIT */\n\n/*! Production::    unreserved_keyword_normal : SQLEXCEPTION */\n\n/*! Production::    unreserved_keyword_normal : SQLWARNING */\n\n/*! Production::    unreserved_keyword_normal : SQL_AFTER_GTIDS */\n\n/*! Production::    unreserved_keyword_normal : SQL_AFTER_MTS_GAPS */\n\n/*! Production::    unreserved_keyword_normal : SQL_BEFORE_GTIDS */\n\n/*! Production::    unreserved_keyword_normal : SQL_BIG_RESULT */\n\n/*! Production::    unreserved_keyword_normal : SQL_BUFFER_RESULT */\n\n/*! Production::    unreserved_keyword_normal : SQL_CACHE */\n\n/*! Production::    unreserved_keyword_normal : SQL_CALC_FOUND_ROW */\n\n/*! Production::    unreserved_keyword_normal : SQL_ID */\n\n/*! Production::    unreserved_keyword_normal : SQL_NO_CACHE */\n\n/*! Production::    unreserved_keyword_normal : SQL_SMALL_RESULT */\n\n/*! Production::    unreserved_keyword_normal : SQL_THREAD */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_DAY */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_HOUR */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_MINUTE */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_MONTH */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_QUARTER */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_SECOND */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_WEEK */\n\n/*! Production::    unreserved_keyword_normal : SQL_TSI_YEAR */\n\n/*! Production::    unreserved_keyword_normal : SRID */\n\n/*! Production::    unreserved_keyword_normal : SSL */\n\n/*! Production::    unreserved_keyword_normal : STACKED */\n\n/*! Production::    unreserved_keyword_normal : STANDBY */\n\n/*! Production::    unreserved_keyword_normal : START */\n\n/*! Production::    unreserved_keyword_normal : STARTING */\n\n/*! Production::    unreserved_keyword_normal : STARTS */\n\n/*! Production::    unreserved_keyword_normal : STAT */\n\n/*! Production::    unreserved_keyword_normal : STATEMENTS */\n\n/*! Production::    unreserved_keyword_normal : STATISTICS */\n\n/*! Production::    unreserved_keyword_normal : STATS_AUTO_RECALC */\n\n/*! Production::    unreserved_keyword_normal : STATS_PERSISTENT */\n\n/*! Production::    unreserved_keyword_normal : STATS_SAMPLE_PAGES */\n\n/*! Production::    unreserved_keyword_normal : STATUS */\n\n/*! Production::    unreserved_keyword_normal : STD */\n\n/*! Production::    unreserved_keyword_normal : STDDEV */\n\n/*! Production::    unreserved_keyword_normal : STDDEV_POP */\n\n/*! Production::    unreserved_keyword_normal : STDDEV_SAMP */\n\n/*! Production::    unreserved_keyword_normal : STOP */\n\n/*! Production::    unreserved_keyword_normal : STORAGE */\n\n/*! Production::    unreserved_keyword_normal : STORAGE_FORMAT_VERSION */\n\n/*! Production::    unreserved_keyword_normal : STORAGE_FORMAT_WORK_VERSION */\n\n/*! Production::    unreserved_keyword_normal : STORED */\n\n/*! Production::    unreserved_keyword_normal : STORING */\n\n/*! Production::    unreserved_keyword_normal : STRAIGHT_JOIN */\n\n/*! Production::    unreserved_keyword_normal : STRING */\n\n/*! Production::    unreserved_keyword_normal : STRONG */\n\n/*! Production::    unreserved_keyword_normal : SUBCLASS_ORIGIN */\n\n/*! Production::    unreserved_keyword_normal : SUBDATE */\n\n/*! Production::    unreserved_keyword_normal : SUBJECT */\n\n/*! Production::    unreserved_keyword_normal : SUBMULTISET */\n\n/*! Production::    unreserved_keyword_normal : SUBPARTITION */\n\n/*! Production::    unreserved_keyword_normal : SUBPARTITIONS */\n\n/*! Production::    unreserved_keyword_normal : SUBSTR */\n\n/*! Production::    unreserved_keyword_normal : SUBSTRING */\n\n/*! Production::    unreserved_keyword_normal : SUCCESSFUL */\n\n/*! Production::    unreserved_keyword_normal : SUM */\n\n/*! Production::    unreserved_keyword_normal : SUPER */\n\n/*! Production::    unreserved_keyword_normal : SUSPEND */\n\n/*! Production::    unreserved_keyword_normal : SWAPS */\n\n/*! Production::    unreserved_keyword_normal : SWITCH */\n\n/*! Production::    unreserved_keyword_normal : SWITCHES */\n\n/*! Production::    unreserved_keyword_normal : SWITCHOVER */\n\n/*! Production::    unreserved_keyword_normal : SYNCHRONIZATION */\n\n/*! Production::    unreserved_keyword_normal : SYSBACKUP */\n\n/*! Production::    unreserved_keyword_normal : SYSDATE */\n\n/*! Production::    unreserved_keyword_normal : SYSDBA */\n\n/*! Production::    unreserved_keyword_normal : SYSKM */\n\n/*! Production::    unreserved_keyword_normal : SYSOPER */\n\n/*! Production::    unreserved_keyword_normal : SYSTEM */\n\n/*! Production::    unreserved_keyword_normal : SYSTEM_USER */\n\n/*! Production::    unreserved_keyword_normal : SYSTIMESTAMP */\n\n/*! Production::    unreserved_keyword_normal : SYS_CONNECT_BY_PATH */\n\n/*! Production::    unreserved_keyword_normal : T */\n\n/*! Production::    unreserved_keyword_normal : TABLEGROUP */\n\n/*! Production::    unreserved_keyword_normal : TABLEGROUPS */\n\n/*! Production::    unreserved_keyword_normal : TABLEGROUP_ID */\n\n/*! Production::    unreserved_keyword_normal : TABLES */\n\n/*! Production::    unreserved_keyword_normal : TABLESPACE */\n\n/*! Production::    unreserved_keyword_normal : TABLET */\n\n/*! Production::    unreserved_keyword_normal : TABLET_ID */\n\n/*! Production::    unreserved_keyword_normal : TABLET_MAX_SIZE */\n\n/*! Production::    unreserved_keyword_normal : TABLET_SIZE */\n\n/*! Production::    unreserved_keyword_normal : TABLE_CHECKSUM */\n\n/*! Production::    unreserved_keyword_normal : TABLE_ID */\n\n/*! Production::    unreserved_keyword_normal : TABLE_MODE */\n\n/*! Production::    unreserved_keyword_normal : TABLE_NAME */\n\n/*! Production::    unreserved_keyword_normal : TASK */\n\n/*! Production::    unreserved_keyword_normal : TEMPLATE */\n\n/*! Production::    unreserved_keyword_normal : TEMPORARY */\n\n/*! Production::    unreserved_keyword_normal : TEMPTABLE */\n\n/*! Production::    unreserved_keyword_normal : TENANT */\n\n/*! Production::    unreserved_keyword_normal : TENANT_ID */\n\n/*! Production::    unreserved_keyword_normal : TERMINATED */\n\n/*! Production::    unreserved_keyword_normal : TEXT */\n\n/*! Production::    unreserved_keyword_normal : THAN */\n\n/*! Production::    unreserved_keyword_normal : THROTTLE */\n\n/*! Production::    unreserved_keyword_normal : TIES */\n\n/*! Production::    unreserved_keyword_normal : TIME */\n\n/*! Production::    unreserved_keyword_normal : TIMES */\n\n/*! Production::    unreserved_keyword_normal : TIMESTAMP */\n\n/*! Production::    unreserved_keyword_normal : TIMESTAMPADD */\n\n/*! Production::    unreserved_keyword_normal : TIMESTAMPDIFF */\n\n/*! Production::    unreserved_keyword_normal : TIMEZONE_ABBR */\n\n/*! Production::    unreserved_keyword_normal : TIMEZONE_HOUR */\n\n/*! Production::    unreserved_keyword_normal : TIMEZONE_MINUTE */\n\n/*! Production::    unreserved_keyword_normal : TIMEZONE_REGION */\n\n/*! Production::    unreserved_keyword_normal : TIME_ZONE_INFO */\n\n/*! Production::    unreserved_keyword_normal : TINYBLOB */\n\n/*! Production::    unreserved_keyword_normal : TINYTEXT */\n\n/*! Production::    unreserved_keyword_normal : TOP_K_FRE_HIST */\n\n/*! Production::    unreserved_keyword_normal : TP_NAME */\n\n/*! Production::    unreserved_keyword_normal : TP_NO */\n\n/*! Production::    unreserved_keyword_normal : TRACE */\n\n/*! Production::    unreserved_keyword_normal : TRADITIONAL */\n\n/*! Production::    unreserved_keyword_normal : TRAILING */\n\n/*! Production::    unreserved_keyword_normal : TRANSACTION */\n\n/*! Production::    unreserved_keyword_normal : TRIGGERS */\n\n/*! Production::    unreserved_keyword_normal : TRIM */\n\n/*! Production::    unreserved_keyword_normal : TRUNCATE */\n\n/*! Production::    unreserved_keyword_normal : TYPE */\n\n/*! Production::    unreserved_keyword_normal : TYPES */\n```\n\n----------------------------------------\n\nTITLE: WITH Clause Grammar Productions in SQL\nDESCRIPTION: Grammar production rules for SQL WITH clauses including recursive and non-recursive common table expressions (CTEs). These rules define the syntax for creating temporary result sets within a query.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_229\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    with_clause : WITH RECURSIVE common_table_expr */\n\n/*! Production::    with_clause : WITH RECURSIVE with_list */\n\n/*! Production::    with_clause : WITH with_list */\n\n/*! Production::    with_list : common_table_expr */\n\n/*! Production::    with_list : with_list \",\" common_table_expr */\n\n/*! Production::    with_select : with_clause select_no_parens opt_when */\n\n/*! Production::    with_select : with_clause select_with_parens */\n```\n\n----------------------------------------\n\nTITLE: Transform Hint Grammar Rules\nDESCRIPTION: Extensive set of grammar rules defining SQL transformation hints for query optimization, including operations like merging, unnesting, simplification and predicate deduction\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_216\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    transform_hint : COALESCE_SQ \"(\" qb_name_option multi_qb_name_list \")\" */\n/*! Production::    transform_hint : COUNT_TO_EXISTS \"(\" qb_name_option qb_name_list \")\" */\n/*! Production::    transform_hint : ELIMINATE_JOIN opt_qb_name */\n/*! Production::    transform_hint : MATERIALIZE opt_qb_name */\n/*! Production::    transform_hint : NO_UNNEST opt_qb_name */\n/*! Production::    transform_hint : SIMPLIFY_SUBQUERY opt_qb_name */\n```\n\n----------------------------------------\n\nTITLE: Testing Streaming Endpoint with Curl\nDESCRIPTION: This curl command tests the streaming HTTP endpoint by sending a POST request with a JSON payload specifying the number of integers to stream. The request is sent to the local development server running on port 5555.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.4_http_trigger_streaming.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n\"http://127.0.0.1:5555/api/v1/awel/trigger/awel_tutorial/stream_numbers\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"n\": 5}'\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Function and Procedure Elements\nDESCRIPTION: These productions define grammar rules for various elements related to functions and procedures, including return types, result cache, and RESTRICT_REFERENCES pragma.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_172\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    restrict_references_pragma : PRAGMA RESTRICT_REFERENCES \"(\" default_or_string \",\" assert_list \")\" */\n\n/*! Production::    result_cache : RESULT_CACHE opt_relies_on_clause */\n\n/*! Production::    ret_type : DECIMAL */\n\n/*! Production::    ret_type : FIXED */\n\n/*! Production::    ret_type : INTEGER */\n\n/*! Production::    ret_type : NUMERIC */\n\n/*! Production::    ret_type : REAL */\n\n/*! Production::    ret_type : STRING */\n\n/*! Production::    returnStatement : RETURN expression */\n\n/*! Production::    returnType : DECIMAL */\n\n/*! Production::    returnType : INTEGER */\n\n/*! Production::    returnType : REAL */\n\n/*! Production::    returnType : STRING */\n\n/*! Production::    return_expr : %epsilon */\n\n/*! Production::    return_stmt : RETURN return_expr */\n\n/*! Production::    return_type : RETURN pl_outer_data_type */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Table Maintenance Grammar Rules\nDESCRIPTION: Production rules for table maintenance operations such as CHECK TABLE and CHECKSUM TABLE with their associated options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    checkTable : CHECK TABLE tables */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Security and Resource Management\nDESCRIPTION: Defines SQL grammar production rules for security requirements, reset statements, and resource management options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_170\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    require_specification : REQUIRE NONE */\n\n/*! Production::    require_specification : REQUIRE SSL */\n\n/*! Production::    require_specification : REQUIRE X509 */\n\n/*! Production::    require_specification : REQUIRE tls_option_list */\n\n/*! Production::    resetMaster : RESET MASTER */\n\n/*! Production::    resetSlave : RESET SLAVE opt_ALL opt_channelOption */\n\n/*! Production::    resetStatement : RESET QUERY CACHE */\n\n/*! Production::    resignalStatement : RESIGNAL opt_signValue opt_setSignalConditionInformations */\n\n/*! Production::    resource_option : MAX_CONNECTIONS_PER_HOUR INTNUM */\n\n/*! Production::    resource_option : MAX_USER_CONNECTIONS INTNUM */\n\n/*! Production::    resource_option_list : resource_option */\n\n/*! Production::    resource_option_list : resource_option_list resource_option */\n\n/*! Production::    resource_pool_list : STRING_VALUE */\n\n/*! Production::    resource_pool_list : resource_pool_list \",\" STRING_VALUE */\n\n/*! Production::    resource_unit_option : IOPS_WEIGHT opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : LOG_DISK_SIZE opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MAX_CPU opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MAX_DISK_SIZE opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MAX_IOPS opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MAX_MEMORY opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MAX_SESSION_NUM opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MEMORY_SIZE opt_equal_mark conf_const */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for FETCH Statement with BULK COLLECT\nDESCRIPTION: Specifies the grammar production for a FETCH statement using a PL/SQL access name with BULK COLLECT INTO clause and optional LIMIT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_72\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    fetch_stmt : FETCH pl_access_name bulk_collect_into_clause opt_limit */\n```\n\n----------------------------------------\n\nTITLE: Current Date Function Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for date functions that return the current date in various formats.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_date_func : CURDATE \"(\" \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_date_func : CURRENT_DATE \"(\" \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_date_func : CURRENT_DATE */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Element Specifications\nDESCRIPTION: Defines rules for element specifications in package and type declarations, including constructors, subprograms, and inheritance clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_59\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    el_element_spec : constructor_spec */\n\n/*! Production::    el_element_spec : map_order_function_spec */\n\n/*! Production::    el_element_spec : subprogram_spec */\n\n/*! Production::    el_element_spec_list_cc : el_element_spec_list_cc \",\" element_spec_long */\n\n/*! Production::    el_element_spec_list_cc : element_spec_long */\n\n/*! Production::    element_spec : el_element_spec_list_cc */\n\n/*! Production::    element_spec_long : el_element_spec */\n\n/*! Production::    element_spec_long : inheritance_clauses_list el_element_spec */\n\n/*! Production::    element_spec_long : restrict_references_pragma */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Privilege Production Rules\nDESCRIPTION: This snippet defines production rules for SQL privileges, including various types of privileges such as ALTER, CREATE, DELETE, and their specific levels of application.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_112\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    priv_type : ALTER */\n\n/*! Production::    priv_type : CREATE */\n\n/*! Production::    priv_type : DELETE */\n\n/*! Production::    priv_level : \"*\" \".\" \"*\" */\n\n/*! Production::    priv_level : relation_name \".\" \"*\" */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Character Set Grammar Rules\nDESCRIPTION: Comprehensive set of production rules for character set specifications, including various encodings like UTF8, Latin1, and character manipulation functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    characterSet : CHARACTER SET charsetName */\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Translation Updates\nDESCRIPTION: Git commands to commit translation file changes\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/i18n/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add locales/\ngit commit -m \"Update translations\"\n```\n\n----------------------------------------\n\nTITLE: Defining Partitioning Options in SQL Grammar\nDESCRIPTION: These production rules define optional partitioning clauses for SQL statements, including subpartition counts, definitions, and types (hash, list, range).\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_101\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_subPartitionCount : %epsilon */\n\n/*! Production::    opt_subPartitionCount : SUBPARTITIONS decimalLiteral */\n\n/*! Production::    opt_subpartitionDefinitions : %epsilon */\n\n/*! Production::    opt_subpartitionDefinitions : subpartitionDefinitions */\n\n/*! Production::    opt_subpartition_list : %epsilon */\n\n/*! Production::    opt_subpartition_list : opt_hash_subpartition_list */\n\n/*! Production::    opt_subpartition_list : opt_list_subpartition_list */\n\n/*! Production::    opt_subpartition_list : opt_range_subpartition_list */\n\n/*! Production::    opt_subpartition_list : subpartition_list */\n\n/*! Production::    opt_subpartitions : %epsilon */\n\n/*! Production::    opt_subpartitions : SUBPARTITIONS INTNUM */\n```\n\n----------------------------------------\n\nTITLE: SQL Distribution Method Rules\nDESCRIPTION: Grammar rules defining valid distribution methods for data partitioning and distribution.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_70\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    distribute_method : ALL */\n/*! Production::    distribute_method : BC2HOST */\n/*! Production::    distribute_method : BROADCAST */\n/*! Production::    distribute_method : HASH */\n/*! Production::    distribute_method : LIST */\n/*! Production::    distribute_method : LOCAL */\n/*! Production::    distribute_method : NONE */\n/*! Production::    distribute_method : PARTITION */\n/*! Production::    distribute_method : RANDOM */\n/*! Production::    distribute_method : RANDOM_LOCAL */\n/*! Production::    distribute_method : RANGE */\n```\n\n----------------------------------------\n\nTITLE: Cursor Attribute BULK_EXCEPTIONS Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for accessing bulk exception properties in cursor attributes for PL/SQL bulk operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursor_attribute_bulk_exceptions : BULK_EXCEPTIONS \"(\" bit_expr \")\" \".\" ERROR_CODE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursor_attribute_bulk_exceptions : BULK_EXCEPTIONS \"(\" bit_expr \")\" \".\" ERROR_INDEX */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursor_attribute_bulk_exceptions : BULK_EXCEPTIONS \".\" COUNT */\n```\n\n----------------------------------------\n\nTITLE: Column Attribute Definitions in SQL\nDESCRIPTION: These productions define various attributes that can be assigned to columns in SQL, including auto-increment, default values, and constraints.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_41\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    column_attribute : AUTO_INCREMENT */\n\n/*! Production::    column_attribute : COMMENT STRING_VALUE */\n\n/*! Production::    column_attribute : DEFAULT bit_expr */\n\n/*! Production::    column_attribute : DEFAULT now_or_signed_literal */\n\n/*! Production::    column_attribute : ID INTNUM */\n\n/*! Production::    column_attribute : NULLX */\n\n/*! Production::    column_attribute : ON UPDATE cur_timestamp_func */\n\n/*! Production::    column_attribute : ORIG_DEFAULT now_or_signed_literal */\n\n/*! Production::    column_attribute : PRIMARY KEY */\n\n/*! Production::    column_attribute : SRID INTNUM */\n\n/*! Production::    column_attribute : UNIQUE */\n\n/*! Production::    column_attribute : UNIQUE KEY */\n\n/*! Production::    column_attribute : constraint_definition */\n\n/*! Production::    column_attribute : not NULLX */\n\n/*! Production::    column_attribute : opt_constraint_and_name CHECK \"(\" expr \")\" constranit_state */\n\n/*! Production::    column_attribute : opt_primary KEY */\n```\n\n----------------------------------------\n\nTITLE: Table Source and Index Productions\nDESCRIPTION: Grammar rules for table source definitions, index creation, and table relationships in queries\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_167\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tableSource : tableSourceItem opt_joinParts */\n/*! Production::    tableSourceItem : tableName opt_asUid opt_indexHints */\n/*! Production::    table_element : INDEX index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n```\n\n----------------------------------------\n\nTITLE: Current Schema and Cursor Statements Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for current schema references and cursor manipulation statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_59\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    current_schema : relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursorStatement : CLOSE uid */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursorStatement : FETCH FROM uid INTO uidList */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursorStatement : FETCH NEXT FROM uid INTO uidList */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursorStatement : FETCH uid INTO uidList */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursorStatement : OPEN uid */\n```\n\n----------------------------------------\n\nTITLE: Handler Operation Productions\nDESCRIPTION: Grammar rules defining handler statement syntax including open, close, read and various condition values\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_73\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    handlerStatement : handlerCloseStatement */\n/*! Production::    handlerStatement : handlerOpenStatement */\n/*! Production::    handlerStatement : handlerReadIndexStatement */\n/*! Production::    handlerStatement : handlerReadStatement */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Security Option in SQL Grammar\nDESCRIPTION: These production rules define optional SQL security settings for SQL statements, allowing either DEFINER or INVOKER security contexts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_98\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_sql_security : SQL SECURITY DEFINER */\n\n/*! Production::    opt_sql_security : SQL SECURITY INVOKER */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Data Type Casting Grammar Rules\nDESCRIPTION: A collection of production rules for SQL data type casting syntax, including timestamp, datetime, integer, and various specialized types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cast_data_type : TIMESTAMP opt_datetime_fsp_i WITH TIME ZONE */\n```\n\n----------------------------------------\n\nTITLE: Cursor Statements and Attributes in SQL\nDESCRIPTION: Defines syntax for cursor-related statements including OPEN, FETCH, and CLOSE, as well as cursor attributes for bulk operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_42\n\nLANGUAGE: SQL\nCODE:\n```\ncursorStatement : CLOSE uid\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncursorStatement : FETCH FROM uid INTO uidList\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncursorStatement : FETCH NEXT FROM uid INTO uidList\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncursorStatement : FETCH uid INTO uidList\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncursorStatement : OPEN uid\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncursor_attribute_bulk_exceptions : BULK_EXCEPTIONS \"(\" bit_expr \")\" \".\" ERROR_CODE\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncursor_attribute_bulk_exceptions : BULK_EXCEPTIONS \"(\" bit_expr \")\" \".\" ERROR_INDEX\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncursor_attribute_bulk_exceptions : BULK_EXCEPTIONS \".\" COUNT\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Productions for Database Creation and Modification\nDESCRIPTION: This snippet contains a series of SQL grammar productions for creating and modifying database objects. It includes rules for creating databases, tables, functions, procedures, triggers, and more. The productions define the syntax for various SQL statements and their options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    createDatabase : CREATE dbFormat opt_ifNotExists uid */\n\n/*! Production::    createDatabase : CREATE dbFormat opt_ifNotExists uid createDatabaseOptions */\n\n/*! Production::    createDatabaseOption : opt_DEFAULT COLLATE opt_MULT_ASSIGN collationName */\n\n/*! Production::    createDatabaseOption : opt_DEFAULT charsetKeywords opt_MULT_ASSIGN charsetValues */\n\n/*! Production::    createDatabaseOptions : createDatabaseOption */\n\n/*! Production::    createDatabaseOptions : createDatabaseOption createDatabaseOptions */\n\n/*! Production::    createDefinition : indexColumnDefinition */\n\n/*! Production::    createDefinition : tableConstraint */\n\n/*! Production::    createDefinition : uid columnDefinition */\n\n/*! Production::    createDefinitions : LR_BRACKET createDefinitionsNoB RR_BRACKET */\n\n/*! Production::    createDefinitionsNoB : createDefinition */\n\n/*! Production::    createDefinitionsNoB : createDefinition COMMA createDefinitionsNoB */\n\n/*! Production::    createFunction : CREATE FUNCTION uid LR_BRACKET opt_functionParameters RR_BRACKET RETURNS dataType opt_routineOptions returnStatement */\n\n/*! Production::    createFunction : CREATE FUNCTION uid LR_BRACKET opt_functionParameters RR_BRACKET RETURNS dataType opt_routineOptions routineBody */\n\n/*! Production::    createFunction : CREATE opt_ownerStatement FUNCTION uid dottedId LR_BRACKET opt_functionParameters RR_BRACKET RETURNS dataType opt_routineOptions returnStatement */\n\n/*! Production::    createFunction : CREATE opt_ownerStatement FUNCTION uid dottedId LR_BRACKET opt_functionParameters RR_BRACKET RETURNS dataType opt_routineOptions routineBody */\n\n/*! Production::    createFunction : CREATE ownerStatement FUNCTION uid LR_BRACKET opt_functionParameters RR_BRACKET RETURNS dataType opt_routineOptions returnStatement */\n\n/*! Production::    createFunction : CREATE ownerStatement FUNCTION uid LR_BRACKET opt_functionParameters RR_BRACKET RETURNS dataType opt_routineOptions routineBody */\n\n/*! Production::    createProcedure : CREATE opt_ownerStatement PROCEDURE fullId LR_BRACKET opt_procedureParameters RR_BRACKET opt_routineOptions routineBody */\n\n/*! Production::    createServer : CREATE SERVER uid FOREIGN DATA WRAPPER MYSQL OPTIONS LR_BRACKET opt_serverOptions RR_BRACKET */\n\n/*! Production::    createServer : CREATE SERVER uid FOREIGN DATA WRAPPER STRING_LITERAL OPTIONS LR_BRACKET opt_serverOptions RR_BRACKET */\n\n/*! Production::    createTable : CREATE opt_TEMPORARY TABLE opt_ifNotExists tableName LIKE tableName */\n\n/*! Production::    createTable : CREATE opt_TEMPORARY TABLE opt_ifNotExists tableName LR_BRACKET LIKE tableName RR_BRACKET */\n\n/*! Production::    createTable : CREATE opt_TEMPORARY TABLE opt_ifNotExists tableName opt_createDefinitions opt_tableOptions opt_partitionDefinitions */\n\n/*! Production::    createTable : CREATE opt_TEMPORARY TABLE opt_ifNotExists tableName opt_createDefinitions opt_tableOptions opt_partitionDefinitions opt_keyViolate opt_AS selectStatement */\n\n/*! Production::    createTablespaceInnodb : CREATE TABLESPACE uid ADD DATAFILE STRING_LITERAL */\n\n/*! Production::    createTablespaceInnodb : CREATE TABLESPACE uid ADD DATAFILE STRING_LITERAL ENGINE opt_MULT_ASSIGN engineName */\n\n/*! Production::    createTablespaceInnodb : CREATE TABLESPACE uid ADD DATAFILE STRING_LITERAL FILE_BLOCK_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    createTablespaceInnodb : CREATE TABLESPACE uid ADD DATAFILE STRING_LITERAL FILE_BLOCK_SIZE EQUAL_SYMBOL fileSizeLiteral ENGINE opt_MULT_ASSIGN engineName */\n\n/*! Production::    createTrigger : CREATE opt_ownerStatement TRIGGER fullId triggerTime triggerEvent ON tableName FOR EACH ROW routineBody */\n\n/*! Production::    createTrigger : CREATE opt_ownerStatement TRIGGER fullId triggerTime triggerEvent ON tableName FOR EACH ROW triggerPlace fullId routineBody */\n\n/*! Production::    createUdfunction : CREATE AGGREGATE FUNCTION uid RETURNS returnType SONAME STRING_LITERAL */\n\n/*! Production::    createUdfunction : CREATE FUNCTION uid RETURNS returnType SONAME STRING_LITERAL */\n\n/*! Production::    createUser : CREATE USER opt_ifNotExists userAuthOptions REQUIRE user_tlsOpt opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    createUser : CREATE USER opt_ifNotExists userAuthOptions opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    createUser : CREATE USER userAuthOptions */\n\n/*! Production::    createView : CREATE opt_orReplace opt_viewAlgorithmAssign opt_ownerStatement opt_sqlSecurity VIEW fullId opt_uidList AS selectStatement opt_viewCheckOption */\n\n/*! Production::    create_database_stmt : create_with_opt_hint database_key opt_if_not_exists database_factor opt_database_option_list */\n\n/*! Production::    create_function_stmt : CREATE opt_replace opt_editionable plsql_function_source */\n\n/*! Production::    create_function_stmt : create_with_opt_hint opt_agg FUNCTION NAME_OB RETURNS ret_type SONAME STRING_VALUE */\n\n/*! Production::    create_index_stmt : CREATE opt_index_keyname INDEX normal_relation_factor opt_index_using_algorithm ON relation_factor \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n```\n\n----------------------------------------\n\nTITLE: Tablegroup Partition Productions\nDESCRIPTION: Grammar rules defining various tablegroup partitioning options including hash, key, list and range partitioning schemes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_212\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    tg_hash_partition_option : PARTITION BY HASH INTNUM tg_subpartition_option opt_partitions */\n/*! Production::    tg_key_partition_option : PARTITION BY KEY INTNUM tg_subpartition_option opt_partitions */\n/*! Production::    tg_list_partition_option : PARTITION BY LIST COLUMNS INTNUM tg_subpartition_option opt_list_partition_list */\n```\n\n----------------------------------------\n\nTITLE: Geographic and JSON Data Type Rules\nDESCRIPTION: Production rules for geographic data types (GEOMETRY, POINT, etc.) and JSON data type.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_49\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dataTypeGis : GEOMCOLLECTION */\n/*! Production::    dataTypeGis : GEOMETRY */\n/*! Production::    dataTypeGis : GEOMETRYCOLLECTION */\n/*! Production::    dataTypeGis : JSON */\n/*! Production::    dataTypeGis : LINESTRING */\n/*! Production::    dataTypeGis : MULTILINESTRING */\n/*! Production::    dataTypeGis : MULTIPOINT */\n/*! Production::    dataTypeGis : MULTIPOLYGON */\n/*! Production::    dataTypeGis : POINT */\n/*! Production::    dataTypeGis : POLYGON */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Optimization Options\nDESCRIPTION: Defines SQL grammar production rules for various optimization options including admin options, consistent snapshots, and work specifications\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_134\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    opt_with_admin_option : %epsilon */\n/*! Production::    opt_with_admin_option : WITH ADMIN OPTION */\n/*! Production::    opt_with_consistent_snapshot : %epsilon */\n/*! Production::    opt_with_consistent_snapshot : WITH CONSISTENT SNAPSHOT */\n/*! Production::    opt_work : %epsilon */\n/*! Production::    opt_work : WORK */\n```\n\n----------------------------------------\n\nTITLE: CREATE TRIGGER and TYPE Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating triggers and PL/SQL object types with replaceable and editionable options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_51\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_trigger_stmt : CREATE opt_replace opt_editionable plsql_trigger_source */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_type_body_stmt : CREATE opt_replace opt_editionable plsql_type_body_source */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_type_stmt : CREATE opt_replace opt_editionable plsql_type_spec_source */\n```\n\n----------------------------------------\n\nTITLE: Creating Role, Savepoint, and Sequence Statements in SQL\nDESCRIPTION: Specifies syntax for creating roles, savepoints, and sequences with various options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_role_stmt : CREATE ROLE role opt_not_identified\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_savepoint_stmt : SAVEPOINT var_name\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_sequence_stmt : CREATE SEQUENCE relation_factor opt_sequence_option_list\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_sequence_stmt : create_with_opt_hint SEQUENCE opt_if_not_exists relation_factor opt_sequence_option_list\n```\n\n----------------------------------------\n\nTITLE: Constraint Definition Grammar\nDESCRIPTION: Grammar productions for defining table constraints including foreign keys, primary keys, unique constraints, and check constraints.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_105\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    out_of_line_constraint : FOREIGN KEY \"(\" column_name_list \")\" references_clause opt_using_index_clause opt_enable_option */\n/*! Production::    out_of_line_constraint : PRIMARY KEY \"(\" column_name_list \")\" opt_using_index_clause */\n```\n\n----------------------------------------\n\nTITLE: Query Hint Rules\nDESCRIPTION: Grammar rules defining query optimization hints including parallel execution, index usage, and query blocks.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_94\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    hint_option : PARALLEL \"(\" INTNUM \")\" */\n/*! Production::    hint_option : INDEX_HINT \"(\" qb_name_option relation_factor_in_hint NAME_OB \")\" */\n/*! Production::    hint_option : QB_NAME \"(\" NAME_OB \")\" */\n/*! Production::    hint_option : NO_USE_PX */\n/*! Production::    hint_list_with_end : opt_hint_list HINT_END */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for Complex Timestamp Pattern\nDESCRIPTION: This rule defines a pattern for timestamps enclosed in single or double quotes, allowing for various formats of timestamp representation in SQL queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_244\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       Timestamp{whitespace}?\"[^\\\"]*\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       Timestamp{whitespace}?'[^']*' */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       Timestamp{whitespace}?'[^\\']*' */\n```\n\n----------------------------------------\n\nTITLE: Defining Date Parameter Production Rule in MySQL Grammar\nDESCRIPTION: This rule defines the syntax for date parameters in MySQL, consisting of an expression, a comma, the INTERVAL keyword, another expression, and a date unit.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_64\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_params : expr \",\" INTERVAL expr date_unit */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Sources and Joins in Grammar Production Rules\nDESCRIPTION: Specifies grammar production rules for table sources, joins, and related operations in SQL statements. These rules define how tables can be referenced, joined, and aliased in Oracle SQL query statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_173\n\nLANGUAGE: Oracle SQL\nCODE:\n```\n/*! Production::    tablePair : LR_BRACKET tableName COMMA tableName RR_BRACKET */\n\n/*! Production::    tablePairs : tablePair */\n\n/*! Production::    tablePairs : tablePair COMMA tablePairs */\n\n/*! Production::    tableSource : LR_BRACKET tableSourceItem opt_joinParts RR_BRACKET */\n\n/*! Production::    tableSource : tableSourceItem opt_joinParts */\n\n/*! Production::    tableSourceItem : LR_BRACKET tableSources RR_BRACKET */\n\n/*! Production::    tableSourceItem : selectStatement opt_AS uid */\n\n/*! Production::    tableSourceItem : tableName opt_asUid opt_indexHints */\n\n/*! Production::    tableSourceItem : tableName partitonValueList opt_asUid opt_indexHints */\n\n/*! Production::    tableSources : tableSource */\n\n/*! Production::    tableSources : tableSource COMMA tableSources */\n\n/*! Production::    tableWithOptStar : tableName */\n\n/*! Production::    tableWithOptStar : tableName DOT STAR */\n\n/*! Production::    tableWithOptStars : tableWithOptStar */\n\n/*! Production::    tableWithOptStars : tableWithOptStar COMMA tableWithOptStars */\n```\n\n----------------------------------------\n\nTITLE: Defining Owner Statements in SQL\nDESCRIPTION: BNF production rules for DEFINER statements that specify ownership in SQL objects, using either CURRENT_USER or a specific username.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_142\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    ownerStatement : DEFINER EQUAL_SYMBOL CURRENT_USER */\n\n/*! Production::    ownerStatement : DEFINER EQUAL_SYMBOL CURRENT_USER LR_BRACKET RR_BRACKET */\n\n/*! Production::    ownerStatement : DEFINER EQUAL_SYMBOL userName */\n```\n\n----------------------------------------\n\nTITLE: SET Password Command Grammar Rules\nDESCRIPTION: Grammar productions defining syntax for SET PASSWORD commands, including options for setting passwords with string values and password functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_146\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_password_stmt : SET PASSWORD FOR user opt_host_name COMP_EQ STRING_VALUE */\n/*! Production::    set_password_stmt : SET PASSWORD opt_for_user COMP_EQ PASSWORD \"(\" password \")\" */\n/*! Production::    set_password_stmt : SET PASSWORD opt_for_user COMP_EQ STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Data Type Production Rules\nDESCRIPTION: This set of production rules defines various MySQL data types, including numeric, string, date/time, and spatial types. It covers both standard SQL types and MySQL-specific types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dataType : DOUBLE opt_PRECISION opt_lengthTwoDimension opt_signOrUnsign opt_ZEROFILL */\n\n/*! Production::    dataType : LONG VARBINARY */\n\n/*! Production::    dataType : LONG VARCHAR opt_BINARY opt_dataTypeCharsetAssign opt_collateConfig */\n\n/*! Production::    dataType : NATIONAL CHAR VARYING opt_lengthOneDimension opt_BINARY */\n\n/*! Production::    dataType : NATIONAL CHARACTER VARYING opt_lengthOneDimension opt_BINARY */\n\n/*! Production::    dataType : NATIONAL dataTypeNatinalType opt_lengthOneDimension opt_BINARY */\n\n/*! Production::    dataType : NCHAR VARCHAR opt_lengthOneDimension opt_BINARY */\n\n/*! Production::    dataType : REAL opt_lengthTwoDimension opt_signOrUnsign opt_ZEROFILL */\n\n/*! Production::    dataType : dataTypeDecimal opt_lengthTwoOptionalDimension opt_signOrUnsign opt_ZEROFILL */\n\n/*! Production::    dataType : dataTypeGis */\n\n/*! Production::    dataType : dataTypeIntType opt_lengthOneDimension opt_signOrUnsign opt_ZEROFILL */\n\n/*! Production::    dataType : dataTypeLob */\n\n/*! Production::    dataType : dataTypeLobWithLength opt_lengthOneDimension */\n\n/*! Production::    dataType : dataTypeName VARYING opt_lengthOneDimension opt_BINARY opt_dataTypeCharsetAssign opt_dataTypeCollateAssign */\n\n/*! Production::    dataType : dataTypeName lengthOneDimension opt_BINARY opt_dataTypeCharsetAssign opt_dataTypeCollateAssign */\n\n/*! Production::    dataType : dataTypeName opt_BINARY opt_dataTypeCharsetAssign opt_dataTypeCollateAssign */\n\n/*! Production::    dataType : enumOrSet collectionOptions opt_BINARY opt_dataTypeCharsetAssign */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules\nDESCRIPTION: Definitions of SQL grammar production rules for parsing complex SQL constructs like named windows, table references, and column references.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_87\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    name_list : NAME_OB */\n/*! Production::    name_list : name_list \",\" NAME_OB */\n/*! Production::    name_list : name_list NAME_OB */\n/*! Production::    named_window : NAME_OB AS new_generalized_window_clause_with_blanket */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Pragma Statements\nDESCRIPTION: Defines the grammar production rules for different types of pragma statements in Oracle SQL, including autonomous transaction, exception init, inline, interface, restrict references, serially reusable, and UDF pragmas.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_150\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    pragma_stmt : autonomous_transaction_pragma */\n\n/*! Production::    pragma_stmt : exception_init_pragma */\n\n/*! Production::    pragma_stmt : inline_pragma */\n\n/*! Production::    pragma_stmt : interface_pragma */\n\n/*! Production::    pragma_stmt : restrict_references_pragma */\n\n/*! Production::    pragma_stmt : serially_reusable_pragma */\n\n/*! Production::    pragma_stmt : udf_pragma */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Window Function Syntax\nDESCRIPTION: This snippet defines the syntax for various SQL window functions including CUME_DIST, DENSE_RANK, FIRST_VALUE, and others. It specifies how these functions are used with the OVER clause and window specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_190\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : CUME_DIST \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : DENSE_RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : DENSE_RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : FIRST_VALUE win_fun_first_last_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : FIRST_VALUE win_fun_first_last_params OVER new_generalized_window_clause */\n```\n\n----------------------------------------\n\nTITLE: Function and Aggregate Productions\nDESCRIPTION: Production rules for parsing SQL function calls and aggregate expressions. Defines syntax for various aggregate functions like COUNT, AVG, SUM and statistical functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_1\n\nLANGUAGE: yacc\nCODE:\n```\n/*! Production::    access_func_expr : function_name \"(\" opt_func_param_list \")\" */\n/*! Production::    access_func_expr_count : COUNT \"(\" DISTINCT bit_expr \")\" */\n/*! Production::    aggregate_function : AVG \"(\" opt_distinct_or_all bit_expr \")\" */\n```\n\n----------------------------------------\n\nTITLE: SQL Partition Split Action Rules\nDESCRIPTION: Production rules that define the syntax for partition split actions in SQL, including splitting by range and list with various syntax options. These rules cover different ways to specify partitioning operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_160\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    split_actions : AT \"(\" range_expr_list \")\" modify_special_partition */\n\n/*! Production::    split_actions : VALUES \"(\" list_expr \")\" modify_special_partition */\n\n/*! Production::    split_actions : split_list_partition */\n\n/*! Production::    split_actions : split_range_partition */\n\n/*! Production::    split_list_partition : INTO \"(\" list_partition_list \",\" special_partition_list \")\" */\n\n/*! Production::    split_list_partition : INTO opt_list_partition_list */\n\n/*! Production::    split_range_partition : INTO \"(\" range_partition_list \",\" special_partition_list \")\" */\n\n/*! Production::    split_range_partition : INTO opt_range_partition_list */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL WITH Clause Syntax\nDESCRIPTION: This snippet defines the syntax for the WITH clause, including recursive common table expressions. It specifies how the WITH clause is used in SELECT statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_195\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    with_clause : WITH RECURSIVE common_table_expr */\n\n/*! Production::    with_clause : WITH RECURSIVE with_list */\n\n/*! Production::    with_clause : WITH with_list */\n\n/*! Production::    with_list : common_table_expr */\n\n/*! Production::    with_list : with_list \",\" common_table_expr */\n\n/*! Production::    with_select : with_clause select_no_parens opt_when */\n\n/*! Production::    with_select : with_clause select_with_parens */\n```\n\n----------------------------------------\n\nTITLE: Defining Query Transformation Hints in SQL\nDESCRIPTION: These productions define various query transformation hints used for SQL query optimization, including join eliminations, materializations, and simplifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_202\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    transform_hint : COALESCE_SQ \"(\" qb_name_option multi_qb_name_list \")\" */\n\n/*! Production::    transform_hint : COUNT_TO_EXISTS \"(\" qb_name_option qb_name_list \")\" */\n\n/*! Production::    transform_hint : COUNT_TO_EXISTS opt_qb_name */\n\n/*! Production::    transform_hint : ELIMINATE_JOIN \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : ELIMINATE_JOIN opt_qb_name */\n\n/*! Production::    transform_hint : FAST_MINMAX opt_qb_name */\n\n/*! Production::    transform_hint : INLINE opt_qb_name */\n\n/*! Production::    transform_hint : LEFT_TO_ANTI \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : LEFT_TO_ANTI opt_qb_name */\n\n/*! Production::    transform_hint : MATERIALIZE \"(\" qb_name_option multi_qb_name_list \")\" */\n\n/*! Production::    transform_hint : MATERIALIZE opt_qb_name */\n\n/*! Production::    transform_hint : MERGE_HINT \"(\" qb_name_option COMP_GT qb_name_string \")\" */\n\n/*! Production::    transform_hint : MERGE_HINT \"(\" qb_name_option COMP_LT qb_name_string \")\" */\n\n/*! Production::    transform_hint : MERGE_HINT opt_qb_name */\n\n/*! Production::    transform_hint : NO_COALESCE_SQ opt_qb_name */\n\n/*! Production::    transform_hint : NO_COUNT_TO_EXISTS opt_qb_name */\n\n/*! Production::    transform_hint : NO_ELIMINATE_JOIN opt_qb_name */\n\n/*! Production::    transform_hint : NO_EXPAND opt_qb_name */\n\n/*! Production::    transform_hint : NO_FAST_MINMAX opt_qb_name */\n\n/*! Production::    transform_hint : NO_LEFT_TO_ANTI opt_qb_name */\n\n/*! Production::    transform_hint : NO_MERGE_HINT opt_qb_name */\n\n/*! Production::    transform_hint : NO_OUTER_TO_INNER opt_qb_name */\n\n/*! Production::    transform_hint : NO_PLACE_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : NO_PRED_DEDUCE opt_qb_name */\n\n/*! Production::    transform_hint : NO_PROJECT_PRUNE opt_qb_name */\n\n/*! Production::    transform_hint : NO_PULLUP_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : NO_PUSH_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : NO_PUSH_PRED_CTE opt_qb_name */\n\n/*! Production::    transform_hint : NO_REPLACE_CONST opt_qb_name */\n\n/*! Production::    transform_hint : NO_REWRITE opt_qb_name */\n\n/*! Production::    transform_hint : NO_SEMI_TO_INNER opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_DISTINCT opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_ORDER_BY opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_SET opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_SUBQUERY opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_WINFUNC opt_qb_name */\n\n/*! Production::    transform_hint : NO_UNNEST opt_qb_name */\n\n/*! Production::    transform_hint : NO_WIN_MAGIC opt_qb_name */\n\n/*! Production::    transform_hint : OUTER_TO_INNER opt_qb_name */\n\n/*! Production::    transform_hint : PLACE_GROUP_BY \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : PLACE_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : PRED_DEDUCE opt_qb_name */\n\n/*! Production::    transform_hint : PROJECT_PRUNE opt_qb_name */\n\n/*! Production::    transform_hint : PULLUP_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : PUSH_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : PUSH_PRED_CTE opt_qb_name */\n\n/*! Production::    transform_hint : REPLACE_CONST opt_qb_name */\n\n/*! Production::    transform_hint : SEMI_TO_INNER \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : SIMPLIFY_DISTINCT opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_ORDER_BY opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_SET opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_SUBQUERY opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_WINFUNC opt_qb_name */\n\n/*! Production::    transform_hint : UNNEST opt_qb_name */\n\n/*! Production::    transform_hint : USE_CONCAT \"(\" qb_name_option STRING_VALUE \")\" */\n\n/*! Production::    transform_hint : USE_CONCAT opt_qb_name */\n\n/*! Production::    transform_hint : WIN_MAGIC \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional SQL Syntax Elements\nDESCRIPTION: These productions define optional syntax elements for various SQL operations, including renaming, precision specifications, and clause modifiers. They cover a wide range of database management and query construction scenarios.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_91\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_flashback_rename_database : RENAME TO relation_name */\n\n/*! Production::    opt_flashback_rename_table : %epsilon */\n\n/*! Production::    opt_flashback_rename_table : RENAME TO relation_factor */\n\n/*! Production::    opt_flashback_rename_tenant : %epsilon */\n\n/*! Production::    opt_flashback_rename_tenant : RENAME TO relation_name */\n\n/*! Production::    opt_float_precision : \"(\" \")\" */\n\n/*! Production::    opt_float_precision : \"(\" DECIMAL_VAL \")\" */\n\n/*! Production::    opt_float_precision : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_float_precision : \"(\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    opt_float_precision : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Image Name for DB-GPT Docker Build\nDESCRIPTION: Command to specify a custom name for the built DB-GPT Docker image instead of using the default name.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --image-name mycompany/dbgpt\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant and User Statements in SQL\nDESCRIPTION: Specifies syntax for creating tenants and users with various options and specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_tenant_stmt : CREATE TENANT relation_name opt_tenant_option_list opt_set_sys_var\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_tenant_stmt : create_with_opt_hint TENANT opt_if_not_exists relation_name opt_tenant_option_list opt_set_sys_var\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_user_stmt : CREATE USER user_specification opt_profile opt_default_tables_space\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_user_stmt : CREATE USER user_specification require_specification opt_profile opt_default_tables_space\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_user_stmt : create_with_opt_hint USER opt_if_not_exists user_specification_list opt_resource_option\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_user_stmt : create_with_opt_hint USER opt_if_not_exists user_specification_list require_specification opt_resource_option\n```\n\n----------------------------------------\n\nTITLE: Defining ORDER BY Clause Grammar in SQL\nDESCRIPTION: BNF production rules defining the structure of ORDER BY clauses in SQL queries, including expressions with optional ASC/DESC directions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_138\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    orderByClause : ORDER BY orderByExprList */\n\n/*! Production::    orderByExprList : orderByExpression */\n\n/*! Production::    orderByExprList : orderByExpression COMMA orderByExprList */\n\n/*! Production::    orderByExpression : expression */\n\n/*! Production::    orderByExpression : expression ASC */\n\n/*! Production::    orderByExpression : expression DESC */\n```\n\n----------------------------------------\n\nTITLE: SQL Rule Pattern Definitions\nDESCRIPTION: Comprehensive collection of SQL rule definitions for keywords, operators, data types, identifiers and patterns. Includes standard SQL keywords, operators, data types as well as database-specific extensions like MySQL and Oracle syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_235\n\nLANGUAGE: sql\nCODE:\n```\n/*! Rule::       SHRINK */\n/*! Rule::       SHUTDOWN */\n/*! Rule::       SIBLINGS */\n/*! Rule::       SIGNAL */\n[...additional rules...]\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Fetch Clause Production Rules\nDESCRIPTION: This snippet defines production rules for SQL FETCH clauses, including OFFSET, FETCH FIRST, and FETCH NEXT variations with row count and percentage options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_77\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    fetch_next : fetch_next_count */\n\n/*! Production::    fetch_next : fetch_next_percent */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROW */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROW fetch_next */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROWS */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROWS fetch_next */\n\n/*! Production::    fetch_next_clause : fetch_next */\n\n/*! Production::    fetch_next_count : fetch_next_expr ONLY */\n\n/*! Production::    fetch_next_count : fetch_next_expr WITH TIES */\n\n/*! Production::    fetch_next_expr : FETCH FIRST ROW */\n\n/*! Production::    fetch_next_expr : FETCH FIRST ROWS */\n\n/*! Production::    fetch_next_expr : FETCH FIRST bit_expr ROW */\n\n/*! Production::    fetch_next_expr : FETCH FIRST bit_expr ROWS */\n\n/*! Production::    fetch_next_expr : FETCH NEXT ROW */\n\n/*! Production::    fetch_next_expr : FETCH NEXT ROWS */\n\n/*! Production::    fetch_next_expr : FETCH NEXT bit_expr ROW */\n\n/*! Production::    fetch_next_expr : FETCH NEXT bit_expr ROWS */\n\n/*! Production::    fetch_next_percent : fetch_next_percent_expr ONLY */\n\n/*! Production::    fetch_next_percent : fetch_next_percent_expr WITH TIES */\n\n/*! Production::    fetch_next_percent_expr : FETCH FIRST bit_expr PERCENT ROW */\n\n/*! Production::    fetch_next_percent_expr : FETCH FIRST bit_expr PERCENT ROWS */\n\n/*! Production::    fetch_next_percent_expr : FETCH NEXT bit_expr PERCENT ROW */\n```\n\n----------------------------------------\n\nTITLE: Fetch Operation Production Rules\nDESCRIPTION: Production rules for FETCH operations including FIRST/NEXT row syntax and OFFSET clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_66\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    fetch_next : fetch_next_count */\n/*! Production::    fetch_next : fetch_next_percent */\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROW */\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROWS */\n/*! Production::    fetch_next_expr : FETCH FIRST ROW */\n/*! Production::    fetch_next_expr : FETCH NEXT ROWS */\n```\n\n----------------------------------------\n\nTITLE: Defining DDL Statement Production Rules in MySQL Grammar\nDESCRIPTION: These rules define the syntax for various Data Definition Language (DDL) statements in MySQL, including CREATE, ALTER, DROP, and TRUNCATE operations for different database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_67\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterDatabase */\n\n/*! Production::    ddlStatement : alterEvent */\n\n/*! Production::    ddlStatement : alterFunction */\n\n/*! Production::    ddlStatement : alterInstance */\n\n/*! Production::    ddlStatement : alterLogfileGroup */\n\n/*! Production::    ddlStatement : alterProcedure */\n\n/*! Production::    ddlStatement : alterServer */\n\n/*! Production::    ddlStatement : alterTable */\n\n/*! Production::    ddlStatement : alterTablespace */\n\n/*! Production::    ddlStatement : alterView */\n\n/*! Production::    ddlStatement : createDatabase */\n\n/*! Production::    ddlStatement : createEvent */\n\n/*! Production::    ddlStatement : createFunction */\n\n/*! Production::    ddlStatement : createIndex */\n\n/*! Production::    ddlStatement : createLogfileGroup */\n\n/*! Production::    ddlStatement : createProcedure */\n\n/*! Production::    ddlStatement : createServer */\n\n/*! Production::    ddlStatement : createTable */\n\n/*! Production::    ddlStatement : createTablespaceInnodb */\n\n/*! Production::    ddlStatement : createTablespaceNdb */\n\n/*! Production::    ddlStatement : createTrigger */\n\n/*! Production::    ddlStatement : createView */\n\n/*! Production::    ddlStatement : dropDatabase */\n\n/*! Production::    ddlStatement : dropEvent */\n\n/*! Production::    ddlStatement : dropFunction */\n\n/*! Production::    ddlStatement : dropIndex */\n\n/*! Production::    ddlStatement : dropLogfileGroup */\n\n/*! Production::    ddlStatement : dropProcedure */\n\n/*! Production::    ddlStatement : dropServer */\n\n/*! Production::    ddlStatement : dropTable */\n\n/*! Production::    ddlStatement : dropTablespace */\n\n/*! Production::    ddlStatement : dropTrigger */\n\n/*! Production::    ddlStatement : dropView */\n\n/*! Production::    ddlStatement : renameTable */\n\n/*! Production::    ddlStatement : truncateTable */\n```\n\n----------------------------------------\n\nTITLE: XA Transaction Productions\nDESCRIPTION: Grammar productions for XA distributed transaction statements including start, commit, end, prepare and rollback operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_197\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    xa_begin_stmt : XA START STRING_VALUE */\n/*! Production::    xa_commit_stmt : XA COMMIT STRING_VALUE */\n/*! Production::    xa_end_stmt : XA END STRING_VALUE */\n/*! Production::    xa_prepare_stmt : XA PREPARE STRING_VALUE */\n/*! Production::    xa_rollback_stmt : XA ROLLBACK STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Defining Timing Points in SQL Triggers\nDESCRIPTION: These productions define various timing points for SQL triggers, including BEFORE and AFTER conditions for rows and statements, as well as INSTEAD OF for rows.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_199\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    timing_point : AFTER EACH ROW */\n\n/*! Production::    timing_point : AFTER STATEMENT */\n\n/*! Production::    timing_point : BEFORE EACH ROW */\n\n/*! Production::    timing_point : BEFORE STATEMENT */\n\n/*! Production::    timing_point : INSTEAD OF EACH ROW */\n\n/*! Production::    timing_point_section : timing_point IS tps_body timing_point */\n\n/*! Production::    timing_point_section_list : timing_point_section */\n\n/*! Production::    timing_point_section_list : timing_point_section_list \",\" timing_point_section */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Throttle Options in SQL Grammar\nDESCRIPTION: These production rules define optional throttling conditions for SQL statements, including priority-based throttling and custom metrics.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_99\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_sql_throttle_for_priority : %epsilon */\n\n/*! Production::    opt_sql_throttle_for_priority : FOR PRIORITY COMP_LE INTNUM */\n\n/*! Production::    opt_sql_throttle_using_cond : USING sql_throttle_one_or_more_metrics */\n```\n\n----------------------------------------\n\nTITLE: Configuring PIP Mirror for DB-GPT Docker Build\nDESCRIPTION: Command to use a specific PIP index URL for package installation during DB-GPT Docker image building.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --pip-index-url https://pypi.org/simple\n```\n\n----------------------------------------\n\nTITLE: Creating Package and Procedure Statements in SQL\nDESCRIPTION: Specifies syntax for creating package bodies, packages, and procedures with optional editionable attributes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_package_body_stmt : CREATE opt_replace opt_editionable package_body_block\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_package_stmt : CREATE opt_replace opt_editionable package_block\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_procedure_stmt : CREATE opt_replace opt_editionable plsql_procedure_source\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Keyword Identifier: MASTER_PASSWORD\nDESCRIPTION: This snippet defines the MASTER_PASSWORD keyword identifier used to specify the password for connecting to the master server in MySQL replication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_187\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simpleId : MASTER_PASSWORD */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Grammar Productions for Various SQL Statements\nDESCRIPTION: This snippet defines grammar productions for multiple MySQL statements and clauses, including SHOW, ALTER, SHUTDOWN, SIGNAL, and various identifier types. It specifies the syntax structure for these SQL elements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_184\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW opt_scope STATUS opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_scope VARIABLES opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_storage ENGINES */\n\n/*! Production::    shrink_space_stmt : ALTER TABLE relation_factor SHRINK SPACE */\n\n/*! Production::    shrink_space_stmt : ALTER TENANT ALL SHRINK SPACE */\n\n/*! Production::    shrink_space_stmt : ALTER TENANT relation_name SHRINK SPACE */\n\n/*! Production::    shutdownStatement : SHUTDOWN */\n\n/*! Production::    signValue : ID */\n\n/*! Production::    signValue : REVERSE_QUOTE_ID */\n\n/*! Production::    signValue : SQLSTATE opt_VALUE stringLiteral */\n\n/*! Production::    signalConditionInformation : signalConditionLeft EQUAL_SYMBOL signalConditionRight */\n\n/*! Production::    signalConditionInformations : signalConditionInformation */\n\n/*! Production::    signalConditionInformations : signalConditionInformation COMMA signalConditionInformations */\n\n/*! Production::    signalConditionLeft : CATALOG_NAME */\n\n/*! Production::    signalConditionLeft : CLASS_ORIGIN */\n\n/*! Production::    signalConditionLeft : COLUMN_NAME */\n\n/*! Production::    signalConditionLeft : CONSTRAINT_CATALOG */\n\n/*! Production::    signalConditionLeft : CONSTRAINT_NAME */\n\n/*! Production::    signalConditionLeft : CONSTRAINT_SCHEMA */\n\n/*! Production::    signalConditionLeft : CURSOR_NAME */\n\n/*! Production::    signalConditionLeft : MESSAGE_TEXT */\n\n/*! Production::    signalConditionLeft : MYSQL_ERRNO */\n\n/*! Production::    signalConditionLeft : SCHEMA_NAME */\n\n/*! Production::    signalConditionLeft : SUBCLASS_ORIGIN */\n\n/*! Production::    signalConditionLeft : TABLE_NAME */\n\n/*! Production::    signalConditionRight : DECIMAL_LITERAL */\n\n/*! Production::    signalConditionRight : mysqlVariable */\n\n/*! Production::    signalConditionRight : simpleId */\n\n/*! Production::    signalConditionRight : stringLiteral */\n\n/*! Production::    signalStatement : SIGNAL signValue opt_setSignalConditionInformations */\n\n/*! Production::    signed_int_num : \"-\" INTNUM */\n\n/*! Production::    signed_int_num : INTNUM */\n\n/*! Production::    signed_literal : \"+\" number_literal */\n\n/*! Production::    signed_literal : \"-\" number_literal */\n\n/*! Production::    signed_literal : literal */\n\n/*! Production::    signed_literal_params : \"(\" signed_literal_params \")\" */\n\n/*! Production::    signed_literal_params : signed_literal */\n\n/*! Production::    simpleDescribeStatement : descKeyword tableName */\n\n/*! Production::    simpleDescribeStatement : descKeyword tableName uid */\n\n/*! Production::    simpleId : ACCOUNT */\n\n/*! Production::    simpleId : ACTION */\n\n/*! Production::    simpleId : AFTER */\n\n/*! Production::    simpleId : AGGREGATE */\n\n/*! Production::    simpleId : ALGORITHM */\n\n/*! Production::    simpleId : ANY */\n\n/*! Production::    simpleId : ARCHIVE */\n\n/*! Production::    simpleId : AT */\n\n/*! Production::    simpleId : AUDIT_ADMIN */\n\n/*! Production::    simpleId : AUTHORS */\n\n/*! Production::    simpleId : AUTOCOMMIT */\n\n/*! Production::    simpleId : AUTOEXTEND_SIZE */\n\n/*! Production::    simpleId : AUTO_INCREMENT */\n\n/*! Production::    simpleId : AVG */\n\n/*! Production::    simpleId : AVG_ROW_LENGTH */\n\n/*! Production::    simpleId : BACKUP_ADMIN */\n\n/*! Production::    simpleId : BEGIN */\n\n/*! Production::    simpleId : BINLOG */\n\n/*! Production::    simpleId : BINLOG_ADMIN */\n\n/*! Production::    simpleId : BINLOG_ENCRYPTION_ADMIN */\n\n/*! Production::    simpleId : BIT */\n\n/*! Production::    simpleId : BIT_AND */\n\n/*! Production::    simpleId : BIT_OR */\n\n/*! Production::    simpleId : BIT_XOR */\n\n/*! Production::    simpleId : BLACKHOLE */\n\n/*! Production::    simpleId : BLOCK */\n\n/*! Production::    simpleId : BOOL */\n\n/*! Production::    simpleId : BOOLEAN */\n\n/*! Production::    simpleId : BTREE */\n\n/*! Production::    simpleId : CACHE */\n\n/*! Production::    simpleId : CASCADED */\n\n/*! Production::    simpleId : CATALOG_NAME */\n\n/*! Production::    simpleId : CHAIN */\n\n/*! Production::    simpleId : CHANGED */\n\n/*! Production::    simpleId : CHANNEL */\n\n/*! Production::    simpleId : CHECKSUM */\n\n/*! Production::    simpleId : CIPHER */\n\n/*! Production::    simpleId : CLASS_ORIGIN */\n\n/*! Production::    simpleId : CLIENT */\n\n/*! Production::    simpleId : CLONE_ADMIN */\n\n/*! Production::    simpleId : CLOSE */\n\n/*! Production::    simpleId : COALESCE */\n\n/*! Production::    simpleId : CODE */\n\n/*! Production::    simpleId : COLUMNS */\n\n/*! Production::    simpleId : COLUMN_FORMAT */\n\n/*! Production::    simpleId : COLUMN_NAME */\n\n/*! Production::    simpleId : COMMENT */\n\n/*! Production::    simpleId : COMMIT */\n\n/*! Production::    simpleId : COMPACT */\n\n/*! Production::    simpleId : COMPLETION */\n\n/*! Production::    simpleId : COMPRESSED */\n\n/*! Production::    simpleId : COMPRESSION */\n\n/*! Production::    simpleId : CONCURRENT */\n\n/*! Production::    simpleId : CONNECTION */\n\n/*! Production::    simpleId : CONNECTION_ADMIN */\n\n/*! Production::    simpleId : CONSISTENT */\n\n/*! Production::    simpleId : CONSTRAINT_CATALOG */\n\n/*! Production::    simpleId : CONSTRAINT_NAME */\n\n/*! Production::    simpleId : CONSTRAINT_SCHEMA */\n\n/*! Production::    simpleId : CONTAINS */\n\n/*! Production::    simpleId : CONTEXT */\n\n/*! Production::    simpleId : CONTRIBUTORS */\n\n/*! Production::    simpleId : COPY */\n\n/*! Production::    simpleId : CPU */\n\n/*! Production::    simpleId : CSV */\n\n/*! Production::    simpleId : CURRENT */\n\n/*! Production::    simpleId : CURSOR_NAME */\n\n/*! Production::    simpleId : DATA */\n\n/*! Production::    simpleId : DATAFILE */\n\n/*! Production::    simpleId : DATETIME */\n\n/*! Production::    simpleId : DEALLOCATE */\n\n/*! Production::    simpleId : DEFAULT_AUTH */\n\n/*! Production::    simpleId : DEFINER */\n\n/*! Production::    simpleId : DELAY_KEY_WRITE */\n\n/*! Production::    simpleId : DES_KEY_FILE */\n\n/*! Production::    simpleId : DIAGNOSTICS */\n\n/*! Production::    simpleId : DIRECTORY */\n\n/*! Production::    simpleId : DISABLE */\n\n/*! Production::    simpleId : DISCARD */\n\n/*! Production::    simpleId : DISK */\n\n/*! Production::    simpleId : DO */\n\n/*! Production::    simpleId : DUMPFILE */\n\n/*! Production::    simpleId : DUPLICATE */\n\n/*! Production::    simpleId : DYNAMIC */\n\n/*! Production::    simpleId : ENABLE */\n\n/*! Production::    simpleId : ENCRYPTION */\n\n/*! Production::    simpleId : ENCRYPTION_KEY_ADMIN */\n\n/*! Production::    simpleId : END */\n\n/*! Production::    simpleId : ENDS */\n\n/*! Production::    simpleId : ENGINE */\n\n/*! Production::    simpleId : ENGINES */\n\n/*! Production::    simpleId : ENUM */\n\n/*! Production::    simpleId : ERROR */\n\n/*! Production::    simpleId : ERRORS */\n\n/*! Production::    simpleId : ESCAPE */\n\n/*! Production::    simpleId : EVEN */\n\n/*! Production::    simpleId : EVENT */\n\n/*! Production::    simpleId : EVENTS */\n\n/*! Production::    simpleId : EVERY */\n\n/*! Production::    simpleId : EXCHANGE */\n\n/*! Production::    simpleId : EXCLUSIVE */\n\n/*! Production::    simpleId : EXPIRE */\n\n/*! Production::    simpleId : EXPORT */\n\n/*! Production::    simpleId : EXTENDED */\n\n/*! Production::    simpleId : EXTENT_SIZE */\n\n/*! Production::    simpleId : FAST */\n\n/*! Production::    simpleId : FAULTS */\n\n/*! Production::    simpleId : FEDERATED */\n\n/*! Production::    simpleId : FIELDS */\n\n/*! Production::    simpleId : FILE_BLOCK_SIZE */\n\n/*! Production::    simpleId : FILTER */\n\n/*! Production::    simpleId : FIREWALL_ADMIN */\n\n/*! Production::    simpleId : FIREWALL_USER */\n\n/*! Production::    simpleId : FIRST */\n\n/*! Production::    simpleId : FIXED */\n\n/*! Production::    simpleId : FLUSH */\n\n/*! Production::    simpleId : FOLLOWS */\n\n/*! Production::    simpleId : FOUND */\n\n/*! Production::    simpleId : FULL */\n\n/*! Production::    simpleId : FUNCTION */\n\n/*! Production::    simpleId : GENERAL */\n\n/*! Production::    simpleId : GLOBAL */\n\n/*! Production::    simpleId : GRANTS */\n\n/*! Production::    simpleId : GROUP_CONCAT */\n\n/*! Production::    simpleId : GROUP_REPLICATION */\n\n/*! Production::    simpleId : GROUP_REPLICATION_ADMIN */\n\n/*! Production::    simpleId : HANDLER */\n\n/*! Production::    simpleId : HASH */\n\n/*! Production::    simpleId : HELP */\n\n/*! Production::    simpleId : HOST */\n\n/*! Production::    simpleId : HOSTS */\n\n/*! Production::    simpleId : ID */\n\n/*! Production::    simpleId : IDENTIFIED */\n\n/*! Production::    simpleId : IGNORE_SERVER_IDS */\n\n/*! Production::    simpleId : IMPORT */\n\n/*! Production::    simpleId : INDEXES */\n\n/*! Production::    simpleId : INITIAL_SIZE */\n\n/*! Production::    simpleId : INNODB */\n\n/*! Production::    simpleId : INNODB_REDO_LOG_ARCHIVE */\n\n/*! Production::    simpleId : INPLACE */\n\n/*! Production::    simpleId : INSERT_METHOD */\n\n/*! Production::    simpleId : INSTALL */\n\n/*! Production::    simpleId : INSTANCE */\n\n/*! Production::    simpleId : INTERNAL */\n\n/*! Production::    simpleId : INVOKER */\n\n/*! Production::    simpleId : IO */\n\n/*! Production::    simpleId : IO_THREAD */\n\n/*! Production::    simpleId : IPC */\n\n/*! Production::    simpleId : ISOLATION */\n\n/*! Production::    simpleId : ISSUER */\n\n/*! Production::    simpleId : JSON */\n\n/*! Production::    simpleId : KEY_BLOCK_SIZE */\n\n/*! Production::    simpleId : LANGUAGE */\n\n/*! Production::    simpleId : LAST */\n\n/*! Production::    simpleId : LEAVES */\n\n/*! Production::    simpleId : LESS */\n\n/*! Production::    simpleId : LEVEL */\n\n/*! Production::    simpleId : LIST */\n\n/*! Production::    simpleId : LOCAL */\n\n/*! Production::    simpleId : LOGFILE */\n\n/*! Production::    simpleId : LOGS */\n\n/*! Production::    simpleId : MASTER */\n\n/*! Production::    simpleId : MASTER_AUTO_POSITION */\n\n/*! Production::    simpleId : MASTER_CONNECT_RETRY */\n\n/*! Production::    simpleId : MASTER_DELAY */\n\n/*! Production::    simpleId : MASTER_HEARTBEAT_PERIOD */\n\n/*! Production::    simpleId : MASTER_HOST */\n```\n\n----------------------------------------\n\nTITLE: Load Data Productions\nDESCRIPTION: Grammar rules for LOAD DATA statements including file loading, charset options, and extended loading options\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_83\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    load_data_stmt : load_data_with_opt_hint opt_load_local INFILE STRING_VALUE opt_duplicate INTO TABLE relation_factor opt_use_partition opt_load_charset field_opt line_opt opt_load_ignore_rows opt_field_or_var_spec opt_load_set_spec opt_load_data_extended_option_list */\n\n/*! Production::    load_data_with_opt_hint : LOAD DATA */\n\n/*! Production::    load_data_with_opt_hint : LOAD_DATA_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Database Operations\nDESCRIPTION: Defines formal grammar productions for SQL operations like TRANSPOSE, TRIGGER, TRUNCATE, TYPE definitions, UNION operations and unreserved keywords. Uses BNF-style notation with Production:: prefix.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_180\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    transform_hint : WIN_MAGIC opt_qb_name */\n\n/*! Production::    transpose_clause : PIVOT \"(\" pivot_aggr_clause transpose_for_clause transpose_in_clause \")\" */\n\n/*! Production::    transpose_clause : PIVOT \"(\" pivot_aggr_clause transpose_for_clause transpose_in_clause \")\" relation_name */\n\n/*! Production::    transpose_clause : UNPIVOT opt_unpivot_include \"(\" unpivot_column_clause transpose_for_clause unpivot_in_clause \")\" */\n\n/*! Production::    transpose_clause : UNPIVOT opt_unpivot_include \"(\" unpivot_column_clause transpose_for_clause unpivot_in_clause \")\" relation_name */\n\n/*! Production::    transpose_for_clause : FOR \"(\" column_name_list \")\" */\n\n/*! Production::    transpose_for_clause : FOR column_name */\n\n/*! Production::    transpose_in_arg : bit_expr */\n\n/*! Production::    transpose_in_arg : bit_expr AS relation_name */\n\n/*! Production::    transpose_in_arg : bit_expr relation_name */\n\n/*! Production::    transpose_in_args : transpose_in_arg */\n\n/*! Production::    transpose_in_args : transpose_in_args \",\" transpose_in_arg */\n\n/*! Production::    transpose_in_clause : IN \"(\" transpose_in_args \")\" */\n\n/*! Production::    triggerEvent : DELETE */\n\n/*! Production::    triggerEvent : INSERT */\n\n/*! Production::    triggerEvent : UPDATE */\n\n/*! Production::    triggerPlace : FOLLOWS */\n\n/*! Production::    triggerPlace : PRECEDES */\n\n/*! Production::    triggerTime : AFTER */\n\n/*! Production::    triggerTime : BEFORE */\n\n/*! Production::    trigger_definition : compound_dml_trigger */\n\n/*! Production::    trigger_definition : simple_dml_trigger */\n\n/*! Production::    trimType : BOTH */\n\n/*! Production::    trimType : LEADING */\n\n/*! Production::    trimType : TRAILING */\n\n/*! Production::    truncateTable : TRUNCATE TABLE tableName */\n\n/*! Production::    truncateTable : TRUNCATE tableName */\n\n/*! Production::    truncate_table_stmt : TRUNCATE opt_table relation_factor */\n\n/*! Production::    type_def : collection_type_def */\n\n/*! Production::    type_def : record_type_def */\n\n/*! Production::    type_def : ref_cursor_type_def */\n\n/*! Production::    type_name : NAME_OB */\n\n/*! Production::    type_name : identifier */\n\n/*! Production::    type_or_self : SELF AS RESULT */\n\n/*! Production::    type_or_self : pl_outer_data_type */\n\n/*! Production::    udf_pragma : PRAGMA UDF */\n\n/*! Production::    udt_type : database_name \".\" type_name */\n\n/*! Production::    udt_type : type_name */\n\n/*! Production::    uid : CHARSET_REVERSE_QOUTE_STRING */\n\n/*! Production::    uid : simpleId */\n\n/*! Production::    uidColumndefintions : uid columnDefinition */\n\n/*! Production::    uidColumndefintions : uid columnDefinition COMMA uidColumndefintions */\n\n/*! Production::    uidList : uid */\n\n/*! Production::    uidList : uid COMMA uidList */\n\n/*! Production::    unary_expr : \"+\" simple_expr */\n\n/*! Production::    unary_expr : \"-\" simple_expr */\n\n/*! Production::    unary_expr : simple_expr */\n\n/*! Production::    uninstallPlugin : UNINSTALL PLUGIN uid */\n\n/*! Production::    unionParenthesis : UNION unionType queryExpressionNointo */\n\n/*! Production::    unionParenthesises : unionParenthesis */\n\n/*! Production::    unionParenthesises : unionParenthesis unionParenthesises */\n\n/*! Production::    unionStatement : UNION unionType queryExpressionNointo */\n\n/*! Production::    unionStatement : UNION unionType querySpecificationNointo */\n\n/*! Production::    unionStatements : unionStatement */\n\n/*! Production::    unionStatements : unionStatement unionStatements */\n\n/*! Production::    unionType : %epsilon */\n\n/*! Production::    unionType : ALL */\n\n/*! Production::    unionType : DISTINCT */\n\n/*! Production::    unit_id_list : INTNUM */\n\n/*! Production::    unit_id_list : unit_id_list \",\" INTNUM */\n\n/*! Production::    unit_kind : FUNCTION */\n\n/*! Production::    unit_kind : PACKAGE_P */\n\n/*! Production::    unit_kind : PROCEDURE */\n\n/*! Production::    unit_kind : TRIGGER */\n\n/*! Production::    unit_kind : TYPE */\n\n/*! Production::    unit_of_size : E */\n\n/*! Production::    unit_of_size : G */\n\n/*! Production::    unit_of_size : K */\n\n/*! Production::    unit_of_size : M */\n\n/*! Production::    unit_of_size : P */\n\n/*! Production::    unit_of_size : T */\n\n/*! Production::    unlockTables : UNLOCK TABLES */\n\n/*! Production::    unlock_tables_stmt : UNLOCK TABLES */\n\n/*! Production::    unpivot_column_clause : \"(\" column_name_list \")\" */\n\n/*! Production::    unpivot_column_clause : column_name */\n\n/*! Production::    unpivot_in_arg : unpivot_column_clause opt_as_expr */\n\n/*! Production::    unpivot_in_args : unpivot_in_arg */\n\n/*! Production::    unpivot_in_args : unpivot_in_args \",\" unpivot_in_arg */\n\n/*! Production::    unpivot_in_clause : IN \"(\" unpivot_in_args \")\" */\n\n/*! Production::    unreserved_keyword : ob_unreserved_keyword */\n\n/*! Production::    unreserved_keyword : oracle_unreserved_keyword */\n\n/*! Production::    unreserved_keyword : unreserved_keyword_extra */\n\n/*! Production::    unreserved_keyword : unreserved_keyword_normal */\n\n/*! Production::    unreserved_keyword : unreserved_keyword_special */\n\n/*! Production::    unreserved_keyword_extra : ACCESS */\n\n/*! Production::    unreserved_keyword_normal : ACCESSIBLE */\n\n/*! Production::    unreserved_keyword_normal : ACCOUNT */\n\n/*! Production::    unreserved_keyword_normal : ACTION */\n\n/*! Production::    unreserved_keyword_normal : ACTIVATE */\n\n/*! Production::    unreserved_keyword_normal : ACTIVE */\n\n/*! Production::    unreserved_keyword_normal : ADDDATE */\n\n/*! Production::    unreserved_keyword_normal : ADMINISTER */\n\n/*! Production::    unreserved_keyword_normal : AFTER */\n\n/*! Production::    unreserved_keyword_normal : AGAINST */\n\n/*! Production::    unreserved_keyword_normal : AGGREGATE */\n\n/*! Production::    unreserved_keyword_normal : ALGORITHM */\n\n/*! Production::    unreserved_keyword_normal : ALWAYS */\n\n/*! Production::    unreserved_keyword_normal : ANALYSE */\n\n/*! Production::    unreserved_keyword_normal : ANY */\n\n/*! Production::    unreserved_keyword_normal : APPROX_COUNT_DISTINCT */\n\n/*! Production::    unreserved_keyword_normal : APPROX_COUNT_DISTINCT_SYNOPSIS */\n\n/*! Production::    unreserved_keyword_normal : APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE */\n\n/*! Production::    unreserved_keyword_normal : ARBITRATION */\n\n/*! Production::    unreserved_keyword_normal : ARCHIVELOG */\n\n/*! Production::    unreserved_keyword_normal : ASCII */\n\n/*! Production::    unreserved_keyword_normal : ASENSITIVE */\n\n/*! Production::    unreserved_keyword_normal : AT */\n\n/*! Production::    unreserved_keyword_normal : AUDIT */\n\n/*! Production::    unreserved_keyword_normal : AUTHORS */\n\n/*! Production::    unreserved_keyword_normal : AUTO */\n\n/*! Production::    unreserved_keyword_normal : AUTOEXTEND_SIZE */\n\n/*! Production::    unreserved_keyword_normal : AUTO_INCREMENT */\n\n/*! Production::    unreserved_keyword_normal : AUTO_INCREMENT_MODE */\n\n/*! Production::    unreserved_keyword_normal : AVAILABILITY */\n\n/*! Production::    unreserved_keyword_normal : AVG */\n\n/*! Production::    unreserved_keyword_normal : AVG_ROW_LENGTH */\n\n/*! Production::    unreserved_keyword_normal : BACKED */\n\n/*! Production::    unreserved_keyword_normal : BACKUP */\n\n/*! Production::    unreserved_keyword_normal : BACKUPPIECE */\n\n/*! Production::    unreserved_keyword_normal : BACKUPROUND */\n\n/*! Production::    unreserved_keyword_normal : BACKUPSET */\n\n/*! Production::    unreserved_keyword_normal : BACKUP_BACKUP_DEST */\n\n/*! Production::    unreserved_keyword_normal : BACKUP_COPIES */\n\n/*! Production::    unreserved_keyword_normal : BADFILE */\n\n/*! Production::    unreserved_keyword_normal : BALANCE */\n\n/*! Production::    unreserved_keyword_normal : BANDWIDTH */\n\n/*! Production::    unreserved_keyword_normal : BASE */\n\n/*! Production::    unreserved_keyword_normal : BASELINE */\n\n/*! Production::    unreserved_keyword_normal : BASELINE_ID */\n\n/*! Production::    unreserved_keyword_normal : BASIC */\n\n/*! Production::    unreserved_keyword_normal : BEGI */\n\n/*! Production::    unreserved_keyword_normal : BINARY */\n\n/*! Production::    unreserved_keyword_normal : BINARY_DOUBLE */\n\n/*! Production::    unreserved_keyword_normal : BINARY_FLOAT */\n\n/*! Production::    unreserved_keyword_normal : BINDING */\n\n/*! Production::    unreserved_keyword_normal : BINLOG */\n\n/*! Production::    unreserved_keyword_normal : BISON_LIST */\n\n/*! Production::    unreserved_keyword_normal : BIT */\n\n/*! Production::    unreserved_keyword_normal : BIT_AND */\n\n/*! Production::    unreserved_keyword_normal : BIT_OR */\n\n/*! Production::    unreserved_keyword_normal : BIT_XOR */\n\n/*! Production::    unreserved_keyword_normal : BLOB */\n\n/*! Production::    unreserved_keyword_normal : BLOCK */\n\n/*! Production::    unreserved_keyword_normal : BLOCK_INDEX */\n\n/*! Production::    unreserved_keyword_normal : BLOCK_SIZE */\n\n/*! Production::    unreserved_keyword_normal : BLOOM_FILTER */\n\n/*! Production::    unreserved_keyword_normal : BOOL */\n\n/*! Production::    unreserved_keyword_normal : BOOLEAN */\n\n/*! Production::    unreserved_keyword_normal : BOOTSTRAP */\n\n/*! Production::    unreserved_keyword_normal : BOTH */\n\n/*! Production::    unreserved_keyword_normal : BREADTH */\n\n/*! Production::    unreserved_keyword_normal : BTREE */\n\n/*! Production::    unreserved_keyword_normal : BUCKETS */\n\n/*! Production::    unreserved_keyword_normal : BULK */\n\n/*! Production::    unreserved_keyword_normal : BULK_EXCEPTIONS */\n\n/*! Production::    unreserved_keyword_normal : BULK_ROWCOUNT */\n\n/*! Production::    unreserved_keyword_normal : BYTE */\n\n/*! Production::    unreserved_keyword_normal : CACHE */\n\n/*! Production::    unreserved_keyword_normal : CALC_PARTITION_ID */\n\n/*! Production::    unreserved_keyword_normal : CALIBRATION */\n\n/*! Production::    unreserved_keyword_normal : CALIBRATION_INFO */\n\n/*! Production::    unreserved_keyword_normal : CALL */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Insert Operations\nDESCRIPTION: These production rules define optional clauses for SQL INSERT operations, including priority settings, partitioning options, and column specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_125\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_insertPriority : %epsilon */\n\n/*! Production::    opt_insertPriority : DELAYED */\n\n/*! Production::    opt_insertPriority : HIGH_PRIORITY */\n\n/*! Production::    opt_insertPriority : LOW_PRIORITY */\n\n/*! Production::    opt_insertStatement_partition : %epsilon */\n\n/*! Production::    opt_insertStatement_partition : PARTITION LR_BRACKET RR_BRACKET */\n\n/*! Production::    opt_insertStatement_partition : PARTITION LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_insert_columns : \"(\" column_list \")\" */\n\n/*! Production::    opt_insert_columns : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: Defining Oracle Unreserved Keywords\nDESCRIPTION: This snippet lists Oracle unreserved keywords. These are words that have special meaning in Oracle SQL but can also be used as identifiers without quoting.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_116\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    oracle_unreserved_keyword : FOREIGN */\n/*! Production::    oracle_unreserved_keyword : FORTRAN */\n/*! Production::    oracle_unreserved_keyword : FOUND */\n// ... (truncated for brevity)\n/*! Production::    oracle_unreserved_keyword : WRITE */\n/*! Production::    oracle_unreserved_keyword : YES */\n```\n\n----------------------------------------\n\nTITLE: Defining Partition-Related SQL Productions\nDESCRIPTION: This snippet defines production rules for various partition-related SQL constructs, including partition definitions, function definitions, and options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_109\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    partitionDefinition : PARTITION uid VALUES IN LR_BRACKET partitionDefinerAtoms RR_BRACKET opt_partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES IN LR_BRACKET partitionDefinerVectors RR_BRACKET opt_partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES LESS THAN LR_BRACKET partitionDefinerAtoms RR_BRACKET opt_partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES LESS THAN partitionDefinerAtom opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES LESS THAN partitionDefinerAtom partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid opt_partitionOptions opt_subpartitionDefinitions */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Check and Checksum Operations in SQL\nDESCRIPTION: This snippet defines productions for CHECK TABLE and CHECKSUM TABLE operations in SQL, including various options for these operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    checkTable : CHECK TABLE tables */\n\n/*! Production::    checkTable : CHECK TABLE tables checkTableOptions */\n\n/*! Production::    checkTableOption : CHANGED */\n\n/*! Production::    checkTableOption : EXTENDED */\n\n/*! Production::    checkTableOption : FAST */\n\n/*! Production::    checkTableOption : FOR UPGRADE */\n\n/*! Production::    checkTableOption : MEDIUM */\n\n/*! Production::    checkTableOption : QUICK */\n\n/*! Production::    checkTableOptions : checkTableOption */\n\n/*! Production::    checkTableOptions : checkTableOption checkTableOptions */\n\n/*! Production::    check_state : ENFORCED */\n\n/*! Production::    check_state : NOT ENFORCED */\n\n/*! Production::    checksumActionType : %epsilon */\n\n/*! Production::    checksumActionType : EXTENDED */\n\n/*! Production::    checksumActionType : QUICK */\n\n/*! Production::    checksumTable : CHECKSUM TABLE tables checksumActionType */\n```\n\n----------------------------------------\n\nTITLE: Flashback Statement Grammar Rules\nDESCRIPTION: Grammar productions defining syntax for flashback operations on tables, tenants and databases.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_80\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    flashback_stmt : FLASHBACK TABLE relation_factor TO BEFORE DROP opt_flashback_rename_table */\n/*! Production::    flashback_stmt : FLASHBACK TABLE relation_factors TO SCN bit_expr */\n/*! Production::    flashback_stmt : FLASHBACK TENANT relation_name TO BEFORE DROP opt_flashback_rename_tenant */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Select Statement Production Rules\nDESCRIPTION: This snippet defines multiple production rules for SQL select statements, covering various forms and combinations of clauses such as UNION, ORDER BY, LIMIT, and locking options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_138\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    selectStatement : queryExpressionNointo unionParenthesises UNION unionType queryExpression opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : queryExpressionNointo unionParenthesises opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : querySpecification opt_lockClause */\n\n/*! Production::    selectStatement : querySpecificationNointo unionStatements UNION unionType queryExpression opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : querySpecificationNointo unionStatements UNION unionType querySpecification opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : querySpecificationNointo unionStatements opt_orderByClause opt_limitClause opt_lockClause */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Function Name Base Productions for Various Operations\nDESCRIPTION: This snippet defines production rules for SQL function name bases covering a wide range of operations, including string manipulation, mathematical functions, and geometric operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_90\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    functionNameBase : FIELD */\n\n/*! Production::    functionNameBase : FIND_IN_SET */\n\n/*! Production::    functionNameBase : FLOOR */\n\n/*! Production::    functionNameBase : FORMAT */\n\n/*! Production::    functionNameBase : FOUND_ROWS */\n\n/*! Production::    functionNameBase : FROM_BASE64 */\n\n/*! Production::    functionNameBase : FROM_DAYS */\n\n/*! Production::    functionNameBase : FROM_UNIXTIME */\n\n/*! Production::    functionNameBase : GEOMCOLLFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMCOLLFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTION */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTIONFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTIONFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMETRYFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYN */\n\n/*! Production::    functionNameBase : GEOMETRYTYPE */\n\n/*! Production::    functionNameBase : GEOMFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMFROMWKB */\n\n/*! Production::    functionNameBase : GET_FORMAT */\n\n/*! Production::    functionNameBase : GET_LOCK */\n\n/*! Production::    functionNameBase : GLENGTH */\n\n/*! Production::    functionNameBase : GREATEST */\n\n/*! Production::    functionNameBase : GTID_SUBSET */\n\n/*! Production::    functionNameBase : GTID_SUBTRACT */\n\n/*! Production::    functionNameBase : HEX */\n\n/*! Production::    functionNameBase : HOUR */\n\n/*! Production::    functionNameBase : IFNULL */\n\n/*! Production::    functionNameBase : INET6_ATON */\n\n/*! Production::    functionNameBase : INET6_NTOA */\n\n/*! Production::    functionNameBase : INET_ATON */\n\n/*! Production::    functionNameBase : INET_NTOA */\n\n/*! Production::    functionNameBase : INSTR */\n\n/*! Production::    functionNameBase : INTERIORRINGN */\n\n/*! Production::    functionNameBase : INTERSECTS */\n\n/*! Production::    functionNameBase : INVISIBLE */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER RESOURCE POOL Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for altering resource pools, including options for unit configuration, zone lists, and pool merging or splitting.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_resource_pool_option : UNIT opt_equal_mark relation_name_or_string */\n\n/*! Production::    alter_resource_pool_option : UNIT_NUM opt_equal_mark INTNUM opt_shrink_unit_option */\n\n/*! Production::    alter_resource_pool_option : ZONE_LIST opt_equal_mark \"(\" zone_list \")\" */\n\n/*! Production::    alter_resource_pool_option_list : alter_resource_pool_option */\n\n/*! Production::    alter_resource_pool_option_list : alter_resource_pool_option_list \",\" alter_resource_pool_option */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL MERGE \"(\" resource_pool_list \")\" INTO \"(\" resource_pool_list \")\" */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL relation_name SPLIT INTO \"(\" resource_pool_list \")\" ON \"(\" zone_list \")\" */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL relation_name alter_resource_pool_option_list */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE TENANT relation_name UNIT_NUM opt_equal_mark INTNUM opt_shrink_tenant_unit_option */\n\n/*! Production::    alter_resource_stmt : ALTER RESOURCE UNIT relation_name opt_resource_unit_option_list */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Function Name Base Productions\nDESCRIPTION: This snippet defines production rules for a wide range of SQL function name bases, covering mathematical, string, date/time, and geometric functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_87\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    functionNameBase : ABS */\n\n/*! Production::    functionNameBase : ACOS */\n\n/*! Production::    functionNameBase : ADDDATE */\n\n/*! Production::    functionNameBase : ADDTIME */\n\n/*! Production::    functionNameBase : AES_DECRYPT */\n\n/*! Production::    functionNameBase : AES_ENCRYPT */\n\n/*! Production::    functionNameBase : AREA */\n\n/*! Production::    functionNameBase : ASBINARY */\n\n/*! Production::    functionNameBase : ASIN */\n\n/*! Production::    functionNameBase : ASTEXT */\n\n/*! Production::    functionNameBase : ASWKB */\n\n/*! Production::    functionNameBase : ASWKT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_DECRYPT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_DERIVE */\n\n/*! Production::    functionNameBase : ASYMMETRIC_ENCRYPT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_SIGN */\n\n/*! Production::    functionNameBase : ASYMMETRIC_VERIFY */\n\n/*! Production::    functionNameBase : ATAN */\n\n/*! Production::    functionNameBase : ATAN2 */\n\n/*! Production::    functionNameBase : BENCHMARK */\n\n/*! Production::    functionNameBase : BIN */\n\n/*! Production::    functionNameBase : BIT_COUNT */\n\n/*! Production::    functionNameBase : BIT_LENGTH */\n\n/*! Production::    functionNameBase : BUFFER */\n```\n\n----------------------------------------\n\nTITLE: Configuring DeepSpeed ZeRO-2 with CPU Offloading for Large Models\nDESCRIPTION: A more advanced DeepSpeed configuration using ZeRO stage 2 optimization with CPU offloading. This setup is designed for training larger models by moving optimizer states and gradients to CPU memory when not in use.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/agents_design.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zero_optimization\": {\n    \"stage\": 2,\n    \"offload_optimizer\": {\n      \"device\": \"cpu\"\n    }\n  },\n  \"fp16\": {\n    \"enabled\": true,\n    \"initial_scale_power\": 12\n  },\n  \"optimizer\": {\n    \"type\": \"AdamW\",\n    \"params\": {\n      \"lr\": 2e-5,\n      \"weight_decay\": 0.01\n    }\n  },\n  \"train_micro_batch_size_per_gpu\": 2,\n  \"gradient_accumulation_steps\": 4,\n  \"steps_per_print\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Keywords and Rules Definitions\nDESCRIPTION: A collection of SQL keywords and rules defined using C-style comment syntax. Each rule is marked with /*! Rule:: */ format and defines various SQL elements including keywords, data types, and syntax patterns.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_233\n\nLANGUAGE: c\nCODE:\n```\n/*! Rule::       DES_KEY_FILE */\n\n/*! Rule::       DETERMINISTIC */\n\n/*! Rule::       DIAGNOSTICS */\n\n/*! Rule::       DICTIONARY */\n\n/*! Rule::       DIGITS */\n\n/*! Rule::       DIRECTORY */\n\n/*! Rule::       DISABLE */\n\n/*! Rule::       DISCARD */\n\n/*! Rule::       DISK */\n\n/*! Rule::       DISMOUNT */\n\n/*! Rule::       DISPOSE */\n\n/*! Rule::       DISTINCT */\n\n/*! Rule::       DISTINCTROW */\n\n/*! Rule::       DIV */\n\n/*! Rule::       DO */\n\n/*! Rule::       DOUBLE */\n\n/*! Rule::       DROP */\n\n/*! Rule::       DUMP */\n\n/*! Rule::       DUMPFILE */\n\n/*! Rule::       DUPLICATE */\n\n/*! Rule::       DUPLICATE_SCOPE */\n\n/*! Rule::       DYNAMIC */\n```\n\n----------------------------------------\n\nTITLE: SQL Reference Action Productions\nDESCRIPTION: Production rules defining valid reference actions like SET DEFAULT, SET NULL, and CHECK constraints\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_114\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    reference_action : SET DEFAULT */\n/*! Production::    reference_action : SET NULLX */\n/*! Production::    reference_option : CHECK \"(\" expr \")\" */\n/*! Production::    reference_option : ON DELETE reference_action */\n/*! Production::    reference_option : ON UPDATE reference_action */\n```\n\n----------------------------------------\n\nTITLE: SHOW Profile Type Production Rules in SQL\nDESCRIPTION: Grammar production rules for profile types used in SHOW PROFILE statements to display profiling information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_141\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : ALL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : BLOCK IO */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : CONTEXT SWITCHES */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : CPU */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : IPC */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : MEMORY */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : PAGE FAULTS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : SOURCE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileType : SWAPS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileTypes : showProfileType */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showProfileTypes : showProfileType COMMA showProfileTypes */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Flashback Rename Operations in SQL\nDESCRIPTION: These production rules define optional flashback rename operations for databases, tables, and tenants in SQL. They allow for renaming these objects during flashback operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_115\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_flashback_rename_database : RENAME TO relation_name */\n\n/*! Production::    opt_flashback_rename_table : %epsilon */\n\n/*! Production::    opt_flashback_rename_table : RENAME TO relation_factor */\n\n/*! Production::    opt_flashback_rename_tenant : %epsilon */\n\n/*! Production::    opt_flashback_rename_tenant : RENAME TO relation_name */\n```\n\n----------------------------------------\n\nTITLE: MySQL Join Type Production Rules\nDESCRIPTION: Production rules for LEFT and RIGHT JOIN operations in MySQL, defining the syntax for these join types excluding FULL OUTER JOIN.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_60\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    except_full_outer_join_type : LEFT opt_outer JOIN */\n\n/*! Production::    except_full_outer_join_type : RIGHT opt_outer JOIN */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TABLE and Related Statements in SQL\nDESCRIPTION: This snippet defines the syntax for ALTER TABLE statements and related operations, including modifying columns, constraints, foreign keys, indexes, partitions, and table options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_table_action : CONVERT TO CHARACTER SET charset_name opt_collation */\n\n/*! Production::    alter_table_action : DROP CONSTRAINT constraint_name */\n\n/*! Production::    alter_table_action : RENAME opt_to relation_factor */\n\n/*! Production::    alter_table_action : alter_column_option */\n\n/*! Production::    alter_table_action : alter_constraint_option */\n\n/*! Production::    alter_table_action : alter_foreign_key_action */\n\n/*! Production::    alter_table_action : alter_index_option */\n\n/*! Production::    alter_table_action : alter_partition_option */\n\n/*! Production::    alter_table_action : alter_tablegroup_option */\n\n/*! Production::    alter_table_action : modify_partition_info */\n\n/*! Production::    alter_table_action : opt_alter_compress_option */\n\n/*! Production::    alter_table_action : opt_set table_option_list_space_seperated */\n\n/*! Production::    alter_table_actions : %epsilon */\n\n/*! Production::    alter_table_actions : alter_table_action */\n\n/*! Production::    alter_table_actions : alter_table_actions \",\" alter_table_action */\n\n/*! Production::    alter_table_stmt : ALTER TABLE relation_factor alter_table_actions */\n```\n\n----------------------------------------\n\nTITLE: Defining Complex SQL Patterns\nDESCRIPTION: This snippet shows how more complex SQL patterns, including regular expressions and special string formats, are defined using the rule comment structure.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_205\n\nLANGUAGE: C\nCODE:\n```\n/*! Rule::       Timestamp{whitespace}?\"[^\\\"]* */\n\n/*! Rule::       Timestamp{whitespace}?'[^']*' */\n\n/*! Rule::       Timestamp{whitespace}?'[^\\']*' */\n\n/*! Rule::       Time{whitespace}?\"[^\\\"]* */\n\n/*! Rule::       Time{whitespace}?'[^']*' */\n```\n\n----------------------------------------\n\nTITLE: Rendering Serve Configuration Details in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to render the configuration details for the evaluate serve module. It includes parameters for API keys, embedding model, and similarity search settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_8839e0.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the evaluate serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    },\n    {\n      \"name\": \"embedding_model\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Embedding Model\",\n      \"defaultValue\": \"None\"\n    },\n    {\n      \"name\": \"similarity_top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"knowledge search top k\",\n      \"defaultValue\": \"10\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: SQL Join Syntax Productions\nDESCRIPTION: Grammar rules for various join operations in SQL, including inner joins and join conditions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_102\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    innerJoinBody : %epsilon */\n\n/*! Production::    innerJoinBody : ON expression */\n\n/*! Production::    innerJoinBody : USING LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    inner_call_stmt : pl_obj_access_ref */\n\n/*! Production::    inner_join_type : CROSS JOIN */\n\n/*! Production::    inner_join_type : INNER JOIN */\n\n/*! Production::    inner_join_type : JOIN */\n```\n\n----------------------------------------\n\nTITLE: Defining Select Statement Components Grammar Productions in SQL\nDESCRIPTION: These productions define various components of select statements, including expression lists, subqueries, and options like 'INTO' clauses and 'FOR UPDATE'. They provide the necessary elements to construct complete and complex select statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_121\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_expr_list : projection */\n\n/*! Production::    select_expr_list : select_expr_list \",\" projection */\n\n/*! Production::    select_into : select_no_parens into_clause */\n\n/*! Production::    select_no_parens : select_clause */\n\n/*! Production::    select_no_parens : select_clause opt_for_update */\n\n/*! Production::    select_no_parens : select_clause_set */\n\n/*! Production::    select_no_parens : select_clause_set opt_for_update */\n\n/*! Production::    select_no_parens : select_clause_set_with_order_and_limit opt_for_update */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production Rules\nDESCRIPTION: This snippet showcases multiple SQL grammar production rules. Each rule defines a specific SQL construct or statement, such as limit expressions, line formatting, list expressions, and various SQL commands like LOAD DATA, LOCK TABLES, and MERGE.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_105\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    limit_expr : QUESTIONMARK */\n\n/*! Production::    limit_expr : column_ref */\n\n/*! Production::    line_opt : %epsilon */\n\n/*! Production::    line_opt : LINES line_term_list */\n\n/*! Production::    line_term : STARTING BY STRING_VALUE */\n\n/*! Production::    line_term : TERMINATED BY STRING_VALUE */\n\n/*! Production::    line_term_list : line_term */\n\n/*! Production::    line_term_list : line_term_list line_term */\n\n/*! Production::    linesFormat : LINES */\n\n/*! Production::    linesFormat : ROWS */\n\n/*! Production::    lines_or_rows : LINES */\n\n/*! Production::    lines_or_rows : ROWS */\n\n/*! Production::    list_expr : bit_expr */\n\n/*! Production::    list_expr : expr */\n\n/*! Production::    list_expr : list_expr \",\" bit_expr */\n\n/*! Production::    list_expr : list_expr \",\" expr */\n\n/*! Production::    list_for_group_by : key_for_group_by */\n\n/*! Production::    list_for_group_by : list_for_group_by \",\" key_for_group_by */\n\n/*! Production::    list_partition_element : PARTITION VALUES list_partition_expr opt_part_id opt_physical_attributes_options opt_compress_option opt_subpartition_list */\n\n/*! Production::    list_partition_element : PARTITION relation_factor VALUES IN list_partition_expr opt_part_id opt_engine_option opt_subpartition_list */\n\n/*! Production::    list_partition_element : PARTITION relation_factor VALUES list_partition_expr opt_part_id opt_physical_attributes_options opt_compress_option opt_subpartition_list */\n\n/*! Production::    list_partition_expr : \"(\" DEFAULT \")\" */\n\n/*! Production::    list_partition_expr : \"(\" list_expr \")\" */\n\n/*! Production::    list_partition_list : list_partition_element */\n\n/*! Production::    list_partition_list : list_partition_list \",\" list_partition_element */\n\n/*! Production::    list_partition_option : PARTITION BY BISON_LIST \"(\" expr \")\" subpartition_option opt_partitions opt_list_partition_list */\n\n/*! Production::    list_partition_option : PARTITION BY BISON_LIST COLUMNS \"(\" column_name_list \")\" subpartition_option opt_partitions opt_list_partition_list */\n\n/*! Production::    list_partition_option : PARTITION BY LIST \"(\" column_name_list \")\" subpartition_option opt_list_partition_list */\n\n/*! Production::    list_subpartition_element : SUBPARTITION relation_factor VALUES IN list_partition_expr opt_engine_option */\n\n/*! Production::    list_subpartition_element : SUBPARTITION relation_factor VALUES list_partition_expr opt_physical_attributes_options */\n\n/*! Production::    list_subpartition_list : list_subpartition_element */\n\n/*! Production::    list_subpartition_list : list_subpartition_list \",\" list_subpartition_element */\n\n/*! Production::    literal : APPROXNUM */\n\n/*! Production::    literal : BOOL_VALUE */\n\n/*! Production::    literal : DATE_VALUE */\n\n/*! Production::    literal : DECIMAL_VAL */\n\n/*! Production::    literal : HEX_STRING_VALUE */\n\n/*! Production::    literal : INTERVAL_VALUE */\n\n/*! Production::    literal : INTNUM */\n\n/*! Production::    literal : NULLX */\n\n/*! Production::    literal : TIMESTAMP_VALUE */\n\n/*! Production::    literal : complex_string_literal */\n\n/*! Production::    loadIndexIntoCache : LOAD INDEX INTO CACHE loadedTableIndexesList */\n\n/*! Production::    load_data_extended_option : BADFILE opt_equal_mark STRING_VALUE */\n\n/*! Production::    load_data_extended_option : LOGFILE opt_equal_mark STRING_VALUE */\n\n/*! Production::    load_data_extended_option : REJECT LIMIT opt_equal_mark INTNUM */\n\n/*! Production::    load_data_extended_option_list : load_data_extended_option */\n\n/*! Production::    load_data_extended_option_list : load_data_extended_option load_data_extended_option_list */\n\n/*! Production::    load_data_stmt : load_data_with_opt_hint opt_load_local INFILE STRING_VALUE opt_duplicate INTO TABLE relation_factor opt_use_partition opt_load_charset field_opt line_opt opt_load_ignore_rows opt_field_or_var_spec opt_load_set_spec opt_load_data_extended_option_list */\n\n/*! Production::    load_data_with_opt_hint : LOAD DATA */\n\n/*! Production::    load_data_with_opt_hint : LOAD_DATA_HINT_BEGIN hint_list_with_end */\n\n/*! Production::    load_set_element : column_definition_ref COMP_EQ expr_or_default */\n\n/*! Production::    load_set_list : load_set_element */\n\n/*! Production::    load_set_list : load_set_list \",\" load_set_element */\n\n/*! Production::    loadedTableIndexes : tableName opt_loadedTablePartition opt_loadedTableFormat */\n\n/*! Production::    loadedTableIndexes : tableName opt_loadedTablePartition opt_loadedTableFormat IGNORE LEAVES */\n\n/*! Production::    loadedTableIndexesList : loadedTableIndexes */\n\n/*! Production::    loadedTableIndexesList : loadedTableIndexes COMMA loadedTableIndexesList */\n\n/*! Production::    locality_name : DEFAULT */\n\n/*! Production::    locality_name : STRING_VALUE */\n\n/*! Production::    lockAction : READ opt_LOCAL */\n\n/*! Production::    lockAction : opt_LOW_PRIORITY WRITE */\n\n/*! Production::    lockClause : FOR UPDATE */\n\n/*! Production::    lockClause : LOCK IN SHARE MODE */\n\n/*! Production::    lockTableElement : tableName opt_asUid lockAction */\n\n/*! Production::    lockTableElements : lockTableElement */\n\n/*! Production::    lockTableElements : lockTableElement COMMA lockTableElements */\n\n/*! Production::    lockTables : LOCK TABLES lockTableElements */\n\n/*! Production::    lockType : DEFAULT */\n\n/*! Production::    lockType : EXCLUSIVE */\n\n/*! Production::    lockType : NONE */\n\n/*! Production::    lockType : SHARED */\n\n/*! Production::    lock_spec_mysql57 : LOCK */\n\n/*! Production::    lock_spec_mysql57 : LOCK_ */\n\n/*! Production::    lock_spec_mysql57 : UNLOCK */\n\n/*! Production::    lock_table : relation_factor AS relation_name lock_type */\n\n/*! Production::    lock_table : relation_factor lock_type */\n\n/*! Production::    lock_table : relation_factor opt_as relation_name lock_type */\n\n/*! Production::    lock_table : relation_factor relation_name lock_type */\n\n/*! Production::    lock_table_list : lock_table */\n\n/*! Production::    lock_table_list : lock_table_list \",\" lock_table */\n\n/*! Production::    lock_tables_stmt : LOCK_ table_or_tables lock_table_list */\n\n/*! Production::    lock_type : LOW_PRIORITY WRITE */\n\n/*! Production::    lock_type : READ opt_local */\n\n/*! Production::    lock_type : WRITE */\n\n/*! Production::    lock_user_stmt : ALTER USER user_list ACCOUNT lock_spec_mysql57 */\n\n/*! Production::    logicalOperator : AND */\n\n/*! Production::    logicalOperator : BIT_AND_OP BIT_AND_OP */\n\n/*! Production::    logicalOperator : DOUBLE_BIT_OR_OP */\n\n/*! Production::    logicalOperator : OR */\n\n/*! Production::    logicalOperator : XOR */\n\n/*! Production::    loopStatement : opt_StmtLabel LOOP procedureSqlStatements END LOOP opt_uid */\n\n/*! Production::    lower_bound : for_expr */\n\n/*! Production::    ls : LS opt_equal_mark INTNUM */\n\n/*! Production::    ls_role : DEFAULT */\n\n/*! Production::    ls_role : FOLLOWER */\n\n/*! Production::    ls_role : LEADER */\n\n/*! Production::    ls_server_or_server_or_zone_or_tenant : ip_port opt_tenant_name */\n\n/*! Production::    ls_server_or_server_or_zone_or_tenant : ls ip_port tenant_name */\n\n/*! Production::    ls_server_or_server_or_zone_or_tenant : zone_desc opt_tenant_name */\n\n/*! Production::    map_or_order : MAP */\n\n/*! Production::    map_or_order : ORDER */\n\n/*! Production::    map_order_function_spec : map_or_order MEMBER func_decl */\n\n/*! Production::    map_order_function_spec : map_or_order MEMBER func_def */\n\n/*! Production::    masterOption : IGNORE_SERVER_IDS EQUAL_SYMBOL LR_BRACKET RR_BRACKET */\n\n/*! Production::    masterOption : IGNORE_SERVER_IDS EQUAL_SYMBOL LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    masterOption : MASTER_HEARTBEAT_PERIOD EQUAL_SYMBOL REAL_LITERAL */\n\n/*! Production::    masterOption : boolMasterOption EQUAL_SYMBOL boolNumValue */\n\n/*! Production::    masterOption : decimalMasterOption EQUAL_SYMBOL decimalLiteral */\n\n/*! Production::    masterOption : stringMasterOption EQUAL_SYMBOL STRING_LITERAL */\n\n/*! Production::    masterOptions : masterOption */\n\n/*! Production::    masterOptions : masterOption COMMA masterOptions */\n\n/*! Production::    match_action : FULL */\n\n/*! Production::    match_action : PARTIAL */\n\n/*! Production::    match_action : SIMPLE */\n\n/*! Production::    mathOperator : DIV */\n\n/*! Production::    mathOperator : DIVIDE */\n\n/*! Production::    mathOperator : MINUS */\n\n/*! Production::    mathOperator : MINUSMINUS */\n\n/*! Production::    mathOperator : MOD */\n\n/*! Production::    mathOperator : MODULE */\n\n/*! Production::    mathOperator : PLUS */\n\n/*! Production::    mathOperator : STAR */\n\n/*! Production::    member_or_static : MEMBER */\n\n/*! Production::    member_or_static : STATIC */\n\n/*! Production::    merge_insert_clause : WHEN NOT MATCHED THEN INSERT opt_insert_columns VALUES \"(\" insert_vals \")\" opt_where */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause merge_update_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause merge_insert_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause merge_update_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Levels and Modes in SQL\nDESCRIPTION: These productions define transaction isolation levels and modes in SQL, including READ COMMITTED, REPEATABLE READ, and SERIALIZABLE levels.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_177\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    transactionLevel : READ COMMITTED */\n\n/*! Production::    transactionLevel : READ UNCOMMITTED */\n\n/*! Production::    transactionLevel : REPEATABLE READ */\n\n/*! Production::    transactionLevel : SERIALIZABLE */\n\n/*! Production::    transactionLevelBase : COMMITTED */\n\n/*! Production::    transactionLevelBase : REPEATABLE */\n\n/*! Production::    transactionLevelBase : SERIALIZABLE */\n\n/*! Production::    transactionLevelBase : UNCOMMITTED */\n\n/*! Production::    transactionMode : READ ONLY */\n\n/*! Production::    transactionMode : READ WRITE */\n\n/*! Production::    transactionMode : WITH CONSISTENT SNAPSHOT */\n\n/*! Production::    transactionModes : transactionMode */\n\n/*! Production::    transactionModes : transactionMode COMMA transactionModes */\n```\n\n----------------------------------------\n\nTITLE: Cursor-Related Grammar Productions\nDESCRIPTION: SQL grammar productions defining cursor declarations, attributes, and operations. Includes rules for cursor names, parameters, and loop constructs.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_61\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursor_attribute_bulk_rowcount : BULK_ROWCOUNT \"(\" bit_expr \")\" */\n/*! Production::    cursor_attribute_expr : explicit_cursor_attribute */\n/*! Production::    cursor_attribute_expr : implicit_cursor_attribute */\n/*! Production::    cursor_decl : CURSOR cursor_name opt_sp_param_list return_type */\n/*! Production::    cursor_def : CURSOR cursor_name opt_sp_param_list opt_return_type IS sql_stmt */\n/*! Production::    cursor_for_loop_sql : sql_keyword */\n/*! Production::    cursor_name : identifier */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Diagnostics Statements\nDESCRIPTION: Defines the syntax for GET DIAGNOSTICS statements in MySQL, which retrieve diagnostic information after statement execution.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_51\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    diagnosticsStatement : GET diagnosticsScope DIAGNOSTICS CONDITION decimalLiteral variableClauseAssignCondition */\n\n/*! Production::    diagnosticsStatement : GET diagnosticsScope DIAGNOSTICS CONDITION variableClause variableClauseAssignCondition */\n\n/*! Production::    diagnosticsStatement : GET diagnosticsScope DIAGNOSTICS variableClauseAssignNumber */\n\n/*! Production::    diagnostics_info_ref : column_name */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TABLEGROUP and ALTER TABLESPACE Statements in SQL\nDESCRIPTION: This snippet defines the syntax for ALTER TABLEGROUP and ALTER TABLESPACE statements, including adding tables to tablegroups, modifying tablegroup options, and altering tablespace settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_tablegroup_action : opt_set tablegroup_option_list_space_seperated */\n\n/*! Production::    alter_tablegroup_actions : alter_tablegroup_action */\n\n/*! Production::    alter_tablegroup_actions : alter_tablegroup_actions \",\" alter_tablegroup_action */\n\n/*! Production::    alter_tablegroup_option : DROP TABLEGROUP */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD TABLE table_list */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD opt_table table_list */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD table_list */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name alter_partition_option */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name alter_tablegroup_actions */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name alter_tg_partition_option */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name tg_modify_partition_info */\n\n/*! Production::    alter_tablespace_action : opt_set permanent_tablespace_option */\n\n/*! Production::    alter_tablespace_actions : alter_tablespace_action \",\" alter_tablespace_action */\n\n/*! Production::    alter_tablespace_actions : alter_tablespace_action */\n\n/*! Production::    alter_tablespace_stmt : ALTER TABLESPACE tablespace alter_tablespace_actions */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Optional Clauses\nDESCRIPTION: This snippet defines multiple SQL grammar productions for optional clauses and modifiers. Each production is prefixed with '/*! Production::' and typically follows the format 'opt_<feature> : <options>', where options can be specific keywords, epsilon (empty), or references to other productions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_133\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_sql_security : SQL SECURITY DEFINER */\n\n/*! Production::    opt_sql_security : SQL SECURITY INVOKER */\n\n/*! Production::    opt_sql_throttle_for_priority : %epsilon */\n\n/*! Production::    opt_sql_throttle_for_priority : FOR PRIORITY COMP_LE INTNUM */\n\n/*! Production::    opt_sql_throttle_using_cond : USING sql_throttle_one_or_more_metrics */\n\n/*! Production::    opt_sqlj_obj_type : %epsilon */\n\n/*! Production::    opt_sqlj_obj_type_attr : %epsilon */\n\n/*! Production::    opt_sqlj_obj_type_attr : EXTERNAL NAME STRING */\n\n/*! Production::    opt_start_with : %epsilon */\n\n/*! Production::    opt_start_with : start_with */\n\n/*! Production::    opt_status : %epsilon */\n\n/*! Production::    opt_status : STATUS */\n\n/*! Production::    opt_storage : %epsilon */\n\n/*! Production::    opt_storage : STORAGE */\n\n/*! Production::    opt_storage_name : %epsilon */\n\n/*! Production::    opt_storage_name : STORAGE opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_storage_type : %epsilon */\n\n/*! Production::    opt_storage_type : STORED */\n\n/*! Production::    opt_storage_type : VIRTUAL */\n\n/*! Production::    opt_stringOrExpr : %epsilon */\n\n/*! Production::    opt_stringOrExpr : stringOrExpr */\n\n/*! Production::    opt_string_length_i : %epsilon */\n\n/*! Production::    opt_string_length_i : string_length_i */\n\n/*! Production::    opt_string_length_i_v2 : %epsilon */\n\n/*! Production::    opt_string_length_i_v2 : string_length_i */\n\n/*! Production::    opt_subPartitionCount : %epsilon */\n\n/*! Production::    opt_subPartitionCount : SUBPARTITIONS decimalLiteral */\n\n/*! Production::    opt_subpartitionDefinitions : %epsilon */\n\n/*! Production::    opt_subpartitionDefinitions : subpartitionDefinitions */\n\n/*! Production::    opt_subpartition_list : %epsilon */\n\n/*! Production::    opt_subpartition_list : opt_hash_subpartition_list */\n\n/*! Production::    opt_subpartition_list : opt_list_subpartition_list */\n\n/*! Production::    opt_subpartition_list : opt_range_subpartition_list */\n\n/*! Production::    opt_subpartition_list : subpartition_list */\n\n/*! Production::    opt_subpartitions : %epsilon */\n\n/*! Production::    opt_subpartitions : SUBPARTITIONS INTNUM */\n\n/*! Production::    opt_subtype_constraint : %epsilon */\n\n/*! Production::    opt_subtype_constraint : subtype_range */\n\n/*! Production::    opt_table : %epsilon */\n\n/*! Production::    opt_table : TABLE */\n\n/*! Production::    opt_tableConstraint : %epsilon */\n\n/*! Production::    opt_tableConstraint : CONSTRAINT opt_uid */\n\n/*! Production::    opt_tableConstraintFormat : %epsilon */\n\n/*! Production::    opt_tableConstraintFormat : tableConstraintFormat */\n\n/*! Production::    opt_tableOptions : %epsilon */\n\n/*! Production::    opt_tableOptions : tableOptions */\n\n/*! Production::    opt_table_alias : %epsilon */\n\n/*! Production::    opt_table_alias : relation_name */\n\n/*! Production::    opt_table_id : %epsilon */\n\n/*! Production::    opt_table_id : TABLE_ID COMP_EQ INTNUM */\n\n/*! Production::    opt_table_option_list : %epsilon */\n\n/*! Production::    opt_table_option_list : table_option_list */\n\n/*! Production::    opt_tablegroup_option_list : %epsilon */\n\n/*! Production::    opt_tablegroup_option_list : tablegroup_option_list */\n\n/*! Production::    opt_tablespaceSize : %epsilon */\n\n/*! Production::    opt_tablespaceSize : INITIAL_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_tablespace_option : %epsilon */\n\n/*! Production::    opt_tablespace_option : TABLESPACE tablespace */\n\n/*! Production::    opt_tablet_id : %epsilon */\n\n/*! Production::    opt_tablet_id : TABLET_ID COMP_EQ INTNUM */\n\n/*! Production::    opt_tail_name : %epsilon */\n\n/*! Production::    opt_tail_name : identifier */\n\n/*! Production::    opt_temporary : %epsilon */\n\n/*! Production::    opt_temporary : TEMPORARY */\n\n/*! Production::    opt_tenant_info : %epsilon */\n\n/*! Production::    opt_tenant_info : TENANT opt_equal_mark relation_name_or_string */\n\n/*! Production::    opt_tenant_info : TENANT_ID opt_equal_mark INTNUM */\n\n/*! Production::    opt_tenant_list : %epsilon */\n\n/*! Production::    opt_tenant_list : TENANT COMP_EQ tenant_name_list */\n\n/*! Production::    opt_tenant_list_or_ls_or_tablet_id : %epsilon */\n\n/*! Production::    opt_tenant_list_or_ls_or_tablet_id : tenant_list_tuple ls opt_tablet_id */\n\n/*! Production::    opt_tenant_list_or_ls_or_tablet_id : tenant_list_tuple opt_tablet_id */\n\n/*! Production::    opt_tenant_list_or_partition_id_desc : %epsilon */\n\n/*! Production::    opt_tenant_list_or_partition_id_desc : partition_id_desc */\n\n/*! Production::    opt_tenant_list_or_partition_id_desc : tenant_list_tuple */\n\n/*! Production::    opt_tenant_list_v2 : %epsilon */\n\n/*! Production::    opt_tenant_list_v2 : tenant_list_tuple */\n\n/*! Production::    opt_tenant_name : %epsilon */\n\n/*! Production::    opt_tenant_name : tenant_name */\n\n/*! Production::    opt_tenant_option_list : %epsilon */\n\n/*! Production::    opt_tenant_option_list : opt_tenant_option_list \",\" tenant_option */\n\n/*! Production::    opt_tenant_option_list : tenant_option */\n\n/*! Production::    opt_tg_partition_option : %epsilon */\n\n/*! Production::    opt_tg_partition_option : tg_hash_partition_option */\n\n/*! Production::    opt_tg_partition_option : tg_key_partition_option */\n\n/*! Production::    opt_tg_partition_option : tg_list_partition_option */\n\n/*! Production::    opt_tg_partition_option : tg_range_partition_option */\n\n/*! Production::    opt_threadTypes : %epsilon */\n\n/*! Production::    opt_threadTypes : threadTypes */\n\n/*! Production::    opt_time_func_fsp_i : \"(\" \")\" */\n\n/*! Production::    opt_time_func_fsp_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_time_func_fsp_i : %epsilon */\n\n/*! Production::    opt_to : %epsilon */\n\n/*! Production::    opt_to : TO */\n\n/*! Production::    opt_transactionModes : %epsilon */\n\n/*! Production::    opt_transactionModes : transactionModes */\n\n/*! Production::    opt_transactionScope : %epsilon */\n\n/*! Production::    opt_transactionScope : GLOBAL */\n\n/*! Production::    opt_transactionScope : SESSION */\n\n/*! Production::    opt_type_def : %epsilon */\n\n/*! Production::    opt_type_def : object_type_def */\n\n/*! Production::    opt_type_def : opt_invoke_right is_or_as nested_table_type_def */\n\n/*! Production::    opt_type_def : opt_invoke_right is_or_as varray_type_def */\n\n/*! Production::    opt_uid : %epsilon */\n\n/*! Production::    opt_uid : uid */\n\n/*! Production::    opt_uidList : %epsilon */\n\n/*! Production::    opt_uidList : LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_unit_of_size : %epsilon */\n\n/*! Production::    opt_unit_of_size : unit_of_size */\n\n/*! Production::    opt_unpivot_include : %epsilon */\n\n/*! Production::    opt_unpivot_include : EXCLUDE NULLS */\n\n/*! Production::    opt_unpivot_include : INCLUDE NULLS */\n\n/*! Production::    opt_unsigned_i : %epsilon */\n\n/*! Production::    opt_unsigned_i : SIGNED */\n\n/*! Production::    opt_unsigned_i : UNSIGNED */\n\n/*! Production::    opt_urowid_length_i : %epsilon */\n\n/*! Production::    opt_urowid_length_i : urowid_length_i */\n\n/*! Production::    opt_use_partition : %epsilon */\n\n/*! Production::    opt_use_partition : use_partition */\n\n/*! Production::    opt_userPwdOption : %epsilon */\n\n/*! Production::    opt_userPwdOption : userLockOption opt_userPwdOption */\n\n/*! Production::    opt_userPwdOption : userPasswordOption opt_userPwdOption */\n\n/*! Production::    opt_using_args : %epsilon */\n\n/*! Production::    opt_using_args : USING argument_list */\n\n/*! Production::    opt_using_clause : %epsilon */\n\n/*! Production::    opt_using_clause : USING using_list */\n\n/*! Production::    opt_using_index_clause : %epsilon */\n\n/*! Production::    opt_using_index_clause : USING INDEX opt_index_option_list */\n\n/*! Production::    opt_validate_option : %epsilon */\n\n/*! Production::    opt_validate_option : NOVALIDATE */\n\n/*! Production::    opt_validate_option : VALIDATE */\n\n/*! Production::    opt_varying : %epsilon */\n\n/*! Production::    opt_varying : VARYING */\n\n/*! Production::    opt_viewAlgorithmAssign : %epsilon */\n\n/*! Production::    opt_viewAlgorithmAssign : ALGORITHM EQUAL_SYMBOL MERGE */\n\n/*! Production::    opt_viewAlgorithmAssign : ALGORITHM EQUAL_SYMBOL TEMPTABLE */\n\n/*! Production::    opt_viewAlgorithmAssign : ALGORITHM EQUAL_SYMBOL UNDEFINED */\n\n/*! Production::    opt_viewCheckOption : %epsilon */\n\n/*! Production::    opt_viewCheckOption : WITH CASCADED CHECK OPTION */\n\n/*! Production::    opt_viewCheckOption : WITH CHECK OPTION */\n\n/*! Production::    opt_viewCheckOption : WITH LOCAL CHECK OPTION */\n\n/*! Production::    opt_violation : %epsilon */\n\n/*! Production::    opt_violation : IGNORE */\n\n/*! Production::    opt_violation : REPLACE */\n\n/*! Production::    opt_visibility_option : %epsilon */\n\n/*! Production::    opt_visibility_option : visibility_option */\n\n/*! Production::    opt_when : %epsilon */\n\n/*! Production::    opt_when_condition : %epsilon */\n\n/*! Production::    opt_when_condition : WHEN \"(\" bool_expr \")\" */\n\n/*! Production::    opt_where : %epsilon */\n\n/*! Production::    opt_where : WHERE opt_hint_value expr */\n\n/*! Production::    opt_whereClause : %epsilon */\n\n/*! Production::    opt_whereClause : WHERE expression */\n\n/*! Production::    opt_where_extension : WHERE CURRENT OF obj_access_ref */\n\n/*! Production::    opt_where_extension : opt_where */\n\n/*! Production::    opt_win_window : %epsilon */\n\n/*! Production::    opt_win_window : win_window */\n\n/*! Production::    opt_withGrantOptions : %epsilon */\n\n/*! Production::    opt_withGrantOptions : WITH grantOptions */\n\n/*! Production::    opt_withRollup : %epsilon */\n\n/*! Production::    opt_withRollup : WITH ROLLUP */\n\n/*! Production::    opt_withUserResourceOpt : %epsilon */\n\n/*! Production::    opt_withUserResourceOpt : WITH userResourceOptions */\n\n/*! Production::    opt_with_active_piece : %epsilon */\n\n/*! Production::    opt_with_active_piece : WITH ACTIVE */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Production Rules for Merge Statements\nDESCRIPTION: These rules specify the syntax for merge statements in SQL, including insert and update clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_102\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    merge_insert_clause : WHEN NOT MATCHED THEN INSERT opt_insert_columns VALUES \"(\" insert_vals \")\" opt_where */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause merge_update_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause merge_insert_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause merge_update_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Tenant Configurations\nDESCRIPTION: These productions specify the syntax for tenant-related configurations, including tenant lists and options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_193\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tenant : USER_VARIABLE */\n\n/*! Production::    tenant_list_tuple : TENANT opt_equal_mark \"(\" tenant_name_list \")\" */\n\n/*! Production::    tenant_list_tuple : TENANT opt_equal_mark tenant_name_list */\n\n/*! Production::    tenant_name : TENANT opt_equal_mark relation_name_or_string */\n\n/*! Production::    tenant_name_list : relation_name_or_string */\n\n/*! Production::    tenant_name_list : tenant_name_list \",\" relation_name_or_string */\n```\n\n----------------------------------------\n\nTITLE: Defining Select Statement Types Grammar Productions in SQL\nDESCRIPTION: These productions define different types of select statements, including those with 'INTO' clauses, subqueries, and 'WITH' clauses. They also cover variations with 'ORDER BY', 'FETCH NEXT', and 'FOR UPDATE' clauses, providing a comprehensive set of select statement structures.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_122\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_stmt : select_into */\n\n/*! Production::    select_stmt : select_no_parens opt_when */\n\n/*! Production::    select_stmt : select_with_parens */\n\n/*! Production::    select_stmt : subquery fetch_next for_update */\n\n/*! Production::    select_stmt : subquery for_update */\n\n/*! Production::    select_stmt : subquery for_update order_by */\n\n/*! Production::    select_stmt : subquery opt_fetch_next */\n\n/*! Production::    select_stmt : subquery order_by opt_fetch_next */\n\n/*! Production::    select_stmt : subquery order_by opt_fetch_next for_update */\n\n/*! Production::    select_stmt : with_select */\n```\n\n----------------------------------------\n\nTITLE: Server Configuration Grammar Productions\nDESCRIPTION: BNF grammar rules specifying server configuration options including database, host, port and credentials.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_180\n\nLANGUAGE: bnf\nCODE:\n```\n/*! Production::    serverOption : DATABASE STRING_LITERAL */\n\n/*! Production::    serverOption : HOST STRING_LITERAL */\n\n/*! Production::    serverOption : PORT decimalLiteral */\n\n/*! Production::    serverOption : USER STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Keywords and Rules\nDESCRIPTION: This snippet showcases the pattern used throughout the file to define SQL keywords and rules. Each definition is enclosed in a special comment format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_200\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       DES_KEY_FILE */\n\n/*! Rule::       DETERMINISTIC */\n\n/*! Rule::       DIAGNOSTICS */\n\n/*! Rule::       DICTIONARY */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Stored Procedures and Triggers\nDESCRIPTION: This snippet shows SQL grammar production rules for creating stored procedures and triggers. It defines the syntax for procedure and trigger creation with various options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    createProcedure : CREATE opt_ownerStatement PROCEDURE fullId LR_BRACKET opt_procedureParameters RR_BRACKET opt_routineOptions routineBody */\n\n/*! Production::    createTrigger : CREATE opt_ownerStatement TRIGGER fullId triggerTime triggerEvent ON tableName FOR EACH ROW routineBody */\n\n/*! Production::    createTrigger : CREATE opt_ownerStatement TRIGGER fullId triggerTime triggerEvent ON tableName FOR EACH ROW triggerPlace fullId routineBody */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Resource Units and Options\nDESCRIPTION: These productions define grammar rules for resource unit options, including MIN_CPU, MIN_IOPS, and MIN_MEMORY, as well as RESPECT and IGNORE options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_171\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    resource_unit_option : MIN_CPU opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MIN_IOPS opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MIN_MEMORY opt_equal_mark conf_const */\n\n/*! Production::    respect_or_ignore : IGNORE */\n\n/*! Production::    respect_or_ignore : RESPECT */\n```\n\n----------------------------------------\n\nTITLE: SQL DROP Statement Rules\nDESCRIPTION: Grammar rules for DROP statements to remove database objects like tables, views, functions etc.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_72\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    dropDatabase : DROP dbFormat opt_ifExists uid */\n/*! Production::    dropEvent : DROP EVENT opt_ifExists fullId */\n/*! Production::    dropFunction : DROP FUNCTION opt_ifExists fullId */\n/*! Production::    dropIndex : DROP INDEX opt_intimeAction uid ON tableName optIndexLockAndAlgorithmAssigns */\n/*! Production::    dropTable : DROP opt_TEMPORARY TABLE opt_ifExists tables opt_dropType */\n/*! Production::    dropView : DROP VIEW opt_ifExists fullIds opt_dropType */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TENANT Statements in SQL\nDESCRIPTION: This snippet defines the syntax for ALTER TENANT statements, including setting tenant options, renaming global names, and applying locks to tenants.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_tenant_stmt : ALTER TENANT ALL opt_set opt_tenant_option_list opt_global_sys_vars_set */\n\n/*! Production::    alter_tenant_stmt : ALTER TENANT relation_name RENAME GLOBAL_NAME TO relation_name */\n\n/*! Production::    alter_tenant_stmt : ALTER TENANT relation_name lock_spec_mysql57 */\n\n/*! Production::    alter_tenant_stmt : ALTER TENANT relation_name opt_set opt_tenant_option_list opt_global_sys_vars_set */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Diagnostics Scope\nDESCRIPTION: Defines the possible scope values for diagnostic statements in MySQL, including empty scope, CURRENT, and STACKED.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    diagnosticsScope : %epsilon */\n\n/*! Production::    diagnosticsScope : CURRENT */\n\n/*! Production::    diagnosticsScope : STACKED */\n```\n\n----------------------------------------\n\nTITLE: Rendering ChatExcelConfig Configuration Component in JSX\nDESCRIPTION: This code uses a custom ConfigDetail component to render structured documentation for ChatExcelConfig. It specifies various configuration parameters including LLM generation settings, memory configuration, and DuckDB extension settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/app/config_chatexcelconfig_8dcf86.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ChatExcelConfig\",\n  \"description\": \"Chat Excel Configuration\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"top_k\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The top k for LLM generation\"\n    },\n    {\n      \"name\": \"top_p\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The top p for LLM generation\"\n    },\n    {\n      \"name\": \"temperature\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"The temperature for LLM generation\"\n    },\n    {\n      \"name\": \"max_new_tokens\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The max new tokens for LLM generation\"\n    },\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The name of your app\"\n    },\n    {\n      \"name\": \"memory\",\n      \"type\": \"BaseGPTsAppMemoryConfig\",\n      \"required\": false,\n      \"description\": \"Memory configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"window configuration\",\n          \"url\": \"../memory/config_bufferwindowgptsappmemoryconfig_c31071\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"token configuration\",\n          \"url\": \"../memory/config_tokenbuffergptsappmemoryconfig_6a2000\"\n        }\n      ],\n      \"defaultValue\": \"BufferWindowGPTsAppMemoryConfig\"\n    },\n    {\n      \"name\": \"duckdb_extensions_dir\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The directory of the duckdb extensions.Duckdb will download the extensions from the internet if not provided.This configuration is used to tell duckdb where to find the extensions and avoid downloading. Note that the extensions are platform-specific and version-specific.\",\n      \"defaultValue\": \"[]\"\n    },\n    {\n      \"name\": \"force_install\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to force install the duckdb extensions. If True, the extensions will be installed even if they are already installed.\",\n      \"defaultValue\": \"False\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Syntax Production Rules\nDESCRIPTION: This snippet defines production rules for various SQL syntax elements including ENUM, SET, error codes, join types, exception handling, and EXECUTE statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_74\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    enumOrSet : ENUM */\n\n/*! Production::    enumOrSet : SET */\n\n/*! Production::    environment_id_function : UID */\n\n/*! Production::    environment_id_function : USER */\n\n/*! Production::    errorOrWarn : ERRORS */\n\n/*! Production::    errorOrWarn : WARNINGS */\n\n/*! Production::    error_code : \"-\" INTNUM */\n\n/*! Production::    error_code : INTNUM */\n\n/*! Production::    except_full_outer_join_type : LEFT opt_outer JOIN */\n\n/*! Production::    except_full_outer_join_type : RIGHT opt_outer JOIN */\n\n/*! Production::    exception_decl : exception_name EXCEPTION */\n\n/*! Production::    exception_handler : WHEN exception_pattern THEN pl_lang_stmt_list */\n\n/*! Production::    exception_init_pragma : PRAGMA EXCEPTION_INIT \"(\" exception_name \",\" error_code \")\" */\n\n/*! Production::    exception_list : exception_list OR pl_access_name */\n\n/*! Production::    exception_list : pl_access_name */\n\n/*! Production::    exception_name : identifier */\n\n/*! Production::    exception_pattern : OTHERS */\n\n/*! Production::    exception_pattern : exception_list */\n\n/*! Production::    exception_section : exception_handler */\n\n/*! Production::    exception_section : exception_handler exception_section */\n\n/*! Production::    executeStatement : EXECUTE uid */\n\n/*! Production::    executeStatement : EXECUTE uid USING userVariables */\n```\n\n----------------------------------------\n\nTITLE: SET System Parameter Clause Production Rules in SQL\nDESCRIPTION: Grammar production rules for system parameter clauses used in SET statements, defining how variable assignments are structured.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_130\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_system_parameter_clause : var_name COMP_EQ bit_expr */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_system_parameter_clause_list : set_system_parameter_clause */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_system_parameter_clause_list : set_system_parameter_clause_list set_system_parameter_clause */\n```\n\n----------------------------------------\n\nTITLE: XID Productions\nDESCRIPTION: Grammar productions for XA transaction identifiers including compound identifiers with decimal literals.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_198\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    xid : xuidStringId */\n/*! Production::    xid : xuidStringId COMMA xuidStringId */\n/*! Production::    xid : xuidStringId COMMA xuidStringId COMMA decimalLiteral */\n/*! Production::    xuidStringId : BIT_STRING */\n/*! Production::    xuidStringId : HEXADECIMAL_LITERALs */\n/*! Production::    xuidStringId : STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Join Syntax\nDESCRIPTION: This snippet defines the syntax for various types of SQL joins, including FULL, LEFT, and RIGHT outer joins.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_119\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    outer_join_type : FULL join_outer */\n/*! Production::    outer_join_type : FULL opt_outer JOIN */\n/*! Production::    outer_join_type : LEFT join_outer */\n/*! Production::    outer_join_type : LEFT opt_outer JOIN */\n/*! Production::    outer_join_type : RIGHT join_outer */\n/*! Production::    outer_join_type : RIGHT opt_outer JOIN */\n```\n\n----------------------------------------\n\nTITLE: Defining Single Table Insert Productions in SQL Grammar\nDESCRIPTION: This snippet defines various production rules for single table INSERT statements, including different syntax variations for column lists and value clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_190\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging \"(\" \")\" values_clause opt_returning */\n\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging \"(\" column_list \")\" values_clause opt_returning */\n\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging values_clause opt_returning */\n\n/*! Production::    single_table_insert : dml_table_name \"(\" \")\" values_clause */\n\n/*! Production::    single_table_insert : dml_table_name \"(\" column_list \")\" values_clause */\n\n/*! Production::    single_table_insert : dml_table_name SET update_asgn_list */\n\n/*! Production::    single_table_insert : dml_table_name values_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining Operator and Symbol Lexical Rules in SQL Grammar\nDESCRIPTION: Lexical rules for SQL operators and symbols including comparison operators, arithmetic operators, and other special characters used in SQL syntax. These define how the parser recognizes these tokens.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_227\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       ! */\n\n/*! Rule::       !=|<> */\n\n/*! Rule::       !=|<>|\\^= */\n\n/*! Rule::       \" */\n\n/*! Rule::       $ */\n\n/*! Rule::       % */\n\n/*! Rule::       %= */\n\n/*! Rule::       & */\n\n/*! Rule::       && */\n\n/*! Rule::       &= */\n\n/*! Rule::       ' */\n\n/*! Rule::       , */\n\n/*! Rule::       - */\n\n/*! Rule::       -- */\n\n/*! Rule::       -= */\n\n/*! Rule::       -> */\n\n/*! Rule::       ->> */\n\n/*! Rule::       . */\n\n/*! Rule::       : */\n\n/*! Rule::       := */\n\n/*! Rule::       ; */\n\n/*! Rule::       < */\n\n/*! Rule::       << */\n\n/*! Rule::       <= */\n\n/*! Rule::       <=> */\n\n/*! Rule::       = */\n\n/*! Rule::       => */\n\n/*! Rule::       > */\n\n/*! Rule::       >= */\n\n/*! Rule::       >> */\n\n/*! Rule::       @ */\n```\n\n----------------------------------------\n\nTITLE: SQL Boolean Expression Production Rules\nDESCRIPTION: Grammar rules for boolean expressions including comparison operators, NULL checks, and subquery comparisons.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    bool_pri : bit_expr COMP_EQ SOME bit_expr */\n/*! Production::    bool_pri : bit_expr COMP_EQ bit_expr */\n/*! Production::    bool_pri : bit_expr IS NULLX */\n/*! Production::    bool_pri : bit_expr IS not NULLX */\n```\n\n----------------------------------------\n\nTITLE: Defining Cast Data Types in SQL\nDESCRIPTION: This snippet defines various cast data type productions for SQL, including timestamp, unsigned integers, datetime types, and string types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cast_data_type : TIMESTAMP opt_datetime_fsp_i WITH TIME ZONE */\n\n/*! Production::    cast_data_type : UNSIGNED opt_integer */\n\n/*! Production::    cast_data_type : UROWID opt_urowid_length_i */\n\n/*! Production::    cast_data_type : cast_datetime_type_i */\n\n/*! Production::    cast_data_type : cast_datetime_type_i opt_datetime_fsp_i */\n\n/*! Production::    cast_data_type : double_type_i */\n\n/*! Production::    cast_data_type : int_type_i */\n\n/*! Production::    cast_data_type : number_type_i number_precision */\n\n/*! Production::    cast_data_type : udt_type */\n\n/*! Production::    cast_data_type : varchar_type_i */\n\n/*! Production::    cast_data_type : varchar_type_i string_length_i opt_binary */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Productions for Subqueries and Subpartitions\nDESCRIPTION: This snippet defines parser productions for subqueries, subpartition definitions, and various subpartitioning options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_162\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    subquery : select_no_parens */\n\n/*! Production::    subquery : select_with_parens */\n\n/*! Production::    subquery : with_select */\n\n/*! Production::    subpartitionDefinition : SUBPARTITION uid opt_partitionOptions */\n\n/*! Production::    subpartitionDefinitions : subpartitionDefinition */\n\n/*! Production::    subpartitionDefinitions : subpartitionDefinition subpartitionDefinitions */\n\n/*! Production::    subpartitionFunctionDefinition : opt_LINEAR HASH LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    subpartitionFunctionDefinition : opt_LINEAR KEY opt_linearKeyAlgType LR_BRACKET uidList RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TABLESPACE Statement Syntax in OceanBase SQL\nDESCRIPTION: This snippet defines the grammar production for the ALTER TABLESPACE statement in OceanBase SQL. It allows for modifying tablespace options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_tablespace_action : opt_set permanent_tablespace_option */\n\n/*! Production::    alter_tablespace_actions : alter_tablespace_action \",\" alter_tablespace_action */\n\n/*! Production::    alter_tablespace_actions : alter_tablespace_action */\n\n/*! Production::    alter_tablespace_stmt : ALTER TABLESPACE tablespace alter_tablespace_actions */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Signal Value and Condition\nDESCRIPTION: This snippet defines grammar productions for signal values, condition information, and related components used in error handling and diagnostics.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_148\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    signValue : ID */\n\n/*! Production::    signValue : REVERSE_QUOTE_ID */\n\n/*! Production::    signValue : SQLSTATE opt_VALUE stringLiteral */\n\n/*! Production::    signalConditionInformation : signalConditionLeft EQUAL_SYMBOL signalConditionRight */\n\n/*! Production::    signalConditionInformations : signalConditionInformation */\n\n/*! Production::    signalConditionInformations : signalConditionInformation COMMA signalConditionInformations */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Rules - Partition Definitions\nDESCRIPTION: Grammar rules for table partitioning including partition types (LIST, RANGE, HASH), partition options, and subpartition definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_122\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    partitionDefinitions : PARTITION BY partitionFunctionDefinition opt_partitionCount */\n/*! Production::    partitionFunctionDefinition : LIST COLUMNS LR_BRACKET uidList RR_BRACKET */\n/*! Production::    partitionFunctionDefinition : RANGE COLUMNS LR_BRACKET uidList RR_BRACKET */\n/*! Production::    partitionFunctionDefinition : opt_LINEAR HASH LR_BRACKET expression RR_BRACKET */\n/*! Production::    partitionOption : DATA DIRECTORY opt_MULT_ASSIGN STRING_LITERAL */\n/*! Production::    partitionOption : INDEX DIRECTORY opt_MULT_ASSIGN STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table or Tables Keyword\nDESCRIPTION: Defines production rules for table_or_tables in SQL grammar. These rules specify the use of TABLE or TABLES keyword in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_180\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_or_tables : TABLE */\n\n/*! Production::    table_or_tables : TABLES */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Subquery Grammar Productions in SQL\nDESCRIPTION: These productions define various forms of table subqueries in SQL, including options for ordering, fetching, and naming.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_209\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens */\n\n/*! Production::    table_subquery : select_with_parens AS relation_name */\n\n/*! Production::    table_subquery : select_with_parens fetch_next_clause */\n\n/*! Production::    table_subquery : select_with_parens relation_name */\n\n/*! Production::    table_subquery : select_with_parens relation_name transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback */\n\n/*! Production::    table_subquery : select_with_parens use_flashback AS relation_name */\n\n/*! Production::    table_subquery : select_with_parens use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback relation_name */\n\n/*! Production::    table_subquery : select_with_parens use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback transpose_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining Select Clause Set Grammar Productions in SQL\nDESCRIPTION: These productions define how select clause sets are formed, including set operations between select clauses and handling of order and limit clauses within sets. They allow for the construction of complex queries involving multiple select operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_120\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_clause_set : select_clause_set set_type select_clause_set_right */\n\n/*! Production::    select_clause_set : select_clause_set_left set_type select_clause_set_right */\n\n/*! Production::    select_clause_set : select_clause_set_with_order_and_limit set_type select_clause_set_right */\n\n/*! Production::    select_clause_set_left : no_table_select_with_order_and_limit */\n\n/*! Production::    select_clause_set_left : select_clause_set_right */\n\n/*! Production::    select_clause_set_left : simple_select_with_order_and_limit */\n\n/*! Production::    select_clause_set_right : no_table_select */\n\n/*! Production::    select_clause_set_right : select_with_parens */\n\n/*! Production::    select_clause_set_right : simple_select */\n\n/*! Production::    select_clause_set_with_order_and_limit : select_clause_set opt_order_by limit_clause */\n\n/*! Production::    select_clause_set_with_order_and_limit : select_clause_set order_by */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Options in Grammar Production Rules\nDESCRIPTION: Lists grammar production rules for table options including storage parameters, character sets, compression settings, and other table properties. These rules define how various table options are specified in Oracle SQL CREATE TABLE and ALTER TABLE statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_172\n\nLANGUAGE: Oracle SQL\nCODE:\n```\n/*! Production::    tableOption : AUTO_INCREMENT opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : AVG_ROW_LENGTH opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : CHECKSUM opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : COMPRESSION opt_MULT_ASSIGN ID */\n\n/*! Production::    tableOption : COMPRESSION opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : CONNECTION opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : DATA DIRECTORY opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : DELAY_KEY_WRITE opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : ENCRYPTION opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : ENGINE opt_MULT_ASSIGN engineName */\n\n/*! Production::    tableOption : INDEX DIRECTORY opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : INSERT_METHOD opt_MULT_ASSIGN insertMethod */\n\n/*! Production::    tableOption : KEY_BLOCK_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    tableOption : MAX_ROWS opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : MIN_ROWS opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : PACK_KEYS opt_MULT_ASSIGN DEFAULT */\n\n/*! Production::    tableOption : PACK_KEYS opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : PAGE_CHECKSUM opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : PASSWORD opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : ROW_FORMAT opt_MULT_ASSIGN rowFormat */\n\n/*! Production::    tableOption : STATS_AUTO_RECALC opt_MULT_ASSIGN DEFAULT */\n\n/*! Production::    tableOption : STATS_AUTO_RECALC opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : STATS_PERSISTENT opt_MULT_ASSIGN DEFAULT */\n\n/*! Production::    tableOption : STATS_PERSISTENT opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : STATS_SAMPLE_PAGES opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : TABLESPACE uid */\n\n/*! Production::    tableOption : TABLESPACE uid tablespaceStorage */\n\n/*! Production::    tableOption : UNION opt_MULT_ASSIGN LR_BRACKET tables RR_BRACKET */\n\n/*! Production::    tableOption : commentAssign */\n\n/*! Production::    tableOption : opt_DEFAULT COLLATE opt_MULT_ASSIGN collationName */\n\n/*! Production::    tableOption : opt_DEFAULT charsetKeywords opt_MULT_ASSIGN charsetValues */\n\n/*! Production::    tableOption : tablespaceStorage */\n\n/*! Production::    tableOptions : tableOption */\n\n/*! Production::    tableOptions : tableOption COMMA tableOptions */\n```\n\n----------------------------------------\n\nTITLE: Replication and Master-Slave Configuration in SQL\nDESCRIPTION: These productions define syntax for changing master server configuration and replication filters in a database system.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    changeMaster : CHANGE MASTER TO masterOptions opt_channelOption */\n\n/*! Production::    changeReplicationFilter : CHANGE REPLICATION FILTER replicationFilters */\n\n/*! Production::    change_action : replica_type */\n\n/*! Production::    change_actions : change_action */\n\n/*! Production::    change_actions : change_action change_actions */\n\n/*! Production::    change_tenant_name_or_tenant_id : TENANT_ID opt_equal_mark INTNUM */\n\n/*! Production::    change_tenant_name_or_tenant_id : relation_name_or_string */\n\n/*! Production::    channelOption : FOR CHANNEL STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions - Load Operations\nDESCRIPTION: Grammar productions for optional clauses related to LOAD operations including priorities, formats and character sets\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_130\n\nLANGUAGE: grammar\nCODE:\n```\n/*! Production::    opt_loadIgnore : %epsilon */\n/*! Production::    opt_loadIgnore : IGNORE decimalLiteral linesFormat */\n/*! Production::    opt_loadPriority : %epsilon */\n/*! Production::    opt_loadPriority : CONCURRENT */\n/*! Production::    opt_loadPriority : LOW_PRIORITY */\n/*! Production::    opt_load_charset : %epsilon */\n/*! Production::    opt_load_charset : CHARACTER SET charset_name_or_default */\n```\n\n----------------------------------------\n\nTITLE: Managing and Migrating Database using DB-GPT CLI Commands\nDESCRIPTION: This set of commands demonstrates how to manage and migrate databases using DB-GPT CLI. It includes initializing migration scripts, upgrading the database, and creating new migration scripts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/faq/install.md#2025-04-09_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration --help\n```\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration init\n```\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration upgrade\n```\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration migrate -m \"your message\"\n```\n\nLANGUAGE: commandline\nCODE:\n```\ndbgpt db migration upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Master Replication Grammar Rules\nDESCRIPTION: Production rules related to replication control statements including CHANGE MASTER and replication filtering options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    changeMaster : CHANGE MASTER TO masterOptions opt_channelOption */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Update Statement Production Rules\nDESCRIPTION: This snippet defines production rules for SQL UPDATE statements, including single and multiple updates, assignment lists, and various syntax options for UPDATE operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_188\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    updateStatement : multipleUpdateStatement */\n\n/*! Production::    updateStatement : singleUpdateStatement */\n\n/*! Production::    update_asgn_factor : \"(\" column_list \")\" COMP_EQ \"(\" subquery \")\" */\n\n/*! Production::    update_asgn_factor : column_definition_ref COMP_EQ expr_or_default */\n\n/*! Production::    update_asgn_factor : no_param_column_ref COMP_EQ expr_or_default */\n\n/*! Production::    update_asgn_list : ROW COMP_EQ obj_access_ref_normal */\n\n/*! Production::    update_asgn_list : normal_asgn_list */\n\n/*! Production::    update_asgn_list : update_asgn_factor */\n\n/*! Production::    update_asgn_list : update_asgn_list \",\" update_asgn_factor */\n\n/*! Production::    update_basic_stmt : update_with_opt_hint opt_ignore table_references SET update_asgn_list opt_where opt_order_by opt_limit_clause */\n\n/*! Production::    update_column_list : UPDATE OF column_list */\n\n/*! Production::    update_stmt : update_basic_stmt */\n\n/*! Production::    update_stmt : update_with_opt_hint dml_table_clause SET update_asgn_list opt_where_extension opt_returning */\n\n/*! Production::    update_stmt : with_clause update_basic_stmt */\n\n/*! Production::    update_with_opt_hint : UPDATE */\n\n/*! Production::    update_with_opt_hint : UPDATE_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Variable and Reserved Keyword Production Rules in SQL\nDESCRIPTION: These production rules define MySQL variables and an extensive list of MySQL reserved keywords, which are crucial for SQL parsing and syntax validation.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_107\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    mysqlVariable : GLOBAL_ID */\n\n/*! Production::    mysqlVariable : LOCAL_ID */\n\n/*! Production::    mysql_reserved_keyword : ACCESSIBLE */\n\n/*! Production::    mysql_reserved_keyword : ADD */\n\n/*! Production::    mysql_reserved_keyword : ALTER */\n\n/* ... (truncated for brevity) ... */\n\n/*! Production::    mysql_reserved_keyword : MEDIUMTEXT */\n\n/*! Production::    mysql_reserved_keyword : MIDDLEINT */\n```\n\n----------------------------------------\n\nTITLE: Character Set and Collation Definitions in SQL\nDESCRIPTION: These productions define various character sets, collations, and related keywords used in SQL for specifying text encoding and sorting rules.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    characterSet : CHARACTER SET charsetName */\n\n/*! Production::    character_function : SUBSTR \"(\" substr_params \")\" */\n\n/*! Production::    character_function : TRIM \"(\" parameterized_trim \")\" */\n\n/*! Production::    charsetKeywords : CHARACTER SET */\n\n/*! Production::    charsetKeywords : CHARSET */\n\n/*! Production::    charsetName : BINARY */\n\n/*! Production::    charsetName : CHARSET_REVERSE_QOUTE_STRING */\n\n/*! Production::    charsetName : STRING_LITERAL */\n\n/*! Production::    charsetName : charsetNameBase */\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Expression Productions in SQL Grammar\nDESCRIPTION: This snippet defines various productions for simple expressions in SQL, including parenthesized expressions, unary operations, and function calls.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_188\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simple_expr : \"(\" bit_expr \")\" */\n\n/*! Production::    simple_expr : \"(\" expr \")\" */\n\n/*! Production::    simple_expr : \"(\" expr_list \",\" bit_expr \")\" */\n\n/*! Production::    simple_expr : \"(\" expr_list \",\" expr \")\" */\n\n/*! Production::    simple_expr : \"+\" simple_expr */\n\n/*! Production::    simple_expr : \"-\" simple_expr */\n\n/*! Production::    simple_expr : \"{\" relation_name expr \"}\" */\n\n/*! Production::    simple_expr : \"~\" simple_expr */\n\n/*! Production::    simple_expr : BINARY simple_expr */\n\n/*! Production::    simple_expr : CONNECT_BY_ROOT unary_expr */\n\n/*! Production::    simple_expr : CURSOR \"(\" select_stmt \")\" */\n\n/*! Production::    simple_expr : EXISTS select_with_parens */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Complex Clauses\nDESCRIPTION: Grammar productions for more complex optional clauses including ALTER, ANALYZE, and backup operations. These rules define the structure for database maintenance and configuration commands.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_113\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    opt_alterColumnSort : AFTER uid */\n\n/*! Production::    opt_alterColumnSort : FIRST */\n\n/*! Production::    opt_analyze_for_clause : %epsilon */\n\n/*! Production::    opt_analyze_for_clause : opt_analyze_for_clause_list */\n```\n\n----------------------------------------\n\nTITLE: Timestamp Function Production Rules - SQL\nDESCRIPTION: SQL grammar production rules for timestamp and date/time functions including CURRENT_TIMESTAMP, NOW(), SYSDATE and related operations. These rules specify syntax for getting current date/time values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_46\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_timestamp_func : CURRENT_TIMESTAMP \"(\" INTNUM \")\" */\n\n/*! Production::    cur_timestamp_func : NOW \"(\" \")\" */\n\n/*! Production::    cur_timestamp_func : SYSDATE */\n\n/*! Production::    currentTimestamp : NOW LR_BRACKET opt_decimalLiteral RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: MySQL Reserved Keywords\nDESCRIPTION: Comprehensive list of MySQL reserved keywords that have special meaning in SQL syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_109\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    mysql_reserved_keyword : ACCESSIBLE */\n/*! Production::    mysql_reserved_keyword : ADD */\n/*! Production::    mysql_reserved_keyword : ALTER */\n/* ... and many more keyword definitions ... */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Keyword Identifier: MASTER_LOG_FILE\nDESCRIPTION: This snippet defines the MASTER_LOG_FILE keyword identifier used in MySQL replication configurations to specify the master's binary log file.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_185\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simpleId : MASTER_LOG_FILE */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER SEQUENCE Grammar Rules in SQL\nDESCRIPTION: This snippet defines a grammar production for altering a sequence, allowing modifications to its properties or options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_sequence_stmt : ALTER SEQUENCE relation_factor opt_sequence_option_list */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL XA Transaction Syntax\nDESCRIPTION: This snippet defines the syntax for XA (eXtended Architecture) distributed transaction commands. It includes statements for starting, ending, preparing, committing, and rolling back XA transactions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_196\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    xaCommitWork : XA COMMIT xid */\n\n/*! Production::    xaCommitWork : XA COMMIT xid ONE PHASE */\n\n/*! Production::    xaEndTransaction : XA END xid */\n\n/*! Production::    xaEndTransaction : XA END xid SUSPEND */\n\n/*! Production::    xaEndTransaction : XA END xid SUSPEND FOR MIGRATE */\n\n/*! Production::    xaPrepareStatement : XA PREPARE xid */\n\n/*! Production::    xaRecoverWork : XA RECOVER */\n\n/*! Production::    xaRecoverWork : XA RECOVER CONVERT xid */\n\n/*! Production::    xaRollbackWork : XA ROLLBACK xid */\n\n/*! Production::    xaStartTransaction : XA xaStart xid xaAction */\n\n/*! Production::    xa_begin_stmt : XA BEGI STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL String Literal Rules\nDESCRIPTION: These rules define the syntax for various types of string literals in SQL, including single-quoted, double-quoted, and backtick-quoted strings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_236\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       \" */\n\n/*! Rule::       \"([^\"\\\\]|(\"\")|(\\\\.))*\" */\n\n/*! Rule::       \"([^\"]|\"\")+ */\n\n/*! Rule::       \"([^\"]|(\"\"))*\" */\n\n/*! Rule::       ' */\n\n/*! Rule::       '([^'\\\\]|('')|(\\\\.))*' */\n\n/*! Rule::       '([^']|('')|\\\\')*' */\n\n/*! Rule::       (N|n)?(Q|q)?'([^']|(''))*' */\n\n/*! Rule::       ({DQUOTA_STRING}|{SQUOTA_STRING}|{BQUOTA_STRING}) */\n```\n\n----------------------------------------\n\nTITLE: Cursor Production Rules\nDESCRIPTION: SQL grammar production rules defining cursor syntax including cursor attributes, declarations, definitions and names.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursor_attribute_bulk_rowcount : BULK_ROWCOUNT \"(\" bit_expr \")\" */\n/*! Production::    cursor_attribute_expr : explicit_cursor_attribute */\n/*! Production::    cursor_attribute_expr : implicit_cursor_attribute */\n/*! Production::    cursor_decl : CURSOR cursor_name opt_sp_param_list return_type */\n/*! Production::    cursor_def : CURSOR cursor_name opt_sp_param_list opt_return_type IS sql_stmt */\n/*! Production::    cursor_for_loop_sql : sql_keyword */\n/*! Production::    cursor_name : identifier */\n```\n\n----------------------------------------\n\nTITLE: Database and Schema Grammar Productions\nDESCRIPTION: SQL grammar productions for database and schema-related operations. Includes rules for database names, options, and schema declarations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_63\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    databaseOrSchema : DATABASE */\n/*! Production::    databaseOrSchema : SCHEMA */\n/*! Production::    database_option : DATABASE_ID opt_equal_mark INTNUM */\n/*! Production::    database_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n/*! Production::    database_option : REPLICA_NUM opt_equal_mark INTNUM */\n/*! Production::    database_option_list : database_option */\n/*! Production::    database_option_list : database_option_list database_option */\n```\n\n----------------------------------------\n\nTITLE: ALTER Resource Management Grammar Rules\nDESCRIPTION: SQL grammar productions for managing database resources including resource pools, tenants and units\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL MERGE \"(\" resource_pool_list \")\" INTO \"(\" resource_pool_list \")\" */\n/*! Production::    alter_resource_stmt : ALTER RESOURCE POOL relation_name SPLIT INTO \"(\" resource_pool_list \")\" ON \"(\" zone_list \")\" */\n/*! Production::    alter_resource_stmt : ALTER RESOURCE TENANT relation_name UNIT_NUM opt_equal_mark INTNUM opt_shrink_tenant_unit_option */\n```\n\n----------------------------------------\n\nTITLE: CREATE VIEW Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating and altering views with various options including algorithm, security, and check options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_view_stmt : ALTER opt_algorithm opt_definer opt_sql_security VIEW view_name opt_column_list opt_table_id AS view_select_stmt opt_check_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_view_stmt : CREATE opt_replace VIEW view_name opt_column_list opt_table_id AS view_subquery view_with_opt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_view_stmt : create_with_opt_hint opt_replace opt_algorithm opt_definer opt_sql_security VIEW view_name opt_column_list opt_table_id AS view_select_stmt opt_check_option */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Grammar Production Rules\nDESCRIPTION: These snippets define various production rules for MySQL grammar, including date parameters, date units, database operations, and SQL statements. Each rule is defined using a specific syntax that outlines the components and structure of different MySQL elements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_51\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_params : expr \",\" INTERVAL expr date_unit */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : DAY */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : DAY_HOUR */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : DAY_MICROSECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : DAY_MINUTE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : DAY_SECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : HOUR */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : HOUR_MICROSECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : HOUR_MINUTE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : HOUR_SECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : MICROSECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : MINUTE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : MINUTE_MICROSECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : MINUTE_SECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : MONTH */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : QUARTER */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : SECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : SECOND_MICROSECOND */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : WEEK */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : YEAR */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : YEAR_MONTH */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit_for_extract : date_unit */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit_for_extract : timezone_unit */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_year_type_i : DATE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_year_type_i : YEAR opt_year_i */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetimeFormat : DATE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetimeFormat : DATETIME */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetimeFormat : TIME */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetime_type_i : DATE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetime_type_i : DATETIME */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetime_type_i : TIME */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetime_type_i : TIMESTAMP */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dbFormat : DATABASE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dbFormat : SCHEMA */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dblink : relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterDatabase */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterEvent */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterFunction */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterInstance */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterLogfileGroup */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterProcedure */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterServer */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterTable */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterTablespace */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : alterView */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createDatabase */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createEvent */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createFunction */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createIndex */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createLogfileGroup */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createProcedure */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createServer */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createTable */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createTablespaceInnodb */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createTablespaceNdb */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createTrigger */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : createView */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropDatabase */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropEvent */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropFunction */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropIndex */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropLogfileGroup */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropProcedure */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropServer */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropTable */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropTablespace */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropTrigger */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : dropView */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : renameTable */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ddlStatement : truncateTable */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deallocatePrepare : DEALLOCATE PREPARE uid */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deallocatePrepare : DROP PREPARE uid */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deallocate_or_drop : DEALLOCATE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deallocate_or_drop : DROP */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deallocate_prepare_stmt : deallocate_or_drop PREPARE stmt_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiteral : DECIMAL_LITERAL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiteral : ONE_DECIMAL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiteral : TWO_DECIMAL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiteral : ZERO_DECIMAL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiteralPair : decimalLiteral */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiteralPair : decimalLiteral COMMA decimalLiteral */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiterals : decimalLiteral */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalLiterals : decimalLiteral decimalLiterals */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalMasterOption : MASTER_CONNECT_RETRY */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalMasterOption : MASTER_DELAY */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalMasterOption : MASTER_LOG_POS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalMasterOption : MASTER_PORT */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalMasterOption : MASTER_RETRY_COUNT */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalMasterOption : RELAY_LOG_POS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decimalOrExpr : expression */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt : decl_stmt_without_semicolon DELIMITER */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_ext : decl_stmt_ext_without_semicolon DELIMITER */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_ext_list : decl_stmt_ext */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_ext_list : decl_stmt_ext_list decl_stmt_ext */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_ext_without_semicolon : decl_stmt_without_semicolon */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_ext_without_semicolon : func_def */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_ext_without_semicolon : proc_def */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_list : decl_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_list : decl_stmt_list decl_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_without_semicolon : cursor_decl */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_without_semicolon : cursor_def */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_without_semicolon : func_decl */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_without_semicolon : item_decl */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_without_semicolon : proc_decl */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_without_semicolon : subtype_def */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    decl_stmt_without_semicolon : type_def */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareCondition : DECLARE uid CONDITION FOR SQLSTATE opt_VALUE STRING_LITERAL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareCondition : DECLARE uid CONDITION FOR decimalLiteral */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareConditionWithSEMIs : declareCondition SEMI */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareConditionWithSEMIs : declareCondition SEMI declareConditionWithSEMIs */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareCursor : DECLARE uid CURSOR FOR selectStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareCursorWithSEMIs : declareCursor SEMI */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareCursorWithSEMIs : declareCursor SEMI declareCursorWithSEMIs */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareHandler : DECLARE handlerAction HANDLER FOR handlerConditionValues routineBody */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareHandlerWithSEMIs : declareHandler SEMI */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareHandlerWithSEMIs : declareHandler SEMI declareHandlerWithSEMIs */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareVariable : DECLARE uidList dataType */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareVariable : DECLARE uidList dataType DEFAULT expression */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareVariableWithSEMIs : declareVariable SEMI */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declareVariableWithSEMIs : declareVariable SEMI declareVariableWithSEMIs */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    declare_section : decl_stmt_ext_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    defaultValue : BIT_NOT_OP constant opt_defaultValueOnUpdate */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    defaultValue : EXCLAMATION_SYMBOL constant opt_defaultValueOnUpdate */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    defaultValue : LR_BRACKET expression RR_BRACKET opt_defaultValueOnUpdate */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    defaultValue : PLUS constant opt_defaultValueOnUpdate */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    defaultValue : constant */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    defaultValue : constant ON UPDATE currentTimestamp */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    defaultValue : currentTimestamp opt_defaultValueOnUpdate */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_expr : ASSIGN_OPERATOR bool_expr */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_expr : DEFAULT bool_expr */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_or_string : DEFAULT */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_or_string : identifier */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_role_clause : ALL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_role_clause : ALL EXCEPT role_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_role_clause : NONE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_role_clause : role_opt_identified_by_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_tablegroup : DEFAULT_TABLEGROUP opt_equal_mark NULLX */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_tablegroup : DEFAULT_TABLEGROUP opt_equal_mark relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_tablegroup : opt_default_mark TABLEGROUP opt_equal_mark NULLX */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    default_tablegroup : opt_default_mark TABLEGROUP opt_equal_mark relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deleteStatement : multipleDeleteStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    deleteStatement : singleDeleteStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_basic_stmt : delete_with_opt_hint FROM tbl_name opt_where opt_order_by opt_limit_clause */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_basic_stmt : delete_with_opt_hint multi_delete_table opt_where */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_stmt : delete_basic_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_stmt : delete_with_opt_hint FROM table_factor opt_where_extension opt_returning */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_stmt : delete_with_opt_hint table_factor opt_where opt_returning */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_stmt : with_clause delete_basic_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_with_opt_hint : DELETE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    delete_with_opt_hint : DELETE_HINT_BEGIN hint_list_with_end */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    descKeyword : DESC */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    descKeyword : DESCRIBE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    descKeyword : EXPLAIN */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    describeObjectClause : FOR CONNECTION uid */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    describeObjectClause : deleteStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    describeObjectClause : insertStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    describeObjectClause : replaceStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    describeObjectClause : selectStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    describeObjectClause : updateStatement */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    diagnosticsConditionInformationName : CATALOG_NAME */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    diagnosticsConditionInformationName : CLASS_ORIGIN */\n```\n\n----------------------------------------\n\nTITLE: Current Time Function Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for time functions that return the current time with optional precision parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_56\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_time_func : CURRENT_TIME opt_time_func_fsp_i */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_time_func : CURTIME \"(\" \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cur_time_func : CURTIME \"(\" INTNUM \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for User Management Operations\nDESCRIPTION: These productions define the syntax for altering user profiles and roles, including setting default roles for users.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_user_profile_stmt : ALTER USER user_with_host_name user_profile */\n\n/*! Production::    alter_user_stmt : ALTER USER user_with_host_name DEFAULT ROLE default_role_clause */\n```\n\n----------------------------------------\n\nTITLE: ALTER Index and Constraint Grammar Rules\nDESCRIPTION: SQL grammar productions defining syntax for altering indexes and constraints, including operations like renaming, dropping, and modifying constraints\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alter_index_option : ALTER CHECK constraint_name check_state */\n/*! Production::    alter_index_option : ALTER CONSTRAINT constraint_name check_state */\n/*! Production::    alter_index_option : ALTER INDEX index_name parallel_option */\n/*! Production::    alter_index_option : ALTER INDEX index_name visibility_option */\n/*! Production::    alter_index_option : DROP PRIMARY KEY */\n/*! Production::    alter_index_option : DROP key_or_index index_name */\n/*! Production::    alter_index_option : MODIFY CONSTRAINT constraint_name opt_rely_option opt_enable_option opt_validate_option */\n/*! Production::    alter_index_option : RENAME key_or_index index_name TO index_name */\n```\n\n----------------------------------------\n\nTITLE: Defining Character Set and Collation in SQL\nDESCRIPTION: This snippet defines productions for character sets, collations, and related functions in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    characterSet : CHARACTER SET charsetName */\n\n/*! Production::    character_function : SUBSTR \"(\" substr_params \")\" */\n\n/*! Production::    character_function : TRIM \"(\" parameterized_trim \")\" */\n\n/*! Production::    charsetKeywords : CHARACTER SET */\n\n/*! Production::    charsetKeywords : CHARSET */\n\n/*! Production::    charsetName : BINARY */\n\n/*! Production::    charsetName : CHARSET_REVERSE_QOUTE_STRING */\n\n/*! Production::    charsetName : STRING_LITERAL */\n\n/*! Production::    charsetName : charsetNameBase */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parsing Productions for PL/SQL Constructs\nDESCRIPTION: This snippet defines parsing productions for various PL/SQL constructs, including blocks, bodies, data types, and DDL statements specific to PL/SQL objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_149\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    pl_block : opt_declare_section execute_section END_KEY opt_tail_name */\n\n/*! Production::    pl_body : declare_section execute_section END_KEY opt_tail_name */\n\n/*! Production::    pl_body : execute_section END_KEY opt_tail_name */\n\n/*! Production::    pl_common_scalar_data_type : BOOL */\n\n/*! Production::    pl_common_scalar_data_type : BOOLEAN */\n\n/*! Production::    pl_common_scalar_data_type : pl_int_type_i */\n\n/*! Production::    pl_ddl_stmt : alter_function_stmt */\n\n/*! Production::    pl_ddl_stmt : alter_package_stmt */\n\n/*! Production::    pl_ddl_stmt : alter_procedure_stmt */\n\n/*! Production::    pl_ddl_stmt : create_function_stmt */\n\n/*! Production::    pl_ddl_stmt : create_package_body_stmt */\n\n/*! Production::    pl_ddl_stmt : create_package_stmt */\n\n/*! Production::    pl_ddl_stmt : create_procedure_stmt */\n\n/*! Production::    pl_ddl_stmt : create_trigger_stmt */\n\n/*! Production::    pl_ddl_stmt : create_type_body_stmt */\n\n/*! Production::    pl_ddl_stmt : create_type_stmt */\n\n/*! Production::    pl_ddl_stmt : drop_function_stmt */\n```\n\n----------------------------------------\n\nTITLE: MySQL Explainable Statement Production Rules\nDESCRIPTION: Production rules defining which statement types can be used with EXPLAIN commands, including SELECT, INSERT, UPDATE, DELETE, and MERGE statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_65\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    explainable_stmt : delete_stmt */\n\n/*! Production::    explainable_stmt : insert_stmt */\n\n/*! Production::    explainable_stmt : merge_stmt */\n\n/*! Production::    explainable_stmt : select_stmt */\n\n/*! Production::    explainable_stmt : update_stmt */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords\nDESCRIPTION: This snippet defines a series of SQL keywords as unreserved keywords, allowing them to be used as identifiers in certain contexts. The keywords cover various SQL functionalities and data types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_222\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : UNINSTALL */\n\n/*! Production::    unreserved_keyword_normal : UNIT */\n\n/*! Production::    unreserved_keyword_normal : UNIT_GROUP */\n\n/*! Production::    unreserved_keyword_normal : UNIT_NUM */\n\n/*! Production::    unreserved_keyword_normal : UNKNOWN */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Reference Actions and Options\nDESCRIPTION: Defines SQL grammar production rules for reference actions and options used in foreign key constraints, including SET DEFAULT, SET NULLX, and CHECK expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_163\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    reference_action : SET DEFAULT */\n\n/*! Production::    reference_action : SET NULLX */\n\n/*! Production::    reference_option : CHECK \"(\" expr \")\" */\n\n/*! Production::    reference_option : ON DELETE reference_action */\n\n/*! Production::    reference_option : ON UPDATE reference_action */\n\n/*! Production::    references_clause : REFERENCES normal_relation_factor \"(\" column_name_list \")\" opt_reference_option */\n```\n\n----------------------------------------\n\nTITLE: SQL Unreserved Keyword Declarations\nDESCRIPTION: Production declarations for SQL unreserved keywords of normal type, including database operations, data types, and system functions. These declarations define keywords that can be used as identifiers in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_207\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : EXTRACT */\n/*! Production::    unreserved_keyword_normal : FAILED_LOGIN_ATTEMPTS */\n/*! Production::    unreserved_keyword_normal : FAILOVER */\n/*! Production::    unreserved_keyword_normal : FAST */\n/*! Production::    unreserved_keyword_normal : FAULTS */\n/*! Production::    unreserved_keyword_normal : FIELDS */\n/*! Production::    unreserved_keyword_normal : FILEX */\n/*! Production::    unreserved_keyword_normal : FILE_ID */\n/*! Production::    unreserved_keyword_normal : FINAL_COUNT */\n/*! Production::    unreserved_keyword_normal : FIRST */\n/*! Production::    unreserved_keyword_normal : FIRST_VALUE */\n/*! Production::    unreserved_keyword_normal : FIXED */\n/*! Production::    unreserved_keyword_normal : FLASHBACK */\n/*! Production::    unreserved_keyword_normal : FLOAT4 */\n/*! Production::    unreserved_keyword_normal : FLOAT8 */\n/*! Production::    unreserved_keyword_normal : FLUSH */\n/*! Production::    unreserved_keyword_normal : FOLLOWER */\n/*! Production::    unreserved_keyword_normal : FOLLOWING */\n/*! Production::    unreserved_keyword_normal : FORMAT */\n/*! Production::    unreserved_keyword_normal : FOUND */\n/*! Production::    unreserved_keyword_normal : FRAGMENTATION */\n/*! Production::    unreserved_keyword_normal : FREEZE */\n/*! Production::    unreserved_keyword_normal : FREQUENCY */\n/*! Production::    unreserved_keyword_normal : FROZEN */\n/*! Production::    unreserved_keyword_normal : FULL */\n/*! Production::    unreserved_keyword_normal : FUNCTION */\n/*! Production::    unreserved_keyword_normal : G */\n/*! Production::    unreserved_keyword_normal : GENERAL */\n/*! Production::    unreserved_keyword_normal : GENERATED */\n/*! Production::    unreserved_keyword_normal : GEOMCOLLECTION */\n/*! Production::    unreserved_keyword_normal : GEOMETRY */\n/*! Production::    unreserved_keyword_normal : GEOMETRYCOLLECTION */\n/*! Production::    unreserved_keyword_normal : GET */\n/*! Production::    unreserved_keyword_normal : GET_FORMAT */\n/*! Production::    unreserved_keyword_normal : GLOBAL */\n/*! Production::    unreserved_keyword_normal : GLOBAL_ALIAS */\n/*! Production::    unreserved_keyword_normal : GLOBAL_NAME */\n/*! Production::    unreserved_keyword_normal : GRANTS */\n/*! Production::    unreserved_keyword_normal : GROUPING */\n/*! Production::    unreserved_keyword_normal : GROUP_CONCAT */\n/*! Production::    unreserved_keyword_normal : GTS */\n/*! Production::    unreserved_keyword_normal : HANDLER */\n/*! Production::    unreserved_keyword_normal : HASH */\n/*! Production::    unreserved_keyword_normal : HELP */\n/*! Production::    unreserved_keyword_normal : HIDDEN */\n/*! Production::    unreserved_keyword_normal : HIGH */\n/*! Production::    unreserved_keyword_normal : HIGH_PRIORITY */\n/*! Production::    unreserved_keyword_normal : HISTOGRAM */\n/*! Production::    unreserved_keyword_normal : HOST */\n/*! Production::    unreserved_keyword_normal : HOSTS */\n/*! Production::    unreserved_keyword_normal : HOUR */\n/*! Production::    unreserved_keyword_normal : HOUR_MICROSECOND */\n/*! Production::    unreserved_keyword_normal : HOUR_MINUTE */\n/*! Production::    unreserved_keyword_normal : HOUR_SECOND */\n/*! Production::    unreserved_keyword_normal : HYBRID_HIST */\n/*! Production::    unreserved_keyword_normal : ID */\n/*! Production::    unreserved_keyword_normal : IDC */\n/*! Production::    unreserved_keyword_normal : IDENTIFIED */\n/*! Production::    unreserved_keyword_normal : IF */\n/*! Production::    unreserved_keyword_normal : IFIGNORE */\n/*! Production::    unreserved_keyword_normal : IGNORE */\n/*! Production::    unreserved_keyword_normal : IGNORE_SERVER_IDS */\n/*! Production::    unreserved_keyword_normal : ILOG */\n/*! Production::    unreserved_keyword_normal : ILOGCACHE */\n/*! Production::    unreserved_keyword_normal : IMPORT */\n/*! Production::    unreserved_keyword_normal : INCLUDE */\n/*! Production::    unreserved_keyword_normal : INCR */\n/*! Production::    unreserved_keyword_normal : INCREMENT */\n/*! Production::    unreserved_keyword_normal : INCREMENTAL */\n/*! Production::    unreserved_keyword_normal : INDEXED */\n/*! Production::    unreserved_keyword_normal : INDEXES */\n/*! Production::    unreserved_keyword_normal : INDEX_TABLE_ID */\n/*! Production::    unreserved_keyword_normal : INFILE */\n/*! Production::    unreserved_keyword_normal : INFO */\n/*! Production::    unreserved_keyword_normal : INITIAL_SIZE */\n/*! Production::    unreserved_keyword_normal : INNER */\n/*! Production::    unreserved_keyword_normal : INNER_PARSE */\n/*! Production::    unreserved_keyword_normal : INNODB */\n/*! Production::    unreserved_keyword_normal : INOUT */\n/*! Production::    unreserved_keyword_normal : INSENSITIVE */\n/*! Production::    unreserved_keyword_normal : INSERT_METHOD */\n/*! Production::    unreserved_keyword_normal : INSTALL */\n/*! Production::    unreserved_keyword_normal : INSTANCE */\n/*! Production::    unreserved_keyword_normal : INT1 */\n/*! Production::    unreserved_keyword_normal : INT2 */\n/*! Production::    unreserved_keyword_normal : INT3 */\n/*! Production::    unreserved_keyword_normal : INT4 */\n/*! Production::    unreserved_keyword_normal : INT8 */\n/*! Production::    unreserved_keyword_normal : INTERSECT */\n/*! Production::    unreserved_keyword_normal : INTERVAL */\n/*! Production::    unreserved_keyword_normal : INVISIBLE */\n/*! Production::    unreserved_keyword_normal : INVOKER */\n/*! Production::    unreserved_keyword_normal : IO */\n/*! Production::    unreserved_keyword_normal : IOPS_WEIGHT */\n/*! Production::    unreserved_keyword_normal : IO_AFTER_GTIDS */\n/*! Production::    unreserved_keyword_normal : IO_BEFORE_GTIDS */\n/*! Production::    unreserved_keyword_normal : IO_THREAD */\n/*! Production::    unreserved_keyword_normal : IPC */\n/*! Production::    unreserved_keyword_normal : ISNULL */\n/*! Production::    unreserved_keyword_normal : ISOLATE */\n/*! Production::    unreserved_keyword_normal : ISOLATION */\n/*! Production::    unreserved_keyword_normal : ISOLATION_LEVEL */\n/*! Production::    unreserved_keyword_normal : ISOPEN */\n/*! Production::    unreserved_keyword_normal : ISSUER */\n/*! Production::    unreserved_keyword_normal : IS_TENANT_SYS_POOL */\n/*! Production::    unreserved_keyword_normal : ITERATE */\n/*! Production::    unreserved_keyword_normal : JOB */\n/*! Production::    unreserved_keyword_normal : JOIN */\n/*! Production::    unreserved_keyword_normal : JSON */\n/*! Production::    unreserved_keyword_normal : JSON_ARRAYAGG */\n/*! Production::    unreserved_keyword_normal : JSON_OBJECTAGG */\n/*! Production::    unreserved_keyword_normal : JSON_VALUE */\n/*! Production::    unreserved_keyword_normal : K */\n/*! Production::    unreserved_keyword_normal : KEEP */\n/*! Production::    unreserved_keyword_normal : KEYS */\n/*! Production::    unreserved_keyword_normal : KEYSTORE */\n/*! Production::    unreserved_keyword_normal : KEY_BLOCK_SIZE */\n/*! Production::    unreserved_keyword_normal : KEY_VERSION */\n/*! Production::    unreserved_keyword_normal : KILL */\n/*! Production::    unreserved_keyword_normal : KVCACHE */\n/*! Production::    unreserved_keyword_normal : LAG */\n/*! Production::    unreserved_keyword_normal : LANGUAGE */\n/*! Production::    unreserved_keyword_normal : LAST */\n/*! Production::    unreserved_keyword_normal : LAST_VALUE */\n/*! Production::    unreserved_keyword_normal : LEAD */\n/*! Production::    unreserved_keyword_normal : LEADER */\n/*! Production::    unreserved_keyword_normal : LEADING */\n/*! Production::    unreserved_keyword_normal : LEAK */\n/*! Production::    unreserved_keyword_normal : LEAK_MOD */\n/*! Production::    unreserved_keyword_normal : LEAK_RATE */\n/*! Production::    unreserved_keyword_normal : LEAVE */\n/*! Production::    unreserved_keyword_normal : LEAVES */\n/*! Production::    unreserved_keyword_normal : LEFT */\n/*! Production::    unreserved_keyword_normal : LESS */\n/*! Production::    unreserved_keyword_normal : LEVEL */\n/*! Production::    unreserved_keyword_normal : LIB */\n/*! Production::    unreserved_keyword_normal : LIMIT */\n/*! Production::    unreserved_keyword_normal : LINEAR */\n/*! Production::    unreserved_keyword_normal : LINES */\n/*! Production::    unreserved_keyword_normal : LINESTRING */\n/*! Production::    unreserved_keyword_normal : LIST */\n/*! Production::    unreserved_keyword_normal : LISTAGG */\n/*! Production::    unreserved_keyword_normal : LIST_ */\n/*! Production::    unreserved_keyword_normal : LN */\n/*! Production::    unreserved_keyword_normal : LNNVL */\n/*! Production::    unreserved_keyword_normal : LOAD */\n/*! Production::    unreserved_keyword_normal : LOCAL */\n/*! Production::    unreserved_keyword_normal : LOCALITY */\n/*! Production::    unreserved_keyword_normal : LOCALTIMESTAMP */\n/*! Production::    unreserved_keyword_normal : LOCATION */\n/*! Production::    unreserved_keyword_normal : LOCKED */\n/*! Production::    unreserved_keyword_normal : LOCKS */\n/*! Production::    unreserved_keyword_normal : LOCK_ */\n/*! Production::    unreserved_keyword_normal : LOG */\n/*! Production::    unreserved_keyword_normal : LOGFILE */\n/*! Production::    unreserved_keyword_normal : LOGICAL_READS */\n/*! Production::    unreserved_keyword_normal : LOGONLY_REPLICA_NUM */\n/*! Production::    unreserved_keyword_normal : LOGS */\n/*! Production::    unreserved_keyword_normal : LOG_DISK_SIZE */\n/*! Production::    unreserved_keyword_normal : LONGBLOB */\n/*! Production::    unreserved_keyword_normal : LONGTEXT */\n/*! Production::    unreserved_keyword_normal : LOOP */\n/*! Production::    unreserved_keyword_normal : LOW */\n/*! Production::    unreserved_keyword_normal : LOW_PRIORITY */\n/*! Production::    unreserved_keyword_normal : LS */\n```\n\n----------------------------------------\n\nTITLE: MySQL Error Handling Production Rules\nDESCRIPTION: Production rules for error and warning handling in MySQL, including error code syntax with negative and positive integers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_59\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    errorOrWarn : ERRORS */\n\n/*! Production::    errorOrWarn : WARNINGS */\n\n/*! Production::    error_code : \"-\" INTNUM */\n\n/*! Production::    error_code : INTNUM */\n```\n\n----------------------------------------\n\nTITLE: Defining Special Function Expressions in SQL Grammar\nDESCRIPTION: This snippet defines production rules for various special function expressions in SQL, including date/time functions, string manipulations, and system functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_191\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    special_func_expr : CHARACTER \"(\" expr_list \")\" */\n\n/*! Production::    special_func_expr : CHARACTER \"(\" expr_list USING charset_name \")\" */\n\n/*! Production::    special_func_expr : DATE \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : DEFAULT \"(\" column_definition_ref \")\" */\n\n/*! Production::    special_func_expr : INSERT \"(\" bit_expr \",\" bit_expr \",\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : ISNULL \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : LEFT \"(\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : MONTH \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : POSITION \"(\" bit_expr IN bit_expr \")\" */\n\n/*! Production::    special_func_expr : TIME \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : VALUES \"(\" column_definition_ref \")\" */\n\n/*! Production::    special_func_expr : YEAR \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : cur_timestamp_func */\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom MapOperator in Python\nDESCRIPTION: This example demonstrates how to create a custom MapOperator by subclassing the MapOperator class. It defines a custom map method to print a greeting.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.1_map_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, MapOperator\n\nclass MyMapOperator(MapOperator[str, None]):\n    async def map(self, x: str) -> None:\n        print(f\"Hello, {x}!\")\n\nwith DAG(\"awel_hello_world\") as dag:\n    task = MyMapOperator()\n```\n\n----------------------------------------\n\nTITLE: MySQL Reserved Keywords Declaration\nDESCRIPTION: Declarations of MySQL reserved keywords as production rules, including time units, logical operators, data types, and SQL commands.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_86\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    mysql_reserved_keyword : MINUTE_MICROSECOND */\n/*! Production::    mysql_reserved_keyword : MINUTE_SECOND */\n/*! Production::    mysql_reserved_keyword : MOD */\n/* ... additional keywords ... */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER PARTITION Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for various partition alteration operations, including adding, dropping, reorganizing, and truncating partitions and subpartitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_partition_option : ADD PARTITION opt_partition_range_or_list */\n\n/*! Production::    alter_partition_option : DROP PARTITION drop_partition_name_list */\n\n/*! Production::    alter_partition_option : DROP SUBPARTITION drop_partition_name_list */\n\n/*! Production::    alter_partition_option : REORGANIZE PARTITION name_list INTO opt_partition_range_or_list */\n\n/*! Production::    alter_partition_option : SPLIT PARTITION relation_factor split_actions */\n\n/*! Production::    alter_partition_option : TRUNCATE PARTITION name_list */\n\n/*! Production::    alter_partition_option : TRUNCATE SUBPARTITION name_list */\n\n/*! Production::    alter_partition_option : add_range_or_list_partition */\n\n/*! Production::    alter_partition_option : modify_partition_info */\n```\n\n----------------------------------------\n\nTITLE: Production Rules for SQL Parser Grammar\nDESCRIPTION: This code represents a collection of grammar production rules for an SQL parser. Each rule is specified in a special comment format with the pattern '/*! Production:: rule_name : rule_definition */' and defines valid syntax constructs for SQL parsing.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_110\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    now_or_signed_literal : signed_literal_params */\n\n/*! Production::    now_synonyms_func : CURRENT_TIMESTAMP */\n\n/*! Production::    now_synonyms_func : LOCALTIME */\n\n/*! Production::    now_synonyms_func : LOCALTIMESTAMP */\n\n/*! Production::    nullNotnull : opt_NOT NULL_LITERAL */\n\n/*! Production::    nullNotnull : opt_NOT NULL_SPEC_LITERAL */\n\n/*! Production::    null_stmt : NULLX */\n\n/*! Production::    numberOrCount : NUMBER */\n\n/*! Production::    numberOrCount : ROW_COUNT */\n\n/*! Production::    number_literal : DECIMAL_VAL */\n\n/*! Production::    number_literal : INTNUM */\n\n/*! Production::    number_precision : \"(\" \"*\" \")\" */\n\n/*! Production::    number_precision : \"(\" \"*\" \",\" signed_int_num \")\" */\n\n/*! Production::    number_precision : \"(\" signed_int_num \")\" */\n\n/*! Production::    number_precision : \"(\" signed_int_num \",\" signed_int_num \")\" */\n\n/*! Production::    number_type_i : DECIMAL */\n\n/*! Production::    number_type_i : NUMERIC */\n\n/*! Production::    numeric_function : MOD \"(\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    nvarchar_type_i : NVARCHAR */\n\n/*! Production::    nvarchar_type_i : NVARCHAR2 */\n\n/*! Production::    ob_unreserved_keyword : ACCESSIBLE */\n\n/*! Production::    ob_unreserved_keyword : AUTHID */\n\n/*! Production::    ob_unreserved_keyword : BULK */\n\n/*! Production::    ob_unreserved_keyword : BYTE */\n\n/*! Production::    ob_unreserved_keyword : C */\n\n/*! Production::    ob_unreserved_keyword : CALL */\n\n/*! Production::    ob_unreserved_keyword : CHARSET */\n\n/*! Production::    ob_unreserved_keyword : COLLATE */\n\n/*! Production::    ob_unreserved_keyword : COLLATION */\n\n/*! Production::    ob_unreserved_keyword : COLLECT */\n\n/*! Production::    ob_unreserved_keyword : COMPILE */\n\n/*! Production::    ob_unreserved_keyword : CONTINUE */\n\n/*! Production::    ob_unreserved_keyword : CURRENT_USER */\n\n/*! Production::    ob_unreserved_keyword : CUSTOMDATUM */\n\n/*! Production::    ob_unreserved_keyword : DAY */\n\n/*! Production::    ob_unreserved_keyword : DEFINER */\n\n/*! Production::    ob_unreserved_keyword : DETERMINISTIC */\n\n/*! Production::    ob_unreserved_keyword : EDITIONABLE */\n\n/*! Production::    ob_unreserved_keyword : EXECUTE */\n\n/*! Production::    ob_unreserved_keyword : FORCE */\n\n/*! Production::    ob_unreserved_keyword : HASH */\n\n/*! Production::    ob_unreserved_keyword : HOUR */\n\n/*! Production::    ob_unreserved_keyword : IMMEDIATE */\n\n/*! Production::    ob_unreserved_keyword : INDICES */\n\n/*! Production::    ob_unreserved_keyword : INSTEAD */\n\n/*! Production::    ob_unreserved_keyword : INTERFACE */\n\n/*! Production::    ob_unreserved_keyword : JAVA */\n\n/*! Production::    ob_unreserved_keyword : LIMIT */\n\n/*! Production::    ob_unreserved_keyword : LOCAL */\n\n/*! Production::    ob_unreserved_keyword : LONG */\n\n/*! Production::    ob_unreserved_keyword : MINUTE */\n\n/*! Production::    ob_unreserved_keyword : MONTH */\n\n/*! Production::    ob_unreserved_keyword : NAME */\n\n/*! Production::    ob_unreserved_keyword : NO */\n\n/*! Production::    ob_unreserved_keyword : NONEDITIONABLE */\n\n/*! Production::    ob_unreserved_keyword : OBJECT */\n\n/*! Production::    ob_unreserved_keyword : OID */\n\n/*! Production::    ob_unreserved_keyword : ORADATA */\n\n/*! Production::    ob_unreserved_keyword : PARALLEL_ENABLE */\n\n/*! Production::    ob_unreserved_keyword : PIPE */\n\n/*! Production::    ob_unreserved_keyword : PIPELINED */\n\n/*! Production::    ob_unreserved_keyword : REF */\n\n/*! Production::    ob_unreserved_keyword : RELIES_ON */\n\n/*! Production::    ob_unreserved_keyword : REPLACE */\n\n/*! Production::    ob_unreserved_keyword : RESTRICT_REFERENCES */\n\n/*! Production::    ob_unreserved_keyword : RESULT */\n\n/*! Production::    ob_unreserved_keyword : RESULT_CACHE */\n\n/*! Production::    ob_unreserved_keyword : RETURNING */\n\n/*! Production::    ob_unreserved_keyword : RNDS */\n\n/*! Production::    ob_unreserved_keyword : RNPS */\n\n/*! Production::    ob_unreserved_keyword : SAVE */\n\n/*! Production::    ob_unreserved_keyword : SERIALLY_REUSABLE */\n\n/*! Production::    ob_unreserved_keyword : SETTINGS */\n\n/*! Production::    ob_unreserved_keyword : SPECIFICATION */\n\n/*! Production::    ob_unreserved_keyword : SQLDATA */\n\n/*! Production::    ob_unreserved_keyword : TIME */\n\n/*! Production::    ob_unreserved_keyword : TRUST */\n\n/*! Production::    ob_unreserved_keyword : UDF */\n\n/*! Production::    ob_unreserved_keyword : UNDER */\n\n/*! Production::    ob_unreserved_keyword : USING */\n\n/*! Production::    ob_unreserved_keyword : USING_NLS_COMP */\n\n/*! Production::    ob_unreserved_keyword : VALIDATE */\n\n/*! Production::    ob_unreserved_keyword : VALUE */\n\n/*! Production::    ob_unreserved_keyword : VARIABLE */\n\n/*! Production::    ob_unreserved_keyword : VARRAY */\n\n/*! Production::    ob_unreserved_keyword : VARYING */\n\n/*! Production::    ob_unreserved_keyword : WNDS */\n\n/*! Production::    ob_unreserved_keyword : WNPS */\n\n/*! Production::    ob_unreserved_keyword : YEAR */\n\n/*! Production::    ob_unreserved_keyword : ZONE */\n\n/*! Production::    obj_access_ref : access_func_expr opt_func_access_ref */\n\n/*! Production::    obj_access_ref : column_ref \".\" FIRST \"(\" \")\" */\n\n/*! Production::    obj_access_ref : column_ref \".\" LAST \"(\" \")\" */\n\n/*! Production::    obj_access_ref : column_ref opt_obj_access_ref */\n\n/*! Production::    obj_access_ref_normal : access_func_expr opt_func_access_ref_normal */\n\n/*! Production::    obj_access_ref_normal : var_name opt_obj_access_ref_normal */\n\n/*! Production::    obj_clause : \"*\" \".\" \"*\" */\n\n/*! Production::    obj_clause : \"*\" */\n\n/*! Production::    obj_clause : DIRECTORY relation_name */\n\n/*! Production::    obj_clause : relation_name \".\" \"*\" */\n\n/*! Production::    obj_clause : relation_name \".\" relation_name */\n\n/*! Production::    obj_clause : relation_name */\n\n/*! Production::    obj_privileges : ALL opt_privilege */\n\n/*! Production::    obj_privileges : priv_type_list */\n\n/*! Production::    obj_with_col_priv : ALL opt_privilege opt_column_list */\n\n/*! Production::    obj_with_col_priv : priv_type opt_column_list */\n\n/*! Production::    obj_with_col_priv_list : obj_with_col_priv */\n\n/*! Production::    obj_with_col_priv_list : obj_with_col_priv_list \",\" obj_with_col_priv */\n\n/*! Production::    object_or_under : UNDER pl_schema_name */\n\n/*! Production::    object_or_under : is_or_as OBJECT */\n\n/*! Production::    object_type_def : opt_invoke_right object_or_under opt_sqlj_obj_type attr_and_element_spec opt_final_inst_list */\n\n/*! Production::    on_commit_option : %epsilon */\n\n/*! Production::    on_commit_option : ON COMMIT DELETE ROWS */\n\n/*! Production::    on_commit_option : ON COMMIT PRESERVE ROWS */\n\n/*! Production::    on_empty : json_on_response ON EMPTY */\n\n/*! Production::    op_audit_tail_clause : %epsilon */\n\n/*! Production::    op_audit_tail_clause : audit_by_session_access_option */\n\n/*! Production::    op_audit_tail_clause : audit_by_session_access_option audit_whenever_option */\n\n/*! Production::    op_audit_tail_clause : audit_whenever_option */\n\n/*! Production::    open_stmt : OPEN cursor_name for_sql opt_using_clause */\n\n/*! Production::    open_stmt : OPEN pl_access_name opt_sp_cparam_list */\n\n/*! Production::    optEventDo : %epsilon */\n\n/*! Production::    optEventDo : DO routineBody */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : %epsilon */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : algorithmAssign indexLockAndAlgorithmAssign */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : indexLockAssign indexLockAndAlgorithmAssign */\n\n/*! Production::    optShowFromOrInId : %epsilon */\n\n/*! Production::    optShowFromOrInId : fromOrIn uid */\n\n/*! Production::    opt_ALL : %epsilon */\n\n/*! Production::    opt_ALL : ALL */\n\n/*! Production::    opt_AND : %epsilon */\n\n/*! Production::    opt_AND : AND */\n\n/*! Production::    opt_AS : %epsilon */\n\n/*! Production::    opt_AS : AS */\n\n/*! Production::    opt_BINARY : %epsilon */\n\n/*! Production::    opt_BINARY : BINARY */\n\n/*! Production::    opt_COLUMN : %epsilon */\n\n/*! Production::    opt_COLUMN : COLUMN */\n\n/*! Production::    opt_DEFAULT : %epsilon */\n\n/*! Production::    opt_DEFAULT : DEFAULT */\n\n/*! Production::    opt_DISTINCT : %epsilon */\n\n/*! Production::    opt_DISTINCT : DISTINCT */\n\n/*! Production::    opt_EXTENDED : %epsilon */\n\n/*! Production::    opt_EXTENDED : EXTENDED */\n\n/*! Production::    opt_FULL : %epsilon */\n\n/*! Production::    opt_FULL : FULL */\n\n/*! Production::    opt_IGNORE : %epsilon */\n\n/*! Production::    opt_IGNORE : IGNORE */\n\n/*! Production::    opt_INTEGER : %epsilon */\n\n/*! Production::    opt_INTEGER : INTEGER */\n\n/*! Production::    opt_INTO : %epsilon */\n\n/*! Production::    opt_INTO : INTO */\n\n/*! Production::    opt_LINEAR : %epsilon */\n\n/*! Production::    opt_LINEAR : LINEAR */\n\n/*! Production::    opt_LOCAL : %epsilon */\n\n/*! Production::    opt_LOCAL : LOCAL */\n\n/*! Production::    opt_LOW_PRIORITY : %epsilon */\n\n/*! Production::    opt_LOW_PRIORITY : LOW_PRIORITY */\n\n/*! Production::    opt_MINUSMINUS : %epsilon */\n\n/*! Production::    opt_MINUSMINUS : MINUSMINUS */\n\n/*! Production::    opt_NO : %epsilon */\n\n/*! Production::    opt_NO : NO */\n\n/*! Production::    opt_NOT : %epsilon */\n\n/*! Production::    opt_NOT : NOT */\n\n/*! Production::    opt_OPTIONALLY : %epsilon */\n\n/*! Production::    opt_OPTIONALLY : OPTIONALLY */\n\n/*! Production::    opt_OUTER : %epsilon */\n\n/*! Production::    opt_OUTER : OUTER */\n\n/*! Production::    opt_PRECISION : %epsilon */\n\n/*! Production::    opt_PRECISION : PRECISION */\n\n/*! Production::    opt_PRIVILEGES : %epsilon */\n\n/*! Production::    opt_PRIVILEGES : PRIVILEGES */\n\n/*! Production::    opt_QUICK : %epsilon */\n\n/*! Production::    opt_QUICK : QUICK */\n\n/*! Production::    opt_RESTRICT : %epsilon */\n\n/*! Production::    opt_RESTRICT : RESTRICT */\n\n/*! Production::    opt_ROUTINE : %epsilon */\n\n/*! Production::    opt_ROUTINE : ROUTINE */\n```\n\n----------------------------------------\n\nTITLE: SET Role and Transaction Grammar Rules\nDESCRIPTION: Grammar productions for SET ROLE and SET TRANSACTION commands, including options for global, local, and session transactions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_147\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_role_stmt : SET ROLE default_role_clause */\n/*! Production::    set_transaction_stmt : SET GLOBAL TRANSACTION transaction_characteristics */\n/*! Production::    set_transaction_stmt : SET LOCAL TRANSACTION transaction_characteristics */\n/*! Production::    set_transaction_stmt : SET SESSION TRANSACTION transaction_characteristics */\n/*! Production::    set_transaction_stmt : SET TRANSACTION transaction_characteristics */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Operators and Special Characters\nDESCRIPTION: This snippet demonstrates how SQL operators and special characters are defined using the same comment structure. These definitions include various operators and symbols used in SQL syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_204\n\nLANGUAGE: C\nCODE:\n```\n/*! Rule::       \\( */\n\n/*! Rule::       \\) */\n\n/*! Rule::       \\* */\n\n/*! Rule::       \\*= */\n\n/*! Rule::       \\*\\* */\n\n/*! Rule::       \\+ */\n\n/*! Rule::       \\+= */\n```\n\n----------------------------------------\n\nTITLE: Defining Query Transformation Hints in SQL\nDESCRIPTION: These productions define various query transformation hints used for query optimization in SQL, including join elimination, materialization, and subquery transformations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_179\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    transform_hint : COALESCE_SQ \"(\" qb_name_option multi_qb_name_list \")\" */\n\n/*! Production::    transform_hint : COUNT_TO_EXISTS \"(\" qb_name_option qb_name_list \")\" */\n\n/*! Production::    transform_hint : COUNT_TO_EXISTS opt_qb_name */\n\n/*! Production::    transform_hint : ELIMINATE_JOIN \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : ELIMINATE_JOIN opt_qb_name */\n\n/*! Production::    transform_hint : FAST_MINMAX opt_qb_name */\n\n/*! Production::    transform_hint : INLINE opt_qb_name */\n\n/*! Production::    transform_hint : LEFT_TO_ANTI \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : LEFT_TO_ANTI opt_qb_name */\n\n/*! Production::    transform_hint : MATERIALIZE \"(\" qb_name_option multi_qb_name_list \")\" */\n\n/*! Production::    transform_hint : MATERIALIZE opt_qb_name */\n\n/*! Production::    transform_hint : MERGE_HINT \"(\" qb_name_option COMP_GT qb_name_string \")\" */\n\n/*! Production::    transform_hint : MERGE_HINT \"(\" qb_name_option COMP_LT qb_name_string \")\" */\n\n/*! Production::    transform_hint : MERGE_HINT opt_qb_name */\n\n/*! Production::    transform_hint : NO_COALESCE_SQ opt_qb_name */\n\n/*! Production::    transform_hint : NO_COUNT_TO_EXISTS opt_qb_name */\n\n/*! Production::    transform_hint : NO_ELIMINATE_JOIN opt_qb_name */\n\n/*! Production::    transform_hint : NO_EXPAND opt_qb_name */\n\n/*! Production::    transform_hint : NO_FAST_MINMAX opt_qb_name */\n\n/*! Production::    transform_hint : NO_LEFT_TO_ANTI opt_qb_name */\n\n/*! Production::    transform_hint : NO_MERGE_HINT opt_qb_name */\n\n/*! Production::    transform_hint : NO_OUTER_TO_INNER opt_qb_name */\n\n/*! Production::    transform_hint : NO_PLACE_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : NO_PRED_DEDUCE opt_qb_name */\n\n/*! Production::    transform_hint : NO_PROJECT_PRUNE opt_qb_name */\n\n/*! Production::    transform_hint : NO_PULLUP_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : NO_PUSH_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : NO_PUSH_PRED_CTE opt_qb_name */\n\n/*! Production::    transform_hint : NO_REPLACE_CONST opt_qb_name */\n\n/*! Production::    transform_hint : NO_REWRITE opt_qb_name */\n\n/*! Production::    transform_hint : NO_SEMI_TO_INNER opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_DISTINCT opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_ORDER_BY opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_SET opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_SUBQUERY opt_qb_name */\n\n/*! Production::    transform_hint : NO_SIMPLIFY_WINFUNC opt_qb_name */\n\n/*! Production::    transform_hint : NO_UNNEST opt_qb_name */\n\n/*! Production::    transform_hint : NO_WIN_MAGIC opt_qb_name */\n\n/*! Production::    transform_hint : OUTER_TO_INNER opt_qb_name */\n\n/*! Production::    transform_hint : PLACE_GROUP_BY \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : PLACE_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : PRED_DEDUCE opt_qb_name */\n\n/*! Production::    transform_hint : PROJECT_PRUNE opt_qb_name */\n\n/*! Production::    transform_hint : PULLUP_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : PUSH_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : PUSH_PRED_CTE opt_qb_name */\n\n/*! Production::    transform_hint : REPLACE_CONST opt_qb_name */\n\n/*! Production::    transform_hint : SEMI_TO_INNER \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n\n/*! Production::    transform_hint : SIMPLIFY_DISTINCT opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_EXPR opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_GROUP_BY opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_LIMIT opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_ORDER_BY opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_SET opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_SUBQUERY opt_qb_name */\n\n/*! Production::    transform_hint : SIMPLIFY_WINFUNC opt_qb_name */\n\n/*! Production::    transform_hint : UNNEST opt_qb_name */\n\n/*! Production::    transform_hint : USE_CONCAT \"(\" qb_name_option STRING_VALUE \")\" */\n\n/*! Production::    transform_hint : USE_CONCAT opt_qb_name */\n\n/*! Production::    transform_hint : WIN_MAGIC \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n```\n\n----------------------------------------\n\nTITLE: Partition Operation Rules\nDESCRIPTION: Production rules for ALTER TABLE partition operations including add, drop, reorganize and truncate partitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_tg_partition_option : ADD PARTITION opt_partition_range_or_list */\n/*! Production::    alter_tg_partition_option : DROP PARTITION drop_partition_name_list */\n/*! Production::    alter_tg_partition_option : REORGANIZE PARTITION name_list INTO opt_partition_range_or_list */\n/*! Production::    alter_tg_partition_option : TRUNCATE PARTITION name_list */\n/*! Production::    alter_tg_partition_option : modify_tg_partition_info */\n```\n\n----------------------------------------\n\nTITLE: MySQL Miscellaneous Function and Statement Production Rules\nDESCRIPTION: Production rules for EXISTS function, EXIT statements with optional labels and conditions, and various description/explanation statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_63\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    exists_function_name : EXISTS */\n\n/*! Production::    exit_stmt : EXIT opt_label */\n\n/*! Production::    exit_stmt : EXIT opt_label WHEN bool_expr */\n\n/*! Production::    explain_or_desc : DESC */\n\n/*! Production::    explain_or_desc : DESCRIBE */\n\n/*! Production::    explain_or_desc : EXPLAIN */\n```\n\n----------------------------------------\n\nTITLE: Defining Zone Management Productions in SQL\nDESCRIPTION: These productions define the syntax for zone management actions and descriptions in SQL, including operations like DELETE, FORCE STOP, ISOLATE, START, and STOP.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_234\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    zone_action : DELETE */\n\n/*! Production::    zone_action : FORCE STOP */\n\n/*! Production::    zone_action : ISOLATE */\n\n/*! Production::    zone_action : START */\n\n/*! Production::    zone_action : STOP */\n\n/*! Production::    zone_desc : ZONE opt_equal_mark relation_name_or_string */\n\n/*! Production::    zone_list : STRING_VALUE */\n\n/*! Production::    zone_list : zone_list opt_comma STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ReduceStreamOperator in Python\nDESCRIPTION: This example shows how to create a custom ReduceStreamOperator by implementing the reduce method. It defines a MySumOperator that adds two integers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.2_reduce_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import DAG, ReduceStreamOperator\n\nclass MySumOperator(ReduceStreamOperator[int, int]):\n    async def reduce(self, x: int, y: int) -> int:\n        return x + y\n\nwith DAG(\"awel_reduce_operator\") as dag:\n    task = MySumOperator()\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Lexical Rules in SQL Grammar\nDESCRIPTION: Lexical rules for SQL comments including single-line comments with different prefix styles (-- and #) and their termination rules. These patterns recognize comment syntax in SQL code.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_230\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       ((--[ \\t]|#)[^\\r\\n]*(\\r?\\n|$)|--(\\r?\\n|$)) */\n\n/*! Rule::       --[ \\t].* */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Optional Elements\nDESCRIPTION: This code snippet contains BNF-style grammar production rules that define various optional elements in SQL syntax. These rules specify the grammar for features like flashback operations, float precision, update clauses, and various database object options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_112\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    opt_flashback_rename_database : RENAME TO relation_name */\n\n/*! Production::    opt_flashback_rename_table : %epsilon */\n\n/*! Production::    opt_flashback_rename_table : RENAME TO relation_factor */\n\n/*! Production::    opt_flashback_rename_tenant : %epsilon */\n\n/*! Production::    opt_flashback_rename_tenant : RENAME TO relation_name */\n\n/*! Production::    opt_float_precision : \"(\" \")\" */\n\n/*! Production::    opt_float_precision : \"(\" DECIMAL_VAL \")\" */\n\n/*! Production::    opt_float_precision : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_float_precision : \"(\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    opt_float_precision : %epsilon */\n\n/*! Production::    opt_flushTableOption : %epsilon */\n\n/*! Production::    opt_flushTableOption : flushTableOption */\n\n/*! Production::    opt_forUser : %epsilon */\n\n/*! Production::    opt_forUser : FOR userName */\n\n/*! Production::    opt_for_each_row : %epsilon */\n\n/*! Production::    opt_for_each_row : FOR EACH ROW */\n\n/*! Production::    opt_for_grant_user : FOR CURRENT_USER \"(\" \")\" */\n\n/*! Production::    opt_for_grant_user : FOR CURRENT_USER */\n\n/*! Production::    opt_for_grant_user : opt_for_user */\n\n/*! Production::    opt_for_update : %epsilon */\n\n/*! Production::    opt_for_update : FOR UPDATE opt_for_update_wait */\n\n/*! Production::    opt_for_update_of : %epsilon */\n\n/*! Production::    opt_for_update_of : OF column_list */\n\n/*! Production::    opt_for_update_wait : %epsilon */\n\n/*! Production::    opt_for_update_wait : NOWAIT */\n\n/*! Production::    opt_for_update_wait : NO_WAIT */\n\n/*! Production::    opt_for_update_wait : WAIT DECIMAL_VAL */\n\n/*! Production::    opt_for_update_wait : WAIT INTNUM */\n\n/*! Production::    opt_for_user : %epsilon */\n\n/*! Production::    opt_for_user : FOR user opt_host_name */\n\n/*! Production::    opt_force : %epsilon */\n\n/*! Production::    opt_force : FORCE */\n\n/*! Production::    opt_force_or_validate : FORCE */\n\n/*! Production::    opt_force_or_validate : VALIDATE */\n\n/*! Production::    opt_force_purge : %epsilon */\n\n/*! Production::    opt_force_purge : FORCE */\n\n/*! Production::    opt_force_purge : PURGE */\n\n/*! Production::    opt_fromClause : %epsilon */\n\n/*! Production::    opt_fromClause : fromClause */\n\n/*! Production::    opt_from_first_or_last : %epsilon */\n\n/*! Production::    opt_from_first_or_last : FROM first_or_last */\n\n/*! Production::    opt_from_or_in_database_clause : %epsilon */\n\n/*! Production::    opt_from_or_in_database_clause : from_or_in database_factor */\n\n/*! Production::    opt_from_or_in_database_clause : from_or_in relation_name */\n\n/*! Production::    opt_full : %epsilon */\n\n/*! Production::    opt_full : FULL */\n\n/*! Production::    opt_full_table_factor : table_factor */\n\n/*! Production::    opt_full_table_factor : table_factor FULL */\n\n/*! Production::    opt_func_access_ref : \".\" obj_access_ref */\n\n/*! Production::    opt_func_access_ref : %epsilon */\n\n/*! Production::    opt_func_access_ref : table_element_access_list */\n\n/*! Production::    opt_func_access_ref_normal : \".\" obj_access_ref_normal */\n\n/*! Production::    opt_func_access_ref_normal : %epsilon */\n\n/*! Production::    opt_func_access_ref_normal : table_element_access_list */\n\n/*! Production::    opt_func_param_list : %epsilon */\n\n/*! Production::    opt_func_param_list : func_param_list */\n\n/*! Production::    opt_functionArgs : %epsilon */\n\n/*! Production::    opt_functionArgs : functionArgs */\n\n/*! Production::    opt_functionParameters : %epsilon */\n\n/*! Production::    opt_functionParameters : functionParameters */\n\n/*! Production::    opt_generatedType : %epsilon */\n\n/*! Production::    opt_generatedType : STORED */\n\n/*! Production::    opt_generatedType : VIRTUAL */\n\n/*! Production::    opt_generated_column_attribute_list : %epsilon */\n\n/*! Production::    opt_generated_column_attribute_list : opt_generated_column_attribute_list generated_column_attribute */\n\n/*! Production::    opt_generated_keyname : %epsilon */\n\n/*! Production::    opt_generated_keyname : GENERATED ALWAYS */\n\n/*! Production::    opt_generated_keyname : GENERATED opt_generated_option_list */\n\n/*! Production::    opt_generated_option_list : ALWAYS */\n\n/*! Production::    opt_global_sys_vars_set : %epsilon */\n\n/*! Production::    opt_global_sys_vars_set : VARIABLES sys_var_and_val_list */\n\n/*! Production::    opt_grant_options : %epsilon */\n\n/*! Production::    opt_grant_options : WITH GRANT OPTION */\n\n/*! Production::    opt_groupby : %epsilon */\n\n/*! Production::    opt_groupby : GROUP BY groupby_clause */\n\n/*! Production::    opt_hash_partition_list : \"(\" hash_partition_list \")\" */\n\n/*! Production::    opt_hash_partition_list : %epsilon */\n\n/*! Production::    opt_hash_subpartition_list : \"(\" hash_subpartition_list \")\" */\n\n/*! Production::    opt_having : %epsilon */\n\n/*! Production::    opt_having : HAVING expr */\n\n/*! Production::    opt_havingClause : %epsilon */\n\n/*! Production::    opt_havingClause : HAVING expression */\n\n/*! Production::    opt_hint_list : %epsilon */\n\n/*! Production::    opt_hint_list : hint_options */\n\n/*! Production::    opt_hint_list : opt_hint_list \",\" hint_options */\n\n/*! Production::    opt_hint_value : %epsilon */\n\n/*! Production::    opt_hint_value : HINT_VALUE */\n\n/*! Production::    opt_host_name : %epsilon */\n\n/*! Production::    opt_host_name : USER_VARIABLE */\n\n/*! Production::    opt_ifExists : %epsilon */\n\n/*! Production::    opt_ifExists : ifExists */\n\n/*! Production::    opt_ifNotExists : %epsilon */\n\n/*! Production::    opt_ifNotExists : ifNotExists */\n\n/*! Production::    opt_if_exists : %epsilon */\n\n/*! Production::    opt_if_exists : IF EXISTS */\n\n/*! Production::    opt_if_not_exists : %epsilon */\n\n/*! Production::    opt_if_not_exists : IF not EXISTS */\n\n/*! Production::    opt_ignore : %epsilon */\n\n/*! Production::    opt_ignore : IGNORE */\n\n/*! Production::    opt_ignore_server_list : %epsilon */\n\n/*! Production::    opt_ignore_server_list : IGNORE server_list */\n\n/*! Production::    opt_indexCategory : %epsilon */\n\n/*! Production::    opt_indexCategory : FULLTEXT */\n\n/*! Production::    opt_indexCategory : SPATIAL */\n\n/*! Production::    opt_indexCategory : UNIQUE */\n\n/*! Production::    opt_indexColumnNames : %epsilon */\n\n/*! Production::    opt_indexColumnNames : indexColumnNames */\n\n/*! Production::    opt_indexHints : %epsilon */\n\n/*! Production::    opt_indexHints : indexHints */\n\n/*! Production::    opt_indexOptions : %epsilon */\n\n/*! Production::    opt_indexOptions : indexOptions */\n\n/*! Production::    opt_indexType : %epsilon */\n\n/*! Production::    opt_indexType : indexType */\n\n/*! Production::    opt_index_keyname : %epsilon */\n\n/*! Production::    opt_index_keyname : SPATIAL */\n\n/*! Production::    opt_index_keyname : UNIQUE */\n\n/*! Production::    opt_index_list : %epsilon */\n\n/*! Production::    opt_index_list : index_list */\n\n/*! Production::    opt_index_name : %epsilon */\n\n/*! Production::    opt_index_name : index_name */\n\n/*! Production::    opt_index_option_list : %epsilon */\n\n/*! Production::    opt_index_option_list : opt_index_options */\n\n/*! Production::    opt_index_options : index_option */\n\n/*! Production::    opt_index_options : opt_index_options index_option */\n\n/*! Production::    opt_index_using_algorithm : %epsilon */\n\n/*! Production::    opt_index_using_algorithm : index_using_algorithm */\n\n/*! Production::    opt_indexed_hiddden : %epsilon */\n\n/*! Production::    opt_indexed_hiddden : HIDDEN */\n\n/*! Production::    opt_indexed_hiddden : INDEXED */\n\n/*! Production::    opt_inner : %epsilon */\n\n/*! Production::    opt_inner : INNER */\n\n/*! Production::    opt_innerOrCross : %epsilon */\n\n/*! Production::    opt_innerOrCross : CROSS */\n\n/*! Production::    opt_innerOrCross : INNER */\n\n/*! Production::    opt_insertPriority : %epsilon */\n\n/*! Production::    opt_insertPriority : DELAYED */\n\n/*! Production::    opt_insertPriority : HIGH_PRIORITY */\n\n/*! Production::    opt_insertPriority : LOW_PRIORITY */\n\n/*! Production::    opt_insertStatement_partition : %epsilon */\n\n/*! Production::    opt_insertStatement_partition : PARTITION LR_BRACKET RR_BRACKET */\n\n/*! Production::    opt_insertStatement_partition : PARTITION LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_insert_columns : \"(\" column_list \")\" */\n\n/*! Production::    opt_insert_columns : %epsilon */\n\n/*! Production::    opt_int_length_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_int_length_i : %epsilon */\n\n/*! Production::    opt_integer : %epsilon */\n\n/*! Production::    opt_integer : INTEGER */\n\n/*! Production::    opt_intervalExprs : %epsilon */\n\n/*! Production::    opt_intervalExprs : intervalExprs */\n\n/*! Production::    opt_interval_leading_fsp_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_interval_leading_fsp_i : \"(\" precision_int_num \")\" */\n\n/*! Production::    opt_interval_leading_fsp_i : %epsilon */\n\n/*! Production::    opt_intimeAction : %epsilon */\n\n/*! Production::    opt_intimeAction : OFFLINE */\n\n/*! Production::    opt_intimeAction : ONLINE */\n\n/*! Production::    opt_into : %epsilon */\n\n/*! Production::    opt_into : INTO */\n\n/*! Production::    opt_into_clause : %epsilon */\n\n/*! Production::    opt_into_clause : into_clause */\n\n/*! Production::    opt_invoke_right : %epsilon */\n\n/*! Production::    opt_invoke_right : invoke_right */\n\n/*! Production::    opt_joinParts : %epsilon */\n\n/*! Production::    opt_joinParts : joinParts */\n\n/*! Production::    opt_keyViolate : %epsilon */\n\n/*! Production::    opt_keyViolate : IGNORE */\n\n/*! Production::    opt_keyViolate : REPLACE */\n\n/*! Production::    opt_key_or_index : %epsilon */\n\n/*! Production::    opt_key_or_index : key_or_index */\n\n/*! Production::    opt_label : %epsilon */\n\n/*! Production::    opt_label : label_name */\n\n/*! Production::    opt_label_list : %epsilon */\n\n/*! Production::    opt_label_list : label_list */\n\n/*! Production::    opt_lengthOneDimension : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production Rules\nDESCRIPTION: These production rules define the grammar for various SQL operations, including specific functions, statements, and database management commands. They cover a wide range of SQL functionality, from basic CRUD operations to advanced database administration tasks.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_156\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    specificFunction : GET_FORMAT LR_BRACKET datetimeFormat COMMA stringLiteral RR_BRACKET */\n\n/*! Production::    specificFunction : LOCALTIME */\n\n/*! Production::    specificFunction : LOCALTIME LR_BRACKET RR_BRACKET */\n\n/*! Production::    specificFunction : POSITION LR_BRACKET stringOrExpr IN stringOrExpr RR_BRACKET */\n\n/*! Production::    specificFunction : TRIM LR_BRACKET stringOrExpr FROM stringOrExpr RR_BRACKET */\n\n/*! Production::    specificFunction : VALUES LR_BRACKET fullColumnName RR_BRACKET */\n\n/*! Production::    specificFunction : WEIGHT_STRING LR_BRACKET stringOrExpr opt_levelsInWeightString RR_BRACKET */\n\n/*! Production::    specificFunction : substringKeyword LR_BRACKET stringOrExpr FROM decimalOrExpr FOR decimalOrExpr RR_BRACKET */\n\n/*! Production::    specificFunction : substringKeyword LR_BRACKET stringOrExpr FROM decimalOrExpr RR_BRACKET */\n\n/*! Production::    split_actions : AT \"(\" range_expr_list \")\" modify_special_partition */\n\n/*! Production::    split_actions : VALUES \"(\" list_expr \")\" modify_special_partition */\n\n/*! Production::    split_actions : split_list_partition */\n\n/*! Production::    split_actions : split_range_partition */\n\n/*! Production::    split_list_partition : INTO \"(\" list_partition_list \",\" special_partition_list \")\" */\n\n/*! Production::    split_list_partition : INTO opt_list_partition_list */\n\n/*! Production::    split_range_partition : INTO \"(\" range_partition_list \",\" special_partition_list \")\" */\n\n/*! Production::    split_range_partition : INTO opt_range_partition_list */\n\n/*! Production::    sqlStatement : administrationStatement */\n\n/*! Production::    sqlStatement : ddlStatement */\n\n/*! Production::    sqlStatement : dmlStatement */\n\n/*! Production::    sqlStatement : emptyStatement */\n\n/*! Production::    sqlStatement : preparedStatement */\n\n/*! Production::    sqlStatement : replicationStatement */\n\n/*! Production::    sqlStatement : transactionStatement */\n\n/*! Production::    sqlStatement : utilityStatement */\n\n/*! Production::    sql_function : aggregate_function */\n\n/*! Production::    sql_function : single_row_function */\n\n/*! Production::    sql_function : special_func_expr */\n\n/*! Production::    sql_id_expr : SQL_ID opt_equal_mark STRING_VALUE */\n\n/*! Production::    sql_keyword : DELETE */\n\n/*! Production::    sql_keyword : INSERT */\n\n/*! Production::    sql_keyword : SAVEPOINT */\n\n/*! Production::    sql_keyword : SET */\n\n/*! Production::    sql_keyword : SQL_KEYWORD */\n\n/*! Production::    sql_keyword : TABLE */\n\n/*! Production::    sql_keyword : UPDATE */\n\n/*! Production::    sql_keyword : WITH */\n\n/*! Production::    sql_stmt : ALTER sql_keyword */\n\n/*! Production::    sql_stmt : COMMIT */\n\n/*! Production::    sql_stmt : CREATE sql_keyword */\n\n/*! Production::    sql_stmt : ROLLBACK */\n\n/*! Production::    sql_stmt : expr END_P */\n\n/*! Production::    sql_stmt : sql_keyword */\n\n/*! Production::    sql_stmt : stmt_list */\n\n/*! Production::    sql_throttle_metric : CPU COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_metric : IO COMP_EQ INTNUM */\n\n/*! Production::    sql_throttle_metric : LOGICAL_READS COMP_EQ INTNUM */\n\n/*! Production::    sql_throttle_metric : NETWORK COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_metric : QUEUE_TIME COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_metric : RT COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_one_or_more_metrics : sql_throttle_metric */\n\n/*! Production::    sql_throttle_one_or_more_metrics : sql_throttle_metric sql_throttle_one_or_more_metrics */\n\n/*! Production::    sqlj_func_decl : FUNCTION func_name opt_sp_param_list sqlj_obj_type_sig */\n\n/*! Production::    sqlj_obj_type_sig : RETURN type_or_self EXTERNAL varname_or_name */\n\n/*! Production::    sqlj_using : CUSTOMDATUM */\n\n/*! Production::    sqlj_using : ORADATA */\n\n/*! Production::    sqlj_using : SQLDATA */\n\n/*! Production::    startGroupReplication : START GROUP_REPLICATION */\n\n/*! Production::    startSlave : START SLAVE opt_threadTypes UNTIL untilOption opt_connectionOptions opt_channelOption */\n\n/*! Production::    startSlave : START SLAVE opt_threadTypes opt_connectionOptions opt_channelOption */\n\n/*! Production::    startTransaction : START TRANSACTION opt_transactionModes */\n\n/*! Production::    start_with : START WITH expr */\n\n/*! Production::    statement : sqlStatement opt_MINUSMINUS opt_SEMI */\n\n/*! Production::    statement_information_item : QUESTIONMARK COMP_EQ statement_information_item_name */\n\n/*! Production::    statement_information_item : USER_VARIABLE COMP_EQ statement_information_item_name */\n\n/*! Production::    statement_information_item : diagnostics_info_ref COMP_EQ statement_information_item_name */\n\n/*! Production::    statement_information_item_list : statement_information_item */\n\n/*! Production::    statement_information_item_list : statement_information_item_list \",\" statement_information_item */\n\n/*! Production::    statement_information_item_name : NUMBER */\n\n/*! Production::    statement_information_item_name : ROW_COUNT */\n\n/*! Production::    stmt : alter_database_stmt */\n\n/*! Production::    stmt : alter_index_stmt */\n\n/*! Production::    stmt : alter_keystore_stmt */\n\n/*! Production::    stmt : alter_outline_stmt */\n\n/*! Production::    stmt : alter_profile_stmt */\n\n/*! Production::    stmt : alter_resource_stmt */\n\n/*! Production::    stmt : alter_sequence_stmt */\n\n/*! Production::    stmt : alter_session_stmt */\n\n/*! Production::    stmt : alter_system_stmt */\n\n/*! Production::    stmt : alter_table_stmt */\n\n/*! Production::    stmt : alter_tablegroup_stmt */\n\n/*! Production::    stmt : alter_tablespace_stmt */\n\n/*! Production::    stmt : alter_tenant_stmt */\n\n/*! Production::    stmt : alter_user_profile_stmt */\n\n/*! Production::    stmt : alter_user_stmt */\n\n/*! Production::    stmt : analyze_stmt */\n\n/*! Production::    stmt : audit_stmt */\n\n/*! Production::    stmt : begin_stmt */\n\n/*! Production::    stmt : call_stmt */\n\n/*! Production::    stmt : commit_stmt */\n\n/*! Production::    stmt : create_database_stmt */\n\n/*! Production::    stmt : create_dblink_stmt */\n\n/*! Production::    stmt : create_function_stmt */\n\n/*! Production::    stmt : create_index_stmt */\n\n/*! Production::    stmt : create_keystore_stmt */\n\n/*! Production::    stmt : create_outline_stmt */\n\n/*! Production::    stmt : create_profile_stmt */\n\n/*! Production::    stmt : create_resource_stmt */\n\n/*! Production::    stmt : create_restore_point_stmt */\n\n/*! Production::    stmt : create_role_stmt */\n\n/*! Production::    stmt : create_savepoint_stmt */\n\n/*! Production::    stmt : create_sequence_stmt */\n\n/*! Production::    stmt : create_synonym_stmt */\n\n/*! Production::    stmt : create_table_like_stmt */\n\n/*! Production::    stmt : create_table_stmt */\n\n/*! Production::    stmt : create_tablegroup_stmt */\n\n/*! Production::    stmt : create_tablespace_stmt */\n\n/*! Production::    stmt : create_tenant_stmt */\n\n/*! Production::    stmt : create_user_stmt */\n\n/*! Production::    stmt : create_view_stmt */\n\n/*! Production::    stmt : deallocate_prepare_stmt */\n\n/*! Production::    stmt : delete_stmt */\n\n/*! Production::    stmt : drop_database_stmt */\n\n/*! Production::    stmt : drop_dblink_stmt */\n\n/*! Production::    stmt : drop_function_stmt */\n\n/*! Production::    stmt : drop_index_stmt */\n\n/*! Production::    stmt : drop_outline_stmt */\n\n/*! Production::    stmt : drop_profile_stmt */\n\n/*! Production::    stmt : drop_resource_stmt */\n\n/*! Production::    stmt : drop_restore_point_stmt */\n\n/*! Production::    stmt : drop_role_stmt */\n\n/*! Production::    stmt : drop_sequence_stmt */\n\n/*! Production::    stmt : drop_synonym_stmt */\n\n/*! Production::    stmt : drop_table_stmt */\n\n/*! Production::    stmt : drop_tablegroup_stmt */\n\n/*! Production::    stmt : drop_tablespace_stmt */\n\n/*! Production::    stmt : drop_tenant_stmt */\n\n/*! Production::    stmt : drop_user_stmt */\n\n/*! Production::    stmt : drop_view_stmt */\n\n/*! Production::    stmt : dump_memory_stmt */\n\n/*! Production::    stmt : execute_stmt */\n\n/*! Production::    stmt : explain_stmt */\n\n/*! Production::    stmt : flashback_stmt */\n\n/*! Production::    stmt : get_diagnostics_stmt */\n\n/*! Production::    stmt : grant_stmt */\n\n/*! Production::    stmt : help_stmt */\n\n/*! Production::    stmt : insert_stmt */\n\n/*! Production::    stmt : kill_stmt */\n\n/*! Production::    stmt : load_data_stmt */\n\n/*! Production::    stmt : lock_tables_stmt */\n\n/*! Production::    stmt : lock_user_stmt */\n\n/*! Production::    stmt : merge_stmt */\n\n/*! Production::    stmt : method_opt */\n\n/*! Production::    stmt : optimize_stmt */\n\n/*! Production::    stmt : pl_expr_stmt */\n\n/*! Production::    stmt : prepare_stmt */\n\n/*! Production::    stmt : purge_stmt */\n\n/*! Production::    stmt : recover_tenant_stmt */\n\n/*! Production::    stmt : release_savepoint_stmt */\n\n/*! Production::    stmt : rename_table_stmt */\n\n/*! Production::    stmt : rename_user_stmt */\n\n/*! Production::    stmt : revoke_stmt */\n\n/*! Production::    stmt : rollback_savepoint_stmt */\n\n/*! Production::    stmt : rollback_stmt */\n\n/*! Production::    stmt : rotate_master_key_stmt */\n\n/*! Production::    stmt : select_stmt */\n\n/*! Production::    stmt : set_charset_stmt */\n\n/*! Production::    stmt : set_comment_stmt */\n\n/*! Production::    stmt : set_names_stmt */\n\n/*! Production::    stmt : set_password_stmt */\n\n/*! Production::    stmt : set_role_stmt */\n\n/*! Production::    stmt : set_transaction_stmt */\n\n/*! Production::    stmt : show_stmt */\n\n/*! Production::    stmt : shrink_space_stmt */\n\n/*! Production::    stmt : switchover_tenant_stmt */\n\n/*! Production::    stmt : truncate_table_stmt */\n\n/*! Production::    stmt : unlock_tables_stmt */\n\n/*! Production::    stmt : update_stmt */\n\n/*! Production::    stmt : use_database_stmt */\n\n/*! Production::    stmt : variable_set_stmt */\n\n/*! Production::    stmt : xa_begin_stmt */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table Index\nDESCRIPTION: Defines production rules for table_index in SQL grammar. These rules specify how table indices can be defined, either as an integer number or a variable name.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_176\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_index : INTNUM */\n\n/*! Production::    table_index : var_name */\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Parser Productions\nDESCRIPTION: Core production rules for parsing SQL statements, literals, and base expressions. Includes rules for accepting various types of SQL statements and handling literal values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_0\n\nLANGUAGE: yacc\nCODE:\n```\n/*! Production::    $accept : pl_entry $end */\n/*! Production::    $accept : root $end */\n/*! Production::    $accept : sql_stmt $end */\n/*! Production::    HEXADECIMAL_LITERALs : HEXADECIMAL_LITERAL */\n/*! Production::    STRING_LITERALs : STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Column Definition Lists and Optional Datatypes\nDESCRIPTION: These production rules define how column definitions can be combined into lists and how columns can be defined with optional data types. They allow for creating multiple column definitions in table creation statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    column_definition_list : column_definition */\n\n/*! Production::    column_definition_list : column_definition_list \",\" column_definition */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref data_type opt_visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref data_type opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref opt_column_attribute_list column_attribute */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype : column_definition_ref visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition_opt_datatype_list : column_definition_opt_datatype */\n\n/*! Production::    column_definition_opt_datatype_list : column_definition_opt_datatype_list \",\" column_definition_opt_datatype */\n```\n\n----------------------------------------\n\nTITLE: SET Statement Grammar Productions\nDESCRIPTION: BNF grammar rules specifying valid syntax for SET statements including variable assignments, password management, and transaction settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_178\n\nLANGUAGE: bnf\nCODE:\n```\n/*! Production::    setStatement : SET NAMES DEFAULT */\n\n/*! Production::    setStatement : SET NAMES charsetName opt_collateConfig */\n\n/*! Production::    setStatement : SET charsetKeywords charsetValues */\n\n/*! Production::    setStatement : SET setFullIdAssign */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Field Name\nDESCRIPTION: Specifies that a field name is represented by an identifier in the grammar.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_74\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_name : identifier */\n```\n\n----------------------------------------\n\nTITLE: SQL Unreserved Keyword Definitions\nDESCRIPTION: A collection of SQL unreserved keyword definitions using Production comments. Each keyword is marked as 'unreserved_keyword_normal' indicating it can be used as an identifier in SQL statements without requiring quotes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_206\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : CANCEL */\n/*! Production::    unreserved_keyword_normal : CASCADED */\n/*! Production::    unreserved_keyword_normal : CAST */\n/*! Production::    unreserved_keyword_normal : CATALOG_NAME */\n/*! Production::    unreserved_keyword_normal : CHAIN */\n/*! Production::    unreserved_keyword_normal : CHANGED */\n/*! Production::    unreserved_keyword_normal : CHARSET */\n/*! Production::    unreserved_keyword_normal : CHECKPOINT */\n/*! Production::    unreserved_keyword_normal : CHECKSUM */\n/*! Production::    unreserved_keyword_normal : CHUNK */\n// ... additional keywords omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Production Rules for Locking Operations\nDESCRIPTION: These rules specify the syntax for various table locking operations in SQL, including read and write locks, and lock modes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_100\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    lockAction : READ opt_LOCAL */\n\n/*! Production::    lockAction : opt_LOW_PRIORITY WRITE */\n\n/*! Production::    lockClause : FOR UPDATE */\n\n/*! Production::    lockClause : LOCK IN SHARE MODE */\n\n/*! Production::    lockTableElement : tableName opt_asUid lockAction */\n\n/*! Production::    lockTableElements : lockTableElement */\n\n/*! Production::    lockTableElements : lockTableElement COMMA lockTableElements */\n\n/*! Production::    lockTables : LOCK TABLES lockTableElements */\n\n/*! Production::    lockType : DEFAULT */\n\n/*! Production::    lockType : EXCLUSIVE */\n\n/*! Production::    lockType : NONE */\n\n/*! Production::    lockType : SHARED */\n\n/*! Production::    lock_spec_mysql57 : LOCK */\n\n/*! Production::    lock_spec_mysql57 : LOCK_ */\n\n/*! Production::    lock_spec_mysql57 : UNLOCK */\n\n/*! Production::    lock_table : relation_factor AS relation_name lock_type */\n\n/*! Production::    lock_table : relation_factor lock_type */\n\n/*! Production::    lock_table : relation_factor opt_as relation_name lock_type */\n\n/*! Production::    lock_table : relation_factor relation_name lock_type */\n\n/*! Production::    lock_table_list : lock_table */\n\n/*! Production::    lock_table_list : lock_table_list \",\" lock_table */\n\n/*! Production::    lock_tables_stmt : LOCK_ table_or_tables lock_table_list */\n\n/*! Production::    lock_type : LOW_PRIORITY WRITE */\n\n/*! Production::    lock_type : READ opt_local */\n\n/*! Production::    lock_type : WRITE */\n\n/*! Production::    lock_user_stmt : ALTER USER user_list ACCOUNT lock_spec_mysql57 */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Select Clause Set Production Rules\nDESCRIPTION: This snippet defines production rules for sets of select clauses, including rules for combining multiple select clauses with set operations and ordering/limiting options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_140\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_clause_set : select_clause_set set_type select_clause_set_right */\n\n/*! Production::    select_clause_set : select_clause_set_left set_type select_clause_set_right */\n\n/*! Production::    select_clause_set : select_clause_set_with_order_and_limit set_type select_clause_set_right */\n\n/*! Production::    select_clause_set_left : no_table_select_with_order_and_limit */\n\n/*! Production::    select_clause_set_left : select_clause_set_right */\n\n/*! Production::    select_clause_set_left : simple_select_with_order_and_limit */\n\n/*! Production::    select_clause_set_right : no_table_select */\n\n/*! Production::    select_clause_set_right : select_with_parens */\n\n/*! Production::    select_clause_set_right : simple_select */\n\n/*! Production::    select_clause_set_with_order_and_limit : select_clause_set opt_order_by limit_clause */\n\n/*! Production::    select_clause_set_with_order_and_limit : select_clause_set order_by */\n```\n\n----------------------------------------\n\nTITLE: SHOW Global Information Clause Production Rules in SQL\nDESCRIPTION: Grammar production rules for SHOW statements that display global server information such as status, plugins, and processes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_138\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : AUTHORS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : CONTRIBUTORS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : MASTER STATUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : PLUGINS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : PRIVILEGES */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : PROFILES */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : SLAVE HOSTS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : opt_FULL PROCESSLIST */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showGlobalInfoClause : opt_STORAGE ENGINES */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Table Name Structures with Transpose and Seed\nDESCRIPTION: These productions extend the table name structures to include transpose clauses and seed options for sampling.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_188\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tbl_name : relation_factor sample_clause relation_name transpose_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed AS relation_name */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause seed fetch_next_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Productions for XA Transactions\nDESCRIPTION: This snippet defines parser productions for XA (eXtended Architecture) transaction statements, including commit, end, prepare, and rollback operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_157\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    stmt : xa_commit_stmt */\n\n/*! Production::    stmt : xa_end_stmt */\n\n/*! Production::    stmt : xa_prepare_stmt */\n\n/*! Production::    stmt : xa_rollback_stmt */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Optional Elements in BNF\nDESCRIPTION: A set of Backus-Naur Form (BNF) grammar productions defining optional elements in SQL syntax. These rules represent possible parsing paths for a SQL parser, with '%epsilon' indicating an empty/optional production.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_96\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    opt_lengthOneDimension : lengthOneDimension */\n\n/*! Production::    opt_lengthTwoDimension : %epsilon */\n\n/*! Production::    opt_lengthTwoDimension : lengthTwoDimension */\n\n/*! Production::    opt_lengthTwoOptionalDimension : %epsilon */\n\n/*! Production::    opt_lengthTwoOptionalDimension : lengthTwoOptionalDimension */\n\n/*! Production::    opt_length_semantics_i : %epsilon */\n\n/*! Production::    opt_length_semantics_i : BYTE */\n\n/*! Production::    opt_length_semantics_i : CHAR */\n\n/*! Production::    opt_length_semantics_i : CHARACTER */\n\n/*! Production::    opt_levelsInWeightString : %epsilon */\n\n/*! Production::    opt_levelsInWeightString : levelsInWeightString */\n\n/*! Production::    opt_limit : %epsilon */\n\n/*! Production::    opt_limit : LIMIT INTNUM \",\" INTNUM */\n\n/*! Production::    opt_limit : LIMIT INTNUM */\n\n/*! Production::    opt_limit : LIMIT expr */\n\n/*! Production::    opt_limitClause : %epsilon */\n\n/*! Production::    opt_limitClause : limitClause */\n\n/*! Production::    opt_limit_clause : %epsilon */\n\n/*! Production::    opt_limit_clause : limit_clause */\n\n/*! Production::    opt_linearKeyAlgType : %epsilon */\n\n/*! Production::    opt_linearKeyAlgType : ALGORITHM EQUAL_SYMBOL STRING_LITERAL */\n\n/*! Production::    opt_list_partition_list : \"(\" list_partition_list \")\" */\n\n/*! Production::    opt_list_subpartition_list : \"(\" list_subpartition_list \")\" */\n\n/*! Production::    opt_loadIgnore : %epsilon */\n\n/*! Production::    opt_loadIgnore : IGNORE decimalLiteral linesFormat */\n\n/*! Production::    opt_loadPriority : %epsilon */\n\n/*! Production::    opt_loadPriority : CONCURRENT */\n\n/*! Production::    opt_loadPriority : LOW_PRIORITY */\n\n/*! Production::    opt_load_charset : %epsilon */\n\n/*! Production::    opt_load_charset : CHARACTER SET charset_name_or_default */\n\n/*! Production::    opt_load_data_extended_option_list : %epsilon */\n\n/*! Production::    opt_load_data_extended_option_list : load_data_extended_option_list */\n\n/*! Production::    opt_load_fieldFormat : %epsilon */\n\n/*! Production::    opt_load_fieldFormat : fieldsFormat selectFieldsIntos */\n\n/*! Production::    opt_load_ignore_rows : %epsilon */\n\n/*! Production::    opt_load_ignore_rows : GENERATED INTNUM lines_or_rows */\n\n/*! Production::    opt_load_ignore_rows : IGNORE INTNUM lines_or_rows */\n\n/*! Production::    opt_load_lines : %epsilon */\n\n/*! Production::    opt_load_lines : LINES selectLinesIntos */\n\n/*! Production::    opt_load_local : %epsilon */\n\n/*! Production::    opt_load_local : LOCAL */\n\n/*! Production::    opt_load_local : REMOTE_OSS */\n\n/*! Production::    opt_load_set_spec : %epsilon */\n\n/*! Production::    opt_load_set_spec : SET load_set_list */\n\n/*! Production::    opt_loadedTableFormat : %epsilon */\n\n/*! Production::    opt_loadedTableFormat : opt_tableConstraintFormat LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_loadedTablePartition : %epsilon */\n\n/*! Production::    opt_loadedTablePartition : PARTITION LR_BRACKET ALL RR_BRACKET */\n\n/*! Production::    opt_loadedTablePartition : PARTITION LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_loadxmlrows : %epsilon */\n\n/*! Production::    opt_loadxmlrows : ROWS IDENTIFIED BY LESS_SYMBOL STRING_LITERAL GREATER_SYMBOL */\n\n/*! Production::    opt_local : %epsilon */\n\n/*! Production::    opt_local : LOCAL */\n\n/*! Production::    opt_lockClause : %epsilon */\n\n/*! Production::    opt_lockClause : lockClause */\n\n/*! Production::    opt_match_option : %epsilon */\n\n/*! Production::    opt_match_option : MATCH match_action */\n\n/*! Production::    opt_materialized : %epsilon */\n\n/*! Production::    opt_materialized : MATERIALIZED */\n\n/*! Production::    opt_merge_update_delete : %epsilon */\n\n/*! Production::    opt_merge_update_delete : DELETE WHERE expr */\n\n/*! Production::    opt_mode_flag : %epsilon */\n\n/*! Production::    opt_mode_flag : IN BOOLEAN MODE */\n\n/*! Production::    opt_mode_flag : IN NATURAL LANGUAGE MODE */\n\n/*! Production::    opt_multiset_modifier : %epsilon */\n\n/*! Production::    opt_multiset_modifier : ALL */\n\n/*! Production::    opt_multiset_modifier : DISTINCT */\n\n/*! Production::    opt_named_windows : %epsilon */\n\n/*! Production::    opt_named_windows : WINDOW named_windows */\n\n/*! Production::    opt_namespace : %epsilon */\n\n/*! Production::    opt_namespace : namespace_expr */\n\n/*! Production::    opt_nodeGroupAssign : %epsilon */\n\n/*! Production::    opt_nodeGroupAssign : NODEGROUP EQUAL_SYMBOL uid */\n\n/*! Production::    opt_nodeGroupAssign : NODEGROUP uid */\n\n/*! Production::    opt_nologging : %epsilon */\n\n/*! Production::    opt_nologging : NOLOGGING */\n\n/*! Production::    opt_normal_into_clause : %epsilon */\n\n/*! Production::    opt_normal_into_clause : normal_into_clause */\n\n/*! Production::    opt_not_identified : %epsilon */\n\n/*! Production::    opt_not_identified : NOT IDENTIFIED */\n\n/*! Production::    opt_not_null : %epsilon */\n\n/*! Production::    opt_not_null : NOT NULLX */\n\n/*! Production::    opt_null_pos : %epsilon */\n\n/*! Production::    opt_null_pos : NULLS FIRST */\n\n/*! Production::    opt_null_pos : NULLS LAST */\n\n/*! Production::    opt_number_precision : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_number_precision : \"(\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    opt_number_precision : %epsilon */\n\n/*! Production::    opt_number_precision : number_precision */\n\n/*! Production::    opt_obj_access_ref : \".\" \"*\" */\n\n/*! Production::    opt_obj_access_ref : \".\" obj_access_ref */\n\n/*! Production::    opt_obj_access_ref : %epsilon */\n\n/*! Production::    opt_obj_access_ref_normal : \".\" obj_access_ref_normal */\n\n/*! Production::    opt_obj_access_ref_normal : %epsilon */\n\n/*! Production::    opt_of : %epsilon */\n\n/*! Production::    opt_of : OF */\n\n/*! Production::    opt_oid_clause : %epsilon */\n\n/*! Production::    opt_oid_clause : OID STRING */\n\n/*! Production::    opt_on_duplicate_key_clause : %epsilon */\n\n/*! Production::    opt_on_duplicate_key_clause : ON DUPLICATE KEY UPDATE update_asgn_list */\n\n/*! Production::    opt_on_empty_or_error : on_empty */\n\n/*! Production::    opt_on_empty_or_error : on_empty on_error */\n\n/*! Production::    opt_on_empty_or_error : on_error */\n\n/*! Production::    opt_orReplace : %epsilon */\n\n/*! Production::    opt_orReplace : OR REPLACE */\n\n/*! Production::    opt_orderByClause : %epsilon */\n\n/*! Production::    opt_orderByClause : orderByClause */\n\n/*! Production::    opt_order_by : %epsilon */\n\n/*! Production::    opt_order_by : ORDER BY orderByExprList */\n\n/*! Production::    opt_order_by : order_by */\n\n/*! Production::    opt_outer : %epsilon */\n\n/*! Production::    opt_outer : OUTER */\n\n/*! Production::    opt_outline_target : %epsilon */\n\n/*! Production::    opt_outline_target : TO explainable_stmt */\n\n/*! Production::    opt_ownerStatement : %epsilon */\n\n/*! Production::    opt_ownerStatement : ownerStatement */\n\n/*! Production::    opt_part_id : %epsilon */\n\n/*! Production::    opt_part_id : ID INTNUM */\n\n/*! Production::    opt_partitionCount : %epsilon */\n\n/*! Production::    opt_partitionCount : PARTITIONS decimalLiteral */\n\n/*! Production::    opt_partitionDefinitions : %epsilon */\n\n/*! Production::    opt_partitionDefinitions : partitionDefinitions */\n\n/*! Production::    opt_partitionOptions : %epsilon */\n\n/*! Production::    opt_partitionOptions : partitionOptions */\n\n/*! Production::    opt_partition_by : %epsilon */\n\n/*! Production::    opt_partition_by : PARTITION BY expr_list */\n\n/*! Production::    opt_partition_option : %epsilon */\n\n/*! Production::    opt_partition_option : auto_partition_option */\n\n/*! Production::    opt_partition_option : opt_column_partition_option */\n\n/*! Production::    opt_partition_option : partition_option */\n\n/*! Production::    opt_partition_range_or_list : opt_list_partition_list */\n\n/*! Production::    opt_partition_range_or_list : opt_range_partition_list */\n\n/*! Production::    opt_partitions : %epsilon */\n\n/*! Production::    opt_partitions : PARTITIONS INTNUM */\n\n/*! Production::    opt_partitonValueList : %epsilon */\n\n/*! Production::    opt_partitonValueList : partitonValueList */\n\n/*! Production::    opt_physical_attributes_options : %epsilon */\n\n/*! Production::    opt_physical_attributes_options : physical_attributes_option_list */\n\n/*! Production::    opt_pipelined : %epsilon */\n\n/*! Production::    opt_pipelined : PIPELINED */\n\n/*! Production::    opt_position_column : %epsilon */\n\n/*! Production::    opt_position_column : AFTER column_name */\n\n/*! Production::    opt_position_column : BEFORE column_name */\n\n/*! Production::    opt_position_column : FIRST */\n\n/*! Production::    opt_preview : %epsilon */\n\n/*! Production::    opt_preview : PREVIEW */\n\n/*! Production::    opt_primary : %epsilon */\n\n/*! Production::    opt_primary : PRIMARY */\n\n/*! Production::    opt_primary_rootservice_list : %epsilon */\n\n/*! Production::    opt_primary_rootservice_list : PRIMARY_ROOTSERVICE_LIST STRING_VALUE */\n\n/*! Production::    opt_privilege : %epsilon */\n\n/*! Production::    opt_privilege : PRIVILEGES */\n\n/*! Production::    opt_procDirection : %epsilon */\n\n/*! Production::    opt_procDirection : IN */\n\n/*! Production::    opt_procDirection : INOUT */\n\n/*! Production::    opt_procDirection : OUT */\n\n/*! Production::    opt_proc_clause : %epsilon */\n\n/*! Production::    opt_proc_clause : proc_clause_list */\n\n/*! Production::    opt_procedureParameters : %epsilon */\n\n/*! Production::    opt_procedureParameters : procedureParameters */\n\n/*! Production::    opt_procedureSqlStatements : %epsilon */\n\n/*! Production::    opt_procedureSqlStatements : procedureSqlStatements */\n\n/*! Production::    opt_profile : %epsilon */\n\n/*! Production::    opt_profile : user_profile */\n\n/*! Production::    opt_public : %epsilon */\n\n/*! Production::    opt_public : PUBLIC */\n\n/*! Production::    opt_purge : %epsilon */\n\n/*! Production::    opt_purge : PURGE */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Production Rules for Data Loading and Index Operations\nDESCRIPTION: These rules specify the syntax for loading data into tables and loading indexes into cache, including various options and file specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_99\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    loadIndexIntoCache : LOAD INDEX INTO CACHE loadedTableIndexesList */\n\n/*! Production::    load_data_extended_option : BADFILE opt_equal_mark STRING_VALUE */\n\n/*! Production::    load_data_extended_option : LOGFILE opt_equal_mark STRING_VALUE */\n\n/*! Production::    load_data_extended_option : REJECT LIMIT opt_equal_mark INTNUM */\n\n/*! Production::    load_data_extended_option_list : load_data_extended_option */\n\n/*! Production::    load_data_extended_option_list : load_data_extended_option load_data_extended_option_list */\n\n/*! Production::    load_data_stmt : load_data_with_opt_hint opt_load_local INFILE STRING_VALUE opt_duplicate INTO TABLE relation_factor opt_use_partition opt_load_charset field_opt line_opt opt_load_ignore_rows opt_field_or_var_spec opt_load_set_spec opt_load_data_extended_option_list */\n\n/*! Production::    load_data_with_opt_hint : LOAD DATA */\n\n/*! Production::    load_data_with_opt_hint : LOAD_DATA_HINT_BEGIN hint_list_with_end */\n\n/*! Production::    load_set_element : column_definition_ref COMP_EQ expr_or_default */\n\n/*! Production::    load_set_list : load_set_element */\n\n/*! Production::    load_set_list : load_set_list \",\" load_set_element */\n\n/*! Production::    loadedTableIndexes : tableName opt_loadedTablePartition opt_loadedTableFormat */\n\n/*! Production::    loadedTableIndexes : tableName opt_loadedTablePartition opt_loadedTableFormat IGNORE LEAVES */\n\n/*! Production::    loadedTableIndexesList : loadedTableIndexes */\n\n/*! Production::    loadedTableIndexesList : loadedTableIndexes COMMA loadedTableIndexesList */\n```\n\n----------------------------------------\n\nTITLE: MySQL Grant Statement Productions\nDESCRIPTION: Grammar productions for MySQL GRANT statements including privilege assignments and proxy grants.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_84\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    grantProxy : GRANT PROXY ON userName TO userNames */\n/*! Production::    grantProxy : GRANT PROXY ON userName TO userNames WITH GRANT OPTION */\n/*! Production::    grantStatement : GRANT privelegeClauses ON privilegeObject privilegeLevel TO userAuthOptions REQUIRE user_tlsOpt opt_withGrantOptions */\n```\n\n----------------------------------------\n\nTITLE: Privilege Object and Base Production Rules\nDESCRIPTION: Grammar rules defining valid privilege objects (FUNCTION, PROCEDURE, TABLE) and base privileges (EXECUTE, FILE, etc)\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_129\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    privilegeObject : %epsilon */\n/*! Production::    privilegeObject : FUNCTION */\n/*! Production::    privilegeObject : PROCEDURE */\n/*! Production::    privilegeObject : TABLE */\n\n/*! Production::    privilegesBase : EXECUTE */\n/*! Production::    privilegesBase : FILE */\n/*! Production::    privilegesBase : PRIVILEGES */\n/*! Production::    privilegesBase : PROCESS */\n/*! Production::    privilegesBase : RELOAD */\n/*! Production::    privilegesBase : ROUTINE */\n/*! Production::    privilegesBase : SHUTDOWN */\n/*! Production::    privilegesBase : SUPER */\n/*! Production::    privilegesBase : TABLES */\n```\n\n----------------------------------------\n\nTITLE: Rendering BitsandbytesQuantization8bits Configuration Component with React in JSX\nDESCRIPTION: This code renders a ConfigDetail component with configuration parameters for bits and bytes 8-bit quantization. It includes options for loading models in different bit precisions, CPU offloading settings, threshold values for outlier detection, and module exclusion options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/parameter_bitsandbytesquantization8bits_909aed.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"BitsandbytesQuantization8bits\",\n  \"description\": \"Bits and bytes quantization 8 bits parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"load_in_8bits\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to load the model in 8 bits(LLM.int8() algorithm).\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"load_in_4bits\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to load the model in 4 bits, default is False.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"llm_int8_enable_fp32_cpu_offload\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"8-bit models can offload weights between the CPU and GPU to support fitting very large models into memory. The weights dispatched to the CPU are actually stored in float32, and aren't converted to 8-bit. \",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"llm_int8_threshold\",\n      \"type\": \"number\",\n      \"required\": false,\n      \"description\": \"An \\\"outlier\\\" is a hidden state value greater than a certain threshold, and these values are computed in fp16. While the values are usually normally distributed ([-3.5, 3.5]), this distribution can be very different for large models ([-60, 6] or [6, 60]). 8-bit quantization works well for values ~5, but beyond that, there is a significant performance penalty. A good default threshold value is 6, but a lower threshold may be needed for more unstable models (small models or finetuning).\",\n      \"defaultValue\": \"6.0\"\n    },\n    {\n      \"name\": \"llm_int8_skip_modules\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"An explicit list of the modules that we do not want to convert in 8-bit. This is useful for models such as Jukebox that has several heads in different places and not necessarily at the last position. For example for `CausalLM` models, the last `lm_head` is kept in its original `dtype`\",\n      \"defaultValue\": \"[]\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Creating Keystore Statement in SQL\nDESCRIPTION: Specifies the syntax for creating a keystore with authentication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_keystore_stmt : ADMINISTER KEY MANAGEMENT CREATE KEYSTORE relation_name IDENTIFIED BY password\n```\n\n----------------------------------------\n\nTITLE: SQL Keyword and Statement Rules\nDESCRIPTION: Production rules defining SQL keywords, statement types, and their syntax. These rules cover how different SQL statements are formed and their relationship to keywords like DELETE, INSERT, UPDATE, etc.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_163\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    sql_id_expr : SQL_ID opt_equal_mark STRING_VALUE */\n\n/*! Production::    sql_keyword : DELETE */\n\n/*! Production::    sql_keyword : INSERT */\n\n/*! Production::    sql_keyword : SAVEPOINT */\n\n/*! Production::    sql_keyword : SET */\n\n/*! Production::    sql_keyword : SQL_KEYWORD */\n\n/*! Production::    sql_keyword : TABLE */\n\n/*! Production::    sql_keyword : UPDATE */\n\n/*! Production::    sql_keyword : WITH */\n\n/*! Production::    sql_stmt : ALTER sql_keyword */\n\n/*! Production::    sql_stmt : COMMIT */\n\n/*! Production::    sql_stmt : CREATE sql_keyword */\n\n/*! Production::    sql_stmt : ROLLBACK */\n\n/*! Production::    sql_stmt : expr END_P */\n\n/*! Production::    sql_stmt : sql_keyword */\n\n/*! Production::    sql_stmt : stmt_list */\n```\n\n----------------------------------------\n\nTITLE: SHOW Index Type Production Rules in SQL\nDESCRIPTION: Grammar production rules for index types used in SHOW INDEX statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_139\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showIndexType : INDEX */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showIndexType : INDEXES */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showIndexType : KEYS */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Test Values and Text Types\nDESCRIPTION: These productions define test values (TRUE, FALSE, UNKNOWN) and various text data types used in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_195\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    testValue : FALSE */\n\n/*! Production::    testValue : TRUE */\n\n/*! Production::    testValue : UNKNOWN */\n\n/*! Production::    text_string : HEX_STRING_VALUE */\n\n/*! Production::    text_string : STRING_VALUE */\n\n/*! Production::    text_type_i : LONGTEXT */\n\n/*! Production::    text_type_i : MEDIUMTEXT */\n\n/*! Production::    text_type_i : MEDIUMTEXT VARCHAR */\n\n/*! Production::    text_type_i : TEXT */\n\n/*! Production::    text_type_i : TINYTEXT */\n```\n\n----------------------------------------\n\nTITLE: SQL Rule Definitions\nDESCRIPTION: Collection of SQL rule definitions using comment syntax. Each rule defines a SQL keyword or command that can be used in database operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_202\n\nLANGUAGE: sql\nCODE:\n```\n/*! Rule::       MEDIUMBLOB */\n/*! Rule::       MEDIUMINT */\n/*! Rule::       MEDIUMTEXT */\n/*! Rule::       MEMBER */\n/*! Rule::       MEMORY */\n/*! Rule::       MEMTABLE */\n/*! Rule::       MERGE */\n/*! Rule::       MESSAGE_TEXT */\n/*! Rule::       META */\n/*! Rule::       MICROSECOND */\n/*! Rule::       MIDDLEINT */\n/*! Rule::       MIGRATE */\n/*! Rule::       MIGRATION */\n/*! Rule::       MIN */\n/*! Rule::       MINEXTENTS */\n/*! Rule::       MINOR */\n/*! Rule::       MINUS */\n/*! Rule::       MINUTE */\n/*! Rule::       MINUTE_MICROSECOND */\n/*! Rule::       MINUTE_SECOND */\n/*! Rule::       MINVALUE */\n/*! Rule::       MIN_CPU */\n/*! Rule::       MIN_IOPS */\n/*! Rule::       MIN_MEMORY */\n/*! Rule::       MIN_ROWS */\n/*! Rule::       MLSLABEL */\n/*! Rule::       MOD */\n/*! Rule::       MODE */\n/*! Rule::       MODIFIES */\n/*! Rule::       MODIFY */\n/*! Rule::       MODULE */\n/*! Rule::       MONTH */\n/*! Rule::       MOUNT */\n/*! Rule::       MOVE */\n/*! Rule::       MOVEMENT */\n/*! Rule::       MULTILINESTRING */\n/*! Rule::       MULTIPOINT */\n/*! Rule::       MULTIPOLYGON */\n/*! Rule::       MUTEX */\n/*! Rule::       MYSQL_ERRNO */\n/*! Rule::       NAME */\n/*! Rule::       NAMES */\n/*! Rule::       NATIONAL */\n/*! Rule::       NATURAL */\n/*! Rule::       NATURALN */\n/*! Rule::       NCHAR */\n/*! Rule::       NDB */\n/*! Rule::       NDBCLUSTER */\n/*! Rule::       NETWORK */\n/*! Rule::       NEW */\n/*! Rule::       NEXT */\n/*! Rule::       NEXTVAL */\n/*! Rule::       NO */\n/*! Rule::       NOARCHIVELOG */\n/*! Rule::       NOAUDIT */\n/*! Rule::       NOCACHE */\n/*! Rule::       NOCOMPRESS */\n/*! Rule::       NOCOPY */\n/*! Rule::       NOCYCLE */\n/*! Rule::       NODEGROUP */\n/*! Rule::       NOLOGGING */\n/*! Rule::       NOMAXVALUE */\n/*! Rule::       NOMINVALUE */\n/*! Rule::       NONE */\n/*! Rule::       NONEDITIONABLE */\n/*! Rule::       NOORDER */\n/*! Rule::       NORELY */\n/*! Rule::       NORESETLOGS */\n/*! Rule::       NOSORT */\n/*! Rule::       NOT */\n/*! Rule::       NOTFOUND */\n/*! Rule::       NOVALIDATE */\n/*! Rule::       NOW */\n/*! Rule::       NOWAIT */\n/*! Rule::       NO_REWRITE */\n/*! Rule::       NO_WAIT */\n/*! Rule::       NO_WRITE_TO_BINLOG */\n/*! Rule::       NTH_VALUE */\n/*! Rule::       NTILE */\n/*! Rule::       NULL */\n/*! Rule::       NULLS */\n/*! Rule::       NUMBER */\n/*! Rule::       NUMBER_BASE */\n/*! Rule::       NUMERIC */\n/*! Rule::       NVARCHAR */\n/*! Rule::       NVARCHAR2 */\n/*! Rule::       N{SQUOTA_STRING} */\n/*! Rule::       OBJECT */\n/*! Rule::       OCCUR */\n/*! Rule::       OF */\n/*! Rule::       OFF */\n/*! Rule::       OFFLINE */\n/*! Rule::       OFFSET */\n/*! Rule::       OID */\n/*! Rule::       OLD */\n/*! Rule::       OLD_KEY */\n/*! Rule::       OLD_PASSWORD */\n/*! Rule::       OLTP */\n/*! Rule::       ON */\n/*! Rule::       ONE */\n/*! Rule::       ONE_SHOT */\n/*! Rule::       ONLINE */\n/*! Rule::       ONLY */\n/*! Rule::       OPEN */\n/*! Rule::       OPTIMAL */\n/*! Rule::       OPTIMIZE */\n/*! Rule::       OPTION */\n/*! Rule::       OPTIONALLY */\n/*! Rule::       OPTIONS */\n/*! Rule::       OR */\n/*! Rule::       ORADATA */\n/*! Rule::       ORA_ROWSCN */\n/*! Rule::       ORDER */\n/*! Rule::       ORIG_DEFAULT */\n/*! Rule::       OTHERS */\n/*! Rule::       OUT */\n/*! Rule::       OUTER */\n/*! Rule::       OUTFILE */\n/*! Rule::       OUTLINE */\n/*! Rule::       OVER */\n/*! Rule::       OVERRIDING */\n/*! Rule::       OWN */\n/*! Rule::       OWNER */\n/*! Rule::       P */\n/*! Rule::       PACKAGE */\n/*! Rule::       PACK_KEYS */\n/*! Rule::       PAGE */\n/*! Rule::       PARALLEL */\n/*! Rule::       PARALLEL_ENABLE */\n/*! Rule::       PARAMETERS */\n/*! Rule::       PARENT */\n/*! Rule::       PARSER */\n/*! Rule::       PARTIAL */\n/*! Rule::       PARTITION */\n/*! Rule::       PARTITIONING */\n/*! Rule::       PARTITIONS */\n/*! Rule::       PARTITION_ID */\n/*! Rule::       PASSWORD */\n/*! Rule::       PASSWORD_LOCK_TIME */\n/*! Rule::       PASSWORD_VERIFY_FUNCTION */\n/*! Rule::       PAUSE */\n/*! Rule::       PCTFREE */\n/*! Rule::       PCTINCREASE */\n/*! Rule::       PCTUSED */\n/*! Rule::       PERCENT */\n/*! Rule::       PERCENTAGE */\n/*! Rule::       PERCENT_RANK */\n/*! Rule::       PHASE */\n/*! Rule::       PIPELINED */\n/*! Rule::       PIVOT */\n/*! Rule::       PLAN */\n/*! Rule::       PLANREGRESS */\n/*! Rule::       PLI */\n/*! Rule::       PLS_INTEGER */\n/*! Rule::       PLUGIN */\n/*! Rule::       PLUGINS */\n/*! Rule::       PLUGIN_DIR */\n/*! Rule::       POINT */\n/*! Rule::       POLICY */\n/*! Rule::       POLYGON */\n/*! Rule::       POOL */\n/*! Rule::       PORT */\n/*! Rule::       POSITION */\n/*! Rule::       POSITIVE */\n/*! Rule::       POSITIVEN */\n/*! Rule::       PRAGMA */\n/*! Rule::       PRECEDING */\n/*! Rule::       PRECISION */\n/*! Rule::       PREPARE */\n/*! Rule::       PRESERVE */\n/*! Rule::       PREV */\n/*! Rule::       PRIMARY */\n/*! Rule::       PRIMARY_ZONE */\n/*! Rule::       PRIOR */\n/*! Rule::       PRIORITY */\n/*! Rule::       PRIVATE */\n/*! Rule::       PRIVILEGE */\n/*! Rule::       PRIVILEGES */\n/*! Rule::       PROCEDURE */\n/*! Rule::       PROCESS */\n/*! Rule::       PROCESSLIST */\n/*! Rule::       PROFILE */\n/*! Rule::       PROFILES */\n/*! Rule::       PROGRESSIVE_MERGE_NUM */\n/*! Rule::       PROXY */\n/*! Rule::       PUBLIC */\n/*! Rule::       PURGE */\n/*! Rule::       QUARTER */\n/*! Rule::       QUERY */\n/*! Rule::       QUEUE_TIME */\n/*! Rule::       QUICK */\n/*! Rule::       QUOTA */\n/*! Rule::       RAISE */\n/*! Rule::       RANGE */\n/*! Rule::       RANK */\n/*! Rule::       RATIO_TO_REPORT */\n/*! Rule::       RAW */\n/*! Rule::       READ */\n/*! Rule::       READS */\n/*! Rule::       READ_CONSISTENCY */\n/*! Rule::       READ_ONLY */\n/*! Rule::       READ_WRITE */\n/*! Rule::       REAL */\n/*! Rule::       REBUILD */\n/*! Rule::       RECORD */\n/*! Rule::       RECOVER */\n/*! Rule::       RECURSIVE */\n/*! Rule::       RECYCLE */\n/*! Rule::       RECYCLEBIN */\n/*! Rule::       REDACTION */\n/*! Rule::       REDOFILE */\n/*! Rule::       REDO_BUFFER_SIZE */\n/*! Rule::       REDUNDANT */\n/*! Rule::       REF */\n/*! Rule::       REFERENCES */\n/*! Rule::       REFERENCING */\n/*! Rule::       REFRESH */\n/*! Rule::       REGEXP_LIKE */\n/*! Rule::       REGR_AVGX */\n/*! Rule::       REGR_AVGY */\n/*! Rule::       REGR_COUNT */\n/*! Rule::       REGR_INTERCEPT */\n/*! Rule::       REGR_R2 */\n/*! Rule::       REGR_SLOPE */\n/*! Rule::       REGR_SXX */\n/*! Rule::       REGR_SXY */\n/*! Rule::       REGR_SYY */\n/*! Rule::       RELAY */\n/*! Rule::       RELAYLOG */\n/*! Rule::       RELAY_LOG_FILE */\n/*! Rule::       RELAY_LOG_POS */\n/*! Rule::       RELAY_THREAD */\n/*! Rule::       RELEASE */\n/*! Rule::       RELIES_ON */\n/*! Rule::       RELOAD */\n/*! Rule::       RELY */\n/*! Rule::       REMOTE_OSS */\n/*! Rule::       REMOVE */\n/*! Rule::       REMR */\n/*! Rule::       RENAME */\n/*! Rule::       REORGANIZE */\n/*! Rule::       REPAIR */\n/*! Rule::       REPEAT */\n/*! Rule::       REPEATABLE */\n/*! Rule::       REPLACE */\n/*! Rule::       REPLICA */\n/*! Rule::       REPLICATION */\n/*! Rule::       REPLICA_NUM */\n/*! Rule::       REPLICA_TYPE */\n/*! Rule::       REPORT */\n/*! Rule::       REQUIRE */\n/*! Rule::       RESET */\n/*! Rule::       RESETLOGS */\n/*! Rule::       RESIGNAL */\n/*! Rule::       RESOURCE */\n/*! Rule::       RESOURCE_POOL_LIST */\n/*! Rule::       RESPECT */\n/*! Rule::       RESTART */\n/*! Rule::       RESTORE */\n/*! Rule::       RESTRICT */\n/*! Rule::       RESTRICTED */\n/*! Rule::       RESULT */\n/*! Rule::       RESULT_CACHE */\n/*! Rule::       RESUME */\n/*! Rule::       RETURN */\n/*! Rule::       RETURNED_SQLSTATE */\n/*! Rule::       RETURNING */\n/*! Rule::       RETURNS */\n/*! Rule::       REUSE */\n/*! Rule::       REVERSE */\n/*! Rule::       REVOKE */\n/*! Rule::       REWRITE_MERGE_VERSION */\n/*! Rule::       RIGHT */\n/*! Rule::       RLIKE */\n/*! Rule::       RNDS */\n/*! Rule::       RNPS */\n/*! Rule::       ROLE */\n/*! Rule::       ROLES */\n/*! Rule::       ROLLBACK */\n/*! Rule::       ROLLUP */\n/*! Rule::       ROOT */\n/*! Rule::       ROOTSERVICE */\n/*! Rule::       ROOTTABLE */\n/*! Rule::       ROUTINE */\n/*! Rule::       ROW */\n/*! Rule::       ROWCOUNT */\n/*! Rule::       ROWID */\n/*! Rule::       ROWLABEL */\n/*! Rule::       ROWNUM */\n/*! Rule::       ROWS */\n/*! Rule::       ROWTYPE */\n/*! Rule::       ROW_COUNT */\n/*! Rule::       ROW_FORMAT */\n/*! Rule::       ROW_NUMBER */\n/*! Rule::       RT */\n/*! Rule::       RTREE */\n/*! Rule::       RUN */\n/*! Rule::       SAMPLE */\n/*! Rule::       SAVE */\n/*! Rule::       SAVEPOINT */\n/*! Rule::       SCHEDULE */\n/*! Rule::       SCHEMA */\n/*! Rule::       SCHEMAS */\n/*! Rule::       SCHEMA_NAME */\n/*! Rule::       SCN */\n/*! Rule::       SCOPE */\n/*! Rule::       SEARCH */\n/*! Rule::       SECOND */\n/*! Rule::       SECOND_MICROSECOND */\n/*! Rule::       SECTION */\n/*! Rule::       SECURITY */\n/*! Rule::       SEED */\n/*! Rule::       SEGMENT */\n/*! Rule::       SELECT */\n/*! Rule::       SELF */\n/*! Rule::       SENSITIVE */\n/*! Rule::       SEPARATE */\n/*! Rule::       SEPARATOR */\n/*! Rule::       SEQUENCE */\n/*! Rule::       SERIAL */\n/*! Rule::       SERIALIZABLE */\n/*! Rule::       SERVER */\n/*! Rule::       SERVER_IP */\n/*! Rule::       SERVER_PORT */\n/*! Rule::       SERVER_TYPE */\n/*! Rule::       SESSION */\n/*! Rule::       SESSIONTIMEZONE */\n/*! Rule::       SESSION_USER */\n/*! Rule::       SET */\n/*! Rule::       SETTINGS */\n/*! Rule::       SET_MASTER_CLUSTER */\n/*! Rule::       SET_SLAVE_CLUSTER */\n/*! Rule::       SET_TP */\n/*! Rule::       SHARE */\n/*! Rule::       SHARED */\n/*! Rule::       SHOW */\n```\n\n----------------------------------------\n\nTITLE: SQL Optimization Hint Productions\nDESCRIPTION: Defines grammar rules for SQL optimization hints including index hints, join methods, and parallel execution directives\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_135\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    optimize_hint : DISTINCT_PUSHDOWN opt_qb_name */\n/*! Production::    optimize_hint : INDEX_HINT \"(\" qb_name_option relation_factor_in_hint NAME_OB \")\" */\n/*! Production::    optimize_hint : USE_HASH \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n/*! Production::    optimize_hint : USE_MERGE \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Order By Clause Syntax\nDESCRIPTION: This snippet defines the syntax for SQL ORDER BY clauses, including expressions and sort order specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_117\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    orderByClause : ORDER BY orderByExprList */\n/*! Production::    orderByExprList : orderByExpression */\n/*! Production::    orderByExprList : orderByExpression COMMA orderByExprList */\n/*! Production::    orderByExpression : expression */\n/*! Production::    orderByExpression : expression ASC */\n/*! Production::    orderByExpression : expression DESC */\n```\n\n----------------------------------------\n\nTITLE: SQL Index Lock and Options Productions\nDESCRIPTION: Grammar rules for index locking options and various index properties like visibility, block size, and parser configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_97\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    indexLockAssign : LOCK EQUAL_SYMBOL lockType */\n\n/*! Production::    indexLockAssign : LOCK lockType */\n\n/*! Production::    indexOption : COMMENT STRING_LITERAL */\n\n/*! Production::    indexOption : INVISIBLE */\n\n/*! Production::    indexOption : KEY_BLOCK_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    indexOption : VISIBLE */\n\n/*! Production::    indexOption : WITH PARSER uid */\n\n/*! Production::    indexOption : indexType */\n\n/*! Production::    indexOptions : indexOption */\n\n/*! Production::    indexOptions : indexOption indexOptions */\n\n/*! Production::    indexType : USING BTREE */\n\n/*! Production::    indexType : USING HASH */\n```\n\n----------------------------------------\n\nTITLE: MySQL Grammar Production Rules for Optional SQL Elements\nDESCRIPTION: A collection of MySQL grammar production rules that define optional SQL syntax elements. These rules show how various optional elements in SQL queries can be either empty (represented by %epsilon) or have specific values. The rules cover numerous SQL features from basic syntax elements to complex optional clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_90\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_SAVEPOINT : %epsilon */\n\n/*! Production::    opt_SAVEPOINT : SAVEPOINT */\n\n/*! Production::    opt_SEMI : %epsilon */\n\n/*! Production::    opt_SEMI : SEMI */\n\n/*! Production::    opt_STORAGE : %epsilon */\n\n/*! Production::    opt_STORAGE : STORAGE */\n\n/*! Production::    opt_STRING_CHARSET_NAME : %epsilon */\n\n/*! Production::    opt_STRING_CHARSET_NAME : STRING_CHARSET_NAME */\n\n/*! Production::    opt_StmtLabel : %epsilon */\n\n/*! Production::    opt_StmtLabel : uid COLON_SYMB */\n\n/*! Production::    opt_TEMPORARY : %epsilon */\n\n/*! Production::    opt_TEMPORARY : TEMPORARY */\n\n/*! Production::    opt_USE_FRM : %epsilon */\n\n/*! Production::    opt_USE_FRM : USE_FRM */\n\n/*! Production::    opt_VALUE : %epsilon */\n\n/*! Production::    opt_VALUE : VALUE */\n\n/*! Production::    opt_WAIT : %epsilon */\n\n/*! Production::    opt_WAIT : WAIT */\n\n/*! Production::    opt_WORK : %epsilon */\n\n/*! Production::    opt_WORK : WORK */\n\n/*! Production::    opt_ZEROFILL : %epsilon */\n\n/*! Production::    opt_ZEROFILL : ZEROFILL */\n\n/*! Production::    opt_agg : %epsilon */\n\n/*! Production::    opt_agg : AGGREGATE */\n\n/*! Production::    opt_algorithm : %epsilon */\n\n/*! Production::    opt_algorithm : ALGORITHM COMP_EQ view_algorithm */\n\n/*! Production::    opt_alias : %epsilon */\n\n/*! Production::    opt_alias : relation_name */\n\n/*! Production::    opt_all : %epsilon */\n\n/*! Production::    opt_all : ALL */\n\n/*! Production::    opt_alterColumnSort : AFTER uid */\n\n/*! Production::    opt_alterColumnSort : FIRST */\n\n/*! Production::    opt_alterSpecifications : %epsilon */\n\n/*! Production::    opt_alterSpecifications : alterSpecifications */\n\n/*! Production::    opt_alter_compress_option : MOVE compress_option */\n\n/*! Production::    opt_analyze_for_clause : %epsilon */\n\n/*! Production::    opt_analyze_for_clause : opt_analyze_for_clause_list */\n\n/*! Production::    opt_analyze_for_clause_element : FOR ALL opt_analyze_index COLUMNS opt_bucket_num */\n\n/*! Production::    opt_analyze_for_clause_element : FOR COLUMNS opt_bucket_num analyze_column_list */\n\n/*! Production::    opt_analyze_for_clause_element : FOR TABLE */\n\n/*! Production::    opt_analyze_for_clause_element : for_all */\n\n/*! Production::    opt_analyze_for_clause_element : for_columns */\n\n/*! Production::    opt_analyze_for_clause_list : opt_analyze_for_clause_element */\n\n/*! Production::    opt_analyze_for_clause_list : opt_analyze_for_clause_list opt_analyze_for_clause_element */\n\n/*! Production::    opt_analyze_index : %epsilon */\n\n/*! Production::    opt_analyze_index : INDEX */\n\n/*! Production::    opt_analyze_sample_clause : %epsilon */\n\n/*! Production::    opt_analyze_sample_clause : SAMPLE INTNUM sample_option */\n\n/*! Production::    opt_as : %epsilon */\n\n/*! Production::    opt_as : AS */\n\n/*! Production::    opt_asUid : %epsilon */\n\n/*! Production::    opt_asUid : AS uid */\n\n/*! Production::    opt_asUid : uid */\n\n/*! Production::    opt_as_alias : %epsilon */\n\n/*! Production::    opt_as_alias : opt_as relation_name */\n\n/*! Production::    opt_as_expr : %epsilon */\n\n/*! Production::    opt_as_expr : AS bit_expr */\n\n/*! Production::    opt_ascOrDesc : %epsilon */\n\n/*! Production::    opt_ascOrDesc : ASC */\n\n/*! Production::    opt_ascOrDesc : DESC */\n\n/*! Production::    opt_asc_desc : %epsilon */\n\n/*! Production::    opt_asc_desc : ASC */\n\n/*! Production::    opt_asc_desc : DESC */\n\n/*! Production::    opt_asc_desc : opt_ascending_type opt_null_pos */\n\n/*! Production::    opt_asc_desc_for_group_by : %epsilon */\n\n/*! Production::    opt_asc_desc_for_group_by : ASC */\n\n/*! Production::    opt_asc_desc_for_group_by : DESC */\n\n/*! Production::    opt_ascending_type : %epsilon */\n\n/*! Production::    opt_ascending_type : ASC */\n\n/*! Production::    opt_ascending_type : DESC */\n\n/*! Production::    opt_ascii : %epsilon */\n\n/*! Production::    opt_ascii : ASCII */\n\n/*! Production::    opt_assignmentFieldsWithB : %epsilon */\n\n/*! Production::    opt_assignmentFieldsWithB : LR_BRACKET assignmentFields RR_BRACKET */\n\n/*! Production::    opt_backup_backup_dest : %epsilon */\n\n/*! Production::    opt_backup_backup_dest : BACKUP_BACKUP_DEST opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_backup_copies : %epsilon */\n\n/*! Production::    opt_backup_copies : BACKUP_COPIES opt_equal_mark INTNUM */\n\n/*! Production::    opt_backup_dest : %epsilon */\n\n/*! Production::    opt_backup_dest : FROM STRING_VALUE */\n\n/*! Production::    opt_backup_tenant_list : %epsilon */\n\n/*! Production::    opt_backup_tenant_list : TENANT opt_equal_mark tenant_name_list */\n\n/*! Production::    opt_backup_to : %epsilon */\n\n/*! Production::    opt_backup_to : TO opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_balance_task_type : %epsilon */\n\n/*! Production::    opt_balance_task_type : TYPE opt_equal_mark balance_task_type */\n\n/*! Production::    opt_baseline_id : %epsilon */\n\n/*! Production::    opt_baseline_id : baseline_id_expr */\n\n/*! Production::    opt_between_bound : %epsilon */\n\n/*! Production::    opt_between_bound : BETWEEN lower_bound AND upper_bound */\n\n/*! Production::    opt_binary : %epsilon */\n\n/*! Production::    opt_binary : BINARY */\n\n/*! Production::    opt_bit_length_i : \\\"(\\\" INTNUM \\\")\\\" */\n\n/*! Production::    opt_bit_length_i : %epsilon */\n\n/*! Production::    opt_block : %epsilon */\n\n/*! Production::    opt_block : BLOCK */\n\n/*! Production::    opt_body : %epsilon */\n\n/*! Production::    opt_body : BODY */\n\n/*! Production::    opt_bucket_num : %epsilon */\n\n/*! Production::    opt_bucket_num : SIZE INTNUM */\n\n/*! Production::    opt_cache_name : %epsilon */\n\n/*! Production::    opt_cache_name : cache_name */\n\n/*! Production::    opt_calibration_list : %epsilon */\n\n/*! Production::    opt_calibration_list : CALIBRATION_INFO opt_equal_mark \\\"(\\\" calibration_info_list \\\")\\\" */\n\n/*! Production::    opt_cascade : %epsilon */\n\n/*! Production::    opt_cascade : CASCADE */\n\n/*! Production::    opt_cascade_constraints : %epsilon */\n\n/*! Production::    opt_cascade_constraints : CASCADE CONSTRAINTS */\n\n/*! Production::    opt_cast_float_precision : \\\"(\\\" INTNUM \\\")\\\" */\n\n/*! Production::    opt_cast_float_precision : %epsilon */\n\n/*! Production::    opt_cexpr : %epsilon */\n\n/*! Production::    opt_channelOption : %epsilon */\n\n/*! Production::    opt_channelOption : channelOption */\n\n/*! Production::    opt_characterSet : %epsilon */\n\n/*! Production::    opt_characterSet : characterSet */\n\n/*! Production::    opt_charset : %epsilon */\n\n/*! Production::    opt_charset : charset_key charset_name */\n\n/*! Production::    opt_check_option : %epsilon */\n\n/*! Production::    opt_check_option : WITH CASCADED CHECK OPTION */\n\n/*! Production::    opt_check_option : WITH CHECK OPTION */\n\n/*! Production::    opt_check_option : WITH LOCAL CHECK OPTION */\n\n/*! Production::    opt_cluster : %epsilon */\n\n/*! Production::    opt_cluster : CLUSTER relation_name */\n\n/*! Production::    opt_cluster_type : %epsilon */\n\n/*! Production::    opt_cluster_type : CLUSTER partition_role */\n\n/*! Production::    opt_collateConfig : %epsilon */\n\n/*! Production::    opt_collateConfig : collateConfig */\n\n/*! Production::    opt_collation : %epsilon */\n\n/*! Production::    opt_collation : collation */\n\n/*! Production::    opt_column : %epsilon */\n\n/*! Production::    opt_column : COLUMN */\n\n/*! Production::    opt_columnConstraints : %epsilon */\n\n/*! Production::    opt_columnConstraints : columnConstraints */\n\n/*! Production::    opt_column_alias_name_list : \\\"(\\\" alias_name_list \\\")\\\" */\n\n/*! Production::    opt_column_alias_name_list : %epsilon */\n\n/*! Production::    opt_column_attribute_list : %epsilon */\n\n/*! Production::    opt_column_attribute_list : opt_column_attribute_list column_attribute */\n\n/*! Production::    opt_column_id : %epsilon */\n\n/*! Production::    opt_column_id : ID INTNUM */\n\n/*! Production::    opt_column_list : \\\"(\\\" column_list \\\")\\\" */\n\n/*! Production::    opt_column_list : \\\"(\\\" column_name_list \\\")\\\" */\n\n/*! Production::    opt_column_list : %epsilon */\n\n/*! Production::    opt_column_list : OF column_list */\n\n/*! Production::    opt_column_partition_option : %epsilon */\n\n/*! Production::    opt_column_partition_option : column_partition_option */\n\n/*! Production::    opt_comma : \\\",\\\" */\n\n/*! Production::    opt_comma : %epsilon */\n\n/*! Production::    opt_comment : %epsilon */\n\n/*! Production::    opt_comment : COMMENT STRING_LITERAL */\n\n/*! Production::    opt_comment : COMMENT STRING_VALUE */\n\n/*! Production::    opt_commentAssign : %epsilon */\n\n/*! Production::    opt_commentAssign : commentAssign */\n\n/*! Production::    opt_compile_unit : %epsilon */\n\n/*! Production::    opt_compile_unit : BODY */\n\n/*! Production::    opt_compile_unit : PACKAGE_P */\n\n/*! Production::    opt_compile_unit : SPECIFICATION */\n\n/*! Production::    opt_compiler_parameters_clause : %epsilon */\n\n/*! Production::    opt_compiler_parameters_clause : compiler_parameter_list */\n\n/*! Production::    opt_compress_level : %epsilon */\n\n/*! Production::    opt_compress_level : HIGH */\n\n/*! Production::    opt_compress_level : LOW */\n\n/*! Production::    opt_compress_option : %epsilon */\n\n/*! Production::    opt_compress_option : compress_option */\n\n/*! Production::    opt_compress_str : %epsilon */\n\n/*! Production::    opt_compress_str : BASIC */\n\n/*! Production::    opt_compress_str : FOR ARCHIVE opt_compress_level */\n\n/*! Production::    opt_compress_str : FOR OLTP */\n\n/*! Production::    opt_compress_str : FOR QUERY opt_compress_level */\n\n/*! Production::    opt_config_scope : %epsilon */\n\n/*! Production::    opt_config_scope : SCOPE COMP_EQ BOTH */\n\n/*! Production::    opt_config_scope : SCOPE COMP_EQ MEMORY */\n\n/*! Production::    opt_config_scope : SCOPE COMP_EQ SPFILE */\n\n/*! Production::    opt_connectionOptions : %epsilon */\n\n/*! Production::    opt_connectionOptions : connectionOptions */\n\n/*! Production::    opt_constraint_and_name : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Table and Function Operations\nDESCRIPTION: These production rules define optional clauses for SQL table operations, function access, and function parameters. They include options for FULL table factors and various function-related clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_119\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_full : %epsilon */\n\n/*! Production::    opt_full : FULL */\n\n/*! Production::    opt_full_table_factor : table_factor */\n\n/*! Production::    opt_full_table_factor : table_factor FULL */\n\n/*! Production::    opt_func_access_ref : \".\" obj_access_ref */\n\n/*! Production::    opt_func_access_ref : %epsilon */\n\n/*! Production::    opt_func_access_ref : table_element_access_list */\n\n/*! Production::    opt_func_access_ref_normal : \".\" obj_access_ref_normal */\n\n/*! Production::    opt_func_access_ref_normal : %epsilon */\n\n/*! Production::    opt_func_access_ref_normal : table_element_access_list */\n\n/*! Production::    opt_func_param_list : %epsilon */\n\n/*! Production::    opt_func_param_list : func_param_list */\n\n/*! Production::    opt_functionArgs : %epsilon */\n\n/*! Production::    opt_functionArgs : functionArgs */\n\n/*! Production::    opt_functionParameters : %epsilon */\n\n/*! Production::    opt_functionParameters : functionParameters */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Field or Variable\nDESCRIPTION: Specifies that a field or variable can be represented by a user variable in the grammar.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_77\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_or_vars : USER_VARIABLE */\n```\n\n----------------------------------------\n\nTITLE: SQL Java Integration Rules\nDESCRIPTION: Production rules for SQL Java (SQLJ) function declarations and type signatures, defining how Java objects can be integrated with SQL functions and the parameters they accept.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_165\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    sqlj_func_decl : FUNCTION func_name opt_sp_param_list sqlj_obj_type_sig */\n\n/*! Production::    sqlj_obj_type_sig : RETURN type_or_self EXTERNAL varname_or_name */\n\n/*! Production::    sqlj_using : CUSTOMDATUM */\n\n/*! Production::    sqlj_using : ORADATA */\n\n/*! Production::    sqlj_using : SQLDATA */\n```\n\n----------------------------------------\n\nTITLE: CASE Statement Productions\nDESCRIPTION: Grammar rules defining CASE statement syntax including WHEN, THEN, and ELSE clauses\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    case_expr : CASE bit_expr simple_when_clause_list case_default END */\n/*! Production::    case_expr : CASE bit_expr simple_when_clause_list case_default END CASE */\n/*! Production::    case_expr : CASE bool_when_clause_list case_default END */\n/*! Production::    case_expr : CASE bool_when_clause_list case_default END CASE */\n```\n\n----------------------------------------\n\nTITLE: Defining Thread Types in SQL\nDESCRIPTION: These productions define thread types used in SQL operations, specifically IO_THREAD and SQL_THREAD, and how they can be combined.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_198\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    threadType : IO_THREAD */\n\n/*! Production::    threadType : SQL_THREAD */\n\n/*! Production::    threadTypes : threadType */\n\n/*! Production::    threadTypes : threadType COMMA threadTypes */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Identifier and Type Definitions\nDESCRIPTION: Defines rules for dotted identifiers, relation factors, and data type specifications used in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dot_relation_factor : \".\" mysql_reserved_keyword */\n\n/*! Production::    dot_relation_factor : \".\" relation_name */\n\n/*! Production::    dottedId : DOT uid */\n\n/*! Production::    dottedId : DOT_ID */\n\n/*! Production::    double_type_i : BINARY_DOUBLE */\n\n/*! Production::    double_type_i : BINARY_FLOAT */\n```\n\n----------------------------------------\n\nTITLE: Oracle Unreserved Keywords\nDESCRIPTION: Lists Oracle SQL unreserved keywords that have special meaning but can be used as identifiers\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_136\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    oracle_unreserved_keyword : ADMIN */\n/*! Production::    oracle_unreserved_keyword : ANALYZE */\n/*! Production::    oracle_unreserved_keyword : ARCHIVE */\n/*! Production::    oracle_unreserved_keyword : BACKUP */\n/*! Production::    oracle_unreserved_keyword : CASCADE */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER CONSTRAINT Productions in MySQL\nDESCRIPTION: These production rules define ALTER CONSTRAINT operations, including adding and dropping constraints and foreign keys.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_constraint_option : ADD constraint_definition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_constraint_option : DROP CONSTRAINT \"(\" name_list \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_foreign_key_action : DROP FOREIGN KEY index_name */\n```\n\n----------------------------------------\n\nTITLE: Update Statement Production Rules\nDESCRIPTION: Grammar production defining multiple table UPDATE statement syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_108\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    multipleUpdateStatement : UPDATE opt_LOW_PRIORITY opt_IGNORE tableSources SET updatedElements opt_whereClause */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TABLEGROUP Statement Syntax in OceanBase SQL\nDESCRIPTION: This snippet defines the grammar productions for the ALTER TABLEGROUP statement in OceanBase SQL. It covers operations such as adding tables to a tablegroup, modifying tablegroup options, and altering partition information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_tablegroup_action : opt_set tablegroup_option_list_space_seperated */\n\n/*! Production::    alter_tablegroup_actions : alter_tablegroup_action */\n\n/*! Production::    alter_tablegroup_actions : alter_tablegroup_actions \",\" alter_tablegroup_action */\n\n/*! Production::    alter_tablegroup_option : DROP TABLEGROUP */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD TABLE table_list */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD opt_table table_list */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD table_list */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name alter_partition_option */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name alter_tablegroup_actions */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name alter_tg_partition_option */\n\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name tg_modify_partition_info */\n```\n\n----------------------------------------\n\nTITLE: MySQL ALTER Statement Grammar Production Rules\nDESCRIPTION: Comprehensive set of grammar production rules defining the syntax for MySQL ALTER statements. These rules specify how to alter various database objects including tables, databases, views, events, functions, procedures, users, tablespaces, and more.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alterDatabase : ALTER dbFormat uid UPGRADE DATA DIRECTORY NAME */\n\n/*! Production::    alterEvent : ALTER opt_ownerStatement EVENT fullId opt_scheduleExpress opt_eventPreserve opt_renameEvent opt_enableType opt_comment optEventDo */\n\n/*! Production::    alterFunction : ALTER FUNCTION fullId opt_routineOptions */\n\n/*! Production::    alterInstance : ALTER INSTANCE ROTATE INNODB MASTER KEY */\n\n/*! Production::    alterLogfileGroup : ALTER LOGFILE GROUP uid ADD UNDOFILE STRING_LITERAL opt_WAIT ENGINE opt_MULT_ASSIGN engineName */\n\n/*! Production::    alterProcedure : ALTER PROCEDURE fullId opt_routineOptions */\n\n/*! Production::    alterServer : ALTER SERVER uid OPTIONS LR_BRACKET opt_serverOptions RR_BRACKET */\n\n/*! Production::    alterSpecification : ADD FULLTEXT opt_tableConstraintFormat opt_uid indexColumnNames opt_indexOptions */\n\n/*! Production::    alterSpecification : ADD PARTITION LR_BRACKET partitionDefinitionList RR_BRACKET */\n\n/*! Production::    alterSpecification : ADD SPATIAL opt_tableConstraintFormat opt_uid indexColumnNames opt_indexOptions */\n\n/*! Production::    alterSpecification : ADD opt_COLUMN LR_BRACKET uidColumndefintions RR_BRACKET */\n\n/*! Production::    alterSpecification : ADD opt_COLUMN uid columnDefinition AFTER uid */\n\n/*! Production::    alterSpecification : ADD opt_COLUMN uid columnDefinition FIRST */\n\n/*! Production::    alterSpecification : ADD opt_tableConstraint CHECK LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    alterSpecification : ADD opt_tableConstraint FOREIGN KEY opt_uid indexColumnNames referenceDefinition */\n\n/*! Production::    alterSpecification : ADD opt_tableConstraint PRIMARY KEY opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    alterSpecification : ADD opt_tableConstraint UNIQUE opt_tableConstraintFormat opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    alterSpecification : ADD tableConstraintFormat opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    alterSpecification : ALTER INDEX uid INVISIBLE */\n\n/*! Production::    alterSpecification : ALTER INDEX uid VISIBLE */\n\n/*! Production::    alterSpecification : ALTER opt_COLUMN uid DROP DEFAULT */\n\n/*! Production::    alterSpecification : ALTER opt_COLUMN uid SET DEFAULT defaultValue */\n\n/*! Production::    alterSpecification : ANALYZE PARTITION partitionUid */\n\n/*! Production::    alterSpecification : CHANGE opt_COLUMN uid uid columnDefinition opt_alterColumnSort */\n\n/*! Production::    alterSpecification : CHECK PARTITION partitionUid */\n\n/*! Production::    alterSpecification : COALESCE PARTITION decimalLiteral */\n\n/*! Production::    alterSpecification : CONVERT TO CHARACTER SET charsetName opt_collateConfig */\n\n/*! Production::    alterSpecification : DISABLE KEYS */\n\n/*! Production::    alterSpecification : DISCARD PARTITION partitionUid TABLESPACE */\n\n/*! Production::    alterSpecification : DISCARD TABLESPACE */\n\n/*! Production::    alterSpecification : DROP CHECK uid */\n\n/*! Production::    alterSpecification : DROP CONSTRAINT uid */\n\n/*! Production::    alterSpecification : DROP FOREIGN KEY uid */\n\n/*! Production::    alterSpecification : DROP PARTITION uidList */\n\n/*! Production::    alterSpecification : DROP PRIMARY KEY */\n\n/*! Production::    alterSpecification : DROP opt_COLUMN uid opt_RESTRICT */\n\n/*! Production::    alterSpecification : DROP tableConstraintFormat uid */\n\n/*! Production::    alterSpecification : ENABLE KEYS */\n\n/*! Production::    alterSpecification : EXCHANGE PARTITION uid WITH TABLE tableName */\n\n/*! Production::    alterSpecification : EXCHANGE PARTITION uid WITH TABLE tableName WITH VALIDATION */\n\n/*! Production::    alterSpecification : EXCHANGE PARTITION uid WITH TABLE tableName WITHOUT VALIDATION */\n\n/*! Production::    alterSpecification : FORCE */\n\n/*! Production::    alterSpecification : IMPORT PARTITION partitionUid TABLESPACE */\n\n/*! Production::    alterSpecification : IMPORT TABLESPACE */\n\n/*! Production::    alterSpecification : MODIFY opt_COLUMN uid columnDefinition opt_alterColumnSort */\n\n/*! Production::    alterSpecification : OPTIMIZE PARTITION partitionUid */\n\n/*! Production::    alterSpecification : ORDER BY uidList */\n\n/*! Production::    alterSpecification : REBUILD PARTITION partitionUid */\n\n/*! Production::    alterSpecification : REMOVE PARTITIONING */\n\n/*! Production::    alterSpecification : RENAME COLUMN uid TO uid */\n\n/*! Production::    alterSpecification : RENAME renameFormat renameFormatValue */\n\n/*! Production::    alterSpecification : RENAME tableConstraintFormat uid TO uid */\n\n/*! Production::    alterSpecification : REORGANIZE PARTITION uidList INTO LR_BRACKET partitionDefinitionList RR_BRACKET */\n\n/*! Production::    alterSpecification : REPAIR PARTITION partitionUid */\n\n/*! Production::    alterSpecification : TRUNCATE PARTITION partitionUid */\n\n/*! Production::    alterSpecification : UPGRADE PARTITIONING */\n\n/*! Production::    alterSpecification : WITH VALIDATION */\n\n/*! Production::    alterSpecification : WITHOUT VALIDATION */\n\n/*! Production::    alterSpecification : algorithmAssign */\n\n/*! Production::    alterSpecification : indexLockAssign */\n\n/*! Production::    alterSpecification : opt_DEFAULT CHARACTER SET EQUAL_SYMBOL charsetName */\n\n/*! Production::    alterSpecification : opt_DEFAULT CHARACTER SET EQUAL_SYMBOL charsetName COLLATE EQUAL_SYMBOL collationName */\n\n/*! Production::    alterSpecification : tableOptions */\n\n/*! Production::    alterSpecifications : alterSpecification */\n\n/*! Production::    alterSpecifications : alterSpecification COMMA alterSpecifications */\n\n/*! Production::    alterTable : ALTER opt_intimeAction opt_IGNORE TABLE tableName opt_alterSpecifications opt_partitionDefinitions */\n\n/*! Production::    alterTablespace : ALTER TABLESPACE uid ADD DATAFILE STRING_LITERAL opt_tablespaceSize opt_WAIT ENGINE opt_MULT_ASSIGN engineName */\n\n/*! Production::    alterUser : ALTER USER opt_ifExists userAuthOptions REQUIRE user_tlsOpt opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    alterUser : ALTER USER opt_ifExists userAuthOptions opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    alterUser : ALTER USER userSpecifications */\n\n/*! Production::    alterView : ALTER opt_viewAlgorithmAssign opt_ownerStatement opt_sqlSecurity VIEW fullId opt_uidList AS selectStatement opt_viewCheckOption */\n\n/*! Production::    alter_column_behavior : DROP DEFAULT */\n\n/*! Production::    alter_column_behavior : SET DEFAULT signed_literal */\n\n/*! Production::    alter_column_option : ADD \"(\" column_definition_list \")\" */\n\n/*! Production::    alter_column_option : ADD COLUMN \"(\" column_definition_list \")\" */\n\n/*! Production::    alter_column_option : ADD COLUMN column_definition */\n\n/*! Production::    alter_column_option : ADD column_definition */\n\n/*! Production::    alter_column_option : ALTER COLUMN column_definition_ref alter_column_behavior */\n\n/*! Production::    alter_column_option : ALTER column_definition_ref alter_column_behavior */\n\n/*! Production::    alter_column_option : ALTER opt_column column_name alter_column_behavior */\n\n/*! Production::    alter_column_option : CHANGE COLUMN column_definition_ref column_definition */\n\n/*! Production::    alter_column_option : CHANGE column_definition_ref column_definition */\n\n/*! Production::    alter_column_option : DROP \"(\" column_name_list \")\" */\n\n/*! Production::    alter_column_option : DROP COLUMN column_definition_ref opt_drop_behavior */\n\n/*! Production::    alter_column_option : DROP COLUMN column_name opt_drop_behavior */\n\n/*! Production::    alter_column_option : DROP column_definition_ref opt_drop_behavior */\n\n/*! Production::    alter_column_option : MODIFY \"(\" column_definition_opt_datatype_list \")\" */\n\n/*! Production::    alter_column_option : MODIFY COLUMN column_definition */\n\n/*! Production::    alter_column_option : MODIFY column_definition */\n\n/*! Production::    alter_column_option : MODIFY column_definition_opt_datatype */\n\n/*! Production::    alter_column_option : RENAME COLUMN column_name TO column_name */\n\n/*! Production::    alter_constraint_option : ADD constraint_definition */\n\n/*! Production::    alter_constraint_option : DROP CHECK \"(\" name_list \")\" */\n\n/*! Production::    alter_constraint_option : DROP CHECK constraint_name */\n\n/*! Production::    alter_constraint_option : DROP CONSTRAINT \"(\" name_list \")\" */\n\n/*! Production::    alter_database_stmt : ALTER database_key opt_database_name opt_set database_option_list */\n\n/*! Production::    alter_foreign_key_action : DROP FOREIGN KEY index_name */\n\n/*! Production::    alter_function_stmt : ALTER FUNCTION pl_schema_name sp_alter_clause */\n\n/*! Production::    alter_index_action : alter_index_option_oracle */\n\n/*! Production::    alter_index_actions : alter_index_action */\n\n/*! Production::    alter_index_option : ADD CONSTRAINT opt_constraint_name PRIMARY KEY \"(\" column_name_list \")\" opt_index_option_list */\n\n/*! Production::    alter_index_option : ADD CONSTRAINT opt_constraint_name UNIQUE opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    alter_index_option : ADD PRIMARY KEY \"(\" column_name_list \")\" opt_index_option_list */\n\n/*! Production::    alter_index_option : ADD SPATIAL opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    alter_index_option : ADD UNIQUE opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    alter_index_option : ADD key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    alter_index_option : ADD out_of_line_constraint */\n```\n\n----------------------------------------\n\nTITLE: System ALTER Productions\nDESCRIPTION: Grammar production rules for ALTER SYSTEM statements including operations for backup, cache, freeze, replica management and system configuration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR ROOTTABLE opt_tenant_name */\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE BACKUPPIECE INTNUM opt_copy_id opt_backup_tenant_list opt_description */\n/*! Production::    alter_system_stmt : ALTER SYSTEM DELETE BACKUPSET INTNUM opt_copy_id opt_backup_tenant_list opt_description */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table Option List\nDESCRIPTION: Defines production rules for table_option_list in SQL grammar. These rules specify how lists of table options can be defined, either as comma-separated or space-separated lists.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_179\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_option_list : table_option \",\" table_option_list */\n\n/*! Production::    table_option_list : table_option_list_space_seperated */\n\n/*! Production::    table_option_list_space_seperated : table_option */\n\n/*! Production::    table_option_list_space_seperated : table_option table_option_list_space_seperated */\n```\n\n----------------------------------------\n\nTITLE: Date and Time Functions in SQL\nDESCRIPTION: Specifies syntax for various date and time functions including CURDATE, CURRENT_DATE, CURTIME, and timestamp functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_41\n\nLANGUAGE: SQL\nCODE:\n```\ncur_date_func : CURDATE \"(\" \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_date_func : CURRENT_DATE \"(\" \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_date_func : CURRENT_DATE\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_time_func : CURRENT_TIME opt_time_func_fsp_i\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_time_func : CURTIME \"(\" \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_time_func : CURTIME \"(\" INTNUM \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_timestamp_func : CURRENT_TIMESTAMP \"(\" INTNUM \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_timestamp_func : LOCALTIMESTAMP \"(\" INTNUM \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_timestamp_func : NOW \"(\" \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_timestamp_func : NOW \"(\" INTNUM \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_timestamp_func : SYSDATE\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_timestamp_func : SYSTIMESTAMP \"(\" INTNUM \")\" \n```\n\nLANGUAGE: SQL\nCODE:\n```\ncur_timestamp_func : now_synonyms_func opt_time_func_fsp_i\n```\n\n----------------------------------------\n\nTITLE: Window Specification Level Flags Grammar in SQL\nDESCRIPTION: Defines the syntax for window level flags in SQL window functions. These production rules specify how to define ordering (ASC/DESC) and directionality (REVERSE) within window function specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_222\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ws_level_flag_desc : ASC */\n\n/*! Production::    ws_level_flag_desc : DESC */\n\n/*! Production::    ws_level_flag_reverse : REVERSE */\n\n/*! Production::    ws_level_flags : %epsilon */\n\n/*! Production::    ws_level_flags : ws_level_flag_desc */\n\n/*! Production::    ws_level_flags : ws_level_flag_desc ws_level_flag_reverse */\n\n/*! Production::    ws_level_flags : ws_level_flag_reverse */\n\n/*! Production::    ws_level_list : ws_level_list \",\" ws_level_list_item */\n\n/*! Production::    ws_level_list : ws_level_list_item */\n\n/*! Production::    ws_level_list_item : ws_level_number ws_level_flags */\n\n/*! Production::    ws_level_list_or_range : ws_level_list */\n\n/*! Production::    ws_level_list_or_range : ws_level_range */\n\n/*! Production::    ws_level_number : INTNUM */\n\n/*! Production::    ws_level_range : ws_level_number \"-\" ws_level_number */\n\n/*! Production::    ws_nweights : \"(\" INTNUM \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Signed Numbers and Literals\nDESCRIPTION: This snippet defines grammar productions for signed integer numbers and literals, including positive and negative values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_151\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    signed_int_num : \"-\" INTNUM */\n\n/*! Production::    signed_int_num : INTNUM */\n\n/*! Production::    signed_literal : \"+\" number_literal */\n\n/*! Production::    signed_literal : \"-\" number_literal */\n\n/*! Production::    signed_literal : literal */\n\n/*! Production::    signed_literal_params : \"(\" signed_literal_params \")\" */\n\n/*! Production::    signed_literal_params : signed_literal */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Operator and Symbol Rules\nDESCRIPTION: These rules define various SQL operators and symbols, including comparison operators, arithmetic operators, and special characters used in SQL syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_235\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       ! */\n\n/*! Rule::       !=|<> */\n\n/*! Rule::       !=|<>|\\^= */\n\n/*! Rule::       % */\n\n/*! Rule::       %= */\n\n/*! Rule::       & */\n\n/*! Rule::       && */\n\n/*! Rule::       &= */\n\n/*! Rule::       , */\n\n/*! Rule::       - */\n\n/*! Rule::       -- */\n\n/*! Rule::       -= */\n\n/*! Rule::       -> */\n\n/*! Rule::       ->> */\n\n/*! Rule::       . */\n\n/*! Rule::       : */\n\n/*! Rule::       := */\n\n/*! Rule::       ; */\n\n/*! Rule::       < */\n\n/*! Rule::       << */\n\n/*! Rule::       <= */\n\n/*! Rule::       <=> */\n\n/*! Rule::       = */\n\n/*! Rule::       => */\n\n/*! Rule::       > */\n\n/*! Rule::       >= */\n\n/*! Rule::       >> */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production Rules\nDESCRIPTION: These code snippets define grammar production rules for various SQL constructs. They specify the syntax for functions, data types, keywords, and statements in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_89\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    now_or_signed_literal : signed_literal_params */\n\n/*! Production::    now_synonyms_func : CURRENT_TIMESTAMP */\n\n/*! Production::    now_synonyms_func : LOCALTIME */\n\n/*! Production::    now_synonyms_func : LOCALTIMESTAMP */\n\n/*! Production::    nullNotnull : opt_NOT NULL_LITERAL */\n\n/*! Production::    nullNotnull : opt_NOT NULL_SPEC_LITERAL */\n\n/*! Production::    null_stmt : NULLX */\n\n/*! Production::    numberOrCount : NUMBER */\n\n/*! Production::    numberOrCount : ROW_COUNT */\n\n/*! Production::    number_literal : DECIMAL_VAL */\n\n/*! Production::    number_literal : INTNUM */\n\n/*! Production::    number_precision : \"(\" \"*\" \")\" */\n\n/*! Production::    number_precision : \"(\" \"*\" \",\" signed_int_num \")\" */\n\n/*! Production::    number_precision : \"(\" signed_int_num \")\" */\n\n/*! Production::    number_precision : \"(\" signed_int_num \",\" signed_int_num \")\" */\n\n/*! Production::    number_type_i : DECIMAL */\n\n/*! Production::    number_type_i : NUMERIC */\n\n/*! Production::    numeric_function : MOD \"(\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    nvarchar_type_i : NVARCHAR */\n\n/*! Production::    nvarchar_type_i : NVARCHAR2 */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ob_unreserved_keyword : ACCESSIBLE */\n\n/*! Production::    ob_unreserved_keyword : AUTHID */\n\n/*! Production::    ob_unreserved_keyword : BULK */\n\n/*! Production::    ob_unreserved_keyword : BYTE */\n\n/*! Production::    ob_unreserved_keyword : C */\n\n/*! Production::    ob_unreserved_keyword : CALL */\n\n/*! Production::    ob_unreserved_keyword : CHARSET */\n\n/*! Production::    ob_unreserved_keyword : COLLATE */\n\n/*! Production::    ob_unreserved_keyword : COLLATION */\n\n/*! Production::    ob_unreserved_keyword : COLLECT */\n\n/*! Production::    ob_unreserved_keyword : COMPILE */\n\n/*! Production::    ob_unreserved_keyword : CONTINUE */\n\n/*! Production::    ob_unreserved_keyword : CURRENT_USER */\n\n/*! Production::    ob_unreserved_keyword : CUSTOMDATUM */\n\n/*! Production::    ob_unreserved_keyword : DAY */\n\n/*! Production::    ob_unreserved_keyword : DEFINER */\n\n/*! Production::    ob_unreserved_keyword : DETERMINISTIC */\n\n/*! Production::    ob_unreserved_keyword : EDITIONABLE */\n\n/*! Production::    ob_unreserved_keyword : EXECUTE */\n\n/*! Production::    ob_unreserved_keyword : FORCE */\n\n/*! Production::    ob_unreserved_keyword : HASH */\n\n/*! Production::    ob_unreserved_keyword : HOUR */\n\n/*! Production::    ob_unreserved_keyword : IMMEDIATE */\n\n/*! Production::    ob_unreserved_keyword : INDICES */\n\n/*! Production::    ob_unreserved_keyword : INSTEAD */\n\n/*! Production::    ob_unreserved_keyword : INTERFACE */\n\n/*! Production::    ob_unreserved_keyword : JAVA */\n\n/*! Production::    ob_unreserved_keyword : LIMIT */\n\n/*! Production::    ob_unreserved_keyword : LOCAL */\n\n/*! Production::    ob_unreserved_keyword : LONG */\n\n/*! Production::    ob_unreserved_keyword : MINUTE */\n\n/*! Production::    ob_unreserved_keyword : MONTH */\n\n/*! Production::    ob_unreserved_keyword : NAME */\n\n/*! Production::    ob_unreserved_keyword : NO */\n\n/*! Production::    ob_unreserved_keyword : NONEDITIONABLE */\n\n/*! Production::    ob_unreserved_keyword : OBJECT */\n\n/*! Production::    ob_unreserved_keyword : OID */\n\n/*! Production::    ob_unreserved_keyword : ORADATA */\n\n/*! Production::    ob_unreserved_keyword : PARALLEL_ENABLE */\n\n/*! Production::    ob_unreserved_keyword : PIPE */\n\n/*! Production::    ob_unreserved_keyword : PIPELINED */\n\n/*! Production::    ob_unreserved_keyword : REF */\n\n/*! Production::    ob_unreserved_keyword : RELIES_ON */\n\n/*! Production::    ob_unreserved_keyword : REPLACE */\n\n/*! Production::    ob_unreserved_keyword : RESTRICT_REFERENCES */\n\n/*! Production::    ob_unreserved_keyword : RESULT */\n\n/*! Production::    ob_unreserved_keyword : RESULT_CACHE */\n\n/*! Production::    ob_unreserved_keyword : RETURNING */\n\n/*! Production::    ob_unreserved_keyword : RNDS */\n\n/*! Production::    ob_unreserved_keyword : RNPS */\n\n/*! Production::    ob_unreserved_keyword : SAVE */\n\n/*! Production::    ob_unreserved_keyword : SERIALLY_REUSABLE */\n\n/*! Production::    ob_unreserved_keyword : SETTINGS */\n\n/*! Production::    ob_unreserved_keyword : SPECIFICATION */\n\n/*! Production::    ob_unreserved_keyword : SQLDATA */\n\n/*! Production::    ob_unreserved_keyword : TIME */\n\n/*! Production::    ob_unreserved_keyword : TRUST */\n\n/*! Production::    ob_unreserved_keyword : UDF */\n\n/*! Production::    ob_unreserved_keyword : UNDER */\n\n/*! Production::    ob_unreserved_keyword : USING */\n\n/*! Production::    ob_unreserved_keyword : USING_NLS_COMP */\n\n/*! Production::    ob_unreserved_keyword : VALIDATE */\n\n/*! Production::    ob_unreserved_keyword : VALUE */\n\n/*! Production::    ob_unreserved_keyword : VARIABLE */\n\n/*! Production::    ob_unreserved_keyword : VARRAY */\n\n/*! Production::    ob_unreserved_keyword : VARYING */\n\n/*! Production::    ob_unreserved_keyword : WNDS */\n\n/*! Production::    ob_unreserved_keyword : WNPS */\n\n/*! Production::    ob_unreserved_keyword : YEAR */\n\n/*! Production::    ob_unreserved_keyword : ZONE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    obj_access_ref : access_func_expr opt_func_access_ref */\n\n/*! Production::    obj_access_ref : column_ref \".\" FIRST \"(\" \")\" */\n\n/*! Production::    obj_access_ref : column_ref \".\" LAST \"(\" \")\" */\n\n/*! Production::    obj_access_ref : column_ref opt_obj_access_ref */\n\n/*! Production::    obj_access_ref_normal : access_func_expr opt_func_access_ref_normal */\n\n/*! Production::    obj_access_ref_normal : var_name opt_obj_access_ref_normal */\n\n/*! Production::    obj_clause : \"*\" \".\" \"*\" */\n\n/*! Production::    obj_clause : \"*\" */\n\n/*! Production::    obj_clause : DIRECTORY relation_name */\n\n/*! Production::    obj_clause : relation_name \".\" \"*\" */\n\n/*! Production::    obj_clause : relation_name \".\" relation_name */\n\n/*! Production::    obj_clause : relation_name */\n\n/*! Production::    obj_privileges : ALL opt_privilege */\n\n/*! Production::    obj_privileges : priv_type_list */\n\n/*! Production::    obj_with_col_priv : ALL opt_privilege opt_column_list */\n\n/*! Production::    obj_with_col_priv : priv_type opt_column_list */\n\n/*! Production::    obj_with_col_priv_list : obj_with_col_priv */\n\n/*! Production::    obj_with_col_priv_list : obj_with_col_priv_list \",\" obj_with_col_priv */\n\n/*! Production::    object_or_under : UNDER pl_schema_name */\n\n/*! Production::    object_or_under : is_or_as OBJECT */\n\n/*! Production::    object_type_def : opt_invoke_right object_or_under opt_sqlj_obj_type attr_and_element_spec opt_final_inst_list */\n\n/*! Production::    on_commit_option : %epsilon */\n\n/*! Production::    on_commit_option : ON COMMIT DELETE ROWS */\n\n/*! Production::    on_commit_option : ON COMMIT PRESERVE ROWS */\n\n/*! Production::    on_empty : json_on_response ON EMPTY */\n\n/*! Production::    op_audit_tail_clause : %epsilon */\n\n/*! Production::    op_audit_tail_clause : audit_by_session_access_option */\n\n/*! Production::    op_audit_tail_clause : audit_by_session_access_option audit_whenever_option */\n\n/*! Production::    op_audit_tail_clause : audit_whenever_option */\n\n/*! Production::    open_stmt : OPEN cursor_name for_sql opt_using_clause */\n\n/*! Production::    open_stmt : OPEN pl_access_name opt_sp_cparam_list */\n\n/*! Production::    optEventDo : %epsilon */\n\n/*! Production::    optEventDo : DO routineBody */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : %epsilon */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : algorithmAssign indexLockAndAlgorithmAssign */\n\n/*! Production::    optIndexLockAndAlgorithmAssigns : indexLockAssign indexLockAndAlgorithmAssign */\n\n/*! Production::    optShowFromOrInId : %epsilon */\n\n/*! Production::    optShowFromOrInId : fromOrIn uid */\n\n/*! Production::    opt_ALL : %epsilon */\n\n/*! Production::    opt_ALL : ALL */\n\n/*! Production::    opt_AND : %epsilon */\n\n/*! Production::    opt_AND : AND */\n\n/*! Production::    opt_AS : %epsilon */\n\n/*! Production::    opt_AS : AS */\n\n/*! Production::    opt_BINARY : %epsilon */\n\n/*! Production::    opt_BINARY : BINARY */\n\n/*! Production::    opt_COLUMN : %epsilon */\n\n/*! Production::    opt_COLUMN : COLUMN */\n\n/*! Production::    opt_DEFAULT : %epsilon */\n\n/*! Production::    opt_DEFAULT : DEFAULT */\n\n/*! Production::    opt_DISTINCT : %epsilon */\n\n/*! Production::    opt_DISTINCT : DISTINCT */\n\n/*! Production::    opt_EXTENDED : %epsilon */\n\n/*! Production::    opt_EXTENDED : EXTENDED */\n\n/*! Production::    opt_FULL : %epsilon */\n\n/*! Production::    opt_FULL : FULL */\n\n/*! Production::    opt_IGNORE : %epsilon */\n\n/*! Production::    opt_IGNORE : IGNORE */\n\n/*! Production::    opt_INTEGER : %epsilon */\n\n/*! Production::    opt_INTEGER : INTEGER */\n\n/*! Production::    opt_INTO : %epsilon */\n\n/*! Production::    opt_INTO : INTO */\n\n/*! Production::    opt_LINEAR : %epsilon */\n\n/*! Production::    opt_LINEAR : LINEAR */\n\n/*! Production::    opt_LOCAL : %epsilon */\n\n/*! Production::    opt_LOCAL : LOCAL */\n\n/*! Production::    opt_LOW_PRIORITY : %epsilon */\n\n/*! Production::    opt_LOW_PRIORITY : LOW_PRIORITY */\n\n/*! Production::    opt_MINUSMINUS : %epsilon */\n\n/*! Production::    opt_MINUSMINUS : MINUSMINUS */\n\n/*! Production::    opt_NO : %epsilon */\n\n/*! Production::    opt_NO : NO */\n\n/*! Production::    opt_NOT : %epsilon */\n\n/*! Production::    opt_NOT : NOT */\n\n/*! Production::    opt_OPTIONALLY : %epsilon */\n\n/*! Production::    opt_OPTIONALLY : OPTIONALLY */\n\n/*! Production::    opt_OUTER : %epsilon */\n\n/*! Production::    opt_OUTER : OUTER */\n\n/*! Production::    opt_PRECISION : %epsilon */\n\n/*! Production::    opt_PRECISION : PRECISION */\n\n/*! Production::    opt_PRIVILEGES : %epsilon */\n\n/*! Production::    opt_PRIVILEGES : PRIVILEGES */\n\n/*! Production::    opt_QUICK : %epsilon */\n\n/*! Production::    opt_QUICK : QUICK */\n\n/*! Production::    opt_RESTRICT : %epsilon */\n\n/*! Production::    opt_RESTRICT : RESTRICT */\n\n/*! Production::    opt_ROUTINE : %epsilon */\n\n/*! Production::    opt_ROUTINE : ROUTINE */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Grammar Production Rules for Optional Elements\nDESCRIPTION: A comprehensive collection of optional grammar production rules used by a SQL parser. These rules define the syntax for various SQL language constructs like constraints, declarations, default values, and other optional elements that may appear in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_111\n\nLANGUAGE: Parser Grammar\nCODE:\n```\n/*! Production::    opt_constraint_and_name : constraint_and_name */\n\n/*! Production::    opt_constraint_name : %epsilon */\n\n/*! Production::    opt_constraint_name : constraint_name */\n\n/*! Production::    opt_constructor_param : \"(\" constr_param_list \")\" */\n\n/*! Production::    opt_constructor_param : \"(\" self_inout constr_param_list \")\" */\n\n/*! Production::    opt_constructor_param : %epsilon */\n\n/*! Production::    opt_copy_id : %epsilon */\n\n/*! Production::    opt_copy_id : COPY INTNUM */\n\n/*! Production::    opt_createDefinitions : %epsilon */\n\n/*! Production::    opt_createDefinitions : createDefinitions */\n\n/*! Production::    opt_createLogfileGroup_redo : %epsilon */\n\n/*! Production::    opt_createLogfileGroup_redo : REDO_BUFFER_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_redo : REDO_BUFFER_SIZE fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_size : %epsilon */\n\n/*! Production::    opt_createLogfileGroup_size : INITIAL_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_size : INITIAL_SIZE fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_undo : %epsilon */\n\n/*! Production::    opt_createLogfileGroup_undo : UNDO_BUFFER_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_undo : UNDO_BUFFER_SIZE fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbAutoExtent : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbAutoExtent : AUTOEXTEND_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbAutoMaxSize : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbAutoMaxSize : MAX_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbExtent : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbExtent : EXTENT_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbInitial : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbInitial : INITIAL_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_create_resource_pool_option_list : %epsilon */\n\n/*! Production::    opt_create_resource_pool_option_list : create_resource_pool_option */\n\n/*! Production::    opt_create_resource_pool_option_list : opt_create_resource_pool_option_list \",\" create_resource_pool_option */\n\n/*! Production::    opt_create_timestamp : %epsilon */\n\n/*! Production::    opt_create_timestamp : CREATE_TIMESTAMP opt_equal_mark INTNUM */\n\n/*! Production::    opt_cycle_clause : %epsilon */\n\n/*! Production::    opt_cycle_clause : CYCLE alias_name_list SET var_name TO STRING_VALUE DEFAULT STRING_VALUE */\n\n/*! Production::    opt_dataTypeCharsetAssign : %epsilon */\n\n/*! Production::    opt_dataTypeCharsetAssign : charsetKeywords charsetName */\n\n/*! Production::    opt_dataTypeCollateAssign : %epsilon */\n\n/*! Production::    opt_dataTypeCollateAssign : BINARY */\n\n/*! Production::    opt_dataTypeCollateAssign : COLLATE collationName */\n\n/*! Production::    opt_data_source_list : %epsilon */\n\n/*! Production::    opt_data_source_list : data_source_list */\n\n/*! Production::    opt_database_name : %epsilon */\n\n/*! Production::    opt_database_name : NAME_OB */\n\n/*! Production::    opt_database_name : database_name */\n\n/*! Production::    opt_database_option_list : %epsilon */\n\n/*! Production::    opt_database_option_list : database_option_list */\n\n/*! Production::    opt_databases : %epsilon */\n\n/*! Production::    opt_databases : databases_expr */\n\n/*! Production::    opt_datetime_fsp_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_datetime_fsp_i : \"(\" precision_int_num \")\" */\n\n/*! Production::    opt_datetime_fsp_i : %epsilon */\n\n/*! Production::    opt_dblink : %epsilon */\n\n/*! Production::    opt_dblink : USER_VARIABLE */\n\n/*! Production::    opt_debug : %epsilon */\n\n/*! Production::    opt_debug : DEBUG */\n\n/*! Production::    opt_dec_precision : %epsilon */\n\n/*! Production::    opt_dec_precision : number_precision */\n\n/*! Production::    opt_decimalLiteral : %epsilon */\n\n/*! Production::    opt_decimalLiteral : decimalLiteral */\n\n/*! Production::    opt_decl_stmt_ext_list : %epsilon */\n\n/*! Production::    opt_decl_stmt_ext_list : decl_stmt_ext_list */\n\n/*! Production::    opt_decl_stmt_list : %epsilon */\n\n/*! Production::    opt_decl_stmt_list : decl_stmt_list */\n\n/*! Production::    opt_declareConditionWithSEMI : %epsilon */\n\n/*! Production::    opt_declareConditionWithSEMI : declareConditionWithSEMIs */\n\n/*! Production::    opt_declareCursorWithSEMI : %epsilon */\n\n/*! Production::    opt_declareCursorWithSEMI : declareCursorWithSEMIs */\n\n/*! Production::    opt_declareHandlerWithSEMI : %epsilon */\n\n/*! Production::    opt_declareHandlerWithSEMI : declareHandlerWithSEMIs */\n\n/*! Production::    opt_declareVariableWithSEMI : %epsilon */\n\n/*! Production::    opt_declareVariableWithSEMI : declareVariableWithSEMIs */\n\n/*! Production::    opt_declare_section : %epsilon */\n\n/*! Production::    opt_declare_section : DECLARE */\n\n/*! Production::    opt_declare_section : DECLARE declare_section */\n\n/*! Production::    opt_default : %epsilon */\n\n/*! Production::    opt_default : default_expr */\n\n/*! Production::    opt_defaultValueOnUpdate : %epsilon */\n\n/*! Production::    opt_defaultValueOnUpdate : ON UPDATE currentTimestamp */\n\n/*! Production::    opt_default_collation : %epsilon */\n\n/*! Production::    opt_default_collation : DEFAULT COLLATION USING_NLS_COMP */\n\n/*! Production::    opt_default_mark : %epsilon */\n\n/*! Production::    opt_default_mark : DEFAULT */\n\n/*! Production::    opt_default_tables_space : DEFAULT TABLESPACE tablespace */\n\n/*! Production::    opt_definer : %epsilon */\n\n/*! Production::    opt_definer : DEFINER COMP_EQ user */\n\n/*! Production::    opt_desc_column_option : %epsilon */\n\n/*! Production::    opt_desc_column_option : STRING_VALUE */\n\n/*! Production::    opt_desc_column_option : column_name */\n\n/*! Production::    opt_description : %epsilon */\n\n/*! Production::    opt_description : DESCRIPTION opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_disk_alias : %epsilon */\n\n/*! Production::    opt_disk_alias : NAME opt_equal_mark relation_name_or_string */\n\n/*! Production::    opt_distinct : %epsilon */\n\n/*! Production::    opt_distinct : DISTINCT */\n\n/*! Production::    opt_distinct : UNIQUE */\n\n/*! Production::    opt_distinct_or_all : %epsilon */\n\n/*! Production::    opt_distinct_or_all : ALL */\n\n/*! Production::    opt_distinct_or_all : DISTINCT */\n\n/*! Production::    opt_distinct_or_all : UNIQUE */\n\n/*! Production::    opt_distribute_method : %epsilon */\n\n/*! Production::    opt_distribute_method : opt_comma distribute_method */\n\n/*! Production::    opt_dlink : \"@\" ip_port */\n\n/*! Production::    opt_dlink : %epsilon */\n\n/*! Production::    opt_dropType : %epsilon */\n\n/*! Production::    opt_dropType : CASCADE */\n\n/*! Production::    opt_dropType : RESTRICT */\n\n/*! Production::    opt_drop_behavior : %epsilon */\n\n/*! Production::    opt_drop_behavior : CASCADE */\n\n/*! Production::    opt_drop_behavior : RESTRICT */\n\n/*! Production::    opt_duplicate : %epsilon */\n\n/*! Production::    opt_duplicate : IGNORE */\n\n/*! Production::    opt_duplicate : REPLACE */\n\n/*! Production::    opt_dynamic_returning_clause : %epsilon */\n\n/*! Production::    opt_dynamic_returning_clause : RETURN normal_into_clause */\n\n/*! Production::    opt_dynamic_returning_clause : RETURNING normal_into_clause */\n\n/*! Production::    opt_editionable : %epsilon */\n\n/*! Production::    opt_editionable : EDITIONABLE */\n\n/*! Production::    opt_editionable : NONEDITIONABLE */\n\n/*! Production::    opt_element_spec : \",\" element_spec */\n\n/*! Production::    opt_element_spec : %epsilon */\n\n/*! Production::    opt_elifAlternatives : %epsilon */\n\n/*! Production::    opt_elifAlternatives : elifAlternatives */\n\n/*! Production::    opt_enableType : %epsilon */\n\n/*! Production::    opt_enableType : enableType */\n\n/*! Production::    opt_enable_option : %epsilon */\n\n/*! Production::    opt_enable_option : DISABLE */\n\n/*! Production::    opt_enable_option : ENABLE */\n\n/*! Production::    opt_enable_or_disable : %epsilon */\n\n/*! Production::    opt_enable_or_disable : DISABLE */\n\n/*! Production::    opt_enable_or_disable : ENABLE */\n\n/*! Production::    opt_end_p : %epsilon */\n\n/*! Production::    opt_end_p : END_P */\n\n/*! Production::    opt_engine_option : %epsilon */\n\n/*! Production::    opt_engine_option : ENGINE_ COMP_EQ INNODB */\n\n/*! Production::    opt_equal_mark : %epsilon */\n\n/*! Production::    opt_equal_mark : COMP_EQ */\n\n/*! Production::    opt_eventPreserve : %epsilon */\n\n/*! Production::    opt_eventPreserve : ON COMPLETION opt_NOT PRESERVE */\n\n/*! Production::    opt_exception_name : %epsilon */\n\n/*! Production::    opt_exception_name : pl_access_name */\n\n/*! Production::    opt_exception_section : %epsilon */\n\n/*! Production::    opt_exception_section : EXCEPTION exception_section */\n\n/*! Production::    opt_execute_section : %epsilon */\n\n/*! Production::    opt_execute_section : execute_section */\n\n/*! Production::    opt_expr_as_list : %epsilon */\n\n/*! Production::    opt_expr_as_list : expr_as_list */\n\n/*! Production::    opt_expressionsWithDefaults : %epsilon */\n\n/*! Production::    opt_expressionsWithDefaults : expressionsWithDefaults */\n\n/*! Production::    opt_fetch_next : %epsilon */\n\n/*! Production::    opt_fetch_next : fetch_next_clause */\n\n/*! Production::    opt_field_or_var_spec : \"(\" \")\" */\n\n/*! Production::    opt_field_or_var_spec : \"(\" field_or_vars_list \")\" */\n\n/*! Production::    opt_field_or_var_spec : %epsilon */\n\n/*! Production::    opt_file_id : %epsilon */\n\n/*! Production::    opt_file_id : file_id */\n\n/*! Production::    opt_final_inst_list : %epsilon */\n\n/*! Production::    opt_final_inst_list : final_inst_list */\n\n/*! Production::    opt_flashback_rename_database : %epsilon */\n\n/*! Production::    opt_flashback_rename_database : RENAME TO database_factor */\n```\n\n----------------------------------------\n\nTITLE: CREATE RESTORE POINT, ROLE, and SAVEPOINT Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating restore points, roles, and savepoints in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_restore_point_stmt : create_with_opt_hint RESTORE POINT relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_role_stmt : CREATE ROLE role opt_not_identified */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_savepoint_stmt : SAVEPOINT var_name */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Tenant Options\nDESCRIPTION: These productions define various options that can be set for tenants, including collation, comments, and resource configurations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_194\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tenant_option : COLLATE opt_equal_mark collation_name */\n\n/*! Production::    tenant_option : COMMENT opt_equal_mark STRING_VALUE */\n\n/*! Production::    tenant_option : ENABLE_ARBITRATION_SERVICE opt_equal_mark BOOL_VALUE */\n\n/*! Production::    tenant_option : ENABLE_EXTENDED_ROWID opt_equal_mark BOOL_VALUE */\n\n/*! Production::    tenant_option : LOCALITY opt_equal_mark STRING_VALUE opt_force */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Index and Join Operations\nDESCRIPTION: These production rules define optional clauses for SQL index operations, including index names, options, and algorithms. They also include options for INNER and CROSS joins in SQL queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_124\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_index_keyname : %epsilon */\n\n/*! Production::    opt_index_keyname : SPATIAL */\n\n/*! Production::    opt_index_keyname : UNIQUE */\n\n/*! Production::    opt_index_list : %epsilon */\n\n/*! Production::    opt_index_list : index_list */\n\n/*! Production::    opt_index_name : %epsilon */\n\n/*! Production::    opt_index_name : index_name */\n\n/*! Production::    opt_index_option_list : %epsilon */\n\n/*! Production::    opt_index_option_list : opt_index_options */\n\n/*! Production::    opt_index_options : index_option */\n\n/*! Production::    opt_index_options : opt_index_options index_option */\n\n/*! Production::    opt_index_using_algorithm : %epsilon */\n\n/*! Production::    opt_index_using_algorithm : index_using_algorithm */\n\n/*! Production::    opt_indexed_hiddden : %epsilon */\n\n/*! Production::    opt_indexed_hiddden : HIDDEN */\n\n/*! Production::    opt_indexed_hiddden : INDEXED */\n\n/*! Production::    opt_inner : %epsilon */\n\n/*! Production::    opt_inner : INNER */\n\n/*! Production::    opt_innerOrCross : %epsilon */\n\n/*! Production::    opt_innerOrCross : CROSS */\n\n/*! Production::    opt_innerOrCross : INNER */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Table Name Structures\nDESCRIPTION: These productions define various structures for table names in SQL queries, including options for sampling, indexing, and relation naming.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_187\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tbl_name : relation_factor sample_clause AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause index_hint_list */\n\n/*! Production::    tbl_name : relation_factor sample_clause relation_name */\n\n/*! Production::    tbl_name : relation_factor sample_clause relation_name index_hint_list */\n```\n\n----------------------------------------\n\nTITLE: SHOW Common Entity Production Rules in SQL\nDESCRIPTION: Grammar production rules for SHOW statements that display common database entities like character sets, collations, databases, and schemas.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_135\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : CHARACTER SET */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : COLLATION */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : DATABASES */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : FUNCTION STATUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : PROCEDURE STATUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : SCHEMAS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : opt_transactionScope STATUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showCommonEntity : opt_transactionScope VARIABLES */\n```\n\n----------------------------------------\n\nTITLE: Defining Cast Data Types in SQL\nDESCRIPTION: These productions define various data type casting rules in SQL, including timestamp, unsigned integers, date/time types, and string types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cast_data_type : TIMESTAMP opt_datetime_fsp_i WITH TIME ZONE */\n\n/*! Production::    cast_data_type : UNSIGNED opt_integer */\n\n/*! Production::    cast_data_type : UROWID opt_urowid_length_i */\n\n/*! Production::    cast_data_type : cast_datetime_type_i */\n\n/*! Production::    cast_data_type : cast_datetime_type_i opt_datetime_fsp_i */\n\n/*! Production::    cast_data_type : double_type_i */\n\n/*! Production::    cast_data_type : int_type_i */\n\n/*! Production::    cast_data_type : number_type_i number_precision */\n\n/*! Production::    cast_data_type : udt_type */\n\n/*! Production::    cast_data_type : varchar_type_i */\n\n/*! Production::    cast_data_type : varchar_type_i string_length_i opt_binary */\n```\n\n----------------------------------------\n\nTITLE: CASE Statement Grammar\nDESCRIPTION: Productions for parsing CASE expressions and statements with WHEN/THEN/ELSE logic.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    case_expr : CASE bit_expr simple_when_clause_list case_default END */\n/*! Production::    case_expr : CASE bit_expr simple_when_clause_list case_default END CASE */\n/*! Production::    case_expr : CASE bool_when_clause_list case_default END */\n/*! Production::    case_expr : CASE bool_when_clause_list case_default END CASE */\n```\n\n----------------------------------------\n\nTITLE: MySQL System Identifiers and Reserved Keywords\nDESCRIPTION: List of MySQL system-level identifiers and reserved keywords used for various database operations including replication, security, configuration, and storage management.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_154\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    simpleId : MASTER_LOG_FILE */\n/*! Production::    simpleId : MASTER_LOG_POS */\n/*! Production::    simpleId : MASTER_PASSWORD */\n/*! Production::    simpleId : MASTER_PORT */\n/* ... and many more identifiers ... */\n/*! Production::    simpleId : XML */\n/*! Production::    simpleId : charsetNameBase */\n/*! Production::    simpleId : functionNameBase */\n/*! Production::    simpleId : privilegesBase */\n```\n\n----------------------------------------\n\nTITLE: SQL Rule Definitions\nDESCRIPTION: A collection of SQL rule definitions that specify valid SQL keywords and their usage. Each rule is defined using a comment-based syntax with /*! Rule:: */ format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_234\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       MEDIUMBLOB */\n\n/*! Rule::       MEDIUMINT */\n\n/*! Rule::       MEDIUMTEXT */\n\n/*! Rule::       MEMBER */\n\n/*! Rule::       MEMORY */\n\n/*! Rule::       MEMTABLE */\n\n/*! Rule::       MERGE */\n\n/*! Rule::       MESSAGE_TEXT */\n\n/*! Rule::       META */\n\n/*! Rule::       MICROSECOND */\n\n[...additional rules truncated for brevity...]\n\n/*! Rule::       SHOW */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Grammar Rules for Optional Elements\nDESCRIPTION: This collection defines grammar production rules for optional elements in SQL syntax. Each rule specifies how the parser should handle optional syntax components, with '%epsilon' indicating an empty production (meaning the element is optional). These rules are part of a larger SQL parser grammar specification.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_115\n\nLANGUAGE: Parser Grammar\nCODE:\n```\n/*! Production::    opt_sql_security : SQL SECURITY DEFINER */\n\n/*! Production::    opt_sql_security : SQL SECURITY INVOKER */\n\n/*! Production::    opt_sql_throttle_for_priority : %epsilon */\n\n/*! Production::    opt_sql_throttle_for_priority : FOR PRIORITY COMP_LE INTNUM */\n\n/*! Production::    opt_sql_throttle_using_cond : USING sql_throttle_one_or_more_metrics */\n\n/*! Production::    opt_sqlj_obj_type : %epsilon */\n\n/*! Production::    opt_sqlj_obj_type_attr : %epsilon */\n\n/*! Production::    opt_sqlj_obj_type_attr : EXTERNAL NAME STRING */\n\n/*! Production::    opt_start_with : %epsilon */\n\n/*! Production::    opt_start_with : start_with */\n\n/*! Production::    opt_status : %epsilon */\n\n/*! Production::    opt_status : STATUS */\n\n/*! Production::    opt_storage : %epsilon */\n\n/*! Production::    opt_storage : STORAGE */\n\n/*! Production::    opt_storage_name : %epsilon */\n\n/*! Production::    opt_storage_name : STORAGE opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_storage_type : %epsilon */\n\n/*! Production::    opt_storage_type : STORED */\n\n/*! Production::    opt_storage_type : VIRTUAL */\n\n/*! Production::    opt_stringOrExpr : %epsilon */\n\n/*! Production::    opt_stringOrExpr : stringOrExpr */\n\n/*! Production::    opt_string_length_i : %epsilon */\n\n/*! Production::    opt_string_length_i : string_length_i */\n\n/*! Production::    opt_string_length_i_v2 : %epsilon */\n\n/*! Production::    opt_string_length_i_v2 : string_length_i */\n\n/*! Production::    opt_subPartitionCount : %epsilon */\n\n/*! Production::    opt_subPartitionCount : SUBPARTITIONS decimalLiteral */\n\n/*! Production::    opt_subpartitionDefinitions : %epsilon */\n\n/*! Production::    opt_subpartitionDefinitions : subpartitionDefinitions */\n\n/*! Production::    opt_subpartition_list : %epsilon */\n\n/*! Production::    opt_subpartition_list : opt_hash_subpartition_list */\n\n/*! Production::    opt_subpartition_list : opt_list_subpartition_list */\n\n/*! Production::    opt_subpartition_list : opt_range_subpartition_list */\n\n/*! Production::    opt_subpartition_list : subpartition_list */\n\n/*! Production::    opt_subpartitions : %epsilon */\n\n/*! Production::    opt_subpartitions : SUBPARTITIONS INTNUM */\n\n/*! Production::    opt_subtype_constraint : %epsilon */\n\n/*! Production::    opt_subtype_constraint : subtype_range */\n\n/*! Production::    opt_table : %epsilon */\n\n/*! Production::    opt_table : TABLE */\n\n/*! Production::    opt_tableConstraint : %epsilon */\n\n/*! Production::    opt_tableConstraint : CONSTRAINT opt_uid */\n\n/*! Production::    opt_tableConstraintFormat : %epsilon */\n\n/*! Production::    opt_tableConstraintFormat : tableConstraintFormat */\n\n/*! Production::    opt_tableOptions : %epsilon */\n\n/*! Production::    opt_tableOptions : tableOptions */\n\n/*! Production::    opt_table_alias : %epsilon */\n\n/*! Production::    opt_table_alias : relation_name */\n\n/*! Production::    opt_table_id : %epsilon */\n\n/*! Production::    opt_table_id : TABLE_ID COMP_EQ INTNUM */\n\n/*! Production::    opt_table_option_list : %epsilon */\n\n/*! Production::    opt_table_option_list : table_option_list */\n\n/*! Production::    opt_tablegroup_option_list : %epsilon */\n\n/*! Production::    opt_tablegroup_option_list : tablegroup_option_list */\n\n/*! Production::    opt_tablespaceSize : %epsilon */\n\n/*! Production::    opt_tablespaceSize : INITIAL_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_tablespace_option : %epsilon */\n\n/*! Production::    opt_tablespace_option : TABLESPACE tablespace */\n\n/*! Production::    opt_tablet_id : %epsilon */\n\n/*! Production::    opt_tablet_id : TABLET_ID COMP_EQ INTNUM */\n\n/*! Production::    opt_tail_name : %epsilon */\n\n/*! Production::    opt_tail_name : identifier */\n\n/*! Production::    opt_temporary : %epsilon */\n\n/*! Production::    opt_temporary : TEMPORARY */\n\n/*! Production::    opt_tenant_info : %epsilon */\n\n/*! Production::    opt_tenant_info : TENANT opt_equal_mark relation_name_or_string */\n\n/*! Production::    opt_tenant_info : TENANT_ID opt_equal_mark INTNUM */\n\n/*! Production::    opt_tenant_list : %epsilon */\n\n/*! Production::    opt_tenant_list : TENANT COMP_EQ tenant_name_list */\n\n/*! Production::    opt_tenant_list_or_ls_or_tablet_id : %epsilon */\n\n/*! Production::    opt_tenant_list_or_ls_or_tablet_id : tenant_list_tuple ls opt_tablet_id */\n\n/*! Production::    opt_tenant_list_or_ls_or_tablet_id : tenant_list_tuple opt_tablet_id */\n\n/*! Production::    opt_tenant_list_or_partition_id_desc : %epsilon */\n\n/*! Production::    opt_tenant_list_or_partition_id_desc : partition_id_desc */\n\n/*! Production::    opt_tenant_list_or_partition_id_desc : tenant_list_tuple */\n\n/*! Production::    opt_tenant_list_v2 : %epsilon */\n\n/*! Production::    opt_tenant_list_v2 : tenant_list_tuple */\n\n/*! Production::    opt_tenant_name : %epsilon */\n\n/*! Production::    opt_tenant_name : tenant_name */\n\n/*! Production::    opt_tenant_option_list : %epsilon */\n\n/*! Production::    opt_tenant_option_list : opt_tenant_option_list \",\" tenant_option */\n\n/*! Production::    opt_tenant_option_list : tenant_option */\n\n/*! Production::    opt_tg_partition_option : %epsilon */\n\n/*! Production::    opt_tg_partition_option : tg_hash_partition_option */\n\n/*! Production::    opt_tg_partition_option : tg_key_partition_option */\n\n/*! Production::    opt_tg_partition_option : tg_list_partition_option */\n\n/*! Production::    opt_tg_partition_option : tg_range_partition_option */\n\n/*! Production::    opt_threadTypes : %epsilon */\n\n/*! Production::    opt_threadTypes : threadTypes */\n\n/*! Production::    opt_time_func_fsp_i : \"(\" \")\" */\n\n/*! Production::    opt_time_func_fsp_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_time_func_fsp_i : %epsilon */\n\n/*! Production::    opt_to : %epsilon */\n\n/*! Production::    opt_to : TO */\n\n/*! Production::    opt_transactionModes : %epsilon */\n\n/*! Production::    opt_transactionModes : transactionModes */\n\n/*! Production::    opt_transactionScope : %epsilon */\n\n/*! Production::    opt_transactionScope : GLOBAL */\n\n/*! Production::    opt_transactionScope : SESSION */\n\n/*! Production::    opt_type_def : %epsilon */\n\n/*! Production::    opt_type_def : object_type_def */\n\n/*! Production::    opt_type_def : opt_invoke_right is_or_as nested_table_type_def */\n\n/*! Production::    opt_type_def : opt_invoke_right is_or_as varray_type_def */\n\n/*! Production::    opt_uid : %epsilon */\n\n/*! Production::    opt_uid : uid */\n\n/*! Production::    opt_uidList : %epsilon */\n\n/*! Production::    opt_uidList : LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    opt_unit_of_size : %epsilon */\n\n/*! Production::    opt_unit_of_size : unit_of_size */\n\n/*! Production::    opt_unpivot_include : %epsilon */\n\n/*! Production::    opt_unpivot_include : EXCLUDE NULLS */\n\n/*! Production::    opt_unpivot_include : INCLUDE NULLS */\n\n/*! Production::    opt_unsigned_i : %epsilon */\n\n/*! Production::    opt_unsigned_i : SIGNED */\n\n/*! Production::    opt_unsigned_i : UNSIGNED */\n\n/*! Production::    opt_urowid_length_i : %epsilon */\n\n/*! Production::    opt_urowid_length_i : urowid_length_i */\n\n/*! Production::    opt_use_partition : %epsilon */\n\n/*! Production::    opt_use_partition : use_partition */\n\n/*! Production::    opt_userPwdOption : %epsilon */\n\n/*! Production::    opt_userPwdOption : userLockOption opt_userPwdOption */\n\n/*! Production::    opt_userPwdOption : userPasswordOption opt_userPwdOption */\n\n/*! Production::    opt_using_args : %epsilon */\n\n/*! Production::    opt_using_args : USING argument_list */\n\n/*! Production::    opt_using_clause : %epsilon */\n\n/*! Production::    opt_using_clause : USING using_list */\n\n/*! Production::    opt_using_index_clause : %epsilon */\n\n/*! Production::    opt_using_index_clause : USING INDEX opt_index_option_list */\n\n/*! Production::    opt_validate_option : %epsilon */\n\n/*! Production::    opt_validate_option : NOVALIDATE */\n\n/*! Production::    opt_validate_option : VALIDATE */\n\n/*! Production::    opt_varying : %epsilon */\n\n/*! Production::    opt_varying : VARYING */\n\n/*! Production::    opt_viewAlgorithmAssign : %epsilon */\n\n/*! Production::    opt_viewAlgorithmAssign : ALGORITHM EQUAL_SYMBOL MERGE */\n\n/*! Production::    opt_viewAlgorithmAssign : ALGORITHM EQUAL_SYMBOL TEMPTABLE */\n\n/*! Production::    opt_viewAlgorithmAssign : ALGORITHM EQUAL_SYMBOL UNDEFINED */\n\n/*! Production::    opt_viewCheckOption : %epsilon */\n\n/*! Production::    opt_viewCheckOption : WITH CASCADED CHECK OPTION */\n\n/*! Production::    opt_viewCheckOption : WITH CHECK OPTION */\n\n/*! Production::    opt_viewCheckOption : WITH LOCAL CHECK OPTION */\n\n/*! Production::    opt_violation : %epsilon */\n\n/*! Production::    opt_violation : IGNORE */\n\n/*! Production::    opt_violation : REPLACE */\n\n/*! Production::    opt_visibility_option : %epsilon */\n\n/*! Production::    opt_visibility_option : visibility_option */\n\n/*! Production::    opt_when : %epsilon */\n\n/*! Production::    opt_when_condition : %epsilon */\n\n/*! Production::    opt_when_condition : WHEN \"(\" bool_expr \")\" */\n\n/*! Production::    opt_where : %epsilon */\n\n/*! Production::    opt_where : WHERE opt_hint_value expr */\n\n/*! Production::    opt_whereClause : %epsilon */\n\n/*! Production::    opt_whereClause : WHERE expression */\n\n/*! Production::    opt_where_extension : WHERE CURRENT OF obj_access_ref */\n\n/*! Production::    opt_where_extension : opt_where */\n\n/*! Production::    opt_win_window : %epsilon */\n\n/*! Production::    opt_win_window : win_window */\n\n/*! Production::    opt_withGrantOptions : %epsilon */\n\n/*! Production::    opt_withGrantOptions : WITH grantOptions */\n\n/*! Production::    opt_withRollup : %epsilon */\n\n/*! Production::    opt_withRollup : WITH ROLLUP */\n\n/*! Production::    opt_withUserResourceOpt : %epsilon */\n\n/*! Production::    opt_withUserResourceOpt : WITH userResourceOptions */\n\n/*! Production::    opt_with_active_piece : %epsilon */\n\n/*! Production::    opt_with_active_piece : WITH ACTIVE */\n```\n\n----------------------------------------\n\nTITLE: Defining Additional SQL Function Name Base Productions\nDESCRIPTION: This snippet continues defining production rules for SQL function name bases, including more mathematical, string manipulation, and data type conversion functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_88\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    functionNameBase : CEIL */\n\n/*! Production::    functionNameBase : CEILING */\n\n/*! Production::    functionNameBase : CENTROID */\n\n/*! Production::    functionNameBase : CHARACTER_LENGTH */\n\n/*! Production::    functionNameBase : CHARSET */\n\n/*! Production::    functionNameBase : CHAR_LENGTH */\n\n/*! Production::    functionNameBase : COERCIBILITY */\n\n/*! Production::    functionNameBase : COLLATION */\n\n/*! Production::    functionNameBase : COMPRESS */\n\n/*! Production::    functionNameBase : CONCAT */\n\n/*! Production::    functionNameBase : CONCAT_WS */\n\n/*! Production::    functionNameBase : CONNECTION_ID */\n\n/*! Production::    functionNameBase : CONV */\n\n/*! Production::    functionNameBase : CONVERT_TZ */\n\n/*! Production::    functionNameBase : COS */\n\n/*! Production::    functionNameBase : COT */\n\n/*! Production::    functionNameBase : COUNT */\n\n/*! Production::    functionNameBase : CRC32 */\n\n/*! Production::    functionNameBase : CREATE_ASYMMETRIC_PRIV_KEY */\n\n/*! Production::    functionNameBase : CREATE_ASYMMETRIC_PUB_KEY */\n\n/*! Production::    functionNameBase : CREATE_DH_PARAMETERS */\n\n/*! Production::    functionNameBase : CREATE_DIGEST */\n\n/*! Production::    functionNameBase : CROSSES */\n\n/*! Production::    functionNameBase : DATABASE */\n```\n\n----------------------------------------\n\nTITLE: Table ALTER Productions\nDESCRIPTION: Grammar production rules for ALTER TABLE statements including operations for modifying columns, constraints, foreign keys and table properties\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alter_table_action : CONVERT TO CHARACTER SET charset_name opt_collation */\n/*! Production::    alter_table_action : DROP CONSTRAINT constraint_name */\n/*! Production::    alter_table_action : RENAME opt_to relation_factor */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Generated Columns and System Variables\nDESCRIPTION: These production rules define optional clauses for SQL generated columns, including their types and attributes, as well as system variable settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_120\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_generatedType : %epsilon */\n\n/*! Production::    opt_generatedType : STORED */\n\n/*! Production::    opt_generatedType : VIRTUAL */\n\n/*! Production::    opt_generated_column_attribute_list : %epsilon */\n\n/*! Production::    opt_generated_column_attribute_list : opt_generated_column_attribute_list generated_column_attribute */\n\n/*! Production::    opt_generated_keyname : %epsilon */\n\n/*! Production::    opt_generated_keyname : GENERATED ALWAYS */\n\n/*! Production::    opt_generated_keyname : GENERATED opt_generated_option_list */\n\n/*! Production::    opt_generated_option_list : ALWAYS */\n\n/*! Production::    opt_global_sys_vars_set : %epsilon */\n\n/*! Production::    opt_global_sys_vars_set : VARIABLES sys_var_and_val_list */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords for Parser\nDESCRIPTION: A comprehensive collection of SQL keywords marked as 'unreserved_keyword_normal' for use in a SQL parser. These definitions allow the parser to recognize these tokens as keywords while still permitting their use as identifiers in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_210\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : SESSIONTIMEZONE */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Elements Grammar\nDESCRIPTION: Production rules for table elements such as columns, constraints, and indexes as they appear in CREATE TABLE statements. These define the structure of table definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_206\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    table_element : CONSTRAINT opt_constraint_name PRIMARY KEY opt_index_using_algorithm \"(\" column_name_list \")\" opt_index_using_algorithm opt_comment */\n\n/*! Production::    table_element : CONSTRAINT opt_constraint_name UNIQUE opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : FOREIGN KEY opt_index_name \"(\" column_name_list \")\" REFERENCES relation_factor \"(\" column_name_list \")\" opt_match_option opt_reference_option_list */\n\n/*! Production::    table_element : INDEX index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : INDEX opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : PRIMARY KEY opt_index_using_algorithm \"(\" column_name_list \")\" opt_index_using_algorithm opt_comment */\n\n/*! Production::    table_element : SPATIAL opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : UNIQUE opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    table_element : column_definition */\n\n/*! Production::    table_element : constraint_definition */\n\n/*! Production::    table_element : key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    table_element : out_of_line_constraint */\n\n/*! Production::    table_element_access_list : \"(\" table_index \")\" */\n\n/*! Production::    table_element_access_list : table_element_access_list \"(\" table_index \")\" */\n\n/*! Production::    table_element_list : table_element */\n\n/*! Production::    table_element_list : table_element_list \",\" table_element */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER SYSTEM Statements for Service and Task Management in SQL\nDESCRIPTION: This snippet defines ALTER SYSTEM statements related to arbitration services, balance tasks, backup operations, and various system-wide jobs and upgrades.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_system_stmt : ALTER SYSTEM REMOVE ARBITRATION SERVICE STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REMOVE BALANCE TASK opt_tenant_list opt_zone_list opt_balance_task_type */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REPLACE ARBITRATION SERVICE STRING_VALUE WITH STRING_VALUE */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM REPORT REPLICA opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RESTORE relation_name opt_backup_dest opt_restore_until WITH STRING_VALUE opt_description opt_preview */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RESUME BACKUP */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RUN JOB STRING_VALUE opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM RUN UPGRADE JOB STRING_VALUE opt_tenant_list_v2 */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET DISK VALID ip_port */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET NETWORK BANDWIDTH REGION relation_name_or_string TO relation_name_or_string conf_const */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET alter_system_set_clause_list */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET_TP alter_system_settp_actions */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM SET_TP alter_system_settp_actions opt_server_or_zone */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM START BACKUP ARCHIVELOG */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM START MERGE zone_desc */\n\n/*! Production::    alter_system_stmt : ALTER SYSTEM STOP BACKUP ARCHIVELOG */\n```\n\n----------------------------------------\n\nTITLE: SQL Relation Factor Productions\nDESCRIPTION: Grammar rules for relation factors including normal relations, hints, and joins\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_115\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    relation_factor : dot_relation_factor */\n/*! Production::    relation_factor : normal_relation_factor */\n/*! Production::    relation_factor_in_hint : normal_relation_factor qb_name_option */\n```\n\n----------------------------------------\n\nTITLE: Defining Oracle Unreserved Keywords in BNF Grammar\nDESCRIPTION: A comprehensive list of Oracle SQL unreserved keywords defined as production rules. These keywords have special meaning in Oracle SQL but can also be used as identifiers in certain contexts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_137\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    oracle_unreserved_keyword : FOREIGN */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Labels and Length Specifications\nDESCRIPTION: These production rules define optional clauses for SQL labels and length specifications, including single labels, label lists, and one-dimensional length specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_128\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_label : %epsilon */\n\n/*! Production::    opt_label : label_name */\n\n/*! Production::    opt_label_list : %epsilon */\n\n/*! Production::    opt_label_list : label_list */\n\n/*! Production::    opt_lengthOneDimension : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: SQL Pragma Statement Grammar Productions\nDESCRIPTION: Grammar rules defining valid syntax for various pragma statements including autonomous transactions, exception initialization, inline declarations and interfaces.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_125\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    pragma_stmt : autonomous_transaction_pragma */\n/*! Production::    pragma_stmt : exception_init_pragma */\n/*! Production::    pragma_stmt : inline_pragma */\n/*! Production::    pragma_stmt : interface_pragma */\n/*! Production::    pragma_stmt : restrict_references_pragma */\n/*! Production::    pragma_stmt : serially_reusable_pragma */\n/*! Production::    pragma_stmt : udf_pragma */\n```\n\n----------------------------------------\n\nTITLE: SQL Data Type Casting Production Rules\nDESCRIPTION: Grammar rules for CAST operations supporting various data types including numeric, character, binary, geometric and temporal types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    cast_data_type : BINARY opt_string_length_i_v2 */\n/*! Production::    cast_data_type : CHAR opt_string_length_i_v2 opt_binary */\n/*! Production::    cast_data_type : DECIMAL opt_number_precision */\n/*! Production::    cast_data_type : TIMESTAMP opt_datetime_fsp_i */\n```\n\n----------------------------------------\n\nTITLE: Rendering LlamaServerParameters Config in JSX\nDESCRIPTION: React component implementation displaying detailed configuration parameters for LlamaServerParameters using a ConfigDetail component. Includes comprehensive parameter definitions with types, requirements, and descriptions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/llama_cpp_adapter_llamaserverparameters_421f40.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"LlamaServerParameters\",\n  \"description\": \"LlamaServerParameters(name: str, provider: str = 'llama.cpp.server', verbose: Optional[bool] = False, concurrency: Optional[int] = 20, ...\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    // Additional parameters...\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Defining Method and Method List Production Rules in SQL\nDESCRIPTION: These production rules define methods and method lists, which may be used in certain SQL constructs or extensions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_104\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    method : for_all */\n\n/*! Production::    method : for_columns */\n\n/*! Production::    method_list : method */\n\n/*! Production::    method_list : method_list method */\n\n/*! Production::    method_opt : method_list */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords\nDESCRIPTION: This section defines a series of SQL keywords as unreserved, allowing them to be used in certain contexts without being treated as reserved words. The keywords cover various SQL operations and concepts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_211\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : UNINSTALL */\n\n/*! Production::    unreserved_keyword_normal : UNIT */\n\n/*! Production::    unreserved_keyword_normal : UNIT_GROUP */\n\n/*! Production::    unreserved_keyword_normal : UNIT_NUM */\n\n/*! Production::    unreserved_keyword_normal : UNKNOWN */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Keywords and Rules\nDESCRIPTION: This snippet demonstrates the format used to define SQL keywords and rules throughout the file. Each definition is enclosed in a comment block starting with '/*! Rule::' followed by the keyword or rule name.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_241\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       MEDIUMBLOB */\n\n/*! Rule::       MEDIUMINT */\n\n/*! Rule::       MEDIUMTEXT */\n\n/*! Rule::       MEMBER */\n\n/*! Rule::       MEMORY */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for ANALYZE TABLE Operations\nDESCRIPTION: These productions define the syntax for various ANALYZE TABLE operations, including computing and estimating statistics, and managing histograms.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    analyzeTable : ANALYZE analyzeTable TABLE tables */\n\n/*! Production::    analyze_column_info : column_name opt_bucket_num */\n\n/*! Production::    analyze_column_list : analyze_column_info */\n\n/*! Production::    analyze_column_list : analyze_column_list \",\" analyze_column_info */\n\n/*! Production::    analyze_statistics_clause : COMPUTE STATISTICS opt_analyze_for_clause */\n\n/*! Production::    analyze_statistics_clause : ESTIMATE STATISTICS opt_analyze_for_clause opt_analyze_sample_clause */\n\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor DROP HISTOGRAM ON column_name_list */\n\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor UPDATE HISTOGRAM ON column_name_list WITH INTNUM BUCKETS */\n\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor analyze_statistics_clause */\n\n/*! Production::    analyze_stmt : ANALYZE TABLE relation_factor use_partition analyze_statistics_clause */\n```\n\n----------------------------------------\n\nTITLE: SQL Resource Management Productions\nDESCRIPTION: Grammar rules for resource pool and unit configuration options\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_117\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    resource_option : MAX_CONNECTIONS_PER_HOUR INTNUM */\n/*! Production::    resource_option : MAX_USER_CONNECTIONS INTNUM */\n/*! Production::    resource_unit_option : MAX_CPU opt_equal_mark conf_const */\n/*! Production::    resource_unit_option : MAX_MEMORY opt_equal_mark conf_const */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions - Transpose Operations\nDESCRIPTION: Grammar rules defining PIVOT and UNPIVOT operations including their FOR and IN clauses\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_203\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    transpose_clause : PIVOT \"(\" pivot_aggr_clause transpose_for_clause transpose_in_clause \")\" */\n/*! Production::    transpose_clause : PIVOT \"(\" pivot_aggr_clause transpose_for_clause transpose_in_clause \")\" relation_name */\n/*! Production::    transpose_clause : UNPIVOT opt_unpivot_include \"(\" unpivot_column_clause transpose_for_clause unpivot_in_clause \")\" */\n/*! Production::    transpose_clause : UNPIVOT opt_unpivot_include \"(\" unpivot_column_clause transpose_for_clause unpivot_in_clause \")\" relation_name */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Joins and References\nDESCRIPTION: Grammar rules specifying syntax for natural joins, column references, and table relations in SQL queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_110\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    natural_join_type : NATURAL INNER JOIN */\n/*! Production::    natural_join_type : NATURAL JOIN */\n/*! Production::    no_param_column_ref : \".\" relation_name \".\" column_name */\n/*! Production::    normal_relation_factor : relation_name \".\" relation_name */\n```\n\n----------------------------------------\n\nTITLE: SQL Privilege Grammar Productions\nDESCRIPTION: Grammar rules defining valid syntax for SQL privileges and permissions including basic privileges like SELECT/INSERT as well as administrative privileges.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_127\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    privilege : ALL opt_PRIVILEGES */\n/*! Production::    privilege : SELECT */\n/*! Production::    privilege : INSERT */\n/*! Production::    privilege : UPDATE */\n/*! Production::    privilege : DELETE */\n/*! Production::    privilege : CREATE privilegeCreateType */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for PL/SQL Blocks and Variable Assignments\nDESCRIPTION: These productions define the syntax for anonymous PL/SQL blocks, variable assignments, and associated array type definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    anonymous_stmt : opt_label_list pl_block */\n\n/*! Production::    argument : USER_VARIABLE */\n\n/*! Production::    argument : identifier */\n\n/*! Production::    argument_list : argument */\n\n/*! Production::    argument_list : argument_list \",\" argument */\n\n/*! Production::    assign : EQUAL_SYMBOL */\n\n/*! Production::    assign : VAR_ASSIGN */\n\n/*! Production::    assign_stmt : pl_left_value ASSIGN_OPERATOR pl_right_value */\n\n/*! Production::    assignmentField : LOCAL_ID */\n\n/*! Production::    assignmentField : uid */\n\n/*! Production::    assignmentFields : assignmentField */\n\n/*! Production::    assignmentFields : assignmentField COMMA assignmentFields */\n\n/*! Production::    assoc_array_type_def : TABLE OF pl_inner_data_type opt_not_null INDEX BY index_type */\n\n/*! Production::    assoc_array_type_def : TABLE OF pl_inner_simple_not_null_type INDEX BY index_type */\n```\n\n----------------------------------------\n\nTITLE: Altering Existing Tables for DB-GPT V0.5.0 Upgrade\nDESCRIPTION: SQL commands to alter the existing gpts_conversations table by adding team_mode and current_goal columns. These modifications support team work mode and goal tracking in conversations for the V0.5.0 upgrade.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/changelog/Released_V0.5.0.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `gpts_conversations`\nADD COLUMN `team_mode` varchar(255) NULL COMMENT 'agent team work mode';\n\nALTER TABLE `gpts_conversations`\nADD COLUMN  `current_goal` text COMMENT 'The target corresponding to the current message';\n```\n\n----------------------------------------\n\nTITLE: Signal and Value Productions\nDESCRIPTION: Grammar rules for signal statements, condition information, and value definitions\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_151\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    signValue : ID */\n\n/*! Production::    signValue : REVERSE_QUOTE_ID */\n\n/*! Production::    signValue : SQLSTATE opt_VALUE stringLiteral */\n\n/*! Production::    signalConditionInformation : signalConditionLeft EQUAL_SYMBOL signalConditionRight */\n```\n\n----------------------------------------\n\nTITLE: Defining Window Function Production Rules in SQL\nDESCRIPTION: These rules define the syntax for various window functions in SQL, including APPROX_COUNT_DISTINCT, AVG, COUNT, and other aggregate functions with OVER clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_219\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : APPROX_COUNT_DISTINCT \"(\" expr_list \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : APPROX_COUNT_DISTINCT \"(\" expr_list \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : AVG \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : COUNT \"(\" DISTINCT bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : COUNT \"(\" opt_all \"*\" \")\" OVER \"(\" generalized_window_clause \")\" */\n```\n\n----------------------------------------\n\nTITLE: BLOB Data Type Declarations\nDESCRIPTION: Grammar productions for BLOB data type variations including LONGBLOB, MEDIUMBLOB, TINYBLOB etc.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    blob_type_i : BLOB */\n/*! Production::    blob_type_i : LONGBLOB */\n/*! Production::    blob_type_i : MEDIUMBLOB */\n/*! Production::    blob_type_i : MEDIUMTEXT VARBINARY */\n/*! Production::    blob_type_i : TINYBLOB */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Optional Elements\nDESCRIPTION: A comprehensive collection of grammar production rules defining optional syntax elements for SQL parsing. These rules specify how various optional components of SQL statements can be constructed, with each rule defining a particular optional element that may appear in SQL queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_132\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    opt_qb_name : \"(\" qb_name_option \")\" */\n\n/*! Production::    opt_qb_name : %epsilon */\n\n/*! Production::    opt_query_expression_option_list : %epsilon */\n\n/*! Production::    opt_query_expression_option_list : query_expression_option_list */\n\n/*! Production::    opt_range_partition_list : \"(\" range_partition_list \")\" */\n\n/*! Production::    opt_range_subpartition_list : \"(\" range_subpartition_list \")\" */\n\n/*! Production::    opt_record_member_default : %epsilon */\n\n/*! Production::    opt_record_member_default : ASSIGN_OPERATOR pl_right_value */\n\n/*! Production::    opt_recovery_window : %epsilon */\n\n/*! Production::    opt_recovery_window : RECOVERY_WINDOW opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_redundancy : %epsilon */\n\n/*! Production::    opt_redundancy : REDUNDANCY opt_equal_mark INTNUM */\n\n/*! Production::    opt_referenceAction : %epsilon */\n\n/*! Production::    opt_referenceAction : referenceAction */\n\n/*! Production::    opt_reference_option : %epsilon */\n\n/*! Production::    opt_reference_option : reference_option */\n\n/*! Production::    opt_reference_option_list : %epsilon */\n\n/*! Production::    opt_reference_option_list : opt_reference_option_list reference_option */\n\n/*! Production::    opt_referencing_list : %epsilon */\n\n/*! Production::    opt_referencing_list : REFERENCING referencing_list */\n\n/*! Production::    opt_relation_factor_in_hint_list : \"(\" relation_factor_in_hint_list \")\" */\n\n/*! Production::    opt_relation_factor_in_hint_list : %epsilon */\n\n/*! Production::    opt_relation_factor_in_hint_list : relation_factor_in_hint */\n\n/*! Production::    opt_relies_on_clause : %epsilon */\n\n/*! Production::    opt_relies_on_clause : relies_on_clause */\n\n/*! Production::    opt_rely_option : %epsilon */\n\n/*! Production::    opt_rely_option : NORELY */\n\n/*! Production::    opt_rely_option : RELY */\n\n/*! Production::    opt_renameEvent : %epsilon */\n\n/*! Production::    opt_renameEvent : RENAME TO fullId */\n\n/*! Production::    opt_replace : %epsilon */\n\n/*! Production::    opt_replace : OR REPLACE */\n\n/*! Production::    opt_replacePriority : %epsilon */\n\n/*! Production::    opt_replacePriority : DELAYED */\n\n/*! Production::    opt_replacePriority : LOW_PRIORITY */\n\n/*! Production::    opt_resource_option : %epsilon */\n\n/*! Production::    opt_resource_option : WITH resource_option_list */\n\n/*! Production::    opt_resource_unit_option_list : %epsilon */\n\n/*! Production::    opt_resource_unit_option_list : opt_resource_unit_option_list \",\" resource_unit_option */\n\n/*! Production::    opt_resource_unit_option_list : resource_unit_option */\n\n/*! Production::    opt_respect_or_ignore_nulls : %epsilon */\n\n/*! Production::    opt_respect_or_ignore_nulls : respect_or_ignore NULLS */\n\n/*! Production::    opt_restore_until : %epsilon */\n\n/*! Production::    opt_restore_until : UNTIL SCN COMP_EQ INTNUM */\n\n/*! Production::    opt_restore_until : UNTIL TIME COMP_EQ STRING_VALUE */\n\n/*! Production::    opt_return_type : %epsilon */\n\n/*! Production::    opt_return_type : return_type */\n\n/*! Production::    opt_returning : %epsilon */\n\n/*! Production::    opt_returning : RETURN returning_exprs opt_into_clause */\n\n/*! Production::    opt_returning : RETURNING returning_exprs opt_into_clause */\n\n/*! Production::    opt_returning_type : %epsilon */\n\n/*! Production::    opt_returning_type : RETURNING cast_data_type */\n\n/*! Production::    opt_reuse_settings : %epsilon */\n\n/*! Production::    opt_reuse_settings : REUSE SETTINGS */\n\n/*! Production::    opt_reverse : %epsilon */\n\n/*! Production::    opt_reverse : REVERSE */\n\n/*! Production::    opt_rollup : %epsilon */\n\n/*! Production::    opt_rollup : ROLLUP \"(\" list_for_group_by \")\" */\n\n/*! Production::    opt_rollup : WITH ROLLUP */\n\n/*! Production::    opt_routineOptions : %epsilon */\n\n/*! Production::    opt_routineOptions : routineOptions */\n\n/*! Production::    opt_sample_scope : %epsilon */\n\n/*! Production::    opt_sample_scope : ALL */\n\n/*! Production::    opt_sample_scope : BASE */\n\n/*! Production::    opt_sample_scope : INCR */\n\n/*! Production::    opt_save_exception : %epsilon */\n\n/*! Production::    opt_save_exception : SAVE EXCEPTIONS */\n\n/*! Production::    opt_scheduleEndTime : %epsilon */\n\n/*! Production::    opt_scheduleEndTime : ENDS timestampValue opt_intervalExprs */\n\n/*! Production::    opt_scheduleExpress : %epsilon */\n\n/*! Production::    opt_scheduleExpress : ON SCHEDULE scheduleExpression */\n\n/*! Production::    opt_scheduleStartTime : %epsilon */\n\n/*! Production::    opt_scheduleStartTime : STARTS timestampValue opt_intervalExprs */\n\n/*! Production::    opt_scope : %epsilon */\n\n/*! Production::    opt_scope : GLOBAL */\n\n/*! Production::    opt_scope : LOCAL */\n\n/*! Production::    opt_scope : SESSION */\n\n/*! Production::    opt_search_clause : %epsilon */\n\n/*! Production::    opt_search_clause : SEARCH BREADTH FIRST BY sort_list search_set_value */\n\n/*! Production::    opt_search_clause : SEARCH DEPTH FIRST BY sort_list search_set_value */\n\n/*! Production::    opt_selectElementPart : %epsilon */\n\n/*! Production::    opt_selectElementPart : selectElementPart */\n\n/*! Production::    opt_selectIntoExpressionFormat : %epsilon */\n\n/*! Production::    opt_selectIntoExpressionFormat : fieldsFormat selectFieldsIntos */\n\n/*! Production::    opt_selectIntoExpressionLines : %epsilon */\n\n/*! Production::    opt_selectIntoExpressionLines : LINES selectLinesIntos */\n\n/*! Production::    opt_selectSpecs : %epsilon */\n\n/*! Production::    opt_selectSpecs : selectSpecs */\n\n/*! Production::    opt_separator : %epsilon */\n\n/*! Production::    opt_separator : SEPARATOR STRING_VALUE */\n\n/*! Production::    opt_sequence_option_list : %epsilon */\n\n/*! Production::    opt_sequence_option_list : sequence_option_list */\n\n/*! Production::    opt_serverOptions : %epsilon */\n\n/*! Production::    opt_serverOptions : serverOptions */\n\n/*! Production::    opt_server_list : %epsilon */\n\n/*! Production::    opt_server_list : SERVER opt_equal_mark \"(\" server_list \")\" */\n\n/*! Production::    opt_server_or_zone : %epsilon */\n\n/*! Production::    opt_server_or_zone : server_or_zone */\n\n/*! Production::    opt_set : %epsilon */\n\n/*! Production::    opt_set : SET */\n\n/*! Production::    opt_setSignalConditionInformations : %epsilon */\n\n/*! Production::    opt_setSignalConditionInformations : SET signalConditionInformations */\n\n/*! Production::    opt_setUpdatedElements : %epsilon */\n\n/*! Production::    opt_setUpdatedElements : SET updatedElements */\n\n/*! Production::    opt_set_sys_var : %epsilon */\n\n/*! Production::    opt_set_sys_var : SET VARIABLES sys_var_and_val_list */\n\n/*! Production::    opt_set_sys_var : SET sys_var_and_val_list */\n\n/*! Production::    opt_set_sys_var : VARIABLES sys_var_and_val_list */\n\n/*! Production::    opt_sf_clause : %epsilon */\n\n/*! Production::    opt_sf_clause : sf_clause_list */\n\n/*! Production::    opt_showEventFrom : %epsilon */\n\n/*! Production::    opt_showEventFrom : FROM decimalLiteral */\n\n/*! Production::    opt_showEventIn : %epsilon */\n\n/*! Production::    opt_showEventIn : IN STRING_LITERAL */\n\n/*! Production::    opt_showFilter : %epsilon */\n\n/*! Production::    opt_showFilter : showFilter */\n\n/*! Production::    opt_showProfileFor : %epsilon */\n\n/*! Production::    opt_showProfileFor : FOR QUERY decimalLiteral */\n\n/*! Production::    opt_show_condition : %epsilon */\n\n/*! Production::    opt_show_condition : LIKE STRING_VALUE */\n\n/*! Production::    opt_show_condition : LIKE STRING_VALUE ESCAPE STRING_VALUE */\n\n/*! Production::    opt_show_condition : WHERE expr */\n\n/*! Production::    opt_shrink_tenant_unit_option : %epsilon */\n\n/*! Production::    opt_shrink_tenant_unit_option : DELETE UNIT_GROUP opt_equal_mark \"(\" id_list \")\" */\n\n/*! Production::    opt_shrink_unit_option : %epsilon */\n\n/*! Production::    opt_shrink_unit_option : DELETE UNIT opt_equal_mark \"(\" id_list \")\" */\n\n/*! Production::    opt_shrink_unit_option : DELETE UNIT opt_equal_mark \"(\" unit_id_list \")\" */\n\n/*! Production::    opt_siblings : %epsilon */\n\n/*! Production::    opt_siblings : SIBLINGS */\n\n/*! Production::    opt_signOrUnsign : %epsilon */\n\n/*! Production::    opt_signOrUnsign : SIGNED */\n\n/*! Production::    opt_signOrUnsign : UNSIGNED */\n\n/*! Production::    opt_signValue : %epsilon */\n\n/*! Production::    opt_signValue : signValue */\n\n/*! Production::    opt_size_clause : %epsilon */\n\n/*! Production::    opt_size_clause : size_clause */\n\n/*! Production::    opt_sort_column_key_length : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_sort_column_key_length : %epsilon */\n\n/*! Production::    opt_sp_cparam_list : %epsilon */\n\n/*! Production::    opt_sp_cparam_list : sp_cparam_list */\n\n/*! Production::    opt_sp_cparam_with_assign : %epsilon */\n\n/*! Production::    opt_sp_cparam_with_assign : PARAM_ASSIGN_OPERATOR opt_cexpr */\n\n/*! Production::    opt_sp_cparams : opt_sp_cparams \",\" sp_cparam */\n\n/*! Production::    opt_sp_cparams : sp_cparam */\n\n/*! Production::    opt_sp_elseifs : %epsilon */\n\n/*! Production::    opt_sp_elseifs : ELSE pl_lang_stmt_list */\n\n/*! Production::    opt_sp_elseifs : ELSIF sp_if */\n\n/*! Production::    opt_sp_inout : %epsilon */\n\n/*! Production::    opt_sp_inout : IN */\n\n/*! Production::    opt_sp_inout : IN OUT */\n\n/*! Production::    opt_sp_inout : IN OUT NOCOPY */\n\n/*! Production::    opt_sp_inout : OUT */\n\n/*! Production::    opt_sp_inout : OUT NOCOPY */\n\n/*! Production::    opt_sp_param_list : \"(\" sp_param_list \")\" */\n\n/*! Production::    opt_sp_param_list : %epsilon */\n\n/*! Production::    opt_special_partition_list : \"(\" special_partition_list \")\" */\n\n/*! Production::    opt_sqlSecurity : %epsilon */\n\n/*! Production::    opt_sqlSecurity : SQL SECURITY DEFINER */\n\n/*! Production::    opt_sqlSecurity : SQL SECURITY INVOKER */\n\n/*! Production::    opt_sql_id : %epsilon */\n\n/*! Production::    opt_sql_id : sql_id_expr */\n\n/*! Production::    opt_sql_security : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: Extended SHOW Statement Production Rules in SQL\nDESCRIPTION: Additional grammar production rules for specialized SHOW statements including collation, errors, status, and database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_144\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW COLLATION opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW COUNT \"(\" \"*\" \")\" ERRORS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW COUNT \"(\" \"*\" \")\" WARNINGS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW CREATE FUNCTION relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW CREATE PROCEDURE relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW CREATE TABLE relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW CREATE TABLEGROUP relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW CREATE VIEW relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW ERRORS opt_limit */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW FUNCTION STATUS opt_from_or_in_database_clause opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW GRANTS opt_for_grant_user */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW PARAMETERS opt_show_condition opt_tenant_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW PRIVILEGES */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW PROCEDURE STATUS opt_from_or_in_database_clause opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW QUERY_RESPONSE_TIME */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW RECYCLEBIN */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW RESTORE PREVIEW */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW SCHEMA */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW SEQUENCES opt_show_condition opt_from_or_in_database_clause */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW SERVER STATUS opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW TABLE STATUS opt_from_or_in_database_clause opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW TABLEGROUPS opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW TENANT opt_status */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW TRACE FORMAT COMP_EQ STRING_VALUE opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW TRACE opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW TRIGGERS opt_from_or_in_database_clause opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW WARNINGS opt_limit */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW charset_key opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint FUNCTION relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint PROCEDURE relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint TABLE relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint TABLEGROUP relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint TENANT relation_name */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint TRIGGER relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint VIEW relation_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW create_with_opt_hint database_or_schema opt_if_not_exists database_factor */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW databases_or_schemas opt_status opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW index_or_indexes_or_keys from_or_in relation_factor opt_from_or_in_database_clause opt_where */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW opt_full PROCESSLIST */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW opt_full TABLES opt_from_or_in_database_clause opt_show_condition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW opt_full columns_or_fields from_or_in relation_factor opt_from_or_in_database_clause opt_show_condition */\n```\n\n----------------------------------------\n\nTITLE: Defining XID (Transaction ID) Productions in SQL\nDESCRIPTION: These productions define the syntax for XID (Transaction ID) in SQL, including various formats for xuidStringId and numeric components.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_233\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    xid : xuidStringId */\n\n/*! Production::    xid : xuidStringId COMMA xuidStringId */\n\n/*! Production::    xid : xuidStringId COMMA xuidStringId COMMA decimalLiteral */\n\n/*! Production::    xuidStringId : BIT_STRING */\n\n/*! Production::    xuidStringId : HEXADECIMAL_LITERALs */\n\n/*! Production::    xuidStringId : STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Assignment Production Rules in SQL\nDESCRIPTION: These rules define the syntax for variable assignments in SQL, including system variables, user variables, and scoped variables.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_218\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    var_and_val : SYSTEM_VARIABLE to_or_eq set_expr_or_default */\n\n/*! Production::    var_and_val : USER_VARIABLE SET_VAR expr */\n\n/*! Production::    var_and_val : USER_VARIABLE set_var_op bit_expr */\n\n/*! Production::    var_and_val : USER_VARIABLE to_or_eq bit_expr */\n\n/*! Production::    var_and_val : USER_VARIABLE to_or_eq expr */\n\n/*! Production::    var_and_val : scope_or_scope_alias column_name to_or_eq set_expr_or_default */\n\n/*! Production::    var_and_val : sys_var_and_val */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Clause and Expression Production Rules\nDESCRIPTION: This snippet shows how production rules for various SQL clauses and expressions are defined, including SELECT elements, INTO clauses, and function calls.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_137\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    selectElement : expression */\n\n/*! Production::    selectElement : expression AS uid */\n\n/*! Production::    selectElement : expression uid */\n\n/*! Production::    selectElement : fullId DOT STAR */\n\n/*! Production::    selectIntoExpression : INTO DUMPFILE STRING_LITERAL */\n\n/*! Production::    selectIntoExpression : INTO OUTFILE STRING_LITERAL opt_characterSet opt_selectIntoExpressionFormat opt_selectIntoExpressionLines */\n\n/*! Production::    selectIntoExpression : INTO assignmentFields */\n\n/*! Production::    scalarFunctionName : ASCII */\n\n/*! Production::    scalarFunctionName : CURDATE */\n\n/*! Production::    scalarFunctionName : CURRENT_DATE */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar for Update and User Specifications\nDESCRIPTION: These productions define optional elements for UPDATE statements, including column specifications and wait conditions. They also cover user-related syntax for grant operations and host specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_93\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_for_update_of : %epsilon */\n\n/*! Production::    opt_for_update_of : OF column_list */\n\n/*! Production::    opt_for_update_wait : %epsilon */\n\n/*! Production::    opt_for_update_wait : NOWAIT */\n\n/*! Production::    opt_for_update_wait : NO_WAIT */\n\n/*! Production::    opt_for_update_wait : WAIT DECIMAL_VAL */\n\n/*! Production::    opt_for_update_wait : WAIT INTNUM */\n\n/*! Production::    opt_for_user : %epsilon */\n\n/*! Production::    opt_for_user : FOR user opt_host_name */\n\n/*! Production::    opt_force : %epsilon */\n\n/*! Production::    opt_force : FORCE */\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Memory with Custom Values in Python\nDESCRIPTION: This code snippet shows how to create a Hybrid Memory instance with custom values for sensory memory, short-term memory, and long-term memory. It sets up each component with specific configurations and combines them into a HybridMemory object.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/hybrid_memory.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom concurrent.futures import ThreadPoolExecutor\n\nfrom dbgpt.agent import (\n    SensoryMemory,\n    EnhancedShortTermMemory,\n    LongTermMemory,\n    HybridMemory,\n    AgentMemory,\n)\n\nexecutor = ThreadPoolExecutor()\n\nsensor_memory = SensoryMemory(buffer_size=2)\n\nshort_term_memory = EnhancedShortTermMemory(\n    embeddings=embeddings,\n    buffer_size=2,\n    enhance_similarity_threshold=0.7,\n    enhance_threshold=3,\n    executor=executor,\n)\n\nlong_term_memory = LongTermMemory(\n    executor=ThreadPoolExecutor(), vector_store=vector_store, _default_importance=0.5\n)\n\nhybrid_memory = HybridMemory(\n    now=datetime.now(),\n    sensory_memory=sensor_memory,\n    short_term_memory=short_term_memory,\n    long_term_memory=long_term_memory,\n)\n\nagent_memory: AgentMemory = AgentMemory(memory=hybrid_memory)\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Insert Statement Syntax\nDESCRIPTION: These productions define the syntax for SQL INSERT statements, including various options and value specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    insertStatement : INSERT opt_insertPriority opt_IGNORE opt_INTO tableName opt_insertStatement_partition insertStatement_value */\n\n/*! Production::    insertStatementValue : insertValueKeyword insertValues */\n\n/*! Production::    insertStatementValue : selectStatement */\n\n/*! Production::    insertStatement_value : SET updatedElements */\n\n/*! Production::    insertStatement_value : opt_uidList insertStatementValue */\n\n/*! Production::    insertValueKeyword : VALUE */\n\n/*! Production::    insertValueKeyword : VALUES */\n\n/*! Production::    insertValues : LR_BRACKET opt_expressionsWithDefaults RR_BRACKET */\n\n/*! Production::    insertValues : LR_BRACKET opt_expressionsWithDefaults RR_BRACKET COMMA insertValues */\n\n/*! Production::    insert_stmt : insert_with_opt_hint opt_ignore opt_into single_table_insert opt_on_duplicate_key_clause */\n\n/*! Production::    insert_stmt : insert_with_opt_hint single_table_insert */\n\n/*! Production::    insert_stmt : replace_with_opt_hint opt_ignore opt_into single_table_insert */\n\n/*! Production::    insert_table_clause : \"(\" subquery fetch_next_clause \")\" */\n\n/*! Production::    insert_table_clause : \"(\" subquery fetch_next_clause \")\" relation_name */\n\n/*! Production::    insert_table_clause : \"(\" subquery order_by opt_fetch_next \")\" */\n\n/*! Production::    insert_table_clause : \"(\" subquery order_by opt_fetch_next \")\" relation_name */\n\n/*! Production::    insert_table_clause : dml_table_name */\n\n/*! Production::    insert_table_clause : dml_table_name relation_name */\n\n/*! Production::    insert_table_clause : select_with_parens */\n\n/*! Production::    insert_table_clause : select_with_parens relation_name */\n\n/*! Production::    insert_vals : %epsilon */\n\n/*! Production::    insert_vals : expr_or_default */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for ALTER TABLE Partition Operations\nDESCRIPTION: These productions define the syntax for various ALTER TABLE partition operations, including adding, dropping, reorganizing, and truncating partitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_tg_partition_option : ADD PARTITION opt_partition_range_or_list */\n\n/*! Production::    alter_tg_partition_option : DROP PARTITION drop_partition_name_list */\n\n/*! Production::    alter_tg_partition_option : REORGANIZE PARTITION name_list INTO opt_partition_range_or_list */\n\n/*! Production::    alter_tg_partition_option : TRUNCATE PARTITION name_list */\n\n/*! Production::    alter_tg_partition_option : modify_tg_partition_info */\n```\n\n----------------------------------------\n\nTITLE: Window Specification Level Grammar in SQL\nDESCRIPTION: Grammar production rules for window specification levels in SQL window functions. These rules define how to specify ordering and other options within window functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_230\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    ws_level_flag_desc : ASC */\n\n/*! Production::    ws_level_flag_desc : DESC */\n\n/*! Production::    ws_level_flag_reverse : REVERSE */\n\n/*! Production::    ws_level_flags : %epsilon */\n\n/*! Production::    ws_level_flags : ws_level_flag_desc */\n\n/*! Production::    ws_level_flags : ws_level_flag_desc ws_level_flag_reverse */\n\n/*! Production::    ws_level_flags : ws_level_flag_reverse */\n\n/*! Production::    ws_level_list : ws_level_list \",\" ws_level_list_item */\n\n/*! Production::    ws_level_list : ws_level_list_item */\n\n/*! Production::    ws_level_list_item : ws_level_number ws_level_flags */\n\n/*! Production::    ws_level_list_or_range : ws_level_list */\n\n/*! Production::    ws_level_list_or_range : ws_level_range */\n\n/*! Production::    ws_level_number : INTNUM */\n\n/*! Production::    ws_level_range : ws_level_number \"-\" ws_level_number */\n\n/*! Production::    ws_nweights : \"(\" INTNUM \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production Rules\nDESCRIPTION: This snippet showcases the structure of SQL grammar production rules. Each rule defines a specific SQL construct or statement, providing a formal definition of SQL syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_192\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    specificFunction : GET_FORMAT LR_BRACKET datetimeFormat COMMA stringLiteral RR_BRACKET */\n\n/*! Production::    specificFunction : LOCALTIME */\n\n/*! Production::    specificFunction : LOCALTIME LR_BRACKET RR_BRACKET */\n\n/*! Production::    specificFunction : POSITION LR_BRACKET stringOrExpr IN stringOrExpr RR_BRACKET */\n\n/*! Production::    specificFunction : TRIM LR_BRACKET stringOrExpr FROM stringOrExpr RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for ALTER SHRINK SPACE Statement\nDESCRIPTION: This snippet defines the grammar production for the ALTER SHRINK SPACE statement, including variations for tables and tenants.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_146\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    shrink_space_stmt : ALTER TABLE relation_factor SHRINK SPACE */\n\n/*! Production::    shrink_space_stmt : ALTER TENANT ALL SHRINK SPACE */\n\n/*! Production::    shrink_space_stmt : ALTER TENANT relation_name SHRINK SPACE */\n```\n\n----------------------------------------\n\nTITLE: MySQL Environment ID Function Production Rules\nDESCRIPTION: Production rules defining environment ID functions UID and USER that can be used to identify the current session or user in MySQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_58\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    environment_id_function : UID */\n\n/*! Production::    environment_id_function : USER */\n```\n\n----------------------------------------\n\nTITLE: Defining Package Blocks in PL/SQL\nDESCRIPTION: BNF production rule for PL/SQL package declaration blocks, including schema name, procedure clauses, and optional declaration statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_143\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    package_block : PACKAGE_P pl_schema_name opt_proc_clause is_or_as opt_decl_stmt_list END_KEY opt_tail_name */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Select Statement Components Production Rules\nDESCRIPTION: This snippet defines production rules for various components of SQL select statements, including expression lists, INTO clauses, and subqueries with ordering and fetching options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_141\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_expr_list : projection */\n\n/*! Production::    select_expr_list : select_expr_list \",\" projection */\n\n/*! Production::    select_into : select_no_parens into_clause */\n\n/*! Production::    select_no_parens : select_clause */\n\n/*! Production::    select_no_parens : select_clause opt_for_update */\n\n/*! Production::    select_no_parens : select_clause_set */\n\n/*! Production::    select_no_parens : select_clause_set opt_for_update */\n\n/*! Production::    select_no_parens : select_clause_set_with_order_and_limit opt_for_update */\n\n/*! Production::    select_stmt : select_into */\n\n/*! Production::    select_stmt : select_no_parens opt_when */\n\n/*! Production::    select_stmt : select_with_parens */\n\n/*! Production::    select_stmt : subquery fetch_next for_update */\n\n/*! Production::    select_stmt : subquery for_update */\n\n/*! Production::    select_stmt : subquery for_update order_by */\n\n/*! Production::    select_stmt : subquery opt_fetch_next */\n\n/*! Production::    select_stmt : subquery order_by opt_fetch_next */\n\n/*! Production::    select_stmt : subquery order_by opt_fetch_next for_update */\n\n/*! Production::    select_stmt : with_select */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for ROLLBACK and SAVEPOINT Statements\nDESCRIPTION: These productions define grammar rules for ROLLBACK and SAVEPOINT statements, including various options and clauses associated with these operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_175\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    rollbackStatement : ROLLBACK opt_WORK TO opt_SAVEPOINT uid */\n\n/*! Production::    rollbackWork : ROLLBACK opt_WORK */\n\n/*! Production::    rollbackWork : ROLLBACK opt_WORK AND opt_NO CHAIN */\n\n/*! Production::    rollbackWork : ROLLBACK opt_WORK opt_NO RELEASE */\n\n/*! Production::    rollback_savepoint_stmt : ROLLBACK TO SAVEPOINT var_name */\n\n/*! Production::    rollback_savepoint_stmt : ROLLBACK TO var_name */\n\n/*! Production::    rollback_savepoint_stmt : ROLLBACK WORK TO var_name */\n\n/*! Production::    rollback_stmt : ROLLBACK HINT_VALUE opt_work */\n\n/*! Production::    rollback_stmt : ROLLBACK opt_work */\n\n/*! Production::    savepointStatement : SAVEPOINT uid */\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple Expressions in SQL\nDESCRIPTION: This set of production rules defines how simple expressions are parsed in SQL. It covers various types of expressions, including parenthesized expressions, unary operations, and function calls.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_155\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simple_expr : \"(\" bit_expr \")\" */\n\n/*! Production::    simple_expr : \"(\" expr \")\" */\n\n/*! Production::    simple_expr : \"+\" simple_expr */\n\n/*! Production::    simple_expr : \"-\" simple_expr */\n\n/*! Production::    simple_expr : BINARY simple_expr */\n\n/*! Production::    simple_expr : EXISTS select_with_parens */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Constraint Syntax\nDESCRIPTION: This snippet outlines the syntax for SQL constraints, including foreign key, primary key, and check constraints.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_118\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    out_of_line_constraint : FOREIGN KEY \"(\" column_name_list \")\" references_clause opt_using_index_clause opt_enable_option */\n/*! Production::    out_of_line_constraint : PRIMARY KEY \"(\" column_name_list \")\" opt_using_index_clause */\n/*! Production::    out_of_line_constraint : constraint_and_name FOREIGN KEY \"(\" column_name_list \")\" references_clause opt_using_index_clause opt_enable_option */\n/*! Production::    out_of_line_constraint : constraint_and_name PRIMARY KEY \"(\" column_name_list \")\" opt_using_index_clause */\n/*! Production::    out_of_line_constraint : opt_constraint_and_name CHECK \"(\" expr \")\" constranit_state */\n/*! Production::    out_of_line_constraint : opt_constraint_and_name UNIQUE \"(\" sort_column_list \")\" opt_using_index_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Transaction Control and Other Operations\nDESCRIPTION: These productions define the syntax for starting transactions, autonomous transactions, and various other database operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    autonomous_transaction_pragma : PRAGMA AUTONOMOUS_TRANSACTION */\n\n/*! Production::    beginWork : BEGIN */\n\n/*! Production::    beginWork : BEGIN WORK */\n\n/*! Production::    begin_stmt : BEGI opt_hint_value opt_work */\n\n/*! Production::    begin_stmt : BEGI opt_work */\n\n/*! Production::    begin_stmt : START TRANSACTION opt_with_consistent_snapshot */\n\n/*! Production::    begin_stmt : START opt_hint_value TRANSACTION opt_with_consistent_snapshot */\n\n/*! Production::    binlogStatement : BINLOG STRING_LITERAL */\n\n/*! Production::    bitOperator : BIT_AND_OP */\n\n/*! Production::    bitOperator : BIT_OR_OP */\n\n/*! Production::    bitOperator : BIT_XOR_OP */\n\n/*! Production::    bitOperator : GREATER_SYMBOL GREATER_SYMBOL */\n\n/*! Production::    bitOperator : LESS_SYMBOL LESS_SYMBOL */\n\n/*! Production::    bit_expr : BOOL_VALUE */\n\n/*! Production::    bit_expr : INTERVAL expr date_unit \"+\" bit_expr */\n\n/*! Production::    bit_expr : bit_expr \"%\" bit_expr */\n\n/*! Production::    bit_expr : bit_expr \"&\" bit_expr */\n\n/*! Production::    bit_expr : bit_expr \"*\" bit_expr */\n\n/*! Production::    bit_expr : bit_expr \"+\" INTERVAL expr date_unit */\n\n/*! Production::    bit_expr : bit_expr \"+\" bit_expr */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parallel Execution Syntax\nDESCRIPTION: This snippet outlines the syntax for specifying parallel execution options in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_120\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    parallel_enable : PARALLEL_ENABLE \"(\" PARTITION argument BY partition_by \")\" */\n/*! Production::    parallel_enable : PARALLEL_ENABLE */\n/*! Production::    parallel_hint : INTNUM */\n/*! Production::    parallel_hint : qb_name_option relation_factor_in_hint opt_comma INTNUM */\n/*! Production::    parallel_option : NOPARALLEL */\n/*! Production::    parallel_option : PARALLEL opt_equal_mark INTNUM */\n```\n\n----------------------------------------\n\nTITLE: Defining Constraint Definitions in Oracle SQL\nDESCRIPTION: BNF production rules for defining various table constraints in Oracle SQL, including PRIMARY KEY, FOREIGN KEY, CHECK, and UNIQUE constraints with their associated options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_140\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    out_of_line_constraint : FOREIGN KEY \"(\" column_name_list \")\" references_clause opt_using_index_clause opt_enable_option */\n\n/*! Production::    out_of_line_constraint : PRIMARY KEY \"(\" column_name_list \")\" opt_using_index_clause */\n\n/*! Production::    out_of_line_constraint : constraint_and_name FOREIGN KEY \"(\" column_name_list \")\" references_clause opt_using_index_clause opt_enable_option */\n\n/*! Production::    out_of_line_constraint : constraint_and_name PRIMARY KEY \"(\" column_name_list \")\" opt_using_index_clause */\n\n/*! Production::    out_of_line_constraint : opt_constraint_and_name CHECK \"(\" expr \")\" constranit_state */\n\n/*! Production::    out_of_line_constraint : opt_constraint_and_name UNIQUE \"(\" sort_column_list \")\" opt_using_index_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Productions for String Handling\nDESCRIPTION: This snippet defines parser productions for string literals, string formats, and string-related master options for replication configuration.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_161\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    stringFormat : BINARY */\n\n/*! Production::    stringFormat : CHAR */\n\n/*! Production::    stringLiteral : stringLiteralLeft STRING_LITERALs */\n\n/*! Production::    stringLiteral : stringLiteralLeft opt_collateConfig */\n\n/*! Production::    stringLiteralLeft : START_NATIONAL_STRING_LITERAL */\n\n/*! Production::    stringLiteralLeft : opt_STRING_CHARSET_NAME STRING_LITERAL */\n\n/*! Production::    stringMasterOption : MASTER_BIND */\n\n/*! Production::    stringMasterOption : MASTER_HOST */\n\n/*! Production::    stringMasterOption : MASTER_LOG_FILE */\n\n/*! Production::    stringMasterOption : MASTER_PASSWORD */\n\n/*! Production::    stringMasterOption : MASTER_SSL_CA */\n\n/*! Production::    stringMasterOption : MASTER_SSL_CAPATH */\n\n/*! Production::    stringMasterOption : MASTER_SSL_CERT */\n\n/*! Production::    stringMasterOption : MASTER_SSL_CIPHER */\n\n/*! Production::    stringMasterOption : MASTER_SSL_CRL */\n\n/*! Production::    stringMasterOption : MASTER_SSL_CRLPATH */\n\n/*! Production::    stringMasterOption : MASTER_SSL_KEY */\n\n/*! Production::    stringMasterOption : MASTER_TLS_VERSION */\n\n/*! Production::    stringMasterOption : MASTER_USER */\n\n/*! Production::    stringMasterOption : RELAY_LOG_FILE */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Statistical Window Function Syntax\nDESCRIPTION: This snippet defines the syntax for statistical window functions like STDDEV, VARIANCE, and various regression functions. It specifies how these functions are used with the OVER clause and optional parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_194\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : STDDEV \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VARIANCE \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : REGR_AVGX \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_AVGY \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_COUNT \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n```\n\n----------------------------------------\n\nTITLE: Declaration Statement Productions in MySQL Grammar\nDESCRIPTION: Production rules for declaration statements including cursor declarations, condition handlers, and variable declarations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    declareCondition : DECLARE uid CONDITION FOR SQLSTATE opt_VALUE STRING_LITERAL */\n/*! Production::    declareCursor : DECLARE uid CURSOR FOR selectStatement */\n/*! Production::    declareVariable : DECLARE uidList dataType */\n/*! Production::    declareVariable : DECLARE uidList dataType DEFAULT expression */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Sequence Option Production Rules\nDESCRIPTION: This snippet defines production rules for SQL sequence options, including settings for caching, cycling, increment, and min/max values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_144\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sequence_option : CACHE simple_num */\n\n/*! Production::    sequence_option : CYCLE */\n\n/*! Production::    sequence_option : INCREMENT BY simple_num */\n\n/*! Production::    sequence_option : MAXVALUE simple_num */\n\n/*! Production::    sequence_option : MINVALUE simple_num */\n\n/*! Production::    sequence_option : NOCACHE */\n\n/*! Production::    sequence_option : NOCYCLE */\n\n/*! Production::    sequence_option : NOMAXVALUE */\n\n/*! Production::    sequence_option : NOMINVALUE */\n\n/*! Production::    sequence_option : NOORDER */\n\n/*! Production::    sequence_option : ORDER */\n\n/*! Production::    sequence_option : RESTART */\n\n/*! Production::    sequence_option : START WITH simple_num */\n\n/*! Production::    sequence_option_list : sequence_option */\n\n/*! Production::    sequence_option_list : sequence_option_list sequence_option */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for SHOW Statement\nDESCRIPTION: This snippet defines the grammar production for the SHOW statement, including variations for showing status, variables, and engines.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_145\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW opt_scope STATUS opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_scope VARIABLES opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_storage ENGINES */\n```\n\n----------------------------------------\n\nTITLE: Defining Date and Time Format Production Rules in MySQL Grammar\nDESCRIPTION: These rules define the syntax for various date and time formats in MySQL, including DATE, DATETIME, TIME, and TIMESTAMP.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_66\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    datetimeFormat : DATE */\n\n/*! Production::    datetimeFormat : DATETIME */\n\n/*! Production::    datetimeFormat : TIME */\n\n/*! Production::    datetime_type_i : DATE */\n\n/*! Production::    datetime_type_i : DATETIME */\n\n/*! Production::    datetime_type_i : TIME */\n\n/*! Production::    datetime_type_i : TIMESTAMP */\n```\n\n----------------------------------------\n\nTITLE: MySQL FETCH NEXT Production Rules\nDESCRIPTION: Production rules for FETCH NEXT/FIRST clauses in MySQL, defining different variations for working with result sets including row count and percentage-based fetching.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_70\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    fetch_next : fetch_next_count */\n\n/*! Production::    fetch_next : fetch_next_percent */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROW */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROW fetch_next */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROWS */\n\n/*! Production::    fetch_next_clause : OFFSET bit_expr ROWS fetch_next */\n\n/*! Production::    fetch_next_clause : fetch_next */\n\n/*! Production::    fetch_next_count : fetch_next_expr ONLY */\n\n/*! Production::    fetch_next_count : fetch_next_expr WITH TIES */\n\n/*! Production::    fetch_next_expr : FETCH FIRST ROW */\n\n/*! Production::    fetch_next_expr : FETCH FIRST ROWS */\n\n/*! Production::    fetch_next_expr : FETCH FIRST bit_expr ROW */\n\n/*! Production::    fetch_next_expr : FETCH FIRST bit_expr ROWS */\n\n/*! Production::    fetch_next_expr : FETCH NEXT ROW */\n\n/*! Production::    fetch_next_expr : FETCH NEXT ROWS */\n\n/*! Production::    fetch_next_expr : FETCH NEXT bit_expr ROW */\n\n/*! Production::    fetch_next_expr : FETCH NEXT bit_expr ROWS */\n\n/*! Production::    fetch_next_percent : fetch_next_percent_expr ONLY */\n\n/*! Production::    fetch_next_percent : fetch_next_percent_expr WITH TIES */\n\n/*! Production::    fetch_next_percent_expr : FETCH FIRST bit_expr PERCENT ROW */\n\n/*! Production::    fetch_next_percent_expr : FETCH FIRST bit_expr PERCENT ROWS */\n\n/*! Production::    fetch_next_percent_expr : FETCH NEXT bit_expr PERCENT ROW */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Optional Field\nDESCRIPTION: Specifies an empty production for an optional field in the grammar.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_75\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_opt : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: Cursor Operations Production Rules - SQL\nDESCRIPTION: SQL grammar production rules for cursor operations including opening, closing, and fetching from cursors. These rules define the syntax for cursor manipulation statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_45\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cursorStatement : CLOSE uid */\n\n/*! Production::    cursorStatement : FETCH FROM uid INTO uidList */\n\n/*! Production::    cursorStatement : FETCH NEXT FROM uid INTO uidList */\n\n/*! Production::    cursorStatement : FETCH uid INTO uidList */\n\n/*! Production::    cursorStatement : OPEN uid */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL System Privileges in Parser Grammar\nDESCRIPTION: A collection of production rules defining various system privileges in SQL. These rules specify the grammar for privileges like creating tables, views, procedures, and other database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_200\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    system_privilege : CREATE ANY TABLE */\n\n/*! Production::    system_privilege : CREATE ANY TRIGGER */\n\n/*! Production::    system_privilege : CREATE ANY TYPE */\n\n/*! Production::    system_privilege : CREATE ANY VIEW */\n\n/*! Production::    system_privilege : CREATE DATABASE LINK */\n\n/*! Production::    system_privilege : CREATE PROCEDURE */\n\n/*! Production::    system_privilege : CREATE PROFILE */\n\n/*! Production::    system_privilege : CREATE PUBLIC DATABASE LINK */\n\n/*! Production::    system_privilege : CREATE PUBLIC SYNONYM */\n\n/*! Production::    system_privilege : CREATE ROLE */\n\n/*! Production::    system_privilege : CREATE SEQUENCE */\n\n/*! Production::    system_privilege : CREATE SESSION */\n\n/*! Production::    system_privilege : CREATE SYNONYM */\n\n/*! Production::    system_privilege : CREATE TABLE */\n\n/*! Production::    system_privilege : CREATE TABLESPACE */\n\n/*! Production::    system_privilege : CREATE TRIGGER */\n\n/*! Production::    system_privilege : CREATE TYPE */\n\n/*! Production::    system_privilege : CREATE USER */\n\n/*! Production::    system_privilege : CREATE VIEW */\n\n/*! Production::    system_privilege : DELETE ANY TABLE */\n\n/*! Production::    system_privilege : DROP ANY INDEX */\n\n/*! Production::    system_privilege : DROP ANY OUTLINE */\n\n/*! Production::    system_privilege : DROP ANY PROCEDURE */\n\n/*! Production::    system_privilege : DROP ANY ROLE */\n\n/*! Production::    system_privilege : DROP ANY SEQUENCE */\n\n/*! Production::    system_privilege : DROP ANY SYNONYM */\n\n/*! Production::    system_privilege : DROP ANY TABLE */\n\n/*! Production::    system_privilege : DROP ANY TRIGGER */\n\n/*! Production::    system_privilege : DROP ANY TYPE */\n\n/*! Production::    system_privilege : DROP ANY VIEW */\n\n/*! Production::    system_privilege : DROP DATABASE LINK */\n\n/*! Production::    system_privilege : DROP PROFILE */\n\n/*! Production::    system_privilege : DROP PUBLIC SYNONYM */\n\n/*! Production::    system_privilege : DROP TABLESPACE */\n\n/*! Production::    system_privilege : DROP USER */\n\n/*! Production::    system_privilege : EXECUTE ANY PROCEDURE */\n\n/*! Production::    system_privilege : EXECUTE ANY TYPE */\n\n/*! Production::    system_privilege : EXEMPT REDACTION POLICY */\n\n/*! Production::    system_privilege : FLASHBACK ANY TABLE */\n\n/*! Production::    system_privilege : GRANT ANY OBJECT PRIVILEGE */\n\n/*! Production::    system_privilege : GRANT ANY PRIVILEGE */\n\n/*! Production::    system_privilege : GRANT ANY ROLE */\n\n/*! Production::    system_privilege : INSERT ANY TABLE */\n\n/*! Production::    system_privilege : LOCK ANY TABLE */\n\n/*! Production::    system_privilege : PURGE DBA_RECYCLEBIN */\n\n/*! Production::    system_privilege : SELECT ANY DICTIONARY */\n\n/*! Production::    system_privilege : SELECT ANY SEQUENCE */\n\n/*! Production::    system_privilege : SELECT ANY TABLE */\n\n/*! Production::    system_privilege : SHOW PROCESS */\n\n/*! Production::    system_privilege : SYSBACKUP */\n\n/*! Production::    system_privilege : SYSDBA */\n\n/*! Production::    system_privilege : SYSKM */\n\n/*! Production::    system_privilege : SYSOPER */\n\n/*! Production::    system_privilege : UNDER ANY TYPE */\n\n/*! Production::    system_privilege : UPDATE ANY TABLE */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TENANT Statement Syntax in OceanBase SQL\nDESCRIPTION: This snippet defines the grammar productions for the ALTER TENANT statement in OceanBase SQL. It covers operations such as renaming tenants, setting tenant options, and modifying global system variables.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_tenant_stmt : ALTER TENANT ALL opt_set opt_tenant_option_list opt_global_sys_vars_set */\n\n/*! Production::    alter_tenant_stmt : ALTER TENANT relation_name RENAME GLOBAL_NAME TO relation_name */\n\n/*! Production::    alter_tenant_stmt : ALTER TENANT relation_name lock_spec_mysql57 */\n\n/*! Production::    alter_tenant_stmt : ALTER TENANT relation_name opt_set opt_tenant_option_list opt_global_sys_vars_set */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for SHOW Statement\nDESCRIPTION: This snippet defines the grammar production for the SHOW statement, including variations for showing status, variables, and engines.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_145\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW opt_scope STATUS opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_scope VARIABLES opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_storage ENGINES */\n```\n\n----------------------------------------\n\nTITLE: Privilege Level Production Rules\nDESCRIPTION: Grammar rules defining privilege level syntax including user IDs and dotted identifiers\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_128\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    privilegeLevel : uid */\n/*! Production::    privilegeLevel : uid DOT STAR */\n/*! Production::    privilegeLevel : uid dottedId */\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Type Rules\nDESCRIPTION: Production rules defining the different categories of SQL statements, including administration, DDL, DML, empty statements, prepared statements, replication, transaction, and utility statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_161\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    sqlStatement : administrationStatement */\n\n/*! Production::    sqlStatement : ddlStatement */\n\n/*! Production::    sqlStatement : dmlStatement */\n\n/*! Production::    sqlStatement : emptyStatement */\n\n/*! Production::    sqlStatement : preparedStatement */\n\n/*! Production::    sqlStatement : replicationStatement */\n\n/*! Production::    sqlStatement : transactionStatement */\n\n/*! Production::    sqlStatement : utilityStatement */\n```\n\n----------------------------------------\n\nTITLE: CREATE TABLE Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating tables with various options, including column definitions, table options, partitioning, and creating tables from subqueries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_48\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : CREATE temporary_option TABLE relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option AS subquery opt_order_by opt_fetch_next */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : CREATE temporary_option TABLE relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option on_commit_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : CREATE temporary_option TABLE relation_factor AS subquery opt_order_by opt_fetch_next */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : CREATE temporary_option TABLE relation_factor partition_option AS subquery opt_order_by opt_fetch_next */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : CREATE temporary_option TABLE relation_factor table_option_list opt_partition_option AS subquery opt_order_by opt_fetch_next */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor \"(\" table_element_list \")\" opt_table_option_list opt_partition_option opt_as select_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor AS select_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor partition_option opt_as select_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor select_stmt */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_table_stmt : create_with_opt_hint temporary_option TABLE opt_if_not_exists relation_factor table_option_list opt_partition_option opt_as select_stmt */\n```\n\n----------------------------------------\n\nTITLE: Rendering ModelServiceConfig Configuration Details in JSX\nDESCRIPTION: This code snippet uses a custom React component 'ConfigDetail' to render the configuration details for ModelServiceConfig. It includes parameters for worker, API, and controller settings, along with their types, descriptions, and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/parameter_modelserviceconfig_20d67d.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ModelServiceConfig\",\n  \"description\": \"Model service configuration.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"worker\",\n      \"type\": \"ModelWorkerParameters\",\n      \"required\": false,\n      \"description\": \"Model worker configuration\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"modelworkerparameters configuration\",\n          \"url\": \"parameter_modelworkerparameters_3fd00b\"\n        }\n      ],\n      \"defaultValue\": \"ModelWorkerParameters\"\n    },\n    {\n      \"name\": \"api\",\n      \"type\": \"ModelAPIServerParameters\",\n      \"required\": false,\n      \"description\": \"Model API\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"modelapiserverparameters configuration\",\n          \"url\": \"parameter_modelapiserverparameters_763bec\"\n        }\n      ],\n      \"defaultValue\": \"ModelControllerParameters\"\n    },\n    {\n      \"name\": \"controller\",\n      \"type\": \"ModelControllerParameters\",\n      \"required\": false,\n      \"description\": \"Model controller\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"modelcontrollerparameters configuration\",\n          \"url\": \"parameter_modelcontrollerparameters_689309\"\n        }\n      ],\n      \"defaultValue\": \"ModelControllerParameters\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: SQL Distribution Method Productions\nDESCRIPTION: Grammar productions defining various distribution methods for data partitioning and distribution strategies.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_53\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    distribute_method : ALL */\n/*! Production::    distribute_method : BC2HOST */\n/*! Production::    distribute_method : BROADCAST */\n/*! Production::    distribute_method : HASH */\n/*! Production::    distribute_method : LIST */\n/*! Production::    distribute_method : LOCAL */\n/*! Production::    distribute_method : NONE */\n/*! Production::    distribute_method : PARTITION */\n/*! Production::    distribute_method : RANDOM */\n/*! Production::    distribute_method : RANDOM_LOCAL */\n/*! Production::    distribute_method : RANGE */\n```\n\n----------------------------------------\n\nTITLE: Creating View Statements in SQL\nDESCRIPTION: Defines syntax for creating and altering views with various options including algorithms and security settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_40\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_view_stmt : ALTER opt_algorithm opt_definer opt_sql_security VIEW view_name opt_column_list opt_table_id AS view_select_stmt opt_check_option\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_view_stmt : CREATE opt_replace VIEW view_name opt_column_list opt_table_id AS view_subquery view_with_opt\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_view_stmt : create_with_opt_hint opt_replace opt_algorithm opt_definer opt_sql_security VIEW view_name opt_column_list opt_table_id AS view_select_stmt opt_check_option\n```\n\n----------------------------------------\n\nTITLE: Bit Expression Productions\nDESCRIPTION: Grammar rules defining bit expressions and arithmetic operations between expressions\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    bit_expr : bit_expr \"-\" INTERVAL expr date_unit */\n/*! Production::    bit_expr : bit_expr \"-\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"/\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"^\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"|\" bit_expr */\n```\n\n----------------------------------------\n\nTITLE: Defining Column and Constraint Related Productions in SQL\nDESCRIPTION: This snippet defines productions for column definitions, constraints, and related concepts in SQL, including data types, default values, and various constraint types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    close_stmt : CLOSE pl_access_name */\n\n/*! Production::    colformat : DEFAULT */\n\n/*! Production::    colformat : DYNAMIC */\n\n/*! Production::    colformat : FIXED */\n\n/*! Production::    coll_type_def : assoc_array_type_def */\n\n/*! Production::    coll_type_def : nested_table_type_def */\n\n/*! Production::    coll_type_def : varray_type_def */\n\n/*! Production::    collateConfig : COLLATE collationName */\n\n/*! Production::    collation : COLLATE collation_name */\n\n/*! Production::    collationName : uid */\n\n/*! Production::    collation_name : NAME_OB */\n\n/*! Production::    collation_name : STRING */\n\n/*! Production::    collation_name : STRING_VALUE */\n\n/*! Production::    collation_name : identifier */\n\n/*! Production::    collectionOptions : LR_BRACKET STRING_LITERALList RR_BRACKET */\n\n/*! Production::    collection_predicate_expr : bit_expr IS A SET */\n\n/*! Production::    collection_predicate_expr : bit_expr IS EMPTY */\n\n/*! Production::    collection_predicate_expr : bit_expr IS NOT A SET */\n\n/*! Production::    collection_predicate_expr : bit_expr IS NOT EMPTY */\n\n/*! Production::    collection_predicate_expr : bit_expr MEMBER opt_of bit_expr */\n\n/*! Production::    collection_predicate_expr : bit_expr NOT MEMBER opt_of bit_expr */\n\n/*! Production::    collection_predicate_expr : bit_expr NOT SUBMULTISET opt_of bit_expr */\n\n/*! Production::    collection_predicate_expr : bit_expr SUBMULTISET opt_of bit_expr */\n\n/*! Production::    collection_type_def : TYPE type_name IS coll_type_def */\n\n/*! Production::    column : identifier */\n\n/*! Production::    columnConstraint : AS LR_BRACKET expression RR_BRACKET opt_generatedType */\n\n/*! Production::    columnConstraint : AUTO_INCREMENT */\n\n/*! Production::    columnConstraint : COLLATE collationName */\n\n/*! Production::    columnConstraint : COLUMN_FORMAT colformat */\n\n/*! Production::    columnConstraint : COMMENT STRING_LITERAL */\n\n/*! Production::    columnConstraint : DEFAULT defaultValue */\n\n/*! Production::    columnConstraint : GENERATED ALWAYS AS LR_BRACKET expression RR_BRACKET opt_generatedType */\n\n/*! Production::    columnConstraint : KEY */\n\n/*! Production::    columnConstraint : ON UPDATE currentTimestamp */\n\n/*! Production::    columnConstraint : PRIMARY KEY */\n\n/*! Production::    columnConstraint : SERIAL DEFAULT VALUE */\n\n/*! Production::    columnConstraint : STORAGE storageval */\n\n/*! Production::    columnConstraint : UNIQUE */\n\n/*! Production::    columnConstraint : UNIQUE KEY */\n\n/*! Production::    columnConstraint : nullNotnull */\n\n/*! Production::    columnConstraint : opt_tableConstraint CHECK LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    columnConstraint : referenceDefinition */\n\n/*! Production::    columnConstraints : columnConstraint */\n\n/*! Production::    columnConstraints : columnConstraint columnConstraints */\n\n/*! Production::    columnDefinition : dataType opt_columnConstraints */\n\n/*! Production::    columnOrFields : COLUMNS */\n\n/*! Production::    columnOrFields : FIELDS */\n\n/*! Production::    column_alias_name : column_name */\n\n/*! Production::    column_attribute : AUTO_INCREMENT */\n\n/*! Production::    column_attribute : COMMENT STRING_VALUE */\n\n/*! Production::    column_attribute : DEFAULT bit_expr */\n\n/*! Production::    column_attribute : DEFAULT now_or_signed_literal */\n\n/*! Production::    column_attribute : ID INTNUM */\n\n/*! Production::    column_attribute : NULLX */\n\n/*! Production::    column_attribute : ON UPDATE cur_timestamp_func */\n\n/*! Production::    column_attribute : ORIG_DEFAULT now_or_signed_literal */\n\n/*! Production::    column_attribute : PRIMARY KEY */\n\n/*! Production::    column_attribute : SRID INTNUM */\n\n/*! Production::    column_attribute : UNIQUE */\n\n/*! Production::    column_attribute : UNIQUE KEY */\n\n/*! Production::    column_attribute : constraint_definition */\n\n/*! Production::    column_attribute : not NULLX */\n\n/*! Production::    column_attribute : opt_constraint_and_name CHECK \"(\" expr \")\" constranit_state */\n\n/*! Production::    column_attribute : opt_primary KEY */\n```\n\n----------------------------------------\n\nTITLE: Tablegroup ALTER Productions\nDESCRIPTION: Grammar production rules for ALTER TABLEGROUP statements for managing table groups including adding tables and modifying partitions\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD TABLE table_list */\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD opt_table table_list */\n/*! Production::    alter_tablegroup_stmt : ALTER TABLEGROUP relation_name ADD table_list */\n```\n\n----------------------------------------\n\nTITLE: SQL Throttling Metric Rules\nDESCRIPTION: Production rules defining SQL throttling metrics and comparisons, including CPU, IO, logical reads, network, queue time, and response time metrics with comparison operators.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_164\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    sql_throttle_metric : CPU COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_metric : IO COMP_EQ INTNUM */\n\n/*! Production::    sql_throttle_metric : LOGICAL_READS COMP_EQ INTNUM */\n\n/*! Production::    sql_throttle_metric : NETWORK COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_metric : QUEUE_TIME COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_metric : RT COMP_EQ int_or_decimal */\n\n/*! Production::    sql_throttle_one_or_more_metrics : sql_throttle_metric */\n\n/*! Production::    sql_throttle_one_or_more_metrics : sql_throttle_metric sql_throttle_one_or_more_metrics */\n```\n\n----------------------------------------\n\nTITLE: Basic Data Type Production Rules\nDESCRIPTION: Grammar rules for basic SQL data types including numeric types, character types and binary types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_48\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dataType : DOUBLE opt_PRECISION opt_lengthTwoDimension opt_signOrUnsign opt_ZEROFILL */\n/*! Production::    dataType : LONG VARBINARY */\n/*! Production::    dataType : LONG VARCHAR opt_BINARY opt_dataTypeCharsetAssign opt_collateConfig */\n/*! Production::    dataType : NATIONAL CHAR VARYING opt_lengthOneDimension opt_BINARY */\n/*! Production::    dataType : REAL opt_lengthTwoDimension opt_signOrUnsign opt_ZEROFILL */\n```\n\n----------------------------------------\n\nTITLE: Defining Database Engine Production Rules in SQL\nDESCRIPTION: This snippet defines production rules for various database engine names including INNODB, MEMORY, MRG_MYISAM, MYISAM, NDB, NDBCLUSTER, PERFORMANCE_SCHEMA, and TOKUDB.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_73\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    engineName : INNODB */\n\n/*! Production::    engineName : MEMORY */\n\n/*! Production::    engineName : MRG_MYISAM */\n\n/*! Production::    engineName : MYISAM */\n\n/*! Production::    engineName : NDB */\n\n/*! Production::    engineName : NDBCLUSTER */\n\n/*! Production::    engineName : PERFORMANCE_SCHEMA */\n\n/*! Production::    engineName : REVERSE_QUOTE_ID */\n\n/*! Production::    engineName : STRING_LITERAL */\n\n/*! Production::    engineName : TOKUDB */\n```\n\n----------------------------------------\n\nTITLE: MySQL Extract and Extension Production Rules\nDESCRIPTION: Production rules for EXTRACT function syntax that extracts date parts from expressions, and extension syntax for column lists.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_69\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    extension : \"(\" column_name_list \")\" */\n\n/*! Production::    extract_function : EXTRACT \"(\" date_unit_for_extract FROM bit_expr \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining Zone Action Production Rules in SQL Grammar\nDESCRIPTION: Grammar production rules for zone actions including DELETE, FORCE STOP, ISOLATE, START, and STOP operations. These define management operations that can be performed on zones in a database system.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_226\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    zone_action : DELETE */\n\n/*! Production::    zone_action : FORCE STOP */\n\n/*! Production::    zone_action : ISOLATE */\n\n/*! Production::    zone_action : START */\n\n/*! Production::    zone_action : STOP */\n\n/*! Production::    zone_desc : ZONE opt_equal_mark relation_name_or_string */\n\n/*! Production::    zone_list : STRING_VALUE */\n\n/*! Production::    zone_list : zone_list opt_comma STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Collection and Predicate Grammar Rules\nDESCRIPTION: Production rules for collection-related operations and predicates, including set operations, empty checks, and membership tests.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    collection_predicate_expr : bit_expr IS A SET */\n```\n\n----------------------------------------\n\nTITLE: Oracle Unreserved Keywords Definitions\nDESCRIPTION: Comprehensive list of Oracle SQL unreserved keywords used in the parser, including database objects, operations, and data types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_103\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    oracle_unreserved_keyword : FOREIGN */\n/*! Production::    oracle_unreserved_keyword : FORTRAN */\n/*! Production::    oracle_unreserved_keyword : FOUND */\n/* ... additional keywords ... */\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous SET Operation Production Rules in SQL\nDESCRIPTION: Grammar production rules for special SET operations and options including SET_VAR and various SETTP options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_133\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_var_op : SET_VAR */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    settp_option : ERROR_CODE opt_equal_mark INTNUM */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    settp_option : FREQUENCY opt_equal_mark INTNUM */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    settp_option : MATCH opt_equal_mark INTNUM */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    settp_option : OCCUR opt_equal_mark INTNUM */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    settp_option : TP_NAME opt_equal_mark relation_name_or_string */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    settp_option : TP_NO opt_equal_mark INTNUM */\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Structure and Information Rules\nDESCRIPTION: Production rules for SQL statement structure, including statement termination, diagnostic information, and information item specifications. These rules define how statements are composed and how information about them is referenced.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_167\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    statement : sqlStatement opt_MINUSMINUS opt_SEMI */\n\n/*! Production::    statement_information_item : QUESTIONMARK COMP_EQ statement_information_item_name */\n\n/*! Production::    statement_information_item : USER_VARIABLE COMP_EQ statement_information_item_name */\n\n/*! Production::    statement_information_item : diagnostics_info_ref COMP_EQ statement_information_item_name */\n\n/*! Production::    statement_information_item_list : statement_information_item */\n\n/*! Production::    statement_information_item_list : statement_information_item_list \",\" statement_information_item */\n\n/*! Production::    statement_information_item_name : NUMBER */\n\n/*! Production::    statement_information_item_name : ROW_COUNT */\n```\n\n----------------------------------------\n\nTITLE: Defining Join Types in Oracle SQL\nDESCRIPTION: BNF production rules for various types of outer joins in Oracle SQL syntax, including LEFT, RIGHT, and FULL joins with optional OUTER keyword.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_141\n\nLANGUAGE: BNF\nCODE:\n```\n/*! Production::    outer_join_type : FULL join_outer */\n\n/*! Production::    outer_join_type : FULL opt_outer JOIN */\n\n/*! Production::    outer_join_type : LEFT join_outer */\n\n/*! Production::    outer_join_type : LEFT opt_outer JOIN */\n\n/*! Production::    outer_join_type : RIGHT join_outer */\n\n/*! Production::    outer_join_type : RIGHT opt_outer JOIN */\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for AWEL in Python\nDESCRIPTION: This snippet imports the necessary classes from dbgpt for creating a DAG and using HTTP triggers and operators.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/get_started.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt._private.pydantic import BaseModel, Field\nfrom dbgpt.core.awel import DAG, HttpTrigger, MapOperator\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Field or Variable Reference\nDESCRIPTION: Specifies that a field or variable can be represented by a column definition reference in the grammar.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_or_vars : column_definition_ref */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords (U)\nDESCRIPTION: This code snippet defines unreserved SQL keywords starting with the letter U. These keywords can be used both as SQL syntax elements and as identifiers without requiring quotes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_186\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : UNBOUNDED */\n\n/*! Production::    unreserved_keyword_normal : UNCOMMITTED */\n\n/*! Production::    unreserved_keyword_normal : UNDEFINED */\n\n/*! Production::    unreserved_keyword_normal : UNDO */\n\n/*! Production::    unreserved_keyword_normal : UNDOFILE */\n\n/*! Production::    unreserved_keyword_normal : UNDO_BUFFER_SIZE */\n\n/*! Production::    unreserved_keyword_normal : UNICODE */\n```\n\n----------------------------------------\n\nTITLE: Current Timestamp Alternative Syntax Grammar Rules in SQL\nDESCRIPTION: Additional grammar production rules for current timestamp functions with alternative syntax and naming conventions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_58\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    currentTimestamp : NOW LR_BRACKET opt_decimalLiteral RR_BRACKET */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    currentTimestamp : currentTimestampKeyword */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    currentTimestamp : currentTimestampKeyword LR_BRACKET opt_decimalLiteral RR_BRACKET */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    currentTimestampKeyword : CURRENT_TIMESTAMP */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    currentTimestampKeyword : LOCALTIME */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    currentTimestampKeyword : LOCALTIMESTAMP */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table Option\nDESCRIPTION: Defines production rules for table_option in SQL grammar. These rules specify configuration options for tables, including storage, performance, and behavior settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_178\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_option : AUTO_INCREMENT opt_equal_mark int_or_decimal */\n\n/*! Production::    table_option : AUTO_INCREMENT_MODE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : AVG_ROW_LENGTH opt_equal_mark INTNUM */\n\n/*! Production::    table_option : BLOCK_SIZE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : CHECKSUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : COMMENT opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : COMPRESSION opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : DELAY_KEY_WRITE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : DISABLE ROW MOVEMENT */\n\n/*! Production::    table_option : DUPLICATE_SCOPE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : ENABLE ROW MOVEMENT */\n\n/*! Production::    table_option : ENABLE_EXTENDED_ROWID opt_equal_mark BOOL_VALUE */\n\n/*! Production::    table_option : ENGINE_ opt_equal_mark relation_name_or_string */\n\n/*! Production::    table_option : EXPIRE_INFO opt_equal_mark \"(\" bit_expr \")\" */\n\n/*! Production::    table_option : EXPIRE_INFO opt_equal_mark \"(\" expr \")\" */\n\n/*! Production::    table_option : LOCALITY opt_equal_mark locality_name opt_force */\n\n/*! Production::    table_option : MAX_USED_PART_ID opt_equal_mark INTNUM */\n\n/*! Production::    table_option : PCTFREE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n\n/*! Production::    table_option : PROGRESSIVE_MERGE_NUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : REPLICA_NUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : ROW_FORMAT opt_equal_mark row_format_option */\n\n/*! Production::    table_option : STORAGE_FORMAT_VERSION opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLEGROUP opt_equal_mark relation_name_or_string */\n\n/*! Production::    table_option : TABLESPACE tablespace */\n\n/*! Production::    table_option : TABLET_SIZE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLE_ID opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLE_MODE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : USE_BLOOM_FILTER opt_equal_mark BOOL_VALUE */\n\n/*! Production::    table_option : compress_option */\n\n/*! Production::    table_option : opt_default_mark COLLATE opt_equal_mark collation_name */\n\n/*! Production::    table_option : opt_default_mark charset_key opt_equal_mark charset_name */\n\n/*! Production::    table_option : parallel_option */\n\n/*! Production::    table_option : physical_attributes_option */\n\n/*! Production::    table_option : read_only_or_write */\n```\n\n----------------------------------------\n\nTITLE: MySQL Function Name Base Definitions\nDESCRIPTION: Defines base function names for MySQL time, string and system operations including TIMESTAMPADD, UNIX_TIMESTAMP, UUID and other core functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_69\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    functionNameBase : TIMESTAMPADD */\n/*! Production::    functionNameBase : TIMESTAMPDIFF */\n/*! Production::    functionNameBase : TIME_FORMAT */\n/*! Production::    functionNameBase : TIME_TO_SEC */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Index Grammar Rules\nDESCRIPTION: Specifies grammar production rules for table indexes, including syntax for naming, referencing, and listing table indexes. These rules define how indexes are created and referenced in Oracle SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_171\n\nLANGUAGE: Oracle SQL\nCODE:\n```\n/*! Production::    tableIndexes : tableName */\n\n/*! Production::    tableIndexes : tableName opt_tableConstraintFormat LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    tableIndexesList : tableIndexes */\n\n/*! Production::    tableIndexesList : tableIndexes COMMA tableIndexesList */\n\n/*! Production::    tableName : fullId */\n```\n\n----------------------------------------\n\nTITLE: SQL Predicate Grammar Productions\nDESCRIPTION: Grammar rules defining valid syntax for SQL predicates including comparisons, BETWEEN, IN, LIKE, REGEXP and other predicate expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_126\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    predicate : bit_expr */\n/*! Production::    predicate : bit_expr BETWEEN bit_expr AND bit_expr */\n/*! Production::    predicate : bit_expr IN in_expr */\n/*! Production::    predicate : bit_expr LIKE bit_expr */\n/*! Production::    predicate : predicate comparisonOperator predicate */\n```\n\n----------------------------------------\n\nTITLE: Running the Print Stream Data Example\nDESCRIPTION: Bash command to execute the input_operator_print_stream_data.py script using Poetry.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/basic_syntax/2.8_input_operator.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/input_operator_print_stream_data.py\n```\n\n----------------------------------------\n\nTITLE: SQL Partition Grammar Rules\nDESCRIPTION: Grammar productions for hash and range partitioning syntax, including partition elements, options, and subpartition definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_87\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    hash_partition_option : PARTITION BY HASH \"(\" column_name_list \")\" subpartition_option opt_partitions opt_hash_partition_list opt_tablespace_option opt_compress_option */\n/*! Production::    hash_partition_element : PARTITION ID INTNUM TABLESPACE tablespace compress_option subpartition_list */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER OUTLINE Grammar Rules in SQL\nDESCRIPTION: This snippet defines a grammar production for altering an outline, which is used to add an explainable statement to an existing outline.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_outline_stmt : ALTER OUTLINE relation_name ADD explainable_stmt opt_outline_target */\n```\n\n----------------------------------------\n\nTITLE: Data Type Grammar Productions\nDESCRIPTION: SQL grammar productions for various data types including numeric, string, temporal, and spatial types. Includes rules for precision, scale, character sets, and other type modifiers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_62\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dataType : DOUBLE opt_PRECISION opt_lengthTwoDimension opt_signOrUnsign opt_ZEROFILL */\n/*! Production::    dataType : LONG VARBINARY */\n/*! Production::    dataType : LONG VARCHAR opt_BINARY opt_dataTypeCharsetAssign opt_collateConfig */\n/*! Production::    dataType : dataTypeDecimal opt_lengthTwoOptionalDimension opt_signOrUnsign opt_ZEROFILL */\n/*! Production::    dataType : dataTypeGis */\n/*! Production::    dataType : dataTypeIntType opt_lengthOneDimension opt_signOrUnsign opt_ZEROFILL */\n```\n\n----------------------------------------\n\nTITLE: SQL Index Hint Productions\nDESCRIPTION: Grammar rules for index hints that influence the query optimizer, including FORCE, IGNORE, and USE directives.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_96\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    indexHint : indexHintAction indexHintKeyFormat FOR indexHintType LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    indexHint : indexHintAction indexHintKeyFormat LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    indexHintAction : FORCE */\n\n/*! Production::    indexHintAction : IGNORE */\n\n/*! Production::    indexHintAction : USE */\n\n/*! Production::    indexHintKeyFormat : INDEX */\n\n/*! Production::    indexHintKeyFormat : KEY */\n\n/*! Production::    indexHintType : GROUP BY */\n\n/*! Production::    indexHintType : JOIN */\n\n/*! Production::    indexHintType : ORDER BY */\n\n/*! Production::    indexHints : indexHint */\n\n/*! Production::    indexHints : indexHint COMMA indexHints */\n```\n\n----------------------------------------\n\nTITLE: Parsing SQL Select Statements\nDESCRIPTION: These production rules define the structure of SQL SELECT statements, including options for hints, query expressions, and various clauses like WHERE, GROUP BY, and HAVING.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_156\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simple_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where opt_groupby opt_having */\n\n/*! Production::    simple_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where opt_groupby opt_having opt_named_windows */\n\n/*! Production::    simple_select_with_order_and_limit : simple_select opt_order_by limit_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Elements in Grammar Production Rules\nDESCRIPTION: Specifies grammar production rules for table elements including column definitions, constraints, and indexes. These rules define the structure and syntax for creating table components in Oracle SQL CREATE TABLE statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_174\n\nLANGUAGE: Oracle SQL\nCODE:\n```\n/*! Production::    table_element : CONSTRAINT opt_constraint_name PRIMARY KEY opt_index_using_algorithm \"(\" column_name_list \")\" opt_index_using_algorithm opt_comment */\n\n/*! Production::    table_element : CONSTRAINT opt_constraint_name UNIQUE opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : FOREIGN KEY opt_index_name \"(\" column_name_list \")\" REFERENCES relation_factor \"(\" column_name_list \")\" opt_match_option opt_reference_option_list */\n\n/*! Production::    table_element : INDEX index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : INDEX opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : PRIMARY KEY opt_index_using_algorithm \"(\" column_name_list \")\" opt_index_using_algorithm opt_comment */\n\n/*! Production::    table_element : SPATIAL opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list */\n\n/*! Production::    table_element : UNIQUE opt_key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    table_element : column_definition */\n\n/*! Production::    table_element : constraint_definition */\n\n/*! Production::    table_element : key_or_index opt_index_name opt_index_using_algorithm \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option */\n\n/*! Production::    table_element : out_of_line_constraint */\n\n/*! Production::    table_element_access_list : \"(\" table_index \")\" */\n\n/*! Production::    table_element_access_list : table_element_access_list \"(\" table_index \")\" */\n\n/*! Production::    table_element_list : table_element */\n\n/*! Production::    table_element_list : table_element_list \",\" table_element */\n```\n\n----------------------------------------\n\nTITLE: Window Function Grammar Rules in SQL\nDESCRIPTION: Defines the syntax for window functions in SQL. These production rules specify how window functions like RANK, ROW_NUMBER, LAG, LEAD, and various aggregations should be structured when used with OVER clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_220\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : CUME_DIST \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : DENSE_RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : DENSE_RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : FIRST_VALUE win_fun_first_last_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : FIRST_VALUE win_fun_first_last_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : GROUP_CONCAT \"(\" opt_distinct expr_list opt_order_by opt_separator \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : HYBRID_HIST \"(\" bit_expr \",\" bit_expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : JSON_ARRAYAGG \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : JSON_OBJECTAGG \"(\" expr \",\" expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LAG win_fun_lead_lag_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LAG win_fun_lead_lag_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LAST_VALUE win_fun_first_last_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LAST_VALUE win_fun_first_last_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LEAD win_fun_lead_lag_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LEAD win_fun_lead_lag_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LISTAGG \"(\" opt_all expr_list opt_separator \")\" WITHIN GROUP \"(\" order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LISTAGG \"(\" opt_distinct expr_list opt_order_by opt_separator \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : MAX \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MAX \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MAX \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : MIN \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MIN \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : MIN \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : NTH_VALUE \"(\" bit_expr \",\" bit_expr \")\" opt_from_first_or_last opt_respect_or_ignore_nulls OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : NTH_VALUE \"(\" expr \",\" expr \")\" opt_from_first_or_last opt_respect_or_ignore_nulls OVER new_generalized_window_clause */\n\n/*! Production::    window_function : NTILE \"(\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : NTILE \"(\" expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : PERCENT_RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : PERCENT_RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : RANK \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : RANK \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : RATIO_TO_REPORT \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_AVGX \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_AVGY \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_COUNT \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_INTERCEPT \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_R2 \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SLOPE \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SXX \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SXY \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : REGR_SYY \"(\" opt_distinct_or_all bit_expr \",\" bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : ROW_NUMBER \"(\" \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : ROW_NUMBER \"(\" \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STD \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : STDDEV \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : STDDEV_POP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV_POP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : STDDEV_SAMP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : STDDEV_SAMP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : SUM \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : SUM \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : SUM \"(\" opt_distinct_or_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : TOP_K_FRE_HIST \"(\" bit_expr \",\" bit_expr \",\" bit_expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VARIANCE \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VARIANCE \"(\" opt_distinct_or_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : VARIANCE \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : VAR_POP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VAR_POP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : VAR_SAMP \"(\" opt_all expr \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : VAR_SAMP \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Vector Store Parameters in JSX/MDX\nDESCRIPTION: React/MDX component that documents the configuration parameters for a Chroma vector store, including user authentication, persistence settings, and collection metadata options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/vector_store/chroma_store_chromavectorconfig_16224f.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ChromaVectorConfig\",\n  \"description\": \"Chroma vector store config.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"user\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The user of vector store, if not set, will use the default user.\"\n    },\n    {\n      \"name\": \"password\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The password of vector store, if not set, will use the default password.\"\n    },\n    {\n      \"name\": \"persist_path\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The persist path of vector store.\"\n    },\n    {\n      \"name\": \"collection_metadata\",\n      \"type\": \"object\",\n      \"required\": false,\n      \"description\": \"The metadata of collection.\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Merge Statement Production Rules\nDESCRIPTION: SQL grammar production rules defining the syntax for MERGE statements including update and insert clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_106\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause merge_insert_clause */\n\n/*! Production::    merge_update_clause : WHEN MATCHED THEN UPDATE SET update_asgn_list opt_where opt_merge_update_delete */\n```\n\n----------------------------------------\n\nTITLE: SQL Function Expression Grammar Definitions\nDESCRIPTION: A comprehensive collection of grammar production rules for SQL function expressions. These rules define the syntax for a wide range of SQL functions including aggregate functions (MAX, MIN, SUM), date/time functions (YEAR, MONTH, DAY), string manipulation functions, geometric functions (POINT, POLYGON), and many other specialized functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_81\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_expr : MAX \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : MICROSECOND \"(\" expr \")\" */\n\n/*! Production::    func_expr : MIN \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : MINUTE \"(\" expr \")\" */\n\n/*! Production::    func_expr : MOD \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : MONTH \"(\" expr \")\" */\n\n/*! Production::    func_expr : MULTILINESTRING \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : MULTIPOINT \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : MULTIPOLYGON \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : POINT \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : POLYGON \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : POSITION \"(\" bit_expr IN expr \")\" */\n\n/*! Production::    func_expr : QUARTER \"(\" expr \")\" */\n\n/*! Production::    func_expr : SECOND \"(\" expr \")\" */\n\n/*! Production::    func_expr : STD \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV_POP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : STDDEV_SAMP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : SUBDATE \"(\" date_params \")\" */\n\n/*! Production::    func_expr : SUBDATE \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : SUM \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : TIME \"(\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMP \"(\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMP \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : TIMESTAMPADD \"(\" timestamp_params \")\" */\n\n/*! Production::    func_expr : TIMESTAMPDIFF \"(\" timestamp_params \")\" */\n\n/*! Production::    func_expr : TOP_K_FRE_HIST \"(\" bit_expr \",\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    func_expr : TRIM \"(\" parameterized_trim \")\" */\n\n/*! Production::    func_expr : VALUES \"(\" column_definition_ref \")\" */\n\n/*! Production::    func_expr : VARIANCE \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : VAR_POP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : VAR_SAMP \"(\" opt_all expr \")\" */\n\n/*! Production::    func_expr : WEEK \"(\" expr \")\" */\n\n/*! Production::    func_expr : WEEK \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr \",\" INTNUM \",\" INTNUM \",\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr AS BINARY ws_nweights \")\" */\n\n/*! Production::    func_expr : WEIGHT_STRING \"(\" expr opt_ws_as_char opt_ws_levels \")\" */\n\n/*! Production::    func_expr : YEAR \"(\" expr \")\" */\n\n/*! Production::    func_expr : cur_date_func */\n\n/*! Production::    func_expr : cur_time_func */\n\n/*! Production::    func_expr : cur_timestamp_func */\n\n/*! Production::    func_expr : function_name \"(\" opt_expr_as_list \")\" */\n\n/*! Production::    func_expr : json_value_expr */\n\n/*! Production::    func_expr : relation_name \".\" function_name \"(\" opt_expr_as_list \")\" */\n\n/*! Production::    func_expr : substr_or_substring \"(\" substr_params \")\" */\n\n/*! Production::    func_expr : sys_interval_func */\n\n/*! Production::    func_expr : sysdate_func */\n\n/*! Production::    func_expr : utc_date_func */\n\n/*! Production::    func_expr : utc_time_func */\n\n/*! Production::    func_expr : utc_timestamp_func */\n\n/*! Production::    func_name : identifier */\n\n/*! Production::    func_param : bit_expr */\n\n/*! Production::    func_param : func_param_with_assign */\n\n/*! Production::    func_param_list : func_param */\n\n/*! Production::    func_param_list : func_param_list \",\" func_param */\n\n/*! Production::    func_param_with_assign : var_name PARAM_ASSIGN_OPERATOR bit_expr */\n\n/*! Production::    functionArg : expression */\n\n/*! Production::    functionArgs : functionArg */\n\n/*! Production::    functionArgs : functionArg COMMA functionArgs */\n\n/*! Production::    functionCall : aggregateWindowedFunction */\n\n/*! Production::    functionCall : fullId LR_BRACKET opt_functionArgs RR_BRACKET */\n\n/*! Production::    functionCall : passwordFunctionClause */\n\n/*! Production::    functionCall : scalarFunctionName LR_BRACKET opt_functionArgs RR_BRACKET */\n\n/*! Production::    functionCall : specificFunction */\n\n/*! Production::    functionNameBase : ABS */\n\n/*! Production::    functionNameBase : ACOS */\n\n/*! Production::    functionNameBase : ADDDATE */\n\n/*! Production::    functionNameBase : ADDTIME */\n\n/*! Production::    functionNameBase : AES_DECRYPT */\n\n/*! Production::    functionNameBase : AES_ENCRYPT */\n\n/*! Production::    functionNameBase : AREA */\n\n/*! Production::    functionNameBase : ASBINARY */\n\n/*! Production::    functionNameBase : ASIN */\n\n/*! Production::    functionNameBase : ASTEXT */\n\n/*! Production::    functionNameBase : ASWKB */\n\n/*! Production::    functionNameBase : ASWKT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_DECRYPT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_DERIVE */\n\n/*! Production::    functionNameBase : ASYMMETRIC_ENCRYPT */\n\n/*! Production::    functionNameBase : ASYMMETRIC_SIGN */\n\n/*! Production::    functionNameBase : ASYMMETRIC_VERIFY */\n\n/*! Production::    functionNameBase : ATAN */\n\n/*! Production::    functionNameBase : ATAN2 */\n\n/*! Production::    functionNameBase : BENCHMARK */\n\n/*! Production::    functionNameBase : BIN */\n\n/*! Production::    functionNameBase : BIT_COUNT */\n\n/*! Production::    functionNameBase : BIT_LENGTH */\n\n/*! Production::    functionNameBase : BUFFER */\n\n/*! Production::    functionNameBase : CEIL */\n\n/*! Production::    functionNameBase : CEILING */\n\n/*! Production::    functionNameBase : CENTROID */\n\n/*! Production::    functionNameBase : CHARACTER_LENGTH */\n\n/*! Production::    functionNameBase : CHARSET */\n\n/*! Production::    functionNameBase : CHAR_LENGTH */\n\n/*! Production::    functionNameBase : COERCIBILITY */\n\n/*! Production::    functionNameBase : COLLATION */\n\n/*! Production::    functionNameBase : COMPRESS */\n\n/*! Production::    functionNameBase : CONCAT */\n\n/*! Production::    functionNameBase : CONCAT_WS */\n\n/*! Production::    functionNameBase : CONNECTION_ID */\n\n/*! Production::    functionNameBase : CONV */\n\n/*! Production::    functionNameBase : CONVERT_TZ */\n\n/*! Production::    functionNameBase : COS */\n\n/*! Production::    functionNameBase : COT */\n\n/*! Production::    functionNameBase : COUNT */\n\n/*! Production::    functionNameBase : CRC32 */\n\n/*! Production::    functionNameBase : CREATE_ASYMMETRIC_PRIV_KEY */\n\n/*! Production::    functionNameBase : CREATE_ASYMMETRIC_PUB_KEY */\n\n/*! Production::    functionNameBase : CREATE_DH_PARAMETERS */\n\n/*! Production::    functionNameBase : CREATE_DIGEST */\n\n/*! Production::    functionNameBase : CROSSES */\n\n/*! Production::    functionNameBase : DATABASE */\n\n/*! Production::    functionNameBase : DATE */\n\n/*! Production::    functionNameBase : DATEDIFF */\n\n/*! Production::    functionNameBase : DATE_FORMAT */\n\n/*! Production::    functionNameBase : DAY */\n\n/*! Production::    functionNameBase : DAYNAME */\n\n/*! Production::    functionNameBase : DAYOFMONTH */\n\n/*! Production::    functionNameBase : DAYOFWEEK */\n\n/*! Production::    functionNameBase : DAYOFYEAR */\n\n/*! Production::    functionNameBase : DECODE */\n\n/*! Production::    functionNameBase : DEGREES */\n\n/*! Production::    functionNameBase : DES_DECRYPT */\n\n/*! Production::    functionNameBase : DES_ENCRYPT */\n\n/*! Production::    functionNameBase : DIMENSION */\n\n/*! Production::    functionNameBase : DISJOINT */\n\n/*! Production::    functionNameBase : ELT */\n\n/*! Production::    functionNameBase : ENCODE */\n\n/*! Production::    functionNameBase : ENCRYPT */\n\n/*! Production::    functionNameBase : ENDPOINT */\n\n/*! Production::    functionNameBase : ENVELOPE */\n\n/*! Production::    functionNameBase : EQUALS */\n\n/*! Production::    functionNameBase : EXP */\n\n/*! Production::    functionNameBase : EXPORT_SET */\n\n/*! Production::    functionNameBase : EXTERIORRING */\n\n/*! Production::    functionNameBase : EXTRACTVALUE */\n\n/*! Production::    functionNameBase : FIELD */\n\n/*! Production::    functionNameBase : FIND_IN_SET */\n\n/*! Production::    functionNameBase : FLOOR */\n\n/*! Production::    functionNameBase : FORMAT */\n\n/*! Production::    functionNameBase : FOUND_ROWS */\n\n/*! Production::    functionNameBase : FROM_BASE64 */\n\n/*! Production::    functionNameBase : FROM_DAYS */\n\n/*! Production::    functionNameBase : FROM_UNIXTIME */\n\n/*! Production::    functionNameBase : GEOMCOLLFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMCOLLFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTION */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTIONFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMETRYCOLLECTIONFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMETRYFROMWKB */\n\n/*! Production::    functionNameBase : GEOMETRYN */\n\n/*! Production::    functionNameBase : GEOMETRYTYPE */\n\n/*! Production::    functionNameBase : GEOMFROMTEXT */\n\n/*! Production::    functionNameBase : GEOMFROMWKB */\n\n/*! Production::    functionNameBase : GET_FORMAT */\n\n/*! Production::    functionNameBase : GET_LOCK */\n\n/*! Production::    functionNameBase : GLENGTH */\n\n/*! Production::    functionNameBase : GREATEST */\n\n/*! Production::    functionNameBase : GTID_SUBSET */\n\n/*! Production::    functionNameBase : GTID_SUBTRACT */\n\n/*! Production::    functionNameBase : HEX */\n\n/*! Production::    functionNameBase : HOUR */\n\n/*! Production::    functionNameBase : IFNULL */\n\n/*! Production::    functionNameBase : INET6_ATON */\n\n/*! Production::    functionNameBase : INET6_NTOA */\n\n/*! Production::    functionNameBase : INET_ATON */\n\n/*! Production::    functionNameBase : INET_NTOA */\n\n/*! Production::    functionNameBase : INSTR */\n\n/*! Production::    functionNameBase : INTERIORRINGN */\n\n/*! Production::    functionNameBase : INTERSECTS */\n\n/*! Production::    functionNameBase : INVISIBLE */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Function Expression Productions\nDESCRIPTION: This snippet defines production rules for various SQL function expressions, including aggregate functions, date/time functions, and geometric functions. It specifies the syntax for function calls with different parameter structures.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_82\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_expr : MAX \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : MICROSECOND \"(\" expr \")\" */\n\n/*! Production::    func_expr : MIN \"(\" opt_distinct_or_all expr \")\" */\n\n/*! Production::    func_expr : MINUTE \"(\" expr \")\" */\n\n/*! Production::    func_expr : MOD \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : MONTH \"(\" expr \")\" */\n\n/*! Production::    func_expr : MULTILINESTRING \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : MULTIPOINT \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : MULTIPOLYGON \"(\" expr_list \")\" */\n\n/*! Production::    func_expr : POINT \"(\" expr \",\" expr \")\" */\n\n/*! Production::    func_expr : POLYGON \"(\" expr_list \")\" */\n```\n\n----------------------------------------\n\nTITLE: SQL Identifier and List Production Rules\nDESCRIPTION: Grammar rules for identifiers, lists of identifiers, and numerical lists within SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_91\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    id_list : INTNUM */\n\n/*! Production::    id_list : id_list \",\" INTNUM */\n\n/*! Production::    identifier : IDENT */\n\n/*! Production::    identifier : unreserved_keyword */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER PACKAGE Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for altering a package, including compilation options and editionability settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_package_clause : COMPILE opt_debug opt_compile_unit opt_reuse_settings */\n\n/*! Production::    alter_package_clause : EDITIONABLE */\n\n/*! Production::    alter_package_clause : NONEDITIONABLE */\n\n/*! Production::    alter_package_stmt : ALTER PACKAGE_P pl_schema_name alter_package_clause */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table List\nDESCRIPTION: Defines production rules for table_list in SQL grammar. These rules specify how lists of tables can be defined, either as a single relation factor or a comma-separated list of relation factors.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_177\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_list : relation_factor */\n\n/*! Production::    table_list : table_list \",\" relation_factor */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Keywords and Rules\nDESCRIPTION: This snippet shows the pattern used throughout the file to define SQL keywords and syntax rules. Each rule is defined using a C-style comment starting with '/*! Rule::' followed by the keyword or rule definition.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_203\n\nLANGUAGE: C\nCODE:\n```\n/*! Rule::       SHRINK */\n\n/*! Rule::       SHUTDOWN */\n\n/*! Rule::       SIBLINGS */\n\n/*! Rule::       SIGNAL */\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Type Definitions\nDESCRIPTION: Comprehensive production rules listing all the specific SQL statement types supported by the system, including DDL, DML, administration, and utility statements. These cover everything from ALTER to XA operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_168\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    stmt : alter_database_stmt */\n\n/*! Production::    stmt : alter_index_stmt */\n\n/*! Production::    stmt : alter_keystore_stmt */\n\n/*! Production::    stmt : alter_outline_stmt */\n\n/*! Production::    stmt : alter_profile_stmt */\n\n/*! Production::    stmt : alter_resource_stmt */\n\n/*! Production::    stmt : alter_sequence_stmt */\n\n/*! Production::    stmt : alter_session_stmt */\n\n/*! Production::    stmt : alter_system_stmt */\n\n/*! Production::    stmt : alter_table_stmt */\n\n/*! Production::    stmt : alter_tablegroup_stmt */\n\n/*! Production::    stmt : alter_tablespace_stmt */\n\n/*! Production::    stmt : alter_tenant_stmt */\n\n/*! Production::    stmt : alter_user_profile_stmt */\n\n/*! Production::    stmt : alter_user_stmt */\n\n/*! Production::    stmt : analyze_stmt */\n\n/*! Production::    stmt : audit_stmt */\n\n/*! Production::    stmt : begin_stmt */\n\n/*! Production::    stmt : call_stmt */\n\n/*! Production::    stmt : commit_stmt */\n\n/*! Production::    stmt : create_database_stmt */\n\n/*! Production::    stmt : create_dblink_stmt */\n\n/*! Production::    stmt : create_function_stmt */\n\n/*! Production::    stmt : create_index_stmt */\n\n/*! Production::    stmt : create_keystore_stmt */\n\n/*! Production::    stmt : create_outline_stmt */\n\n/*! Production::    stmt : create_profile_stmt */\n\n/*! Production::    stmt : create_resource_stmt */\n\n/*! Production::    stmt : create_restore_point_stmt */\n\n/*! Production::    stmt : create_role_stmt */\n\n/*! Production::    stmt : create_savepoint_stmt */\n\n/*! Production::    stmt : create_sequence_stmt */\n\n/*! Production::    stmt : create_synonym_stmt */\n\n/*! Production::    stmt : create_table_like_stmt */\n\n/*! Production::    stmt : create_table_stmt */\n\n/*! Production::    stmt : create_tablegroup_stmt */\n\n/*! Production::    stmt : create_tablespace_stmt */\n\n/*! Production::    stmt : create_tenant_stmt */\n\n/*! Production::    stmt : create_user_stmt */\n\n/*! Production::    stmt : create_view_stmt */\n\n/*! Production::    stmt : deallocate_prepare_stmt */\n\n/*! Production::    stmt : delete_stmt */\n\n/*! Production::    stmt : drop_database_stmt */\n\n/*! Production::    stmt : drop_dblink_stmt */\n\n/*! Production::    stmt : drop_function_stmt */\n\n/*! Production::    stmt : drop_index_stmt */\n\n/*! Production::    stmt : drop_outline_stmt */\n\n/*! Production::    stmt : drop_profile_stmt */\n\n/*! Production::    stmt : drop_resource_stmt */\n\n/*! Production::    stmt : drop_restore_point_stmt */\n\n/*! Production::    stmt : drop_role_stmt */\n\n/*! Production::    stmt : drop_sequence_stmt */\n\n/*! Production::    stmt : drop_synonym_stmt */\n\n/*! Production::    stmt : drop_table_stmt */\n\n/*! Production::    stmt : drop_tablegroup_stmt */\n\n/*! Production::    stmt : drop_tablespace_stmt */\n\n/*! Production::    stmt : drop_tenant_stmt */\n\n/*! Production::    stmt : drop_user_stmt */\n\n/*! Production::    stmt : drop_view_stmt */\n\n/*! Production::    stmt : dump_memory_stmt */\n\n/*! Production::    stmt : execute_stmt */\n\n/*! Production::    stmt : explain_stmt */\n\n/*! Production::    stmt : flashback_stmt */\n\n/*! Production::    stmt : get_diagnostics_stmt */\n\n/*! Production::    stmt : grant_stmt */\n\n/*! Production::    stmt : help_stmt */\n\n/*! Production::    stmt : insert_stmt */\n\n/*! Production::    stmt : kill_stmt */\n\n/*! Production::    stmt : load_data_stmt */\n\n/*! Production::    stmt : lock_tables_stmt */\n\n/*! Production::    stmt : lock_user_stmt */\n\n/*! Production::    stmt : merge_stmt */\n\n/*! Production::    stmt : method_opt */\n\n/*! Production::    stmt : optimize_stmt */\n\n/*! Production::    stmt : pl_expr_stmt */\n\n/*! Production::    stmt : prepare_stmt */\n\n/*! Production::    stmt : purge_stmt */\n\n/*! Production::    stmt : recover_tenant_stmt */\n\n/*! Production::    stmt : release_savepoint_stmt */\n\n/*! Production::    stmt : rename_table_stmt */\n\n/*! Production::    stmt : rename_user_stmt */\n\n/*! Production::    stmt : revoke_stmt */\n\n/*! Production::    stmt : rollback_savepoint_stmt */\n\n/*! Production::    stmt : rollback_stmt */\n\n/*! Production::    stmt : rotate_master_key_stmt */\n\n/*! Production::    stmt : select_stmt */\n\n/*! Production::    stmt : set_charset_stmt */\n\n/*! Production::    stmt : set_comment_stmt */\n\n/*! Production::    stmt : set_names_stmt */\n\n/*! Production::    stmt : set_password_stmt */\n\n/*! Production::    stmt : set_role_stmt */\n\n/*! Production::    stmt : set_transaction_stmt */\n\n/*! Production::    stmt : show_stmt */\n\n/*! Production::    stmt : shrink_space_stmt */\n\n/*! Production::    stmt : switchover_tenant_stmt */\n\n/*! Production::    stmt : truncate_table_stmt */\n\n/*! Production::    stmt : unlock_tables_stmt */\n\n/*! Production::    stmt : update_stmt */\n\n/*! Production::    stmt : use_database_stmt */\n\n/*! Production::    stmt : variable_set_stmt */\n\n/*! Production::    stmt : xa_begin_stmt */\n```\n\n----------------------------------------\n\nTITLE: ALTER System Management Grammar Rules\nDESCRIPTION: SQL grammar productions for system-level operations including backup, restore, checkpoint and zone management commands\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alter_system_stmt : ALTER SYSTEM BACKUP DATABASE opt_backup_to PLUS ARCHIVELOG opt_description */\n/*! Production::    alter_system_stmt : ALTER SYSTEM CHECKPOINT */\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR LOCATION CACHE opt_server_or_zone */\n/*! Production::    alter_system_stmt : ALTER SYSTEM CLEAR RESTORE SOURCE */\n```\n\n----------------------------------------\n\nTITLE: SQL Conditional Statement Productions\nDESCRIPTION: Grammar rules for IF statements, EXISTS clauses, and conditional control flow in SQL procedural language.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_92\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    ifExists : IF EXISTS */\n\n/*! Production::    ifNotExists : IF NOT EXISTS */\n\n/*! Production::    ifStatement : IF expression THEN procedureSqlStatements opt_elifAlternatives ELSE procedureSqlStatements END IF */\n\n/*! Production::    ifStatement : IF expression THEN procedureSqlStatements opt_elifAlternatives END IF */\n\n/*! Production::    if_stmt : IF sp_if END_KEY IF */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Production Rules for List Expressions and Partitioning\nDESCRIPTION: These rules specify the syntax for list expressions, group by clauses, and list partitioning in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_97\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    list_expr : bit_expr */\n\n/*! Production::    list_expr : expr */\n\n/*! Production::    list_expr : list_expr \",\" bit_expr */\n\n/*! Production::    list_expr : list_expr \",\" expr */\n\n/*! Production::    list_for_group_by : key_for_group_by */\n\n/*! Production::    list_for_group_by : list_for_group_by \",\" key_for_group_by */\n\n/*! Production::    list_partition_element : PARTITION VALUES list_partition_expr opt_part_id opt_physical_attributes_options opt_compress_option opt_subpartition_list */\n\n/*! Production::    list_partition_element : PARTITION relation_factor VALUES IN list_partition_expr opt_part_id opt_engine_option opt_subpartition_list */\n\n/*! Production::    list_partition_element : PARTITION relation_factor VALUES list_partition_expr opt_part_id opt_physical_attributes_options opt_compress_option opt_subpartition_list */\n\n/*! Production::    list_partition_expr : \"(\" DEFAULT \")\" */\n\n/*! Production::    list_partition_expr : \"(\" list_expr \")\" */\n\n/*! Production::    list_partition_list : list_partition_element */\n\n/*! Production::    list_partition_list : list_partition_list \",\" list_partition_element */\n\n/*! Production::    list_partition_option : PARTITION BY BISON_LIST \"(\" expr \")\" subpartition_option opt_partitions opt_list_partition_list */\n\n/*! Production::    list_partition_option : PARTITION BY BISON_LIST COLUMNS \"(\" column_name_list \")\" subpartition_option opt_partitions opt_list_partition_list */\n\n/*! Production::    list_partition_option : PARTITION BY LIST \"(\" column_name_list \")\" subpartition_option opt_list_partition_list */\n\n/*! Production::    list_subpartition_element : SUBPARTITION relation_factor VALUES IN list_partition_expr opt_engine_option */\n\n/*! Production::    list_subpartition_element : SUBPARTITION relation_factor VALUES list_partition_expr opt_physical_attributes_options */\n\n/*! Production::    list_subpartition_list : list_subpartition_element */\n\n/*! Production::    list_subpartition_list : list_subpartition_list \",\" list_subpartition_element */\n```\n\n----------------------------------------\n\nTITLE: MySQL Global Hint Productions\nDESCRIPTION: Grammar productions for MySQL query optimizer hints and execution directives.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_85\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    global_hint : APPEND */\n/*! Production::    global_hint : CURSOR_SHARING_EXACT */\n/*! Production::    global_hint : DIRECT \"(\" BOOL_VALUE \",\" INTNUM \")\" */\n/*! Production::    global_hint : DISABLE_PARALLEL_DML */\n```\n\n----------------------------------------\n\nTITLE: Creating Index Statement in SQL\nDESCRIPTION: Defines the syntax for creating an index, including options for algorithm, relation, and columns.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_index_stmt : create_with_opt_hint opt_index_keyname INDEX opt_if_not_exists normal_relation_factor opt_index_using_algorithm ON relation_factor \"(\" sort_column_list \")\" opt_index_option_list opt_partition_option\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table Reference\nDESCRIPTION: Defines production rules for table_reference in SQL grammar. These rules specify how tables can be referenced in SQL queries, including joined tables and outer joins.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_181\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_reference : \"{\" OJ joined_table \"}\" */\n\n/*! Production::    table_reference : \"{\" OJ table_factor \"}\" */\n\n/*! Production::    table_reference : joined_table */\n\n/*! Production::    table_reference : table_factor */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Data Types and Intervals\nDESCRIPTION: These production rules define optional clauses for SQL data types, including integer length specifications and interval expressions. They also include options for online/offline actions and INTO clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_126\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_int_length_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_int_length_i : %epsilon */\n\n/*! Production::    opt_integer : %epsilon */\n\n/*! Production::    opt_integer : INTEGER */\n\n/*! Production::    opt_intervalExprs : %epsilon */\n\n/*! Production::    opt_intervalExprs : intervalExprs */\n\n/*! Production::    opt_interval_leading_fsp_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_interval_leading_fsp_i : \"(\" precision_int_num \")\" */\n\n/*! Production::    opt_interval_leading_fsp_i : %epsilon */\n\n/*! Production::    opt_intimeAction : %epsilon */\n\n/*! Production::    opt_intimeAction : OFFLINE */\n\n/*! Production::    opt_intimeAction : ONLINE */\n\n/*! Production::    opt_into : %epsilon */\n\n/*! Production::    opt_into : INTO */\n\n/*! Production::    opt_into_clause : %epsilon */\n\n/*! Production::    opt_into_clause : into_clause */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Zone Names and Privilege Specifications\nDESCRIPTION: Grammar rules for zone names and privilege specifications in SQL, defining primary zone names and privilege levels used in permission assignments.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_154\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    primary_zone_name : DEFAULT */\n\n/*! Production::    primary_zone_name : RANDOM */\n\n/*! Production::    primary_zone_name : USER_VARIABLE */\n\n/*! Production::    primary_zone_name : relation_name_or_string */\n\n/*! Production::    priv_level : \"*\" \".\" \"*\" */\n\n/*! Production::    priv_level : \"*\" */\n\n/*! Production::    priv_level : relation_name \".\" \"*\" */\n\n/*! Production::    priv_level : relation_name \".\" relation_name */\n\n/*! Production::    priv_level : relation_name */\n```\n\n----------------------------------------\n\nTITLE: CREATE RESOURCE POOL and UNIT Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating resource pools and units with various configuration options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_pool_option : IS_TENANT_SYS_POOL opt_equal_mark BOOL_VALUE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_pool_option : REPLICA_TYPE opt_equal_mark STRING_VALUE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_pool_option : UNIT opt_equal_mark relation_name_or_string */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_pool_option : UNIT_NUM opt_equal_mark INTNUM */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_pool_option : ZONE_LIST opt_equal_mark \"(\" zone_list \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_stmt : CREATE RESOURCE POOL relation_name opt_create_resource_pool_option_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_stmt : CREATE RESOURCE UNIT relation_name opt_resource_unit_option_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_stmt : create_with_opt_hint RESOURCE POOL opt_if_not_exists relation_name opt_create_resource_pool_option_list */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_resource_stmt : create_with_opt_hint RESOURCE UNIT opt_if_not_exists relation_name opt_resource_unit_option_list */\n```\n\n----------------------------------------\n\nTITLE: SQL Unreserved Keyword Declarations\nDESCRIPTION: Production declarations for SQL keywords that are not reserved words, including database operations, data types and system functions. These keywords can be used as identifiers in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_218\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : EXTRACT */\n/*! Production::    unreserved_keyword_normal : FAILED_LOGIN_ATTEMPTS */\n/*! Production::    unreserved_keyword_normal : FAILOVER */\n/*! Production::    unreserved_keyword_normal : FAST */\n/*! Production::    unreserved_keyword_normal : FAULTS */\n/*! Production::    unreserved_keyword_normal : FIELDS */\n/*! Production::    unreserved_keyword_normal : FILEX */\n/*! Production::    unreserved_keyword_normal : FILE_ID */\n/*! Production::    unreserved_keyword_normal : FINAL_COUNT */\n/*! Production::    unreserved_keyword_normal : FIRST */\n/*! Production::    unreserved_keyword_normal : FIRST_VALUE */\n/*! Production::    unreserved_keyword_normal : FIXED */\n/*! Production::    unreserved_keyword_normal : FLASHBACK */\n/*! Production::    unreserved_keyword_normal : FLOAT4 */\n/*! Production::    unreserved_keyword_normal : FLOAT8 */\n/*! Production::    unreserved_keyword_normal : FLUSH */\n/*! Production::    unreserved_keyword_normal : FOLLOWER */\n/*! Production::    unreserved_keyword_normal : FOLLOWING */\n/*! Production::    unreserved_keyword_normal : FORMAT */\n/*! Production::    unreserved_keyword_normal : FOUND */\n/*! Production::    unreserved_keyword_normal : FRAGMENTATION */\n/*! Production::    unreserved_keyword_normal : FREEZE */\n/*! Production::    unreserved_keyword_normal : FREQUENCY */\n/*! Production::    unreserved_keyword_normal : FROZEN */\n/*! Production::    unreserved_keyword_normal : FULL */\n/*! Production::    unreserved_keyword_normal : FUNCTION */\n/*! Production::    unreserved_keyword_normal : G */\n/*! Production::    unreserved_keyword_normal : GENERAL */\n/*! Production::    unreserved_keyword_normal : GENERATED */\n/*! Production::    unreserved_keyword_normal : GEOMCOLLECTION */\n/*! Production::    unreserved_keyword_normal : GEOMETRY */\n/*! Production::    unreserved_keyword_normal : GEOMETRYCOLLECTION */\n/*! Production::    unreserved_keyword_normal : GET */\n/*! Production::    unreserved_keyword_normal : GET_FORMAT */\n/*! Production::    unreserved_keyword_normal : GLOBAL */\n/*! Production::    unreserved_keyword_normal : GLOBAL_ALIAS */\n/*! Production::    unreserved_keyword_normal : GLOBAL_NAME */\n/*! Production::    unreserved_keyword_normal : GRANTS */\n/*! Production::    unreserved_keyword_normal : GROUPING */\n/*! Production::    unreserved_keyword_normal : GROUP_CONCAT */\n/*! Production::    unreserved_keyword_normal : GTS */\n/*! Production::    unreserved_keyword_normal : HANDLER */\n/*! Production::    unreserved_keyword_normal : HASH */\n/*! Production::    unreserved_keyword_normal : HELP */\n/*! Production::    unreserved_keyword_normal : HIDDEN */\n/*! Production::    unreserved_keyword_normal : HIGH */\n/*! Production::    unreserved_keyword_normal : HIGH_PRIORITY */\n/*! Production::    unreserved_keyword_normal : HISTOGRAM */\n/*! Production::    unreserved_keyword_normal : HOST */\n/*! Production::    unreserved_keyword_normal : HOSTS */\n/*! Production::    unreserved_keyword_normal : HOUR */\n/*! Production::    unreserved_keyword_normal : HOUR_MICROSECOND */\n/*! Production::    unreserved_keyword_normal : HOUR_MINUTE */\n/*! Production::    unreserved_keyword_normal : HOUR_SECOND */\n/*! Production::    unreserved_keyword_normal : HYBRID_HIST */\n/*! Production::    unreserved_keyword_normal : ID */\n/*! Production::    unreserved_keyword_normal : IDC */\n/*! Production::    unreserved_keyword_normal : IDENTIFIED */\n/*! Production::    unreserved_keyword_normal : IF */\n/*! Production::    unreserved_keyword_normal : IFIGNORE */\n/*! Production::    unreserved_keyword_normal : IGNORE */\n/*! Production::    unreserved_keyword_normal : IGNORE_SERVER_IDS */\n/*! Production::    unreserved_keyword_normal : ILOG */\n/*! Production::    unreserved_keyword_normal : ILOGCACHE */\n/*! Production::    unreserved_keyword_normal : IMPORT */\n/*! Production::    unreserved_keyword_normal : INCLUDE */\n/*! Production::    unreserved_keyword_normal : INCR */\n/*! Production::    unreserved_keyword_normal : INCREMENT */\n/*! Production::    unreserved_keyword_normal : INCREMENTAL */\n/*! Production::    unreserved_keyword_normal : INDEXED */\n/*! Production::    unreserved_keyword_normal : INDEXES */\n/*! Production::    unreserved_keyword_normal : INDEX_TABLE_ID */\n/*! Production::    unreserved_keyword_normal : INFILE */\n/*! Production::    unreserved_keyword_normal : INFO */\n/*! Production::    unreserved_keyword_normal : INITIAL_SIZE */\n/*! Production::    unreserved_keyword_normal : INNER */\n/*! Production::    unreserved_keyword_normal : INNER_PARSE */\n/*! Production::    unreserved_keyword_normal : INNODB */\n/*! Production::    unreserved_keyword_normal : INOUT */\n/*! Production::    unreserved_keyword_normal : INSENSITIVE */\n/*! Production::    unreserved_keyword_normal : INSERT_METHOD */\n/*! Production::    unreserved_keyword_normal : INSTALL */\n/*! Production::    unreserved_keyword_normal : INSTANCE */\n/*! Production::    unreserved_keyword_normal : INT1 */\n/*! Production::    unreserved_keyword_normal : INT2 */\n/*! Production::    unreserved_keyword_normal : INT3 */\n/*! Production::    unreserved_keyword_normal : INT4 */\n/*! Production::    unreserved_keyword_normal : INT8 */\n/*! Production::    unreserved_keyword_normal : INTERSECT */\n/*! Production::    unreserved_keyword_normal : INTERVAL */\n/*! Production::    unreserved_keyword_normal : INVISIBLE */\n/*! Production::    unreserved_keyword_normal : INVOKER */\n/*! Production::    unreserved_keyword_normal : IO */\n/*! Production::    unreserved_keyword_normal : IOPS_WEIGHT */\n/*! Production::    unreserved_keyword_normal : IO_AFTER_GTIDS */\n/*! Production::    unreserved_keyword_normal : IO_BEFORE_GTIDS */\n/*! Production::    unreserved_keyword_normal : IO_THREAD */\n/*! Production::    unreserved_keyword_normal : IPC */\n/*! Production::    unreserved_keyword_normal : ISNULL */\n/*! Production::    unreserved_keyword_normal : ISOLATE */\n/*! Production::    unreserved_keyword_normal : ISOLATION */\n/*! Production::    unreserved_keyword_normal : ISOLATION_LEVEL */\n/*! Production::    unreserved_keyword_normal : ISOPEN */\n/*! Production::    unreserved_keyword_normal : ISSUER */\n/*! Production::    unreserved_keyword_normal : IS_TENANT_SYS_POOL */\n/*! Production::    unreserved_keyword_normal : ITERATE */\n/*! Production::    unreserved_keyword_normal : JOB */\n/*! Production::    unreserved_keyword_normal : JOIN */\n/*! Production::    unreserved_keyword_normal : JSON */\n/*! Production::    unreserved_keyword_normal : JSON_ARRAYAGG */\n/*! Production::    unreserved_keyword_normal : JSON_OBJECTAGG */\n/*! Production::    unreserved_keyword_normal : JSON_VALUE */\n/*! Production::    unreserved_keyword_normal : K */\n/*! Production::    unreserved_keyword_normal : KEEP */\n/*! Production::    unreserved_keyword_normal : KEYS */\n/*! Production::    unreserved_keyword_normal : KEYSTORE */\n/*! Production::    unreserved_keyword_normal : KEY_BLOCK_SIZE */\n/*! Production::    unreserved_keyword_normal : KEY_VERSION */\n/*! Production::    unreserved_keyword_normal : KILL */\n/*! Production::    unreserved_keyword_normal : KVCACHE */\n/*! Production::    unreserved_keyword_normal : LAG */\n/*! Production::    unreserved_keyword_normal : LANGUAGE */\n/*! Production::    unreserved_keyword_normal : LAST */\n/*! Production::    unreserved_keyword_normal : LAST_VALUE */\n/*! Production::    unreserved_keyword_normal : LEAD */\n/*! Production::    unreserved_keyword_normal : LEADER */\n/*! Production::    unreserved_keyword_normal : LEADING */\n/*! Production::    unreserved_keyword_normal : LEAK */\n/*! Production::    unreserved_keyword_normal : LEAK_MOD */\n/*! Production::    unreserved_keyword_normal : LEAK_RATE */\n/*! Production::    unreserved_keyword_normal : LEAVE */\n/*! Production::    unreserved_keyword_normal : LEAVES */\n/*! Production::    unreserved_keyword_normal : LEFT */\n/*! Production::    unreserved_keyword_normal : LESS */\n/*! Production::    unreserved_keyword_normal : LEVEL */\n/*! Production::    unreserved_keyword_normal : LIB */\n/*! Production::    unreserved_keyword_normal : LIMIT */\n/*! Production::    unreserved_keyword_normal : LINEAR */\n/*! Production::    unreserved_keyword_normal : LINES */\n/*! Production::    unreserved_keyword_normal : LINESTRING */\n/*! Production::    unreserved_keyword_normal : LIST */\n/*! Production::    unreserved_keyword_normal : LISTAGG */\n/*! Production::    unreserved_keyword_normal : LIST_ */\n/*! Production::    unreserved_keyword_normal : LN */\n/*! Production::    unreserved_keyword_normal : LNNVL */\n/*! Production::    unreserved_keyword_normal : LOAD */\n/*! Production::    unreserved_keyword_normal : LOCAL */\n/*! Production::    unreserved_keyword_normal : LOCALITY */\n/*! Production::    unreserved_keyword_normal : LOCALTIMESTAMP */\n/*! Production::    unreserved_keyword_normal : LOCATION */\n/*! Production::    unreserved_keyword_normal : LOCKED */\n/*! Production::    unreserved_keyword_normal : LOCKS */\n/*! Production::    unreserved_keyword_normal : LOCK_ */\n/*! Production::    unreserved_keyword_normal : LOG */\n/*! Production::    unreserved_keyword_normal : LOGFILE */\n/*! Production::    unreserved_keyword_normal : LOGICAL_READS */\n/*! Production::    unreserved_keyword_normal : LOGONLY_REPLICA_NUM */\n/*! Production::    unreserved_keyword_normal : LOGS */\n/*! Production::    unreserved_keyword_normal : LOG_DISK_SIZE */\n/*! Production::    unreserved_keyword_normal : LONGBLOB */\n/*! Production::    unreserved_keyword_normal : LONGTEXT */\n/*! Production::    unreserved_keyword_normal : LOOP */\n/*! Production::    unreserved_keyword_normal : LOW */\n/*! Production::    unreserved_keyword_normal : LOW_PRIORITY */\n/*! Production::    unreserved_keyword_normal : LS */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Hints and Existence Checks\nDESCRIPTION: These production rules define optional clauses for SQL hints, including hint lists and values. They also include options for IF EXISTS and IF NOT EXISTS checks in various SQL operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_122\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_hint_list : %epsilon */\n\n/*! Production::    opt_hint_list : hint_options */\n\n/*! Production::    opt_hint_list : opt_hint_list \",\" hint_options */\n\n/*! Production::    opt_hint_value : %epsilon */\n\n/*! Production::    opt_hint_value : HINT_VALUE */\n\n/*! Production::    opt_host_name : %epsilon */\n\n/*! Production::    opt_host_name : USER_VARIABLE */\n\n/*! Production::    opt_ifExists : %epsilon */\n\n/*! Production::    opt_ifExists : ifExists */\n\n/*! Production::    opt_ifNotExists : %epsilon */\n\n/*! Production::    opt_ifNotExists : ifNotExists */\n\n/*! Production::    opt_if_exists : %epsilon */\n\n/*! Production::    opt_if_exists : IF EXISTS */\n\n/*! Production::    opt_if_not_exists : %epsilon */\n\n/*! Production::    opt_if_not_exists : IF not EXISTS */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production Rules\nDESCRIPTION: This snippet shows the format used to define SQL grammar production rules throughout the file. Each rule is preceded by a comment specifying the production name, followed by the rule definition.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_135\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    resource_unit_option : MIN_CPU opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MIN_IOPS opt_equal_mark conf_const */\n\n/*! Production::    resource_unit_option : MIN_MEMORY opt_equal_mark conf_const */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for SHUTDOWN Keyword\nDESCRIPTION: This rule defines the SQL keyword 'SHUTDOWN', used to stop or shut down a database instance or server.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_243\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       SHUTDOWN */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Tablegroup Option\nDESCRIPTION: Defines production rules for tablegroup_option in SQL grammar. These rules specify configuration options for tablegroups, including binding, locality, and zone settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_184\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    tablegroup_option : BINDING opt_equal_mark BOOL_VALUE */\n\n/*! Production::    tablegroup_option : LOCALITY opt_equal_mark locality_name opt_force */\n\n/*! Production::    tablegroup_option : MAX_USED_PART_ID opt_equal_mark INTNUM */\n\n/*! Production::    tablegroup_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n\n/*! Production::    tablegroup_option : TABLEGROUP_ID opt_equal_mark INTNUM */\n```\n\n----------------------------------------\n\nTITLE: SQL Additional Index Properties Productions\nDESCRIPTION: Grammar rules for additional index properties including index scope, types, and various storage and optimization options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_98\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    index_element : NAME_OB */\n\n/*! Production::    index_element : PRIMARY */\n\n/*! Production::    index_expr : bit_expr */\n\n/*! Production::    index_hint_definition : USE key_or_index index_hint_scope \"(\" opt_index_list \")\" */\n\n/*! Production::    index_hint_definition : index_hint_type key_or_index index_hint_scope \"(\" index_list \")\" */\n\n/*! Production::    index_hint_list : index_hint_definition */\n\n/*! Production::    index_hint_list : index_hint_definition index_hint_list */\n\n/*! Production::    index_hint_scope : %epsilon */\n\n/*! Production::    index_hint_scope : FOR GROUP BY */\n\n/*! Production::    index_hint_scope : FOR JOIN */\n\n/*! Production::    index_hint_scope : FOR ORDER BY */\n\n/*! Production::    index_hint_type : FORCE */\n\n/*! Production::    index_hint_type : IGNORE */\n\n/*! Production::    index_list : index_element */\n\n/*! Production::    index_list : index_list \",\" index_element */\n\n/*! Production::    index_name : relation_name */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Transaction Control\nDESCRIPTION: Defines SQL grammar production rules for transaction control statements including RELEASE SAVEPOINT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_166\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    releaseStatement : RELEASE SAVEPOINT uid */\n\n/*! Production::    release_savepoint_stmt : RELEASE SAVEPOINT var_name */\n\n/*! Production::    relies_on_clause : RELIES_ON \"(\" opt_data_source_list \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining MERGE Statement Production Rules in SQL\nDESCRIPTION: These production rules define the structure of MERGE statements in SQL, including optional hints, UPDATE and INSERT clauses, and condition matching.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_103\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause */\n\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor relation_name USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_update_clause merge_insert_clause */\n\n/*! Production::    merge_update_clause : WHEN MATCHED THEN UPDATE SET update_asgn_list opt_where opt_merge_update_delete */\n\n/*! Production::    merge_with_opt_hint : MERGE */\n\n/*! Production::    merge_with_opt_hint : MERGE_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER INDEX Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for various ALTER INDEX operations, including modifying constraints, dropping keys, and renaming indexes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_index_option : ALTER CHECK constraint_name check_state */\n\n/*! Production::    alter_index_option : ALTER CONSTRAINT constraint_name check_state */\n\n/*! Production::    alter_index_option : ALTER INDEX index_name parallel_option */\n\n/*! Production::    alter_index_option : ALTER INDEX index_name visibility_option */\n\n/*! Production::    alter_index_option : DROP PRIMARY KEY */\n\n/*! Production::    alter_index_option : DROP key_or_index index_name */\n\n/*! Production::    alter_index_option : MODIFY CONSTRAINT constraint_name opt_rely_option opt_enable_option opt_validate_option */\n\n/*! Production::    alter_index_option : RENAME key_or_index index_name TO index_name */\n\n/*! Production::    alter_index_option_oracle : RENAME TO index_name */\n\n/*! Production::    alter_index_stmt : ALTER INDEX relation_factor alter_index_actions */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Ignore and Index Operations\nDESCRIPTION: These production rules define optional clauses for SQL IGNORE operations and various index-related operations, including index categories, column names, hints, options, and types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_123\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_ignore : %epsilon */\n\n/*! Production::    opt_ignore : IGNORE */\n\n/*! Production::    opt_ignore_server_list : %epsilon */\n\n/*! Production::    opt_ignore_server_list : IGNORE server_list */\n\n/*! Production::    opt_indexCategory : %epsilon */\n\n/*! Production::    opt_indexCategory : FULLTEXT */\n\n/*! Production::    opt_indexCategory : SPATIAL */\n\n/*! Production::    opt_indexCategory : UNIQUE */\n\n/*! Production::    opt_indexColumnNames : %epsilon */\n\n/*! Production::    opt_indexColumnNames : indexColumnNames */\n\n/*! Production::    opt_indexHints : %epsilon */\n\n/*! Production::    opt_indexHints : indexHints */\n\n/*! Production::    opt_indexOptions : %epsilon */\n\n/*! Production::    opt_indexOptions : indexOptions */\n\n/*! Production::    opt_indexType : %epsilon */\n\n/*! Production::    opt_indexType : indexType */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL UPDATE Statement Productions\nDESCRIPTION: These production rules define the structure of SQL UPDATE statements, including single and multiple updates, assignment lists, and various clause options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_212\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    updateStatement : multipleUpdateStatement */\n\n/*! Production::    updateStatement : singleUpdateStatement */\n\n/*! Production::    update_asgn_factor : \"(\" column_list \")\" COMP_EQ \"(\" subquery \")\" */\n\n/*! Production::    update_asgn_factor : column_definition_ref COMP_EQ expr_or_default */\n\n/*! Production::    update_asgn_factor : no_param_column_ref COMP_EQ expr_or_default */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Float Precision in SQL\nDESCRIPTION: These production rules define optional float precision specifications in SQL. They allow for various formats of precision definition, including empty parentheses, single decimal value, single integer, or two integers separated by a comma.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_116\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_float_precision : \"(\" \")\" */\n\n/*! Production::    opt_float_precision : \"(\" DECIMAL_VAL \")\" */\n\n/*! Production::    opt_float_precision : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_float_precision : \"(\" INTNUM \",\" INTNUM \")\" */\n\n/*! Production::    opt_float_precision : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Tablegroup Option List\nDESCRIPTION: Defines production rules for tablegroup_option_list in SQL grammar. These rules specify how lists of tablegroup options can be defined, either as comma-separated or space-separated lists.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_185\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    tablegroup_option_list : tablegroup_option \",\" tablegroup_option_list */\n\n/*! Production::    tablegroup_option_list : tablegroup_option_list_space_seperated */\n\n/*! Production::    tablegroup_option_list_space_seperated : tablegroup_option */\n\n/*! Production::    tablegroup_option_list_space_seperated : tablegroup_option tablegroup_option_list_space_seperated */\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statement Productions\nDESCRIPTION: Grammar rules for SQL INSERT statements, including various insertion methods and value specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_103\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    insertMethod : FIRST */\n\n/*! Production::    insertMethod : LAST */\n\n/*! Production::    insertMethod : NO */\n\n/*! Production::    insertStatement : INSERT opt_insertPriority opt_IGNORE opt_INTO tableName opt_insertStatement_partition insertStatement_value */\n\n/*! Production::    insertStatementValue : insertValueKeyword insertValues */\n\n/*! Production::    insertStatementValue : selectStatement */\n\n/*! Production::    insertStatement_value : SET updatedElements */\n\n/*! Production::    insertStatement_value : opt_uidList insertStatementValue */\n\n/*! Production::    insertValueKeyword : VALUE */\n\n/*! Production::    insertValueKeyword : VALUES */\n\n/*! Production::    insertValues : LR_BRACKET opt_expressionsWithDefaults RR_BRACKET */\n\n/*! Production::    insertValues : LR_BRACKET opt_expressionsWithDefaults RR_BRACKET COMMA insertValues */\n\n/*! Production::    insert_stmt : insert_with_opt_hint opt_ignore opt_into single_table_insert opt_on_duplicate_key_clause */\n\n/*! Production::    insert_stmt : insert_with_opt_hint single_table_insert */\n\n/*! Production::    insert_stmt : replace_with_opt_hint opt_ignore opt_into single_table_insert */\n\n/*! Production::    insert_table_clause : \"(\" subquery fetch_next_clause \")\" */\n\n/*! Production::    insert_table_clause : \"(\" subquery fetch_next_clause \")\" relation_name */\n\n/*! Production::    insert_table_clause : \"(\" subquery order_by opt_fetch_next \")\" */\n\n/*! Production::    insert_table_clause : \"(\" subquery order_by opt_fetch_next \")\" relation_name */\n\n/*! Production::    insert_table_clause : dml_table_name */\n\n/*! Production::    insert_table_clause : dml_table_name relation_name */\n\n/*! Production::    insert_table_clause : select_with_parens */\n\n/*! Production::    insert_table_clause : select_with_parens relation_name */\n\n/*! Production::    insert_vals : %epsilon */\n\n/*! Production::    insert_vals : expr_or_default */\n```\n\n----------------------------------------\n\nTITLE: License Headers\nDESCRIPTION: License and attribution headers for external code dependencies including lodash and codepointat libraries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_236\n\nLANGUAGE: javascript\nCODE:\n```\n/*! https://mths.be/codepointat v0.2.0 by @mathias */\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\n\n/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Partition Modification Production Rules in SQL\nDESCRIPTION: These rules define various types of partition modifications, including hash, list, range, and key partitions, as well as special partition modifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_105\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    modify_partition_info : MODIFY hash_partition_option */\n\n/*! Production::    modify_partition_info : MODIFY list_partition_option */\n\n/*! Production::    modify_partition_info : MODIFY range_partition_option */\n\n/*! Production::    modify_partition_info : hash_partition_option */\n\n/*! Production::    modify_partition_info : key_partition_option */\n\n/*! Production::    modify_partition_info : list_partition_option */\n\n/*! Production::    modify_partition_info : range_partition_option */\n\n/*! Production::    modify_special_partition : %epsilon */\n\n/*! Production::    modify_special_partition : INTO opt_special_partition_list */\n\n/*! Production::    modify_tg_partition_info : tg_hash_partition_option */\n\n/*! Production::    modify_tg_partition_info : tg_key_partition_option */\n\n/*! Production::    modify_tg_partition_info : tg_list_partition_option */\n\n/*! Production::    modify_tg_partition_info : tg_range_partition_option */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Roles and Role-related Operations\nDESCRIPTION: These productions define grammar rules for roles, role lists, and role-related operations such as identifying roles by password.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_174\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    role : CONNECT */\n\n/*! Production::    role : DBA */\n\n/*! Production::    role : NAME_OB */\n\n/*! Production::    role : PUBLIC */\n\n/*! Production::    role : RESOURCE */\n\n/*! Production::    role : STRING_VALUE */\n\n/*! Production::    role_list : role */\n\n/*! Production::    role_list : role_list \",\" role */\n\n/*! Production::    role_opt_identified_by : role */\n\n/*! Production::    role_opt_identified_by : role IDENTIFIED BY password */\n\n/*! Production::    role_opt_identified_by_list : role_opt_identified_by */\n\n/*! Production::    role_opt_identified_by_list : role_opt_identified_by_list \",\" role_opt_identified_by */\n```\n\n----------------------------------------\n\nTITLE: Privileges Base Productions\nDESCRIPTION: Grammar rules for base privilege types\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_160\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    privilegesBase : EXECUTE */\n/*! Production::    privilegesBase : FILE */\n/*! Production::    privilegesBase : PRIVILEGES */\n/*! Production::    privilegesBase : PROCESS */\n/*! Production::    privilegesBase : RELOAD */\n/*! Production::    privilegesBase : ROUTINE */\n/*! Production::    privilegesBase : SHUTDOWN */\n/*! Production::    privilegesBase : SUPER */\n/*! Production::    privilegesBase : TABLES */\n```\n\n----------------------------------------\n\nTITLE: Defining XID Production Rules in SQL Grammar\nDESCRIPTION: Grammar production rules for transaction identifiers (XID) used in XA transactions. These rules define how XIDs can be formatted using string IDs, with optional components separated by commas.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_225\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    xid : xuidStringId */\n\n/*! Production::    xid : xuidStringId COMMA xuidStringId */\n\n/*! Production::    xid : xuidStringId COMMA xuidStringId COMMA decimalLiteral */\n\n/*! Production::    xuidStringId : BIT_STRING */\n\n/*! Production::    xuidStringId : HEXADECIMAL_LITERALs */\n\n/*! Production::    xuidStringId : STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: Column Definition Grammar Rules\nDESCRIPTION: Grammar rules defining various forms of column definitions including data types, attributes, and generated columns\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    column_definition : column_definition_ref data_type opt_column_attribute_list opt_position_column */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_generated_keyname AS \"(\" expr \")\" opt_storage_type opt_generated_column_attribute_list opt_position_column */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_visibility_option opt_column_attribute_list */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Tables, Tablespace, and Table Name\nDESCRIPTION: Defines production rules for tables, tablespace, and table name in SQL grammar. These rules specify how tables can be named and referenced in various SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_186\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    tables : tableName */\n\n/*! Production::    tables : tableName COMMA tables */\n\n/*! Production::    tablespace : NAME_OB */\n\n/*! Production::    tablespaceStorage : STORAGE storageval */\n\n/*! Production::    tbl_name : relation_factor */\n\n/*! Production::    tbl_name : relation_factor AS relation_name */\n\n/*! Production::    tbl_name : relation_factor AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor index_hint_list */\n\n/*! Production::    tbl_name : relation_factor relation_name */\n\n/*! Production::    tbl_name : relation_factor relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor relation_name transpose_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause */\n\n/*! Production::    tbl_name : relation_factor sample_clause AS relation_name */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Index Operations\nDESCRIPTION: These productions define the syntax for creating and manipulating database indexes, including specifying index types, options, and column definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_77\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    indexColumnDefinition : FULLTEXT opt_tableConstraintFormat opt_uid indexColumnNames opt_indexOptions */\n\n/*! Production::    indexColumnDefinition : SPATIAL opt_tableConstraintFormat opt_uid indexColumnNames opt_indexOptions */\n\n/*! Production::    indexColumnDefinition : tableConstraintFormat opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    indexColumnName : uid LR_BRACKET decimalLiteral RR_BRACKET opt_ascOrDesc */\n\n/*! Production::    indexColumnName : uid opt_ascOrDesc */\n\n/*! Production::    indexColumnNameList : indexColumnName */\n\n/*! Production::    indexColumnNameList : indexColumnName COMMA indexColumnNameList */\n\n/*! Production::    indexColumnNames : LR_BRACKET indexColumnNameList RR_BRACKET */\n\n/*! Production::    indexHint : indexHintAction indexHintKeyFormat FOR indexHintType LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    indexHint : indexHintAction indexHintKeyFormat LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    indexHintAction : FORCE */\n\n/*! Production::    indexHintAction : IGNORE */\n\n/*! Production::    indexHintAction : USE */\n\n/*! Production::    indexHintKeyFormat : INDEX */\n\n/*! Production::    indexHintKeyFormat : KEY */\n\n/*! Production::    indexHintType : GROUP BY */\n\n/*! Production::    indexHintType : JOIN */\n\n/*! Production::    indexHintType : ORDER BY */\n\n/*! Production::    indexHints : indexHint */\n\n/*! Production::    indexHints : indexHint COMMA indexHints */\n\n/*! Production::    indexLockAssign : LOCK EQUAL_SYMBOL lockType */\n\n/*! Production::    indexLockAssign : LOCK lockType */\n\n/*! Production::    indexOption : COMMENT STRING_LITERAL */\n\n/*! Production::    indexOption : INVISIBLE */\n\n/*! Production::    indexOption : KEY_BLOCK_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    indexOption : VISIBLE */\n\n/*! Production::    indexOption : WITH PARSER uid */\n\n/*! Production::    indexOption : indexType */\n\n/*! Production::    indexOptions : indexOption */\n\n/*! Production::    indexOptions : indexOption indexOptions */\n\n/*! Production::    indexType : USING BTREE */\n\n/*! Production::    indexType : USING HASH */\n```\n\n----------------------------------------\n\nTITLE: Defining TLS Options in SQL\nDESCRIPTION: These productions define TLS (Transport Layer Security) options for SQL connections, including cipher, issuer, subject, and X509 settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_176\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tlsOption : CIPHER STRING_LITERAL */\n\n/*! Production::    tlsOption : ISSUER STRING_LITERAL */\n\n/*! Production::    tlsOption : SSL */\n\n/*! Production::    tlsOption : SUBJECT STRING_LITERAL */\n\n/*! Production::    tlsOption : X509 */\n\n/*! Production::    tlsOptions : tlsOption */\n\n/*! Production::    tlsOptions : tlsOption opt_AND tlsOptions */\n\n/*! Production::    tls_option : CIPHER STRING_VALUE */\n\n/*! Production::    tls_option : ISSUER STRING_VALUE */\n\n/*! Production::    tls_option : SUBJECT STRING_VALUE */\n\n/*! Production::    tls_option_list : tls_option */\n\n/*! Production::    tls_option_list : tls_option_list AND tls_option */\n\n/*! Production::    tls_option_list : tls_option_list tls_option */\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE and UPDATE Statement Production Rules in SQL\nDESCRIPTION: These production rules define the structure of multi-table DELETE statements and UPDATE statements in SQL, including options for priority and ignore flags.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_106\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    multi_delete_table : FROM relation_with_star_list USING table_references */\n\n/*! Production::    multi_delete_table : relation_with_star_list FROM table_references */\n\n/*! Production::    multipleDeleteStatement : DELETE opt_LOW_PRIORITY opt_QUICK opt_IGNORE FROM tableWithOptStars USING tableSources opt_whereClause */\n\n/*! Production::    multipleDeleteStatement : DELETE opt_LOW_PRIORITY opt_QUICK opt_IGNORE tableWithOptStars FROM tableSources opt_whereClause */\n\n/*! Production::    multipleUpdateStatement : UPDATE opt_LOW_PRIORITY opt_IGNORE tableSources SET updatedElements opt_whereClause */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER PROFILE Grammar Rules in SQL\nDESCRIPTION: This snippet defines a grammar production for altering a profile, specifically for setting password parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_profile_stmt : ALTER PROFILE profile_name LIMIT password_parameters */\n```\n\n----------------------------------------\n\nTITLE: Defining System Privilege List Grammar\nDESCRIPTION: Production rules that define how system privileges can be composed into lists, allowing for multiple privileges to be specified in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_201\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    system_privilege_list : system_privilege */\n\n/*! Production::    system_privilege_list : system_privilege_list \",\" system_privilege */\n```\n\n----------------------------------------\n\nTITLE: Defining String Literal Lexical Rules in SQL Grammar\nDESCRIPTION: Lexical rules for string literals in SQL, defining patterns for quoted strings with various escaping rules and quote styles. These patterns recognize different types of string representations in SQL code.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_228\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       \"([^\"\\\\]|(\"\")|(\\\\.))*\" */\n\n/*! Rule::       \"([^\"]|\"\")+(\" */\n\n/*! Rule::       \"([^\"]|(\"\"))*\" */\n\n/*! Rule::       '([^'\\\\]|('')|(\\\\.))*' */\n\n/*! Rule::       '([^']|('')|\\\\')*' */\n\n/*! Rule::       (N|n)?(Q|q)?'([^']|(''))*' */\n\n/*! Rule::       ({DQUOTA_STRING}|{SQUOTA_STRING}|{BQUOTA_STRING}) */\n\n/*! Rule::       ({SQUOTA_STRING}|{DQUOTA_STRING}|{BQUOTA_STRING}|{ID_LITERAL})@({SQUOTA_STRING}|{DQUOTA_STRING}|{BQUOTA_STRING}|{ID_LITERAL}|{IP_ADDRESS}) */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Productions for Replication Control\nDESCRIPTION: This snippet defines parser productions for stopping group replication and slave replication processes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_159\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    stopGroupReplication : STOP GROUP_REPLICATION */\n\n/*! Production::    stopSlave : STOP SLAVE opt_threadTypes */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Partition Usage in Table Names\nDESCRIPTION: These productions define how partitions can be used in table name structures, including options for sampling and indexing.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_190\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tbl_name : relation_factor use_partition */\n\n/*! Production::    tbl_name : relation_factor use_partition AS relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition index_hint_list */\n```\n\n----------------------------------------\n\nTITLE: Defining Replication Change Commands in SQL\nDESCRIPTION: This snippet defines productions for changing master and replication filter settings in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    changeMaster : CHANGE MASTER TO masterOptions opt_channelOption */\n\n/*! Production::    changeReplicationFilter : CHANGE REPLICATION FILTER replicationFilters */\n\n/*! Production::    change_action : replica_type */\n\n/*! Production::    change_actions : change_action */\n\n/*! Production::    change_actions : change_action change_actions */\n\n/*! Production::    change_tenant_name_or_tenant_id : TENANT_ID opt_equal_mark INTNUM */\n\n/*! Production::    change_tenant_name_or_tenant_id : relation_name_or_string */\n\n/*! Production::    channelOption : FOR CHANNEL STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: SQL Unreserved Keyword Definitions\nDESCRIPTION: A comprehensive list of SQL unreserved keywords including database operations, data types, and system functions. These keywords are marked as normal unreserved keywords that can be used in SQL statements but don't have special reserved status.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_182\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : EXTRACT */\n/*! Production::    unreserved_keyword_normal : FAILED_LOGIN_ATTEMPTS */\n/*! Production::    unreserved_keyword_normal : FAILOVER */\n/*! Production::    unreserved_keyword_normal : FAST */\n/*! Production::    unreserved_keyword_normal : FAULTS */\n/*! Production::    unreserved_keyword_normal : FIELDS */\n/*! Production::    unreserved_keyword_normal : FILEX */\n/*! Production::    unreserved_keyword_normal : FILE_ID */\n/*! Production::    unreserved_keyword_normal : FINAL_COUNT */\n/*! Production::    unreserved_keyword_normal : FIRST */\n/*! Production::    unreserved_keyword_normal : FIRST_VALUE */\n/*! Production::    unreserved_keyword_normal : FIXED */\n/*! Production::    unreserved_keyword_normal : FLASHBACK */\n/*! Production::    unreserved_keyword_normal : FLOAT4 */\n/*! Production::    unreserved_keyword_normal : FLOAT8 */\n/*! Production::    unreserved_keyword_normal : FLUSH */\n/*! Production::    unreserved_keyword_normal : FOLLOWER */\n/*! Production::    unreserved_keyword_normal : FOLLOWING */\n/*! Production::    unreserved_keyword_normal : FORMAT */\n/*! Production::    unreserved_keyword_normal : FOUND */\n/*! Production::    unreserved_keyword_normal : FRAGMENTATION */\n/*! Production::    unreserved_keyword_normal : FREEZE */\n/*! Production::    unreserved_keyword_normal : FREQUENCY */\n/*! Production::    unreserved_keyword_normal : FROZEN */\n/*! Production::    unreserved_keyword_normal : FULL */\n/*! Production::    unreserved_keyword_normal : FUNCTION */\n/*! Production::    unreserved_keyword_normal : G */\n/*! Production::    unreserved_keyword_normal : GENERAL */\n/*! Production::    unreserved_keyword_normal : GENERATED */\n/*! Production::    unreserved_keyword_normal : GEOMCOLLECTION */\n/*! Production::    unreserved_keyword_normal : GEOMETRY */\n/*! Production::    unreserved_keyword_normal : GEOMETRYCOLLECTION */\n/*! Production::    unreserved_keyword_normal : GET */\n/*! Production::    unreserved_keyword_normal : GET_FORMAT */\n/*! Production::    unreserved_keyword_normal : GLOBAL */\n/*! Production::    unreserved_keyword_normal : GLOBAL_ALIAS */\n/*! Production::    unreserved_keyword_normal : GLOBAL_NAME */\n/*! Production::    unreserved_keyword_normal : GRANTS */\n/*! Production::    unreserved_keyword_normal : GROUPING */\n/*! Production::    unreserved_keyword_normal : GROUP_CONCAT */\n/*! Production::    unreserved_keyword_normal : GTS */\n/*! Production::    unreserved_keyword_normal : HANDLER */\n/*! Production::    unreserved_keyword_normal : HASH */\n/*! Production::    unreserved_keyword_normal : HELP */\n/*! Production::    unreserved_keyword_normal : HIDDEN */\n/*! Production::    unreserved_keyword_normal : HIGH */\n/*! Production::    unreserved_keyword_normal : HIGH_PRIORITY */\n/*! Production::    unreserved_keyword_normal : HISTOGRAM */\n/*! Production::    unreserved_keyword_normal : HOST */\n/*! Production::    unreserved_keyword_normal : HOSTS */\n/*! Production::    unreserved_keyword_normal : HOUR */\n/*! Production::    unreserved_keyword_normal : HOUR_MICROSECOND */\n/*! Production::    unreserved_keyword_normal : HOUR_MINUTE */\n/*! Production::    unreserved_keyword_normal : HOUR_SECOND */\n/*! Production::    unreserved_keyword_normal : HYBRID_HIST */\n/*! Production::    unreserved_keyword_normal : ID */\n/*! Production::    unreserved_keyword_normal : IDC */\n/*! Production::    unreserved_keyword_normal : IDENTIFIED */\n/*! Production::    unreserved_keyword_normal : IF */\n/*! Production::    unreserved_keyword_normal : IFIGNORE */\n/*! Production::    unreserved_keyword_normal : IGNORE */\n/*! Production::    unreserved_keyword_normal : IGNORE_SERVER_IDS */\n/*! Production::    unreserved_keyword_normal : ILOG */\n/*! Production::    unreserved_keyword_normal : ILOGCACHE */\n/*! Production::    unreserved_keyword_normal : IMPORT */\n/*! Production::    unreserved_keyword_normal : INCLUDE */\n/*! Production::    unreserved_keyword_normal : INCR */\n/*! Production::    unreserved_keyword_normal : INCREMENT */\n/*! Production::    unreserved_keyword_normal : INCREMENTAL */\n/*! Production::    unreserved_keyword_normal : INDEXED */\n/*! Production::    unreserved_keyword_normal : INDEXES */\n/*! Production::    unreserved_keyword_normal : INDEX_TABLE_ID */\n/*! Production::    unreserved_keyword_normal : INFILE */\n/*! Production::    unreserved_keyword_normal : INFO */\n/*! Production::    unreserved_keyword_normal : INITIAL_SIZE */\n/*! Production::    unreserved_keyword_normal : INNER */\n/*! Production::    unreserved_keyword_normal : INNER_PARSE */\n/*! Production::    unreserved_keyword_normal : INNODB */\n/*! Production::    unreserved_keyword_normal : INOUT */\n/*! Production::    unreserved_keyword_normal : INSENSITIVE */\n/*! Production::    unreserved_keyword_normal : INSERT_METHOD */\n/*! Production::    unreserved_keyword_normal : INSTALL */\n/*! Production::    unreserved_keyword_normal : INSTANCE */\n/*! Production::    unreserved_keyword_normal : INT1 */\n/*! Production::    unreserved_keyword_normal : INT2 */\n/*! Production::    unreserved_keyword_normal : INT3 */\n/*! Production::    unreserved_keyword_normal : INT4 */\n/*! Production::    unreserved_keyword_normal : INT8 */\n/*! Production::    unreserved_keyword_normal : INTERSECT */\n/*! Production::    unreserved_keyword_normal : INTERVAL */\n/*! Production::    unreserved_keyword_normal : INVISIBLE */\n/*! Production::    unreserved_keyword_normal : INVOKER */\n/*! Production::    unreserved_keyword_normal : IO */\n/*! Production::    unreserved_keyword_normal : IOPS_WEIGHT */\n/*! Production::    unreserved_keyword_normal : IO_AFTER_GTIDS */\n/*! Production::    unreserved_keyword_normal : IO_BEFORE_GTIDS */\n/*! Production::    unreserved_keyword_normal : IO_THREAD */\n/*! Production::    unreserved_keyword_normal : IPC */\n/*! Production::    unreserved_keyword_normal : ISNULL */\n/*! Production::    unreserved_keyword_normal : ISOLATE */\n/*! Production::    unreserved_keyword_normal : ISOLATION */\n/*! Production::    unreserved_keyword_normal : ISOLATION_LEVEL */\n/*! Production::    unreserved_keyword_normal : ISOPEN */\n/*! Production::    unreserved_keyword_normal : ISSUER */\n/*! Production::    unreserved_keyword_normal : IS_TENANT_SYS_POOL */\n/*! Production::    unreserved_keyword_normal : ITERATE */\n/*! Production::    unreserved_keyword_normal : JOB */\n/*! Production::    unreserved_keyword_normal : JOIN */\n/*! Production::    unreserved_keyword_normal : JSON */\n/*! Production::    unreserved_keyword_normal : JSON_ARRAYAGG */\n/*! Production::    unreserved_keyword_normal : JSON_OBJECTAGG */\n/*! Production::    unreserved_keyword_normal : JSON_VALUE */\n/*! Production::    unreserved_keyword_normal : K */\n/*! Production::    unreserved_keyword_normal : KEEP */\n/*! Production::    unreserved_keyword_normal : KEYS */\n/*! Production::    unreserved_keyword_normal : KEYSTORE */\n/*! Production::    unreserved_keyword_normal : KEY_BLOCK_SIZE */\n/*! Production::    unreserved_keyword_normal : KEY_VERSION */\n/*! Production::    unreserved_keyword_normal : KILL */\n/*! Production::    unreserved_keyword_normal : KVCACHE */\n/*! Production::    unreserved_keyword_normal : LAG */\n/*! Production::    unreserved_keyword_normal : LANGUAGE */\n/*! Production::    unreserved_keyword_normal : LAST */\n/*! Production::    unreserved_keyword_normal : LAST_VALUE */\n/*! Production::    unreserved_keyword_normal : LEAD */\n/*! Production::    unreserved_keyword_normal : LEADER */\n/*! Production::    unreserved_keyword_normal : LEADING */\n/*! Production::    unreserved_keyword_normal : LEAK */\n/*! Production::    unreserved_keyword_normal : LEAK_MOD */\n/*! Production::    unreserved_keyword_normal : LEAK_RATE */\n/*! Production::    unreserved_keyword_normal : LEAVE */\n/*! Production::    unreserved_keyword_normal : LEAVES */\n/*! Production::    unreserved_keyword_normal : LEFT */\n/*! Production::    unreserved_keyword_normal : LESS */\n/*! Production::    unreserved_keyword_normal : LEVEL */\n/*! Production::    unreserved_keyword_normal : LIB */\n/*! Production::    unreserved_keyword_normal : LIMIT */\n/*! Production::    unreserved_keyword_normal : LINEAR */\n/*! Production::    unreserved_keyword_normal : LINES */\n/*! Production::    unreserved_keyword_normal : LINESTRING */\n/*! Production::    unreserved_keyword_normal : LIST */\n/*! Production::    unreserved_keyword_normal : LISTAGG */\n/*! Production::    unreserved_keyword_normal : LIST_ */\n/*! Production::    unreserved_keyword_normal : LN */\n/*! Production::    unreserved_keyword_normal : LNNVL */\n/*! Production::    unreserved_keyword_normal : LOAD */\n/*! Production::    unreserved_keyword_normal : LOCAL */\n/*! Production::    unreserved_keyword_normal : LOCALITY */\n/*! Production::    unreserved_keyword_normal : LOCALTIMESTAMP */\n/*! Production::    unreserved_keyword_normal : LOCATION */\n/*! Production::    unreserved_keyword_normal : LOCKED */\n/*! Production::    unreserved_keyword_normal : LOCKS */\n/*! Production::    unreserved_keyword_normal : LOCK_ */\n/*! Production::    unreserved_keyword_normal : LOG */\n/*! Production::    unreserved_keyword_normal : LOGFILE */\n/*! Production::    unreserved_keyword_normal : LOGICAL_READS */\n/*! Production::    unreserved_keyword_normal : LOGONLY_REPLICA_NUM */\n/*! Production::    unreserved_keyword_normal : LOGS */\n/*! Production::    unreserved_keyword_normal : LOG_DISK_SIZE */\n/*! Production::    unreserved_keyword_normal : LONGBLOB */\n/*! Production::    unreserved_keyword_normal : LONGTEXT */\n/*! Production::    unreserved_keyword_normal : LOOP */\n/*! Production::    unreserved_keyword_normal : LOW */\n/*! Production::    unreserved_keyword_normal : LOW_PRIORITY */\n/*! Production::    unreserved_keyword_normal : LS */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Clauses for SQL Join and Key Operations\nDESCRIPTION: These production rules define optional clauses for SQL join operations and key-related operations, including join parts, key violation handling, and key/index specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_127\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_invoke_right : %epsilon */\n\n/*! Production::    opt_invoke_right : invoke_right */\n\n/*! Production::    opt_joinParts : %epsilon */\n\n/*! Production::    opt_joinParts : joinParts */\n\n/*! Production::    opt_keyViolate : %epsilon */\n\n/*! Production::    opt_keyViolate : IGNORE */\n\n/*! Production::    opt_keyViolate : REPLACE */\n\n/*! Production::    opt_key_or_index : %epsilon */\n\n/*! Production::    opt_key_or_index : key_or_index */\n```\n\n----------------------------------------\n\nTITLE: Storage Option Productions\nDESCRIPTION: Grammar rules for storage clause options including initial size, extents, and next size specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_198\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    storage_option : INITIAL_ size_option */\n/*! Production::    storage_option : MAXEXTENTS int_or_unlimited */\n/*! Production::    storage_option : MINEXTENTS INTNUM */\n/*! Production::    storage_option : NEXT size_option */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER TABLE Statement Syntax in OceanBase SQL\nDESCRIPTION: This snippet defines the grammar productions for the ALTER TABLE statement in OceanBase SQL. It covers various table-level operations such as adding/dropping constraints, renaming tables, modifying columns, and changing table options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_table_action : CONVERT TO CHARACTER SET charset_name opt_collation */\n\n/*! Production::    alter_table_action : DROP CONSTRAINT constraint_name */\n\n/*! Production::    alter_table_action : RENAME opt_to relation_factor */\n\n/*! Production::    alter_table_action : alter_column_option */\n\n/*! Production::    alter_table_action : alter_constraint_option */\n\n/*! Production::    alter_table_action : alter_foreign_key_action */\n\n/*! Production::    alter_table_action : alter_index_option */\n\n/*! Production::    alter_table_action : alter_partition_option */\n\n/*! Production::    alter_table_action : alter_tablegroup_option */\n\n/*! Production::    alter_table_action : modify_partition_info */\n\n/*! Production::    alter_table_action : opt_alter_compress_option */\n\n/*! Production::    alter_table_action : opt_set table_option_list_space_seperated */\n\n/*! Production::    alter_table_actions : %epsilon */\n\n/*! Production::    alter_table_actions : alter_table_action */\n\n/*! Production::    alter_table_actions : alter_table_actions \",\" alter_table_action */\n\n/*! Production::    alter_table_stmt : ALTER TABLE relation_factor alter_table_actions */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Options Grammar\nDESCRIPTION: Production rules for various table options such as AUTO_INCREMENT, ENGINE, CHARACTER SET, and many other table-level configuration options in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_204\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tableOption : AUTO_INCREMENT opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : AVG_ROW_LENGTH opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : CHECKSUM opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : COMPRESSION opt_MULT_ASSIGN ID */\n\n/*! Production::    tableOption : COMPRESSION opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : CONNECTION opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : DATA DIRECTORY opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : DELAY_KEY_WRITE opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : ENCRYPTION opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : ENGINE opt_MULT_ASSIGN engineName */\n\n/*! Production::    tableOption : INDEX DIRECTORY opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : INSERT_METHOD opt_MULT_ASSIGN insertMethod */\n\n/*! Production::    tableOption : KEY_BLOCK_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    tableOption : MAX_ROWS opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : MIN_ROWS opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : PACK_KEYS opt_MULT_ASSIGN DEFAULT */\n\n/*! Production::    tableOption : PACK_KEYS opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : PAGE_CHECKSUM opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : PASSWORD opt_MULT_ASSIGN STRING_LITERAL */\n\n/*! Production::    tableOption : ROW_FORMAT opt_MULT_ASSIGN rowFormat */\n\n/*! Production::    tableOption : STATS_AUTO_RECALC opt_MULT_ASSIGN DEFAULT */\n\n/*! Production::    tableOption : STATS_AUTO_RECALC opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : STATS_PERSISTENT opt_MULT_ASSIGN DEFAULT */\n\n/*! Production::    tableOption : STATS_PERSISTENT opt_MULT_ASSIGN boolNumValue */\n\n/*! Production::    tableOption : STATS_SAMPLE_PAGES opt_MULT_ASSIGN decimalLiteral */\n\n/*! Production::    tableOption : TABLESPACE uid */\n\n/*! Production::    tableOption : TABLESPACE uid tablespaceStorage */\n\n/*! Production::    tableOption : UNION opt_MULT_ASSIGN LR_BRACKET tables RR_BRACKET */\n\n/*! Production::    tableOption : commentAssign */\n\n/*! Production::    tableOption : opt_DEFAULT COLLATE opt_MULT_ASSIGN collationName */\n\n/*! Production::    tableOption : opt_DEFAULT charsetKeywords opt_MULT_ASSIGN charsetValues */\n\n/*! Production::    tableOption : tablespaceStorage */\n\n/*! Production::    tableOptions : tableOption */\n\n/*! Production::    tableOptions : tableOption COMMA tableOptions */\n```\n\n----------------------------------------\n\nTITLE: SQL DML Statement Productions\nDESCRIPTION: Grammar productions for Data Manipulation Language (DML) statements including select, insert, update, delete and other operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_54\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    dmlStatement : callStatement */\n/*! Production::    dmlStatement : deleteStatement */\n/*! Production::    dmlStatement : doStatement */\n/*! Production::    dmlStatement : handlerStatement */\n/*! Production::    dmlStatement : insertStatement */\n/*! Production::    dmlStatement : loadDataStatement */\n/*! Production::    dmlStatement : loadXmlStatement */\n/*! Production::    dmlStatement : replaceStatement */\n/*! Production::    dmlStatement : selectStatement */\n/*! Production::    dmlStatement : updateStatement */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Additional SQL Elements\nDESCRIPTION: These production rules define various SQL elements including aliases for COLUMNS/FIELDS, comment syntax, commit operations, common table expressions (CTEs), and more. They support a wide range of SQL functionality beyond just column definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    columns_or_fields : COLUMNS */\n\n/*! Production::    columns_or_fields : FIELDS */\n\n/*! Production::    commentAssign : COMMENT EQUAL_SYMBOL STRING_LITERAL */\n\n/*! Production::    commentAssign : COMMENT STRING_LITERAL */\n\n/*! Production::    commitWork : COMMIT opt_WORK */\n\n/*! Production::    commitWork : COMMIT opt_WORK AND opt_NO CHAIN */\n\n/*! Production::    commitWork : COMMIT opt_WORK opt_NO RELEASE */\n\n/*! Production::    commit_stmt : COMMIT COMMENT STRING_VALUE */\n\n/*! Production::    commit_stmt : COMMIT opt_hint_value opt_work */\n\n/*! Production::    commit_stmt : COMMIT opt_work */\n\n/*! Production::    common_cursor_attribute : FOUND */\n\n/*! Production::    common_cursor_attribute : ISOPEN */\n\n/*! Production::    common_cursor_attribute : NOTFOUND */\n\n/*! Production::    common_cursor_attribute : ROWCOUNT */\n```\n\n----------------------------------------\n\nTITLE: Bit Expression Productions in SQL Grammar\nDESCRIPTION: Grammar rules for parsing bit expressions and arithmetic operations in SQL, including operators like -, /, ^, |, DIV, MOD, etc.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    bit_expr : bit_expr \"-\" INTERVAL expr date_unit */\n/*! Production::    bit_expr : bit_expr \"-\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"/\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"^\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"|\" bit_expr */\n```\n\n----------------------------------------\n\nTITLE: MySQL Unreserved Keywords Production Declarations\nDESCRIPTION: Collection of MySQL unreserved keyword declarations using Production directives. These keywords can be used in SQL statements without requiring quotes and are part of the normal category.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_208\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : M */\n/*! Production::    unreserved_keyword_normal : MAJOR */\n/*! Production::    unreserved_keyword_normal : MANAGEMENT */\n/*! Production::    unreserved_keyword_normal : MANUAL */\n/*! Production::    unreserved_keyword_normal : MASTER */\n/*! Production::    unreserved_keyword_normal : MASTER_AUTO_POSITION */\n/*! Production::    unreserved_keyword_normal : MASTER_BIND */\n/*! Production::    unreserved_keyword_normal : MASTER_CONNECT_RETRY */\n/*! Production::    unreserved_keyword_normal : MASTER_DELAY */\n/*! Production::    unreserved_keyword_normal : MASTER_HEARTBEAT_PERIOD */\n/*! Production::    unreserved_keyword_normal : MASTER_HOST */\n/*! Production::    unreserved_keyword_normal : MASTER_LOG_FILE */\n/*! Production::    unreserved_keyword_normal : MASTER_LOG_POS */\n/*! Production::    unreserved_keyword_normal : MASTER_PASSWORD */\n/*! Production::    unreserved_keyword_normal : MASTER_PORT */\n/*! Production::    unreserved_keyword_normal : MASTER_RETRY_COUNT */\n/*! Production::    unreserved_keyword_normal : MASTER_SERVER_ID */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CA */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CAPATH */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CERT */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CIPHER */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CRL */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_CRLPATH */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_KEY */\n/*! Production::    unreserved_keyword_normal : MASTER_SSL_VERIFY_SERVER_CERT */\n/*! Production::    unreserved_keyword_normal : MASTER_USER */\n/*! Production::    unreserved_keyword_normal : MATCH */\n/*! Production::    unreserved_keyword_normal : MATCHED */\n/*! Production::    unreserved_keyword_normal : MATERIALIZED */\n/*! Production::    unreserved_keyword_normal : MAX */\n/*! Production::    unreserved_keyword_normal : MAXIMIZE */\n/*! Production::    unreserved_keyword_normal : MAX_CONNECTIONS_PER_HOUR */\n/*! Production::    unreserved_keyword_normal : MAX_CPU */\n/*! Production::    unreserved_keyword_normal : MAX_DISK_SIZE */\n/*! Production::    unreserved_keyword_normal : MAX_IOPS */\n/*! Production::    unreserved_keyword_normal : MAX_MEMORY */\n/*! Production::    unreserved_keyword_normal : MAX_QUERIES_PER_HOUR */\n/*! Production::    unreserved_keyword_normal : MAX_ROWS */\n/*! Production::    unreserved_keyword_normal : MAX_SESSION_NUM */\n/*! Production::    unreserved_keyword_normal : MAX_SIZE */\n/*! Production::    unreserved_keyword_normal : MAX_UPDATES_PER_HOUR */\n/*! Production::    unreserved_keyword_normal : MAX_USED_PART_ID */\n/*! Production::    unreserved_keyword_normal : MAX_USER_CONNECTIONS */\n/*! Production::    unreserved_keyword_normal : MEDIUM */\n/*! Production::    unreserved_keyword_normal : MEDIUMBLOB */\n/*! Production::    unreserved_keyword_normal : MEDIUMINT */\n/*! Production::    unreserved_keyword_normal : MEDIUMTEXT */\n/*! Production::    unreserved_keyword_normal : MEMBER */\n/*! Production::    unreserved_keyword_normal : MEMORY */\n/*! Production::    unreserved_keyword_normal : MEMORY_SIZE */\n/*! Production::    unreserved_keyword_normal : MEMSTORE_PERCENT */\n/*! Production::    unreserved_keyword_normal : MEMTABLE */\n/*! Production::    unreserved_keyword_normal : MERGE */\n/*! Production::    unreserved_keyword_normal : MESSAGE_TEXT */\n/*! Production::    unreserved_keyword_normal : META */\n/*! Production::    unreserved_keyword_normal : MICROSECOND */\n/*! Production::    unreserved_keyword_normal : MIDDLEINT */\n/*! Production::    unreserved_keyword_normal : MIGRATE */\n/*! Production::    unreserved_keyword_normal : MIGRATION */\n/*! Production::    unreserved_keyword_normal : MIN */\n/*! Production::    unreserved_keyword_normal : MINOR */\n/*! Production::    unreserved_keyword_normal : MINUS */\n/*! Production::    unreserved_keyword_normal : MINUTE */\n/*! Production::    unreserved_keyword_normal : MINUTE_MICROSECOND */\n/*! Production::    unreserved_keyword_normal : MINUTE_SECOND */\n/*! Production::    unreserved_keyword_normal : MINVALUE */\n/*! Production::    unreserved_keyword_normal : MIN_CPU */\n/*! Production::    unreserved_keyword_normal : MIN_IOPS */\n/*! Production::    unreserved_keyword_normal : MIN_MEMORY */\n/*! Production::    unreserved_keyword_normal : MIN_ROWS */\n/*! Production::    unreserved_keyword_normal : MOD */\n/*! Production::    unreserved_keyword_normal : MODE */\n/*! Production::    unreserved_keyword_normal : MODIFIES */\n/*! Production::    unreserved_keyword_normal : MODIFY */\n/*! Production::    unreserved_keyword_normal : MONTH */\n/*! Production::    unreserved_keyword_normal : MOVE */\n/*! Production::    unreserved_keyword_normal : MOVEMENT */\n/*! Production::    unreserved_keyword_normal : MULTILINESTRING */\n/*! Production::    unreserved_keyword_normal : MULTIPOINT */\n/*! Production::    unreserved_keyword_normal : MULTIPOLYGON */\n/*! Production::    unreserved_keyword_normal : MUTEX */\n/*! Production::    unreserved_keyword_normal : MYSQL_ERRNO */\n/*! Production::    unreserved_keyword_normal : NAME */\n/*! Production::    unreserved_keyword_normal : NAMES */\n/*! Production::    unreserved_keyword_normal : NAMESPACE */\n/*! Production::    unreserved_keyword_normal : NATIONAL */\n/*! Production::    unreserved_keyword_normal : NATURAL */\n/*! Production::    unreserved_keyword_normal : NCHAR */\n/*! Production::    unreserved_keyword_normal : NDB */\n/*! Production::    unreserved_keyword_normal : NDBCLUSTER */\n/*! Production::    unreserved_keyword_normal : NETWORK */\n/*! Production::    unreserved_keyword_normal : NEW */\n/*! Production::    unreserved_keyword_normal : NEXT */\n/*! Production::    unreserved_keyword_normal : NO */\n/*! Production::    unreserved_keyword_normal : NOARCHIVELOG */\n/*! Production::    unreserved_keyword_normal : NOAUDIT */\n/*! Production::    unreserved_keyword_normal : NOCACHE */\n/*! Production::    unreserved_keyword_normal : NOCYCLE */\n/*! Production::    unreserved_keyword_normal : NODEGROUP */\n/*! Production::    unreserved_keyword_normal : NOLOGGING */\n/*! Production::    unreserved_keyword_normal : NOMAXVALUE */\n/*! Production::    unreserved_keyword_normal : NOMINVALUE */\n/*! Production::    unreserved_keyword_normal : NONE */\n/*! Production::    unreserved_keyword_normal : NOORDER */\n/*! Production::    unreserved_keyword_normal : NOPARALLEL */\n/*! Production::    unreserved_keyword_normal : NORELY */\n/*! Production::    unreserved_keyword_normal : NORMAL */\n/*! Production::    unreserved_keyword_normal : NOVALIDATE */\n/*! Production::    unreserved_keyword_normal : NOW */\n/*! Production::    unreserved_keyword_normal : NOWAIT */\n/*! Production::    unreserved_keyword_normal : NO_WAIT */\n/*! Production::    unreserved_keyword_normal : NO_WRITE_TO_BINLOG */\n/*! Production::    unreserved_keyword_normal : NTH_VALUE */\n/*! Production::    unreserved_keyword_normal : NTILE */\n/*! Production::    unreserved_keyword_normal : NULLS */\n/*! Production::    unreserved_keyword_normal : NUMBER */\n/*! Production::    unreserved_keyword_normal : NVARCHAR */\n/*! Production::    unreserved_keyword_normal : NVARCHAR2 */\n/*! Production::    unreserved_keyword_normal : OBCONFIG_URL */\n/*! Production::    unreserved_keyword_normal : OBJECT */\n/*! Production::    unreserved_keyword_normal : OBSOLETE */\n/*! Production::    unreserved_keyword_normal : OCCUR */\n/*! Production::    unreserved_keyword_normal : OF */\n/*! Production::    unreserved_keyword_normal : OFF */\n/*! Production::    unreserved_keyword_normal : OFFSET */\n/*! Production::    unreserved_keyword_normal : OJ */\n/*! Production::    unreserved_keyword_normal : OLD */\n/*! Production::    unreserved_keyword_normal : OLD_KEY */\n/*! Production::    unreserved_keyword_normal : OLD_PASSWORD */\n/*! Production::    unreserved_keyword_normal : OLTP */\n/*! Production::    unreserved_keyword_normal : ONE */\n/*! Production::    unreserved_keyword_normal : ONE_SHOT */\n/*! Production::    unreserved_keyword_normal : ONLY */\n/*! Production::    unreserved_keyword_normal : OPEN */\n/*! Production::    unreserved_keyword_normal : OPTIMIZE */\n/*! Production::    unreserved_keyword_normal : OPTIONALLY */\n/*! Production::    unreserved_keyword_normal : OPTIONS */\n/*! Production::    unreserved_keyword_normal : ORA_ROWSCN */\n/*! Production::    unreserved_keyword_normal : ORIG_DEFAULT */\n/*! Production::    unreserved_keyword_normal : OUT */\n/*! Production::    unreserved_keyword_normal : OUTER */\n/*! Production::    unreserved_keyword_normal : OUTFILE */\n/*! Production::    unreserved_keyword_normal : OUTLINE */\n/*! Production::    unreserved_keyword_normal : OVER */\n/*! Production::    unreserved_keyword_normal : OWNER */\n/*! Production::    unreserved_keyword_normal : P */\n/*! Production::    unreserved_keyword_normal : PACK_KEYS */\n/*! Production::    unreserved_keyword_normal : PAGE */\n/*! Production::    unreserved_keyword_normal : PARALLEL */\n/*! Production::    unreserved_keyword_normal : PARAMETERS */\n/*! Production::    unreserved_keyword_normal : PARAM_ASSIGN_OPERATOR */\n/*! Production::    unreserved_keyword_normal : PARSER */\n/*! Production::    unreserved_keyword_normal : PARTIAL */\n/*! Production::    unreserved_keyword_normal : PARTITION */\n/*! Production::    unreserved_keyword_normal : PARTITIONING */\n/*! Production::    unreserved_keyword_normal : PARTITIONS */\n/*! Production::    unreserved_keyword_normal : PARTITION_ID */\n/*! Production::    unreserved_keyword_normal : PASSWORD */\n/*! Production::    unreserved_keyword_normal : PASSWORD_LOCK_TIME */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions - Basic Optional Clauses\nDESCRIPTION: Grammar productions for basic optional SQL clauses including length dimensions, limits, and semantic options\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_129\n\nLANGUAGE: grammar\nCODE:\n```\n/*! Production::    opt_lengthOneDimension : lengthOneDimension */\n/*! Production::    opt_lengthTwoDimension : %epsilon */\n/*! Production::    opt_lengthTwoDimension : lengthTwoDimension */\n/*! Production::    opt_lengthTwoOptionalDimension : %epsilon */\n/*! Production::    opt_lengthTwoOptionalDimension : lengthTwoOptionalDimension */\n/*! Production::    opt_length_semantics_i : %epsilon */\n/*! Production::    opt_length_semantics_i : BYTE */\n/*! Production::    opt_length_semantics_i : CHAR */\n/*! Production::    opt_length_semantics_i : CHARACTER */\n```\n\n----------------------------------------\n\nTITLE: SQL Unreserved Keyword Productions\nDESCRIPTION: Production rules defining SQL unreserved keywords that are allowed to be used in various contexts without requiring quotes. These keywords cover database management, SQL operations, and system functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_221\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : SESSIONTIMEZONE */\n/*! Production::    unreserved_keyword_normal : SESSION_ALIAS */\n/*! Production::    unreserved_keyword_normal : SESSION_USER */\n/*! Production::    unreserved_keyword_normal : SET_MASTER_CLUSTER */\n/*! Production::    unreserved_keyword_normal : SET_SLAVE_CLUSTER */\n/*! Production::    unreserved_keyword_normal : SET_TP */\n/*! Production::    unreserved_keyword_normal : SHARE */\n/*! Production::    unreserved_keyword_normal : SHOW */\n/*! Production::    unreserved_keyword_normal : SHRINK */\n/*! Production::    unreserved_keyword_normal : SHUTDOWN */\n/*! Production::    unreserved_keyword_normal : SIBLINGS */\n/*! Production::    unreserved_keyword_normal : SIGNAL */\n/*! Production::    unreserved_keyword_normal : SIGNED */\n/*! Production::    unreserved_keyword_normal : SIMPLE */\n/*! Production::    unreserved_keyword_normal : SIZE */\n/*! Production::    unreserved_keyword_normal : SKEWONLY */\n/*! Production::    unreserved_keyword_normal : SLAVE */\n/*! Production::    unreserved_keyword_normal : SLOT_IDX */\n/*! Production::    unreserved_keyword_normal : SLOW */\n/*! Production::    unreserved_keyword_normal : SNAPSHOT */\n/*! Production::    unreserved_keyword_normal : SOCKET */\n/*! Production::    unreserved_keyword_normal : SOME */\n/*! Production::    unreserved_keyword_normal : SONAME */\n/*! Production::    unreserved_keyword_normal : SOUNDS */\n/*! Production::    unreserved_keyword_normal : SOURCE */\n/*! Production::    unreserved_keyword_normal : SPACE */\n/*! Production::    unreserved_keyword_normal : SPATIAL */\n/*! Production::    unreserved_keyword_normal : SPECIFIC */\n/*! Production::    unreserved_keyword_normal : SPFILE */\n/*! Production::    unreserved_keyword_normal : SPLIT */\n/*! Production::    unreserved_keyword_normal : SQLEXCEPTION */\n/*! Production::    unreserved_keyword_normal : SQLWARNING */\n/*! Production::    unreserved_keyword_normal : SQL_AFTER_GTIDS */\n/*! Production::    unreserved_keyword_normal : SQL_AFTER_MTS_GAPS */\n/*! Production::    unreserved_keyword_normal : SQL_BEFORE_GTIDS */\n/*! Production::    unreserved_keyword_normal : SQL_BIG_RESULT */\n/*! Production::    unreserved_keyword_normal : SQL_BUFFER_RESULT */\n/*! Production::    unreserved_keyword_normal : SQL_CACHE */\n/*! Production::    unreserved_keyword_normal : SQL_CALC_FOUND_ROW */\n/*! Production::    unreserved_keyword_normal : SQL_ID */\n/*! Production::    unreserved_keyword_normal : SQL_NO_CACHE */\n/*! Production::    unreserved_keyword_normal : SQL_SMALL_RESULT */\n/*! Production::    unreserved_keyword_normal : SQL_THREAD */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_DAY */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_HOUR */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_MINUTE */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_MONTH */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_QUARTER */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_SECOND */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_WEEK */\n/*! Production::    unreserved_keyword_normal : SQL_TSI_YEAR */\n/*! Production::    unreserved_keyword_normal : SRID */\n/*! Production::    unreserved_keyword_normal : SSL */\n/*! Production::    unreserved_keyword_normal : STACKED */\n/*! Production::    unreserved_keyword_normal : STANDBY */\n/*! Production::    unreserved_keyword_normal : START */\n/*! Production::    unreserved_keyword_normal : STARTING */\n/*! Production::    unreserved_keyword_normal : STARTS */\n/*! Production::    unreserved_keyword_normal : STAT */\n/*! Production::    unreserved_keyword_normal : STATEMENTS */\n/*! Production::    unreserved_keyword_normal : STATISTICS */\n/*! Production::    unreserved_keyword_normal : STATS_AUTO_RECALC */\n/*! Production::    unreserved_keyword_normal : STATS_PERSISTENT */\n/*! Production::    unreserved_keyword_normal : STATS_SAMPLE_PAGES */\n/*! Production::    unreserved_keyword_normal : STATUS */\n/*! Production::    unreserved_keyword_normal : STD */\n/*! Production::    unreserved_keyword_normal : STDDEV */\n/*! Production::    unreserved_keyword_normal : STDDEV_POP */\n/*! Production::    unreserved_keyword_normal : STDDEV_SAMP */\n/*! Production::    unreserved_keyword_normal : STOP */\n/*! Production::    unreserved_keyword_normal : STORAGE */\n/*! Production::    unreserved_keyword_normal : STORAGE_FORMAT_VERSION */\n/*! Production::    unreserved_keyword_normal : STORAGE_FORMAT_WORK_VERSION */\n/*! Production::    unreserved_keyword_normal : STORED */\n/*! Production::    unreserved_keyword_normal : STORING */\n/*! Production::    unreserved_keyword_normal : STRAIGHT_JOIN */\n/*! Production::    unreserved_keyword_normal : STRING */\n/*! Production::    unreserved_keyword_normal : STRONG */\n/*! Production::    unreserved_keyword_normal : SUBCLASS_ORIGIN */\n/*! Production::    unreserved_keyword_normal : SUBDATE */\n/*! Production::    unreserved_keyword_normal : SUBJECT */\n/*! Production::    unreserved_keyword_normal : SUBMULTISET */\n/*! Production::    unreserved_keyword_normal : SUBPARTITION */\n/*! Production::    unreserved_keyword_normal : SUBPARTITIONS */\n/*! Production::    unreserved_keyword_normal : SUBSTR */\n/*! Production::    unreserved_keyword_normal : SUBSTRING */\n/*! Production::    unreserved_keyword_normal : SUCCESSFUL */\n/*! Production::    unreserved_keyword_normal : SUM */\n/*! Production::    unreserved_keyword_normal : SUPER */\n/*! Production::    unreserved_keyword_normal : SUSPEND */\n/*! Production::    unreserved_keyword_normal : SWAPS */\n/*! Production::    unreserved_keyword_normal : SWITCH */\n/*! Production::    unreserved_keyword_normal : SWITCHES */\n/*! Production::    unreserved_keyword_normal : SWITCHOVER */\n/*! Production::    unreserved_keyword_normal : SYNCHRONIZATION */\n/*! Production::    unreserved_keyword_normal : SYSBACKUP */\n/*! Production::    unreserved_keyword_normal : SYSDATE */\n/*! Production::    unreserved_keyword_normal : SYSDBA */\n/*! Production::    unreserved_keyword_normal : SYSKM */\n/*! Production::    unreserved_keyword_normal : SYSOPER */\n/*! Production::    unreserved_keyword_normal : SYSTEM */\n/*! Production::    unreserved_keyword_normal : SYSTEM_USER */\n/*! Production::    unreserved_keyword_normal : SYSTIMESTAMP */\n/*! Production::    unreserved_keyword_normal : SYS_CONNECT_BY_PATH */\n/*! Production::    unreserved_keyword_normal : T */\n/*! Production::    unreserved_keyword_normal : TABLEGROUP */\n/*! Production::    unreserved_keyword_normal : TABLEGROUPS */\n/*! Production::    unreserved_keyword_normal : TABLEGROUP_ID */\n/*! Production::    unreserved_keyword_normal : TABLES */\n/*! Production::    unreserved_keyword_normal : TABLESPACE */\n/*! Production::    unreserved_keyword_normal : TABLET */\n/*! Production::    unreserved_keyword_normal : TABLET_ID */\n/*! Production::    unreserved_keyword_normal : TABLET_MAX_SIZE */\n/*! Production::    unreserved_keyword_normal : TABLET_SIZE */\n/*! Production::    unreserved_keyword_normal : TABLE_CHECKSUM */\n/*! Production::    unreserved_keyword_normal : TABLE_ID */\n/*! Production::    unreserved_keyword_normal : TABLE_MODE */\n/*! Production::    unreserved_keyword_normal : TABLE_NAME */\n/*! Production::    unreserved_keyword_normal : TASK */\n/*! Production::    unreserved_keyword_normal : TEMPLATE */\n/*! Production::    unreserved_keyword_normal : TEMPORARY */\n/*! Production::    unreserved_keyword_normal : TEMPTABLE */\n/*! Production::    unreserved_keyword_normal : TENANT */\n/*! Production::    unreserved_keyword_normal : TENANT_ID */\n/*! Production::    unreserved_keyword_normal : TERMINATED */\n/*! Production::    unreserved_keyword_normal : TEXT */\n/*! Production::    unreserved_keyword_normal : THAN */\n/*! Production::    unreserved_keyword_normal : THROTTLE */\n/*! Production::    unreserved_keyword_normal : TIES */\n/*! Production::    unreserved_keyword_normal : TIME */\n/*! Production::    unreserved_keyword_normal : TIMES */\n/*! Production::    unreserved_keyword_normal : TIMESTAMP */\n/*! Production::    unreserved_keyword_normal : TIMESTAMPADD */\n/*! Production::    unreserved_keyword_normal : TIMESTAMPDIFF */\n/*! Production::    unreserved_keyword_normal : TIMEZONE_ABBR */\n/*! Production::    unreserved_keyword_normal : TIMEZONE_HOUR */\n/*! Production::    unreserved_keyword_normal : TIMEZONE_MINUTE */\n/*! Production::    unreserved_keyword_normal : TIMEZONE_REGION */\n/*! Production::    unreserved_keyword_normal : TIME_ZONE_INFO */\n/*! Production::    unreserved_keyword_normal : TINYBLOB */\n/*! Production::    unreserved_keyword_normal : TINYTEXT */\n/*! Production::    unreserved_keyword_normal : TOP_K_FRE_HIST */\n/*! Production::    unreserved_keyword_normal : TP_NAME */\n/*! Production::    unreserved_keyword_normal : TP_NO */\n/*! Production::    unreserved_keyword_normal : TRACE */\n/*! Production::    unreserved_keyword_normal : TRADITIONAL */\n/*! Production::    unreserved_keyword_normal : TRAILING */\n/*! Production::    unreserved_keyword_normal : TRANSACTION */\n/*! Production::    unreserved_keyword_normal : TRIGGERS */\n/*! Production::    unreserved_keyword_normal : TRIM */\n/*! Production::    unreserved_keyword_normal : TRUNCATE */\n/*! Production::    unreserved_keyword_normal : TYPE */\n/*! Production::    unreserved_keyword_normal : TYPES */\n/*! Production::    unreserved_keyword_normal : UNBOUNDED */\n/*! Production::    unreserved_keyword_normal : UNCOMMITTED */\n/*! Production::    unreserved_keyword_normal : UNDEFINED */\n/*! Production::    unreserved_keyword_normal : UNDO */\n/*! Production::    unreserved_keyword_normal : UNDOFILE */\n/*! Production::    unreserved_keyword_normal : UNDO_BUFFER_SIZE */\n/*! Production::    unreserved_keyword_normal : UNICODE */\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Options in SQL\nDESCRIPTION: These productions define various transaction options and levels in SQL, including isolation levels, read-only and read-write modes, and consistent snapshot options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_201\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    transactionLevel : READ COMMITTED */\n\n/*! Production::    transactionLevel : READ UNCOMMITTED */\n\n/*! Production::    transactionLevel : REPEATABLE READ */\n\n/*! Production::    transactionLevel : SERIALIZABLE */\n\n/*! Production::    transactionLevelBase : COMMITTED */\n\n/*! Production::    transactionLevelBase : REPEATABLE */\n\n/*! Production::    transactionLevelBase : SERIALIZABLE */\n\n/*! Production::    transactionLevelBase : UNCOMMITTED */\n\n/*! Production::    transactionMode : READ ONLY */\n\n/*! Production::    transactionMode : READ WRITE */\n\n/*! Production::    transactionMode : WITH CONSISTENT SNAPSHOT */\n\n/*! Production::    transactionModes : transactionMode */\n\n/*! Production::    transactionModes : transactionMode COMMA transactionModes */\n\n/*! Production::    transactionOption : ISOLATION LEVEL transactionLevel */\n\n/*! Production::    transactionOption : READ ONLY */\n\n/*! Production::    transactionOption : READ WRITE */\n\n/*! Production::    transactionOptions : transactionOption */\n\n/*! Production::    transactionOptions : transactionOption COMMA transactionOptions */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Factor Grammar Productions in SQL\nDESCRIPTION: These productions define various forms of table factors in SQL, including parenthesized references, subqueries, and simple table names.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_207\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    table_factor : \"(\" table_reference \")\" */\n\n/*! Production::    table_factor : \"(\" table_references \")\" */\n\n/*! Production::    table_factor : TABLE \"(\" simple_expr \")\" */\n\n/*! Production::    table_factor : TABLE \"(\" simple_expr \")\" relation_name */\n\n/*! Production::    table_factor : select_with_parens */\n\n/*! Production::    table_factor : select_with_parens use_flashback */\n\n/*! Production::    table_factor : table_subquery */\n\n/*! Production::    table_factor : tbl_name */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER, CHANGE, and MODIFY Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for ALTER, CHANGE, and MODIFY operations, which are common keywords used in database modification statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_or_change_or_modify : ALTER */\n\n/*! Production::    alter_or_change_or_modify : CHANGE */\n\n/*! Production::    alter_or_change_or_modify : MODIFY */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Common Table Expressions\nDESCRIPTION: These production rules define the syntax for Common Table Expressions (CTEs) in SQL, which allow naming and referencing temporary result sets. They support various SQL features like search clauses, cycle detection, and ordered subqueries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_no_parens \")\" */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_no_parens \")\" opt_search_clause opt_cycle_clause */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_with_parens \")\" */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" select_with_parens \")\" opt_search_clause opt_cycle_clause */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" subquery order_by opt_fetch_next \")\" opt_search_clause opt_cycle_clause */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" with_select \")\" */\n\n/*! Production::    common_table_expr : relation_name opt_column_alias_name_list AS \"(\" with_select \")\" opt_search_clause opt_cycle_clause */\n```\n\n----------------------------------------\n\nTITLE: Character Set and Collation Syntax in SQL\nDESCRIPTION: These productions define various syntax elements related to character sets and collations in SQL, including introducers and specifiers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    charsetValues : DEFAULT */\n\n/*! Production::    charsetValues : charsetName */\n\n/*! Production::    charset_introducer : _BINARY */\n\n/*! Production::    charset_introducer : _GB18030 */\n\n/*! Production::    charset_introducer : _GBK */\n\n/*! Production::    charset_introducer : _LATIN1 */\n\n/*! Production::    charset_introducer : _UTF16 */\n\n/*! Production::    charset_introducer : _UTF8 */\n\n/*! Production::    charset_introducer : _UTF8MB4 */\n\n/*! Production::    charset_key : CHARACTER SET */\n\n/*! Production::    charset_key : CHARSET */\n\n/*! Production::    charset_name : BINARY */\n\n/*! Production::    charset_name : NAME_OB */\n\n/*! Production::    charset_name : STRING */\n\n/*! Production::    charset_name : STRING_VALUE */\n\n/*! Production::    charset_name : identifier */\n\n/*! Production::    charset_name_or_default : DEFAULT */\n\n/*! Production::    charset_name_or_default : charset_name */\n\n/*! Production::    collateConfig : COLLATE collationName */\n\n/*! Production::    collation : COLLATE collation_name */\n\n/*! Production::    collationName : uid */\n\n/*! Production::    collation_name : NAME_OB */\n\n/*! Production::    collation_name : STRING */\n\n/*! Production::    collation_name : STRING_VALUE */\n\n/*! Production::    collation_name : identifier */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL User Authentication Productions\nDESCRIPTION: These production rules specify the syntax for user authentication options in SQL, including user creation, identification methods, and password policies.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_213\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    userAuthOption : userName */\n\n/*! Production::    userAuthOption : userName IDENTIFIED BY PASSWORD STRING_LITERAL */\n\n/*! Production::    userAuthOption : userName IDENTIFIED BY STRING_LITERAL */\n\n/*! Production::    userAuthOption : userName IDENTIFIED WITH authPlugin */\n\n/*! Production::    userAuthOption : userName IDENTIFIED WITH authPlugin AS STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parsing Productions for Partition Definitions\nDESCRIPTION: This snippet defines parsing productions for various partition definition constructs in SQL, including partition by list, range, hash, and key methods.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_147\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    partitionDefinition : PARTITION uid VALUES IN LR_BRACKET partitionDefinerAtoms RR_BRACKET opt_partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES IN LR_BRACKET partitionDefinerVectors RR_BRACKET opt_partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES LESS THAN LR_BRACKET partitionDefinerAtoms RR_BRACKET opt_partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES LESS THAN partitionDefinerAtom opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid VALUES LESS THAN partitionDefinerAtom partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinition : PARTITION uid opt_partitionOptions opt_subpartitionDefinitions */\n\n/*! Production::    partitionDefinitionList : partitionDefinition */\n\n/*! Production::    partitionDefinitionList : partitionDefinition COMMA partitionDefinitionList */\n\n/*! Production::    partitionDefinitions : PARTITION BY partitionFunctionDefinition opt_partitionCount */\n\n/*! Production::    partitionDefinitions : PARTITION BY partitionFunctionDefinition opt_partitionCount LR_BRACKET partitionDefinitionList RR_BRACKET */\n\n/*! Production::    partitionDefinitions : PARTITION BY partitionFunctionDefinition opt_partitionCount SUBPARTITION BY subpartitionFunctionDefinition opt_subPartitionCount */\n\n/*! Production::    partitionDefinitions : PARTITION BY partitionFunctionDefinition opt_partitionCount SUBPARTITION BY subpartitionFunctionDefinition opt_subPartitionCount LR_BRACKET partitionDefinitionList RR_BRACKET */\n\n/*! Production::    partitionFunctionDefinition : LIST COLUMNS LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    partitionFunctionDefinition : LIST LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    partitionFunctionDefinition : RANGE COLUMNS LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    partitionFunctionDefinition : RANGE LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    partitionFunctionDefinition : opt_LINEAR HASH LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    partitionFunctionDefinition : opt_LINEAR KEY opt_linearKeyAlgType LR_BRACKET uidList RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: Transaction Grammar Rules\nDESCRIPTION: Grammar production rules for transaction-related statements including isolation levels, access modes, and transaction characteristics\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_215\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    transactionLevel : READ COMMITTED */\n/*! Production::    transactionLevel : READ UNCOMMITTED */\n/*! Production::    transactionLevel : REPEATABLE READ */\n/*! Production::    transactionLevel : SERIALIZABLE */\n/*! Production::    transactionMode : READ ONLY */\n/*! Production::    transactionMode : READ WRITE */\n/*! Production::    transactionMode : WITH CONSISTENT SNAPSHOT */\n```\n\n----------------------------------------\n\nTITLE: Expression Production Rules\nDESCRIPTION: Grammar rules for SQL expressions including operators, functions, predicates and atoms.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_65\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    expr : \"(\" expr \")\" */\n/*! Production::    expr : NOT expr */\n/*! Production::    expr : bit_expr */\n/*! Production::    expr : bool_pri */\n/*! Production::    expr : expr AND expr */\n/*! Production::    expr : expr OR expr */\n/*! Production::    expr : expr XOR expr */\n```\n\n----------------------------------------\n\nTITLE: Tenant Configuration Productions\nDESCRIPTION: Grammar rules for tenant-related configurations including naming, options, and resource management settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_211\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    tenant : USER_VARIABLE */\n/*! Production::    tenant_name : TENANT opt_equal_mark relation_name_or_string */\n/*! Production::    tenant_option : COLLATE opt_equal_mark collation_name */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER SESSION Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for altering session parameters, including setting the current schema and isolation level.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_session_set_clause : set_system_parameter_clause_list */\n\n/*! Production::    alter_session_stmt : ALTER SESSION SET CURRENT_SCHEMA COMP_EQ current_schema */\n\n/*! Production::    alter_session_stmt : ALTER SESSION SET ISOLATION_LEVEL COMP_EQ session_isolation_level */\n\n/*! Production::    alter_session_stmt : ALTER SESSION SET alter_session_set_clause */\n```\n\n----------------------------------------\n\nTITLE: CREATE WITH Optional Hints Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for CREATE statements with optional hints, used across many create statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_54\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_with_opt_hint : CREATE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_with_opt_hint : CREATE_HINT_BEGIN hint_list_with_end */\n```\n\n----------------------------------------\n\nTITLE: Privilege Object Productions\nDESCRIPTION: Grammar rules specifying valid privilege object types\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_159\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    privilegeObject : %epsilon */\n/*! Production::    privilegeObject : FUNCTION */\n/*! Production::    privilegeObject : PROCEDURE */\n/*! Production::    privilegeObject : TABLE */\n```\n\n----------------------------------------\n\nTITLE: Defining Values Clause Production Rules in SQL\nDESCRIPTION: These rules define the syntax for VALUES clauses in SQL, including insert value lists, subqueries, and object access references.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_217\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    values_clause : VALUES insert_vals_list */\n\n/*! Production::    values_clause : VALUES obj_access_ref_normal */\n\n/*! Production::    values_clause : select_stmt */\n\n/*! Production::    values_clause : subquery opt_order_by opt_fetch_next */\n\n/*! Production::    values_clause : value_or_values insert_vals_list */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Prepared Statements\nDESCRIPTION: Grammar rules defining the syntax for prepared statements in SQL, including PREPARE, EXECUTE, and DEALLOCATE operations for statement preparation and execution.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_153\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    preparable_stmt : USER_VARIABLE */\n\n/*! Production::    preparable_stmt : delete_stmt */\n\n/*! Production::    preparable_stmt : insert_stmt */\n\n/*! Production::    preparable_stmt : merge_stmt */\n\n/*! Production::    preparable_stmt : select_stmt */\n\n/*! Production::    preparable_stmt : text_string */\n\n/*! Production::    preparable_stmt : update_stmt */\n\n/*! Production::    prepareStatement : PREPARE uid FROM LOCAL_ID */\n\n/*! Production::    prepareStatement : PREPARE uid FROM STRING_LITERAL */\n\n/*! Production::    prepare_stmt : PREPARE stmt_name FROM preparable_stmt */\n\n/*! Production::    preparedStatement : deallocatePrepare */\n\n/*! Production::    preparedStatement : executeStatement */\n\n/*! Production::    preparedStatement : prepareStatement */\n```\n\n----------------------------------------\n\nTITLE: SQL Function Production Rules\nDESCRIPTION: Production rules defining SQL function syntax including GET_FORMAT, LOCALTIME, POSITION, TRIM, VALUES, WEIGHT_STRING, and substring functions. These rules specify the grammar patterns for function calls with various parameter structures.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_159\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    specificFunction : GET_FORMAT LR_BRACKET datetimeFormat COMMA stringLiteral RR_BRACKET */\n\n/*! Production::    specificFunction : LOCALTIME */\n\n/*! Production::    specificFunction : LOCALTIME LR_BRACKET RR_BRACKET */\n\n/*! Production::    specificFunction : POSITION LR_BRACKET stringOrExpr IN stringOrExpr RR_BRACKET */\n\n/*! Production::    specificFunction : TRIM LR_BRACKET stringOrExpr FROM stringOrExpr RR_BRACKET */\n\n/*! Production::    specificFunction : VALUES LR_BRACKET fullColumnName RR_BRACKET */\n\n/*! Production::    specificFunction : WEIGHT_STRING LR_BRACKET stringOrExpr opt_levelsInWeightString RR_BRACKET */\n\n/*! Production::    specificFunction : substringKeyword LR_BRACKET stringOrExpr FROM decimalOrExpr FOR decimalOrExpr RR_BRACKET */\n\n/*! Production::    specificFunction : substringKeyword LR_BRACKET stringOrExpr FROM decimalOrExpr RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: SHOW Filter Production Rules in SQL\nDESCRIPTION: Grammar production rules for filtering SHOW statement results using LIKE or WHERE clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_137\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showFilter : LIKE STRING_LITERAL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showFilter : WHERE expression */\n```\n\n----------------------------------------\n\nTITLE: Defining Complex SQL Rules with Regular Expressions\nDESCRIPTION: This snippet demonstrates more complex rule definitions that use regular expressions to match specific patterns in SQL queries, such as date formats and interval specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_240\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       Date{whitespace}?\"[^\\\"]*\" */\n\n/*! Rule::       Date{whitespace}?'[^']*' */\n\n/*! Rule::       Date{whitespace}?'[^\\']*' */\n\n/*! Rule::       Interval{whitespace}?'[^\\']*'{space}*(day|hour|minute|second)({interval_pricision}{space}*|{space}+)to{space}+(day|hour|minute|second{interval_pricision}?) */\n```\n\n----------------------------------------\n\nTITLE: Specific Character Set Names in SQL\nDESCRIPTION: These productions list specific character set names supported in SQL, including various encodings like ASCII, UTF-8, and language-specific character sets.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    charsetNameBase : ARMSCII8 */\n\n/*! Production::    charsetNameBase : ASCII */\n\n/*! Production::    charsetNameBase : BIG5 */\n\n/*! Production::    charsetNameBase : CP1250 */\n\n/*! Production::    charsetNameBase : CP1251 */\n\n/*! Production::    charsetNameBase : CP1256 */\n\n/*! Production::    charsetNameBase : CP1257 */\n\n/*! Production::    charsetNameBase : CP850 */\n\n/*! Production::    charsetNameBase : CP852 */\n\n/*! Production::    charsetNameBase : CP866 */\n\n/*! Production::    charsetNameBase : CP932 */\n\n/*! Production::    charsetNameBase : DEC8 */\n\n/*! Production::    charsetNameBase : EUCJPMS */\n\n/*! Production::    charsetNameBase : EUCKR */\n\n/*! Production::    charsetNameBase : GB2312 */\n\n/*! Production::    charsetNameBase : GBK */\n\n/*! Production::    charsetNameBase : GEOSTD8 */\n\n/*! Production::    charsetNameBase : GREEK */\n\n/*! Production::    charsetNameBase : HEBREW */\n\n/*! Production::    charsetNameBase : HP8 */\n\n/*! Production::    charsetNameBase : KEYBCS2 */\n\n/*! Production::    charsetNameBase : KOI8R */\n\n/*! Production::    charsetNameBase : KOI8U */\n\n/*! Production::    charsetNameBase : LATIN1 */\n\n/*! Production::    charsetNameBase : LATIN2 */\n\n/*! Production::    charsetNameBase : LATIN5 */\n\n/*! Production::    charsetNameBase : LATIN7 */\n\n/*! Production::    charsetNameBase : MACCE */\n\n/*! Production::    charsetNameBase : MACROMAN */\n\n/*! Production::    charsetNameBase : SJIS */\n\n/*! Production::    charsetNameBase : SWE7 */\n\n/*! Production::    charsetNameBase : TIS620 */\n\n/*! Production::    charsetNameBase : UCS2 */\n\n/*! Production::    charsetNameBase : UJIS */\n\n/*! Production::    charsetNameBase : UTF16 */\n\n/*! Production::    charsetNameBase : UTF16LE */\n\n/*! Production::    charsetNameBase : UTF32 */\n\n/*! Production::    charsetNameBase : UTF8 */\n\n/*! Production::    charsetNameBase : UTF8MB3 */\n\n/*! Production::    charsetNameBase : UTF8MB4 */\n```\n\n----------------------------------------\n\nTITLE: Field Definitions Grammar Rules\nDESCRIPTION: Grammar rules for field definitions including field names, options, variables and termination conditions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_79\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_name : identifier */\n/*! Production::    field_opt : %epsilon */\n/*! Production::    field_opt : columns_or_fields field_term_list */\n/*! Production::    field_or_vars : USER_VARIABLE */\n/*! Production::    field_or_vars : column_definition_ref */\n```\n\n----------------------------------------\n\nTITLE: Package and Parallel Processing Grammar\nDESCRIPTION: Grammar productions for package blocks and parallel processing directives including parallel hints and options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_107\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    package_block : PACKAGE_P pl_schema_name opt_proc_clause is_or_as opt_decl_stmt_list END_KEY opt_tail_name */\n/*! Production::    parallel_enable : PARALLEL_ENABLE \"(\" PARTITION argument BY partition_by \")\" */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Keyword Identifier: MASTER_LOG_POS\nDESCRIPTION: This snippet defines the MASTER_LOG_POS keyword identifier used in MySQL replication to specify the position in the master's binary log file.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_186\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simpleId : MASTER_LOG_POS */\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Handling Production Rules in SQL\nDESCRIPTION: These rules define the syntax for handling UUIDs in SQL, including the structure of UUID parts and sets of UUIDs.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_216\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    uuidRight : COLON_SYMB decimalLiteral MINUS decimalLiteral */\n\n/*! Production::    uuidRight : COLON_SYMB decimalLiteral MINUS decimalLiteral uuidRight */\n\n/*! Production::    uuidSet : decimalLiteral MINUS decimalLiteral MINUS decimalLiteral MINUS decimalLiteral MINUS decimalLiteral uuidRight */\n\n/*! Production::    uuidSets : uuidSet */\n\n/*! Production::    uuidSets : uuidSet COMMA uuidSets */\n```\n\n----------------------------------------\n\nTITLE: CREATE PROFILE Statement Grammar Rule in SQL\nDESCRIPTION: Grammar production rule for creating user profiles with password parameter limitations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_42\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_profile_stmt : CREATE PROFILE profile_name LIMIT password_parameters */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for SHRINK Keyword\nDESCRIPTION: This rule defines the SQL keyword 'SHRINK', which is typically used in database management operations to reduce the size of database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_242\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       SHRINK */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Field or Variables List\nDESCRIPTION: Specifies the grammar production for a single field or variable in a list.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_79\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_or_vars_list : field_or_vars */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Function Name Base Productions for Date and Encryption\nDESCRIPTION: This snippet defines production rules for SQL function name bases related to date/time operations, encryption, and geometric functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_89\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    functionNameBase : DATE */\n\n/*! Production::    functionNameBase : DATEDIFF */\n\n/*! Production::    functionNameBase : DATE_FORMAT */\n\n/*! Production::    functionNameBase : DAY */\n\n/*! Production::    functionNameBase : DAYNAME */\n\n/*! Production::    functionNameBase : DAYOFMONTH */\n\n/*! Production::    functionNameBase : DAYOFWEEK */\n\n/*! Production::    functionNameBase : DAYOFYEAR */\n\n/*! Production::    functionNameBase : DECODE */\n\n/*! Production::    functionNameBase : DEGREES */\n\n/*! Production::    functionNameBase : DES_DECRYPT */\n\n/*! Production::    functionNameBase : DES_ENCRYPT */\n\n/*! Production::    functionNameBase : DIMENSION */\n\n/*! Production::    functionNameBase : DISJOINT */\n\n/*! Production::    functionNameBase : ELT */\n\n/*! Production::    functionNameBase : ENCODE */\n\n/*! Production::    functionNameBase : ENCRYPT */\n\n/*! Production::    functionNameBase : ENDPOINT */\n\n/*! Production::    functionNameBase : ENVELOPE */\n\n/*! Production::    functionNameBase : EQUALS */\n\n/*! Production::    functionNameBase : EXP */\n\n/*! Production::    functionNameBase : EXPORT_SET */\n\n/*! Production::    functionNameBase : EXTERIORRING */\n\n/*! Production::    functionNameBase : EXTRACTVALUE */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Indexes Grammar\nDESCRIPTION: Production rules for table indexes, including how table names and index definitions are structured in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_203\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tableIndexes : tableName */\n\n/*! Production::    tableIndexes : tableName opt_tableConstraintFormat LR_BRACKET uidList RR_BRACKET */\n\n/*! Production::    tableIndexesList : tableIndexes */\n\n/*! Production::    tableIndexesList : tableIndexes COMMA tableIndexesList */\n\n/*! Production::    tableName : fullId */\n```\n\n----------------------------------------\n\nTITLE: Show Statement Productions\nDESCRIPTION: Grammar rules defining various forms of SHOW statements including status, variables and engines\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_149\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    show_stmt : SHOW opt_scope STATUS opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_scope VARIABLES opt_show_condition */\n\n/*! Production::    show_stmt : SHOW opt_storage ENGINES */\n```\n\n----------------------------------------\n\nTITLE: SQL Index Definition Productions\nDESCRIPTION: Grammar rules for defining various types of indexes including FULLTEXT, SPATIAL, and standard indexes with their constraints and options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_95\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    indexColumnDefinition : FULLTEXT opt_tableConstraintFormat opt_uid indexColumnNames opt_indexOptions */\n\n/*! Production::    indexColumnDefinition : SPATIAL opt_tableConstraintFormat opt_uid indexColumnNames opt_indexOptions */\n\n/*! Production::    indexColumnDefinition : tableConstraintFormat opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    indexColumnName : uid LR_BRACKET decimalLiteral RR_BRACKET opt_ascOrDesc */\n\n/*! Production::    indexColumnName : uid opt_ascOrDesc */\n\n/*! Production::    indexColumnNameList : indexColumnName */\n\n/*! Production::    indexColumnNameList : indexColumnName COMMA indexColumnNameList */\n\n/*! Production::    indexColumnNames : LR_BRACKET indexColumnNameList RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for Field or Variables List Continuation\nDESCRIPTION: Specifies the grammar production for continuing a list of fields or variables.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_80\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    field_or_vars_list : field_or_vars_list \",\" field_or_vars */\n```\n\n----------------------------------------\n\nTITLE: Declaring MySQL Function Names with Production Directive\nDESCRIPTION: These directives appear to define MySQL function names for a parser or compiler. Each line declares a different built-in MySQL function using a consistent Production directive format. These declarations likely serve as identifiers for function recognition in a SQL parsing system.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_91\n\nLANGUAGE: C\nCODE:\n```\n/*! Production::    functionNameBase : ISCLOSED */\n```\n\n----------------------------------------\n\nTITLE: Window Function Productions\nDESCRIPTION: Grammar rules for window functions including aggregate functions like COUNT, AVG, and statistical functions with OVER clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_227\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : APPROX_COUNT_DISTINCT \"(\" expr_list \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : AVG \"(\" opt_distinct_or_all bit_expr \")\" OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : COUNT \"(\" DISTINCT expr_list \")\" OVER new_generalized_window_clause */\n\n/*! Production::    window_function : CUME_DIST \"(\" \")\" OVER \"(\" generalized_window_clause \")\"\n```\n\n----------------------------------------\n\nTITLE: CREATE KEYSTORE Statement Grammar Rule in SQL\nDESCRIPTION: Grammar production rule for creating a keystore with password identification for key management.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_keystore_stmt : ADMINISTER KEY MANAGEMENT CREATE KEYSTORE relation_name IDENTIFIED BY password */\n```\n\n----------------------------------------\n\nTITLE: SQL Query Hint Productions\nDESCRIPTION: Grammar rules for SQL query optimization hints including parallel execution, join methods, and execution control options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_88\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    hint_option : PARALLEL \"(\" INTNUM \")\" */\n/*! Production::    hint_option : NO_USE_HASH \"(\" qb_name_option relation_factor_in_use_join_hint_list \")\" */\n/*! Production::    hint_option : QUERY_TIMEOUT \"(\" INTNUM \")\" */\n```\n\n----------------------------------------\n\nTITLE: SQL Handler Statement Productions\nDESCRIPTION: Grammar rules defining SQL handler operations including OPEN, CLOSE, READ operations with various options and conditions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_86\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    handlerAction : UNDO */\n/*! Production::    handlerCloseStatement : HANDLER tableName CLOSE */\n/*! Production::    handlerOpenStatement : HANDLER tableName OPEN */\n/*! Production::    handlerReadStatement : HANDLER tableName READ FIRST opt_whereClause opt_limitClause */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Production Rules for Limit Expressions\nDESCRIPTION: These rules define the syntax for limit expressions in SQL queries, including placeholder parameters and column references.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_95\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    limit_expr : QUESTIONMARK */\n\n/*! Production::    limit_expr : column_ref */\n```\n\n----------------------------------------\n\nTITLE: SQL Interval Type Productions\nDESCRIPTION: Grammar rules defining interval types and expressions for time-based operations\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_80\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    intervalType : DAY_HOUR */\n/*! Production::    intervalType : DAY_MICROSECOND */\n/*! Production::    intervalType : DAY_MINUTE */\n/*! Production::    intervalType : DAY_SECOND */\n/*! Production::    intervalType : HOUR_MICROSECOND */\n/*! Production::    intervalType : HOUR_MINUTE */\n/*! Production::    intervalType : HOUR_SECOND */\n/*! Production::    intervalType : MINUTE_MICROSECOND */\n/*! Production::    intervalType : MINUTE_SECOND */\n/*! Production::    intervalType : SECOND_MICROSECOND */\n/*! Production::    intervalType : YEAR */\n/*! Production::    intervalType : YEAR_MONTH */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production Rules\nDESCRIPTION: This snippet showcases multiple production rules for SQL grammar, including basic statement structures, literal definitions, function expressions, and various SQL clauses. These rules are likely used in a parser generator to create a SQL parser.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    $accept : pl_entry $end */\n\n/*! Production::    $accept : root $end */\n\n/*! Production::    $accept : sql_stmt $end */\n\n/*! Production::    HEXADECIMAL_LITERALs : HEXADECIMAL_LITERAL */\n\n/*! Production::    HEXADECIMAL_LITERALs : HEXADECIMAL_LITERAL HEXADECIMAL_LITERALs */\n\n/*! Production::    STRING_LITERALList : STRING_LITERAL */\n\n/*! Production::    STRING_LITERALList : STRING_LITERAL COMMA STRING_LITERALList */\n\n/*! Production::    STRING_LITERALs : STRING_LITERAL */\n\n/*! Production::    STRING_LITERALs : STRING_LITERAL STRING_LITERALs */\n\n/*! Production::    access_func_expr : access_func_expr_count */\n\n/*! Production::    access_func_expr : exists_function_name \"(\" opt_func_param_list \")\" */\n\n/*! Production::    access_func_expr : function_name \"(\" opt_func_param_list \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" DISTINCT bit_expr \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" UNIQUE bit_expr \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all \"*\" \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all \"*\" \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all bit_expr \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" */\n```\n\n----------------------------------------\n\nTITLE: SQL Replication and Transaction Rules\nDESCRIPTION: Production rules defining SQL replication and transaction management statements, including group replication, slave operations, and transaction control statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_166\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    startGroupReplication : START GROUP_REPLICATION */\n\n/*! Production::    startSlave : START SLAVE opt_threadTypes UNTIL untilOption opt_connectionOptions opt_channelOption */\n\n/*! Production::    startSlave : START SLAVE opt_threadTypes opt_connectionOptions opt_channelOption */\n\n/*! Production::    startTransaction : START TRANSACTION opt_transactionModes */\n\n/*! Production::    start_with : START WITH expr */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Production Rules for Logical Operators and Control Structures\nDESCRIPTION: These rules specify the syntax for logical operators, loop statements, and other control structures in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_101\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    logicalOperator : AND */\n\n/*! Production::    logicalOperator : BIT_AND_OP BIT_AND_OP */\n\n/*! Production::    logicalOperator : DOUBLE_BIT_OR_OP */\n\n/*! Production::    logicalOperator : OR */\n\n/*! Production::    logicalOperator : XOR */\n\n/*! Production::    loopStatement : opt_StmtLabel LOOP procedureSqlStatements END LOOP opt_uid */\n\n/*! Production::    lower_bound : for_expr */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Optional Elements\nDESCRIPTION: A collection of parser production rules defining optional elements in SQL syntax. These rules specify how various optional components can be expressed in SQL statements, following a BNF-like notation with alternatives represented by the epsilon symbol for empty productions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_114\n\nLANGUAGE: grammar\nCODE:\n```\n/*! Production::    opt_qb_name : \"(\" qb_name_option \")\" */\n\n/*! Production::    opt_qb_name : %epsilon */\n\n/*! Production::    opt_query_expression_option_list : %epsilon */\n\n/*! Production::    opt_query_expression_option_list : query_expression_option_list */\n\n/*! Production::    opt_range_partition_list : \"(\" range_partition_list \")\" */\n\n/*! Production::    opt_range_subpartition_list : \"(\" range_subpartition_list \")\" */\n\n/*! Production::    opt_record_member_default : %epsilon */\n\n/*! Production::    opt_record_member_default : ASSIGN_OPERATOR pl_right_value */\n\n/*! Production::    opt_recovery_window : %epsilon */\n\n/*! Production::    opt_recovery_window : RECOVERY_WINDOW opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_redundancy : %epsilon */\n\n/*! Production::    opt_redundancy : REDUNDANCY opt_equal_mark INTNUM */\n\n/*! Production::    opt_referenceAction : %epsilon */\n\n/*! Production::    opt_referenceAction : referenceAction */\n\n/*! Production::    opt_reference_option : %epsilon */\n\n/*! Production::    opt_reference_option : reference_option */\n\n/*! Production::    opt_reference_option_list : %epsilon */\n\n/*! Production::    opt_reference_option_list : opt_reference_option_list reference_option */\n\n/*! Production::    opt_referencing_list : %epsilon */\n\n/*! Production::    opt_referencing_list : REFERENCING referencing_list */\n\n/*! Production::    opt_relation_factor_in_hint_list : \"(\" relation_factor_in_hint_list \")\" */\n\n/*! Production::    opt_relation_factor_in_hint_list : %epsilon */\n\n/*! Production::    opt_relation_factor_in_hint_list : relation_factor_in_hint */\n\n/*! Production::    opt_relies_on_clause : %epsilon */\n\n/*! Production::    opt_relies_on_clause : relies_on_clause */\n\n/*! Production::    opt_rely_option : %epsilon */\n\n/*! Production::    opt_rely_option : NORELY */\n\n/*! Production::    opt_rely_option : RELY */\n\n/*! Production::    opt_renameEvent : %epsilon */\n\n/*! Production::    opt_renameEvent : RENAME TO fullId */\n\n/*! Production::    opt_replace : %epsilon */\n\n/*! Production::    opt_replace : OR REPLACE */\n\n/*! Production::    opt_replacePriority : %epsilon */\n\n/*! Production::    opt_replacePriority : DELAYED */\n\n/*! Production::    opt_replacePriority : LOW_PRIORITY */\n\n/*! Production::    opt_resource_option : %epsilon */\n\n/*! Production::    opt_resource_option : WITH resource_option_list */\n\n/*! Production::    opt_resource_unit_option_list : %epsilon */\n\n/*! Production::    opt_resource_unit_option_list : opt_resource_unit_option_list \",\" resource_unit_option */\n\n/*! Production::    opt_resource_unit_option_list : resource_unit_option */\n\n/*! Production::    opt_respect_or_ignore_nulls : %epsilon */\n\n/*! Production::    opt_respect_or_ignore_nulls : respect_or_ignore NULLS */\n\n/*! Production::    opt_restore_until : %epsilon */\n\n/*! Production::    opt_restore_until : UNTIL SCN COMP_EQ INTNUM */\n\n/*! Production::    opt_restore_until : UNTIL TIME COMP_EQ STRING_VALUE */\n\n/*! Production::    opt_return_type : %epsilon */\n\n/*! Production::    opt_return_type : return_type */\n\n/*! Production::    opt_returning : %epsilon */\n\n/*! Production::    opt_returning : RETURN returning_exprs opt_into_clause */\n\n/*! Production::    opt_returning : RETURNING returning_exprs opt_into_clause */\n\n/*! Production::    opt_returning_type : %epsilon */\n\n/*! Production::    opt_returning_type : RETURNING cast_data_type */\n\n/*! Production::    opt_reuse_settings : %epsilon */\n\n/*! Production::    opt_reuse_settings : REUSE SETTINGS */\n\n/*! Production::    opt_reverse : %epsilon */\n\n/*! Production::    opt_reverse : REVERSE */\n\n/*! Production::    opt_rollup : %epsilon */\n\n/*! Production::    opt_rollup : ROLLUP \"(\" list_for_group_by \")\" */\n\n/*! Production::    opt_rollup : WITH ROLLUP */\n\n/*! Production::    opt_routineOptions : %epsilon */\n\n/*! Production::    opt_routineOptions : routineOptions */\n\n/*! Production::    opt_sample_scope : %epsilon */\n\n/*! Production::    opt_sample_scope : ALL */\n\n/*! Production::    opt_sample_scope : BASE */\n\n/*! Production::    opt_sample_scope : INCR */\n\n/*! Production::    opt_save_exception : %epsilon */\n\n/*! Production::    opt_save_exception : SAVE EXCEPTIONS */\n\n/*! Production::    opt_scheduleEndTime : %epsilon */\n\n/*! Production::    opt_scheduleEndTime : ENDS timestampValue opt_intervalExprs */\n\n/*! Production::    opt_scheduleExpress : %epsilon */\n\n/*! Production::    opt_scheduleExpress : ON SCHEDULE scheduleExpression */\n\n/*! Production::    opt_scheduleStartTime : %epsilon */\n\n/*! Production::    opt_scheduleStartTime : STARTS timestampValue opt_intervalExprs */\n\n/*! Production::    opt_scope : %epsilon */\n\n/*! Production::    opt_scope : GLOBAL */\n\n/*! Production::    opt_scope : LOCAL */\n\n/*! Production::    opt_scope : SESSION */\n\n/*! Production::    opt_search_clause : %epsilon */\n\n/*! Production::    opt_search_clause : SEARCH BREADTH FIRST BY sort_list search_set_value */\n\n/*! Production::    opt_search_clause : SEARCH DEPTH FIRST BY sort_list search_set_value */\n\n/*! Production::    opt_selectElementPart : %epsilon */\n\n/*! Production::    opt_selectElementPart : selectElementPart */\n\n/*! Production::    opt_selectIntoExpressionFormat : %epsilon */\n\n/*! Production::    opt_selectIntoExpressionFormat : fieldsFormat selectFieldsIntos */\n\n/*! Production::    opt_selectIntoExpressionLines : %epsilon */\n\n/*! Production::    opt_selectIntoExpressionLines : LINES selectLinesIntos */\n\n/*! Production::    opt_selectSpecs : %epsilon */\n\n/*! Production::    opt_selectSpecs : selectSpecs */\n\n/*! Production::    opt_separator : %epsilon */\n\n/*! Production::    opt_separator : SEPARATOR STRING_VALUE */\n\n/*! Production::    opt_sequence_option_list : %epsilon */\n\n/*! Production::    opt_sequence_option_list : sequence_option_list */\n\n/*! Production::    opt_serverOptions : %epsilon */\n\n/*! Production::    opt_serverOptions : serverOptions */\n\n/*! Production::    opt_server_list : %epsilon */\n\n/*! Production::    opt_server_list : SERVER opt_equal_mark \"(\" server_list \")\" */\n\n/*! Production::    opt_server_or_zone : %epsilon */\n\n/*! Production::    opt_server_or_zone : server_or_zone */\n\n/*! Production::    opt_set : %epsilon */\n\n/*! Production::    opt_set : SET */\n\n/*! Production::    opt_setSignalConditionInformations : %epsilon */\n\n/*! Production::    opt_setSignalConditionInformations : SET signalConditionInformations */\n\n/*! Production::    opt_setUpdatedElements : %epsilon */\n\n/*! Production::    opt_setUpdatedElements : SET updatedElements */\n\n/*! Production::    opt_set_sys_var : %epsilon */\n\n/*! Production::    opt_set_sys_var : SET VARIABLES sys_var_and_val_list */\n\n/*! Production::    opt_set_sys_var : SET sys_var_and_val_list */\n\n/*! Production::    opt_set_sys_var : VARIABLES sys_var_and_val_list */\n\n/*! Production::    opt_sf_clause : %epsilon */\n\n/*! Production::    opt_sf_clause : sf_clause_list */\n\n/*! Production::    opt_showEventFrom : %epsilon */\n\n/*! Production::    opt_showEventFrom : FROM decimalLiteral */\n\n/*! Production::    opt_showEventIn : %epsilon */\n\n/*! Production::    opt_showEventIn : IN STRING_LITERAL */\n\n/*! Production::    opt_showFilter : %epsilon */\n\n/*! Production::    opt_showFilter : showFilter */\n\n/*! Production::    opt_showProfileFor : %epsilon */\n\n/*! Production::    opt_showProfileFor : FOR QUERY decimalLiteral */\n\n/*! Production::    opt_show_condition : %epsilon */\n\n/*! Production::    opt_show_condition : LIKE STRING_VALUE */\n\n/*! Production::    opt_show_condition : LIKE STRING_VALUE ESCAPE STRING_VALUE */\n\n/*! Production::    opt_show_condition : WHERE expr */\n\n/*! Production::    opt_shrink_tenant_unit_option : %epsilon */\n\n/*! Production::    opt_shrink_tenant_unit_option : DELETE UNIT_GROUP opt_equal_mark \"(\" id_list \")\" */\n\n/*! Production::    opt_shrink_unit_option : %epsilon */\n\n/*! Production::    opt_shrink_unit_option : DELETE UNIT opt_equal_mark \"(\" id_list \")\" */\n\n/*! Production::    opt_shrink_unit_option : DELETE UNIT opt_equal_mark \"(\" unit_id_list \")\" */\n\n/*! Production::    opt_siblings : %epsilon */\n\n/*! Production::    opt_siblings : SIBLINGS */\n\n/*! Production::    opt_signOrUnsign : %epsilon */\n\n/*! Production::    opt_signOrUnsign : SIGNED */\n\n/*! Production::    opt_signOrUnsign : UNSIGNED */\n\n/*! Production::    opt_signValue : %epsilon */\n\n/*! Production::    opt_signValue : signValue */\n\n/*! Production::    opt_size_clause : %epsilon */\n\n/*! Production::    opt_size_clause : size_clause */\n\n/*! Production::    opt_sort_column_key_length : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_sort_column_key_length : %epsilon */\n\n/*! Production::    opt_sp_cparam_list : %epsilon */\n\n/*! Production::    opt_sp_cparam_list : sp_cparam_list */\n\n/*! Production::    opt_sp_cparam_with_assign : %epsilon */\n\n/*! Production::    opt_sp_cparam_with_assign : PARAM_ASSIGN_OPERATOR opt_cexpr */\n\n/*! Production::    opt_sp_cparams : opt_sp_cparams \",\" sp_cparam */\n\n/*! Production::    opt_sp_cparams : sp_cparam */\n\n/*! Production::    opt_sp_elseifs : %epsilon */\n\n/*! Production::    opt_sp_elseifs : ELSE pl_lang_stmt_list */\n\n/*! Production::    opt_sp_elseifs : ELSIF sp_if */\n\n/*! Production::    opt_sp_inout : %epsilon */\n\n/*! Production::    opt_sp_inout : IN */\n\n/*! Production::    opt_sp_inout : IN OUT */\n\n/*! Production::    opt_sp_inout : IN OUT NOCOPY */\n\n/*! Production::    opt_sp_inout : OUT */\n\n/*! Production::    opt_sp_inout : OUT NOCOPY */\n\n/*! Production::    opt_sp_param_list : \"(\" sp_param_list \")\" */\n\n/*! Production::    opt_sp_param_list : %epsilon */\n\n/*! Production::    opt_special_partition_list : \"(\" special_partition_list \")\" */\n\n/*! Production::    opt_sqlSecurity : %epsilon */\n\n/*! Production::    opt_sqlSecurity : SQL SECURITY DEFINER */\n\n/*! Production::    opt_sqlSecurity : SQL SECURITY INVOKER */\n\n/*! Production::    opt_sql_id : %epsilon */\n\n/*! Production::    opt_sql_id : sql_id_expr */\n\n/*! Production::    opt_sql_security : %epsilon */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords\nDESCRIPTION: This snippet defines a series of SQL keywords as unreserved, allowing them to be used in various contexts without requiring quotes. The keywords cover a wide range of SQL operations and concepts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_187\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : UNINSTALL */\n\n/*! Production::    unreserved_keyword_normal : UNIT */\n\n/*! Production::    unreserved_keyword_normal : UNIT_GROUP */\n\n/*! Production::    unreserved_keyword_normal : UNIT_NUM */\n\n/*! Production::    unreserved_keyword_normal : UNKNOWN */\n\n/*! Production::    unreserved_keyword_normal : UNLIMITED */\n\n/*! Production::    unreserved_keyword_normal : UNLOCK */\n\n/*! Production::    unreserved_keyword_normal : UNLOCKED */\n\n/*! Production::    unreserved_keyword_normal : UNPIVOT */\n\n/*! Production::    unreserved_keyword_normal : UNTIL */\n\n/*! Production::    unreserved_keyword_normal : UNUSUAL */\n\n/*! Production::    unreserved_keyword_normal : UP */\n\n/*! Production::    unreserved_keyword_normal : UPGRADE */\n\n/*! Production::    unreserved_keyword_normal : UROWID */\n\n/*! Production::    unreserved_keyword_normal : USAGE */\n\n/*! Production::    unreserved_keyword_normal : USER */\n\n/*! Production::    unreserved_keyword_normal : USER_RESOURCES */\n\n/*! Production::    unreserved_keyword_normal : USE_BLOOM_FILTER */\n\n/*! Production::    unreserved_keyword_normal : USE_FRM */\n\n/*! Production::    unreserved_keyword_normal : UTC_DATE */\n\n/*! Production::    unreserved_keyword_normal : UTC_TIMESTAMP */\n```\n\n----------------------------------------\n\nTITLE: Query Expression Productions\nDESCRIPTION: Grammar rules defining query expressions and specifications\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_162\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    queryExpression : LR_BRACKET queryExpression RR_BRACKET */\n/*! Production::    queryExpression : LR_BRACKET querySpecification RR_BRACKET */\n/*! Production::    queryExpressionNointo : LR_BRACKET queryExpressionNointo RR_BRACKET */\n/*! Production::    queryExpressionNointo : LR_BRACKET querySpecificationNointo RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: Table and Column Constraint Definitions in SQL\nDESCRIPTION: These productions define various constraints that can be applied to tables and columns in SQL, including primary keys, unique constraints, and check constraints.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_40\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    columnConstraint : AS LR_BRACKET expression RR_BRACKET opt_generatedType */\n\n/*! Production::    columnConstraint : AUTO_INCREMENT */\n\n/*! Production::    columnConstraint : COLLATE collationName */\n\n/*! Production::    columnConstraint : COLUMN_FORMAT colformat */\n\n/*! Production::    columnConstraint : COMMENT STRING_LITERAL */\n\n/*! Production::    columnConstraint : DEFAULT defaultValue */\n\n/*! Production::    columnConstraint : GENERATED ALWAYS AS LR_BRACKET expression RR_BRACKET opt_generatedType */\n\n/*! Production::    columnConstraint : KEY */\n\n/*! Production::    columnConstraint : ON UPDATE currentTimestamp */\n\n/*! Production::    columnConstraint : PRIMARY KEY */\n\n/*! Production::    columnConstraint : SERIAL DEFAULT VALUE */\n\n/*! Production::    columnConstraint : STORAGE storageval */\n\n/*! Production::    columnConstraint : UNIQUE */\n\n/*! Production::    columnConstraint : UNIQUE KEY */\n\n/*! Production::    columnConstraint : nullNotnull */\n\n/*! Production::    columnConstraint : opt_tableConstraint CHECK LR_BRACKET expression RR_BRACKET */\n\n/*! Production::    columnConstraint : referenceDefinition */\n\n/*! Production::    columnConstraints : columnConstraint */\n\n/*! Production::    columnConstraints : columnConstraint columnConstraints */\n\n/*! Production::    columnDefinition : dataType opt_columnConstraints */\n```\n\n----------------------------------------\n\nTITLE: SQL Case Statement Production Rules\nDESCRIPTION: Grammar rules defining CASE statement syntax including WHEN, THEN, ELSE clauses for both simple and searched CASE expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    case_expr : CASE bit_expr simple_when_clause_list case_default END */\n/*! Production::    case_expr : CASE bit_expr simple_when_clause_list case_default END CASE */\n/*! Production::    case_expr : CASE bool_when_clause_list case_default END */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Referencing Lists and Nodes\nDESCRIPTION: Defines SQL grammar production rules for referencing lists and nodes used in triggers, including NEW, OLD, and PARENT references.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_164\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    referencing_list : referencing_list referencing_node */\n\n/*! Production::    referencing_list : referencing_node */\n\n/*! Production::    referencing_node : NEW AS ref_name */\n\n/*! Production::    referencing_node : OLD AS ref_name */\n\n/*! Production::    referencing_node : PARENT AS ref_name */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Function Name and Parameter Productions\nDESCRIPTION: This snippet defines production rules for SQL function names, parameters, and function calls, including aggregate functions and scalar functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_86\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    func_name : identifier */\n\n/*! Production::    func_param : bit_expr */\n\n/*! Production::    func_param : func_param_with_assign */\n\n/*! Production::    func_param_list : func_param */\n\n/*! Production::    func_param_list : func_param_list \",\" func_param */\n\n/*! Production::    func_param_with_assign : var_name PARAM_ASSIGN_OPERATOR bit_expr */\n\n/*! Production::    functionArg : expression */\n\n/*! Production::    functionArgs : functionArg */\n\n/*! Production::    functionArgs : functionArg COMMA functionArgs */\n\n/*! Production::    functionCall : aggregateWindowedFunction */\n\n/*! Production::    functionCall : fullId LR_BRACKET opt_functionArgs RR_BRACKET */\n\n/*! Production::    functionCall : passwordFunctionClause */\n\n/*! Production::    functionCall : scalarFunctionName LR_BRACKET opt_functionArgs RR_BRACKET */\n\n/*! Production::    functionCall : specificFunction */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL User Management Productions\nDESCRIPTION: This snippet defines production rules for SQL user management statements, including user creation, authentication options, and resource limitations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_224\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    userAuthOption : userName */\n\n/*! Production::    userAuthOption : userName IDENTIFIED BY PASSWORD STRING_LITERAL */\n\n/*! Production::    userAuthOption : userName IDENTIFIED BY STRING_LITERAL */\n\n/*! Production::    userAuthOption : userName IDENTIFIED WITH authPlugin */\n\n/*! Production::    userAuthOption : userName IDENTIFIED WITH authPlugin AS STRING_LITERAL */\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Rename Operations\nDESCRIPTION: Defines SQL grammar production rules for various rename operations including table renaming, user renaming, and rename formats.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_167\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    renameFormat : %epsilon */\n\n/*! Production::    renameFormat : AS */\n\n/*! Production::    renameFormat : TO */\n\n/*! Production::    renameFormatValue : fullId */\n\n/*! Production::    renameTable : RENAME TABLE renameTableClauses */\n\n/*! Production::    renameTableClause : tableName TO tableName */\n\n/*! Production::    renameTableClauses : renameTableClause */\n\n/*! Production::    renameTableClauses : renameTableClause COMMA renameTableClauses */\n\n/*! Production::    renameUser : RENAME USER renameUserClauses */\n\n/*! Production::    renameUserClause : userName TO userName */\n\n/*! Production::    renameUserClauses : renameUserClause */\n\n/*! Production::    renameUserClauses : renameUserClause COMMA renameUserClauses */\n\n/*! Production::    rename_info : user opt_host_name TO user opt_host_name */\n\n/*! Production::    rename_list : rename_info */\n\n/*! Production::    rename_list : rename_list \",\" rename_info */\n\n/*! Production::    rename_table_action : relation_factor TO relation_factor */\n\n/*! Production::    rename_table_actions : rename_table_action */\n\n/*! Production::    rename_table_actions : rename_table_actions \",\" rename_table_action */\n\n/*! Production::    rename_table_stmt : RENAME TABLE rename_table_actions */\n\n/*! Production::    rename_table_stmt : RENAME rename_table_actions */\n\n/*! Production::    rename_user_stmt : RENAME USER rename_list */\n```\n\n----------------------------------------\n\nTITLE: MySQL Function Parameter Definitions\nDESCRIPTION: Specifies parameter definitions for MySQL functions including data types and multiple parameter handling.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_70\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    functionParameter : uid dataType */\n/*! Production::    functionParameters : functionParameter */\n/*! Production::    functionParameters : functionParameter COMMA functionParameters */\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for DML Statements\nDESCRIPTION: Defines the various Data Manipulation Language (DML) statements supported in MySQL, including SELECT, INSERT, UPDATE, DELETE, and others.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    dmlStatement : callStatement */\n\n/*! Production::    dmlStatement : deleteStatement */\n\n/*! Production::    dmlStatement : doStatement */\n\n/*! Production::    dmlStatement : handlerStatement */\n\n/*! Production::    dmlStatement : insertStatement */\n\n/*! Production::    dmlStatement : loadDataStatement */\n\n/*! Production::    dmlStatement : loadXmlStatement */\n\n/*! Production::    dmlStatement : replaceStatement */\n\n/*! Production::    dmlStatement : selectStatement */\n\n/*! Production::    dmlStatement : updateStatement */\n\n/*! Production::    doStatement : DO expressions */\n```\n\n----------------------------------------\n\nTITLE: SELECT Statement Grammar Productions\nDESCRIPTION: BNF grammar rules defining the valid syntax patterns for SELECT statements including unions, hierarchical queries, and subqueries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_177\n\nLANGUAGE: bnf\nCODE:\n```\n/*! Production::    selectStatement : queryExpressionNointo unionParenthesises UNION unionType queryExpression opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : queryExpressionNointo unionParenthesises opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : querySpecification opt_lockClause */\n```\n\n----------------------------------------\n\nTITLE: SET Type and Set Operations Production Rules in SQL\nDESCRIPTION: Grammar production rules for set operations including UNION, EXCEPT, INTERSECT, and MINUS that combine multiple result sets.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_132\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_type : set_type_other */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_type : set_type_union set_expression_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_type_other : EXCEPT */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_type_other : INTERSECT */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_type_other : MINUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_type_union : UNION */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Keyword Lexical Rules in SQL Grammar\nDESCRIPTION: Lexical rules for SQL keywords used in various SQL statements and operations. This extensive list defines the tokens for reserved words recognized by the SQL parser.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_232\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       A */\n\n/*! Rule::       ABORT */\n\n/*! Rule::       ACCEPT */\n\n/*! Rule::       ACCESS */\n\n/*! Rule::       ACCESSIBLE */\n\n/*! Rule::       ACCOUNT */\n\n/*! Rule::       ACTION */\n\n/*! Rule::       ACTIVE */\n\n/*! Rule::       ADD */\n\n/*! Rule::       ADDDATE */\n\n/*! Rule::       ADMIN */\n\n/*! Rule::       ADMINISTER */\n\n/*! Rule::       AFTER */\n\n/*! Rule::       AGAINST */\n\n/*! Rule::       AGGREGATE */\n\n/*! Rule::       ALGORITHM */\n\n/*! Rule::       ALL */\n\n/*! Rule::       ALLOCATE */\n\n/*! Rule::       ALTER */\n\n/*! Rule::       ALWAYS */\n\n/*! Rule::       ANALYSE */\n\n/*! Rule::       ANALYZE */\n\n/*! Rule::       AND */\n\n/*! Rule::       ANY */\n\n/*! Rule::       APPROX_COUNT_DISTINCT */\n\n/*! Rule::       APPROX_COUNT_DISTINCT_SYNOPSIS */\n\n/*! Rule::       APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE */\n\n/*! Rule::       ARCHIVE */\n\n/*! Rule::       ARCHIVELOG */\n\n/*! Rule::       ARRAY */\n\n/*! Rule::       ARRAYLEN */\n\n/*! Rule::       AS */\n\n/*! Rule::       ASC */\n\n/*! Rule::       ASENSITIVE */\n\n/*! Rule::       ASSERT */\n\n/*! Rule::       ASSIGN */\n\n/*! Rule::       AT */\n\n/*! Rule::       AUDIT */\n\n/*! Rule::       AUTHID */\n\n/*! Rule::       AUTHORIZATION */\n\n/*! Rule::       AUTHORS */\n\n/*! Rule::       AUTO */\n\n/*! Rule::       AUTOEXTEND_SIZE */\n\n/*! Rule::       AVG */\n\n/*! Rule::       AVG_ROW_LENGTH */\n\n/*! Rule::       BACKUP */\n\n/*! Rule::       BALANCE */\n\n/*! Rule::       BASE */\n\n/*! Rule::       BASELINE */\n\n/*! Rule::       BASELINE_ID */\n\n/*! Rule::       BASE_TABLE */\n\n/*! Rule::       BASIC */\n\n/*! Rule::       BECOME */\n\n/*! Rule::       BEFORE */\n\n/*! Rule::       BEGIN */\n\n/*! Rule::       BETWEEN */\n\n/*! Rule::       BINARY */\n\n/*! Rule::       BINARY_DOUBLE */\n\n/*! Rule::       BINARY_FLOAT */\n\n/*! Rule::       BINARY_INTEGER */\n\n/*! Rule::       BINDING */\n\n/*! Rule::       BINLOG */\n\n/*! Rule::       BIT */\n\n/*! Rule::       BLOB */\n\n/*! Rule::       BLOCK */\n\n/*! Rule::       BLOCK_SIZE */\n\n/*! Rule::       BODY */\n\n/*! Rule::       BOOL */\n\n/*! Rule::       BOOLEAN */\n\n/*! Rule::       BOOTSTRAP */\n\n/*! Rule::       BOTH */\n\n/*! Rule::       BREADTH */\n\n/*! Rule::       BTREE */\n\n/*! Rule::       BULK */\n\n/*! Rule::       BULK_EXCEPTIONS */\n\n/*! Rule::       BULK_ROWCOUNT */\n\n/*! Rule::       BY */\n\n/*! Rule::       BYTE */\n\n/*! Rule::       C */\n\n/*! Rule::       CACHE */\n\n/*! Rule::       CALL */\n\n/*! Rule::       CANCEL */\n\n/*! Rule::       CASCADE */\n\n/*! Rule::       CASCADED */\n\n/*! Rule::       CASE */\n\n/*! Rule::       CAST */\n\n/*! Rule::       CATALOG_NAME */\n\n/*! Rule::       CHAIN */\n\n/*! Rule::       CHANGE */\n\n/*! Rule::       CHANGED */\n\n/*! Rule::       CHAR */\n\n/*! Rule::       CHARACTER */\n\n/*! Rule::       CHARSET */\n\n/*! Rule::       CHAR_BASE */\n\n/*! Rule::       CHECK */\n\n/*! Rule::       CHECKPOINT */\n\n/*! Rule::       CHECKSUM */\n\n/*! Rule::       CIPHER */\n\n/*! Rule::       CLASS_ORIGIN */\n\n/*! Rule::       CLEAN */\n\n/*! Rule::       CLEAR */\n\n/*! Rule::       CLIENT */\n\n/*! Rule::       CLOB */\n\n/*! Rule::       CLOSE */\n\n/*! Rule::       CLUSTER */\n\n/*! Rule::       CLUSTERS */\n\n/*! Rule::       COALESCE */\n\n/*! Rule::       COBOL */\n\n/*! Rule::       CODE */\n\n/*! Rule::       COLAUTH */\n\n/*! Rule::       COLLATE */\n\n/*! Rule::       COLLATION */\n\n/*! Rule::       COLLECT */\n\n/*! Rule::       COLUMN */\n\n/*! Rule::       COLUMNS */\n\n/*! Rule::       COLUMN_FORMAT */\n\n/*! Rule::       COLUMN_NAME */\n\n/*! Rule::       COMMENT */\n\n/*! Rule::       COMMIT */\n\n/*! Rule::       COMMITTED */\n\n/*! Rule::       COMPACT */\n\n/*! Rule::       COMPILE */\n\n/*! Rule::       COMPLETION */\n\n/*! Rule::       COMPRESS */\n\n/*! Rule::       COMPRESSED */\n\n/*! Rule::       COMPRESSION */\n\n/*! Rule::       COMPUTE */\n\n/*! Rule::       CONCURRENT */\n\n/*! Rule::       CONNECT */\n\n/*! Rule::       CONNECTION */\n\n/*! Rule::       CONNECT_BY_ISCYCLE */\n\n/*! Rule::       CONNECT_BY_ISLEAF */\n\n/*! Rule::       CONNECT_BY_ROOT */\n\n/*! Rule::       CONSISTENT */\n\n/*! Rule::       CONSTANT */\n\n/*! Rule::       CONSTRAINT */\n\n/*! Rule::       CONSTRAINTS */\n\n/*! Rule::       CONSTRAINT_CATALOG */\n\n/*! Rule::       CONSTRAINT_NAME */\n\n/*! Rule::       CONSTRAINT_SCHEMA */\n\n/*! Rule::       CONSTRUCTOR */\n\n/*! Rule::       CONTAINS */\n\n/*! Rule::       CONTENTS */\n\n/*! Rule::       CONTEXT */\n\n/*! Rule::       CONTINUE */\n\n/*! Rule::       CONTRIBUTORS */\n\n/*! Rule::       CONTROLFILE */\n\n/*! Rule::       CONVERT */\n\n/*! Rule::       COPY */\n\n/*! Rule::       CORR */\n\n/*! Rule::       COUNT */\n\n/*! Rule::       COVAR_POP */\n\n/*! Rule::       COVAR_SAMP */\n\n/*! Rule::       CPU */\n\n/*! Rule::       CRASH */\n\n/*! Rule::       CREATE */\n\n/*! Rule::       CREATE_TIMESTAMP */\n\n/*! Rule::       CROSS */\n\n/*! Rule::       CUBE */\n\n/*! Rule::       CUME_DIST */\n\n/*! Rule::       CURRENT */\n\n/*! Rule::       CURRENT_DATE */\n\n/*! Rule::       CURRENT_SCHEMA */\n\n/*! Rule::       CURRENT_TIMESTAMP */\n\n/*! Rule::       CURRENT_USER */\n\n/*! Rule::       CURRVAL */\n\n/*! Rule::       CURSOR */\n\n/*! Rule::       CUSTOMDATUM */\n\n/*! Rule::       CYCLE */\n\n/*! Rule::       DATA */\n\n/*! Rule::       DATABASE */\n\n/*! Rule::       DATABASES */\n\n/*! Rule::       DATABASE_ID */\n\n/*! Rule::       DATAFILE */\n\n/*! Rule::       DATA_BASE */\n\n/*! Rule::       DATA_TABLE_ID */\n\n/*! Rule::       DATE */\n\n/*! Rule::       DATETIME */\n\n/*! Rule::       DATE_ADD */\n\n/*! Rule::       DATE_SUB */\n\n/*! Rule::       DAY */\n\n/*! Rule::       DAY_HOUR */\n\n/*! Rule::       DAY_MICROSECOND */\n\n/*! Rule::       DAY_MINUTE */\n\n/*! Rule::       DAY_SECOND */\n\n/*! Rule::       DBA */\n\n/*! Rule::       DBA_RECYCLEBIN */\n\n/*! Rule::       DBTIMEZONE */\n\n/*! Rule::       DEALLOCATE */\n\n/*! Rule::       DEBUG */\n\n/*! Rule::       DEBUGOFF */\n\n/*! Rule::       DEBUGON */\n\n/*! Rule::       DEC */\n\n/*! Rule::       DECIMAL */\n\n/*! Rule::       DECLARE */\n\n/*! Rule::       DEFAULT */\n\n/*! Rule::       DEFAULT_AUTH */\n\n/*! Rule::       DEFAULT_TABLEGROUP */\n\n/*! Rule::       DEFINER */\n\n/*! Rule::       DEFINITION */\n\n/*! Rule::       DELAY */\n\n/*! Rule::       DELAYED */\n\n/*! Rule::       DELAY_KEY_WRITE */\n\n/*! Rule::       DELETE */\n\n/*! Rule::       DELTA */\n\n/*! Rule::       DENSE_RANK */\n\n/*! Rule::       DEPTH */\n\n/*! Rule::       DESC */\n\n/*! Rule::       DESCRIBE */\n\n/*! Rule::       DESTINATION */\n```\n\n----------------------------------------\n\nTITLE: SQL Function Categorization\nDESCRIPTION: This snippet categorizes SQL functions into aggregate functions, single-row functions, and special function expressions. It provides a framework for organizing different types of SQL functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_194\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sql_function : aggregate_function */\n\n/*! Production::    sql_function : single_row_function */\n\n/*! Production::    sql_function : special_func_expr */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER KEYSTORE Grammar Rules in SQL\nDESCRIPTION: This snippet defines grammar productions for ALTER KEYSTORE operations, including changing passwords and managing keystore states.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT ALTER KEYSTORE PASSWORD IDENTIFIED BY password SET password */\n\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY password */\n\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT SET KEYSTORE CLOSE IDENTIFIED BY password */\n\n/*! Production::    alter_keystore_stmt : ADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY password */\n```\n\n----------------------------------------\n\nTITLE: Bit Operation Rules\nDESCRIPTION: Production rules for bit-wise operations and expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    bitOperator : BIT_AND_OP */\n/*! Production::    bitOperator : BIT_OR_OP */\n/*! Production::    bitOperator : BIT_XOR_OP */\n/*! Production::    bit_expr : bit_expr \"&\" bit_expr */\n/*! Production::    bit_expr : bit_expr \"+\" bit_expr */\n```\n\n----------------------------------------\n\nTITLE: XA Transaction Productions\nDESCRIPTION: Grammar rules for XA distributed transaction statements including commit, end, prepare and rollback.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_196\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    stmt : xa_commit_stmt */\n/*! Production::    stmt : xa_end_stmt */\n/*! Production::    stmt : xa_prepare_stmt */\n/*! Production::    stmt : xa_rollback_stmt */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Constraints and Data Types\nDESCRIPTION: This snippet shows SQL grammar production rules for defining constraints, data types, and conversion functions. It includes rules for CHECK constraints, data type conversions, and constant declarations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    constraint_definition : CHECK \"(\" expr \")\" */\n\n/*! Production::    constraint_definition : CONSTRAINT opt_constraint_name CHECK \"(\" expr \")\" check_state */\n\n/*! Production::    conversion_function : CAST \"(\" bit_expr AS cast_data_type \")\" */\n\n/*! Production::    convertedDataType : BINARY opt_lengthOneDimension */\n\n/*! Production::    constant_decl : var_name CONSTANT pl_inner_data_type opt_not_null default_expr */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Sources Grammar\nDESCRIPTION: Production rules for table sources in SQL queries, defining how tables can be referenced, joined, and aliased in FROM clauses and other parts of SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_205\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tablePair : LR_BRACKET tableName COMMA tableName RR_BRACKET */\n\n/*! Production::    tablePairs : tablePair */\n\n/*! Production::    tablePairs : tablePair COMMA tablePairs */\n\n/*! Production::    tableSource : LR_BRACKET tableSourceItem opt_joinParts RR_BRACKET */\n\n/*! Production::    tableSource : tableSourceItem opt_joinParts */\n\n/*! Production::    tableSourceItem : LR_BRACKET tableSources RR_BRACKET */\n\n/*! Production::    tableSourceItem : selectStatement opt_AS uid */\n\n/*! Production::    tableSourceItem : tableName opt_asUid opt_indexHints */\n\n/*! Production::    tableSourceItem : tableName partitonValueList opt_asUid opt_indexHints */\n\n/*! Production::    tableSources : tableSource */\n\n/*! Production::    tableSources : tableSource COMMA tableSources */\n\n/*! Production::    tableWithOptStar : tableName */\n\n/*! Production::    tableWithOptStar : tableName DOT STAR */\n\n/*! Production::    tableWithOptStars : tableWithOptStar */\n\n/*! Production::    tableWithOptStars : tableWithOptStar COMMA tableWithOptStars */\n```\n\n----------------------------------------\n\nTITLE: SHOW Statement Production Rules in SQL\nDESCRIPTION: Grammar production rules for various SHOW statements that display database metadata, status, grants, and other information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_143\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW COUNT LR_BRACKET STAR RR_BRACKET errorOrWarn */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW CREATE USER userName */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW CREATE databaseOrSchema opt_ifNotExists uid */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW CREATE showCreateType fullId */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW ENGINE engineName MUTEX */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW ENGINE engineName STATUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW FUNCTION CODE fullId */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW GRANTS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW GRANTS FOR userName */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW OPEN TABLES optShowFromOrInId opt_showFilter */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW PROCEDURE CODE fullId */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW PROFILE showProfileTypes opt_showProfileFor LIMIT decimalLiteralPair */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW SLAVE STATUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW SLAVE STATUS FOR CHANNEL STRING_LITERAL */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW errorOrWarn LIMIT decimalLiteralPair */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW opt_FULL columnOrFields fromOrIn tableName fromOrIn uid opt_showFilter */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW opt_FULL columnOrFields fromOrIn tableName opt_showFilter */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW purgeFormat LOGS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW showCommonEntity opt_showFilter */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW showGlobalInfoClause */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW showIndexType fromOrIn tableName optShowFromOrInId opt_whereClause */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW showLogFormat EVENTS opt_showEventIn opt_showEventFrom */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW showLogFormat EVENTS opt_showEventIn opt_showEventFrom LIMIT decimalLiteralPair */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showStatement : SHOW showSchemaEntity optShowFromOrInId opt_showFilter */\n```\n\n----------------------------------------\n\nTITLE: SQL Subpartition Grammar Rules\nDESCRIPTION: Grammar production rules defining various types of subpartition syntax including LIST, HASH, KEY, and RANGE partitioning with templates and columns\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_213\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Production::    tg_subpartition_option : SUBPARTITION BY BISON_LIST COLUMNS INTNUM SUBPARTITION TEMPLATE opt_list_subpartition_list */\n/*! Production::    tg_subpartition_option : SUBPARTITION BY BISON_LIST SUBPARTITION TEMPLATE opt_list_subpartition_list */\n/*! Production::    tg_subpartition_option : SUBPARTITION BY HASH opt_subpartitions */\n/*! Production::    tg_subpartition_option : SUBPARTITION BY KEY INTNUM opt_subpartitions */\n/*! Production::    tg_subpartition_option : SUBPARTITION BY LIST COLUMNS INTNUM SUBPARTITION TEMPLATE opt_list_subpartition_list */\n/*! Production::    tg_subpartition_option : SUBPARTITION BY RANGE COLUMNS INTNUM SUBPARTITION TEMPLATE opt_range_subpartition_list */\n/*! Production::    tg_subpartition_option : SUBPARTITION BY RANGE SUBPARTITION TEMPLATE opt_range_subpartition_list */\n```\n\n----------------------------------------\n\nTITLE: Defining Select Clause Grammar Productions in SQL\nDESCRIPTION: These productions define various forms of select clauses, including simple selects, selects with hierarchical queries, and selects with order and limit clauses. They provide the building blocks for constructing more complex select statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_119\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    select_clause : no_table_select */\n\n/*! Production::    select_clause : no_table_select_with_hierarchical_query */\n\n/*! Production::    select_clause : no_table_select_with_order_and_limit */\n\n/*! Production::    select_clause : select_with_hierarchical_query */\n\n/*! Production::    select_clause : select_with_parens_with_order_and_limit */\n\n/*! Production::    select_clause : simple_select */\n\n/*! Production::    select_clause : simple_select_with_order_and_limit */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords as Production Rules\nDESCRIPTION: This code snippet consists of compiler directives that define SQL unreserved keywords as production rules. These directives are likely used by a parser generator to build a SQL parser that properly recognizes these tokens as non-reserved keywords.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_217\n\nLANGUAGE: C/C++\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : CANCEL */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Predicate Expressions\nDESCRIPTION: Extensive set of grammar rules defining how predicate expressions can be formed in SQL, including comparison operators, BETWEEN, IN, LIKE, REGEXP, EXISTS, and other conditional expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_152\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    precision_int_num : INTNUM */\n\n/*! Production::    predicate : LNNVL \"(\" bool_pri \")\" */\n\n/*! Production::    predicate : LOCAL_ID VAR_ASSIGN expressionAtom */\n\n/*! Production::    predicate : REGEXP_LIKE \"(\" substr_params \")\" */\n\n/*! Production::    predicate : bit_expr */\n\n/*! Production::    predicate : bit_expr BETWEEN bit_expr AND bit_expr */\n\n/*! Production::    predicate : bit_expr BETWEEN bit_expr AND predicate */\n\n/*! Production::    predicate : bit_expr IN in_expr */\n\n/*! Production::    predicate : bit_expr LIKE bit_expr */\n\n/*! Production::    predicate : bit_expr LIKE bit_expr ESCAPE bit_expr */\n\n/*! Production::    predicate : bit_expr LIKE simple_expr */\n\n/*! Production::    predicate : bit_expr LIKE simple_expr ESCAPE simple_expr */\n\n/*! Production::    predicate : bit_expr MEMBER opt_of \"(\" simple_expr \")\" */\n\n/*! Production::    predicate : bit_expr REGEXP bit_expr */\n\n/*! Production::    predicate : bit_expr SOUNDS LIKE simple_expr */\n\n/*! Production::    predicate : bit_expr not BETWEEN bit_expr AND bit_expr */\n\n/*! Production::    predicate : bit_expr not BETWEEN bit_expr AND predicate */\n\n/*! Production::    predicate : bit_expr not IN in_expr */\n\n/*! Production::    predicate : bit_expr not LIKE bit_expr */\n\n/*! Production::    predicate : bit_expr not LIKE bit_expr ESCAPE bit_expr */\n\n/*! Production::    predicate : bit_expr not LIKE simple_expr */\n\n/*! Production::    predicate : bit_expr not LIKE simple_expr ESCAPE simple_expr */\n\n/*! Production::    predicate : bit_expr not REGEXP bit_expr */\n\n/*! Production::    predicate : collection_predicate_expr */\n\n/*! Production::    predicate : exists_function_name select_with_parens */\n\n/*! Production::    predicate : expressionAtom */\n\n/*! Production::    predicate : predicate BETWEEN predicate AND predicate */\n\n/*! Production::    predicate : predicate IN LR_BRACKET expressions RR_BRACKET */\n\n/*! Production::    predicate : predicate IN LR_BRACKET selectStatement RR_BRACKET */\n\n/*! Production::    predicate : predicate IS nullNotnull */\n\n/*! Production::    predicate : predicate LIKE predicate */\n\n/*! Production::    predicate : predicate MEMBER OF LR_BRACKET predicate RR_BRACKET */\n\n/*! Production::    predicate : predicate NOT BETWEEN predicate AND predicate */\n\n/*! Production::    predicate : predicate NOT IN LR_BRACKET expressions RR_BRACKET */\n\n/*! Production::    predicate : predicate NOT IN LR_BRACKET selectStatement RR_BRACKET */\n\n/*! Production::    predicate : predicate NOT LIKE predicate */\n\n/*! Production::    predicate : predicate NOT LIKE predicate ESCAPE STRING_LITERAL */\n\n/*! Production::    predicate : predicate NOT REGEXP predicate */\n\n/*! Production::    predicate : predicate NOT RLIKE predicate */\n\n/*! Production::    predicate : predicate REGEXP predicate */\n\n/*! Production::    predicate : predicate RLIKE predicate */\n\n/*! Production::    predicate : predicate SOUNDS LIKE predicate */\n\n/*! Production::    predicate : predicate comparisonOperator ALL LR_BRACKET selectStatement RR_BRACKET */\n\n/*! Production::    predicate : predicate comparisonOperator ANY LR_BRACKET selectStatement RR_BRACKET */\n\n/*! Production::    predicate : predicate comparisonOperator SOME LR_BRACKET selectStatement RR_BRACKET */\n\n/*! Production::    predicate : predicate comparisonOperator predicate */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Keywords and Rules\nDESCRIPTION: This snippet shows the pattern used throughout the file to define SQL keywords and rules. Each definition is enclosed in a comment block and starts with 'Rule::', followed by the keyword or rule name.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_239\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       DES_KEY_FILE */\n\n/*! Rule::       DETERMINISTIC */\n\n/*! Rule::       DIAGNOSTICS */\n\n/*! Rule::       DICTIONARY */\n```\n\n----------------------------------------\n\nTITLE: FETCH Operations Grammar Rules\nDESCRIPTION: Grammar rules defining the syntax for FETCH operations in SQL, including fetching next rows and bulk collect operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    fetch_next_percent_expr : FETCH NEXT bit_expr PERCENT ROWS */\n/*! Production::    fetch_stmt : FETCH pl_access_name bulk_collect_into_clause opt_limit */\n/*! Production::    fetch_stmt : FETCH pl_access_name into_clause */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules\nDESCRIPTION: Grammar production rules defining the syntax for SQL statements, functions, and expressions. These rules are used by parsers to validate and process SQL code. The rules cover core SQL functionality like aggregate functions, administration statements, and database alterations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_0\n\nLANGUAGE: Grammar\nCODE:\n```\n/*! Conditions:: INITIAL */\n\n/*! Conditions:: in_range_operator INITIAL */\n\n/*! Production::    $accept : pl_entry $end */\n\n/*! Production::    $accept : root $end */\n\n/*! Production::    $accept : sql_stmt $end */\n\n/*! Production::    HEXADECIMAL_LITERALs : HEXADECIMAL_LITERAL */\n\n/*! Production::    HEXADECIMAL_LITERALs : HEXADECIMAL_LITERAL HEXADECIMAL_LITERALs */\n\n/*! Production::    STRING_LITERALList : STRING_LITERAL */\n\n/*! Production::    STRING_LITERALList : STRING_LITERAL COMMA STRING_LITERALList */\n\n/*! Production::    STRING_LITERALs : STRING_LITERAL */\n\n/*! Production::    STRING_LITERALs : STRING_LITERAL STRING_LITERALs */\n\n/*! Production::    access_func_expr : access_func_expr_count */\n\n/*! Production::    access_func_expr : exists_function_name \"(\" opt_func_param_list \")\" */\n\n/*! Production::    access_func_expr : function_name \"(\" opt_func_param_list \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" DISTINCT bit_expr \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" UNIQUE bit_expr \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all \"*\" \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all \"*\" \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all bit_expr \")\" */\n\n/*! Production::    access_func_expr_count : COUNT \"(\" opt_all bit_expr \")\" KEEP \"(\" DENSE_RANK first_or_last order_by \")\" */\n\n/*! Production::    accessible_by : ACCESSIBLE BY \"(\" accessor_list \")\" */\n\n/*! Production::    accessor : pl_schema_name */\n\n/*! Production::    accessor : unit_kind pl_schema_name */\n\n/*! Production::    accessor_list : accessor */\n\n/*! Production::    accessor_list : accessor_list \",\" accessor */\n\n/*! Production::    actionOption : %epsilon */\n\n/*! Production::    actionOption : LOCAL */\n\n/*! Production::    actionOption : NO_WRITE_TO_BINLOG */\n\n/*! Production::    add_or_alter_zone_option : IDC opt_equal_mark relation_name_or_string */\n\n/*! Production::    add_or_alter_zone_option : REGION opt_equal_mark relation_name_or_string */\n\n/*! Production::    add_or_alter_zone_option : ZONE_TYPE opt_equal_mark relation_name_or_string */\n\n/*! Production::    add_or_alter_zone_options : %epsilon */\n\n/*! Production::    add_or_alter_zone_options : add_or_alter_zone_option */\n\n/*! Production::    add_or_alter_zone_options : add_or_alter_zone_options \",\" add_or_alter_zone_option */\n\n/*! Production::    add_range_or_list_partition : ADD list_partition_list */\n\n/*! Production::    add_range_or_list_partition : ADD range_partition_list */\n```\n\n----------------------------------------\n\nTITLE: Defining Table Option Productions in SQL Grammar\nDESCRIPTION: These productions define various table options that can be specified when creating or altering tables, including storage parameters, compression settings, and table properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_169\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    table_option : AUTO_INCREMENT opt_equal_mark int_or_decimal */\n\n/*! Production::    table_option : AUTO_INCREMENT_MODE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : AVG_ROW_LENGTH opt_equal_mark INTNUM */\n\n/*! Production::    table_option : BLOCK_SIZE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : CHECKSUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : COMMENT opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : COMPRESSION opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : DELAY_KEY_WRITE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : DISABLE ROW MOVEMENT */\n\n/*! Production::    table_option : DUPLICATE_SCOPE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : ENABLE ROW MOVEMENT */\n\n/*! Production::    table_option : ENABLE_EXTENDED_ROWID opt_equal_mark BOOL_VALUE */\n\n/*! Production::    table_option : ENGINE_ opt_equal_mark relation_name_or_string */\n\n/*! Production::    table_option : EXPIRE_INFO opt_equal_mark \"(\" bit_expr \")\" */\n\n/*! Production::    table_option : EXPIRE_INFO opt_equal_mark \"(\" expr \")\" */\n\n/*! Production::    table_option : LOCALITY opt_equal_mark locality_name opt_force */\n\n/*! Production::    table_option : MAX_USED_PART_ID opt_equal_mark INTNUM */\n\n/*! Production::    table_option : PCTFREE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : PRIMARY_ZONE opt_equal_mark primary_zone_name */\n\n/*! Production::    table_option : PROGRESSIVE_MERGE_NUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : REPLICA_NUM opt_equal_mark INTNUM */\n\n/*! Production::    table_option : ROW_FORMAT opt_equal_mark row_format_option */\n\n/*! Production::    table_option : STORAGE_FORMAT_VERSION opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLEGROUP opt_equal_mark relation_name_or_string */\n\n/*! Production::    table_option : TABLESPACE tablespace */\n\n/*! Production::    table_option : TABLET_SIZE opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLE_ID opt_equal_mark INTNUM */\n\n/*! Production::    table_option : TABLE_MODE opt_equal_mark STRING_VALUE */\n\n/*! Production::    table_option : USE_BLOOM_FILTER opt_equal_mark BOOL_VALUE */\n\n/*! Production::    table_option : compress_option */\n\n/*! Production::    table_option : opt_default_mark COLLATE opt_equal_mark collation_name */\n\n/*! Production::    table_option : opt_default_mark charset_key opt_equal_mark charset_name */\n\n/*! Production::    table_option : parallel_option */\n\n/*! Production::    table_option : physical_attributes_option */\n\n/*! Production::    table_option : read_only_or_write */\n```\n\n----------------------------------------\n\nTITLE: Defining Date/Time Types in SQL\nDESCRIPTION: These productions define the basic date and time types available in SQL, including DATE, DATETIME, TIME, and YEAR.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cast_datetime_type_i : DATE */\n\n/*! Production::    cast_datetime_type_i : DATETIME */\n\n/*! Production::    cast_datetime_type_i : TIME */\n\n/*! Production::    cast_datetime_type_i : YEAR */\n```\n\n----------------------------------------\n\nTITLE: Administrative Statement Productions\nDESCRIPTION: Grammar rules for parsing SQL administrative commands like ALTER, CREATE, DROP, GRANT, etc. Defines the syntax for database management operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_2\n\nLANGUAGE: yacc\nCODE:\n```\n/*! Production::    administrationStatement : alterUser */\n/*! Production::    administrationStatement : createUser */\n/*! Production::    administrationStatement : dropUser */\n/*! Production::    administrationStatement : grantStatement */\n```\n\n----------------------------------------\n\nTITLE: MySQL Engine Type Production Rules\nDESCRIPTION: Production rules defining different engine types in MySQL including INNODB, MEMORY, MYISAM, and others. These rules specify the valid engine names that can be used in MySQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_56\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    engineName : INNODB */\n\n/*! Production::    engineName : MEMORY */\n\n/*! Production::    engineName : MRG_MYISAM */\n\n/*! Production::    engineName : MYISAM */\n\n/*! Production::    engineName : NDB */\n\n/*! Production::    engineName : NDBCLUSTER */\n\n/*! Production::    engineName : PERFORMANCE_SCHEMA */\n\n/*! Production::    engineName : REVERSE_QUOTE_ID */\n\n/*! Production::    engineName : STRING_LITERAL */\n\n/*! Production::    engineName : TOKUDB */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Table Group Partition Options\nDESCRIPTION: These productions specify the syntax for various partition strategies in table groups, including HASH, KEY, LIST, and RANGE partitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_196\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tg_hash_partition_option : PARTITION BY HASH INTNUM tg_subpartition_option opt_partitions */\n\n/*! Production::    tg_hash_partition_option : PARTITION BY HASH tg_subpartition_option opt_partitions */\n\n/*! Production::    tg_key_partition_option : PARTITION BY KEY INTNUM tg_subpartition_option opt_partitions */\n\n/*! Production::    tg_list_partition_option : PARTITION BY BISON_LIST COLUMNS INTNUM tg_subpartition_option opt_partitions opt_list_partition_list */\n\n/*! Production::    tg_list_partition_option : PARTITION BY BISON_LIST tg_subpartition_option opt_partitions opt_list_partition_list */\n```\n\n----------------------------------------\n\nTITLE: MySQL EXPLAIN Statement Production Rules\nDESCRIPTION: Production rules for various forms of the EXPLAIN statement, supporting different output formats (BASIC, EXTENDED, OUTLINE, etc.) and styling options (PRETTY, PRETTY_COLOR, etc.).\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_64\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    explain_stmt : explain_or_desc BASIC PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc BASIC PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc BASIC explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED_NOADDR PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED_NOADDR PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED_NOADDR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc FORMAT COMP_EQ format_name explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc OUTLINE PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc OUTLINE PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc OUTLINE explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PARTITIONS PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PARTITIONS PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PARTITIONS explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PLANREGRESS PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PLANREGRESS PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PLANREGRESS explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc relation_factor opt_desc_column_option */\n```\n\n----------------------------------------\n\nTITLE: Hash Partition Rules\nDESCRIPTION: Grammar rules for hash partitioning syntax including partition elements, lists and options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_93\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    hash_partition_option : PARTITION BY HASH \"(\" column_name_list \")\" subpartition_option opt_partitions opt_hash_partition_list opt_tablespace_option opt_compress_option */\n/*! Production::    hash_partition_element : PARTITION ID INTNUM TABLESPACE tablespace compress_option subpartition_list */\n/*! Production::    hash_partition_list : hash_partition_element */\n/*! Production::    hash_partition_list : hash_partition_list \",\" hash_partition_element */\n```\n\n----------------------------------------\n\nTITLE: MySQL Expression List Production Rules\nDESCRIPTION: Production rules for lists of expressions, including comma-separated expressions with optional aliases, default values, and constants.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_67\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    expr_as_list : expr_as_list \",\" expr_with_opt_alias */\n\n/*! Production::    expr_as_list : expr_with_opt_alias */\n\n/*! Production::    expr_const : GLOBAL_ALIAS \".\" column_name */\n\n/*! Production::    expr_const : QUESTIONMARK */\n\n/*! Production::    expr_const : SESSION_ALIAS \".\" column_name */\n\n/*! Production::    expr_const : SYSTEM_VARIABLE */\n\n/*! Production::    expr_const : global_or_session_alias \".\" column_name */\n\n/*! Production::    expr_const : literal */\n\n/*! Production::    expr_list : bit_expr */\n\n/*! Production::    expr_list : expr */\n\n/*! Production::    expr_list : expr_list \",\" bit_expr */\n\n/*! Production::    expr_list : expr_list \",\" expr */\n\n/*! Production::    expr_or_default : DEFAULT */\n\n/*! Production::    expr_or_default : bit_expr */\n\n/*! Production::    expr_or_default : expr */\n\n/*! Production::    expr_with_opt_alias : expr */\n\n/*! Production::    expr_with_opt_alias : expr opt_as STRING_VALUE */\n\n/*! Production::    expr_with_opt_alias : expr opt_as column_label */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for Privilege Clauses\nDESCRIPTION: Grammar rules for privilege clauses in SQL GRANT statements, including syntax for privilege lists and various specialized administrative privileges.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_156\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    privelegeClause : privilege opt_uidList */\n\n/*! Production::    privelegeClauses : privelegeClause */\n\n/*! Production::    privelegeClauses : privelegeClause COMMA privelegeClauses */\n\n/*! Production::    privilege : ALL opt_PRIVILEGES */\n\n/*! Production::    privilege : ALTER opt_ROUTINE */\n\n/*! Production::    privilege : AUDIT_ADMIN */\n\n/*! Production::    privilege : BACKUP_ADMIN */\n\n/*! Production::    privilege : BINLOG_ADMIN */\n\n/*! Production::    privilege : BINLOG_ENCRYPTION_ADMIN */\n\n/*! Production::    privilege : CLONE_ADMIN */\n\n/*! Production::    privilege : CONNECTION_ADMIN */\n\n/*! Production::    privilege : CREATE privilegeCreateType */\n\n/*! Production::    privilege : DELETE */\n\n/*! Production::    privilege : DROP */\n\n/*! Production::    privilege : DROP ROLE */\n\n/*! Production::    privilege : ENCRYPTION_KEY_ADMIN */\n\n/*! Production::    privilege : EVENT */\n\n/*! Production::    privilege : EXECUTE */\n\n/*! Production::    privilege : FILE */\n\n/*! Production::    privilege : FIREWALL_ADMIN */\n\n/*! Production::    privilege : FIREWALL_USER */\n\n/*! Production::    privilege : GRANT OPTION */\n\n/*! Production::    privilege : GROUP_REPLICATION_ADMIN */\n\n/*! Production::    privilege : INDEX */\n\n/*! Production::    privilege : INNODB_REDO_LOG_ARCHIVE */\n\n/*! Production::    privilege : INSERT */\n\n/*! Production::    privilege : LOCK TABLES */\n\n/*! Production::    privilege : NDB_STORED_USER */\n\n/*! Production::    privilege : PERSIST_RO_VARIABLES_ADMIN */\n\n/*! Production::    privilege : PROCESS */\n\n/*! Production::    privilege : PROXY */\n\n/*! Production::    privilege : REFERENCES */\n\n/*! Production::    privilege : RELOAD */\n\n/*! Production::    privilege : REPLICATION CLIENT */\n\n/*! Production::    privilege : REPLICATION SLAVE */\n\n/*! Production::    privilege : REPLICATION_APPLIER */\n\n/*! Production::    privilege : REPLICATION_SLAVE_ADMIN */\n\n/*! Production::    privilege : RESOURCE_GROUP_ADMIN */\n\n/*! Production::    privilege : RESOURCE_GROUP_USER */\n\n/*! Production::    privilege : ROLE_ADMIN */\n\n/*! Production::    privilege : SELECT */\n\n/*! Production::    privilege : SESSION_VARIABLES_ADMIN */\n\n/*! Production::    privilege : SET_USER_ID */\n\n/*! Production::    privilege : SHOW DATABASES */\n\n/*! Production::    privilege : SHOW VIEW */\n\n/*! Production::    privilege : SHOW_ROUTINE */\n\n/*! Production::    privilege : SHUTDOWN */\n\n/*! Production::    privilege : SUPER */\n\n/*! Production::    privilege : SYSTEM_VARIABLES_ADMIN */\n\n/*! Production::    privilege : TABLE_ENCRYPTION_ADMIN */\n\n/*! Production::    privilege : TRIGGER */\n\n/*! Production::    privilege : UPDATE */\n\n/*! Production::    privilege : USAGE */\n\n/*! Production::    privilege : VERSION_TOKEN_ADMIN */\n\n/*! Production::    privilege : XA_RECOVER_ADMIN */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for FETCH NEXT Statement\nDESCRIPTION: Specifies the grammar production for a FETCH NEXT statement with a percentage of rows.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_71\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    fetch_next_percent_expr : FETCH NEXT bit_expr PERCENT ROWS */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar for Constraint and Query Clause Options\nDESCRIPTION: These productions define optional elements for constraint validation, purge operations, and various SQL clause modifiers. They provide flexibility in specifying query components like FROM, GROUP BY, and HAVING clauses.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_94\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_force_or_validate : FORCE */\n\n/*! Production::    opt_force_or_validate : VALIDATE */\n\n/*! Production::    opt_force_purge : %epsilon */\n\n/*! Production::    opt_force_purge : FORCE */\n\n/*! Production::    opt_force_purge : PURGE */\n\n/*! Production::    opt_fromClause : %epsilon */\n\n/*! Production::    opt_fromClause : fromClause */\n\n/*! Production::    opt_from_first_or_last : %epsilon */\n\n/*! Production::    opt_from_first_or_last : FROM first_or_last */\n\n/*! Production::    opt_from_or_in_database_clause : %epsilon */\n\n/*! Production::    opt_from_or_in_database_clause : from_or_in database_factor */\n\n/*! Production::    opt_from_or_in_database_clause : from_or_in relation_name */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Rules - PL/SQL Components\nDESCRIPTION: Grammar definitions for PL/SQL elements including blocks, procedures, functions, packages and triggers.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_124\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    pl_block : opt_declare_section execute_section END_KEY opt_tail_name */\n/*! Production::    pl_body : declare_section execute_section END_KEY opt_tail_name */\n/*! Production::    pl_ddl_stmt : create_function_stmt */\n/*! Production::    pl_ddl_stmt : create_procedure_stmt */\n/*! Production::    pl_ddl_stmt : create_trigger_stmt */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Production Rules for Literal Values\nDESCRIPTION: These rules specify the syntax for various types of literal values in SQL statements, including numbers, dates, and strings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_98\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    literal : APPROXNUM */\n\n/*! Production::    literal : BOOL_VALUE */\n\n/*! Production::    literal : DATE_VALUE */\n\n/*! Production::    literal : DECIMAL_VAL */\n\n/*! Production::    literal : HEX_STRING_VALUE */\n\n/*! Production::    literal : INTERVAL_VALUE */\n\n/*! Production::    literal : INTNUM */\n\n/*! Production::    literal : NULLX */\n\n/*! Production::    literal : TIMESTAMP_VALUE */\n\n/*! Production::    literal : complex_string_literal */\n```\n\n----------------------------------------\n\nTITLE: Procedure Definition Production Rules\nDESCRIPTION: Grammar rules for defining stored procedures including parameters, clauses and implementations\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_130\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    proc_clause : accessible_by */\n/*! Production::    proc_clause : invoke_right */\n/*! Production::    proc_clause_list : proc_clause */\n/*! Production::    proc_clause_list : proc_clause_list proc_clause */\n/*! Production::    proc_decl : PROCEDURE proc_name opt_sp_param_list opt_proc_clause */\n/*! Production::    proc_def : proc_decl is_or_as pl_impl_body */\n/*! Production::    proc_name : identifier */\n```\n\n----------------------------------------\n\nTITLE: SQL Cursor Attribute Productions\nDESCRIPTION: Grammar rules for defining implicit cursor attributes in PL/SQL, including bulk exceptions and row count attributes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_93\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    implicit_cursor_attribute : SQL \"%\" common_cursor_attribute */\n\n/*! Production::    implicit_cursor_attribute : SQL \"%\" cursor_attribute_bulk_exceptions */\n\n/*! Production::    implicit_cursor_attribute : SQL \"%\" cursor_attribute_bulk_rowcount */\n```\n\n----------------------------------------\n\nTITLE: Reference Definition Production Rules\nDESCRIPTION: Grammar rules for foreign key references including ON DELETE/UPDATE actions and match types\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_131\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    referenceDefinition : REFERENCES tableName opt_indexColumnNames MATCH referenceDefinitionMatchType opt_referenceAction */\n/*! Production::    referenceDefinition : REFERENCES tableName opt_indexColumnNames opt_referenceAction */\n/*! Production::    referenceDefinitionMatchType : FULL */\n/*! Production::    referenceDefinitionMatchType : PARTIAL */\n/*! Production::    referenceDefinitionMatchType : SIMPLE */\n```\n\n----------------------------------------\n\nTITLE: Table Option Productions\nDESCRIPTION: Grammar rules for table creation options including storage engine, character set, collation, and various performance settings\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_166\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tableOption : ENGINE opt_MULT_ASSIGN engineName */\n/*! Production::    tableOption : AUTO_INCREMENT opt_MULT_ASSIGN decimalLiteral */\n/*! Production::    tableOption : COMPRESSION opt_MULT_ASSIGN STRING_LITERAL */\n/*! Production::    tableOption : ROW_FORMAT opt_MULT_ASSIGN rowFormat */\n```\n\n----------------------------------------\n\nTITLE: Reference and Relation Grammar Rules\nDESCRIPTION: SQL grammar productions defining reference actions, options, and relation factors used in database queries and table definitions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_132\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    reference_action : SET DEFAULT */\n/*! Production::    reference_action : SET NULLX */\n/*! Production::    reference_option : CHECK \"(\" expr \")\" */\n/*! Production::    reference_option : ON DELETE reference_action */\n/*! Production::    reference_option : ON UPDATE reference_action */\n```\n\n----------------------------------------\n\nTITLE: Defining Subpartition Options in SQL\nDESCRIPTION: These productions define various subpartitioning options in SQL, including LIST, HASH, KEY, and RANGE subpartitioning with different column and template configurations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_197\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tg_subpartition_option : SUBPARTITION BY BISON_LIST COLUMNS INTNUM SUBPARTITION TEMPLATE opt_list_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY BISON_LIST SUBPARTITION TEMPLATE opt_list_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY HASH opt_subpartitions */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY KEY INTNUM opt_subpartitions */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY LIST COLUMNS INTNUM SUBPARTITION TEMPLATE opt_list_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY RANGE COLUMNS INTNUM SUBPARTITION TEMPLATE opt_range_subpartition_list */\n\n/*! Production::    tg_subpartition_option : SUBPARTITION BY RANGE SUBPARTITION TEMPLATE opt_range_subpartition_list */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table Subquery\nDESCRIPTION: Defines production rules for table_subquery in SQL grammar. These rules specify how subqueries can be used as tables in SQL statements, with various options for fetching, ordering, and aliasing.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_183\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery fetch_next_clause \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback relation_name */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : \"(\" subquery order_by fetch_next_clause \")\" use_flashback transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens */\n\n/*! Production::    table_subquery : select_with_parens AS relation_name */\n\n/*! Production::    table_subquery : select_with_parens fetch_next_clause */\n\n/*! Production::    table_subquery : select_with_parens relation_name */\n\n/*! Production::    table_subquery : select_with_parens relation_name transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback */\n\n/*! Production::    table_subquery : select_with_parens use_flashback AS relation_name */\n\n/*! Production::    table_subquery : select_with_parens use_flashback fetch_next_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback relation_name */\n\n/*! Production::    table_subquery : select_with_parens use_flashback relation_name transpose_clause */\n\n/*! Production::    table_subquery : select_with_parens use_flashback transpose_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Keywords as Simple Identifiers\nDESCRIPTION: This snippet demonstrates the pattern used to define MySQL keywords as simple identifiers. Each keyword is enclosed in a production rule comment, indicating its status as a recognized MySQL keyword.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_153\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simpleId : MASTER_LOG_FILE */\n\n/*! Production::    simpleId : MASTER_LOG_POS */\n\n/*! Production::    simpleId : MASTER_PASSWORD */\n\n/*! Production::    simpleId : MASTER_PORT */\n```\n\n----------------------------------------\n\nTITLE: Defining TLS Options in SQL\nDESCRIPTION: These productions define various TLS (Transport Layer Security) options for SQL connections, including cipher, issuer, subject, and X509 certificate specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_200\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tlsOption : CIPHER STRING_LITERAL */\n\n/*! Production::    tlsOption : ISSUER STRING_LITERAL */\n\n/*! Production::    tlsOption : SSL */\n\n/*! Production::    tlsOption : SUBJECT STRING_LITERAL */\n\n/*! Production::    tlsOption : X509 */\n\n/*! Production::    tlsOptions : tlsOption */\n\n/*! Production::    tlsOptions : tlsOption opt_AND tlsOptions */\n\n/*! Production::    tls_option : CIPHER STRING_VALUE */\n\n/*! Production::    tls_option : ISSUER STRING_VALUE */\n\n/*! Production::    tls_option : SUBJECT STRING_VALUE */\n\n/*! Production::    tls_option_list : tls_option */\n\n/*! Production::    tls_option_list : tls_option_list AND tls_option */\n\n/*! Production::    tls_option_list : tls_option_list tls_option */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for User and Security Management\nDESCRIPTION: This snippet presents SQL grammar production rules for user creation and security-related operations. It includes syntax for creating users with various authentication and resource options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    createUser : CREATE USER opt_ifNotExists userAuthOptions REQUIRE user_tlsOpt opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    createUser : CREATE USER opt_ifNotExists userAuthOptions opt_withUserResourceOpt opt_userPwdOption */\n\n/*! Production::    createUser : CREATE USER userAuthOptions */\n```\n\n----------------------------------------\n\nTITLE: Defining Unreserved SQL Keywords with Production Rules\nDESCRIPTION: This collection of directive comments defines SQL keywords that are considered 'unreserved', meaning they have special meaning in SQL contexts but can also be used as identifiers. Each comment follows the same pattern and is likely used by a code generator or parser definition system.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_209\n\nLANGUAGE: C/C++\nCODE:\n```\n/*! Production::    unreserved_keyword_normal : PASSWORD_VERIFY_FUNCTION */\n```\n\n----------------------------------------\n\nTITLE: Table Relation Factor Productions\nDESCRIPTION: SQL grammar rules defining various combinations of relation factors including sample clauses, flashback usage, partitioning, and index hints.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_210\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    tbl_name : relation_factor sample_clause AS relation_name index_hint_list */\n/*! Production::    tbl_name : relation_factor sample_clause fetch_next_clause */\n/*! Production::    tbl_name : relation_factor sample_clause index_hint_list */\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Statement Production Rules in SQL\nDESCRIPTION: These rules define various utility statements in SQL, including diagnostics, describe, help, signal, and use statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_215\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    utilityStatement : diagnosticsStatement */\n\n/*! Production::    utilityStatement : fullDescribeStatement */\n\n/*! Production::    utilityStatement : helpStatement */\n\n/*! Production::    utilityStatement : resignalStatement */\n\n/*! Production::    utilityStatement : signalStatement */\n\n/*! Production::    utilityStatement : simpleDescribeStatement */\n\n/*! Production::    utilityStatement : useStatement */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Update Statement Productions\nDESCRIPTION: This snippet defines the production rules for SQL UPDATE statements, including single and multiple table updates, assignment lists, and various clauses like WHERE and ORDER BY.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_223\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    updateStatement : multipleUpdateStatement */\n\n/*! Production::    updateStatement : singleUpdateStatement */\n\n/*! Production::    update_asgn_factor : \"(\" column_list \")\" COMP_EQ \"(\" subquery \")\" */\n\n/*! Production::    update_asgn_factor : column_definition_ref COMP_EQ expr_or_default */\n\n/*! Production::    update_asgn_factor : no_param_column_ref COMP_EQ expr_or_default */\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Reference Lexical Rules in SQL Grammar\nDESCRIPTION: Lexical rules for variable references in SQL, including session variables, global variables, and parameter binding syntax. These patterns recognize different types of variable references in SQL code.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_231\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       :{identifier} */\n\n/*! Rule::       :{identifier}\\.{identifier} */\n\n/*! Rule::       :{int_num} */\n\n/*! Rule::       @([A-Z0-9._$]+|{SQUOTA_STRING}|{DQUOTA_STRING}|{BQUOTA_STRING}) */\n\n/*! Rule::       @@([A-Z0-9._$]+|{BQUOTA_STRING}) */\n\n/*! Rule::       @@GLOBAL */\n\n/*! Rule::       @@LOCAL */\n\n/*! Rule::       @@global */\n\n/*! Rule::       @@local */\n\n/*! Rule::       @@session */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER PROCEDURE Grammar Rules in SQL\nDESCRIPTION: This snippet defines a grammar production for altering a stored procedure, allowing modifications to its schema or properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_procedure_stmt : ALTER PROCEDURE pl_schema_name sp_alter_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining Cast Datetime Types in SQL\nDESCRIPTION: This snippet defines the productions for cast datetime types in SQL, including DATE, DATETIME, TIME, and YEAR.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    cast_datetime_type_i : DATE */\n\n/*! Production::    cast_datetime_type_i : DATETIME */\n\n/*! Production::    cast_datetime_type_i : TIME */\n\n/*! Production::    cast_datetime_type_i : YEAR */\n```\n\n----------------------------------------\n\nTITLE: Handler Operation Rules\nDESCRIPTION: Grammar rules defining operations for handlers including open, close, read and condition values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_92\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    handlerOpenStatement : HANDLER tableName OPEN */\n/*! Production::    handlerCloseStatement : HANDLER tableName CLOSE */\n/*! Production::    handlerReadStatement : HANDLER tableName READ FIRST opt_whereClause opt_limitClause */\n/*! Production::    handlerReadStatement : HANDLER tableName READ NEXT opt_whereClause opt_limitClause */\n```\n\n----------------------------------------\n\nTITLE: Defining Charset and Collation Related Productions in SQL\nDESCRIPTION: This snippet defines various productions related to character sets, collations, and charset introducers in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    charsetValues : DEFAULT */\n\n/*! Production::    charsetValues : charsetName */\n\n/*! Production::    charset_introducer : _BINARY */\n\n/*! Production::    charset_introducer : _GB18030 */\n\n/*! Production::    charset_introducer : _GBK */\n\n/*! Production::    charset_introducer : _LATIN1 */\n\n/*! Production::    charset_introducer : _UTF16 */\n\n/*! Production::    charset_introducer : _UTF8 */\n\n/*! Production::    charset_introducer : _UTF8MB4 */\n\n/*! Production::    charset_key : CHARACTER SET */\n\n/*! Production::    charset_key : CHARSET */\n\n/*! Production::    charset_name : BINARY */\n\n/*! Production::    charset_name : NAME_OB */\n\n/*! Production::    charset_name : STRING */\n\n/*! Production::    charset_name : STRING_VALUE */\n\n/*! Production::    charset_name : identifier */\n\n/*! Production::    charset_name_or_default : DEFAULT */\n\n/*! Production::    charset_name_or_default : charset_name */\n```\n\n----------------------------------------\n\nTITLE: Defining Set Statement Grammar Productions in SQL\nDESCRIPTION: These productions define various SET statements, including setting character sets, variables, autocommit behavior, and passwords. They provide the necessary syntax for modifying session and system variables in a database environment.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_126\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    setAutocommitStatement : SET AUTOCOMMIT EQUAL_SYMBOL boolNumValue */\n\n/*! Production::    setFullIdAssign : fullId assign expression */\n\n/*! Production::    setFullIdAssign : fullId assign expression COMMA setFullIdAssign */\n\n/*! Production::    setPasswordStatement : SET PASSWORD opt_forUser EQUAL_SYMBOL setPasswordValue */\n\n/*! Production::    setPasswordValue : STRING_LITERAL */\n\n/*! Production::    setPasswordValue : passwordFunctionClause */\n\n/*! Production::    setStatement : SET NAMES DEFAULT */\n\n/*! Production::    setStatement : SET NAMES charsetName opt_collateConfig */\n\n/*! Production::    setStatement : SET charsetKeywords charsetValues */\n\n/*! Production::    setStatement : SET setFullIdAssign */\n\n/*! Production::    setStatement : SET setVariablesAssign */\n\n/*! Production::    setStatement : setAutocommitStatement */\n\n/*! Production::    setStatement : setPasswordStatement */\n\n/*! Production::    setStatement : setTransactionStatement */\n\n/*! Production::    setTransactionStatement : SET opt_transactionScope TRANSACTION transactionOptions */\n\n/*! Production::    setVariablesAssign : variableClause assign expression */\n\n/*! Production::    setVariablesAssign : variableClause assign expression COMMA setVariablesAssign */\n```\n\n----------------------------------------\n\nTITLE: Engine Type Production Rules\nDESCRIPTION: Production rules defining available database engine types including InnoDB, Memory, MyISAM and others.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_62\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    engineName : INNODB */\n/*! Production::    engineName : MEMORY */\n/*! Production::    engineName : MRG_MYISAM */\n/*! Production::    engineName : MYISAM */\n/*! Production::    engineName : NDB */\n/*! Production::    engineName : NDBCLUSTER */\n/*! Production::    engineName : PERFORMANCE_SCHEMA */\n/*! Production::    engineName : REVERSE_QUOTE_ID */\n/*! Production::    engineName : STRING_LITERAL */\n/*! Production::    engineName : TOKUDB */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Predicate Production Rules\nDESCRIPTION: This snippet defines various production rules for SQL predicates, including comparisons, pattern matching, and set operations. It covers constructs like BETWEEN, IN, LIKE, REGEXP, and EXISTS.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_111\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    predicate : bit_expr BETWEEN bit_expr AND bit_expr */\n\n/*! Production::    predicate : bit_expr IN in_expr */\n\n/*! Production::    predicate : bit_expr LIKE bit_expr */\n\n/*! Production::    predicate : bit_expr REGEXP bit_expr */\n\n/*! Production::    predicate : exists_function_name select_with_parens */\n```\n\n----------------------------------------\n\nTITLE: Explain Statement Production Rules\nDESCRIPTION: Production rules for EXPLAIN statement variations including basic, extended, partitions and outline formats.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_64\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    explain_or_desc : DESC */\n/*! Production::    explain_or_desc : DESCRIBE */\n/*! Production::    explain_or_desc : EXPLAIN */\n/*! Production::    explain_stmt : explain_or_desc BASIC PRETTY explainable_stmt */\n/*! Production::    explain_stmt : explain_or_desc EXTENDED explainable_stmt */\n/*! Production::    explain_stmt : explain_or_desc PARTITIONS explainable_stmt */\n```\n\n----------------------------------------\n\nTITLE: SQL Replication Statement Productions\nDESCRIPTION: Production rules for replication commands including master/slave operations and XA transactions\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_116\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    replicationStatement : changeMaster */\n/*! Production::    replicationStatement : changeReplicationFilter */\n/*! Production::    replicationStatement : startSlave */\n/*! Production::    replicationStatement : stopSlave */\n```\n\n----------------------------------------\n\nTITLE: Merge Statement Productions\nDESCRIPTION: Grammar rules for MERGE statement syntax including INSERT/UPDATE clauses\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_85\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    merge_stmt : merge_with_opt_hint INTO source_relation_factor USING source_relation_factor opt_alias ON \"(\" expr \")\" merge_insert_clause */\n\n/*! Production::    merge_insert_clause : WHEN NOT MATCHED THEN INSERT opt_insert_columns VALUES \"(\" insert_vals \")\" opt_where */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions - Trigger Definitions\nDESCRIPTION: Grammar rules for defining trigger events, timing, and placement\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_204\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    triggerEvent : DELETE */\n/*! Production::    triggerEvent : INSERT */\n/*! Production::    triggerEvent : UPDATE */\n/*! Production::    triggerTime : BEFORE */\n/*! Production::    triggerTime : AFTER */\n/*! Production::    triggerPlace : FOLLOWS */\n/*! Production::    triggerPlace : PRECEDES */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional SQL Grammar Productions\nDESCRIPTION: This snippet shows the pattern used to define optional SQL grammar productions throughout the file. Each production is commented with its syntax and uses the %epsilon symbol to represent an empty/optional clause.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_97\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_qb_name : \"(\" qb_name_option \")\" */\n\n/*! Production::    opt_qb_name : %epsilon */\n\n/*! Production::    opt_query_expression_option_list : %epsilon */\n\n/*! Production::    opt_query_expression_option_list : query_expression_option_list */\n```\n\n----------------------------------------\n\nTITLE: MySQL Exception Handling Production Rules\nDESCRIPTION: Production rules for exception handling in PL/SQL-like functionality within MySQL. These rules define exception declarations, handlers, initialization pragmas, and exception sections.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_61\n\nLANGUAGE: MySQL\nCODE:\n```\n/*! Production::    exception_decl : exception_name EXCEPTION */\n\n/*! Production::    exception_handler : WHEN exception_pattern THEN pl_lang_stmt_list */\n\n/*! Production::    exception_init_pragma : PRAGMA EXCEPTION_INIT \"(\" exception_name \",\" error_code \")\" */\n\n/*! Production::    exception_list : exception_list OR pl_access_name */\n\n/*! Production::    exception_list : pl_access_name */\n\n/*! Production::    exception_name : identifier */\n\n/*! Production::    exception_pattern : OTHERS */\n\n/*! Production::    exception_pattern : exception_list */\n\n/*! Production::    exception_section : exception_handler */\n\n/*! Production::    exception_section : exception_handler exception_section */\n```\n\n----------------------------------------\n\nTITLE: Join Type Grammar Productions\nDESCRIPTION: Grammar rules for different types of outer joins including LEFT, RIGHT, and FULL outer joins.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_106\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    outer_join_type : FULL join_outer */\n/*! Production::    outer_join_type : LEFT join_outer */\n/*! Production::    outer_join_type : RIGHT join_outer */\n```\n\n----------------------------------------\n\nTITLE: Defining Table and Constraint Options in SQL Grammar\nDESCRIPTION: These production rules define optional table and constraint clauses for SQL statements, including table aliases, constraints, and table options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_102\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_table : %epsilon */\n\n/*! Production::    opt_table : TABLE */\n\n/*! Production::    opt_tableConstraint : %epsilon */\n\n/*! Production::    opt_tableConstraint : CONSTRAINT opt_uid */\n\n/*! Production::    opt_tableConstraintFormat : %epsilon */\n\n/*! Production::    opt_tableConstraintFormat : tableConstraintFormat */\n\n/*! Production::    opt_tableOptions : %epsilon */\n\n/*! Production::    opt_tableOptions : tableOptions */\n\n/*! Production::    opt_table_alias : %epsilon */\n\n/*! Production::    opt_table_alias : relation_name */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Prepared Statement Production Rules\nDESCRIPTION: This snippet defines production rules for SQL prepared statements, including PREPARE, EXECUTE, and DEALLOCATE operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_113\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    prepareStatement : PREPARE uid FROM LOCAL_ID */\n\n/*! Production::    prepareStatement : PREPARE uid FROM STRING_LITERAL */\n\n/*! Production::    preparedStatement : deallocatePrepare */\n\n/*! Production::    preparedStatement : executeStatement */\n\n/*! Production::    preparedStatement : prepareStatement */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Productions for System Privileges\nDESCRIPTION: This snippet defines parser productions for various system privileges, including ALTER, CREATE, and other administrative operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_163\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    system_privilege : ALTER ANY INDEX */\n\n/*! Production::    system_privilege : ALTER ANY OUTLINE */\n\n/*! Production::    system_privilege : ALTER ANY PROCEDURE */\n\n/*! Production::    system_privilege : ALTER ANY ROLE */\n\n/*! Production::    system_privilege : ALTER ANY SEQUENCE */\n\n/*! Production::    system_privilege : ALTER ANY TABLE */\n\n/*! Production::    system_privilege : ALTER ANY TRIGGER */\n\n/*! Production::    system_privilege : ALTER ANY TYPE */\n\n/*! Production::    system_privilege : ALTER DATABASE */\n\n/*! Production::    system_privilege : ALTER PROFILE */\n\n/*! Production::    system_privilege : ALTER SESSION */\n\n/*! Production::    system_privilege : ALTER SYSTEM */\n\n/*! Production::    system_privilege : ALTER TABLESPACE */\n\n/*! Production::    system_privilege : ALTER USER */\n\n/*! Production::    system_privilege : AUDIT ANY */\n\n/*! Production::    system_privilege : BACKUP ANY TABLE */\n\n/*! Production::    system_privilege : BECOME USER */\n\n/*! Production::    system_privilege : COMMENT ANY TABLE */\n\n/*! Production::    system_privilege : CREATE ANY INDEX */\n\n/*! Production::    system_privilege : CREATE ANY OUTLINE */\n\n/*! Production::    system_privilege : CREATE ANY PROCEDURE */\n\n/*! Production::    system_privilege : CREATE ANY SEQUENCE */\n\n/*! Production::    system_privilege : CREATE ANY SYNONYM */\n```\n\n----------------------------------------\n\nTITLE: Defining Select Statement Grammar Productions in SQL\nDESCRIPTION: These productions define various forms of select statements, including those with unions, order by clauses, limit clauses, and lock clauses. They cover different combinations of these elements to represent the full range of possible select statement structures.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_118\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    selectStatement : queryExpressionNointo unionParenthesises UNION unionType queryExpression opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : queryExpressionNointo unionParenthesises opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : querySpecification opt_lockClause */\n\n/*! Production::    selectStatement : querySpecificationNointo unionStatements UNION unionType queryExpression opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : querySpecificationNointo unionStatements UNION unionType querySpecification opt_orderByClause opt_limitClause opt_lockClause */\n\n/*! Production::    selectStatement : querySpecificationNointo unionStatements opt_orderByClause opt_limitClause opt_lockClause */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for Identifier Patterns\nDESCRIPTION: These rules define patterns for SQL identifiers, including those with special characters or prefixes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_246\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       [:]?{identifier} */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       \\.{ID_LITERAL} */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       {ID_LITERAL} */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       {identifier} */\n```\n\n----------------------------------------\n\nTITLE: Stored Function Clause Production Rules in SQL\nDESCRIPTION: Grammar production rules for stored function clauses including access control, parallelization, and deterministic behavior.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_134\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sf_clause : accessible_by */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sf_clause : invoke_right */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sf_clause : parallel_enable */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sf_clause : result_cache */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sf_clause : sp_deterministic */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sf_clause_list : sf_clause */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    sf_clause_list : sf_clause_list sf_clause */\n```\n\n----------------------------------------\n\nTITLE: Creating Profile and Resource Statements in SQL\nDESCRIPTION: Defines syntax for creating profiles with password parameters and various resource-related statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_profile_stmt : CREATE PROFILE profile_name LIMIT password_parameters\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_resource_stmt : CREATE RESOURCE POOL relation_name opt_create_resource_pool_option_list\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_resource_stmt : CREATE RESOURCE UNIT relation_name opt_resource_unit_option_list\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_resource_stmt : create_with_opt_hint RESOURCE POOL opt_if_not_exists relation_name opt_create_resource_pool_option_list\n```\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_resource_stmt : create_with_opt_hint RESOURCE UNIT opt_if_not_exists relation_name opt_resource_unit_option_list\n```\n\n----------------------------------------\n\nTITLE: SHOW Schema Entity Production Rules in SQL\nDESCRIPTION: Grammar production rules for schema entities used in SHOW statements that display schema-level objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_142\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showSchemaEntity : EVENTS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showSchemaEntity : TABLE STATUS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showSchemaEntity : TRIGGERS */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    showSchemaEntity : opt_FULL TABLES */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Optional Elements\nDESCRIPTION: Comprehensive set of SQL grammar production rules defining optional syntax elements like constraints, parameters, database options, and various SQL clauses. These rules use BNF-style notation to specify valid syntax combinations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_114\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    opt_constraint_and_name : constraint_and_name */\n\n/*! Production::    opt_constraint_name : %epsilon */\n\n/*! Production::    opt_constraint_name : constraint_name */\n\n/*! Production::    opt_constructor_param : \"(\" constr_param_list \")\" */\n\n/*! Production::    opt_constructor_param : \"(\" self_inout constr_param_list \")\" */\n\n/*! Production::    opt_constructor_param : %epsilon */\n\n/*! Production::    opt_copy_id : %epsilon */\n\n/*! Production::    opt_copy_id : COPY INTNUM */\n\n/*! Production::    opt_createDefinitions : %epsilon */\n\n/*! Production::    opt_createDefinitions : createDefinitions */\n\n/*! Production::    opt_createLogfileGroup_redo : %epsilon */\n\n/*! Production::    opt_createLogfileGroup_redo : REDO_BUFFER_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_redo : REDO_BUFFER_SIZE fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_size : %epsilon */\n\n/*! Production::    opt_createLogfileGroup_size : INITIAL_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_size : INITIAL_SIZE fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_undo : %epsilon */\n\n/*! Production::    opt_createLogfileGroup_undo : UNDO_BUFFER_SIZE EQUAL_SYMBOL fileSizeLiteral */\n\n/*! Production::    opt_createLogfileGroup_undo : UNDO_BUFFER_SIZE fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbAutoExtent : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbAutoExtent : AUTOEXTEND_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbAutoMaxSize : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbAutoMaxSize : MAX_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbExtent : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbExtent : EXTENT_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_createTablespaceNdbInitial : %epsilon */\n\n/*! Production::    opt_createTablespaceNdbInitial : INITIAL_SIZE opt_MULT_ASSIGN fileSizeLiteral */\n\n/*! Production::    opt_create_resource_pool_option_list : %epsilon */\n\n/*! Production::    opt_create_resource_pool_option_list : create_resource_pool_option */\n\n/*! Production::    opt_create_resource_pool_option_list : opt_create_resource_pool_option_list \",\" create_resource_pool_option */\n\n/*! Production::    opt_create_timestamp : %epsilon */\n\n/*! Production::    opt_create_timestamp : CREATE_TIMESTAMP opt_equal_mark INTNUM */\n\n/*! Production::    opt_cycle_clause : %epsilon */\n\n/*! Production::    opt_cycle_clause : CYCLE alias_name_list SET var_name TO STRING_VALUE DEFAULT STRING_VALUE */\n\n/*! Production::    opt_dataTypeCharsetAssign : %epsilon */\n\n/*! Production::    opt_dataTypeCharsetAssign : charsetKeywords charsetName */\n\n/*! Production::    opt_dataTypeCollateAssign : %epsilon */\n\n/*! Production::    opt_dataTypeCollateAssign : BINARY */\n\n/*! Production::    opt_dataTypeCollateAssign : COLLATE collationName */\n\n/*! Production::    opt_data_source_list : %epsilon */\n\n/*! Production::    opt_data_source_list : data_source_list */\n\n/*! Production::    opt_database_name : %epsilon */\n\n/*! Production::    opt_database_name : NAME_OB */\n\n/*! Production::    opt_database_name : database_name */\n\n/*! Production::    opt_database_option_list : %epsilon */\n\n/*! Production::    opt_database_option_list : database_option_list */\n\n/*! Production::    opt_databases : %epsilon */\n\n/*! Production::    opt_databases : databases_expr */\n\n/*! Production::    opt_datetime_fsp_i : \"(\" INTNUM \")\" */\n\n/*! Production::    opt_datetime_fsp_i : \"(\" precision_int_num \")\" */\n\n/*! Production::    opt_datetime_fsp_i : %epsilon */\n\n/*! Production::    opt_dblink : %epsilon */\n\n/*! Production::    opt_dblink : USER_VARIABLE */\n\n/*! Production::    opt_debug : %epsilon */\n\n/*! Production::    opt_debug : DEBUG */\n\n/*! Production::    opt_dec_precision : %epsilon */\n\n/*! Production::    opt_dec_precision : number_precision */\n\n/*! Production::    opt_decimalLiteral : %epsilon */\n\n/*! Production::    opt_decimalLiteral : decimalLiteral */\n\n/*! Production::    opt_decl_stmt_ext_list : %epsilon */\n\n/*! Production::    opt_decl_stmt_ext_list : decl_stmt_ext_list */\n\n/*! Production::    opt_decl_stmt_list : %epsilon */\n\n/*! Production::    opt_decl_stmt_list : decl_stmt_list */\n\n/*! Production::    opt_declareConditionWithSEMI : %epsilon */\n\n/*! Production::    opt_declareConditionWithSEMI : declareConditionWithSEMIs */\n\n/*! Production::    opt_declareCursorWithSEMI : %epsilon */\n\n/*! Production::    opt_declareCursorWithSEMI : declareCursorWithSEMIs */\n\n/*! Production::    opt_declareHandlerWithSEMI : %epsilon */\n\n/*! Production::    opt_declareHandlerWithSEMI : declareHandlerWithSEMIs */\n\n/*! Production::    opt_declareVariableWithSEMI : %epsilon */\n\n/*! Production::    opt_declareVariableWithSEMI : declareVariableWithSEMIs */\n\n/*! Production::    opt_declare_section : %epsilon */\n\n/*! Production::    opt_declare_section : DECLARE */\n\n/*! Production::    opt_declare_section : DECLARE declare_section */\n\n/*! Production::    opt_default : %epsilon */\n\n/*! Production::    opt_default : default_expr */\n\n/*! Production::    opt_defaultValueOnUpdate : %epsilon */\n\n/*! Production::    opt_defaultValueOnUpdate : ON UPDATE currentTimestamp */\n\n/*! Production::    opt_default_collation : %epsilon */\n\n/*! Production::    opt_default_collation : DEFAULT COLLATION USING_NLS_COMP */\n\n/*! Production::    opt_default_mark : %epsilon */\n\n/*! Production::    opt_default_mark : DEFAULT */\n\n/*! Production::    opt_default_tables_space : DEFAULT TABLESPACE tablespace */\n\n/*! Production::    opt_definer : %epsilon */\n\n/*! Production::    opt_definer : DEFINER COMP_EQ user */\n\n/*! Production::    opt_desc_column_option : %epsilon */\n\n/*! Production::    opt_desc_column_option : STRING_VALUE */\n\n/*! Production::    opt_desc_column_option : column_name */\n\n/*! Production::    opt_description : %epsilon */\n\n/*! Production::    opt_description : DESCRIPTION opt_equal_mark STRING_VALUE */\n\n/*! Production::    opt_disk_alias : %epsilon */\n\n/*! Production::    opt_disk_alias : NAME opt_equal_mark relation_name_or_string */\n\n/*! Production::    opt_distinct : %epsilon */\n\n/*! Production::    opt_distinct : DISTINCT */\n\n/*! Production::    opt_distinct : UNIQUE */\n\n/*! Production::    opt_distinct_or_all : %epsilon */\n\n/*! Production::    opt_distinct_or_all : ALL */\n\n/*! Production::    opt_distinct_or_all : DISTINCT */\n\n/*! Production::    opt_distinct_or_all : UNIQUE */\n\n/*! Production::    opt_distribute_method : %epsilon */\n\n/*! Production::    opt_distribute_method : opt_comma distribute_method */\n\n/*! Production::    opt_dlink : \"@\" ip_port */\n\n/*! Production::    opt_dlink : %epsilon */\n\n/*! Production::    opt_dropType : %epsilon */\n\n/*! Production::    opt_dropType : CASCADE */\n\n/*! Production::    opt_dropType : RESTRICT */\n\n/*! Production::    opt_drop_behavior : %epsilon */\n\n/*! Production::    opt_drop_behavior : CASCADE */\n\n/*! Production::    opt_drop_behavior : RESTRICT */\n\n/*! Production::    opt_duplicate : %epsilon */\n\n/*! Production::    opt_duplicate : IGNORE */\n\n/*! Production::    opt_duplicate : REPLACE */\n\n/*! Production::    opt_dynamic_returning_clause : %epsilon */\n\n/*! Production::    opt_dynamic_returning_clause : RETURN normal_into_clause */\n\n/*! Production::    opt_dynamic_returning_clause : RETURNING normal_into_clause */\n\n/*! Production::    opt_editionable : %epsilon */\n\n/*! Production::    opt_editionable : EDITIONABLE */\n\n/*! Production::    opt_editionable : NONEDITIONABLE */\n\n/*! Production::    opt_element_spec : \",\" element_spec */\n\n/*! Production::    opt_element_spec : %epsilon */\n\n/*! Production::    opt_elifAlternatives : %epsilon */\n\n/*! Production::    opt_elifAlternatives : elifAlternatives */\n\n/*! Production::    opt_enableType : %epsilon */\n\n/*! Production::    opt_enableType : enableType */\n\n/*! Production::    opt_enable_option : %epsilon */\n\n/*! Production::    opt_enable_option : DISABLE */\n\n/*! Production::    opt_enable_option : ENABLE */\n\n/*! Production::    opt_enable_or_disable : %epsilon */\n\n/*! Production::    opt_enable_or_disable : DISABLE */\n\n/*! Production::    opt_enable_or_disable : ENABLE */\n\n/*! Production::    opt_end_p : %epsilon */\n\n/*! Production::    opt_end_p : END_P */\n\n/*! Production::    opt_engine_option : %epsilon */\n\n/*! Production::    opt_engine_option : ENGINE_ COMP_EQ INNODB */\n\n/*! Production::    opt_equal_mark : %epsilon */\n\n/*! Production::    opt_equal_mark : COMP_EQ */\n\n/*! Production::    opt_eventPreserve : %epsilon */\n\n/*! Production::    opt_eventPreserve : ON COMPLETION opt_NOT PRESERVE */\n\n/*! Production::    opt_exception_name : %epsilon */\n\n/*! Production::    opt_exception_name : pl_access_name */\n\n/*! Production::    opt_exception_section : %epsilon */\n\n/*! Production::    opt_exception_section : EXCEPTION exception_section */\n\n/*! Production::    opt_execute_section : %epsilon */\n\n/*! Production::    opt_execute_section : execute_section */\n\n/*! Production::    opt_expr_as_list : %epsilon */\n\n/*! Production::    opt_expr_as_list : expr_as_list */\n\n/*! Production::    opt_expressionsWithDefaults : %epsilon */\n\n/*! Production::    opt_expressionsWithDefaults : expressionsWithDefaults */\n\n/*! Production::    opt_fetch_next : %epsilon */\n\n/*! Production::    opt_fetch_next : fetch_next_clause */\n\n/*! Production::    opt_field_or_var_spec : \"(\" \")\" */\n\n/*! Production::    opt_field_or_var_spec : \"(\" field_or_vars_list \")\" */\n\n/*! Production::    opt_field_or_var_spec : %epsilon */\n\n/*! Production::    opt_file_id : %epsilon */\n\n/*! Production::    opt_file_id : file_id */\n\n/*! Production::    opt_final_inst_list : %epsilon */\n\n/*! Production::    opt_final_inst_list : final_inst_list */\n\n/*! Production::    opt_flashback_rename_database : %epsilon */\n\n/*! Production::    opt_flashback_rename_database : RENAME TO database_factor */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Production for SIGNAL Statement\nDESCRIPTION: This snippet defines the grammar production for the SIGNAL statement used in error handling and condition signaling.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_150\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    signalStatement : SIGNAL signValue opt_setSignalConditionInformations */\n```\n\n----------------------------------------\n\nTITLE: MySQL Alter View Productions\nDESCRIPTION: Grammar productions for ALTER VIEW statements including algorithm, security and check options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alterView : ALTER opt_viewAlgorithmAssign opt_ownerStatement opt_sqlSecurity VIEW fullId opt_uidList AS selectStatement opt_viewCheckOption */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Production Rules for VARRAY Definitions\nDESCRIPTION: Specifies grammar rules for defining variable-sized arrays (VARRAY) in Oracle SQL, with optional VARYING keyword.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_151\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    pre_varray : VARRAY */\n\n/*! Production::    pre_varray : opt_varying ARRAY */\n```\n\n----------------------------------------\n\nTITLE: Citation for DB-GPT Agent Development Paper\nDESCRIPTION: BibTeX citation for the paper on using DB-GPT for Agent development. This citation should be used when referencing the project's agent development capabilities in academic or research contexts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: BibTeX\nCODE:\n```\n@misc{huang2024romasrolebasedmultiagentdatabase,\n      title={ROMAS: A Role-Based Multi-Agent System for Database monitoring and Planning}, \n      author={Yi Huang and Fangyin Cheng and Fan Zhou and Jiahui Li and Jian Gong and Hongjun Yang and Zhidong Fan and Caigao Jiang and Siqiao Xue and Faqiang Chen},\n      year={2024},\n      eprint={2412.13520},\n      archivePrefix={arXiv},\n      primaryClass={cs.AI},\n      url={https://arxiv.org/abs/2412.13520}, \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for DB-GPT v0.5.0 Upgrade\nDESCRIPTION: This bash command installs the necessary dependencies for DB-GPT v0.5.0 when upgrading from source code using the default installation method.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/upgrade/v0.5.0.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[default]\"\n```\n\n----------------------------------------\n\nTITLE: Pulling DB-GPT Docker Image\nDESCRIPTION: Command to pull the official DB-GPT Docker image with OpenAI compatibility from Eosphoros AI's Docker Hub repository.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/docker.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull eosphorosai/dbgpt-openai:latest\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Rule for Numeric Patterns\nDESCRIPTION: These rules define various numeric patterns, including decimal numbers, scientific notation, and numbers with specific suffixes like D or F for data type indication.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_245\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       [0-9]+E[-+]?[0-9]+D|[0-9]+\\.[0-9]*E[-+]?[0-9]+D|\\.[0-9]+E[-+]?[0-9]+D */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       [0-9]+E[-+]?[0-9]+F|[0-9]+\\.[0-9]*E[-+]?[0-9]+F|\\.[0-9]+E[-+]?[0-9]+F */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       [0-9]+E[-+]?[0-9]+|[0-9]+\\.[0-9]*E[-+]?[0-9]+|\\.[0-9]+E[-+]?[0-9]+ */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       [0-9]+\\.[0-9]*D|[0-9]+D|\\.[0-9]+D */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       [0-9]+\\.[0-9]*F|[0-9]+F|\\.[0-9]+F */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       [0-9]+\\.[0-9]*|\\.[0-9]+ */\n```\n\n----------------------------------------\n\nTITLE: SQL Hint Options Combination Rules\nDESCRIPTION: Grammar rules for combining multiple hint options in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_90\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    hint_options : hint_option */\n\n/*! Production::    hint_options : hint_options hint_option */\n```\n\n----------------------------------------\n\nTITLE: Hash Partition Element Productions\nDESCRIPTION: Grammar rules specifying hash partition element syntax with support for tablespace, compression and subpartition configurations\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_74\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    hash_partition_element : PARTITION */\n/*! Production::    hash_partition_element : PARTITION ID INTNUM */\n/*! Production::    hash_partition_element : PARTITION ID INTNUM TABLESPACE tablespace */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Rules - String Trim Operations\nDESCRIPTION: Production rules defining various forms of the TRIM function including LEADING and TRAILING operations on expressions and bit expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_121\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    parameterized_trim : LEADING FROM bit_expr */\n/*! Production::    parameterized_trim : LEADING FROM expr */\n/*! Production::    parameterized_trim : LEADING bit_expr FROM bit_expr */\n/*! Production::    parameterized_trim : LEADING expr FROM expr */\n/*! Production::    parameterized_trim : TRAILING FROM bit_expr */\n/*! Production::    parameterized_trim : TRAILING FROM expr */\n/*! Production::    parameterized_trim : TRAILING bit_expr FROM bit_expr */\n/*! Production::    parameterized_trim : TRAILING expr FROM expr */\n/*! Production::    parameterized_trim : bit_expr */\n/*! Production::    parameterized_trim : bit_expr FROM bit_expr */\n/*! Production::    parameterized_trim : expr */\n/*! Production::    parameterized_trim : expr FROM expr */\n```\n\n----------------------------------------\n\nTITLE: SQL Statement Definitions\nDESCRIPTION: This extensive snippet defines a wide range of SQL statements, including CREATE, ALTER, DROP, and various database management commands. It covers the syntax for manipulating databases, tables, users, and other database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_195\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    stmt : alter_database_stmt */\n\n/*! Production::    stmt : alter_index_stmt */\n\n/*! Production::    stmt : alter_keystore_stmt */\n\n/*! Production::    stmt : alter_outline_stmt */\n\n/*! Production::    stmt : alter_profile_stmt */\n\n/*! Production::    stmt : alter_resource_stmt */\n\n/*! Production::    stmt : alter_sequence_stmt */\n\n/*! Production::    stmt : alter_session_stmt */\n\n/*! Production::    stmt : alter_system_stmt */\n\n/*! Production::    stmt : alter_table_stmt */\n\n/*! Production::    stmt : alter_tablegroup_stmt */\n\n/*! Production::    stmt : alter_tablespace_stmt */\n\n/*! Production::    stmt : alter_tenant_stmt */\n\n/*! Production::    stmt : alter_user_profile_stmt */\n\n/*! Production::    stmt : alter_user_stmt */\n\n/*! Production::    stmt : analyze_stmt */\n\n/*! Production::    stmt : audit_stmt */\n\n/*! Production::    stmt : begin_stmt */\n\n/*! Production::    stmt : call_stmt */\n\n/*! Production::    stmt : commit_stmt */\n\n/*! Production::    stmt : create_database_stmt */\n\n/*! Production::    stmt : create_dblink_stmt */\n\n/*! Production::    stmt : create_function_stmt */\n\n/*! Production::    stmt : create_index_stmt */\n\n/*! Production::    stmt : create_keystore_stmt */\n\n/*! Production::    stmt : create_outline_stmt */\n\n/*! Production::    stmt : create_profile_stmt */\n\n/*! Production::    stmt : create_resource_stmt */\n\n/*! Production::    stmt : create_restore_point_stmt */\n\n/*! Production::    stmt : create_role_stmt */\n\n/*! Production::    stmt : create_savepoint_stmt */\n\n/*! Production::    stmt : create_sequence_stmt */\n\n/*! Production::    stmt : create_synonym_stmt */\n\n/*! Production::    stmt : create_table_like_stmt */\n\n/*! Production::    stmt : create_table_stmt */\n\n/*! Production::    stmt : create_tablegroup_stmt */\n\n/*! Production::    stmt : create_tablespace_stmt */\n\n/*! Production::    stmt : create_tenant_stmt */\n\n/*! Production::    stmt : create_user_stmt */\n\n/*! Production::    stmt : create_view_stmt */\n```\n\n----------------------------------------\n\nTITLE: Implementing LLM Verification for Result Checking in Python\nDESCRIPTION: This snippet demonstrates how to implement result checking using LLM verification in a custom agent class. It defines a system message for the checker and a method to perform the correctness check.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Tuple, Optional\n\nfrom dbgpt.agent import ConversableAgent, AgentMessage\nfrom dbgpt.core import ModelMessageRoleType\n\nCHECK_RESULT_SYSTEM_MESSAGE = (\n    \"You are an expert in analyzing the results of a summary task.\"\n    \"Your responsibility is to check whether the summary results can summarize the \"\n    \"input provided by the user, and then make a judgment. You need to answer \"\n    \"according to the following rules:\\n\"\n    \"    Rule 1: If you think the summary results can summarize the input provided\"\n    \" by the user, only return True.\\n\"\n    \"    Rule 2: If you think the summary results can NOT summarize the input \"\n    \"provided by the user, return False and the reason, split by | and ended \"\n    \"by TERMINATE. For instance: False|Some important concepts in the input are \"\n    \"not summarized. TERMINATE\"\n)\n\nclass MySummarizerAgent(ConversableAgent):\n    # ... other code\n    async def correctness_check(\n        self, message: AgentMessage\n    ) -> Tuple[bool, Optional[str]]:\n        current_goal = message.current_goal\n        action_report = message.action_report\n        task_result = \"\"\n        if action_report:\n            task_result = action_report.get(\"content\", \"\")\n\n        check_result, model = await self.thinking(\n            messages=[\n                AgentMessage(\n                    role=ModelMessageRoleType.HUMAN,\n                    content=(\n                        \"Please understand the following user input and summary results\"\n                        \" and give your judgment:\\n\"\n                        f\"User Input: {current_goal}\\n\"\n                        f\"Summary Results: {task_result}\"\n                    ),\n                )\n            ],\n            prompt=CHECK_RESULT_SYSTEM_MESSAGE,\n        )\n        \n        fail_reason = \"\"\n        if check_result and (\n            \"true\" in check_result.lower() or \"yes\" in check_result.lower()\n        ):\n            success = True\n        else:\n            success = False\n            try:\n                _, fail_reason = check_result.split(\"|\")\n                fail_reason = (\n                    \"The summary results cannot summarize the user input due\"\n                    f\" to: {fail_reason}. Please re-understand and complete the summary\"\n                    \" task.\"\n                )\n            except Exception:\n                fail_reason = (\n                    \"The summary results cannot summarize the user input. \"\n                    \"Please re-understand and complete the summary task.\"\n                )\n        return success, fail_reason\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Offset Window Function Syntax\nDESCRIPTION: This snippet defines the syntax for offset window functions like LAG, LEAD, and NTH_VALUE. It specifies how these functions are used with the OVER clause and their specific parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_192\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    window_function : LAG win_fun_lead_lag_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LAG win_fun_lead_lag_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : LEAD win_fun_lead_lag_params OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : LEAD win_fun_lead_lag_params OVER new_generalized_window_clause */\n\n/*! Production::    window_function : NTH_VALUE \"(\" bit_expr \",\" bit_expr \")\" opt_from_first_or_last opt_respect_or_ignore_nulls OVER \"(\" generalized_window_clause \")\" */\n\n/*! Production::    window_function : NTH_VALUE \"(\" expr \",\" expr \")\" opt_from_first_or_last opt_respect_or_ignore_nulls OVER new_generalized_window_clause */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Table Factor\nDESCRIPTION: Defines production rules for table_factor in SQL grammar. These rules specify how table factors can be represented in SQL queries, including parenthesized tables, table subqueries, and simple table names.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_175\n\nLANGUAGE: SQL Grammar\nCODE:\n```\n/*! Production::    table_factor : \"(\" table_reference \")\" */\n\n/*! Production::    table_factor : \"(\" table_references \")\" */\n\n/*! Production::    table_factor : TABLE \"(\" simple_expr \")\" */\n\n/*! Production::    table_factor : TABLE \"(\" simple_expr \")\" relation_name */\n\n/*! Production::    table_factor : select_with_parens */\n\n/*! Production::    table_factor : select_with_parens use_flashback */\n\n/*! Production::    table_factor : table_subquery */\n\n/*! Production::    table_factor : tbl_name */\n```\n\n----------------------------------------\n\nTITLE: Installing ChatGLM Dependencies for DB-GPT\nDESCRIPTION: This snippet shows how to install the necessary dependency for using ChatGLM as a proxy LLM with DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/More_proxyllms.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npip install zhipuai\n```\n\n----------------------------------------\n\nTITLE: CREATE USER Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating database users with various authentication and resource options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_user_stmt : CREATE USER user_specification opt_profile opt_default_tables_space */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_user_stmt : CREATE USER user_specification require_specification opt_profile opt_default_tables_space */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_user_stmt : create_with_opt_hint USER opt_if_not_exists user_specification_list opt_resource_option */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_user_stmt : create_with_opt_hint USER opt_if_not_exists user_specification_list require_specification opt_resource_option */\n```\n\n----------------------------------------\n\nTITLE: Zone Management Productions\nDESCRIPTION: Grammar productions for zone management operations including start, stop, delete, force stop and isolate actions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_199\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    zone_action : DELETE */\n/*! Production::    zone_action : FORCE STOP */\n/*! Production::    zone_action : ISOLATE */\n/*! Production::    zone_action : START */\n/*! Production::    zone_action : STOP */\n/*! Production::    zone_desc : ZONE opt_equal_mark relation_name_or_string */\n/*! Production::    zone_list : STRING_VALUE */\n/*! Production::    zone_list : zone_list opt_comma STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Defining XA Transaction Statement Production Rules in SQL Grammar\nDESCRIPTION: Grammar production rules for XA transaction statements including XA START, COMMIT, END, PREPARE, and ROLLBACK operations. These rules define the syntax for distributed transaction processing in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_224\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    xa_begin_stmt : XA START STRING_VALUE */\n\n/*! Production::    xa_commit_stmt : XA COMMIT STRING_VALUE */\n\n/*! Production::    xa_end_stmt : XA END STRING_VALUE */\n\n/*! Production::    xa_prepare_stmt : XA PREPARE STRING_VALUE */\n\n/*! Production::    xa_rollback_stmt : XA ROLLBACK STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: Setting Up Datasource Service Configuration in JSX/MDX\nDESCRIPTION: MDX component implementation showing configuration options for datasource service module. Defines configuration structure with API key parameter for endpoint access control.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_63f1e9.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigDetail } from \"@site/src/components/mdx/ConfigDetail\";\n\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"This configuration is for the datasource serve module.\",\n  \"documentationUrl\": null,\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Statement List Productions\nDESCRIPTION: Grammar rules defining statement lists and delimiters in SQL parsing.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_197\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    stmt_list : DELIMITER */\n/*! Production::    stmt_list : END_P */\n/*! Production::    stmt_list : stmt DELIMITER opt_end_p */\n/*! Production::    stmt_list : stmt END_P */\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Response Format\nDESCRIPTION: This snippet illustrates the format of a non-streaming chat completion response from the DB-GPT API. It includes the full response content and usage statistics.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/chat.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"a8321543-52e9-47a5-a0b6-3d997463f6a3\",\n    \"object\": \"chat.completion\",\n    \"created\": 1710826792,\n    \"model\": \"gpt-4o\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Hello! How can I assist you today?\"\n            },\n            \"finish_reason\": null\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 0,\n        \"total_tokens\": 0,\n        \"completion_tokens\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LLM Configuration and Agent Memory for Multi-Agent Conversation in Python\nDESCRIPTION: This snippet sets up the necessary configurations for a multi-agent conversation, including LLM client, agent context, and memory. It also defines system and user prompt templates for the agents.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/conversation.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dbgpt.agent import AgentContext, AgentMemory\nfrom dbgpt.model.proxy import OpenAILLMClient\n\nllm_client = OpenAILLMClient(\n    model_alias=\"gpt-4o\",\n    api_base=os.getenv(\"OPENAI_API_BASE\"),\n    api_key=os.getenv(\"OPENAI_API_KEY\"),\n)\n\ncontext: AgentContext = AgentContext(\n    conv_id=\"test123\",\n    language=\"en\",\n    temperature=0.9,\n    max_new_tokens=2048,\n    max_chat_round=4,\n)\n# Create an agent memory, default memory is ShortTermMemory\nagent_memory: AgentMemory = AgentMemory()\n\n\nsystem_prompt_template = \"\"\"\nYou are a {{ role }}, {% if name %}named {{ name }}, {% endif %}your goal is {{ goal }}.\n*** IMPORTANT REMINDER ***\n{% if language == 'zh' %}\\\nPlease answer in simplified Chinese.\n{% else %}\\\nPlease answer in English.\n{% endif %}\\\n\"\"\"  # noqa\n\nuser_prompt_template = \"\"\"\n{% if most_recent_memories %}\\\nMost recent observations:\n{{ most_recent_memories }}\n{% endif %}\\\n{% if question %}\\\nuser: {{ question }}\n{% endif %}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming HTTP Endpoint with AWEL in Python\nDESCRIPTION: This code creates an HTTP endpoint that returns a streaming response of numbers. It defines a request body model, implements a custom StreamifyAbsOperator to generate a stream of numbers, and configures an HTTP trigger with streaming capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.4_http_trigger_streaming.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt._private.pydantic import BaseModel, Field\nfrom dbgpt.core.awel import DAG, HttpTrigger, StreamifyAbsOperator, setup_dev_environment\nfrom typing import AsyncIterator\n\nclass TriggerReqBody(BaseModel):\n    n: int = Field(..., description=\"The number of integers to be streamed\")\n\nclass NumberProducerOperator(StreamifyAbsOperator[TriggerReqBody, int]):\n    \"\"\"Create a stream of numbers from 0 to `n-1`\"\"\"\n    async def streamify(self, req: TriggerReqBody) -> AsyncIterator[int]:\n        for i in range(req.n):\n            yield str(i) + \"\\n\"\n\nwith DAG(\"awel_stream_numbers\") as dag:\n    trigger_task = HttpTrigger(\n        endpoint=\"/awel_tutorial/stream_numbers\", \n        methods=\"POST\", \n        request_body=TriggerReqBody,\n        status_code=200,\n        streaming_predict_func=lambda x: True\n    )\n    task = NumberProducerOperator()\n    trigger_task >> task\n\nsetup_dev_environment([dag], port=5555)\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions - Union Operations\nDESCRIPTION: Grammar rules for UNION operations including type specifications and nested unions\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_205\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    unionStatement : UNION unionType queryExpressionNointo */\n/*! Production::    unionStatement : UNION unionType querySpecificationNointo */\n/*! Production::    unionType : %epsilon */\n/*! Production::    unionType : ALL */\n/*! Production::    unionType : DISTINCT */\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp and Timezone Units in SQL\nDESCRIPTION: These productions define how timestamp values and timezone units are expressed in SQL syntax.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_174\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    timestampValue : expression */\n\n/*! Production::    timestamp_params : date_unit \",\" expr \",\" expr */\n\n/*! Production::    timezone_unit : TIMEZONE_ABBR */\n\n/*! Production::    timezone_unit : TIMEZONE_HOUR */\n\n/*! Production::    timezone_unit : TIMEZONE_MINUTE */\n\n/*! Production::    timezone_unit : TIMEZONE_REGION */\n```\n\n----------------------------------------\n\nTITLE: Testing String Response Endpoint\nDESCRIPTION: cURL command to test the GET endpoint with query parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.2_http_trigger_get.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://127.0.0.1:5555/api/v1/awel/trigger/awel_tutorial/say_hello?name=John&age=25\"\n```\n\n----------------------------------------\n\nTITLE: Defining EXPLAIN Statement Production Rules in SQL\nDESCRIPTION: This snippet defines production rules for various forms of EXPLAIN statements, including different output formats and explainable statement types.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_75\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    explain_or_desc : DESC */\n\n/*! Production::    explain_or_desc : DESCRIBE */\n\n/*! Production::    explain_or_desc : EXPLAIN */\n\n/*! Production::    explain_stmt : explain_or_desc BASIC PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc BASIC PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc BASIC explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED_NOADDR PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED_NOADDR PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc EXTENDED_NOADDR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc FORMAT COMP_EQ format_name explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc OUTLINE PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc OUTLINE PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc OUTLINE explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PARTITIONS PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PARTITIONS PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PARTITIONS explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PLANREGRESS PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PLANREGRESS PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PLANREGRESS explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PRETTY explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc PRETTY_COLOR explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc explainable_stmt */\n\n/*! Production::    explain_stmt : explain_or_desc relation_factor opt_desc_column_option */\n\n/*! Production::    explainable_stmt : delete_stmt */\n\n/*! Production::    explainable_stmt : insert_stmt */\n\n/*! Production::    explainable_stmt : merge_stmt */\n\n/*! Production::    explainable_stmt : select_stmt */\n\n/*! Production::    explainable_stmt : update_stmt */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Column Definitions and References\nDESCRIPTION: These production rules define the syntax for column definitions, column references, and column lists in SQL. They specify how columns can be defined with various options including data types, attributes, visibility options, and generated expressions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    column_clause : column_name */\n\n/*! Production::    column_clause : extension */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_column_attribute_list opt_position_column */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_generated_keyname AS \"(\" expr \")\" opt_storage_type opt_generated_column_attribute_list opt_position_column */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition : column_definition_ref data_type opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n\n/*! Production::    column_definition : column_definition_ref opt_visibility_option opt_column_attribute_list */\n\n/*! Production::    column_definition : column_definition_ref opt_visibility_option opt_generated_keyname AS \"(\" bit_expr \")\" opt_storage_type opt_generated_column_attribute_list */\n```\n\n----------------------------------------\n\nTITLE: Defining ServeConfig Parameters using React ConfigDetail Component\nDESCRIPTION: React component implementation that documents the serve command configuration parameters, specifically defining the API keys parameter.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/config_serveconfig_adbd6f.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ServeConfig\",\n  \"description\": \"Parameters for the serve command\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"api_keys\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"API keys for the endpoint, if None, allow all\"\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Running MCP SSE Server Gateway with NPX\nDESCRIPTION: Command to run the MCP SSE Server gateway for web scraping using the mcp-server-fetch service through NPX. This is the first step in setting up a Multi-agent + Auto-Planning + MCP web page scraping and summarization application.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y supergateway --stdio \"uvx mcp-server-fetch\"\n```\n\n----------------------------------------\n\nTITLE: Graph RAG Storage Providers Installation Commands\nDESCRIPTION: Markdown table showing supported graph RAG storage providers and their corresponding installation packages for DB-GPT integration\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Provider | Supported | Install Packages |\n|----------|-----------|------------------|\n| TuGraph  | â         | --extra graph_rag|\n| Neo4j    | â         |                  |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for DB-GPT with Jaeger\nDESCRIPTION: Docker Compose YAML configuration to set up a DB-GPT cluster with Jaeger for observability.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/application/advanced_tutorial/observability.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.10'\n\nservices:\n  jaeger:\n    image: jaegertracing/all-in-one:1.58\n    restart: unless-stopped\n    networks:\n      - dbgptnet\n    ports:\n      - \"16686:16686\"\n      - \"6831:6831\"\n      - \"4318:4318\"\n      - \"4317:4317\"\n      - \"14268:14268\"\n    environment:\n      - LOG_LEVEL=debug\n      - SPAN_STORAGE_TYPE=badger\n      - BADGER_EPHEMERAL=false\n      - BADGER_DIRECTORY_VALUE=/badger/data\n      - BADGER_DIRECTORY_KEY=/badger/key\n    volumes:\n      - jaeger-badger:/badger\n    user: root\n  controller:\n    image: eosphorosai/dbgpt:latest\n    command: dbgpt start controller\n    restart: unless-stopped\n    environment:\n      - TRACER_TO_OPEN_TELEMETRY=True\n      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317\n      - DBGPT_LOG_LEVEL=DEBUG\n    networks:\n      - dbgptnet\n  llm-worker:\n    image: eosphorosai/dbgpt:latest\n    command: dbgpt start worker --model_type proxy --model_name chatgpt_proxyllm --model_path chatgpt_proxyllm --proxy_server_url ${OPENAI_API_BASE}/chat/completions --proxy_api_key ${OPENAI_API_KEY} --controller_addr http://controller:8000\n    environment:\n      - PROXYLLM_BACKEND=gpt-3.5-turbo\n      - TRACER_TO_OPEN_TELEMETRY=True\n      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317\n      - DBGPT_LOG_LEVEL=DEBUG\n    depends_on:\n      - controller\n    restart: unless-stopped\n    networks:\n      - dbgptnet\n    ipc: host\n  embedding-worker:\n    image: eosphorosai/dbgpt:latest\n    command: dbgpt start worker --worker_type text2vec --model_name proxy_http_openapi --model_path proxy_http_openapi --proxy_server_url ${OPENAI_API_BASE}/embeddings --proxy_api_key ${OPENAI_API_KEY} --controller_addr http://controller:8000\n    environment:\n      - proxy_http_openapi_proxy_backend=text-embedding-3-small\n      - TRACER_TO_OPEN_TELEMETRY=True\n      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317\n      - DBGPT_LOG_LEVEL=DEBUG\n    depends_on:\n      - controller\n    restart: unless-stopped\n    networks:\n      - dbgptnet\n    ipc: host\n  webserver:\n    image: eosphorosai/dbgpt:latest\n    command: dbgpt start webserver --light --remote_embedding --controller_addr http://controller:8000\n    environment:\n      - LLM_MODEL=chatgpt_proxyllm\n      - EMBEDDING_MODEL=proxy_http_openapi\n      - TRACER_TO_OPEN_TELEMETRY=True\n      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317\n    depends_on:\n      - controller\n      - llm-worker\n      - embedding-worker\n    volumes:\n      - dbgpt-data:/app/pilot/data\n      - dbgpt-message:/app/pilot/message\n    ports:\n      - 5670:5670/tcp\n    restart: unless-stopped\n    networks:\n      - dbgptnet\nvolumes:\n  dbgpt-data:\n  dbgpt-message:\n  jaeger-badger:\nnetworks:\n  dbgptnet:\n    driver: bridge\n    name: dbgptnet\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Grammar Productions for Complex Partition and Sample Clauses\nDESCRIPTION: These productions combine partition usage with sample clauses and various other options in table name structures.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_191\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tbl_name : relation_factor use_partition sample_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause AS relation_name */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause AS relation_name index_hint_list */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause fetch_next_clause */\n\n/*! Production::    tbl_name : relation_factor use_partition sample_clause index_hint_list */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Statement Production Rules\nDESCRIPTION: This snippet demonstrates how production rules for SQL statements like SELECT, ROLLBACK, and REVOKE are defined. Each rule specifies the components and structure of the statement.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_136\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    selectStatement : queryExpression opt_lockClause */\n\n/*! Production::    selectStatement : queryExpressionNointo opt_lockClause */\n\n/*! Production::    rollbackStatement : ROLLBACK opt_WORK TO opt_SAVEPOINT uid */\n\n/*! Production::    revokeStatement : REVOKE ALL opt_PRIVILEGES COMMA GRANT OPTION FROM userNames */\n\n/*! Production::    revokeStatement : REVOKE privelegeClauses ON privilegeObject privilegeLevel FROM userNames */\n```\n\n----------------------------------------\n\nTITLE: DDL Statement Productions in MySQL Grammar\nDESCRIPTION: Production rules defining the syntax for DDL (Data Definition Language) statements like CREATE, ALTER, DROP for various database objects.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    ddlStatement : alterDatabase */\n/*! Production::    ddlStatement : createDatabase */\n/*! Production::    ddlStatement : dropDatabase */\n/*! Production::    ddlStatement : alterTable */\n/*! Production::    ddlStatement : createTable */\n/*! Production::    ddlStatement : dropTable */\n```\n\n----------------------------------------\n\nTITLE: Defining Complex SQL Rules with Regular Expressions\nDESCRIPTION: This snippet shows more complex rule definitions that use regular expressions to match specific SQL patterns, such as date formats and interval specifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_201\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       Date{whitespace}?\"[^\\\"]*\" */\n\n/*! Rule::       Date{whitespace}?'[^']*' */\n\n/*! Rule::       Date{whitespace}?'[^\\']*' */\n\n/*! Rule::       Interval{whitespace}?'[^\\']*'{space}*(day|hour|minute|second)({interval_pricision}{space}*|{space}+)to{space}+(day|hour|minute|second{interval_pricision}?) */\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Processing with BranchOperator\nDESCRIPTION: Example showing how to create branching logic based on input conditions using BranchOperator. The workflow routes even and odd numbers to different processing branches and then joins the results.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nbranch_mapping = {\n    branch_even: \"even_task\",\n    branch_odd: \"odd_task\"\n}\nwith DAG(\"awel_branch_operator\") as dag:\n    input_task = InputOperator(input_source=SimpleCallDataInputSource())\n    task = BranchOperator(branches=branch_mapping)\n    even_task = MapOperator(\n        task_name=\"even_task\", \n        map_function=lambda x: x * 10\n    )\n    odd_task = MapOperator(\n        task_name=\"odd_task\", \n        map_function=lambda x: x * x\n    )\n    join_task = JoinOperator(\n        combine_function=lambda x, y: x if not is_empty_data(x) else y, can_skip_in_branch=False\n    )\n    input_task >> task\n    task >> even_task >> join_task\n    task >> odd_task >> join_task\n    \nres1 = await join_task.call(5)\nres2 = await join_task.call(6)\nprint(\"å¥æ°è¾å¥ï¼\", res1)\nprint(\"å¶æ°è¾å¥ï¼\", res2)\n```\n\n----------------------------------------\n\nTITLE: Resource Management Grammar Rules\nDESCRIPTION: Grammar productions defining resource management options and constraints for database operations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_134\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    resource_option : MAX_CONNECTIONS_PER_HOUR INTNUM */\n/*! Production::    resource_option : MAX_USER_CONNECTIONS INTNUM */\n/*! Production::    resource_unit_option : IOPS_WEIGHT opt_equal_mark conf_const */\n/*! Production::    resource_unit_option : MAX_CPU opt_equal_mark conf_const */\n/*! Production::    resource_unit_option : MAX_MEMORY opt_equal_mark conf_const */\n```\n\n----------------------------------------\n\nTITLE: Defining Charset Name Base in SQL\nDESCRIPTION: This snippet defines a comprehensive list of character set name bases supported in SQL.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    charsetNameBase : ARMSCII8 */\n\n/*! Production::    charsetNameBase : ASCII */\n\n/*! Production::    charsetNameBase : BIG5 */\n\n/*! Production::    charsetNameBase : CP1250 */\n\n/*! Production::    charsetNameBase : CP1251 */\n\n/*! Production::    charsetNameBase : CP1256 */\n\n/*! Production::    charsetNameBase : CP1257 */\n\n/*! Production::    charsetNameBase : CP850 */\n\n/*! Production::    charsetNameBase : CP852 */\n\n/*! Production::    charsetNameBase : CP866 */\n\n/*! Production::    charsetNameBase : CP932 */\n\n/*! Production::    charsetNameBase : DEC8 */\n\n/*! Production::    charsetNameBase : EUCJPMS */\n\n/*! Production::    charsetNameBase : EUCKR */\n\n/*! Production::    charsetNameBase : GB2312 */\n\n/*! Production::    charsetNameBase : GBK */\n\n/*! Production::    charsetNameBase : GEOSTD8 */\n\n/*! Production::    charsetNameBase : GREEK */\n\n/*! Production::    charsetNameBase : HEBREW */\n\n/*! Production::    charsetNameBase : HP8 */\n\n/*! Production::    charsetNameBase : KEYBCS2 */\n\n/*! Production::    charsetNameBase : KOI8R */\n\n/*! Production::    charsetNameBase : KOI8U */\n\n/*! Production::    charsetNameBase : LATIN1 */\n\n/*! Production::    charsetNameBase : LATIN2 */\n\n/*! Production::    charsetNameBase : LATIN5 */\n\n/*! Production::    charsetNameBase : LATIN7 */\n\n/*! Production::    charsetNameBase : MACCE */\n\n/*! Production::    charsetNameBase : MACROMAN */\n\n/*! Production::    charsetNameBase : SJIS */\n\n/*! Production::    charsetNameBase : SWE7 */\n\n/*! Production::    charsetNameBase : TIS620 */\n\n/*! Production::    charsetNameBase : UCS2 */\n\n/*! Production::    charsetNameBase : UJIS */\n\n/*! Production::    charsetNameBase : UTF16 */\n\n/*! Production::    charsetNameBase : UTF16LE */\n\n/*! Production::    charsetNameBase : UTF32 */\n\n/*! Production::    charsetNameBase : UTF8 */\n\n/*! Production::    charsetNameBase : UTF8MB3 */\n\n/*! Production::    charsetNameBase : UTF8MB4 */\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Dependencies for DB-GPT\nDESCRIPTION: This snippet shows how to install the necessary dependencies for using OpenAI as a proxy LLM with DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/More_proxyllms.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install  -e \".[openai]\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Schema from Vector Store\nDESCRIPTION: Implements a DAG to retrieve relevant schema information from the vector store based on natural language queries.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.core.awel import InputSource\nfrom dbgpt.rag.operators import DBSchemaRetrieverOperator\n\nwith DAG(\"retrieve_schema_dag\") as retrieve_schema_dag:\n    input_task = InputOperator(input_source=InputSource.from_callable())\n    retriever_task = DBSchemaRetrieverOperator(\n        top_k=1,\n        index_store=vector_store,\n    )\n    input_task >> retriever_task\n\nchunks = asyncio.run(retriever_task.call(\"Query the name and age of users younger than 18 years old\"))\nprint(\"Retrieved schema:\\n\", chunks)\n```\n\n----------------------------------------\n\nTITLE: Date Unit Productions in MySQL Grammar\nDESCRIPTION: Production rules defining valid date unit specifiers for MySQL date/time operations, including DAY, HOUR, MINUTE, SECOND and their combinations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    date_unit : DAY */\n/*! Production::    date_unit : DAY_HOUR */\n/*! Production::    date_unit : DAY_MICROSECOND */\n/*! Production::    date_unit : DAY_MINUTE */\n/*! Production::    date_unit : DAY_SECOND */\n```\n\n----------------------------------------\n\nTITLE: Installing DB-GPT Dependencies for Ollama Proxy\nDESCRIPTION: Command to install DB-GPT dependencies for Ollama proxy setup using uv package manager\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/quickstart.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-packages \\\n--extra \"base\" \\\n--extra \"proxy_ollama\" \\\n--extra \"rag\" \\\n--extra \"storage_chromadb\" \\\n--extra \"dbgpts\"\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Name Lists and Windows\nDESCRIPTION: Grammar production rules defining syntax for name lists, window clauses, and named windows in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_109\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    name_list : NAME_OB */\n/*! Production::    name_list : name_list \",\" NAME_OB */\n/*! Production::    name_list : name_list NAME_OB */\n/*! Production::    named_window : NAME_OB AS new_generalized_window_clause_with_blanket */\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Response Format in JSON\nDESCRIPTION: Example JSON response format from the Chat Knowledge API. Shows the structure including message content, model information, and token usage details.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/knowledge.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"acb050ab-eb2c-4754-97e4-6f3b94b7dac2\",\n    \"object\": \"chat.completion\",\n    \"created\": 1710917272,\n    \"model\": \"gpt-4o\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Agentic Workflow Expression Language (AWEL) is a specialized language designed for developing large model applications with intelligent agent workflows. It offers flexibility and functionality, allowing developers to focus on business logic for LLMs applications without getting bogged down in model and environment details. AWEL uses a layered API design architecture, making it easier to work with. You can find examples and source code to get started with AWEL, and it supports various operators and environments. AWEL is a powerful tool for building native data applications through workflows and agents.\"\n            },\n            \"finish_reason\": null\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 0,\n        \"total_tokens\": 0,\n        \"completion_tokens\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions for Optional Keywords\nDESCRIPTION: Grammar production rules defining optional SQL keywords and clauses. These rules specify how optional elements can either be empty (epsilon) or contain specific keywords.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_112\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    opt_SAVEPOINT : %epsilon */\n\n/*! Production::    opt_SAVEPOINT : SAVEPOINT */\n\n/*! Production::    opt_SEMI : %epsilon */\n\n/*! Production::    opt_SEMI : SEMI */\n\n/*! Production::    opt_STORAGE : %epsilon */\n\n/*! Production::    opt_STORAGE : STORAGE */\n```\n\n----------------------------------------\n\nTITLE: MySQL Reserved Keywords\nDESCRIPTION: List of MySQL reserved keywords that have special meaning in SQL syntax and cannot be used as identifiers without proper quoting.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_108\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    mysql_reserved_keyword : MINUTE_MICROSECOND */\n/*! Production::    mysql_reserved_keyword : MINUTE_SECOND */\n/*! Production::    mysql_reserved_keyword : MOD */\n/* ... and many more keywords ... */\n```\n\n----------------------------------------\n\nTITLE: Defining ALTER COLUMN Productions in MySQL\nDESCRIPTION: These production rules specify various ALTER COLUMN operations, including adding, modifying, and dropping columns, as well as changing column properties.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_column_option : ADD \"(\" column_definition_list \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_column_option : MODIFY COLUMN column_definition */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_column_option : DROP COLUMN column_definition_ref opt_drop_behavior */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    alter_column_option : RENAME COLUMN column_name TO column_name */\n```\n\n----------------------------------------\n\nTITLE: Creating Community Knowledge Graph Connector in DB-GPT\nDESCRIPTION: Python function to create a community knowledge graph connector with CommunitySummaryKnowledgeGraph, configuring it with OpenAI embeddings and the specified LLM client and model.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/cookbook/rag/graph_rag_app_develop.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.model.proxy.llms.chatgpt import OpenAILLMClient\nfrom dbgpt.storage.knowledge_graph.community_summary import (\n    CommunitySummaryKnowledgeGraph,\n    CommunitySummaryKnowledgeGraphConfig,\n)\n\nllm_client = OpenAILLMClient()\nmodel_name = \"gpt-4o-mini\"\n\ndef __create_community_kg_connector():\n    \"\"\"Create community knowledge graph connector.\"\"\"\n    return CommunitySummaryKnowledgeGraph(\n        config=CommunitySummaryKnowledgeGraphConfig(\n            name=\"community_graph_rag_test\",\n            embedding_fn=DefaultEmbeddingFactory.openai(),\n            llm_client=llm_client,\n            model_name=model_name,\n            graph_store_type=\"TuGraphGraph\",\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Citation for DB-GPT Demonstration Paper\nDESCRIPTION: BibTeX citation for the paper demonstrating DB-GPT as a next-generation data interaction system empowered by large language models. This citation should be used when referencing the project's demonstration in academic or research contexts.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/README.md#2025-04-09_snippet_3\n\nLANGUAGE: BibTeX\nCODE:\n```\n@inproceedings{xue2024demonstration,\n      title={Demonstration of DB-GPT: Next Generation Data Interaction System Empowered by Large Language Models}, \n      author={Siqiao Xue and Danrui Qi and Caigao Jiang and Wenhui Shi and Fangyin Cheng and Keting Chen and Hongjun Yang and Zhiping Zhang and Jianshan He and Hongyang Zhang and Ganglin Wei and Wang Zhao and Fan Zhou and Hong Yi and Shaodong Liu and Hongjun Yang and Faqiang Chen},\n      year={2024},\n      booktitle = \"Proceedings of the VLDB Endowment\",\n      url={https://arxiv.org/abs/2404.10209}\n}\n```\n\n----------------------------------------\n\nTITLE: CREATE TENANT Statement Grammar Rules in SQL\nDESCRIPTION: Grammar production rules for creating tenants with options and system variable settings, supporting multi-tenant database architectures.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_tenant_stmt : CREATE TENANT relation_name opt_tenant_option_list opt_set_sys_var */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    create_tenant_stmt : create_with_opt_hint TENANT opt_if_not_exists relation_name opt_tenant_option_list opt_set_sys_var */\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Agent with DB-GPT\nDESCRIPTION: Main Python implementation that sets up a code assistant agent and user proxy agent to perform calculations. Uses OpenAI's GPT-3.5-turbo model as the LLM backend and demonstrates agent communication for performing mathematical calculations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/cookbook/calculator_with_agents.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom dbgpt.agent import AgentContext, AgentMemory, LLMConfig, UserProxyAgent\nfrom dbgpt.agent.expand.code_assistant_agent import CodeAssistantAgent\nfrom dbgpt.model.proxy import OpenAILLMClient\n\n\nasync def main():\n    llm_client = OpenAILLMClient(model_alias=\"gpt-3.5-turbo\")\n    context: AgentContext = AgentContext(conv_id=\"test123\")\n    # Create an agent memory, default memory is ShortTermMemory\n    agent_memory: AgentMemory = AgentMemory()\n\n    # Create a code assistant agent\n    coder = (\n        await CodeAssistantAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .build()\n    )\n\n    # Create a user proxy agent\n    user_proxy = await UserProxyAgent().bind(context).bind(agent_memory).build()\n\n    # Initiate a chat with the user proxy agent\n    await user_proxy.initiate_chat(\n        recipient=coder,\n        reviewer=user_proxy,\n        message=\"calculate the result of 321 * 123\",\n    )\n    # Obtain conversation history messages between agents\n    print(await agent_memory.gpts_memory.one_chat_completions(\"test123\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring DB-GPT Scenarios with TOML\nDESCRIPTION: TOML configuration example showing how to set up different chat scenarios with custom temperature settings, memory configurations, and scenario-specific parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/blog/2025-03-24-dbgpt-v0.7.0-release.md#2025-04-09_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[app]\ntemperature = 0.6\n\n[[app.configs]]\nname = \"chat_excel\"\ntemperature = 0.1\nduckdb_extensions_dir = []\nforce_install = true\n\n[[app.configs]]\nname = \"chat_normal\"\nmemory = {type=\"token\", max_token_limit=20000}\n\n[[app.configs]]\nname = \"chat_with_db_qa\"\nschema_retrieve_top_k = 50\nmemory = {type=\"window\", keep_start_rounds=0, keep_end_rounds=10}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Calculator Tool with Python Decorator\nDESCRIPTION: This snippet demonstrates how to create a simple calculator tool using the @tool decorator. The function supports basic arithmetic operations and includes type checking for input parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/resource/tools.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt.agent.resource import tool\n\n@tool\ndef simple_calculator(first_number: int, second_number: int, operator: str) -> float:\n    \"\"\"Simple calculator tool. Just support +, -, *, /.\"\"\"\n    if isinstance(first_number, str):\n        first_number = int(first_number)\n    if isinstance(second_number, str):\n        second_number = int(second_number)\n    if operator == \"+\":\n        return first_number + second_number\n    elif operator == \"-\":\n        return first_number - second_number\n    elif operator == \"*\":\n        return first_number * second_number\n    elif operator == \"/\":\n        return first_number / second_number\n    else:\n        raise ValueError(f\"Invalid operator: {operator}\")\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Distribution Methods\nDESCRIPTION: Defines the distribution methods available in database systems, including ALL, BROADCAST, HASH, LIST, RANDOM, RANGE, and others.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    distribute_method : ALL */\n\n/*! Production::    distribute_method : BC2HOST */\n\n/*! Production::    distribute_method : BROADCAST */\n\n/*! Production::    distribute_method : HASH */\n\n/*! Production::    distribute_method : LIST */\n\n/*! Production::    distribute_method : LOCAL */\n\n/*! Production::    distribute_method : NONE */\n\n/*! Production::    distribute_method : PARTITION */\n\n/*! Production::    distribute_method : RANDOM */\n\n/*! Production::    distribute_method : RANDOM_LOCAL */\n\n/*! Production::    distribute_method : RANGE */\n\n/*! Production::    distribute_method_list : distribute_method */\n\n/*! Production::    distribute_method_list : distribute_method_list opt_comma distribute_method */\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Response Endpoint\nDESCRIPTION: cURL command to test the JSON response GET endpoint with query parameters.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.2_http_trigger_get.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n\"http://127.0.0.1:5555/api/v1/awel/trigger/awel_tutorial/say_hello_json?name=John&age=25\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Alter Table Productions\nDESCRIPTION: Grammar productions for ALTER TABLE statements including column, constraint, index and partition modifications.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    alterTable : ALTER opt_intimeAction opt_IGNORE TABLE tableName opt_alterSpecifications opt_partitionDefinitions */\n\n/*! Production::    alterSpecification : ADD COLUMN uid columnDefinition FIRST */\n\n/*! Production::    alterSpecification : ADD opt_tableConstraint PRIMARY KEY opt_uid opt_indexType indexColumnNames opt_indexOptions */\n\n/*! Production::    alterSpecification : DROP FOREIGN KEY uid */\n\n/*! Production::    alterSpecification : MODIFY opt_COLUMN uid columnDefinition opt_alterColumnSort */\n```\n\n----------------------------------------\n\nTITLE: Downloading Embedding Model for DB-GPT\nDESCRIPTION: This code demonstrates how to download the text2vec-large-chinese embedding model for use with DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/advanced_usage/More_proxyllms.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncd DB-GPT\nmkdir models and cd models\ngit clone https://huggingface.co/GanymedeNil/text2vec-large-chinese\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Handler with JSON Response\nDESCRIPTION: Implementation of an HTTP trigger that returns a JSON response instead of a string. Uses the same request validation but wraps the response in a dictionary.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.2_http_trigger_get.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt._private.pydantic import BaseModel, Field\nfrom dbgpt.core.awel import DAG, HttpTrigger, MapOperator, setup_dev_environment\n\nclass TriggerReqBody(BaseModel):\n    name: str = Field(..., description=\"User name\")\n    age: int = Field(18, description=\"User age\")\n\nwith DAG(\"awel_say_hello_json\") as dag:\n    trigger_task = HttpTrigger(\n        endpoint=\"/awel_tutorial/say_hello_json\", \n        methods=\"GET\", \n        request_body=TriggerReqBody,\n    )\n    task = MapOperator(\n        map_function=lambda x: {\"message\": f\"Hello, {x.name}! You are {x.age} years old.\"}\n    )\n    trigger_task >> task\n\nsetup_dev_environment([dag], port=5555)\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigClassTable Component in JSX for DB-GPT Serve Configurations\nDESCRIPTION: This code renders a table of configuration classes for the DB-GPT serve module. The component displays various ServeConfig classes with their descriptions and links to detailed documentation for each configuration type.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/serve/index.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigClassTable classes={[\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the datasource serve module.\",\n    \"link\": \"./config_serveconfig_63f1e9\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"Parameters for the serve command\",\n    \"link\": \"./config_serveconfig_adbd6f\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the conversation serve module.\",\n    \"link\": \"./config_serveconfig_313252\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the hub dbgpts serve module.\",\n    \"link\": \"./config_serveconfig_ec2d70\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the my dbgpts serve module.\",\n    \"link\": \"./config_serveconfig_1a9284\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the evaluate serve module.\",\n    \"link\": \"./config_serveconfig_8839e0\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the feedback serve module.\",\n    \"link\": \"./config_serveconfig_fa1f35\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the file serve module. In DB-GPT, you can store yourfiles in the file server.\",\n    \"link\": \"./config_serveconfig_cb64c6\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the flow serve module.\",\n    \"link\": \"./config_serveconfig_c0b589\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the libro serve module.\",\n    \"link\": \"./config_serveconfig_b1c2b9\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the model serve module.\",\n    \"link\": \"./config_serveconfig_7a0577\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the prompt serve module.\",\n    \"link\": \"./config_serveconfig_854dad\"\n  },\n  {\n    \"name\": \"ServeConfig\",\n    \"description\": \"This configuration is for the RAG serve module.\",\n    \"link\": \"./config_serveconfig_7889f9\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory - Bash Commands\nDESCRIPTION: Commands to create project directory structure for the AWEL tutorial\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.1_hello_world.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/projects\ncd ~/projects\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for Agent-Based Summary Demo in Python\nDESCRIPTION: Defines an asynchronous main function that sets up and demonstrates the use of the SummaryAction with OpenAI's GPT model, including agent context, memory, and user proxy initialization.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/introduction/custom_agents.md#2025-04-09_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nasync def main():\n    llm_client = OpenAILLMClient(model_alias=\"gpt-3.5-turbo\")\n    context: AgentContext = AgentContext(conv_id=\"summarize\")\n\n    agent_memory: AgentMemory = AgentMemory()\n\n    summarizer = (\n        await MySummarizerAgent()\n        .bind(context)\n        .bind(LLMConfig(llm_client=llm_client))\n        .bind(agent_memory)\n        .build()\n    )\n\n    user_proxy = await UserProxyAgent().bind(agent_memory).bind(context).build()\n\n    await user_proxy.initiate_chat(\n        recipient=summarizer,\n        reviewer=user_proxy,\n        message=\"\"\"I want to summarize advantages of Nuclear Power according to the following content.\n            Nuclear power in space is the use of nuclear power in outer space, typically either small fission systems or radioactive decay for electricity or heat. Another use is for scientific observation, as in a MÃ¶ssbauer spectrometer. The most common type is a radioisotope thermoelectric generator, which has been used on many space probes and on crewed lunar missions. Small fission reactors for Earth observation satellites, such as the TOPAZ nuclear reactor, have also been flown.[1] A radioisotope heater unit is powered by radioactive decay and can keep components from becoming too cold to function, potentially over a span of decades.[2]\n            The United States tested the SNAP-10A nuclear reactor in space for 43 days in 1965,[3] with the next test of a nuclear reactor power system intended for space use occurring on 13 September 2012 with the Demonstration Using Flattop Fission (DUFF) test of the Kilopower reactor.[4]\n            After a ground-based test of the experimental 1965 Romashka reactor, which used uranium and direct thermoelectric conversion to electricity,[5] the USSR sent about 40 nuclear-electric satellites into space, mostly powered by the BES-5 reactor. The more powerful TOPAZ-II reactor produced 10 kilowatts of electricity.[3]\n            Examples of concepts that use nuclear power for space propulsion systems include the nuclear electric rocket (nuclear powered ion thruster(s)), the radioisotope rocket, and radioisotope electric propulsion (REP).[6] One of the more explored concepts is the nuclear thermal rocket, which was ground tested in the NERVA program. Nuclear pulse propulsion was the subject of Project Orion.[7]\n            Regulation and hazard prevention[edit]\n            After the ban of nuclear weapons in space by the Outer Space Treaty in 1967, nuclear power has been discussed at least since 1972 as a sensitive issue by states.[8] Particularly its potential hazards to Earth's environment and thus also humans has prompted states to adopt in the U.N. General Assembly the Principles Relevant to the Use of Nuclear Power Sources in Outer Space (1992), particularly introducing safety principles for launches and to manage their traffic.[8]\n            Benefits\n            Both the Viking 1 and Viking 2 landers used RTGs for power on the surface of Mars. (Viking launch vehicle pictured)\n            While solar power is much more commonly used, nuclear power can offer advantages in some areas. Solar cells, although efficient, can only supply energy to spacecraft in orbits where the solar flux is sufficiently high, such as low Earth orbit and interplanetary destinations close enough to the Sun. Unlike solar cells, nuclear power systems function independently of sunlight, which is necessary for deep space exploration. Nuclear-based systems can have less mass than solar cells of equivalent power, allowing more compact spacecraft that are easier to orient and direct in space. In the case of crewed spaceflight, nuclear power concepts that can power both life support and propulsion systems may reduce both cost and flight time.[9]\n            Selected applications and/or technologies for space include:\n            Radioisotope thermoelectric generator\n            Radioisotope heater unit\n            Radioisotope piezoelectric generator\n            Radioisotope rocket\n            Nuclear thermal rocket\n            Nuclear pulse propulsion\n            Nuclear electric rocket\n            \"\"\",\n    )\n    print(await agent_memory.gpts_memory.one_chat_completions(\"summarize\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Running the HTTP Trigger Script in Python\nDESCRIPTION: This command runs the Python script that sets up the HTTP trigger for handling POST requests. It uses Poetry to manage dependencies and execute the script.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.3_http_trigger_post.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/http_trigger_say_hello_post.py\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Rules - Password Management\nDESCRIPTION: Production rules for password-related operations including password functions, parameters and verification options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_123\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    password : INTNUM */\n/*! Production::    password : NAME_OB */\n/*! Production::    password : STRING_VALUE */\n/*! Production::    passwordFunctionClause : OLD_PASSWORD LR_BRACKET functionArg RR_BRACKET */\n/*! Production::    passwordFunctionClause : PASSWORD LR_BRACKET functionArg RR_BRACKET */\n```\n\n----------------------------------------\n\nTITLE: Executing the Hello World Custom Operator\nDESCRIPTION: Command to run the HelloWorld custom operator example using Poetry as the package manager, showing how to execute an AWEL operator script from the command line.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.3_custom_operator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/hello_world_custom_operator.py\n```\n\n----------------------------------------\n\nTITLE: Consuming Data Streams with UnstreamifyAbsOperator\nDESCRIPTION: Example showing how to consume a stream of numbers and calculate their sum using UnstreamifyAbsOperator. This operator aggregates a data stream into a single output value.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/AWEL-10-29.ipynb#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# 1. åå®ä¹ä¸ä¸ªæ°æ®æµçæå¨\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    \"\"\"åå»ºä» 0 å° n-1 çæ°å­æµ\"\"\"\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\n# 2. å®ä¹ä¸ä¸ªæµæ°æ®èåå¨\nclass SumOperator(UnstreamifyAbsOperator[int, int]):\n    \"\"\"å¯¹æ°å­æµè¿è¡æ±å\"\"\"\n    async def unstreamify(self, it: AsyncIterator[int]) -> int:\n        return sum([i async for i in it])\n\n# 3. æå»º DAG\nwith DAG(\"sum_dag\") as dag:\n    task = NumberProducerOperator()\n    sum_task = SumOperator()\n    task >> sum_task\n\n# 4. æ§è¡åéªè¯\nawait sum_task.call(call_data=5)  # è¾åºï¼10 (0+1+2+3+4)\n```\n\n----------------------------------------\n\nTITLE: SET TRANSACTION Statement Production Rules in SQL\nDESCRIPTION: Grammar production rules for SET TRANSACTION statements that specify transaction characteristics at global, session, or local levels.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_131\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_transaction_stmt : SET GLOBAL TRANSACTION transaction_characteristics */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_transaction_stmt : SET LOCAL TRANSACTION transaction_characteristics */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_transaction_stmt : SET SESSION TRANSACTION transaction_characteristics */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_transaction_stmt : SET TRANSACTION transaction_characteristics */\n```\n\n----------------------------------------\n\nTITLE: SQL Select Statement Grammar Rules\nDESCRIPTION: Production rules for parsing various forms of SELECT statements, including those with hierarchical queries, ordering, and limits.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_88\n\nLANGUAGE: sql\nCODE:\n```\n/*! Production::    no_table_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt */\n/*! Production::    no_table_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM DUAL opt_where */\n```\n\n----------------------------------------\n\nTITLE: Starting DB-GPT Server with Elasticsearch Configuration\nDESCRIPTION: Command to start the DB-GPT web server using the Elasticsearch configuration file.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/integrations/bm25_rag_install.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run python packages/dbgpt-app/src/dbgpt_app/dbgpt_server.py --config configs/dbgpt-bm25-rag.toml\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced Short-term Memory with Similarity Threshold\nDESCRIPTION: Creates an enhanced short-term memory that leverages embeddings to compare similarity between observations. Uses ThreadPoolExecutor for non-blocking similarity calculations and configures enhancement thresholds for memory transfer to long-term storage.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/memory/short_term_memory.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom concurrent.futures import ThreadPoolExecutor\nfrom dbgpt.agent import AgentMemory, EnhancedShortTermMemory\n\n# Create an agent memory, which contains a short-term memory\nmemory = EnhancedShortTermMemory(\n    embeddings=embeddings,\n    buffer_size=2,\n    enhance_similarity_threshold=0.5,\n    enhance_threshold=3,\n    executor=ThreadPoolExecutor(),\n)\nagent_memory: AgentMemory = AgentMemory(memory=memory)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Select Statement Productions in SQL Grammar\nDESCRIPTION: This snippet defines the production rules for simple SELECT statements, including optional clauses like WHERE, GROUP BY, and HAVING.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_189\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simple_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where opt_groupby opt_having */\n\n/*! Production::    simple_select : select_with_opt_hint opt_query_expression_option_list select_expr_list into_opt FROM from_list opt_where opt_groupby opt_having opt_named_windows */\n\n/*! Production::    simple_select_with_order_and_limit : simple_select opt_order_by limit_clause */\n\n/*! Production::    simple_select_with_order_and_limit : simple_select order_by */\n```\n\n----------------------------------------\n\nTITLE: Expected Output from the AWEL Workflow\nDESCRIPTION: Sample output showing the result of the workflow execution, which includes the generated SQL query and usage statistics from the LLM API call.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/quickstart_basic_awel_workflow.md#2025-04-09_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nModelOutput(text='SELECT * FROM users;', error_code=0, model_context=None, finish_reason=None, usage={'completion_tokens': 5, 'prompt_tokens': 19, 'total_tokens': 24}, metrics=None)\n```\n\n----------------------------------------\n\nTITLE: SQL Join Productions\nDESCRIPTION: Grammar rules defining various types of JOIN operations including NATURAL, STRAIGHT, INNER, OUTER and CROSS joins\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_81\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    joinPart : NATURAL JOIN tableSourceItem */\n/*! Production::    joinPart : NATURAL leftOrRight opt_OUTER JOIN tableSourceItem */\n/*! Production::    joinPart : STRAIGHT_JOIN tableSourceItem */\n/*! Production::    joinPart : STRAIGHT_JOIN tableSourceItem ON expression */\n/*! Production::    joinPart : leftOrRight opt_OUTER JOIN tableSourceItem innerJoinBody */\n/*! Production::    joinPart : opt_innerOrCross JOIN tableSourceItem innerJoinBody */\n```\n\n----------------------------------------\n\nTITLE: Table Constraint Productions\nDESCRIPTION: Grammar rules for defining table constraints including PRIMARY KEY, FOREIGN KEY, UNIQUE, and CHECK constraints\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_165\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    tableConstraint : opt_tableConstraint CHECK LR_BRACKET expression RR_BRACKET */\n/*! Production::    tableConstraint : opt_tableConstraint FOREIGN KEY opt_uid indexColumnNames referenceDefinition */\n/*! Production::    tableConstraint : opt_tableConstraint PRIMARY KEY opt_uid opt_indexType indexColumnNames opt_indexOptions */\n/*! Production::    tableConstraint : opt_tableConstraint UNIQUE opt_tableConstraintFormat opt_uid opt_indexType indexColumnNames opt_indexOptions */\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Parser Production Rules\nDESCRIPTION: This snippet showcases the format used to define SQL parser production rules. Each rule is prefixed with '/*! Production::' and defines how different SQL constructs are parsed.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_154\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    simpleId : transactionLevelBase */\n\n/*! Production::    simpleStrings : STRING_LITERALList */\n\n/*! Production::    simple_dml_trigger : before_or_after dml_event_option opt_referencing_list opt_for_each_row opt_enable_or_disable opt_when_condition simple_trigger_body */\n```\n\n----------------------------------------\n\nTITLE: Parsing SQL Function Expressions\nDESCRIPTION: These production rules define how various SQL function expressions are parsed, including special functions like CHARACTER, DATE, and INSERT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_158\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    special_func_expr : CHARACTER \"(\" expr_list \")\" */\n\n/*! Production::    special_func_expr : DATE \"(\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : INSERT \"(\" bit_expr \",\" bit_expr \",\" bit_expr \",\" bit_expr \")\" */\n\n/*! Production::    special_func_expr : POSITION \"(\" bit_expr IN bit_expr \")\" */\n```\n\n----------------------------------------\n\nTITLE: Running the HTTP Trigger Python Script\nDESCRIPTION: This command executes the Python script containing the HTTP trigger implementation using Poetry in the AWEL tutorial project.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/network_program/3.1_http_trigger.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python awel_tutorial/frist_http_trigger_hello.py\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar for Table and Function References\nDESCRIPTION: These productions define optional elements for specifying table factors, function access, and parameter lists. They cover various ways to reference database objects and define function calls in SQL statements.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_95\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    opt_full : %epsilon */\n\n/*! Production::    opt_full : FULL */\n\n/*! Production::    opt_full_table_factor : table_factor */\n\n/*! Production::    opt_full_table_factor : table_factor FULL */\n\n/*! Production::    opt_func_access_ref : \".\" obj_access_ref */\n\n/*! Production::    opt_func_access_ref : %epsilon */\n\n/*! Production::    opt_func_access_ref : table_element_access_list */\n\n/*! Production::    opt_func_access_ref_normal : \".\" obj_access_ref_normal */\n\n/*! Production::    opt_func_access_ref_normal : %epsilon */\n\n/*! Production::    opt_func_access_ref_normal : table_element_access_list */\n\n/*! Production::    opt_func_param_list : %epsilon */\n\n/*! Production::    opt_func_param_list : func_param_list */\n```\n\n----------------------------------------\n\nTITLE: Chat Datasource Curl Example\nDESCRIPTION: Example of using curl to make a chat completion request with datasource parameters\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/datasource.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nDB_NAME=\"{your_db_name}\"\n\ncurl -X POST \"http://localhost:5670/api/v2/chat/completions\" \\\n    -H \"Authorization: Bearer $DBGPT_API_KEY\" \\\n    -H \"accept: application/json\" \\\n    -H \"Content-Type: application/json\" \\\n    -d \"{\\\"messages\\\":\\\"show space datas limit 5\\\",\\\"model\\\":\\\"gpt-4o\\\", \\\"chat_mode\\\": \\\"chat_data\\\", \\\"chat_param\\\": \\\"$DB_NAME\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: SET PASSWORD Statement Production Rules in SQL\nDESCRIPTION: Grammar production rules for different forms of the SET PASSWORD statement, including setting passwords for specified users, using string values or the PASSWORD function.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_128\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_password_stmt : SET PASSWORD FOR user opt_host_name COMP_EQ STRING_VALUE */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_password_stmt : SET PASSWORD opt_for_user COMP_EQ PASSWORD \"(\" password \")\" */\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    set_password_stmt : SET PASSWORD opt_for_user COMP_EQ STRING_VALUE */\n```\n\n----------------------------------------\n\nTITLE: SQL Grammar Productions - Partition Options\nDESCRIPTION: Grammar productions defining optional partition-related clauses including definitions, counts and value lists\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_131\n\nLANGUAGE: grammar\nCODE:\n```\n/*! Production::    opt_partitionCount : %epsilon */\n/*! Production::    opt_partitionCount : PARTITIONS decimalLiteral */\n/*! Production::    opt_partitionDefinitions : %epsilon */\n/*! Production::    opt_partitionDefinitions : partitionDefinitions */\n/*! Production::    opt_partitionOptions : %epsilon */\n/*! Production::    opt_partitionOptions : partitionOptions */\n```\n\n----------------------------------------\n\nTITLE: Custom Streaming Operators Output\nDESCRIPTION: The expected output from running the custom streaming operators example, showing the sequence of doubled numbers (0 to 18, even numbers only) produced by the NumberDoubleOperator.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/awel_tutorial/getting_started/1.3_custom_operator.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n```\n\n----------------------------------------\n\nTITLE: Specifying SQL Production Rules for Line Formatting\nDESCRIPTION: These rules define the syntax for specifying line formatting options in SQL statements, including line terminators and starting positions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_96\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    line_opt : %epsilon */\n\n/*! Production::    line_opt : LINES line_term_list */\n\n/*! Production::    line_term : STARTING BY STRING_VALUE */\n\n/*! Production::    line_term : TERMINATED BY STRING_VALUE */\n\n/*! Production::    line_term_list : line_term */\n\n/*! Production::    line_term_list : line_term_list line_term */\n\n/*! Production::    linesFormat : LINES */\n\n/*! Production::    linesFormat : ROWS */\n\n/*! Production::    lines_or_rows : LINES */\n\n/*! Production::    lines_or_rows : ROWS */\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Llama-cpp DB-GPT for Specific Hardware\nDESCRIPTION: Command to build DB-GPT with custom Llama-cpp optimization flags targeting specific CPU and GPU hardware capabilities.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/build_image.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbash docker/base/build_image.sh --install-mode llama-cpp \\\n  --env-vars \"CMAKE_ARGS=\\\"$-DGGML_CUDA=ON -DGGML_AVX2=OFF -DGGML_AVX512=ON\\\"\" \\\n  --python-version 3.11\n```\n\n----------------------------------------\n\nTITLE: Configuring DeepSeek API Key and Embedding Model\nDESCRIPTION: TOML configuration snippet for setting up the DeepSeek API key and embedding model in the DB-GPT configuration file.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/installation/sourcecode.md#2025-04-09_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n# Model Configurations\n[models]\n[[models.llms]]\n# name = \"deepseek-chat\"\nname = \"deepseek-reasoner\"\nprovider = \"proxy/deepseek\"\napi_key = \"your-deepseek-api-key\"\n[[models.embeddings]]\nname = \"BAAI/bge-large-zh-v1.5\"\nprovider = \"hf\"\n# If not provided, the model will be downloaded from the Hugging Face model hub\n# uncomment the following line to specify the model path in the local file system\n# path = \"the-model-path-in-the-local-file-system\"\npath = \"/data/models/bge-large-zh-v1.5\"\n```\n\n----------------------------------------\n\nTITLE: SHOW Commands SQL Grammar Rules\nDESCRIPTION: SQL grammar production rules for various SHOW commands including database objects, status, and system information\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_183\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW COLLATION opt_show_condition */\n/*! Production::    show_stmt : SHOW CREATE TABLE relation_factor */\n/*! Production::    show_stmt : SHOW GRANTS opt_for_grant_user */\n/*! Production::    show_stmt : SHOW PRIVILEGES */\n/*! Production::    show_stmt : SHOW PROCESSLIST */\n```\n\n----------------------------------------\n\nTITLE: ModelWorkerParameters Class Definition in Python\nDESCRIPTION: Python class definition for ModelWorkerParameters that handles model worker configuration including network settings, logging, tracing, and worker behavior. The class provides extensive configuration options for deploying and managing model workers in DB-GPT.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/service/parameter_modelworkerparameters_3fd00b.mdx#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nModelWorkerParameters(\n    host: Optional[str] = '0.0.0.0',\n    port: Optional[int] = 8001,\n    daemon: Optional[bool] = False,\n    log: dbgpt.util.utils.LoggingParameters = <factory>,\n    trace: Optional[dbgpt.util.tracer.tracer_impl.TracerParameters] = None,\n    worker_type: Optional[str] = None,\n    worker_class: Optional[str] = None,\n    standalone: Optional[bool] = False,\n    register: Optional[bool] = True,\n    worker_register_host: Optional[str] = None,\n    controller_addr: Optional[str] = None,\n    send_heartbeat: Optional[bool] = True,\n    heartbeat_interval: Optional[int] = 20)\n```\n\n----------------------------------------\n\nTITLE: MySQL Parser Production Rules for Extended Drop Statements\nDESCRIPTION: Defines syntax for drop statements with additional database-specific options, including Oracle-compatible syntax for dropping database links, packages, and resources.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/oracle.js.LICENSE.txt#2025-04-09_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    drop_database_stmt : DROP database_key opt_if_exists database_factor */\n\n/*! Production::    drop_dblink_stmt : DROP DATABASE LINK dblink */\n\n/*! Production::    drop_function_stmt : DROP FUNCTION opt_if_exists NAME_OB */\n\n/*! Production::    drop_function_stmt : DROP FUNCTION opt_if_exists pl_schema_name */\n\n/*! Production::    drop_index_stmt : DROP INDEX relation_name \".\" relation_name */\n\n/*! Production::    drop_index_stmt : DROP INDEX relation_name */\n\n/*! Production::    drop_index_stmt : DROP INDEX relation_name ON relation_factor */\n\n/*! Production::    drop_outline_stmt : DROP OUTLINE relation_factor */\n\n/*! Production::    drop_package_stmt : DROP PACKAGE_P opt_body pl_schema_name */\n\n/*! Production::    drop_partition_name_list : \"(\" name_list \")\" */\n\n/*! Production::    drop_partition_name_list : name_list */\n\n/*! Production::    drop_procedure_stmt : DROP PROCEDURE opt_if_exists pl_schema_name */\n\n/*! Production::    drop_profile_stmt : DROP PROFILE profile_name */\n\n/*! Production::    drop_resource_stmt : DROP RESOURCE POOL opt_if_exists relation_name */\n\n/*! Production::    drop_resource_stmt : DROP RESOURCE POOL relation_name */\n\n/*! Production::    drop_resource_stmt : DROP RESOURCE UNIT opt_if_exists relation_name */\n\n/*! Production::    drop_resource_stmt : DROP RESOURCE UNIT relation_name */\n\n/*! Production::    drop_restore_point_stmt : DROP RESTORE POINT relation_name */\n\n/*! Production::    drop_role_stmt : DROP ROLE role */\n\n/*! Production::    drop_sequence_stmt : DROP SEQUENCE opt_if_exists relation_factor */\n\n/*! Production::    drop_sequence_stmt : DROP SEQUENCE relation_factor */\n\n/*! Production::    drop_synonym_stmt : DROP opt_public SYNONYM relation_name \".\" relation_name opt_force */\n\n/*! Production::    drop_synonym_stmt : DROP opt_public SYNONYM relation_name opt_force */\n\n/*! Production::    drop_table_stmt : DROP TABLE relation_factor opt_cascade_constraints opt_purge */\n\n/*! Production::    drop_table_stmt : DROP opt_temporary table_or_tables opt_if_exists table_list opt_drop_behavior */\n\n/*! Production::    drop_tablegroup_stmt : DROP TABLEGROUP opt_if_exists relation_name */\n\n/*! Production::    drop_tablegroup_stmt : DROP TABLEGROUP relation_name */\n\n/*! Production::    drop_tablespace_stmt : DROP TABLESPACE tablespace */\n\n/*! Production::    drop_tenant_stmt : DROP TENANT opt_if_exists relation_name opt_force_purge */\n\n/*! Production::    drop_tenant_stmt : DROP TENANT relation_name */\n\n/*! Production::    drop_trigger_stmt : DROP TRIGGER pl_schema_name */\n\n/*! Production::    drop_user_stmt : DROP USER user_list */\n\n/*! Production::    drop_user_stmt : DROP USER user_list opt_cascade */\n\n/*! Production::    drop_view_stmt : DROP VIEW opt_if_exists table_list opt_drop_behavior */\n\n/*! Production::    drop_view_stmt : DROP opt_materialized VIEW relation_factor opt_cascade_constraints */\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ProfileFactory in Python\nDESCRIPTION: This snippet demonstrates how to create a custom ProfileFactory class in DB-GPT. It shows the implementation of the create_profile method to return a DefaultProfile with specific attributes.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/agents/modules/profile/profile_creation.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom dbgpt.agent import ProfileFactory, Profile, DefaultProfile\n\nclass MyProfileFactory(ProfileFactory):\n    def create_profile(\n        self,\n        profile_id: int,\n        name: Optional[str] = None,\n        role: Optional[str] = None,\n        goal: Optional[str] = None,\n        prefer_prompt_language: Optional[str] = None,\n        prefer_model: Optional[str] = None,\n    ) -> Optional[Profile]:\n        return DefaultProfile(\n            name=\"Aristotle\",\n            role=\"Summarizer\",\n            goal=(\n                \"Summarize answer summaries based on user questions from provided \"\n                \"resource information or from historical conversation memories.\"\n            ),\n            desc=(\n                \"You can summarize provided text content according to user's questions\"\n                \" and output the summarization.\"\n            ),\n            expand_prompt=\"Keep your answer concise\",\n            examples=\"\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Documentation\nDESCRIPTION: Builds a Docker image for documentation deployment with configurable NPM registry and version settings.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Use the default NPM_REGISTRY=https://registry.npmjs.org\n# Use https://www.npmmirror.com/\nNPM_REGISTRY=https://registry.npmmirror.com\ndocker build -f docs/Dockerfile-deploy \\\n-t eosphorosai/dbgpt-docs \\\n--build-arg NPM_REGISTRY=$NPM_REGISTRY \\\n--build-arg CI=false \\\n--build-arg NUM_VERSION=2 .\n```\n\n----------------------------------------\n\nTITLE: SQL Parser Production Rules for Relation Factors\nDESCRIPTION: Defines SQL grammar production rules for relation factors in various contexts, including hints, leading hints, and with-star options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_165\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    relation_factor : dot_relation_factor */\n\n/*! Production::    relation_factor : normal_relation_factor */\n\n/*! Production::    relation_factor_in_hint : normal_relation_factor qb_name_option */\n\n/*! Production::    relation_factor_in_hint_list : relation_factor_in_hint */\n\n/*! Production::    relation_factor_in_hint_list : relation_factor_in_hint_list relation_sep_option relation_factor_in_hint */\n\n/*! Production::    relation_factor_in_leading_hint : \"(\" relation_factor_in_hint_list \")\" */\n\n/*! Production::    relation_factor_in_leading_hint_list : \"(\" relation_factor_in_hint_list relation_sep_option relation_factor_in_leading_hint_list \")\" */\n\n/*! Production::    relation_factor_in_leading_hint_list : \"(\" relation_factor_in_leading_hint_list \")\" */\n\n/*! Production::    relation_factor_in_leading_hint_list : relation_factor_in_hint */\n\n/*! Production::    relation_factor_in_leading_hint_list : relation_factor_in_leading_hint */\n\n/*! Production::    relation_factor_in_leading_hint_list : relation_factor_in_leading_hint_list relation_sep_option \"(\" relation_factor_in_hint_list relation_sep_option relation_factor_in_leading_hint_list \")\" */\n\n/*! Production::    relation_factor_in_leading_hint_list : relation_factor_in_leading_hint_list relation_sep_option \"(\" relation_factor_in_leading_hint_list \")\" */\n\n/*! Production::    relation_factor_in_leading_hint_list : relation_factor_in_leading_hint_list relation_sep_option relation_factor_in_hint */\n\n/*! Production::    relation_factor_in_leading_hint_list : relation_factor_in_leading_hint_list relation_sep_option relation_factor_in_leading_hint */\n\n/*! Production::    relation_factor_in_leading_hint_list_entry : relation_factor_in_hint_list relation_sep_option relation_factor_in_leading_hint_list */\n\n/*! Production::    relation_factor_in_leading_hint_list_entry : relation_factor_in_leading_hint_list */\n\n/*! Production::    relation_factor_in_pq_hint : \"(\" relation_factor_in_hint_list \")\" */\n\n/*! Production::    relation_factor_in_pq_hint : relation_factor_in_hint */\n\n/*! Production::    relation_factor_in_use_join_hint_list : \"(\" relation_factor_in_hint_list \")\" */\n\n/*! Production::    relation_factor_in_use_join_hint_list : relation_factor_in_hint */\n\n/*! Production::    relation_factor_in_use_join_hint_list : relation_factor_in_use_join_hint_list relation_sep_option \"(\" relation_factor_in_hint_list \")\" */\n\n/*! Production::    relation_factor_in_use_join_hint_list : relation_factor_in_use_join_hint_list relation_sep_option relation_factor_in_hint */\n\n/*! Production::    relation_factor_with_star : relation_name \".\" relation_name opt_with_star */\n\n/*! Production::    relation_factor_with_star : relation_name opt_with_star */\n\n/*! Production::    relation_factors : relation_factor */\n\n/*! Production::    relation_factors : relation_factors \",\" relation_factor */\n\n/*! Production::    relation_name : NAME_OB */\n\n/*! Production::    relation_name : unreserved_keyword */\n\n/*! Production::    relation_name_or_string : ALL */\n\n/*! Production::    relation_name_or_string : STRING_VALUE */\n\n/*! Production::    relation_name_or_string : relation_name */\n\n/*! Production::    relation_sep_option : \",\" */\n\n/*! Production::    relation_sep_option : %epsilon */\n\n/*! Production::    relation_with_star_list : relation_factor_with_star */\n\n/*! Production::    relation_with_star_list : relation_with_star_list \",\" relation_factor_with_star */\n```\n\n----------------------------------------\n\nTITLE: Retrieving App Details from DB-GPT API\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific app using its ID. It includes examples in both cURL and Python, showing how to send a GET request to the app retrieval endpoint.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/app.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDBGPT_API_KEY=dbgpt\nAPP_ID={YOUR_APP_ID}\ncurl -X GET \"http://localhost:5670/api/v2/serve/apps/$APP_ID\" -H \"Authorization: Bearer $DBGPT_API_KEY\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.app import get_app\n\nDBGPT_API_KEY = \"dbgpt\"\napp_id = \"{your_app_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await get_app(client=client, app_id=app_id)\n```\n\n----------------------------------------\n\nTITLE: SHOW Command Grammar Rules\nDESCRIPTION: Comprehensive grammar productions for SHOW commands covering database objects, status, security, and system information.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_148\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    show_stmt : SHOW COLLATION opt_show_condition */\n/*! Production::    show_stmt : SHOW CREATE TABLE relation_factor */\n/*! Production::    show_stmt : SHOW GRANTS opt_for_grant_user */\n/*! Production::    show_stmt : SHOW PRIVILEGES */\n/*! Production::    show_stmt : SHOW SCHEMA */\n```\n\n----------------------------------------\n\nTITLE: DD-Agents Header\nDESCRIPTION: Markdown header defining the DD-Agents (Data Driven Multi-Agents) component name\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/modules/agent.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DD-Agents\nData Driven Multi-Agents(DD-Agents) \n```\n\n----------------------------------------\n\nTITLE: Recall Scene Evaluation Request Example\nDESCRIPTION: Example JSON structure for an evaluation request in the 'recall' scene, which includes space ID, context parameters, and retriever-specific evaluation metrics.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/evaluation.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scene_key\": \"recall\",\n  \"scene_value\":\"2c76eea2-83b6-11ef-b482-acde48001122\",\n  \"context\":{\"top_k\":5, \"prompt\":\"942acd7e33b54ce28565f89f9b278044\",\"model\":\"zhipu_proxyllm\"},\n  \"evaluate_metrics\":[\"RetrieverHitRateMetric\", \"RetrieverMRRMetric\", \"RetrieverSimilarityMetric\"],\n  \"datasets\": [{\n            \"query\": \"what awel talked about\",\n            \"doc_name\":\"awel.md\"\n        }]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing SQL Insert Statements\nDESCRIPTION: These rules define how SQL INSERT statements are parsed, including variations with column lists, values clauses, and table references.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_157\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging \"(\" \")\" values_clause opt_returning */\n\n/*! Production::    single_table_insert : INTO insert_table_clause opt_nologging \"(\" column_list \")\" values_clause opt_returning */\n\n/*! Production::    single_table_insert : dml_table_name \"(\" column_list \")\" values_clause */\n```\n\n----------------------------------------\n\nTITLE: Defining Date Unit Production Rules in MySQL Grammar\nDESCRIPTION: These rules define various date units used in MySQL date and time operations, such as DAY, HOUR, MINUTE, SECOND, MONTH, YEAR, and their combinations.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/web/_next/static/ob-workers/oboracle.js.LICENSE.txt#2025-04-09_snippet_65\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Production::    date_unit : DAY */\n\n/*! Production::    date_unit : DAY_HOUR */\n\n/*! Production::    date_unit : DAY_MICROSECOND */\n\n/*! Production::    date_unit : DAY_MINUTE */\n\n/*! Production::    date_unit : DAY_SECOND */\n\n/*! Production::    date_unit : HOUR */\n\n/*! Production::    date_unit : HOUR_MICROSECOND */\n\n/*! Production::    date_unit : HOUR_MINUTE */\n\n/*! Production::    date_unit : HOUR_SECOND */\n\n/*! Production::    date_unit : MICROSECOND */\n\n/*! Production::    date_unit : MINUTE */\n\n/*! Production::    date_unit : MINUTE_MICROSECOND */\n\n/*! Production::    date_unit : MINUTE_SECOND */\n\n/*! Production::    date_unit : MONTH */\n\n/*! Production::    date_unit : QUARTER */\n\n/*! Production::    date_unit : SECOND */\n\n/*! Production::    date_unit : SECOND_MICROSECOND */\n\n/*! Production::    date_unit : WEEK */\n\n/*! Production::    date_unit : YEAR */\n\n/*! Production::    date_unit : YEAR_MONTH */\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Decision Operator for Conditional Branching in Python\nDESCRIPTION: Creates a custom BranchOperator that routes data flow based on whether the input integer is odd or even. It implements the branching logic using the previously defined condition functions.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/awel/cookbook/write_your_chat_database.md#2025-04-09_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass DataDecisionOperator(BranchOperator[int, int]):\n    def __init__(self, odd_task_name: str, even_task_name: str, **kwargs):\n        super().__init__(**kwargs)\n        self.odd_task_name = odd_task_name\n        self.even_task_name = even_task_name\n\n    async def branches(self):\n        return {branch_even: self.even_task_name, branch_odd: self.odd_task_name}\n```\n\n----------------------------------------\n\nTITLE: Delete Flow Using Python Client\nDESCRIPTION: Example of using the Python client to delete a flow by its ID. This demonstrates how to use the dbgpt_client library to delete flows.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dbgpt_client import Client\nfrom dbgpt_client.flow import delete_flow\n\nDBGPT_API_KEY = \"dbgpt\"\nflow_id = \"{your_flow_id}\"\n\nclient = Client(api_key=DBGPT_API_KEY)\nres = await delete_flow(client=client, flow_id=flow_id)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Literal Lexical Rules in SQL Grammar\nDESCRIPTION: Lexical rules for numeric literals in SQL, including decimal numbers, hexadecimal values, and scientific notation with various precision modifiers. These patterns recognize different numeric formats in SQL code.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/packages/dbgpt-app/src/dbgpt_app/static/old_web/_next/static/ob-workers/obmysql.js.LICENSE.txt#2025-04-09_snippet_229\n\nLANGUAGE: SQL\nCODE:\n```\n/*! Rule::       (({DEC_DIGIT}+)?\\.{DEC_DIGIT}+|{DEC_DIGIT}+\\.{EXPONENT_NUM_PART}|({DEC_DIGIT}+)?\\.(({DEC_DIGIT}+{EXPONENT_NUM_PART})|{DEC_DIGIT}+{EXPONENT_NUM_PART})) */\n\n/*! Rule::       (X'({HEX_DIGIT}{HEX_DIGIT})+'|0X{HEX_DIGIT}+) */\n\n/*! Rule::       ([0-9]+E[-+]?[0-9]+D|[0-9]+\\.[0-9]*E[-+]?[0-9]+D|\\.[0-9]+E[-+]?[0-9]+D) */\n\n/*! Rule::       ([0-9]+E[-+]?[0-9]+F|[0-9]+\\.[0-9]*E[-+]?[0-9]+F|\\.[0-9]+E[-+]?[0-9]+F) */\n\n/*! Rule::       ([0-9]+E[-+]?[0-9]+|[0-9]+\\.[0-9]*E[-+]?[0-9]+|\\.[0-9]+E[-+]?[0-9]+) */\n\n/*! Rule::       ([0-9]+\\.[0-9.]+|[0-9A-F:]+COLON_SYMB[0-9A-F:]+) */\n\n/*! Rule::       ([0-9]+\\.[0-9]*D|[0-9]+D|\\.[0-9]+D) */\n\n/*! Rule::       ([0-9]+\\.[0-9]*F|[0-9]+F|\\.[0-9]+F) */\n\n/*! Rule::       ([0-9]+\\.[0-9]*|\\.[0-9]+) */\n\n/*! Rule::       0 */\n\n/*! Rule::       1 */\n\n/*! Rule::       2 */\n\n/*! Rule::       B'([01])*'|0B([01])+ */\n```\n\n----------------------------------------\n\nTITLE: Defining HFLLMDeployModelParameters Configuration in MDX\nDESCRIPTION: Configuration component definition using MDX and TypeScript that specifies all parameters needed for local model deployment, including model path, backend settings, hardware configurations, and optimization options.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/hf_adapter_hfllmdeploymodelparameters_103e81.mdx#2025-04-09_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"HFLLMDeployModelParameters\",\n  \"description\": \"Local deploy model parameters.\",\n  \"documentationUrl\": \"\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"path\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The path of the model, if you want to deploy a local model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"device\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Device to run model. If None, the device is automatically determined\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"hf\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"5\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"trust_remote_code\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Trust remote code or not.\",\n      \"defaultValue\": \"True\"\n    },\n    {\n      \"name\": \"quantization\",\n      \"type\": \"BaseHFQuantization\",\n      \"required\": false,\n      \"description\": \"The quantization parameters.\",\n      \"nestedTypes\": [\n        {\n          \"type\": \"link\",\n          \"text\": \"bitsandbytes configuration\",\n          \"url\": \"parameter_bitsandbytesquantization_d40e3b\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"bitsandbytes_8bits configuration\",\n          \"url\": \"parameter_bitsandbytesquantization8bits_909aed\"\n        },\n        {\n          \"type\": \"link\",\n          \"text\": \"bitsandbytes_4bits configuration\",\n          \"url\": \"parameter_bitsandbytesquantization4bits_52b778\"\n        }\n      ]\n    },\n    {\n      \"name\": \"low_cpu_mem_usage\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether to use low CPU memory usage mode. It can reduce the memory when loading the model, if you load your model with quantization, it will be True by default. You must install `accelerate` to make it work.\"\n    },\n    {\n      \"name\": \"num_gpus\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The number of gpus you expect to use, if it is empty, use all of them as much as possible\"\n    },\n    {\n      \"name\": \"max_gpu_memory\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The maximum memory limit of each GPU, only valid in multi-GPU configuration, eg: 10GiB, 24GiB\"\n    },\n    {\n      \"name\": \"torch_dtype\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The dtype of the model, default is None.\",\n      \"validValues\": [\n        \"auto\",\n        \"float16\",\n        \"bfloat16\",\n        \"float\",\n        \"float32\"\n      ]\n    },\n    {\n      \"name\": \"attn_implementation\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The attention implementation, only valid in multi-GPU configuration\",\n      \"validValues\": [\n        \"flash_attention_2\"\n      ]\n    }\n  ]\n}} />\n```\n\n----------------------------------------\n\nTITLE: Create Flow API Endpoint\nDESCRIPTION: API endpoint for creating a new flow within DB-GPT. The request and response both use the Flow Object format.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/api/flow.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPOST /api/v2/serve/awel/flows\n```\n\n----------------------------------------\n\nTITLE: Rendering Claude Proxy LLM Configuration in JSX\nDESCRIPTION: This code snippet uses a custom React component called ConfigDetail to render the configuration parameters for the Claude Proxy LLM. It includes detailed information about each parameter, such as name, type, description, and default values.\nSOURCE: https://github.com/eosphoros-ai/DB-GPT/blob/main/docs/docs/config-reference/llm/claude_claudedeploymodelparameters_1f0c45.mdx#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigDetail config={{\n  \"name\": \"ClaudeDeployModelParameters\",\n  \"description\": \"Claude Proxy LLM\",\n  \"documentationUrl\": \"https://docs.anthropic.com/en/api/getting-started\",\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"The name of the model.\"\n    },\n    {\n      \"name\": \"backend\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The real model name to pass to the provider, default is None. If backend is None, use name as the real model name.\"\n    },\n    {\n      \"name\": \"provider\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The provider of the model. If model is deployed in local, this is the inference type. If model is deployed in third-party service, this is platform name('proxy/<platform>')\",\n      \"defaultValue\": \"proxy/claude\"\n    },\n    {\n      \"name\": \"verbose\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Show verbose output.\",\n      \"defaultValue\": \"False\"\n    },\n    {\n      \"name\": \"concurrency\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"Model concurrency limit\",\n      \"defaultValue\": \"100\"\n    },\n    {\n      \"name\": \"prompt_template\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Prompt template. If None, the prompt template is automatically determined from model. Just for local deployment.\"\n    },\n    {\n      \"name\": \"context_length\",\n      \"type\": \"integer\",\n      \"required\": false,\n      \"description\": \"The context length of the OpenAI API. If None, it is determined by the model.\"\n    },\n    {\n      \"name\": \"reasoning_model\",\n      \"type\": \"boolean\",\n      \"required\": false,\n      \"description\": \"Whether the model is a reasoning model. If None, it is automatically determined from model.\"\n    },\n    {\n      \"name\": \"api_base\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The base url of the claude API.\",\n      \"defaultValue\": \"${env:ANTHROPIC_BASE_URL:-https://api.anthropic.com}\"\n    },\n    {\n      \"name\": \"api_key\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The API key of the claude API.\",\n      \"defaultValue\": \"${env:ANTHROPIC_API_KEY}\"\n    },\n    {\n      \"name\": \"api_type\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The type of the OpenAI API, if you use Azure, it can be: azure\"\n    },\n    {\n      \"name\": \"api_version\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The version of the OpenAI API.\"\n    },\n    {\n      \"name\": \"http_proxy\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"The http or https proxy to use openai\"\n    }\n  ]\n}} />\n```"
  }
]