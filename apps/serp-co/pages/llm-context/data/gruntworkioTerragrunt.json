[
  {
    "owner": "gruntwork-io",
    "repo": "terragrunt",
    "content": "TITLE: Defining Input Variables for Modules - OpenTofu/Terraform - HCL\nDESCRIPTION: This HCL snippet demonstrates how to declare input variables in a Terraform module to support environment-specific configurations. Each variable includes a name and a description, enabling module reusability by allowing different environments to specify their own values. No explicit dependencies are required, but this HCL should be placed in a .tf file (e.g., main.tf) in a module's directory. Inputs provided via Terragrunt or Terraform affect resources instantiated with these modules. Expected input is provided by the caller, and output depends on how variables are used in resources downstream.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"instance_count\" {\\n  description = \"How many servers to run\"\\n}\\n\\nvariable \"instance_type\" {\\n  description = \"What kind of servers to run (e.g. t3.large)\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote State and Provider Generation in Terragrunt HCL Root File (HCL)\nDESCRIPTION: This snippet, intended for a 'root.hcl' file, shows how to configure an S3 backend for remote state usage and how to generate a matching provider file. The 'remote_state' block specifies the backend type and S3 connection options, along with file generation policies for 'backend.tf'. The 'generate' block demonstrates how to programmatically create a provider configuration file using a heredoc for the AWS provider, ensuring all units receive consistent provider settings. Dependencies include Terragrunt configured in a project structure and AWS credentials for provider usage. Key parameters include backend options (bucket, key, region, etc.) and the provider heredoc content.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n  backend = \"s3\"\n\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n\n  config = {\n    bucket = \"my-tofu-state\"\n\n    key            = \"tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\nEOF\n}\n\n```\n\n----------------------------------------\n\nTITLE: Migrating Terragrunt Configurations to terragrunt.hcl (HCL)\nDESCRIPTION: This snippet demonstrates the new terragrunt.hcl configuration, using native HCL2 blocks for terraform and remote_state without the enclosing 'terragrunt' attribute. It requires removing the equals sign and wrapping, reflecting updated syntax compatible with Terragrunt 0.19.x+ and HCL2. All nested arguments retain the same structure, with string interpolation and function usage supported within all values.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\\nterraform {\\n  source = \\\"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\\\"\\n  extra_arguments \\\"custom_vars\\\" {\\n    commands  = [\\\"apply\\\", \\\"plan\\\"]\\n    arguments = [\\\"-var\\\", \\\"foo=42\\\"]\\n  }\\n}\\nremote_state {\\n  backend = \\\"s3\\\"\\n  config = {\\n    bucket         = \\\"my-terraform-state\\\"\\n    key            = \\\"\\${path_relative_to_include()}/terraform.tfstate\\\"\\n    region         = \\\"us-east-1\\\"\\n    encrypt        = true\\n    dynamodb_table = \\\"my-lock-table\\\"\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Explicit Terragrunt Dependencies for frontend-app (HCL)\nDESCRIPTION: This HCL snippet demonstrates defining explicit dependencies for the `frontend-app` module in its `terragrunt.hcl` file. The `dependencies` block specifies that `frontend-app` depends on the modules located at `../vpc` and `../backend-app`. Terragrunt leverages these declarations to ensure dependencies are processed before dependents during `run-all` operations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\ndependencies {\n  paths = [\"../vpc\", \"../backend-app\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Source Relative to Named Parent Include using HCL\nDESCRIPTION: This HCL snippet demonstrates using `get_parent_terragrunt_dir(\"root\")` to define a Terraform module source. It specifies the named `include` block (\"root\") to ensure the path is calculated relative to the directory containing the parent `root.hcl` file identified by that include block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# prod/mysql/terragrunt.hcl\n\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"region\" {\n  path = find_in_parent_folders(\"region.hcl\")\n}\n\nterraform {\n  source = \"${get_parent_terragrunt_dir(\"root\")}/modules/vpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Infrastructure with Terragrunt HCL (OpenTofu/Terraform, HCL)\nDESCRIPTION: This HCL snippet configures Terragrunt to automate backend state management (with S3 and DynamoDB), inject the AWS provider configuration, and instantiate a VPC module from the Terraform registry. Dependencies include AWS credentials, unique S3 bucket/DynamoDB table names, and access to the relevant Terraform module. Key parameters include backend config fields (bucket, key, region), provider region, module source, and input variables for the VPC. Outputs are generated configuration files and managed infrastructure. Replace placeholder values before deployment, and ensure necessary AWS permissions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure the remote backend\\nremote_state {\\n  backend = \\\"s3\\\"\\n\\n  generate = {\\n    path      = \\\"backend.tf\\\"\\n    if_exists = \\\"overwrite_terragrunt\\\"\\n  }\\n\\n  config = {\\n    bucket = \\\"my-tofu-state\\\"\\n\\n    key            = \\\"tofu.tfstate\\\"\\n    region         = \\\"us-east-1\\\"\\n    encrypt        = true\\n    dynamodb_table = \\\"my-lock-table\\\"\\n  }\\n}\\n\\n# Configure the AWS provider\\ngenerate \\\"provider\\\" {\\n  path = \\\"provider.tf\\\"\\n  if_exists = \\\"overwrite_terragrunt\\\"\\n  contents = <<EOF\\nprovider \\\"aws\\\" {\\n  region = \\\"us-east-1\\\"\\n}\\nEOF\\n}\\n\\n# Configure the module\\n#\\n# The URL used here is a shorthand for\\n# \\\"tfr://registry.terraform.io/terraform-aws-modules/vpc/aws?version=5.16.0\\\".\\n#\\n# You can find the module at:\\n# https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/latest\\n#\\n# Note the extra `/` after the `tfr` protocol is required for the shorthand\\n# notation.\\nterraform {\\n  source = \\\"tfr:///terraform-aws-modules/vpc/aws?version=5.16.0\\\"\\n}\\n\\n# Configure the inputs for the module\\ninputs = {\\n  name = \\\"my-vpc\\\"\\n  cidr = \\\"10.0.0.0/16\\\"\\n\\n  azs             = [\\\"us-east-1a\\\", \\\"us-east-1b\\\", \\\"us-east-1c\\\"]\\n  private_subnets = [\\\"10.0.1.0/24\\\", \\\"10.0.2.0/24\\\", \\\"10.0.3.0/24\\\"]\\n  public_subnets  = [\\\"10.0.101.0/24\\\", \\\"10.0.102.0/24\\\", \\\"10.0.103.0/24\\\"]\\n\\n  enable_nat_gateway = false\\n  enable_vpn_gateway = false\\n\\n  tags = {\\n    IaC = \\\"true\\\"\\n    Environment = \\\"dev\\\"\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Outputs and Inputs with Terragrunt Dependency Block (HCL)\nDESCRIPTION: This HCL snippet shows how to use Terragrunt's 'dependency' blocks to fetch module outputs and pass them as inputs to other modules. Dependencies 'vpc' and 'rds' are declared via paths, with 'mock_outputs' for testing and command-specific output overrides. Inputs are passed from dependency outputs and module variable references. Requires Terragrunt and organized module directories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_44\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\n# Run `terragrunt output` on the module at the relative path `../vpc` and expose them under the attribute\n# `dependency.vpc.outputs`\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  # Configure mock outputs for the `validate` command that are returned when there are no outputs available (e.g the\n  # module hasn't been applied yet.\n  mock_outputs_allowed_terraform_commands = [\"validate\"]\n  mock_outputs = {\n    vpc_id = \"fake-vpc-id\"\n  }\n}\n\n# Another dependency, available under the attribute `dependency.rds.outputs`\ndependency \"rds\" {\n  config_path = \"../rds\"\n}\n\ninputs = {\n  region = dependency.vpn.inputs.region\n  vpc_id = dependency.vpc.outputs.vpc_id\n  db_url = dependency.rds.outputs.db_url\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic S3 Backend Key in Terragrunt HCL\nDESCRIPTION: Defines a Terragrunt root configuration (`root.hcl`) specifying an S3 remote state backend. It utilizes the `path_relative_to_include()` function to dynamically generate the `key` attribute based on the module's filesystem path relative to this root file, ensuring unique state locations mirroring the directory structure. It also includes configuration for state encryption, locking via DynamoDB, and generation of backend and provider configuration files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n  backend = \"s3\"\n\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n\n  config = {\n    bucket = \"my-tofu-state\"\n\n    key            = \"${path_relative_to_include()}/tofu.tfstate\" # <--\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Remote State and Provider in Terragrunt (HCL)\nDESCRIPTION: This snippet sets up a root Terragrunt configuration with an S3 backend for remote state management and generates a provider block to assume an AWS role. It relies on the S3 backend and the proper role ARN. Key parameters include the bucket, key (with path interpolation), region, and DynamoDB table. The generate block ensures provider configuration is consistently available; output is an HCL file ('provider.tf') in each module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket         = \"my-tofu-state\"\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  assume_role {\n    role_arn = \"arn:aws:iam::0123456789:role/terragrunt\"\n  }\n}\nEOF\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Root Configuration in Terragrunt Unit (HCL)\nDESCRIPTION: This snippet shows how to include a root Terragrunt configuration into a unit-level configuration file. The include block references the location of the root file using 'find_in_parent_folders', making shared configuration available to all units. It is used everywhere a consistent base is required and expects the root file to be in a parent directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Terragrunt Unit Dependency (HCL)\nDESCRIPTION: Shows HCL configuration within `mysql/terragrunt.hcl` to declare a dependency on the `vpc` unit located at `../vpc`. It retrieves the `vpc_id` output from the `vpc` dependency using `dependency.vpc.outputs.vpc_id` and passes it as an input variable to the `mysql` unit's Terraform module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ninputs = {\n  vpc_id = dependency.vpc.outputs.vpc_id\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Inter-Unit Dependencies and Referencing Outputs in Terragrunt HCL - HCL\nDESCRIPTION: Shows how to make one unit depend on another using Terragrunt's 'dependency' block, along with consuming output values from the dependency in 'inputs'. The 'config_path' points to the dependent unit's configuration, and referenced outputs are passed using Terragrunt interpolation syntax. This ensures that the current unit can use variables output from its dependency, and the proper execution order is enforced via Terragrunt's DAG resolution. Dependencies must have outputs defined in their modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\\nterraform {\\n source = \\\"../shared\\\"\\n}\\n\\ndependency \\\"foo\\\" {\\n config_path = \\\"../foo\\\"\\n}\\n\\ninputs = {\\n content = \\\"Foo content: ${dependency.foo.outputs.content}\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Source and Error Retries in Terragrunt HCL\nDESCRIPTION: This snippet shows a basic `terragrunt.hcl` file defining the Terraform module source using the `terraform` block and configuring retry logic for source fetching errors within the `errors` block. It specifies retrying errors matching a regex pattern up to 3 times with a 5-second interval.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_61\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  source = \"https://unreliable-source.com/module.zip\"\n}\n\nerrors {\n    retry \"source_fetch\" {\n        retryable_errors = [\".*Error: transient network issue.*\"]\n        max_attempts = 3\n        sleep_interval_sec = 5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Provider Configuration with Terragrunt's Generate Block (HCL)\nDESCRIPTION: This HCL snippet defines a generate block in an environment-level env.hcl to dynamically create a provider.tf file that configures the AWS provider to assume a specific IAM role for all Terraform units in that environment. The if_exists = \"overwrite_terragrunt\" parameter ensures it replaces any previously generated file, and the contents use heredoc syntax for multi-line provider specifications. Terragrunt must be used to orchestrate the run so the provider.tf is created before Terraform execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# prod/env.hcl\\ngenerate \"provider\" {\\n  path = \"provider.tf\"\\n  if_exists = \"overwrite_terragrunt\"\\n  contents = <<EOF\\nprovider \"aws\" {\\n  assume_role {\\n    role_arn = \"arn:aws:iam::0123456789:role/terragrunt\"\\n  }\\n}\\nEOF\\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Root Terragrunt Configuration in Child Module (HCL)\nDESCRIPTION: Implements configuration inheritance by including a parent Terragrunt config from a child module. Uses the include block and find_in_parent_folders function to locate the root configuration file, facilitating DRY remote state and input sharing. No additional dependencies are required beyond Terragrunt and standard folder structure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\n# child/terragrunt.hcl\ninclude \"root\" {\n  path   = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inputs in Terragrunt HCL - HCL\nDESCRIPTION: Specifies how to define custom input variables in a terragrunt.hcl file for a unit. This pattern lets you provide unit-specific parameters (such as 'content') that are injected into underlying OpenTofu/Terraform modules. Inputs blocks must match the variables expected in the module, and are referenced via variable interpolation. No external dependencies except Terragrunt itself. Inputs are merged with other variables or defaults when Terragrunt applies the configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/terragrunt.hcl\\ninputs = {\\n  content = \\\"Hello from foo, Terragrunt!\\\"\\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\\ninputs = {\\n  content = \\\"Hello from bar, Terragrunt!\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Using get_terragrunt_dir() for Path Consistency in Terragrunt Configuration - HCL\nDESCRIPTION: This snippet shows how to use the get_terragrunt_dir() function within a Terragrunt HCL configuration block to define relative variable file paths robustly. By leveraging get_terragrunt_dir(), file references stay portable and work for all team members regardless of their directory structure. The example includes an extra_arguments block for customizing Terraform commands, and illustrates referencing both parent and local files. Dependencies include Terragrunt, Terraform/OpenTofu, and properly structured file paths.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\\n  source = \"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\"\\n\\n  extra_arguments \"custom_vars\" {\\n    commands = [\\n      \"apply\",\\n      \"plan\",\\n      \"import\",\\n      \"push\",\\n      \"refresh\"\\n    ]\\n\\n    # With the get_terragrunt_dir() function, you can use relative paths!\\n    arguments = [\\n      \"-var-file=${get_terragrunt_dir()}/../common.tfvars\",\\n      \"-var-file=example.tfvars\"\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Backend and Provider in root.hcl using HCL\nDESCRIPTION: This HCL snippet shows the contents of a typical `root.hcl` file. It defines shared configurations for `remote_state` (using an S3 backend) and an AWS `provider`. The `generate` blocks instruct Terragrunt to create `backend.tf` and `provider.tf` files based on this configuration, which will then be used by OpenTofu/Terraform. This configuration is intended to be included by child `terragrunt.hcl` files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n  backend = \"s3\"\n\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n\n  config = {\n    bucket = \"my-tofu-state\"\n\n    key            = \"tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a VPC Module in Terragrunt using HCL\nDESCRIPTION: This HCL snippet shows the configuration within `vpc/terragrunt.hcl`. It includes the shared settings from `root.hcl` using the `include` block. It specifies the source of the AWS VPC module using the `terraform` block and provides module-specific variables like VPC name, CIDR block, subnets, and tags via the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# vpc/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"tfr:///terraform-aws-modules/vpc/aws?version=5.16.0\"\n}\n\ninputs = {\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = false\n  enable_vpn_gateway = false\n\n  tags = {\n    IaC = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Resource Destruction in a Terragrunt Module (HCL)\nDESCRIPTION: This HCL snippet shows how to use the `prevent_destroy` boolean attribute in a `terragrunt.hcl` file. Setting it to `true` protects the associated Terraform module's resources from being destroyed by `terragrunt destroy` or `terragrunt destroy-all` commands. This is useful for critical infrastructure like databases.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  source = \"git::git@github.com:foo/modules.git//app?ref=v0.0.3\"\n}\n\nprevent_destroy = true\n```\n\n----------------------------------------\n\nTITLE: Root Terragrunt Configuration Passing Region and Setting Backend - HCL\nDESCRIPTION: Shows an advanced 'root.hcl' for Terragrunt, configuring dynamic region resolution and remote state backend setup. Includes parent config discovery, region retrieval from included files, backend definition for OpenTofu/Terraform, and AWS provider configuration using generated files. Requires HCL interpolation, backend S3 bucket, and proper IAM permissions. Inputs include parent folder structure and region.hcl presence; outputs are generated backend and provider config files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_26\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nlocals {\n  region_hcl = find_in_parent_folders(\"region.hcl\")\n  region     = read_terragrunt_config(local.region_hcl).locals.region\n}\n\n# Configure the remote backend\nremote_state {\n  backend = \"s3\"\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n  config = {\n    bucket = \"my-tofu-state\"\n\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\n# Configure the AWS provider\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  region = \"${local.region}\"\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Outputs Between Units with dependency Block (Terragrunt HCL)\nDESCRIPTION: This HCL snippet shows how to use the dependency block inside a unit\\'s terragrunt.hcl to reference outputs from another unit, and pass them as input variables for the current unit. The provided configuration allows the mysql unit to consume the vpc_id output from the vpc unit as an input variable by setting the dependency config_path accordingly. This pattern requires that the dependency unit has applied outputs and is commonly used for parameterizing deployments. Inputs include a dependency block pointing to the relative path of the other unit and an inputs block mapping an input variable to the dependency output; it will not work if the dependency has never been applied.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# mysql/terragrunt.hcl\\ndependency \\\"vpc\\\" {\\n  config_path = \\\"../vpc\\\"\\n}\\n\\ninputs = {\\n  vpc_id = dependency.vpc.outputs.vpc_id\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an EC2 Instance Unit with Dependency on VPC Module via Terragrunt HCL (HCL)\nDESCRIPTION: This configuration defines an EC2 instance Terragrunt unit dependent on the VPC unit for subnet injection. It uses the 'include' block for shared settings, references the AWS EC2 module via 'terraform.source', and uses Terragrunt's 'dependency' block to fetch outputs from the sibling VPC unit. The 'inputs' block specifies instance variables and uses the dependency to set 'subnet_id'. Dependencies: AWS provider, VPC module outputs, and valid AWS credentials. Outputs fed from dependency must match the exported outputs of the VPC module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# ec2/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"tfr:///terraform-aws-modules/ec2-instance/aws?version=5.7.1\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ninputs = {\n  name = \"single-instance\"\n\n  instance_type = \"t2.micro\"\n  monitoring    = true\n  subnet_id     = dependency.vpc.outputs.private_subnets[0]\n\n  tags = {\n    IaC         = \"true\"\n    Environment = \"dev\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Parent Configuration in Terragrunt using HCL\nDESCRIPTION: This HCL snippet demonstrates the `include` block in a `terragrunt.hcl` file. It instructs Terragrunt to find a file named `root.hcl` in the parent directories and merge its configuration into the current file. This is a core pattern for achieving DRY (Don't Repeat Yourself) configuration in Terragrunt projects by sharing common settings.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Functions in Terragrunt Configuration (HCL)\nDESCRIPTION: Demonstrates using standard Terraform/OpenTofu functions (`basename`, `trimspace`, `join`, `format`) alongside Terragrunt-specific functions (`get_terragrunt_dir`, `path_relative_to_include`) within `terraform` and `remote_state` blocks in a `terragrunt.hcl` file. This allows for dynamic configuration of module sources and remote state parameters.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"../modules/${basename(get_terragrunt_dir())}\"\n}\n\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket = trimspace(\"   my-tofu-bucket     \")\n    region = join(\"-\", [\"us\", \"east\", \"1\"])\n    key    = format(\"%s/tofu.tfstate\", path_relative_to_include())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Root Terragrunt Configuration in Modules\nDESCRIPTION: Demonstrates how a module's `terragrunt.hcl` file uses an `include` block to inherit configuration from a parent `root.hcl` file. The `find_in_parent_folders()` function dynamically locates the root file, allowing modules to reuse the common settings (like the `generate` block for backend configuration) defined centrally.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Remote State Backend and AWS Provider with Terragrunt (HCL)\nDESCRIPTION: Defines Terragrunt configuration for a remote backend using AWS S3, with settings to generate a backend.tf Terraform file and an AWS provider block. The backend is parameterized by the relative path for key calculation, with backend and table details specified. Requires AWS credentials, S3, DynamoDB, and the Terragrunt CLI. The 'generate' block replaces provider.tf if present, ensuring AWS resources use the correct region.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n  backend = \"s3\"\n\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n\n  config = {\n    bucket = \"my-tofu-state\"\n\n    key            = \"${path_relative_to_include()}/tofu.tfstate\" # <--\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\nEOF\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Shared Config and Configuring Terraform Source in Terragrunt (HCL)\nDESCRIPTION: Shows how to include shared configuration files and set the Terraform module source in a Terragrunt config. Includes both a root configuration and an environment configuration, exposing shared variables for downstream use. Demonstrates dynamic assembly of the Terraform source attribute with a fixed version reference. Requires Terragrunt and matching include paths; expects the shared local variables to be correctly set in the included files. Output is a fully parameterized Terragrunt configuration for a specific environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# qa/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"env\" {\n  path   = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n  expose = true\n}\n\n# Construct the terraform.source attribute using the source_base_url and custom version v0.2.0\nterraform {\n  source = \"${include.env.locals.source_base_url}?ref=v0.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backend Configuration with Terragrunt\nDESCRIPTION: Defines a Terragrunt `generate` block within the root `terragrunt.hcl` file. This block dynamically creates a `backend.tf` file for each module before `terraform init` runs, injecting the S3 backend configuration. It utilizes the `path_relative_to_include()` function to generate a unique state file key for each module based on its relative path, keeping the configuration DRY.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ngenerate \"backend\" {\n  path      = \"backend.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend with Automatic Resource Creation in Terragrunt (HCL)\nDESCRIPTION: This HCL configuration block shows how to use `remote_state` in Terragrunt to manage an S3 backend for Terraform state. Terragrunt will automatically generate a `backend.tf` file based on the `generate` settings. More importantly, if the specified S3 bucket (`my-terraform-state`) or DynamoDB table (`my-lock-table`) doesn't exist in the configured AWS region (`us-east-1`), Terragrunt will automatically create them with default settings (versioning, encryption, etc.) before running Terraform commands. The `key` specifies the path within the bucket for the state file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nremote_state {\n  backend = \"s3\"\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite\"\n  }\n  config = {\n    bucket         = \"my-terraform-state\"\n    key            = \"${path_relative_to_include()}/terraform.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Root Configuration and Dynamic VPC AZ Resolution with Terragrunt HCL\nDESCRIPTION: Demonstrates a Terragrunt HCL configuration file for a unit (such as a VPC) that dynamically exposes and consumes the region setting from root configuration, allowing for dynamic determination of availability zones. Uses the Terragrunt 'include' mechanism with 'expose=true' to sandbox parent attributes, then references 'include.root' locals. This also configures module source, sets input variables with dynamic AZ resolution, and provides static subnet CIDRs and tags. Requires: root.hcl exposure, region.hcl in parent, and a Terraform AWS VPC module source.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_26\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \\\"root\\\" {\\n  path   = find_in_parent_folders(\\\"root.hcl\\\")\\n  expose = true\\n}\\n\\nlocals {\\n  region = include.root.locals.region\\n}\\n\\n# Configure the module\\n# The URL used here is a shorthand for\\n# \\\"tfr://registry.terraform.io/terraform-aws-modules/vpc/aws?version=5.16.0\\\".\\n# Note the extra `/` after the protocol is required for the shorthand\\n# notation.\\nterraform {\\n  source = \\\"tfr:///terraform-aws-modules/vpc/aws?version=5.16.0\\\"\\n}\\n\\n# Configure the inputs for the module\\ninputs = {\\n  name = \\\"my-vpc\\\"\\n  cidr = \\\"10.0.0.0/16\\\"\\n\\n  azs             = [\\\"${local.region}a\\\", \\\"${local.region}b\\\", \\\"${local.region}c\\\"] # <--\\n  private_subnets = [\\\"10.0.1.0/24\\\", \\\"10.0.2.0/24\\\", \\\"10.0.3.0/24\\\"]\\n  public_subnets  = [\\\"10.0.101.0/24\\\", \\\"10.0.102.0/24\\\", \\\"10.0.103.0/24\\\"]\\n\\n  enable_nat_gateway = false\\n  enable_vpn_gateway = false\\n\\n  tags = {\\n    IaC = \\\"true\\\"\\n    Environment = \\\"dev\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using mock_outputs for Dependency Placeholders in Terragrunt HCL - HCL\nDESCRIPTION: Demonstrates using the 'mock_outputs' attribute within a 'dependency' block in terragrunt.hcl. This technique provides placeholder values for outputs when the actual values aren't available, such as during planning before the dependent module is applied. Essential for supporting DAG-based workflow in Terragrunt stacks where not all units have been executed. The 'mock_outputs' object should match the structure/names expected by referencing code.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\\nterraform {\\n  source = \\\"../shared\\\"\\n}\\n\\ndependency \\\"foo\\\" {\\n  config_path = \\\"../foo\\\"\\n  mock_outputs = {\\n    content = \\\"Mocked content from foo\\\"\\n  }\\n}\\n\\ninputs = {\\n  content = \\\"Foo content: ${dependency.foo.outputs.content}\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Terraform Modules to Terragrunt Units (Tree)\nDESCRIPTION: Demonstrates the modified directory structure after adding an empty `terragrunt.hcl` file to each module directory. This conversion turns Terraform modules into Terragrunt units, enabling stack operations like `run-all`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\nroot\n├── backend-app\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── frontend-app\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── mysql\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── redis\n│   ├── main.tf\n│   └── terragrunt.hcl\n└── vpc\n    ├── main.tf\n    └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Context and Dependencies in app.hcl (Terragrunt HCL)\nDESCRIPTION: This snippet demonstrates advanced DRY configuration in Terragrunt by reading the nearest env.hcl, extracting the 'env' variable, and constructing module inputs accordingly. It also establishes dependencies on VPC and MySQL modules, wiring their outputs into the current module's inputs. This approach centralizes environment logic via file hierarchy and makes module configuration context-aware.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  # Load the relevant env.hcl file based on where the including unit is.\n  # This works because find_in_parent_folders always runs in the context of the unit.\n  env_vars = read_terragrunt_config(find_in_parent_folders(\"env.hcl\"))\n  env_name = local.env_vars.locals.env\n\n  source_base_url = \"github.com/<org>/modules.git//app\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ninputs = {\n  env            = local.env_name\n  basename       = \"example-app-${local.env_name}\"\n  vpc_id         = dependency.vpc.outputs.vpc_id\n  subnet_ids     = dependency.vpc.outputs.subnet_ids\n  mysql_endpoint = dependency.mysql.outputs.endpoint\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an EC2 Module with Dependency in Terragrunt using HCL\nDESCRIPTION: This HCL snippet shows the configuration within `ec2/terragrunt.hcl`. It includes shared settings from `root.hcl`, defines the source for an EC2 instance module, and provides inputs. Crucially, it defines a `dependency` block on the VPC module located at `../vpc`, allowing it to retrieve outputs like the `subnet_id` using `dependency.vpc.outputs.private_subnets[0]` for the EC2 instance configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# ec2/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"tfr:///terraform-aws-modules/ec2-instance/aws?version=5.7.1\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ninputs = {\n  name = \"single-instance\"\n\n  instance_type = \"t2.micro\"\n  monitoring    = true\n  subnet_id     = dependency.vpc.outputs.private_subnets[0]\n\n  tags = {\n    IaC         = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Environment Module Configuration - HCL\nDESCRIPTION: Represents a Terragrunt partial configuration placed in a shared environment folder. Sets up the Terraform source for the app module and defines dependencies for VPC and MySQL. Common input variables are set except for environment-specific ones. This file is intended to be included in per-environment configs to reduce duplication.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  source = \"github.com/<org>/modules.git//app?ref=v0.1.0\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ninputs = {\n  basename       = \"example-app\"\n  vpc_id         = dependency.vpc.outputs.vpc_id\n  subnet_ids     = dependency.vpc.outputs.subnet_ids\n  mysql_endpoint = dependency.mysql.outputs.endpoint\n}\n\n```\n\n----------------------------------------\n\nTITLE: Passing Simple Input Variables via Terragrunt HCL\nDESCRIPTION: This HCL snippet shows how to define simple input variables like `instance_type`, `instance_count`, and a map `tags` using the `inputs` attribute in a `terragrunt.hcl` file. These will be passed to Terraform/OpenTofu.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\ninputs = {\n  instance_type  = \"t2.micro\"\n  instance_count = 10\n\n  tags = {\n    Name = \"example-app\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remote State Backend Configuration in Terragrunt (HCL)\nDESCRIPTION: This snippet demonstrates how to declaratively configure the remote state backend in a Terragrunt HCL file. It specifies the S3 backend and provides required parameters such as bucket, key, and region. This configuration allows Terragrunt to handle remote state management for OpenTofu/Terraform runs. Requires Terragrunt and OpenTofu/Terraform; `bucket`, `key`, and `region` are key parameters and must match the target infrastructure's requirements.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QA App Terragrunt Configuration with Dependencies - HCL\nDESCRIPTION: Defines a Terragrunt configuration for a QA app module, including the shared root configuration and specifying the source module, dependencies on VPC and MySQL, and explicit inputs. Inputs reference outputs from declared dependencies. Requires referenced parent configuration files and the indicated directory structure with corresponding dependency modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"github.com/<org>/modules.git//app?ref=v0.1.0\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ninputs = {\n  env            = \"qa\"\n  basename       = \"example-app\"\n  vpc_id         = dependency.vpc.outputs.vpc_id\n  subnet_ids     = dependency.vpc.outputs.subnet_ids\n  mysql_endpoint = dependency.mysql.outputs.endpoint\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and Managing S3 Remote State Backend with Terragrunt in HCL\nDESCRIPTION: This example sets up the S3 backend for remote state using Terragrunt's remote_state block. It configures the backend, output path, and specifies that Terragrunt should manage an S3 bucket and DynamoDB table with the given settings. The generate argument defines the output file for backend configuration. Terragrunt ensures the backend resources (bucket, lock table) are provisioned and compliant with the specified encryption, region, and versioning options. Parameters such as bucket, key, region, encrypt, and dynamodb_table must be customized for each deployment. This code assumes AWS credentials and permissions are provided for resource creation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\\nremote_state {\\n  backend = \\\"s3\\\"\\n  generate = {\\n    path      = \\\"backend.tf\\\"\\n    if_exists = \\\"overwrite\\\"\\n  }\\n  config = {\\n    bucket         = \\\"my-terraform-state\\\"\\n    key            = \\\"${path_relative_to_include()}/terraform.tfstate\\\"\\n    region         = \\\"us-east-1\\\"\\n    encrypt        = true\\n    dynamodb_table = \\\"my-lock-table\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Including Root Config and Declaring Dependencies in Terragrunt (HCL)\nDESCRIPTION: Demonstrates how to use the 'include' block to import settings from a parent HCL file and declare a list of dependent modules/units using the 'dependencies' block. Requires Terragrunt and assumes parent configuration is at 'root.hcl', with dependencies located at '../vpc', '../mysql', and '../redis'. The configuration expects each referenced path to contain a terragrunt-compatible unit. The 'find_in_parent_folders' function locates configuration up the directory tree.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/01-configuration.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ndependencies {\n  paths = [\"../vpc\", \"../mysql\", \"../redis\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a Module Dependency and Input Wiring in Terragrunt (HCL)\nDESCRIPTION: Demonstrates how to declare a dependency from an EC2 module to a VPC module within Terragrunt. The 'dependency' block specifies the dependent module's config path, allowing outputs from the VPC module to be used as input variables for the EC2 module. Prerequisites include a valid output in the VPC module. The sample wiring illustrates both scalar and map/list input assignment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\n# ec2/terragrunt.hcl\n# ...\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ninputs = {\n  name = \"single-instance\"\n\n  instance_type = \"t2.micro\"\n  monitoring    = true\n  subnet_id     = dependency.vpc.outputs.private_subnets[0]\n\n  tags = {\n    IaC         = \"true\"\n    Environment = \"dev\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Destroying Infrastructure Stack with Terragrunt run-all (Bash)\nDESCRIPTION: Demonstrates the `terragrunt run-all destroy` command, executed from the root directory, to tear down all infrastructure defined across multiple Terragrunt modules in the stack. The output shows Terragrunt automatically determining the correct destruction order based on the defined dependencies (destroying dependents like `ec2` before their dependencies like `vpc`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# From the root directory\n$ terragrunt run-all destroy\n16:32:08.944 INFO   The stack at . will be processed in the following order for command destroy:\nGroup 1\n- Module ./ec2\n\nGroup 2\n- Module ./vpc\n\n\nWARNING: Are you sure you want to run `terragrunt destroy` in each folder of the stack described above? There is no undo! (y/n)\n```\n\n----------------------------------------\n\nTITLE: Deploying All Terragrunt Units in a Stack (Bash)\nDESCRIPTION: Shows the command sequence to navigate to the root directory and apply all Terragrunt units within it and its subdirectories recursively. Terragrunt executes `terragrunt apply` for each discovered unit, respecting dependencies and potentially running independent units concurrently.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd root\nterragrunt run-all apply\n```\n\n----------------------------------------\n\nTITLE: Saving JSON and Combined Plan Outputs with Terragrunt run-all in Shell\nDESCRIPTION: Shows how to save plan output in JSON format using `terragrunt run-all plan --terragrunt-json-out-dir`. It also demonstrates combining both binary and JSON plan outputs by specifying both `--terragrunt-out-dir` and `--terragrunt-json-out-dir`, resulting in both `tfplan.tfplan` and `tfplan.json` files in the mirrored output directories. Note that JSON plan files cannot be directly used with `terragrunt run-all apply`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ terragrunt run-all plan --terragrunt-json-out-dir /tmp/json\n$ tree /tmp/json\n/tmp/json\n├── app1\n│   └── tfplan.json\n├── app2\n│   └── tfplan.json\n├── app3\n│   └── tfplan.json\n└── project-2\n    └── project-2-app1\n        └── tfplan.json\n\n# combine binary and json plans\n$ terragrunt run-all plan --terragrunt-out-dir /tmp/all --terragrunt-json-out-dir /tmp/all\n$ tree /tmp/all\n/tmp/all\n├── app1\n│   ├── tfplan.json\n│   └── tfplan.tfplan\n├── app2\n│   ├── tfplan.json\n│   └── tfplan.tfplan\n├── app3\n│   ├── tfplan.json\n│   └── tfplan.tfplan\n└── project-2\n    └── project-2-app1\n        ├── tfplan.json\n        └── tfplan.tfplan\n```\n\n----------------------------------------\n\nTITLE: Defining Module Input Variables using 'inputs' Block in terragrunt.hcl (>= v0.19.x) (HCL)\nDESCRIPTION: Demonstrates the required approach in Terragrunt 0.19.x and newer, where module input variables must be explicitly declared within an `inputs = { ... }` attribute in the `terragrunt.hcl` file. Terragrunt passes these variables to the underlying Terraform module, typically as environment variables.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # ...\n}\n\nremote_state {\n  # ...\n}\n\n# Input variables to set for your Terraform module\ninputs = {\n  instance_type  = \"t2.micro\"\n  instance_count = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Production Environment Module Source and Inputs with Terragrunt in HCL\nDESCRIPTION: This Terragrunt configuration sets up a production environment using a versioned module reference and environment-specific inputs. As with other environments, the 'include' block finds the root configuration, and the 'terraform' block references the correct module version. The 'inputs' block is adjusted for production needs, here specifying more resources. This pattern enables promoting changes through multiple environments with tailored parameters.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_36\n\nLANGUAGE: hcl\nCODE:\n```\n# infrastructure-live/prod/app/terragrunt.hcl\\ninclude \\\"root\\\" {\\n  path = find_in_parent_folders(\\\"root.hcl\\\")\\n}\\n\\nterraform {\\n  source = \\\"github.com:foo/infrastructure-modules.git//app?ref=v0.0.2\\\" # <--\\n}\\n\\ninputs = {\\n  instance_count = 3\\n  instance_type  = \\\"t3.large\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Shared Source Modules and Inputs in Terragrunt HCL - HCL\nDESCRIPTION: Shows the pattern for both specifying a shared reusable module as the Terraform source and setting input variables in terragrunt.hcl. The 'terraform' block's 'source' attribute points to a shared module folder, reducing duplication. The adjacent 'inputs' block supplies parameters tailored to each unit instance. No direct dependencies outside Terragrunt and the referenced source modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/terragrunt.hcl\\nterraform {\\n  source = \\\"../shared\\\"\\n}\\n\\ninputs = {\\n  content = \\\"Hello from foo, Terragrunt!\\\"\\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\\nterraform {\\n  source = \\\"../shared\\\"\\n}\\n\\ninputs = {\\n  content = \\\"Hello from bar, Terragrunt!\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Remote State Keys with `path_relative_to_include` (HCL)\nDESCRIPTION: This code snippet, intended for a root `terragrunt.hcl` file that is included by child modules, configures an S3 remote state backend. It utilizes the `path_relative_to_include()` function to dynamically generate a unique S3 `key` for each child module based on its path relative to the included root file (e.g., `prod/mysql/tofu.tfstate`), ensuring state separation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket = \"my-tofu-bucket\"\n    region = \"us-east-1\"\n    key    = \"${path_relative_to_include()}/tofu.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Before, After, and Error Hooks in HCL\nDESCRIPTION: Demonstrates how to configure Terragrunt hooks within a `terraform` block in `terragrunt.hcl`. It defines a `before_hook` and `after_hook` to run `echo` commands for `apply` and `plan`, and an `error_hook` specific to `apply` errors. The `after_hook` uses `run_on_error = true` to execute even on failure, and the `error_hook` uses `on_errors = [\".*\"]` to trigger on any error pattern.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  before_hook \"before_hook\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Running OpenTofu\"]\n  }\n\n  after_hook \"after_hook\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Finished running OpenTofu\"]\n    run_on_error = true\n  }\n\n  error_hook \"import_resource\" {\n    commands  = [\"apply\"]\n    execute   = [\"echo\", \"Error Hook executed\"]\n    on_errors = [\n      \".*\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Module Dependency in HCL\nDESCRIPTION: Illustrates how to define a dependency in a Terragrunt configuration file (`ec2/terragrunt.hcl`). The `dependency \"vpc\"` block specifies that the `ec2` module depends on the `vpc` module, located via `config_path`. Outputs from the `vpc` module (like `private_subnets`) are accessed within the `inputs` block using the `dependency.vpc.outputs` map.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\n# ec2/terragrunt.hcl\n# ...\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ninputs = {\n  name = \"single-instance\"\n\n  instance_type = \"t2.micro\"\n  monitoring    = true\n  subnet_id     = dependency.vpc.outputs.private_subnets[0]\n\n  tags = {\n    IaC         = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Hooks (Before, After, Error) in HCL\nDESCRIPTION: Defines basic `before_hook`, `after_hook`, and `error_hook` within a `terraform` block in `terragrunt.hcl`. Shows how to trigger simple `echo` commands based on `apply` and `plan` commands. The `after_hook` is configured with `run_on_error = true` to execute even if the Terraform command fails, while the `error_hook` specifically triggers on errors during `apply` that match the specified regex (`.*`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  before_hook \"before_hook\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Running OpenTofu\"]\n  }\n\n  after_hook \"after_hook\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Finished running OpenTofu\"]\n    run_on_error = true\n  }\n\n  error_hook \"import_resource\" {\n    commands  = [\"apply\"]\n    execute   = [\"echo\", \"Error Hook executed\"]\n    on_errors = [\n      \".*\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fallback with `find_in_parent_folders` (HCL)\nDESCRIPTION: Illustrates the use of the optional second `fallback` parameter for the `find_in_parent_folders` function. If the primary file (`some-other-file-name.hcl`) is not found during the upward search, the function returns the specified fallback path (`fallback.hcl`) instead of raising an error.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"some-other-file-name.hcl\", \"fallback.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Stack Units with External Sources - HCL\nDESCRIPTION: This HCL snippet demonstrates how to define a terragrunt.stack.hcl file aggregating multiple infrastructure units (such as service, db, and asg-sg) from a remote infrastructure catalog repository. Each unit block specifies the source, path, and the no_dot_terragrunt_stack boolean to control output paths. Dependencies include Terragrunt (with stacks support), network connectivity to the git repo, and valid referenced modules. The configuration allows cohesive stack management by referencing modular units, with each unit’s specific configuration included as needed. Expected outcome: the described units are managed as a single stack instance and generated on demand for deployment or update.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n## non-prod/us-east-1/stateful-ec2-asg-service/terragrunt.stack.hcl\\n\\nunit \"service\" {\\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/ec2-asg-stateful-service\"\\n  path   = \"service\"\\n\\n  no_dot_terragrunt_stack = true\\n\\n  ## Add any additional configuration for the service unit here\\n}\\n\\nunit \"db\" {\\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/mysql\"\\n  path   = \"db\"\\n\\n  no_dot_terragrunt_stack = true\\n\\n  ## Add any additional configuration for the db unit here\\n}\\n\\nunit \"asg-sg\" {\\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/security-group\"\\n  path   = \"sgs/asg\"\\n\\n  no_dot_terragrunt_stack = true\\n\\n  ## Add any additional configuration for the asg-sg unit here\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Including and Injecting Dependencies in Terragrunt - HCL\nDESCRIPTION: Demonstrates basic inclusion of a parent HCL config and explicit dependencies on VPC and ALB modules using Terragrunt. It shows the use of Terragrunt's include block to inherit config, and dependency blocks to reference the outputs of other modules. Inputs are set dynamically based on those dependencies. Dependencies must be defined in referenced locations and outputs must exist in those modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_30\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\ninclude \"root\" {\n  path   = find_in_parent_folders(\"root.hcl\")\n  expose = true\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ndependency \"alb\" {\n  config_path = (\n    include.root.inputs.vpc_name == \"mgmt\"\n    ? \"../alb-public\"\n    : \"../alb-private\"\n  )\n}\n\ninputs = {\n  vpc_name = dependency.vpc.outputs.name\n  alb_id   = dependency.alb.outputs.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Arguments Specifically for Terraform Init in Terragrunt (HCL)\nDESCRIPTION: This HCL configuration shows how to define `extra_arguments` specifically for the `terraform init` or `tofu init` command using Terragrunt. The example passes the `-plugin-dir` argument, useful for environments with manually installed plugins. Note that `-from-module` or the `DIR` argument should not be included here as Terragrunt handles them automatically.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # ...\n\n  extra_arguments \"init_args\" {\n    commands = [\n      \"init\"\n    ]\n\n    arguments = [\n      \"-plugin-dir=/my/tofu/plugin/dir\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt for AWS VPC Module (HCL)\nDESCRIPTION: This `terragrunt.hcl` file configures Terragrunt to manage an AWS VPC. It sets up an S3 remote state backend with DynamoDB locking, dynamically generates an AWS provider configuration file for the 'us-east-1' region, sources the official AWS VPC Terraform module, and defines input variables like VPC name, CIDR block, subnets, and tags. The `remote_state` block handles state persistence, the `generate` block creates the `provider.tf`, the `terraform` block specifies the module source, and the `inputs` block provides values to the module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\n# Configure the remote backend\nremote_state {\n  backend = \"s3\"\n\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n\n  config = {\n    bucket = \"my-tofu-state\"\n\n    key            = \"tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\n# Configure the AWS provider\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\nEOF\n}\n\n# Configure the module\n#\n# The URL used here is a shorthand for\n# \"tfr://registry.terraform.io/terraform-aws-modules/vpc/aws?version=5.16.0\".\n#\n# You can find the module at:\n# https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/latest\n#\n# Note the extra `/` after the `tfr` protocol is required for the shorthand\n# notation.\nterraform {\n  source = \"tfr:///terraform-aws-modules/vpc/aws?version=5.16.0\"\n}\n\n# Configure the inputs for the module\ninputs = {\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = false\n  enable_vpn_gateway = false\n\n  tags = {\n    IaC = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying All Resources in the Stack - Shell/Bash\nDESCRIPTION: Runs 'terragrunt run-all destroy' from the project root to destroy all provisioned resources. Demonstrates best practices for clean-up operations across all managed modules. Requires Terragrunt configured with backend and AWS credentials. No parameters; output is a log of destroy actions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n# From the root directory\n$ terragrunt run-all destroy\n```\n\n----------------------------------------\n\nTITLE: Defining Various Input Variable Types in Terragrunt HCL\nDESCRIPTION: This HCL snippet demonstrates defining various data types (string, number, boolean, lists, maps, objects) within the `inputs` attribute in a `terragrunt.hcl` file. These values are passed as environment variables (TF_VAR_...) to the underlying OpenTofu/Terraform process, JSON encoded. Note that type constraints must be defined in the Terraform variables block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  string      = \"string\"\n  number      = 42\n  bool        = true\n  list_string = [\"a\", \"b\", \"c\"]\n  list_number = [1, 2, 3]\n  list_bool   = [true, false]\n\n  map_string = {\n    foo = \"bar\"\n  }\n\n  map_number = {\n    foo = 42\n    bar = 12345\n  }\n\n  map_bool = {\n    foo = true\n    bar = false\n    baz = true\n  }\n\n  object = {\n    str  = \"string\"\n    num  = 42\n    list = [1, 2, 3]\n\n    map = {\n      foo = \"bar\"\n    }\n  }\n\n  from_env = get_env(\"FROM_ENV\", \"default\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt with Remote Module Source and Lifecycle Hooks - HCL\nDESCRIPTION: This HCL snippet provides an extensive example of configuring Terragrunt to source an OpenTofu/Terraform module from a remote Git repository, customize locking behavior, inject additional CLI arguments, and automate multiple before/after/error hooks tied to workflow commands. It demonstrates use of the 'terraform' block to manage configuration, leverages interpolation functions like get_env and get_parent_terragrunt_dir, and specifies execution order and error-handling for hooks. Dependencies include Terragrunt, OpenTofu/Terraform, access to the referenced Git repository, and any referenced scripts or variable files. Inputs are commands and variables influencing module and hook behavior; outputs are operational automation and extended CLI behavior as defined by the hooks and arguments.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Pull the OpenTofu/Terraform configuration at the github repo \"acme/infrastructure-modules\", under the subdirectory\n  # \"networking/vpc\", using the git tag \"v0.0.1\".\n  source = \"git::git@github.com:acme/infrastructure-modules.git//networking/vpc?ref=v0.0.1\"\n\n  # For any OpenTofu/Terraform commands that use locking, make sure to configure a lock timeout of 20 minutes.\n  extra_arguments \"retry_lock\" {\n    commands  = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock-timeout=20m\"]\n  }\n\n  # You can also specify multiple extra arguments for each use case. Here we configure terragrunt to always pass in the\n  # `common.tfvars` var file located by the parent terragrunt config.\n  extra_arguments \"custom_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    required_var_files = [\"${get_parent_terragrunt_dir()}/common.tfvars\"]\n  }\n\n  # The following are examples of how to specify hooks\n\n  # Before apply or plan, run \"echo Foo\".\n  before_hook \"before_hook_1\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Foo\"]\n  }\n\n  # Before apply, run \"echo Bar\". Note that blocks are ordered, so this hook will run after the previous hook to\n  # \"echo Foo\". In this case, always \"echo Bar\" even if the previous hook failed.\n  before_hook \"before_hook_2\" {\n    commands     = [\"apply\"]\n    execute      = [\"echo\", \"Bar\"]\n    run_on_error = true\n  }\n\n  # Note that you can use interpolations in subblocks. Here, we configure it so that before apply or plan, print out the\n  # environment variable \"HOME\".\n  before_hook \"interpolation_hook_1\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", get_env(\"HOME\", \"HelloWorld\")]\n    run_on_error = false\n  }\n\n  # After running apply or plan, run \"echo Baz\". This hook is configured so that it will always run, even if the apply\n  # or plan failed.\n  after_hook \"after_hook_1\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Baz\"]\n    run_on_error = true\n  }\n\n  # After an error occurs during apply or plan, run \"echo Error Hook executed\". This hook is configured so that it will run\n  # after any error, with the \".*\" expression.\n  error_hook \"error_hook_1\" {\n    commands  = [\"apply\", \"plan\"]\n    execute   = [\"echo\", \"Error Hook executed\"]\n    on_errors = [\n      \".*\",\n    ]\n  }\n\n  # A special after hook to always run after the init-from-module step of the Terragrunt pipeline. In this case, we will\n  # copy the \"foo.tf\" file located by the parent terragrunt.hcl file to the current working directory.\n  after_hook \"init_from_module\" {\n    commands = [\"init-from-module\"]\n    execute  = [\"cp\", \"${get_parent_terragrunt_dir()}/foo.tf\", \".\"]\n  }\n\n  # A special after_hook. Use this hook if you wish to run commands immediately after terragrunt finishes loading its\n  # configurations. If \"read-config\" is defined as a before_hook, it will be ignored as this config would\n  # not be loaded before the action is done.\n  after_hook \"read-config\" {\n    commands = [\"read-config\"]\n    execute  = [\"bash\", \"script/get_aws_credentials.sh\"]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt Using IAM Role via Environment Variable (Terragrunt, Bash)\nDESCRIPTION: This bash snippet sets the TERRAGRUNT_IAM_ROLE environment variable, instructing Terragrunt to assume the specified AWS IAM role when it runs. Requires Terragrunt and an IAM role as prerequisites. Replace ACCOUNT_ID and ROLE_NAME accordingly. The environment variable is respected by Terragrunt on invocation, and OpenTofu/Terraform actions will execute with credentials obtained from this role.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_IAM_ROLE=\"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Using sops_decrypt_file with try and jsondecode for default fallback in HCL\nDESCRIPTION: Uses try(jsondecode(sops_decrypt_file(...)), {}) to handle missing encrypted secrets gracefully by providing an empty object fallback. Ensures configuration does not fail if the file is missing or decryption fails. Inputs: encrypted file path. Output: decrypted secrets as map, or {} if file not present.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_28\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  secret_vars = try(jsondecode(sops_decrypt_file(find_in_parent_folders(\"no-secrets-here.json\"))), {})\n}\n\ninputs = merge(\n  local.secret_vars, # This will be {}\n  {\n    # additional inputs\n  }\n)\n\n```\n\n----------------------------------------\n\nTITLE: Unit Configuration with Dependencies and Inputs in Terragrunt (HCL)\nDESCRIPTION: Defines a typical unit's Terragrunt configuration by including the root settings, specifying the Terraform module source, declaring dependencies, and providing relevant inputs. Dependencies are resolved by pointing to sibling configuration paths. Key parameters such as 'env', IDs, and endpoints are set, and outputs from dependencies are referenced.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# qa/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"github.com/<org>/modules.git//app?ref=v0.1.0\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ninputs = {\n  env            = \"qa\"\n  basename       = \"example-app\"\n  vpc_id         = dependency.vpc.outputs.vpc_id\n  subnet_ids     = dependency.vpc.outputs.subnet_ids\n  mysql_endpoint = dependency.mysql.outputs.endpoint\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Root Terragrunt Configuration - HCL\nDESCRIPTION: This snippet shows a root-level Terragrunt configuration, establishing a remote state backend with S3 and generating a provider file for AWS. It uses the remote_state block with parameters for S3 and DynamoDB and the generate block to programmatically create a Terraform provider file. The configuration should be placed in a root HCL file and depends on Terragrunt and AWS credentials. It expects directory structure references and will create 'provider.tf' if needed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket         = \"my-tofu-state\"\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  assume_role {\n    role_arn = \"arn:aws:iam::0123456789:role/terragrunt\"\n  }\n}\nEOF\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Terragrunt to Apply Infrastructure in Project Directory - Bash\nDESCRIPTION: These Bash commands show how to navigate into a project directory and use Terragrunt to apply infrastructure changes. The output demonstrates Terragrunt's verbose logging, auto-initialization, provider installation, and resource creation. Prerequisites include Terragrunt and OpenTofu or Terraform installed, and appropriate configuration files present.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd foo\n$ terragrunt apply -auto-approve\n18:44:26.066 STDOUT tofu: Initializing the backend...\n18:44:26.067 STDOUT tofu: Initializing provider plugins...\n18:44:26.067 STDOUT tofu: - Finding latest version of hashicorp/local...\n18:44:26.717 STDOUT tofu: - Installing hashicorp/local v2.5.2...\n18:44:27.033 STDOUT tofu: - Installed hashicorp/local v2.5.2 (signed, key ID 0C0AF313E5FD9F80)\n18:44:27.033 STDOUT tofu: Providers are signed by their developers.\n18:44:27.033 STDOUT tofu: If you'd like to know more about provider signing, you can read about it here:\n18:44:27.033 STDOUT tofu: https://opentofu.org/docs/cli/plugins/signing/\n18:44:27.034 STDOUT tofu: OpenTofu has created a lock file .terraform.lock.hcl to record the provider\n18:44:27.034 STDOUT tofu: selections it made above. Include this file in your version control repository\n18:44:27.034 STDOUT tofu: so that OpenTofu can guarantee to make the same selections by default when\n18:44:27.034 STDOUT tofu: you run \"tofu init\" in the future.\n18:44:27.034 STDOUT tofu: OpenTofu has been successfully initialized!\n18:44:27.035 STDOUT tofu:\n18:44:27.035 STDOUT tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n18:44:27.035 STDOUT tofu: any changes that are required for your infrastructure. All OpenTofu commands\n18:44:27.035 STDOUT tofu: should now work.\n18:44:27.035 STDOUT tofu: If you ever set or change modules or backend configuration for OpenTofu,\n18:44:27.035 STDOUT tofu: rerun this command to reinitialize your working directory. If you forget, other\n18:44:27.035 STDOUT tofu: commands will detect it and remind you to do so if necessary.\n18:44:27.362 STDOUT tofu: OpenTofu used the selected providers to generate the following execution\n18:44:27.362 STDOUT tofu: plan. Resource actions are indicated with the following symbols:\n18:44:27.362 STDOUT tofu:   + create\n18:44:27.362 STDOUT tofu: OpenTofu will perform the following actions:\n18:44:27.362 STDOUT tofu:   # local_file.file will be created\n18:44:27.362 STDOUT tofu:   + resource \"local_file\" \"file\" {\n18:44:27.362 STDOUT tofu:       + content              = \"Hello, World!\"\n18:44:27.362 STDOUT tofu:       + content_base64sha256 = (known after apply)\n18:44:27.362 STDOUT tofu:       + content_base64sha512 = (known after apply)\n18:44:27.362 STDOUT tofu:       + content_md5          = (known after apply)\n18:44:27.362 STDOUT tofu:       + content_sha1         = (known after apply)\n18:44:27.362 STDOUT tofu:       + content_sha256       = (known after apply)\n18:44:27.362 STDOUT tofu:       + content_sha512       = (known after apply)\n18:44:27.362 STDOUT tofu:       + directory_permission = \"0777\"\n18:44:27.362 STDOUT tofu:       + file_permission      = \"0777\"\n18:44:27.362 STDOUT tofu:       + filename             = \"./hi.txt\"\n18:44:27.362 STDOUT tofu:       + id                   = (known after apply)\n18:44:27.362 STDOUT tofu:     }\n18:44:27.362 STDOUT tofu: Plan: 1 to add, 0 to change, 0 to destroy.\n18:44:27.362 STDOUT tofu:\n18:44:27.383 STDOUT tofu: local_file.file: Creating...\n18:44:27.384 STDOUT tofu: local_file.file: Creation complete after 0s [id=0a0a9f2a6772942557ab5355d76af442f8f65e01]\n18:44:27.392 STDOUT tofu:\n18:44:27.392 STDOUT tofu: Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\n18:44:27.392 STDOUT tofu:\n```\n\n----------------------------------------\n\nTITLE: Conditionally Disabling Terragrunt Remote State Initialization (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to configure the `remote_state` block in Terragrunt to conditionally disable automatic remote state initialization based on an environment variable. It uses the `get_env` function to read `TERRAGRUNT_DISABLE_INIT` (defaulting to \"false\") and converts it to a boolean using `tobool`. If `disable_init` is true, Terragrunt skips resource creation and runs `terraform init -backend=false`. This is useful for CI processes like validation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nremote_state {\n  # ...\n\n  disable_init = tobool(get_env(\"TERRAGRUNT_DISABLE_INIT\", \"false\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Different AWS Region Locally - HCL\nDESCRIPTION: Like the 'us-east-1' version, this snippet defines a local variable 'region' for 'us-west-2' in its own HCL file. This drives the Terragrunt region context for all configurations in this directory. Requires being included in module hierarchy using read_terragrunt_config.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_29\n\nLANGUAGE: hcl\nCODE:\n```\n# us-west-2/region.hcl\nlocals {\n  region = \"us-west-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable MySQL Unit Configuration in Terragrunt (HCL)\nDESCRIPTION: Represents the recommended pattern using Terragrunt units. This configuration file defines a reusable MySQL unit, sourcing the Terraform module dynamically based on a version provided via `values`. It establishes an explicit interface by defining required and optional inputs using the `values` map, promoting clarity and reusability across different environments within a Terragrunt Stack.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n## units/mysql/terragrunt.hcl\n\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//modules/mysql?ref=${values.version}\"\n}\n\ninputs = {\n  ## Required inputs\n  name              = values.name\n  instance_class    = values.instance_class\n  allocated_storage = values.allocated_storage\n  storage_type      = values.storage_type\n  master_username   = values.master_username\n  master_password   = values.master_password\n\n  ## Optional inputs\n  skip_final_snapshot = try(values.skip_final_snapshot, null)\n  engine_version      = try(values.engine_version, null)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PBKDF2 State Encryption with S3 Backend in Terragrunt (HCL)\nDESCRIPTION: Defines an S3 remote backend in Terragrunt and enables encryption using the PBKDF2 key provider for OpenTofu state. References an environment variable for the encryption passphrase. Requires Terragrunt, an AWS S3 bucket, and OpenTofu supporting the encryption map. Expected output is encrypted OpenTofu state using PBKDF2.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_22\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n\n  encryption = {\n    key_provider = \"pbkdf2\"\n    passphrase   = get_env(\"PBKDF2_PASSPHRASE\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Terragrunt Before Hook for Docker Build/Push in HCL\nDESCRIPTION: This HCL snippet defines a `before_hook` named \"build_and_push_image\" within a `terraform` block. It executes the `./build_and_push_image.sh` script before running `plan` or `apply` commands, ideal for automating container image builds and pushes to a registry like ECR prior to infrastructure deployment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  before_hook \"build_and_push_image\" {\n    commands     = [\"plan\", \"apply\"]\n    execute      = [\"./build_and_push_image.sh\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform S3 Backend Directly in HCL\nDESCRIPTION: Demonstrates the standard Terraform `backend` block configuration within a `terraform` block for storing state in an S3 bucket. This example includes parameters like bucket name, key, region, encryption flag, and DynamoDB table for locking. This method lacks dynamic configuration capabilities and requires repetition across modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    key            = \"frontend-app/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Root and Env Includes with Minimal Inputs (HCL)\nDESCRIPTION: Demonstrates composing a unit configuration with both root and environment-level includes, minimizing duplication. The 'env' variable is set per environment in the inputs block, and all common logic comes from includes. This approach requires both included files to be present and uses multiple include blocks for maximal reuse.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# qa/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"env\" {\n  path = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n}\n\ninputs = {\n  env = \"qa\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reading and Merging .tfvars Files into Inputs using Terragrunt HCL\nDESCRIPTION: This snippet demonstrates using the `read_tfvars_file` function within a `locals` block to load variables from a specified `.tfvars` file (`common.tfvars`). The result, which is a JSON string, is decoded using `jsondecode`. These variables are then merged with additional inputs using the `merge` function within the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_30\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  inputs_from_tfvars = jsondecode(read_tfvars_file(\"common.tfvars\"))\n}\n\ninputs = merge(\n  local.inputs_from_tfvars,\n  {\n    # additional inputs\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New Terragrunt Configurations - Bash\nDESCRIPTION: This set of Bash CLI commands demonstrates how to use the 'terragrunt scaffold' command to generate new Terragrunt configuration files using a module source URL and optional template parameters. The primary dependency is the Terragrunt CLI, which should be installed and available in your shell environment. Parameters include MODULE_URL (required), TEMPLATE_URL (optional), and various flags for variable and file settings. The output is typically one or more .hcl files generated in the working directory, pre-filled with module configuration for OpenTofu/Terraform workflows. The commands must be run from within a shell; file paths and URLs may need to be updated for your environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/06-scaffold.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold <MODULE_URL> [TEMPLATE_URL] [--var] [--var-file] [--no-include-root] [--root-file-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt-infrastructure-modules-example//modules/mysql\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs --var=Ref=v0.68.4\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs --var=SourceUrlType=git-ssh\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/scaffold/module-with-template\n# The template from the .boilerplate directory will be used to generate terragrunt.hcl\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs git@github.com:gruntwork-io/terragrunt.git//test/fixtures/scaffold/external-template\n# The files external-template.txt and terragrunt.hcl will be created from that external template\n```\n\n----------------------------------------\n\nTITLE: Configuring a Terragrunt Before Hook to Run Tflint in HCL\nDESCRIPTION: This HCL snippet configures a `before_hook` to execute the `tflint` command before `apply` or `plan`. This integrates Terraform/OpenTofu code linting into the Terragrunt workflow. It relies on finding a `.tflint.hcl` configuration file in the current or parent directories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  before_hook \"before_hook\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"tflint\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Region Project Structure in Tree Format - tree\nDESCRIPTION: This snippet uses the 'tree' language to show the intended directory structure for a Terragrunt-managed multi-region project. Illustrates the layout of root and regional configuration directories to clarify configuration organization. No dependencies, outputs a tree representation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_33\n\nLANGUAGE: tree\nCODE:\n```\n.\n├── root.hcl\n├── us-east-1\n│   ├── vpc\n│   │   └── terragrunt.hcl\n│   └── ec2\n│       └── terragrunt.hcl\n└── us-west-2\n    ├── vpc\n    │   └── terragrunt.hcl\n    └── ec2\n        └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Root-Level Terragrunt Configuration with Dynamic Region and Remote State (HCL)\nDESCRIPTION: Configures a root-level Terragrunt HCL file to dynamically resolve region settings via included region configuration, sets up S3 remote state backend with a dynamic state key, and generates the AWS provider file with dynamic region interpolation. Depends on Terragrunt functions (find_in_parent_folders, read_terragrunt_config), a valid S3 bucket and DynamoDB lock table, and is intended to be included from regional subdirectories. Key parameters: region location (from local or region.hcl), backend bucket/key, DynamoDB table, and module path relationships. Output affects generated backend and provider files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_25\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\\nlocals {\\n  region_hcl = find_in_parent_folders(\\\"region.hcl\\\")\\n  region     = read_terragrunt_config(local.region_hcl).locals.region\\n}\\n\\n# Configure the remote backend\\nremote_state {\\n  backend = \\\"s3\\\"\\n  generate = {\\n    path      = \\\"backend.tf\\\"\\n    if_exists = \\\"overwrite_terragrunt\\\"\\n  }\\n  config = {\\n    bucket = \\\"my-tofu-state\\\"\\n\\n    key            = \\\"${path_relative_to_include()}/tofu.tfstate\\\"\\n    region         = \\\"us-east-1\\\"\\n    encrypt        = true\\n    dynamodb_table = \\\"my-lock-table\\\"\\n  }\\n}\\n\\n# Configure the AWS provider\\ngenerate \\\"provider\\\" {\\n  path = \\\"provider.tf\\\"\\n  if_exists = \\\"overwrite_terragrunt\\\"\\n  contents = <<EOF\\nprovider \\\"aws\\\" {\\n  region = \\\"${local.region}\\\"\\n}\\nEOF\\n}\n```\n\n----------------------------------------\n\nTITLE: Saving and Applying Binary Destroy Plan with Terragrunt run-all in Shell\nDESCRIPTION: Illustrates how to generate and save a binary plan specifically for a destroy operation using `terragrunt run-all plan -destroy --terragrunt-out-dir`. Subsequently, the saved destroy plan can be applied using `terragrunt run-all apply --terragrunt-out-dir`. Requires Terragrunt, OpenTofu/Terraform, and a configured Terragrunt stack.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nterragrunt run-all plan -destroy --terragrunt-out-dir /tmp/tfplan\nterragrunt run-all apply --terragrunt-out-dir /tmp/tfplan\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Unit Dependencies for Frontend App in Terragrunt HCL\nDESCRIPTION: Provides another example of the `dependencies` block, this time within `frontend-app/terragrunt.hcl`. It declares that the frontend application unit depends on the `vpc` and `backend-app` units by specifying their relative paths in the `paths` attribute. This definition contributes to the overall dependency graph that Terragrunt uses to orchestrate commands like `run --all apply` or `run --all destroy`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# frontend-app/terragrunt.hcl\ndependencies {\n  paths = [\"../vpc\", \"../backend-app\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Allowing Mock Outputs for Plan Only in Terragrunt HCL - HCL\nDESCRIPTION: This HCL configuration specifies mock_outputs as inputs for the dependency but constrains them to be used only during specific Terraform commands via mock_outputs_allowed_terraform_commands. This allows precise control over when mock values are substituted, improving confidence in plan-only execution while ensuring real values are used during apply and other critical commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\\nterraform {\\n  source = \"../shared\"\\n}\\n\\ndependency \"foo\" {\\n  config_path = \"../foo\"\\n  mock_outputs = {\\n    content = \"Mocked content from foo\"\\n  }\\n\\n  mock_outputs_allowed_terraform_commands = [\"plan\"]\\n}\\n\\ninputs = {\\n  content = \"Foo content: ${dependency.foo.outputs.content}\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Web Identity in Terragrunt HCL Configuration (Terragrunt, HCL)\nDESCRIPTION: This HCL snippet defines both iam_role and iam_web_identity_token properties in a Terragrunt configuration file, allowing Terragrunt to assume an AWS IAM role using an OIDC token fetched from the environment variable AN_OIDC_TOKEN. This method embeds all necessary context for OIDC role assumption in code. It presumes the presence of the OIDC token in the calling environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\niam_role = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\niam_web_identity_token = get_env(\"AN_OIDC_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role Assumption with Web Identity Token from Environment Variable (HCL)\nDESCRIPTION: This HCL snippet shows how to configure Terragrunt to assume an IAM role using `AssumeRoleWithWebIdentity` by providing the OIDC token via an environment variable. The `iam_role` specifies the target role ARN, and `iam_web_identity_token` uses the `get_env()` function to retrieve the token from the specified environment variable. This is common in CI/CD pipelines.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\niam_role = \"arn:aws:iam::<AWS account number>:role/<IAM role name>\"\n\niam_web_identity_token = get_env(\"<variable name>\")\n```\n\n----------------------------------------\n\nTITLE: Using sops_decrypt_file with yamldecode in HCL for secret management\nDESCRIPTION: Shows decrypting an encrypted YAML secrets file at runtime using sops_decrypt_file, piping the decrypted output through yamldecode, and merging results into inputs. Requires sops and proper encryption keys. Input: path to SOPS-encrypted YAML file, output: decrypted secrets as input variables.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_27\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  secret_vars = yamldecode(sops_decrypt_file(find_in_parent_folders(\"secrets.yaml\")))\n}\n\ninputs = merge(\n  local.secret_vars,\n  {\n    # additional inputs\n  }\n)\n\n```\n\n----------------------------------------\n\nTITLE: Including Parent Terragrunt Configuration - Terragrunt - HCL\nDESCRIPTION: This snippet shows how to use the include block in a child Terragrunt configuration to inherit settings from a parent config file (root.hcl). The path argument leverages the find_in_parent_folders function for locating the shared configuration file. Dependencies include Terragrunt and an organized directory structure. The code ensures that remote state and other configurations can be centrally managed and propagated to nested modules. No parameters are required except the parent config path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\n# child/terragrunt.hcl\ninclude \"root\" {\n  path   = find_in_parent_folders(\"root.hcl\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Root Configuration in Unit Module - HCL\nDESCRIPTION: Demonstrates the use of an include block in a unit-specific 'terragrunt.hcl' file to import the shared root configuration. The 'path' attribute uses a helper to find 'root.hcl' in parent folders. This enables inheritance of global settings. Requires file location awareness and a proper folder structure with a parent configuration in place.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Terraform Module Source in Terragrunt (HCL)\nDESCRIPTION: This HCL snippet within a `terragrunt.hcl` file defines the source for the Terraform module using a `terraform` block. The `source` attribute specifies a Git URL pointing to a remote repository (`git@github.com:acme/infrastructure-modules.git`), a specific path within the repository (`//networking/vpc`), and a version (`?ref=v0.0.1`). Terragrunt will download this module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//networking/vpc?ref=v0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terragrunt Configuration in HCL\nDESCRIPTION: This snippet demonstrates a basic `terragrunt.hcl` configuration file. It utilizes the `include` block to inherit configuration from a parent `root.hcl` file found by searching upwards in the directory structure. It also defines explicit dependencies on other Terragrunt modules located in sibling directories (`../vpc`, `../mysql`, `../redis`) using the `dependencies` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/01-overview.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ndependencies {\n  paths = [\"../vpc\", \"../mysql\", \"../redis\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Remote State Backend Options in Terragrunt HCL\nDESCRIPTION: This HCL snippet shows configuration options within the `remote_state.config` block for an S3 backend in a Terragrunt `root.hcl` file. It demonstrates settings to control bucket versioning, server-side encryption (SSE), root access, enforced TLS, credential validation, DynamoDB lock table encryption, access logging, credentials file path, metadata API checks, and path-style access. These options allow fine-grained control over how Terragrunt manages the S3 bucket and DynamoDB table used for remote state. Note that several options are Terragrunt-specific and are used during resource creation, not passed directly to Terraform/OpenTofu.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n  # ...\n\n  config = {\n    skip_bucket_versioning         = true # use only if the object store does not support versioning\n    skip_bucket_ssencryption       = true # use only if non-encrypted OpenTofu/Terraform State is required and/or the object store does not support server-side encryption\n    skip_bucket_root_access        = true # use only if the AWS account root user should not have access to the remote state bucket for some reason\n    skip_bucket_enforced_tls       = true # use only if you need to access the S3 bucket without TLS being enforced\n    skip_credentials_validation    = true # skip validation of AWS credentials, useful when is used S3 compatible object store different from AWS\n    enable_lock_table_ssencryption = true # use only if non-encrypted DynamoDB Lock Table for the OpenTofu/Terraform State is required and/or the NoSQL database service does not support server-side encryption\n    accesslogging_bucket_name      = <string> # use only if you need server access logging to be enabled for your terraform state S3 bucket. Provide a <string> value representing the name of the target bucket to be used for logs output.\n    accesslogging_target_prefix    = <string> # use only if you want to set a specific prefix for your terraform state S3 bucket access logs when Server Access Logging is enabled. Provide a <string> value representing the TargetPrefix to be used for the logs output objects. If set to empty <string>, then TargetPrefix will be set to empty <string>. If attribute is not provided at all, then TargetPrefix will be set to default value `TFStateLogs/`.\n\n    shared_credentials_file     = \"/path/to/credentials/file\"\n    skip_metadata_api_check     = true\n    force_path_style            = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Child Module Configuration with Dynamic Inputs (Terragrunt HCL)\nDESCRIPTION: This Terragrunt configuration file shows how a child module can simply include root and env-level configuration, delegating input variable management to those includes. It also constructs the Terraform module 'source' from a base URL and target version, promoting maintainability and consistency in multi-environment setups.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"env\" {\n  path   = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n  expose = true\n}\n\n# Construct the terraform.source attribute using the source_base_url and custom version v0.2.0\nterraform {\n  source = \"${include.env.locals.source_base_url}?ref=v0.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Variable to Resource Configuration with OpenTofu/Terraform (HCL)\nDESCRIPTION: Introduces a variable block for 'content' in the resource definition, allowing dynamic file content via external input. 'var.content' is injected into the resource's content property. Requires no additional dependencies, but values must be supplied at plan/apply time (e.g., via '-var'). Output is a file with content based on user input.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/main.tf\\nvariable \\\"content\\\" {}\\n\\nresource \\\"local_file\\\" \\\"file\\\" {\\n  content  = var.content\\n  filename = \\\"${path.module}/hi.txt\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying All Terraform Modules in Correct Dependency Order with Terragrunt run-all (Bash and Logs)\nDESCRIPTION: Executes 'terragrunt run-all apply' to provision modules, showing the DAG-determined execution order (dependencies first). User confirmation is required before proceeding. The logs confirm that apply phase correctly orders modules, ensuring dependencies are realized before consumers. Prerequisite: valid HCL configurations and cloud credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all apply\n16:57:32.297 INFO   The stack at . will be processed in the following order for command apply:\nGroup 1\n- Module ./vpc\n\nGroup 2\n- Module ./ec2\n\n\nAre you sure you want to run 'terragrunt apply' in each folder of the stack described above? (y/n)\n\n```\n\n----------------------------------------\n\nTITLE: Using Mock Outputs in Terragrunt HCL for the Plan Phase - HCL\nDESCRIPTION: This HCL code snippet demonstrates the use of the mock_outputs attribute within a dependency block to provide placeholder output values when running the Terragrunt plan command. This ensures planning succeeds even if the dependency has not been applied yet and thus has no outputs, allowing pipelines and teams to validate configuration changes earlier.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\\nterraform {\\n  source = \"../shared\"\\n}\\n\\ndependency \"foo\" {\\n  config_path = \"../foo\"\\n  mock_outputs = {\\n    content = \"Mocked content from foo\"\\n  }\\n}\\n\\ninputs = {\\n  content = \"Foo content: ${dependency.foo.outputs.content}\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Terragrunt Before Hooks for Ordered Execution in HCL\nDESCRIPTION: Shows how multiple `before_hook` blocks can be defined in `terragrunt.hcl`. Hooks of the same type (e.g., `before_hook`) are executed sequentially in the order they appear in the configuration file. This example defines two `before_hook` blocks that print messages before `apply` or `plan`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  before_hook \"before_hook_1\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Will run OpenTofu\"]\n  }\n\n  before_hook \"before_hook_2\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Running OpenTofu\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic S3 Bucket Updates in Terragrunt (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to prevent Terragrunt from automatically updating an existing S3 bucket's configuration to match the `remote_state.config` settings (e.g., enabling versioning if it's not already enabled). By setting `disable_bucket_update = true` within the `config` block for an S3 backend, Terragrunt will only create the bucket if it doesn't exist but will not modify it afterwards.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nremote_state {\n  # ... other args omitted for brevity ...\n  config = {\n    # ... other config omitted for brevity ...\n    disable_bucket_update = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Specific Module Source and Inputs with Terragrunt in HCL\nDESCRIPTION: This Terragrunt configuration example defines an environment-specific deployment pointing to a versioned app module in a remote repository. It uses the 'include' block to inherit root configuration, specifies the module source with a version tag, and passes per-environment settings such as instance count and type through the 'inputs' block. Requires Terragrunt and appropriate access to the referenced infrastructure module repository. Inputs should be customized for target environments, and the configuration must be placed in the correct directory for Terragrunt's folder structure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_34\n\nLANGUAGE: hcl\nCODE:\n```\n# infrastructure-live/qa/app/terragrunt.hcl\\ninclude \\\"root\\\" {\\n  path = find_in_parent_folders(\\\"root.hcl\\\")\\n}\\n\\nterraform {\\n  source = \\\"github.com:foo/infrastructure-modules.git//app?ref=v0.0.1\\\"\\n}\\n\\ninputs = {\\n  instance_count = 3\\n  instance_type  = \\\"t2.micro\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: OpenTofu S3 Backend Encryption Block Example (HCL)\nDESCRIPTION: Illustrates how the resulting OpenTofu configuration appears when using S3 backend with encryption based on PBKDF2 as configured in Terragrunt. Shows mappings for bucket, key, and region, and the specific encryption providers used. Assumes prior Terragrunt configuration for backend and encryption; expected output is a Terraform state file protected via AES-GCM and PBKDF2.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_23\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n  encryption {\n    key_provider \"pbkdf2\" \"default\" {\n      passphrase = \"SUPERSECRETPASSPHRASE\"\n    }\n    method \"aes_gcm\" \"default\" {\n      keys = key_provider.pbkdf2.default\n    }\n    state {\n      method = method.aes_gcm.default\n    }\n    plan {\n      method = method.aes_gcm.default\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Terragrunt State and Verifying Backend Configuration (Bash)\nDESCRIPTION: Demonstrates how to migrate Terraform/OpenTofu state to a new backend location (e.g., after changing the `key` configuration) using `terragrunt init -migrate-state`. It also shows how to use `find` and `cat` to inspect the generated `backend.tf` file within the Terragrunt cache for a specific module (`vpc`) to verify the dynamically generated key.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# First, we'll migrate state to the new location\n$ terragrunt init -migrate-state\n# Then, let's take a look at the generated backend.tf file\n$ find .terragrunt-cache -name backend.tf -exec cat {} \\;\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    dynamodb_table = \"my-lock-table\"\n    encrypt        = true\n    key            = \"vpc/tofu.tfstate\"\n    region         = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using get_terraform_commands_that_need_locking in Terragrunt extra_arguments (HCL)\nDESCRIPTION: This HCL configuration showcases using the Terragrunt built-in function `get_terraform_commands_that_need_locking()` to dynamically populate the `commands` list within an `extra_arguments` block. This simplifies applying arguments like `-lock-timeout=20m` to all relevant Terraform/OpenTofu commands that acquire state locks, ensuring consistency without manual listing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # Force OpenTofu/Terraform to keep trying to acquire a lock for up to 20 minutes if someone else already has the lock\n  extra_arguments \"retry_lock\" {\n    commands  = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock-timeout=20m\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Environment Configuration in Terragrunt (HCL)\nDESCRIPTION: This snippet shows how to use the Terragrunt include block to pull in environment-specific settings from a shared app.hcl file. It sets local inputs for 'env' and 'basename', hardcoding 'env' to 'qa' and constructing 'basename' using the included environment's locals. This pattern is useful for simple setups but may be less DRY for more complex, multi-environment projects.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"env\" {\n  path   = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n  expose = true\n}\n\ninputs = {\n  env      = \"qa\"\n  basename = \"${include.env.locals.basename}-qa\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Environment Locals and Dependencies in Terragrunt (HCL)\nDESCRIPTION: Defines shared local variables and dependencies in a Terragrunt configuration using HCL. Loads environment-specific settings dynamically via read_terragrunt_config and includes a mechanism for setting the environment name and source URL. Specifies dependencies to other infrastructure components (such as VPC and MySQL) and propagates output values as module inputs. Requires Terragrunt and properly structured environment files; expects references to valid VPC and MySQL modules. Inputs are constructed from dynamic locals, with constraints of directory layout and expected parent files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# _env/app.hcl\nlocals {\n  # Load the relevant env.hcl file based on where the including unit is.\n  # This works because find_in_parent_folders always runs in the context of the unit.\n  env_vars = read_terragrunt_config(find_in_parent_folders(\"env.hcl\"))\n  env_name = local.env_vars.locals.env\n\n  source_base_url = \"github.com/<org>/modules.git//app\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ninputs = {\n  env            = local.env_name\n  basename       = \"example-app-${local.env_name}\"\n  vpc_id         = dependency.vpc.outputs.vpc_id\n  subnet_ids     = dependency.vpc.outputs.subnet_ids\n  mysql_endpoint = dependency.mysql.outputs.endpoint\n}\n```\n\n----------------------------------------\n\nTITLE: Corresponding S3 State Layout Example (Tree)\nDESCRIPTION: Shows the resulting S3 bucket structure for Terraform/OpenTofu state files when using dynamic keys based on the filesystem layout. Each module's state (`tofu.tfstate`) is stored in a prefix that matches its directory path relative to the root.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_11\n\nLANGUAGE: tree\nCODE:\n```\nmy-tofu-state\n├── vpc\n│   └── tofu.tfstate\n└── ec2\n    └── tofu.tfstate\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote State using Variables from .tfvars in Terragrunt HCL\nDESCRIPTION: This example shows how to load configuration values (like AWS region) from a `backend.tfvars` file using `read_tfvars_file` and `jsondecode` within a `locals` block. These loaded values are then referenced in the `remote_state` configuration block, specifically for setting the `region` parameter dynamically based on the content of the `.tfvars` file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_31\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  backend = jsondecode(read_tfvars_file(\"backend.tfvars\"))\n}\n\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket         = \"${get_env(\"TG_BUCKET_PREFIX\", \"tf-bucket\")}-${get_aws_account_id()}\"\n    key            = \"${path_relative_to_include()}/terraform-${local.aws_region}.tfstate\"\n    region         = local.backend.region\n  }\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Terragrunt Configuration with Specific Format using Bash\nDESCRIPTION: Demonstrates how to use the 'terragrunt render' command with the '--format' flag to control the output format. The first example shows the default HCL rendering (implicit or explicit), while the second specifies JSON output. Requires Terragrunt to be installed and executable in the environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/render-format.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Render as HCL (default)\nterragrunt render\n\n# Render as JSON\nterragrunt render --format json\n```\n\n----------------------------------------\n\nTITLE: Illustrating Backend Key Collision Error in Terragrunt using Bash\nDESCRIPTION: This Bash snippet shows the output of running `terragrunt plan` in the `ec2` directory. It displays an OpenTofu/Terraform error indicating a 'Backend configuration changed'. This happens because both the VPC and EC2 modules, inheriting the same `remote_state` configuration from `root.hcl`, are attempting to use the identical backend state key, leading to a collision.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan\n...\n* Failed to execute \"tofu init\" in ./.terragrunt-cache/I6Os-7-mjDhv4uQ5iCoGcOrDYhI/pfgqyj3TsBEWff7a1El6tYu6LEE\n  ╷\n  │ Error: Backend configuration changed\n  │\n  │ A change in the backend configuration has been detected, which may require\n  │ migrating existing state.\n  │\n  │ If you wish to attempt automatic migration of the state, use \"tofu init\n  │ -migrate-state\".\n  │ If you wish to store the current configuration with no changes to the\n  │ state, use \"tofu init -reconfigure\".\n  ╵\n\n\n  exit status 1\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan-Apply CI/CD with Selective Module Queueing (Bash)\nDESCRIPTION: Demonstrates Bash CLI commands to run Terragrunt in a CI/CD pipeline, targeting only modules that include or read updates from a shared configuration. Utilizes the --queue-include-units-reading flag to restrict execution to affected units and --working-dir to scope rollouts by environment. Assumes Terragrunt CLI is installed and directory layout matches the environment structure. Input parameters are the shared file and working directory; output is a targeted execution of plan/apply commands for efficient rollouts.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Roll out the change to the qa environment first\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl --working-dir qa\nterragrunt run-all apply --queue-include-units-reading _env/app.hcl --working-dir qa\n# If the apply succeeds to qa, move on to the stage environment\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl --working-dir stage\nterragrunt run-all apply --queue-include-units-reading _env/app.hcl --working-dir stage\n# And finally, prod.\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl --working-dir prod\nterragrunt run-all apply --queue-include-units-reading _env/app.hcl --working-dir prod\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Terragrunt Project with Git/SSH Module URLs using Bash\nDESCRIPTION: Demonstrates how to instruct `terragrunt scaffold` to use Git/SSH format for the module source URL in the generated `terragrunt.hcl`. This is done by setting the `SourceUrlType` variable to `git-ssh` via the `--var` flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs --var=SourceUrlType=git-ssh\n```\n\n----------------------------------------\n\nTITLE: Referencing Module via Terragrunt Terraform Block with Inputs - HCL\nDESCRIPTION: These HCL snippets update unit terragrunt.hcl files to utilize the 'terraform' block referencing the shared module directory and delegate variable inputs using 'inputs'. The dependency is that the shared module exists and expects a 'content' input. Key parameters are the 'source' path and the 'content' string. Expected input is static configuration; the effect is to instantiate the shared module with the specified input. Limitations: the referenced shared module must be compatible and directory structure correct.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/terragrunt.hcl\nterraform {\n  source = \"../shared\"\n}\n\ninputs = {\n  content = \"Hello from foo, Terragrunt!\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\nterraform {\n  source = \"../shared\"\n}\n\ninputs = {\n  content = \"Hello from bar, Terragrunt!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Hidden Directories in Find Results (CLI, Bash)\nDESCRIPTION: Adds the `--hidden` flag to `terragrunt find` to include configurations located in hidden directories (those starting with '.'). This is useful for comprehensive scans or when relevant configurations are intentionally obscured. Output includes all results (format defaults to text unless otherwise specified).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --hidden\n```\n\n----------------------------------------\n\nTITLE: Ordering Module Application with Terragrunt Dependencies Block (HCL)\nDESCRIPTION: This snippet demonstrates using the 'dependencies' block in a Terragrunt HCL file to specify application order during run-all operations. It ensures that the modules at the listed paths ('../vpc' and '../rds') are applied before the current module. The pattern is useful for orchestration across multiple infrastructure components, and does not expose outputs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_46\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\n# When applying this terragrunt config in an `run-all` command, make sure the modules at \"../vpc\" and \"../rds\" are\n# handled first.\ndependencies {\n  paths = [\"../vpc\", \"../rds\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt for Production Environment in HCL\nDESCRIPTION: This `terragrunt.hcl` file configures the 'app' module for the 'prod' environment. It includes the root configuration and uses the updated module version `v0.0.2`. Crucially, it defines different input values (`instance_count`, `instance_type`) tailored specifically for the production environment, demonstrating environment-specific configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_34\n\nLANGUAGE: hcl\nCODE:\n```\n# infrastructure-live/prod/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"github.com:foo/infrastructure-modules.git//app?ref=v0.0.2\" # <--\n}\n\ninputs = {\n  instance_count = 3\n  instance_type  = \"t3.large\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example terragrunt.hcl with Git/SSH Source URL in HCL\nDESCRIPTION: Shows the resulting `terragrunt.hcl` file generated when using the `--var=SourceUrlType=git-ssh` option. The `terraform { source = ... }` block uses the `git::ssh://` URL format, incorporating the default `git` user and the specified module path and reference.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\nterraform {\n  source = \"git::ssh://git@github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs?ref=v0.68.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Apply with Whitespace-Containing Argument (Bash)\nDESCRIPTION: This Bash snippet shows the final OpenTofu/Terraform command generated when `terragrunt apply` is executed with the configuration designed to handle arguments with spaces. Terragrunt correctly assembles the `-var bucket=example.bucket.name` argument from the separate list items defined in `extra_arguments`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt apply\n# tofu apply -var bucket=example.bucket.name\n```\n\n----------------------------------------\n\nTITLE: Logging Concurrent Module Execution with Terragrunt Run-All in Bash\nDESCRIPTION: Executes `terragrunt run-all plan` to run the plan command concurrently across multiple modules (unit-1, unit-2). The output demonstrates how Terragrunt enriches logs from each module with timestamps and module identifiers (e.g., `[unit-2]`), making it easier to track concurrent operations. Dependencies include Terragrunt, OpenTofu/Terraform, and a multi-module setup.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\n14:27:45.359 INFO   The stack at . will be processed in the following order for command plan:\nGroup 1\n- Module ./unit-1\n- Module ./unit-2\n\n\n14:27:45.399 INFO   [unit-2] tofu: Initializing the backend...\n14:27:45.399 INFO   [unit-1] tofu: Initializing the backend...\n14:27:45.400 INFO   [unit-2] tofu: Initializing provider plugins...\n14:27:45.400 INFO   [unit-2] tofu: OpenTofu has been successfully initialized!\n14:27:45.400 INFO   [unit-2] tofu:\n14:27:45.400 INFO   [unit-2] tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n14:27:45.400 INFO   [unit-2] tofu: any changes that are required for your infrastructure. All OpenTofu commands\n14:27:45.400 INFO   [unit-2] tofu: should now work.\n14:27:45.400 INFO   [unit-2] tofu: If you ever set or change modules or backend configuration for OpenTofu,\n14:27:45.400 INFO   [unit-2] tofu: rerun this command to reinitialize your working directory. If you forget, other\n14:27:45.400 INFO   [unit-2] tofu: commands will detect it and remind you to do so if necessary.\n14:27:45.400 INFO   [unit-1] tofu: Initializing provider plugins...\n14:27:45.400 INFO   [unit-1] tofu: OpenTofu has been successfully initialized!\n14:27:45.400 INFO   [unit-1] tofu:\n14:27:45.400 INFO   [unit-1] tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n14:27:45.400 INFO   [unit-1] tofu: any changes that are required for your infrastructure. All OpenTofu commands\n14:27:45.400 INFO   [unit-1] tofu: should now work.\n14:27:45.400 INFO   [unit-1] tofu: If you ever set or change modules or backend configuration for OpenTofu,\n14:27:45.400 INFO   [unit-1] tofu: rerun this command to reinitialize your working directory. If you forget, other\n14:27:45.400 INFO   [unit-1] tofu: commands will detect it and remind you to do so if necessary.\n14:27:45.422 STDOUT [unit-2] tofu: No changes. Your infrastructure matches the configuration.\n14:27:45.423 STDOUT [unit-2] tofu: OpenTofu has compared your real infrastructure against your configuration and\n14:27:45.423 STDOUT [unit-2] tofu: found no differences, so no changes are needed.\n14:27:45.423 STDOUT [unit-1] tofu: No changes. Your infrastructure matches the configuration.\n14:27:45.423 STDOUT [unit-1] tofu: OpenTofu has compared your real infrastructure against your configuration and\n14:27:45.423 STDOUT [unit-1] tofu: found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Creating a VPC Unit with Terraform AWS Modules via Terragrunt HCL (HCL)\nDESCRIPTION: This snippet represents a Terragrunt unit configuration (i.e., 'vpc/terragrunt.hcl') for provisioning a VPC using the Terraform AWS VPC module. It reuses shared settings via the 'include' block, specifies the module source and version, and configures infrastructure variables using the 'inputs' block. Dependencies include network settings (CIDR, subnets, AZs) and tags. The source version and input variables should match your requirements. On execution, Terragrunt passes these as TF_VARs to the underlying module. Limitations: Assumes the specified version of the AWS VPC module and valid AWS credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# vpc/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"tfr:///terraform-aws-modules/vpc/aws?version=5.16.0\"\n}\n\ninputs = {\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = false\n  enable_vpn_gateway = false\n\n  tags = {\n    IaC = \"true\"\n    Environment = \"dev\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Catalog for CAS Usage in HCL\nDESCRIPTION: This HCL code block defines the `catalog` configuration within a Terragrunt file (e.g., root.hcl). It specifies the source URLs (in this case, a Git repository) for the Terragrunt catalog. When the experimental 'cas' feature is enabled, Terragrunt will automatically utilize the Content Addressable Store to clone and manage these repositories, storing them in the CAS and attempting to use hard links for efficient duplication.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/14-cas.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\n\ncatalog {\n  urls = [\n    \"git@github.com:acme/modules.git\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating HCL Files with Terragrunt - Shell\nDESCRIPTION: This shell command invokes Terragrunt to recursively discover and validate all HashiCorp Configuration Language (HCL) files in the current directory. The command requires Terragrunt to be installed and accessible in the user's PATH. It validates the syntax and structure of all HCL files, with available flags to output in JSON format or show the configuration path. No input parameters are required beyond the current directory context, and the output indicates validation results or errors.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/hcl/validate.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt hcl validate\n```\n\n----------------------------------------\n\nTITLE: Saving and Applying Binary Plan Output with Terragrunt run-all in Shell\nDESCRIPTION: Demonstrates saving a binary plan output for an entire stack using `terragrunt run-all plan --terragrunt-out-dir`. The output directory mirrors the stack structure, containing `tfplan.tfplan` files. It also shows how to apply this saved plan using `terragrunt run-all apply --terragrunt-out-dir`. Requires Terragrunt, OpenTofu/Terraform, and a configured Terragrunt stack.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ terragrunt run-all plan --terragrunt-out-dir /tmp/tfplan\n$ tree /tmp/tfplan\n/tmp/tfplan\n├── app1\n│   └── tfplan.tfplan\n├── app2\n│   └── tfplan.tfplan\n├── app3\n│   └── tfplan.tfplan\n└── project-2\n    └── project-2-app1\n        └── tfplan.tfplan\n$ terragrunt run-all apply --terragrunt-out-dir /tmp/tfplan\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan after Destroy Showing Dependency Error (Bash)\nDESCRIPTION: Shows the output of running `terragrunt run-all plan` after the infrastructure stack has been destroyed. Terragrunt fails with an error because the `ec2` module depends on outputs from the `vpc` module, which are no longer present in the state file after destruction.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\n...\n16:50:22.153 STDOUT [vpc] tofu: Note: You didn't use the -out option to save this plan, so OpenTofu can't\n16:50:22.153 STDOUT [vpc] tofu: guarantee to take exactly these actions if you run \"tofu apply\" now.\n16:50:22.854 ERROR  [ec2] Module ./ec2 has finished with an error\n16:50:22.855 ERROR  error occurred:\n\n* ./vpc/terragrunt.hcl is a dependency of ./ec2/terragrunt.hcl but detected no outputs. Either the target module has not been applied yet, or the module has no outputs. If this is expected, set the skip_outputs flag to true on the dependency block.\n\n16:50:22.855 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt CLI Locally with Go - Bash\nDESCRIPTION: This Bash snippet demonstrates how to execute Terragrunt locally by invoking the main.go entrypoint using the Go toolchain. The command will run Terragrunt's plan operation directly without requiring a precompiled binary. Prerequisites include Go installed and access to the Terragrunt source code. The key parameter 'plan' specifies the operation and can be replaced with any Terragrunt command. Input: none or CLI args; Output: standard Terragrunt output to console.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go plan\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Outputs for Plan Only in Terragrunt (HCL)\nDESCRIPTION: This HCL configuration (`bar/terragrunt.hcl`) defines a Terragrunt module sourcing from `../shared`. It sets up a dependency on the `foo` module, provides `mock_outputs` for the `content` value, and explicitly restricts the use of these mocks to the `plan` command via `mock_outputs_allowed_terraform_commands`. The `inputs` block demonstrates dynamically referencing the dependency output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_21\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\nterraform {\n  source = \"../shared\"\n}\n\ndependency \"foo\" {\n  config_path = \"../foo\"\n  mock_outputs = {\n    content = \"Mocked content from foo\"\n  }\n\n  mock_outputs_allowed_terraform_commands = [\"plan\"]\n}\n\ninputs = {\n  content = \"Foo content: ${dependency.foo.outputs.content}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Terragrunt Unit Dependencies (HCL)\nDESCRIPTION: Provides an HCL example for `backend-app/terragrunt.hcl` demonstrating how to declare multiple dependencies (`mysql` and `redis`). It accesses the `domain` output from each dependency (`dependency.mysql.outputs.domain`, `dependency.redis.outputs.domain`) and passes them as `mysql_url` and `redis_url` inputs to the `backend-app` unit. Terragrunt ensures `mysql` and `redis` are applied before `backend-app` during `run-all apply`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ndependency \"redis\" {\n  config_path = \"../redis\"\n}\n\ninputs = {\n  mysql_url = dependency.mysql.outputs.domain\n  redis_url = dependency.redis.outputs.domain\n}\n```\n\n----------------------------------------\n\nTITLE: Caching shell command invocations using run_cmd in locals and inputs for HCL\nDESCRIPTION: Demonstrates repeated usage of run_cmd to assign generated or echoed values to locals and inputs, showing Terragrunt's caching behavior: commands with identical args and context are cached, reducing duplicate execution. Requires local commands (e.g., echo) available in environment. Outputs are various assigned values, possibly with unique values if dynamic content is generated.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_21\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  uuid = run_cmd(\"echo\", \"uuid1\",  uuid())\n  uuid2 = run_cmd(\"echo\", \"uuid2\", uuid())\n  uuid3 = run_cmd(\"echo\", \"uuid3\", uuid())\n  potato = run_cmd(\"echo\", \"potato\")\n  potato2 = run_cmd(\"echo\", \"potato\")\n  carrot = run_cmd(\"echo\", \"carrot\")\n}\ninputs = {\n  potato3 = run_cmd(\"echo\", \"potato\")\n  uuid3 = run_cmd(\"echo\", \"uuid3\", uuid())\n  uuid4 = run_cmd(\"echo\", \"uuid4\", uuid())\n  carrot2 = run_cmd(\"echo\", \"carrot\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Empty Terragrunt Configuration File (Bash)\nDESCRIPTION: Creates an empty 'terragrunt.hcl' file in the 'foo' directory, enabling Terragrunt to recognize and manage that directory as a unit. This command requires standard Unix utilities and is typically run before using Terragrunt commands. There are no inputs or outputs other than the file created.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch foo/terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role Assumption in Terragrunt (HCL)\nDESCRIPTION: This HCL snippet shows how to configure Terragrunt to assume a specific AWS IAM role before executing Terraform/OpenTofu commands using the `iam_role` attribute. The value should be the ARN of the IAM role to assume.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\niam_role = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt with asdf Tool Manager\nDESCRIPTION: These commands first add the Terragrunt plugin for asdf and then install a specific version of Terragrunt using the asdf tool manager. Replace `<version>` with the desired Terragrunt version. Asdf must be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add terragrunt && asdf install terragrunt <version>\n```\n\n----------------------------------------\n\nTITLE: Capturing Concurrent Terragrunt Run-All Logs in Bash\nDESCRIPTION: Shows how to execute `terragrunt run-all apply` for multiple modules concurrently and redirect the combined output to a log file named `logs`. The flags `--terragrunt-no-color` and `--terragrunt-non-interactive` are used to ensure clean, script-friendly output. This sets the stage for demonstrating log filtering in subsequent snippets.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all apply --terragrunt-no-color --terragrunt-non-interactive > logs\n16:01:51.164 INFO   The stack at . will be processed in the following order for command apply:\nGroup 1\n- Module ./unit1\n- Module ./unit2\n\n```\n\n----------------------------------------\n\nTITLE: Generated backend.tf Example for S3 Remote State by Terragrunt (HCL)\nDESCRIPTION: This code shows a generated 'backend.tf' which configures Terraform/OpenTofu state storage on S3, created automatically by Terragrunt. The file starts with a signature comment for provenance and sets S3 bucket details, DynamoDB table, region, and encryption. Produced automatically during orchestration; not intended for hand-editing. Dependencies: AWS credentials and the appropriate backend configuration in Terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    dynamodb_table = \"my-lock-table\"\n    encrypt        = true\n    key            = \"tofu.tfstate\"\n    region         = \"us-east-1\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Limiting Terragrunt Execution Parallelism (Shell)\nDESCRIPTION: This shell command executes `terragrunt run-all apply` but limits the number of concurrent Terragrunt/Terraform processes. The `--terragrunt-parallelism 4` flag ensures that Terragrunt will run operations on a maximum of 4 modules simultaneously at any point during the execution across the dependency graph. This helps prevent issues like API rate limiting on cloud providers.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nterragrunt run-all apply --terragrunt-parallelism 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Catalog Defaults (HCL)\nDESCRIPTION: Example HCL configuration block typically placed in a root `terragrunt.hcl` or `root.hcl` file to customize the `terragrunt catalog` command. It defines a `default_template` parameter specifying a custom Boilerplate template URL for scaffolding, and a `urls` list containing repository locations (relative paths, absolute paths, remote URLs) to scan for modules when no specific repository is provided via the command line.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/05-catalog.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncatalog {\n  default_template = \"git@github.com/acme/example.git//path/to/template\"\n  urls = [\n    \"relative/path/to/repo\", # will be converted to the absolute path, relative to the path of the configuration file.\n    \"/absolute/path/to/repo\",\n    \"github.com/gruntwork-io/terraform-aws-lambda\", # url to remote repository\n    \"http://github.com/gruntwork-io/terraform-aws-lambda\", # same as above\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Backend for Terraform in Child Module (HCL)\nDESCRIPTION: Defines the use of the S3 backend for Terraform in a child module, relying on external configuration (e.g., a parent Terragrunt file) for settings. Assumes the S3 backend is defined and injected appropriately through Terragrunt inheritance or templates.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_26\n\nLANGUAGE: hcl\nCODE:\n```\n# child/main.tf\nterraform {\n  backend \"s3\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Terragrunt Plan Command with Updated Flag - Bash\nDESCRIPTION: Illustrates the updated method of running Terragrunt plan with the newly standardized --non-interactive flag. No additional dependencies are required beyond Terragrunt v0.50.0+ or a version compliant with the CLI redesign. The command runs in non-interactive mode, and the change simplifies flag naming.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Unit Dependencies in Terragrunt HCL\nDESCRIPTION: Shows how to explicitly declare dependencies between different Terragrunt configuration units (modules) using the `dependencies` block within `backend-app/terragrunt.hcl`. The `paths` attribute lists the relative paths to the directories containing the `terragrunt.hcl` files of the required dependencies (`vpc`, `mysql`, `redis`). This information allows Terragrunt's `run --all` commands to determine the correct execution order based on the dependency graph (DAG).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# backend-app/terragrunt.hcl\ndependencies {\n  paths = [\"../vpc\", \"../mysql\", \"../redis\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform and Terragrunt Configuration - HCL\nDESCRIPTION: This set of HCL configuration files outlines the setup for an application deployed via Terragrunt and Terraform/OpenTofu. It defines module input variables, output values, and a Terragrunt configuration that wires dependencies and passes values between modules. Dependencies: Terragrunt, OpenTofu/Terraform, and the respective infrastructure modules; variables `image_id` and `num_tasks` must be defined. Expected inputs are cluster outputs and local values; outputs are module-sourced values. Errors in dependency value selection can lead to misconfigured infrastructure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/01-debugging.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# app/vars.tf\nvariable \"image_id\" {\n  type = string\n}\nvariable \"num_tasks\" {\n  type = number\n}\n# app/outputs.tf\noutput \"task_ids\" {\n  value = module.app_infra_module.task_ids\n}\n# app/terragrunt.hcl\nlocals {\n  image_id = \"acme/myapp:1\"\n}\ndependency \"cluster\" {\n  config_path = \"../ecs-cluster\"\n}\ninputs = {\n  image_id = locals.image_id\n  num_tasks = dependency.cluster.outputs.cluster_min_size\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Terragrunt Stack Plan Outputs as JSON\nDESCRIPTION: Shows how to save Terraform plan outputs in JSON format for each unit in a stack using `terragrunt run --all plan` along with the `--json-out-dir` flag (or `TG_JSON_OUT_DIR` environment variable). The command `terragrunt run --all --json-out-dir /tmp/json plan` will create JSON plan files, named `tfplan.json`, within a mirrored directory structure under `/tmp/json`. Note that these JSON plan files are for inspection and cannot be directly used with the `terragrunt apply` command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all --json-out-dir /tmp/json plan\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Stack Units Using HCL\nDESCRIPTION: This HCL snippet demonstrates how to define a stack file 'terragrunt.stack.hcl' using multiple unit blocks, each referencing a source git repository and specifying a path. The 'no_dot_terragrunt_stack' attribute disables automatic directory generation for units, supporting incremental migration and compatibility with legacy state paths. Dependencies include Terragrunt with stack support and proper access to referenced git repositories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n## non-prod/us-east-1/stateful-ec2-asg-service/terragrunt.stack.hcl\n\nunit \"service\" {\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/ec2-asg-stateful-service\"\n  path   = \"service\"\n\n  no_dot_terragrunt_stack = true\n\n  ## Add any additional configuration for the service unit here\n}\n\nunit \"db\" {\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/mysql\"\n  path   = \"db\"\n\n  no_dot_terragrunt_stack = true\n\n  ## Add any additional configuration for the db unit here\n}\n\nunit \"asg-sg\" {\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/security-group\"\n  path   = \"sgs/asg\"\n\n  no_dot_terragrunt_stack = true\n\n  ## Add any additional configuration for the asg-sg unit here\n}\n```\n\n----------------------------------------\n\nTITLE: Attributes vs. Blocks Syntax in terragrunt.hcl (HCL2)\nDESCRIPTION: This comprehensive example demonstrates the correct use of attributes (with equals sign) and blocks (without equals sign) in HCL2 for terragrunt.hcl files. Various parts of the configuration (terraform, remote_state, include, dependencies) are structured according to HCL2 rules, while nested attributes (config, s3_bucket_tags, etc.) use explicit '=' assignment. The snippet includes comments explaining expected syntax at every level.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\\n# terraform is a block, so make sure NOT to include an equals sign\\nterraform {\\n  source = \\\"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\\\"\\n  # extra_arguments is a block, so make sure NOT to include an equals sign\\n  extra_arguments \\\"custom_vars\\\" {\\n    commands  = [\\\"apply\\\", \\\"plan\\\"]\\n    arguments = [\\\"-var\\\", \\\"foo=42\\\"]\\n  }\\n}\\n# remote_state is a block, so make sure NOT to include an equals sign\\nremote_state {\\n  backend = \\\"s3\\\"\\n  # config is an attribute, so an equals sign is REQUIRED\\n  config = {\\n    bucket = \\\"foo\\\"\\n    # s3_bucket_tags is an attribute, so an equals sign is REQUIRED\\n    s3_bucket_tags = {\\n      owner = \\\"terragrunt integration test\\\"\\n      name = \\\"Terraform state storage\\\"\\n    }\\n    # dynamodb_table_tags is an attribute, so an equals sign is REQUIRED\\n    dynamodb_table_tags = {\\n      owner = \\\"terragrunt integration test\\\"\\n      name = \\\"Terraform lock table\\\"\\n    }\\n    # accesslogging_bucket_tags is an attribute, so an equals sign is REQUIRED\\n    accesslogging_bucket_tags = {\\n      owner = \\\"terragrunt integration test\\\"\\n      name  = \\\"Terraform access log storage\\\"\\n    }\\n  }\\n}\\n# include is a block, so make sure NOT to include an equals sign\\ninclude {\\n  path = find_in_parent_folders(\\\"root.hcl\\\")\\n}\\n# dependencies is a block, so make sure NOT to include an equals sign\\ndependencies {\\n  paths = [\\\"../vpc\\\", \\\"../mysql\\\", \\\"../redis\\\"]\\n}\\n# Inputs is an attribute, so an equals sign is REQUIRED\\ninputs = {\\n  instance_type  = \\\"t2.micro\\\"\\n  instance_count = 10\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt with a Private Git Module Source - HCL\nDESCRIPTION: This HCL configuration snippet sets the Terraform source as a private Git repository, using an SSH URL for secure authentication. This is required for infrastructure stacks that utilize private modules not available in public repos. The dependency is that users have SSH access configured for the specified git host (e.g., GitHub). The ref query parameter pins a specific module version. Inputs are module source URLs; the output is the referenced module fetched into a temporary workspace.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\\n  source = \"git@github.com:foo/modules.git//path/to/module?ref=v0.0.1\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Terragrunt Configuration for QA Environment in HCL\nDESCRIPTION: This snippet shows an update to the `terragrunt.hcl` file for the 'qa' environment's 'app' module. The key change is updating the Terraform module source reference from `v0.0.1` to `v0.0.2` and modifying the input variables (`instance_count`, `instance_type`). This demonstrates an atomic update as part of a deployment process.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_33\n\nLANGUAGE: hcl\nCODE:\n```\n# infrastructure-live/qa/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"github.com:foo/infrastructure-modules.git//app?ref=v0.0.2\" # <--\n}\n\ninputs = {\n  instance_count = 1\n  instance_type  = \"t3.micro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Minimal Permissions for Specific S3 Buckets and DynamoDB Tables - AWS IAM Policy - JSON\nDESCRIPTION: This JSON snippet provides a least-privilege AWS IAM policy only permitting a carefully selected set of actions on a specific S3 bucket and DynamoDB table required by Terragrunt for remote state operations. The allowed actions cover creating and managing the S3 bucket, uploading or retrieving state files, and creating or updating items in DynamoDB. Bucket and table ARNs must be replaced with those relevant to the user's AWS account and resources. This policy is more secure but may need adjustment if Terragrunt requires additional permissions during operations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowCreateAndListS3ActionsOnSpecifiedTerragruntBucket\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetBucketVersioning\",\n                \"s3:GetBucketAcl\",\n                \"s3:GetBucketLogging\",\n                \"s3:CreateBucket\",\n                \"s3:PutBucketPublicAccessBlock\",\n                \"s3:PutBucketTagging\",\n                \"s3:PutBucketPolicy\",\n                \"s3:PutBucketVersioning\",\n                \"s3:PutEncryptionConfiguration\",\n                \"s3:PutBucketAcl\",\n                \"s3:PutBucketLogging\",\n                \"s3:GetEncryptionConfiguration\",\n                \"s3:GetBucketPolicy\",\n                \"s3:GetBucketPublicAccessBlock\",\n                \"s3:PutLifecycleConfiguration\",\n                \"s3:PutBucketOwnershipControls\"\n            ],\n            \"Resource\": \"arn:aws:s3:::BUCKET_NAME\"\n        },\n        {\n            \"Sid\": \"AllowGetAndPutS3ActionsOnSpecifiedTerragruntBucketPath\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::BUCKET_NAME/some/path/here\"\n        },\n        {\n            \"Sid\": \"AllowCreateAndUpdateDynamoDBActionsOnSpecifiedTerragruntTable\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:PutItem\",\n                \"dynamodb:GetItem\",\n                \"dynamodb:DescribeTable\",\n                \"dynamodb:DeleteItem\",\n                \"dynamodb:CreateTable\"\n            ],\n            \"Resource\": \"arn:aws:dynamodb:*:*:table/TABLE_NAME\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan Across All Modules\nDESCRIPTION: This Bash command executes `terragrunt run-all plan`. It instructs Terragrunt to run the `plan` command against all Terragrunt modules found in the subdirectories, subject to any `exclude` block configurations defined in those modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependency in Terragrunt HCL - HCL\nDESCRIPTION: This HCL code snippet declares the dependency between modules in Terragrunt by referencing another configuration using the dependency block. It sets up a dynamic input that interpolates a value from the dependency\\'s outputs. This enables the current module to consume outputs from another module after apply, requiring the other module to define and generate outputs for successful runs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\\nterraform {\\n source = \"../shared\"\\n}\\n\\ndependency \"foo\" {\\n config_path = \"../foo\"\\n}\\n\\ninputs = {\\n content = \"Foo content: ${dependency.foo.outputs.content}\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating TFLint Validation using Terragrunt Before Hook in HCL\nDESCRIPTION: Configures a `before_hook` in `terragrunt.hcl` to execute the built-in `tflint` command before `apply` or `plan`. This integrates static analysis of the Terraform code used by Terragrunt. It requires a `.tflint.hcl` configuration file to exist in the current directory or a parent directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  before_hook \"before_hook\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"tflint\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Strict Linting of Terragrunt HCL Inputs with Strict Flag in Shell\nDESCRIPTION: This example demonstrates strict linting by combining the --inputs and --strict flags with the Terragrunt HCL lint command. The --strict flag ensures errors are thrown for any inputs set that are not defined by the module, catching misconfigurations early. Dependency is the Terragrunt CLI; inputs and outputs are managed as in previous examples, with stricter enforcement of input definitions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/hcl/lint.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt hcl lint --inputs --strict\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt GCS Remote State Backend Options (HCL)\nDESCRIPTION: This HCL snippet illustrates configuration options within the `remote_state` block for the `gcs` backend in Terragrunt. It shows how to optionally skip bucket versioning (`skip_bucket_versioning`), manage uniform bucket-level access (`enable_bucket_policy_only`), and specify a customer-managed encryption key (`encryption_key`). The `skip_bucket_versioning` and `enable_bucket_policy_only` options are processed by Terragrunt itself.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nremote_state {\n # ...\n\n skip_bucket_versioning = true # use only if the object store does not support versioning\n\n enable_bucket_policy_only = false # use only if uniform bucket-level access is needed (https://cloud.google.com/storage/docs/uniform-bucket-level-access)\n\n encryption_key = \"GOOGLE_ENCRYPTION_KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan with Debug Logging in Bash\nDESCRIPTION: Executes `terragrunt plan` with the `--terragrunt-log-level` flag set to `debug`. This example shows detailed Terragrunt operational logs (DEBUG), logs from the underlying OpenTofu execution captured and logged by Terragrunt (STDOUT), and informational messages related to auto-initialization (INFO). Dependencies include Terragrunt and OpenTofu/Terraform.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --terragrunt-log-level debug plan\n14:20:38.431 DEBUG  Terragrunt Version: 0.0.0\n14:20:38.431 DEBUG  Did not find any locals block: skipping evaluation.\n14:20:38.431 DEBUG  Running command: tofu --version\n14:20:38.431 DEBUG  Engine is not enabled, running command directly in .\n14:20:38.451 DEBUG  tofu version: 1.8.5\n14:20:38.451 DEBUG  Reading Terragrunt config file at ./terragrunt.hcl\n14:20:38.451 DEBUG  Did not find any locals block: skipping evaluation.\n14:20:38.451 DEBUG  Did not find any locals block: skipping evaluation.\n14:20:38.452 DEBUG  Running command: tofu init\n14:20:38.452 DEBUG  Engine is not enabled, running command directly in .\n14:20:38.469 INFO   tofu: Initializing the backend...\n14:20:38.470 INFO   tofu: Initializing provider plugins...\n14:20:38.470 INFO   tofu: OpenTofu has been successfully initialized!\n14:20:38.470 INFO   tofu:\n14:20:38.470 INFO   tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n14:20:38.470 INFO   tofu: any changes that are required for your infrastructure. All OpenTofu commands\n14:20:38.470 INFO   tofu: should now work.\n14:20:38.470 INFO   tofu: If you ever set or change modules or backend configuration for OpenTofu,\n14:20:38.470 INFO   tofu: rerun this command to reinitialize your working directory. If you forget, other\n14:20:38.470 INFO   tofu: commands will detect it and remind you to do so if necessary.\n14:20:38.470 DEBUG  Running command: tofu plan\n14:20:38.470 DEBUG  Engine is not enabled, running command directly in .\n14:20:38.490 STDOUT tofu: No changes. Your infrastructure matches the configuration.\n14:20:38.490 STDOUT tofu: OpenTofu has compared your real infrastructure against your configuration and\n14:20:38.490 STDOUT tofu: found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Accessing Terragrunt Hook Context Variables in a Bash Script\nDESCRIPTION: This Bash script (`hook.sh`), intended to be called by a Terragrunt hook, demonstrates accessing context information provided by Terragrunt via environment variables: `TG_CTX_TF_PATH` (path to Terraform/OpenTofu binary), `TG_CTX_COMMAND` (the Terragrunt command being run), and `TG_CTX_HOOK_NAME` (the name of the hook block). It echoes these variables.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\necho \"TF_PATH=${TG_CTX_TF_PATH} COMMAND=${TG_CTX_COMMAND} HOOK_NAME=${TG_CTX_HOOK_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Combined Errors Block with Retry and Ignore - Terragrunt HCL\nDESCRIPTION: Combines 'retry' and 'ignore' blocks within the 'errors' block to show prioritized error handling: known 'safe warning' errors are ignored, while transient network issues are retried up to three times. Inputs include error regexes, retry configuration, and ignore rules. Outputs are robust, managed responses to operational errors in Terragrunt runs. Requires Terragrunt support for advanced error handling blocks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_60\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nerrors {\n    # Retry block for transient errors\n    retry \"transient_errors\" {\n        retryable_errors = [\".*Error: transient network issue.*\"]\n        max_attempts = 3\n        sleep_interval_sec = 5\n    }\n\n    # Ignore block for known safe-to-ignore errors\n    ignore \"known_safe_errors\" {\n        ignorable_errors = [\n            \".*Error: safe warning.*\",\n            \"!.*Error: do not ignore.*\"\n        ]\n        message = \"Ignoring safe warning errors\"\n        signals = {\n            alert_team = false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Variables in a Terraform Module (HCL)\nDESCRIPTION: Example Terraform code (`variables.tf`) defining input variables within a reusable module (`app`). This allows environment-specific configuration, such as instance count and type, promoting module reusability across different environments.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# variables.tf\nvariable \"instance_count\" {\n  description = \"How many servers to run\"\n}\nvariable \"instance_type\" {\n  description = \"What kind of servers to run (e.g. t3.large)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Remote State Initialization with Terragrunt in HCL\nDESCRIPTION: This snippet demonstrates how to use Terragrunt's remote_state block to conditionally disable automatic initialization of remote state resources. It uses the tobool and get_env functions to set the disable_init parameter based on the TG_DISABLE_INIT environment variable. If disable_init is true, Terragrunt will skip creating backend resources (like S3 buckets or DynamoDB tables) and run terraform init with the backend disabled. This is useful for CI workflows or environments where automatic state management should be avoided.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\\nremote_state {\\n  # ...\\n\\n  disable_init = tobool(get_env(\\\"TG_DISABLE_INIT\\\", \\\"false\\\"))\\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Relative Paths in Terragrunt Configuration (HCL)\nDESCRIPTION: This HCL configuration snippet illustrates how to structure a terragrunt.hcl file to set up the Terraform source and pass additional CLI arguments using the extra_arguments block, with relative file paths derived from get_terragrunt_dir(). This approach provides path portability across teammates' machines, ensuring referenced files are always located correctly relative to the Terragrunt configuration, not the .terragrunt-cache execution directory. It also shows an example source using a git module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\\nterraform {\\n  source = \"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\"\\n  extra_arguments \"custom_vars\" {\\n    commands = [\\n      \"apply\",\\n      \"plan\",\\n      \"import\",\\n      \"push\",\\n      \"refresh\"\\n    ]\\n    # With the get_terragrunt_dir() function, you can use relative paths!\\n    arguments = [\\n      \"-var-file=${get_terragrunt_dir()}/../common.tfvars\",\\n      \"-var-file=example.tfvars\"\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Outputs for Unapplied Terragrunt Dependencies (HCL)\nDESCRIPTION: This HCL snippet demonstrates configuring a `dependency` block in a `terragrunt.hcl` file (e.g., for a 'mysql' module). It uses the `mock_outputs` attribute to provide default values (e.g., `vpc_id = \"mock-vpc-id\"`) that Terragrunt will use if the dependent module ('vpc' located at `../vpc`) has not been applied yet. This allows commands like `plan` or `validate` to run successfully even before the dependency is created, using the mocked value in the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id = \"mock-vpc-id\"\n  }\n}\n\ninputs = {\n  vpc_id = dependency.vpc.outputs.vpc_id\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Strict Controls via Environment Variables - Terragrunt CLI - Bash\nDESCRIPTION: Demonstrates how to enable more than one strict control using the environment variable 'TG_STRICT_CONTROL' with a comma-separated list. Bash is used with '-c' to chain commands using one environment variable setting. Both 'plan-all' and 'apply-all' deprecated commands are enforced, and multiple error messages are shown as output. Input: Environment variable; Output: Errors and exit codes for each deprecated usage.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ TG_STRICT_CONTROL='plan-all,apply-all' bash -c 'terragrunt plan-all; terragrunt apply-all'\n15:26:46.521 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n15:26:46.521 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n15:26:46.564 ERROR  The `apply-all` command is no longer supported. Use `terragrunt run-all apply` instead.\n15:26:46.564 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n```\n\n----------------------------------------\n\nTITLE: Promotion Workflow for Terragrunt Modules in CI/CD (Bash)\nDESCRIPTION: This set of Bash commands illustrates a promotion workflow for rolling out configuration changes through different environments (qa, stage, prod) using Terragrunt's run-all plan/apply with --queue-include-units-reading and --working-dir. It ensures staged application and validation of changes per environment, allowing manual approvals or extra testing between promotions. Terragrunt CLI is required; adjust working directories as per your project's structure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Roll out the change to the qa environment first\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl --working-dir qa\nterragrunt run-all apply --queue-include-units-reading _env/app.hcl --working-dir qa\n# If the apply succeeds to qa, move on to the stage environment\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl --working-dir stage\nterragrunt run-all apply --queue-include-units-reading _env/app.hcl --working-dir stage\n# And finally, prod.\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl --working-dir prod\nterragrunt run-all apply --queue-include-units-reading _env/app.hcl --working-dir prod\n```\n\n----------------------------------------\n\nTITLE: Sample OpenTofu Resource Definition for Local File - HCL\nDESCRIPTION: This snippet shows a minimal OpenTofu/Terraform configuration defining a local_file resource, which writes 'Hello, World!' to a file named hi.txt in the current module's directory. This configuration requires the local provider and expects to be run using OpenTofu or Terraform. No variables are used in this configuration, and it results in a single file resource being created.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/main.tf\nresource \"local_file\" \"file\" {\n  content  = \"Hello, World!\"\n  filename = \"${path.module}/hi.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Units for a Stack - Terragrunt HCL\nDESCRIPTION: This HCL snippet demonstrates how to define multiple units within a Terragrunt stack using the terragrunt.stack.hcl configuration file. Each unit block specifies the module source and the destination path for the generated configuration. No external dependencies beyond Terragrunt are required. The inputs are descriptive blocks for each unit; outputs are generated subdirectories, each containing a terragrunt.hcl file per unit. Ensure paths are relative, and each unit has a unique path and source.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/generate.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.stack.hcl\n\nunit \"mother\" {\n\tsource = \"units/chicken\"\n\tpath   = \"mother\"\n}\n\nunit \"father\" {\n\tsource = \"./units/chicken\"\n\tpath   = \"father\"\n}\n\nunit \"chick_1\" {\n\tsource = \"./units/chick\"\n\tpath   = \"chicks/chick-1\"\n}\n\nunit \"chick_2\" {\n\tsource = \"units/chick\"\n\tpath   = \"chicks/chick-2\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Root Terragrunt Configuration in a Module using HCL\nDESCRIPTION: This HCL snippet, intended for a module-specific `terragrunt.hcl` file (e.g., `mysql/terragrunt.hcl`), shows how to use an `include` block. It instructs Terragrunt to inherit all configurations, including the `generate` block defined in the root `root.hcl` file. The `find_in_parent_folders(\"root.hcl\")` function dynamically locates the root configuration file, making the module configuration portable and DRY.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# mysql/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Terragrunt Dependency Outputs in HCL\nDESCRIPTION: Demonstrates how to configure mock outputs for a Terragrunt dependency (`vpc`) within the dependent module's configuration (`ec2/terragrunt.hcl`). The `mock_outputs` block provides placeholder values (e.g., `private_subnets = [\"mock-subnet\"]`) that are used when the actual outputs are unavailable. `mock_outputs_allowed_terraform_commands` restricts mocking to specific commands like `plan`, allowing plans to succeed even after dependencies are destroyed or before they are applied.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\n# ...\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    private_subnets = [\"mock-subnet\"]\n  }\n\n  mock_outputs_allowed_terraform_commands = [\"plan\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Apply with Multiple Extra Arguments (Bash)\nDESCRIPTION: This Bash snippet illustrates the resulting OpenTofu/Terraform command when `terragrunt apply` is run with the configuration containing multiple `extra_arguments` blocks. Terragrunt combines the arguments from both matching blocks (`retry_lock` and `custom_vars`), prepending them to the `tofu apply` command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt apply\n# tofu apply -lock-timeout=20m -var foo=bar -var region=us-west-1\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Remote State Backend in Root Terragrunt Configuration (HCL)\nDESCRIPTION: Configures an S3 bucket as a remote backend in a root Terragrunt configuration, setting all required parameters: bucket name, key (with dynamic path), region, encryption, and lock table. Expects AWS credentials with access to the relevant state bucket and DynamoDB lock table. Used as a reusable parent for child configs via 'include'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_24\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\n\n# If you have the following folder structure, and the following contents for ./child/terragrunt.hcl, this will include\n# and merge the configurations in the root.hcl file.\n#\n# .\n# ├── root.hcl\n# └── child\n#     ├── main.tf\n#     └── terragrunt.hcl\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket         = \"my-tofu-state\"\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Strict Control via Environment Variable - Terragrunt CLI - Bash\nDESCRIPTION: Shows setting the 'TG_STRICT_CONTROL' environment variable to a specific strict control ('plan-all'), making only the matching deprecated command trigger errors for all subsequent Terragrunt invocations in that environment. Useful for incremental rollout. Input: Command execution with proper environment variable; Output: Command fails with error if deprecated usage detected.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ TG_STRICT_CONTROL='plan-all' terragrunt plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Including Parent Backend Configuration in Terragrunt Unit (HCL)\nDESCRIPTION: Shows how an individual unit Terragrunt configuration can include backend settings from a parent root.hcl using the include block and find_in_parent_folders(). This pattern allows child directories to inherit remote state configuration, ensuring consistency across modules. Requires the root.hcl to exist up the directory tree and Terragrunt to be used for parsing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/migrate.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# old-unit-name/terragrunt.hcl\n\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Outputs of All Terragrunt Units (Bash)\nDESCRIPTION: Illustrates the command sequence to navigate to the root directory and display the outputs of all Terragrunt units found recursively within the stack. It executes `terragrunt output` for each unit.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd root\nterragrunt run-all output\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Strict HCL Lint - Bash\nDESCRIPTION: This Bash code snippet demonstrates how to execute Terragrunt's HCL linter with both the '--inputs' and '--strict' flags enabled. Users must have Terragrunt installed and accessible in their PATH. The command validates configuration files against module input schemas, ensuring that only explicitly defined inputs are accepted; it will report and fail if unexpected properties are present.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-lint-strict.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt hcl lint --inputs --strict\n```\n\n----------------------------------------\n\nTITLE: Override Terraform Source with Exposed Include - HCL\nDESCRIPTION: Shows how to override a Terraform module source using a value from an exposed include, thereby avoiding duplication of the base URL. The 'include' block is marked with 'expose = true', enabling reference to 'locals' in the parent configuration. Requires Terragrunt 0.25.0+ for 'expose'. Proper relative path references must be set.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_7\n\nLANGUAGE: HCL\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"env\" {\n  path   = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n  expose = true\n}\n\n# Construct the terraform.source attribute using the source_base_url and custom version v0.2.0\nterraform {\n  source = \"${include.env.locals.source_base_url}?ref=v0.2.0\"\n}\n\ninputs = {\n  env = \"qa\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling in Terragrunt HCL with Retry and Ignore Blocks\nDESCRIPTION: This HCL snippet configures error handling using Terragrunt's 'errors' block. It defines a 'retry' for transient network issues (using regex), specifying max attempts and sleep interval, and an 'ignore' for errors deemed safe to ignore, including custom messages and generated signals. Inputs include error regex patterns and optional message/signals; outputs are automatic retries and a generated 'error-signals.json' file. Dependencies are Terragrunt and proper regex configuration. Limitations: retry and ignore actions are defined at runtime, patterns must match errors emitted by Terragrunt/Terraform.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nerrors {\n    # Retry block for transient errors\n    retry \"transient_errors\" {\n        retryable_errors = [\".*Error: transient network issue.*\"]\n        max_attempts = 3\n        sleep_interval_sec = 5\n    }\n\n    # Ignore block for known safe-to-ignore errors\n    ignore \"known_safe_errors\" {\n        ignorable_errors = [\n            \".*Error: safe warning.*\",\n            \"!.*Error: do not ignore.*\"\n        ]\n        message = \"Ignoring safe warning errors\"\n        signals = {\n            alert_team = false\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Excluding Actions Based on Day of Week in Terragrunt HCL\nDESCRIPTION: This HCL snippet uses local variables to determine the day of the week and conditionally prevents certain Terragrunt actions ('apply', 'destroy') from being run via the 'exclude' block. Dependencies: Terragrunt and HCL date/time functions. Key input: the current day of week; outputs: exclusion of deploy actions on specified days. Limitations: relies on correct evaluation of timestamp() and formatdate().\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  day_of_week = formatdate(\"EEE\", timestamp())\n  ban_deploy  = contains([\"Fri\", \"Sat\", \"Sun\"], local.day_of_week)\n}\n\nexclude {\n    if = local.ban_deploy\n    actions = [\"apply\", \"destroy\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Apply Command Across Stack Units with Terragrunt CLI\nDESCRIPTION: Applies configuration changes to all units defined in the 'terragrunt.stack.hcl' file. Assumes Terragrunt is available and stacks are configured. This command iterates through each unit to apply updates according to the latest plan, ensuring every unit is current with source configuration. Input: None. Output: Apply results per unit. Stack auto-generation precedes command execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/run.mdx#_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\nterragrunt stack run apply\n```\n\n----------------------------------------\n\nTITLE: Including Root Configuration using `find_in_parent_folders` (HCL)\nDESCRIPTION: Shows the standard `include` block used within child `terragrunt.hcl` files (e.g., `prod/mysql/terragrunt.hcl`). It uses `find_in_parent_folders` to locate and include a common configuration file (`root.hcl`) from a parent directory, establishing the context for functions like `path_relative_to_include` used in the root file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role in Terragrunt HCL Configuration (Terragrunt, HCL)\nDESCRIPTION: This HCL code snippet includes the iam_role property in a Terragrunt configuration file, instructing Terragrunt to assume the specified IAM role for any command execution in that configuration context. Requires valid Terragrunt syntax and access to the specified IAM role. This method is useful for storing IAM role information as code in a version-controlled configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\niam_role = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt S3 Remote State Backend Options (HCL)\nDESCRIPTION: This HCL code block shows configuration options within the `remote_state.config` block specifically for the `s3` backend in Terragrunt. It demonstrates how to skip features like bucket versioning, server-side encryption, root access, and enforced TLS, configure access logging (`accesslogging_bucket_name`, `accesslogging_target_prefix`), manage credentials (`shared_credentials_file`, `skip_credentials_validation`), and adjust API behavior (`skip_metadata_api_check`, `force_path_style`). These settings are often used for S3-compatible stores or specific security needs and are processed by Terragrunt, not passed directly to Terraform/OpenTofu.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nremote_state {\n  # ...\n\n  config = {\n    skip_bucket_versioning         = true # use only if the object store does not support versioning\n    skip_bucket_ssencryption       = true # use only if non-encrypted OpenTofu/Terraform State is required and/or the object store does not support server-side encryption\n    skip_bucket_root_access        = true # use only if the AWS account root user should not have access to the remote state bucket for some reason\n    skip_bucket_enforced_tls       = true # use only if you need to access the S3 bucket without TLS being enforced\n    skip_credentials_validation    = true # skip validation of AWS credentials, useful when is used S3 compatible object store different from AWS\n    enable_lock_table_ssencryption = true # use only if non-encrypted DynamoDB Lock Table for the OpenTofu/Terraform State is required and/or the NoSQL database service does not support server-side encryption\n    accesslogging_bucket_name      = <string> # use only if you need server access logging to be enabled for your terraform state S3 bucket. Provide a <string> value representing the name of the target bucket to be used for logs output.\n    accesslogging_target_prefix    = <string> # use only if you want to set a specific prefix for your terraform state S3 bucket access logs when Server Access Logging is enabled. Provide a <string> value representing the TargetPrefix to be used for the logs output objects. If set to empty <string>, then TargetPrefix will be set to empty <string>. If attribute is not provided at all, then TargetPrefix will be set to default value `TFStateLogs/`.\n\n    shared_credentials_file     = \"/path/to/credentials/file\"\n    skip_metadata_api_check     = true\n    force_path_style            = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Terragrunt Binary Checksum on Windows using PowerShell\nDESCRIPTION: This PowerShell script downloads a specific version of the Terragrunt binary for Windows AMD64 and its corresponding SHA256 checksums file. It then calculates the checksum of the downloaded binary using `Get-FileHash`, extracts the expected checksum from the file, and compares them to verify integrity. The script includes basic error handling.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$os = \"windows\"\n$arch = \"amd64\"\n$version = \"v0.69.10\"\n$binaryName = \"terragrunt_${os}_${arch}.exe\"\n\ntry {\n    $ProgressPreference = 'SilentlyContinue'\n\n    # Download binary and checksum\n    $baseUrl = \"https://github.com/gruntwork-io/terragrunt/releases/download/$version\"\n    Write-Host \"Downloading Terragrunt $version...\"\n\n    Invoke-WebRequest -Uri \"$baseUrl/$binaryName\" -OutFile $binaryName -UseBasicParsing\n    Invoke-WebRequest -Uri \"$baseUrl/SHA256SUMS\" -OutFile \"SHA256SUMS\" -UseBasicParsing\n\n    $actualChecksum = (Get-FileHash -Algorithm SHA256 $binaryName).Hash.ToLower()\n    $expectedChecksum = (Get-Content \"SHA256SUMS\" | Select-String -Pattern $binaryName).Line.Split()[0].ToLower()\n\n    if ($actualChecksum -ne $expectedChecksum) {\n        Write-Error \"Checksum verification failed\"\n        exit 1\n    }\n\n    Write-Host \"Terragrunt $version has been downloaded and verified successfully\"\n}\ncatch {\n    Write-Error \"Failed to download: $_\"\n    exit 1\n}\nfinally {\n    $ProgressPreference = 'Continue'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Region Configuration in HCL\nDESCRIPTION: This HCL snippet demonstrates a simple and explicit way to define a region-specific configuration. It uses a `locals` block within a `region.hcl` file (e.g., `us-west-2/region.hcl`) to set the `region` variable directly. This approach enhances clarity and maintainability.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_35\n\nLANGUAGE: hcl\nCODE:\n```\n# us-west-2/region.hcl\nlocals {\n  region = \"us-west-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt for Prod Environment (HCL)\nDESCRIPTION: Example `terragrunt.hcl` file for the 'app' module in the 'prod' environment. Similar to the stage configuration, but references a different module version (`v0.0.1`) and provides different input values suitable for production (`instance_count`, `instance_type`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\nterraform {\n  # Deploy version v0.0.1 in prod\n  source = \"git::git@github.com:foo/modules.git//app?ref=v0.0.1\"\n}\n\ninputs = {\n  instance_count = 10\n  instance_type  = \"m8g.large\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Remote State Backend in HCL\nDESCRIPTION: This HCL snippet demonstrates how to define remote state infrastructure for Terragrunt, specifying the use of an S3 bucket and DynamoDB table for state and locking management. Dependencies include AWS infrastructure with appropriately configured permissions. Key parameters include the bucket name, region, encryption, and DynamoDB table for locking. Inputs are the Terraform backend block parameters; expected outputs are the corresponding AWS resources. Configuration is declarative, and the resources will be provisioned or updated as required by Terragrunt's idempotent bootstrap logic.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/bootstrap.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\\n\\nremote_state {\\n  backend = \\\"s3\\\"\\n  config = {\\n    bucket  = \\\"mybucket\\\"\\n    key     = \\\"path/to/my/key\\\"\\n    region  = \\\"us-east-1\\\"\\n    encrypt = true\\n\\n    dynamodb_table = \\\"tf-lock\\\"\\n\\n    accesslogging_bucket_name = \\\"mybucket-logs\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Using an External Boilerplate Template in Bash\nDESCRIPTION: Demonstrates how to explicitly provide a custom, external boilerplate template using a second argument (`TEMPLATE_URL`) to the `terragrunt scaffold` command. This example uses a template located in a different path within the same git repository.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs git@github.com:gruntwork-io/terragrunt.git//test/fixtures/scaffold/external-template\n\n# will be created: external-template.txt terragrunt.hcl , files from external template\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt with Dependencies and Inputs (HCL)\nDESCRIPTION: This `terragrunt.hcl` configuration defines a local variable `image_id`, declares a dependency on the `ecs-cluster` module located in a relative path, and maps the local `image_id` and the `cluster_min_size` output from the dependency to the Terraform input variables `image_id` and `num_tasks` respectively.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# app/terragrunt.hcl\nlocals {\n  image_id = \"acme/myapp:1\"\n}\n\ndependency \"cluster\" {\n  config_path = \"../ecs-cluster\"\n}\n\ninputs = {\n  image_id = locals.image_id\n  num_tasks = dependency.cluster.outputs.cluster_min_size\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Input Validation in Terragrunt - YAML\nDESCRIPTION: This YAML snippet defines the 'strict' configuration for Terragrunt, specifying that the system should throw an error if any configured inputs are not declared in the module's input schema. Dependencies include Terragrunt with support for HCL validation and the 'TG_HCLVALIDATE_STRICT' environment variable for optional activation. The 'type' parameter enforces a boolean value, with usage expected as part of a Terragrunt configuration file; a true value enforces strict checking, potentially failing on unexpected properties.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-lint-strict.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: strict\\ndescription: Throw an error if any inputs are set that are not defined in the module that a unit provisions.\\ntype: bool\\nenv:\\n  - TG_HCLVALIDATE_STRICT\n```\n\n----------------------------------------\n\nTITLE: Using Required and Optional Var Files in Terragrunt extra_arguments (HCL)\nDESCRIPTION: This HCL configuration demonstrates using `required_var_files` and `optional_var_files` within an `extra_arguments` block in `terragrunt.hcl`. It automatically includes specified `.tfvars` files using the `-var-file` argument for certain Terraform/OpenTofu commands. `required_var_files` causes an error if the file is missing, while `optional_var_files` skips missing files, enabling conditional loading based on environment variables (e.g., `TF_VAR_env`, `TF_VAR_region`) and file paths derived using functions like `get_parent_terragrunt_dir()` and `get_terragrunt_dir()`. Escaped quotes are necessary within `get_env` calls inside the HCL string.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  extra_arguments \"conditional_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    required_var_files = [\n      \"${get_parent_terragrunt_dir()}/tofu.tfvars\"\n    ]\n\n    optional_var_files = [\n      \"${get_parent_terragrunt_dir()}/${get_env(\\\"TF_VAR_env\\\", \\\"dev\\\")}.tfvars\",\n      \"${get_parent_terragrunt_dir()}/${get_env(\\\"TF_VAR_region\\\", \\\"us-east-1\\\")}.tfvars\",\n      \"${get_terragrunt_dir()}/${get_env(\\\"TF_VAR_env\\\", \\\"dev\\\")}.tfvars\",\n      \"${get_terragrunt_dir()}/${get_env(\\\"TF_VAR_region\\\", \\\"us-east-1\\\")}.tfvars\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Plan Operations Using Deprecated run-all Command - Bash\nDESCRIPTION: Demonstrates invoking the plan operation across all modules using the deprecated run-all command. Superseded by the new --all flag syntax; this may not be supported in future CLI versions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan\n```\n\n----------------------------------------\n\nTITLE: Migrating Terraform State after Directory Move - Shell/Bash\nDESCRIPTION: After restructuring the project, this snippet runs Terragrunt's 'init' with state migration across all modules. 'terragrunt run-all init -migrate-state' initializes modules and migrates remote state to reflect path changes. Requires Terragrunt, remote state backend configuration, and AWS credentials. Outputs module initialization and migration logs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all init -migrate-state\n```\n\n----------------------------------------\n\nTITLE: Exposing Root Configuration and Making Availability Zones Dynamic - HCL\nDESCRIPTION: This snippet demonstrates how to expose local variables from an included root configuration in a Terragrunt HCL file and construct dynamic availability zones using interpolated region. It includes configuration inheritance, provider configuration, and dynamic inputs for a Terraform AWS VPC module. Requires Terragrunt 0.44+ for expose, the Terraform AWS VPC module, and dynamic region locals. The azs parameter is calculated dynamically; outputs are provided to the Terraform module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_27\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path   = find_in_parent_folders(\"root.hcl\")\n  expose = true\n}\n\nlocals {\n  region = include.root.locals.region\n}\n\n# Configure the module\n# The URL used here is a shorthand for\n# \"tfr://registry.terraform.io/terraform-aws-modules/vpc/aws?version=5.16.0\".\n# Note the extra `/` after the protocol is required for the shorthand\n# notation.\nterraform {\n  source = \"tfr:///terraform-aws-modules/vpc/aws?version=5.16.0\"\n}\n\n# Configure the inputs for the module\ninputs = {\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"${local.region}a\", \"${local.region}b\", \"${local.region}c\"] # <--\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = false\n  enable_vpn_gateway = false\n\n  tags = {\n    IaC = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Remote State Backend - Terragrunt - HCL\nDESCRIPTION: This snippet defines a Terragrunt remote_state block to configure an S3 backend for storing OpenTofu/Terraform state files. It sets custom bucket/key/region/encryption and establishes state locking using a DynamoDB table. The configuration expects Terragrunt and Terraform/OpenTofu, an AWS account, and permissions to create/manage S3 buckets and DynamoDB tables. Inputs include bucket name, state key path, region, encryption flag, and table name; outputs are stored remotely on S3. The block enables Terragrunt to automatically set up required resources unless 'skip' arguments are used.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\n\n# Configure OpenTofu/Terraform state to be stored in S3, in the bucket \"my-tofu-state\" in us-east-1 under a key that is\n# relative to included terragrunt config. For example, if you had the following folder structure:\n#\n# .\n# ├── root.hcl\n# └── child\n#     ├── main.tf\n#     └── terragrunt.hcl\n#\n# And the following is defined in the root terragrunt.hcl config that is included in the child, the state file for the\n# child module will be stored at the key \"child/tofu.tfstate\".\n#\n# Note that since we are not using any of the skip args, this will automatically create the S3 bucket\n# \"my-tofu-state\" and DynamoDB table \"my-lock-table\" if it does not already exist.\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket         = \"my-tofu-state\"\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Terragrunt Project with Specific Module Version using Bash\nDESCRIPTION: Illustrates how to specify a particular version (git tag or branch) of the Terraform module during scaffolding. This is achieved by passing the `Ref` variable with the desired version tag using the `--var` flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs --var=Ref=v0.68.4\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Input Variables (HCL)\nDESCRIPTION: This HCL snippet, typically found in `vars.tf`, declares two input variables for a Terraform module: `image_id` of type string and `num_tasks` of type number. These variables need to be provided values when the module is invoked.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# app/vars.tf\nvariable \"image_id\" {\n  type = string\n}\n\nvariable \"num_tasks\" {\n  type = number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Feature Flag in Terragrunt HCL\nDESCRIPTION: This HCL snippet demonstrates defining a feature flag named 's3_version' with a default value. The flag's value is then used within the `terraform` block to dynamically set the 'ref' parameter for the module source URL, allowing runtime control over the module version.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nfeature \"s3_version\" {\n  default = \"v1.0.0\"\n}\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//storage/s3?ref=${feature.s3_version.value}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terragrunt Project Filesystem Layout (Tree)\nDESCRIPTION: Illustrates a recommended filesystem structure for a Terragrunt project with separate directories for different infrastructure units (e.g., `vpc`, `ec2`) and a common root configuration file (`root.hcl`). This layout facilitates dynamic state key generation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_10\n\nLANGUAGE: tree\nCODE:\n```\n. \n├── root.hcl\n├── vpc\n│   └── terragrunt.hcl\n└── ec2\n    └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Loading and Using YAML-Defined Locals in Terragrunt - HCL\nDESCRIPTION: Shows how to load a value from an external YAML file and expose it as a local variable in Terragrunt, then reference that local in an inputs block. Utilizes the yamldecode and file functions to parse YAML content, requiring the YAML file to be present in the parent folders. Useful for integrating non-HCL data into Terragrunt pipelines.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_41\n\nLANGUAGE: hcl\nCODE:\n```\n# unit/terragrunt.hcl\n\nlocals {\n  # Load the data from region.json\n  region_yml = yamldecode(file(find_in_parent_folders(\"region.yml\")))\n\n  # Access the region from the loaded file\n  region = local.region_yml.region\n}\n\ninputs = {\n  bucket_name = \"${local.region}-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Variable Values from a Terraform Module - HCL\nDESCRIPTION: Defines a Terraform output in a shared module's output.tf file, exposing the 'content' attribute from a resource. This enables other units or modules to reference outputs when establishing dependencies. The output block must match the resource's attribute structure and syntax.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\n# shared/output.tf\\noutput \\\"content\\\" {\\n  value = local_file.file.content\\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Terraform Source with `path_relative_from_include` (HCL)\nDESCRIPTION: This example, placed within a root `terragrunt.hcl` file, demonstrates using `path_relative_from_include()` and `path_relative_to_include()` together in a `terraform` block. It constructs a relative `source` path from the root config location up to a common ancestor and then down into a parallel `sources` directory, dynamically selecting the correct module source based on the including child's path (e.g., resolving to `../../sources//mysql`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"${path_relative_from_include()}/../sources//${path_relative_to_include()}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Consuming Feature Flags - Terragrunt HCL\nDESCRIPTION: This snippet illustrates how to define feature flags in Terragrunt using the 'feature' block, assign default values, and use those flags within hooks and input variables. Flags can be overridden via CLI or environment variables at runtime, enabling dynamic infrastructure behaviors. Key parameters include the feature flag name and its default value. The snippet requires Terragrunt version supporting the 'feature' block and assumes appropriate CLI or environment variable usage for overrides.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_50\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nfeature \"string_flag\" {\n  default = \"test\"\n}\n\nfeature \"run_hook\" {\n  default = false\n}\n\nterraform {\n  before_hook \"feature_flag\" {\n    commands = [\"apply\", \"plan\", \"destroy\"]\n    execute  = feature.run_hook.value ? [\"sh\", \"-c\", \"feature_flag_script.sh\"] : [ \"sh\", \"-c\", \"exit\", \"0\" ]\n  }\n}\n\ninputs = {\n  string_feature_flag = feature.string_flag.value\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Deploys with Exclusion and Before Hook in Terragrunt HCL\nDESCRIPTION: This HCL snippet prevents deployments on weekends. It uses an 'exclude' block to drop units from the run queue on Fridays, Saturdays, and Sundays, and a 'before_hook' in the 'terraform' block to explicitly exit with code 1 (failure) if those actions are attempted regardless of invocation context. Dependencies: Terragrunt, bash shell. Inputs: current day of week; outputs: failed deploy attempt with an explanatory message on weekends. Limitation: assumes POSIX shell compatibility.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  day_of_week = formatdate(\"EEE\", timestamp())\n  ban_deploy  = contains([\"Fri\", \"Sat\", \"Sun\"], local.day_of_week)\n}\n\nexclude {\n    if = local.ban_deploy\n    actions = [\"apply\", \"destroy\"]\n}\n\nterraform {\n  before_hook \"prevent_deploy\" {\n    commands = [\"apply\", \"destroy\"]\n    execute  = local.ban_deploy ? [\"bash\", \"-c\", \"echo 'Deploying on weekends is not allowed. Go home.' && exit 1\"] : []\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamically Controlling Feature Flags and Error Ignore Logic in Terragrunt HCL\nDESCRIPTION: This HCL example shows the use of a feature flag ('enable_flaky_module') to control both the Terraform module version and error ignore behavior via Terragrunt. Local variables and conditionals pick the module version and which errors to ignore, providing environment-driven flexibility. Inputs include the flag and relevant error patterns; outputs are different module versions and error handling behaviors. Dependencies: Terragrunt and feature flag variables. Limitations: error patterns and logic must match actual error output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nfeature \"enable_flaky_module\" {\n  default = false\n}\n\nlocals {\n  version = feature.enable_flaky_module.value ? \"v1.0.0\" : \"v1.1.0\"\n}\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//storage/s3?ref=${local.version}\"\n}\n\nerrors {\n    # Ignore errors when set\n    ignore \"flaky_module_errors\" {\n        ignorable_errors = feature.enable_flaky_module.value ? [\n            \".*Error: flaky module error.*\"\n        ] : []\n        message = \"Ignoring flaky module error\"\n        signals = {\n            send_notification = true\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for auth-provider-cmd Output\nDESCRIPTION: Defines the required JSON structure that the command specified by `auth-provider-cmd` must output to STDOUT. This schema allows Terragrunt to configure AWS credentials (`awsCredentials`), assume an AWS IAM role (`awsRole`), or set arbitrary environment variables (`envs`) dynamically before parsing HCL or running Terraform/OpenTofu. Note that `awsCredentials` takes precedence over `awsRole` if both are provided.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/auth-provider-cmd.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"awsCredentials\": {\n    \"ACCESS_KEY_ID\": \"\",\n    \"SECRET_ACCESS_KEY\": \"\",\n    \"SESSION_TOKEN\": \"\"\n  },\n  \"awsRole\": {\n    \"roleARN\": \"\",\n    \"sessionName\": \"\",\n    \"duration\": 0,\n    \"webIdentityToken\": \"\"\n  },\n  \"envs\": {\n    \"ANY_KEY\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Lock Timeout using HCL\nDESCRIPTION: This HCL snippet sets a custom lock timeout for Terraform operations using `extra_arguments`. It identifies commands that require locking via `get_terraform_commands_that_need_locking()` and adds the `-lock-timeout=20m` argument, forcing Terraform to wait up to 20 minutes to acquire a state lock.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Force OpenTofu/Terraform to keep trying to acquire a lock for up to 20 minutes if someone else already has the lock\n  extra_arguments \"retry_lock\" {\n    commands  = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock-timeout=20m\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Shared Module in OpenTofu/Terraform Units (HCL)\nDESCRIPTION: Configures both the 'foo' and 'bar' units to use a shared module definition located in '../shared'. The configuration declares a 'content' variable and passes it to the module, promoting DRY principles. Requires the shared module directory and compatible OpenTofu/Terraform versions. This pattern enables team-wide propagation of infrastructure changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/main.tf\\nvariable \\\"content\\\" {}\\n\\nmodule \\\"shared\\\" {\\n  source = \\\"../shared\\\"\\n\\n  content = var.content\\n}\\n\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/main.tf\\nvariable \\\"content\\\" {}\\n\\nmodule \\\"shared\\\" {\\n  source = \\\"../shared\\\"\\n\\n  content = var.content\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Backend Configuration with Terragrunt in HCL\nDESCRIPTION: This HCL snippet demonstrates defining a `generate` block within a root `root.hcl` file using Terragrunt. It dynamically creates a `backend.tf` file in each module's working directory before Terraform commands run. The `contents` uses a heredoc to define the Terraform S3 backend configuration, dynamically setting the `key` parameter using the `path_relative_to_include()` function to ensure unique state paths per module. This approach centralizes backend configuration and avoids repetition.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\ngenerate \"backend\" {\n  path      = \"backend.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Pre-Provisioned S3 and DynamoDB Resources (JSON)\nDESCRIPTION: Outlines a policy allowing only interacting (not creating or updating configuration) with pre-existing S3 buckets and DynamoDB tables for state storage. This is for situations where resources are managed externally and Terragrunt only needs access for state reads and writes. Requires correct ARN substitution for the actual bucket and table used by Terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Action\\\": [\\n                \\\"s3:GetBucketLocation\\\",\\n                \\\"s3:List*\\\"\\n            ],\\n            \\\"Resource\\\": [\\n                \\\"arn:aws:s3:::\\u003cBucketName\\u003e\\\"\\n            ],\\n            \\\"Effect\\\": \\\"Allow\\\"\\n        },\\n        {\\n            \\\"Action\\\": [\\n                \\\"s3:DeleteObject\\\",\\n                \\\"s3:GetObject\\\",\\n                \\\"s3:PutObject\\\",\\n                \\\"s3:ListBucket\\\"\\n            ],\\n            \\\"Resource\\\": [\\n                \\\"arn:aws:s3:::\\u003cBucketName\\u003e/*\\\"\\n            ],\\n            \\\"Effect\\\": \\\"Allow\\\"\\n        },\\n        {\\n            \\\"Sid\\\": \\\"AllowCreateAndUpdateDynamoDBActionsOnSpecifiedTerragruntTable\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"dynamodb:PutItem\\\",\\n                \\\"dynamodb:GetItem\\\",\\n                \\\"dynamodb:DescribeTable\\\",\\n                \\\"dynamodb:DeleteItem\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:dynamodb:*:*:table/TABLE_NAME\\\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Dependency with Mock Outputs in HCL\nDESCRIPTION: Demonstrates how to define a dependency block in `mysql/terragrunt.hcl` for a 'vpc' module located in a relative path (`../vpc`). It utilizes `mock_outputs` to supply default values (e.g., `vpc_id = \"mock-vpc-id\"`) for the dependency's outputs. This allows commands like `validate` to execute successfully even before the 'vpc' module is applied, by using the mocked values. The `inputs` block shows how to consume this (potentially mocked) dependency output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# mysql/terragrunt.hcl\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id = \"mock-vpc-id\"\n  }\n}\n\ninputs = {\n  vpc_id = dependency.vpc.outputs.vpc_id\n}\n```\n\n----------------------------------------\n\nTITLE: Including Root Configuration with Custom File Name in Terragrunt (Terragrunt, HCL)\nDESCRIPTION: This snippet shows updating the root include pattern to explicitly look for a configuration file named 'root.hcl' using find_in_parent_folders('root.hcl'). This change allows users to rename their root configuration from 'terragrunt.hcl' to 'root.hcl', preventing confusion between global and unit-level config files. The code requires the updated configuration filename and that the referenced file exists in the parent directories. The include block's path must match the new root file name for Terragrunt to load shared settings as expected.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/01-migrating-from-root-terragrunt-hcl.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# /some/path/terragrunt.hcl\\ninclude \\\"root\\\" {\\n  path = find_in_parent_folders(\\\"root.hcl\\\")\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Output Variable in Shared Module - HCL\nDESCRIPTION: This HCL code in output.tf defines an output for 'content' exposed by the shared Terraform module, making it available for consumption by dependent units (such as enabling 'bar' to reference 'foo' output). The block requires the referenced resource 'local_file.file' and its 'content' attribute to exist in the module, and must be placed in the shared module directory. Input is the resource state; output is the 'content' value for dependency resolution. Limitations: correct resource and attribute must be defined.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# shared/output.tf\noutput \"content\" {\n  value = local_file.file.content\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Input Variables in terragrunt.hcl with Inputs Attribute (HCL)\nDESCRIPTION: This snippet illustrates the recommended approach for passing input variables to Terraform modules using the 'inputs' attribute within terragrunt.hcl. Key-value pairs such as 'instance_type' and 'instance_count' are grouped as an object. Terragrunt inserts these as environment variables for Terraform execution. This approach is necessary as .tfvars loading is not automatic in terragrunt.hcl.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\\nterraform {\\n  # ...\\n}\\nremote_state {\\n  # ...\\n}\\n# Input variables to set for your Terraform module\\ninputs = {\\n  instance_type  = \\\"t2.micro\\\"\\n  instance_count = 10\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Generating terragrunt.hcl for a MySQL Module using Bash\nDESCRIPTION: Demonstrates using `terragrunt scaffold` with a specific GitHub URL pointing to an example MySQL OpenTofu/Terraform module. This command uses the default built-in boilerplate template to generate a `terragrunt.hcl` file in the current directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt-infrastructure-modules-example//modules/mysql\n```\n\n----------------------------------------\n\nTITLE: Excluding Environment Based on Feature Flag (Prod) in Terragrunt HCL\nDESCRIPTION: This HCL snippet for a 'prod' root file (`prod/root.hcl`) defines a feature flag 'prod' (defaulting to false) and an `exclude` block. Units in the production environment are excluded from `run-all` commands by default and require the 'prod' feature flag to be explicitly enabled.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# prod/root.hcl\nfeature \"prod\" {\n  default = false\n}\n\nexclude {\n    if = !feature.prod.value\n    actions = [\"all_except_output\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git Pre-commit Hook for Formatting (Bash)\nDESCRIPTION: This Make command installs a Git pre-commit hook. This hook automatically runs `gofmt` on staged Go source files before allowing a commit, ensuring all committed code adheres to formatting standards.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmake install-pre-commit-hook\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Apply with Default Log Format (Bash)\nDESCRIPTION: Invokes Terragrunt to provision infrastructure as described in the HCL files, applying changes with auto-approval. The sample output showcases provider initialization, plugin installation, and detailed plan/apply output. Requires Terragrunt, OpenTofu/Terraform, and configured project files. Primary input is the infrastructure configuration; output includes resource state changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd foo\\n$ terragrunt apply -auto-approve\\n18:44:26.066 STDOUT tofu: Initializing the backend...\\n18:44:26.067 STDOUT tofu: Initializing provider plugins...\\n18:44:26.067 STDOUT tofu: - Finding latest version of hashicorp/local...\\n18:44:26.717 STDOUT tofu: - Installing hashicorp/local v2.5.2...\\n18:44:27.033 STDOUT tofu: - Installed hashicorp/local v2.5.2 (signed, key ID 0C0AF313E5FD9F80)\\n18:44:27.033 STDOUT tofu: Providers are signed by their developers.\\n18:44:27.033 STDOUT tofu: If you'd like to know more about provider signing, you can read about it here:\\n18:44:27.033 STDOUT tofu: https://opentofu.org/docs/cli/plugins/signing/\\n18:44:27.034 STDOUT tofu: OpenTofu has created a lock file .terraform.lock.hcl to record the provider\\n18:44:27.034 STDOUT tofu: selections it made above. Include this file in your version control repository\\n18:44:27.034 STDOUT tofu: so that OpenTofu can guarantee to make the same selections by default when\\n18:44:27.034 STDOUT tofu: you run \\\"tofu init\\\" in the future.\\n18:44:27.034 STDOUT tofu: OpenTofu has been successfully initialized!\\n18:44:27.035 STDOUT tofu:\\n18:44:27.035 STDOUT tofu: You may now begin working with OpenTofu. Try running \\\"tofu plan\\\" to see\\n18:44:27.035 STDOUT tofu: any changes that are required for your infrastructure. All OpenTofu commands\\n18:44:27.035 STDOUT tofu: should now work.\\n18:44:27.035 STDOUT tofu: If you ever set or change modules or backend configuration for OpenTofu,\\n18:44:27.035 STDOUT tofu: rerun this command to reinitialize your working directory. If you forget, other\\n18:44:27.035 STDOUT tofu: commands will detect it and remind you to do so if necessary.\\n18:44:27.362 STDOUT tofu: OpenTofu used the selected providers to generate the following execution\\n18:44:27.362 STDOUT tofu: plan. Resource actions are indicated with the following symbols:\\n18:44:27.362 STDOUT tofu:   + create\\n18:44:27.362 STDOUT tofu: OpenTofu will perform the following actions:\\n18:44:27.362 STDOUT tofu:   # local_file.file will be created\\n18:44:27.362 STDOUT tofu:   + resource \\\"local_file\\\" \\\"file\\\" {\\n18:44:27.362 STDOUT tofu:       + content              = \\\"Hello, World!\\\"\\n18:44:27.362 STDOUT tofu:       + content_base64sha256 = (known after apply)\\n18:44:27.362 STDOUT tofu:       + content_base64sha512 = (known after apply)\\n18:44:27.362 STDOUT tofu:       + content_md5          = (known after apply)\\n18:44:27.362 STDOUT tofu:       + content_sha1         = (known after apply)\\n18:44:27.362 STDOUT tofu:       + content_sha256       = (known after apply)\\n18:44:27.362 STDOUT tofu:       + content_sha512       = (known after apply)\\n18:44:27.362 STDOUT tofu:       + directory_permission = \\\"0777\\\"\\n18:44:27.362 STDOUT tofu:       + file_permission      = \\\"0777\\\"\\n18:44:27.362 STDOUT tofu:       + filename             = \\\"./hi.txt\\\"\\n18:44:27.362 STDOUT tofu:       + id                   = (known after apply)\\n18:44:27.362 STDOUT tofu:     }\\n18:44:27.362 STDOUT tofu: Plan: 1 to add, 0 to change, 0 to destroy.\\n18:44:27.362 STDOUT tofu:\\n18:44:27.383 STDOUT tofu: local_file.file: Creating...\\n18:44:27.384 STDOUT tofu: local_file.file: Creation complete after 0s [id=0a0a9f2a6772942557ab5355d76af442f8f65e01]\\n18:44:27.392 STDOUT tofu:\\n18:44:27.392 STDOUT tofu: Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\\n18:44:27.392 STDOUT tofu:\n```\n\n----------------------------------------\n\nTITLE: Fetching Outputs Directly from State - Terragrunt - Shell\nDESCRIPTION: This shell command runs Terragrunt with the '--dependency-fetch-output-from-state' flag, which makes Terragrunt retrieve output values directly from the backend state file (specifically S3) instead of invoking the 'output -json' command. This improves performance by bypassing provider loading. The flag only works with S3 backends; requires correct AWS permissions and Terragrunt configured to use S3 for state.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt run --all plan --dependency-fetch-output-from-state\n```\n\n----------------------------------------\n\nTITLE: Distinguishing Attributes and Blocks in terragrunt.hcl (HCL)\nDESCRIPTION: Illustrates the mandatory distinction between HCL2 attributes (requiring an equals sign `=`) and blocks (no equals sign) within a `terragrunt.hcl` file for Terragrunt 0.19.x+. It shows `terraform`, `remote_state`, `include`, `dependencies`, and `extra_arguments` as blocks, while `config`, `s3_bucket_tags`, `dynamodb_table_tags`, `accesslogging_bucket_tags`, and `inputs` are attributes requiring `=`. Correct syntax is crucial for HCL2 parsing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\n# terraform is a block, so make sure NOT to include an equals sign\nterraform {\n  source = \"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\"\n\n  # extra_arguments is a block, so make sure NOT to include an equals sign\n  extra_arguments \"custom_vars\" {\n    commands  = [\"apply\", \"plan\"]\n    arguments = [\"-var\", \"foo=42\"]\n  }\n}\n\n# remote_state is a block, so make sure NOT to include an equals sign\nremote_state {\n  backend = \"s3\"\n  # config is an attribute, so an equals sign is REQUIRED\n  config = {\n    bucket = \"foo\"\n\n    # s3_bucket_tags is an attribute, so an equals sign is REQUIRED\n    s3_bucket_tags = {\n      owner = \"terragrunt integration test\"\n      name = \"Terraform state storage\"\n    }\n\n    # dynamodb_table_tags is an attribute, so an equals sign is REQUIRED\n    dynamodb_table_tags = {\n      owner = \"terragrunt integration test\"\n      name = \"Terraform lock table\"\n    }\n\n    # accesslogging_bucket_tags is an attribute, so an equals sign is REQUIRED\n    accesslogging_bucket_tags = {\n      owner = \"terragrunt integration test\"\n      name  = \"Terraform access log storage\"\n    }\n  }\n}\n\n# include is a block, so make sure NOT to include an equals sign\ninclude {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\n# dependencies is a block, so make sure NOT to include an equals sign\ndependencies {\n  paths = [\"../vpc\", \"../mysql\", \"../redis\"]\n}\n\n# Inputs is an attribute, so an equals sign is REQUIRED\ninputs = {\n  instance_type  = \"t2.micro\"\n  instance_count = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Module Source Relative to Git Repo Root using HCL\nDESCRIPTION: This snippet demonstrates how to define the source for a Terraform module relative to the root of the Git repository using the `get_path_to_repo_root()` function. This ensures the path is correct regardless of the `terragrunt.hcl` file's location within the repo. Requires the file to be within a Git repository.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  source = \"${get_path_to_repo_root()}//modules/example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan Selectively Across Environments via Feature Flags\nDESCRIPTION: This Bash command shows advanced control over which environments are included in a `run-all` operation using multiple feature flags. It explicitly disables the 'dev' environment (`--feature dev=false`) while enabling both 'stage' and 'prod' environments (`--feature stage=true --feature prod=true`) for the plan.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all --feature dev=false --feature stage=true --feature prod=true plan\n```\n\n----------------------------------------\n\nTITLE: Example Structure for Terragrunt Unit Dependencies (Tree)\nDESCRIPTION: Displays the directory layout used in the subsequent examples for demonstrating how to pass outputs between Terragrunt units (e.g., VPC ID from `vpc` to `mysql`). This structure contains units for VPC, MySQL, Redis, and a backend application.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_6\n\nLANGUAGE: tree\nCODE:\n```\nroot\n├── backend-app\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── mysql\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── redis\n│   ├── main.tf\n│   └── terragrunt.hcl\n└── vpc\n    ├── main.tf\n    └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory and Applying Terragrunt - Shell/Bash\nDESCRIPTION: This snippet demonstrates changing the working directory to 'us-west-2' and applying the Terragrunt run-all apply command. Intended to scope AWS resource creation strictly to resources defined within the specified region directory. Requires Terragrunt and existing configurations in 'us-west-2'. Outputs logs for provisioned resources.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncd us-west-2\nterragrunt run-all apply\n```\n\n----------------------------------------\n\nTITLE: Overriding Terragrunt Feature Flag via Command Line\nDESCRIPTION: This Bash command shows how to override the default value of a feature flag ('s3_version') at runtime when executing a Terragrunt command. The `--feature` argument is used to specify the new value ('v1.1.0').\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --feature s3_version=v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Conditional Exclude Block for Terragrunt Units - Terragrunt HCL\nDESCRIPTION: Provides the syntax and examples for the 'exclude' block in Terragrunt, enabling conditional exclusion of units based on runtime expressions or feature flags. The block supports specifying actions to exclude and whether dependencies should also be excluded. Key parameters are 'if' (boolean expression), 'actions' (list of actions such as 'plan', 'apply', etc.), and 'exclude_dependencies' (boolean). Requires Terragrunt's support for 'exclude' and is intended for advanced orchestration scenarios.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_54\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nexclude {\n    if = <boolean expression>           # Boolean expression to determine exclusion.\n    actions = [\"<action>\", ...]         # List of actions to exclude (e.g., \"plan\", \"apply\", \"all\", \"all_except_output\").\n    exclude_dependencies = <boolean>    # Boolean to determine if dependencies should also be excluded.\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terragrunt Configuration with Remote Git Source\nDESCRIPTION: Provides an example `terragrunt.hcl` configuration snippet demonstrating a `terraform` block. Within this block, the `source` attribute specifies the location of the Terraform module code. In this case, it points to a specific path (`//networking/vpc`) within a remote Git repository (`git::git@github.com:acme/infrastructure-modules.git`) at a particular reference (`?ref=v0.0.1`). This `source` value can be overridden for local testing using the `--source` command-line flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//networking/vpc?ref=v0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assuming IAM Role via Terragrunt CLI Argument (Bash)\nDESCRIPTION: Demonstrates how to instruct Terragrunt to assume a specific AWS IAM role before running Terraform/OpenTofu commands using the `--iam-role` command-line argument. This method takes precedence over environment variables and configuration file settings.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --iam-role \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Strictly Preventing Terragrunt Commands Using Exclude and Before Hook\nDESCRIPTION: This HCL configuration demonstrates a stricter way to prevent commands (`apply`, `destroy`) from running, especially on weekends. It combines an `exclude` block (to skip the unit in `run-all`) with a `before_hook` in the `terraform` block. The hook executes a script that exits with an error (exit code 1) if the condition (`local.ban_deploy`) is met, thus preventing even manual execution of the command in the unit's directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nlocals {\n  day_of_week = formatdate(\"EEE\", timestamp())\n  ban_deploy  = contains([\"Fri\", \"Sat\", \"Sun\"], local.day_of_week)\n}\n\nexclude {\n    if = local.ban_deploy\n    actions = [\"apply\", \"destroy\"]\n}\n\nterraform {\n  before_hook \"prevent_deploy\" {\n    commands = [\"apply\", \"destroy\"]\n    execute  = local.ban_deploy ? [\"bash\", \"-c\", \"echo 'Deploying on weekends is not allowed. Go home.' && exit 1\"] : []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Marking a File as Read with mark_as_read in HCL\nDESCRIPTION: This HCL snippet shows how to use the `mark_as_read` function to explicitly tell Terragrunt that a specific file (`file-read-by-tofu.txt`) should be considered 'read' by this configuration. This is useful when a file is read through mechanisms Terragrunt cannot automatically track, such as external scripts called via `run_cmd` or directly within OpenTofu code. The marked filename is assigned to a local variable and can then be used, for example, in the `inputs` block. Note that for `mark_as_read` to be effective with `--queue-include-units-reading`, it must be called within the `locals` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-include-units-reading.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nlocals {\n  filename = mark_as_read(\"file-read-by-tofu.txt\")\n}\n\ninputs = {\n  filename = local.filename\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Terragrunt Units from the CLI - Bash\nDESCRIPTION: This bash code snippet demonstrates how to navigate to a specific Terragrunt unit directory and deploy the configuration using the 'terragrunt apply' command. Terragrunt interprets the terragrunt.hcl file in the current directory, resolves remote sources, and applies infrastructure changes. It requires Terragrunt to be installed and the user to have necessary access to the modules and cloud provider credentials. The expected input is no arguments, and output is the successful deployment of the infrastructure as defined in the unit's configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd live/stage/app\\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Generating Stacks and Running Terragrunt Commands in CI/CD (Bash)\nDESCRIPTION: Provides example Bash commands for integrating Terragrunt Stacks into a CI/CD pipeline. The `terragrunt stack generate` command creates the necessary unit directories based on the stack configuration, and `terragrunt run --all plan/apply --non-interactive` executes the plan or apply command across all modules defined in the stack non-interactively.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack generate\nterragrunt run --all plan/apply --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Error to Default Retryable Errors using HCL\nDESCRIPTION: This HCL snippet defines custom retryable errors for Terragrunt operations. It retrieves the default list of retryable errors using `get_default_retryable_errors()` and appends a custom error string using the `concat` function.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nretryable_errors = concat(get_default_retryable_errors(), [\"my custom error\"])\n```\n\n----------------------------------------\n\nTITLE: Merging Mock and Real Dependency Outputs in Terragrunt HCL\nDESCRIPTION: Illustrates how to merge mocked dependency outputs with actual outputs retrieved from the Terraform state using the `mock_outputs_merge_strategy_with_state = \"shallow\"` attribute within a dependency block in `mysql/terragrunt.hcl`. In this example, if the real state for the 'vpc' dependency contains a value for `vpc_id`, that real value will override the mocked value. However, the `new_output` defined only in `mock_outputs` will still be included in the final `dependency.vpc.outputs` map.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# mysql/terragrunt.hcl\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id     = \"temporary-dummy-id\"\n    new_output = \"temporary-dummy-value\"\n  }\n\n  mock_outputs_merge_strategy_with_state = \"shallow\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Configuration in terragrunt.hcl (>= v0.19.x) (HCL)\nDESCRIPTION: Illustrates the updated method (Terragrunt >= v0.19.x) for defining Terragrunt configuration in a dedicated `terragrunt.hcl` file. This example shows the migrated `terraform` block (with source and extra_arguments) and `remote_state` block, now using HCL2 syntax without the `terragrunt = { ... }` wrapper.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  source = \"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\"\n\n  extra_arguments \"custom_vars\" {\n    commands  = [\"apply\", \"plan\"]\n    arguments = [\"-var\", \"foo=42\"]\n  }\n}\n\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket         = \"my-terraform-state\"\n    key            = \"${path_relative_to_include()}/terraform.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Terraform Arguments with Whitespace via Terragrunt extra_arguments (HCL)\nDESCRIPTION: This HCL configuration illustrates how to pass Terraform/OpenTofu arguments containing spaces (like `-var bucket=example.bucket.name`) using Terragrunt's `extra_arguments`. Each part of the argument (`-var` and `bucket=example.bucket.name`) must be provided as a separate string item within the `arguments` list. Terragrunt reconstructs the argument correctly when calling the underlying command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  extra_arguments \"bucket\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    arguments = [\n      \"-var\", \"bucket=example.bucket.name\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Includes for DRY Per-Environment Configuration - HCL\nDESCRIPTION: Demonstrates how to reduce duplication in environment-specific Terragrunt files by including both a root configuration and a shared environment module configuration using multiple include blocks. The configuration only overrides the 'env' input, improving maintainability. Presumes existence of referenced files and correct relative paths.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_5\n\nLANGUAGE: HCL\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"env\" {\n  path = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n}\n\ninputs = {\n  env = \"qa\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Engine from GitHub (HCL)\nDESCRIPTION: This HCL block within `terragrunt.hcl` instructs Terragrunt to use a specific version of the official OpenTofu engine sourced from a GitHub repository. It sets the `source` to the `gruntwork-io/terragrunt-engine-opentofu` repository and pins the `version` to `v0.0.7`. This configuration enables the experimental engine feature using a publicly available engine.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nengine {\n  source  = \"github.com/gruntwork-io/terragrunt-engine-opentofu\"\n  version = \"v0.0.7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using --var-file with Terragrunt Scaffold in Bash\nDESCRIPTION: This snippet demonstrates how to use the '--var-file' argument with the 'terragrunt scaffold' command. It first shows an example 'vars.hcl' file defining 'environment' and 'region' variables in HCL format. Then, it shows the Terragrunt command that uses this file to provide variables when scaffolding a MySQL module from a specified GitHub repository.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/scaffold-var-file.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# vars.hcl\nenvironment = \"prod\"\nregion = \"us-east-1\"\n\n# Command\nterragrunt scaffold github.com/org/repo//modules/mysql --var-file=vars.hcl\n```\n\n----------------------------------------\n\nTITLE: Creating Terragrunt Configuration File (Shell)\nDESCRIPTION: Creates an empty terragrunt.hcl file in your project's root directory using the shell touch command. This configuration file signals Terragrunt to manage your OpenTofu/Terraform project and automatically executes init when needed, removing the need for manual initialization. No extra dependencies are required besides standard shell tools and an existing OpenTofu/Terraform project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntouch terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Enabling Terragrunt Provider Cache via CLI (Bash)\nDESCRIPTION: This command executes `terragrunt run-all plan` with the `--provider-cache` flag enabled. This flag activates the Terragrunt provider cache server for the duration of the command, which can significantly speed up operations involving multiple Terraform/OpenTofu initializations (like `run-all`) by caching provider downloads. It's most beneficial for commands that run multiple modules; using it for single runs might introduce overhead.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan --provider-cache\n```\n\n----------------------------------------\n\nTITLE: Using Terragrunt Before Hook for Pre-Apply Orchestration in HCL\nDESCRIPTION: Configures a `before_hook` in `terragrunt.hcl` to execute a script (`./build_and_push_image.sh`) before `plan` or `apply`. This illustrates using hooks for orchestration tasks like building and pushing a Docker image to a registry before infrastructure updates that might depend on it.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  before_hook \"build_and_push_image\" {\n    commands     = [\"plan\", \"apply\"]\n    execute      = [\"./build_and_push_image.sh\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Remote State with Dynamic Key using HCL\nDESCRIPTION: This snippet configures Terragrunt to use an S3 backend for remote state storage. It dynamically sets the state file key using the `get_path_from_repo_root()` function, which determines the path relative to the Git repository root. Requires the file to be within a Git repository.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nremote_state {\n  backend = \"s3\"\n\n  config = {\n    bucket         = \"tofu\"\n    dynamodb_table = \"tofu\"\n    encrypt        = true\n    key            = \"${get_path_from_repo_root()}/tofu.tfstate\"\n    session_name   = \"tofu\"\n    region         = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role Assumption in terragrunt.hcl (HCL)\nDESCRIPTION: Illustrates defining the default AWS IAM role to assume within the `terragrunt.hcl` configuration file using the `iam_role` attribute. This value is used if neither the CLI argument nor the environment variable is set.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\niam_role = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Passing Var File Based on AWS Account ID using HCL\nDESCRIPTION: This HCL snippet configures `extra_arguments` to automatically pass a specific variable file based on the current AWS Account ID. It uses `get_terraform_commands_that_need_vars()` to apply this argument only to relevant Terraform commands and `get_aws_account_id()` to construct the filename (e.g., `123456789012.tfvars`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  extra_arguments \"common_var\" {\n    commands  = get_terraform_commands_that_need_vars()\n    arguments = [\"-var-file=${get_aws_account_id()}.tfvars\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Terragrunt Actions Based on Day of Week using HCL\nDESCRIPTION: This HCL snippet uses an `exclude` block to prevent specific Terragrunt actions (`apply`, `destroy`) from running on certain days of the week (Friday, Saturday, Sunday). It calculates the current day using `formatdate` and `timestamp` functions within a `locals` block and uses this condition in the `exclude` block's `if` statement.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nlocals {\n  day_of_week = formatdate(\"EEE\", timestamp())\n  ban_deploy  = contains([\"Fri\", \"Sat\", \"Sun\"], local.day_of_week)\n}\n\nexclude {\n    if = local.ban_deploy\n    actions = [\"apply\", \"destroy\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Shared Configuration and Dynamic Generate Block - Terragrunt HCL\nDESCRIPTION: This snippet demonstrates how to use Terragrunt's 'locals' block to load configurations from a parent 'common.hcl' file using the 'read_terragrunt_config' and 'find_in_parent_folders' functions. It then dynamically references a 'generate' configuration from the loaded file. This approach enables modular and reusable configurations across multiple Terragrunt units. The snippet relies on Terragrunt features and requires the referenced 'common.hcl' file to exist within the directory tree.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_49\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nlocals {\n  # Load the data from common.hcl\n  common = read_terragrunt_config(find_in_parent_folders(\"common.hcl\"))\n}\n\n# Set the generate config dynamically to the generate config in common.hcl\ngenerate = local.common.generate\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt with OIDC Web Identity via Environment Variables (Terragrunt, Bash)\nDESCRIPTION: This bash example sets both TERRAGRUNT_IAM_ROLE and TERRAGRUNT_IAM_WEB_IDENTITY_TOKEN environment variables, enabling Terragrunt to assume an AWS IAM role via a supplied OIDC web identity token for authentication. Populate $TOKEN with an appropriate web identity token. This approach best suits automation contexts like CI/CD. Requires proper IAM role/web identity configuration in AWS and the latest Terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_IAM_ROLE=\"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\nexport TERRAGRUNT_IAM_WEB_IDENTITY_TOKEN=\"$TOKEN\"\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Enrichment with Bare Format in Terragrunt Run-All (Bash)\nDESCRIPTION: Executes `terragrunt run-all plan` using the `--terragrunt-log-format bare` flag. This turns off Terragrunt's default log enrichment (timestamps, module identifiers). The resulting output shows the raw output from the underlying OpenTofu/Terraform processes, making it harder to distinguish messages from concurrent operations. Dependencies include Terragrunt, OpenTofu/Terraform, and a multi-module setup.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all --terragrunt-log-format bare plan\nINFO[0000] The stack at /Users/yousif/tmp/testing-stdout-stderr-split will be processed in the following order for command plan: \nGroup 1\n- Module /Users/yousif/tmp/testing-stdout-stderr-split/unit-1\n- Module /Users/yousif/tmp/testing-stdout-stderr-split/unit-2\n\n\n\nInitializing the backend...\n\nInitializing provider plugins...\n\nOpenTofu has been successfully initialized!\n\nYou may now begin working with OpenTofu. Try running \"tofu plan\" to see\nany changes that are required for your infrastructure. All OpenTofu commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for OpenTofu,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your configuration and\nfound no differences, so no changes are needed.\n\nInitializing the backend...\n\nInitializing provider plugins...\n\nOpenTofu has been successfully initialized!\n\nYou may now begin working with OpenTofu. Try running \"tofu plan\" to see\nany changes that are required for your infrastructure. All OpenTofu commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for OpenTofu,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your configuration and\nfound no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Locating Parent Configuration with `find_in_parent_folders` (HCL)\nDESCRIPTION: Shows the primary use case for the `find_in_parent_folders` function within an `include` block. It searches parent directories upwards from the current `terragrunt.hcl` file for a file named `root.hcl` and returns its absolute path, enabling DRY configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Engine Log Level - Shell\nDESCRIPTION: Allows runtime control of the engine logging via the TG_ENGINE_LOG_LEVEL environment variable. One of debug, info, warn, or error is supported. Inputs: desired log level value as a string. Outputs: engine logs at the configured verbosity. No dependencies; only affects Terragrunt engine execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/13-engine.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport TG_ENGINE_LOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Minimal IAM Policy for Specific S3 and DynamoDB Resources (JSON)\nDESCRIPTION: Shows a more restrictive sample IAM policy granting only necessary S3 and DynamoDB actions for specific resource ARNs. Intended for securing least-privilege operation for Terragrunt remote state. Prerequisites are the creation of resources with matching ARNs. Contains essential actions for S3 bucket configuration and DynamoDB table usage chiefly around state locking and storage.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Sid\\\": \\\"AllowCreateAndListS3ActionsOnSpecifiedTerragruntBucket\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"s3:ListBucket\\\",\\n                \\\"s3:GetBucketVersioning\\\",\\n                \\\"s3:GetBucketAcl\\\",\\n                \\\"s3:GetBucketLogging\\\",\\n                \\\"s3:CreateBucket\\\",\\n                \\\"s3:PutBucketPublicAccessBlock\\\",\\n                \\\"s3:PutBucketTagging\\\",\\n                \\\"s3:PutBucketPolicy\\\",\\n                \\\"s3:PutBucketVersioning\\\",\\n                \\\"s3:PutEncryptionConfiguration\\\",\\n                \\\"s3:PutBucketAcl\\\",\\n                \\\"s3:PutBucketLogging\\\",\\n                \\\"s3:GetEncryptionConfiguration\\\",\\n                \\\"s3:GetBucketPolicy\\\",\\n                \\\"s3:GetBucketPublicAccessBlock\\\",\\n                \\\"s3:PutLifecycleConfiguration\\\",\\n                \\\"s3:PutBucketOwnershipControls\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:s3:::BUCKET_NAME\\\"\\n        },\\n        {\\n            \\\"Sid\\\": \\\"AllowGetAndPutS3ActionsOnSpecifiedTerragruntBucketPath\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"s3:PutObject\\\",\\n                \\\"s3:GetObject\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:s3:::BUCKET_NAME/some/path/here\\\"\\n        },\\n        {\\n            \\\"Sid\\\": \\\"AllowCreateAndUpdateDynamoDBActionsOnSpecifiedTerragruntTable\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"dynamodb:PutItem\\\",\\n                \\\"dynamodb:GetItem\\\",\\n                \\\"dynamodb:DescribeTable\\\",\\n                \\\"dynamodb:DeleteItem\\\",\\n                \\\"dynamodb:CreateTable\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:dynamodb:*:*:table/TABLE_NAME\\\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Stack Operations for All Units - Bash\nDESCRIPTION: Demonstrates running stack-wide apply and plan commands using 'terragrunt run-all'. The commands initiate Terragrunt operations recursively across multiple unit folders, processing each according to dependency order. The '--non-interactive' flag disables prompts for automation. Requires Terragrunt installed and properly structured subdirectories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all apply\\n08:42:00.150 INFO   The stack at . will be processed in the following order for command apply:\\nGroup 1\\n- Module ./bar\\n- Module ./foo\\n\\n\\nAre you sure you want to run 'terragrunt apply' in each folder of the stack described above? (y/n) y\\n08:43:10.702 STDOUT [foo] tofu: local_file.file: Refreshing state... [id=c4ae21736a6297f44ea86791e528338e9d14a0e9]\\n08:43:10.702 STDOUT [bar] tofu: local_file.file: Refreshing state... [id=f855394a0316da09618c8b1fde7b91e00e759f80]\\n08:43:10.708 STDOUT [bar] tofu: No changes. Your infrastructure matches the configuration.\\n08:43:10.708 STDOUT [bar] tofu: OpenTofu has compared your real infrastructure against your configuration and\\n08:43:10.708 STDOUT [bar] tofu: found no differences, so no changes are needed.\\n08:43:10.708 STDOUT [foo] tofu: No changes. Your infrastructure matches the configuration.\\n08:43:10.708 STDOUT [foo] tofu: OpenTofu has compared your real infrastructure against your configuration and\\n08:43:10.708 STDOUT [foo] tofu: found no differences, so no changes are needed.\\n08:43:10.716 STDOUT [foo] tofu:\\n08:43:10.716 STDOUT [foo] tofu: Apply complete! Resources: 0 added, 0 changed, 0 destroyed.\\n08:43:10.716 STDOUT [foo] tofu:\\n08:43:10.720 STDOUT [bar] tofu:\\n08:43:10.720 STDOUT [bar] tofu: Apply complete! Resources: 0 added, 0 changed, 0 destroyed.\\n08:43:10.720 STDOUT [bar] tofu:\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all --non-interactive apply\n```\n\n----------------------------------------\n\nTITLE: Generated Debug Variables File Contents (JSON)\nDESCRIPTION: This JSON content represents the `terragrunt-debug.tfvars.json` file generated by the `--terragrunt-debug` flag in the example. It shows the actual key-value pairs (`image_id` and `num_tasks`) that Terragrunt calculated and passed as inputs to OpenTofu/Terraform.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image_id\": \"acme/myapp:1\",\n  \"num_tasks\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Destroy Command Log Output\nDESCRIPTION: Provides sample log output generated during a `terragrunt run-all destroy` operation. It highlights how Terragrunt prefixes log lines with the corresponding module name (e.g., `[ec2]`, `[vpc]`), which aids in monitoring and debugging operations across a multi-module infrastructure stack.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_17\n\nLANGUAGE: logs\nCODE:\n```\n16:33:28.820 STDOUT [ec2] tofu: aws_instance.this[0]: Destruction complete after 1m11s\n16:33:28.936 STDOUT [ec2] tofu: \n16:33:28.936 STDOUT [ec2] tofu: Destroy complete! Resources: 1 destroyed.\n16:33:28.936 STDOUT [ec2] tofu: \n16:33:30.713 STDOUT [vpc] tofu: aws_vpc.this[0]: Refreshing state... [id=vpc-063d11b72a2c9f8b3]\n16:33:31.510 STDOUT [vpc] tofu: aws_default_security_group.this[0]: Refreshing state... [id=sg-060d402b95a2cd935]\n16:33:31.511 STDOUT [vpc] tofu: aws_default_route_table.default[0]: Refreshing state... [id=rtb-05adb3ee7f48640f0]\n```\n\n----------------------------------------\n\nTITLE: Including Shared Terragrunt Configuration Using Include Block (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to include an environment-level configuration (env.hcl) within a child terragrunt.hcl file using the include block and the find_in_parent_folders function. This pattern enables inheritance and reuse of generated provider configuration or other shared blocks across multiple deployment units in the repository hierarchy. File paths are resolved relative to the current terragrunt.hcl position in the directory structure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n# prod/app/terragrunt.hcl\\ninclude \"env\" {\\n  path = find_in_parent_folders(\"env.hcl\")\\n}\n```\n\n----------------------------------------\n\nTITLE: Including Parent Environment Configuration in Child Module using Terragrunt HCL\nDESCRIPTION: Demonstrates how a child Terragrunt module (e.g., `mysql/terragrunt.hcl`) can inherit configurations from a parent environment configuration file (`env.hcl`). It uses an `include` block with the `find_in_parent_folders` function to locate and incorporate the `env.hcl` content, including any `generate` blocks defined there.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"env\" {\n  path = find_in_parent_folders(\"env.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Provider Caching in Terragrunt - Configuration File\nDESCRIPTION: This YAML snippet configures provider caching in Terragrunt by defining a boolean type configuration block named 'provider-cache'. It sets the environment variable 'TG_PROVIDER_CACHE' to enable or disable provider cache functionality globally or per-environment. The snippet must be included in Terragrunt's configuration file. Users should ensure Terragrunt version compatibility and that the environment variable is set according to deployment needs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/provider-cache.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: provider-cache\\ndescription: Enables Terragrunt's provider caching.\\ntype: bool\\nenv:\\n  - TG_PROVIDER_CACHE\\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt with IAM Role via CLI Argument (Terragrunt, Bash)\nDESCRIPTION: This bash snippet demonstrates how to use the `--terragrunt-iam-role` command-line argument to direct Terragrunt to assume a specified AWS IAM role. This usage requires Terragrunt to be installed and an appropriate AWS account and role provisioned. Parameter ACCOUNT_ID should be replaced with the target AWS account ID, and ROLE_NAME with the desired IAM role. The command will ensure all OpenTofu/Terraform actions run with credentials acquired through role assumption; no credential files are written to disk.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --terragrunt-iam-role \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Stack via Terragrunt CLI - Bash\nDESCRIPTION: This bash command executes stack generation in Terragrunt based on the configurations defined in a terragrunt.stack.hcl file. No additional dependencies are required besides Terragrunt being installed and present in the system path. Accepts optional flags such as --parallelism for controlling concurrency, and --no-stack-validate to skip unit validation; outputs generated stacks as directories containing terragrunt.hcl files. Note: Absolute paths are not supported as arguments, and path validation applies unless overridden.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/generate.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack generate\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Remote State Backend Options in Terragrunt HCL\nDESCRIPTION: This HCL snippet configures GCS-specific options within the `remote_state` block in a Terragrunt `root.hcl` file. It shows how to potentially skip bucket versioning for GCS-compatible stores, disable uniform bucket-level access using `enable_bucket_policy_only`, and specify a Google-managed encryption key via `encryption_key`. The `skip_bucket_versioning` and `enable_bucket_policy_only` options are Terragrunt-specific configuration used when Terragrunt automatically creates the GCS bucket.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n # ...\n\n skip_bucket_versioning = true # use only if the object store does not support versioning\n\n enable_bucket_policy_only = false # use only if uniform bucket-level access is needed (https://cloud.google.com/storage/docs/uniform-bucket-level-access)\n\n encryption_key = \"GOOGLE_ENCRYPTION_KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmark Tests with Memory Profiling (Bash/Go)\nDESCRIPTION: This command runs Go benchmark tests matching `BenchmarkSomeFunction` and includes the `-benchmem` flag. This flag instructs the Go testing framework to report memory allocation statistics (allocations per operation and bytes allocated per operation) alongside the time-based benchmark results, providing developers insights into memory usage.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench=BenchmarkSomeFunction -benchmem\n```\n\n----------------------------------------\n\nTITLE: Filtering Terragrunt Logs for a Second Unit using grep in Bash\nDESCRIPTION: Similar to the previous example, this snippet shows filtering the combined log file (`logs`) to display only the output related to `unit2`. This reinforces the technique of using `grep` to separate and view logs from concurrently executed Terragrunt modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ grep '\\[unit2\\]' < logs\n16:01:51.273 STDOUT [unit2] tofu: null_resource.empty: Refreshing state... [id=7532622543468447677]\n16:01:51.280 STDOUT [unit2] tofu: OpenTofu used the selected providers to generate the following execution\n16:01:51.280 STDOUT [unit2] tofu: plan. Resource actions are indicated with the following symbols:\n16:01:51.280 STDOUT [unit2] tofu: -/+ destroy and then create replacement\n16:01:51.280 STDOUT [unit2] tofu: OpenTofu will perform the following actions:\n16:01:51.280 STDOUT [unit2] tofu:   # null_resource.empty must be replaced\n16:01:51.280 STDOUT [unit2] tofu: -/+ resource \"null_resource\" \"empty\" {\n16:01:51.280 STDOUT [unit2] tofu:       ~ id       = \"7532622543468447677\" -> (known after apply)\n16:01:51.280 STDOUT [unit2] tofu:       ~ triggers = { # forces replacement\n16:01:51.280 STDOUT [unit2] tofu:           ~ \"always_run\" = \"2025-01-09T21:01:17Z\" -> (known after apply)\n16:01:51.280 STDOUT [unit2] tofu:         }\n16:01:51.280 STDOUT [unit2] tofu:     }\n16:01:51.280 STDOUT [unit2] tofu: Plan: 1 to add, 0 to change, 1 to destroy.\n16:01:51.280 STDOUT [unit2] tofu:\n16:01:51.297 STDOUT [unit2] tofu: null_resource.empty: Destroying... [id=7532622543468447677]\n16:01:51.297 STDOUT [unit2] tofu: null_resource.empty: Destruction complete after 0s\n16:01:51.300 STDOUT [unit2] tofu: null_resource.empty: Creating...\n16:01:51.301 STDOUT [unit2] tofu: null_resource.empty: Provisioning with 'local-exec'...\n16:01:51.301 STDOUT [unit2] tofu: null_resource.empty (local-exec): Executing: [\"/bin/sh\" \"-c\" \"echo 'sleeping...'; sleep 1; echo 'done sleeping'\"]\n16:01:51.303 STDOUT [unit2] tofu: null_resource.empty (local-exec): sleeping...\n16:01:52.311 STDOUT [unit2] tofu: null_resource.empty (local-exec): done sleeping\n16:01:52.312 STDOUT [unit2] tofu: null_resource.empty: Creation complete after 1s [id=6569505210291935319]\n16:01:52.322 STDOUT [unit2] tofu:\n16:01:52.322 STDOUT [unit2] tofu: Apply complete! Resources: 1 added, 0 changed, 1 destroyed.\n16:01:52.322 STDOUT [unit2] tofu:\n```\n\n----------------------------------------\n\nTITLE: Ensuring Bash Configuration File Exists for Autocomplete\nDESCRIPTION: This command creates the `.bashrc` file in the user's home directory if it doesn't already exist. This is a prerequisite step before installing Terragrunt's Bash tab completion.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntouch ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode with Environment Variables - Terragrunt CLI - Bash\nDESCRIPTION: This example enables strict mode with the environment variable 'TG_STRICT_MODE'. This variable can be set in shell sessions or CI/CD environments, causing Terragrunt to enforce strict mode for all commands within the session or script. No CLI parameter change is needed; the environment variable activates the enforcement. Input: Terragrunt invocation with the environment variable set; Output: Error on deprecated command usage. Limitations: global within that shell process.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ TG_STRICT_MODE='true' terragrunt plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Describing Project Directory Structure - tree - Markdown\nDESCRIPTION: These snippets illustrate recommended directory layouts for OpenTofu/Terraform and Terragrunt projects, helping readers visualize the separation between environments and modules. No dependencies are required to understand these structures, and no files are created or modified directly by these snippets. These are intended as documentation aids for following the project's organizational best practices.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n└── live\\n    ├── prod\\n    │   ├── app\\n    │   │   └── main.tf\\n    │   ├── mysql\\n    │   │   └── main.tf\\n    │   └── vpc\\n    │       └── main.tf\\n    ├── qa\\n    │   ├── app\\n    │   │   └── main.tf\\n    │   ├── mysql\\n    │   │   └── main.tf\\n    │   └── vpc\\n    │       └── main.tf\\n    └── stage\\n        ├── app\\n        │   └── main.tf\\n        ├── mysql\\n        │   └── main.tf\\n        └── vpc\\n            └── main.tf\n```\n\nLANGUAGE: tree\nCODE:\n```\n└── modules\\n    ├── app\\n    │   └── main.tf\\n    ├── mysql\\n    │   └── main.tf\\n    └── vpc\\n        └── main.tf\n```\n\nLANGUAGE: tree\nCODE:\n```\n└── live\\n    ├── prod\\n    │   ├── app\\n    │   │   └── terragrunt.hcl\\n    │   ├── mysql\\n    │   │   └── terragrunt.hcl\\n    │   └── vpc\\n    │       └── terragrunt.hcl\\n    ├── qa\\n    │   ├── app\\n    │   │   └── terragrunt.hcl\\n    │   ├── mysql\\n    │   │   └── terragrunt.hcl\\n    │   └── vpc\\n    │       └── terragrunt.hcl\\n    └── stage\\n        ├── app\\n        │   └── terragrunt.hcl\\n        ├── mysql\\n        │   └── terragrunt.hcl\\n        └── vpc\\n            └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Terragrunt Experiment via CLI Flag (Bash)\nDESCRIPTION: Illustrates enabling a single, specific experimental feature (e.g., `symlinks`) using the `--experiment` command-line flag followed by the experiment name. This allows users to test individual features without enabling all experiments. Requires the Terragrunt CLI.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/06-experiments.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --experiment symlinks\n```\n\n----------------------------------------\n\nTITLE: Generated terragrunt.hcl with Git/SSH Source - HCL\nDESCRIPTION: This HCL snippet is an example output from the scaffold command when the --var=SourceUrlType=git-ssh option is used. It generates a terragrunt.hcl specifying a git SSH source for the Terraform module enabling secure, credential-based repository access. The snippet illustrates the 'terraform' block with 'source' set to an SSH-formatted repository URL and a specified git tag or ref. This configuration requires the user to have SSH keys set up with appropriate repository access. The file is ready to be used with Terragrunt for managing infrastructure deployments with private repositories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/06-scaffold.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\nterraform {\n  source = \"git::ssh://git@github.com/gruntwork-io/terragrunt.git//test/fixtures/inputs?ref=v0.68.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remote State Backend Configuration for GCS in Terragrunt (HCL)\nDESCRIPTION: Configures the remote backend in Terragrunt to use Google Cloud Storage (GCS) for storing state files. Specifies GCP project, location, bucket, custom labels, and a path prefix for state files, dynamically generated with path_relative_to_include(). Automatically creates the GCS bucket if it does not exist. Depends on Terragrunt and access to the given GCP project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\n# And the following is defined in the root terragrunt.hcl config that is included in the child, the state file for the\n# child module will be stored at the key \"child/tofu.tfstate\".\n#\n# Note that since we are not using any of the skip args, this will automatically create the GCS bucket\n# \"my-tofu-state\" if it does not already exist.\nremote_state {\n  backend = \"gcs\"\n\n  config = {\n    project  = \"my-tofu\"\n    location = \"eu\"\n    bucket   = \"my-tofu-state\"\n    prefix   = \"${path_relative_to_include()}/tofu.tfstate\"\n\n    gcs_bucket_labels = {\n      owner = \"terragrunt_test\"\n      name  = \"tofu_state_storage\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Strict Control via CLI Flag - Terragrunt CLI - Bash\nDESCRIPTION: This snippet enables a targeted strict control using the '--strict-control' flag set to 'plan-all', so only uses of the deprecated 'plan-all' command cause errors. Useful for gradual adoption in CI/CD or development. Dependencies: Terragrunt CLI, optional configuration. Input: CLI invocation with the targeted flag; Output: Error feedback if that deprecated control is invoked.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all\n15:26:08.585 WARN   The `plan-all` command is deprecated and will be removed in a future version. Use `terragrunt run-all plan` instead.\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all --strict-control plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Skipping Dependency Outputs in Terragrunt with HCL\nDESCRIPTION: Shows how to define a dependency (`vpc`) in `mysql/terragrunt.hcl` while explicitly preventing Terragrunt from attempting to load its outputs using the `skip_outputs = true` attribute. This configuration is useful when the outputs of the dependency are not required by the current module or when trying to avoid errors if the dependency's state is unavailable.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# mysql/terragrunt.hcl\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  skip_outputs = true\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt with Provider Cache - Shell\nDESCRIPTION: Demonstrates how to run Terragrunt with the provider cache activated using direct CLI arguments such as --provider-cache-host, --provider-cache-port, and --provider-cache-token. Requires Terragrunt to be installed and accessible on the system. The key parameters specify the remote host, port, and authentication token. The command expects no piped input and performs an apply operation with the configured cache settings.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply \\\n--provider-cache \\\n--provider-cache-host 192.168.0.100 \\\n--provider-cache-port 5758 \\\n--provider-cache-token my-secret\n```\n\n----------------------------------------\n\nTITLE: Using Terragrunt After Hook for Post-Apply Smoke Testing in HCL\nDESCRIPTION: Configures an `after_hook` in `terragrunt.hcl` to execute a smoke test script (`./smoke_test.sh`) after the `apply` command finishes. The `run_on_error = true` ensures the hook runs even if the `apply` failed, potentially allowing for cleanup or specific error reporting. This demonstrates using hooks for post-deployment validation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  after_hook \"smoke_test\" {\n    commands     = [\"apply\"]\n    execute      = [\"./smoke_test.sh\"]\n    run_on_error = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating terragrunt.hcl File in Project Subdirectory - Bash\nDESCRIPTION: This code uses the Bash 'touch' command to create an empty terragrunt.hcl in the 'foo' subdirectory, effectively preparing that directory to be managed by Terragrunt. Running this command is necessary for enabling Terragrunt's features in the same location as your main OpenTofu/Terraform configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch foo/terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Including Root Terragrunt Configuration with find_in_parent_folders (Terragrunt, HCL)\nDESCRIPTION: This code snippet demonstrates including a root Terragrunt configuration by using the find_in_parent_folders helper function without arguments. It relies on Terragrunt's default lookup for 'terragrunt.hcl' in parent folders. To work correctly, the file structure must have a terragrunt.hcl at the root. The include block allows child configurations to inherit or reference shared configuration defined at the root. Ensure that Terragrunt and HCL are properly installed to utilize this pattern.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/01-migrating-from-root-terragrunt-hcl.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# /some/path/terragrunt.hcl\\ninclude \\\"root\\\" {\\n  path = find_in_parent_folders()\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Destroying All Terragrunt Units in a Stack (Bash)\nDESCRIPTION: Provides the command sequence to navigate to the root directory and destroy all resources managed by Terragrunt units within the stack. This command executes `terragrunt destroy` for each unit, including dependencies unless specific flags like `--terragrunt-ignore-external-dependencies` are used.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd root\nterragrunt run-all destroy\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt run-all within a Nested Stack in Shell\nDESCRIPTION: Demonstrates how to target a specific nested stack (e.g., `us-east-1`) for Terragrunt operations. By changing the current working directory (`cd`) into the nested stack's directory before running `terragrunt run-all apply`, the command's execution scope is limited to the modules within that stack and its children. This is a common technique for controlling the blast radius of infrastructure changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ncd root/us-east-1\nterragrunt run-all apply\n```\n\n----------------------------------------\n\nTITLE: Using Inputs Debug Flag in Terragrunt Plan Command - Bash\nDESCRIPTION: Depicts the migration to the --inputs-debug flag, replacing the deprecated debugging flag for Terragrunt plan. This command triggers debug logging for inputs; rollout requires updated Terragrunt CLI versions and alignment to new flag standards.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --inputs-debug\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variable with AWS Caller Identity User ID using HCL\nDESCRIPTION: This HCL snippet passes the User ID of the current AWS caller identity as an input variable (`caller_user_id`) to the Terraform module. It uses the `get_aws_caller_identity_user_id()` function within the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  caller_user_id = get_aws_caller_identity_user_id()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Plan Command Across Stack Units with Terragrunt CLI\nDESCRIPTION: Executes the 'plan' operation for each unit specified in the 'terragrunt.stack.hcl' file. Requires Terragrunt installed and a properly configured stack file. The command iterates over all stack units, performing a Terraform/OpenTofu plan for each, returning a preview of infrastructure changes without applying them. Input: None. Output: Plan results per unit. Ensures stack is generated before running.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/run.mdx#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nterragrunt stack run plan\n```\n\n----------------------------------------\n\nTITLE: Defining Locals and Inputs in Terragrunt Configuration - HCL\nDESCRIPTION: Demonstrates a simple Terragrunt configuration using HCL that defines a local variable 'aws_region' and assigns it to an input variable. It requires Terragrunt and a valid HCL syntax. This snippet sets up configuration locals and maps them to the inputs, and serves as the source file for subsequent render operations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/render.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  aws_region = \"us-east-1\"\n}\n\ninputs = {\n  aws_region = local.aws_region\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Parallelism Level using HCL\nDESCRIPTION: This HCL snippet configures the parallelism for applicable Terraform commands using `extra_arguments`. It retrieves the list of commands supporting the `-parallelism` flag with `get_terraform_commands_that_need_parallelism()` and sets the parallelism level to 5.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Force OpenTofu/Terraform to run with reduced parallelism\n  extra_arguments \"parallelism\" {\n    commands  = get_terraform_commands_that_need_parallelism()\n    arguments = [\"-parallelism=5\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Terragrunt with Private Git Repository via SSH URL (HCL)\nDESCRIPTION: This HCL snippet configures a terragrunt.hcl to source Terraform modules from a private Git repository using an SSH-based URL. SSH authentication must be enabled and configured for the executing user or CI process. This approach is required for non-public repositories and leverages SSH agent or pre-shared keys for Git access.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\\nterraform {\\n  source = \"git@github.com:foo/modules.git//path/to/module?ref=v0.0.1\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Backend Infrastructure via Terragrunt CLI (Bash)\nDESCRIPTION: This command line example shows how to invoke backend resource provisioning using the Terragrunt bootstrap command. It depends on Terragrunt being installed and accessible in the user's PATH, as well as a properly configured remote_state block. The primary input is the command itself, which provisions AWS resources as described in configuration files. Outputs include creation or updating of S3 buckets and DynamoDB tables required for backend state. The command is idempotent and safe for repeated invocations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/bootstrap.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt backend bootstrap\n```\n\n----------------------------------------\n\nTITLE: Declaring S3 Backend Block in Terraform - Terraform - HCL\nDESCRIPTION: This snippet defines a minimal S3 backend configuration block inside a child Terraform module (main.tf). It allows Terraform to utilize S3 as the remote state backend when invoked. The backend does not declare details directly here; Terragrunt passes actual backend configuration dynamically. This file must exist to enable remote state integration when using Terragrunt with Terraform/OpenTofu as the underlying engine.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\n# child/main.tf\nterraform {\n  backend \"s3\" {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Backend in Child Main.tf (HCL)\nDESCRIPTION: Specifies in Terraform configuration to use the S3 backend, complementing Terragrunt's remote_state configuration. Assumes all necessary configuration is inherited or injected via parent configuration or Terragrunt templates.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_29\n\nLANGUAGE: hcl\nCODE:\n```\n# child/main.tf\nterraform {\n  backend \"s3\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and merging variables from an external HCL config with read_terragrunt_config\nDESCRIPTION: Shows use of read_terragrunt_config to import a map of variables from another Terragrunt HCL file (such as common.hcl), which can then be merged with additional values. Requires the referenced HCL file to exist and be accessible. Inputs: path to a valid HCL config. Output: injected or extended input values.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_24\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  common_vars = read_terragrunt_config(find_in_parent_folders(\"common.hcl\"))\n}\n\ninputs = merge(\n  local.common_vars.inputs,\n  {\n    # additional inputs\n  }\n)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Another AWS Region Locally using HCL (Terragrunt / Terraform)\nDESCRIPTION: Defines the local variable 'region' as 'us-west-2' in the 'us-west-2/region.hcl' file. Enables all included configurations to dynamically detect that the deployment region is now AWS us-west-2. Same usage and requirements as the us-east-1 example.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_28\n\nLANGUAGE: hcl\nCODE:\n```\n# us-west-2/region.hcl\\nlocals {\\n  region = \\\"us-west-2\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the --source option with Terragrunt plan (Bash)\nDESCRIPTION: This example demonstrates how to use the `--source` command-line argument with the `terragrunt run plan` command. Terragrunt will download the configuration from the specified GitHub URL (`github.com/example/infrastructure//modules/vpc`) into a temporary directory and then execute `terraform plan` within that directory. This overrides any `source` parameter set in the Terragrunt configuration files and is useful for testing module changes or using specific versions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/source.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterragrunt run plan --source github.com/example/infrastructure//modules/vpc\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Common App Configuration for Environments (HCL)\nDESCRIPTION: This snippet contains a shared app configuration block, moved to a common '_env' folder for DRY purposes. It configures the Terraform source, dependencies, and standard input parameters used by multiple environments. The env-specific value is intentionally omitted to be set by the including config; this file assumes sibling context for dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# _env/app.hcl\nterraform {\n  source = \"github.com/<org>/modules.git//app?ref=v0.1.0\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ninputs = {\n  basename       = \"example-app\"\n  vpc_id         = dependency.vpc.outputs.vpc_id\n  subnet_ids     = dependency.vpc.outputs.subnet_ids\n  mysql_endpoint = dependency.mysql.outputs.endpoint\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running AWS-Tagged Terragrunt Tests in Go\nDESCRIPTION: Executes specific Terragrunt tests (matching 'TestAwsInitHookNoSourceWithBackend') that require the 'aws' build tag. The `GOFLAGS` environment variable is used to pass the `-tags=aws` flag to the Go test command, enabling tests that interact with AWS services or require AWS credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nGOFLAGS='-tags=aws' go test -run 'TestAwsInitHookNoSourceWithBackend' .\n```\n\n----------------------------------------\n\nTITLE: Example Terragrunt/Terraform/OpenTofu Command Invocations (Shell)\nDESCRIPTION: Shows generic command invocation patterns for Terragrunt, Terraform, and OpenTofu as mentioned in the documentation context. Terragrunt wraps the execution of Terraform/OpenTofu commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Generic command patterns\nterragrunt <command>\ntofu <command>\nterraform <command>\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Role Assumption in terragrunt.hcl (HCL)\nDESCRIPTION: Shows how to configure OIDC role assumption within `terragrunt.hcl` using the `iam_role` attribute and the `iam_web_identity_token` attribute. The example uses the `get_env` function to fetch the OIDC token from an environment variable named `AN_OIDC_TOKEN`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\niam_role = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\niam_web_identity_token = get_env(\"AN_OIDC_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Apply Across All Modules - Shell/Bash\nDESCRIPTION: This snippet demonstrates execution of 'terragrunt run-all apply' to provision resources, showing how Terragrunt processes the dependency stack. The output logs the module order processing and prompts for user confirmation, ensuring that dependencies are correctly ordered prior to resource creation. Requires Terragrunt, valid AWS credentials, and an existing project structure. The command takes no parameters and outputs the resource creation log including user prompts.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all apply\n16:57:32.297 INFO   The stack at . will be processed in the following order for command apply:\nGroup 1\n- Module ./vpc\n\nGroup 2\n- Module ./ec2\n\n\nAre you sure you want to run 'terragrunt apply' in each folder of the stack described above? (y/n)\n```\n\n----------------------------------------\n\nTITLE: Changing the Working Directory for Find Command (CLI, Bash)\nDESCRIPTION: Demonstrates setting an alternative working directory for `terragrunt find` using the `--working-dir` flag. The specified path is searched recursively for configurations. Useful for scripting and automation that need to operate on directories other than the present one.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --working-dir=/path/to/working/dir\n```\n\n----------------------------------------\n\nTITLE: Creating terragrunt.hcl File using Shell Command - Shell/Bash\nDESCRIPTION: This code snippet demonstrates how to create an empty Terragrunt configuration file (terragrunt.hcl) in your project directory using the Unix shell 'touch' command. This file enables Terragrunt's auto-init and integration features within your OpenTofu or Terraform project. There are no required dependencies besides a Unix-like shell and filesystem permissions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntouch terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Run-All with Enriched Logging in Bash\nDESCRIPTION: This example executes `terragrunt run-all plan` to run the plan command across multiple modules (`unit-1` and `unit-2`) concurrently. The output demonstrates Terragrunt's log enrichment feature, where messages from the underlying OpenTofu tool are prefixed with the module name (e.g., `[unit-2]`, `[unit-1]`). This enrichment makes it easier to track the progress and output of individual modules when running commands across a stack.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\n14:27:45.359 INFO   The stack at . will be processed in the following order for command plan:\nGroup 1\n- Module ./unit-1\n- Module ./unit-2\n\n\n14:27:45.399 INFO   [unit-2] tofu: Initializing the backend...\n14:27:45.399 INFO   [unit-1] tofu: Initializing the backend...\n14:27:45.400 INFO   [unit-2] tofu: Initializing provider plugins...\n14:27:45.400 INFO   [unit-2] tofu: OpenTofu has been successfully initialized!\n14:27:45.400 INFO   [unit-2] tofu:\n14:27:45.400 INFO   [unit-2] tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n14:27:45.400 INFO   [unit-2] tofu: any changes that are required for your infrastructure. All OpenTofu commands\n14:27:45.400 INFO   [unit-2] tofu: should now work.\n14:27:45.400 INFO   [unit-2] tofu: If you ever set or change modules or backend configuration for OpenTofu,\n14:27:45.400 INFO   [unit-2] tofu: rerun this command to reinitialize your working directory. If you forget, other\n14:27:45.400 INFO   [unit-2] tofu: commands will detect it and remind you to do so if necessary.\n14:27:45.400 INFO   [unit-1] tofu: Initializing provider plugins...\n14:27:45.400 INFO   [unit-1] tofu: OpenTofu has been successfully initialized!\n14:27:45.400 INFO   [unit-1] tofu:\n14:27:45.400 INFO   [unit-1] tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n14:27:45.400 INFO   [unit-1] tofu: any changes that are required for your infrastructure. All OpenTofu commands\n14:27:45.400 INFO   [unit-1] tofu: should now work.\n14:27:45.400 INFO   [unit-1] tofu: If you ever set or change modules or backend configuration for OpenTofu,\n14:27:45.400 INFO   [unit-1] tofu: rerun this command to reinitialize your working directory. If you forget, other\n14:27:45.400 INFO   [unit-1] tofu: commands will detect it and remind you to do so if necessary.\n14:27:45.422 STDOUT [unit-2] tofu: No changes. Your infrastructure matches the configuration.\n14:27:45.423 STDOUT [unit-2] tofu: OpenTofu has compared your real infrastructure against your configuration and\n14:27:45.423 STDOUT [unit-2] tofu: found no differences, so no changes are needed.\n14:27:45.423 STDOUT [unit-1] tofu: No changes. Your infrastructure matches the configuration.\n14:27:45.423 STDOUT [unit-1] tofu: OpenTofu has compared your real infrastructure against your configuration and\n14:27:45.423 STDOUT [unit-1] tofu: found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Combining custom var files and lock arguments with multiple extra_arguments blocks (HCL)\nDESCRIPTION: This HCL example illustrates configuring more than one extra_arguments block. One block uses get_terraform_commands_that_need_locking() to apply a retry lock timeout, while a second block targets several commands to insert custom -var key/value pairs. The blocks are applied in the order listed when matched commands are invoked. Requires Terragrunt and proper file structure for referenced files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Force OpenTofu/Terraform to keep trying to acquire a lock for\n  # up to 20 minutes if someone else already has the lock\n  extra_arguments \"retry_lock\" {\n    commands  = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock-timeout=20m\"]\n  }\n\n  # Pass custom var files to OpenTofu/Terraform\n  extra_arguments \"custom_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    arguments = [\n      \"-var\", \"foo=bar\",\n      \"-var\", \"region=us-west-1\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Deriving Region and Configuring Backend/Provider in HCL\nDESCRIPTION: This `root.hcl` configuration shows a complex, dynamic approach to setting the AWS region. It uses Terragrunt functions (`path_relative_to_include`, `split`) to derive the region from the directory structure. It also configures an S3 remote state backend and generates an AWS provider configuration file using this dynamically determined region. While powerful, this approach can reduce readability and introduce potential issues (e.g., path separators on different OS).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_36\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nlocals {\n  region = split(\"/\", path_relative_to_include())[0]\n}\n\n# Configure the remote backend\nremote_state {\n  backend = \"s3\"\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n  config = {\n    bucket = \"my-tofu-state\"\n\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n\n# Configure the AWS provider\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  region = \"${local.region}\"\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan Command via Run Wrapper - Bash\nDESCRIPTION: Demonstrates the new idiomatic method of executing the plan command within Terragrunt using the explicit run subcommand introduced by the CLI redesign. Terragrunt v0.50.0+ required. This approach may be needed for certain commands where shortcut invocation is restricted.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt with mise Tool Manager\nDESCRIPTION: This command installs a specific version of Terragrunt using the mise tool manager. Replace `<version>` with the desired Terragrunt version. Mise must be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmise install terragrunt <version>\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt Shell Autocompletion\nDESCRIPTION: This shell command runs Terragrunt with the `--install-autocomplete` flag. This command automatically detects the user's shell (Bash or Zsh) and installs the necessary configuration scripts into the corresponding shell configuration file (`.bashrc` or `.zshrc`) to enable command-line tab completion for Terragrunt commands and options.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt --install-autocomplete\n```\n\n----------------------------------------\n\nTITLE: Example Output of Terragrunt Hook Context Script\nDESCRIPTION: Shows the expected standard output when the example `hook.sh` script (accessing context variables) is executed by a Terragrunt hook named `test_hook` during an `apply` command using the `tofu` binary.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTF_PATH=tofu COMMAND=apply HOOK_NAME=test_hook\n```\n\n----------------------------------------\n\nTITLE: Using get_aws_account_id and get_terraform_commands_that_need_vars for dynamic var-file selection in HCL\nDESCRIPTION: This snippet illustrates how to apply different var-files dynamically based on the executing AWS account by combining get_aws_account_id and get_terraform_commands_that_need_vars in the extra_arguments block. It is useful for differentiating environments or account-specific configs. Prerequisite: AWS credentials; output: var-file is selected using account ID.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  extra_arguments \"common_var\" {\n    commands = get_terraform_commands_that_need_vars()\n    arguments = [\"-var-file=${get_aws_account_id()}.tfvars\"]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Case Convention (Plaintext)\nDESCRIPTION: Illustrates the `SHOUTY_SNAKE_CASE` convention used for environment variables corresponding to Terragrunt flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nSHOUTY_SNAKE_CASE\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Front Matter for Collection Docs (YAML)\nDESCRIPTION: Specifies the required YAML front matter structure for documents added to Jekyll collections managed by the Collection Browser (e.g., `_docs`). Essential fields include `layout` (must be `collection-browser-doc`), `title`, `categories`, `excerpt`, `tags`, and `order` (for sorting). Optional fields `nav_title` and `nav_title_link` control the navigation sidebar header. Fields marked with '# CHANGE THIS' require specific content.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: collection-browser-doc\ntitle: CLI options  # CHANGE THIS\ncategories:\n  - getting-started # CHANGE THIS\nexcerpt: >- # CHANGE THIS\n  Terragrunt forwards all arguments and options to OpenTofu/Terraform. Learn more about CLI options in Terragrunt.\ntags: [\"CLI\"] # CHANGE THIS\norder: 102 # CHANGE THIS\nnav_title: Documentation # OPTIONAL\nnav_title_link: /docs/ # OPTIONAL\n---\n```\n\n----------------------------------------\n\nTITLE: Selective Plan with CI/CD Using Terragrunt CLI (Bash)\nDESCRIPTION: Runs Terragrunt's run-all plan command for all modules including _env/app.hcl, using the --queue-include-units-reading flag for accurate dependency tracking. This is useful in CI/CD pipelines to efficiently plan only those modules directly or indirectly affected by configuration changes, reducing unnecessary runs. No special dependencies beyond Terragrunt CLI are needed; the flag requires Terragrunt version supporting this feature.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan --queue-include-units-reading _env/app.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform S3 Backend Block Directly (HCL)\nDESCRIPTION: This snippet shows the equivalent Terraform configuration for remote state using an S3 backend, as generated from the Terragrunt remote_state block. It defines the backend type and parameters inside the terraform block to enable OpenTofu/Terraform to use S3 for storing remote state. No dependencies are needed other than Terraform/OpenTofu; bucket, key, and region must be set appropriately.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assuming IAM Role with OIDC via Terragrunt Environment Variables (Bash)\nDESCRIPTION: Demonstrates setting the `TG_IAM_ROLE` and `TG_IAM_WEB_IDENTITY_TOKEN` environment variables for Terragrunt to perform OIDC-based role assumption using the `AssumeRoleWithWebIdentity` AWS STS API. This is commonly used in CI/CD pipelines. The token variable can hold the token or a file path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_IAM_ROLE=\"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\nexport TG_IAM_WEB_IDENTITY_TOKEN=\"$TOKEN\"\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Declaring Explicit Terragrunt Dependencies for backend-app (HCL)\nDESCRIPTION: This HCL snippet shows how to define explicit dependencies for the `backend-app` module within its `terragrunt.hcl` file. The `dependencies` block lists the relative paths to the modules that `backend-app` depends on (`../vpc`, `../mysql`, `../redis`). Terragrunt uses this information to determine the correct execution order for `run-all` commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\ndependencies {\n  paths = [\"../vpc\", \"../mysql\", \"../redis\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Assigning Remote State via Locals in Terragrunt (HCL)\nDESCRIPTION: This snippet shows how to dynamically assign a `remote_state` configuration in a Terragrunt HCL file by loading it from a centrally managed file using locals. By leveraging `read_terragrunt_config` and the local context, teams can maintain one shared configuration and reference it from multiple modules. Requires Terragrunt's HCL functions and a correctly structured shared config; input file paths and keys must be valid.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nlocals {\n  # Load the data from common.hcl\n  common = read_terragrunt_config(find_in_parent_folders(\"common.hcl\"))\n}\n\n# Set the remote_state config dynamically to the remote_state config in common.hcl\nremote_state = local.common.remote_state\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Catalog Command\nDESCRIPTION: Illustrates the basic command to invoke the Terragrunt catalog feature. Without additional flags, this command might assume the default behavior related to finding a root `terragrunt.hcl` file when generating new units.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Provider Cache Directory via Environment Variable\nDESCRIPTION: This command demonstrates setting a custom provider cache directory using the `TG_PROVIDER_CACHE_DIR` environment variable, while also enabling the cache via `TG_PROVIDER_CACHE=1`. This provides an environment variable-based alternative to the `--provider-cache-dir` flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 \\\nTG_PROVIDER_CACHE_DIR=/new/path/to/cache/dir \\\nterragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Piping HCL to Terragrunt for Formatting (Bash)\nDESCRIPTION: This Bash command demonstrates piping a simple HCL 'locals' block using 'echo' to the 'terragrunt hcl fmt' command with the '--stdin' flag enabled. Terragrunt reads the HCL from standard input, formats it according to HCL standards, and prints the formatted result to standard output. This requires Terragrunt to be installed and available in the system's PATH.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-fmt-stdin.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho 'locals { foo=\"bar\" }' | terragrunt hcl fmt --stdin\n```\n\n----------------------------------------\n\nTITLE: Overriding Remote Module Sources with Local Path in Terragrunt\nDESCRIPTION: Shows how to use the `terragrunt run --all plan` command with the `--source` flag for local development and testing. This flag overrides the remote module `source` URLs (e.g., Git URLs) specified in the `terragrunt.hcl` files of the units being processed. Instead of downloading remote modules, Terragrunt will use the corresponding module code found within the local directory structure specified by `/source/modules`. The command first changes directory to `root` before running the `run --all` command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd root\nterragrunt run --all plan --source /source/modules\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Cache Directory with Terragrunt (YAML)\nDESCRIPTION: This YAML snippet defines the configuration for the 'provider-cache-dir' variable in Terragrunt, specifying the path for cached provider files. It outlines the variable's type, description, default behavior, and the environment variable that can be used to override it (TG_PROVIDER_CACHE_DIR). The setting is utilized only when the Provider Cache Server is enabled and must be provided as a string representing the filesystem path for the provider cache folder.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/provider-cache-dir.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nname: provider-cache-dir\ndescription: The path to the Terragrunt provider cache directory. By default, 'terragrunt/providers' folder in the user cache directory.\ntype: string\nenv:\n  - TG_PROVIDER_CACHE_DIR\n---\n```\n\n----------------------------------------\n\nTITLE: Exclude Block for Allowing Only Output Actions - Terragrunt HCL\nDESCRIPTION: Configures the 'exclude' block to skip all actions except 'output', allowing output evaluation even when other operations are blocked. Dependencies remain unaffected. This is useful for cases where outputs must still be retrieved despite operational locking or costly updates. The 'actions' attribute is set to 'all_except_output'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_57\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nexclude {\n    if = true                       # Explicitly exclude.\n    actions = [\"all_except_output\"] # Allow `output` actions nonetheless.\n    exclude_dependencies = false    # Dependencies remain active.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Starlight Aside Component in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the 'Aside' component from the '@astrojs/starlight/components' package using JavaScript. The 'Aside' component is likely used to provide important notes or warnings in the documentation. The snippet assumes that the Starlight framework and its components are installed as dependencies in the project. Ensure that your environment supports ECMAScript module imports and that '@astrojs/starlight' is listed in your package.json.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/download-dir.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Exclude Block for Development Environments - Terragrunt HCL\nDESCRIPTION: Defines a conditional exclusion for all actions and dependencies when a feature flag 'is_dev_environment' indicates a development environment. This practice helps in managing environment-specific deployment workflows. 'exclude_dependencies' is set to true to cascade the exclusion to dependent units. Requires the 'feature.is_dev_environment' flag to exist in context.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_56\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nexclude {\n    if = feature.is_dev_environment.value # Exclude only for development environments.\n    actions = [\"all\"]                     # Exclude all actions.\n    exclude_dependencies = true           # Exclude dependencies along with the unit.\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Terragrunt Stack Plans in Both Binary and JSON Formats\nDESCRIPTION: Illustrates how to save Terraform plan outputs in both binary (`tfplan.tfplan`) and JSON (`tfplan.json`) formats simultaneously for each unit within a stack. This is achieved by using both the `--out-dir` and `--json-out-dir` flags with the `terragrunt run --all plan` command, potentially pointing them to the same output directory (`/tmp/all` in this example). This allows for applying the binary plan while also having the JSON version available for programmatic analysis or review.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all --out-dir /tmp/all --json-out-dir /tmp/all plan\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt with Debug Flags - Shell\nDESCRIPTION: This shell command runs Terragrunt with additional debug flags (`--log-level debug --debug-inputs`) when applying infrastructure changes. It produces verbose logging and generates a `terragrunt-debug.tfvars.json` file in the working directory, which can be used to replicate and debug input values passed to OpenTofu/Terraform. Requires Terragrunt to be installed in the user's environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/01-debugging.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply --log-level debug --debug-inputs\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Environment Variables for Grafana Tempo OTLP HTTP Export\nDESCRIPTION: These environment variable export commands configure Terragrunt to send traces to a Grafana Tempo instance using the OTLP HTTP exporter. `TG_TELEMETRY_TRACE_EXPORTER=otlpHttp` specifies the standard OTLP HTTP exporter. `OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318` sets the endpoint for the Tempo OTLP receiver (adjust the URL/port as needed for your Tempo setup). `TG_TELEMETRY_TRACE_EXPORTER_INSECURE_ENDPOINT=true` allows sending data over HTTP without TLS verification, often used for local testing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_TRACE_EXPORTER=otlpHttp\n# Replace with your tempo instance\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\nexport TG_TELEMETRY_TRACE_EXPORTER_INSECURE_ENDPOINT=true\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Flag 'dependency-fetch-output-from-state' (YAML)\nDESCRIPTION: Defines the Terragrunt flag `dependency-fetch-output-from-state` using YAML frontmatter. This boolean flag controls whether Terragrunt fetches dependency outputs directly from the state file (if true) or uses `tofu output` (if false). It also specifies the corresponding environment variable `TG_DEPENDENCY_FETCH_OUTPUT_FROM_STATE`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/dependency-fetch-output-from-state.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: dependency-fetch-output-from-state\ndescription: |\n  Fetch dependency outputs directly from the state file instead of using `tofu output`.\ntype: bool\nenv:\n  - TG_DEPENDENCY_FETCH_OUTPUT_FROM_STATE\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Terraform Module Source in Terragrunt (HCL)\nDESCRIPTION: This HCL configuration snippet demonstrates how to define a remote Terraform module source within a `terragrunt.hcl` file. The `terraform` block specifies the `source` attribute pointing to a Git repository URL, including the specific path (`//networking/vpc`) and version (`?ref=v0.0.1`) of the module to use. Terragrunt will download this module into its cache directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/06-lock-files.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# live/stage/vpc/terragrunt.hcl\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//networking/vpc?ref=v0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Configurations Using Terragrunt CLI - Bash\nDESCRIPTION: This set of bash command examples demonstrates how to use the 'terragrunt list' command to display Terragrunt configurations from a repository. Examples show the use of various flags such as '-l', '-T', '--dependencies', '--dag', and '--queue-construct-as' to alter the format and dependency ordering of the output. No external dependencies are required beyond a working Terragrunt environment, and all commands should be run in a shell where 'terragrunt' is installed. The inputs are the command-line flags, and outputs are formatted text listings of configuration paths, types, and their relationships.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/list.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list\nlive/dev/db    live/dev/ec2   live/dev/vpc\nlive/prod/db   live/prod/ec2  live/prod/vpc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l\nType  Path\nunit  live/dev/db\nunit  live/dev/ec2\nunit  live/dev/vpc\nunit  live/prod/db\nunit  live/prod/ec2\nunit  live/prod/vpc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -T\n.\n╰── live\n    ├── dev\n    │   ├── db\n    │   ├── ec2\n    │   ╰── vpc\n    ╰── prod\n        ├── db\n        ├── ec2\n        ╰── vpc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l --dependencies\nType  Path           Dependencies\nunit  live/dev/db    live/dev/vpc\nunit  live/dev/ec2   live/dev/db, live/dev/vpc\nunit  live/dev/vpc\nunit  live/prod/db   live/prod/vpc\nunit  live/prod/ec2  live/prod/db, live/prod/vpc\nunit  live/prod/vpc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l --dag --dependencies\nType  Path          Dependencies\nunit  b-dependency\nunit  a-dependent   b-dependency\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list --queue-construct-as=plan\nstacks/live/dev      stacks/live/prod     units/live/dev/vpc\nunits/live/prod/vpc  units/live/dev/db    units/live/prod/db\nunits/live/dev/ec2   units/live/prod/ec2\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list --queue-construct-as=destroy\nstacks/live/dev      stacks/live/prod     units/live/dev/ec2\nunits/live/prod/ec2  units/live/dev/db    units/live/prod/db\nunits/live/dev/vpc   units/live/prod/vpc\n```\n\nLANGUAGE: bash\nCODE:\n```\n.\n╰── live\n    ├── dev\n    │   ├── db\n    │   ├── ec2\n    │   ╰── vpc\n    ╰── prod\n        ├── db\n        ├── ec2\n        ╰── vpc\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Default alphabetical order\n$ terragrunt list\na-dependent b-dependency\n\n# DAG mode order\n$ terragrunt list --dag\nb-dependency a-dependent\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list --tree --dag\n.\n├── live/dev/vpc\n│   ├── live/dev/db\n│   │   ╰── live/dev/ec2\n│   ╰── live/dev/ec2\n╰── live/prod/vpc\n    ├── live/prod/db\n    │   ╰── live/prod/ec2\n    ╰── live/prod/ec2\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list --queue-construct-as=plan\nstacks/live/dev      stacks/live/prod     units/live/dev/vpc\nunits/live/prod/vpc  units/live/dev/db    units/live/prod/db\nunits/live/dev/ec2   units/live/prod/ec2\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list --queue-construct-as=destroy\nstacks/live/dev      stacks/live/prod     units/live/dev/ec2\nunits/live/prod/ec2  units/live/dev/db    units/live/prod/db\nunits/live/dev/vpc   units/live/prod/vpc\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt list --working-dir=/path/to/working/dir\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure for Multiple Terraform Modules\nDESCRIPTION: Shows a directory layout for a project using separate Terraform modules for different components (backend-app, frontend-app, mysql, vpc). This structure highlights the potential for configuration duplication when managing remote state for each module individually using standard Terraform.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── backend-app\n│   └── main.tf\n├── frontend-app\n│   └── main.tf\n├── mysql\n│   └── main.tf\n└── vpc\n    └── main.tf\n```\n\n----------------------------------------\n\nTITLE: Configuring File Copying with include_in_copy/exclude_from_copy (HCL)\nDESCRIPTION: Examples illustrating the use of 'include_in_copy' and 'exclude_from_copy' attributes within the Terragrunt 'terraform' block. These attributes accept lists of glob patterns to control which files from the Terragrunt working directory or the source module directory are copied to the temporary execution directory. An explicit exclude takes precedence over an include.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # Example: Include specific hidden files from the source directory\n  include_in_copy = [\".python-version\"]\n\n  # Example: Exclude certain file types from being copied\n  exclude_from_copy = [\"*.log\", \"*.tmp\"]\n\n  # Example using a common pattern from the text\n  # include_in_copy = [\"*.txt\"] \n\n  # Note: If a file matches both include and exclude, it will be excluded.\n  # exclude_from_copy = [\"*.txt\"] \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Log Format in Shell\nDESCRIPTION: Demonstrates the basic usage of the `--log-custom-format` flag in Terragrunt. This example formats logs to show the current time (`%time`), log level (`%level`), and the log message (`%msg`), separated by spaces.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time %level %msg\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terraform Output within a Terragrunt Hook Script using Bash\nDESCRIPTION: This Bash script demonstrates using the Terraform/OpenTofu command (`output`) within a Terragrunt hook script to retrieve an output value (`bucket_name`) from the Terraform state. It utilizes the `TG_CTX_TF_PATH` environment variable to ensure the correct executable is called and then uses the AWS CLI (`aws s3 ls`) with the retrieved bucket name.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n# Get the bucket_name output from OpenTofu/Terraform state\nBUCKET_NAME=\"$(\"$TG_CTX_TF_PATH\" output -raw bucket_name)\"\n\n# Use the AWS CLI to list the contents of the bucket\naws s3 ls \"s3://$BUCKET_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Using Named Includes with `path_relative_to_include` (HCL)\nDESCRIPTION: Demonstrates how to use the `path_relative_to_include` function when the Terragrunt configuration contains multiple named `include` blocks (e.g., `root` and `region`). In such cases, the function requires an argument specifying the name of the `include` block (`\"root\"` in this example) relative to which the path should be calculated.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\ninclude \"region\" {\n  path = find_in_parent_folders(\"region.hcl\")\n}\n\nterraform {\n  source = \"../modules/${path_relative_to_include(\"root\")}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Planning Changes Across All Terragrunt Units (Bash)\nDESCRIPTION: Demonstrates the command sequence to navigate to the root directory and preview the changes for all Terragrunt units within the stack. This runs `terragrunt plan` for each unit but may exit with an error if dependencies between units have not yet been applied, preventing plan generation for dependent units.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd root\nterragrunt run-all plan\n```\n\n----------------------------------------\n\nTITLE: Defining `provider-cache-hostname` Configuration (YAML)\nDESCRIPTION: This YAML snippet defines the metadata for the `provider-cache-hostname` configuration parameter within Terragrunt. It specifies the parameter's name, a description of its purpose, its data type (string), and the associated environment variable (`TG_PROVIDER_CACHE_HOSTNAME`) that can be used to set its value.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/provider-cache-hostname.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: provider-cache-hostname\ndescription: The hostname of the Terragrunt Provider Cache server. By default, 'localhost'.\ntype: string\nenv:\n  - TG_PROVIDER_CACHE_HOSTNAME\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll Dependencies with Bundler (Bash)\nDESCRIPTION: Executes Bundler within the `docs` directory to install all Ruby gems specified in the `Gemfile` and `Gemfile.lock`. This ensures that the correct versions of Jekyll and its plugins are installed for the project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Including Dependency Information with JSON Output (CLI, Bash)\nDESCRIPTION: Runs the `terragrunt find` command with the `--dependencies` flag and outputs the result as JSON. Produces a list where each configuration includes its dependency relationships, which is critical for visualizing or programmatically enforcing correct execution order. Can be combined with other filters or output flags. Output structure includes type, path, and dependencies array for each item.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --dependencies --format 'json'\n```\n\n----------------------------------------\n\nTITLE: Disabling Lock File Copying in Terragrunt (HCL)\nDESCRIPTION: This HCL configuration snippet shows how to disable Terragrunt's default behavior of copying the `.terraform.lock.hcl` file between the working directory and the cache. Setting `copy_terraform_lock_file` to `false` within the `terraform` block prevents this copying, which can be useful when the remote module itself contains a lock file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/06-lock-files.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  ...\n  copy_terraform_lock_file = false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Stack Operations - Bash\nDESCRIPTION: This Bash snippet invokes Terragrunt to run the 'apply' operation across all units in the project using 'run-all'. Prerequisites are that Terragrunt is installed and the relevant directories ('foo', 'bar') are properly configured. There are two variants: the default interactive prompt, and the '--non-interactive' flag to run unattended. The commands must be run from a directory containing the unit directories. Expected output is that Terragrunt applies the configuration for each unit, with individualized log output. Limitations include requiring correct directory structure and configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all apply\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all --non-interactive apply\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Remote State Backend - Terragrunt - HCL\nDESCRIPTION: This snippet (partial, as shown) configures a remote_state block in Terragrunt to store state in a GCS bucket, specifying the bucket name, the GCP project, region, and applying labels. The configuration is designed for OpenTofu/Terraform with Terragrunt, requiring GCP credentials and the necessary permissions. Key parameters include bucket, project, location, and label map. Inputs result in remote state managed in GCS, with auto-creation of the bucket and labeling if needed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\n\n# Configure OpenTofu/Terraform state to be stored in GCS, in the bucket \"my-tofu-state\" in the \"my-tofu\" GCP project in\n# the eu region under a key that is relative to included terragrunt config. This will also apply the labels\n# \"owner=terragrunt_test\" and \"name=tofu_state_storage\" to the bucket if it is created by Terragrunt.\n#\n# For example, if you had the following folder structure:\n#\n# .\n# ├── root.hcl\n# └── child\n#     ├── main.tf\n#     └── terragrunt.hcl\n#\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Dependencies and Inputs in Terragrunt - HCL\nDESCRIPTION: Defines dependencies and inputs in a parent root.hcl file, providing baseline values for children to inherit or override. The dependency block points to a VPC module, and the inputs assign module outputs to variables consumable by the child configurations. The referenced outputs must persist in the VPC and MySQL modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_31\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n}\n\ninputs = {\n  vpc_id = dependency.vpc.outputs.vpc_id\n  db_id  = dependency.mysql.outputs.db_id\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Provider Configuration Using Common Include Files (HCL)\nDESCRIPTION: This HCL example shows how to define a 'generate' block in a shared HCL configuration (such as 'common.hcl') for reuse across multiple Terragrunt configurations. The generate block writes a AWS provider definition to 'provider.tf' using the overwrite strategy. This pattern aids with DRY code and enables dynamic file injection in Terragrunt via shared includes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_48\n\nLANGUAGE: hcl\nCODE:\n```\n# common.hcl\n\ngenerate \"provider\" {\n  path      = \"provider.tf\"\n  if_exists = \"overwrite\"\n  contents = <<EOF\nprovider \"aws\" {\n  region              = \"us-east-1\"\n  version             = \"= 2.3.1\"\n  allowed_account_ids = [\"1234567890\"]\n}\nEOF\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Outputs for a Specific Unit (Default Format)\nDESCRIPTION: Demonstrates retrieving all outputs specifically for the 'project1_app1' unit by providing the unit name as an argument to 'terragrunt stack output'. The output is presented in the default HCL-like format, structured under the unit's name.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt stack output project1_app1\nproject1_app1 = {\n  complex = {\n    delta     = 0.02\n    id        = 2\n    name      = \"name1\"\n    timestamp = \"2025-02-07T21:05:51Z\"\n  }\n  complex_list = [{\n    delta     = 0.02\n    id        = 10\n    name      = \"name1\"\n    timestamp = \"2025-02-07T21:05:51Z\"\n    }, {\n    delta     = 0.03\n    id        = 20\n    name      = \"name10\"\n    timestamp = \"2025-02-07T21:05:51Z\"\n  }]\n  custom_value1 = \"value1\"\n  data          = \"app1\"\n  list          = [\"1\", \"2\", \"3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Base Variables in Included Terragrunt Configuration (HCL)\nDESCRIPTION: Refactors a shared Terragrunt configuration to export the base module source URL as a local variable. This supports dynamic composition via exposed includes, making it possible for children to reference shared values without duplication. This block does not perform any configuration on its own but enables DRY referencing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# _env/app.hcl\nlocals {\n  source_base_url = \"github.com/<org>/modules.git//app\"\n}\n\n# ... other blocks and attributes omitted for brevity ...\n\n```\n\n----------------------------------------\n\nTITLE: Generating AWS Provider Configuration with Role Assumption using Terragrunt HCL\nDESCRIPTION: Defines a Terragrunt `generate` block in HCL to dynamically create a `provider.tf` file. This specific configuration sets up the AWS provider to assume a specific IAM role (`arn:aws:iam::0123456789:role/terragrunt`). The `if_exists = \"overwrite_terragrunt\"` directive ensures Terragrunt manages this file exclusively.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\ngenerate \"provider\" {\n  path = \"provider.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = <<EOF\nprovider \"aws\" {\n  assume_role {\n    role_arn = \"arn:aws:iam::0123456789:role/terragrunt\"\n  }\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Variables in terraform.tfvars (HCL)\nDESCRIPTION: This snippet provides an example of setting input variables for a Terraform module in the legacy terraform.tfvars format alongside a Terragrunt configuration. The values 'instance_type' and 'instance_count' are provided at the top-level and are automatically picked up by Terraform due to tfvars file semantics. No explicit 'inputs' mapping is required in this style.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# terraform.tfvars\\n# Terragrunt configuration\\nterragrunt = {\\n  terraform {\\n    # ...\\n  }\\n  remote_state {\\n    # ...\\n  }\\n}\\n# Input variables to set for your Terraform module\\ninstance_type  = \\\"t2.micro\\\"\\ninstance_count = 10\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Terragrunt Configuration to JSON via CLI - Bash & JSON\nDESCRIPTION: Demonstrates rendering a Terragrunt configuration as JSON using the '--format json' flag with the CLI. When run with Terragrunt installed, this returns the resolved configuration as a JSON object. Useful for programmatic processing or integration with other tools, the output contains local variables and inputs as top-level keys. Comments in the output indicate omitted fields for brevity.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/render.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt render --format json\n{\n  \"locals\": { \"aws_region\": \"us-east-1\" },\n  \"inputs\": { \"aws_region\": \"us-east-1\" }\n  // NOTE: other attributes are omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan with Mocked Outputs (Bash and Output Logs)\nDESCRIPTION: Shows the result of running 'terragrunt run-all plan' with mocked outputs enabled, where input variables referencing dependency outputs receive mock values. Logs verify that 'subnet_id' is set to 'mock-subnet' as per the mock configuration. This aids iterative development without downstream module application.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\n...\n16:53:04.037 STDOUT [ec2] tofu:       + source_dest_check                    = true\n16:53:04.037 STDOUT [ec2] tofu:       + spot_instance_request_id             = (known after apply)\n16:53:04.037 STDOUT [ec2] tofu:       + subnet_id                            = \"mock-subnet\"\n16:53:04.037 STDOUT [ec2] tofu:       + tags                                 = {\n16:53:04.038 STDOUT [ec2] tofu:           + \"Environment\" = \"dev\"\n...\n\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan Command (Terragrunt, Bash)\nDESCRIPTION: This command executes 'terragrunt plan', which runs a planning phase to show what infrastructure changes will be made by Terraform, using any Terragrunt configuration in the current directory and its hierarchy. Requires properly configured terragrunt.hcl or other config file and the needed infrastructure described. Run from the correct working directory for desired scope.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/01-migrating-from-root-terragrunt-hcl.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan\\n\n```\n\n----------------------------------------\n\nTITLE: Defining the 'force' Flag Configuration in Terragrunt (YAML)\nDESCRIPTION: This YAML snippet defines the configuration for a boolean flag named `force`. It includes a description explaining that this flag enables Terragrunt to delete backend state regardless of bucket versioning status. It also specifies the corresponding environment variable `TG_FORCE`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-delete-force.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: force\ndescription: |\n  When this flag is set, Terragrunt will delete the backend state regardless of whether the bucket containing it has versioning enabled.\ntype: bool\nenv:\n  - TG_FORCE\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring retry lock extra arguments via Terragrunt (HCL)\nDESCRIPTION: This HCL snippet configures an extra_arguments block in terragrunt.hcl to add the '-lock-timeout=20m' argument and a TF_VAR environment variable to a set of Terraform/OpenTofu commands. It defines which commands the extra arguments should apply to and sets an environment variable for those executions. Requires Terragrunt and is meant to be placed in terragrunt.hcl. The block expects command names, argument lists, and environment variables as key-value pairs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Force OpenTofu/Terraform to keep trying to acquire a lock for\n  # up to 20 minutes if someone else already has the lock\n  extra_arguments \"retry_lock\" {\n    commands = [\n      \"init\",\n      \"apply\",\n      \"refresh\",\n      \"import\",\n      \"plan\",\n      \"taint\",\n      \"untaint\"\n    ]\n\n    arguments = [\n      \"-lock-timeout=20m\"\n    ]\n\n    env_vars = {\n      TF_VAR_var_from_environment = \"value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Outputs of Terragrunt Run-All Apply with Conditional Var Files (Bash)\nDESCRIPTION: These Bash snippets show the resulting OpenTofu/Terraform `apply` commands executed by `terragrunt run-all apply` under different environment variable settings (`TF_VAR_env`, `TF_VAR_region`), corresponding to the `required_var_files` and `optional_var_files` configuration. They demonstrate how Terragrunt dynamically constructs the `-var-file` arguments based on existing files and environment context for each module (`backend-app`, `frontend-app`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all apply\n[backend-app]  tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/backend-app/dev.tfvars\n[frontend-app] tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/frontend-app/us-east-1.tfvars\n\n$ TF_VAR_env=prod terragrunt run-all apply\n[backend-app]  tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars\n[frontend-app] tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars -var-file=/my/tf/frontend-app/us-east-1.tfvars\n\n$ TF_VAR_env=prod TF_VAR_region=us-west-2 terragrunt run-all apply\n[backend-app]  tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars -var-file=/my/tf/us-west-2.tfvars\n[frontend-app] tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars -var-file=/my/tf/us-west-2.tfvars\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated S3 Backend Configuration (Terraform HCL)\nDESCRIPTION: This snippet shows the typical content of a `backend.tf` file generated by Terragrunt when using an S3 remote state backend. It defines a `terraform` block specifying the `s3` backend type and includes configuration details like the bucket name, DynamoDB table for locking, encryption status, state file key, and AWS region, derived from the `remote_state` block in the corresponding `terragrunt.hcl` file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    dynamodb_table = \"my-lock-table\"\n    encrypt        = true\n    key            = \"tofu.tfstate\"\n    region         = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags via Environment Variables - Terragrunt Bash\nDESCRIPTION: Demonstrates how to set Terragrunt feature flags using the 'TG_FEATURE' environment variable before executing commands. This approach applies feature flag configuration globally or for the duration of the shell session, supporting both single and multiple flag assignments. Requires Terragrunt CLI and shell access. Key inputs are the environment variable assignments and the feature flag pairs; outputs are dynamic feature-driven behaviors during Terragrunt runs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_FEATURE=run_hook=true\nterragrunt apply\n\nexport TG_FEATURE=run_hook=true,string_flag=dev\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Referencing Locals From Another HCL File in Unit Configuration - HCL\nDESCRIPTION: Loads local variables from a parent region.hcl file, accesses its local, and uses it in the inputs block. Demonstrates the pattern of modular configuration by reusing values from external HCL definitions. Depends on the region.hcl file being accessible in the path hierarchy.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_39\n\nLANGUAGE: hcl\nCODE:\n```\n# unit/terragrunt.hcl\n\nlocals {\n  # Load the data from region.hcl\n  region_hcl = read_terragrunt_config(find_in_parent_folders(\"region.hcl\"))\n\n  # Access the region from the loaded file\n  region = local.region_hcl.locals.region\n}\n\ninputs = {\n  bucket_name = \"${local.region}-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assuming IAM Role via Terragrunt Environment Variable (Bash)\nDESCRIPTION: Shows setting the `TG_IAM_ROLE` environment variable to specify the AWS IAM role Terragrunt should assume. Terragrunt checks this variable if the `--iam-role` CLI argument is not provided.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_IAM_ROLE=\"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Example Terragrunt Project File Structure\nDESCRIPTION: Illustrates a typical file structure for a Terragrunt project with multiple modules (backend-app, frontend-app, mysql, redis, vpc), each containing its own Terraform code (`main.tf`) and Terragrunt configuration (`terragrunt.hcl`). This structure is used as context for demonstrating explicit dependency declarations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nroot\n├── backend-app\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── frontend-app\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── mysql\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── redis\n│   ├── main.tf\n│   └── terragrunt.hcl\n└── vpc\n    ├── main.tf\n    └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Explicitly Running Tofu/Terraform Workspace List via Terragrunt Run Subcommand - Bash\nDESCRIPTION: Shows how to invoke underlying tool commands (such as workspace ls) that do not have shortcut support in the Terragrunt CLI by using the run subcommand. Use when a direct Terragrunt shortcut does not exist, and ensure the installed Terragrunt version aligns with CLI redesign features.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run workspace ls\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Output Option - Terragrunt - YAML\nDESCRIPTION: Defines a configuration block specifying a JSON output option for Terragrunt's validation command. This YAML snippet adds a boolean flag and specifies an environment variable (TG_HCLVALIDATE_JSON) enabling programmatic control. It serves as a configuration prerequisite for the command line usage that follows. No required parameters besides the boolean itself, and no constraints beyond YAML syntax.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-validate-json.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\\nname: json\\ndescription: Output the result in JSON format.\\ntype: bool\\nenv:\\n  - TG_HCLVALIDATE_JSON\\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Engine Feature - Shell\nDESCRIPTION: Exports an environment variable in the shell to enable the experimental IaC engine capability in Terragrunt. This is necessary for any terragrunt.hcl configuration that uses the engine block. No code dependencies; must be set in user shell or process environment prior to running Terragrunt. There are no input parameters; the command simply enables the feature. Output is allowing Terragrunt to accept engine configuration blocks for run-time customization.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/13-engine.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport TG_EXPERIMENTAL_ENGINE=1\n```\n\n----------------------------------------\n\nTITLE: Migrated Syntax for Running All Plan Operations with New --all Flag - Bash\nDESCRIPTION: Shows the migration path to the new Terragrunt CLI approach for orchestrating a plan across all modules by using the run subcommand with the --all flag. Users should ensure their Terragrunt version is compatible; legacy run-all invocations should now use this method.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all plan\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Command Structure Exception Example (Bash)\nDESCRIPTION: Illustrates an exception to the 'verb last' rule for Terragrunt commands. The `run` command is followed by another verb (`plan`), which is permissible because Terragrunt's responsibility ends with processing `run`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Regeneration Setting in Terragrunt YAML\nDESCRIPTION: Defines a boolean configuration in YAML to control Terragrunt's stack regeneration behavior. The 'no-stack-generate' property, when set to true, disables automatic regeneration of the .terragrunt-stack directory before executing stack-related commands. It references the TG_NO_STACK_GENERATE environment variable and is intended to improve execution speed and stability for repeated runs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/no-stack-generate.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: no-stack-generate\ndescription: Disable automatic stack regeneration before running the stack commands.\ntype: bool\nenv:\n  - TG_NO_STACK_GENERATE\n---\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Terragrunt Stack Directories Using Bash\nDESCRIPTION: This bash snippet appends '.terragrunt-stack' to the .gitignore file, stages the change, and commits it to version control. It ensures that generated stack directories are not inadvertently committed, as they are reproducible and not necessary in source control. Requires Git to be installed and assumes repository write permissions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \".terragrunt-stack\" >> .gitignore\ngit add .gitignore\ngit commit -m \"Add .terragrunt-stack to .gitignore\"\n```\n\n----------------------------------------\n\nTITLE: Running OpenTofu/Terraform Commands for All Stack Units - Terragrunt - Bash\nDESCRIPTION: This Bash command demonstrates how to run a specified OpenTofu/Terraform command (in this case, 'plan') for all units in the current Terragrunt stack by using the --all flag. It relies on having Terragrunt installed and configured in the working directory. The required parameters are the specific command (such as 'plan', 'apply', etc.) and the --all flag, which ensures the operation applies to every unit in scope. The expected output is the result of the plan command for each unit. If there are external dependencies, Terragrunt will prompt for confirmation unless the --non-interactive flag is provided. This approach is useful for coordinating operations across large infrastructures but can have implications when used with commands like 'destroy'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/all.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all plan\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Remote State Bucket with AWS Account ID using HCL\nDESCRIPTION: This HCL snippet configures the S3 bucket name for remote state dynamically based on the AWS account ID. It uses the `get_aws_account_id()` function within the `remote_state` configuration block to ensure a unique bucket name per account.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket = \"mycompany-${get_aws_account_id()}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Outputs for a Specific Unit in JSON Format\nDESCRIPTION: Demonstrates retrieving all outputs for the 'project1_app2' unit using the '--format json' flag. The command outputs a JSON object where the top-level key is the unit name, and the value is an object containing all its outputs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt stack output --format json project1_app2\n{\n  \"project1_app2\": {\n    \"complex\": {\n      \"delta\": 0.02,\n      \"id\": 2,\n      \"name\": \"name2\",\n      \"timestamp\": \"2025-02-07T21:05:51Z\"\n    },\n    \"complex_list\": [\n      {\n        \"delta\": 0.02,\n        \"id\": 2,\n        \"name\": \"name2\",\n        \"timestamp\": \"2025-02-07T21:05:51Z\"\n      },\n      {\n        \"delta\": 0.03,\n        \"id\": 2,\n        \"name\": \"name3\",\n        \"timestamp\": \"2025-02-07T21:05:51Z\"\n      }\n    ],\n    \"custom_value2\": \"value2\",\n    \"data\": \"app2\",\n    \"list\": [\n      \"a\",\n      \"b\",\n      \"c\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Tflint Hook with External Binary and Custom Options in HCL\nDESCRIPTION: This HCL snippet demonstrates advanced configuration for a Terragrunt `tflint` hook. It uses `execute = [\"tflint\", \"--terragrunt-external-tflint\", ...]` to force Terragrunt to use the `tflint` binary from the system's PATH. It also passes custom arguments to `tflint`: `--minimum-failure-severity=error` and `--config custom.tflint.hcl`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n    before_hook \"tflint\" {\n    commands = [\"apply\", \"plan\"]\n    execute = [\"tflint\" , \"--terragrunt-external-tflint\", \"--minimum-failure-severity=error\", \"--config\", \"custom.tflint.hcl\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Region Directory for Multi-Region Support - Shell/Bash\nDESCRIPTION: This snippet uses 'cp -R' to duplicate an entire AWS region directory, enabling quick bootstrapping of a new region's configuration. Requires the source directory to exist. The command takes a source and destination directory; no output unless an error occurs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncp -R us-east-1/ us-west-2/\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan Command without Run Wrapper - Bash\nDESCRIPTION: Highlights the standard pre-redesign usage of Terragrunt to invoke the underlying plan command directly, which continues to be supported for backwards compatibility. No special flags or variables are required. This syntax is familiar for existing users.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Enabling All Terragrunt Experiments via Environment Variable\nDESCRIPTION: This command sets the `TG_EXPERIMENT_MODE` environment variable to `true` before running `terragrunt plan`. This activates all experimental features and is often preferred in CI/CD pipelines over command-line flags as it avoids modifying the command itself.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/04-experiments.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTG_EXPERIMENT_MODE='true' terragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable to Enable Strict Control in Terragrunt (Terragrunt, Bash)\nDESCRIPTION: This code demonstrates setting the 'TERRAGRUNT_STRICT_CONTROL' environment variable before running 'terragrunt plan' to trigger strict enforcement that blocks usage of a root 'terragrunt.hcl' configuration file. This approach is useful for CI/CD pipelines or when persistent control of Terragrunt's strict checking is desired. Requires compatible Terragrunt version.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/01-migrating-from-root-terragrunt-hcl.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTERRAGRUNT_STRICT_CONTROL=root-terragrunt-hcl terragrunt plan\\n\n```\n\n----------------------------------------\n\nTITLE: Example Tflint Plugin Initialization Error Log Message\nDESCRIPTION: This snippet displays a potential error log message (`Failed to initialize plugins; Unrecognized remote plugin message: ... -act-as-bundled-plugin`) encountered when running the `tflint` hook in Terragrunt. This error typically indicates an issue with the `.tflint.hcl` configuration, such as missing version constraints for rulesets.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_15\n\nLANGUAGE: log\nCODE:\n```\nFailed to initialize plugins; Unrecognized remote plugin message: Incorrect Usage. flag provided but not defined: -act-as-bundled-plugin\n```\n\n----------------------------------------\n\nTITLE: Redacting shell command output using run_cmd with --terragrunt-quiet in HCL\nDESCRIPTION: Illustrates suppressing command output in the Terragrunt logs by passing the --terragrunt-quiet argument to run_cmd. Useful for handling sensitive outputs, such as decrypted secrets. Requires Terragrunt version supporting this feature. Output is the shell output (e.g., a secret) but redacted from Terragrunt logging.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\nsuper_secret_value = run_cmd(\"--terragrunt-quiet\", \"./decrypt_secret.sh\", \"foo\")\n\n```\n\n----------------------------------------\n\nTITLE: Running Destroy Command Across Stack Units with Terragrunt CLI\nDESCRIPTION: Destroys all units managed by the stack as defined in the 'terragrunt.stack.hcl' file. Prerequisites include Terragrunt and appropriate permissions. This command systematically removes provisioning for every unit, cleaning up resources as defined. Input: None. Output: Destroy operation results per unit. The stack is generated or rebuilt as part of the command lifecycle.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/run.mdx#_snippet_2\n\nLANGUAGE: CLI\nCODE:\n```\nterragrunt stack run destroy\n```\n\n----------------------------------------\n\nTITLE: Running the Default GolangCI Linter - Bash\nDESCRIPTION: This Bash snippet runs the default GolangCI linter against the codebase, verifying code style and static analysis checks defined in the .golangci.yml configuration. It requires golangci-lint to be installed and configured in the repository. No parameters; linter outputs warnings/errors to the console. Ensures code quality before tests or merges.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run\n```\n\n----------------------------------------\n\nTITLE: Preset Bare Log Format Configuration in Shell\nDESCRIPTION: Mimics Terragrunt's 'bare' preset log format, focusing on concise output. Uses formatting for fixed-width fields and interval display, plus path prefixing. It integrates with --tf-forward-stdout for direct Terraform/tofu output and utilizes bracketed fields for human readability.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n--tf-forward-stdout --log-custom-format \"%level(case=upper,width=4)[%interval] %msg %prefix(path=short,prefix='prefix=[',suffix=']')\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Terraform Source in Terragrunt (HCL)\nDESCRIPTION: Example `terragrunt.hcl` configuration demonstrating how to specify a remote Terraform module using a Git source URL and reference. This setup causes Terraform/OpenTofu commands to run in a temporary directory, highlighting the need for Terragrunt's lock file handling.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/08-lock-file-handling.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//networking/vpc?ref=v0.0.1\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Option Metadata - YAML\nDESCRIPTION: This YAML snippet represents the frontmatter section of the documentation file, specifying the name, description, type, and associated environment variables for the 'no-auto-init' configuration flag. It is used by the document system to render structured reference pages and to map this option to environment variables used by Terragrunt. Required for systems interpreting documentation metadata in static site generators or similar frameworks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/no-auto-init.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: no-auto-init\\ndescription: Don\\'t automatically run init on tofu/terraform commands.\\ntype: bool\\nenv:\\n  - TG_NO_AUTO_INIT\\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Public Terraform Registry Module Source using tfr Protocol (HCL)\nDESCRIPTION: Example demonstrating how to configure the 'source' attribute within a Terragrunt 'terraform' block to pull a module from the public Terraform Registry using the 'tfr' protocol shorthand. The registry host defaults based on the wrapped executable (Terraform/OpenTofu) or the TG_TF_DEFAULT_REGISTRY_HOST environment variable if set.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # Example using shorthand for public registry (Terraform/OpenTofu default or TG_TF_DEFAULT_REGISTRY_HOST)\n  source = \"tfr:///terraform-aws-modules/vpc/aws?version=3.3.0\"\n}\n\n# Explicit public Terraform registry example\n# source = \"tfr://registry.terraform.io/terraform-aws-modules/vpc/aws?version=3.3.0\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Parallel Execution in Terragrunt run --all\nDESCRIPTION: Shows how to limit the maximum number of concurrent Terragrunt/Terraform processes during a `run --all` operation using the `--parallelism` flag. In this example, `terragrunt run --all apply --parallelism 4` instructs Terragrunt to execute the `apply` command on a maximum of 4 units simultaneously at any point while traversing the dependency graph. This can be useful to avoid rate limiting issues or excessive resource consumption on the machine running Terragrunt or on cloud provider APIs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nterragrunt run --all apply --parallelism 4\n```\n\n----------------------------------------\n\nTITLE: Capturing Terragrunt Plan Errors for Unapplied Dependencies - Bash\nDESCRIPTION: Illustrates the output and error sequence when running a Terragrunt plan operation across dependent units where the dependency's outputs are unavailable. The error message provides context about missing outputs and suggests using mock_outputs. Provides insight into expected workflow and troubleshooting of stack plans with interdependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\\n08:57:09.271 INFO   The stack at . will be processed in the following order for command plan:\\nGroup 1\\n- Module ./foo\\n\\nGroup 2\\n- Module ./bar\\n\\n...\\n\\n08:57:09.936 ERROR  [bar] Module ./bar has finished with an error\\n08:57:09.936 ERROR  error occurred:\\n\\n* ./foo/terragrunt.hcl is a dependency of ./bar/terragrunt.hcl but detected no outputs. Either the target module has not been applied yet, or the module has no outputs.\\n\\n  If this dependency is accessed before the outputs are ready (which can happen during the planning phase of an unapplied stack), consider using mock_outputs:\\n\\n  dependency \\\"foo\\\" {\\n      config_path = \\\"../foo\\\"\\n\\n      mock_outputs = {\\n          foo_output = \\\"mock-foo-output\\\"\\n      }\\n  }\\n\\n  For more info, see:\\n  https://terragrunt.gruntwork.io/docs/features/stacks/#unapplied-dependency-and-mock-outputs\\n\\n  If you do not require outputs from your dependency, consider using the dependencies block instead:\\n  https://terragrunt.gruntwork.io/docs/reference/config-blocks-and-attributes/#dependencies\n```\n\n----------------------------------------\n\nTITLE: Passing Terraform Var Files via Extra Arguments (HCL)\nDESCRIPTION: Illustrates how to configure the 'extra_arguments' block in Terragrunt to automatically pass '.tfvars' files using the '-var-file=' flag to specified Terraform/OpenTofu commands. 'required_var_files' errors if a file is missing, while 'optional_var_files' ignores missing files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  extra_arguments \"common_vars\" {\n    commands = [\"plan\", \"apply\", \"destroy\"]\n    \n    # These files MUST exist or Terragrunt will error\n    required_var_files = [\n      \"common.tfvars\"\n    ]\n    \n    # These files will be included if they exist, ignored otherwise\n    optional_var_files = [\n      \"environment.tfvars\"\n    ]\n    \n    # Example of other arguments\n    # arguments = [\"-lock=false\"]\n    \n    # Example environment variables for the command\n    # env_vars = { TF_LOG = \"DEBUG\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Terragrunt Commands with Hyperfine (Bash)\nDESCRIPTION: This command uses the `hyperfine` benchmarking tool to compare the execution time of two Terragrunt commands: `terragrunt run-all plan` and `terragrunt run-all plan --dependency-fetch-output-from-state`. It performs 3 warmup runs (`-w 3`) and 5 measured runs (`-r 5`) for each command, providing statistical analysis of their performance difference. This is useful for quantifying the impact of performance flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhyperfine -w 3 -r 5 'terragrunt run-all plan' 'terragrunt run-all plan --dependency-fetch-output-from-state'\n```\n\n----------------------------------------\n\nTITLE: Enabling All Terragrunt Experiments via Flag\nDESCRIPTION: This command executes `terragrunt plan` with the `--experiment-mode` flag, activating all available experimental features for the duration of this command. This method enables all experiments simultaneously, which might introduce instability if multiple experimental features interact unexpectedly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/04-experiments.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --experiment-mode\n```\n\n----------------------------------------\n\nTITLE: Illustrating Terragrunt Project Structure (Text)\nDESCRIPTION: Displays a typical Terragrunt project layout using a tree structure, showing separate environments ('prod', 'stage') each containing a 'vpc' module defined by a `terragrunt.hcl` file. This structure is used to illustrate the context where lock file handling becomes relevant when using remote sources.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/08-lock-file-handling.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```tree\n└── live\n    ├── prod\n    │   └── vpc\n    │       └── terragrunt.hcl\n    └── stage\n        └── vpc\n            └── terragrunt.hcl\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Terragrunt Engine Integrity Check (Shell)\nDESCRIPTION: This shell command sets the `TG_ENGINE_SKIP_CHECK` environment variable to `0`. According to the documentation, this specific value disables the default integrity check (SHA256 checksum and GPG key validation) performed on downloaded engines. Use this with caution as it bypasses a security measure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport TG_ENGINE_SKIP_CHECK=0 \n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Apply All in a Specific Nested Stack (sh)\nDESCRIPTION: This shell command sequence demonstrates how to execute Terragrunt commands for a specific nested stack. It first changes the current directory to the desired stack (`root/us-east-1`) and then runs `terragrunt run --all apply`. This command applies all Terragrunt configurations found within the `us-east-1` directory and its subdirectories, effectively targeting only that portion of the infrastructure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncd root/us-east-1\nterragrunt run --all apply\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Output Schema for Auth Provider Command (JSON)\nDESCRIPTION: Defines the JSON structure that an external script specified via `--auth-provider-cmd` or `TG_AUTH_PROVIDER_CMD` must output to stdout. It includes optional keys for direct AWS credentials (`awsCredentials`), role assumption parameters (`awsRole`), and additional environment variables (`envs`) to be set for the Terraform/OpenTofu execution context.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"awsCredentials\": {\n    \"ACCESS_KEY_ID\": \"\",\n    \"SECRET_ACCESS_KEY\": \"\",\n    \"SESSION_TOKEN\": \"\"\n  },\n  \"awsRole\": {\n    \"roleARN\": \"\",\n    \"sessionName\": \"\",\n    \"duration\": 0,\n    \"webIdentityToken\": \"\"\n  },\n  \"envs\": {\n    \"ANY_KEY\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visual Profiling of Go Programs via Web UI - Shell\nDESCRIPTION: This shell command starts Go's 'pprof' tool with a local web server ('-http=:8080') to provide a browser-accessible interface for exploring CPU profiles, such as flame graphs. Used for visual diagnosis and performance exploration after running and profiling Go-based Terragrunt tests. Requires an open TCP port 8080 and a 'cpu.prof' file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof -http=:8080 cpu.prof\n```\n\n----------------------------------------\n\nTITLE: Using Mock Outputs Without Fetching Real Outputs in Terragrunt (HCL)\nDESCRIPTION: This HCL configuration shows how to use `mock_outputs` in conjunction with `skip_outputs = true` in a Terragrunt `dependency` block. Terragrunt will use the provided `mock_outputs` (e.g., `vpc_id = \"temporary-dummy-id\"`) and will not attempt to load any actual outputs from the dependency ('vpc'). This is particularly useful in CI environments or scenarios where remote state initialization is disabled (`remote_state.disable_init`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id = \"temporary-dummy-id\"\n  }\n\n  skip_outputs = true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan with Debug Logging in Bash\nDESCRIPTION: This snippet demonstrates running the `terragrunt plan` command with the log level explicitly set to `debug`. The output shows Terragrunt's internal debug messages, captured STDOUT from the underlying OpenTofu (prefixed with `STDOUT tofu:`), and INFO messages originating from OpenTofu's auto-init process (prefixed with `INFO tofu:`). This illustrates how Terragrunt categorizes and presents different types of log information.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --log-level debug plan\n14:20:38.431 DEBUG  Terragrunt Version: 0.0.0\n14:20:38.431 DEBUG  Did not find any locals block: skipping evaluation.\n14:20:38.431 DEBUG  Running command: tofu --version\n14:20:38.431 DEBUG  Engine is not enabled, running command directly in .\n14:20:38.451 DEBUG  tofu version: 1.8.5\n14:20:38.451 DEBUG  Reading Terragrunt config file at ./terragrunt.hcl\n14:20:38.451 DEBUG  Did not find any locals block: skipping evaluation.\n14:20:38.451 DEBUG  Did not find any locals block: skipping evaluation.\n14:20:38.452 DEBUG  Running command: tofu init\n14:20:38.452 DEBUG  Engine is not enabled, running command directly in .\n14:20:38.469 INFO   tofu: Initializing the backend...\n14:20:38.470 INFO   tofu: Initializing provider plugins...\n14:20:38.470 INFO   tofu: OpenTofu has been successfully initialized!\n14:20:38.470 INFO   tofu:\n14:20:38.470 INFO   tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n14:20:38.470 INFO   tofu: any changes that are required for your infrastructure. All OpenTofu commands\n14:20:38.470 INFO   tofu: should now work.\n14:20:38.470 INFO   tofu: If you ever set or change modules or backend configuration for OpenTofu,\n14:20:38.470 INFO   tofu: rerun this command to reinitialize your working directory. If you forget, other\n14:20:38.470 INFO   tofu: commands will detect it and remind you to do so if necessary.\n14:20:38.470 DEBUG  Running command: tofu plan\n14:20:38.470 DEBUG  Engine is not enabled, running command directly in .\n14:20:38.490 STDOUT tofu: No changes. Your infrastructure matches the configuration.\n14:20:38.490 STDOUT tofu: OpenTofu has compared your real infrastructure against your configuration and\n14:20:38.490 STDOUT tofu: found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Terragrunt from Source using Go\nDESCRIPTION: These shell commands outline the process of building Terragrunt from its source code. It involves cloning the Git repository, navigating into the project directory, and then using `go install` to compile and install the Terragrunt binary into the Go bin path (`$GOPATH/bin` or `$HOME/go/bin`). Requires Go and Git to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/gruntwork-io/terragrunt.git\ncd terragrunt\n# Feel free to checkout a particular tag, etc if you want here.\ngo install\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Service and Ingress Resources - YAML\nDESCRIPTION: This YAML snippet demonstrates the declaration of a ClusterIP Service and a corresponding Ingress resource in Kubernetes. The Service routes TCP requests on port 80 to pods labeled with app=backend, while the Ingress configures a path-based route (/service) to backend, specifying serviceName and servicePort. Inputs are the manifest fields atop each resource, and outputs are the creation of respective resources in the cluster. There are no explicit dependencies, but these resources require a running Kubernetes cluster and an Ingress controller compatible with the apiVersion used. Constraints include matching API versions and correct selector labels.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/cli/commands/catalog/module/testdata/find_modules/modules/eks-alb-ingress-controller/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nkind: Service\\napiVersion: v1\\nmetadata:\\n  name: backend\\nspec:\\n  selector:\\n    app: backend\\n  ports:\\n  - protocol: TCP\\n    port: 80\\n    targetPort: 80\\n---\\napiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: service-ingress\\nspec:\\n  rules:\\n  - http:\\n      paths:\\n      - path: /service\\n        backend:\\n          serviceName: backend\\n          servicePort: 80\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Terragrunt Command (Bash)\nDESCRIPTION: This Bash snippet demonstrates the basic usage of the Terragrunt CLI by running the `plan` command. Terragrunt typically wraps the corresponding Terraform or OpenTofu command, passing arguments along and adding features like Auto-init, simplifying the workflow compared to using Terraform/OpenTofu directly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmark Tests for Terragrunt - Go\nDESCRIPTION: This Go test command runs all benchmarks matching the pattern 'BenchmarkSomeFunction' in the current package, allowing Terragrunt developers to measure the performance of specific Go functions or subroutines. Requires Go, testable Go source code with relevant benchmarks, and a proper Go module/project context. Outputs timing information for analysis.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo test -bench=BenchmarkSomeFunction\n```\n\n----------------------------------------\n\nTITLE: Destroying All Provisioned Resources with Terragrunt (Bash)\nDESCRIPTION: From the root directory, runs 'terragrunt run-all destroy' to recursively and irreversibly destroy all infrastructure units managed by Terragrunt. Use with caution: this command will delete all active cloud resources in every included unit. Requires full permissions and proper configuration; outputs destruction logs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# From the root directory\\n$ terragrunt run-all destroy\n```\n\n----------------------------------------\n\nTITLE: Common Remote State Configuration for Reuse (HCL)\nDESCRIPTION: This snippet provides a `remote_state` configuration block intended for reuse via imports or dynamic assignment. Typically placed in a shared `common.hcl` configuration file, this enables DRY (Don't Repeat Yourself) practices in infrastructure-as-code by centralizing backend configuration. Input parameters are the same as previous examples; this file is imported by other Terragrunt configs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n# common.hcl\n\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locals and Using Them as Inputs in Terragrunt - HCL\nDESCRIPTION: Shows use of a locals block for reusable variables, with subsequent reference in the inputs block. This pattern enables DRY configurations by defining and recalling local variables across the HCL file. All local variable accesses must follow the local.<name> reference pattern.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_36\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\n# Make the AWS region a reusable variable within the configuration\nlocals {\n  aws_region = \"us-east-1\"\n}\n\ninputs = {\n  region = local.aws_region\n  name   = \"${local.aws_region}-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform/OpenTofu Version Constraint in Terragrunt (HCL)\nDESCRIPTION: This HCL snippet shows how to use the `terraform_version_constraint` attribute in `terragrunt.hcl` to specify the required version(s) of Terraform/OpenTofu. Terragrunt will check if the installed binary version meets this constraint before execution. The example requires version 0.11 or newer.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform_version_constraint = \">= 0.11\"\n```\n\n----------------------------------------\n\nTITLE: Passing Relative Var File Path Correctly using get_terragrunt_dir in HCL\nDESCRIPTION: This HCL snippet demonstrates the correct way to pass a relative path to a variable file using `extra_arguments`. It uses the `get_terragrunt_dir()` function to construct an absolute path to the `common.tfvars` file based on the location of the `terragrunt.hcl` file, ensuring it works even when Terragrunt uses a temporary directory for remote sources.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# tofu-code/frontend-app/terragrunt.hcl\n\nterraform {\n  source = \"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\"\n\n  extra_arguments \"custom_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    # With the get_terragrunt_dir() function, you can use relative paths!\n    arguments = [\n      \"-var-file=${get_terragrunt_dir()}/../common.tfvars\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `find_in_parent_folders` in `locals` Block (HCL)\nDESCRIPTION: Example of using `find_in_parent_folders` within a `locals` block in a root `terragrunt.hcl` file (`root.hcl`) which is included by a child module (`prod/mysql/terragrunt.hcl`). It demonstrates that the search path originates from the *child* configuration directory, finding `env.hcl` in the intermediate `prod` directory. This pattern often uses `read_terragrunt_config` to load the found configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  env_vars = read_terragrunt_config(find_in_parent_folders(\"env.hcl\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing an Explicit Terragrunt MySQL Unit with Inputs (HCL)\nDESCRIPTION: This snippet exemplifies the modern approach of referencing a MySQL unit explicitly in Terragrunt. It sets the Terraform source URL dynamically according to the supplied version and forwards specific values as explicit inputs or optional parameters to the module. Required dependencies include the target infrastructure repository and associated modules. The snippet assumes all critical values are provided externally, enabling atomic updates and improved maintainability. The configuration is more maintainable and predictable than legacy DRY patterns.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//modules/mysql?ref=${values.version}\"\n}\n\ninputs = {\n  ## Required inputs\n  name              = values.name\n  instance_class    = values.instance_class\n  allocated_storage = values.allocated_storage\n  storage_type      = values.storage_type\n  master_username   = values.master_username\n  master_password   = values.master_password\n\n  ## Optional inputs\n  skip_final_snapshot = try(values.skip_final_snapshot, null)\n  engine_version      = try(values.engine_version, null)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Terragrunt Logging for Plan Command in Bash\nDESCRIPTION: Illustrates how to run a Terragrunt command (`plan` in this case) while completely disabling Terragrunt's own logging wrappers using the `--terragrunt-log-disable` flag. The output shown is the direct, unaltered output from the underlying OpenTofu/Terraform process, providing an experience closer to using the tool directly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --terragrunt-log-disable plan\n\nInitializing the backend...\n\nInitializing provider plugins...\n\nOpenTofu has been successfully initialized!\n\nYou may now begin working with OpenTofu. Try running \"tofu plan\" to see\nany changes that are required for your infrastructure. All OpenTofu commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for OpenTofu,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your configuration and\nfound no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Dynamically generating remote state values using run_cmd in HCL\nDESCRIPTION: Shows executing local shell scripts at runtime to generate remote state configuration values using run_cmd. Assumes presence of executable get_names.sh script and that Terragrunt has correct permissions. Output: stdout from shell command is injected as configuration values for remote state.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket         = run_cmd(\"./get_names.sh\", \"bucket\")\n    dynamodb_table = run_cmd(\"./get_names.sh\", \"dynamodb\")\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Ignore Block for Known Errors with Signals - Terragrunt HCL\nDESCRIPTION: Presents the usage of an 'ignore' block within 'errors' to suppress specified patterns of known errors while optionally emitting signals for CI/CD processes. The parameters include 'ignorable_errors' (with optional negative matching), an optional 'message', and 'signals' (custom key-value metadata). When a match occurs, Terragrunt does not fail the run and emits a 'error-signals.json' if signals are set. This block is useful for controlled workflow management in automated pipelines.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_59\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nerrors {\n    ignore \"ignore_example\" {\n        ignorable_errors = [\n            \".*Error: safe-to-ignore.*\", # Ignore errors containing 'Error: safe-to-ignore'\n            \"!.*Error: critical.*\"      # Do not ignore errors containing 'Error: critical'\n        ]\n        message = \"Ignoring safe-to-ignore errors\" # Optional message displayed when ignoring errors\n        signals = {\n            safe_to_revert = true # Indicates the operation is safe to revert on failure\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Lock File Copying in Terragrunt (HCL)\nDESCRIPTION: Demonstrates how to disable Terragrunt's default behavior of copying the `.terraform.lock.hcl` file from the temporary cache directory back to the working directory. This is achieved by setting `copy_terraform_lock_file = false` within the `terraform` block in `terragrunt.hcl`, useful in specific scenarios like when the remote module itself contains a lock file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/08-lock-file-handling.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\nterraform {\n  ...\n  copy_terraform_lock_file = false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan with Dependency Resolution - Bash\nDESCRIPTION: This Bash snippet demonstrates running the Terragrunt plan command across all modules, automatically resolving dependencies and processing the DAG order. It includes expected diagnostic output, highlighting errors when required outputs are missing due to dependencies not being applied. Dependencies must have outputs defined and applied for successful value resolution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\\n08:57:09.271 INFO   The stack at . will be processed in the following order for command plan:\\nGroup 1\\n- Module ./foo\\n\\nGroup 2\\n- Module ./bar\\n\\n...\\n\\n08:57:09.936 ERROR  [bar] Module ./bar has finished with an error\\n08:57:09.936 ERROR  error occurred:\\n\\n* ./foo/terragrunt.hcl is a dependency of ./bar/terragrunt.hcl but detected no outputs. Either the target module has not been applied yet, or the module has no outputs.\\n\\n  If this dependency is accessed before the outputs are ready (which can happen during the planning phase of an unapplied stack), consider using mock_outputs:\\n\\n  dependency \"foo\" {\\n      config_path = \"../foo\"\\n\\n      mock_outputs = {\\n          foo_output = \"mock-foo-output\"\\n      }\\n  }\\n\\n  For more info, see:\\n  https://terragrunt.gruntwork.io/docs/features/stacks/#unapplied-dependency-and-mock-outputs\\n\\n  If you do not require outputs from your dependency, consider using the dependencies block instead:\\n  https://terragrunt.gruntwork.io/docs/reference/config-blocks-and-attributes/#dependencies\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Engine from Local Path (HCL)\nDESCRIPTION: This HCL block within `terragrunt.hcl` shows how to configure a Terragrunt engine using a local `source`. The value must be an absolute path to the engine binary or directory on the local filesystem, which is useful for testing custom or locally built engines.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nengine {\n   source  = \"/home/users/iac-engines/terragrunt-iac-engine-opentofu_v0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint Default Linter (Bash)\nDESCRIPTION: This snippet shows how to run the default golangci-lint linter configuration for Go code in the Terragrunt codebase via Bash. Dependencies include golangci-lint installed in your environment and a .golangci.yml configuration file. The command scans the codebase for standard linting errors; outputs are error and warning messages in the terminal. Ensure all issues are resolved before merging into the main branch.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run\n```\n\n----------------------------------------\n\nTITLE: Restricting Mock Outputs Usage in Terragrunt Dependency with HCL\nDESCRIPTION: Modifies the previous dependency example to restrict the usage of `mock_outputs` to specific Terraform commands. The `mock_outputs_allowed_terraform_commands = [\"validate\"]` attribute ensures that the specified mock outputs (`vpc_id = \"temporary-dummy-id\"`) are exclusively used during the `validate` command (or `run --all validate`). This prevents the mock values from being used during other operations like `plan`, which might otherwise produce misleading plans.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# mysql/terragrunt.hcl\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id = \"temporary-dummy-id\"\n  }\n\n  mock_outputs_allowed_terraform_commands = [\"validate\"]\n}\n\ninputs = {\n  vpc_id = dependency.vpc.outputs.vpc_id\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Configurations in Tree Format with DAG Ordering - Bash\nDESCRIPTION: Demonstrates 'terragrunt list -T --dag' to combine the tree format with dependency-based ordering. The resulting tree reflects both hierarchical structure and the correct dependency sequencing, useful for visualizing complex configurations with interdependent modules. Requires that dependency information is defined in the Terragrunt configuration files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-dag.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -T --dag\n.\n├── live/dev/vpc\n│   ├── live/dev/db\n│   │   ╰── live/dev/ec2\n│   ╰── live/dev/ec2\n╰── live/prod/vpc\n    ├── live/prod/db\n    │   ╰── live/prod/ec2\n    ╰── live/prod/ec2\n```\n\n----------------------------------------\n\nTITLE: Parsing Terragrunt JSON Output with jq (Bash)\nDESCRIPTION: Shows how to pipe the JSON output of `terragrunt output -json` directly into the `jq` command-line JSON processor. Because Terragrunt avoids enriching the primary JSON output for this command, it can be easily parsed by external tools like `jq` without needing special handling or flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt output -json | jq '.something'\n15:24:40.310 INFO   tofu: Initializing the backend...\n15:24:40.311 INFO   tofu: Initializing provider plugins...\n15:24:40.311 INFO   tofu: OpenTofu has been successfully initialized!\n15:24:40.311 INFO   tofu: \n15:24:40.311 INFO   tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n15:24:40.311 INFO   tofu: any changes that are required for your infrastructure. All OpenTofu commands\n15:24:40.311 INFO   tofu: should now work.\n15:24:40.311 INFO   tofu: If you ever set or change modules or backend configuration for OpenTofu,\n15:24:40.311 INFO   tofu: rerun this command to reinitialize your working directory. If you forget, other\n15:24:40.311 INFO   tofu: commands will detect it and remind you to do so if necessary.\n{\n  \"sensitive\": false,\n  \"type\": \"string\",\n  \"value\": \"Hello, World!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing All Web Crawlers in robots.txt (Plaintext)\nDESCRIPTION: This `robots.txt` rule applies to all web crawlers (`User-agent: *`) and instructs them not to access any part of the website starting from the root directory (`Disallow: /`). This effectively blocks the entire site from being crawled by compliant bots.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/public/robots.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: * \nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Incorrect Terraform Output Definition (HCL)\nDESCRIPTION: This HCL snippet from `ecs-cluster/outputs.tf` shows the source of the error in the debugging example. The `cluster_min_size` output is incorrectly assigned the value of `module.my_cluster_module.cluster_max_size` instead of the intended minimum size, leading to the wrong `num_tasks` value in the dependent module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# ecs-cluster/outputs.tf\noutput \"cluster_min_size\" {\n  value = module.my_cluster_module.cluster_max_size\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Apply Across All Modules and Logging Output (Bash)\nDESCRIPTION: Executes `terragrunt run --all apply` to apply changes across all modules defined in the Terragrunt configuration. The `--no-color` and `--non-interactive` flags are used for cleaner log capture, and the entire output (stdout and stderr) is redirected to a file named `logs`. This demonstrates capturing buffered output from concurrent operations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run --all apply --no-color --non-interactive > logs\n16:01:51.164 INFO   The stack at . will be processed in the following order for command apply:\nGroup 1\n- Module ./unit1\n- Module ./unit2\n\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Terragrunt Configuration Files\nDESCRIPTION: Illustrates the directory structure incorporating Terragrunt, with a root `root.hcl` file and individual `terragrunt.hcl` files in each module directory. This setup enables centralized and dynamic remote state configuration management using Terragrunt's features.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/04-state-backend.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n├── root.hcl\n├── backend-app\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── frontend-app\n│   ├── main.tf\n│   └── terragrunt.hcl\n├── mysql\n│   ├── main.tf\n│   └── terragrunt.hcl\n└── vpc\n    ├── main.tf\n    └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Including and Exposing Root Terragrunt Configuration in Child with Input Passing (HCL)\nDESCRIPTION: Shows a child module including a root config with the include block (exposed), and setting an inputs map to pass down specific remote_state configuration. Children can access parent's blocks like remote_state if expose=true is set. Requires parent config in parent folder hierarchy.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_25\n\nLANGUAGE: hcl\nCODE:\n```\n# child/terragrunt.hcl\ninclude \"root\" {\n  path   = find_in_parent_folders(\"root.hcl\")\n  expose = true\n}\n\ninputs = {\n  remote_state_config = include.root.remote_state\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common MySQL Configuration (Old Pattern) in Terragrunt (HCL)\nDESCRIPTION: Contains shared configuration logic for the MySQL module, used in the older DRY pattern. It defines local variables, including the environment name read from `env.hcl` and the base source URL for the module. It also specifies default input values for the MySQL module, which can be overridden by specific environment configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n## _envcommon/mysql.hcl\n\nlocals {\n  environment_vars = read_terragrunt_config(find_in_parent_folders(\"env.hcl\"))\n\n  env = local.environment_vars.locals.environment\n\n  base_source_url = \"git::git@github.com:acme/infrastructure-catalog.git//modules/mysql\"\n}\n\ninputs = {\n  name              = \"mysql_${local.env}\"\n  instance_class    = \"db.t2.micro\"\n  allocated_storage = 20\n  storage_type      = \"standard\"\n  master_username   = \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Backend Configuration via Bash (Terragrunt Cache, Bash)\nDESCRIPTION: This Bash command recursively searches the Terragrunt cache directory to display the contents of any generated 'backend.tf' file. It is useful for verifying the Terraform backend configuration that Terragrunt synthesizes automatically. Requires a Terragrunt run that has already produced the .terragrunt-cache directory. Outputs the backend.tf content for inspection or troubleshooting.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ find .terragrunt-cache -name backend.tf -exec cat {} \\;\\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\\nterraform {\\n  backend \\\"s3\\\" {\\n    bucket         = \\\"my-tofu-state\\\"\\n    dynamodb_table = \\\"my-lock-table\\\"\\n    encrypt        = true\\n    key            = \\\"tofu.tfstate\\\"\\n    region         = \\\"us-east-1\\\"\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Terragrunt HCL Configurations (Child with Merge Strategy) - HCL\nDESCRIPTION: Shows a child terragrunt.hcl that includes a parent file with a deep merge strategy, while defining its own dependency and inputs. Demonstrates how child configs using deep merge gain access to dependency outputs defined in the parent, and vice versa, and override or add their own blocks as needed. Requires dependencies to be present at referenced config paths.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_32\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\ninclude \"root\" {\n  path           = find_in_parent_folders(\"root.hcl\")\n  merge_strategy = \"deep\"\n}\n\ndependency \"mysql\" {\n  config_path = \"../mysql\"\n}\n\ninputs = {\n  security_group_id = dependency.vpc.outputs.security_group_id\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Output with JSON Flag (Bash)\nDESCRIPTION: Demonstrates running `terragrunt output -json`. This command fetches outputs from the OpenTofu/Terraform state file. Notably, Terragrunt does not enrich the JSON output itself, although its own informational logs and OpenTofu's initialization messages are still printed to stderr.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt output -json\n15:20:07.759 INFO   tofu: Initializing the backend...\n15:20:07.759 INFO   tofu: Initializing provider plugins...\n15:20:07.759 INFO   tofu: OpenTofu has been successfully initialized!\n15:20:07.759 INFO   tofu: \n15:20:07.759 INFO   tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n15:20:07.759 INFO   tofu: any changes that are required for your infrastructure. All OpenTofu commands\n15:20:07.759 INFO   tofu: should now work.\n15:20:07.759 INFO   tofu: If you ever set or change modules or backend configuration for OpenTofu,\n15:20:07.759 INFO   tofu: rerun this command to reinitialize your working directory. If you forget, other\n15:20:07.759 INFO   tofu: commands will detect it and remind you to do so if necessary.\n{\n  \"something\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"Hello, World!\"\n  },\n  \"something_else\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"Goodbye, World!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Terragrunt and Terraform/OpenTofu Arguments\nDESCRIPTION: Shows how to use the double dash (`--`) argument to explicitly separate flags intended for Terragrunt from flags and arguments intended for the underlying OpenTofu/Terraform command. In this example, `plan -no-color` are arguments passed to the OpenTofu/Terraform plan command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/run.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run -- plan -no-color\n```\n\n----------------------------------------\n\nTITLE: Retry Block for Error Handling - Terragrunt HCL\nDESCRIPTION: Demonstrates configuring a retry policy within the 'errors' block for handling transient errors during Terragrunt operations. Key parameters include 'retryable_errors' (list of regex patterns), 'max_attempts', and 'sleep_interval_sec' (pause between retries). Requires Terragrunt engine with 'errors.retry' support and is often used to handle intermittent infrastructure or network failures.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_58\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nerrors {\n    retry \"retry_example\" {\n        retryable_errors = [\".*Error: transient.*\"] # Matches errors containing 'Error: transient'\n        max_attempts = 5                           # Retry up to 5 times\n        sleep_interval_sec = 10                    # Wait 10 seconds between retries\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt with OIDC Web Identity via CLI Arguments (Terragrunt, Bash)\nDESCRIPTION: This bash snippet shows how to combine the `--terragrunt-iam-role` and `--terragrunt-iam-web-identity-token` CLI arguments with Terragrunt to assume an AWS IAM role using an OIDC web identity token. This is designed for CI/CD use cases where OIDC tokens are issued at runtime. The $TOKEN variable should contain the OIDC token value, and the role ARN formatted as described. Requires Terragrunt version supporting OIDC and an AWS role configured for web identity federation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --terragrunt-iam-role \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\" --terragrunt-iam-web-identity-token \"$TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Listing Terragrunt Configurations Sorted by Dependency with DAG Mode in Bash\nDESCRIPTION: This snippet shows how to use the --dag flag with the Terragrunt find command, sorting configurations by dependency order so dependencies appear before dependents. Requires Terragrunt and infrastructure configuration files with defined dependencies. The command outputs a dependency-sorted list of configuration paths in plain text.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-dag.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find --dag\nlive/dev/vpc\nlive/prod/vpc\nlive/dev/db\nlive/prod/db\nlive/dev/ec2\nlive/prod/ec2\n\n```\n\n----------------------------------------\n\nTITLE: Example Bash Script for Performing a Service Smoke Test with Curl\nDESCRIPTION: This Bash script (`smoke_test.sh`) performs a simple smoke test. It retrieves a `service_url` output from Terraform state using `$TG_CTX_TF_PATH output -raw service_url` and then uses `curl -sSf` to check if the URL is responsive. Requires `curl` and the Terraform/OpenTofu binary.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nset -eou pipefail\n\n# Get the URL for the service from OpenTofu/Terraform state\nSERVICE_URL=\"$(\"$TG_CTX_TF_PATH\" output -raw service_url)\"\n\n# Use curl to check the service is up\ncurl -sSf \"$SERVICE_URL\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Extra Arguments Blocks in Terragrunt (HCL)\nDESCRIPTION: This HCL example demonstrates defining multiple `extra_arguments` blocks (`retry_lock` and `custom_vars`) within a `terragrunt.hcl` file. Terragrunt applies arguments from all matching blocks in the order they appear; for commands like `apply`, both the `-lock-timeout` and the `-var` arguments will be added. This allows modular configuration of extra arguments for different purposes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # Force OpenTofu/Terraform to keep trying to acquire a lock for\n  # up to 20 minutes if someone else already has the lock\n  extra_arguments \"retry_lock\" {\n    commands  = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock-timeout=20m\"]\n  }\n\n  # Pass custom var files to OpenTofu/Terraform\n  extra_arguments \"custom_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    arguments = [\n      \"-var\", \"foo=bar\",\n      \"-var\", \"region=us-west-1\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Module Files with Terragrunt Exec in Download Directory - Bash\nDESCRIPTION: These Bash command snippets demonstrate how to execute common file inspection tasks (such as viewing and listing files) within the downloaded module directory using Terragrunt's --in-download-dir option. Requires Terragrunt to be installed and available in the system's PATH. The primary parameter is --in-download-dir, which changes the execution context to the cached module location. Input commands are passed after -- to be executed in that directory, and output reflects the module's actual contents.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/in-download-dir.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# View the contents of main.tf in the downloaded module\nterragrunt exec --in-download-dir -- cat main.tf\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# List all files in the downloaded module\nterragrunt exec --in-download-dir -- ls -la\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Provider Cache Directory via CLI Flags\nDESCRIPTION: This command illustrates how to enable the provider cache and specify a custom directory for storing cached providers using the `--provider-cache-dir` flag alongside `--provider-cache` when running `terragrunt plan`. This overrides the default cache location.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt plan \\\n--provider-cache \\\n--provider-cache-dir /new/path/to/cache/dir\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Inputs for Units - HCL\nDESCRIPTION: These HCL code blocks define the unit-specific values for the 'content' variable through the Terragrunt 'inputs' attribute within the terragrunt.hcl files for the 'foo' and 'bar' units. No external dependencies are required, aside from Terragrunt parsing the file. The key parameter is 'content', set to a string appropriate for each unit. Input is static configuration; output is the variable-value mapping provided to Terraform. This approach enables centralizing variable inputs in Terragrunt, reducing configuration duplication.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/terragrunt.hcl\ninputs = {\n  content = \"Hello from foo, Terragrunt!\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# bar/terragrunt.hcl\ninputs = {\n  content = \"Hello from bar, Terragrunt!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Directory for Module Code (Bash)\nDESCRIPTION: Initializes an empty 'shared' directory intended to hold shared infrastructure code. This pattern lays the groundwork for code reuse using modules. No dependencies beyond OS shell tools; output is a new empty directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir shared\n```\n\n----------------------------------------\n\nTITLE: Setting Terragrunt Working Directory via Command Line (Bash)\nDESCRIPTION: This Bash command demonstrates using the `--working-dir` flag with `terragrunt run plan`. It instructs Terragrunt to execute the 'plan' command within the specified '/path/to/infrastructure/prod' directory instead of the default current directory. Note that for `run --all` commands, Terragrunt executes in all subdirectories of the specified working directory, whereas for single `run` commands, it executes only within the specified directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/working-dir.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan --working-dir /path/to/infrastructure/prod\n```\n\n----------------------------------------\n\nTITLE: Duplicating a Directory to Create a New Terragrunt Unit (Bash)\nDESCRIPTION: Creates a new unit named 'bar' by copying the contents of the existing 'foo' directory. Used to demonstrate how project code may be structured into units. Requires only Unix shell utilities and is essential for scaling the example project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\\ncp -r foo bar\n```\n\n----------------------------------------\n\nTITLE: Enabling Provider Cache Server with Terragrunt - Shell\nDESCRIPTION: This shell command launches Terragrunt to run the 'plan' command on all modules with the provider cache enabled. The '--provider-cache' flag instructs Terragrunt to start a caching proxy so that provider binaries are only downloaded once and reused, reducing network and disk usage. This flag yields the best performance for commands operating on multiple modules (e.g., with '--all'), but can add overhead for single-run commands. Requires Terragrunt installed and network access to provider sources.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt run --all plan --provider-cache\n```\n\n----------------------------------------\n\nTITLE: Generating Provider Lock File with Terragrunt Cache Enabled\nDESCRIPTION: This command demonstrates running `terragrunt providers lock` with the provider cache enabled (`--provider-cache`). Terragrunt intercepts this, uses its cache mechanism to determine provider hashes for the specified platforms (`-platform`), and generates the `.terraform.lock.hcl` file directly, without invoking `terraform providers lock`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt --provider-cache providers lock -platform=linux_amd64 -platform=darwin_arm64 -platform=freebsd_amd64\n```\n\n----------------------------------------\n\nTITLE: Dependency Output Format with External Units Included (JSON)\nDESCRIPTION: Shows the expected output structure when Terragrunt is run with '--external' and '--format json'. The JSON array lists units with their paths and dependencies, making it clear how internal and external units are represented. The output enables downstream processing or visualization and helps understand dependency relationships. Dependencies are listed relative to current units; empty arrays denote no dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-external.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"internal/unitA\",\n    \"dependencies\": []\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"internal/unitB\",\n    \"dependencies\": [\"../unitA\", \"../../external/unitC\"]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"external/unitC\",\n    \"dependencies\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Catalog Repositories and Templates in HCL\nDESCRIPTION: This HCL block within `terragrunt.hcl` configures the `catalog` command. The `urls` list specifies repositories to search for modules, supporting relative paths, absolute paths, and remote Git URLs. The optional `default_template` sets a custom template for scaffolding module configurations when the 'S' key is pressed in the catalog UI.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/05-catalog.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\ncatalog {\n  default_template = \"git@github.com/acme/example.git//path/to/template\"  # Optional default template to use for scaffolding\n  urls = [\n    \"relative/path/to/repo\", # will be converted to the absolute path, relative to the path of the configuration file.\n    \"/absolute/path/to/repo\",\n    \"github.com/gruntwork-io/terraform-aws-lambda\", # url to remote repository\n    \"http://github.com/gruntwork-io/terraform-aws-lambda\", # same as above\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Provider Script Output Schema for Terragrunt (JSON)\nDESCRIPTION: Defines the expected JSON schema that credential provider scripts must output to STDOUT when invoked by Terragrunt. This structure supports providing awsCredentials, awsRole, and arbitrary env variables. All top-level fields are optional. Dependencies include scripting language for auth-script and access permissions. Inputs are context-dependent, and output must conform to this schema for Terragrunt to parse credentials correctly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"awsCredentials\\\": {\\n    \\\"ACCESS_KEY_ID\\\": \\\"\\\",\\n    \\\"SECRET_ACCESS_KEY\\\": \\\"\\\",\\n    \\\"SESSION_TOKEN\\\": \\\"\\\"\\n  },\\n  \\\"awsRole\\\": {\\n    \\\"roleARN\\\": \\\"\\\",\\n    \\\"sessionName\\\": \\\"\\\",\\n    \\\"duration\\\": 0,\\n    \\\"webIdentityToken\\\": \\\"\\\"\\n  },\\n  \\\"envs\\\": {\\n    \\\"ANY_KEY\\\": \\\"\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Download Directory Parameter\nDESCRIPTION: This YAML configuration defines the `download-dir` parameter for Terragrunt. It specifies the path where external modules are downloaded, defaulting to `.terragrunt-cache` relative to source/destination directories. The type is `string`, and it can be overridden by the `TG_DOWNLOAD_DIR` environment variable.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-migrate-download-dir.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: download-dir\ndescription: |\n    Path to download OpenTofu/Terraform modules into. The default is `.terragrunt-cache`.\n\n    Note that this path is relative to the directory of each of the source and destination units, not the current working directory.\ntype: string\nenv:\n  - TG_DOWNLOAD_DIR\n---\n```\n\n----------------------------------------\n\nTITLE: Running the Default GolangCI Linter with Makefile Recipe - Makefile\nDESCRIPTION: This Makefile command runs the default GolangCI linter as defined in a 'run-lint' recipe, streamlining the static analysis workflow for developers. Prerequisites include a correctly defined Makefile and golangci-lint installed. No input parameters are needed; running this command outputs linter results for the repository, enforcing minimum code quality before merging.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nmake run-lint\n```\n\n----------------------------------------\n\nTITLE: Passing Engine Metadata with meta Block - HCL\nDESCRIPTION: Demonstrates use of the meta block within the engine configuration to provide key-value-pair metadata, supporting arrays or strings as values. This is intended for advanced customization, such as setting connection settings, tool versions, or feature flags specific to the engine. Inputs: a map with arbitrary metadata fields. Outputs: engine receives this map and may alter behavior. Limitation: engine must be designed to interpret meta keys appropriately.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/13-engine.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nengine {\n   source = \"github.com/gruntwork-io/terragrunt-engine-opentofu\"\n   # Optionally set metadata for the engine.\n   meta = { \n     key_1 = [\"value1\", \"value2\"]\n     key_2 = \"1.6.0\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic Terragrunt Plan Command\nDESCRIPTION: Shows a standard Terragrunt command (`terragrunt plan`). This command might implicitly use a root `terragrunt.hcl` file if present in parent directories, representing the pattern being discouraged.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Overriding Terragrunt Retryable Errors List (Deprecated) in HCL\nDESCRIPTION: Demonstrates how to override the default list of retryable errors in Terragrunt by providing a custom list of regular expressions to the `retryable_errors` attribute in `terragrunt.hcl`. This allows customization of which specific errors should trigger retries. Note that this `retryable_errors` block is deprecated; use the `errors` block instead for newer configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nretryable_errors = [\n  \"(?s).*Error installing provider.*tcp.*connection reset by peer.*\",\n  \"(?s).*ssh_exchange_identification.*Connection closed by remote host.*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running Strict Linter Only on Changed Files Compared to Main - Bash\nDESCRIPTION: This Bash command runs the strict linter configuration, but restricts analysis to files changed with respect to the origin/main branch for efficiency. Useful in large repositories to avoid excessive errors by only linting new/modified code in pull requests. Requires git, golangci-lint, and a strict configuration file. Outputs violations for reviewed files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run -c .strict.golangci.yml --new-from-rev origin/main ./...\n```\n\n----------------------------------------\n\nTITLE: Scraping Metrics with Prometheus Configuration - YAML\nDESCRIPTION: Configures Prometheus to scrape the OpenTelemetry collector at regular intervals. Sets the global scrape interval to 15s and configures a scrape job for the OpenTelemetry collector every 5s. The 'targets' field should match the otel-collector's exporter port. This file must be mounted into the Prometheus container.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\nscrape_configs:\n  - job_name: 'opentelemetry'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['otel-collector:8889']\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Terragrunt Stack Output as JSON (Bash)\nDESCRIPTION: This Bash command demonstrates how to retrieve the outputs of a Terragrunt stack formatted as JSON. It uses the `--format json` flag with the `terragrunt stack output` command. This format is useful for machine readability and integration with other tools that consume JSON.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/stack-output-format.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# JSON format\nterragrunt stack output --format json\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt with Local Module Source and File Copy Patterns - HCL\nDESCRIPTION: This HCL snippet demonstrates configuring Terragrunt to use a local OpenTofu/Terraform module directory as its source, specifying additional file patterns to always include in the Terragrunt working copy (such as hidden files and specific extensions). The 'include_in_copy' argument enables precise control of which files from the source module are present in the .terragrunt-cache directory. Dependencies are Terragrunt, a compatible OpenTofu/Terraform local module, and any files matching the specified patterns. Inputs are local file paths and glob patterns; outputs are a reconstructed working directory for module execution containing the selected files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Pull the OpenTofu/Terraform configuration from the local file system. Terragrunt will make a copy of the source folder in the\n  # Terragrunt working directory (typically `.terragrunt-cache`).\n  source = \"../modules/networking/vpc\"\n\n  # Always include the following file patterns in the Terragrunt copy.\n  include_in_copy = [\n    \".security_group_rules.json\",\n    \"*.yaml\",\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Name as Local Variable in Terragrunt (HCL)\nDESCRIPTION: Defines the environment name in a local variable within an environment-specific file. This file is referenced by other configurations via dynamic evaluation or read functions, supporting per-environment logic or input. Assumes the file is placed in each environment directory (e.g., 'qa', 'prod', 'stage').\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# qa/env.hcl\nlocals {\n  env = \"qa\" # this will be prod in the prod folder, and stage in the stage folder.\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Configuration in terraform.tfvars (Legacy <= v0.18.x) (HCL)\nDESCRIPTION: Demonstrates the legacy method (Terragrunt <= v0.18.x) of defining Terragrunt settings, such as Terraform source and remote state backend configuration, within a `terragrunt = { ... }` block inside a `terraform.tfvars` file. This approach became incompatible with Terraform 0.12 due to stricter variable validation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terraform.tfvars\n\nterragrunt = {\n  terraform {\n    source = \"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\"\n\n    extra_arguments \"custom_vars\" {\n      commands  = [\"apply\", \"plan\"]\n      arguments = [\"-var\", \"foo=42\"]\n    }\n  }\n\n  remote_state {\n    backend = \"s3\"\n    config = {\n      bucket         = \"my-terraform-state\"\n      key            = \"${path_relative_to_include()}/terraform.tfstate\"\n      region         = \"us-east-1\"\n      encrypt        = true\n      dynamodb_table = \"my-lock-table\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Terragrunt Stack Outputs in JSON Format\nDESCRIPTION: Executes 'terragrunt stack output' with the '--format json' flag. This retrieves outputs from all units within the current Terragrunt stack and formats the entire output as a single JSON object.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack output --format json\n```\n\n----------------------------------------\n\nTITLE: Defining Locals in an External Region HCL File for Terragrunt - HCL\nDESCRIPTION: Illustrates usage of a separate region.hcl file to store local variables, which can then be loaded and referenced by other Terragrunt configs using read_terragrunt_config. Useful for sharing environment data across multiple modules. Only one or more locals are defined, to be imported elsewhere.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_38\n\nLANGUAGE: hcl\nCODE:\n```\n# region.hcl\n\nlocals {\n  region = \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Locals in Included Configuration - HCL\nDESCRIPTION: Defines a local variable for the module source URL in a shared Terragrunt configuration so it can be referenced from child configurations. This design is intended to reduce duplication of source URLs and supports use with exposed include blocks. Place this in a parent hcl file and set 'expose = true' in the child include block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_6\n\nLANGUAGE: HCL\nCODE:\n```\nlocals {\n  source_base_url = \"github.com/<org>/modules.git//app\"\n}\n\n# ... other blocks and attributes omitted for brevity ...\n\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependency Outputs During Plan in Terragrunt (HCL)\nDESCRIPTION: Illustrates how to configure the dependency block in Terragrunt to provide mocked outputs for plan commands. The 'mock_outputs' block supplies fake output values, and 'mock_outputs_allowed_terraform_commands' limits their use to plan operations. This pattern prevents planning failures when real outputs are absent without risking incorrect apply runs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\n# ...\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    private_subnets = [\"mock-subnet\"]\n  }\n\n  mock_outputs_allowed_terraform_commands = [\"plan\"]\n}\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Setting Terragrunt Version Constraint in HCL\nDESCRIPTION: Specifies the required version(s) of the Terragrunt CLI using the `terragrunt_version_constraint` attribute within a `terragrunt.hcl` file. If the currently running Terragrunt version does not meet this constraint, Terragrunt will exit with an error. This example requires Terragrunt version 0.23 or newer.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterragrunt_version_constraint = \">= 0.23\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Environment Based on Feature Flag (Stage) in Terragrunt HCL\nDESCRIPTION: Similar to the 'dev' environment configuration, this HCL snippet for a 'stage' root file (`stage/root.hcl`) defines a feature flag 'stage' (defaulting to false) and an `exclude` block. Units in this environment are excluded from `run-all` commands unless the 'stage' feature flag is explicitly set to true.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# stage/root.hcl\nfeature \"stage\" {\n  default = false\n}\n\nexclude {\n    if = !feature.stage.value\n    actions = [\"all_except_output\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling All Terragrunt Experiments via Environment Variable (Bash)\nDESCRIPTION: Shows how to enable all Terragrunt experimental features using the `TERRAGRUNT_EXPERIMENT_MODE` environment variable set to 'true'. This method is often preferred for enabling experiment mode consistently, for example, within CI/CD pipelines. Requires the Terragrunt CLI.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/06-experiments.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTERRAGRUNT_EXPERIMENT_MODE='true' terragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Disabling Terragrunt Logs During Plan Execution (Bash)\nDESCRIPTION: Shows how to run a Terragrunt command (`plan` in this case) while completely disabling Terragrunt's own log messages using the `--log-disable` flag. This results in output that closely resembles running the underlying OpenTofu/Terraform command directly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --log-disable plan\n\nInitializing the backend...\n\nInitializing provider plugins...\n\nOpenTofu has been successfully initialized!\n\nYou may now begin working with OpenTofu. Try running \"tofu plan\" to see\nany changes that are required for your infrastructure. All OpenTofu commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for OpenTofu,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your configuration and\nfound no differences, so no changes are needed.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt 'force' Flag Metadata (YAML)\nDESCRIPTION: This YAML block defines metadata for the 'force' flag in Terragrunt. It specifies the flag's name, provides a description explaining its function to force backend state migration even with versioning disabled, defines its type as boolean, and lists the corresponding environment variable 'TG_FORCE'. This metadata is typically used for configuration or documentation generation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-migrate-force.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: force\ndescription: |\n  When this flag is set, Terragrunt will force the migration of the backend state, even if the bucket containing it has versioning disabled.\ntype: bool\nenv:\n  - TG_FORCE\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Terragrunt Stack Units Using Bash CLI\nDESCRIPTION: This bash command invokes 'terragrunt stack generate', which regenerates stack-defined units based on the current 'terragrunt.stack.hcl'. All necessary stack code and configurations are rebuilt as per stack definitions. Requires Terragrunt CLI with stack support available in the execution environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack generate\n```\n\n----------------------------------------\n\nTITLE: Implicitly Reading Configuration with read_terragrunt_config in HCL\nDESCRIPTION: This HCL snippet demonstrates how to read a shared Terragrunt configuration file (`shared.hcl`) using the `read_terragrunt_config` function within a `locals` block. When Terragrunt processes this configuration, it automatically tracks that `shared.hcl` has been read, allowing the `--queue-include-units-reading shared.hcl` flag to identify this module for inclusion in the execution queue.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-include-units-reading.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nlocals {\n shared = read_terragrunt_config(find_in_parent_folders(\"shared.hcl\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU Profiles with Go pprof - Shell\nDESCRIPTION: This shell command invokes Go's 'pprof' tool to analyze the 'cpu.prof' file generated during testing, exposing a text-based profiling interface for in-depth investigation of Terragrunt's CPU hotspots. Requires the presence of a valid 'cpu.prof' file and Go installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof cpu.prof\n```\n\n----------------------------------------\n\nTITLE: Finding Dependencies with Terragrunt find (Bash/JSON)\nDESCRIPTION: This example demonstrates the usage of the `terragrunt find` command with the `--dependencies` flag to include dependency information and the `--format json` flag to output the results in JSON format. The output shows two configuration units, 'unitA' and 'unitB', where 'unitB' has a dependency on 'unitA'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-dependencies.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --dependencies --format json\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"unitA\",\n    \"dependencies\": []\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"unitB\",\n    \"dependencies\": [\"../unitA\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating a Stack with Custom Parallelism - Terragrunt CLI - Bash\nDESCRIPTION: This command snippet runs Terragrunt's stack generation while explicitly restricting/constraining the number of parallel tasks to 4 using the --parallelism flag. The Terragrunt application manages concurrency according to the specified value (overriding GOMAXPROCS) and expects a previously defined terragrunt.stack.hcl configuration in the current workspace. Outputs are generated directories for each unit with proper terragrunt.hcl files. Usage of parallelism beyond available system resources may degrade performance or not be honored.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/generate.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack generate --parallelism 4\n```\n\n----------------------------------------\n\nTITLE: Terragrunt List Output Including Hidden Directories\nDESCRIPTION: This Bash example demonstrates the effect of using the '--hidden' flag with the 'terragrunt list -l' command. When this flag is provided, Terragrunt includes hidden directories (like '.hide/unit') in the listing along with regular directories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-hidden.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l --hidden\nType  Path\nunit  .hide/unit\nstack stack\nunit  unit\n```\n\n----------------------------------------\n\nTITLE: Validating Inputs with Terragrunt in Bash\nDESCRIPTION: This Bash snippet shows how to invoke the Terragrunt tool using the 'hcl lint' command with the '--inputs' flag to validate that all required input variables are set by the module that a unit provisions. The snippet assumes Terragrunt is installed and available in the system PATH. No additional dependencies outside of Terragrunt are required. The main parameter '--inputs' turns on input validation, and the command outputs errors or warnings if any required input is missing or unset.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-lint-inputs.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt hcl lint --inputs\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt with Source Update Option - Bash\nDESCRIPTION: This Bash snippet demonstrates invoking the Terragrunt CLI tool with the --source-update flag. The purpose is to trigger Terragrunt to clear any existing files in its temporary download folder before fetching new code, ensuring a clean environment for the next operation. No additional dependencies are needed beyond a working installation of Terragrunt, and no input files are required except the relevant Terragrunt configuration; the output is updated source code in the cleaned directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/source-update.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan --source-update\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Provider Registries via CLI Flags\nDESCRIPTION: This command shows how to enable the provider cache and override the default list of registries whose providers should be cached (default: registry.terraform.io, registry.opentofu.org) using multiple `--provider-cache-registry-names` flags when running `terragrunt apply`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply \\\n--provider-cache \\\n--provider-cache-registry-names example1.com \\\n--provider-cache-registry-names example2.com\n```\n\n----------------------------------------\n\nTITLE: Listing Terragrunt Configurations in Bash\nDESCRIPTION: This snippet demonstrates the use of the Terragrunt CLI to list infrastructure configurations in default alphabetical order. Requires Terragrunt installed and configured. No additional parameters will display paths in sorted order by name. The command outputs a simple list of configuration paths as plain text.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-dag.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find\nlive/dev/db\nlive/dev/ec2\nlive/dev/vpc\nlive/prod/db\nlive/prod/ec2\nlive/prod/vpc\n\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt `log-show-abs-paths` Option (YAML)\nDESCRIPTION: This YAML snippet defines the configuration for the `log-show-abs-paths` flag in Terragrunt. It specifies the option's name, a description of its function (showing absolute paths in logs), its data type (boolean), and the associated environment variable (`TG_LOG_SHOW_ABS_PATHS`). This configuration is used by Terragrunt to control log output verbosity regarding file paths.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/log-show-abs-paths.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: log-show-abs-paths\ndescription: Show absolute paths in logs.\ntype: bool\nenv:\n  - TG_LOG_SHOW_ABS_PATHS\n---\n```\n\n----------------------------------------\n\nTITLE: Finalizing Migration and Ignoring Generated Unit Directories Using Bash\nDESCRIPTION: This bash sequence removes generated directories again, stages and commits changes to the stack configuration and directories, and adds them to .gitignore to prevent future commits of redundant generated content. Ensures only the stack configuration file remains under source control, in line with Terragrunt's recommended practices.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf service db sgs\ngit add terragrunt.stack.hcl service db sgs\ngit commit -m \"Remove unit configurations and add terragrunt.stack.hcl\"\necho \"service\" >> .gitignore\necho \"db\" >> .gitignore\necho \"sgs\" >> .gitignore\ngit add .gitignore\ngit commit -m \"Add unit configurations to .gitignore\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for a Package (Bash)\nDESCRIPTION: This command executes all unit tests located within the specified Go package directory. Unit tests are typically found in `*_test.go` files within the package they test.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./path/to/package\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmark Tests for Terragrunt Development (Bash/Go)\nDESCRIPTION: This command executes Go benchmark tests targeting functions whose names match the pattern `BenchmarkSomeFunction`. It's used by Terragrunt developers to measure the performance of specific Go subroutines within the codebase. Requires a Go development environment and Terragrunt source code.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench=BenchmarkSomeFunction\n```\n\n----------------------------------------\n\nTITLE: Excluding Environment Based on Feature Flag (Dev) in Terragrunt HCL\nDESCRIPTION: This HCL configuration, intended for a root file (e.g., `dev/root.hcl`), defines a feature flag 'dev' (defaulting to true) and an `exclude` block. The `exclude` block prevents all actions (except output) from running if the 'dev' feature flag is false. This setup makes the 'dev' environment included by default in `run-all` commands unless explicitly excluded.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# dev/root.hcl\nfeature \"dev\" {\n  default = true\n}\n\nexclude {\n    if = !feature.dev.value\n    actions = [\"all_except_output\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HCL2 Attributes (HCL)\nDESCRIPTION: Provides a basic example of an HCL2 attribute definition. Attributes (`foo` in this case) assign a value (a map `{ bar = \"baz\" }`) using an equals sign (`=`) before the value or opening brace.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# Attributes use an equals sign before the curly brace\nfoo = {\n  bar = \"baz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linting Terragrunt HCL Configuration Files with terragrunt CLI in Shell\nDESCRIPTION: This snippet demonstrates executing the Terragrunt CLI to lint all HCL configuration files within the current directory. No special dependencies are required except for the Terragrunt executable available on the system path. This command takes no parameters, scans for HCL files, and outputs lint results to the console; the expected output describes any detected configuration issues.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/hcl/lint.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt hcl lint\n```\n\n----------------------------------------\n\nTITLE: Sorting Find Results by Dependency DAG (CLI, Bash)\nDESCRIPTION: Invokes `terragrunt find` with the `--dag` flag to sort discovered configurations according to their dependency order, listing those with no dependencies first. Requires `terragrunt` and configuration files structured with dependents. The output format is text (unless otherwise specified). No further dependencies or parameters are needed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --dag\n```\n\n----------------------------------------\n\nTITLE: Granting Access Without Resource Creation for S3 and DynamoDB - AWS IAM Policy - JSON\nDESCRIPTION: This JSON IAM policy example allows Terragrunt to interact with existing S3 buckets and DynamoDB tables for managing state, while preventing the creation or configuration of those resources. It grants only object-level and query permissions on the given resources, assuming that S3 buckets and DynamoDB tables are provisioned and configured outside Terragrunt. All resource ARNs must be replaced with actual AWS resources. Users should ensure related Terragrunt settings, like 'skip_bucket_versioning', are configured to avoid operations requiring creation or metadata changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"s3:GetBucketLocation\",\n                \"s3:List*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<BucketName>\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Action\": [\n                \"s3:DeleteObject\",\n                \"s3:GetObject\",\n                \"s3:PutObject\",\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<BucketName>/*\"\n            ],\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Sid\": \"AllowCreateAndUpdateDynamoDBActionsOnSpecifiedTerragruntTable\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:PutItem\",\n                \"dynamodb:GetItem\",\n                \"dynamodb:DescribeTable\",\n                \"dynamodb:DeleteItem\",\n            ],\n            \"Resource\": \"arn:aws:dynamodb:*:*:table/TABLE_NAME\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting input value using get_aws_caller_identity_arn in HCL\nDESCRIPTION: Demonstrates how to assign the ARN of the current AWS caller identity as an input variable using Terragrunt's get_aws_caller_identity_arn function. No external dependencies are required except valid AWS credentials. The code expects Terragrunt context; the output is the resolved ARN for the execution environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\ninputs = {\n  caller_arn = get_aws_caller_identity_arn()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching the Terragrunt Module Catalog UI (Bash)\nDESCRIPTION: Demonstrates the command-line syntax for launching the Terragrunt module catalog user interface. The command optionally accepts a `<repo-url>` to clone and scan. If omitted, it uses URLs from the `catalog` configuration or scans the current directory. Optional flags `--no-include-root`, `--root-file-name`, and `--output-folder` control the behavior of the integrated scaffolding feature triggered by pressing 'S'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/05-catalog.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog <repo-url> [--no-include-root] [--root-file-name] [--output-folder]\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt with Homebrew on macOS/Linux\nDESCRIPTION: This command installs Terragrunt on macOS or Linux systems using the Homebrew package manager. Homebrew must be installed beforehand.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbrew install terragrunt\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling (Retry & Ignore) in Terragrunt HCL\nDESCRIPTION: This HCL configuration uses the `errors` block to define custom error handling. It includes a `retry` block to automatically retry commands up to 3 times on transient network errors, and an `ignore` block to suppress specific known, safe errors based on regex patterns, while also defining a custom message and signals.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nerrors {\n    # Retry block for transient errors\n    retry \"transient_errors\" {\n        retryable_errors = [\".*Error: transient network issue.*\"]\n        max_attempts = 3\n        sleep_interval_sec = 5\n    }\n\n    # Ignore block for known safe-to-ignore errors\n    ignore \"known_safe_errors\" {\n        ignorable_errors = [\n            \".*Error: safe warning.*\",\n            \"!.*Error: do not ignore.*\"\n        ]\n        message = \"Ignoring safe warning errors\"\n        signals = {\n            alert_team = false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Complex Output in JSON Format\nDESCRIPTION: Illustrates accessing a specific complex output (a list named 'complex_list') from the 'project1_app2' unit using dot notation ('unit_name.output_name') combined with the '--format json' flag. The output is a JSON object with the full path as the key and the complex value (the list) as the value.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt stack output --format json project1_app2.complex_list\n{\n  \"project1_app2.complex_list\": [\n    {\n      \"delta\": 0.02,\n      \"id\": 2,\n      \"name\": \"name2\",\n      \"timestamp\": \"2025-02-07T21:05:51Z\"\n    },\n    {\n      \"delta\": 0.03,\n      \"id\": 2,\n      \"name\": \"name3\",\n      \"timestamp\": \"2025-02-07T21:05:51Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Storing SOPS Encrypted Data using AWS KMS in JSON\nDESCRIPTION: This JSON object represents a file encrypted using Mozilla SOPS. The `data` field holds the AES256-GCM encrypted secret string. The `sops` section provides metadata, including the AWS KMS key ARN (`arn`) used for wrapping the data encryption key, the encrypted data key itself (`enc`), creation/modification timestamps, the message authentication code (`mac`), and the SOPS version (`3.9.0`). This structure is standard for SOPS-encrypted files, allowing tools like SOPS or integrated systems (e.g., Terragrunt) to decrypt the `data` field using the specified AWS KMS key.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/test/fixtures/sops-kms/secrets.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\": \"ENC[AES256_GCM,data:gbo1A3QA/JGY49OwjwESxxlA,iv:hZe6bia9/114NsW++jWAxis2fpHdQ+CUJlgrUVD9n88=,tag:z6fo5qFE82otY4JTBWzFPQ==,type:str]\",\n\t\"sops\": {\n\t\t\"kms\": [\n\t\t\t{\n\t\t\t\t\"arn\": \"arn:aws:kms:us-east-1:087285199408:key/bd372994-d969-464a-a261-6cc850c58a92\",\n\t\t\t\t\"created_at\": \"2024-09-26T12:55:28Z\",\n\t\t\t\t\"enc\": \"AQICAHi+J98ytR8eNxKA5Tt6E5ILIMsUjvQf2k7quGoMjNULtgGeVuQinJDidP/+IEwoH4qbAAAAfjB8BgkqhkiG9w0BBwagbzBtAgEAMGgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMCSYnXMXk1Htl2232AgEQgDvSL7+snq0vI68TvmzvYQllB/j77Fhd/i5I1oVfk0Hg9n7iUDcqFt65HHx6cuy6qLCf6ZZrWMu/VvtwJw==\",\n\t\t\t\t\"aws_profile\": \"\"\n\t\t\t}\n\t\t],\n\t\t\"gcp_kms\": null,\n\t\t\"azure_kv\": null,\n\t\t\"hc_vault\": null,\n\t\t\"age\": null,\n\t\t\"lastmodified\": \"2024-09-26T12:55:28Z\",\n\t\t\"mac\": \"ENC[AES256_GCM,data:Da2QYj51vS0BRvAwA8wQWOYgS9clOeKlPxSKXdnM8up04mFfnSl1GDC8uGrHa3ZurCjjzK4mi9Ug/0uXt9cNFTPu9WWBVpmK2NGUjB5j1dfwwFPI4LWwICogYPcODE/RtIy0ROhHfNa4ZRpgEwUyGikFqtG1gWjdaPT4sdpu0u0=,iv:qb17WZHOfWZLdiJQAzYHr9PY8XKccsizNTriw7KQI3o=,tag:g+NaMWPpG8fOvIA4f0EejQ==,type:str]\",\n\t\t\"pgp\": null,\n\t\t\"unencrypted_suffix\": \"_unencrypted\",\n\t\t\"version\": \"3.9.0\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Placeholder Output and Case Transformation in Shell\nDESCRIPTION: Exhibits advanced formatting options for placeholders, such as controlling time format, log level length and case. Parameters can be set using parenthesis after the placeholder. Requires familiarity with Terragrunt's placeholder formatting options.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time(format='Y-m-d H:i:sv') %level(format=short,case=upper) %msg\"\n```\n\n----------------------------------------\n\nTITLE: Example Error Signals Output JSON\nDESCRIPTION: This JSON snippet shows the content of the `error-signals.json` file that Terragrunt generates in the working directory when an error is ignored based on the `ignore` block configuration. The content reflects the key-value pairs defined in the `signals` map of the corresponding `ignore` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n# error-signals.json\n\n{\n    \"alert_team\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Arguments and Env Vars for Terraform Commands in Terragrunt (HCL)\nDESCRIPTION: This HCL configuration demonstrates using the `extra_arguments` block within `terragrunt.hcl` to automatically pass the `-lock-timeout=20m` argument and set the `TF_VAR_var_from_environment` environment variable for specified Terraform/OpenTofu commands (`init`, `apply`, etc.). The `retry_lock` label identifies this specific configuration block. This allows setting consistent options like lock timeouts across multiple commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # Force OpenTofu/Terraform to keep trying to acquire a lock for\n  # up to 20 minutes if someone else already has the lock\n  extra_arguments \"retry_lock\" {\n    commands = [\n      \"init\",\n      \"apply\",\n      \"refresh\",\n      \"import\",\n      \"plan\",\n      \"taint\",\n      \"untaint\"\n    ]\n\n    arguments = [\n      \"-lock-timeout=20m\"\n    ]\n\n    env_vars = {\n      TF_VAR_var_from_environment = \"value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the terragrunt scaffold Command in Bash\nDESCRIPTION: Provides the basic syntax for the `terragrunt scaffold` command. It requires a `MODULE_URL` (path to an OpenTofu/Terraform module) and optionally accepts a `TEMPLATE_URL` for custom boilerplate templates, along with flags like `--var`, `--var-file`, `--no-include-root`, and `--root-file-name` for further customization.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold <MODULE_URL> [TEMPLATE_URL] [--var] [--var-file] [--no-include-root] [--root-file-name]\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Find with Exclude and Queue Construct Simulation - bash\nDESCRIPTION: Demonstrates Terragrunt's find command using --exclude in combination with the --queue-construct-as parameter (set to 'plan') and formats the output as JSON. This simulates queue-based behavior to preview upcoming plans with exclude logic applied, supporting dry-run scenarios. No dependencies apart from Terragrunt are necessary and outputs are suitable for further automation or manual inspection.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-exclude.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --exclude --queue-construct-as=plan --format=json\n```\n\n----------------------------------------\n\nTITLE: Running plan command with Terragrunt (Shell)\nDESCRIPTION: Executes the 'plan' operation using the Terragrunt shortcut. Terragrunt orchestrates the underlying OpenTofu/Terraform plan command, generating and displaying an execution plan without applying any changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/opentofu-shortcuts.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Using run_cmd with --terragrunt-global-cache and --terragrunt-quiet in HCL\nDESCRIPTION: Illustrates how to run a shell command with both --terragrunt-global-cache and --terragrunt-quiet flags for caching behavior that ignores directory context and redacts output. Useful for non-directory-sensitive commands producing sensitive data. Inputs: fully qualified executable path. Output: shell result with sensitive content protected and caching applied globally.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_23\n\nLANGUAGE: hcl\nCODE:\n```\nvalue = run_cmd(\"--terragrunt-global-cache\", \"--terragrunt-quiet\", \"/usr/local/bin/get-account-map\")\n\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt Configuration (Bash)\nDESCRIPTION: Command-line example demonstrating how to deploy a Terragrunt unit. It changes the directory to the specific unit (`live/stage/app`) and runs `terragrunt apply` to download the remote module, copy local files, and execute Terraform with the defined inputs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd live/stage/app\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: First-Class Expressions with Functions in terragrunt.hcl (HCL2)\nDESCRIPTION: This snippet shows HCL2-style function usage with native expression support—functions such as get_terraform_commands_that_need_locking() and get_env() are used directly without interpolation syntax. Available throughout terragrunt.hcl, this syntax is valid for Terragrunt 0.19.x+ and leverages HCL2's expression parsing capabilities. Functions return values to be consumed by Terragrunt and in turn by Terraform modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\\nterraform {\\n  extra_arguments \\\"retry_lock\\\" {\\n    # Using a function within first-class expressions!\\n    commands  = get_terraform_commands_that_need_locking()\\n    arguments = [\\\"-lock-timeout=20m\\\"]\\n  }\\n}\\ninputs = {\\n  # This now works with Terragrunt 0.19.x and newer!\\n  foo = get_env(\\\"FOO\\\", \\\"default\\\")\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Removing Old Unit Configurations Using Bash\nDESCRIPTION: This bash snippet removes legacy unit directories (service, db, sgs) using 'rm -rf', enabling replacement by stack-generated code. It assumes you are in the appropriate directory and have permissions to delete these directories. Used during the migration to keep only the new stack configuration files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd non-prod/us-east-1/stateful-ec2-asg-service\nrm -rf service db sgs\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector and Prometheus with Docker Compose - YAML\nDESCRIPTION: Defines a Docker Compose setup that launches the OpenTelemetry collector and Prometheus as services. Mounts local configuration files for each service, exposes necessary ports for metric collection/exporting, and ensures the collector starts before Prometheus using dependency management. Required: Docker, docker-compose, valid 'otel-collector-config.yaml' and 'prometheus.yml' files. Expected input is a Compose YAML file; starting the stack will result in up and running telemetry services.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  otel-collector:\n    image: otel/opentelemetry-collector:0.94.0\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otelcol/config.yaml\n    ports:\n      - \"4317:4317\" # OTLP gRPC receiver\n      - \"4318:4318\" # OTLP HTTP receiver\n      - \"8889:8889\" # Prometheus exporter\n  prometheus:\n    image: prom/prometheus:v2.45.3\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n      - \"9090:9090\"\n    depends_on:\n      - otel-collector\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Traces to Jaeger - Environment Variable Setup - Bash\nDESCRIPTION: This snippet sets environment variables to configure Terragrunt to export traces in OpenTelemetry format to a locally running Jaeger instance. It requires Terragrunt to read these environment variables when running. 'TG_TELEMETRY_TRACE_EXPORTER' selects the HTTP exporter, 'TG_TELEMETRY_TRACE_EXPORTER_HTTP_ENDPOINT' specifies the Jaeger endpoint, and 'TG_TELEMETRY_TRACE_EXPORTER_INSECURE_ENDPOINT' allows self-signed certificates. Input: none. Output: Environment prepared for Terragrunt telemetry export.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_TRACE_EXPORTER=http\nexport TG_TELEMETRY_TRACE_EXPORTER_HTTP_ENDPOINT=localhost:4318\nexport TG_TELEMETRY_TRACE_EXPORTER_INSECURE_ENDPOINT=true\n```\n\n----------------------------------------\n\nTITLE: Skipping Output Fetching for Terragrunt Dependencies (HCL)\nDESCRIPTION: This HCL snippet demonstrates the use of `skip_outputs = true` within a `dependency` block in `terragrunt.hcl`. When set to true, Terragrunt establishes the dependency relationship for ordering purposes (e.g., in `run-all` commands) but does not attempt to fetch the outputs from the specified dependency ('vpc'). This is useful when the outputs are not needed or cannot be fetched.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  skip_outputs = true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt with emerge on Gentoo Linux\nDESCRIPTION: This command installs the binary package `terragrunt-bin` on Gentoo Linux systems using the emerge package manager from the Guru repository. The Guru repository needs to be configured.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nemerge -a app-admin/terragrunt-bin\n```\n\n----------------------------------------\n\nTITLE: Linting Terragrunt HCL: Error on Unset Variables with Inputs Flag in Shell\nDESCRIPTION: This snippet extends the basic Terragrunt HCL lint command by using the --inputs flag, which causes the lint process to throw an error if any variables referenced by modules are not set during provisioning. Requires Terragrunt to be installed and accessible from the shell. The command is useful for catching configuration gaps before execution; output will highlight unset variables.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/hcl/lint.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt hcl lint --inputs\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Docs Directory (Bash)\nDESCRIPTION: Changes the current working directory to the `docs` subdirectory. This directory contains the source files, configuration, and dependencies for the Jekyll-based Terragrunt website.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\n```\n\n----------------------------------------\n\nTITLE: Example Generated terragrunt.hcl Configuration in HCL\nDESCRIPTION: Shows a sample `terragrunt.hcl` file generated by `terragrunt scaffold`. It includes an automatically configured `terraform { source = ... }` block pointing to the specified module (with the latest release tag) and an `inputs` block listing required and optional variables from the module with placeholders for values.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# This is a Terragrunt module generated by boilerplate.\nterraform {\n  source = \"git::https://github.com/gruntwork-io/terragrunt-infrastructure-modules-example.git//modules/mysql?ref=v0.8.1\"\n}\n\ninputs = {\n  # --------------------------------------------------------------------------------------------------------------------\n  # Required input variables\n  # --------------------------------------------------------------------------------------------------------------------\n\n  # Type: string\n  # Description: The AWS region to deploy to (e.g. us-east-1)\n  aws_region = \"\" # TODO: fill in value\n\n  # Type: string\n  # Description: The name of the DB\n  name = \"\" # TODO: fill in value\n\n  # Type: string\n  # Description: The instance class of the DB (e.g. db.t2.micro)\n  instance_class = \"\" # TODO: fill in value\n\n  # (... full list of inputs omitted for brevity ...)\n}\n```\n\n----------------------------------------\n\nTITLE: Using show-config-path Flag with Terragrunt HCL Validate (Bash)\nDESCRIPTION: This Bash command demonstrates how to run Terragrunt's HCL validation while enabling the 'show-config-path' flag. When executed, Terragrunt will output the full file paths for any HCL configurations found to be invalid, aiding in debugging. Requires Terragrunt to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-validate-show-config-path.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt hcl validate --show-config-path\n```\n\n----------------------------------------\n\nTITLE: Emitting Find Results as JSON (CLI, Bash)\nDESCRIPTION: Executes `terragrunt find` with the `--format 'json'` flag to serialize the list of discovered configurations to JSON format. This enables downstream parsing/automation and provides extended metadata per configuration. Requires `terragrunt` installed and accepts no further parameters. The output will be a valid JSON array describing each configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --format 'json'\n```\n\n----------------------------------------\n\nTITLE: JSON Output Showing Exclude Configurations (CLI, Bash)\nDESCRIPTION: Gives a sample of the JSON output including the exclude block for discovered units, as produced by `terragrunt find --exclude --format=json`. Displays how the exclude data is structured in each output item, such as exclude actions or conditions. Useful for visual validation or further processing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"action/exclude-apply\",\n    \"exclude\": {\n      \"exclude_dependencies\": true,\n      \"actions\": [\n        \"apply\"\n      ],\n      \"if\": true\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Module Files with Terragrunt exec and --in-download-dir (Bash)\nDESCRIPTION: This snippet demonstrates using the `--in-download-dir` flag with `terragrunt exec` to run a command (`cat main.tf`) within the directory where Terragrunt downloads the Terraform module source code. This allows inspecting module files directly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/exec.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt exec --in-download-dir -- cat main.tf\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Input Variables in HCL Configuration (HCL)\nDESCRIPTION: This HCL snippet shows how to define an input variable named `message` within a `terragrunt.hcl` configuration file. These inputs are made available as environment variables (prefixed with `TF_VAR_`) to commands run via `terragrunt exec`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/exec.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  message = \"Hello, Terragrunt!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terragrunt Configurations and Dependencies in JSON Format via Bash\nDESCRIPTION: This snippet uses Terragrunt's find command with --json and --dependencies flags to output configurations and their dependencies as a JSON array. Requires Terragrunt, and configurations should have dependencies defined. The output is in JSON format, detailing each unit's path and dependencies, sorted by path. The result facilitates programmatic parsing or further scripting.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-dag.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find --json --dependencies\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/dev/db\",\n    \"dependencies\": [\n      \"live/dev/vpc\"\n    ]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/dev/ec2\",\n    \"dependencies\": [\n      \"live/dev/vpc\",\n      \"live/dev/db\"\n    ]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/dev/vpc\"\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/prod/db\",\n    \"dependencies\": [\n      \"live/prod/vpc\"\n    ]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/prod/ec2\",\n    \"dependencies\": [\n      \"live/prod/vpc\",\n      \"live/prod/db\"\n    ]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/prod/vpc\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Setting input value using get_aws_caller_identity_user_id in HCL\nDESCRIPTION: Assigns the UserId of the active AWS identity to an input variable via get_aws_caller_identity_user_id. Needs valid AWS credentials; often used for generating globally unique resources. Output is an AWS UserId string tied to current credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\ninputs = {\n  caller_user_id = get_aws_caller_identity_user_id()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing a Shell Script with Terragrunt Before Hook in HCL\nDESCRIPTION: Configures a `before_hook` named `test_hook` in `terragrunt.hcl`. This hook executes an external shell script (`hook.sh`) located in the Terragrunt working directory before the `apply` command runs. This demonstrates invoking custom scripts via hooks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  before_hook \"test_hook\" {\n    commands     = [\"apply\"]\n    execute      = [\"hook.sh\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan Across All Modules - Shell/Bash\nDESCRIPTION: This snippet demonstrates how to use the Terragrunt CLI to execute a plan across all modules in the stack using the 'run-all' feature. It showcases standard output logs for resource attributes such as subnet IDs and tags, illustrating mocked outputs for planning. Requires Terragrunt and AWS credentials set up. The primary parameters are the Terragrunt CLI command and the current working directory, and the output is a log of planned resource changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\n...\n16:53:04.037 STDOUT [ec2] tofu:       + source_dest_check                    = true\n16:53:04.037 STDOUT [ec2] tofu:       + spot_instance_request_id             = (known after apply)\n16:53:04.037 STDOUT [ec2] tofu:       + subnet_id                            = \"mock-subnet\"\n16:53:04.037 STDOUT [ec2] tofu:       + tags                                 = {\n16:53:04.038 STDOUT [ec2] tofu:           + \"Environment\" = \"dev\"\n...\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Module Source Path (HCL)\nDESCRIPTION: Example demonstrating how to configure the 'source' attribute within a Terragrunt 'terraform' block to use Terraform configuration files from a local relative path. Terragrunt copies these files along with the working directory contents to a temporary location before execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"../modules/vpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using get_terraform_commands_that_need_locking in extra_arguments block (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to use the built-in function get_terraform_commands_that_need_locking() in an extra_arguments block within terragrunt.hcl to dynamically set which Terraform/OpenTofu commands should receive the '-lock-timeout=20m' argument. Requires Terragrunt and is designed to simplify keeping lock-related arguments in sync with relevant commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Force OpenTofu/Terraform to keep trying to acquire a lock for up to 20 minutes if someone else already has the lock\n  extra_arguments \"retry_lock\" {\n    commands  = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock-timeout=20m\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Region Locally using HCL (Terragrunt / Terraform)\nDESCRIPTION: Defines a local variable 'region' in a region-specific configuration file (e.g., 'us-east-1/region.hcl'). This value is referenced by other Terragrunt configuration files to dynamically determine the AWS region of deployment. This HCL snippet is included via Terragrunt's 'find_in_parent_folders' and 'read_terragrunt_config' functions. Outputs a local variable value with no user-facing output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_24\n\nLANGUAGE: hcl\nCODE:\n```\n# us-east-1/region.hcl\\nlocals {\\n  region = \\\"us-east-1\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Terragrunt Plan Output with Mock Outputs - Bash\nDESCRIPTION: This Bash code snippet shows expected Terragrunt run-all plan output when mock_outputs are used. The logs indicate the correct dependency order, acknowledge the use of mock outputs, and display the resulting local_file resource configuration with substituted mock values. This allows planning to proceed without errors until real outputs become available on apply.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\\n09:29:03.461 INFO   The stack at . will be processed in the following order for command plan:\\nGroup 1\\n- Module ./foo\\n\\nGroup 2\\n- Module ./bar\\n\\n...\\n\\n09:29:03.644 WARN   [bar] Config ./foo/terragrunt.hcl is a dependency of ./bar/terragrunt.hcl that has no outputs, but mock outputs provided and returning those in dependency output.\\n\\n...\\n\\n09:29:03.898 STDOUT [bar] tofu:   + resource \"local_file\" \"file\" {\\n09:29:03.898 STDOUT [bar] tofu:       + content              = \"Foo content: Mocked content from foo\"\\n09:29:03.898 STDOUT [bar] tofu:       + content_base64sha256 = (known after apply)\\n09:29:03.898 STDOUT [bar] tofu:       + content_base64sha512 = (known after apply)\\n09:29:03.898 STDOUT [bar] tofu:       + content_md5          = (known after apply)\\n09:29:03.898 STDOUT [bar] tofu:       + content_sha1         = (known after apply)\\n09:29:03.898 STDOUT [bar] tofu:       + content_sha256       = (known after apply)\\n09:29:03.898 STDOUT [bar] tofu:       + content_sha512       = (known after apply)\\n09:29:03.898 STDOUT [bar] tofu:       + directory_permission = \"0777\"\\n09:29:03.898 STDOUT [bar] tofu:       + file_permission      = \"0777\"\\n09:29:03.898 STDOUT [bar] tofu:       + filename             = \"./hi.txt\"\\n09:29:03.898 STDOUT [bar] tofu:       + id                   = (known after apply)\\n09:29:03.898 STDOUT [bar] tofu:     }\n```\n\n----------------------------------------\n\nTITLE: Defining the 'all' Flag Configuration in Terragrunt (YAML)\nDESCRIPTION: This YAML configuration defines the `all` flag for Terragrunt. It specifies the flag's name as 'all', describes its function (bootstrapping all units in the current directory when set), sets its data type to boolean, and links it to the environment variable `TG_ALL`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-bootstrap-all.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: all\ndescription: When this flag is set, Terragrunt will bootstrap all units discovered in the current working directory.\ntype: bool\nenv:\n  - TG_ALL\n---\n```\n\n----------------------------------------\n\nTITLE: Setting input value using get_terraform_cli_args in HCL\nDESCRIPTION: Utilizes get_terraform_cli_args to provide the arguments provided to the current Terraform command as an inputs map value. Requires Terragrunt runtime; outputs an array of CLI args suitable for advanced introspection or propagation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\ninputs = {\n  current_cli_args = get_terraform_cli_args()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt with Custom Variable Input (Bash)\nDESCRIPTION: Runs Terragrunt's apply command, passing a custom value for the 'content' variable using OpenTofu/Terraform's CLI. Requires files to use the corresponding variable in their configuration. Outputs updated resources based on the input variable value.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply -auto-approve -var content='Hello, Terragrunt!'\n```\n\n----------------------------------------\n\nTITLE: Referencing Shared Terraform Module from Units - HCL\nDESCRIPTION: This HCL snippet is used in the main.tf files of Terragrunt unit directories ('foo' and 'bar') to define and provide input variables to a shared Terraform module. The module 'shared' is referenced via the 'source' attribute pointing to a relative path. The required dependency is that the shared module (at ../shared) exists and that a variable 'content' is defined. The 'content' variable serves as input from the unit. Outputs are the instantiation of the shared module with unit-specific input. Limitations include the requirement for consistent module and variable naming and file placement.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/main.tf and bar/main.tf\nvariable \"content\" {}\n\nmodule \"shared\" {\n  source = \"../shared\"\n\n  content = var.content\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Terragrunt Scaffold CLI - Bash\nDESCRIPTION: Demonstrates how to set template variables when scaffolding with Terragrunt using the --var flag on the CLI. Requires Terragrunt installed and access to the desired repository module. Variables are passed as key=value pairs, and multiple --var flags can be specified for multiple variables. The command will scaffold the specified module, replacing template variables with provided values.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/scaffold-var.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/org/repo//modules/mysql \\\n  --var=\\\"environment=prod\\\" \\\n  --var=\\\"region=us-east-1\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Provider Cache via Environment Variables in Shell\nDESCRIPTION: This shell command illustrates an alternative method for configuring the Terragrunt Provider Cache using environment variables. Before executing `terragrunt apply`, it sets `TG_PROVIDER_CACHE=1` to enable the cache, and defines the host (`TG_PROVIDER_CACHE_HOST`), port (`TG_PROVIDER_CACHE_PORT`), and security token (`TG_PROVIDER_CACHE_TOKEN`) using corresponding environment variables. This achieves the same configuration as using command-line flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 \\\nTG_PROVIDER_CACHE_HOST=192.168.0.100 \\\nTG_PROVIDER_CACHE_PORT=5758 \\\nTG_PROVIDER_CACHE_TOKEN=my-secret \\\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Flags - YAML\nDESCRIPTION: This YAML snippet defines the 'all' flag configuration for Terragrunt, specifying its name, description, type, and associated environment variable (TG_ALL). The 'all' flag, when true, causes Terragrunt to delete the backend state for all units detected in the current directory. Users should ensure Terragrunt is installed and recognize that this configuration governs flag defaults and overrides, with the environment variable TG_ALL serving as an alternative source for this setting.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-delete-all.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nname: all\ndescription: When this flag is set Terragrunt will delete the backend state for all units discovered in the current working directory.\ntype: bool\nenv:\n  - TG_ALL\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Development Container for Terragrunt\nDESCRIPTION: Defines a VSCode Development Container configuration (`.devcontainer.json`) for the Terragrunt project. It specifies a Go-based container image, integrates `golangci-lint`, installs `markdownlint` with custom rules, includes Node.js and OpenTofu features, maps the host network, and runs commands to set up the documentation server (`npm install && npm run dev` in `docs-starlight`) upon container creation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n# .devcontainer.json\n\n{\n  \"name\": \"Terragrunt Contributing IDE\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:1-1.23-bookworm\",\n  \"runArgs\": [\"--network=host\"],\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {\n        \"go.lintTool\": \"golangci-lint\",\n        \"go.lintFlags\": [\n          \"--fast\"\n        ],\n        \"markdownlint.config\": {\n          \"MD013\": false,\n          \"MD024\": false\n        }\n      },\n      \"extensions\": [\n        \"davidanson.vscode-markdownlint\"\n      ]\n    }\n  },\n  \"features\": {\n    \"ghcr.io/devcontainers/features/node:1\": {},\n    \"ghcr.io/robbert229/devcontainer-features/opentofu:1\": {}\n  },\n  \"postCreateCommand\": \"cd docs-starlight && npm install && npm run dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variable with Current Terraform Command using HCL\nDESCRIPTION: This HCL snippet demonstrates passing the currently executing Terraform command (e.g., 'plan', 'apply') as an input variable (`current_command`) to the Terraform module. It uses the `get_terraform_command()` function within the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  current_command = get_terraform_command()\n}\n```\n\n----------------------------------------\n\nTITLE: Replicating 'JSON' Log Format Preset (Shell)\nDESCRIPTION: Provides the `--log-custom-format` string equivalent to Terragrunt's `--log-format json` preset. It constructs a JSON object string where keys are literal text and values are placeholders (`%time`, `%level`, `%prefix`, `%tf-path`, `%msg`) formatted with options like RFC3339 time format, filename-only path, relative message paths, JSON escaping, and disabled color output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format '{\"time\":\"%time(format=rfc3339,escape=json)\", \"level\":\"%level(escape=json)\", \"prefix\":\"%prefix(path=short-relative,escape=json)\", \"tf-path\":\"%tf-path(path=filename,escape=json)\", \"msg\":\"%msg(path=relative,escape=json,color=disable)\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Strict Linter via Makefile (Bash)\nDESCRIPTION: This snippet utilizes the 'run-strict-lint' Makefile recipe to execute the strict golangci-lint configuration. Requires GNU Make, a properly configured Makefile, and all relevant linter dependencies. Provides a simplified interface for contributors; outputs are linter warnings and errors according to the strict rules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake run-strict-lint\n```\n\n----------------------------------------\n\nTITLE: Checking Go Code Formatting with Make (Bash)\nDESCRIPTION: This Make command checks if all Go source files in the project are correctly formatted using `gofmt`. It exits with a non-zero status code if any files require formatting.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake fmtcheck\n```\n\n----------------------------------------\n\nTITLE: Specifying Terraform Registry Submodule Source using tfr Protocol (HCL)\nDESCRIPTION: Example showing how to configure the 'source' attribute in Terragrunt to use a specific submodule (e.g., 'modules/iam-policy') from a module hosted in the Terraform Registry, utilizing the 'tfr' protocol and the '//' submodule notation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # Using the iam-policy submodule from the terraform-aws-modules/iam module\n  source = \"tfr:///terraform-aws-modules/iam/aws//modules/iam-policy?version=4.3.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output Showing Configurations and Dependencies (CLI, Bash)\nDESCRIPTION: Provides a sample JSON output using the dependencies-included format for `terragrunt find --dependencies --format=json`, demonstrating how configurations and their dependencies will look in the serialized output. Parameters are the configurations themselves; output includes arrays of dependency paths.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"unitA\",\n    \"dependencies\": []\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"unitB\",\n    \"dependencies\": [\"../unitA\", \"../../external/unitC\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Inputs in terragrunt.hcl for Hook Access\nDESCRIPTION: Shows how to define variables within an `inputs` block in `terragrunt.hcl`. These inputs are passed to OpenTofu/Terraform as variables and also become accessible as environment variables (prefixed with `TF_VAR_`) within hook scripts.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  bucket_name = \"my-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Terragrunt Logs for a Specific Unit (unit1) using grep (Bash)\nDESCRIPTION: Demonstrates post-processing the log file generated by a `terragrunt run --all` command. It uses `grep` to filter and display only the log lines associated with a specific module, identified by the `[unit1]` prefix added by Terragrunt's logging system.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ grep '\\[unit1\\]' < logs\n16:01:51.272 STDOUT [unit1] tofu: null_resource.empty: Refreshing state... [id=3335573617542340690]\n16:01:51.279 STDOUT [unit1] tofu: OpenTofu used the selected providers to generate the following execution\n16:01:51.279 STDOUT [unit1] tofu: plan. Resource actions are indicated with the following symbols:\n16:01:51.279 STDOUT [unit1] tofu: -/+ destroy and then create replacement\n16:01:51.279 STDOUT [unit1] tofu: OpenTofu will perform the following actions:\n16:01:51.279 STDOUT [unit1] tofu:   # null_resource.empty must be replaced\n16:01:51.279 STDOUT [unit1] tofu: -/+ resource \"null_resource\" \"empty\" {\n16:01:51.279 STDOUT [unit1] tofu:       ~ id       = \"3335573617542340690\" -> (known after apply)\n16:01:51.279 STDOUT [unit1] tofu:       ~ triggers = { # forces replacement\n16:01:51.280 STDOUT [unit1] tofu:           ~ \"always_run\" = \"2025-01-09T21:01:17Z\" -> (known after apply)\n16:01:51.280 STDOUT [unit1] tofu:         }\n16:01:51.280 STDOUT [unit1] tofu:     }\n16:01:51.280 STDOUT [unit1] tofu: Plan: 1 to add, 0 to change, 1 to destroy.\n16:01:51.280 STDOUT [unit1] tofu: \n16:01:51.297 STDOUT [unit1] tofu: null_resource.empty: Destroying... [id=3335573617542340690]\n16:01:51.297 STDOUT [unit1] tofu: null_resource.empty: Destruction complete after 0s\n16:01:51.300 STDOUT [unit1] tofu: null_resource.empty: Creating...\n16:01:51.301 STDOUT [unit1] tofu: null_resource.empty: Provisioning with 'local-exec'...\n16:01:51.301 STDOUT [unit1] tofu: null_resource.empty (local-exec): Executing: [\"/bin/sh\" \"-c\" \"echo 'sleeping...'; sleep 1; echo 'done sleeping'\"]\n16:01:51.304 STDOUT [unit1] tofu: null_resource.empty (local-exec): sleeping...\n16:01:52.311 STDOUT [unit1] tofu: null_resource.empty (local-exec): done sleeping\n16:01:52.312 STDOUT [unit1] tofu: null_resource.empty: Creation complete after 1s [id=4749136145104485309]\n16:01:52.322 STDOUT [unit1] tofu: \n16:01:52.322 STDOUT [unit1] tofu: Apply complete! Resources: 1 added, 0 changed, 1 destroyed.\n16:01:52.322 STDOUT [unit1] tofu: \n\n```\n\n----------------------------------------\n\nTITLE: Defining the `strict-mode` Terragrunt Configuration Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `strict-mode` configuration parameter for Terragrunt. It specifies the parameter's name (`strict-mode`), provides a description of its purpose (enabling strict mode), sets its data type to boolean (`bool`), and lists the corresponding environment variable (`TG_STRICT_MODE`) that can alternatively control this setting. When enabled, Terragrunt operates in strict mode, opting users into future breaking changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/strict-mode.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: strict-mode\ndescription: Enables strict mode for Terragrunt.\ntype: bool\nenv:\n  - TG_STRICT_MODE\n---\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt to Output Dependency Graph with External Units (Bash)\nDESCRIPTION: Demonstrates the use of the Terragrunt CLI command to find and print all units and their dependencies, including external units if the '--external' flag is set. Assumes Terragrunt is installed and configured in the working environment. The command supports additional flags for output formatting; '--format json' outputs JSON for automation or parsing purposes. Input: command-line options; Output: JSON describing all units and their dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-external.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --dependencies --external --format json\n```\n\n----------------------------------------\n\nTITLE: Planning Resource Destruction with Terragrunt (Bash)\nDESCRIPTION: Runs 'terragrunt run-all plan -destroy' from the root directory, generating a plan that previews what resources would be destroyed without actually performing destruction. This is a safety step to review the blast radius and prevent accidental deletion. Requires Terragrunt, correct AWS access, and root configuration context.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n# From the root directory\\n$ terragrunt run-all plan -destroy\n```\n\n----------------------------------------\n\nTITLE: Enabling Terragrunt Provider Cache via CLI Flag\nDESCRIPTION: This command demonstrates how to enable the experimental Terragrunt Provider Cache feature for a `run-all apply` operation using the `--provider-cache` command-line flag. Enabling the cache optimizes provider downloads and disk usage during concurrent Terraform runs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt run-all apply --provider-cache\n```\n\n----------------------------------------\n\nTITLE: Defining the 'feature' Terragrunt Variable (YAML)\nDESCRIPTION: This YAML snippet defines a Terragrunt variable named `feature`. It specifies that this variable is of type string and is used to set feature flags for HCL code processing. The variable can also be controlled via the `TG_FEATURE` environment variable.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/feature.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: feature\ndescription: Set feature flags for the HCL code.\ntype: string\nenv:\n  - TG_FEATURE\n---\n```\n\n----------------------------------------\n\nTITLE: Permissive IAM Policy for Terragrunt Use (JSON)\nDESCRIPTION: Sample IAM policy granting broad DynamoDB and S3 permissions to Terragrunt for resource management. Intended as a starting point to ensure no permissions issues but should be tightened for production. Requires substitution of placeholders (account ID and resource names). Grants all actions on DynamoDB tables and S3 buckets with names that match template patterns.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Sid\\\": \\\"AllowAllDynamoDBActionsOnAllTerragruntTables\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": \\\"dynamodb:*\\\",\\n            \\\"Resource\\\": [\\n                \\\"arn:aws:dynamodb:*:1234567890:table/terragrunt*\\\"\\n            ]\\n        },\\n        {\\n            \\\"Sid\\\": \\\"AllowAllS3ActionsOnTerragruntBuckets\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": \\\"s3:*\\\",\\n            \\\"Resource\\\": [\\n                \\\"arn:aws:s3:::terragrunt*\\\",\\n                \\\"arn:aws:s3:::terragrunt*/*\\\"\\n            ]\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terragrunt Alpha Pre-release Tag Format (Plaintext)\nDESCRIPTION: Illustrates the naming convention for Terragrunt alpha pre-releases cut from feature branches. It includes the channel ('alpha'), the date (YYYYMMDD), and an optional incremental number if multiple pre-releases are cut on the same day. This format is used for testing new features externally before general release.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nalpha20250225\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Echo Command with Terragrunt exec (Bash)\nDESCRIPTION: This example shows how to use `terragrunt exec` to run a basic shell command (`echo`). The command following `--` is executed by Terragrunt within its managed context.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/exec.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt exec -- echo \"Hello, Terragrunt!\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output via Global No-Color Flag (CLI, Bash)\nDESCRIPTION: Executes `terragrunt find` with the `--no-color` global flag to disable terminal coloring, ensuring plain text output suitable for further processing. No dependencies are required beyond `terragrunt`. Used mainly when output is redirected or parsed programmatically.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --no-color\n```\n\n----------------------------------------\n\nTITLE: Default Terragrunt List Output (Excluding Hidden)\nDESCRIPTION: This Bash example shows the default output of the 'terragrunt list -l' command. By default, hidden directories (those starting with a dot) are excluded from the results, displaying only non-hidden stacks and units.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-hidden.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l\nType  Path\nstack stack\nunit  unit\n```\n\n----------------------------------------\n\nTITLE: Replicating 'Bare' Log Format Preset (Shell)\nDESCRIPTION: Provides the command-line arguments equivalent to Terragrunt's `--log-format bare` preset. It uses `--tf-forward-stdout` and a `--log-custom-format` string featuring level, interval, message, and prefix placeholders with specific formatting options (case, width, path, prefix/suffix).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n--tf-forward-stdout --log-custom-format \"%level(case=upper,width=4)[%interval] %msg %prefix(path=short,prefix='prefix=[',suffix=']')\"\n```\n\n----------------------------------------\n\nTITLE: Terragrunt run-all plan with Missing Dependency Outputs (Bash and Error Output)\nDESCRIPTION: Displays the error flow when 'terragrunt run-all plan' is executed and a dependency module lacks outputs. Error explains the possible causes and suggests workaround via mocking. Useful for troubleshooting dependency wiring in infra-as-code workflows.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\n...\n16:50:22.153 STDOUT [vpc] tofu: Note: You didn't use the -out option to save this plan, so OpenTofu can't\n16:50:22.153 STDOUT [vpc] tofu: guarantee to take exactly these actions if you run \"tofu apply\" now.\n16:50:22.854 ERROR  [ec2] Module ./ec2 has finished with an error\n16:50:22.855 ERROR  error occurred:\n\n* ./vpc/terragrunt.hcl is a dependency of ./ec2/terragrunt.hcl but detected no outputs. Either the target module has not been applied yet, or the module has no outputs. If this is expected, set the skip_outputs flag to true on the dependency block.\n\n16:50:22.855 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Stack Clean Command (Shell)\nDESCRIPTION: Shell command demonstrating the usage of 'terragrunt stack clean'. This command removes all auto-generated '.terragrunt-stack' directories created by previous 'terragrunt stack generate' or 'terragrunt stack run' commands. Requires Terragrunt to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/clean.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt stack clean\n```\n\n----------------------------------------\n\nTITLE: Invoking Terragrunt Plan Command with Deprecated Flag - Bash\nDESCRIPTION: Demonstrates invoking the Terragrunt plan operation with the legacy --terragrunt-non-interactive flag. This approach relies on the old CLI syntax before flag prefixes were updated. The expected behavior is to run a plan in non-interactive mode; however, this syntax is now deprecated and should be updated.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --terragrunt-non-interactive\n```\n\n----------------------------------------\n\nTITLE: Reading File Content with `file()` Function (HCL)\nDESCRIPTION: Illustrates the usage of the `file()` function within a Terragrunt configuration (`terragrunt.hcl`) to read the contents of a specified file (`assets/mysql/assets.txt`). The path provided to the `file()` function is relative to the directory containing the `terragrunt.hcl` file where the function is called.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nfile(\"assets/mysql/assets.txt\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Ignoring Errors Based on Feature Flag in Terragrunt HCL\nDESCRIPTION: This HCL example demonstrates combining feature flags and error handling. The 'enable_flaky_module' feature flag controls both the module version used (via `locals`) and whether specific errors ('flaky module error') are ignored by the `errors` block. This allows enabling a potentially unstable module and simultaneously suppressing its known errors.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nfeature \"enable_flaky_module\" {\n  default = false\n}\n\nlocals {\n  version = feature.enable_flaky_module.value ? \"v1.0.0\" : \"v1.1.0\"\n}\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//storage/s3?ref=${local.version}\"\n}\n\nerrors {\n    # Ignore errors when set\n    ignore \"flaky_module_errors\" {\n        ignorable_errors = feature.enable_flaky_module.value ? [\n            \".*Error: flaky module error.*\"\n        ] : []\n        message = \"Ignoring flaky module error\"\n        signals = {\n            send_notification = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Terragrunt Stack Output in Raw Format\nDESCRIPTION: Executes 'terragrunt stack output' specifying a particular output key ('app.id') and using the '--format raw' flag. This retrieves the value of the specified output from its corresponding unit and prints only the raw value, suitable for scripting.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack output --format raw app.id\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform/OpenTofu Apply with Environment Variables (Bash)\nDESCRIPTION: This Bash snippet demonstrates the approximate equivalent command to running `terragrunt apply` with the preceding `inputs` example. It shows how Terragrunt sets `TF_VAR_` environment variables (with maps JSON encoded) before calling `tofu apply` or `terraform apply`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTF_VAR_instance_type=\"t2.micro\" \\\nTF_VAR_instance_count=10 \\\nTF_VAR_tags='{\"Name\":\"example-app\"}' \\\ntofu apply # or terraform apply\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt Configuration Using Overridden Local Source\nDESCRIPTION: Demonstrates executing `terragrunt run --all apply` with the `--source` flag set to `/source/infrastructure-modules`. Similar to the `plan` example, this command applies the configurations across all dependent units defined in the project. However, instead of using the remote Git source specified in the HCL configuration (like `git::git@github.com:acme/infrastructure-modules.git//networking/vpc`), Terragrunt resolves the module path relative to the provided local directory (`/source/infrastructure-modules/networking/vpc`), allowing application of local code changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all apply --source /source/infrastructure-modules\n```\n\n----------------------------------------\n\nTITLE: Referencing Computed Locals From an External HCL File - HCL\nDESCRIPTION: Demonstrates loading a computed value from another HCL file and appending additional content, resulting in a composed string value. This allows computed and static data to be flexibly combined in Terragrunt inputs. Requires the computed.hcl file and appropriate command environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_43\n\nLANGUAGE: hcl\nCODE:\n```\n# unit/terragrunt.hcl\n\nlocals {\n  # Load the data from computed.hcl\n  computed = read_terragrunt_config(find_in_parent_folders(\"computed.hcl\"))\n\n  # Access the computed value from the loaded file\n  computed_value = \"${local.computed.locals.computed_value} world!\" # <-- This will be \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Terragrunt Backend State Between Units (Bash)\nDESCRIPTION: Demonstrates the shell commands to duplicate a unit directory, migrate backend state using Terragrunt, and cleanup the old unit. Requires both old and new unit configurations to be present and properly set up, and assumes the user will run these commands from a compatible environment with Terragrunt installed. Expects as input the old and new unit directory names, and produces a state migration along with removal of the original unit. The --force flag is optionally available for handling certain backend states, such as when versioning is not enabled.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/migrate.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp -R old-unit-name new-unit-name\nterragrunt backend migrate old-unit-name new-unit-name\nrm -rf old-unit-name\n```\n\n----------------------------------------\n\nTITLE: Using Long Format with Dependencies (Alphabetical) - Bash\nDESCRIPTION: Demonstrates running 'terragrunt list -l --dependencies' to show configuration details in a tabular, long format including dependency columns, with results sorted alphabetically by name. This output helps users visualize the dependency relationships between configurations explicitly. Works with any Terragrunt setup that defines dependencies among configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-dag.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l --dependencies\nType  Path           Dependencies\nunit  live/dev/db    live/dev/vpc\nunit  live/dev/ec2   live/dev/db, live/dev/vpc\nunit  live/dev/vpc\nunit  live/prod/db   live/prod/vpc\nunit  live/prod/ec2  live/prod/db, live/prod/vpc\nunit  live/prod/vpc\n```\n\n----------------------------------------\n\nTITLE: Using Terragrunt `find --json` with `jq` in Bash\nDESCRIPTION: This Bash example demonstrates executing the `terragrunt find` command with the `--json` flag to output findings (stacks and units) in JSON format. The output is then piped to the `jq` command-line utility, which parses the JSON and filters it to display only the first three elements (`.[:3]`) of the resulting array. This showcases a common pattern for programmatically processing Terragrunt output. Requires `terragrunt` and `jq` to be installed and available in the PATH.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-json.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find --json | jq '.[:3]'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"stack\",\n    \"path\": \"basic\"\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"basic/units/chick\"\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"basic/units/chicken\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Mise (Bash)\nDESCRIPTION: Downloads and installs all prerequisite tools and environment dependencies as defined by the project, using the 'mise' tool. This is the first setup step and required before working with project source code. No additional parameters are needed and expected output is a properly configured local environment. Requires the 'mise' tool to be installed globally prior to execution; may need shell or terminal access.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise install\n\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flags and Dynamic Module Source in Terragrunt HCL\nDESCRIPTION: This HCL snippet shows how to define a feature flag ('s3_version') with a default value, and how to reference the flag dynamically in the Terraform module source URL. Dependencies include Terragrunt and a remote git repository. The key parameter is the feature flag name and its value, controlling which module version is fetched. Inputs are feature flag overrides; output is the selected module version.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfeature \"s3_version\" {\n  default = \"v1.0.0\"\n}\n\nterraform {\n  source = \"git::git@github.com:acme/infrastructure-modules.git//storage/s3?ref=${feature.s3_version.value}\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Stack without Validation - Terragrunt CLI - Bash\nDESCRIPTION: This bash command instructs Terragrunt to generate the stack but disables the validation checks for unit and stack structure via the --no-stack-validate flag. Intended for advanced scenarios where rapid iteration or non-standard layouts are desired. Dependencies include Terragrunt and an existing stack configuration file. Outputs may contain incomplete or misconfigured units if validation is essential to the workflow; use with caution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/generate.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack generate --no-stack-validate\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Output and Resource Refresh Logs (Text)\nDESCRIPTION: Shows the sequence of stdout/stderr log lines generated by Terragrunt during a destroy operation, including destruction complete messages and resource refreshes. Useful for debugging or auditing execution flow in a multi-module stack. Log prefixes help track action per module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_16\n\nLANGUAGE: txt\nCODE:\n```\n16:33:28.820 STDOUT [ec2] tofu: aws_instance.this[0]: Destruction complete after 1m11s\n16:33:28.936 STDOUT [ec2] tofu:\n16:33:28.936 STDOUT [ec2] tofu: Destroy complete! Resources: 1 destroyed.\n16:33:28.936 STDOUT [ec2] tofu:\n16:33:30.713 STDOUT [vpc] tofu: aws_vpc.this[0]: Refreshing state... [id=vpc-063d11b72a2c9f8b3]\n16:33:31.510 STDOUT [vpc] tofu: aws_default_security_group.this[0]: Refreshing state... [id=sg-060d402b95a2cd935]\n16:33:31.511 STDOUT [vpc] tofu: aws_default_route_table.default[0]: Refreshing state... [id=rtb-05adb3ee7f48640f0]\n\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Apply with Extra Arguments (Bash)\nDESCRIPTION: This Bash snippet shows the resulting OpenTofu/Terraform command executed when `terragrunt apply` is run with the preceding `extra_arguments` configuration. Terragrunt intercepts the `apply` command and prepends the configured `-lock-timeout=20m` argument before invoking `tofu apply`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt apply\n# tofu apply -lock-timeout=20m\n```\n\n----------------------------------------\n\nTITLE: Verifying Terragrunt Binary Checksum on Linux/Unix using Bash\nDESCRIPTION: This Bash script downloads a specific version of the Terragrunt binary for Linux AMD64, calculates its SHA256 checksum, downloads the official checksums file, extracts the expected checksum, and compares the two to verify the binary's integrity. It requires `curl`, `sha256sum`, `awk`, and `grep` utilities.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nset -euo pipefail\n\nOS=\"linux\"\nARCH=\"amd64\"\nVERSION=\"v0.69.10\"\nBINARY_NAME=\"terragrunt_${OS}_${ARCH}\"\n\n# Download the binary\ncurl -sL \"https://github.com/gruntwork-io/terragrunt/releases/download/$VERSION/$BINARY_NAME\" -o \"$BINARY_NAME\"\n\n# Generate the checksum\nCHECKSUM=\"$(sha256sum \"$BINARY_NAME\" | awk '{print $1}')\"\n\n# Download the checksum file\ncurl -sL \"https://github.com/gruntwork-io/terragrunt/releases/download/$VERSION/SHA256SUMS\" -o SHA256SUMS\n\n# Grab the expected checksum\nEXPECTED_CHECKSUM=\"$(grep \"$BINARY_NAME\" <SHA256SUMS | awk '{print $1}')\"\n\n# Compare the checksums\nif [ \"$CHECKSUM\" == \"$EXPECTED_CHECKSUM\" ]; then\n echo \"Checksums match!\"\nelse\n echo \"Checksums do not match!\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Inspecting Generated provider.tf File (Bash)\nDESCRIPTION: This Bash command uses `find` to locate the `provider.tf` file within the `.terragrunt-cache` directory. This file is generated by Terragrunt based on the `generate \"provider\"` block in the `terragrunt.hcl` configuration. The command then uses `cat` (via `-exec`) to print the contents of the file, revealing the AWS provider configuration injected by Terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ find .terragrunt-cache -name provider.tf -exec cat {} \\;\n```\n\n----------------------------------------\n\nTITLE: Formatting Terragrunt Output as JSON and Processing with jq (Bash)\nDESCRIPTION: This example demonstrates how to use the `terragrunt find` command with the `--format=json` flag to get output in JSON format. The JSON output is then piped to the `jq` command-line tool to extract and display the first three elements of the resulting array. This illustrates how the JSON format facilitates programmatic processing of Terragrunt results.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-format.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find --format=json | jq '.[:3]'\n[\n  {\n    \"type\": \"stack\",\n    \"path\": \"basic\"\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"basic/units/chick\"\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"basic/units/chicken\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Passing Relative Var File Path (Incorrectly) in HCL\nDESCRIPTION: This HCL snippet attempts to pass a relative path to a common variables file (`common.tfvars`) using `extra_arguments` in a Terragrunt configuration. However, because Terragrunt runs Terraform in a temporary directory when using a remote source, this relative path (`../common.tfvars`) will not resolve correctly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# tofu-code/frontend-app/terragrunt.hcl\n\nterraform {\n  source = \"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\"\n\n  extra_arguments \"custom_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    arguments = [\n      \"-var-file=../common.tfvars\" # Note: This relative path will NOT work correctly!\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Starlight Astro Development Server (Bash)\nDESCRIPTION: Launches the local development server for the Starlight (Astro) documentation site using Bun's task runner command ('bun dev'). This makes the Terragrunt documentation available for preview in a development environment, allowing for interactive testing and iteration. Assumes all dependencies are already installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n\n```\n\n----------------------------------------\n\nTITLE: Assuming IAM Role with OIDC via Terragrunt CLI Arguments (Bash)\nDESCRIPTION: Example of using Terragrunt to assume an AWS IAM role via OIDC web identity federation by providing both the `--iam-role` and `--iam-web-identity-token` command-line arguments. Terragrunt will use the `AssumeRoleWithWebIdentity` AWS STS API call. The token value can be the token itself or a path to a file containing the token.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --iam-role \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\" --iam-web-identity-token \"$TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Marking Inputs as Read with Terragrunt - HCL\nDESCRIPTION: This snippet defines local variables and input assignments in Terragrunt HCL, using mark_as_read and fileset to process individual and multiple YAML files as dependencies. It ensures that the specified files are marked as read for Terragrunt's unit queue by performing the operation within the locals block. Dependencies include the mark_as_read, fileset, file, abspath, and get_terragrunt_dir functions. Inputs include the absolute path to a file and a set of YAML files, which are passed downstream for use in modules. It is essential that mark_as_read operates on an absolute path, and that these expressions reside inside locals to function correctly during run-all.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  filename   = mark_as_read(\"/path/to/my/file-read-by-tofu.txt\")\n  many_files = [for f in fileset(\"./config\", \"*.yaml\") : file(mark_as_read(abspath(\"${get_terragrunt_dir()}/config/${f}\")))]\n}\n\ninputs = {\n  filename   = local.filename\n  many_files = local.many_files\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Smoke Tests in a Terragrunt After Hook (Bash)\nDESCRIPTION: A sample Bash script (`smoke_test.sh`) intended for use in a Terragrunt `after_hook`. It retrieves a `service_url` output from the Terraform state using `terraform output` (invoked via the `TG_CTX_TF_PATH` variable) and performs a simple availability check using `curl`. Requires `curl` to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# smoke_test.sh\n\n#!/usr/bin/env bash\n\nset -eou pipefail\n\n# Get the URL for the service from OpenTofu/Terraform state\nSERVICE_URL=\"$(\"$TG_CTX_TF_PATH\" output -raw service_url)\"\n\n# Use curl to check the service is up\ncurl -sSf \"$SERVICE_URL\"\n```\n\n----------------------------------------\n\nTITLE: Writing Rendered Terragrunt JSON Configuration to File via CLI - Bash\nDESCRIPTION: Shows how to invoke the 'terragrunt render' command with both the '--json' (or '--format json') and '--write' flags, instructing Terragrunt to save the rendered output as 'terragrunt.rendered.json' in the working directory. Useful for batch or automated workflows where outputs need to be stored. Requires Terragrunt installed; outputs to a file rather than stdout.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/render.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt render --json --write\n```\n\n----------------------------------------\n\nTITLE: Including Root Configuration for `path_relative_from_include` Example (HCL)\nDESCRIPTION: Shows a typical `include` block within a child `terragrunt.hcl` file (e.g., `terragrunt/mysql/terragrunt.hcl`). It references a common root configuration (`root.hcl`) located using `find_in_parent_folders`. This sets up the necessary parent-child relationship for the `path_relative_from_include` function used within the included `root.hcl`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variable with AWS Caller Identity ARN using HCL\nDESCRIPTION: This HCL snippet passes the ARN of the current AWS caller identity as an input variable (`caller_arn`) to the Terraform module. It utilizes the `get_aws_caller_identity_arn()` function within the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  caller_arn = get_aws_caller_identity_arn()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Terraform Commands within a Terragrunt Hook Script (Bash)\nDESCRIPTION: Demonstrates how to use the `TG_CTX_TF_PATH` environment variable within a hook script to execute OpenTofu/Terraform commands (like `output`) to fetch state information. This example retrieves a `bucket_name` output and uses it with the AWS CLI to list bucket contents. Requires AWS CLI and appropriate credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Get the bucket_name output from OpenTofu/Terraform state\nBUCKET_NAME=\"$(\"$TG_CTX_TF_PATH\" output -raw bucket_name)\"\n\n# Use the AWS CLI to list the contents of the bucket\naws s3 ls \"s3://$BUCKET_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Overrides in Terragrunt Configuration (HCL)\nDESCRIPTION: Shows how to override the Terraform module source version for a specific environment by redefining the block after including common configurations. This enables variant deployment of modules across environments. Limitation: the base URL must be managed carefully to avoid duplication if it changes in the future.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# qa/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"env\" {\n  path = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n}\n\n# Override the terraform.source attribute to v0.2.0\nterraform {\n  source = \"github.com/<org>/modules.git//app?ref=v0.2.0\"\n}\n\ninputs = {\n  env = \"qa\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Output from a Specific Unit (Default Format)\nDESCRIPTION: Shows how to retrieve a single, specific output ('custom_value1') from a particular unit ('project1_app1') using dot notation ('unit_name.output_name'). The output is displayed in the default HCL-like format, prefixed with the full path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt stack output project1_app1.custom_value1\nproject1_app1.custom_value1 = \"value1\"\n```\n\n----------------------------------------\n\nTITLE: Defining the 'no-auto-approve' Terragrunt Setting (YAML Metadata)\nDESCRIPTION: This YAML front matter defines the metadata for the 'no-auto-approve' setting in Terragrunt. 'name' specifies the setting identifier, 'description' provides a brief explanation, and 'type' indicates it's a boolean flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/no-auto-approve.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: no-auto-approve\ndescription: Don't automatically append '-auto-approve' to the underlying OpenTofu/Terraform commands run with 'run --all'.\ntype: bool\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Terragrunt Configurations in Long Format using Bash\nDESCRIPTION: Illustrates the `terragrunt list -l` command, providing a detailed, tabular view of configurations including their type, path, and dependencies. This format is useful for auditing and understanding relationships between modules. Requires Terragrunt and a configured project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-format.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Long format - Useful for reading structured information quickly\n$ terragrunt list -l\nType  Path           Dependencies\nunit  live/dev/db    live/dev/vpc\nunit  live/dev/ec2   live/dev/db, live/dev/vpc\nunit  live/dev/vpc\nunit  live/prod/db   live/prod/vpc\nunit  live/prod/ec2  live/prod/db, live/prod/vpc\nunit  live/prod/vpc\n```\n\n----------------------------------------\n\nTITLE: Ensuring Zsh Configuration File Exists for Autocomplete\nDESCRIPTION: This command creates the `.zshrc` file in the user's home directory if it doesn't already exist. This is a prerequisite step before installing Terragrunt's Zsh tab completion.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntouch ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Common MySQL Settings with Locals (HCL)\nDESCRIPTION: This snippet defines local variables and input defaults for MySQL modules, leveraging Terragrunt's read_terragrunt_config for parent environment settings. It builds the base Terraform source URL and supplies standard input parameters for a MySQL instance such as name, class, storage type, and credentials. Required dependencies include the Terragrunt tool, a proper environment HCL (`env.hcl`), and referenced root files. Outputs are variable definitions used in higher layers of Terragrunt configuration. All parameters must be adapted to the target infrastructure and securely handle credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  environment_vars = read_terragrunt_config(find_in_parent_folders(\"env.hcl\"))\n\n  env = local.environment_vars.locals.environment\n\n  base_source_url = \"git::git@github.com:acme/infrastructure-catalog.git//modules/mysql\"\n}\n\ninputs = {\n  name              = \"mysql_${local.env}\"\n  instance_class    = \"db.t2.micro\"\n  allocated_storage = 20\n  storage_type      = \"standard\"\n  master_username   = \"admin\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Strict Controls Simultaneously - Terragrunt CLI - Bash\nDESCRIPTION: Examples of specifying more than one strict control via multiple '--strict-control' CLI flags, resulting in error handling for several deprecated commands simultaneously. Inputs: Command-line flags specifying the controls to enforce; Outputs: Multiple error messages for each triggered control. Useful in broader CI/CD enforcement or migration scenarios.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all --strict-control plan-all --strict-control apply-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n15:26:46.521 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt apply-all --strict-control plan-all --strict-control apply-all\n15:26:46.564 ERROR  The `apply-all` command is no longer supported. Use `terragrunt run-all apply` instead.\n15:26:46.564 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Terragrunt Experiments via Flags\nDESCRIPTION: This command executes `terragrunt plan` and enables multiple specific experiments (`symlinks` and `stacks`) by repeating the `--experiment` flag for each desired experiment. This allows combining multiple unstable features for testing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/04-experiments.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt --experiment symlinks --experiment stacks plan\n```\n\n----------------------------------------\n\nTITLE: Setting Deprecated TERRAGRUNT_NON_INTERACTIVE Environment Variable - Bash\nDESCRIPTION: Shows how to export the previously used TERRAGRUNT_NON_INTERACTIVE variable to configure Terragrunt for non-interactive behavior. This method is deprecated in favor of the TG_ prefix in newer CLI versions. It modifies process environment and may impact all child shells unless unset.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_NON_INTERACTIVE=true\n```\n\n----------------------------------------\n\nTITLE: Exporting Deprecated Debug Environment Variable for Terragrunt - Bash\nDESCRIPTION: Shows use of the deprecated TERRAGRUNT_DEBUG variable to enable debug logs during Terragrunt execution. The approach is no longer supported in CLI versions post-redesign and should be replaced with the new naming convention.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_DEBUG=true\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Flags via CLI - Terragrunt Bash\nDESCRIPTION: Shows how to override Terragrunt feature flags on the command line with the '--feature' flag. These examples allow users to set feature flags dynamically for a specific run without modifying the Terragrunt configuration. The required dependency is the Terragrunt CLI tool. Inputs are the feature flag names and values; outputs are the applied infrastructure behaviors controlled by these flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt --feature run_hook=true apply\n\nterragrunt --feature run_hook=true --feature string_flag=dev apply\n```\n\n----------------------------------------\n\nTITLE: Generating and Visualizing Terragrunt Dependency Graph (Bash)\nDESCRIPTION: This Bash command uses Terragrunt's `graph-dependencies` command to generate a dependency graph in DOT format based on the `dependencies` blocks in the project. The output is then piped to the `dot` command (from GraphViz) to render the graph as an SVG image file named `graph.svg`. This visual representation helps understand the relationships and execution order between modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt graph-dependencies | dot -Tsvg > graph.svg\n```\n\n----------------------------------------\n\nTITLE: Disabling SHA256 Checksum Verification - Shell\nDESCRIPTION: Exports an environment variable to disable SHA256 integrity checking for downloaded engine binaries in Terragrunt. Required only when users wish to bypass security checks, for instance when debugging. Inputs: none. Outputs: engine binary runs regardless of checksum. Caution: Disabling this weakens security and should be used only for testing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/13-engine.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport TG_ENGINE_SKIP_CHECK=0 \n```\n\n----------------------------------------\n\nTITLE: Example Project Structure for Conditional Var Files with Terragrunt\nDESCRIPTION: This diagram illustrates a sample project directory structure used in conjunction with Terragrunt's `extra_arguments` feature for conditional variable files. It includes common files (`terragrunt.hcl`), environment-specific (`prod.tfvars`), region-specific (`us-west-2.tfvars`), and module-specific files (`dev.tfvars`), enabling flexible configuration loading based on context.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/07-extra-arguments.md#_snippet_6\n\nLANGUAGE: tree\nCODE:\n```\n├── terragrunt.hcl\n├── prod.tfvars\n├── us-west-2.tfvars\n├── backend-app\n│   ├── main.tf\n│   ├── dev.tfvars\n│   └── terragrunt.hcl\n├── frontend-app\n│   ├── main.tf\n│   ├── us-east-1.tfvars\n│   └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt List Command With External Dependencies - CLI Bash Example\nDESCRIPTION: Shows how to include external dependencies when listing Terragrunt modules by adding the --external flag in addition to --dependencies. The output table now includes both internal dependencies and any modules referenced outside the current working directory, giving visibility into the complete dependency graph and potential blast radius. Requires Terragrunt CLI and configurations that reference both internal and external modules. Input and output formats are identical to the first snippet, but now include external unit paths.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-external.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l --dependencies --external\nType  Path                      Dependencies\nunit  ../external/c-dependency\nunit  a-dependent               ../external/c-dependency, b-dependency\nunit  b-dependency\n```\n\n----------------------------------------\n\nTITLE: Generating Terragrunt Dependency Graph in DOT Format - Bash/DOT\nDESCRIPTION: This example demonstrates how to use the Terragrunt CLI command 'terragrunt dag graph' to output a representation of all dependencies in the configuration as a DOT-format graph. No external dependencies are required to run the command, but interpreting the output as a visual graph requires a Graphviz-compatible tool. The command emits DOT syntax, with nodes representing Terraform modules and directed edges representing dependencies. Input is configuration files; output is a DOT graph.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/dag/graph.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt dag graph\ndigraph {\n  \"alb\" ;\n  \"ecs\" ;\n  \"ecs\" -> \"alb\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Attaching ALB Ingress Controller IAM Policy with Terraform - HCL\nDESCRIPTION: This snippet demonstrates how to use Terraform to attach an ALB Ingress Controller IAM policy to the IAM role associated with EKS worker nodes. It uses two modules (for workers and the controller policy) and attaches the generated policy to the role via aws_iam_role_policy_attachment. Dependencies include the proper Terraform AWS provider, and required module outputs are used as parameters for the role and policy ARN. The main inputs are the module configurations, while the output is the attached policy enabling the necessary permissions for the controller; you must ensure that both modules are properly configured and that the AWS provider is available.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/cli/commands/catalog/module/testdata/find_modules/modules/eks-alb-ingress-controller-iam-policy/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"eks_workers\" {\n  # (arguments omitted)\n}\n\nmodule \"alb_ingress_controller_iam_policy\" {\n  # (arguments omitted)\n}\n\nresource \"aws_iam_role_policy_attachment\" \"attach_alb_ingress_controller_iam_policy\" {\n    role = \"${module.eks_workers.eks_worker_iam_role_name}\"\n    policy_arn = \"${module.alb_ingress_controller_iam_policy.alb_ingress_controller_policy_arn}\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Profiling Go Test Execution with CPU and Memory Profiles - Go\nDESCRIPTION: This Go test command executes tests matching 'SomeTest' and collects execution profiles for CPU and memory usage, outputting them to 'cpu.prof' and 'mem.prof' files respectively. It's used for in-depth performance diagnosis of Terragrunt subcomponents. Requires Go, testable code, and sufficient permissions to write profile files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo test -run 'SomeTest' -cpuprofile=cpu.prof -memprofile=mem.prof\n```\n\n----------------------------------------\n\nTITLE: Passing Parent Directory Var File using get_parent_terragrunt_dir in HCL\nDESCRIPTION: This HCL snippet, intended for a root `terragrunt.hcl` (e.g., `root.hcl`), uses `get_parent_terragrunt_dir()` within an `extra_arguments` block. It constructs a path to a `common.tfvars` file located in the same directory as the root configuration, ensuring it's included for all child configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\n\nterraform {\n  extra_arguments \"common_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    arguments = [\n      \"-var-file=${get_parent_terragrunt_dir()}/common.tfvars\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image in a Terragrunt Hook (Bash)\nDESCRIPTION: A sample Bash script (`build_and_push_image.sh`) designed to be run by a Terragrunt `before_hook`. It builds a Docker image using `docker build` and pushes it to AWS ECR using the AWS CLI. Note the hardcoded values (ACCOUNT_ID, REGION, etc.), which should ideally be replaced with context variables or inputs for reusability. Requires Docker, AWS CLI, and appropriate permissions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# build_and_push_image.sh\n\n#!/usr/bin/env bash\n\nset -eou pipefail\n\nACCOUNT_ID=\"123456789012\"\nREGION=\"us-east-1\"\nREPOSITORY=\"my-repository\"\nTAG=\"latest\"\n\nIMAGE_TAG=\"${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${REPOSITORY}:${TAG}\"\n\n# Build the Docker image\ndocker build -t \"$IMAGE_TAG\" .\n\n# Push the Docker image to ECR\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com\ndocker push \"$IMAGE_TAG\"\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Debug Output Log Example (Log)\nDESCRIPTION: This log output shows the messages printed by Terragrunt when the `--terragrunt-debug` flag is used. It indicates the path to the generated `terragrunt-debug.tfvars.json` file and provides the exact OpenTofu/Terraform command needed to replicate Terragrunt's invocation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_6\n\nLANGUAGE: log\nCODE:\n```\n[terragrunt] Variables passed to tofu/terraform are located in \"~/live/prod/app/terragrunt-debug.tfvars\"\n[terragrunt] Run this command to replicate how tofu/terraform was invoked:\n[terragrunt]     tofu/terraform apply -var-file=\"~/live/prod/app/terragrunt-debug.tfvars.json\" \"~/live/prod/app\"\n```\n\n----------------------------------------\n\nTITLE: Generating and Applying Terragrunt Stack Plans in a CI/CD Pipeline (Bash)\nDESCRIPTION: This bash snippet illustrates a minimal CI/CD approach for Terragrunt stacks by generating the .terragrunt-stack directories and running plans or applies in non-interactive mode. It's meant for cases where the pipeline simply needs to generate and use stacks without advanced logic or filtering. Dependencies are Terragrunt CLI and a configured stack environment. The expected outcome is the application of all Terragrunt workloads referenced in the stack; error handling and destroy logic are not included in this minimal example.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack generate\nterragrunt run --all plan/apply --non-interactive\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Terragrunt Inputs as Environment Variables in a Bash Hook Script\nDESCRIPTION: This Bash script demonstrates accessing a Terragrunt input variable (`bucket_name`) within a hook script. The input, defined in the `terragrunt.hcl` file, is available as an environment variable `TF_VAR_bucket_name`. The script uses this value with the AWS CLI (`aws s3 ls`) to list S3 bucket contents.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n# Get the bucket_name input from the terragrunt.hcl file\nBUCKET_NAME=\"$TF_VAR_bucket_name\"\n\n# Use the AWS CLI to list the contents of the bucket\naws s3 ls \"s3://$BUCKET_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Terragrunt Before Hooks to Demonstrate Execution Order in HCL\nDESCRIPTION: This HCL snippet illustrates that multiple Terragrunt hooks of the same type (e.g., `before_hook`) execute sequentially based on their definition order in `terragrunt.hcl`. Here, \"before_hook_1\" (`echo \"Will run OpenTofu\"`) runs before \"before_hook_2\" (`echo \"Running OpenTofu\"`) prior to `apply` or `plan` commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  before_hook \"before_hook_1\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Will run OpenTofu\"]\n  }\n\n  before_hook \"before_hook_2\" {\n    commands     = [\"apply\", \"plan\"]\n    execute      = [\"echo\", \"Running OpenTofu\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exposed Include with Dynamic Module Source in Terragrunt (HCL)\nDESCRIPTION: Combines includes with the 'expose' attribute so child configs can reference parent-defined locals, enabling parameterized module sources. The module source is constructed using the included local and a custom version tag. This requires expose=true in the include block and expects the local variable to be defined in the parent.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/03-includes.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# qa/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"env\" {\n  path   = \"${get_terragrunt_dir()}/../../_env/app.hcl\"\n  expose = true\n}\n\n# Construct the terraform.source attribute using the source_base_url and custom version v0.2.0\nterraform {\n  source = \"${include.env.locals.source_base_url}?ref=v0.2.0\"\n}\n\ninputs = {\n  env = \"qa\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Strict Mode via Environment Variable (Error)\nDESCRIPTION: Illustrates enabling global Strict Mode using the `TG_STRICT_MODE` environment variable set to 'true'. Similar to the flag method, running the deprecated `plan-all` command results in an error and prevents execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ TG_STRICT_MODE='true' terragrunt plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Updating Terragrunt Non-Interactive Flag Usage\nDESCRIPTION: Demonstrates the required change for the non-interactive flag. The previous '--terragrunt-non-interactive' flag must be replaced with '--non-interactive' when invoking Terragrunt commands like 'plan'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --terragrunt-non-interactive\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Combined Exclude and Queue Construct as Plan in JSON Output (CLI, Bash)\nDESCRIPTION: Demonstrates how to combine exclude and queue-construct-as-plan flags with JSON output to observe the dry-run effect of excludes with execution ordering. The example uses multiple flags and is suitable for advanced scripting or auditing scenarios.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --exclude --queue-construct-as=plan --format=json\n```\n\n----------------------------------------\n\nTITLE: Example Tflint Configuration File (.tflint.hcl) for Terragrunt Hook\nDESCRIPTION: This HCL snippet shows an example `.tflint.hcl` configuration file for use with the Terragrunt `tflint` hook. It enables the `aws` ruleset plugin with a specific version and source, and configures tflint to analyze module calls (`config { module = true }`). This file is necessary for the `tflint` hook to function correctly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"aws\" {\n    enabled = true\n    version = \"0.21.0\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-aws\"\n}\n\nconfig {\n  module = true\n}\n```\n\n----------------------------------------\n\nTITLE: Go Benchmark Test with Memory Profiling - Go\nDESCRIPTION: This Go test command not only runs the specified benchmark ('BenchmarkSomeFunction') but also includes the '-benchmem' flag to report memory allocations and related metrics during benchmarking. This helps developers optimize both execution time and memory usage of Terragrunt components. Requires the same prerequisites as general Go benchmark testing.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo test -bench=BenchmarkSomeFunction -benchmem\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Starlight Aside Component (JavaScript)\nDESCRIPTION: JavaScript import statement for the `Aside` component from the `@astrojs/starlight/components` library. This component is used within an Astro or MDX file to render styled admonition blocks (like cautions or notes) in the documentation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/strict-control.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Example Terragrunt Release Candidate (RC) Tag Format (Plaintext)\nDESCRIPTION: Shows the planned naming convention for Terragrunt release candidates (RC) cut from the 'main' branch post-1.0. It follows semantic versioning with an '-rc' suffix and the date (YYYYMMDD). RC releases undergo more thorough testing before general availability.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nv1.0.0-rc20250225\n```\n\n----------------------------------------\n\nTITLE: Specifying Release Candidate Tag Naming Conventions - Markdown\nDESCRIPTION: Shows the format for release candidate tag names, used to signal release candidate builds from the main branch post-1.0. Provides a template for maintainers to name RC releases following the required convention. No dependencies or execution is required, as this serves as an example naming guideline.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n`v1.0.0-rc2025022501`\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Apply with Module Source Override - Bash\nDESCRIPTION: This snippet demonstrates how to run `terragrunt apply` while overriding the module source location using a relative local file path. It is intended for local development scenarios where rapid iteration over local module code is necessary. The --source flag specifies the local modules directory; dependencies include Terragrunt and that the specified modules exist locally. Inputs are CLI arguments; outputs are infrastructure changes applied, with near-instant execution due to local copying.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd live/stage/app\\nterragrunt apply --source ../../../modules//app\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role Assumption with Web Identity Token from File (HCL)\nDESCRIPTION: This HCL snippet demonstrates configuring Terragrunt for `AssumeRoleWithWebIdentity` by providing the path to a file containing the OIDC token. The `iam_role` specifies the target role ARN, and `iam_web_identity_token` is set to the filesystem path where the token can be found.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\niam_role = \"arn:aws:iam::<AWS account number>:role/<IAM role name>\"\n\niam_web_identity_token = \"/path/to/token/file\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Input Prompts for Terraform Commands using HCL\nDESCRIPTION: This HCL snippet uses `extra_arguments` to disable interactive input prompts for applicable Terraform commands. It fetches the list of commands that support the `-input` flag using `get_terraform_commands_that_need_input()` and sets `-input=false` for them.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # Force OpenTofu/Terraform to not ask for input value if some variables are undefined.\n  extra_arguments \"disable_input\" {\n    commands  = get_terraform_commands_that_need_input()\n    arguments = [\"-input=false\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Plain Text and Placeholders with Colors in Shell\nDESCRIPTION: Displays how to use unnamed placeholders and assign colors to both static labels and dynamic placeholder values in a log format. Uses color names such as magenta, light-blue, and green to visually distinguish parts of the log output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%(content='time=',color=magenta)%time %(content='level=',color=light-blue)%level %(content='msg=',color=green)%msg\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Go Test Function (Bash)\nDESCRIPTION: This snippet runs a specific Go test function using the '-run' flag. Likely use case is for targeted debugging or verification. Requires Go, the appropriate test files, and a valid test name matching 'TestFunctionName'. Results for only the specified test are output in the terminal.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run TestFunctionName ./path/to/package\n```\n\n----------------------------------------\n\nTITLE: Applying Saved Terragrunt Stack Plans from Directory\nDESCRIPTION: Demonstrates how to apply previously saved Terraform plans across a stack using `terragrunt run --all apply`. The `--out-dir /tmp/tfplan` flag tells Terragrunt to look for the corresponding binary plan file (`tfplan.tfplan`) for each unit within the specified directory structure (`/tmp/tfplan`) and apply that specific plan, rather than generating a new one.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run --all --out-dir /tmp/tfplan apply\n```\n\n----------------------------------------\n\nTITLE: Including Shared Root Configuration with Terragrunt HCL (HCL)\nDESCRIPTION: This snippet demonstrates how to use the 'include' block to incorporate shared configuration from a parent 'root.hcl' file, enabling DRY principles across multiple Terragrunt units. The 'find_in_parent_folders' function locates the nearest 'root.hcl', and the 'root' label serves as a project-wide convention for clarity. This approach enables the configuration to inherit remote state, provider, or other shared settings defined higher up the hierarchy. Requires Terragrunt and the relevant filesystem structure with a parent 'root.hcl'. The only parameter is 'path', indicating where to find the root configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Terragrunt Input Injection via Environment Variables using exec (Bash)\nDESCRIPTION: This command uses `terragrunt exec` to run the `env` command and pipes the output to `grep`. It confirms that the `message` input defined in `terragrunt.hcl` is available as the environment variable `TF_VAR_message` to the executed command, demonstrating input injection.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/exec.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt exec -- env | grep 'TF_VAR_message'\nTF_VAR_message=Hello, Terragrunt!\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Paths for Terragrunt CLI Arguments (Bash)\nDESCRIPTION: This snippet shows proper usage of absolute file paths for extra Terragrunt CLI arguments from the shell to avoid path resolution issues when running within the .terragrunt-cache directory. It demonstrates both hardcoded absolute paths and dynamically using the $PWD variable for portability. Terragrunt and the referenced files must be accessible on the local machine; using absolute paths eliminates ambiguity in file resolution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Use absolute file paths on the CLI!\\nterragrunt apply -var-file /foo/bar/extra.tfvars\\n# Or use the PWD environment variable to construct\\n# an absolute path before passing it to Terragrunt\\n# $ terragrunt apply -var-file \"$PWD/extra.tfvars\"\n```\n\n----------------------------------------\n\nTITLE: Using Mock Outputs Without Loading Real Outputs in Terragrunt HCL\nDESCRIPTION: Demonstrates combining `skip_outputs = true` and `mock_outputs` within a Terragrunt dependency block in `mysql/terragrunt.hcl`. This configuration instructs Terragrunt to use the provided `mock_outputs` (`vpc_id = \"temporary-dummy-id\"`) directly, without attempting to fetch the actual outputs from the dependency's state. This is particularly useful in CI/CD pipelines or scenarios where backend initialization (`remote_state.disable_init`) is disabled.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# mysql/terragrunt.hcl\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id = \"temporary-dummy-id\"\n  }\n\n  skip_outputs = true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Common Provider Configuration with Terragrunt Generate Block (HCL)\nDESCRIPTION: This HCL snippet uses the 'generate' block to create a 'provider.tf' file automatically in the working directory before running OpenTofu/Terraform. It sets overwrite behavior if the file exists and provides a sample AWS provider definition. Dependencies include a working Terragrunt installation and directory structure supporting custom provider requirements.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_47\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\n# When using this terragrunt config, terragrunt will generate the file \"provider.tf\" with the aws provider block before\n# calling to OpenTofu/Terraform. Note that this will overwrite the `provider.tf` file if it already exists.\ngenerate \"provider\" {\n  path      = \"provider.tf\"\n  if_exists = \"overwrite\"\n  contents = <<EOF\nprovider \"aws\" {\n  region              = \"us-east-1\"\n  version             = \"= 2.3.1\"\n  allowed_account_ids = [\"1234567890\"]\n}\nEOF\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Index Page in Jekyll as Front-Matter - YAML\nDESCRIPTION: This YAML front-matter is used to define the index page for a Jekyll collection, setting display properties such as layout, title, subtitle, excerpt, and URL configuration. It is intended for use in an 'index.html' file inside '_pages/my-collection'. The 'permalink' and 'slug' control the resulting webpage URL. Dependencies include Jekyll with the Collection Browser layout files. Inputs: metadata for collection; Outputs: formatted index page in site navigation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: collection-browser         # <-- It has to be \"collection-browser\"\ntitle: Use cases\nsubtitle: Learn how to integrate Terragrunt with OpenTofu/Terraform.\nexcerpt: Learn how to integrate Terragrunt with OpenTofu/Terraform.\npermalink: /use-cases/\nslug: use-cases\n---\n\n{% include collection_browser/browser.html collection=site.my-collection collection_name='my-collection' %}\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt with a Local Source Path (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to run Terragrunt apply from a local directory, overriding the module source directory with a local filesystem path using the --source flag. This setup enables iterative testing of local module changes without publishing them to a remote location. Requires Terragrunt installed and a directory structure matching the relative source path; the double slash is essential to preserve relative paths in the copied module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd live/stage/app\\nterragrunt apply --source ../../../modules//app\n```\n\n----------------------------------------\n\nTITLE: Merging default retryable errors using get_default_retryable_errors in HCL\nDESCRIPTION: Demonstrates the use of get_default_retryable_errors in conjunction with concat to extend default retryable error patterns recognized by Terragrunt. Requires no explicit dependencies. Inputs are error string lists, output is a merged array including custom and system-defined errors.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nretryable_errors = concat(get_default_retryable_errors(), [\"my custom error\"])\n\n```\n\n----------------------------------------\n\nTITLE: Migrating and Inspecting Remote State with Terragrunt (Bash)\nDESCRIPTION: Shows how to migrate existing Terraform/Terragrunt state to a new location and verify backend configuration files. Requires Terragrunt installed and S3/DynamoDB set up. The 'terragrunt init -migrate-state' command migrates state, and file inspection commands confirm correct backend details (bucket/key/path) for each unit.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# First, we'll migrate state to the new location\n$ terragrunt init -migrate-state\n# Then, let's take a look at the generated backend.tf file\n$ find .terragrunt-cache -name backend.tf -exec cat {} \\;\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    dynamodb_table = \"my-lock-table\"\n    encrypt        = true\n    key            = \"vpc/tofu.tfstate\"\n    region         = \"us-east-1\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing GCS Backend for Terraform in Terragrunt Child Module (HCL)\nDESCRIPTION: Specifies the use of the GCS remote backend for storing Terraform state within a child module. This snippet expects supporting Terragrunt configuration and assumes the corresponding GCS backend is defined and managed. There are no parameters set directly—it relies on inherited configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_21\n\nLANGUAGE: hcl\nCODE:\n```\n# child/main.tf\nterraform {\n  backend \"gcs\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Inputs Accessible in Hooks using HCL\nDESCRIPTION: This HCL snippet defines an `inputs` block within `terragrunt.hcl`, setting a variable `bucket_name`. Terragrunt automatically makes these inputs available as environment variables (prefixed with `TF_VAR_`) to hook scripts, allowing hooks to access configuration values.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ninputs = {\n  bucket_name = \"my-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Terragrunt After Hook for Smoke Testing in HCL\nDESCRIPTION: This HCL snippet defines an `after_hook` named \"smoke_test\" within a `terraform` block. It executes the `./smoke_test.sh` script after the `apply` command completes. The `run_on_error = true` parameter ensures the script runs even if `apply` fails, potentially aiding in post-failure diagnostics.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  after_hook \"smoke_test\" {\n    commands     = [\"apply\"]\n    execute      = [\"./smoke_test.sh\"]\n    run_on_error = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Passed Values within a Terragrunt Unit HCL\nDESCRIPTION: This example shows how a `terragrunt.hcl` file within a generated unit (e.g., `.terragrunt-stack/vpc/terragrunt.hcl`) can access values passed from the `terragrunt.stack.hcl`. It uses the `values` variable (e.g., `values.vpc_name`, `values.cidr`) to reference the attributes defined in the auto-generated `terragrunt.values.hcl` file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_64\n\nLANGUAGE: hcl\nCODE:\n```\n# .terragrunt-stack/vpc/terragrunt.hcl\n\ninputs = {\n  vpc_name = values.vpc_name\n  cidr     = values.cidr\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Unneeded Terraform Files via Shell - Bash\nDESCRIPTION: Deletes previously needed main.tf files from unit directories after migrating their logic into terragrunt.hcl. This cleanup step, performed via a single 'rm' command, helps reduce duplication and ensures only relevant configuration files are maintained. The command assumes a Unix-like shell and the specified directory structure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrm foo/main.tf bar/main.tf\n```\n\n----------------------------------------\n\nTITLE: Accessing Terragrunt Hook Context Variables in Bash Script\nDESCRIPTION: A sample `hook.sh` script intended to be called by a Terragrunt hook. It demonstrates accessing and printing the standard Terragrunt hook context environment variables: `TG_CTX_TF_PATH` (path to tofu/terraform binary), `TG_CTX_COMMAND` (command being run, e.g., 'apply'), and `TG_CTX_HOOK_NAME` (name of the hook).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# hook.sh\n\necho \"TF_PATH=${TG_CTX_TF_PATH} COMMAND=${TG_CTX_COMMAND} HOOK_NAME=${TG_CTX_HOOK_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Root HCL Pattern via Environment Variable\nDESCRIPTION: Demonstrates enabling the `root-terragrunt-hcl` strict control by setting the `TG_STRICT_CONTROL` environment variable before running a Terragrunt command (`plan`). This provides an alternative method to enforce the recommended pattern.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTG_STRICT_CONTROL=root-terragrunt-hcl terragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger Collector with Docker - Bash\nDESCRIPTION: This snippet runs a Jaeger instance as a Docker container with ports and configuration required for OpenTelemetry collection enabled. No dependencies outside of Docker are required. It exposes the Jaeger UI, collector, and OTLP endpoints on respective ports. Input: none, Output: Jaeger instance available at http://localhost:16686/. Needs external connectivity to push traces.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name jaeger -e COLLECTOR_OTLP_ENABLED=true -p 16686:16686 -p 4317:4317 -p 4318:4318 jaegertracing/all-in-one:1.54.0\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Run-All with Bare Log Formatting in Bash\nDESCRIPTION: This snippet shows the execution of `terragrunt run-all plan` using the `--log-format bare` option. This setting instructs Terragrunt to output messages from the underlying tool (OpenTofu/Terraform) without adding any enrichment like timestamps or module prefixes. As seen in the output, the messages from the concurrent execution of `unit-1` and `unit-2` are interleaved and lack context, making it harder to distinguish which message belongs to which module compared to the default enriched format.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all --log-format bare plan\nINFO[0000] The stack at /Users/yousif/tmp/testing-stdout-stderr-split will be processed in the following order for command plan:\nGroup 1\n- Module /Users/yousif/tmp/testing-stdout-stderr-split/unit-1\n- Module /Users/yousif/tmp/testing-stdout-stderr-split/unit-2\n\n\n\nInitializing the backend...\n\nInitializing provider plugins...\n\nOpenTofu has been successfully initialized!\n\nYou may now begin working with OpenTofu. Try running \"tofu plan\" to see\nany changes that are required for your infrastructure. All OpenTofu commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for OpenTofu,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your configuration and\nfound no differences, so no changes are needed.\n\nInitializing the backend...\n\nInitializing provider plugins...\n\nOpenTofu has been successfully initialized!\n\nYou may now begin working with OpenTofu. Try running \"tofu plan\" to see\nany changes that are required for your infrastructure. All OpenTofu commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for OpenTofu,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your configuration and\nfound no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Plan with Mock Outputs (Bash)\nDESCRIPTION: This snippet shows the console output of running `terragrunt run-all plan`. It illustrates how Terragrunt processes modules sequentially (`foo` then `bar`) and utilizes configured `mock_outputs` for the `bar` module's dependency on `foo` because actual outputs aren't available during plan. The output includes a warning about using mock outputs and the Terraform plan showing the resource creation using the mocked content.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all plan\n09:29:03.461 INFO   The stack at . will be processed in the following order for command plan:\nGroup 1\n- Module ./foo\n\nGroup 2\n- Module ./bar\n\n...\n\n09:29:03.644 WARN   [bar] Config ./foo/terragrunt.hcl is a dependency of ./bar/terragrunt.hcl that has no outputs, but mock outputs provided and returning those in dependency output.\n\n...\n\n09:29:03.898 STDOUT [bar] tofu:   + resource \"local_file\" \"file\" {\n09:29:03.898 STDOUT [bar] tofu:       + content              = \"Foo content: Mocked content from foo\"\n09:29:03.898 STDOUT [bar] tofu:       + content_base64sha256 = (known after apply)\n09:29:03.898 STDOUT [bar] tofu:       + content_base64sha512 = (known after apply)\n09:29:03.898 STDOUT [bar] tofu:       + content_md5          = (known after apply)\n09:29:03.898 STDOUT [bar] tofu:       + content_sha1         = (known after apply)\n09:29:03.898 STDOUT [bar] tofu:       + content_sha256       = (known after apply)\n09:29:03.898 STDOUT [bar] tofu:       + content_sha512       = (known after apply)\n09:29:03.898 STDOUT [bar] tofu:       + directory_permission = \"0777\"\n09:29:03.898 STDOUT [bar] tofu:       + file_permission      = \"0777\"\n09:29:03.898 STDOUT [bar] tofu:       + filename             = \"./hi.txt\"\n09:29:03.898 STDOUT [bar] tofu:       + id                   = (known after apply)\n09:29:03.898 STDOUT [bar] tofu:     }\n```\n\n----------------------------------------\n\nTITLE: Using Astro Starlight Aside Component for Caution (HTML/Astro)\nDESCRIPTION: Example usage of the Astro Starlight `Aside` component with the type set to 'caution'. This renders a caution block in the documentation, warning users about potential issues when accessing complex data structures using the `raw` format and recommending index-based access.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/strict-control.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Aside type=\"caution\">\nWhen accessing complex data structures using the `raw` format, you must use index-based access.\n\nAttempting to access nested structures directly may result in unexpected output or errors.\n</Aside>\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt for QA Environment (Initial Version) in HCL\nDESCRIPTION: This Terragrunt configuration file (`terragrunt.hcl`) defines the setup for an 'app' module within the 'qa' environment. It includes a root configuration, specifies version `v0.0.1` of the Terraform module from a Git repository, and sets input variables (`instance_count`, `instance_type`) specific to QA.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_32\n\nLANGUAGE: hcl\nCODE:\n```\n# infrastructure-live/qa/app/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  source = \"github.com:foo/infrastructure-modules.git//app?ref=v0.0.1\"\n}\n\ninputs = {\n  instance_count = 3\n  instance_type  = \"t2.micro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Terragrunt Telemetry Trace Output in Console (OpenTelemetry JSON)\nDESCRIPTION: Shows example JSON traces emitted by Terragrunt to the console when telemetry tracing is enabled. These records include detailed span data for key operations (e.g., 'run_bash', 'parse_config_file', 'run_terraform'), capturing attributes, parent-child relationships, and trace metadata compliant with OpenTelemetry standards. Useful for debugging, performance measurement, and integration with observability tools; expects the consumer to understand JSON structured trace data and the OpenTelemetry convention.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Name\\\":\\\"run_bash\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"f91587247524593b\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:30.564217484Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.570666395Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"command\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"bash\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[-c sleep 1]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Name\\\":\\\"parse_config_file\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"d2823047fb469bdf\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:30.380054129Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.570899286Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"config_path\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2/terragrunt.hcl\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Name\\\":\\\"run_terraform\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"152d873a18559f07\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:31.57161757Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.688157882Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"command\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"tofu\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[init]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Name\\\":\\\"run_terraform\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"29341bdb65f66b1e\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:31.688240673Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.793377642Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"command\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"tofu\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[apply -auto-approve -input=false]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Name\\\":\\\"run_module\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"8a01522bc65e0f1b\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:30.290680776Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.793392803Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"path\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}},{\\\"Key\\\":\\\"terraformCommand\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"apply\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Name\\\":\\\"run-all apply\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"00000000000000000000000000000000\\\",\\\"SpanID\\\":\\\"0000000000000000\\\",\\\"TraceFlags\\\":\\\"00\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:26.388519019Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.793405603Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"terraformCommand\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"apply\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[apply]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":28,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Metrics from Terragrunt to OpenTelemetry with Bash Environment Variables\nDESCRIPTION: This Bash snippet sets up environment variables to direct Terragrunt to export metrics via gRPC HTTP to the OpenTelemetry collector endpoint at localhost:4317. It ensures insecure connections are allowed for local testing. The variables are TG_TELEMETRY_METRIC_EXPORTER, TG_TELEMETRY_METRIC_EXPORTER_INSECURE_ENDPOINT, and OTEL_EXPORTER_OTLP_ENDPOINT, and must be set in the shell prior to running terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_METRIC_EXPORTER=grpcHttp\nexport TG_TELEMETRY_METRIC_EXPORTER_INSECURE_ENDPOINT=true\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable in env.hcl (Terragrunt HCL)\nDESCRIPTION: This snippet defines an environment-specific variable in a Terragrunt HCL file (env.hcl), setting the value of 'env' according to the folder context (e.g., 'qa', 'prod', 'stage'). This enables configurations to dynamically discover their current environment and drives proper contextualization of infrastructure deployments.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  env = \"qa\" # this will be prod in the prod folder, and stage in the stage folder.\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Typical Terraform Project Structure\nDESCRIPTION: Represents a common file structure for a Terraform project managing multiple environments (prod, qa, stage) with duplicated infrastructure code (app, mysql, vpc) in each. This structure highlights the code duplication problem that Terragrunt aims to solve.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- live\n  - prod\n    - app\n      - main.tf\n    - mysql\n      - main.tf\n    - vpc\n      - main.tf\n  - qa\n    - app\n      - main.tf\n    - mysql\n      - main.tf\n    - vpc\n      - main.tf\n  - stage\n    - app\n      - main.tf\n    - mysql\n      - main.tf\n    - vpc\n      - main.tf\n```\n\n----------------------------------------\n\nTITLE: SOPS Encrypted Data Structure in JSON\nDESCRIPTION: This JSON object represents data encrypted with SOPS. The `data` field holds the AES256-GCM encrypted content. The `sops` object contains metadata, including the encryption method (PGP, identified by the `pgp` array containing key details like fingerprint `fp` and the encrypted PGP message `enc`), the last modification timestamp (`lastmodified`), a message authentication code (`mac`), and the SOPS version used. This structure is standard for securely storing secrets, often within version control systems.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/test/fixtures/sops/secrets.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\": \"ENC[AES256_GCM,data:w2jDRJR9BeIMSKE4+qnKWhfM,iv:08ACLYrUGtWriOV/ua4X6NZt57VmiTmAcnxB5V+8AUc=,tag:cVdkIO4EXAmyV3y7n/zbiA==,type:str]\",\n\t\"sops\": {\n\t\t\"kms\": null,\n\t\t\"gcp_kms\": null,\n\t\t\"azure_kv\": null,\n\t\t\"hc_vault\": null,\n\t\t\"age\": null,\n\t\t\"lastmodified\": \"2021-12-17T18:38:13Z\",\n\t\t\"mac\": \"ENC[AES256_GCM,data:8lPZmY8YgA0DqPRxLC9hVoRUXmbzaXgUBv3MHTm4iK44/6URIgJBUnPFPUbwIN7xbIgXd+QPQEMvfsmifqXorynGEwt2WtMKCPANg+2Ctf2KMmj7fGpe3HIlRhQiixip7/xzrIMbSdIRMS098D42JTvOIFNbWVQhByfN64AnDJY=,iv:wtouC/mWjhFwiJKDS6+5LqnQMcAeejElXLaL3H15jbY=,tag:6Bmemr2BMgShaMO3v4uiXw==,type:str]\",\n\t\t\"pgp\": [\n\t\t\t{\n\t\t\t\t\"created_at\": \"2021-12-17T18:38:12Z\",\n\t\t\t\t\"enc\": \"-----BEGIN PGP MESSAGE-----\\n\\nhQEMA0sXzMgpEabgAQf+KHsPp4Pp8YNtG7ChRpZO2qB/bFncWtAF9evO+RjAEahb\\nM+hzxkB5KDUSMYs0aeWeOrOqYPrjPPJxCspZtQhy8/qrC064kA7gq2PWhYAqGcKP\\ntnPI8D0SYDZBgoyHRqFuuD5TZio8swE89SxphftL0W3KkHay7WKQHj/cFqNoISNl\\nn0XeCgbacIwo5WxWz1qNFvaeo0rFFFhIhbfaegx/SWwUi1y6WK7sB0QobMRwXHj+\\nORiUWVvx/fCIMCaerPN/SjIA/DgzbZ3DWaixYXpW85Ipz7myu/zUQcWnWcGXnMRQ\\nERMYc6GyyLHwjZN1XuvXdPXvAt6vvaH4w5U9kW2l19JeAZXkcM14ivDoGwY1oLcX\\n4d2/MAS7vM7SgmcPBGmpNsJJgkWTgoc8qeFtu9u3e4e9pR4+dcJCbGQLQ5RiyM2Z\\nsyHjL6em/j4JLdtbM16orP6Q3oEPelphG7sxbDXBeA==\\n=6u1S\\n-----END PGP MESSAGE-----\\n\",\n\t\t\t\t\"fp\": \"3EF98802EEDCAF0C688B81F419546E0C123C664E\"\n\t\t\t}\n\t\t],\n\t\t\"unencrypted_suffix\": \"_unencrypted\",\n\t\t\"version\": \"3.7.1\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Main Command Links in Astro\nDESCRIPTION: This Astro JSX snippet dynamically generates links for the main Terragrunt commands. It maps over the `mainCommands` array (previously filtered JavaScript data) and renders a `LinkCard` component for each command, displaying its name, description, and linking to its detailed documentation page.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n{\n    mainCommands.map((doc) => (\n        <LinkCard title={doc.data.name} href={`/docs/reference/cli/commands/${doc.id}`} description={doc.data.description} />\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Default Terragrunt Engine Cache Path (Shell)\nDESCRIPTION: This path represents the default location where Terragrunt caches downloaded RPC-type IaC engines locally on Unix-like systems. The `<version>` placeholder indicates a subdirectory specific to the engine version. This cache path can be overridden using the `TG_ENGINE_CACHE_PATH` environment variable.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n~/.cache/terragrunt/plugins/iac-engine/rpc/<version>\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt List Command With Dependencies - CLI Bash Example\nDESCRIPTION: Demonstrates the use of the terragrunt CLI to list modules and their dependencies using the --dependencies flag. This command outputs a table where each row represents a unit with its path and any directly referenced dependencies, but excludes external dependencies. This example requires the Terragrunt CLI installed, a project with dependencies set up, and is designed for users investigating internal dependency graphs only. Outputs are formatted as standard console tables with 'Type', 'Path', and 'Dependencies' columns.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-external.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l --dependencies\nType  Path          Dependencies\nunit  a-dependent   b-dependency\nunit  b-dependency\n```\n\n----------------------------------------\n\nTITLE: Saving Rendered Terragrunt Configuration to JSON File (Bash)\nDESCRIPTION: This Bash command demonstrates how to use 'terragrunt render' with the '--write' and '--json' flags. The '--write' flag instructs Terragrunt to save the rendered configuration to a file, and the '--json' flag specifies the output format as JSON. Consequently, the rendered configuration will be written to a file named 'terragrunt.rendered.json' in the current working directory. Requires Terragrunt to be installed and configured.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/render-write.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt render --write --json\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'non-interactive' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'non-interactive'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_8\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"non-interactive\" />\n```\n\n----------------------------------------\n\nTITLE: Executing External TFLint with Custom Options via Terragrunt Hook in HCL\nDESCRIPTION: Configures a `before_hook` in `terragrunt.hcl` to execute an external `tflint` binary (found in the system's PATH) instead of the one bundled with Terragrunt. It demonstrates passing additional command-line arguments to `tflint` like `--external-tflint` (to trigger external execution), `--minimum-failure-severity`, and specifying a custom configuration file path with `--config`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n    before_hook \"tflint\" {\n    commands = [\"apply\", \"plan\"]\n    execute = [\"tflint\" , \"--external-tflint\", \"--minimum-failure-severity=error\", \"--config\", \"custom.tflint.hcl\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Common Var File using `path_relative_from_include` (HCL)\nDESCRIPTION: Illustrates using `path_relative_from_include()` within a `terraform.extra_arguments` block, typically in a root `terragrunt.hcl`. Combined with `get_terragrunt_dir()`, it constructs the correct relative path to a common variables file (`common.tfvars`) located alongside the root config, ensuring it's passed via `-var-file` to Terraform commands regardless of the child module's directory depth.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n  terraform {\n    extra_arguments \"common_var\" {\n      commands = [\n        \"apply\",\n        \"plan\",\n        \"import\",\n        \"push\",\n        \"refresh\"\n      ]\n\n      arguments = [\n        \"-var-file=${get_terragrunt_dir()}/${path_relative_from_include()}/common.tfvars\",\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using First-Class Expressions for Functions in terragrunt.hcl (>= v0.19.x) (HCL)\nDESCRIPTION: Demonstrates the use of HCL2's first-class expressions in Terragrunt 0.19.x and newer. Built-in functions like `get_terraform_commands_that_need_locking()` and `get_env()` can now be called directly without `${...}` interpolation. This syntax is valid throughout the `terragrunt.hcl` file, including within the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  extra_arguments \"retry_lock\" {\n    # Using a function within first-class expressions!\n    commands  = get_terraform_commands_that_need_locking()\n    arguments = [\"-lock-timeout=20m\"]\n  }\n}\n\ninputs = {\n  # This now works with Terragrunt 0.19.x and newer!\n  foo = get_env(\"FOO\", \"default\")\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variable Value When Applying with Terragrunt - Bash\nDESCRIPTION: This Bash command applies infrastructure using Terragrunt, setting the 'content' variable via the '-var' option. This enables dynamic file content as specified in the supporting OpenTofu/Terraform configuration. Requires a configuration with a 'content' variable and Terragrunt installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply -auto-approve -var content='Hello, Terragrunt!'\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Flag Naming Stem Example (Plaintext)\nDESCRIPTION: Illustrates the rule that flags related to the same system should share a common stem. All flags for the Terragrunt Provider Cache Server start with `provider-cache`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nprovider-cache\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'experiment-mode' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'experiment-mode'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"experiment-mode\" />\n```\n\n----------------------------------------\n\nTITLE: Corrected Tflint Configuration (.tflint.hcl) with Version Constraint\nDESCRIPTION: This HCL snippet shows the corrected configuration for a `.tflint.hcl` file to resolve the `-act-as-bundled-plugin` error. It explicitly defines the `terraform` plugin block, enabling it and specifying both the `version` and `source` attributes, which are crucial for correct tflint plugin initialization within the Terragrunt hook context.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nplugin \"terraform\" {\n    enabled = true\n    version = \"0.2.1\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated AWS Provider Configuration (Terraform HCL)\nDESCRIPTION: This snippet shows the content of a `provider.tf` file generated by Terragrunt using a `generate` block. It defines an AWS provider block, configuring it to use a specific region ('us-east-1' in this case). This allows for dynamic configuration of providers based on Terragrunt settings, separate from the underlying Terraform module code.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Terragrunt Before Hook to Execute a Shell Script in HCL\nDESCRIPTION: This HCL snippet defines a `before_hook` named \"test_hook\" within a `terraform` block. It is configured to execute the external shell script `hook.sh` before the `apply` command runs. This illustrates triggering custom script logic via Terragrunt hooks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  before_hook \"test_hook\" {\n    commands     = [\"apply\"]\n    execute      = [\"hook.sh\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'working-dir' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'working-dir'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_11\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"working-dir\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Remote State and Mock Outputs in Terragrunt Parent - HCL\nDESCRIPTION: Configures remote backend state storage in S3, establishes a parent dependency block with mock outputs for testing/applying, and sets composite input attributes including references to dependency outputs. The mock_outputs and mock_outputs_allowed_terraform_commands fields allow simulating child module outputs during testing. State backend and dependencies must be set up correctly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_33\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\nremote_state {\n  backend = \"s3\"\n  config = {\n    encrypt = true\n    bucket = \"__FILL_IN_BUCKET_NAME__\"\n    key = \"${path_relative_to_include()}/tofu.tfstate\"\n    region = \"us-west-2\"\n  }\n}\n\ndependency \"vpc\" {\n  # This will get overridden by child terragrunt.hcl configs\n  config_path = \"\"\n\n  mock_outputs = {\n    attribute     = \"hello\"\n    old_attribute = \"old val\"\n    list_attr     = [\"hello\"]\n    map_attr = {\n      foo = \"bar\"\n    }\n  }\n  mock_outputs_allowed_terraform_commands = [\"apply\", \"plan\", \"destroy\", \"output\"]\n}\n\ninputs = {\n  attribute     = \"hello\"\n  old_attribute = \"old val\"\n  list_attr     = [\"hello\"]\n  map_attr = {\n    foo = \"bar\"\n    test = dependency.vpc.outputs.new_attribute\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Configurations Using Queue Construct for Plan Command (CLI, Bash)\nDESCRIPTION: Runs the `terragrunt find` command with the `--queue-construct-as=plan` flag to order configurations according to their execution order for a `plan` operation. This includes stacks (listed first) and units; dependencies are respected so dependents follow the resources they need. Input is the working directory; output is a lexically sorted configuration list. Useful for pre-validating execution plans.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find --queue-construct-as=plan\nstacks/live/dev\nstacks/live/prod\nunits/live/dev/vpc\nunits/live/prod/vpc\nunits/live/dev/db\nunits/live/prod/db\nunits/live/dev/ec2\nunits/live/prod/ec2\n```\n\n----------------------------------------\n\nTITLE: Example Hook Command Execution (Shell)\nDESCRIPTION: Shows the resulting shell command execution based on the HCL hook example `execute = [\"echo\", \"Foo\"]`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Example hook command execution derived from execute = [\"echo\", \"Foo\"]\necho Foo\n```\n\n----------------------------------------\n\nTITLE: Analyzing Go CPU Profile with pprof Web UI (Bash/Go)\nDESCRIPTION: This command uses the Go `pprof` tool to analyze the CPU profile data in `cpu.prof` by starting a web server on port 8080 (`-http=:8080`). This provides a graphical interface with visualizations like flame graphs and call graphs, facilitating easier navigation and interpretation of profiling data compared to the CLI.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof -http=:8080 cpu.prof\n```\n\n----------------------------------------\n\nTITLE: Serving Terragrunt Website Locally with Jekyll (Bash)\nDESCRIPTION: Starts the Jekyll development server using Bundler to ensure the correct environment. It builds the website from the source files in the `docs` directory and serves it locally, typically making it accessible at `http://localhost:4000`. This allows for live previewing of changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll serve\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terragrunt Configurations with Dependencies and DAG Sorting in JSON via Bash\nDESCRIPTION: This snippet executes the Terragrunt find command with --json, --dependencies, and --dag flags to output configurations and dependencies in dependency order as JSON. Requires Terragrunt and properly structured configuration files with defined dependencies. The command's output assists advanced automation or analysis, as the dependency graph is respected and results sorted accordingly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-dag.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find --json --dependencies --dag\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/dev/vpc\"\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/prod/vpc\"\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/dev/db\",\n    \"dependencies\": [\n      \"live/dev/vpc\"\n    ]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/prod/db\",\n    \"dependencies\": [\n      \"live/prod/vpc\"\n    ]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/dev/ec2\",\n    \"dependencies\": [\n      \"live/dev/vpc\",\n      \"live/dev/db\"\n    ]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"live/prod/ec2\",\n    \"dependencies\": [\n      \"live/prod/vpc\",\n      \"live/prod/db\"\n    ]\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Exclusion Based on Feature Flag - Terragrunt HCL\nDESCRIPTION: Shows an 'exclude' block configured to skip specific actions ('plan' and 'apply') if a named feature flag evaluates to true, without excluding dependencies. This allows fine-tuned activation of units based on operational state or external factors. Assumes that the referenced feature flag is defined elsewhere in the configuration and Terragrunt engine supports conditional 'exclude' logic.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_55\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nexclude {\n    if = feature.feature_name.value # Dynamically exclude based on a feature flag.\n    actions = [\"plan\", \"apply\"]     # Exclude `plan` and `apply` actions.\n    exclude_dependencies = false    # Do not exclude dependencies.\n}\n```\n\n----------------------------------------\n\nTITLE: Checking HCL Formatting with Terragrunt CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the Terragrunt CLI to check HCL file formatting without modifying the files, by passing the --check flag to the hcl fmt command. It requires that Terragrunt is installed and available in the system PATH. The command will exit with code 0 if all files are properly formatted, or 1 if any require formatting.\nKey parameter: --check enables check-only mode. Input: no files directly required (operates on current working directory). Output: exit code (0 or 1) to indicate formatting compliance. This is intended for CI/CD integration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-fmt-check.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt hcl fmt --check\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Fetching Command Data in Astro\nDESCRIPTION: This JavaScript code within an Astro file imports necessary UI components (`Aside`, `Badge`, `LinkCard`) from `@astrojs/starlight/components` and content helper functions (`getCollection`, `getEntry`) from `astro:content`. It then fetches all entries from the 'commands' collection, filters them into various categories (main, backend, stack, catalog, discovery, configuration) based on their `data.category` property, and retrieves the entry for global flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aside, Badge, LinkCard } from '@astrojs/starlight/components';\nimport { getCollection, getEntry } from 'astro:content';\nexport const commands = await getCollection('commands');\n\nexport const openTofuShortcutsEntry = commands.filter((command) => command.data.path === 'opentofu-shortcuts')[0];\n\nexport const mainCommands = commands.filter((command) => {\n    return command.data.category === 'main'\n});\n\nexport const backendCommands = commands.filter((command) => {\n    return command.data.category === 'backend'\n});\n\nexport const stackCommands = commands.filter((command) => {\n    return command.data.category === 'stack'\n});\n\nexport const catalogCommands = commands.filter((command) => {\n    return command.data.category === 'catalog'\n});\n\nexport const discoveryCommands = commands.filter((command) => {\n    return command.data.category === 'discovery'\n});\n\nexport const configurationCommands = commands.filter((command) => {\n    return command.data.category === 'configuration'\n});\n\nexport const globalFlags = await getEntry('docs', 'docs/reference/cli/global-flags');\n```\n\n----------------------------------------\n\nTITLE: Rendering All Terragrunt Configurations and Writing to Files - Bash\nDESCRIPTION: Demonstrates using the 'terragrunt render' command with the '--all', '--json', and '-w' (alias for '--write') flags to discover and render all configurations from the current directory recursively. Each output is written to a respective 'terragrunt.rendered.json' file adjacent to its source configuration. This is suitable for batch environments or CI/CD systems requiring rendered, resolved configurations for multiple modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/render.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt render --all --json -w\n```\n\n----------------------------------------\n\nTITLE: Conditional required and optional var files in extra_arguments (HCL)\nDESCRIPTION: Configures an extra_arguments block with both required_var_files and optional_var_files, using dynamic evaluation from environment variables to determine var-file inclusion. Variables such as TF_VAR_env and TF_VAR_region are pulled from the environment or defaulted. Relies on get_parent_terragrunt_dir(), get_env(), and get_terragrunt_dir() functions. Expects consistent file locations and leverages file existence checks for optional var files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# backend-app/terragrunt.hcl\n\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\nterraform {\n  extra_arguments \"conditional_vars\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    required_var_files = [\n      \"${get_parent_terragrunt_dir()}/tofu.tfvars\"\n    ]\n\n    optional_var_files = [\n      \"${get_parent_terragrunt_dir(\"root\")}/${get_env(\"TF_VAR_env\", \"dev\")}.tfvars\",\n      \"${get_parent_terragrunt_dir(\"root\")}/${get_env(\"TF_VAR_region\", \"us-east-1\")}.tfvars\",\n      \"${get_terragrunt_dir()}/${get_env(\"TF_VAR_env\", \"dev\")}.tfvars\",\n      \"${get_terragrunt_dir()}/${get_env(\"TF_VAR_region\", \"us-east-1\")}.tfvars\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex List and Map Locals with Accessors in Terragrunt - HCL\nDESCRIPTION: Defines several complex locals (list and map) in a Terragrunt locals block and shows how to access individual elements or values. Demonstrates idiomatic patterns for working with collections and mappings as local variables within Terragrunt HCL files. List and map values can be accessed by standard HCL index or key syntax.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_37\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nlocals {\n  # Define a list of regions\n  regions = [\"us-east-1\", \"us-west-2\", \"eu-west-1\"]\n\n  # Define a map of regions to their corresponding bucket names\n  region_to_bucket_name = {\n    us-east-1 = \"east-bucket\"\n    us-west-2 = \"west-bucket\"\n    eu-west-1 = \"eu-bucket\"\n  }\n\n  # The first region is accessed like this\n  first_region = local.regions[0]\n\n  # The bucket name for us-east-1 is accessed like this\n  us_east_1_bucket = local.region_to_bucket_name[\"us-east-1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Command Filtered by Included File - Bash\nDESCRIPTION: Demonstrates the use of the '--units-that-include' flag to restrict Terragrunt operations to only those units which directly include the specified configuration file. This command requires Terragrunt to be installed and run from a directory containing the relevant file tree structure. The --all and --units-that-include flags determine the scope, while the final argument specifies the Terraform command to execute. Outputs are limited to matching Terragrunt units; incorrect file paths or structures will yield no results.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/units-that-include.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all --units-that-include=./_envcommon/app.hcl plan\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt HCL Formatter (Shell)\nDESCRIPTION: This shell command executes the Terragrunt HCL formatter. By default, it recursively scans the current directory for HCL files (e.g., `.hcl`, `.tf`) and automatically rewrites them in place to conform to the canonical HCL format. This is useful for maintaining consistent code style across Terragrunt and Terraform configurations. Flags like `--hcl-fmt-check` (check format without changes) and `--hcl-fmt-diff` (show differences) can alter its behavior.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/hcl/fmt.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt hcl fmt\n```\n\n----------------------------------------\n\nTITLE: Finding Terragrunt Configurations in the Current Directory (CLI, Bash)\nDESCRIPTION: Demonstrates executing the `terragrunt find` command without any flags to discover all Terragrunt configurations (units and stacks) in the current directory. No dependencies are required other than having the `terragrunt` CLI installed. This will output a list of configurations, color-coded by type (unless color output is disabled). Intended as the basic discovery command. Accepts no parameters.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler Gem for Ruby (Bash)\nDESCRIPTION: Installs the Bundler gem using the RubyGems package manager. Bundler is essential for managing the Ruby dependencies (gems) required by the Jekyll static site generator used for the Terragrunt website. This command requires a working Ruby installation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngem install bundler\n```\n\n----------------------------------------\n\nTITLE: Restricting Mock Output Usage to Specific Terragrunt Commands (HCL)\nDESCRIPTION: This HCL configuration snippet shows how to limit the use of `mock_outputs` to specific Terraform/OpenTofu commands within Terragrunt. By setting `mock_outputs_allowed_terraform_commands = [\"validate\"]`, the defined `mock_outputs` (e.g., `vpc_id = \"temporary-dummy-id\"`) will only be substituted for the actual dependency outputs when running `terragrunt validate` or `terragrunt run-all validate`. For other commands like `apply` or `plan`, Terragrunt will attempt to fetch the real outputs, potentially causing an error if the dependency is not applied.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id = \"temporary-dummy-id\"\n  }\n\n  mock_outputs_allowed_terraform_commands = [\"validate\"]\n}\n\ninputs = {\n  vpc_id = dependency.vpc.outputs.vpc_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt to Reference Remote Modules - Terragrunt - HCL\nDESCRIPTION: These HCL snippets represent Terragrunt unit configuration files that reference remote module sources and provide environment-specific input variables. The 'terraform' block specifies the module's Git location, using the required double-slash and git ref syntax. The 'inputs' block defines parameters such as instance count and type tailored for specific deployment environments like stage and prod. Dependencies include Terragrunt, OpenTofu/Terraform, and accessible module repositories. The expected input is minimal: Terragrunt reads the configuration directly; outputs are infrastructure changes matching the provided inputs and module code. Constraints include keeping modules immutable and relying on version tags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\\n  # Deploy version v0.0.3 in stage\\n  source = \"git::git@github.com:foo/modules.git//app?ref=v0.0.3\"\\n}\\n\\ninputs = {\\n  instance_count = 3\\n  instance_type  = \"t4g.micro\"\\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\\n  # Deploy version v0.0.1 in prod\\n  source = \"git::git@github.com:foo/modules.git//app?ref=v0.0.1\"\\n}\\n\\ninputs = {\\n  instance_count = 10\\n  instance_type  = \"m8g.large\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Directories with Bash\nDESCRIPTION: Moves the specified 'vpc/' and 'ec2/' directories into the target 'us-east-1/' directory to logically group configurations by region. Requires both source directories to exist and that the target does not already contain subfolders named 'vpc' or 'ec2'. Proper permissions are necessary.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmv vpc/ ec2/ us-east-1/\n```\n\n----------------------------------------\n\nTITLE: Illustrating Terragrunt --graph Execution Order for Plan\nDESCRIPTION: This example shows the execution order when running `terragrunt run --graph plan` within the `eks` module, based on a sample dependency graph. Terragrunt executes the command following the dependency graph upwards (bottom-up), starting with the initial module (`eks`) and proceeding to modules that depend on it, level by level. Modules not dependent on `eks` are excluded.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/graph.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGroup 1\n- Module project/eks\n\nGroup 2\n- Module project/services/eks-service-1\n- Module project/services/eks-service-2\n\nGroup 3\n- Module project/services/eks-service-2-v2\n- Module project/services/eks-service-3\n- Module project/services/eks-service-5\n\nGroup 4\n- Module project/services/eks-service-3-v2\n- Module project/services/eks-service-4\n\nGroup 5\n- Module project/services/eks-service-3-v3\n```\n\n----------------------------------------\n\nTITLE: Finding Configurations in a Different Directory (CLI, Bash)\nDESCRIPTION: Runs the `terragrunt find` command specifying an alternate working directory, allowing discovery of configurations located outside the current directory. Requires `terragrunt` to be installed and the specified directory to exist. The `--working-dir` parameter defines the root of the recursive search; output is printed as with the basic command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --working-dir /path/to/working/dir\n```\n\n----------------------------------------\n\nTITLE: Flag to Environment Variable Example (Flag) (Plaintext)\nDESCRIPTION: Shows an example Terragrunt flag (`iam-assume-role-duration`) in kebab-case.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\niam-assume-role-duration\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Find with Exclude Output in JSON Format - bash\nDESCRIPTION: This command runs Terragrunt find with both --exclude and formatting specified as JSON, enabling easy parsing and inspection of exclude configuration for all discovered units. It requires Terragrunt and optionally jq for post-processing. Outputs an array of unit configurations in JSON format, which can be fed into other tools or scripts. Input parameters allow additional filtering or aggregation as needed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-exclude.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --exclude --format=json\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Configuration with Variable for Content - HCL\nDESCRIPTION: This snippet demonstrates an OpenTofu/Terraform configuration that introduces a variable named 'content' and passes its value to the local_file resource. This pattern allows dynamic configuration of file content at deployment time. The module requires variable assignment via CLI or variable files, and produces a file resource parameterized by 'content'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/main.tf\nvariable \"content\" {}\n\nresource \"local_file\" \"file\" {\n  content  = var.content\n  filename = \"${path.module}/hi.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Environments from Run-All via Feature Flags in Terragrunt HCL (stage/root.hcl)\nDESCRIPTION: This HCL snippet configures a feature flag for the 'stage' environment and uses it to exclude all actions except 'output' when the flag is not set. The exclude block prevents most run-all actions by default. Inputs are the feature flag default; outputs are exclusion of stage actions unless explicitly enabled. Dependencies: Terragrunt and environment configuration; limitations: intended for the stage environment root.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# stage/root.hcl\nfeature \"stage\" {\n  default = false\n}\n\nexclude {\n    if = !feature.stage.value\n    actions = [\"all_except_output\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Simple Output in Raw Format\nDESCRIPTION: Shows how to get the plain value of a simple output ('data') from a specific unit ('project1_app2') using the '--format raw' flag. This command outputs only the raw string value ('app2') without any additional formatting or keys, making it easy to use in scripts.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt stack output --format raw project1_app2.data\napp2\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Terraform/OpenTofu via Terragrunt Run\nDESCRIPTION: Illustrates running the `output` command with an additional argument (`-json`) using `terragrunt run`. The `--` separates the command (`output`) from its arguments (`-json`). The shortcut `terragrunt output -json` is also provided.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/run.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run -- output -json\n# Shortcut:\n# terragrunt output -json\n```\n\n----------------------------------------\n\nTITLE: Invoking Run-All in Terragrunt with Default Environment Inclusion\nDESCRIPTION: This Bash snippet illustrates how to use Terragrunt's run-all command to execute the 'plan' action across all units. Inputs are CLI arguments; output is execution over units not excluded by their environment flags. Dependency is Terragrunt CLI. No special configuration required unless exclusions are applied in the HCL.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan\n\n```\n\n----------------------------------------\n\nTITLE: JSON Output Including Internal and External Dependencies (CLI, Bash)\nDESCRIPTION: Sample JSON illustrating both internal and external units when using dependencies and external flags. Valid for auditing full dependency graphs, the output includes all units as peer objects with type, path, and dependency details. No parameters beyond the CLI flags are required.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"internal/unitA\",\n    \"dependencies\": []\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"internal/unitB\",\n    \"dependencies\": [\"../unitA\", \"../../external/unitC\"]\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"external/unitC\",\n    \"dependencies\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Output of Default Terragrunt Stack Output Command\nDESCRIPTION: Shows sample output when running 'terragrunt stack output' in a directory containing multiple units (e.g., 'service' and 'db'). The outputs from each unit are prefixed with the unit name and displayed in an HCL-like format.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt stack output\nservice.output1 = \"output1\"\nservice.output2 = \"output2\"\ndb.output1 = \"output1\"\ndb.output2 = \"output2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Engine with Metadata (HCL)\nDESCRIPTION: This HCL block demonstrates how to pass engine-specific configuration using the `meta` block within the `engine` configuration in `terragrunt.hcl`. The `meta` block accepts a map of arbitrary key-value pairs (strings, numbers, lists, maps) that the engine can read to configure itself, such as setting connection details, tool versions, or feature flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nengine {\n   source  = \"/home/users/iac-engines/my-custom-engine\"\n   # Optionally set metadata for the engine.\n   meta = { \n     key_1 = [\"value1\", \"value2\"]\n     key_2 = \"1.6.0\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Aside Component from Astro Starlight - JavaScript\nDESCRIPTION: This JavaScript import statement brings in the Aside component from the '@astrojs/starlight/components' library, allowing the documentation to render notes or alerts within Astro-powered documentation sites. It requires that the project has '@astrojs/starlight' installed and properly configured. The imported Aside component is typically used for displaying documentation hints, warnings, or supplementary notes within Markdown files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/provider-cache.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Website with Docker Compose (Bash)\nDESCRIPTION: Command to build and start the Terragrunt website locally using Docker Compose. Requires Docker and Docker Compose to be installed and running. This command initializes the necessary services defined in `docker-compose.yml` and makes the site accessible, typically at `http://localhost:4000`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Applying Terragrunt Stack with Real Outputs - Bash\nDESCRIPTION: This Bash snippet shows the terminal output from running terragrunt run-all apply after the plan. The `bar` module now consumes the actual output from `foo` rather than the mock value, confirming that mock_outputs are only used during planning when outputs are missing and that apply uses real values. This validates the proper configuration and flow with actual infrastructure changes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all --non-interactive apply\\n\\n...\\n\\n09:31:21.587 STDOUT [bar] tofu:   + resource \"local_file\" \"file\" {\\n09:31:21.587 STDOUT [bar] tofu:       + content              = \"Foo content: Hello from foo, Terragrunt!\"\\n09:31:21.587 STDOUT [bar] tofu:       + content_base64sha256 = (known after apply)\\n09:31:21.587 STDOUT [bar] tofu:       + content_base64sha512 = (known after apply)\\n09:31:21.587 STDOUT [bar] tofu:       + content_md5          = (known after apply)\\n09:31:21.587 STDOUT [bar] tofu:       + content_sha1         = (known after apply)\\n09:31:21.587 STDOUT [bar] tofu:       + content_sha256       = (known after apply)\\n09:31:21.587 STDOUT [bar] tofu:       + content_sha512       = (known after apply)\\n09:31:21.587 STDOUT [bar] tofu:       + directory_permission = \"0777\"\\n09:31:21.587 STDOUT [bar] tofu:       + file_permission      = \"0777\"\\n09:31:21.587 STDOUT [bar] tofu:       + filename             = \"./hi.txt\"\\n09:31:21.587 STDOUT [bar] tofu:       + id                   = (known after apply)\\n09:31:21.587 STDOUT [bar] tofu:     }\\n\\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Redirection via Front Matter (YAML)\nDESCRIPTION: Example YAML front matter block for creating a redirect page, typically within the `_docs` collection. The `redirect_to` key specifies an array containing the target URL path (e.g., `/support`). This automatically redirects users accessing the page defined by this file to the specified location, which is useful for managing moved or renamed content.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Support\ncategories: Community\nexcerpt: Need help?\ntags: [\"support\"]\nredirect_to:\n  - /support\norder: 301\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting Dependency Graph to PNG with Graphviz - Bash\nDESCRIPTION: This snippet shows how to pipe the output of 'terragrunt dag graph' to the 'dot' tool from Graphviz in order to produce a PNG image of the dependency graph. It requires 'dot' to be installed on the system. Input is the DOT-format graph from Terragrunt; output is a rendered PNG file representing the dependencies visually. The command chain serves as a practical workflow for visualizing infrastructure relationships.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/dag/graph.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt dag graph  | dot -Tpng > graph.png\n\n```\n\n----------------------------------------\n\nTITLE: Copying Regional Configuration Directories with Bash\nDESCRIPTION: Recursively copies the entire contents of the 'us-east-1/' directory to 'us-west-2/', allowing the reuse of regional configuration files for another AWS region. Requires bash shell, both source and destination directories, and that the destination does not already exist or collisions are handled by user.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncp -R us-east-1/ us-west-2/\n```\n\n----------------------------------------\n\nTITLE: Recursively Deleting Terragrunt Cache Directories with Bash\nDESCRIPTION: This Bash command uses find to recursively locate all .terragrunt-cache directories beneath the current directory tree and deletes them in place. It utilizes the -prune flag to skip recursion into matched directories, and -exec rm -rf {} \\; to securely and forcefully remove each one. This eliminates all Terragrunt cache instances at once. Use caution, as this operation is irreversible and removes all matched directories permanently.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/08-terragrunt-cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type d -name \".terragrunt-cache\" -prune -exec rm -rf {} \\;\n```\n\n----------------------------------------\n\nTITLE: Validating Terragrunt Configuration in JSON Format - Terragrunt CLI - Bash\nDESCRIPTION: Executes the Terragrunt validation command with the --json flag, instructing Terragrunt to output results in JSON. This enables downstream automation tools to parse validation outputs. Requires Terragrunt installed and the configuration option enabled; outputs JSON to standard output upon successful execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-validate-json.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nterragrunt hcl validate --json\n```\n\n----------------------------------------\n\nTITLE: Disabling Root Module Inclusion with Terragrunt Scaffold CLI - Bash\nDESCRIPTION: This Bash command demonstrates the use of the `--no-include-root` flag with the `terragrunt scaffold` command to prevent automatic inclusion of the root Terragrunt configuration in generated `terragrunt.hcl` files. The flag overrides default inclusion behavior during scaffolding and can also be configured via the `TG_NO_INCLUDE_ROOT` environment variable. The command expects a GitHub repository path and Terraform module as arguments, performing module scaffolding accordingly.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/scaffold-no-include-root.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nterragrunt scaffold github.com/org/repo//modules/mysql --no-include-root\n```\n\n----------------------------------------\n\nTITLE: Flag to Environment Variable Example (Env Var) (Plaintext)\nDESCRIPTION: Shows the corresponding environment variable (`TG_IAM_ASSUME_ROLE_DURATION`) for the `iam-assume-role-duration` flag, demonstrating the `TG_` prefix and `SHOUTY_SNAKE_CASE` conversion.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nTG_IAM_ASSUME_ROLE_DURATION\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dependency Output Fetching from S3 State (Bash)\nDESCRIPTION: This command runs `terragrunt run-all plan` using the `--dependency-fetch-output-from-state` flag. This flag optimizes the process of fetching outputs from dependency blocks by directly reading the state file from an S3 backend, bypassing the potentially slower `terraform output -json` command. This optimization is currently limited to S3 backends and relies on the current Terraform/OpenTofu state file schema.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan --dependency-fetch-output-from-state\n```\n\n----------------------------------------\n\nTITLE: Storing Shared Configuration Data in YAML - YAML\nDESCRIPTION: Provides an example region.yml file with a single value, enabling Terragrunt configs to load data from YAML files via yamldecode. Used for sharing external configuration between Terragrunt modules in a format-friendly way. Requires Terragrunt 0.23+ for yamldecode support.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n# region.yml\n\nregion: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Running apply command with Terragrunt (Shell)\nDESCRIPTION: Executes the 'apply' operation using the Terragrunt shortcut. Terragrunt orchestrates the underlying OpenTofu/Terraform apply command, applying the infrastructure changes defined in the configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/opentofu-shortcuts.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Terragrunt Experiment via Environment Variable (Bash)\nDESCRIPTION: Provides an example of enabling a specific experiment (e.g., `symlinks`) using the `TERRAGRUNT_EXPERIMENT` environment variable set to the experiment's name. Multiple experiments can be enabled by providing a comma-delimited list. This is useful for enabling specific features in CI/CD environments. Requires the Terragrunt CLI.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/06-experiments.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTERRAGRUNT_EXPERIMENT='symlinks' terragrunt plan\n```\n\n----------------------------------------\n\nTITLE: JSON Output Shortcut for Find Command (CLI, Bash)\nDESCRIPTION: Uses the `--json` alias flag for quick JSON output, functionally identical to `--format=json`. Simplifies scripting scenarios where parsable output is necessary. No extra parameters necessary. Output is a machine-readable JSON list of discovered configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --json\n```\n\n----------------------------------------\n\nTITLE: Inspecting Generated backend.tf File (Bash)\nDESCRIPTION: This Bash command uses `find` to locate the `backend.tf` file within the `.terragrunt-cache` directory, which is automatically generated by Terragrunt based on the `remote_state` block in `terragrunt.hcl`. It then uses `cat` (executed via `-exec`) to display the contents of the generated file, showing the Terraform backend configuration that Terragrunt provides to Terraform/OpenTofu.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ find .terragrunt-cache -name backend.tf -exec cat {} \\;\n```\n\n----------------------------------------\n\nTITLE: Sample Console Output for Terragrunt Metrics Export in JSON\nDESCRIPTION: This JSON output shows the format of telemetry data exported to the console by Terragrunt. It contains resource metadata and scope metrics, demonstrating how OpenTelemetry structures metric data. The sample includes bucketed histogram metrics and monotonic counters, which serve as examples for output validation and troubleshooting.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"Resource\":[{\"Key\":\"service.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"terragrunt\"}},{\"Key\":\"service.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"v0.55.0-41-g7185318bb11b\"}},{\"Key\":\"telemetry.sdk.language\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"go\"}},{\"Key\":\"telemetry.sdk.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"opentelemetry\"}},{\"Key\":\"telemetry.sdk.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"1.23.1\"}}],\"ScopeMetrics\":[]}\n{\"Resource\":[{\"Key\":\"service.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"terragrunt\"}},{\"Key\":\"service.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"v0.55.0-41-g7185318bb11b\"}},{\"Key\":\"telemetry.sdk.language\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"go\"}},{\"Key\":\"telemetry.sdk.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"opentelemetry\"}},{\"Key\":\"telemetry.sdk.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"1.23.1\"}}],\"ScopeMetrics\":[{\"Scope\":{\"Name\":\"terragrunt\",\"Version\":\"\",\"SchemaURL\":\"\"},\"Metrics\":[{\"Name\":\"run_bash_duration\",\"Description\":\"\",\"Unit\":\"\",\"Data\":{\"DataPoints\":[{\"Attributes\":[{\"Key\":\"args\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"[-c sleep 2]\"}},{\"Key\":\"command\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"bash\"}},{\"Key\":\"dir\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"/projects/gruntwork/terragrunt-tests/trace-test/mod3\"}}],\"StartTime\":\"2024-02-12T14:38:14.85578658Z\",\"Time\":\"2024-02-12T14:38:17.853165589Z\",\"Count\":1,\"Bounds\":[0,5,10,25,50,75,100,250,500,750,1000,2500,5000,7500,10000],\"BucketCounts\":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],\"Min\":2005,\"Max\":2005,\"Sum\":2005}],\"Temporality\":\"CumulativeTemporality\"}},{\"Name\":\"run_bash_success_count\",\"Description\":\"\",\"Unit\":\"\",\"Data\":{\"DataPoints\":[{\"Attributes\":[],\"StartTime\":\"2024-02-12T14:38:16.860878555Z\",\"Time\":\"2024-02-12T14:38:17.853169359Z\",\"Value\":1}],\"Temporality\":\"CumulativeTemporality\",\"IsMonotonic\":true}}]}]}\n\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Using an Embedded Boilerplate Template in Bash\nDESCRIPTION: Shows an example where `terragrunt scaffold` is run against a module that contains a custom boilerplate template within a `.boilerplate` subdirectory. Terragrunt automatically detects and uses this embedded template instead of the default one.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/06-scaffold.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt.git//test/fixtures/scaffold/module-with-template\n# will be used template from .boilerplate directory to generate terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Provider Cache Directory via Environment Variables\nDESCRIPTION: This command demonstrates setting a custom provider cache directory using the `TG_PROVIDER_CACHE_DIR` environment variable, in conjunction with enabling the cache via `TG_PROVIDER_CACHE=1`, before running `terragrunt plan`. This provides an environment-based alternative to CLI flags for configuring the cache location.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 \\\nTG_PROVIDER_CACHE_DIR=/new/path/to/cache/dir \\\nterragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Finalizing Stack File Usage, Committing Changes, and Updating .gitignore - Bash\nDESCRIPTION: This advanced shell sequence removes unit configurations, stages and commits the new stack file and remaining directories, updates .gitignore to ignore regenerated unit directories, and commits all changes using git. Dependencies: bash, git, properly initialized repo, and a valid stack definition file (terragrunt.stack.hcl). The script standardizes the repo to use stack-based definitions, minimizes tracked generated code, and produces a cleaned repository state. Inputs: infrastructure directory; outputs: committed .gitignore, stack file, and a repo ready for stack-driven workflows.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf service db sgs\\ngit add terragrunt.stack.hcl service db sgs\\ngit commit -m \"Remove unit configurations and add terragrunt.stack.hcl\"\\necho \"service\" >> .gitignore\\necho \"db\" >> .gitignore\\necho \"sgs\" >> .gitignore\\ngit add .gitignore\\ngit commit -m \"Add unit configurations to .gitignore\"\n```\n\n----------------------------------------\n\nTITLE: Running output command with Terragrunt (Shell)\nDESCRIPTION: Executes the 'output' operation using the Terragrunt shortcut. Terragrunt orchestrates the underlying OpenTofu/Terraform output command, retrieving and displaying the values of output variables defined in the root module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/opentofu-shortcuts.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt output\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Output with JSON Flag in Bash\nDESCRIPTION: Demonstrates running `terragrunt output -json`. This command retrieves outputs from the OpenTofu/Terraform state. Notably, when `-json` is used, Terragrunt avoids enriching the standard output from OpenTofu/Terraform, allowing the raw JSON output to be easily consumed by other tools. The example shows initialization logs followed by the unenriched JSON output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt output -json\n15:20:07.759 INFO   tofu: Initializing the backend...\n15:20:07.759 INFO   tofu: Initializing provider plugins...\n15:20:07.759 INFO   tofu: OpenTofu has been successfully initialized!\n15:20:07.759 INFO   tofu:\n15:20:07.759 INFO   tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n15:20:07.759 INFO   tofu: any changes that are required for your infrastructure. All OpenTofu commands\n15:20:07.759 INFO   tofu: should now work.\n15:20:07.759 INFO   tofu: If you ever set or change modules or backend configuration for OpenTofu,\n15:20:07.759 INFO   tofu: rerun this command to reinitialize your working directory. If you forget, other\n15:20:07.759 INFO   tofu: commands will detect it and remind you to do so if necessary.\n{\n  \"something\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"Hello, World!\"\n  },\n  \"something_else\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"Goodbye, World!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using --source-map Flag for Terragrunt URL Replacement (Bash)\nDESCRIPTION: This Bash command demonstrates how to use the `--source-map` argument with `terragrunt run plan`. It specifies a mapping rule where any source URL matching the exact string `git::ssh://git@github.com/org/repo.git` will be replaced with the local path `../local/repo` during the execution of the Terragrunt command. This requires Terragrunt to be installed and executable.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/source-map.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan --source-map \"git::ssh://git@github.com/org/repo.git=../local/repo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Provider Registries via CLI Flag\nDESCRIPTION: This command shows how to override the default list of registries (`registry.terraform.io`, `registry.opentofu.org`) that Terragrunt caches providers from. The `--provider-cache-registry-names` flag can be used multiple times to specify which registry hostnames should be included in the caching mechanism. The cache must also be enabled (`--provider-cache`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply \\\n--provider-cache \\\n--provider-cache-registry-names example1.com \\\n--provider-cache-registry-names example2.com\n```\n\n----------------------------------------\n\nTITLE: Referencing IaC Engine with a Local Path - HCL\nDESCRIPTION: Specifies a locally available binary as the engine source in the terragrunt.hcl configuration. This method is used when users have already downloaded or built the desired engine binary and want to refer to it by an absolute path. The 'source' parameter must be the full local filesystem path; inputs are local path and version variable. Output is that Terragrunt uses the engine from the specified path. This approach requires no network access but engine updates must be managed manually.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/13-engine.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nengine {\n    source = \"/home/users/iac-engines/terragrunt-iac-engine-opentofu_${version}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Writing All Rendered Terragrunt Configurations to JSON Files (Bash)\nDESCRIPTION: This command demonstrates rendering all Terragrunt configurations (`-a` is an alias for `--all`), outputting them as JSON (`--json`), and explicitly writing the rendered JSON content to `terragrunt.rendered.json` files located next to the original configuration files using the `--write` flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/render-all.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterragrunt render -a --json --write\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Feature Flag Value from External Command - Terragrunt HCL\nDESCRIPTION: This snippet configures a feature flag whose default value is dynamically fetched at runtime using Terragrunt's 'run_cmd' function. This enables integration with external services or scripts, such as fetching feature flag values from providers like LaunchDarkly or AppConfig. The 'default' attribute executes a shell command when the flag is evaluated. Requires external tool or wrapper, and presumes safe/secure use of dynamic commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_53\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nfeature \"feature_name\" {\n  default = run_cmd(\"--quiet\", \"<command-to-fetch-feature-flag-value>\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Cache via Environment Variables - Shell\nDESCRIPTION: Shows how to set up Terragrunt's provider cache using environment variables instead of CLI flags. Requires the user to export TG_PROVIDER_CACHE, TG_PROVIDER_CACHE_HOST, TG_PROVIDER_CACHE_PORT, and TG_PROVIDER_CACHE_TOKEN before running terragrunt apply. This approach allows automation or script-based configuration. The values set determine the host, port, and authentication used in the cache mechanism.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 \\\nTG_PROVIDER_CACHE_HOST=192.168.0.100 \\\nTG_PROVIDER_CACHE_PORT=5758 \\\nTG_PROVIDER_CACHE_TOKEN=my-secret \\\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Apply with Debug Flags (Shell)\nDESCRIPTION: This command executes `terragrunt apply` while setting the logging level to `debug` and enabling the generation of the `terragrunt-debug.tfvars.json` file. This is used to capture the exact inputs passed to Terraform/OpenTofu for debugging purposes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply --terragrunt-log-level debug --terragrunt-debug\n```\n\n----------------------------------------\n\nTITLE: Including the Collection Browser Partial in Jekyll (HTML/Liquid)\nDESCRIPTION: Demonstrates using the Liquid `include` tag within a Jekyll page (e.g., `_pages/my-collection/index.html`) to render the Collection Browser interface. It passes the specific collection object (`site.use-cases` in this example, which corresponds to `_use-cases` folder and configuration in `_config.yml`) and the collection's name (`use-cases`) as parameters to the `_includes/collection_browser/browser.html` partial.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{% include collection_browser/browser.html collection=site.use-cases collection_name='use-cases' %}\n```\n\n----------------------------------------\n\nTITLE: Pointing to CI Configuration Reference - Markdown\nDESCRIPTION: Refers to the CircleCI configuration file, indicating where maintainers can find the details about the CI build and release process. This snippet is a literal file path used in documentation to assist developers accessing build configuration details.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n`.circleci/config.yml`\n```\n\n----------------------------------------\n\nTITLE: Defining a Jekyll Collection with Sorting in _config.yml - YAML\nDESCRIPTION: This YAML snippet demonstrates how to register a Jekyll collection in the _config.yml file, specifying parameters such as output, sorting by a custom 'order' property, and permalink structure. The required dependency is a Jekyll project, and the main collection name must be changed by the user. Adjust ':categories' as needed based on your collection's use of categories. Outputs URLs according to defined permalinks. Limitations include the need to follow correct YAML indentation and property requirements.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncollections:\n  my-collection:   # --> Change to your collection's name\n    output: true\n    sort_by: order\n    permalink: /:collection/:categories/:title/  # --> You can adjust this to your needs. You can remove \":categories\" if your collection doesn't use it.\n```\n\n----------------------------------------\n\nTITLE: Running HCL Formatting Exclusion in Terragrunt CLI (Bash)\nDESCRIPTION: This Bash code snippet demonstrates using Terragrunt's hcl fmt command with multiple --exclude-dir flags to skip formatting the 'vendor' and '.terragrunt-cache' directories. No additional dependencies are required beyond having Terragrunt installed. The --exclude-dir parameter accepts directory names to exclude, allowing the user to focus formatting only on desired directories. The command produces formatted HCL files as output, omitting specified directories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-fmt-exclude-dir.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nterragrunt hcl fmt --exclude-dir=vendor --exclude-dir=.terragrunt-cache\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Apply with Real Outputs (Bash)\nDESCRIPTION: This snippet displays partial console output from running `terragrunt run-all --non-interactive apply`. It demonstrates that during the apply phase, Terragrunt utilizes the actual outputs generated by the `foo` module dependency (\"Hello from foo, Terragrunt!\") instead of the `mock_outputs` used previously during the plan. This confirms that mock outputs are bypassed when real dependency outputs are available.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all --non-interactive apply\n\n...\n\n09:31:21.587 STDOUT [bar] tofu:   + resource \"local_file\" \"file\" {\n09:31:21.587 STDOUT [bar] tofu:       + content              = \"Foo content: Hello from foo, Terragrunt!\"\n09:31:21.587 STDOUT [bar] tofu:       + content_base64sha256 = (known after apply)\n09:31:21.587 STDOUT [bar] tofu:       + content_base64sha512 = (known after apply)\n09:31:21.587 STDOUT [bar] tofu:       + content_md5          = (known after apply)\n09:31:21.587 STDOUT [bar] tofu:       + content_sha1         = (known after apply)\n09:31:21.587 STDOUT [bar] tofu:       + content_sha256       = (known after apply)\n09:31:21.587 STDOUT [bar] tofu:       + content_sha512       = (known after apply)\n09:31:21.587 STDOUT [bar] tofu:       + directory_permission = \"0777\"\n09:31:21.587 STDOUT [bar] tofu:       + file_permission      = \"0777\"\n09:31:21.587 STDOUT [bar] tofu:       + filename             = \"./hi.txt\"\n09:31:21.587 STDOUT [bar] tofu:       + id                   = (known after apply)\n09:31:21.587 STDOUT [bar] tofu:     }\n\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Page Front Matter for New Docs (YAML)\nDESCRIPTION: Example YAML front matter block required at the beginning of a new documentation page file within the `_docs` collection. Defines metadata like layout (`collection-browser-doc`), title, category, excerpt (description), tags, and sorting order (`order`) used by Jekyll and the custom Collection Browser theme to render the page and navigation correctly. Fields marked with '<---' should be customized.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: collection-browser-doc                  # X Cannot be changed\ntitle: Quick start                              # <--- Change this\ncategories:\n  - getting-started                             # <--- Change this if needed\nexcerpt: Learn how to start with Terragrunt.    # <--- Change page description\ntags: [\"Quick Start\", \"DRY\", \"backend\", \"CLI\"]  # <--- Set tags\norder: 100                                      # <--- It sorts the docs on the list\nnav_title: Documentation\nnav_title_link: /docs/\n---\n```\n\n----------------------------------------\n\nTITLE: Formatting Placeholders with Options in Custom Log Format (Shell)\nDESCRIPTION: Demonstrates applying formatting options to placeholders in Terragrunt's custom log format. The `%time` placeholder uses a specific `format` string ('Y-m-d H:i:sv'), and the `%level` placeholder uses the `short` format and `upper` case.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time(format='Y-m-d H:i:sv') %level(format=short,case=upper) %msg\"\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Stack Operations via run --all Command (bash)\nDESCRIPTION: These Bash command snippets demonstrate using Terragrunt's run --all command to apply, destroy, output, or plan multiple infrastructure units within a stack automatically. Prior to these commands, it's required that each unit directory contains a terragrunt.hcl configuration file, and the user should be positioned in the root directory where stack deployment orchestration is intended. The commands recursively apply the specified action (apply, destroy, output, or plan) to all discovered units, handling dependency order and optionally running in parallel where safe. The inputs are standard terminal commands and directory structure; the limitation is that dependency errors may occur if units referenced have not yet been applied.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd root\\nterragrunt run --all apply\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd root\\nterragrunt run --all destroy\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd root\\nterragrunt run --all output\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd root\\nterragrunt run --all plan\n```\n\n----------------------------------------\n\nTITLE: Defining SOPS Encrypted Data with PGP in JSON\nDESCRIPTION: This JSON object represents a SOPS-encrypted file structure. The `data` field contains the AES256-GCM encrypted string. The `sops` object provides metadata about the encryption, including the encryption mechanism (PGP identified by the `pgp` array containing key fingerprints `fp`), a message authentication code (`mac`), the last modification timestamp (`lastmodified`), and the SOPS tool version (`version`). This structure allows secure storage and management of sensitive data within version control.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/test/fixtures/units-reading/secrets.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\": \"ENC[AES256_GCM,data:w2jDRJR9BeIMSKE4+qnKWhfM,iv:08ACLYrUGtWriOV/ua4X6NZt57VmiTmAcnxB5V+8AUc=,tag:cVdkIO4EXAmyV3y7n/zbiA==,type:str]\",\n\t\"sops\": {\n\t\t\"kms\": null,\n\t\t\"gcp_kms\": null,\n\t\t\"azure_kv\": null,\n\t\t\"hc_vault\": null,\n\t\t\"age\": null,\n\t\t\"lastmodified\": \"2021-12-17T18:38:13Z\",\n\t\t\"mac\": \"ENC[AES256_GCM,data:8lPZmY8YgA0DqPRxLC9hVoRUXmbzaXgUBv3MHTm4iK44/6URIgJBUnPFPUbwIN7xbIgXd+QPQEMvfsmifqXorynGEwt2WtMKCPANg+2Ctf2KMmj7fGpe3HIlRhQiixip7/xzrIMbSdIRMS098D42JTvOIFNbWVQhByfN64AnDJY=,iv:wtouC/mWjhFwiJKDS6+5LqnQMcAeejElXLaL3H15jbY=,tag:6Bmemr2BMgShaMO3v4uiXw==,type:str]\",\n\t\t\"pgp\": [\n\t\t\t{\n\t\t\t\t\"created_at\": \"2021-12-17T18:38:12Z\",\n\t\t\t\t\"enc\": \"-----BEGIN PGP MESSAGE-----\\n\\nhQEMA0sXzMgpEabgAQf+KHsPp4Pp8YNtG7ChRpZO2qB/bFncWtAF9evO+RjAEahb\\nM+hzxkB5KDUSMYs0aeWeOrOqYPrjPPJxCspZtQhy8/qrC064kA7gq2PWhYAqGcKP\\ntnPI8D0SYDZBgoyHRqFuuD5TZio8swE89SxphftL0W3KkHay7WKQHj/cFqNoISNl\\nn0XeCgbacIwo5WxWz1qNFvaeo0rFFFhIhbfaegx/SWwUi1y6WK7sB0QobMRwXHj+\\nORiUWVvx/fCIMCaerPN/SjIA/DgzbZ3DWaixYXpW85Ipz7myu/zUQcWnWcGXnMRQ\\nERMYc6GyyLHwjZN1XuvXdPXvAt6vvaH4w5U9kW2l19JeAZXkcM14ivDoGwY1oLcX\\n4d2/MAS7vM7SgmcPBGmpNsJJgkWTgoc8qeFtu9u3e4e9pR4+dcJCbGQLQ5RiyM2Z\\nsyHjL6em/j4JLdtbM16orP6Q3oEPelphG7sxbDXBeA==\\n=6u1S\\n-----END PGP MESSAGE-----\\n\",\n\t\t\t\t\"fp\": \"3EF98802EEDCAF0C688B81F419546E0C123C664E\"\n\t\t\t}\n\t\t],\n\t\t\"unencrypted_suffix\": \"_unencrypted\",\n\t\t\"version\": \"3.7.1\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing IaC Engine with an HTTPS Source - HCL\nDESCRIPTION: Configures a terragrunt.hcl engine block so the engine is downloaded from a specific GitHub HTTPS release URL. Designed for cases where users want to source the engine from a hosted location rather than a Git reference or local path. Inputs include the versioned HTTPS download path, typically interpolated. Outputs in Terragrunt's use of a remote, downloadable engine binary. Constraints: Internet access is required; download failure results in error.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/13-engine.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nengine {\n    source = \"https://github.com/gruntwork-io/terragrunt-engine-opentofu/releases/download/${version}/terragrunt-iac-engine-opentofu_rpc_${version}_linux_amd64.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using an External Auth Provider Command via Terragrunt CLI (Bash)\nDESCRIPTION: Example of invoking Terragrunt with the `--auth-provider-cmd` flag, specifying an external script (`/path/to/auth-script.sh`) to dynamically fetch authentication credentials or role assumption details at runtime. This provides maximum flexibility for complex authentication scenarios.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --auth-provider-cmd /path/to/auth-script.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Terragrunt Provider Cache via Environment Variable\nDESCRIPTION: This command shows an alternative way to enable the Terragrunt Provider Cache by setting the `TG_PROVIDER_CACHE` environment variable to `1` before running `terragrunt run-all apply`. This achieves the same effect as the `--provider-cache` flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 terragrunt run-all apply\n```\n\n----------------------------------------\n\nTITLE: Illustrating Terragrunt Live Repository Structure\nDESCRIPTION: Represents the file structure of a 'live' repository using Terragrunt. Each environment (prod, qa, stage) contains directories for infrastructure components (app, mysql, vpc), but instead of Terraform code, they contain only `terragrunt.hcl` files defining how to deploy the corresponding remote modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n- live\n  - prod\n    - app\n      - terragrunt.hcl\n    - mysql\n      - terragrunt.hcl\n    - vpc\n      - terragrunt.hcl\n  - qa\n    - app\n      - terragrunt.hcl\n    - mysql\n      - terragrunt.hcl\n    - vpc\n      - terragrunt.hcl\n  - stage\n    - app\n      - terragrunt.hcl\n    - mysql\n      - terragrunt.hcl\n    - vpc\n      - terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Flag Naming for System Configuration (Provider Cache Dir) (Bash)\nDESCRIPTION: Example illustrating flag naming for system configuration. `--provider-cache-dir` targets the `provider cache` system and sets the `directory` configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--provider-cache-dir\n```\n\n----------------------------------------\n\nTITLE: Saving Terragrunt Stack Plan Outputs to Directory\nDESCRIPTION: Illustrates how to use the `terragrunt run --all plan` command combined with the `--out-dir` flag (or `TG_OUT_DIR` environment variable) to save the resulting Terraform plan for each unit in the stack. The command `$ terragrunt run --all plan --out-dir /tmp/tfplan` will generate binary plan files (`tfplan.tfplan`) and store them in a directory structure under `/tmp/tfplan` that mirrors the project's unit hierarchy. These saved plans can later be applied using `run --all apply --out-dir`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run --all plan --out-dir /tmp/tfplan\n```\n\n----------------------------------------\n\nTITLE: Illustrating Terragrunt --graph Execution Order for Destroy\nDESCRIPTION: This example demonstrates the execution order for `terragrunt run --graph destroy` starting from the `eks` module, based on a sample dependency graph. Unlike other commands, `destroy` runs in reverse dependency order (top-down), destroying the outermost dependents first before moving towards the initial module (`eks`). This ensures resources are removed safely, respecting dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/graph.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGroup 1\n- Module project/services/eks-service-2-v2\n- Module project/services/eks-service-3-v3\n- Module project/services/eks-service-4\n- Module project/services/eks-service-5\n\nGroup 2\n- Module project/services/eks-service-3-v2\n\nGroup 3\n- Module project/services/eks-service-3\n\nGroup 4\n- Module project/services/eks-service-1\n- Module project/services/eks-service-2\n\nGroup 5\n- Module project/eks\n```\n\n----------------------------------------\n\nTITLE: Output examples: Terragrunt run-all apply with required and optional var files (Bash)\nDESCRIPTION: These bash snippets display the shell output of running 'terragrunt run-all apply' in multiple environments, showing how the var files are dynamically constructed based on environment variables. The commands demonstrate the inclusion or omission of var-file arguments driven by extra_arguments configuration. Assumes relevant var files and directory structure exist.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt run-all apply\n[backend-app]  tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/backend-app/dev.tfvars\n[frontend-app] tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/frontend-app/us-east-1.tfvars\n\n$ TF_VAR_env=prod terragrunt run-all apply\n[backend-app]  tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars\n[frontend-app] tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars -var-file=/my/tf/frontend-app/us-east-1.tfvars\n\n$ TF_VAR_env=prod TF_VAR_region=us-west-2 terragrunt run-all apply\n[backend-app]  tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars -var-file=/my/tf/us-west-2.tfvars\n[frontend-app] tofu apply -var-file=/my/tf/tofu.tfvars -var-file=/my/tf/prod.tfvars -var-file=/my/tf/us-west-2.tfvars\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt MySQL Unit with DRY Pattern (HCL)\nDESCRIPTION: This snippet shows a Terragrunt configuration using include blocks to compose MySQL infrastructure settings by referencing root and environment-common files. It specifies the Terraform source through an HCL local and overrides certain module parameters via the inputs block. This approach establishes DRY (Don't Repeat Yourself) principles but is now deprecated in favor of more explicit stack/unit configuration. Dependencies include Terragrunt, the referenced HCL configuration files, and compatible Terraform modules. Inputs such as instance_class and allocated_storage must be defined for proper module instantiation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"envcommon\" {\n  path = \"${dirname(find_in_parent_folders(\\\"root.hcl\\\"))}/_envcommon/mysql.hcl\"\n  expose = true\n}\n\nterraform {\n  source = \"${include.envcommon.locals.base_source_url}?ref=v0.8.0\"\n}\n\ninputs = {\n  instance_class    = \"db.t2.medium\"\n  allocated_storage = 100\n}\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Terragrunt Module Source for Local Testing (Bash)\nDESCRIPTION: This Bash command demonstrates running `terragrunt run-all apply` while overriding the module sources defined in `terragrunt.hcl` files. The `--terragrunt-source /source/infrastructure-modules` flag tells Terragrunt to look for module code locally within the `/source/infrastructure-modules` directory, mapping the path specified in the `source` attribute (e.g., `//networking/vpc`) to a subdirectory within the provided local path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all apply --terragrunt-source /source/infrastructure-modules\n```\n\n----------------------------------------\n\nTITLE: Rendering Terragrunt Configuration to HCL via CLI - Bash\nDESCRIPTION: Shows the use of the 'terragrunt render' command in a Bash shell to render a Terragrunt configuration file to HCL format. Assumes Terragrunt is installed and the command is run in a directory containing a valid terragrunt.hcl file. The command outputs a merged and resolved configuration in readable HCL syntax with all parameter substitutions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/render.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt render\nlocals {\n  aws_region = \"us-east-1\"\n}\ninputs = {\n  aws_region = \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Terragrunt Stack Outputs (Default Format)\nDESCRIPTION: Executes the basic 'terragrunt stack output' command without any arguments. This retrieves outputs from all units within the current Terragrunt stack and displays them in the default HCL-like format.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/output.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack output\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Prefix (Plaintext)\nDESCRIPTION: Specifies the `TG_` prefix used for all environment variables that correspond to Terragrunt flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nTG_\n```\n\n----------------------------------------\n\nTITLE: Merging Mock Outputs with Real State Outputs in Terragrunt (HCL)\nDESCRIPTION: This HCL snippet illustrates merging mock outputs with actual outputs from the Terraform state using `mock_outputs_merge_strategy_with_state = \"shallow\"` within a Terragrunt `dependency` block. If the real state for the 'vpc' dependency contains `vpc_id` but not `new_output`, the resulting `dependency.vpc.outputs` map will contain the real `vpc_id` value and the mocked `new_output` value (\"temporary-dummy-value\"). A shallow merge overwrites top-level keys from the state with mock values if they conflict.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n\n  mock_outputs = {\n    vpc_id     = \"temporary-dummy-id\"\n    new_output = \"temporary-dummy-value\"\n  }\n\n  mock_outputs_merge_strategy_with_state = \"shallow\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Includes with `path_relative_from_include` (HCL)\nDESCRIPTION: Demonstrates how to use the `path_relative_from_include` function when multiple named `include` blocks are present in the configuration (e.g., `root` and `region`). Similar to its counterpart `path_relative_to_include`, this function requires specifying the name of the relevant `include` block (`\"root\"` in this case) as an argument to resolve the correct relative path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\ninclude \"region\" {\n  path = find_in_parent_folders(\"region.hcl\")\n}\n\nterraform {\n  source = \"../modules/${path_relative_from_include(\"root\")}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Multiple Dependency Outputs for Unit Inputs (Terragrunt HCL)\nDESCRIPTION: This HCL snippet illustrates referencing the outputs of multiple units via dependency blocks and aggregating those outputs as inputs to another unit. Specifically, the backend-app/terragrunt.hcl configuration accesses both \\'mysql\\' and \\'redis\\' dependency outputs to supply required input variables for its own deployment. Each dependency block specifies config_path to the desired unit, and the inputs map ties required input variables to dependency outputs. This technique closely couples the deployment order and data flow between units; as with all dependency blocks, referenced units must be applied before dependent units can consume their outputs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# backend-app/terragrunt.hcl\\ndependency \\\"mysql\\\" {\\n  config_path = \\\"../mysql\\\"\\n}\\n\\ndependency \\\"redis\\\" {\\n  config_path = \\\"../redis\\\"\\n}\\n\\ninputs = {\\n  mysql_url = dependency.mysql.outputs.domain\\n  redis_url = dependency.redis.outputs.domain\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Terragrunt 'experiment' Configuration Setting\nDESCRIPTION: This YAML-like snippet defines the schema for the 'experiment' configuration setting in Terragrunt. It specifies the setting's name, provides a description of its purpose (enabling experiments), defines its data type as a string, and lists the corresponding environment variable 'TG_EXPERIMENT' that can also be used to set this value.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/experiment.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: experiment\ndescription: Enables a specific experiment.\ntype: string\nenv:\n  - TG_EXPERIMENT\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Terragrunt Configurations in Text Format using Bash\nDESCRIPTION: Demonstrates the default `terragrunt list` command output, which displays configurations as a space-separated list. This format is suitable for scripting or getting a quick overview. Assumes a Terragrunt project structure exists in the current or specified directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-format.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Default text format - Great for quick overview\n$ terragrunt list\nlive/dev/db    live/dev/ec2   live/dev/vpc\nlive/prod/db   live/prod/ec2  live/prod/vpc\n```\n\n----------------------------------------\n\nTITLE: Displaying a Warning about the 'force' Flag using Astro Starlight (JSX)\nDESCRIPTION: This snippet uses the `Aside` component from `@astrojs/starlight/components` to display a danger-level warning. It cautions users against using the `force` flag due to the risk of irreversible data loss if backend state versioning is not enabled, emphasizing Gruntwork's recommendation to always enable versioning. Requires the `@astrojs/starlight/components` package.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-delete-force.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n\n<Aside type=\"danger\">\n\nThis flag is dangerous and should be used with caution.\n\nGruntwork recommends always enabling versioning on your backend state resources. Deleting backend state without versioning enabled can result in irreversible data loss.\n\n</Aside>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Danger Warning using Astro 'Aside' Component\nDESCRIPTION: This code snippet utilizes the Astro 'Aside' component (imported previously) to display a critical warning message. The 'type=\"danger\"' prop styles the component appropriately. The content warns users about the risks of using the associated 'force' flag, strongly recommending that versioning be enabled on backend state resources to prevent potential irreversible data loss during state migration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-migrate-force.mdx#_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Aside type=\"danger\">\n\nThis flag is dangerous and should be used with caution.\n\nGruntwork recommends always enabling versioning on your backend state resources. Migrating backend state without versioning enabled can result in irreversible data loss.\n\n</Aside>\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan and Inspecting Remote State (Bash)\nDESCRIPTION: Runs a Terragrunt plan operation in the 'ec2' directory and inspects the generated backend.tf, verifying state isolation between modules. Outputs show how backend configuration adapts (key differences) per directory. This approach supports modular, collision-free infrastructure design. Requires Terragrunt and initialized HCL configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Within the ec2 directory\n$ terragrunt plan\n...\n$ find .terragrunt-cache -name backend.tf -exec cat {} \\;\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    dynamodb_table = \"my-lock-table\"\n    encrypt        = true\n    key            = \"ec2/tofu.tfstate\"\n    region         = \"us-east-1\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Terragrunt Configurations Sorted by Dependency Order (DAG Mode) - Bash\nDESCRIPTION: Illustrates the use of the '--dag' flag with 'terragrunt list' to output configurations sorted according to the dependency graph, ensuring dependencies appear before their dependents. Useful for situations where operation ordering matters, such as deployments or execution plans. Requires Terragrunt with defined configuration dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-dag.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list --dag\nlive/dev/vpc   live/prod/vpc  live/dev/db\nlive/prod/db   live/dev/ec2   live/prod/ec2\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Output Variables (HCL)\nDESCRIPTION: This HCL snippet, typically found in `outputs.tf`, defines an output variable named `task_ids`. It exposes the value of `module.app_infra_module.task_ids`, making it accessible to other modules or for querying after deployment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# app/outputs.tf\noutput \"task_ids\" {\n  value = module.app_infra_module.task_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Includes in Terragrunt with Merging Strategies (HCL)\nDESCRIPTION: Demonstrates a child Terragrunt configuration that includes two parent configs (remote_state and region), each with differing expose and merging strategies. Both root.hcl and region.hcl must exist in the parent folder structure. Example illustrates combining configuration from multiple inherited sources and controlling merge behavior.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_27\n\nLANGUAGE: hcl\nCODE:\n```\n# child/terragrunt.hcl\ninclude \"remote_state\" {\n  path   = find_in_parent_folders(\"root.hcl\")\n  expose = true\n}\n\ninclude \"region\" {\n  path           = find_in_parent_folders(\"region.hcl\")\n  expose         = true\n  merge_strategy = \"no_merge\"\n}\n\ninputs = {\n  remote_state_config = include.remote_state.remote_state\n  region              = include.region.locals.region\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Remote State, Mock Outputs, and Inputs via Deep Merge in Terragrunt Child - HCL\nDESCRIPTION: A child terragrunt.hcl that overrides parent remote state with local backend, merges parent and child mock_outputs via deep merge, and merges input values from both. Shows how new and old attributes from both parent and child are accessible as a result of deep merge. Requires that referenced mock outputs and dependencies are defined appropriately in parent modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_34\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\ninclude \"root\" {\n  path           = find_in_parent_folders(\"root.hcl\")\n  merge_strategy = \"deep\"\n}\n\nremote_state {\n  backend = \"local\"\n}\n\ndependency \"vpc\" {\n  config_path = \"../vpc\"\n  mock_outputs = {\n    attribute     = \"mock\"\n    new_attribute = \"new val\"\n    list_attr     = [\"mock\"]\n    map_attr = {\n      bar = \"baz\"\n    }\n  }\n}\n\ninputs = {\n  attribute     = \"mock\"\n  new_attribute = \"new val\"\n  list_attr     = [\"mock\"]\n  map_attr = {\n    bar = \"baz\"\n  }\n\n  dep_out = dependency.vpc.outputs\n}\n```\n\n----------------------------------------\n\nTITLE: Describing a Kubernetes Ingress Resource to Retrieve ALB Endpoint - Bash\nDESCRIPTION: This bash command snippet demonstrates using kubectl to describe an Ingress resource, allowing retrieval of the associated ALB endpoint under the Address field. It shows command output, highlighting sections relevant to identifying the external entrypoint for services exposed via the ALB. Dependencies include kubectl with correct context, and a created Ingress resource. Input is the Ingress name as CLI parameter, output is a detailed description including the ALB's DNS name. Constraint: Only applicable once the ALB Ingress Controller has provisioned an ALB for the Ingress.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/cli/commands/catalog/module/testdata/find_modules/modules/eks-alb-ingress-controller/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl describe ing service-ingress\\nName:                   service-ingress\\nNamespace:              default\\nAddress:                QZVpvauzhSuRBRMfjAGnbgaCaLeANaoe.us-east-2.elb.amazonaws.com\\nDefault backend:        default-http-backend:80 (10.2.1.28:8080)\\nRules:\\n  Host                          Path      Backends\\n  ----                          ----      --------\\n                                /service  backend:80 (<none>)\\nAnnotations:\\nEvents:\\n  FirstSeen     LastSeen        Count   From                    SubObjectPath   Type            Reason  Message\\n  ---------     --------        -----   ----                    -------------   --------        ------  -------\\n  3m            3m              1       ingress-controller                      Normal          CREATE  Ingress service-ingress/backend\\n  3m            32s             3       ingress-controller                      Normal          UPDATE  Ingress service-ingress/backend\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan and Verifying Backend Configuration (Bash)\nDESCRIPTION: Shows the execution of `terragrunt plan` within a specific module directory (`ec2`). Following the plan, it uses `find` and `cat` to display the generated `backend.tf` file for the `ec2` module, confirming that the S3 backend `key` has been dynamically set to `ec2/tofu.tfstate` based on the module's path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Within the ec2 directory\n$ terragrunt plan\n...\n$ find .terragrunt-cache -name backend.tf -exec cat {} \\;\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    dynamodb_table = \"my-lock-table\"\n    encrypt        = true\n    key            = \"ec2/tofu.tfstate\"\n    region         = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Long Format with Dependencies and DAG Sorting - Bash\nDESCRIPTION: Shows 'terragrunt list -l --dependencies --dag' to combine tabular long format with dependency listing and dependency-based (DAG) sorting. This setup makes it straightforward to see both the relationships and the operational ordering according to the dependency graph. Terragrunt configurations should specify correct dependencies for meaningful output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-dag.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -l --dependencies --dag\nType  Path           Dependencies\nunit  live/dev/vpc\nunit  live/prod/vpc\nunit  live/dev/db    live/dev/vpc\nunit  live/prod/db   live/prod/vpc\nunit  live/dev/ec2   live/dev/db, live/dev/vpc\nunit  live/prod/ec2  live/prod/db, live/prod/vpc\n```\n\n----------------------------------------\n\nTITLE: Displaying Forwarded Terraform Output via Terragrunt (Bash)\nDESCRIPTION: This example demonstrates the output format when running a Terragrunt command with the `--tf-forward-stdout` flag enabled. After Terragrunt logs the command it's running, the raw output from the underlying Terraform/OpenTofu process is printed directly to stdout without any Terragrunt logging prefixes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/tf-forward-stdout.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n14:19:25.081 INFO   [app] Running command: tofu plan -input=false\n\nOpenTofu used the selected providers to generate the following execution\nplan. Resource actions are indicated with the following symbols:\n  + create\n\nOpenTofu will perform the following actions:\n```\n\n----------------------------------------\n\nTITLE: Running the 'plan' Command with Terragrunt Run\nDESCRIPTION: Demonstrates how to execute the OpenTofu/Terraform `plan` command using `terragrunt run`. It also shows the equivalent shortcut command `terragrunt plan`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/run.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan\n# Shortcut:\n# terragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Defining a Public-Facing Kubernetes Ingress with ALB Scheme - YAML\nDESCRIPTION: This YAML snippet shows an Ingress definition with annotations that make the ALB internet-facing. The manifest specifies apiVersion, kind, metadata, including an annotation for both Ingress class (alb) and the ALB scheme (internet-facing). It maps path-based routing for /service to send traffic to the backend service on port 80. Dependencies include the ALB Ingress Controller and a correctly configured Service named backend. Inputs are the manifest fields and annotation values; output is a publicly accessible ALB endpoint upon creation. Constraints: pod/service must exist, and permissions must allow ALB provisioning.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/cli/commands/catalog/module/testdata/find_modules/modules/eks-alb-ingress-controller/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\\napiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: service-ingress\\n  annotations:\\n    kubernetes.io/ingress.class: alb\\nspec:\\n  rules:\\n  - http:\\n      paths:\\n      - path: /service\\n        backend:\\n          serviceName: backend\\n          servicePort: 80\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag Exception Usage Example (Bash)\nDESCRIPTION: Demonstrates how to use a boolean flag (`--terragrunt-include-module-prefix`) where the default behavior has changed. Setting it to `false` is required to opt-out of the now-default behavior.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--terragrunt-include-module-prefix=false\n```\n\n----------------------------------------\n\nTITLE: Registering SSH Hosts for Git Access Before Terragrunt (Bash)\nDESCRIPTION: This Bash command ensures the remote SSH host used by Git is added to the known_hosts file before any Terragrunt commands run in automated pipelines. The command runs non-interactively and does not fail the pipeline if the host is already registered. This is crucial for CI/CD automation when using SSH URLs for Terraform modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nssh -T -oStrictHostKeyChecking=accept-new git@github.com || true\n```\n\n----------------------------------------\n\nTITLE: Using the --exclude Flag with Terragrunt Find - bash\nDESCRIPTION: Invoking Terragrunt's find command with the --exclude flag ensures that resulting JSON output incorporates exclude block configurations from detected units. No additional dependencies are required except for Terragrunt being installed. The command operates without extra parameters and outputs JSON to stdout. It is commonly piped into tools like jq for filtering or pretty-printing. No file system changes occur, and the underlying configuration must be present in Terragrunt modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-exclude.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--exclude\n```\n\n----------------------------------------\n\nTITLE: Setting input value using get_terraform_command in HCL\nDESCRIPTION: Shows usage of get_terraform_command to inject the name of the currently executing Terraform command as input. Useful for conditional logic or logging based on command context; requires only Terragrunt and Terraform. Outputs a string like 'apply', 'plan', or similar.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\ninputs = {\n  current_command = get_terraform_command()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamically Deriving Region and Generating Terrafrom Provider and Backend with Terragrunt in HCL\nDESCRIPTION: This advanced Terragrunt root configuration dynamically sets the 'region' local variable based on directory path, configures remote backend settings, and generates an AWS provider block using the dynamically determined region. Requires understanding of Terragrunt's function 'path_relative_to_include()', split, and generate features. The approach eliminates the need for separate region.hcl files but may be sensitive to platform-specific path separators and adds coupling between directory names and the inferred region.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_38\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\\nlocals {\\n  region = split(\\\"/\\\", path_relative_to_include())[0]\\n}\\n\\n# Configure the remote backend\\nremote_state {\\n  backend = \\\"s3\\\"\\n  generate = {\\n    path      = \\\"backend.tf\\\"\\n    if_exists = \\\"overwrite_terragrunt\\\"\\n  }\\n  config = {\\n    bucket = \\\"my-tofu-state\\\"\\n\\n    key            = \\\"${path_relative_to_include()}/tofu.tfstate\\\"\\n    region         = \\\"us-east-1\\\"\\n    encrypt        = true\\n    dynamodb_table = \\\"my-lock-table\\\"\\n  }\\n}\\n\\n# Configure the AWS provider\\ngenerate \\\"provider\\\" {\\n  path = \\\"provider.tf\\\"\\n  if_exists = \\\"overwrite_terragrunt\\\"\\n  contents = <<EOF\\nprovider \\\"aws\\\" {\\n  region = \\\"${local.region}\\\"\\n}\\nEOF\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Provider Cache via CLI Flags in Shell\nDESCRIPTION: This shell command demonstrates how to enable and configure the Terragrunt Provider Cache using specific command-line flags when running `terragrunt apply`. It explicitly sets the `--provider-cache` flag to enable the feature, and specifies a custom host (`--provider-cache-host`), port (`--provider-cache-port`), and security token (`--provider-cache-token`) for the cache server.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply \\\n--provider-cache \\\n--provider-cache-host 192.168.0.100 \\\n--provider-cache-port 5758 \\\n--provider-cache-token my-secret\n```\n\n----------------------------------------\n\nTITLE: Locating Parent Folder with `find_in_parent_folders` (HCL)\nDESCRIPTION: Demonstrates using the `find_in_parent_folders` function to locate a parent *directory* named `some-folder` instead of a file. The function searches upwards and returns the absolute path to the first matching parent directory found.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders(\"some-folder\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an SSH Host for Git Repository Access - Bash\nDESCRIPTION: This bash command ensures that the SSH host key for the git server (such as Github) is registered locally to allow automated scripts to access private Git repositories without manual approval. Useful for CI/CD automation pipelines where SSH host verification must be bypassed or accepted non-interactively. Relies on built-in ssh client and preconfigured SSH keys in the execution environment. Outputs nothing unless there is a key registration prompt or error; always returns exit code 0 thanks to '|| true'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nssh -T -oStrictHostKeyChecking=accept-new git@github.com || true\n```\n\n----------------------------------------\n\nTITLE: Declaring a MySQL Unit Reference Block in Terragrunt Stack (HCL)\nDESCRIPTION: This snippet declares a unit block in a Terragrunt stack, referencing a MySQL unit from a remote source and supplying required parameters, including name, class, version, and credentials. The no_dot_terragrunt_stack parameter prevents auto-generation into the .terragrunt-stack directory, providing explicit control for CI/CD operations. It requires Terragrunt stack support and access to the infrastructure catalog repository. This modular approach enables version-pinning and reproducibility for different environments.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nunit \"mysql\" {\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/mysql\"\n  path   = \"mysql\"\n\n  ## As discussed above, this prevents Terragrunt from automatically generating the units into a `.terragrunt-stack` directory.\n  no_dot_terragrunt_stack = true\n\n  values = {\n    version = \"v0.8.0\"\n    name = \"mysql_dev\"\n    instance_class = \"db.t2.micro\"\n    allocated_storage = 20\n    storage_type = \"standard\"\n    master_username = \"admin\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory with Bash\nDESCRIPTION: Initializes a new directory (e.g., for an AWS region) to organize Terraform or Terragrunt configurations. Assumes the bash shell and permissions to create directories. The single parameter to mkdir is the name of the target directory (e.g., 'us-east-1'). No output is produced if successful.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmkdir us-east-1\n```\n\n----------------------------------------\n\nTITLE: Force Deleting Terragrunt Backend State (Shell)\nDESCRIPTION: This command forces the deletion of the backend state file for the current Terragrunt unit. The `--force` flag is necessary, for example, when attempting to delete state from an S3 bucket that does not have versioning enabled, which might otherwise prevent deletion. Dependencies include Terragrunt and a configured remote state.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/delete.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt backend delete --force\n```\n\n----------------------------------------\n\nTITLE: Using --config Flag with Terragrunt CLI (Bash)\nDESCRIPTION: This example demonstrates how to use the `--config` flag with the `terragrunt run plan` command to specify a custom configuration file named `custom-config.hcl`. This overrides the default search for `terragrunt.hcl`. Terragrunt needs to be installed and accessible in the environment's PATH.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/config.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan --config custom-config.hcl\n```\n\n----------------------------------------\n\nTITLE: Updating Terragrunt Debug Environment Variable\nDESCRIPTION: Shows the required change for the debug environment variable. The 'TERRAGRUNT_DEBUG' variable needs to be replaced with 'TG_DEBUG_INPUTS'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_DEBUG=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_DEBUG_INPUTS=true\n```\n\n----------------------------------------\n\nTITLE: Setting Assumed IAM Role Session Duration in Terragrunt (HCL)\nDESCRIPTION: This HCL snippet demonstrates using the `iam_assume_role_duration` attribute in `terragrunt.hcl` to specify the duration (in seconds) for the temporary credentials obtained when assuming an IAM role. The example sets the duration to 14400 seconds (4 hours).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\niam_assume_role_duration = 14400\n```\n\n----------------------------------------\n\nTITLE: Printing HCL File Diff with Terragrunt Command-Line (Bash)\nDESCRIPTION: Run this Bash command to use Terragrunt's hclfmt in diff mode, which highlights the differences between the original and formatted HCL files. Requires Terragrunt to be installed and available in your PATH. The '--diff' flag instructs the formatter to display line-by-line changes; no additional input or configuration files are necessary, but you can set the TG_HCLFMT_DIFF environment variable for automation. The output is a textual diff displayed in your terminal.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-fmt-diff.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt hcl fmt --diff\n```\n\n----------------------------------------\n\nTITLE: Generated terragrunt.hcl via Scaffolding - HCL\nDESCRIPTION: This HCL snippet shows an automatically generated 'terragrunt.hcl' configuration file resulting from the scaffold command. It defines a Terragrunt module's source (typically a Git repository with the relevant Terraform/OpenTofu module), and a block of required input variables including their types, descriptions, and placeholder values. This file is used by Terragrunt to provision infrastructure according to the supplied input values and module source. No additional dependencies are required apart from Terragrunt and Terraform/OpenTofu. Users must manually fill in the required input values. The full list of module variables may be longer than shown in the abbreviated example.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/06-scaffold.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\n# This is a Terragrunt module generated by boilerplate.\nterraform {\n  source = \"git::https://github.com/gruntwork-io/terragrunt-infrastructure-modules-example.git//modules/mysql?ref=v0.8.1\"\n}\n\ninputs = {\n  # --------------------------------------------------------------------------------------------------------------------\n  # Required input variables\n  # --------------------------------------------------------------------------------------------------------------------\n\n  # Type: string\n  # Description: The AWS region to deploy to (e.g. us-east-1)\n  aws_region = \"\" # TODO: fill in value\n\n  # Type: string\n  # Description: The name of the DB\n  name = \"\" # TODO: fill in value\n\n  # Type: string\n  # Description: The instance class of the DB (e.g. db.t2.micro)\n  instance_class = \"\" # TODO: fill in value\n\n  # (... full list of inputs omitted for brevity ...)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering All Terragrunt Configurations as JSON (Bash)\nDESCRIPTION: This command uses `terragrunt render` with the `--all` flag to discover and process all Terragrunt configurations starting from the current working directory. The `--json` flag specifies that the output should be formatted as JSON. By default, without `--write`, this might only display the output or have specific default behavior depending on the Terragrunt version.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/render-all.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nterragrunt render --all --json\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt Shell Autocomplete\nDESCRIPTION: This command installs the command-line tab completion scripts for Terragrunt into the appropriate shell configuration file (`.bashrc` or `.zshrc`). The shell must be restarted for the changes to take effect.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt --install-autocomplete\n```\n\n----------------------------------------\n\nTITLE: Setting New TG_NON_INTERACTIVE Environment Variable - Bash\nDESCRIPTION: Provides the correct approach to set the environment variable for non-interactive behavior using the new TG_NON_INTERACTIVE name. Requires Terragrunt versions compatible with the CLI redesign. This variable affects Terragrunt invocation in the current shell session.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_NON_INTERACTIVE=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote State Backend with S3 in Terragrunt (HCL)\nDESCRIPTION: Defines a remote state backend for Terragrunt using an S3 bucket, with dynamic key construction using path_relative_to_include(). This setup specifies parameters like bucket name, key, region, encryption, and DynamoDB table name for state locking. Dependencies include AWS credentials, properly configured S3 and DynamoDB resources, and the use of Terragrunt HCL language. Outputs an HCL block intended for a root configuration file, which downstream unit configurations can include.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/migrate.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\n\nremote_state {\n  backend = \"s3\"\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite\"\n  }\n  config = {\n    bucket         = \"my-tofu-state\"\n    key            = \"${path_relative_to_include()}/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Stack Output with Terragrunt CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the Terragrunt CLI with the --json flag to output stack results in JSON format. The command requires Terragrunt to be installed and expects the stack configuration to be properly set up. The primary parameter is --json, which formats the output, making it suitable for machine parsing or integration with other tools. Outputs are printed directly to the terminal in JSON, and there are no additional constraints other than having access to the desired Terragrunt stack.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/stack-output-json.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack output --json\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt with External Auth Provider Command (Bash)\nDESCRIPTION: Demonstrates usage of the --terragrunt-auth-provider-cmd flag in the terragrunt CLI to execute a credential-providing script at runtime for authentication. The snippet shows invocation both via direct CLI argument and by exporting the TERRAGRUNT_AUTH_PROVIDER_CMD environment variable. Requires terragrunt installed and an authentication script present at the specified path. Input is via CLI; output is terragrunt behavior governed by credentials provided by the script.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/08-aws-authentication.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --terragrunt-auth-provider-cmd /path/to/auth-script.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_AUTH_PROVIDER_CMD=\"/path/to/auth-script.sh\"\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Displaying a Directory Structure Using Markdown FileTree - Markdown\nDESCRIPTION: Illustrates the layout of application and database configuration files in development and production environments using a visual file tree. This file tree is marked up within a specialized Markdown <FileTree> component, which is commonly rendered by documentation frameworks like Astro Starlight. No runtime dependencies are imposed, but viewers should ensure their documentation tooling supports this syntax. The snippet is for visualization purposes only, not execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/units-that-include.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<FileTree>\\n- dev\\n  - app\\n    - terragrunt.hcl\\n  - db\\n    - terragrunt.hcl\\n- prod\\n  - app\\n    - terragrunt.hcl\\n  - db\\n    - terragrunt.hcl\\n- _envcommon\\n  - app.hcl\\n  - db.hcl\\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Parsing Terragrunt JSON Output with jq in Bash\nDESCRIPTION: Illustrates piping the output of `terragrunt output -json` directly to the `jq` utility for JSON processing. Because Terragrunt does not enrich the output when `-json` is specified, the JSON is valid and can be parsed to extract specific fields (e.g., `.something`) without interference from Terragrunt's metadata.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt output -json | jq '.something'\n15:24:40.310 INFO   tofu: Initializing the backend...\n15:24:40.311 INFO   tofu: Initializing provider plugins...\n15:24:40.311 INFO   tofu: OpenTofu has been successfully initialized!\n15:24:40.311 INFO   tofu:\n15:24:40.311 INFO   tofu: You may now begin working with OpenTofu. Try running \"tofu plan\" to see\n15:24:40.311 INFO   tofu: any changes that are required for your infrastructure. All OpenTofu commands\n15:24:40.311 INFO   tofu: should now work.\n15:24:40.311 INFO   tofu: If you ever set or change modules or backend configuration for OpenTofu,\n15:24:40.311 INFO   tofu: rerun this command to reinitialize your working directory. If you forget, other\n15:24:40.311 INFO   tofu: commands will detect it and remind you to do so if necessary.\n{\n  \"sensitive\": false,\n  \"type\": \"string\",\n  \"value\": \"Hello, World!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Continued Support for Terragrunt Command Shortcuts\nDESCRIPTION: Confirms that common Terragrunt command shortcuts, such as invoking 'plan' directly without the 'run' keyword, will continue to function as before for frequently used Terraform/OpenTofu commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Terragrunt Stack Output Value (Bash)\nDESCRIPTION: This Bash command demonstrates retrieving a specific output value (`project1_app1.custom_value1`) from a Terragrunt stack as a raw string. It uses the `--format raw` flag, which is useful for direct use in shell scripts or environment variable assignments without additional parsing. Requires Terragrunt and a configured stack with the specified output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/stack-output-format.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Raw format\nterragrunt stack output --format raw project1_app1.custom_value1\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Control Mode for Root Terragrunt.hcl Usage (Terragrunt, Bash)\nDESCRIPTION: This command adds the '--strict-control=root-terragrunt-hcl' flag to 'terragrunt plan', enabling enforcement to throw an error if a root-level 'terragrunt.hcl' file is used as the configuration. This helps migrate users to the new recommended root file name ('root.hcl') by disallowing use of the default convention. Requires Terragrunt with strict control feature and should be run from a directory with the new file naming pattern.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/01-migrating-from-root-terragrunt-hcl.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --strict-control=root-terragrunt-hcl\\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output for Terragrunt Find (CLI, Bash)\nDESCRIPTION: Uses the `--no-color` global flag to disable color output during the discovery process, which is useful when piping output to other tools or files to avoid color code artifacts. Requires `terragrunt` installed; works with any output format. Takes no parameters beyond the global flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --no-color\n```\n\n----------------------------------------\n\nTITLE: Illustrating Terragrunt Project Structure with Environment Configuration Files\nDESCRIPTION: Displays a typical directory layout for a Terragrunt project using Bash script formatting. It shows environment folders (prod, qa, stage) each containing an `env.hcl` file for shared environment configuration and subfolders for specific modules (app, mysql, vpc) with their own `terragrunt.hcl` files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n└── live\n    ├── prod\n    │   ├── env.hcl\n    │   ├── app\n    │   │   └── terragrunt.hcl\n    │   ├── mysql\n    │   │   └── terragrunt.hcl\n    │   └── vpc\n    │       └── terragrunt.hcl\n    ├── qa\n    │   ├── env.hcl\n    │   ├── app\n    │   │   └── terragrunt.hcl\n    │   ├── mysql\n    │   │   └── terragrunt.hcl\n    │   └── vpc\n    │       └── terragrunt.hcl\n    └── stage\n        ├── env.hcl\n        ├── app\n        │   └── terragrunt.hcl\n        ├── mysql\n        │   └── terragrunt.hcl\n        └── vpc\n            └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Sorting Terragrunt Find Output for Destroy in Bash\nDESCRIPTION: Illustrates using `terragrunt find` with `--queue-construct-as=destroy`. This sorts the output based on the dependency graph as required for a 'destroy' operation, listing dependent modules before their dependencies (reverse order).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-construct-as.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --queue-construct-as=destroy\n```\n\n----------------------------------------\n\nTITLE: Sorting Configurations Using Queue Construct for Destroy Command (CLI, Bash)\nDESCRIPTION: Uses `terragrunt find` with the `--queue-construct-as=destroy` flag to reorder results so that configurations are presented as they would be processed by a `destroy` operation. All dependent units are listed before the resources they depend on. Suitable for ensuring cleanup order. Output is a sorted, newline-delimited list.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt find --queue-construct-as=destroy\nstacks/live/dev\nstacks/live/prod\nunits/live/dev/ec2\nunits/live/prod/ec2\nunits/live/dev/db\nunits/live/prod/db\nunits/live/dev/vpc\nunits/live/prod/vpc\n```\n\n----------------------------------------\n\nTITLE: Example Bash Script for Building and Pushing Docker Image to AWS ECR\nDESCRIPTION: This Bash script (`build_and_push_image.sh`) outlines a workflow for building a Docker image and pushing it to Amazon ECR. It uses hardcoded AWS account ID, region, repository, and tag (replaceable with dynamic context), builds the image using `docker build`, authenticates to ECR via AWS CLI (`aws ecr get-login-password`), and pushes using `docker push`. Requires Docker and AWS CLI.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nset -eou pipefail\n\nACCOUNT_ID=\"123456789012\"\nREGION=\"us-east-1\"\nREPOSITORY=\"my-repository\"\nTAG=\"latest\"\n\nIMAGE_TAG=\"${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${REPOSITORY}:${TAG}\"\n\n# Build the Docker image\ndocker build -t \"$IMAGE_TAG\" .\n\n# Push the Docker image to ECR\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com\ndocker push \"$IMAGE_TAG\"\n```\n\n----------------------------------------\n\nTITLE: Setting ALB Target Type for Fargate Pods in Kubernetes Ingress (YAML)\nDESCRIPTION: This annotation must be added to a Kubernetes Ingress resource when the target Pods are running on AWS Fargate. It instructs the AWS ALB Ingress Controller to configure the ALB target group to use 'ip' targeting instead of the default 'instance' targeting. This is required because Fargate tasks run without underlying EC2 instances directly managed by the user.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/cli/commands/catalog/module/testdata/find_modules/modules/eks-alb-ingress-controller/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nalb.ingress.kubernetes.io/target-type: ip\n```\n\n----------------------------------------\n\nTITLE: Launching the Terragrunt Module Catalog UI using Bash\nDESCRIPTION: This command launches the Terragrunt catalog user interface. Optionally, a specific repository URL can be provided; otherwise, Terragrunt searches for repository configurations in `terragrunt.hcl` or the current directory. Flags like `--no-include-root` and `--root-file-name` control scaffolding behavior.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/05-catalog.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog <repo-url> [--no-include-root] [--root-file-name]\n```\n\n----------------------------------------\n\nTITLE: Using `no_dot_terragrunt_stack` in Terragrunt Unit Definition\nDESCRIPTION: This `terragrunt.stack.hcl` snippet defines two units, `vpc` and `rds`. The `rds` unit includes `no_dot_terragrunt_stack = true`, causing its files to be generated directly in the same directory as `terragrunt.stack.hcl`, rather than inside the default `.terragrunt-stack` directory. This facilitates gradual adoption of stacks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_65\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.stack.hcl\n\nunit \"vpc\" {\n  source = \"git::git@github.com:acme/infrastructure-units.git//networking/vpc?ref=v0.0.1\"\n  path   = \"vpc\"\n  values = {\n    vpc_name = \"main\"\n    cidr     = \"10.0.0.0/16\"\n  }\n}\n\nunit \"rds\" {\n  source = \"git::git@github.com:acme/infrastructure-units.git//database/rds?ref=v0.0.1\"\n  path   = \"rds\"\n  values = {\n    engine   = \"postgres\"\n    version  = \"13\"\n  }\n  no_dot_terragrunt_stack = true\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Private Terraform Registry using Environment Variable (Shell)\nDESCRIPTION: Shows the environment variable 'TG_TF_REGISTRY_TOKEN' used by Terragrunt to authenticate with private Terraform module registries when using the 'tfr' protocol in the 'source' attribute. The value should be a valid registry API token.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Set the environment variable with your private registry token\nexport TG_TF_REGISTRY_TOKEN=\"<your_registry_api_token>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Terragrunt Version using asdf\nDESCRIPTION: These commands use the asdf version manager to install a specific version (v0.72.5, derived from the GitHub API fetch) of Terragrunt. The first command adds the Terragrunt plugin (maintained by a third party), and the second command installs the specified version. asdf helps manage multiple tool versions consistently across environments.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nasdf plugin add terragrunt\\nasdf install terragrunt v0.72.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Exclusion in Terragrunt - YAML\nDESCRIPTION: Defines the 'queue-exclude-external' configuration in Terragrunt using YAML syntax. This snippet sets up a boolean flag to determine whether external dependencies (those outside the current working directory and not included by 'queue-include-dir') are excluded from the execution queue. The configuration includes metadata such as name, description, type, and applicable environment variables. No direct inputs and outputs; this is a configuration directive read by Terragrunt at runtime. Ensure that the environment variable 'TG_QUEUE_EXCLUDE_EXTERNAL' is set if you intend to override via the environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-exclude-external.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: queue-exclude-external\ndescription: Exclude external dependencies from the queue of Units to run.\ntype: bool\nenv:\n  - TG_QUEUE_EXCLUDE_EXTERNAL\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Available Terragrunt Strict Controls (Shell)\nDESCRIPTION: Shell command using the Terragrunt CLI to display information about available strict controls and their descriptions. This command helps users understand which specific controls can be enabled using the `strict-control` flag or `TG_STRICT_CONTROL` environment variable.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/strict-control.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt info strict\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Execution Command (HCL)\nDESCRIPTION: Example showing the format of the 'execute' argument within a 'before_hook' or 'after_hook' block in Terragrunt. It takes a list of strings, where the first string is the command and subsequent strings are its arguments. This example would run 'echo Foo' before the 'apply' command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  before_hook \"example_before_apply\" {\n    commands = [\"apply\"]\n    execute  = [\"echo\", \"Running pre-apply script...\"]\n    # working_dir = \"/path/to/script/dir\" # Optional: Defaults vary by hook type\n    # run_on_error = false # Optional: Default is false\n    # suppress_stdout = false # Optional: Default is false\n  }\n\n  after_hook \"example_after_apply\" {\n    commands = [\"apply\"]\n    execute  = [\"echo\", \"Foo\"] # Example from text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output with Exclude and Queue Construct as Plan - json\nDESCRIPTION: Contains a sample JSON output from executing Terragrunt find with both --exclude and --queue-construct-as=plan flags. The resulting array features unit configurations filtered based on plan queue simulation, showing only those relevant for the queue and matching exclude criteria. Intended for verification and further automation, this output assumes upstream configuration with the appropriate exclude blocks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-exclude.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"action/exclude-apply\",\n    \"exclude\": {\n      \"exclude_dependencies\": true,\n      \"actions\": [\n        \"apply\"\n      ],\n      \"if\": true\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Computed Locals Using run_cmd in HCL - HCL\nDESCRIPTION: Shows how to define a computed local value in a HCL file by executing a shell command using run_cmd. This pattern makes it possible to dynamically generate values based on external scripts or tooling at parse time. The local can then be referenced in other Terragrunt configs if loaded with read_terragrunt_config.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_42\n\nLANGUAGE: hcl\nCODE:\n```\n# computed.hcl\n\nlocals {\n  computed_value = run_cmd(\"--quiet\", \"python3\", \"-c\", \"print('Hello,')\")\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Environments from Run-All via Feature Flags in Terragrunt HCL (prod/root.hcl)\nDESCRIPTION: This HCL snippet sets a feature flag for the production environment and restricts most actions via the exclude block, using the value of the 'prod' feature to control exclusion. Inputs and outputs are analogous to those for dev/stage, locking down production by default unless opt-in is provided. Dependencies: Terragrunt and environment segregation. Limitations: intended for prod environment root files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n# prod/root.hcl\nfeature \"prod\" {\n  default = false\n}\n\nexclude {\n    if = !feature.prod.value\n    actions = [\"all_except_output\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Terragrunt Stack Units Using CLI - Bash\nDESCRIPTION: This snippet uses the Terragrunt CLI to regenerate stack units based on a terragrunt.stack.hcl definition. It assumes Terragrunt is installed, the working directory contains a valid terragrunt.stack.hcl, and required dependencies are available on disk or fetchable from remote sources. Invoked after removing previous manual configurations, this command ensures stacks are reproducibly generated from the stack definition. Input: working directory context; output: regenerates 'service', 'db', and 'sgs/asg' unit directories with fresh configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt stack generate\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Remote State Backend in Terragrunt (HCL)\nDESCRIPTION: This HCL block within a `terragrunt.hcl` file configures the remote state backend. It specifies using S3 (`backend = \"s3\"`) and provides necessary configuration parameters like the bucket name (`bucket`), state file path (`key`), AWS region (`region`), encryption status (`encrypt`), DynamoDB table for locking (`dynamodb_table`), and an optional access logging bucket (`accesslogging_bucket_name`). This configuration defines where Terragrunt manages the Terraform state file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/delete.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\nremote_state {\n  backend = \"s3\"\n  config = {\n    bucket  = \"mybucket\"\n    key     = \"path/to/my/key\"\n    region  = \"us-east-1\"\n    encrypt = true\n\n    dynamodb_table = \"tf-lock\"\n\n    accesslogging_bucket_name = \"mybucket-logs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Bucket Update for S3 Backend Management with Terragrunt in HCL\nDESCRIPTION: This snippet configures the S3 backend with remote_state in Terragrunt and demonstrates how to prevent automatic updates to the S3 bucket resource by including the disable_bucket_update parameter in the config map. This is relevant for cases where manual changes or policies restrict bucket modification, ensuring Terragrunt does not alter existing buckets even if configuration drift is detected. All other arguments should be specified as required for the environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\\nremote_state {\\n  # ... other args omitted for brevity ...\\n  config = {\\n    # ... other config omitted for brevity ...\\n    disable_bucket_update = true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Output example: Terragrunt apply using extra_arguments for whitespace in var argument (Bash)\nDESCRIPTION: Shows the resulting tofu command when running 'terragrunt apply' with an extra_arguments block that passes a -var argument with a value containing dots (bucket name). Demonstrates the proper splitting of arguments for values with whitespace.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt apply\n# tofu apply -var bucket=example.bucket.name\n```\n\n----------------------------------------\n\nTITLE: Excluding Environments from Run-All via Feature Flags in Terragrunt HCL (dev/root.hcl)\nDESCRIPTION: This HCL snippet demonstrates how to set up a feature flag for the 'dev' environment and use it to control exclusion of actions in run-all scenarios. The 'exclude' block checks the flag value to determine if actions (except for 'output') should run. Inputs are the feature flag value; output is the selective exclusion during run-all operations. Dependencies: Terragrunt, environment-specific configuration. Limitations: intended for dev environment root configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# dev/root.hcl\nfeature \"dev\" {\n  default = true\n}\n\nexclude {\n    if = !feature.dev.value\n    actions = [\"all_except_output\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Provider Cache Directory via CLI Flag\nDESCRIPTION: This command illustrates how to specify a custom directory for storing cached providers using the `--provider-cache-dir` flag, in addition to enabling the cache with `--provider-cache`. This allows reusing an existing cache directory, potentially one previously managed by Terraform's `plugin_cache_dir`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt plan \\\n--provider-cache \\\n--provider-cache-dir /new/path/to/cache/dir\n```\n\n----------------------------------------\n\nTITLE: Including Exclude Configuration in JSON Output (CLI, Bash)\nDESCRIPTION: Uses `terragrunt find` with the `--exclude` and JSON output flags to add exclude block details for each discovered unit. The output will include an 'exclude' object (with conditions and actions) when applicable, helping users preview and audit which configurations would be skipped given certain settings. Output is a JSON array of objects with potential exclude metadata included.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --exclude --format 'json'\n```\n\n----------------------------------------\n\nTITLE: Configuring extra_arguments with plugin-dir for init command (HCL)\nDESCRIPTION: This snippet shows how to configure extra_arguments for the 'init' command and pass a custom '-plugin-dir' argument. It is designed for environments where plugins are installed manually rather than downloaded. It must be used in terragrunt.hcl. The '-from-module' and directory arguments should not be used, as they are provided automatically by Terragrunt for init.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  # ...\n\n  extra_arguments \"init_args\" {\n    commands = [\n      \"init\"\n    ]\n\n    arguments = [\n      \"-plugin-dir=/my/tofu/plugin/dir\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying All Terraform Modules Using Terragrunt run-all (Bash and Output Logs)\nDESCRIPTION: Executes a stack-wide destroy of all modules using Terragrunt's 'run-all destroy' command, displaying execution order as determined by dependency DAG. Includes textual output log structure with module grouping and prompts for confirmation. Shows how Terragrunt coordinates orderly teardown based on dependencies, making it safe to destroy resources even in complex stacks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# From the root directory\n$ terragrunt run-all destroy\n16:32:08.944 INFO   The stack at . will be processed in the following order for command destroy:\nGroup 1\n- Module ./ec2\n\nGroup 2\n- Module ./vpc\n\n\nWARNING: Are you sure you want to run `terragrunt destroy` in each folder of the stack described above? There is no undo! (y/n)\n\n```\n\n----------------------------------------\n\nTITLE: Saving and Applying Terragrunt Stack Destroy Plans\nDESCRIPTION: Provides the sequence of commands for performing a planned destroy operation across a Terragrunt stack. First, `terragrunt run --all --out-dir /tmp/tfplan plan -destroy` generates and saves binary destroy plan files (`tfplan.tfplan`) for each unit into the `/tmp/tfplan` directory structure. Second, `terragrunt run --all --out-dir /tmp/tfplan apply` applies these saved destroy plans, ensuring that only the planned destruction occurs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all --out-dir /tmp/tfplan plan -destroy\nterragrunt run --all --out-dir /tmp/tfplan apply\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger All-in-One Container with Docker\nDESCRIPTION: This command uses Docker to run the Jaeger all-in-one image (`jaegertracing/all-in-one:1.54.0`). It enables the OTLP collector via the environment variable `COLLECTOR_OTLP_ENABLED=true` and maps the necessary ports: 16686 for the Jaeger UI, 4317 for OTLP gRPC, and 4318 for OTLP HTTP. The `--rm` flag ensures the container is removed when stopped, and `--name jaeger` assigns a name for easy reference.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name jaeger -e COLLECTOR_OTLP_ENABLED=true -p 16686:16686 -p 4317:4317 -p 4318:4318 jaegertracing/all-in-one:1.54.0\n```\n\n----------------------------------------\n\nTITLE: Setting GOFLAGS Environment Variable for Build Tags (Bash)\nDESCRIPTION: Exports the `GOFLAGS` environment variable with the `-tags=aws` value. This ensures that subsequent Go commands within the same shell session, including those run by development tools or editors, will include the specified build tags, enabling features or tests dependent on them.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport GOFLAGS='-tags=aws'\n```\n\n----------------------------------------\n\nTITLE: Defining the 'inputs-debug' Parameter in Terragrunt Configuration (YAML)\nDESCRIPTION: This YAML snippet defines the `inputs-debug` parameter for Terragrunt. It specifies the parameter's name, provides a description of its function (writing a `debug.tfvars` file), sets its type to boolean, and links it to the environment variable `TG_INPUTS_DEBUG`. This parameter helps in debugging Terragrunt configurations by outputting resolved input variables when enabled.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/inputs-debug.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: inputs-debug\ndescription: Write debug.tfvars to working folder to help root-cause issues.\ntype: bool\nenv:\n  - TG_INPUTS_DEBUG\n---\n```\n\n----------------------------------------\n\nTITLE: Handling whitespace in command-line arguments using extra_arguments (HCL)\nDESCRIPTION: This HCL configuration demonstrates adding a -var argument containing whitespace by splitting the flag and value into separate argument list entries (e.g., \"-var\", \"bucket=example.bucket.name\"). This approach works around Terragrunt's limitation on whitespace in argument list items. Place this in terragrunt.hcl, and ensure bucket names and other variables conform to constraints.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\nterraform {\n  extra_arguments \"bucket\" {\n    commands = [\n      \"apply\",\n      \"plan\",\n      \"import\",\n      \"push\",\n      \"refresh\"\n    ]\n\n    arguments = [\n      \"-var\", \"bucket=example.bucket.name\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output example: Terragrunt apply with multiple extra_arguments (Bash)\nDESCRIPTION: Shows the shell output of invoking 'terragrunt apply' when two extra_arguments blocks are configured in terragrunt.hcl. Displays the resulting tofu command including retry lock and custom -var arguments. Assumes Terragrunt and OpenTofu/Terraform are installed and configured.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/07-extra-arguments.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt apply\n# tofu apply -lock-timeout=20m -var foo=bar -var region=us-west-1\n```\n\n----------------------------------------\n\nTITLE: Generating Provider Lock Files with Terragrunt Cache Enabled\nDESCRIPTION: This command shows how to run `terragrunt providers lock` with the Terragrunt Provider Cache enabled (`--provider-cache`). When the cache is enabled, Terragrunt handles provider caching and generates the `.terraform.lock.hcl` file directly for the specified platforms, without invoking `terraform providers lock`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt providers lock -platform=linux_amd64 -platform=darwin_arm64 -platform=freebsd_amd64 \\\n--provider-cache\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Plan Including Stage Environment via Feature Flag\nDESCRIPTION: This Bash command demonstrates how to selectively include an environment (stage) in a `run-all` operation. By setting `--feature stage=true`, it overrides the default exclusion configured in the `stage/root.hcl` file, causing Terragrunt to include the stage modules in the plan.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all --feature stage=true plan\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variable with Terraform CLI Arguments using HCL\nDESCRIPTION: This HCL snippet passes the command-line arguments supplied to the current Terraform command execution as an input variable (`current_cli_args`) to the Terraform module. It uses the `get_terraform_cli_args()` function within the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  current_cli_args = get_terraform_cli_args()\n}\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure Using Tree\nDESCRIPTION: This snippet uses a pseudographic tree representation to illustrate a typical non-production infrastructure directory layout with separate subdirectories for service, database, and security group (asg) units. This visualization serves as a reference point for the subsequent abstraction into a stack. No actual code is executed; it's a documentation/conceptual snippet.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\nnon-prod\n└── us-east-1\n    └── stateful-ec2-asg-service\n        ├── service\n        │   └── terragrunt.hcl\n        ├── db\n        │   └── terragrunt.hcl\n        └── sgs\n            └── asg\n                └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Formatting a Single HCL File with Terragrunt CLI in Bash\nDESCRIPTION: This bash command demonstrates how to use the Terragrunt CLI's hclfmt subcommand to format a specific HCL file. By specifying the --file flag, it targets only the provided HCL file path rather than processing all recursively. Requires the 'terragrunt' CLI to be installed and accessible in your system path. The main parameter is the path to the HCL file to format, and the command outputs the formatted file in place. Make sure the specified file exists and has proper permissions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-fmt-file.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt hcl fmt --file=./environments/prod/terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Accessing CLI --source flag with get_terragrunt_source_cli_flag in HCL\nDESCRIPTION: Demonstrates retrieving the value of the --source CLI flag (or TG_SOURCE environment variable) for use in dynamic configuration construction, such as for customizing hooks or test environments. No external dependencies beyond Terragrunt. Output: value of the CLI --source flag or environment variable as a string.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_29\n\nLANGUAGE: hcl\nCODE:\n```\nmock_outputs = jsondecode(file(\"${get_terragrunt_source_cli_arg()}/dependency_mocks/vpc.json\"))\n\n```\n\n----------------------------------------\n\nTITLE: Executing the Terragrunt Scaffold Command (Bash)\nDESCRIPTION: Demonstrates the basic syntax for using the `terragrunt scaffold` command. It requires a module URL (`<MODULE_URL>`) and optionally accepts a template URL (`[TEMPLATE_URL]`), variables (`--var`, `--var-file`), and flags to control root inclusion (`--no-include-root`, `--root-file-name`). This command generates Terragrunt configuration files based on the specified module or template. Refer to the dedicated scaffold documentation for more details.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/scaffold.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold <MODULE_URL> [TEMPLATE_URL] [--var] [--var-file] [--no-include-root] [--root-file-name]\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Info Print Command in Shell\nDESCRIPTION: Executes the `terragrunt info print` command in a shell environment. This command outputs a JSON object containing details about the current Terragrunt context, such as the configuration file path (`config_path`), download directory (`download_dir`), IAM role (`iam_role`), Terraform/Tofu binary (`terraform_binary`), the command being run (`terraform_command`), and the working directory (`working_dir`). Requires Terragrunt to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/info/print.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terragrunt info print\n{\n  \"config_path\": \"/example/path/terragrunt.hcl\",\n  \"download_dir\": \"/example/path/.terragrunt-cache\",\n  \"iam_role\": \"\",\n  \"terraform_binary\": \"tofu\",\n  \"terraform_command\": \"print\",\n  \"working_dir\": \"/example/path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform S3 Remote State Backend in HCL\nDESCRIPTION: This HCL snippet shows a standard Terraform configuration block within a `main.tf` file for setting up an S3 remote state backend. It defines the bucket name, key (path within the bucket), AWS region, encryption status, and the DynamoDB table for state locking. This configuration lacks dynamic capabilities and must be repeated in each module, leading to potential inconsistencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/04-state-backend.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    key            = \"frontend-app/tofu.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"my-lock-table\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Absolute Var-Files to Terragrunt via CLI - Bash\nDESCRIPTION: This snippet shows usage of absolute file paths when passing extra variable files with Terragrunt from the command line. Using absolute paths avoids problems with Terragrunt's execution in temporary directories, ensuring that file references resolve correctly. Users must ensure the `.tfvars` files exist at the specified locations; relevant for teams who need reproducibility across machines and CI.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/01-units.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Use absolute file paths on the CLI!\\nterragrunt apply -var-file /foo/bar/extra.tfvars\\n# Or use the PWD environment variable to construct\\n# an absolute path before passing it to Terragrunt\\n# $ terragrunt apply -var-file \"$PWD/extra.tfvars\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Root HCL Pattern via Terragrunt Flag\nDESCRIPTION: Shows how to run a Terragrunt command (`plan`) while enabling the `root-terragrunt-hcl` strict control using the `--strict-control` flag. This enforces the new pattern by causing Terragrunt to error if it detects a root `terragrunt.hcl` file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --strict-control=root-terragrunt-hcl\n```\n\n----------------------------------------\n\nTITLE: Using an External Auth Provider Command via Environment Variable (Bash)\nDESCRIPTION: Shows how to configure Terragrunt to use an external authentication script by setting the `TG_AUTH_PROVIDER_CMD` environment variable. Terragrunt will execute the specified script to obtain credentials if the `--auth-provider-cmd` flag is not set.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_AUTH_PROVIDER_CMD=\"/path/to/auth-script.sh\"\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Recursively Deleting Terragrunt Cache Directories using Bash\nDESCRIPTION: This Bash command first finds all directories named `.terragrunt-cache` recursively starting from the current directory (`.`). It then uses the `-prune` option to prevent descending into found directories and `-exec rm -rf {} \\;` to execute the `rm -rf` command on each found directory, effectively deleting it and its contents. This is useful for cleaning up multiple cache directories but should be used with extreme caution as it permanently removes files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/11-terragrunt-cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type d -name \".terragrunt-cache\" -prune -exec rm -rf {} \\;\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variable with AWS Account Alias using HCL\nDESCRIPTION: This HCL snippet demonstrates passing the current AWS account alias as an input variable to the Terraform module. It uses the `get_aws_account_alias()` function within the `inputs` block to retrieve the alias associated with the current AWS credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/04-functions.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\n\ninputs = {\n  account_alias = get_aws_account_alias()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Terragrunt Provider Cache via Environment Variable\nDESCRIPTION: This command shows an alternative method to enable the Terragrunt provider cache using the `TG_PROVIDER_CACHE` environment variable set to `1` before running `terragrunt run-all apply`. This achieves the same outcome as using the CLI flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 terragrunt run-all apply\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternate Terraform Binaries and Version Constraints (HCL)\nDESCRIPTION: This sample shows how to configure terragrunt.hcl to use an alternative Terraform binary by setting 'terraform_binary' to a custom path, along with a corresponding 'terraform_version_constraint'. This is useful for maintaining compatibility with older Terraform versions (<0.12) while using Terragrunt >=0.19, though such usage is unofficially supported. Ensure the binary path is valid and outside system PATH if managing multiple versions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform_binary = \\\"~/bin/terraform-v11/terraform\\\"\\nterraform_version_constraint = \\\"\\u003e= 0.11\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Running terragrunt with queue-include-dir and queue-strict-include (bash)\nDESCRIPTION: Shows command-line usage examples of the terragrunt tool with different combinations of --queue-include-dir and --queue-strict-include flags. Highlights their effect: by default, --queue-include-dir broadens processing, but --queue-strict-include limits execution strictly to specified directory patterns. Inputs include directory globs; output is restricted execution. Requires Terragrunt to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-strict-include.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all plan --queue-include-dir \\\"prod/*\\\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all plan --queue-include-dir \\\"prod/*\\\" --queue-strict-include\n```\n\n----------------------------------------\n\nTITLE: Declaring Explicit AWS Region in Terragrunt Locals for Simplicity in HCL\nDESCRIPTION: This short snippet shows how to set the AWS region explicitly in the 'locals' block of a Terragrunt configuration. The value is hardcoded for clarity and simplicity, reducing possible confusion or cross-platform issues. This approach has no dependencies other than the Terragrunt framework, and the output is a local variable usable in other configuration blocks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_37\n\nLANGUAGE: hcl\nCODE:\n```\n# us-west-2/region.hcl\\nlocals {\\n  region = \\\"us-west-2\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Running the Strict GolangCI Linter with Custom Config - Bash\nDESCRIPTION: This Bash snippet executes GolangCI linter with a stricter configuration specified by .strict.golangci.yml, enabling additional static checks. This is used for more exhaustive code style and error analysis in pull request workflows. Requires the strict YAML config and the golangci-lint tool. Outputs any style violations to the console; not mandatory for merge.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run -c .strict.golangci.yml\n```\n\n----------------------------------------\n\nTITLE: Annotating a Kubernetes Ingress Resource for ALB - YAML\nDESCRIPTION: This YAML fragment illustrates how to attach the annotation kubernetes.io/ingress.class: alb to an Ingress resource. This annotation instructs the deployed ALB Ingress Controller to process and reflect the Ingress definition into an AWS ALB. The only required dependency is that the target controller is running and configured within the cluster. Only the metadata.annotations dictionary is shown, so it assumes a full Ingress resource context elsewhere.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/cli/commands/catalog/module/testdata/find_modules/modules/eks-alb-ingress-controller/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\\n  kubernetes.io/ingress.class: alb\n```\n\n----------------------------------------\n\nTITLE: Skipping Terragrunt Module Execution (HCL)\nDESCRIPTION: This HCL snippet demonstrates setting the `skip` attribute to `true` in a `terragrunt.hcl` file. This causes Terragrunt commands (like `run-all`) to ignore this specific module, which is useful for root configuration files that only exist to be included by other modules and don't define infrastructure themselves. Note: The `exclude` block is now preferred over the deprecated `skip` attribute.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# root/terragrunt.hcl\n\nskip = true\n```\n\n----------------------------------------\n\nTITLE: Configuring a New Jekyll Collection in _config.yml (YAML)\nDESCRIPTION: Shows how to define a new Jekyll collection within the main Jekyll configuration file (`_config.yml`). This example defines `my-collection`, enables its output (`output: true`), specifies sorting by the `order` front matter field (`sort_by: order`), and sets the URL structure (`permalink`) for items in the collection.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncollections:\n  my-collection:   # --> Change to your collection's name\n    output: true\n    sort_by: order\n    permalink: /:collection/:categories/:title/  # --> You can adjust this to your needs. You can remove \":categories\" if your collection doesn't use it.\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Graph Visualization with Terragrunt and GraphViz\nDESCRIPTION: Demonstrates using the `terragrunt graph-dependencies` command to output the dependency graph of the Terragrunt units in DOT format. The output is then piped (|) to the `dot` command (part of the GraphViz toolkit) with the `-Tsvg` option to render the graph as an SVG image file named `graph.svg`. This provides a visual representation of the dependencies defined in the `dependencies` blocks. Requires GraphViz to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/02-stacks.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt graph-dependencies | dot -Tsvg > graph.svg\n```\n\n----------------------------------------\n\nTITLE: DAG Ordering Example Output (CLI, Bash)\nDESCRIPTION: Shows a possible output for `terragrunt find --dag`, demonstrating order relative to dependencies. Items without dependencies are listed first, followed by those depending on them. Used as an example output to help users interpret results of dependency sorting.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --dag\nunitA           # no dependencies\nunitB           # no dependencies\nunitC           # depends on unitA\nunitD           # depends on unitC\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Terragrunt Release Version using JavaScript Fetch API\nDESCRIPTION: This JavaScript snippet uses the Fetch API to query the GitHub API for the latest release of the gruntwork-io/terragrunt repository. It parses the JSON response to extract the tag name, which represents the latest version number, defaulting to 'v0.72.5' if the fetch fails or the tag name is unavailable. This version is likely used elsewhere in the documentation, potentially for dynamic command generation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const response = await fetch('https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest');\nexport const data = await response.json();\nexport const version = data.tag_name || 'v0.72.5';\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Stack in Terragrunt Stack HCL\nDESCRIPTION: This HCL snippet demonstrates defining a nested stack named \"services\" using the `stack` block within a `terragrunt.stack.hcl` file. It specifies the source of the nested stack's configuration, its generation path (`services`), and passes custom values (`project`, `cidr`) using the `values` attribute. This block requires the `--experiment stacks` flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_66\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.stack.hcl\nstack \"services\" {\n    source = \"github.com/gruntwork-io/terragrunt-stacks//stacks/mock/services?ref=v0.0.1\"\n    path   = \"services\"\n    values = {\n        project = \"dev-services\"\n        cidr    = \"10.0.0.0/16\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Module (Old Pattern) using Includes in Terragrunt (HCL)\nDESCRIPTION: Demonstrates an older method for configuring a Terragrunt module (MySQL) by including a root configuration and a shared environment configuration (`_envcommon/mysql.hcl`). It sources the Terraform module using a base URL from the included common file and overrides specific inputs like `instance_class` and `allocated_storage`. This pattern aimed for DRY but is no longer recommended.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n## non-prod/us-east-1/mysql/terragrunt.hcl\n\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n\ninclude \"envcommon\" {\n  path = \"${dirname(find_in_parent_folders(\"root.hcl\"))}/_envcommon/mysql.hcl\"\n  expose = true\n}\n\nterraform {\n  source = \"${include.envcommon.locals.base_source_url}?ref=v0.8.0\"\n}\n\ninputs = {\n  instance_class    = \"db.t2.medium\"\n  allocated_storage = 100\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Provider Registries via Environment Variable\nDESCRIPTION: This command demonstrates configuring the list of cached provider registries using the `TG_PROVIDER_CACHE_REGISTRY_NAMES` environment variable. Multiple hostnames are provided as a comma-separated list. The cache must also be enabled (`TG_PROVIDER_CACHE=1`).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/12-provider-cache-server.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 \\\nTG_PROVIDER_CACHE_REGISTRY_NAMES=example1.com,example2.com \\\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Marking Files as Read for Terragrunt Inclusion Queue using HCL\nDESCRIPTION: This snippet illustrates the use of the `mark_as_read` function within a `locals` block in a `terragrunt.hcl` file. It shows how to mark both a single file and multiple files (retrieved using `fileset` and processed with `abspath`) as read. This allows Terragrunt to track these files as dependencies when the `--queue-include-units-reading` flag is used, even if they are read by external tools or non-native functions. Note that absolute paths are required and the function must be used within `locals` for proper queueing during `run-all`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_32\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  filename   = mark_as_read(\"/path/to/my/file-read-by-tofu.txt\")\n  many_files = [for f in fileset(\"./config\", \"*.yaml\") : file(mark_as_read(abspath(\"${get_terragrunt_dir()}/config/${f}\")))]\n}\n\ninputs = {\n  filename   = local.filename\n  many_files = local.many_files\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Asciidoctor with APT Package Manager - Bash\nDESCRIPTION: This Bash snippet shows how to install the Asciidoctor toolset required for converting AsciiDoc files, using Ubuntu's apt package manager. The command requires root privileges. It is a prerequisite to running AsciiDoc to Markdown conversions on Linux distributions with APT. No additional parameters; outputs install logs. Limitation: Only functional on Debian/Ubuntu systems with apt-get.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install asciidoctor\n```\n\n----------------------------------------\n\nTITLE: Configuring TFLint with Plugins in .tflint.hcl for Terragrunt Hook\nDESCRIPTION: An example `.tflint.hcl` configuration file required when using the `tflint` hook in Terragrunt. It defines a `plugin` block for the AWS ruleset, specifying its version and source, and includes a `config` block, for instance, to enable module inspection (`module = true`), following TFLint's documentation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n# .tflint.hcl\n\nplugin \"aws\" {\n    enabled = true\n    version = \"0.21.0\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-aws\"\n}\n\nconfig {\n  module = true\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Terragrunt Telemetry Traces to Console with Bash\nDESCRIPTION: Sets the \"TG_TELEMETRY_TRACE_EXPORTER\" environment variable to \"console\" to enable trace output during Terragrunt execution. This snippet is used in a Unix-like shell before running Terragrunt, allowing all subsequently generated traces to be output to the standard console. Requires Terragrunt supporting telemetry options and assumes the environment is prepared to interpret env variables.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_TRACE_EXPORTER=console\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Local File Resource with OpenTofu/Terraform (HCL)\nDESCRIPTION: Defines an OpenTofu/Terraform resource that creates a local text file with static content. No dependencies are required except for OpenTofu/Terraform and the local provider. The 'content' and 'filename' parameters control the file content and location respectively. The expected output is creation of 'hi.txt' with 'Hello, World!'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# foo/main.tf\\nresource \\\"local_file\\\" \\\"file\\\" {\\n  content  = \\\"Hello, World!\\\"\\n  filename = \\\"${path.module}/hi.txt\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating State Across the Configuration Hierarchy with Terragrunt (Bash)\nDESCRIPTION: Runs 'terragrunt run-all init' with the '-migrate-state' option, initializing all modules beneath the current working directory and migrating any backed-up state files as needed. Requires Terragrunt to be installed, and expects AWS credentials and remote state backends to be correctly configured. Outputs initialization logs and error messages if state migration fails.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all init -migrate-state\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js/Bun Project Dependencies (Bash)\nDESCRIPTION: Installs all JavaScript (Node) project dependencies declared for the Starlight Terragrunt site using Bun's package installer command ('bun i'). Requires Bun to be installed on the system. Upon completion, dependencies are available for development or running the dev server. Recommended after all system-level dependencies are installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun i\n\n```\n\n----------------------------------------\n\nTITLE: Consuming Passed Values within a Nested Stack's Unit\nDESCRIPTION: This snippet shows an example `terragrunt.stack.hcl` file from a *sourced* stack (e.g., `github.com/gruntwork-io/terragrunt-stacks//stacks/mock/services/terragrunt.stack.hcl`). It defines a `unit` named \"vpc\" which accesses a value (`values.cidr`) passed down from the parent `stack` block's `values` attribute.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_67\n\nLANGUAGE: hcl\nCODE:\n```\n# github.com/gruntwork-io/terragrunt-stacks//stacks/mock/services/terragrunt.stack.hcl\n# ...\nunit \"vpc\" {\n  # ...\n  values = {\n    cidr = values.cidr\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Provider Configuration via Bash (Terragrunt Cache, Bash)\nDESCRIPTION: This Bash command searches the Terragrunt cache directory for generated 'provider.tf' files and outputs their contents. It aids in confirming that the correct provider configuration (e.g., AWS region) has been injected by Terragrunt. Executing this requires prior use of Terragrunt that generates the cache. The command prints out the provider.tf content for review.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ find .terragrunt-cache -name provider.tf -exec cat {} \\;\\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\\nprovider \\\"aws\\\" {\\n  region = \\\"us-east-1\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Module Version and Inputs during Terragrunt Deployments in HCL\nDESCRIPTION: This snippet demonstrates how to update a Terragrunt configuration to change the version of an infrastructure module and adjust configuration inputs. By modifying the 'source' ref and updating 'inputs', teams can roll forward or back module versions easily for atomic deployments. Dependencies are the same as the previous pattern; additional consideration should be given to environment impact and versioning conventions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_35\n\nLANGUAGE: hcl\nCODE:\n```\n# infrastructure-live/qa/app/terragrunt.hcl\\ninclude \\\"root\\\" {\\n  path = find_in_parent_folders(\\\"root.hcl\\\")\\n}\\n\\nterraform {\\n  source = \\\"github.com:foo/infrastructure-modules.git//app?ref=v0.0.2\\\" # <--\\n}\\n\\ninputs = {\\n  instance_count = 1\\n  instance_type  = \\\"t3.micro\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTofu Engine in Terragrunt - HCL\nDESCRIPTION: Defines an engine block in a terragrunt.hcl file, specifying the source as the official OpenTofu engine and providing a version parameter. This snippet is required to enable the IaC engine feature, which is experimental and requires the TG_EXPERIMENTAL_ENGINE environment variable. It expects the OpenTofu engine to be available either locally or downloaded. The key parameters are source (engine repository/location) and version (engine version to fetch from GitHub releases). Output is operation of Terragrunt via the specified engine; improper usage may disrupt Terragrunt runs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/13-engine.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nengine {\n    source  = \"github.com/gruntwork-io/terragrunt-engine-opentofu\"\n    version = \"${version}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Metrics Collection Services with Docker Compose in YAML\nDESCRIPTION: This YAML snippet configures Docker Compose to spin up an OpenTelemetry collector and Prometheus instance, linking them through volumes and ports. The setup ensures correct service dependencies and port exposures for OTLP receivers and Prometheus metrics. Prerequisites are Docker and docker-compose; input files referenced include otel-collector-config.yaml and prometheus.yml, which must exist in the working directory.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  otel-collector:\n    image: otel/opentelemetry-collector:0.94.0\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otelcol/config.yaml\n    ports:\n      - \"4317:4317\" # OTLP gRPC receiver\n      - \"4318:4318\" # OTLP HTTP receiver\n      - \"8889:8889\" # Prometheus exporter\n  prometheus:\n    image: prom/prometheus:v2.45.3\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n      - \"9090:9090\"\n    depends_on:\n      - otel-collector\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode Flag for All Commands - Terragrunt CLI - Bash\nDESCRIPTION: This snippet shows how to run any Terragrunt command with strict mode enabled via the global '--strict-mode' flag. With this flag, all strict mode controls are enforced for every command, making all deprecated features trigger errors. Useful in automated scripts and CI/CD for global enforcement. Key parameter: '--strict-mode'. Input: CLI command; Output: Error upon deprecated usage.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all\n15:26:08.585 WARN   The `plan-all` command is deprecated and will be removed in a future version. Use `terragrunt run-all plan` instead.\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --strict-mode plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Finding Configurations in Hidden Directories - Terragrunt CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the Terragrunt CLI tool to find configurations within hidden directories by adding the '--hidden' flag to the 'find' command. Terragrunt must be installed and available in your system's PATH. The '--hidden' flag enables searching in directories that are typically ignored (those beginning with a dot). The command takes no additional arguments and outputs the found configuration paths.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-hidden.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --hidden\n```\n\n----------------------------------------\n\nTITLE: Overriding Feature Flags with CLI in Terragrunt Bash Command\nDESCRIPTION: This Bash snippet demonstrates how to override a Terragrunt feature flag at runtime when invoking the CLI. The required dependency is Terragrunt installed in the environment. The main parameter is the '--feature' flag followed by the name and value. Inputs are CLI arguments; no output is produced by the snippet itself.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt apply --feature s3_version=v1.1.0\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Deployment Unit in Terragrunt Stack HCL\nDESCRIPTION: This example demonstrates defining a deployment `unit` named \"vpc\" within a `terragrunt.stack.hcl` file. It specifies the source location for the unit's configuration, the relative deployment path (`vpc`), and passes input values (`vpc_name`, `cidr`) using the `values` attribute. This block requires the `--experiment stacks` flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_62\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.stack.hcl\n\nunit \"vpc\" {\n  source = \"git::git@github.com:acme/infrastructure-units.git//networking/vpc?ref=v0.0.1\"\n  path   = \"vpc\"\n  values = {\n    vpc_name = \"main\"\n    cidr     = \"10.0.0.0/16\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Output Format with Placeholders in Shell\nDESCRIPTION: Demonstrates how to use the --log-custom-format flag with multiple placeholders to customize log output fields. This CLI snippet specifies that logs should display time, log level, and message in each log entry. No additional dependencies are required, just Terragrunt's CLI. The placeholders are replaced at runtime with their respective values.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time %level %msg\"\n```\n\n----------------------------------------\n\nTITLE: Preset Pretty Log Format Configuration in Shell\nDESCRIPTION: This snippet recreates the 'pretty' preset log format using the --log-custom-format flag. It colors different placeholders, adds path and tool information with coloring, and applies formatting options to enhance legibility. Useful for users who want to start with a known configuration and tweak as needed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time(color=light-black) %level(case=upper,width=6,color=preset) %prefix(path=short-relative,color=gradient,suffix=' ')%tf-path(color=cyan,suffix=': ')%msg(path=relative)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt for Stage Environment (HCL)\nDESCRIPTION: Example `terragrunt.hcl` file for the 'app' module in the 'stage' environment. It specifies the remote Git source and version (`v0.0.3`) of the Terraform module to use, and provides environment-specific input values (`instance_count`, `instance_type`) via the `inputs` block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# terragrunt.hcl\nterraform {\n  # Deploy version v0.0.3 in stage\n  source = \"git::git@github.com:foo/modules.git//app?ref=v0.0.3\"\n}\n\ninputs = {\n  instance_count = 3\n  instance_type  = \"t4g.micro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Preset Key-Value Log Format Configuration in Shell\nDESCRIPTION: Reproduces Terragrunt's 'key-value' preset format. Log entries are output as a series of key=value pairs, with values drawn from placeholders and optionally formatted for shorter paths or color deactivation. Each entry exposes time, level, prefix, tf-path, and message.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"time=%time(format=rfc3339) level=%level prefix=%prefix(path=short-relative) tf-path=%tf-path(path=filename) msg=%msg(path=relative,color=disable)\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Prometheus to Scrape OpenTelemetry Collector in YAML\nDESCRIPTION: The snippet presents a Prometheus configuration optimized for frequently scraping the OpenTelemetry collector. It defines a global scrape interval and configures a job pointing to the collector's Prometheus exporter on port 8889. This setup requires prometheus.yml and correct service linkage through Docker networking.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'opentelemetry'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['otel-collector:8889']\n\n```\n\n----------------------------------------\n\nTITLE: Setting GOFLAGS Environment Variable for Editor (Bash)\nDESCRIPTION: This command exports the `GOFLAGS` environment variable with specified build tags (e.g., 'aws') for the current shell session before launching an editor (neovim). This ensures the editor's Go tooling is aware of the build tags needed for certain tests, improving the development experience.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport GOFLAGS='-tags=aws'\nneovim .\n```\n\n----------------------------------------\n\nTITLE: Displaying Configurations in Tree Format - Bash\nDESCRIPTION: Presents the result of 'terragrunt list -T', showing the configurations as a visual tree based on file path hierarchy. This format is useful for understanding the general organization and nesting of Terragrunt components, independent of dependency relationships. Assumes standard directory layout for Terragrunt modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-dag.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list -T\n.\n╰── live\n    ├── dev\n    │   ├── db\n    │   ├── ec2\n    │   ╰── vpc\n    ╰── prod\n        ├── db\n        ├── ec2\n        ╰── vpc\n```\n\n----------------------------------------\n\nTITLE: Outputting Find Results as JSON (CLI, Bash)\nDESCRIPTION: Illustrates JSON output using either the `--format=json` or `--json` flag, supporting integration with other tools. Returns metadata for each discovered configuration, including type and path. Output is a machine-readable JSON sequence. Requires the `terragrunt` binary and at least one configuration present.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --format=json\n```\n\n----------------------------------------\n\nTITLE: Configuring Catalog Source for Terragrunt CAS in HCL\nDESCRIPTION: This HCL snippet defines a Terragrunt 'catalog' block with a 'urls' parameter listing a Git repository. It is used to configure Terragrunt to clone catalog modules from the specified Git source, leveraging the Content Addressable Store (CAS) feature when the relevant experiment is enabled. The 'urls' attribute should be a list of repository URLs compatible with the CAS; currently, only Git repositories are supported. No additional dependencies are required beyond Terragrunt with the CAS experiment enabled. Input is a list of Git URLs; output is deduplicated content in the local CAS cache.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/14-cas.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# root.hcl\n\ncatalog {\n  urls = [\n    \"git@github.com:acme/modules.git\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including External Dependencies in JSON Output (CLI, Bash)\nDESCRIPTION: Combines `--dependencies`, `--external`, and JSON formatting to show configurations outside the current working directory as top-level items in the output. External dependencies appear as peer units for visibility, especially when auditing full dependency graphs. Output is a structured JSON list with both internal and external units plus dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/find.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --dependencies --external --format 'json'\n```\n\n----------------------------------------\n\nTITLE: Instantiating a MySQL Unit within a Terragrunt Stack (HCL)\nDESCRIPTION: Demonstrates how to instantiate the reusable MySQL unit within a `terragrunt.stack.hcl` file for a specific environment (non-prod/us-east-1). It references the unit's source configuration, defines the deployment path, disables automatic directory generation (`no_dot_terragrunt_stack = true`), and provides specific configuration `values` (like version, name, instance class) for this instance of the unit.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n## non-prod/us-east-1/terragrunt.stack.hcl\n\nunit \"mysql\" {\n  source = \"git::git@github.com:acme/infrastructure-catalog.git//units/mysql\"\n  path   = \"mysql\"\n\n  ## As discussed above, this prevents Terragrunt from automatically generating the units into a `.terragrunt-stack` directory.\n  no_dot_terragrunt_stack = true\n\n  values = {\n    version = \"v0.8.0\"\n    name = \"mysql_dev\"\n    instance_class = \"db.t2.micro\"\n    allocated_storage = 20\n    storage_type = \"standard\"\n    master_username = \"admin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supplying default values to read_terragrunt_config in HCL\nDESCRIPTION: Illustrates passing a default value as the second argument to read_terragrunt_config so it returns a fallback if the file does not exist. Useful for robust, error-tolerant configuration imports. Inputs: file path (may not exist) and default value. Output: fallback value or parsed configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_25\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  common_vars = read_terragrunt_config(find_in_parent_folders(\"i-dont-exist.hcl\", \"i-dont-exist.hcl\"), {inputs = {}})\n}\n\ninputs = merge(\n  local.common_vars.inputs, # This will be {}\n  {\n    # additional inputs\n  }\n)\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Terragrunt Inputs as Environment Variables in Bash Hook\nDESCRIPTION: A Bash script snippet demonstrating how to access Terragrunt `inputs` (defined in `terragrunt.hcl`) within a hook script. It retrieves the `bucket_name` input via the standard `TF_VAR_bucket_name` environment variable and uses it with the AWS CLI. Requires AWS CLI and appropriate credentials.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Get the bucket_name input from the terragrunt.hcl file\nBUCKET_NAME=\"$TF_VAR_bucket_name\"\n\n# Use the AWS CLI to list the contents of the bucket\naws s3 ls \"s3://$BUCKET_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Applying All Configuration Units in a Directory with Terragrunt (Bash)\nDESCRIPTION: Changes the current working directory to 'us-west-2' and applies all Terraform/Terragrunt units below that point using 'terragrunt run-all apply'. Requires proper AWS credentials, region-specific configuration files, and any necessary modules. Outputs apply logs and any encountered errors.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncd us-west-2\\nterragrunt run-all apply\n```\n\n----------------------------------------\n\nTITLE: Setting Terragrunt Feature Flag via Environment Variable in Bash\nDESCRIPTION: This snippet demonstrates how to set a Terragrunt feature flag using a shell environment variable before running Terragrunt. Dependencies include a POSIX-compliant shell and Terragrunt. 'TERRAGRUNT_FEATURE' expects a key=value string for the flag to set. The snippet sets the variable and invokes Terragrunt. No output is produced by the snippet itself.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_FEATURE=\"s3_version=v1.1.0\"\nterragrunt apply\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Controls by Category - Terragrunt CLI - Bash\nDESCRIPTION: This snippet shows use of the '--strict-control' flag with a control category ('deprecated-commands'), causing broad enforcement against a set of deprecated commands. Inputs are the CLI flag and a deprecated command; output is an error message. Useful for wholesale enforcement of best practices during upgrades or audits.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all --strict-control deprecated-commands\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Environment Variables for Jaeger HTTP Export\nDESCRIPTION: These environment variable export commands configure Terragrunt to send traces to a Jaeger instance via OTLP HTTP. `TG_TELEMETRY_TRACE_EXPORTER=http` sets the exporter type to HTTP (using otlptracehttp). `TG_TELEMETRY_TRACE_EXPORTER_HTTP_ENDPOINT=localhost:4318` specifies the Jaeger OTLP HTTP endpoint running locally on port 4318. `TG_TELEMETRY_TRACE_EXPORTER_INSECURE_ENDPOINT=true` disables TLS certificate validation, suitable for local Jaeger instances without HTTPS configured.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_TRACE_EXPORTER=http\nexport TG_TELEMETRY_TRACE_EXPORTER_HTTP_ENDPOINT=localhost:4318\nexport TG_TELEMETRY_TRACE_EXPORTER_INSECURE_ENDPOINT=true\n```\n\n----------------------------------------\n\nTITLE: Planning Destroy Operations Before Cleanup - Shell/Bash\nDESCRIPTION: Shows how to run a destroy plan across all modules before executing an actual destroy, providing an expected changes preview and ensuring safety. Requires Terragrunt. Command outputs a plan log indicating which resources will be destroyed if applied.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# From the root directory\n$ terragrunt run-all plan -destroy\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a MySQL Module with Terragrunt (Bash)\nDESCRIPTION: Provides an example of using `terragrunt scaffold` to generate configuration files for a standard MySQL database module hosted on GitHub. This specific command targets the `mysql` module within the `terragrunt-infrastructure-modules-example` repository, demonstrating how to create a new configuration unit based on an existing module.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/scaffold.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/gruntwork-io/terragrunt-infrastructure-modules-example//modules/mysql\n```\n\n----------------------------------------\n\nTITLE: Parsing dependency block outputs via read_terragrunt_config in HCL\nDESCRIPTION: Shows how read_terragrunt_config enables referencing dependency output attributes from another Terragrunt config. Useful for composing configurations with shared modules. Requires the referenced dependency and configuration file to exist. Output: assignment of dependency output values for use as inputs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_26\n\nLANGUAGE: hcl\nCODE:\n```\ndependency \"vpc\" {\n  config_path = \"${get_terragrunt_dir()}/../vpc\"\n}\n\n```\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  common_deps = read_terragrunt_config(find_in_parent_folders(\"common_deps.hcl\"))\n}\n\ninputs = {\n  vpc_id = local.common_deps.dependency.vpc.outputs.vpc_id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Terragrunt Project Structure with Lock Files (Text)\nDESCRIPTION: Shows the recommended project structure after running Terragrunt, where the `.terraform.lock.hcl` file is present alongside the `terragrunt.hcl` file in the working directory for each module. This emphasizes the best practice of committing the generated lock file to version control.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/08-lock-file-handling.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```tree\n└── live\n    ├── prod\n    │   └── vpc\n    │       ├── .terraform.lock.hcl\n    │       └── terragrunt.hcl\n    └── stage\n        └── vpc\n            ├── .terraform.lock.hcl\n            └── terragrunt.hcl\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Strict Mode via Flag (Error)\nDESCRIPTION: Shows how to enable Strict Mode globally using the `--strict-mode` command-line flag. When executing the deprecated `plan-all` command with this flag, Terragrunt now throws an error and halts execution, indicating the command is no longer supported.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --strict-mode plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Viewing Terragrunt Cache Directory Structure using Bash\nDESCRIPTION: This Bash snippet uses the `tree` command to display the directory structure within the `.terragrunt-cache` directory, limited to a depth of 3 levels. It illustrates where Terragrunt downloads external OpenTofu/Terraform modules and stores generated files like `backend.tf` and `provider.tf` before orchestrating Terraform commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ tree .terragrunt-cache/ -L 3\n.terragrunt-cache/\n└── tnIp4Am20T3Q8-6FuPqfof-kRGU\n    └── ThyYwttwki6d6AS3aD5OwoyqIWA\n        ├── CHANGELOG.md\n        ├── LICENSE\n        ├── README.md\n        ├── UPGRADE-3.0.md\n        ├── UPGRADE-4.0.md\n        ├── backend.tf\n        ├── examples\n        ├── main.tf\n        ├── modules\n        ├── outputs.tf\n        ├── provider.tf\n        ├── terragrunt.hcl\n        ├── variables.tf\n        ├── versions.tf\n        └── vpc-flow-logs.tf\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cluster Output Configuration - HCL\nDESCRIPTION: This HCL snippet shows a misconfiguration in a Terraform/OpenTofu module output where the output `cluster_min_size` is mistakenly mapped to the module's `cluster_max_size` value. This can result in dependent modules (like the application) receiving the wrong cluster size configuration. Dependencies: the custom module defining `cluster_max_size`; fix requires correcting the output's value.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/01-debugging.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# ecs-cluster/outputs.tf\noutput \"cluster_min_size\" {\n  value = module.my_cluster_module.cluster_max_size\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Strict Controls via Flags (plan-all Error)\nDESCRIPTION: Demonstrates enabling multiple specific strict controls (`plan-all` and `apply-all`) simultaneously using multiple `--strict-control` flags. When `terragrunt plan-all` is executed, the active `plan-all` control causes an error.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all --strict-control plan-all --strict-control apply-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n15:26:46.521 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n```\n\n----------------------------------------\n\nTITLE: Fixing TFLint Plugin Error with Version Constraint in .tflint.hcl\nDESCRIPTION: Provides the corrected `.tflint.hcl` configuration required to resolve the `-act-as-bundled-plugin` error shown previously. It explicitly defines the `version` and `source` attributes for the `terraform` ruleset plugin, satisfying TFLint's requirements.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\n# .tflint.hcl\n\nplugin \"terraform\" {\n    enabled = true\n    version = \"0.2.1\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Region Locally in Region Directory - HCL\nDESCRIPTION: This snippet shows an HCL file ('us-east-1/region.hcl') for declaring the target AWS region as a local variable. It is used by Terragrunt configurations in the region directory to dynamically set provider parameters. Requires inclusion in module configuration using the read_terragrunt_config function.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_25\n\nLANGUAGE: hcl\nCODE:\n```\n# us-east-1/region.hcl\nlocals {\n  region = \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Catalog with Custom Root File Name (Terragrunt, Bash)\nDESCRIPTION: This command runs the Terragrunt 'catalog' feature, specifying '--root-file-name root.hcl' to instruct newly generated units to look for 'root.hcl' in parent directories as their root configuration file. This updates unit generation behavior to match the new pattern after renaming the root configuration file. Requires Terragrunt CLI version supporting '--root-file-name', and the specified root.hcl must exist at the correct hierarchy level.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/01-migrating-from-root-terragrunt-hcl.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog --root-file-name root.hcl\\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Metrics from Terragrunt to Console with Bash Environment Variable\nDESCRIPTION: This minimal Bash snippet sets an environment variable to make Terragrunt export metrics directly to the console. Only TG_TELEMETRY_METRIC_EXPORTER needs to be set to 'console'; Terragrunt is then run and prints metrics data directly to standard output. This is mainly used for debugging and validation, and does not require a collector.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_METRIC_EXPORTER=console\n\n```\n\n----------------------------------------\n\nTITLE: Configuring the Terragrunt Partial Parse Cache Flag (YAML)\nDESCRIPTION: Defines the metadata for the `use-partial-parse-config-cache` flag in Terragrunt. It specifies the flag's name, a description of its function (enabling include caching during partial parsing and use with `--iam-role`), its data type (`bool`), and the corresponding environment variable (`TG_USE_PARTIAL_PARSE_CONFIG_CACHE`). This metadata likely informs documentation generation or internal configuration handling within Terragrunt or its tooling.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/use-partial-parse-config-cache.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: use-partial-parse-config-cache\ndescription: Enables caching of includes during partial parsing operations. Will also be used for the --iam-role option if provided.\ntype: bool\nenv:\n  - TG_USE_PARTIAL_PARSE_CONFIG_CACHE\n---\n```\n\n----------------------------------------\n\nTITLE: Using --root-file-name with Terragrunt Scaffold (Bash)\nDESCRIPTION: This Bash command demonstrates using the '--root-file-name' flag with 'terragrunt scaffold' to specify 'root.hcl' as the root configuration file name when scaffolding a module from a GitHub repository. This setting overrides the default behavior or environment variable if set.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/scaffold-root-file-name.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt scaffold github.com/org/repo//modules/mysql --root-file-name root.hcl\n```\n\n----------------------------------------\n\nTITLE: Moving Terragrunt Binary to System PATH (Manual Install)\nDESCRIPTION: This shell command moves the Terragrunt binary (assumed to be in the current directory) to `/usr/local/bin`, a standard directory included in the system's PATH environment variable on Linux and macOS. This makes the `terragrunt` command accessible from any location in the terminal.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmv terragrunt /usr/local/bin/terragrunt\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt `strict-control` Metadata (YAML)\nDESCRIPTION: YAML frontmatter defining metadata for the `strict-control` configuration option. Specifies its name, description, type (string), and the corresponding environment variable `TG_STRICT_CONTROL`. This metadata is likely used for documentation generation or configuration processing within the Terragrunt project documentation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/strict-control.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: strict-control\ndescription: Enables specific strict controls.\ntype: string\nenv:\n  - TG_STRICT_CONTROL\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Caution Advisory using Astro Aside Component\nDESCRIPTION: Uses the Astro Starlight `<Aside>` component to render a caution message within the documentation. This highlights the experimental nature of the `use-partial-parse-config-cache` feature, warning users about potential unexpected behavior due to HCL's dynamic nature and advising thorough testing before production use. It leverages the `type=\"caution\"` prop for appropriate styling and depends on the `@astrojs/starlight/components` import.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/use-partial-parse-config-cache.mdx#_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Aside type=\"caution\">\nThis is an experimental feature. While it can significantly improve performance with frequently included configurations, the caching behavior may lead to unexpected results in some edge cases due to HCL's dynamic nature.\n\nTest thoroughly in your environment before using in production environments.\n</Aside>\n```\n\n----------------------------------------\n\nTITLE: Listing Terragrunt Configurations in Tree Format using Bash\nDESCRIPTION: Shows the output of `terragrunt list -T`, which displays the configurations in a hierarchical directory tree structure. This format helps visualize the organization of the infrastructure code. Requires Terragrunt and a configured project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-format.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Tree format - Optimal for visualizing structure\n$ terragrunt list -T\n.\n╰── live\n    ├── dev\n    │   ├── db\n    │   ├── ec2\n    │   ╰── vpc\n    ╰── prod\n        ├── db\n        ├── ec2\n        ╰── vpc\n```\n\n----------------------------------------\n\nTITLE: Importing Astro 'Aside' Component (JavaScript)\nDESCRIPTION: This JavaScript import statement brings the 'Aside' component into the current scope from the '@astrojs/starlight/components' library. This component is likely used within an Astro page to render visually distinct blocks of content, such as warnings or notes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-migrate-force.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Inspecting Generated backend.tf File using Bash\nDESCRIPTION: This Bash snippet uses `find` and `cat` to locate and display the contents of the `backend.tf` file generated by Terragrunt within the cache directory (likely for the EC2 module in this context). The output confirms that the generated file contains the static backend configuration defined in `root.hcl`, including the problematic static `key = \"tofu.tfstate\"`, which causes the key collision when used by multiple modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ find .terragrunt-cache -name backend.tf -exec cat {} \\;\n# Generated by Terragrunt. Sig: nIlQXj57tbuaRZEa\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-tofu-state\"\n    dynamodb_table = \"my-lock-table\"\n    encrypt        = true\n    key            = \"tofu.tfstate\"\n    region         = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Explicit 'run' Command for Terraform/OpenTofu Commands\nDESCRIPTION: Demonstrates the new explicit 'run' command introduced to invoke underlying Terraform/OpenTofu commands like 'plan'. While shortcuts like 'terragrunt plan' often still work, 'terragrunt run plan' explicitly designates 'plan' as a command for the orchestrated tool.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run plan\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Catalog Command (Terragrunt, Bash)\nDESCRIPTION: This Bash command runs the Terragrunt 'catalog' command with default options. It is used to generate or manage configuration templates for Terragrunt units. The command assumes default file name patterns, which may not align with the new recommended root config pattern unless additional flags are specified. Requires Terragrunt CLI installed and available in the system path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/01-migrating-from-root-terragrunt-hcl.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Strict Controls via Flags (apply-all Error)\nDESCRIPTION: Shows enabling multiple specific strict controls (`plan-all` and `apply-all`) using multiple `--strict-control` flags. When `terragrunt apply-all` is executed, the active `apply-all` control causes an error.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt apply-all --strict-control plan-all --strict-control apply-all\n15:26:46.564 ERROR  The `apply-all` command is no longer supported. Use `terragrunt run-all apply` instead.\n15:26:46.564 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n```\n\n----------------------------------------\n\nTITLE: Customizing Prefixes in Log Output Format in Shell\nDESCRIPTION: Demonstrates including custom text prefixes for each placeholder in the log output. Each log line is prefixed with a descriptor label for time, level, and message, increasing readability and supporting integration with tools expecting such formats.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"time=%time level=%level message=%msg\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Terragrunt Backend State Non-Interactively (Shell)\nDESCRIPTION: This command deletes the backend state file for the current Terragrunt unit without prompting for user confirmation. The `--non-interactive` flag bypasses the confirmation step, making it suitable for automated scripts. Dependencies include Terragrunt and a configured remote state.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/delete.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt backend delete --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Option Usage in Log Placeholder in Shell\nDESCRIPTION: Shows how improper use of placeholder options leads to an error. Passing an unrecognized option in parentheses after a placeholder will cause Terragrunt to report an 'invalid option name' error, indicating strict requirement for valid parameter names.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time(plain-text)\"\n```\n\n----------------------------------------\n\nTITLE: Migrating from 'run-all' to 'run --all'\nDESCRIPTION: Demonstrates how to replace the deprecated 'terragrunt run-all' command. The functionality is now integrated into the 'run' command using the '--all' flag. This example shows migrating 'run-all plan' to 'run --all plan'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all plan\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run --all plan\n```\n\n----------------------------------------\n\nTITLE: Overriding Terragrunt Feature Flag via Environment Variable\nDESCRIPTION: This Bash snippet demonstrates setting the `TG_FEATURE` environment variable to override a feature flag ('s3_version' to 'v1.1.0') before running a Terragrunt command. Terragrunt reads this variable to apply the specified feature flag value.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/11-runtime-control.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_FEATURE=\"s3_version=v1.1.0\"\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Go Unit Test Function (Bash)\nDESCRIPTION: This command runs a specific test function identified by `TestFunctionName` within the specified Go package directory. The `-run` flag filters tests based on the provided regular expression.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run TestFunctionName ./path/to/package\n```\n\n----------------------------------------\n\nTITLE: Deleting Terragrunt Backend State (Shell)\nDESCRIPTION: This command initiates the deletion of the backend state file associated with the current Terragrunt configuration. It requires user confirmation by default before proceeding with the deletion. Dependencies include having Terragrunt installed and a properly configured remote state backend in `terragrunt.hcl`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/backend/delete.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt backend delete\n```\n\n----------------------------------------\n\nTITLE: Storing Terragrunt Stack Output as Raw String - Bash\nDESCRIPTION: This Bash snippet demonstrates how to capture Terragrunt stack outputs as a raw string into a shell variable by using the '--raw' flag (an alias for '--format raw'). The command outputs the value of a specified stack property (e.g., 'app.id') directly as a plain string, which is suitable for use in shell scripts or further automation. Dependencies include Terragrunt and a properly configured stack; the --raw flag requires index-based access to output values, so nested attribute access is not supported in this mode.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/stack-output-raw.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Store the output in a variable\nAPP_ID=$(terragrunt stack output --raw app.id)\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting TFLint Plugin Initialization Error Log\nDESCRIPTION: Shows an example error log message (`Failed to initialize plugins; Unrecognized remote plugin message: ... -act-as-bundled-plugin`) that can occur when running `tflint` via Terragrunt hooks. This error typically arises from an incomplete or improperly configured `.tflint.hcl` file, often missing version constraints for plugins.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/09-hooks.md#_snippet_15\n\nLANGUAGE: log\nCODE:\n```\nFailed to initialize plugins; Unrecognized remote plugin message: Incorrect Usage. flag provided but not defined: -act-as-bundled-plugin\n```\n\n----------------------------------------\n\nTITLE: Sorting Terragrunt Find Output for Plan in Bash\nDESCRIPTION: Demonstrates using `terragrunt find` with `--queue-construct-as=plan`. This sorts the output based on the dependency graph as required for a 'plan' operation, listing dependencies before the modules that depend on them.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-construct-as.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt find --queue-construct-as=plan\n```\n\n----------------------------------------\n\nTITLE: Filtering Terragrunt Logs for a Specific Unit using grep in Bash\nDESCRIPTION: Demonstrates post-processing the captured logs (`logs` file from the previous example) using `grep` to isolate the output from a specific module (`unit1`). This technique is useful for analyzing the logs of individual units when they are run concurrently, avoiding the confusion of interleaved output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/09-logging.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ grep '\\[unit1\\]' < logs\n16:01:51.272 STDOUT [unit1] tofu: null_resource.empty: Refreshing state... [id=3335573617542340690]\n16:01:51.279 STDOUT [unit1] tofu: OpenTofu used the selected providers to generate the following execution\n16:01:51.279 STDOUT [unit1] tofu: plan. Resource actions are indicated with the following symbols:\n16:01:51.279 STDOUT [unit1] tofu: -/+ destroy and then create replacement\n16:01:51.279 STDOUT [unit1] tofu: OpenTofu will perform the following actions:\n16:01:51.279 STDOUT [unit1] tofu:   # null_resource.empty must be replaced\n16:01:51.279 STDOUT [unit1] tofu: -/+ resource \"null_resource\" \"empty\" {\n16:01:51.279 STDOUT [unit1] tofu:       ~ id       = \"3335573617542340690\" -> (known after apply)\n16:01:51.279 STDOUT [unit1] tofu:       ~ triggers = { # forces replacement\n16:01:51.280 STDOUT [unit1] tofu:           ~ \"always_run\" = \"2025-01-09T21:01:17Z\" -> (known after apply)\n16:01:51.280 STDOUT [unit1] tofu:         }\n16:01:51.280 STDOUT [unit1] tofu:     }\n16:01:51.280 STDOUT [unit1] tofu: Plan: 1 to add, 0 to change, 1 to destroy.\n16:01:51.280 STDOUT [unit1] tofu:\n16:01:51.297 STDOUT [unit1] tofu: null_resource.empty: Destroying... [id=3335573617542340690]\n16:01:51.297 STDOUT [unit1] tofu: null_resource.empty: Destruction complete after 0s\n16:01:51.300 STDOUT [unit1] tofu: null_resource.empty: Creating...\n16:01:51.301 STDOUT [unit1] tofu: null_resource.empty: Provisioning with 'local-exec'...\n16:01:51.301 STDOUT [unit1] tofu: null_resource.empty (local-exec): Executing: [\"/bin/sh\" \"-c\" \"echo 'sleeping...'; sleep 1; echo 'done sleeping'\"]\n16:01:51.304 STDOUT [unit1] tofu: null_resource.empty (local-exec): sleeping...\n16:01:52.311 STDOUT [unit1] tofu: null_resource.empty (local-exec): done sleeping\n16:01:52.312 STDOUT [unit1] tofu: null_resource.empty: Creation complete after 1s [id=4749136145104485309]\n16:01:52.322 STDOUT [unit1] tofu:\n16:01:52.322 STDOUT [unit1] tofu: Apply complete! Resources: 1 added, 0 changed, 1 destroyed.\n16:01:52.322 STDOUT [unit1] tofu:\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt with Reduced Verbosity using --log-format bare - Bash\nDESCRIPTION: This Bash snippet shows how to use Terragrunt with the '--log-format bare' flag to reduce log output verbosity, aligning output closer to that of standard OpenTofu/Terraform commands. The output summarizes state refresh, change detection, and final result. Requires Terragrunt and an initialized project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --log-format bare apply\nlocal_file.file: Refreshing state... [id=0a0a9f2a6772942557ab5355d76af442f8f65e01]\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your configuration and\nfound no differences, so no changes are needed.\n\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Strict Controls via Environment Variable (Sequential Errors)\nDESCRIPTION: Illustrates enabling multiple specific strict controls (`plan-all`, `apply-all`) using a comma-delimited list in the `TG_STRICT_CONTROL` environment variable. The example executes `plan-all` and `apply-all` sequentially within a subshell; both commands fail with errors because their respective strict controls are active.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ TG_STRICT_CONTROL='plan-all,apply-all' bash -c 'terragrunt plan-all; terragrunt apply-all'\n15:26:46.521 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n15:26:46.521 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n15:26:46.564 ERROR  The `apply-all` command is no longer supported. Use `terragrunt run-all apply` instead.\n15:26:46.564 ERROR  Unable to determine underlying exit code, so Terragrunt will exit with error code 1\n```\n\n----------------------------------------\n\nTITLE: Example: Running Terragrunt Apply with Debug Flags (Shell)\nDESCRIPTION: This command is executed within the example scenario (`live/prod/app` directory) to trigger the Terragrunt apply process with debug logging enabled and to generate the `terragrunt-debug.tfvars.json` file for inspection.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt apply --terragrunt-log-level debug --terragrunt-debug\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'log-disable' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'log-disable'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"log-disable\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt using Emerge on Gentoo Linux\nDESCRIPTION: This command uses the Emerge package manager (`emerge`) specific to Gentoo Linux to install the binary distribution of Terragrunt (`app-admin/terragrunt-bin`). The `-a` flag asks for confirmation before proceeding with the installation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nemerge -a app-admin/terragrunt-bin\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Strict Control via Flag (Relevant Control - Error)\nDESCRIPTION: Shows enabling the specific strict control relevant to the command being run (`plan-all`) using the `--strict-control plan-all` flag. This causes Terragrunt to treat the usage of the deprecated `plan-all` command as an error.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all --strict-control plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Defining Region as a Local Variable in Terragrunt (HCL)\nDESCRIPTION: Declares a local variable for region ('production') in the region.hcl file. Used in conjunction with the include block of a child Terragrunt config to propagate environment-specific data. No external dependencies beyond Terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_28\n\nLANGUAGE: hcl\nCODE:\n```\n# region.hcl\nlocals {\n  region = \"production\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Zsh Configuration File Exists\nDESCRIPTION: This shell command uses `touch` to create the `.zshrc` file in the user's home directory if it doesn't already exist. This file is used to configure the Zsh shell, including setting up tab completion.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntouch ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Filtering Terragrunt Logs for a Specific Unit (unit2) using grep (Bash)\nDESCRIPTION: Similar to the previous example, this command post-processes the `logs` file generated by `terragrunt run --all`. It uses `grep` to filter and display only the log lines associated with the module identified by the `[unit2]` prefix.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/01-overview.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ grep '\\[unit2\\]' < logs\n16:01:51.273 STDOUT [unit2] tofu: null_resource.empty: Refreshing state... [id=7532622543468447677]\n16:01:51.280 STDOUT [unit2] tofu: OpenTofu used the selected providers to generate the following execution\n16:01:51.280 STDOUT [unit2] tofu: plan. Resource actions are indicated with the following symbols:\n16:01:51.280 STDOUT [unit2] tofu: -/+ destroy and then create replacement\n16:01:51.280 STDOUT [unit2] tofu: OpenTofu will perform the following actions:\n16:01:51.280 STDOUT [unit2] tofu:   # null_resource.empty must be replaced\n16:01:51.280 STDOUT [unit2] tofu: -/+ resource \"null_resource\" \"empty\" {\n16:01:51.280 STDOUT [unit2] tofu:       ~ id       = \"7532622543468447677\" -> (known after apply)\n16:01:51.280 STDOUT [unit2] tofu:       ~ triggers = { # forces replacement\n16:01:51.280 STDOUT [unit2] tofu:           ~ \"always_run\" = \"2025-01-09T21:01:17Z\" -> (known after apply)\n16:01:51.280 STDOUT [unit2] tofu:         }\n16:01:51.280 STDOUT [unit2] tofu:     }\n16:01:51.280 STDOUT [unit2] tofu: Plan: 1 to add, 0 to change, 1 to destroy.\n16:01:51.280 STDOUT [unit2] tofu: \n16:01:51.297 STDOUT [unit2] tofu: null_resource.empty: Destroying... [id=7532622543468447677]\n16:01:51.297 STDOUT [unit2] tofu: null_resource.empty: Destruction complete after 0s\n16:01:51.300 STDOUT [unit2] tofu: null_resource.empty: Creating...\n16:01:51.301 STDOUT [unit2] tofu: null_resource.empty: Provisioning with 'local-exec'...\n16:01:51.301 STDOUT [unit2] tofu: null_resource.empty (local-exec): Executing: [\"/bin/sh\" \"-c\" \"echo 'sleeping...'; sleep 1; echo 'done sleeping'\"]\n16:01:51.303 STDOUT [unit2] tofu: null_resource.empty (local-exec): sleeping...\n16:01:52.311 STDOUT [unit2] tofu: null_resource.empty (local-exec): done sleeping\n16:01:52.312 STDOUT [unit2] tofu: null_resource.empty: Creation complete after 1s [id=6569505210291935319]\n16:01:52.322 STDOUT [unit2] tofu: \n16:01:52.322 STDOUT [unit2] tofu: Apply complete! Resources: 1 added, 0 changed, 1 destroyed.\n16:01:52.322 STDOUT [unit2] tofu: \n\n```\n\n----------------------------------------\n\nTITLE: Executing Terragrunt Catalog Command with Custom Root File Name - Bash\nDESCRIPTION: This Bash code sample demonstrates running the Terragrunt CLI command with the --root-file-name flag to specify a non-default root configuration file (e.g., root.hcl) for catalog operations. This is used when the project's root configuration does not follow Terragrunt's default naming convention, ensuring the correct file is referenced during scaffolding and catalog search. The key parameter is --root-file-name, which overrides the default behavior, and the command outputs the results of the catalog operation according to the provided root file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/catalog-root-file-name.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog --root-file-name root.hcl\n```\n\n----------------------------------------\n\nTITLE: Explicit 'run' for Deprecated Terragrunt Commands (e.g., graph)\nDESCRIPTION: Shows how to execute underlying Terraform/OpenTofu commands that share a name with a deprecated Terragrunt command (like 'graph'). Using 'terragrunt run graph' explicitly invokes the Terraform/OpenTofu 'graph' command, avoiding the deprecated Terragrunt 'graph' command.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run graph\n```\n\n----------------------------------------\n\nTITLE: Setting Terragrunt Telemetry Environment Variables for OpenTelemetry Collector - Bash\nDESCRIPTION: Sets Bash environment variables to direct Terragrunt's telemetry exporter to use the OpenTelemetry collector in insecure (non-TLS) mode, pointing to a local gRPC endpoint. Required for Terragrunt to emit metrics compatible with the configured collector. Prerequisite: Terragrunt v0.55.0+ must support these environment vars. No outputs except setting environment for the session/process.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_METRIC_EXPORTER=grpcHttp\nexport TG_TELEMETRY_METRIC_EXPORTER_INSECURE_ENDPOINT=true\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n```\n\n----------------------------------------\n\nTITLE: Merged Deeply Parent and Child Terragrunt HCL Configurations - HCL\nDESCRIPTION: Demonstrates the final merged result from a parent and child terragrunt.hcl under deep merge. Illustrates which inputs and dependency outputs originate from child or parent, how lists and maps are combined, and how mock_outputs fields from both configs get merged. Useful for understanding effective configuration and troubleshooting actual Terragrunt variable resolution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_35\n\nLANGUAGE: hcl\nCODE:\n```\n# Merged terragrunt.hcl\n\n# Child override parent completely due to deep merge limitation\nremote_state {\n  backend = \"local\"\n}\n\n# mock_outputs are merged together with deep merge\ndependency \"vpc\" {\n  config_path = \"../vpc\"       # Child overrides parent\n  mock_outputs = {\n    attribute     = \"mock\"     # Child overrides parent\n    old_attribute = \"old val\"  # From parent\n    new_attribute = \"new val\"  # From child\n    list_attr     = [\n      \"hello\",                 # From parent\n      \"mock\",                  # From child\n    ]\n    map_attr = {\n      foo = \"bar\"              # From parent\n      bar = \"baz\"              # From child\n    }\n  }\n\n  # From parent\n  mock_outputs_allowed_terraform_commands = [\"apply\", \"plan\", \"destroy\", \"output\"]\n}\n\n# inputs are merged together with deep merge\ninputs = {\n  attribute     = \"mock\"       # Child overrides parent\n  old_attribute = \"old val\"    # From parent\n  new_attribute = \"new val\"    # From child\n  list_attr     = [\n    \"hello\",                 # From parent\n    \"mock\",                  # From child\n  ]\n  map_attr = {\n    foo = \"bar\"                                   # From parent\n    bar = \"baz\"                                   # From child\n    test = dependency.vpc.outputs.new_attribute   # From parent, referencing dependency mock output from child\n  }\n\n  dep_out = dependency.vpc.outputs                # From child\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Terragrunt Experiments via Environment Variable\nDESCRIPTION: Runs `terragrunt plan` after setting the `TG_EXPERIMENT` environment variable to a comma-separated list of experiments (`symlinks,stacks`). This activates the specified experimental features, providing a convenient way to enable multiple experiments in CI/CD pipelines.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/04-experiments.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTG_EXPERIMENT='symlinks,stacks' terragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Strict Control via Environment Variable (Relevant Control - Error)\nDESCRIPTION: Illustrates enabling a specific strict control (`plan-all`) using the `TG_STRICT_CONTROL` environment variable. Running the `plan-all` command with this environment variable set triggers an error due to the specific control being active.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ TG_STRICT_CONTROL='plan-all' terragrunt plan-all\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Including Explicit Root Configuration in Terragrunt HCL\nDESCRIPTION: Shows the recommended way to include a parent Terragrunt configuration file after renaming the root file (e.g., to `root.hcl`). It explicitly provides the new filename to the `find_in_parent_folders()` function.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# /some/path/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders(\"root.hcl\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling All Terragrunt Experiments via CLI Flag (Bash)\nDESCRIPTION: Demonstrates how to enable all available experimental features in Terragrunt for a single command execution using the `--experiment-mode` command-line flag. This approach is not generally recommended unless closely following development due to potential breaking changes. Requires the Terragrunt CLI to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/06-experiments.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --experiment-mode\n```\n\n----------------------------------------\n\nTITLE: Mixing Feature Flags to Control Run-All Environment Inclusion in Terragrunt\nDESCRIPTION: This Bash snippet shows how to enable or disable multiple environments for run-all execution in Terragrunt using multiple '--feature' flags. Inputs are several feature flag values; outputs are a selective run of units across dev, stage, and prod as configured. Dependencies: Terragrunt CLI. Limitation: requires matching configuration in HCL files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all --feature dev=false --feature stage=true --feature prod=true plan\n\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'help' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'help'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_12\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"help\" />\n```\n\n----------------------------------------\n\nTITLE: Replicating 'Key-Value' Log Format Preset (Shell)\nDESCRIPTION: Provides the `--log-custom-format` string equivalent to Terragrunt's `--log-format key-value` preset. It formats the log output as key-value pairs using literal text (`time=`, `level=`, etc.) combined with placeholders (`%time`, `%level`, `%prefix`, `%tf-path`, `%msg`) and specific options (time format, path format, color disabling).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"time=%time(format=rfc3339) level=%level prefix=%prefix(path=short-relative) tf-path=%tf-path(path=filename) msg=%msg(path=relative,color=disable)\"\n```\n\n----------------------------------------\n\nTITLE: Explicit 'run' for Commands Without Shortcuts (e.g., workspace)\nDESCRIPTION: Illustrates the necessity of using the explicit 'run' command for Terraform/OpenTofu commands that do not have a direct shortcut in the redesigned Terragrunt CLI, such as 'workspace ls'. This is often the case for commands not recommended for use with Terragrunt or those conflicting with Terragrunt's own commands.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run workspace ls\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt in Bare Log Format for Less Verbose Output (Bash)\nDESCRIPTION: Runs Terragrunt with the '--log-format bare' flag to minimize output verbosity during apply operations. Only summary and essential information are shown. This command is useful for users preferring Terraform-style output. Input and output are the same as a typical apply, but with less screen output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt --log-format bare apply\\nlocal_file.file: Refreshing state... [id=0a0a9f2a6772942557ab5355d76af442f8f65e01]\\n\\nNo changes. Your infrastructure matches the configuration.\\n\\nOpenTofu has compared your real infrastructure against your configuration and\\nfound no differences, so no changes are needed.\\n\\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Environment-Specific Configurations - tree\nDESCRIPTION: Illustrates a suggested directory layout for organizing Terragrunt configuration files by root, environment, and component. This structure facilitates code reuse and clear separation of configuration by environment. Use this format as a blueprint for project setup. No dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/03-includes.md#_snippet_3\n\nLANGUAGE: tree\nCODE:\n```\n└── live\n    ├── root.hcl\n    ├── prod\n    │   ├── app\n    │   │   └── terragrunt.hcl\n    │   ├── mysql\n    │   │   └── terragrunt.hcl\n    │   └── vpc\n    │       └── terragrunt.hcl\n    ├── qa\n    │   ├── app\n    │   │   └── terragrunt.hcl\n    │   ├── mysql\n    │   │   └── terragrunt.hcl\n    │   └── vpc\n    │       └── terragrunt.hcl\n    └── stage\n        ├── app\n        │   └── terragrunt.hcl\n        ├── mysql\n        │   └── terragrunt.hcl\n        └── vpc\n            └── terragrunt.hcl\n\n```\n\n----------------------------------------\n\nTITLE: Opting Into a Specific Environment for Run-All Execution in Terragrunt via CLI\nDESCRIPTION: This Bash example demonstrates how to opt-in inclusion of the 'stage' environment for run-all execution in Terragrunt by overriding feature flags via the command line. Inputs are feature flag CLI arguments; outputs are that only units with the specified feature enabled will participate in the run. Dependencies: Terragrunt CLI and configuration compatibility.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run-all --feature stage=true plan\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Root File Name for Terragrunt Catalog\nDESCRIPTION: Demonstrates using the `--root-file-name` flag with the `terragrunt catalog` command. This specifies a custom name (e.g., `root.hcl`) for the root configuration file that generated units should reference, aligning with the migration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog --root-file-name root.hcl\n```\n\n----------------------------------------\n\nTITLE: Using `no-include-root` with Terragrunt Catalog Command (Bash)\nDESCRIPTION: This Bash command demonstrates how to run the `terragrunt catalog` operation while preventing the automatic inclusion of the root `terragrunt.hcl` file in the generated scaffolded configurations. This is achieved by using the `--no-include-root` command-line flag. This option provides finer control over the configuration inheritance in scaffolded modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/catalog-no-include-root.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog --no-include-root\n```\n\n----------------------------------------\n\nTITLE: Example Bash Script for auth-provider-cmd\nDESCRIPTION: Provides a simple example Bash script demonstrating how to implement the command for `auth-provider-cmd`. This script outputs a basic JSON object to STDOUT containing an environment variable (`KEY`) to be set by Terragrunt. This illustrates the pattern of using a script to fetch and format credentials or environment variables according to the required JSON schema. Any executable technology can be used as long as it outputs the correct JSON format to STDOUT.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/auth-provider-cmd.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\necho -n '{\"envs\": {\"KEY\": \"a secret\"}}'\n```\n\n----------------------------------------\n\nTITLE: Preset JSON Log Format Configuration in Shell\nDESCRIPTION: Implements the 'json' preset log output format, producing structured JSON-formatted log messages. Placeholders are set to escape their content for JSON compatibility, allowing direct integration with logging tools that expect JSON input. This is suitable for advanced log aggregation, analytics, or automation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format '{\"time\":\"%time(format=rfc3339,escape=json)\", \"level\":\"%level(escape=json)\", \"prefix\":\"%prefix(path=short-relative,escape=json)\", \"tf-path\":\"%tf-path(path=filename,escape=json)\", \"msg\":\"%msg(path=relative,escape=json,color=disable)\"}'\n```\n\n----------------------------------------\n\nTITLE: Moving Existing Units into Region Directory - Shell/Bash\nDESCRIPTION: This snippet shows how to move existing infrastructure modules (e.g., 'vpc', 'ec2') into a new region directory using 'mv'. This is necessary to restructure configurations for multi-region management. Requires that 'vpc/' and 'ec2/' directories exist. 'mv' takes the source directories and a destination, with no output unless an error occurs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmv vpc/ ec2/ us-east-1/\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt Engine from HTTPS URL (HCL)\nDESCRIPTION: This HCL block demonstrates configuring a Terragrunt engine within `terragrunt.hcl` by specifying a direct HTTPS URL as the `source`. This points to a specific zipped release asset for the OpenTofu engine, allowing for direct download without relying on GitHub release discovery logic.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nengine {\n  source  = \"https://github.com/gruntwork-io/terragrunt-engine-opentofu/releases/download/v0.0.5/terragrunt-iac-engine-opentofu_rpc_v0.0.5_linux_amd64.zip\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Provider Registries via Environment Variable\nDESCRIPTION: This command demonstrates configuring the list of provider registries to cache using the `TG_PROVIDER_CACHE_REGISTRY_NAMES` environment variable (comma-separated list), along with enabling the cache via `TG_PROVIDER_CACHE=1`, before running `terragrunt apply`. This is an alternative to using multiple CLI flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nTG_PROVIDER_CACHE=1 \\\nTG_PROVIDER_CACHE_REGISTRY_NAMES=example1.com,example2.com \\\nterragrunt apply\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Terragrunt Configurations (Tree)\nDESCRIPTION: Illustrates a typical Terragrunt project file layout using a tree diagram, showing a root configuration and multiple child environments, including each environment's terragrunt.hcl files and nested service-specific configurations. This structure is intended for documentation and planning and is not executable. It helps visualize how terragrunt.hcl files are organized for hierarchical or stack-based workflows.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/01-configuration.md#_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\nroot\n├── terragrunt.hcl\n├── prod\n│   └── terragrunt.hcl\n├── dev\n│   └── terragrunt.hcl\n└── qa\n    ├── terragrunt.hcl\n    └── services\n        ├── services.hcl\n        └── service01\n            └── terragrunt.hcl\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Terragrunt Provider Cache via CLI Flag\nDESCRIPTION: This command demonstrates how to enable the Terragrunt provider cache feature using the `--provider-cache` command-line flag when running `terragrunt run-all apply`. This ensures providers are cached locally by the Terragrunt server during the execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/12-provider-cache-server.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterragrunt run-all apply --provider-cache\n```\n\n----------------------------------------\n\nTITLE: Formatting Plain Text with Unnamed Placeholders (Shell)\nDESCRIPTION: Demonstrates using unnamed placeholders `%()` to format literal text within Terragrunt's custom log format. This example applies color options (`color=magenta`, `color=light-blue`, `color=green`) to the static text prefixes `time=`, `level=`, and `msg=` respectively.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%(content='time=',color=magenta)%time %(content='level=',color=light-blue)%level %(content='msg=',color=green)%msg\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Metric Export in Terragrunt - Bash\nDESCRIPTION: Configures Terragrunt to export metrics directly to the console for debugging or development purposes by setting a single environment variable. No external collector is needed in this mode. Output will be JSON-formatted metrics printed to stdout by Terragrunt during execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_METRIC_EXPORTER=console\n\n```\n\n----------------------------------------\n\nTITLE: Replicating 'Pretty' Log Format Preset (Shell)\nDESCRIPTION: Provides the `--log-custom-format` string equivalent to Terragrunt's `--log-format pretty` preset. It combines various placeholders (`%time`, `%level`, `%prefix`, `%tf-path`, `%msg`) with options for color, case, width, path formatting, and suffixes to achieve the 'pretty' output style.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time(color=light-black) %level(case=upper,width=6,color=preset) %prefix(path=short-relative,color=gradient,suffix=' ')%tf-path(color=cyan,suffix=': ')%msg(path=relative)\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Traces to Grafana Tempo - Environment Variable Setup - Bash\nDESCRIPTION: This snippet configures environment variables for Terragrunt to export traces using the otlpHttp exporter to Grafana Tempo. 'OTEL_EXPORTER_OTLP_ENDPOINT' should match the Tempo instance, and insecure SSL is enabled for local testing. Input: none. Output: Terragrunt emits OpenTelemetry traces compatible with Tempo endpoint.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_TRACE_EXPORTER=otlpHttp\n# Replace with your tempo instance\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\nexport TG_TELEMETRY_TRACE_EXPORTER_INSECURE_ENDPOINT=true\n```\n\n----------------------------------------\n\nTITLE: Copying and Creating Directories for Terragrunt Units - Bash\nDESCRIPTION: These Bash commands demonstrate how to duplicate existing Terragrunt unit directories and create new shared directories to store shared Terraform module code. The dependent commands assume you have a directory named 'foo' containing relevant infrastructure code, and that you have Bash and appropriate file permissions. Inputs are file paths (such as directory names), and outputs are new directories and files being created, copied, or moved; no file content is modified. This approach streamlines organization and separates reusable modules from unit-specific configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/01-quick-start.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\ncp -r foo bar\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir shared\n```\n\nLANGUAGE: bash\nCODE:\n```\nmv foo/main.tf shared/main.tf\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm foo/main.tf bar/main.tf\n```\n\n----------------------------------------\n\nTITLE: Launching Terragrunt Catalog TUI - Bash\nDESCRIPTION: This snippet shows how to launch the Terragrunt catalog feature from the command line using Bash. The command initializes a Terminal User Interface (TUI) that enables users to browse and use OpenTofu/Terraform modules interactively. Required dependencies include Terragrunt installed on the system; optional parameters allow specifying a repository URL and other options. Inputs include optional [repo-url] and [options], while the output is an interactive TUI session launched in the terminal.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/catalog.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt catalog [repo-url] [options]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Structure for Terragrunt Execution (plaintext)\nDESCRIPTION: Depicts an example file tree layout with nested production and staging environments, each containing application and database modules. This visual serves to illustrate which folders are included or excluded when queuing Terragrunt commands with different flag combinations. No processing or dependencies are involved; it is purely demonstrative.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-strict-include.mdx#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- prod\\n  - app\\n    - terragrunt.hcl\\n  - db\\n    - terragrunt.hcl\\n- staging\\n  - app\\n    - terragrunt.hcl\\n  - db\\n    - terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Exporting Telemetry Trace Exporter Variable - Bash\nDESCRIPTION: This snippet sets the TG_TELEMETRY_TRACE_EXPORTER environment variable in the shell, instructing Terragrunt to export traces to the console. This step is a prerequisite for enabling trace output and must be executed before running the Terragrunt command. It requires a bash shell or compatible environment and assumes Terragrunt recognizes this variable for telemetry configuration. No input or output is involved except for the side effect of subsequent Terragrunt command behaviors.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_TELEMETRY_TRACE_EXPORTER=console\n```\n\n----------------------------------------\n\nTITLE: Viewing Telemetry Trace JSON Output - Terragrunt Console Traces - JSON\nDESCRIPTION: This snippet presents sample JSON objects representing telemetry traces output by Terragrunt when the telemetry trace exporter is set to 'console'. Each JSON object details a trace span, including its name, span context, timing, attributes such as executed commands and directories, and metadata about the service and OpenTelemetry instrumentation. This output helps users inspect tracing information for analysis and debugging; the exact structure may vary depending on Terragrunt version and OpenTelemetry integration, and the output generally appears in the console after command execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Name\\\":\\\"run_bash\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"f91587247524593b\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:30.564217484Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.570666395Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"command\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"bash\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[-c sleep 1]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\\n{\\\"Name\\\":\\\"parse_config_file\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"d2823047fb469bdf\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:30.380054129Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.570899286Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"config_path\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2/terragrunt.hcl\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\\n{\\\"Name\\\":\\\"run_terraform\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"152d873a18559f07\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:31.57161757Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.688157882Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"command\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"tofu\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[init]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\\n{\\\"Name\\\":\\\"run_terraform\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"29341bdb65f66b1e\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:31.688240673Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.793377642Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"command\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"tofu\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[apply -auto-approve -input=false]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\\n{\\\"Name\\\":\\\"run_module\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"8a01522bc65e0f1b\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:30.290680776Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.793392803Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"path\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test/mod2\\\"}},{\\\"Key\\\":\\\"terraformCommand\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"apply\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":0,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\\n{\\\"Name\\\":\\\"run-all apply\\\",\\\"SpanContext\\\":{\\\"TraceID\\\":\\\"bdf3cb9078706b7f0b4f1d92428eedc0\\\",\\\"SpanID\\\":\\\"b0b007770f852066\\\",\\\"TraceFlags\\\":\\\"01\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"Parent\\\":{\\\"TraceID\\\":\\\"00000000000000000000000000000000\\\",\\\"SpanID\\\":\\\"0000000000000000\\\",\\\"TraceFlags\\\":\\\"00\\\",\\\"TraceState\\\":\\\"\\\",\\\"Remote\\\":false},\\\"SpanKind\\\":1,\\\"StartTime\\\":\\\"2024-02-08T12:32:26.388519019Z\\\",\\\"EndTime\\\":\\\"2024-02-08T12:32:31.793405603Z\\\",\\\"Attributes\\\":[{\\\"Key\\\":\\\"terraformCommand\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"apply\\\"}},{\\\"Key\\\":\\\"args\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"[apply]\\\"}},{\\\"Key\\\":\\\"dir\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"/projects/gruntwork/terragrunt-tests/trace-test\\\"}}],\\\"Events\\\":null,\\\"Links\\\":null,\\\"Status\\\":{\\\"Code\\\":\\\"Unset\\\",\\\"Description\\\":\\\"\\\"},\\\"DroppedAttributes\\\":0,\\\"DroppedEvents\\\":0,\\\"DroppedLinks\\\":0,\\\"ChildSpanCount\\\":28,\\\"Resource\\\":[{\\\"Key\\\":\\\"service.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"terragrunt\\\"}},{\\\"Key\\\":\\\"service.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"v0.55.0-29-g66bfa07b756e-dirty\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.language\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"go\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.name\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"opentelemetry\\\"}},{\\\"Key\\\":\\\"telemetry.sdk.version\\\",\\\"Value\\\":{\\\"Type\\\":\\\"STRING\\\",\\\"Value\\\":\\\"1.23.0\\\"}}],\\\"InstrumentationLibrary\\\":{\\\"Name\\\":\\\"terragrunt\\\",\\\"Version\\\":\\\"\\\",\\\"SchemaURL\\\":\\\"\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Sample Error Output from Terragrunt/Terraform Backend State Change (Bash)\nDESCRIPTION: This snippet captures the output from a failed 'terragrunt plan' command triggered by a backend configuration change. It shows how Terragrunt and OpenTofu/Terraform detects configuration drift and recommends remedial actions. This helps users identify that the generated 'backend.tf' is identical across units, and provides guidance for managing backend state migrations. No dependencies—this is just shell output, not executable code.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/02-overview.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan\n...\n* Failed to execute \"tofu init\" in ./.terragrunt-cache/I6Os-7-mjDhv4uQ5iCoGcOrDYhI/pfgqyj3TsBEWff7a1El6tYu6LEE\n  ║\n  ║ Error: Backend configuration changed\n  ║\n  ║ A change in the backend configuration has been detected, which may require\n  ║ migrating existing state.\n  ║\n  ║ If you wish to attempt automatic migration of the state, use \"tofu init\n  ║ -migrate-state\".\n  ║ If you wish to store the current configuration with no changes to the\n  ║ state, use \"tofu init -reconfigure\".\n  ╝\n\n\n  exit status 1\n\n```\n\n----------------------------------------\n\nTITLE: Exporting New TG_DEBUG_INPUTS Environment Variable for Terragrunt - Bash\nDESCRIPTION: Demonstrates the updated export of the environment variable TG_DEBUG_INPUTS for activating debug mode regarding input processing in Terragrunt. Effective only with Terragrunt versions implementing the CLI redesign, this should be preferred over the deprecated variant.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_DEBUG_INPUTS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Prometheus Export - YAML\nDESCRIPTION: Provides the configuration for the OpenTelemetry collector to receive OTLP metrics via gRPC and HTTP, process them in batches, and export them to Prometheus on '0.0.0.0:8889'. Dependencies: the collector must be started with this configuration file. Receivers, processors, and exporters are defined as per OpenTelemetry standards. This YAML ensures metrics reported by Terragrunt agents will reach Prometheus.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nprocessors:\n  batch:\nexporters:\n  prometheus:\n    endpoint: \"0.0.0.0:8889\" # Prometheus exporter endpoint\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [prometheus]\n\n```\n\n----------------------------------------\n\nTITLE: Sample Terragrunt Metrics Output in Console Mode - JSON\nDESCRIPTION: Provides example JSON output emitted by Terragrunt when telemetry exporting is set to 'console'. The first object shows resource metadata (service name, version, telemetry SDK info), while the second includes actual metric data (run durations, success counts, bucket distributions). Inputs are metrics generated by Terragrunt; outputs are JSON lines for inspection or logging. No dependencies beyond enabling Terragrunt console exporter.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/02-open-telemetry.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"Resource\":[{\"Key\":\"service.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"terragrunt\"}},{\"Key\":\"service.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"v0.55.0-41-g7185318bb11b\"}},{\"Key\":\"telemetry.sdk.language\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"go\"}},{\"Key\":\"telemetry.sdk.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"opentelemetry\"}},{\"Key\":\"telemetry.sdk.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"1.23.1\"}}],\"ScopeMetrics\":[]}\n{\"Resource\":[{\"Key\":\"service.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"terragrunt\"}},{\"Key\":\"service.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"v0.55.0-41-g7185318bb11b\"}},{\"Key\":\"telemetry.sdk.language\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"go\"}},{\"Key\":\"telemetry.sdk.name\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"opentelemetry\"}},{\"Key\":\"telemetry.sdk.version\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"1.23.1\"}}],\"ScopeMetrics\":[{\"Scope\":{\"Name\":\"terragrunt\",\"Version\":\"\",\"SchemaURL\":\"\"},\"Metrics\":[{\"Name\":\"run_bash_duration\",\"Description\":\"\",\"Unit\":\"\",\"Data\":{\"DataPoints\":[{\"Attributes\":[{\"Key\":\"args\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"[-c sleep 2]\"}},{\"Key\":\"command\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"bash\"}},{\"Key\":\"dir\",\"Value\":{\"Type\":\"STRING\",\"Value\":\"/projects/gruntwork/terragrunt-tests/trace-test/mod3\"}}],\"StartTime\":\"2024-02-12T14:38:14.85578658Z\",\"Time\":\"2024-02-12T14:38:17.853165589Z\",\"Count\":1,\"Bounds\":[0,5,10,25,50,75,100,250,500,750,1000,2500,5000,7500,10000],\"BucketCounts\":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],\"Min\":2005,\"Max\":2005,\"Sum\":2005}],\"Temporality\":\"CumulativeTemporality\"}},{\"Name\":\"run_bash_success_count\",\"Description\":\"\",\"Unit\":\"\",\"Data\":{\"DataPoints\":[{\"Attributes\":[],\"StartTime\":\"2024-02-12T14:38:16.860878555Z\",\"Time\":\"2024-02-12T14:38:17.853169359Z\",\"Value\":1}],\"Temporality\":\"CumulativeTemporality\",\"IsMonotonic\":true}}]}]}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Terragrunt Experiment via Environment Variable\nDESCRIPTION: Sets the `TG_EXPERIMENT` environment variable to `symlinks` before executing `terragrunt plan`. This enables only the `symlinks` experiment and is suitable for CI/CD environments requiring specific experimental features without altering the command invocation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/04-experiments.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTG_EXPERIMENT='symlinks' terragrunt plan\n```\n\n----------------------------------------\n\nTITLE: Finding Terragrunt Cache Directories using Bash\nDESCRIPTION: This Bash command uses the `find` utility to recursively search for all directories named `.terragrunt-cache` starting from the current directory (`.`). It helps identify the locations of Terragrunt's cache directories within a project structure.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/11-terragrunt-cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type d -name \".terragrunt-cache\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Terragrunt Configurations with Hyperfine - Shell\nDESCRIPTION: This shell command uses Hyperfine, a benchmarking tool, to repeatedly benchmark two Terragrunt command variations. The '-w 3' argument runs three warmup iterations, and '-r 5' runs five measured repetitions for each command. It enables users to compare the performance impact of using the '--dependency-fetch-output-from-state' flag versus the default, especially with cache effects. Requires Hyperfine and Terragrunt installed in the environment.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/03-performance.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhyperfine -w 3 -r 5 'terragrunt run-all plan' 'terragrunt run-all plan --dependency-fetch-output-from-state'\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Terragrunt from Source using Go\nDESCRIPTION: These shell commands clone the Terragrunt repository, navigate into the directory, and then use the `go install` command to build and install the Terragrunt binary from source. Requires Git and Go (version specified by Terragrunt's go.mod file) to be installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/gruntwork-io/terragrunt.git\ncd terragrunt\n# Feel free to checkout a particular tag, etc if you want here.\ngo install\n```\n\n----------------------------------------\n\nTITLE: Generated Values File for a Terragrunt Unit\nDESCRIPTION: This snippet illustrates the content of the `terragrunt.values.hcl` file automatically generated by Terragrunt within a unit's directory (e.g., `.terragrunt-stack/vpc/`). It contains the key-value pairs defined in the `values` attribute of the corresponding `unit` block in the `terragrunt.stack.hcl` file.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_63\n\nLANGUAGE: hcl\nCODE:\n```\n# .terragrunt-stack/vpc/terragrunt.values.hcl\n\nvpc_name = \"main\"\ncidr     = \"10.0.0.0/16\"\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint Default Linter via Makefile (Bash)\nDESCRIPTION: This snippet runs the default linter using a convenience make target. Requires GNU Make and a properly configured Makefile with a 'run-lint' recipe. It wraps the standard golangci-lint command for convenience; results are displayed in the terminal. Use this method for quick integration with other build processes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake run-lint\n```\n\n----------------------------------------\n\nTITLE: Using Plain Text Separators in Custom Log Format (Shell)\nDESCRIPTION: Illustrates adding plain text prefixes to log fields in Terragrunt's custom log format. This example uses `time=`, `level=`, and `message=` as literal text preceding the corresponding placeholder values.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"time=%time level=%level message=%msg\"\n```\n\n----------------------------------------\n\nTITLE: Illustrative Project Directory Structure (Tree)\nDESCRIPTION: Shows a sample file structure for a Terragrunt project with separate environments (`prod`) and modules (`app`, `ecs-cluster`). This structure is used in the debugging example to illustrate dependencies between modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/01-debugging.md#_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n└── live\n    └── prod\n        └── app\n        |   ├── vars.tf\n        |   ├── main.tf\n        |   ├── outputs.tf\n        |   └── terragrunt.hcl\n        └── ecs-cluster\n            └── outputs.tf\n```\n\n----------------------------------------\n\nTITLE: Debug Variables File Example - JSON\nDESCRIPTION: This JSON object is the contents of the generated `terragrunt-debug.tfvars.json` file, showing the resolved values Terragrunt passed to OpenTofu/Terraform. These inputs reflect all interpolated dependencies and locals; unexpected values here are a clue to misconfiguration. Prerequisites: prior execution of Terragrunt with `--debug-inputs` enabled.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/01-debugging.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image_id\": \"acme/myapp:1\",\n  \"num_tasks\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output Showing Terragrunt Hook Context Variables\nDESCRIPTION: This snippet shows the example console output generated when the `hook.sh` script (from the previous example) is executed by a Terragrunt `before_hook` triggered during an `apply` command using `tofu`. It displays the values of the context environment variables set by Terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/09-hooks.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTF_PATH=tofu COMMAND=apply HOOK_NAME=test_hook\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to AsciiDoc with Pandoc - Bash\nDESCRIPTION: This command-line Bash snippet demonstrates converting a Markdown file to AsciiDoc format using Pandoc with GitHub-flavored Markdown as input. The command requires Pandoc to be installed. Key parameters include input filename ('input.md'), output filename ('output.adoc'), and controls for header style and line wrapping. The output (.adoc) preserves structure for further import into AsciiDoc workflows. Limitation: Ensure input file exists; output will overwrite if file exists.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npandoc --from=gfm --to=asciidoc --wrap=none --atx-headers  input.md > output.adoc\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt using Chocolatey on Windows\nDESCRIPTION: This command uses the Chocolatey package manager (`choco`) to install Terragrunt on a Windows system. Chocolatey handles downloading the appropriate Terragrunt package and placing it in the system's PATH.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchoco install terragrunt\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt with pacman on Arch Linux\nDESCRIPTION: This command installs Terragrunt on Arch Linux systems using the pacman package manager from the community repository. Requires appropriate permissions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npacman -S terragrunt\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt with Pkg on FreeBSD\nDESCRIPTION: This command installs Terragrunt on FreeBSD systems using the Pkg package manager. Requires appropriate permissions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npkg install terragrunt\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Nested Terragrunt Stacks\nDESCRIPTION: Presents a sample file system layout (`tree` command output) for a Terragrunt project organized into nested stacks. This structure typically represents environments or regions (e.g., `us-east-1`, `us-west-2`) containing application components (`app`, `db`), each defined by a `terragrunt.hcl` file. This hierarchical organization helps in managing infrastructure scope effectively.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_24\n\nLANGUAGE: tree\nCODE:\n```\nroot\n├── us-east-1\n│   ├── app\n│   │   └── terragrunt.hcl\n│   └── db\n│       └── terragrunt.hcl\n└── us-west-2\n    ├── app\n    │   └── terragrunt.hcl\n    └── db\n        └── terragrunt.hcl\n```\n\n----------------------------------------\n\nTITLE: Escaping Parentheses Following Placeholders in Shell\nDESCRIPTION: Explains how to include literal parentheses after a placeholder by adding empty parentheses immediately after the placeholder. This ensures subsequent parentheses are not interpreted as formatting parameters.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time()(plain-text)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Terragrunt Engine Feature (Shell)\nDESCRIPTION: This shell command sets the `TG_EXPERIMENTAL_ENGINE` environment variable to `1`. This opt-in is required to enable the experimental IaC engine functionality in Terragrunt, as the feature is not yet recommended for general production usage.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport TG_EXPERIMENTAL_ENGINE=1\n```\n\n----------------------------------------\n\nTITLE: Updating Terragrunt Non-Interactive Environment Variable\nDESCRIPTION: Illustrates how to update the environment variable for non-interactive mode. The previously used 'TERRAGRUNT_NON_INTERACTIVE' variable must be renamed to 'TG_NON_INTERACTIVE'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TERRAGRUNT_NON_INTERACTIVE=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport TG_NON_INTERACTIVE=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Strict Control (Irrelevant Control - Warning)\nDESCRIPTION: Demonstrates enabling a specific strict control (`apply-all`) using the `--strict-control` flag while running a different deprecated command (`plan-all`). Since the enabled control doesn't match the executed command, Terragrunt still issues only a warning for `plan-all`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all --strict-control apply-all\n15:26:08.585 WARN   The `plan-all` command is deprecated and will be removed in a future version. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Granting Broad Permissions for S3 and DynamoDB Resources - AWS IAM Policy - JSON\nDESCRIPTION: This JSON snippet defines an AWS IAM policy that grants full (wildcard) permissions for both DynamoDB tables and S3 buckets prefixed with 'terragrunt'. It is intended to allow Terragrunt to perform any operation on these specified resources, facilitating all remote state management activities. Dependencies include AWS IAM, S3, and DynamoDB, with placeholders for the AWS Account ID and resource naming to be replaced with actual values. The approach is overly permissive and not suitable for production environments where least-privilege is advised.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/08-authentication.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowAllDynamoDBActionsOnAllTerragruntTables\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"dynamodb:*\",\n            \"Resource\": [\n                \"arn:aws:dynamodb:*:1234567890:table/terragrunt*\"\n            ]\n        },\n        {\n            \"Sid\": \"AllowAllS3ActionsOnTerragruntBuckets\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"s3:*\",\n            \"Resource\": [\n                \"arn:aws:s3:::terragrunt*\",\n                \"arn:aws:s3:::terragrunt*/*\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax for --queue-construct-as Flag in Bash\nDESCRIPTION: Shows the command-line syntax for using the Terragrunt `--queue-construct-as` flag and its shorter alias `--as`. A `COMMAND` argument (like 'plan' or 'destroy') must be provided to specify the dependency sorting behavior.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-construct-as.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--queue-construct-as=COMMAND\n--as=COMMAND\n```\n\n----------------------------------------\n\nTITLE: Finding Terragrunt Cache Directories with Bash\nDESCRIPTION: This Bash command recursively searches from the current working directory for all child directories named .terragrunt-cache. It leverages the find command, which is commonly available on Unix-like systems. The command's output lists all locations of the Terragrunt cache directories, facilitating further operations such as inspection or deletion. There are no external dependencies beyond standard Bash utilities.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/08-terragrunt-cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type d -name \".terragrunt-cache\"\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Terragrunt Experiment via Flag\nDESCRIPTION: This command runs `terragrunt plan` while enabling only the specified experiment, in this case, `symlinks`, using the `--experiment` flag. This allows targeted testing of a single unstable feature without enabling others.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/04-experiments.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --experiment symlinks\n```\n\n----------------------------------------\n\nTITLE: Listing Terragrunt Configurations Alphabetically - Bash\nDESCRIPTION: Shows the use of the 'terragrunt list' command without extra flags, resulting in configurations being sorted alphabetically. This example demonstrates the default output format and order, making it easy for users to see all available configurations at a glance. No dependencies or preconditions are required beyond having Terragrunt installed and configured with accessible configurations.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-dag.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt list\nlive/dev/db    live/dev/ec2   live/dev/vpc\nlive/prod/db   live/prod/ec2  live/prod/vpc\n```\n\n----------------------------------------\n\nTITLE: Function Calls with Interpolation Syntax in terraform.tfvars (HCL)\nDESCRIPTION: This example demonstrates use of function calls via interpolation syntax (i.e., \"${...}\") within the 'terragrunt' block of a terraform.tfvars configuration. The snippet includes an extra_arguments block that utilizes 'get_terraform_commands_that_need_locking()', showing the pre-HCL2 method of invoking functions, which is not supported outside the 'terragrunt' block. This approach is replaced in HCL2 with direct function calls.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# terraform.tfvars\\nterragrunt = {\\n  terraform {\\n    extra_arguments \\\"retry_lock\\\" {\\n      # Using a function within interpolation syntax\\n      commands  = \\\"\\${get_terraform_commands_that_need_locking()}\\\"\\n      arguments = [\\\"-lock-timeout=20m\\\"]\\n    }\\n  }\\n}\\n# Using interpolation syntax outside of the terragrunt config did NOT work before\\nfoo = \\\"\\${get_env(\\\"FOO\\\", \\\"default\\\")}\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Terragrunt Engine Log Level (Shell)\nDESCRIPTION: This shell command sets the `TG_ENGINE_LOG_LEVEL` environment variable to `debug`. This configures the logging verbosity for the IaC engine process itself. Other valid levels include `info`, `warn`, and `error`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/13-engine.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport TG_ENGINE_LOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output Including Exclude Block - json\nDESCRIPTION: Showcases the structure of JSON output produced by running Terragrunt find with the --exclude flag. Each element reflects a discovered unit along with its exclude block attributes, such as excluded dependencies and related actions. This output can be processed using tools like jq or further integrated into CI/CD pipelines. The structure assumes Terragrunt units are preconfigured to include applicable exclude blocks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/find-exclude.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"unit\",\n    \"path\": \"action/exclude-apply\",\n    \"exclude\": {\n      \"exclude_dependencies\": true,\n      \"actions\": [\n        \"apply\"\n      ],\n      \"if\": true\n    }\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"action/exclude-plan\",\n    \"exclude\": {\n      \"exclude_dependencies\": true,\n      \"actions\": [\n        \"plan\"\n      ],\n      \"if\": true\n    }\n  },\n  {\n    \"type\": \"unit\",\n    \"path\": \"all-except-output/app1\",\n    \"exclude\": {\n      \"exclude_dependencies\": true,\n      \"actions\": [\n        \"all_except_output\"\n      ],\n      \"if\": true\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Including Default Root Configuration (FAQ Context)\nDESCRIPTION: This HCL snippet, shown in the FAQ section, reiterates the old pattern where `find_in_parent_folders()` implicitly searches for `terragrunt.hcl`. It highlights the lack of clarity this default behavior causes.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\ninclude \"root\" {\n  path = find_in_parent_folders()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Deprecated Terragrunt Command (Warning)\nDESCRIPTION: Demonstrates the default behavior when running a deprecated Terragrunt command (`plan-all`). Terragrunt issues a warning indicating the command is deprecated and suggests using `terragrunt run-all plan` instead, but proceeds with execution.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/03-strict-controls.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all\n15:26:08.585 WARN   The `plan-all` command is deprecated and will be removed in a future version. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Deprecated Terragrunt Debug Flag in Plan Command - Bash\nDESCRIPTION: Shows use of the old --terragrunt-debug flag to enable debugging during Terragrunt plan operations. Users previously relied on this flag to receive debug information, but it is now deprecated. This invocation will not be supported in updated CLI versions.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --terragrunt-debug\n```\n\n----------------------------------------\n\nTITLE: Negation Flag Usage Example (Bash)\nDESCRIPTION: Shows how setting a negation flag (`--no-color`) to `false` effectively re-enables the default behavior (color output). The flag itself defaults to `true` when present.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--no-color=false\n```\n\n----------------------------------------\n\nTITLE: Defining the experimental-engine Configuration (YAML)\nDESCRIPTION: This YAML snippet defines the `experimental-engine` configuration setting for Terragrunt. It specifies the setting's name, a brief description, its data type (`bool`), and the corresponding environment variable (`TG_EXPERIMENTAL_ENGINE`) that can be used to override it. Enabling this setting activates Terragrunt's experimental IaC engine feature.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/experimental-engine.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: experimental-engine\ndescription: Enable Terragrunt experimental engine.\ntype: bool\nenv:\n  - TG_EXPERIMENTAL_ENGINE\n---\n```\n\n----------------------------------------\n\nTITLE: Defining the 'log-disable' Parameter in Terragrunt Configuration (YAML)\nDESCRIPTION: This YAML snippet defines the `log-disable` configuration parameter for Terragrunt. It specifies the parameter's name, a description of its function (to disable logging), its data type (`bool`), and the environment variable (`TG_LOG_DISABLE`) that can be used to set it. This parameter allows users to silence Terragrunt's own logging output, useful in scripting or when only Terraform/OpenTofu output is desired.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/log-disable.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: log-disable\ndescription: Disable logging.\ntype: bool\nenv:\n  - TG_LOG_DISABLE\n---\n```\n\n----------------------------------------\n\nTITLE: Discouraged Terragrunt Flag Naming Example (Bash)\nDESCRIPTION: Shows a less preferred flag naming convention (`--provider-cache-enable`) which is discouraged in favor of more concise flags like `--provider-cache` when enabling a system.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--provider-cache-enable\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Flag Naming for System Operation (Bash)\nDESCRIPTION: Example of flag naming when performing an operation on a system. `--queue-include-unit` targets the runner `queue` system, performs an `include` operation, and specifies that the parameter represents a `unit`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--queue-include-unit\n```\n\n----------------------------------------\n\nTITLE: Moving Main Configuration File into Shared Module Directory (Bash)\nDESCRIPTION: Relocates 'main.tf' from the 'foo' directory into the 'shared' directory to support modular reuse. This step is necessary for both 'foo' and 'bar' to use a common configuration as a module. Requires both directories to exist; output is 'main.tf' located in 'shared'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/01-quick-start.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmv foo/main.tf shared/main.tf\n```\n\n----------------------------------------\n\nTITLE: Invoking Deprecated Command with Strict Control - Terragrunt CLI - Bash\nDESCRIPTION: This snippet demonstrates executing a deprecated Terragrunt command ('plan-all') with the '--strict-control' flag, causing Terragrunt to fail with an error instead of a warning. No dependencies other than Terragrunt itself are required. The critical parameter is '--strict-control deprecated-commands', causing immediate erroring when legacy commands are used; users must adapt to recommended alternatives. Input: CLI execution; Output: Error message with guidance.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/05-strict-mode.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt plan-all --strict-control deprecated-commands\n15:26:23.685 ERROR  The `plan-all` command is no longer supported. Use `terragrunt run-all plan` instead.\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Checks in Terragrunt Destroy - YAML\nDESCRIPTION: This YAML snippet defines a boolean configuration option named 'no-destroy-dependencies-check' for Terragrunt, intended to disable dependency validation on destroy operations. It specifies metadata including description, type, and the corresponding environment variable 'TG_NO_DESTROY_DEPENDENCIES_CHECK'. When enabled, this setting allows resource destructions to occur without checking for dependent resources which may result in orphaned infrastructure. Required for Terragrunt users aiming to speed up destroy actions, with the limitation that safety checks are bypassed and should be used cautiously.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/no-destroy-dependencies-check.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\\nname: no-destroy-dependencies-check\\ndescription: |\\n  Disables Terragrunt's dependency validation during destroy operations.\\ntype: bool\\nenv:\\n  - TG_NO_DESTROY_DEPENDENCIES_CHECK\\n---\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Debug Logging Output - Log\nDESCRIPTION: This excerpt depicts sample log output from Terragrunt when running with debug flags, indicating where the tool writes generated input variables and how to directly replicate the Terraform/OpenTofu invocation using the produced variables file. No dependencies required to read this output; it helps users follow subsequent debugging steps.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/05-troubleshooting/01-debugging.mdx#_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n[terragrunt] Variables passed to tofu/terraform are located in \"~/live/prod/app/terragrunt-debug.tfvars\"\n[terragrunt] Run this command to replicate how tofu/terraform was invoked:\n[terragrunt]     tofu/terraform apply -var-file=\"~/live/prod/app/terragrunt-debug.tfvars.json\" \"~/live/prod/app\"\n```\n\n----------------------------------------\n\nTITLE: Defining Parallelism Variable for Terragrunt Documentation (YAML)\nDESCRIPTION: Declares the parallelism configuration option for Terragrunt's --all commands within the documentation frontmatter. The snippet defines the variable name, description, type (as integer), and supported environment variable (TG_PARALLELISM). This section is typically used by documentation generators to structure option references and is not part of executable code.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/parallelism.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: parallelism\\ndescription: Parallelism for --all commands.\\ntype: integer\\nenv:\\n  - TG_PARALLELISM\\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Version Flag Metadata (YAML)\nDESCRIPTION: This YAML block defines metadata for a Terragrunt flag or command named 'version'. It specifies the flag's name, a brief description (\"Show terragrunt version.\"), and its type ('bool'). This metadata is likely used by Terragrunt or related tooling to configure or document the flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/version.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: version\ndescription: Show terragrunt version.\ntype: bool\n---\n```\n\n----------------------------------------\n\nTITLE: Defining the Terragrunt 'tree' Flag (YAML)\nDESCRIPTION: This YAML snippet defines the 'tree' configuration option for Terragrunt. It specifies the name ('tree'), description ('Output in tree format.'), type ('boolean'), corresponding environment variable ('TG_TREE'), and the command-line alias ('-T'). This flag enables hierarchical tree output format, acting as a shorthand for '--format=tree'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-tree.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: tree\ndescription: |\n  Output in tree format.\ntype: boolean\nenv:\n  - TG_TREE\naliases:\n  - -T\n---\n```\n\n----------------------------------------\n\nTITLE: Defining the 'stdin' Configuration Flag (YAML)\nDESCRIPTION: This YAML snippet defines the configuration for the 'stdin' flag used with Terragrunt's HCL formatting command. It specifies the flag name, provides a description of its function, sets its type to boolean, and lists the corresponding environment variable 'TG_HCLFMT_STDIN' that can also be used to enable this feature.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/hcl-fmt-stdin.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: stdin\ndescription: Format HCL from stdin and print result to stdout.\ntype: bool\nenv:\n  - TG_HCLFMT_STDIN\n---\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Error Signal in Terragrunt\nDESCRIPTION: This JSON snippet is an example content for the 'error-signals.json' file generated by Terragrunt when an ignorable error is encountered. It reflects the configured signals (e.g., 'alert_team: false') from the HCL 'signals' block. Input: configuration-driven signals; output: a JSON file for automated consumption. No dependencies beyond Terragrunt. Limitations: keys depend on configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/11-runtime-control.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"alert_team\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Terragrunt Integrated Terraform Output (Bash)\nDESCRIPTION: This example shows the default output format when running a Terragrunt command (like `tofu plan`) without the `--tf-forward-stdout` flag. Each line from the underlying Terraform/OpenTofu process is prefixed with Terragrunt's timestamp, log level (STDOUT), and source ([app]).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/tf-forward-stdout.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n14:19:25.081 INFO   [app] Running command: tofu plan -input=false\n14:19:25.174 STDOUT [app] tofu: OpenTofu used the selected providers to generate the following execution\n14:19:25.174 STDOUT [app] tofu: plan. Resource actions are indicated with the following symbols:\n14:19:25.174 STDOUT [app] tofu:   + create\n14:19:25.174 STDOUT [app] tofu: OpenTofu will perform the following actions:\n```\n\n----------------------------------------\n\nTITLE: Defining the 'config' Parameter in Terragrunt Configuration (YAML)\nDESCRIPTION: Defines the 'config' parameter as a string type within a configuration file (likely YAML). This parameter specifies the relative path to the Terragrunt configuration file used for migration. It explicitly notes that the path is relative to the directory of each source and destination unit, not the current working directory. The configuration also mentions an associated environment variable 'TG_CONFIG' that can potentially override or provide this value.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-migrate-config.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: config\ndescription: |\n  Path to the Terragrunt configuration file to use to migrate the resources.\n\n  Note that this path is relative to the directory of each of the source and destination units, not the current working directory.\ntype: string\nenv:\n  - TG_CONFIG\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Module Input Variables in terraform.tfvars (Legacy <= v0.18.x) (HCL)\nDESCRIPTION: Shows the pre-0.19.x method where Terraform module input variables (`instance_type`, `instance_count`) were defined directly at the top level of `terraform.tfvars`, alongside the `terragrunt` configuration block. Terraform automatically loaded these due to the `.tfvars` file convention.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# terraform.tfvars\n\n# Terragrunt configuration\nterragrunt = {\n  terraform {\n    # ...\n  }\n\n  remote_state {\n    # ...\n  }\n}\n\n# Input variables to set for your Terraform module\ninstance_type  = \"t2.micro\"\ninstance_count = 10\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'version' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'version'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_13\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"version\" />\n```\n\n----------------------------------------\n\nTITLE: Final Terragrunt Stack Directory Layout Using Tree\nDESCRIPTION: Shows the minimal repository tree after migration is complete, retaining only .gitignore and terragrunt.stack.hcl files in the stack service directory with all generated code ignored as per best practice for stacks. This structure reduces code duplication and supports maintainability.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_7\n\nLANGUAGE: tree\nCODE:\n```\nnon-prod\n└── us-east-1\n    └── stateful-ec2-asg-service\n        ├── .gitignore\n        └── terragrunt.stack.hcl\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt 'config' Parameter (YAML)\nDESCRIPTION: This YAML snippet defines a configuration parameter named 'config'. It includes a description explaining its use (specifying the path to the Terragrunt configuration file for deleting resources), sets its type to 'string', and maps it to the environment variable 'TG_CONFIG'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-delete-config.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: config\ndescription: Path to the Terragrunt configuration file to use to delete the resources.\ntype: string\nenv:\n  - TG_CONFIG\n---\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Characters in Log Output Format in Shell\nDESCRIPTION: This snippet shows how to escape the percent sign within Terragrunt's log format string using double percent (%%). The command demonstrates literal percent output when using custom log formats. Useful for including characters that overlap with placeholder syntax.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/10-log-formatting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time %level %%msg\"\n```\n\n----------------------------------------\n\nTITLE: Running Deprecated Graph Command via Terragrunt Run Wrapper - Bash\nDESCRIPTION: Presents how to use Terragrunt's run subcommand to invoke the now-deprecated graph operation when shortcut usage is not available. Intended for situations where graph functionality is needed despite deprecation.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/03-cli-redesign.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt run graph\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt using Pacman on Arch Linux\nDESCRIPTION: This command uses the Pacman package manager (`pacman`) specific to Arch Linux to install Terragrunt. The `-S` flag synchronizes the package database and installs the specified package.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npacman -S terragrunt\n```\n\n----------------------------------------\n\nTITLE: Escaping the Percent Sign in Custom Log Format (Shell)\nDESCRIPTION: Shows how to escape the percent sign (`%`) in a Terragrunt custom log format string. Using `%%` prevents Terragrunt from interpreting it as the start of a placeholder, allowing a literal `%` to appear in the output, as shown with `%%msg`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time %level %%msg\"\n```\n\n----------------------------------------\n\nTITLE: Clean Up and Regenerate Terragrunt Units as Part of Migration - Bash\nDESCRIPTION: This bash snippet removes existing unit configuration directories (service, db, sgs), aids infrastructure migration by cleaning up redundant code prior to stack regeneration. Assumes execution from the appropriate infrastructure directory. Dependencies include bash, proper directory structure, and appropriate permissions. Inputs are paths to unit directories; output is clean directory tree ready for regeneration via 'terragrunt stack generate'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd non-prod/us-east-1/stateful-ec2-asg-service\\nrm -rf service db sgs\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'strict-mode' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'strict-mode'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_10\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"strict-mode\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt using Pkg on FreeBSD\nDESCRIPTION: This command uses the Pkg package manager (`pkg`) to install Terragrunt on a FreeBSD system. Pkg handles fetching and installing the Terragrunt package and its dependencies.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npkg install terragrunt\n```\n\n----------------------------------------\n\nTITLE: Invalid Placeholder Option Syntax Example (Shell)\nDESCRIPTION: Shows an example of incorrect syntax when attempting to specify placeholder options in Terragrunt's custom log format. Providing text directly within parentheses without a valid option name (`plain-text` instead of `option=value`) results in an error.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time(plain-text)\"\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Flag Naming for System Control (Bash)\nDESCRIPTION: Example of a Terragrunt flag (`--provider-cache`) that controls a high-level system (the provider cache server). Setting this flag enables the system.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--provider-cache\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Flag Naming for Single Configuration (Bash)\nDESCRIPTION: Example of a Terragrunt flag (`--working-dir`) that controls a single configuration setting. The flag name directly corresponds to the configuration it modifies ('working directory').\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--working-dir\n```\n\n----------------------------------------\n\nTITLE: Sample bash output from cached run_cmd invocations\nDESCRIPTION: Displays the terminal output from executing the previous run_cmd-heavy HCL configuration. This output exemplifies how Terragrunt caches identical commands, resulting in certain outputs appearing only once despite repeated invocations. Inputs: N/A; Outputs: mixed echoed values and UUIDs, showcasing caching and evaluation patterns.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/04_reference/03-built-in-functions.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ terragrunt init\nuuid1 b48379e1-924d-2403-8789-c72d50be964c\nuuid1 9f3a8398-b11f-5314-7783-dad176ee487d\nuuid1 649ac501-e5db-c935-1499-c59fb7a75625\nuuid2 2d65972b-3fa9-181f-64fe-dcd574d944d0\nuuid3 e345de60-9cfa-0455-79b7-af0d053a15a5\npotato\nuuid3 7f90a4ed-96e3-1dd8-5fee-91b8c8e07650\nuuid2 8638fe79-c589-bebd-2a2a-3e6b96f7fc34\nuuid3 310d0447-f0a6-3f67-efda-e6b1521fa1fb\nuuid4 f8e80cc6-1892-8db7-bd63-6089fef00c01\nuuid2 289ff371-8021-54c6-2254-72de9d11392a\nuuid3 baa19863-1d99-e0ef-11f2-ede830d1c58a\ncarrot\n\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Command Metadata (YAML)\nDESCRIPTION: YAML frontmatter defining metadata for the 'terragrunt stack clean' command documentation page. It includes properties like name, path, category, description, usage instructions, sidebar order, experiment details, and specifies an example code block.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/commands/stack/clean.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: clean\npath: \"stack/clean\"\ncategory: stack\ndescription: Remove `.terragrunt-stack` directories created by `stack` commands.\nusage: |\n  Running `terragrunt stack clean` removes the `.terragrunt-stack` directory, which is generated by the `terragrunt stack generate` or `terragrunt stack run` commands. \n\n  This can be useful when you need to remove generated configurations or troubleshoot issues.\nsidebar:\n  order: 403\nexperiment:\n  control: stacks\n  name: Stacks\nexamples:\n  - description: Remove all auto-generated `.terragrunt-stack` directories created by `stack` commands.\n    code: |\n      terragrunt stack clean\n---\n```\n\n----------------------------------------\n\nTITLE: Defining HCL2 Blocks (HCL)\nDESCRIPTION: Provides a basic example of an HCL2 block definition. Blocks (`foo` in this case) represent configuration sections and are defined without an equals sign before the label (if any) and the opening curly brace.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# Blocks do not use equal signs before the curly brace\nfoo {\n  bar = \"baz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining queue-strict-include Option for Terragrunt (Markdown/Configuration)\nDESCRIPTION: Establishes and documents the queue-strict-include configuration option for Terragrunt as a boolean. It indicates that, when enabled, only directories specified by --queue-include-dir will be processed. This meta-block includes YAML properties for name, description, type, and corresponding environment variable. No code execution is intended; it is for documentation and configuration tooling discovery.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-strict-include.mdx#_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n---\\nname: queue-strict-include\\ndescription: Only process the directories matched by --queue-include-dir.\\ntype: bool\\nenv:\\n  - TG_QUEUE_STRICT_INCLUDE\\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt using Homebrew on macOS or Linux\nDESCRIPTION: This command utilizes the Homebrew package manager (`brew`) to install Terragrunt. Homebrew is commonly used on macOS and can also be installed on Linux. It manages the download, installation, and PATH configuration for Terragrunt.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install terragrunt\n```\n\n----------------------------------------\n\nTITLE: Analyzing Go CPU Profile with pprof CLI (Bash/Go)\nDESCRIPTION: This command invokes the Go `pprof` tool to analyze the CPU profile data stored in the `cpu.prof` file (generated previously, e.g., via `go test -cpuprofile`). It opens an interactive pprof command-line interface for inspecting CPU usage, hot spots, and call graphs within the profiled Go code.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof cpu.prof\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt 'no-color' Configuration Flag (YAML)\nDESCRIPTION: This YAML snippet defines the 'no-color' configuration flag for Terragrunt. It specifies the flag's name ('no-color'), a description ('Disable color output for both Terragrunt and OpenTofu/Terraform.'), its data type ('bool'), and the corresponding environment variable ('TG_NO_COLOR'). Setting this flag to true or defining the environment variable disables colored output.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/no-color.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: no-color\ndescription: Disable color output for both Terragrunt and OpenTofu/Terraform.\ntype: bool\nenv:\n  - TG_NO_COLOR\n---\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dependency Resolution Order in Terragrunt Module Chain (Text)\nDESCRIPTION: This ASCII diagram illustrates how module dependencies are resolved in a chain when using Terragrunt. It communicates how outputs from modules such as 'account', 'vpc', 'securitygroup', 'ecs', and 'ecr' are fetched, showing concurrent retrieval at the lowest level and serial resolution at upper levels. Useful for visual learners and for understanding execution flow.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/02-blocks.mdx#_snippet_45\n\nLANGUAGE: text\nCODE:\n```\naccount --> vpc --> securitygroup --> ecs\n                                      ^\n                                     /\n                              ecr --\n\n```\n\n----------------------------------------\n\nTITLE: Including Default Root Configuration in Terragrunt HCL\nDESCRIPTION: Demonstrates the previous pattern of including a parent Terragrunt configuration file using `find_in_parent_folders()`. By default, this function searches parent directories for a file named `terragrunt.hcl`. This pattern is now discouraged.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/01-migrating-from-root-terragrunt-hcl.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# /some/path/terragrunt.hcl\ninclude \"root\" {\n  path = find_in_parent_folders()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Integration Tests with Build Tags (Bash)\nDESCRIPTION: This command executes a specific integration test (`TestAwsInitHookNoSourceWithBackend`) that requires the `aws` build tag. The tag is passed to the Go compiler using the `GOFLAGS` environment variable. This is necessary for tests involving external services like AWS.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nGOFLAGS='-tags=aws' go test -run 'TestAwsInitHookNoSourceWithBackend' .\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for queue-exclude-dir Documentation (YAML)\nDESCRIPTION: This YAML frontmatter defines metadata for the documentation page about the `queue-exclude-dir` parameter. It specifies the parameter's name, a brief description, its data type (`list(string)`), and the corresponding environment variable (`TG_QUEUE_EXCLUDE_DIR`). This metadata is likely used by the Astro/Starlight documentation framework.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-exclude-dir.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: queue-exclude-dir\ndescription: Unix-style glob of directories to exclude from the queue of Units to run.\ntype: list(string)\nenv:\n  - TG_QUEUE_EXCLUDE_DIR\n---\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint Strict Linter (Bash)\nDESCRIPTION: This Bash snippet runs golangci-lint with a strict configuration specified in '.strict.golangci.yml'. Requires golangci-lint, the strict configuration file, and Go source files present. This linter surfaces stricter warnings which are not enforced, but useful for deeper code quality checks. Outputs warnings/errors according to the strict config.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run -c .strict.golangci.yml\n```\n\n----------------------------------------\n\nTITLE: Negation Flag Prefix Example (Bash)\nDESCRIPTION: Example of a flag (`--no-color`) using the `no` prefix to negate a default behavior (Terragrunt emits color by default).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--no-color\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code with Make (Bash)\nDESCRIPTION: This Make command formats all Go source files in the project using the `gofmt` tool, ensuring consistent code style.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation Syntax for Functions in terraform.tfvars (Legacy <= v0.18.x) (HCL)\nDESCRIPTION: Illustrates the Terraform 0.11 style interpolation syntax (`${...}`) required in Terragrunt <= 0.18.x to use built-in functions like `get_terraform_commands_that_need_locking()`. This syntax was only effective within the `terragrunt = { ... }` block. Attempts to use it outside this block for Terragrunt functions would not work.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# terraform.tfvars\n\nterragrunt = {\n  terraform {\n    extra_arguments \"retry_lock\" {\n      # Using a function within interpolation syntax\n      commands  = \"${get_terraform_commands_that_need_locking()}\"\n      arguments = [\"-lock-timeout=20m\"]\n    }\n  }\n}\n\n# Using interpolation syntax outside of the terragrunt config did NOT work before\nfoo = \"${get_env(\"FOO\", \"default\")}\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Package Tests (Bash)\nDESCRIPTION: This bash command runs unit tests for a specified Go package directory. Requires Go installed and test files present. It executes all tests in the package, reporting results in the terminal. Replace './path/to/package' with the actual relative path of the desired package.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./path/to/package\n```\n\n----------------------------------------\n\nTITLE: Migrating Terragrunt Configurations from terraform.tfvars (HCL)\nDESCRIPTION: This snippet shows the old format for specifying Terragrunt configuration inside terraform.tfvars, using a nested 'terragrunt = { ... }' attribute. It demonstrates both the terraform source block and remote state backend configuration as a single value inside the terragrunt attribute object. This format is now deprecated for Terragrunt >=0.19.x and Terraform 0.12+.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/02-upgrading-to-terragrunt-0-19-x.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# terraform.tfvars\\nterragrunt = {\\n  terraform {\\n    source = \\\"git::git@github.com:foo/modules.git//frontend-app?ref=v0.0.3\\\"\\n    extra_arguments \\\"custom_vars\\\" {\\n      commands  = [\\\"apply\\\", \\\"plan\\\"]\\n      arguments = [\\\"-var\\\", \\\"foo=42\\\"]\\n    }\\n  }\\n  remote_state {\\n    backend = \\\"s3\\\"\\n    config = {\\n      bucket         = \\\"my-terraform-state\\\"\\n      key            = \\\"\\${path_relative_to_include()}/terraform.tfstate\\\"\\n      region         = \\\"us-east-1\\\"\\n      encrypt        = true\\n      dynamodb_table = \\\"my-lock-table\\\"\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using `shasum` for Checksum Verification on macOS\nDESCRIPTION: This Bash command provides an alternative way to generate the SHA256 checksum for the Terragrunt binary on macOS environments using the `shasum` utility, which is often available when `sha256sum` is not installed. It extracts the checksum hash using `awk`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCHECKSUM=\"$(shasum -a 256 \"$BINARY_NAME\" | awk '{print $1}')\"\n```\n\n----------------------------------------\n\nTITLE: Configuring the OpenTelemetry Collector for Prometheus Export in YAML\nDESCRIPTION: This YAML describes the OpenTelemetry collector configuration for Prometheus export. It sets up OTLP receivers, a basic batch processor, and a Prometheus exporter on port 8889. The metrics pipeline ties these components together, requiring the configuration file otel-collector-config.yaml and listening on all interfaces.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/02-open-telemetry.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n\nexporters:\n  prometheus:\n    endpoint: \"0.0.0.0:8889\" # Prometheus exporter endpoint\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [prometheus]\n\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag Exception Example (Plaintext)\nDESCRIPTION: Shows a flag (`terragrunt-include-module-prefix`) whose default behavior changed, representing an exception to the rule about boolean flag defaults. This flag was initially opt-in and became opt-out.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nterragrunt-include-module-prefix\n```\n\n----------------------------------------\n\nTITLE: Running Strict Linter with Makefile Recipe - Makefile\nDESCRIPTION: This Makefile command invokes a recipe named 'run-strict-lint' to trigger the strict GolangCI linter across relevant files, typically as part of CI or PR workflows. Requires proper Makefile setup and supporting linter configuration. Outputs any additional style errors and recommendations to the terminal.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nmake run-strict-lint\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Locally with go run (Bash)\nDESCRIPTION: This bash snippet demonstrates how to run Terragrunt locally using the Go runtime. The command invokes the main.go file with the 'plan' argument, which typically initializes a plan operation within Terragrunt. The only dependency required is Go installed on your system and the Terragrunt codebase available. The key parameter is \"plan\", indicating the operation to perform; outputs are shown on the terminal. No additional flags are used in this example.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go plan\n```\n\n----------------------------------------\n\nTITLE: Discouraged Boolean Flag Usage (Bash)\nDESCRIPTION: Shows the usage (`--color=false`) that would be required if a non-negated flag was used for a behavior enabled by default, which is discouraged by the Terragrunt CLI rules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n--color=false\n```\n\n----------------------------------------\n\nTITLE: Example Configuration File Comment in HCL\nDESCRIPTION: This snippet is a comment line used within a configuration file, likely HCL for Terragrunt or Terraform. Its purpose is solely informational, indicating that the containing file or section is an example.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/test/fixtures/stacks/no-stack/config/config.txt#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# example configuration file\n```\n\n----------------------------------------\n\nTITLE: Visualizing Terraform Module Structure (Tree)\nDESCRIPTION: Displays a sample directory layout where infrastructure components (vpc, database, app) are separated into distinct Terraform modules. This structure sets the stage for introducing Terragrunt's management capabilities for handling multiple modules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/02_features/02-stacks.md#_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\nroot\n├── backend-app\n│   └── main.tf\n├── frontend-app\n│   └── main.tf\n├── mysql\n│   └── main.tf\n├── redis\n│   └── main.tf\n└── vpc\n    └── main.tf\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Neovim Editor (Bash)\nDESCRIPTION: Launches the Neovim text editor, opening the current directory (`.`) as the project workspace. This is often used after setting environment variables like `GOFLAGS` to ensure the editor inherits the necessary context for development tasks.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nneovim .\n```\n\n----------------------------------------\n\nTITLE: Escaping Parentheses After Placeholders in Custom Log Format (Shell)\nDESCRIPTION: Illustrates how to include literal parentheses immediately following a placeholder in Terragrunt's custom log format. Using empty parentheses `()` after the placeholder (`%time()`) signals that no options are being passed, allowing subsequent parentheses `(plain-text)` to be treated as literal text.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/07-logging/02-formatting.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--log-custom-format \"%time()(plain-text)\"\n```\n\n----------------------------------------\n\nTITLE: Ensuring Bash Configuration File Exists\nDESCRIPTION: This shell command uses `touch` to create the `.bashrc` file in the user's home directory if it doesn't already exist. This file is used to configure the Bash shell, including setting up tab completion.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntouch ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for Terragrunt Binary (Manual Install)\nDESCRIPTION: This shell command grants execute permissions to the user for the downloaded Terragrunt binary file. This step is necessary after downloading the binary manually from the releases page on Linux and macOS systems to make it runnable.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod u+x terragrunt\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Front-Matter for Collection Documents - YAML\nDESCRIPTION: This YAML front-matter is intended for inclusion at the start of each document within a Jekyll collection. It dictates the layout, title, categories, description excerpt, tags, and manual ordering of documents in the collection browser. Dependencies include Jekyll, Collection Browser layouts, and use of specific layout/tag conventions. Users must change values (layout, title, categories, excerpt, tags, order) for each document. The 'order' parameter determines display order; the layout must be 'collection-browser-doc'. Inputs: document metadata; Outputs: visible doc metadata and sorting in the browser.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: collection-browser-doc  # <-- It has to be \"collection-browser-doc\"\ntitle: CLI options              # <-- [CHANGE THIS] doc's title\ncategories:                     # <-- [CHANGE THIS] use single category. (Downcase and dashes instead of spaces)\n  - getting-started\nexcerpt: >-                     # <-- [CHANGE THIS] doc's description\n  Terragrunt forwards all arguments and options to OpenTofu/Terraform. Learn more about CLI options in Terragrunt.\ntags: [\"CLI\", \"Another tag\"]    # <-- [CHANGE THIS] doc's tags\norder: 102                      # <-- [CHANGE THIS] set different number to each doc to set right order\n---\n```\n\n----------------------------------------\n\nTITLE: Terraform/OpenTofu Flag Prefix Example (Bash)\nDESCRIPTION: Example of a flag (`--tf-path`) using the `tf` prefix to indicate it controls a Terraform/OpenTofu setting (the path to the binary).\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n--tf-path\n```\n\n----------------------------------------\n\nTITLE: Running Terragrunt Integration Tests in Go\nDESCRIPTION: This command executes all integration tests located within the 'test' directory of the Terragrunt project using the standard Go testing tool. These tests verify interactions between different parts of the codebase and external services.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./test\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Terragrunt Retryable Errors List (Deprecated) in HCL\nDESCRIPTION: Shows the default list of regular expressions Terragrunt uses for the `retryable_errors` setting. This list defines which error messages, when encountered during Terragrunt operations, will trigger an automatic retry. This feature is deprecated and the `errors` block should be used instead.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/01-hcl/03-attributes.mdx#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nretryable_errors = [\n  \"(?s).*Failed to load state.*tcp.*timeout.*\",\n  \"(?s).*Failed to load backend.*TLS handshake timeout.*\",\n  \"(?s).*Creating metric alarm failed.*request to update this alarm is in progress.*\",\n  \"(?s).*Error installing provider.*TLS handshake timeout.*\",\n  \"(?s).*Error configuring the backend.*TLS handshake timeout.*\",\n  \"(?s).*Error installing provider.*tcp.*timeout.*\",\n  \"(?s).*Error installing provider.*tcp.*connection reset by peer.*\",\n  \"NoSuchBucket: The specified bucket does not exist\",\n  \"(?s).*Error creating SSM parameter: TooManyUpdates:.*\",\n  \"(?s).*app.terraform.io.*: 429 Too Many Requests.*\",\n  \"(?s).*ssh_exchange_identification.*Connection closed by remote host.*\",\n  \"(?s).*Client\\\\.Timeout exceeded while awaiting headers.*\",\n  \"(?s).*Could not download module.*The requested URL returned error: 429.*\",\n]\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore and Committing with Git - Bash\nDESCRIPTION: This bash snippet adds the .terragrunt-stack directory to the .gitignore file, then stages and commits the change using git. Dependencies include bash, git, and a writable repository. The script ensures that .terragrunt-stack directories are not tracked by version control, preventing accidental commits of generated files. Input is a running shell in the repository root; output is updated .gitignore and a new git commit tracking the change.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/04-terragrunt-stacks.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \".terragrunt-stack\" >> .gitignore\\ngit add .gitignore\\ngit commit -m \"Add .terragrunt-stack to .gitignore\"\n```\n\n----------------------------------------\n\nTITLE: Linting Markdown Files with Markdownlint CLI - Bash\nDESCRIPTION: This Bash snippet demonstrates running the markdownlint tool with certain rules disabled (MD013, MD024), targeting the docs directory recursively. Requires markdownlint to be installed. Ensures Markdown documentation meets style guidelines before PR submission. Outputs warnings/errors per file for formatting issues, but skips the specified rules.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarkdownlint \\\n    --disable MD013 MD024 \\\n    -- \\\n    docs\n```\n\n----------------------------------------\n\nTITLE: Running Go Integration Tests (Bash)\nDESCRIPTION: This command executes all integration tests located within the `./test` directory of the Terragrunt project. These tests often involve running Terragrunt commands against test fixtures.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./test\n```\n\n----------------------------------------\n\nTITLE: Running Specific Terragrunt Integration Tests in Go\nDESCRIPTION: This command runs a subset of integration tests within the 'test' directory. The `-run` flag filters tests based on a regular expression matching the test function name, allowing developers to focus on specific functionalities. Replace 'TestBeginningOfFunctionName*' with the desired pattern.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run 'TestBeginningOfFunctionName*' ./test\n```\n\n----------------------------------------\n\nTITLE: Discouraged Boolean Flag Naming (Bash)\nDESCRIPTION: Illustrates a less preferred way to handle boolean options (`--color`). Using this would require `--color=false` to disable color, violating the rule that the flag's default behavior should match Terragrunt's default.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n--color\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'log-custom-format' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'log-custom-format'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"log-custom-format\" />\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint Strict Linter on Changed Files (Bash)\nDESCRIPTION: This snippet demonstrates running the strict linter only on files changed relative to the 'main' branch. Requires git, golangci-lint, and the strict configuration file. The '--new-from-rev' option optimizes lint checks to only review modifications, reducing noise from unrelated legacy issues. Outputs only errors relevant to new/changed code.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run -c .strict.golangci.yml --new-from-rev origin/main ./...\n```\n\n----------------------------------------\n\nTITLE: Converting AsciiDoc to Markdown using Asciidoctor and Pandoc - Bash\nDESCRIPTION: This Bash command sequence converts an AsciiDoc file to Markdown by first transforming it to DocBook with Asciidoctor, and then using Pandoc to convert to GitHub-flavored Markdown. Requires both 'asciidoctor' and 'pandoc' installed. Inputs: 'input.adoc' file; outputs: 'output.md'. Key flags include line wrapping and markdown header style. Limitation: Intermediate 'input.xml' file is generated/overwritten; sequence must be run from a shell with both tools installed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nasciidoctor -b docbook input.adoc && pandoc -f docbook -t gfm input.xml -o output.md --wrap=none --atx-headers\n```\n\n----------------------------------------\n\nTITLE: Creating a Region Directory Structure - Shell/Bash\nDESCRIPTION: Demonstrates creating a new AWS region directory ('us-east-1') with Shell. This is preparatory tooling to separate configurations for multi-region infrastructure management. Requires appropriate filesystem permissions. 'mkdir' creates the directory, and has no output unless an error occurs.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/02-overview.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmkdir us-east-1\n```\n\n----------------------------------------\n\nTITLE: Documenting Logging Level Configuration - YAML\nDESCRIPTION: This YAML snippet defines the 'log-level' option for Terragrunt, specifying its description, type, and environment variable mapping. This configuration serves as metadata for Terragrunt options documentation, and does not require code dependencies or parameters. The snippet is intended for static documentation purposes, taking no dynamic input or output, and is used to inform users about available configuration fields.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/log-level.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: log-level\ndescription: Sets the logging level for Terragrunt.\ntype: string\nenv:\n  - TG_LOG_LEVEL\n---\n```\n\n----------------------------------------\n\nTITLE: Generating CPU and Memory Profiles for Go Tests (Bash/Go)\nDESCRIPTION: This command runs a specific Go test matching 'SomeTest' (`-run 'SomeTest'`) while generating performance profiles. The `-cpuprofile=cpu.prof` flag saves CPU profiling data to `cpu.prof`, and `-memprofile=mem.prof` saves memory profiling data to `mem.prof`. These files can be analyzed using tools like `go tool pprof`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/05_troubleshooting/03-performance.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run 'SomeTest' -cpuprofile=cpu.prof -memprofile=mem.prof\n```\n\n----------------------------------------\n\nTITLE: Updating Terragrunt Debug Flag Usage\nDESCRIPTION: Shows the migration path for the debug flag. The previous '--terragrunt-debug' flag needs to be changed to '--inputs-debug' for commands like 'terragrunt plan'.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/06-migrate/03-cli-redesign.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --terragrunt-debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nterragrunt plan --inputs-debug\n```\n\n----------------------------------------\n\nTITLE: Alternative Boolean Flag Example (Plaintext)\nDESCRIPTION: Shows an alternative flag (`forward-tf-stdout`) introduced to comply with boolean flag rules when the original flag's default behavior changed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nforward-tf-stdout\n```\n\n----------------------------------------\n\nTITLE: Defining the backend-require-bootstrap Flag (YAML Frontmatter)\nDESCRIPTION: This YAML-like frontmatter defines the `backend-require-bootstrap` configuration flag for Terragrunt. It specifies the flag's name, provides a description of its purpose (to error out if remote state needs bootstrapping), sets its data type to boolean (`bool`), and lists the corresponding environment variable (`TG_BACKEND_REQUIRE_BOOTSTRAP`) that can be used to set it.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/backend-require-bootstrap.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: backend-require-bootstrap\ndescription: |\n  When this flag is set, Terragrunt will throw an error if remote state needs to be created via the `backend bootstrap` command.\ntype: bool\nenv:\n  - TG_BACKEND_REQUIRE_BOOTSTRAP\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Flag Metadata (YAML)\nDESCRIPTION: This YAML block defines the metadata for the `queue-ignore-errors` flag in Terragrunt. It specifies the name ('queue-ignore-errors'), a brief description ('Continue processing Units even if a dependency fails.'), the data type ('bool'), and the corresponding environment variable ('TG_QUEUE_IGNORE_ERRORS'). This metadata is likely used for documentation generation or internal configuration management within the Terragrunt project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/queue-ignore-errors.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: queue-ignore-errors\ndescription: Continue processing Units even if a dependency fails.\ntype: bool\nenv:\n  - TG_QUEUE_IGNORE_ERRORS\n---\n```\n\n----------------------------------------\n\nTITLE: Defining the Terragrunt 'help' Parameter (YAML)\nDESCRIPTION: This YAML snippet defines the metadata for a 'help' parameter. It specifies the parameter's name as `help`, provides a brief description (\"Show help information.\"), and sets its data type to `bool` (boolean). This structure is likely used by Terragrunt or a related tool to understand and potentially process command-line flags or configuration options.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/help.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: help\ndescription: Show help information.\ntype: bool\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for a 404 Page\nDESCRIPTION: This snippet uses YAML front matter, common in Jekyll static site generator, to configure the metadata and layout for a 404 error page. It sets the URL (`permalink`, `slug`), the base layout (`layout`), display text (`title`, `subtitle`), and specific CSS classes (`classes`) for styling.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_pages/404/404.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npermalink: /404.html\nslug: 404\nlayout: subpage\ntitle: 404\nsubtitle: Page not found :(\nclasses: text-large text-center subpage-404\n---\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Go Integration Tests (Bash)\nDESCRIPTION: This command runs a specific subset of integration tests located in the `./test` directory, filtering by test function names that start with `TestBeginningOfFunctionName`. The `-run` flag accepts a regular expression for matching.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/03_community/01-contributing.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run 'TestBeginningOfFunctionName*' ./test\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Reopening VSCode Development Container\nDESCRIPTION: This is a command to be run from the VSCode Command Palette (not a shell command). It instructs the Dev Containers extension to rebuild the development container based on the current configuration and then reopen the current workspace within that container.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nDev Containers: Rebuild and Reopen in Container\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'strict-control' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'strict-control'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_9\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"strict-control\" />\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'log-show-abs-paths' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'log-show-abs-paths'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"log-show-abs-paths\" />\n```\n\n----------------------------------------\n\nTITLE: Illustrating Centralized Terraform Modules Structure\nDESCRIPTION: Represents the file structure for a central repository containing reusable Terraform modules (app, mysql, vpc). This structure is referenced by Terragrunt configurations to avoid code duplication.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/02-features/01-units.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- modules\n  - app\n    - main.tf\n  - mysql\n    - main.tf\n  - vpc\n    - main.tf\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'log-level' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'log-level'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"log-level\" />\n```\n\n----------------------------------------\n\nTITLE: Resulting Directory Structure After Stack Generation Using Tree\nDESCRIPTION: This tree snippet demonstrates the desired directory layout after generating stack-based unit code: a single stack configuration file alongside regenerated service, db, and asg directories, each with its own configuration. This format illustrates the outcomes of the migration before removing and ignoring unit directories.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/04-terragrunt-stacks.md#_snippet_5\n\nLANGUAGE: tree\nCODE:\n```\nnon-prod\n└── us-east-1\n    └── stateful-ec2-asg-service\n        ├── terragrunt.stack.hcl\n        ├── service\n        │   └── terragrunt.hcl ## This should be identical to the unit configuration before\n        ├── db\n        │   └── terragrunt.hcl ## This should be identical to the unit configuration before\n        └── sgs\n            └── asg/\n                └── terragrunt.hcl ## This should be identical to the unit configuration before\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Command Links in Astro\nDESCRIPTION: This Astro JSX snippet dynamically generates links for Terragrunt configuration commands. It iterates through the `configurationCommands` array, rendering a `LinkCard` for each command used to interact directly with Terragrunt configuration. The title is dynamically generated by joining the parts of the command's path.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n{\n    configurationCommands.map((doc) => (\n        <LinkCard title={doc.data.path.split('/').join(' ')} href={`/docs/reference/cli/commands/${doc.id}`} description={doc.data.description} />\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt >= 0.19 for Terraform < 0.12 (HCL)\nDESCRIPTION: Shows how to configure Terragrunt 0.19.x+ to use an older, non-default Terraform version (e.g., 0.11) located outside the system PATH. This requires setting the `terraform_binary` attribute to the specific executable path and adjusting the `terraform_version_constraint` attribute accordingly. This configuration is explicitly noted as unsupported and untested.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/06_migration_guides/02-upgrading_to_terragrunt_0.19.x.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nterraform_binary = \"~/bin/terraform-v11/terraform\"\nterraform_version_constraint = \">= 0.11\"\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Assume Role Session Duration Option - Terragrunt - YAML\nDESCRIPTION: This YAML snippet defines the metadata for the 'iam-assume-role-duration' configuration option in Terragrunt. It declares the option's name, description, data type, and associated environment variable ('TG_IAM_ASSUME_ROLE_DURATION'), which allows users to specify the validity period of IAM assume role temporary credentials. This configuration is required for customizing authentication duration in Terragrunt workflows and should be included in Terragrunt's settings when advanced AWS role management is needed.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/iam-assume-role-duration.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: iam-assume-role-duration\ndescription: Session duration for IAM Assume Role session.\ntype: string\nenv:\n  - TG_IAM_ASSUME_ROLE_DURATION\n---\n```\n\n----------------------------------------\n\nTITLE: Defining the engine-skip-check Parameter (YAML)\nDESCRIPTION: This YAML snippet defines the metadata for the `engine-skip-check` configuration parameter within a likely configuration file or documentation structure. It specifies the parameter's name, provides a brief description, indicates its type is boolean, and lists the corresponding environment variable `TG_ENGINE_SKIP_CHECK`.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/engine-skip-check.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: engine-skip-check\ndescription: Skip checksum check for Terragrunt engine files.\ntype: bool\nenv:\n  - TG_ENGINE_SKIP_CHECK\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Terragrunt Experiment Mode Parameter (YAML)\nDESCRIPTION: This YAML snippet defines the 'experiment-mode' parameter for Terragrunt. It sets the parameter name, provides a description ('Enables experiment mode for Terragrunt.'), specifies its data type as boolean, and lists the environment variable 'TG_EXPERIMENT_MODE' which can alternatively set this mode.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/experiment-mode.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: experiment-mode\ndescription: Enables experiment mode for Terragrunt.\ntype: boolean\nenv:\n  - TG_EXPERIMENT_MODE\n---\n```\n\n----------------------------------------\n\nTITLE: Linting Markdown Files with markdownlint (Bash)\nDESCRIPTION: This command checks all Markdown files in the 'docs' directory for style and formatting issues using markdownlint. Dependencies include the markdownlint CLI and any specified configuration for disabled rules (in this case, MD013 and MD024). The results are shown in the terminal, highlighting any markdown compliance issues.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarkdownlint \\\n    --disable MD013 MD024 \\\n    -- \\\n    docs\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Flag Naming for System Configuration (Log Level) (Bash)\nDESCRIPTION: Example illustrating flag naming when setting a configuration for a specific system. `--log-level` targets the `log` system and sets the `level` configuration.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--log-level\n```\n\n----------------------------------------\n\nTITLE: Rendering Backend Command Links in Astro\nDESCRIPTION: This Astro JSX snippet dynamically generates links for Terragrunt backend commands. It iterates through the `backendCommands` array, rendering a `LinkCard` for each command related to OpenTofu/Terraform state backends. The title is prefixed with 'backend '.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n{\n    backendCommands.map((doc) => (\n        <LinkCard title={\"backend \" + doc.data.name} href={`/docs/reference/cli/commands/${doc.id}`} description={doc.data.description} />\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Flag Case Convention (Plaintext)\nDESCRIPTION: Illustrates the `kebab-case` convention typically used for Terragrunt command-line flags.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nkebab-case\n```\n\n----------------------------------------\n\nTITLE: Rendering Catalog Command Links in Astro\nDESCRIPTION: This Astro JSX snippet dynamically generates links for Terragrunt catalog commands. It iterates through the `catalogCommands` array, rendering a `LinkCard` component for each command related to managing a Terragrunt catalog.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n{\n    catalogCommands.map((doc) => (\n        <LinkCard title={doc.data.name} href={`/docs/reference/cli/commands/${doc.id}`} description={doc.data.description} />\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'no-color' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'no-color'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"no-color\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Starlight Aside Component - JavaScript\nDESCRIPTION: This snippet imports the 'Aside' component from the '@astrojs/starlight/components' package for use within the documentation file. It enables the rendering of visually distinctive tips, notes, or warnings throughout the document. The only dependency is '@astrojs/starlight', and it is assumed that the environment is an Astro-based documentation project. No dynamic input or output is expected beyond documentation rendering.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/list-dependencies.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'experiment' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'experiment'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"experiment\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Terragrunt with Chocolatey on Windows\nDESCRIPTION: This command installs Terragrunt on Windows systems using the Chocolatey package manager. Chocolatey must be installed beforehand.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/_docs/01_getting-started/03-install.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchoco install terragrunt\n```\n\n----------------------------------------\n\nTITLE: Rendering Stack Command Links in Astro\nDESCRIPTION: This Astro JSX snippet dynamically generates links for Terragrunt stack commands. It maps over the `stackCommands` array, rendering a `LinkCard` for each command used when working with `terragrunt.stack.hcl` files. The title is prefixed with 'stack '.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n{\n    stackCommands.map((doc) => (\n        <LinkCard title={\"stack \" + doc.data.name} href={`/docs/reference/cli/commands/${doc.id}`} description={doc.data.description} />\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform/OpenTofu Flag Prefix (Plaintext)\nDESCRIPTION: Specifies the `tf` prefix used for Terragrunt flags that specifically control the behavior of the underlying OpenTofu or Terraform binary.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/99-rules.mdx#_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\ntf\n```\n\n----------------------------------------\n\nTITLE: Specifying Pre-Release Tag Naming Conventions - Markdown\nDESCRIPTION: Demonstrates a string format for pre-release tags in the Terragrunt project, showing the typical components: channel, date, and incremental number. This convention assists maintainers in distinguishing pre-release builds, ensuring clarity in the release process. No dependencies are required; this is an illustrative format for naming only.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/03-community/01-contributing.mdx#_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n`alpha2025022501`\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Aside Component - JavaScript (JSX)\nDESCRIPTION: This JSX import statement brings the 'Aside' component from the @astrojs/starlight library for use within this MDX documentation file. The Aside component is utilized to highlight important cautionary notes in the rendered documentation. Requires the @astrojs/starlight package and an MDX/JSX-capable documentation parser, such as Astro.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/no-auto-init.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component for 'log-format' Flag (Astro)\nDESCRIPTION: Invokes the custom `Flag` Astro component to display documentation details for the Terragrunt global flag identified by the slug 'log-format'. This component likely fetches and renders information associated with this specific flag.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/98-global-flags.mdx#_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n<Flag slug=\"log-format\" />\n```\n\n----------------------------------------\n\nTITLE: Importing the Aside Component - Astro Starlight - JavaScript\nDESCRIPTION: This JavaScript snippet imports the 'Aside' React component from the '@astrojs/starlight/components' package. This component is used in documentation to highlight cautionary or important notes to users. The import enables rendering of styled warning messages in UI layers, and requires the '@astrojs/starlight' package as a dependency.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/data/flags/no-destroy-dependencies-check.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Rendering Discovery Command Links in Astro\nDESCRIPTION: This Astro JSX snippet dynamically generates links for Terragrunt discovery commands. It maps over the `discoveryCommands` array, rendering a `LinkCard` component for each command used to discover units within a Terragrunt project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/04-reference/02-cli/01-overview.mdx#_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n{\n    discoveryCommands.map((doc) => (\n        <LinkCard title={doc.data.name} href={`/docs/reference/cli/commands/${doc.id}`} description={doc.data.description} />\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Terragrunt Version using mise\nDESCRIPTION: This command uses the mise tool manager to install a specific version (v0.72.5, derived from the GitHub API fetch) of Terragrunt. Mise allows managing multiple versions of tools like Terragrunt per project.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs-starlight/src/content/docs/01-getting-started/03-install.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmise install terragrunt v0.72.5\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Website Project Directory Structure (Text)\nDESCRIPTION: Illustrates the directory layout of the Terragrunt website project built with Jekyll. Shows key folders like `_docs` (main documentation content collection), `_includes` (reusable partials), `_layouts` (page templates), `_pages` (static site pages), `assets` (JS, CSS, images), and configuration files.\nSOURCE: https://github.com/gruntwork-io/terragrunt/blob/main/docs/README.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n|-- _docs                     # docs *collection*\n|-- _includes                 # partials\n|-- _layouts                  # layouts\n|-- _pages                    # static pages\n| |-- 404                     # \"404: Not found\" page\n| |-- cookie-policy           # \"Cookie Policy\" page\n| |-- docs                    # index page for *_docs* collection\n| |-- index                   # home page\n| |-- support                 # \"Support\" page\n|\n|-- _posts                    # Posts collection - empty and not used\n|-- _site                     # website generated by Jekyll\n|-- assets                    # Javascript, Stylesheets, and images\n|-- scripts                   # useful scripts to use in development\n| |-- convert_md_to_adoc      # contains the command to convert MD files to ADOC\n|\n|-- Gemfile\n|-- _config.yml               # Jekyll configuration file\n```"
  }
]