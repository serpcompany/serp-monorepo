[
  {
    "owner": "agno-agi",
    "repo": "agno",
    "content": "TITLE: Running Basic OpenAI Agent with Streaming\nDESCRIPTION: Command to run a basic OpenAI agent with streaming enabled, which displays responses incrementally as they're generated.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Pip command to install necessary Python packages including OpenAI, DuckDuckGo search, DuckDB, yfinance, and Agno libraries.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Exporting API Keys for Agno\nDESCRIPTION: Sets up environment variables for the OpenAI and Google API keys, which are required for Agno to interact with these services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\nexport GOOGLE_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent for Video Analysis\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent capable of analyzing video content provided as binary data, enabling tasks like action recognition, scene understanding, or content summarization.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/video_agent_input_bytes_content.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Installs the necessary Python libraries including OpenAI, LiteLLM, DuckDuckGo Search, DuckDB, yfinance, and agno packages.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai 'litellm' duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Building a Reasoning Finance Agent with Agno\nDESCRIPTION: This snippet demonstrates how to create a reasoning agent that generates a stock report on NVDA using YFinance tools and Claude's reasoning capabilities. The agent uses tables to display data and shows its reasoning process.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent import Agent\nfrom agno.models.anthropic import Claude\nfrom agno.tools.reasoning import ReasoningTools\nfrom agno.tools.yfinance import YFinanceTools\n\nagent = Agent(\n    model=Claude(id=\"claude-3-7-sonnet-latest\"),\n    tools=[\n        ReasoningTools(add_instructions=True),\n        YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True, company_news=True),\n    ],\n    instructions=[\n        \"Use tables to display data\",\n        \"Only output the report, no other text\",\n    ],\n    markdown=True,\n)\nagent.print_response(\"Write a report on NVDA\", stream=True, show_full_reasoning=True, stream_intermediate_steps=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Anthropic API Key\nDESCRIPTION: Command to set the ANTHROPIC_API_KEY environment variable, which is required for authenticating with the Anthropic API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=xxx\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with Structured Output\nDESCRIPTION: Executes a Python script that demonstrates an Azure OpenAI agent capable of returning responses in a structured format such as JSON. This is useful for applications that need to parse and process AI responses programmatically.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment and Running a Reasoning Agent\nDESCRIPTION: Shell commands to create a virtual environment, install dependencies, set API key, and run the reasoning agent. Uses uv for package management and Python 3.12.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv venv --python 3.12\nsource .venv/bin/activate\n\nuv pip install agno anthropic yfinance\n\nexport ANTHROPIC_API_KEY=sk-ant-api03-xxxx\n\npython reasoning_agent.py\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment named 'aienv'.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/rag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with Knowledge Base\nDESCRIPTION: Executes a Python script demonstrating an Azure OpenAI agent with knowledge base integration. This enables the agent to access and retrieve information from a pre-defined knowledge repository for more accurate and context-aware responses.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Knowledge Base and RAG\nDESCRIPTION: Advanced example of an agent with a PDF knowledge base for Thai cuisine, using LanceDB as a vector database with hybrid search. The agent combines knowledge retrieval with web searches when needed.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.embedder.openai import OpenAIEmbedder\nfrom agno.tools.duckduckgo import DuckDuckGoTools\nfrom agno.knowledge.pdf_url import PDFUrlKnowledgeBase\nfrom agno.vectordb.lancedb import LanceDb, SearchType\n\nagent = Agent(\n    model=OpenAIChat(id=\"gpt-4o\"),\n    description=\"You are a Thai cuisine expert!\",\n    instructions=[\n        \"Search your knowledge base for Thai recipes.\",\n        \"If the question is better suited for the web, search the web to fill in gaps.\",\n        \"Prefer the information in your knowledge base over the web results.\"\n    ],\n    knowledge=PDFUrlKnowledgeBase(\n        urls=[\"https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf\"],\n        vector_db=LanceDb(\n            uri=\"tmp/lancedb\",\n            table_name=\"recipes\",\n            search_type=SearchType.hybrid,\n            embedder=OpenAIEmbedder(id=\"text-embedding-3-small\"),\n        ),\n    ),\n    tools=[DuckDuckGoTools()],\n    show_tool_calls=True,\n    markdown=True\n)\n\n# Comment out after the knowledge base is loaded\nif agent.knowledge is not None:\n    agent.knowledge.load()\n\nagent.print_response(\"How do I make chicken and galangal in coconut milk soup\", stream=True)\nagent.print_response(\"What is the history of Thai curry?\", stream=True)\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with Knowledge Base\nDESCRIPTION: Command to run an OpenAI agent that can access and utilize a knowledge base for more informed responses.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent with Structured Output Capabilities\nDESCRIPTION: Executes a Python script that demonstrates using Gemini to generate JSON or other structured data formats as output, useful for parsing responses programmatically.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File for GitHub MCP Agent (Python)\nDESCRIPTION: This code snippet shows the command used to autogenerate the requirements file using the 'uv' tool. It specifies the exact versions of packages needed for the GitHub MCP Agent project, ensuring reproducibility and consistency across environments.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/github_mcp_agent/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with DuckDuckGo Search Tool\nDESCRIPTION: Executes a Python script demonstrating an Azure OpenAI agent with integrated tool capabilities, specifically using DuckDuckGo for web searches. This allows the agent to retrieve real-time information from the internet.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Mistral Agent with Structured Output\nDESCRIPTION: Executes a Mistral agent configured to return responses in a structured format, making it easier to parse and process the output programmatically.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/mistral/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment for Agno\nDESCRIPTION: Creates a Python virtual environment using venv and activates it for isolating the Agno development environment from other Python projects.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment in Shell\nDESCRIPTION: These commands create a Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openrouter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Mistral Agent with DuckDuckGo Search Tool\nDESCRIPTION: Executes a Mistral agent that incorporates the DuckDuckGo search tool for web information retrieval capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/mistral/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to run an OpenAI agent that can use the DuckDuckGo search engine as a tool to retrieve information from the web.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Groq Agent with Structured Output\nDESCRIPTION: Executes a Groq agent that returns structured output using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies (pip)\nDESCRIPTION: This command installs the required Python packages for interacting with Google Cloud Storage, OpenAI and DuckDuckGo. These packages provide the necessary libraries for authentication, storage operations, language model interactions, and web searches respectively.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/storage/gcs_storage/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install google-auth google-cloud-storage openai duckduckgo-search\n```\n\n----------------------------------------\n\nTITLE: Running Fireworks Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to execute a Fireworks AI agent with integrated DuckDuckGo search capabilities, enabling the agent to retrieve information from the web.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/fireworks/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/fireworks/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App for Medical Imaging Diagnosis Agent in Shell\nDESCRIPTION: This command launches the Streamlit app for the Medical Imaging Diagnosis Agent. The app is located in the cookbook examples directory and provides a web interface for interacting with the agent.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/medical_imaging/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/medical_imaging/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Azure AI Agent with Structured Output\nDESCRIPTION: Executes a Python script that runs an Azure AI agent capable of producing structured output. This is useful for generating machine-readable responses or specific data formats.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Pip command to install the necessary Python libraries: duckduckgo-search for web searches, duckdb for data processing, and agno for agent functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/perplexity/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U duckduckgo-search duckdb agno\n```\n\n----------------------------------------\n\nTITLE: Running Groq Agents in Python\nDESCRIPTION: This command runs a Python script to interact with Groq agents, which are AI agents powered by Groq's infrastructure.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/playground/groq_agents.py\n```\n\n----------------------------------------\n\nTITLE: Running WatsonX Agent with Structured Output\nDESCRIPTION: Command to run a WatsonX agent that returns responses in structured data formats rather than plain text.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ibm/watsonx/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running Anthropic Claude Agent with Knowledge Integration\nDESCRIPTION: Command to run an Anthropic Claude agent that utilizes knowledge integration capabilities using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running Llama Tutor Application with Streamlit\nDESCRIPTION: This command launches the Llama Tutor application using Streamlit, executing the main app.py file located in the project's cookbook directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/llama_tutor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/llama_tutor/app.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment\nDESCRIPTION: Sets up a Python virtual environment named 'aienv' and activates it for isolated package management. This ensures dependencies are contained and don't conflict with other Python projects.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Agent with OpenAI\nDESCRIPTION: Simple example of creating a basic agent using OpenAI's GPT-4o model without tools or knowledge. This agent is configured as an enthusiastic news reporter and demonstrates basic inference capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\n\nagent = Agent(\n    model=OpenAIChat(id=\"gpt-4o\"),\n    description=\"You are an enthusiastic news reporter with a flair for storytelling!\",\n    markdown=True\n)\nagent.print_response(\"Tell me about a breaking news story from New York.\", stream=True)\n```\n\n----------------------------------------\n\nTITLE: Running Anthropic Claude Agent with Structured Output\nDESCRIPTION: Command to run an Anthropic Claude agent that returns structured output using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running WatsonX Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to execute a WatsonX agent enhanced with DuckDuckGo search capabilities, allowing the agent to retrieve and use web information.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ibm/watsonx/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Groq Agent with DuckDuckGo Search Tool\nDESCRIPTION: Executes a Groq agent that utilizes DuckDuckGo search as a tool using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Fireworks Agent with Structured Output\nDESCRIPTION: Command to run a Fireworks AI agent that returns responses in a structured format, useful for programmatic parsing and processing of AI-generated content.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/fireworks/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/fireworks/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent with Storage Integration\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent with persistence capabilities, allowing it to store and retrieve information across different sessions or interactions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/storage.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to run an agent that can use external tools, specifically the DuckDuckGo search capability to retrieve information from the web.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama_tools/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent with Knowledge Enhancement\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent with additional knowledge sources or retrieval-augmented generation capabilities for more accurate and informed responses.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running Anthropic Claude Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to run an Anthropic Claude agent that utilizes the DuckDuckGo search tool using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent for Image Generation with DALL-E\nDESCRIPTION: Command to run an OpenAI agent that can generate images using DALL-E based on text prompts.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/generate_images.py\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Podify AI\nDESCRIPTION: Commands to create and activate a Python virtual environment for the Podify AI application. This isolates the project dependencies from other Python projects on the system.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/podcast_generator/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/podifyenv\nsource ~/.venvs/podifyenv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running DeepSeek Agent with DuckDuckGo Search Tool\nDESCRIPTION: Runs a DeepSeek agent that can use DuckDuckGo search as an external tool for retrieving information.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepseek/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepseek/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Anthropic Claude Agent with Memory Capabilities\nDESCRIPTION: Command to run an Anthropic Claude agent that uses memory capabilities using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/memory.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with DuckDuckGo Search Tool in Python\nDESCRIPTION: This command runs a Python script that demonstrates an AI agent using the DuckDuckGo search tool in conjunction with the Openrouter API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openrouter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openrouter/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running AWS Bedrock Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to execute a Python script that runs an AWS Bedrock agent integrated with DuckDuckGo search functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/bedrock/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running WatsonX Agent with Image Processing\nDESCRIPTION: Command to execute a WatsonX agent capable of processing and analyzing images using vision-enabled models.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ibm/watsonx/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Running Mistral Agent with Memory Capabilities\nDESCRIPTION: Executes a Mistral agent with memory features enabled, allowing it to maintain context across multiple interactions and queries.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/mistral/memory.py\n```\n\n----------------------------------------\n\nTITLE: Starting the Agentic RAG Application\nDESCRIPTION: Command to launch the Streamlit-based Agentic RAG application.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/agentic_rag/app.py\n```\n\n----------------------------------------\n\nTITLE: Running an agent with DuckDuckGo search capability\nDESCRIPTION: Executes a Python script demonstrating an agent enhanced with tool use capabilities, specifically the ability to perform DuckDuckGo web searches.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/nvidia/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/nvidia/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Session with Profile\nDESCRIPTION: Python code to initialize AWS session using a profile and create a Claude agent with specific model configuration.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nsession = boto3.Session(profile_name='MY-PROFILE')\nagent = Agent(\n    model=Claude(id=\"anthropic.claude-3-5-sonnet-20240620-v1:0\", session=session),\n    markdown=True\n)\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agents in Python\nDESCRIPTION: This command executes a Python script to run Gemini agents, which are AI agents based on Google's Gemini model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/playground/gemini_agents.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Agno\nDESCRIPTION: Installs the OpenAI and Agno Python packages, which are essential dependencies for working with Agno agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai agno  # And all other packages you might need\n```\n\n----------------------------------------\n\nTITLE: Running Alternative Gemini Agent for Image Analysis with File Upload\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent processing images uploaded as files rather than provided as raw bytes, offering a different approach to image analysis.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/image_agent_file_upload.py\n```\n\n----------------------------------------\n\nTITLE: Setting DeepInfra API Key\nDESCRIPTION: Export the DeepInfra API key as an environment variable\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepinfra/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DEEPINFRA_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Cohere Agent with Structured Output Capability\nDESCRIPTION: Command to execute a Cohere agent that returns responses in structured formats like JSON, which is useful for parsing and integration with other systems.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent for Image Analysis with Memory\nDESCRIPTION: Command to run an OpenAI agent that can analyze images while maintaining context memory of previous analyses.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/image_agent_with_memory.py\n```\n\n----------------------------------------\n\nTITLE: Running Claude Agent with Knowledge Base\nDESCRIPTION: Command to execute the Claude agent that utilizes a knowledge base.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/claude/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys\nDESCRIPTION: Commands to export required API keys for Anthropic and OpenAI services needed by UAgI\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/universal_agent_interface/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=***\nexport OPENAI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running JSON Output Agent\nDESCRIPTION: Command to run DeepInfra agent that returns structured JSON output based on a response model\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepinfra/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepinfra/json_output.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic AWS Bedrock Agent without Streaming\nDESCRIPTION: Command to execute a Python script that runs a basic AWS Bedrock agent without streaming.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/bedrock/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running PDF URL Knowledge Base Script\nDESCRIPTION: Executing the Python script for testing PDF URL knowledge base implementation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/agent_concepts/knowledge/pdf_url.py\n```\n\n----------------------------------------\n\nTITLE: Running PgVector with Docker\nDESCRIPTION: Docker command to run PgVector database container with specific configuration parameters.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -e POSTGRES_DB=ai \\\n  -e POSTGRES_USER=ai \\\n  -e POSTGRES_PASSWORD=ai \\\n  -e PGDATA=/var/lib/postgresql/data/pgdata \\\n  -v pgvolume:/var/lib/postgresql/data \\\n  -p 5532:5432 \\\n  --name pgvector \\\n  agnohq/pgvector:16\n```\n\n----------------------------------------\n\nTITLE: Exporting Azure OpenAI Environment Variables\nDESCRIPTION: Sets up required environment variables for authenticating and connecting to Azure OpenAI services. These variables include the API key, endpoint URL, API version, and deployment name needed for making API calls.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport AZURE_OPENAI_API_KEY=***\nexport AZURE_OPENAI_ENDPOINT=\"https://<your-resource-name>.openai.azure.com/openai/deployments/<your-deployment-name>\"\nexport AZURE_API_VERSION=\"2024-10-21\"  # Optional\nexport AZURE_DEPLOYMENT=***  # Optional\n```\n\n----------------------------------------\n\nTITLE: Executing Agentic RAG with PgVector\nDESCRIPTION: Python command to run the agentic RAG example using PgVector.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/rag/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/agent_concepts/rag/agentic_rag_pgvector.py\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Playground\nDESCRIPTION: Command to start the Agent UI web application for testing agents\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agents_from_scratch/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/agents_from_scratch/playground.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Memory Capabilities in LMStudio\nDESCRIPTION: Command to run an agent that uses memory functionality. This agent can recall information from previous interactions to maintain context.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/memory.py\n```\n\n----------------------------------------\n\nTITLE: Connecting Agents to Agent UI in Python\nDESCRIPTION: This Python script connects the agents to the Agno Agent UI, allowing for interaction with the agents through the provided interface.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/playground/demo.py\n```\n\n----------------------------------------\n\nTITLE: Running Azure AI Agent with Storage Capabilities\nDESCRIPTION: Executes a Python script that demonstrates an Azure AI agent with storage functionality. This allows the agent to persist and retrieve information across sessions or interactions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/storage.py\n```\n\n----------------------------------------\n\nTITLE: Running a Basic OpenAI Agent\nDESCRIPTION: Shell commands to install the required dependencies and run a basic agent using OpenAI's API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install agno openai\n\nexport OPENAI_API_KEY=sk-xxxx\n\npython basic_agent.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Vertex AI Environment Variables for Gemini\nDESCRIPTION: Sets up environment variables required to use Gemini models through Google Vertex AI. Requires specifying the Google Cloud project ID and region where the Vertex AI API is available.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_GENAI_USE_VERTEXAI=\"true\"\nexport GOOGLE_CLOUD_PROJECT=\"your-project-id\"\nexport GOOGLE_CLOUD_LOCATION=\"your-location\"\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent for Image Analysis\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent capable of analyzing and understanding images, performing tasks like object detection, image classification, or image description.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Running DeepSeek R1 Model Demo\nDESCRIPTION: Command to run a demonstration of the DeepSeek R1 model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/demo_deepseek_r1.py\n```\n\n----------------------------------------\n\nTITLE: Installing Project Requirements for Gemini Tutor\nDESCRIPTION: Command to install all the required Python packages for the Gemini Multimodal Learning Tutor from the requirements.txt file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/gemini-tutor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/gemini-tutor/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Exporting Fireworks API Key\nDESCRIPTION: Command to set the Fireworks API key as an environment variable for authentication with Fireworks AI services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/fireworks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport FIREWORKS_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running WatsonX Agent with Knowledge Base\nDESCRIPTION: Command to run a WatsonX agent that can access and utilize a knowledge base for enhanced responses.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ibm/watsonx/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent for Audio Processing\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent capable of interpreting and analyzing audio content provided as binary data, such as speech transcription or audio classification.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/audio_input_bytes_content.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Storage Integration\nDESCRIPTION: Command to run an agent that can utilize persistent storage capabilities to save and retrieve information between sessions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama_tools/storage.py\n```\n\n----------------------------------------\n\nTITLE: Setting ElevenLabs API Key\nDESCRIPTION: Command to export ElevenLabs API key as an environment variable\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agents_from_scratch/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ELEVENLABS_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Exporting API Keys for Model Access\nDESCRIPTION: Sets environment variables for API keys required to access various language models, with Claude 3 Sonnet recommended.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Launching Podify AI Streamlit Application\nDESCRIPTION: Command to start the Podify AI application using Streamlit. This launches the web interface where users can interact with the podcast generation features.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/podcast_generator/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/podcast_generator/app.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Command to export the OpenAI API key as an environment variable. This key is required for the application to communicate with OpenAI's services for content generation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/podcast_generator/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Cohere Agent with Storage Capability\nDESCRIPTION: Command to execute a Cohere agent that can use persistent storage mechanisms to save and retrieve data across sessions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/storage.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent for Image Interpretation\nDESCRIPTION: Command to run an agent that can interpret images using the vision model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Exporting DeepSeek API Key\nDESCRIPTION: Sets the DEEPSEEK_API_KEY environment variable for authentication with the DeepSeek API services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepseek/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DEEPSEEK_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Groq Agent with Knowledge Base\nDESCRIPTION: Executes a Groq agent that utilizes a knowledge base, defaulting to OpenAI embeddings but allowing for alternative embedders.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for MCP GitHub Agent\nDESCRIPTION: Command to set the OpenAI API key as an environment variable, which is required for the natural language processing capabilities of the GitHub MCP Agent.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/github_mcp_agent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your-openai-api-key\n```\n\n----------------------------------------\n\nTITLE: Running Groq Agent in Async Mode with Streaming\nDESCRIPTION: Executes a Groq agent in asynchronous mode with streaming enabled using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/async/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Keys for Paperpal\nDESCRIPTION: Commands to export the required API keys for OpenAI and Exa services that Paperpal uses for its functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/paperpal/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=sk-***\nexport EXA_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Basic OpenAI Agent without Streaming\nDESCRIPTION: Executes a Python script that demonstrates a basic Azure OpenAI agent without streaming. This script waits for the complete response before displaying it.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Azure AI Agent with Knowledge Utilization\nDESCRIPTION: Executes a Python script showcasing an Azure AI agent that leverages a knowledge base. This demonstrates the agent's ability to access and utilize pre-existing information or domain-specific knowledge.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running PgVector Docker Container (Manual Command)\nDESCRIPTION: Manually runs a PgVector Docker container with specified environment variables and port mapping.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -e POSTGRES_DB=ai \\\n  -e POSTGRES_USER=ai \\\n  -e POSTGRES_PASSWORD=ai \\\n  -e PGDATA=/var/lib/postgresql/data/pgdata \\\n  -v pgvolume:/var/lib/postgresql/data \\\n  -p 5532:5432 \\\n  --name pgvector \\\n  agnohq/pgvector:16\n```\n\n----------------------------------------\n\nTITLE: Exporting Openrouter API Key in Shell\nDESCRIPTION: This command sets the OPENROUTER_API_KEY environment variable, which is required for authenticating with the Openrouter API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openrouter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENROUTER_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Run Agent with Tools (DuckDuckGo)\nDESCRIPTION: This snippet executes a Python script named 'tool_use.py' located in the specified directory. This script likely demonstrates agent functionality with tool usage, specifically integrating DuckDuckGo Search.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm_openai/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/litellm_proxy/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running DeepSeek Agent for Structured Output\nDESCRIPTION: Executes a DeepSeek agent that returns responses in a structured format, useful for parsing and further processing.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepseek/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepseek/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running the Content Creator Workflow\nDESCRIPTION: Command to execute the main workflow script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/workflows/content_creator/readme.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython workflow.py\n```\n\n----------------------------------------\n\nTITLE: Start LiteLLM proxy server\nDESCRIPTION: This snippet starts the LiteLLM proxy server using the 'litellm' command.  It specifies the model to use (gpt-4o), host address (127.0.0.1), and port (4000).\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm_openai/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nlitellm --model gpt-4o --host 127.0.0.1 --port 4000\n```\n\n----------------------------------------\n\nTITLE: Running Basic AWS Bedrock Agent with Streaming\nDESCRIPTION: Command to execute a Python script that runs a basic AWS Bedrock agent with streaming enabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/bedrock/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running PgVector with Helper Script\nDESCRIPTION: Command to start PgVector database using a provided helper script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/scripts/run_pgvector.sh\n```\n\n----------------------------------------\n\nTITLE: Running Basic Claude Agent with Streaming\nDESCRIPTION: Command to execute the basic Claude agent with streaming enabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/claude/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Cohere Agent with Streaming\nDESCRIPTION: Command to execute a basic Cohere agent with streaming enabled, which allows for real-time text generation output.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Connecting Ollama Agents to Agent UI in Python\nDESCRIPTION: This Python script connects Ollama agents to the Agno Agent UI, allowing for interaction with fully local language models.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/playground/ollama_agents.py\n```\n\n----------------------------------------\n\nTITLE: Running AWS Bedrock Agent with Structured Output\nDESCRIPTION: Command to execute a Python script that runs an AWS Bedrock agent capable of returning structured output.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/bedrock/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Exporting API Keys in Shell\nDESCRIPTION: This snippet shows how to export API keys as environment variables, including OpenAI and Exa API keys. Additional keys can be exported as needed.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\n# If you need Exa search\nexport EXA_API_KEY=***\n...\n```\n\n----------------------------------------\n\nTITLE: Running Cohere Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to execute a Cohere agent that can use the DuckDuckGo search tool to access current information from the web.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Command to install necessary Python packages for working with IBM WatsonX, DuckDuckGo search capabilities, and the Agno framework.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U ibm-watsonx-ai duckduckgo-search agno\n```\n\n----------------------------------------\n\nTITLE: Running Basic Streaming Agent\nDESCRIPTION: Executes the basic Together AI agent with streaming enabled\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/together/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional API Keys for Additional Models\nDESCRIPTION: Sets optional environment variables for OpenAI, Anthropic, and Google API keys to enable additional language models in the Sage Answer Engine.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/answer_engine/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key_here\nexport ANTHROPIC_API_KEY=your_anthropic_key_here\nexport GOOGLE_API_KEY=your_google_key_here\n```\n\n----------------------------------------\n\nTITLE: Running Mistral Agent without Streaming\nDESCRIPTION: Executes a basic Mistral agent with streaming disabled, which returns complete responses all at once.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/mistral/basic.py\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Model\nDESCRIPTION: Command to pull the llama3.1:8b model using Ollama CLI.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nollama pull llama3.1:8b\n```\n\n----------------------------------------\n\nTITLE: Running Basic Non-Streaming Agent\nDESCRIPTION: Executes the basic Together AI agent without streaming\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/together/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic WatsonX Agent without Streaming\nDESCRIPTION: Command to run a basic IBM WatsonX agent with streaming disabled, which returns complete responses at once.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ibm/watsonx/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent with Flash Thinking Mode\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent using the 'flash thinking' capability, which allows the model to show its reasoning process step by step before providing the final answer.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/flash_thinking_agent.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI API Key\nDESCRIPTION: Command to export the OpenAI API key as an environment variable, required for using OpenAI models like gpt-4o with the VisionAI agent.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/vision_ai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with Storage Capabilities\nDESCRIPTION: Executes a Python script demonstrating an Azure OpenAI agent with persistent storage functionality. This allows the agent to save and retrieve information across multiple sessions or interactions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/storage.py\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for Tic Tac Toe Game\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/tic_tac_toe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Optional API Keys\nDESCRIPTION: Optional environment variables for additional model providers including Anthropic, Google, and Groq.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ANTHROPIC_API_KEY=your_anthropic_key_here\nexport GOOGLE_API_KEY=your_google_key_here\nexport GROQ_API_KEY=your_groq_key_here\n```\n\n----------------------------------------\n\nTITLE: Exporting Perplexity API Key as Environment Variable\nDESCRIPTION: Shell command to set the PERPLEXITY_API_KEY environment variable, which is required for authentication with the Perplexity API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/perplexity/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport PERPLEXITY_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running PgVector Docker Container (Helper Script)\nDESCRIPTION: Uses a helper script to run PgVector in a Docker container for vector search capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/scripts/run_pgvector.sh\n```\n\n----------------------------------------\n\nTITLE: Create and activate virtual environment\nDESCRIPTION: This snippet creates a virtual environment named 'aienv' and activates it.  It uses python3 to create the environment and then sources the activate script within the environment's 'bin' directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm_openai/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries\nDESCRIPTION: Installs necessary Python packages including the Mistral AI client, DuckDuckGo search utilities, DuckDB, yfinance for financial data, and Agno framework.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U mistralai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Running PgVector with Helper Script\nDESCRIPTION: Executes a helper script to run PgVector, which is used for vector search and data storage in the demo.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/scripts/run_pgvector.sh\n```\n\n----------------------------------------\n\nTITLE: Running Basic Azure AI Agent with Streaming\nDESCRIPTION: Executes a Python script to run a basic Azure AI agent with streaming enabled. This demonstrates real-time output from the AI model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Executing Traditional RAG with PgVector\nDESCRIPTION: Python command to run the traditional RAG example using PgVector.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/rag/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/agent_concepts/rag/traditional_rag_pgvector.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries\nDESCRIPTION: Command to install necessary Python packages including anthropic, duckduckgo-search, and agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -U anthropic duckduckgo-search agno\n```\n\n----------------------------------------\n\nTITLE: Running Claude Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to execute the Claude agent with DuckDuckGo search integration.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/claude/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Groq Research Agent with Exa\nDESCRIPTION: Executes a Groq research agent that uses Exa for enhanced research capabilities using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/research_agent_exa.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries with pip\nDESCRIPTION: This command installs all necessary Python libraries for the Agno Agent Playground, including OpenAI, Exa, DuckDuckGo search, yfinance, PyPDF, SQLAlchemy, FastAPI, YouTube transcript API, and Agno itself.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai exa_py duckduckgo-search yfinance pypdf sqlalchemy 'fastapi[standard]' youtube-transcript-api agno\n```\n\n----------------------------------------\n\nTITLE: Exporting Cohere API Key\nDESCRIPTION: Command to set the Cohere API key as an environment variable for authentication with Cohere services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CO_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Keys for AI Models\nDESCRIPTION: Shell commands to export required API keys for various AI models including OpenAI, Anthropic, Google, and Groq.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/tic_tac_toe/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Required for OpenAI models\nexport OPENAI_API_KEY=***\n\n# Optional - for additional models\nexport ANTHROPIC_API_KEY=***  # For Claude models\nexport GOOGLE_API_KEY=***     # For Gemini models\nexport GROQ_API_KEY=***       # For Groq models\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Web Search Tools\nDESCRIPTION: Example of an agent equipped with DuckDuckGo search tools to provide real information rather than fabricated content. This builds on the basic agent by adding web search capability.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.tools.duckduckgo import DuckDuckGoTools\n\nagent = Agent(\n    model=OpenAIChat(id=\"gpt-4o\"),\n    description=\"You are an enthusiastic news reporter with a flair for storytelling!\",\n    tools=[DuckDuckGoTools()],\n    show_tool_calls=True,\n    markdown=True\n)\nagent.print_response(\"Tell me about a breaking news story from New York.\", stream=True)\n```\n\n----------------------------------------\n\nTITLE: Installing PDF Processing Dependencies\nDESCRIPTION: Installing additional Python packages required for PDF processing functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install -U pypdf bs4\n```\n\n----------------------------------------\n\nTITLE: Exporting LITELLM API Key as Environment Variable\nDESCRIPTION: Sets up the LITELLM_API_KEY environment variable which is used for accessing AI models regardless of provider.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LITELLM_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running a Basic AI Agent with Streaming\nDESCRIPTION: Command to run a basic Hugging Face agent with streaming capabilities enabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/litellm/basic_hf.py\n```\n\n----------------------------------------\n\nTITLE: Running WatsonX Agent with Storage Capabilities\nDESCRIPTION: Command to execute a WatsonX agent with persistent storage functionality, allowing it to maintain state between interactions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ibm/watsonx/storage.py\n```\n\n----------------------------------------\n\nTITLE: Setting LiteLLM API Key\nDESCRIPTION: Exports the LITELLM_API_KEY environment variable for authentication with various AI model providers.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/agno/tests/integration/models/litellm_openai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LITELLM_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with Storage Capabilities\nDESCRIPTION: Command to run an OpenAI agent that can store and retrieve information from persistent storage.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/storage.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic DeepSeek Agent without Streaming\nDESCRIPTION: Executes a basic DeepSeek agent with streaming mode disabled, providing complete responses at once.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepseek/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepseek/basic.py\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys for Llama Tutor\nDESCRIPTION: This bash snippet demonstrates how to set up the necessary API keys for Groq and Exa in the .env file. Users need to replace the placeholder values with their actual API keys.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/llama_tutor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGROQ_API_KEY=your_groq_key_here\nEXA_API_KEY=your_exa_key_here\n```\n\n----------------------------------------\n\nTITLE: Exporting Azure AI Foundry Environment Variables\nDESCRIPTION: Sets required environment variables for Azure AI Foundry, including the API key, endpoint, and API version. These are essential for authenticating and accessing the Azure AI services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport AZURE_API_KEY=***\nexport AZURE_ENDPOINT=\"https://<your-host-name>.services.ai.azure.com/models\"\nexport AZURE_API_VERSION=\"2024-05-01-preview\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install all necessary Python packages for running Agno agents including OpenAI, DuckDuckGo, YFinance, and other dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/getting_started/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install openai duckduckgo-search yfinance lancedb tantivy pypdf requests exa-py newspaper4k lxml_html_clean sqlalchemy agno\n```\n\n----------------------------------------\n\nTITLE: Loading F1 Data into Database\nDESCRIPTION: Executes a Python script to load Formula 1 data into the PgVector database for use in the demo agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/demo/sql/load_f1_data.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with gcloud (gcloud)\nDESCRIPTION: This command authenticates the gcloud CLI session with your Google account, allowing the application to use your credentials to access Google Cloud resources. This is necessary to interact with GCS when using default credentials.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/storage/gcs_storage/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Installs necessary Python packages including openai client, search tools, database libraries, and the agno framework.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepseek/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Running Basic Agent with Streaming Enabled\nDESCRIPTION: Command to execute the basic agent with streaming capability turned on, allowing real-time output from the model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama_tools/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Performance Evaluation Environment in Shell\nDESCRIPTION: This snippet demonstrates how to set up a virtual environment for performance evaluation of Agno agents, including installing dependencies and running performance tests for both Agno and LangGraph.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Setup virtual environment\n./scripts/perf_setup.sh\nsource .venvs/perfenv/bin/activate\n# OR Install dependencies manually\n# pip install openai agno langgraph langchain_openai\n\n# Agno\npython evals/performance/instantiation_with_tool.py\n\n# LangGraph\npython evals/performance/other/langgraph_instantiation.py\n```\n\n----------------------------------------\n\nTITLE: Installing Chess Team Battle Dependencies\nDESCRIPTION: Command to install all required packages for the chess application using pip and the requirements file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/chess_team/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/chess_team/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with Memory Capabilities\nDESCRIPTION: Command to run an OpenAI agent that can remember context from previous interactions in a conversation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/memory.py\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for Medical Imaging Diagnosis Agent in Shell\nDESCRIPTION: This command installs the necessary Python packages for the Medical Imaging Diagnosis Agent project. The requirements are specified in a requirements.txt file located in the project's cookbook examples directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/medical_imaging/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/medical_imaging/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to export OpenAI API key as an environment variable\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agents_from_scratch/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Required API Keys for Sage Answer Engine\nDESCRIPTION: Sets the required environment variables for Groq and Exa API keys, which are essential for the core functionality of the Sage Answer Engine.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/answer_engine/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GROQ_API_KEY=your_groq_key_here\nexport EXA_API_KEY=your_exa_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Groq and AI Tools\nDESCRIPTION: Installs the necessary Python packages including Groq, DuckDuckGo search, DuckDB, yfinance, and Agno using pip.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U groq duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Launching GeoBuddy Streamlit App\nDESCRIPTION: Command to start the GeoBuddy application using Streamlit\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/geobuddy/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/geobuddy/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Sambanova Agent without Streaming\nDESCRIPTION: Command to execute the basic Sambanova agent with streaming disabled\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/sambanova/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/sambanova/basic.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries\nDESCRIPTION: Install necessary Python packages including OpenAI, DuckDuckGo Search, and Agno\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepinfra/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search agno\n```\n\n----------------------------------------\n\nTITLE: Running a basic streaming agent\nDESCRIPTION: Executes a Python script that demonstrates a basic agent with streaming capabilities enabled for real-time responses.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/nvidia/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/nvidia/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running xAI Grok Agents in Python\nDESCRIPTION: This command executes a Python script to run xAI Grok agents, which are specialized AI agents developed by xAI.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/playground/grok_agents.py\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the required Python packages listed in the requirements.txt file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/workflows/content_creator/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Various Agent Examples\nDESCRIPTION: Commands to run different types of agents in CLI mode for testing and debugging purposes\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agents_from_scratch/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/agents_from_scratch/simple_agent.py\npython cookbook/agents_from_scratch/agent_with_tools.py\npython cookbook/agents_from_scratch/agent_with_knowledge.py\npython cookbook/agents_from_scratch/agent_with_storage.py\npython cookbook/agents_from_scratch/agno_assist.py\n```\n\n----------------------------------------\n\nTITLE: Running Sambanova Agent with Streaming\nDESCRIPTION: Command to execute the basic Sambanova agent with streaming enabled\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/sambanova/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/sambanova/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic xAI Agent without Streaming\nDESCRIPTION: Command to run a basic xAI agent with streaming mode disabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/xai/basic.py\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Model\nDESCRIPTION: Command to pull the llama3.2 model from Ollama's repository for local use.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nollama pull llama3.2\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries for Vector Database Projects\nDESCRIPTION: This command installs the necessary Python libraries including qdrant-client, pypdf, openai, and agno for working with vector databases and AI.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -U qdrant-client pypdf openai agno\n```\n\n----------------------------------------\n\nTITLE: Launching the Sage Answer Engine Application\nDESCRIPTION: Starts the Streamlit application for the Sage Answer Engine, making it accessible through a web browser at localhost:8501.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/answer_engine/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run cookbook/examples/apps/answer_engine/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Non-Streaming Agent in LMStudio\nDESCRIPTION: Command to run a basic agent with streaming disabled. This executes the Python script for a standard LLM agent without streaming capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running the Streamlit Application\nDESCRIPTION: Command to start the Streamlit web application for the Tic Tac Toe game interface.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/tic_tac_toe/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/tic_tac_toe/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Knowledge Base\nDESCRIPTION: Command to run an agent that utilizes a knowledge base.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js and npm Installation for MCP GitHub Agent\nDESCRIPTION: Commands to check if Node.js, npm, and npx are properly installed by displaying their version numbers. These are required dependencies for running the MCP GitHub server.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/github_mcp_agent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\nnpm --version\nnpx --version\n```\n\n----------------------------------------\n\nTITLE: Running Claude Agent with Storage\nDESCRIPTION: Command to execute the Claude agent with storage capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/claude/storage.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic OpenAI Agent with Streaming\nDESCRIPTION: Executes a Python script that demonstrates a basic Azure OpenAI agent with streaming response capabilities. Streaming allows responses to be displayed incrementally as they are generated.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Streaming Agent with Cohere Model\nDESCRIPTION: Python command to execute a script that runs a basic agent with streaming enabled, using the Cohere model through the Perplexity API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/perplexity/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Agent without Streaming\nDESCRIPTION: Command to run a basic agent with streaming disabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/basic.py\n```\n\n----------------------------------------\n\nTITLE: Export LiteLLM API key\nDESCRIPTION: This snippet exports the LITELLM_API_KEY environment variable. This API key is required for LiteLLM to authenticate with the chosen model provider (e.g., OpenAI, Hugging Face, XAI).\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm_openai/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LITELLM_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running the Paperpal Streamlit Application\nDESCRIPTION: Command to launch the Paperpal application using Streamlit web framework.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/paperpal/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/use_cases/apps/paperpal/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Image-Capable Agent in LMStudio\nDESCRIPTION: Command to run an agent that can process image inputs. This agent accepts and analyzes images as part of its interaction capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Running PgVector with Docker\nDESCRIPTION: Docker command to run PgVector container with specified environment variables, volume mapping, and port configuration.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/rag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -e POSTGRES_DB=ai \\\n  -e POSTGRES_USER=ai \\\n  -e POSTGRES_PASSWORD=ai \\\n  -e PGDATA=/var/lib/postgresql/data/pgdata \\\n  -v pgvolume:/var/lib/postgresql/data \\\n  -p 5532:5432 \\\n  --name pgvector \\\n  agnohq/pgvector:16\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Run basic Agent with streaming\nDESCRIPTION: This snippet executes a Python script named 'basic_stream.py' located in the specified directory. The script likely demonstrates basic agent functionality with streaming enabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm_openai/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/litellm_proxy/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required Python packages from the requirements file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/agentic_rag/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Structured Output Capability\nDESCRIPTION: Command to execute an agent that returns data in a structured format, making it easier to parse and use in applications.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama_tools/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic WatsonX Agent with Streaming\nDESCRIPTION: Command to execute a basic IBM WatsonX agent with streaming enabled, which allows for real-time response generation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ibm/watsonx/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent for Image Analysis\nDESCRIPTION: Command to run an OpenAI agent that can analyze and interpret images, providing descriptions or answering questions about visual content.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages for MCP GitHub Agent\nDESCRIPTION: Command to install all necessary Python dependencies for the GitHub MCP Agent from the requirements.txt file located in the cookbook examples directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/github_mcp_agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r cookbook/examples/apps/github_mcp_agent/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Gemini API Key\nDESCRIPTION: Command to export the GEMINI_API_KEY as an environment variable, which is required for authenticating with the Gemini API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/gemini-tutor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport GEMINI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment for Gemini\nDESCRIPTION: Creates a Python virtual environment named 'aienv' and activates it for isolated package installation. This ensures dependencies for Gemini API don't conflict with system packages.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent for Audio Generation\nDESCRIPTION: Command to run an OpenAI agent that can generate audio outputs like speech or sounds based on text prompts.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/audio_output_agent.py\n```\n\n----------------------------------------\n\nTITLE: Installing GeoBuddy Dependencies\nDESCRIPTION: Command to install required packages from requirements.txt file\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/geobuddy/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/geobuddy/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment for Azure AI Interface\nDESCRIPTION: Sets up a Python virtual environment named 'aienv' and activates it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Starting the MCP GitHub Agent Streamlit Application\nDESCRIPTION: Command to launch the Streamlit application for the GitHub MCP Agent, which provides the user interface for querying GitHub repositories using natural language.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/github_mcp_agent/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run cookbook/examples/apps/github_mcp_agent/app.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Llama Tutor using pip\nDESCRIPTION: This command installs the required dependencies for Llama Tutor from the requirements.txt file located in the project's cookbook directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/llama_tutor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/llama_tutor/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent with Structured Output Capabilities\nDESCRIPTION: Command to run an OpenAI agent that returns responses in a predefined structured format, useful for parsing and processing by other systems.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Streaming Agent in Python\nDESCRIPTION: This command runs a Python script that implements a basic AI agent with streaming enabled using the Openrouter API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openrouter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openrouter/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running xAI Agent with Image Input and Memory\nDESCRIPTION: Command to run an xAI agent that can process images and maintain memory between interactions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/xai/image_agent_with_memory.py\n```\n\n----------------------------------------\n\nTITLE: Running PgVector Using Docker\nDESCRIPTION: Docker command to run PgVector database with specific configurations for environment variables, volume mapping, and port exposure.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -e POSTGRES_DB=ai \\\n  -e POSTGRES_USER=ai \\\n  -e POSTGRES_PASSWORD=ai \\\n  -e PGDATA=/var/lib/postgresql/data/pgdata \\\n  -v pgvolume:/var/lib/postgresql/data \\\n  -p 5532:5432 \\\n  --name pgvector \\\n  agnohq/pgvector:16\n```\n\n----------------------------------------\n\nTITLE: Setting Google API Key\nDESCRIPTION: Command to export the Google API key as an environment variable\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/geobuddy/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Creates and activates a Python virtual environment for isolating the project dependencies\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Cassandra Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Cassandra vector database implementation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/cassandra_db.py\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for Llama Tutor in Python\nDESCRIPTION: These commands create a Python virtual environment and activate it for the Llama Tutor project.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/llama_tutor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment for Groq\nDESCRIPTION: Sets up a Python virtual environment named 'aienv' and activates it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running the SQL Agent with Streamlit\nDESCRIPTION: Launches the SQL Agent web application using Streamlit, accessible at localhost:8501.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/sql_agent/app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Huggingface Token\nDESCRIPTION: Exports the Huggingface authentication token as an environment variable\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/huggingface/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport HF_TOKEN=***\n```\n\n----------------------------------------\n\nTITLE: Running Structured Output Agent\nDESCRIPTION: Executes an agent that returns structured output in a specific format\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/together/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Run MCP Server\nDESCRIPTION: This command starts a simple MCP server implemented in Python. It uses the SSE transport for communication.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/tools/mcp/sse_transport/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/tools/mcp/sse_transport/server.py\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Vector Database with Docker\nDESCRIPTION: This command runs a Qdrant vector database instance using Docker, mapping ports and a volume for persistent storage.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 6333:6333 -p 6334:6334 -v $(pwd)/qdrant_storage:/qdrant/storage:z qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Running Agent with DuckDuckGo Search Tool\nDESCRIPTION: Executes a Together AI agent with DuckDuckGo search capability\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/together/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agent for Audio Analysis\nDESCRIPTION: Command to run an OpenAI agent that can process and analyze audio inputs such as speech or sounds.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/audio_input_agent.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment in Shell\nDESCRIPTION: These commands create a Python virtual environment named '.venv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Multi-Agent Team with Agno in Python\nDESCRIPTION: This snippet demonstrates how to create a team of agents using Agno, including a web agent and a finance agent. It shows the setup of individual agents with specific roles and tools, and how to combine them into a team for coordinated task execution.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom agno.tools.duckduckgo import DuckDuckGoTools\nfrom agno.tools.yfinance import YFinanceTools\nfrom agno.team import Team\n\nweb_agent = Agent(\n    name=\"Web Agent\",\n    role=\"Search the web for information\",\n    model=OpenAIChat(id=\"gpt-4o\"),\n    tools=[DuckDuckGoTools()],\n    instructions=\"Always include sources\",\n    show_tool_calls=True,\n    markdown=True,\n)\n\nfinance_agent = Agent(\n    name=\"Finance Agent\",\n    role=\"Get financial data\",\n    model=OpenAIChat(id=\"gpt-4o\"),\n    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True)],\n    instructions=\"Use tables to display data\",\n    show_tool_calls=True,\n    markdown=True,\n)\n\nagent_team = Team(\n    mode=\"coordinate\",\n    members=[web_agent, finance_agent],\n    model=OpenAIChat(id=\"gpt-4o\"),\n    success_criteria=\"A comprehensive financial news report with clear sections and data-driven insights.\",\n    instructions=[\"Always include sources\", \"Use tables to display data\"],\n    show_tool_calls=True,\n    markdown=True,\n)\n\nagent_team.print_response(\"What's the market outlook and financial performance of AI semiconductor companies?\", stream=True)\n```\n\n----------------------------------------\n\nTITLE: Listing Project Dependencies in Plain Text\nDESCRIPTION: A simple list of project dependencies including agno, OpenAI API, Streamlit framework, Exa Python client, and arXiv API. This appears to be a requirements-style file listing essential packages needed for the project.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/paperpal/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nagno\nopenai\nstreamlit\nexa_py\narxiv\n```\n\n----------------------------------------\n\nTITLE: Running PgVector Database Test Script\nDESCRIPTION: This command executes a Python script to test the PgVector database implementation after setting up the Docker container.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/pg_vector.py\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for GeoBuddy\nDESCRIPTION: Commands to create and activate a Python virtual environment for GeoBuddy installation\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/geobuddy/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/geobuddyenv\nsource ~/.venvs/geobuddyenv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running PgVector Container with Docker\nDESCRIPTION: Alternative approach to run PgVector using a direct Docker command, configuring Postgres with the necessary environment variables and port mapping for the demo.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -e POSTGRES_DB=ai \\\n  -e POSTGRES_USER=ai \\\n  -e POSTGRES_PASSWORD=ai \\\n  -e PGDATA=/var/lib/postgresql/data/pgdata \\\n  -v pgvolume:/var/lib/postgresql/data \\\n  -p 5532:5432 \\\n  --name pgvector \\\n  agnohq/pgvector:16\n```\n\n----------------------------------------\n\nTITLE: Running Knowledge-Based Agent with Perplexity Model\nDESCRIPTION: Python command to execute a script for a knowledge-based agent using the Perplexity model, showcasing advanced capabilities of the API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/perplexity/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/perplexity/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic xAI Agent with Streaming\nDESCRIPTION: Command to run a basic xAI agent with streaming mode enabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/xai/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Structured Output\nDESCRIPTION: Command to run an agent that returns structured output.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: List of required Python packages including core dependencies like openai, requests, typing and utility packages like pydantic and python-dotenv. These represent the primary dependencies needed to run the project.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/workflows/content_creator/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nagno\nfirecrawl-py\nopenai\npackaging\nrequests\ntyping\npydantic\npython-dotenv\nrequests\n```\n\n----------------------------------------\n\nTITLE: Running Weaviate Vector Database Setup Script\nDESCRIPTION: This command runs a script to set up and configure the Weaviate vector database.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/scripts/run_weviate.sh\n```\n\n----------------------------------------\n\nTITLE: Running Anthropic Claude Agent for Image Analysis\nDESCRIPTION: Command to run an Anthropic Claude agent that performs image analysis using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Agno Project\nDESCRIPTION: A requirements file listing the necessary Python packages for the Agno project. The dependencies include Google's Generative AI and OpenAI packages for AI model integration, Streamlit for the user interface, Pillow for image processing, and DuckDuckGo Search for web search capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/geobuddy/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nagno\ngoogle-generativeai\nopenai\nstreamlit\npillow\nduckduckgo-search\n```\n\n----------------------------------------\n\nTITLE: Running Singlestore Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Singlestore vector database implementation after setting up the environment variables.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/singlestore.py\n```\n\n----------------------------------------\n\nTITLE: Setting Optional API Keys\nDESCRIPTION: Exports additional optional API keys for OpenAI, Google, and Groq as environment variables for testing different models with the demo agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\nexport GOOGLE_API_KEY=***\nexport GROQ_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys for UAgI\nDESCRIPTION: Sets environment variables for various API keys needed by UAgI, including OpenAI (required), Anthropic, Google, Groq, and GitHub token for MCP server access.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/mcp_agent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key_here\n\n# Optional keys for additional models\nexport ANTHROPIC_API_KEY=your_anthropic_key_here\nexport GOOGLE_API_KEY=your_google_key_here\nexport GROQ_API_KEY=your_groq_key_here\n\n# For GitHub MCP server\nexport GITHUB_TOKEN=your_github_token_here\n```\n\n----------------------------------------\n\nTITLE: Running Basic Agent Scripts\nDESCRIPTION: Commands to run basic DeepInfra agent with and without streaming\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepinfra/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepinfra/basic_stream.py\n```\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepinfra/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Streaming Agent in LMStudio\nDESCRIPTION: Command to run a basic agent with streaming enabled. This executes the Python script for a basic streaming LLM agent that processes responses in real-time.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install all necessary Python packages including Agno, OpenAI, DuckDuckGo, ElevenLabs, and other dependencies\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agents_from_scratch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install -U agno openai duckduckgo-search elevenlabs sqlalchemy 'fastapi[standard]' lancedb pylance tantivy pandas numpy\n```\n\n----------------------------------------\n\nTITLE: Granting GCS Admin Permissions (gcloud)\nDESCRIPTION: This command grants Storage Admin permissions to a specified user for a given Google Cloud project, allowing them to create and manage GCS buckets. Replace YOUR_PROJECT_ID and YOUR_EMAIL@example.com with your actual project ID and user email.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/storage/gcs_storage/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID \\\n    --member=\"user:YOUR_EMAIL@example.com\" \\\n    --role=\"roles/storage.admin\"\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Structured Output in LMStudio\nDESCRIPTION: Command to run an agent that returns structured output. This agent formats its responses in specific data structures rather than plain text.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required packages for the Tic Tac Toe game application from the requirements file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/tic_tac_toe/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/tic_tac_toe/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with UV for Python\nDESCRIPTION: Instructions for creating and activating a virtual environment using UV package manager with Python 3.12\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/universal_agent_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv venv .uagi-env --python 3.12\nsource .uagi-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies with Versions\nDESCRIPTION: This snippet enumerates the required Python packages along with their specific versions for the Agno project. It includes packages for HTTP requests, Docker integration, and their dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/infra/agno_docker/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ncertifi==2024.12.14\n    # via requests\ncharset-normalizer==3.4.1\n    # via requests\ndocker==7.1.0\n    # via agno-docker (libs/agno_docker/pyproject.toml)\nidna==3.10\n    # via requests\nrequests==2.32.3\n    # via docker\nurllib3==2.3.0\n    # via\n    #   docker\n    #   requests\n```\n\n----------------------------------------\n\nTITLE: Running ChromaDB Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the ChromaDB vector database implementation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/chroma_db.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries with UV\nDESCRIPTION: Command to install the Agno Python package and OpenAI library using the UV package manager. UV offers performance improvements over traditional pip.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/hackathon/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install -U agno openai\n```\n\n----------------------------------------\n\nTITLE: Running Basic Anthropic Claude Agent with Streaming\nDESCRIPTION: Command to run a basic Anthropic Claude agent with streaming enabled using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries for Gemini\nDESCRIPTION: Installs the necessary Python packages for working with Gemini models, including the Google Generative AI SDK, DuckDuckGo search tool, Yahoo Finance package, and Agno framework.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -U google-generativeai duckduckgo-search yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment for UAgI in Bash\nDESCRIPTION: Creates and activates a Python virtual environment for the UAgI project. This isolates the project dependencies from the system-wide Python installation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/mcp_agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running Mistral Agent with Streaming Enabled\nDESCRIPTION: Executes a basic Mistral agent with streaming mode enabled, which displays responses incrementally as they're generated.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/mistral/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Python Requirements File for Universal Agent Interface Project\nDESCRIPTION: This requirements file was autogenerated by uv and lists all Python package dependencies with their specific versions and the packages that require them. It includes AI framework libraries, web interface tools, database connectors, and utilities needed for the Universal Agent Interface application.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/universal_agent_interface/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\nagno==1.3.1\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\naiofiles==24.1.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\naltair==5.5.0\n    # via streamlit\nannotated-types==0.7.0\n    # via pydantic\nanthropic==0.49.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nanyio==4.9.0\n    # via\n    #   anthropic\n    #   google-genai\n    #   groq\n    #   httpx\n    #   openai\nattrs==25.3.0\n    # via\n    #   jsonschema\n    #   referencing\nbeautifulsoup4==4.13.3\n    # via\n    #   -r cookbook/examples/apps/universal_agent_interface/requirements.in\n    #   yfinance\nblinker==1.9.0\n    # via streamlit\ncachetools==5.5.2\n    # via\n    #   google-auth\n    #   streamlit\ncertifi==2025.1.31\n    # via\n    #   httpcore\n    #   httpx\n    #   requests\ncharset-normalizer==3.4.1\n    # via requests\nclick==8.1.8\n    # via\n    #   duckduckgo-search\n    #   streamlit\n    #   typer\ndeprecation==2.1.0\n    # via lancedb\ndistro==1.9.0\n    # via\n    #   anthropic\n    #   groq\n    #   openai\ndocstring-parser==0.16\n    # via agno\nduckdb==1.2.2\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nduckduckgo-search==8.0.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nexa-py==1.12.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nfrozendict==2.4.6\n    # via yfinance\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via\n    #   agno\n    #   streamlit\ngoogle-auth==2.38.0\n    # via google-genai\ngoogle-genai==1.10.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\ngroq==0.22.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\ngrpcio==1.71.0\n    # via\n    #   grpcio-tools\n    #   qdrant-client\ngrpcio-tools==1.71.0\n    # via qdrant-client\nh11==0.14.0\n    # via httpcore\nh2==4.2.0\n    # via httpx\nhpack==4.1.0\n    # via h2\nhttpcore==1.0.8\n    # via httpx\nhttpx==0.28.1\n    # via\n    #   agno\n    #   anthropic\n    #   exa-py\n    #   google-genai\n    #   groq\n    #   openai\n    #   qdrant-client\nhyperframe==6.1.0\n    # via h2\nidna==3.10\n    # via\n    #   anyio\n    #   httpx\n    #   requests\niniconfig==2.1.0\n    # via pytest\njinja2==3.1.6\n    # via\n    #   altair\n    #   pydeck\njiter==0.9.0\n    # via\n    #   anthropic\n    #   openai\njsonschema==4.23.0\n    # via altair\njsonschema-specifications==2024.10.1\n    # via jsonschema\nlancedb==0.21.2\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nlxml==5.3.2\n    # via\n    #   duckduckgo-search\n    #   python-docx\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==3.0.2\n    # via jinja2\nmdurl==0.1.2\n    # via markdown-it-py\nmultitasking==0.0.11\n    # via yfinance\nnarwhals==1.34.1\n    # via altair\nnest-asyncio==1.6.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nnumpy==2.2.4\n    # via\n    #   pandas\n    #   pydeck\n    #   qdrant-client\n    #   streamlit\n    #   yfinance\nopenai==1.73.0\n    # via\n    #   -r cookbook/examples/apps/universal_agent_interface/requirements.in\n    #   exa-py\noverrides==7.7.0\n    # via lancedb\npackaging==24.2\n    # via\n    #   altair\n    #   deprecation\n    #   lancedb\n    #   pytest\n    #   streamlit\npandas==2.2.3\n    # via\n    #   streamlit\n    #   yfinance\npeewee==3.17.9\n    # via yfinance\npillow==11.2.1\n    # via streamlit\nplatformdirs==4.3.7\n    # via yfinance\nplugg==1.5.0\n    # via pytest\nportalocker==2.10.1\n    # via qdrant-client\nprimp==0.14.0\n    # via duckduckgo-search\nprotobuf==5.29.4\n    # via\n    #   grpcio-tools\n    #   streamlit\npyarrow==19.0.1\n    # via\n    #   lancedb\n    #   streamlit\npyasn1==0.6.1\n    # via\n    #   pyasn1-modules\n    #   rsa\npyasn1-modules==0.4.2\n    # via google-auth\npydantic==2.11.3\n    # via\n    #   agno\n    #   anthropic\n    #   exa-py\n    #   google-genai\n    #   groq\n    #   lancedb\n    #   openai\n    #   pydantic-settings\n    #   qdrant-client\npydantic-core==2.33.1\n    # via pydantic\npydantic-settings==2.8.1\n    # via agno\npydeck==0.9.1\n    # via streamlit\npygments==2.19.1\n    # via rich\npypdf==5.4.0\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\npytest==8.3.5\n    # via pytest-mock\npytest-mock==3.14.0\n    # via exa-py\npython-dateutil==2.9.0.post0\n    # via pandas\npython-docx==1.1.2\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\npython-dotenv==1.1.0\n    # via\n    #   agno\n    #   pydantic-settings\npython-multipart==0.0.20\n    # via agno\npytz==2025.2\n    # via\n    #   pandas\n    #   yfinance\npyyaml==6.0.2\n    # via agno\nqdrant-client==1.13.3\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nreferencing==0.36.2\n    # via\n    #   jsonschema\n    #   jsonschema-specifications\nrequests==2.32.3\n    # via\n    #   exa-py\n    #   google-genai\n    #   streamlit\n    #   yfinance\nrich==14.0.0\n    # via\n    #   agno\n    #   typer\nrpds-py==0.24.0\n    # via\n    #   jsonschema\n    #   referencing\nrsa==4.9\n    # via google-auth\nsetuptools==78.1.0\n    # via grpcio-tools\nshellingham==1.5.4\n    # via typer\nsix==1.17.0\n    # via python-dateutil\nsmmap==5.0.2\n    # via gitdb\nsniffio==1.3.1\n    # via\n    #   anthropic\n    #   anyio\n    #   groq\n    #   openai\nsoupsieve==2.6\n    # via beautifulsoup4\nsqlalchemy==2.0.40\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\nstreamlit==1.44.1\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\ntantivy==0.22.2\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\ntenacity==9.1.2\n    # via streamlit\ntoml==0.10.2\n    # via streamlit\ntomli==2.2.1\n    # via agno\ntornado==6.4.2\n    # via streamlit\ntqdm==4.67.1\n    # via\n    #   lancedb\n    #   openai\ntyper==0.15.2\n    # via agno\ntyping-extensions==4.13.2\n    # via\n    #   agno\n    #   altair\n    #   anthropic\n    #   anyio\n    #   beautifulsoup4\n    #   exa-py\n    #   google-genai\n    #   groq\n    #   openai\n    #   pydantic\n    #   pydantic-core\n    #   python-docx\n    #   referencing\n    #   sqlalchemy\n    #   streamlit\n    #   typer\n    #   typing-inspection\ntyping-inspection==0.4.0\n    # via pydantic\ntzdata==2025.2\n    # via pandas\nurllib3==2.4.0\n    # via\n    #   qdrant-client\n    #   requests\nwebsockets==15.0.1\n    # via google-genai\nyfinance==0.2.55\n    # via -r cookbook/examples/apps/universal_agent_interface/requirements.in\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/fireworks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Requirements.txt Package Dependencies\nDESCRIPTION: Auto-generated list of Python package dependencies and their versions, including both direct and transitive dependencies. The file was generated using the uv tool and includes version pins and dependency relationships.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/mcp_agent/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# This file was autogenerated by uv via the following command:\\n#    ./generate_requirements.sh\\nagno==1.1.9\\n    # via -r cookbook/examples/apps/mcp_agent/requirements.in\\naltair==5.5.0\\n    # via streamlit\\nannotated-types==0.7.0\\n    # via pydantic\\nanthropic==0.49.0\\n    # via -r cookbook/examples/apps/mcp_agent/requirements.in\\nanyio==4.8.0\\n    # via\\n    #   anthropic\\n    #   google-genai\\n    #   groq\\n    #   httpx\\n    #   mcp\\n    #   openai\\n    #   sse-starlette\\n    #   starlette\n```\n\n----------------------------------------\n\nTITLE: Running MCP Agent Examples with Python\nDESCRIPTION: These commands demonstrate how to run the filesystem and GitHub MCP agent examples using Python. Each script creates an agent that interacts with the respective MCP server.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/tools/mcp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython filesystem.py\npython github.py\n```\n\n----------------------------------------\n\nTITLE: Pulling llama3.1:8b Model with Ollama\nDESCRIPTION: This command uses Ollama to pull the llama3.1:8b language model, which is required for running fully local Ollama agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nollama pull llama3.1:8b\n```\n\n----------------------------------------\n\nTITLE: Running Basic Agent without Streaming\nDESCRIPTION: Command to execute the basic agent without streaming, which returns complete responses all at once.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama_tools/basic.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Sage Answer Engine\nDESCRIPTION: Creates and activates a Python virtual environment for the Sage Answer Engine. This isolates the project dependencies from the system Python installation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/answer_engine/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment for Cohere Cookbook\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Basic OpenAI Agent without Streaming\nDESCRIPTION: Command to run a basic OpenAI agent without streaming, which displays complete responses only after they're fully generated.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openai/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Pinecone Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Pinecone vector database implementation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/pinecone_db.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for Chess Team Battle\nDESCRIPTION: Commands to create and activate a Python virtual environment to isolate project dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/chess_team/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running LanceDB Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the LanceDB vector database implementation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/lance_db.py\n```\n\n----------------------------------------\n\nTITLE: Installing Paperpal Requirements\nDESCRIPTION: Command to install the necessary Python packages for Paperpal from the requirements file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/paperpal/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/use_cases/apps/paperpal/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for MCP Agents\nDESCRIPTION: This command exports the OpenAI API key as an environment variable, which is required for running the MCP agents that use OpenAI's models.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/tools/mcp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"your_openai_api_key\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic Groq Agent without Streaming\nDESCRIPTION: Executes a basic Groq agent without streaming using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/basic.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Instructions for creating and activating a Python virtual environment for Agno development.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/getting_started/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Vector Database Projects\nDESCRIPTION: These commands create a Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Basic Fireworks Agent with Streaming\nDESCRIPTION: Command to execute a basic Fireworks AI agent with streaming responses enabled, which provides real-time output as the model generates it.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/fireworks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/fireworks/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Workflow Directory\nDESCRIPTION: Command to change the current directory to the workflow folder.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/workflows/content_creator/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd agno/workflows/content-creator-workflow\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Creates a new Python virtual environment and activates it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/game_generator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running an Agno Cookbook Example\nDESCRIPTION: Executes a Python script from the cookbook directory to run an Agno example or demonstration.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/.../example.py\n```\n\n----------------------------------------\n\nTITLE: Exporting Groq API Key\nDESCRIPTION: Sets the GROQ_API_KEY environment variable for authentication with Groq services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport GROQ_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Basic Azure AI Agent without Streaming\nDESCRIPTION: Executes a Python script to run a basic Azure AI agent without streaming. This provides a complete response at once, suitable for non-interactive applications.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/basic.py\n```\n\n----------------------------------------\n\nTITLE: Install required libraries\nDESCRIPTION: This snippet installs the necessary Python libraries using pip. It includes openai, litellm with proxy support, duckduckgo-search, duckdb, yfinance, and agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm_openai/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai 'litellm[proxy]' duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Running Basic Agent with Streaming\nDESCRIPTION: Command to run a basic agent with streaming enabled.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with UV Tool\nDESCRIPTION: Commands to create and activate a virtual environment using the UV tool, specifically with Python 3.12. UV is an alternative package manager for Python.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/hackathon/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv venv --python 3.12\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Exporting AWS Credentials\nDESCRIPTION: Shell commands to set AWS credentials as environment variables for authentication.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=***\nexport AWS_SECRET_ACCESS_KEY=***\nexport AWS_REGION=***\n```\n\n----------------------------------------\n\nTITLE: Running Basic Agent without Streaming\nDESCRIPTION: Executes the basic agent example with streaming disabled\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/huggingface/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/huggingface/basic.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for SQrL\nDESCRIPTION: Creates a Python virtual environment and activates it, which isolates the project dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Required API Keys\nDESCRIPTION: Required environment variable configuration for OpenAI API access.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_openai_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for SQL Agent\nDESCRIPTION: Installs the necessary dependencies for the SQL Agent application from the requirements file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/sql_agent/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a Reasoning Agent for Stock Analysis\nDESCRIPTION: Example of a reasoning agent that gathers information about NVDA stock using YFinance tools and presents it as a report with tables. This agent uses Claude's reasoning capabilities to analyze financial data.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agno.agent import Agent\nfrom agno.models.anthropic import Claude\nfrom agno.tools.reasoning import ReasoningTools\nfrom agno.tools.yfinance import YFinanceTools\n\nagent = Agent(\n    model=Claude(id=\"claude-3-7-sonnet-latest\"),\n    tools=[\n        ReasoningTools(add_instructions=True),\n        YFinanceTools(\n            stock_price=True,\n            analyst_recommendations=True,\n            company_info=True,\n            company_news=True,\n        ),\n    ],\n    instructions=[\n        \"Use tables to display data\",\n        \"Only output the report, no other text\",\n    ],\n    markdown=True,\n)\nagent.print_response(\n    \"Write a report on NVDA\",\n    stream=True,\n    show_full_reasoning=True,\n    stream_intermediate_steps=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with agno.app\nDESCRIPTION: This command authenticates the user with the agno.app service. It's a prerequisite for using the Agno Agent Playground.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nag auth\n```\n\n----------------------------------------\n\nTITLE: Setting Together API Key\nDESCRIPTION: Exports the Together API key as an environment variable for authentication\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport TOGETHER_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running xAI Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to run an xAI agent with DuckDuckGo search capability.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/xai/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Custom Ollama Client\nDESCRIPTION: Command to run an agent that manually sets the Ollama client.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/set_client.py\n```\n\n----------------------------------------\n\nTITLE: Start Fake GCS Server (docker-compose)\nDESCRIPTION: This command starts the fake GCS server defined in the docker-compose.yml file in detached mode. This allows testing the storage functionality locally without interacting with a real GCS bucket.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/storage/gcs_storage/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for LMStudio Agents\nDESCRIPTION: Command to install the necessary Python packages for working with LMStudio agents. Includes DuckDuckGo search, DuckDB, yfinance, and the Agno library.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -U duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Starting LiteLLM Proxy Server\nDESCRIPTION: Launches the LiteLLM proxy server using GPT-4 model on localhost port 4000.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/agno/tests/integration/models/litellm_openai/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nlitellm --model gpt-4o --host 127.0.0.1 --port 4000\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries\nDESCRIPTION: Installs the necessary Python packages: huggingface_hub and agno\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/huggingface/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U huggingface_hub agno\n```\n\n----------------------------------------\n\nTITLE: Running Agent with DuckDuckGo Search Tool\nDESCRIPTION: Commands to run DeepInfra agent with DuckDuckGo search integration in both sync and async modes\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepinfra/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepinfra/tool_use.py\n```\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepinfra/async_tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Phi4 Model Demo\nDESCRIPTION: Command to run a demonstration of the Phi4 model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/demo_phi4.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Agent with Streaming\nDESCRIPTION: Executes the basic agent example with streaming enabled\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/huggingface/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/huggingface/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Example Scripts\nDESCRIPTION: Collection of commands to run various example agent scripts from the cookbook directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/getting_started/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/01_basic_agent.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/02_agent_with_tools.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/03_agent_with_knowledge.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/04_agent_with_storage.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/05_agent_team.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/06_structured_output.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/07_write_your_own_tool.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/08_research_agent_exa.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/09_research_workflow.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/10_image_agent.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/11_generate_image.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/12_generate_video.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/13_audio_input_output.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/14_agent_state.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/15_agent_context.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/16_agent_session.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/17_user_memories_and_summaries.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/18_retry_function_call.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/getting_started/19_human_in_the_loop.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs the necessary Python libraries listed in the requirements file for the demo agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install -r cookbook/demo/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to run an agent that utilizes DuckDuckGo search as a tool.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Installing Podify AI Dependencies\nDESCRIPTION: Command to install all required packages for the Podify AI application from the requirements.txt file. This ensures all necessary libraries are available for the application to run properly.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/podcast_generator/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/podcast_generator/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Executes pytest test suites for basic functionality and tool usage integration tests.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/agno/tests/integration/models/litellm_openai/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npytest libs/agno/tests/integration/models/litellm_openai/test_basic.py -v\npytest libs/agno/tests/integration/models/litellm_openai/test_tool_use.py -v\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries with pip\nDESCRIPTION: Command to install the Agno Python package and OpenAI library using pip, the standard Python package manager. The -U flag ensures the latest versions are installed.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/hackathon/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -U agno openai\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolation\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepinfra/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running the VisionAI Application with Streamlit\nDESCRIPTION: Command to launch the VisionAI application using Streamlit, which will make the app available on the local server at port 8501.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/vision_ai/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/vision_ai/app.py\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Creates and activates a Python virtual environment named 'aienv' for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/agno/tests/integration/models/litellm_openai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Python Requirements File with Pinned Dependencies\nDESCRIPTION: A requirements.txt style file containing pinned Python package versions with nested dependency relationships shown in comments. Generated automatically by uv tool. Each package lists what other packages require it as a dependency.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# This file was autogenerated by uv via the following command:\\n#    ./generate_requirements.sh\\nagno==1.3.4\\n    # via -r cookbook/examples/apps/sql_agent/requirements.in\\naltair==5.5.0\\n    # via streamlit\\nannotated-types==0.7.0\\n    # via pydantic\\nanthropic==0.49.0\\n    # via -r cookbook/examples/apps/sql_agent/requirements.in\\nanyio==4.9.0\\n    # via\\n    #   anthropic\\n    #   google-genai\\n    #   groq\\n    #   httpx\\n    #   openai\n```\n\n----------------------------------------\n\nTITLE: Installing Agno via pip\nDESCRIPTION: Simple pip command to install or upgrade the Agno library.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -U agno\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries\nDESCRIPTION: Command to install the necessary Python packages (OpenAI and Agno) using pip\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/sambanova/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai agno\n```\n\n----------------------------------------\n\nTITLE: Running Image URL Processing Agent\nDESCRIPTION: Executes an agent that processes images from URLs\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/together/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolated dependency management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for Gemini Tutor\nDESCRIPTION: Commands to create and activate a Python virtual environment for the Gemini Multimodal Learning Tutor application. This isolates the project dependencies from the system Python installation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/gemini-tutor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Installs the necessary Python packages for working with Azure OpenAI, including the OpenAI SDK, search tools, database connectors, and financial data libraries. The '-U' flag ensures packages are updated to their latest versions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/openai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to export the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/getting_started/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Running a basic non-streaming agent\nDESCRIPTION: Executes a Python script that demonstrates a basic agent with streaming turned off, providing complete responses at once.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/nvidia/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/nvidia/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running xAI Agent with Direct Image Input\nDESCRIPTION: Command to run an xAI agent that can process images from byte data.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/xai/image_agent_bytes.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Virtual Environment for LMStudio\nDESCRIPTION: Commands to create a Python virtual environment and activate it for isolated package management. Creates an environment named 'aienv' in the user's home directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolated dependency management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepseek/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for agno Project\nDESCRIPTION: A list of required Python packages that need to be installed for the agno project to function. The dependencies include the project itself (agno), OpenAI API client, Streamlit web framework, Google's Generative AI API, and Anthropic's API client.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/parallel_world_builder/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nagno\nopenai\nstreamlit\ngoogle-generativeai\nanthropic\n```\n\n----------------------------------------\n\nTITLE: Exporting API Keys for AI Models\nDESCRIPTION: Environment variable configuration to set up API keys for various AI providers including OpenAI, Anthropic, Google, and Groq to enable different chess players.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/chess_team/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Required for OpenAI models\nexport OPENAI_API_KEY=***\n\n# Optional - for additional models\nexport ANTHROPIC_API_KEY=***  # For Claude models\nexport GOOGLE_API_KEY=***     # For Gemini models\nexport GROQ_API_KEY=***       # For Groq models\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Basic Claude Agent without Streaming\nDESCRIPTION: Command to execute the basic Claude agent without streaming.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/claude/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Cohere Agent with Memory Capability\nDESCRIPTION: Command to execute a Cohere agent that can maintain context and remember previous interactions within a session or across sessions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/memory.py\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment in Python\nDESCRIPTION: Commands to create a new Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/perplexity/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Pip command to install necessary Python libraries for the RAG project, including OpenAI, SQLAlchemy, psycopg, pgvector, lancedb, tantivy, pypdf, FastAPI, and agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/rag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai sqlalchemy \"psycopg[binary]\" pgvector lancedb tantivy pypdf sqlalchemy \"fastapi[standard]\" agno\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Agent Team in Shell\nDESCRIPTION: This snippet shows how to install the necessary dependencies (duckduckgo-search and yfinance) and run the agent team script using pip and Python commands in a shell environment.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npip install duckduckgo-search yfinance\n\npython agent_team.py\n```\n\n----------------------------------------\n\nTITLE: Exporting IBM WatsonX Credentials\nDESCRIPTION: Shell commands to set environment variables for IBM WatsonX API authentication, including API key, project ID, and optional service URL.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ibm/watsonx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport IBM_WATSONX_API_KEY=***\nexport IBM_WATSONX_PROJECT_ID=***\nexport IBM_WATSONX_URL=*** (optional, defaults to https://eu-de.ml.cloud.ibm.com)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Exports the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/game_generator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=sk-***\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Knowledge Base\nDESCRIPTION: Command to execute an agent that can access and utilize a knowledge base for more informed responses and reasoning.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama_tools/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for VisionAI\nDESCRIPTION: Command to install all required libraries for the VisionAI application from the requirements file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/vision_ai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/vision_ai/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment with UV\nDESCRIPTION: Creates a Python 3.12 virtual environment using UV package manager and activates it for the project.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv venv --python 3.12\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Basic Gemini Agent with Streaming Enabled\nDESCRIPTION: Executes a Python script that implements a basic Gemini agent with streaming response mode enabled. This allows receiving the generated response incrementally as it's being produced.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Gemini Agent with DuckDuckGo Tool Integration\nDESCRIPTION: Executes a Python script that demonstrates a Gemini agent using function calling to access the DuckDuckGo search engine for retrieving information from the web.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Command to install necessary Python packages including OpenAI client, DuckDuckGo search, DuckDB, YFinance, and Agno for the Fireworks AI agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/fireworks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: This pip command installs or upgrades the necessary Python libraries for running the AI agents, including openai, duckduckgo-search, duckdb, yfinance, and agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openrouter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Running Azure AI Agent with DuckDuckGo Search Tool\nDESCRIPTION: Executes a Python script that demonstrates an Azure AI agent using the DuckDuckGo search tool. This showcases the agent's ability to integrate external data sources.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/azure/openai/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Cohere Cookbook\nDESCRIPTION: Command to install all necessary Python packages including cohere, duckduckgo-search, duckdb, yfinance, and agno for the cookbook examples.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U cohere duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Gemini API Environment Variables\nDESCRIPTION: Sets up the environment variable required to authenticate with the Google Gemini API. The API key must be obtained from Google's developer console.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required packages for the parallel world builder application from requirements file\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/parallel_world_builder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/parallel_world_builder/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Pip command to install the necessary Python libraries including anthropic, duckduckgo-search, duckdb, yfinance, and agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U anthropic duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for Claude Knowledge Integration\nDESCRIPTION: Command to set the OPENAI_API_KEY environment variable, required for Claude's knowledge integration which uses OpenAI embeddings.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolated package management\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/parallel_world_builder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Generating Python Requirements File for Agno Project\nDESCRIPTION: This code snippet shows the command used to generate the requirements file for the Agno project. It uses the 'uv' tool to create a comprehensive list of dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/agno/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./scripts/generate_requirements.sh\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment in Python\nDESCRIPTION: Commands to create a new Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Loading Knowledge Base for SQL Agent\nDESCRIPTION: Loads table metadata, rules, and sample queries into a knowledge base used by the Agent for dynamic few-shot prompting.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/apps/sql_agent/load_knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Optional API Keys\nDESCRIPTION: Commands to export Google and Mistral API keys as environment variables for using alternative AI models with the VisionAI agent.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/vision_ai/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_API_KEY=***\nexport MISTRAL_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Installing UAgI Dependencies using pip\nDESCRIPTION: Installs the required Python packages for UAgI from the requirements.txt file located in the project's cookbook directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/mcp_agent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r cookbook/examples/apps/mcp_agent/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Session with Profile in Python\nDESCRIPTION: Python code to create an AWS session using a specified profile and initialize an agent with AWS Bedrock model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nsession = boto3.Session(profile_name='MY-PROFILE')\nagent = Agent(\n    model=AwsBedrock(id=\"mistral.mistral-small-2402-v1:0\", session=session),\n    markdown=True\n)\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for Windows PowerShell\nDESCRIPTION: PowerShell command to set environment variables for API keys on Windows systems. This example shows setting the OpenAI API key specifically.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/hackathon/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$env:OPENAI_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Testing Multimodal Agents in Python\nDESCRIPTION: This command runs a Python script to test multimodal agents, which can handle multiple types of input and output modalities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/playground/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/playground/multimodal_agents.py\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with Python's venv Module\nDESCRIPTION: Commands to create and activate a virtual environment using Python's built-in venv module. This isolates project dependencies from the system Python installation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/hackathon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Storage Capabilities\nDESCRIPTION: Command to run an agent that uses storage functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/storage.py\n```\n\n----------------------------------------\n\nTITLE: Setting Anthropic API Key\nDESCRIPTION: Exports the Anthropic API key as an environment variable, which is recommended for the demo agents to use claude-3-7-sonnet model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Basic Non-Streaming Agent with Cohere Model\nDESCRIPTION: Python command to run a script for a basic agent without streaming, using the Cohere model via the Perplexity API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/perplexity/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/basic.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Pip command to install or upgrade boto3, duckduckgo-search, and agno libraries for AWS Bedrock and agent functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -U boto3 duckduckgo-search agno\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Command to install all necessary Python packages including ollama, search capabilities, database access, and the agno framework.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U ollama duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Running Cohere Agent with Knowledge Base Integration\nDESCRIPTION: Command to execute a Cohere agent that can access and utilize a knowledge base for enhanced responses and functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Gemini Agent without Streaming\nDESCRIPTION: Executes a Python script that implements a basic Gemini agent without streaming, which returns the full response once generation is complete.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/google/gemini/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/google/gemini/basic.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys\nDESCRIPTION: Commands to set environment variables for OpenAI, Firecrawl, and Typefully API keys.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/workflows/content_creator/readme.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"your_openai_api_key_here\"\nexport FIRECRAWL_API_KEY=\"your_firecrawl_api_key_here\"\nexport TYPEFULLY_API_KEY=\"your_typefully_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Agent with Tools\nDESCRIPTION: Shell commands to install the DuckDuckGo search package and run an agent with web search tools.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npip install duckduckgo-search\n\npython agent_with_tools.py\n```\n\n----------------------------------------\n\nTITLE: Executing Agent with DuckDuckGo Search Tool\nDESCRIPTION: Python command to run an agent script that incorporates the DuckDuckGo search tool, demonstrating tool integration with the Cohere model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/perplexity/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MCP Agents with Agno\nDESCRIPTION: This command installs the required Python packages (agno, mcp, and openai) for running MCP agents using Agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/tools/mcp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agno mcp openai\n```\n\n----------------------------------------\n\nTITLE: Running Agent with DuckDuckGo Search Tool in LMStudio\nDESCRIPTION: Command to run an agent with the DuckDuckGo search tool integration. This agent can perform web searches using the DuckDuckGo API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies\nDESCRIPTION: Installing required Python packages including pgvector, psycopg, sqlalchemy, openai, and agno using pip.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -U pgvector \"psycopg[binary]\" sqlalchemy openai agno\n```\n\n----------------------------------------\n\nTITLE: Running Basic Cohere Agent without Streaming\nDESCRIPTION: Command to execute a basic Cohere agent with streaming disabled, which returns the complete output at once.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/cohere/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/cohere/basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Qdrant vector database implementation after setting up the Docker container.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/qdrant_db.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries\nDESCRIPTION: Command to install necessary Python packages including openai, duckduckgo-search, duckdb, yfinance, and agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Knowledge Base in LMStudio\nDESCRIPTION: Command to run an agent that utilizes a knowledge base. This agent can access and reason with structured knowledge repositories.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for VisionAI\nDESCRIPTION: Commands to create and activate a Python virtual environment for the VisionAI application to isolate its dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/vision_ai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Command to install necessary Python packages including ollama, duckduckgo-search, duckdb, yfinance, and agno.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U ollama duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for Vector Database Projects\nDESCRIPTION: This command sets the OpenAI API key as an environment variable for use in vector database projects.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=\"sk-...\"\n```\n\n----------------------------------------\n\nTITLE: Installing required Python libraries\nDESCRIPTION: Installs the latest versions of OpenAI and Agno Python packages needed for working with AI models and agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/nvidia/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai agno\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs necessary Python packages including OpenAI, LiteLLM proxy, and other supporting libraries.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/agno/tests/integration/models/litellm_openai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai 'litellm[proxy]' duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries\nDESCRIPTION: Installs the necessary Python packages including Together, OpenAI, and other dependencies\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U together openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Start LiteLLM proxy with Anthropic Claude\nDESCRIPTION: This snippet starts the LiteLLM proxy server, using a model from Anthropic (claude-3-sonnet-20240229) listening on host 127.0.0.1 and port 4000.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm_openai/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nlitellm --model claude-3-sonnet-20240229 --host 127.0.0.1 --port 4000\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Sets up and activates a dedicated Python virtual environment for AI development\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/huggingface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries for Azure AI Interface\nDESCRIPTION: Installs necessary Python packages including OpenAI, DuckDuckGo search, DuckDB, yfinance, and Agno using pip. These libraries are required for various functionalities of the AI agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/azure/ai_foundry/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -U openai duckduckgo-search duckdb yfinance agno\n```\n\n----------------------------------------\n\nTITLE: Exporting AWS Credentials for CLI Use\nDESCRIPTION: Shell commands to export AWS access key, secret key, and region as environment variables for AWS CLI authentication.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=***\nexport AWS_SECRET_ACCESS_KEY=***\nexport AWS_REGION=***\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/sambanova/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment on Windows\nDESCRIPTION: Windows-specific commands for creating and activating a virtual environment using Python's venv module. The activation path differs from Unix-based systems.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/hackathon/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv venv\nvenv\\scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running the Streamlit App for Gemini Tutor\nDESCRIPTION: Command to launch the Streamlit web application for the Gemini Multimodal Learning Tutor, making it accessible through a web browser.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/gemini-tutor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/gemini-tutor/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Structured Output in Python\nDESCRIPTION: This command executes a Python script showcasing an AI agent that returns structured output using the Openrouter API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openrouter/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openrouter/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running Claude Agent with Structured Output\nDESCRIPTION: Command to execute the Claude agent that returns structured output.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/claude/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/claude/structured_output.py\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Agents Application\nDESCRIPTION: Executes the main Python application file to start the demo agents server, making them available for interaction.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/demo/app.py\n```\n\n----------------------------------------\n\nTITLE: Exporting OpenAI API Key as Environment Variable\nDESCRIPTION: Sets up the OpenAI-specific API key as an environment variable for accessing OpenAI models like GPT-4o.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment\nDESCRIPTION: Sets up a dedicated Python virtual environment for AI development and activates it for the current session.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/workflows/content_creator/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running AWS Bedrock Agent with Knowledge Integration\nDESCRIPTION: Command to execute a Python script that runs an AWS Bedrock agent with integrated knowledge capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/bedrock/knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Running AWS Bedrock Agent with Storage Capabilities\nDESCRIPTION: Command to execute a Python script that runs an AWS Bedrock agent with storage functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/aws/bedrock/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/aws/bedrock/storage.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Non-Streaming Agent in Python\nDESCRIPTION: This command executes a Python script for a basic AI agent without streaming, utilizing the Openrouter API.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openrouter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/openrouter/basic.py\n```\n\n----------------------------------------\n\nTITLE: Exporting OpenAI API Key\nDESCRIPTION: Shell command to set the OPENAI_API_KEY environment variable for authentication with OpenAI services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/openai/chat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Image Processing Agent with Memory\nDESCRIPTION: Executes an agent that processes images and maintains conversation memory\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/together/image_agent_with_memory.py\n```\n\n----------------------------------------\n\nTITLE: Running Llama Essay Writer Agent\nDESCRIPTION: Executes an example of an essay writing agent using the Llama model\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/huggingface/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/huggingface/llama_essay_writer.py\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs required Python packages from the requirements.txt file located in the game generator project directory.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/game_generator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r cookbook/examples/apps/game_generator/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Exporting Nvidia API key as environment variable\nDESCRIPTION: Sets the NVIDIA_API_KEY environment variable which is required for authenticating with Nvidia's AI services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/nvidia/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport NVIDIA_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Manually Added Requirements Section\nDESCRIPTION: Additional requirements that were manually added to the autogenerated list, including packages for HTML parsing (BeautifulSoup), PostgreSQL database connectivity (psycopg), and PDF processing (pypdf).\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n#Missing Requirements(manually added)\nbeautifulsoup4==4.13.3\n soupsieve=0.4.0\n psycopg==3.2.6\n pypdf==5.4.0\n soupsieve==2.6\n```\n\n----------------------------------------\n\nTITLE: Running Clickhouse Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Clickhouse vector database implementation after setting up the Docker container.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/clickhouse.py\n```\n\n----------------------------------------\n\nTITLE: Running Clickhouse Vector Database with Docker\nDESCRIPTION: These commands provide two options for running Clickhouse: using a helper script or a direct Docker run command. The Docker command sets up environment variables, volume mappings, and port exposures for Clickhouse.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/run_clickhouse.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -e CLICKHOUSE_DB=ai \\\n  -e CLICKHOUSE_USER=ai \\\n  -e CLICKHOUSE_PASSWORD=ai \\\n  -e CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1 \\\n  -v clickhouse_data:/var/lib/clickhouse/ \\\n  -v clickhouse_log:/var/log/clickhouse-server/ \\\n  -p 8123:8123 \\\n  -p 9000:9000 \\\n  --ulimit nofile=262144:262144 \\\n  --name clickhouse-server \\\n  clickhouse/clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Exporting Google API Key for Medical Imaging Diagnosis Agent in Shell\nDESCRIPTION: This command sets the GOOGLE_API_KEY environment variable, which is likely required for accessing Google's APIs in the Medical Imaging Diagnosis Agent. The actual key should replace the asterisks.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/medical_imaging/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_API_KEY=****\n```\n\n----------------------------------------\n\nTITLE: Running an AI Agent with DuckDuckGo Search Tool\nDESCRIPTION: Command to run an agent that incorporates tool use, specifically with DuckDuckGo search functionality.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/litellm/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/litellm/tool_use.py\n```\n\n----------------------------------------\n\nTITLE: Running Milvus Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Milvus vector database implementation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/milvus.py\n```\n\n----------------------------------------\n\nTITLE: Running Anthropic Claude Agent with Storage Capabilities\nDESCRIPTION: Command to run an Anthropic Claude agent that uses storage capabilities using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/storage.py\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for xAI development.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Basic DeepSeek Agent with Streaming\nDESCRIPTION: Executes a basic DeepSeek agent with streaming mode enabled, which provides real-time responses.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepseek/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepseek/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Running Direct Image Processing Agent\nDESCRIPTION: Executes an agent that processes image bytes directly\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/together/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/together/image_agent_bytes.py\n```\n\n----------------------------------------\n\nTITLE: Exporting xAI API Key\nDESCRIPTION: Command to export the XAI_API_KEY environment variable for authentication.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport XAI_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Setting Sambanova API Key\nDESCRIPTION: Command to export the Sambanova API key as an environment variable for authentication\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/sambanova/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport SAMBANOVA_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Async Agent Scripts\nDESCRIPTION: Commands to run asynchronous DeepInfra agent with and without streaming\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/deepinfra/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepinfra/async_basic_stream.py\n```\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/deepinfra/async_basic.py\n```\n\n----------------------------------------\n\nTITLE: Running Weaviate Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Weaviate vector database implementation after running the setup script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/weaviate_db.py\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Instructions for creating a Python virtual environment using uv with Python 3.12\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agents_from_scratch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv --python 3.12\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Singlestore Database Environment Variables\nDESCRIPTION: These commands set environment variables for connecting to a Singlestore database, including host, port, credentials, and SSL certificate path.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport SINGLESTORE_HOST=\"localhost\"\nexport SINGLESTORE_PORT=\"3306\"\nexport SINGLESTORE_USERNAME=\"root\"\nexport SINGLESTORE_PASSWORD=\"admin\"\nexport SINGLESTORE_DATABASE=\"your_database_name\"\nexport SINGLESTORE_SSL_CA=\".certs/singlestore_bundle.pem\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Universal Agent Interface\nDESCRIPTION: Command to install required dependencies from requirements.txt file using UV pip\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/universal_agent_interface/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install -r cookbook/examples/apps/universal_agent_interface/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Vision Model\nDESCRIPTION: Command to pull the llama3.2-vision model for image interpretation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nollama pull llama3.2-vision\n```\n\n----------------------------------------\n\nTITLE: Running PgVector Using Helper Script\nDESCRIPTION: Executing PgVector database using a provided shell script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/run_pgvector.sh\n```\n\n----------------------------------------\n\nTITLE: Running PGVector in Docker for Groq Agent Storage\nDESCRIPTION: Starts a PGVector instance in a Docker container to be used as storage for Groq agents.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/run_pgvector.sh\n```\n\n----------------------------------------\n\nTITLE: Running Groq Image Analysis Agent\nDESCRIPTION: Executes a Groq agent capable of analyzing images using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Running Groq Agent with Storage\nDESCRIPTION: Executes a Groq agent that utilizes PGVector storage using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/storage.py\n```\n\n----------------------------------------\n\nTITLE: Running Qwen Model Demo\nDESCRIPTION: Command to run a demonstration of the Qwen model.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/demo_qwen.py\n```\n\n----------------------------------------\n\nTITLE: Running Basic Groq Agent with Streaming\nDESCRIPTION: Executes a basic Groq agent with streaming enabled using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/basic_stream.py\n```\n\n----------------------------------------\n\nTITLE: Launching Streamlit Application\nDESCRIPTION: Starts the Streamlit web application for the game generator interface.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/game_generator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/game_generator/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Memory\nDESCRIPTION: Command to run an agent that has memory capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/ollama/memory.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Agno\nDESCRIPTION: Command to authenticate with Agno services\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agents_from_scratch/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nag setup\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for Medical Imaging Diagnosis Agent in Shell\nDESCRIPTION: These commands create a virtual environment for the Medical Imaging Diagnosis Agent project and activate it. This isolates the project dependencies from the system-wide Python installation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/medical_imaging/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/cookbook_setup.py\nsource ./agnoenv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Loading F1 Dataset into Database\nDESCRIPTION: Loads the F1 dataset into the database for use with the SQL Agent.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/examples/apps/sql_agent/load_f1_data.py\n```\n\n----------------------------------------\n\nTITLE: Unix Environment Setup Commands\nDESCRIPTION: Commands for setting up and activating a virtual environment on Unix-based systems using uv package manager\nSOURCE: https://github.com/agno-agi/agno/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/dev_setup.sh\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Sage Answer Engine\nDESCRIPTION: Installs all required Python packages for the Sage Answer Engine from the specified requirements file.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/answer_engine/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r cookbook/examples/apps/answer_engine/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running the Chess Team Battle Application\nDESCRIPTION: Command to launch the Streamlit web interface for the chess game, which will be accessible via a local web server.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/chess_team/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/chess_team/app.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for Paperpal\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the Paperpal application dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/paperpal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Loading F1 Knowledge Base\nDESCRIPTION: Runs a Python script to load the Formula 1 knowledge base into the system for the demo agents to reference.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/demo/sql/load_knowledge.py\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for Fake GCS (yaml)\nDESCRIPTION: This Docker Compose configuration sets up a fake GCS server using the fsouza/fake-gcs-server image. It maps port 4443 to the host, sets the scheme to HTTP, and mounts a local directory for data storage, enabling local testing without real GCS.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/storage/gcs_storage/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  fake-gcs-server:\n    image: fsouza/fake-gcs-server:latest\n    ports:\n      - \"4443:4443\"\n    command: [\"-scheme\", \"http\", \"-port\", \"4443\", \"-public-host\", \"localhost\"]\n    volumes:\n      - ./fake-gcs-data:/data\n```\n\n----------------------------------------\n\nTITLE: Running PgVector Database with Docker\nDESCRIPTION: These commands provide two options for running PgVector: using a helper script or a direct Docker run command. The Docker command sets up environment variables, volume mapping, and port exposure for PostgreSQL with vector extensions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/run_pgvector.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -e POSTGRES_DB=ai \\\n  -e POSTGRES_USER=ai \\\n  -e POSTGRES_PASSWORD=ai \\\n  -e PGDATA=/var/lib/postgresql/data/pgdata \\\n  -v pgvolume:/var/lib/postgresql/data \\\n  -p 5532:5432 \\\n  --name pgvector \\\n  agnohq/pgvector:16\n```\n\n----------------------------------------\n\nTITLE: Launching Streamlit Application\nDESCRIPTION: Command to start the Streamlit application for the parallel world builder\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/parallel_world_builder/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/parallel_world_builder/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with Storage Capabilities in LMStudio\nDESCRIPTION: Command to run an agent that uses storage functionality. This agent can persist and retrieve data across sessions or interactions.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/lmstudio/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/lmstudio/storage.py\n```\n\n----------------------------------------\n\nTITLE: Initialize and Run the Agent (gcloud, python)\nDESCRIPTION: This sequence of commands initializes the gcloud environment, authenticates the application, and then executes the Python script that utilizes the GCSJsonStorage class for the Agno agent. It ensures the agent can access GCS with the correct credentials.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/storage/gcs_storage/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\ngcloud auth application-default login\npython gcs_json_storage_for_agent.py\n```\n\n----------------------------------------\n\nTITLE: Running PgVector with Helper Script\nDESCRIPTION: Command to run PgVector using a provided helper script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/rag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./cookbook/scripts/run_pgvector.sh\n```\n\n----------------------------------------\n\nTITLE: Exporting API Keys for Unix-based Systems\nDESCRIPTION: Commands to set environment variables for various API keys needed by Agno agents, including OpenAI, Google, and Eleven Labs. These are used for authentication when accessing these services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/hackathon/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\nexport GOOGLE_API_KEY=***\nexport ELEVEN_LABS_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a new Python virtual environment named 'aienv' and activate it for isolating the project dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Dependencies\nDESCRIPTION: Comprehensive requirements.txt file listing Python packages with exact versions and dependency chains. Generated automatically via uv tool, showing both direct and transitive dependencies with their relationships through comment annotations.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/chess_team/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\nagno==1.1.17\n    # via -r cookbook/examples/apps/chess_team/requirements.in\naltair==5.5.0\n    # via streamlit\nannotated-types==0.7.0\n    # via pydantic\nanthropic==0.49.0\n    # via -r cookbook/examples/apps/chess_team/requirements.in\nanyio==4.9.0\n    # via\n    #   anthropic\n    #   google-genai\n    #   groq\n    #   httpx\n    #   openai\nattrs==25.3.0\n    # via\n    #   jsonschema\n    #   referencing\nblinker==1.9.0\n    # via streamlit\ncachetools==5.5.2\n    # via\n    #   google-auth\n    #   streamlit\ncertifi==2025.1.31\n    # via\n    #   httpcore\n    #   httpx\n    #   requests\ncharset-normalizer==3.4.1\n    # via requests\nchess==1.11.2\n    # via python-chess\nclick==8.1.8\n    # via\n    #   streamlit\n    #   typer\n```\n\n----------------------------------------\n\nTITLE: Launching UAgI Application with Streamlit\nDESCRIPTION: Starts the UAgI application using Streamlit, making it accessible via a web browser at localhost:8501.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/mcp_agent/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run cookbook/examples/apps/mcp_agent/app.py\n```\n\n----------------------------------------\n\nTITLE: Running the Universal Agent Interface Application\nDESCRIPTION: Command to launch the Universal Agent Interface using Streamlit on localhost:8501\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/universal_agent_interface/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run cookbook/examples/apps/universal_agent_interface/app.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Command to export the required OpenAI API key as an environment variable\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/parallel_world_builder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=sk-***\n```\n\n----------------------------------------\n\nTITLE: Creating and activating a Python virtual environment\nDESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolated dependency management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/nvidia/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests Command\nDESCRIPTION: Command for running specific test files using pytest\nSOURCE: https://github.com/agno-agi/agno/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest ./libs/agno/tests/unit/utils/test_string.py\n```\n\n----------------------------------------\n\nTITLE: Configure Storage Emulator Host (bash)\nDESCRIPTION: This command sets the STORAGE_EMULATOR_HOST environment variable to point to the local fake GCS server.  Subsequent calls to the Google Cloud Storage client library will be directed to this endpoint, allowing for local testing. Then the python script is run.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/storage/gcs_storage/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport STORAGE_EMULATOR_HOST=\"http://localhost:4443\"\npython gcs_json_storage_for_agent.py\n```\n\n----------------------------------------\n\nTITLE: Exporting Mistral API Key\nDESCRIPTION: Exports the Mistral API key as an environment variable for authentication with Mistral AI services.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/mistral/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport MISTRAL_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Running Basic Fireworks Agent without Streaming\nDESCRIPTION: Command to run a basic Fireworks AI agent without streaming, which returns the complete response after the model has finished processing.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/fireworks/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/fireworks/basic.py\n```\n\n----------------------------------------\n\nTITLE: Windows Code Validation Commands\nDESCRIPTION: Commands for running code formatting and validation scripts on Windows systems\nSOURCE: https://github.com/agno-agi/agno/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.\\scripts\\format.bat\n.\\scripts\\validate.bat\n```\n\n----------------------------------------\n\nTITLE: Windows Environment Setup Commands\nDESCRIPTION: Commands for setting up and activating a virtual environment on Windows systems using uv package manager\nSOURCE: https://github.com/agno-agi/agno/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\\scripts\\dev_setup.bat\n.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Exporting Optional API Keys for Additional Models\nDESCRIPTION: Sets environment variables for optional API keys to test with alternate models.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/sql_agent/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=***\nexport GOOGLE_API_KEY=***\nexport GROQ_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: Comprehensive requirements.txt file listing all Python package dependencies with pinned versions and their dependency relationships. The file is auto-generated and includes both direct dependencies from requirements.in and their transitive dependencies.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/demo/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nagno==1.3.5\n    # via -r cookbook/demo/requirements.in\naltair==5.5.0\n    # via streamlit\nannotated-types==0.7.0\n    # via pydantic\nanthropic==0.49.0\n    # via -r cookbook/demo/requirements.in\nanyio==4.9.0\n    # via\n    #   anthropic\n    #   google-genai\n    #   groq\n    #   httpx\n    #   openai\n    #   starlette\n    #   watchfiles\n```\n\n----------------------------------------\n\nTITLE: Running Basic Anthropic Claude Agent without Streaming\nDESCRIPTION: Command to run a basic Anthropic Claude agent without streaming using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/anthropic/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/anthropic/basic.py\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies with Versions and Sources\nDESCRIPTION: This snippet provides a comprehensive list of Python packages, their exact versions, and the packages or files that require them. It's typically used to ensure consistent environments across different installations of the project.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/podcast_generator/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\nagno==1.1.0\n    # via -r requirements.in\naltair==5.5.0\n    # via streamlit\nannotated-types==0.7.0\n    # via pydantic\nanyio==4.8.0\n    # via\n    #   httpx\n    #   openai\nattrs==25.1.0\n    # via\n    #   jsonschema\n    #   referencing\nblinker==1.9.0\n    # via streamlit\ncachetools==5.5.1\n    # via streamlit\ncertifi==2025.1.31\n    # via\n    #   httpcore\n    #   httpx\n    #   requests\ncharset-normalizer==3.4.1\n    # via requests\nclick==8.1.8\n    # via\n    #   duckduckgo-search\n    #   streamlit\n    #   typer\ndistro==1.9.0\n    # via openai\ndocstring-parser==0.16\n    # via agno\nduckduckgo-search==7.3.2\n    # via -r requirements.in\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via\n    #   agno\n    #   streamlit\nh11==0.14.0\n    # via httpcore\nhttpcore==1.0.7\n    # via httpx\nhttpx==0.28.1\n    # via\n    #   agno\n    #   openai\nidna==3.10\n    # via\n    #   anyio\n    #   httpx\n    #   requests\njinja2==3.1.5\n    # via\n    #   altair\n    #   pydeck\njiter==0.8.2\n    # via openai\njsonschema==4.23.0\n    # via altair\njsonschema-specifications==2024.10.1\n    # via jsonschema\nlxml==5.3.1\n    # via duckduckgo-search\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==3.0.2\n    # via jinja2\nmdurl==0.1.2\n    # via markdown-it-py\nnarwhals==1.26.0\n    # via altair\nnumpy==2.2.2\n    # via\n    #   pandas\n    #   pydeck\n    #   streamlit\nopenai==1.62.0\n    # via -r requirements.in\npackaging==24.2\n    # via\n    #   altair\n    #   streamlit\npandas==2.2.3\n    # via streamlit\npillow==11.1.0\n    # via streamlit\nprimp==0.12.1\n    # via duckduckgo-search\nprotobuf==5.29.3\n    # via streamlit\npyarrow==19.0.0\n    # via streamlit\npydantic==2.10.6\n    # via\n    #   agno\n    #   openai\n    #   pydantic-settings\npydantic-core==2.27.2\n    # via pydantic\npydantic-settings==2.7.1\n    # via agno\npydeck==0.9.1\n    # via streamlit\npygments==2.19.1\n    # via rich\npython-dateutil==2.9.0.post0\n    # via pandas\npython-dotenv==1.0.1\n    # via\n    #   agno\n    #   pydantic-settings\npython-multipart==0.0.20\n    # via agno\npytz==2025.1\n    # via pandas\npyyaml==6.0.2\n    # via agno\nreferencing==0.36.2\n    # via\n    #   jsonschema\n    #   jsonschema-specifications\nrequests==2.32.3\n    # via streamlit\nrich==13.9.4\n    # via\n    #   agno\n    #   streamlit\n    #   typer\nrpds-py==0.22.3\n    # via\n    #   jsonschema\n    #   referencing\nshellingham==1.5.4\n    # via typer\nsix==1.17.0\n    # via python-dateutil\nsmmap==5.0.2\n    # via gitdb\nsniffio==1.3.1\n    # via\n    #   anyio\n    #   openai\nstreamlit==1.42.0\n    # via -r requirements.in\ntenacity==9.0.0\n    # via streamlit\ntoml==0.10.2\n    # via streamlit\ntomli==2.2.1\n    # via agno\ntornado==6.4.2\n    # via streamlit\ntqdm==4.67.1\n    # via openai\ntyper==0.15.1\n    # via agno\ntyping-extensions==4.12.2\n    # via\n    #   agno\n    #   altair\n    #   anyio\n    #   openai\n    #   pydantic\n    #   pydantic-core\n    #   referencing\n    #   streamlit\n    #   typer\ntzdata==2025.1\n    # via pandas\nurllib3==2.3.0\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Unix Code Validation Commands\nDESCRIPTION: Commands for running code formatting and validation scripts on Unix-based systems\nSOURCE: https://github.com/agno-agi/agno/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/format.sh\n./scripts/validate.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Optional API Keys\nDESCRIPTION: Commands to export optional Anthropic and Google API keys as environment variables\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/parallel_world_builder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport ANTHROPIC_API_KEY=***\nexport GOOGLE_API_KEY=***\n```\n\n----------------------------------------\n\nTITLE: Requirements File Generation Command for Agno AGI Project\nDESCRIPTION: The command used to autogenerate the requirements file using UV package manager. This appears at the top of the file as a comment.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/agentic_rag/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\n```\n\n----------------------------------------\n\nTITLE: Running xAI Agent with Image URL Input\nDESCRIPTION: Command to run an xAI agent that can process images from URLs.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/xai/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/xai/image_agent.py\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Specification for agno-aws\nDESCRIPTION: Defines the exact versions of required Python packages including AWS SDK (boto3) and its dependencies. Generated automatically via a script for version consistency.\nSOURCE: https://github.com/agno-agi/agno/blob/main/libs/infra/agno_aws/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nboto3==1.35.93\n    # via agno-aws (libs/infra/agno_aws/pyproject.toml)\nbotocore==1.35.93\n    # via\n    #   boto3\n    #   s3transfer\njmespath==1.0.1\n    # via\n    #   boto3\n    #   botocore\npython-dateutil==2.9.0.post0\n    # via botocore\ns3transfer==0.10.4\n    # via boto3\nsix==1.17.0\n    # via python-dateutil\nurllib3==2.3.0\n    # via botocore\n```\n\n----------------------------------------\n\nTITLE: Cloning the Content Creator Agent Workflow Repository\nDESCRIPTION: Command to clone the project repository from GitHub.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/workflows/content_creator/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/agno-agi/agno.git\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a new Python virtual environment named 'aienv' and activate it for isolated package management.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/ollama_tools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.venvs/aienv\nsource ~/.venvs/aienv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Run MCP Client\nDESCRIPTION: This command runs the MCP client implemented in Python. This client uses the `MCPTool` to communicate with the MCP server via SSE.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/tools/mcp/sse_transport/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython cookbook/tools/mcp/sse_transport/client.py\n```\n\n----------------------------------------\n\nTITLE: Running Mem0 Vector Database Test Script\nDESCRIPTION: This command executes a Python script to test the Mem0 vector database implementation.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/agent_concepts/knowledge/vector_dbs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/vector_dbs/mem0.py\n```\n\n----------------------------------------\n\nTITLE: Running Groq Agent in Async Mode without Streaming\nDESCRIPTION: Executes a Groq agent in asynchronous mode without streaming using a Python script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/models/groq/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npython cookbook/models/groq/async/basic.py\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: Comprehensive list of Python package dependencies with exact version numbers and their dependency relationships. The file was auto-generated using uv via the generate_requirements.sh script.\nSOURCE: https://github.com/agno-agi/agno/blob/main/cookbook/examples/apps/vision_ai/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\nagno==1.1.9\n    # via -r requirements.in\naltair==5.5.0\n    # via streamlit\nannotated-types==0.7.0\n    # via pydantic\nanyio==4.8.0\n    # via\n    #   google-genai\n    #   httpx\n    #   openai\nattrs==25.1.0\n    # via\n    #   jsonschema\n    #   referencing\nblinker==1.9.0\n    # via streamlit\ncachetools==5.5.2\n    # via\n    #   google-auth\n    #   streamlit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Agent with Knowledge Base\nDESCRIPTION: Shell commands to install the required packages for an agent with a knowledge base, including LanceDB, tantivy for hybrid search, PDF parsing, and web search capabilities.\nSOURCE: https://github.com/agno-agi/agno/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install lancedb tantivy pypdf duckduckgo-search\n\npython agent_with_knowledge.py\n```"
  }
]