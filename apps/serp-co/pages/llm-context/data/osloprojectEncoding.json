[
  {
    "owner": "oslo-project",
    "repo": "encoding",
    "content": "TITLE: Using Base64 Encoding/Decoding with @oslojs/encoding in TypeScript\nDESCRIPTION: Demonstrates how to import encoding functions, encode text data to Base64, and decode it back. The example shows converting a string to Uint8Array using TextEncoder before encoding.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeBase64, decodeBase64 } from \"@oslojs/encoding\";\n\nconst data: Uint8Array = new TextEncoder().encode(\"hello world\");\nconst encoded = encodeBase64(data);\nconst decoded = decodeBase64(encoded);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Base64 Encoding and Decoding with @oslojs/encoding in TypeScript\nDESCRIPTION: Demonstrates how to encode a string to Base64 format and decode it back using the @oslojs/encoding library. The example first converts a string to a Uint8Array using TextEncoder, then applies Base64 encoding and decoding operations.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeBase64, decodeBase64 } from \"@oslojs/encoding\";\n\nconst data: Uint8Array = new TextEncoder().encode(\"hello world\");\nconst encoded = encodeBase64(data);\nconst decoded = decodeBase64(encoded);\n```\n\n----------------------------------------\n\nTITLE: Standard Base64 Encoding and Decoding in TypeScript\nDESCRIPTION: Demonstrates basic Base64 encoding and decoding of text data using the @oslojs/encoding library. Converts text to Uint8Array, encodes it to Base64, and then decodes it back.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/examples/base64.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeBase64, decodeBase64 } from \"@oslojs/encoding\";\n\nconst data: Uint8Array = new TextEncoder().encode(\"hello world\");\nconst encoded = encodeBase64(data);\nconst decoded = decodeBase64(encoded);\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding with Base32 in TypeScript using @oslojs/encoding\nDESCRIPTION: This snippet demonstrates how to encode a string to Base32 and then decode it back using the @oslojs/encoding library. It uses the TextEncoder to convert the string to a Uint8Array for encoding, then encodes it to Base32 uppercase format, and finally decodes it back.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/examples/base32.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeBase32UpperCase, decodeBase32 } from \"@oslojs/encoding\";\n\nconst data: Uint8Array = new TextEncoder().encode(\"hello world\");\nconst encoded = encodeBase32UpperCase(data);\nconst decoded = decodeBase32(encoded);\n```\n\n----------------------------------------\n\nTITLE: Using Hex Encoding and Decoding Functions in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @oslojs/encoding package to encode binary data to uppercase or lowercase hex strings and decode hex strings back to binary data. The decodeHex function works with hex strings of either case.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/examples/hex.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeUpperCase, encodeHexLowerCase, decodeHex } from \"@oslojs/encoding\";\n\nconst data: Uint8Array = new TextEncoder().encode(\"hello world\");\nconst hex = encodeHexUpperCase(data);\nconst hex = encodeHexLowerCase(data);\nconst decoded = decodeHex(hex);\n```\n\n----------------------------------------\n\nTITLE: URL-safe Base64url Encoding and Decoding in TypeScript\nDESCRIPTION: Shows the implementation of URL-safe Base64url encoding and decoding using the @oslojs/encoding library. Uses the URL-safe variant which is safe for use in URLs and filenames.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/examples/base64.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeBase64url, decodeBase64url } from \"@oslojs/encoding\";\n\nconst data: Uint8Array = new TextEncoder().encode(\"hello world\");\nconst encoded = encodeBase64url(data);\nconst decoded = decodeBase64url(encoded);\n```\n\n----------------------------------------\n\nTITLE: Defining encodeBase64 Function in TypeScript\nDESCRIPTION: This snippet defines the encodeBase64 function signature in TypeScript. It takes a Uint8Array as input and returns a base64 encoded string. The function implements canonical base64 encoding based on RFC 4648 §4 with padding.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase64.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase64(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining decodeBase64 Function in TypeScript\nDESCRIPTION: Function signature for decodeBase64() which takes a base64 encoded string and returns a Uint8Array. The function requires canonical input with proper padding according to RFC 4648 §4.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/decodeBase64.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeBase64(encoded: string): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining encodeBase64url() Function in TypeScript\nDESCRIPTION: Function signature for encodeBase64url() which takes a Uint8Array of bytes and returns a string encoded in canonical base64 with url-safe alphabet including padding.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase64url.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase64url(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining decodeBase64url() Function in TypeScript\nDESCRIPTION: Function signature for decoding base64url encoded strings into byte arrays according to RFC 4648 §5. The function takes a base64url encoded string and returns a Uint8Array. It requires canonical encoding with padding and throws an Error if the encoding is invalid.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/decodeBase64url.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeBase64url(encoded: string): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining encodeBase64NoPadding Function in TypeScript\nDESCRIPTION: This function signature defines encodeBase64NoPadding, which takes a Uint8Array as input and returns a string. It encodes the input byte array into canonical base64 format without padding, following RFC 4648 §6 specifications.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase64NoPadding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase64NoPadding(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining encodeBase64urlNoPadding Function in TypeScript\nDESCRIPTION: Function signature for encoding a byte array into canonical base64 with url-safe alphabet based on RFC 4648 §5 without padding. The function takes a Uint8Array as input and returns a string representation.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase64urlNoPadding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase64urlNoPadding(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Base64 Decoding Function with Padding Tolerance in TypeScript\nDESCRIPTION: TypeScript function definition for decodeBase64IgnorePadding(), which takes a base64 encoded string and converts it to a Uint8Array. The function tolerates missing padding characters and follows RFC 4648 §5 standards, throwing an Error for invalid encodings.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/decodeBase64IgnorePadding.md#2025-04-12_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction decodeBase64IgnorePadding(encoded: string): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining decodeBase64IgnorePadding function in TypeScript\nDESCRIPTION: Function signature for decoding a base64 encoded string with url-safe alphabet into a byte array. It follows RFC 4648 §5 standards and can handle strings with partial or missing padding, but requires canonical encoding. The function throws an Error if the encoding is invalid.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/decodeBase64urlIgnorePadding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeBase64IgnorePadding(encoded: string): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining the encodeBase32 Function in TypeScript\nDESCRIPTION: Function signature for encodeBase32 that takes a Uint8Array and returns a base32 encoded string. This implementation follows the canonical base32 encoding defined in RFC 4648 §6, using uppercase letters and including padding.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase32.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase32(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Base32 Decoding Function in TypeScript\nDESCRIPTION: Function signature for decoding a base32 encoded string into a Uint8Array. The function requires a canonical encoded string with padding and throws an Error if the encoding is invalid. It supports both uppercase and lowercase letter variants.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/decodeBase32.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeBase32(encoded: string): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Encoding Bytes to Base32 Upper Case in TypeScript\nDESCRIPTION: Function signature for encoding a Uint8Array into canonical base32 string using uppercase letters and padding, compliant with RFC 4648 §6. Takes a byte array as input and returns the base32 encoded string.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase32UpperCase.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase32UpperCase(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Encoding Bytes to Base32 (Upper Case, No Padding) in TypeScript\nDESCRIPTION: Function signature for encoding a Uint8Array of bytes into canonical base32 format with upper case letters and no padding, following RFC 4648 §6 specifications.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase32UpperCaseNoPadding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase32UpperCaseNoPadding(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Base32 Lower Case Encoder in TypeScript\nDESCRIPTION: Function signature for encoding a Uint8Array into a base32 string using lowercase letters and padding according to RFC 4648 §6 specification. Takes a bytes parameter as Uint8Array input and returns the encoded string.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase32LowerCase.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase32LowerCase(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Base32 Encoding Function with Lower Case and No Padding in TypeScript\nDESCRIPTION: Function signature for encoding a byte array into canonical base32 based on RFC 4648 §6, using lower case letters and omitting padding. It takes a Uint8Array as input and returns the encoded string.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase32LowerCaseNoPadding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase32LowerCaseNoPadding(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Definition of encodeBase32NoPadding() in TypeScript\nDESCRIPTION: Function signature for encodeBase32NoPadding() which takes a Uint8Array as input and returns a string. This function has been replaced by encodeBase32UpperCaseNoPadding().\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeBase32NoPadding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeBase32NoPadding(bytes: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining decodeBase32IgnorePadding Function in TypeScript\nDESCRIPTION: Function signature for decoding base32 strings into byte arrays. This function accepts a string parameter and returns a Uint8Array, throwing an Error if the encoding is invalid. It handles strings with missing or partial padding.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/decodeBase32IgnorePadding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeBase32IgnorePadding(encoded: string): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining encodeHexUpperCase() Function in TypeScript\nDESCRIPTION: Function signature for encoding binary data (Uint8Array) into uppercase hexadecimal string representation according to RFC 4648 §8.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeHexUpperCase.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeHexUpperCase(data: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Encoding Binary Data to Lowercase Hex in TypeScript\nDESCRIPTION: Function signature for encoding a Uint8Array into a lowercase hexadecimal string representation. The function follows RFC 4648 §8 specification for hex encoding.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/encodeHexLowerCase.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeHexLowerCase(data: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Defining decodeHex Function in TypeScript\nDESCRIPTION: Function signature for decodeHex, which takes a hex-encoded string and returns a Uint8Array. The function is case-insensitive and throws an Error for malformed input.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/reference/main/decodeHex.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeHex(data: string): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/encoding Package via npm\nDESCRIPTION: Shows the npm command to install the @oslojs/encoding package as a dependency in a JavaScript/TypeScript project.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @oslojs/encoding\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/encoding Package\nDESCRIPTION: Shows the npm command to install the @oslojs/encoding package as a dependency.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/docs/pages/index.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/encoding\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Building Oslo Project Encoding Package\nDESCRIPTION: These commands run the test suite and build the Oslo Project Encoding package. They are essential steps in the development process to ensure code quality and prepare for deployment.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM for Oslo Project Encoding\nDESCRIPTION: This command installs the necessary dependencies for the Oslo Project Encoding package using PNPM package manager.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets for Oslo Project Encoding Pull Requests\nDESCRIPTION: These commands create changesets for minor features and patch fixes when submitting pull requests for the Oslo Project Encoding package. Changesets help track and document changes for version management.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add minor\npnpm auri add patch\n```\n\n----------------------------------------\n\nTITLE: Writing Changeset Summaries for Oslo Project Encoding\nDESCRIPTION: These are examples of how to write concise summaries for changesets in the Oslo Project Encoding package. They provide brief descriptions of the changes made, whether it's a bug fix or a new feature.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFix: Handle negative numbers in `sqrt()`\n```\n\nLANGUAGE: markdown\nCODE:\n```\nFeat: Add `greet()`\n```\n\n----------------------------------------\n\nTITLE: Listing Changelog Entries in Markdown\nDESCRIPTION: This snippet shows the changelog entries for the @oslojs/encoding module, detailing changes across multiple versions. It includes new features, breaking changes, and removals.\nSOURCE: https://github.com/oslo-project/encoding/blob/main/CHANGELOG.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @oslojs/encoding\n\n## 1.1.0\n\n- Add `encodeBase32UpperCase()`, `encodeBase32UpperCaseNoPadding()`, `encodeBase32LowerCase()`, and `encodeBase32LowerCaseNoPadding()`.\n\n## 1.0.0\n\n- No changes.\n\n## 0.4.1\n\n- Remove redundant code.\n\n## 0.4.0\n\n- [Breaking] Replace `base64`, `bas64url`, and `base32`\n- [Breaking] Remove `base32`\n- [Breaking] Replace `encodeHex()` with `encodeHexLowerCase()` and `encodeHexUpperCase()`.\n- [Breaking] Remove `Encoding` interface.\n\n## 0.3.0\n\n- [Breaking] Add `Encoding.encodeNoPadding()` and `Encoding.decodeIgnorePadding()`\n- [Breaking] Remove `includingPadding` option from `Base64Encoding.encode()` and `Base32Encoding.encode()`\n- [Breaking] Remove `strict` option from `Base64Encoding.decodeIgnorePadding()` and `Base32Encoding.decodeIgnorePadding()`\n- Add `Encoding.encodeNoPadding()`, `Base64Encoding.encodeNoPadding()`, `Base32Encoding.encodeNoPadding()`\n- Add `Encoding.decodeIgnorePadding()`, `Base64Encoding.decodeIgnorePadding()`, `Base32Encoding.decodeIgnorePadding()`\n```"
  }
]