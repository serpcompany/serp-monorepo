[
  {
    "owner": "peculiarventures",
    "repo": "xadesjs",
    "content": "TITLE: Verifying XAdES Signatures in Node.js using xadesjs\nDESCRIPTION: This Node.js code snippet demonstrates how to verify an XAdES-BES signature embedded within an XML file. It initializes the xadesjs library with the @peculiar/webcrypto engine, reads an XML file using the 'fs' module, parses the XML content, locates the signature element, loads it into a `SignedXml` object, and then calls the `Verify()` method. The result (valid or invalid) is logged to the console.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar XAdES = require(\"xadesjs\");\nvar { Crypto } = require(\"@peculiar/webcrypto\");\n\nXAdES.Application.setEngine(\"NodeJS\", new Crypto());\n\nvar fs = require(\"fs\");\nvar xmlString = fs.readFileSync(\"some.xml\",\"utf8\");\n\nvar signedDocument = XAdES.Parse(xmlString, \"application/xml\");\nvar xmlSignature = signedDocument.getElementsByTagNameNS(\"http://www.w3.org/2000/09/xmldsig#\", \"Signature\");\n\nvar signedXml = new xadesjs.SignedXml(signedDocument);\nsignedXml.LoadXml(xmlSignature[0]);\nsignedXml.Verify()\n    .then(res => {\n        console.log((res ? \"Valid\" : \"Invalid\") + \" signature\");\n    })\n    .catch(function (e) {\n        console.error(e);\n    });\n```\n\n----------------------------------------\n\nTITLE: XAdESJS In-Browser Verification\nDESCRIPTION: This HTML snippet demonstrates how to verify an XAdES signature in a browser using the XAdESJS library. It fetches a sample XML document containing a signature, parses it, loads the signature, and verifies it. It requires several dependencies like babel-polyfill, asmcrypto, elliptic, webcrypto-liner, and xadesjs. The output is an alert message indicating whether the signature is valid or invalid, along with the error message, if applicable.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <title>XADESJS Signature Sample</title>\n</head>\n\n<body>\n    <pre id=\"signature\"><code></code></pre>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.7.0/polyfill.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/asmCrypto/2.3.2/asmcrypto.all.es5.min.js\"></script>\n    <script src=\"https://cdn.rawgit.com/indutny/elliptic/master/dist/elliptic.min.js\"></script>\n    <script src=\"https://unpkg.com/webcrypto-liner@1.1.2/build/webcrypto-liner.shim.min.js\"></script>\n    <script src=\"https://unpkg.com/xadesjs@2.0.16/build/xades.js\"></script>\n    <script type=\"text/javascript\">\n        \"use strict\";\n        fetch(\"https://cdn.rawgit.com/PeculiarVentures/xadesjs/master/test/static/valid_signature.xml\")\n            .then(response => response.text())\n            .then(body => {\n                var xmlString = body;\n\n                var signedDocument = XAdES.Parse(xmlString);\n                var xmlSignature = signedDocument.getElementsByTagNameNS(\"http://www.w3.org/2000/09/xmldsig#\", \"Signature\");\n\n                var signedXml = new xadesjs.SignedXml(signedDocument);\n                signedXml.LoadXml(xmlSignature[0]);\n                signedXml.Verify()\n                    .then(function (signedDocument) {\n                        alert((res ? \"Valid\" : \"Invalid\") + \" signature\");\n                    })\n                    .catch(function (e) {\n                        alert(e.message);\n                    });\n            })\n    </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring node-webcrypto-p11 Polyfill with PKCS#11 for XAdESjs in JavaScript\nDESCRIPTION: Shows how to use the node-webcrypto-p11 polyfill to enable XAdESjs operations with a Hardware Security Module (HSM) using PKCS#11 in Node.js. Requires the node-webcrypto-p11 library. The WebCrypto constructor accepts an object with properties for the PKCS#11 library path, token name, slot, session flags, and PIN. These parameters must match the connected hardware device. The setEngine function registers the WebCrypto instance for cryptographic operations.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar xadesjs = require(\"./built/xades.js\");\nvar WebCrypto = require(\"node-webcrypto-p11\").WebCrypto;\n\nxadesjs.Application.setEngine(\"PKCS11\", new WebCrypto({\n    library: \"/path/to/pkcs11.so\",\n\tname: \"Name of PKCS11 lib\",\n\tslot: 0,\n    sessionFlags: 2 | 4, // RW_SESSION | SERIAL_SESSION\n\tpin: \"token pin\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Generating XAdES Signatures in Node.js using xadesjs\nDESCRIPTION: This Node.js snippet demonstrates initializing the xadesjs library with the @peculiar/webcrypto engine, generating an RSA key pair, and signing an XML string using RSASSA-PKCS1-v1_5. It includes setting signature options like key value, references, production place, and a signing certificate. The resulting signed XML is logged to the console.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar xadesjs = require(\"xadesjs\");\nvar { Crypto } = require(\"@peculiar/webcrypto\");\n\nxadesjs.Application.setEngine(\"NodeJS\", new Crypto());\n\n// Generate RSA key pair\nvar privateKey, publicKey;\nxadesjs.Application.crypto.subtle.generateKey(\n    {\n        name: \"RSASSA-PKCS1-v1_5\",\n        modulusLength: 1024, //can be 1024, 2048, or 4096,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: { name: \"SHA-1\" }, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n)\n    .then(function (keyPair) {\n        // Push ganerated keys to global variable\n        privateKey = keyPair.privateKey;\n        publicKey = keyPair.publicKey;\n\n        // Call sign function\n        var xmlString = '<player bats=\"left\" id=\"10012\" throws=\"right\">\\n\\t<!-- Here\\'s a comment -->\\n\\t<name>Alfonso Soriano</name>\\n\\t<position>2B</position>\\n\\t<team>New York Yankees</team>\\n</player>';\n        return SignXml(xmlString, keyPair, { name: \"RSASSA-PKCS1-v1_5\", hash: { name: \"SHA-1\" } });\n    })\n    .then(function (signedDocument) {\n        console.log(\"Signed document:\\n\\n\", signedDocument);\n    })\n    .catch(function (e) {\n        console.error(e);\n    });\n\n\nfunction SignXml(xmlString, keys, algorithm) {\n    return Promise.resolve()\n        .then(() => {\n            var xmlDoc = xadesjs.Parse(xmlString);\n            var signedXml = new xadesjs.SignedXml();\n\n            return signedXml.Sign(               // Signing document\n                algorithm,                              // algorithm\n                keys.privateKey,                        // key\n                xmlDoc,                                 // document\n                {                                       // options\n                    keyValue: keys.publicKey,\n                    references: [\n                        { hash: \"SHA-256\", transforms: [\"enveloped\"] }\n                    ],\n                    productionPlace: {\n                        country: \"Country\",\n                        state: \"State\",\n                        city: \"City\",\n                        code: \"Code\",\n                    },\n                    signingCertificate: \"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\"\n                })\n            })\n            .then(signature => signature.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Signing XML Documents Using SignedXml.Sign in TypeScript\nDESCRIPTION: Defines the signature of the SignedXml.Sign function in TypeScript, which performs XML Advanced Electronic Signature creation. The function takes a cryptographic algorithm, a CryptoKey for signing, the target XML Document, and optional signing parameters (OptionsXAdES). Returns a Promise resolving to a Signature object. Depends on Web Crypto API for the key and algorithm, and accepts options for signature policy, signer roles, and advanced properties.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSignedXml.Sign(algorithm: Algorithm, key: CryptoKey, data: Document, options?: OptionsXAdES): PromiseLike<Signature>;\n```\n\n----------------------------------------\n\nTITLE: Options Interface for XAdES Signing in TypeScript\nDESCRIPTION: Declares interfaces for the options parameter accepted by SignedXml.Sign, including OptionsXAdES and related supporting types. OptionsXAdES allows configuring public key inclusion, X.509 certificate chains, references, signing time, signature policy, production place, and signer roles. Each nested type specifies required and optional properties for comprehensive signature customization. Inputs are structured according to TypeScript interface syntax.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OptionsXAdES {\n    /**\n     * Public key for KeyInfo block\n     */\n    keyValue?: CryptoKey;\n    /**\n     * List of X509 Certificates\n     */\n    x509?: string[];\n    /**\n     * List of Reference\n     * Default is Reference with hash alg SHA-256 and exc-c14n transform  \n     */\n    references?: OptionsSignReference[];\n\n    // Signed signature properties\n\n    signingCertificate?: string;\n    signingTime?: OptionsSigningTime;\n    policy?: OptionsPolicyId;\n    productionPlace?: OptionsProductionPlace;\n    signerRole?: OptionsSignerRole;\n}\n\ninterface OptionsSignReference {\n    /**\n     * Id of Reference\n     */\n    id?: string;\n    uri?: string;\n    /**\n     * Hash algorithm\n     */\n    hash: AlgorithmIdentifier;\n    /**\n     * List of transforms\n     */\n    transforms?: OptionsSignTransform[];\n}\n\ntype OptionsSignTransform = \"enveloped\" | \"c14n\" | \"exc-c14n\" | \"c14n-com\" | \"exc-c14n-com\" | \"base64\";\n\ninterface OptionsSigningTime {\n    value?: Date;\n    format?: string;\n}\n\ninterface OptionsSignerRole {\n    claimed?: string[];\n    certified?: string[];\n}\n\ninterface OptionsProductionPlace {\n    city?: string;\n    state?: string;\n    code?: string;\n    country?: string;\n}\n\ninterface OptionsPolicyId {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring node-webcrypto-ossl Polyfill for XAdESjs in JavaScript\nDESCRIPTION: Demonstrates how to configure XAdESjs to use the node-webcrypto-ossl polyfill, enabling Web Crypto API support in Node.js environments. Requires installing @peculiar/webcrypto and accessing the Application.setEngine method. The setEngine function sets the crypto provider for signature operations. The main input parameters are the engine name (\"NodeJS\") and an instance of Crypto from @peculiar/webcrypto.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar xadesjs = require(\"./built/xades.js\");\nvar { Crypto } = require(\"@peculiar/webcrypto\");\n\nxadesjs.Application.setEngine(\"NodeJS\", new Crypto());\n```\n\n----------------------------------------\n\nTITLE: Generating XAdES Signatures in Browser using xadesjs\nDESCRIPTION: This HTML file sets up a browser environment to sign an XML document using xadesjs. It includes required libraries (polyfill, asmCrypto, elliptic, webcrypto-liner, xadesjs) via CDNs. The embedded JavaScript generates an ECDSA key pair using the browser's Web Crypto API, signs an XML string using the `SignXml` function with specified options (key value, references, production place, signer role), and displays the resulting signed XML in a <pre> element.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <title>XADESJS Signature Sample</title>\n</head>\n\n<body>\n    <pre id=\"signature\"><code></code></pre>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.7.0/polyfill.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/asmCrypto/2.3.2/asmcrypto.all.es5.min.js\"></script>\n    <script src=\"https://cdn.rawgit.com/indutny/elliptic/master/dist/elliptic.min.js\"></script>\n    <script src=\"https://unpkg.com/webcrypto-liner@1.1.2/build/webcrypto-liner.shim.min.js\"></script>\n    <script src=\"https://unpkg.com/xadesjs@2.0.16/build/xades.js\"></script>\n    <script type=\"text/javascript\">\n        // Generate RSA key pair\n        var privateKey, publicKey;\n        window.crypto.subtle.generateKey(\n            {\n                name: \"ECDSA\",\n                namedCurve: \"P-256\"\n            },\n            false, //whether the key is extractable (i.e. can be used in exportKey)\n            [\"sign\", \"verify\"] //can be any combination of \"sign\" and \"verify\"\n        )\n            .then(function (keyPair) {\n                // Push ganerated keys to global variable\n                privateKey = keyPair.privateKey;\n                publicKey = keyPair.publicKey;\n                // Call sign function\n                var xmlString = '<player bats=\"left\" id=\"10012\" throws=\"right\">\\n\\t<!-- Here\\'s a comment -->\\n\\t<name>Alfonso Soriano</name>\\n\\t<position>2B</position>\\n\\t<team>New York Yankees</team>\\n</player>';\n                return SignXml(xmlString, keyPair, { name: \"ECDSA\", hash: { name: \"SHA-1\" } });\n            })\n            .then(function (signedDocument) {\n                document.getElementById(\"signature\").textContent = signedDocument;\n                console.log(\"Signed document:\\n\\n\", signedDocument);\n            })\n            .catch(function (e) {\n                console.error(e);\n            });\n\n        function SignXml(xmlString, keys, algorithm) {\n            var signedXml;\n            return Promise.resolve()\n                .then(() => {\n                    var xmlDoc = XAdES.Parse(xmlString);\n                    signedXml = new XAdES.SignedXml();\n\n                    return signedXml.Sign(               // Signing document\n                        algorithm,                              // algorithm\n                        keys.privateKey,                        // key\n                        xmlDoc,                                 // document\n                        {                                       // options\n                            keyValue: keys.publicKey,\n                            references: [\n                                { hash: \"SHA-256\", transforms: [\"enveloped\"] }\n                            ],\n                            productionPlace: {\n                                country: \"Country\",\n                                state: \"State\",\n                                city: \"City\",\n                                code: \"Code\",\n                            },\n                            signerRole: {\n                                claimed: [\"Some role\"]\n                            }\n                        })\n                })\n                .then(() => signedXml.toString());\n        }\n    </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: XAdES-EPES Signature in NodeJS\nDESCRIPTION: This JavaScript snippet showcases how to create an XAdES-EPES signature in a NodeJS environment using the xadesjs library and WebCrypto. It imports necessary modules, imports a key and certificate from files, defines the signing algorithm, creates an XML document, signs the document, appends the signature, and serializes the XML. It depends on the 'fs', '@peculiar/webcrypto', 'xadesjs', and 'xmldom' modules. Prerequisites include having 'cert.pem' and 'key.pem' files. The output is the signed XML string logged to the console.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nvar { Crypto } = require(\"@peculiar/webcrypto\");\nconst xadesjs = require(\"xadesjs\");\nconst { XMLSerializer } = require(\"xmldom\");\n\n\nconst crypto = new Crypto();\nxadesjs.Application.setEngine(\"NodeJS\", );\n\nfunction preparePem(pem) {\n    return pem\n        // remove BEGIN/END\n        .replace(/-----(BEGIN|END)[\\w\\d\\s]+-----/g, \"\")\n        // remove \\r, \\n\n        .replace(/[\\r\\n]/g, \"\");\n}\n\nfunction pem2der(pem) {\n    pem = preparePem(pem);\n    // convert base64 to ArrayBuffer\n    return new Uint8Array(Buffer.from(pem, \"base64\")).buffer;\n}\n\nasync function main() {\n    const hash = \"SHA-256\"\n    const alg = {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash,\n    }\n\n    // Read cert\n    const certPem = fs.readFileSync(\"cert.pem\", { encoding: \"utf8\" });\n    const certDer = pem2der(certPem);\n\n    // Read key\n    const keyPem = fs.readFileSync(\"key.pem\", { encoding: \"utf8\" });\n    const keyDer = pem2der(keyPem);\n    const key = await crypto.subtle.importKey(\"pkcs8\", keyDer, alg, false, [\"sign\"]);\n\n    // XAdES-EPES\n    var xmlString = `<Test><Document attr=\"Hello\"/></Test>`;\n    var xml = xadesjs.Parse(xmlString);\n\n    var xadesXml = new xadesjs.SignedXml();\n    const x509 = preparePem(certPem);\n    const signature = await xadesXml.Sign(   // Signing document\n        alg,                                    // algorithm\n        key,                                    // key\n        xml,                                    // document\n        {                                       // options\n            references: [\n                { hash, transforms: [\"c14n\", \"enveloped\"] }\n            ],\n            policy: {\n                hash,\n                identifier: {\n                    qualifier: \"OIDAsURI\",\n                    value: \"quilifier.uri\",\n                },\n                qualifiers: [\n                    {\n                        noticeRef: {\n                            organization: \"PeculiarVentures\",\n                            noticeNumbers: [1, 2, 3, 4, 5]\n                        }\n                    }\n                ]\n            },\n            productionPlace: {\n                country: \"Russia\",\n                state: \"Marij El\",\n                city: \"Yoshkar-Ola\",\n                code: \"424000\",\n            },\n            signingCertificate: x509\n        });\n\n    // append signature\n    xml.documentElement.appendChild(signature.GetXml());\n\n    // serialize XML\n    const oSerializer = new XMLSerializer();\n    const sXML = oSerializer.serializeToString(xml);\n    console.log(sXML.toString())\n}\n\nmain()\n    .catch((err) => {\n        console.error(err);\n    });\n```\n\n----------------------------------------\n\nTITLE: Verifying XML Signatures Using Verify Function in TypeScript\nDESCRIPTION: Presents the TypeScript definition of the Verify function for signature validation in XAdESjs. The function optionally accepts a CryptoKey for verification. If no key is provided, XAdESjs will automatically try to extract keys from the KeyInfo block within the Signature. Returns a Promise resolving to a boolean result indicating verification success. Depends on compatibility with Web Crypto API and presence of appropriate keys or certificates.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nVerify(key?: CryptoKey): PromiseLike<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Testing Command in NodeJS\nDESCRIPTION: This code snippet provides the command for running tests within a NodeJS environment. It uses the 'npm test' command, implying that tests are configured within the project's package.json file. This command is meant to be executed from the terminal.\nSOURCE: https://github.com/peculiarventures/xadesjs/blob/master/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```"
  }
]