[
  {
    "owner": "zed-industries",
    "repo": "zed",
    "content": "TITLE: Configuring Vim Mode in Zed User Settings\nDESCRIPTION: This JSON snippet shows how to enable Vim mode in Zed's user settings. The 'vim_mode' property is set to true to activate Vim emulation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vim_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Formatting and Linting for JavaScript in Zed\nDESCRIPTION: Comprehensive example showing how to integrate Prettier for formatting and ESLint for linting JavaScript files. This configuration runs both tools on save to maintain code quality and style.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"languages\": {\n  \"JavaScript\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    },\n    \"code_actions_on_format\": {\n      \"source.fixAll.eslint\": true\n    },\n    \"format_on_save\": \"on\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Zed Configuration Example (JSON)\nDESCRIPTION: This snippet provides a comprehensive example of Zed configuration, including theme selection, tab size, line length, font settings, autosave, format on save, vim mode, terminal settings, and language-specific configurations.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n// ~/.config/zed/settings.json\n{\n  \"theme\": \"cave-light\",\n  \"tab_size\": 2,\n  \"preferred_line_length\": 80,\n  \"soft_wrap\": \"none\",\n\n  \"buffer_font_size\": 18,\n  \"buffer_font_family\": \"Zed Plex Mono\",\n\n  \"autosave\": \"on_focus_change\",\n  \"format_on_save\": \"off\",\n  \"vim_mode\": false,\n  \"projects_online_by_default\": true,\n  \"terminal\": {\n    \"font_family\": \"FiraCode Nerd Font Mono\",\n    \"blinking\": \"off\"\n  },\n  \"languages\": {\n    \"C\": {\n      \"format_on_save\": \"language_server\",\n      \"preferred_line_length\": 64,\n      \"soft_wrap\": \"preferred_line_length\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Settings in Zed\nDESCRIPTION: Example of language-specific settings in settings.json that override global settings for individual languages. Shows customization for Python and JavaScript, including tab size, formatter configuration, and format-on-save settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"languages\": {\n  \"Python\": {\n    \"tab_size\": 4,\n    \"formatter\": \"language_server\",\n    \"format_on_save\": \"on\"\n  },\n  \"JavaScript\": {\n    \"tab_size\": 2,\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Server Options for Rust in Zed\nDESCRIPTION: Example of configuring Rust Analyzer language server options in settings.json. This setup enables Clippy for additional linting when saving Rust files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"checkOnSave\": {\n          \"command\": \"clippy\"\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Inline Blame Settings in JSON\nDESCRIPTION: Configuration options for Git inline blame display, including enable/disable, delay timing, commit summary display, and minimum column settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"git\": {\n    \"inline_blame\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External and Language Server Formatters in Zed\nDESCRIPTION: Example showing formatter configuration for JavaScript using Prettier (external) and Rust using the language server's built-in formatter. Both are set to format code automatically on save.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"languages\": {\n  \"JavaScript\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    },\n    \"format_on_save\": \"on\"\n  },\n  \"Rust\": {\n    \"formatter\": \"language_server\",\n    \"format_on_save\": \"on\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Rust-based Zed Extension\nDESCRIPTION: Basic implementation of a Zed extension using Rust and WebAssembly. It defines an extension struct, implements the Extension trait, and registers the extension using the register_extension! macro.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/developing-extensions.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse zed_extension_api as zed;\n\nstruct MyExtension {\n    // ... state\n}\n\nimpl zed::Extension for MyExtension {\n    // ...\n}\n\nzed::register_extension!(MyExtension);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Anthropic Models in Zed settings.json\nDESCRIPTION: This snippet shows how to add custom models to the Anthropic provider in Zed's settings.json file. It includes configuration for model names, display names, token limits, cache configuration, and tool override capabilities.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language_models\": {\n    \"anthropic\": {\n      \"available_models\": [\n        {\n          \"name\": \"claude-3-5-sonnet-20240620\",\n          \"display_name\": \"Sonnet 2024-June\",\n          \"max_tokens\": 128000,\n          \"max_output_tokens\": 2560,\n          \"cache_configuration\": {\n            \"max_cache_anchors\": 10,\n            \"min_total_token\": 10000,\n            \"should_speculate\": false\n          },\n          \"tool_override\": \"some-model-that-supports-toolcalling\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Language Servers in Zed\nDESCRIPTION: Configuration to switch between TypeScript language servers (typescript-language-server and vtsls) for TypeScript, TSX, and JavaScript files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/typescript.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"TypeScript\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    },\n    \"TSX\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    },\n    \"JavaScript\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Associations in Zed\nDESCRIPTION: Example of how to set up custom file type associations in settings.json. This configuration overrides default file type detection by assigning specific file patterns to language types.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"file_types\": {\n  \"C++\": [\"c\"],\n  \"TOML\": [\"MyLockFile\"],\n  \"Dockerfile\": [\"Dockerfile*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for JavaScript in Zed\nDESCRIPTION: Example showing ESLint configuration to organize imports on save for JavaScript files. This sets up specific code action rules to be applied automatically.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"eslint\": {\n    \"settings\": {\n      \"codeActionOnSave\": {\n        \"rules\": [\"import/order\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Git Hunk Display Style in JSON\nDESCRIPTION: Configuration for diff hunk visualization styles, allowing for staged or unstaged hollow displays.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"git\": {\n    \"hunk_style\": \"staged_hollow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier Formatter for JavaScript in Zed\nDESCRIPTION: Configuration snippet to set up Prettier as an external formatter for JavaScript files in Zed. Requires Prettier to be installed and available in PATH.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"prettier\",\n          \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Zed Java LSP Configuration\nDESCRIPTION: Comprehensive example of Zed Java extension configuration including workspace settings, build configuration, import settings, and code completion options\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/java.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {\n        \"bundles\": [],\n        \"workspaceFolders\": [\"file:///home/snjeza/Project\"],\n        \"settings\": {\n          \"java\": {\n            \"home\": \"/usr/local/jdk-9.0.1\",\n            \"errors\": {\n              \"incompleteClasspath\": {\n                \"severity\": \"warning\"\n              }\n            },\n            \"configuration\": {\n              \"updateBuildConfiguration\": \"interactive\",\n              \"maven\": {\n                \"userSettings\": null\n              }\n            },\n            \"trace\": {\n              \"server\": \"verbose\"\n            },\n            \"import\": {\n              \"gradle\": {\n                \"enabled\": true\n              },\n              \"maven\": {\n                \"enabled\": true\n              },\n              \"exclusions\": [\n                \"**/node_modules/**\",\n                \"**/.metadata/**\",\n                \"**/archetype-resources/**\",\n                \"**/META-INF/maven/**\",\n                \"/**/test/**\"\n              ]\n            },\n            \"jdt\": {\n              \"ls\": {\n                \"lombokSupport\": {\n                  \"enabled\": false\n                }\n              }\n            },\n            \"referencesCodeLens\": {\n              \"enabled\": false\n            },\n            \"signatureHelp\": {\n              \"enabled\": false\n            },\n            \"implementationsCodeLens\": {\n              \"enabled\": false\n            },\n            \"format\": {\n              \"enabled\": true\n            },\n            \"saveActions\": {\n              \"organizeImports\": false\n            },\n            \"contentProvider\": {\n              \"preferred\": null\n            },\n            \"autobuild\": {\n              \"enabled\": false\n            },\n            \"completion\": {\n              \"favoriteStaticMembers\": [\n                \"org.junit.Assert.*\",\n                \"org.junit.Assume.*\",\n                \"org.junit.jupiter.api.Assertions.*\",\n                \"org.junit.jupiter.api.Assumptions.*\",\n                \"org.junit.jupiter.api.DynamicContainer.*\",\n                \"org.junit.jupiter.api.DynamicTest.*\"\n              ],\n              \"importOrder\": [\"java\", \"javax\", \"com\", \"org\"]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Language Server Settings in Zed\nDESCRIPTION: Example configuration for yaml-language-server settings in Zed's settings.json, demonstrating key ordering, formatting preferences, and schema configurations.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/yaml.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"keyOrdering\": true,\n          \"format\": {\n            \"singleQuote\": true\n          },\n          \"schemas\": {\n              \"http://json.schemastore.org/composer\": [\"/*\"],\n              \"../relative/path/schema.json\": [\"/config*.yaml\"]\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic ESLint Fixes on Save in Zed\nDESCRIPTION: Example showing how to run ESLint fixes automatically when saving JavaScript files. This configuration enables specific code actions to be applied during formatting.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"languages\": {\n  \"JavaScript\": {\n    \"code_actions_on_format\": {\n      \"source.fixAll.eslint\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LLDB Debug Configuration for Programs\nDESCRIPTION: Configuration for debugging a program using LLDB. This example shows how to debug the Zed application itself using the LLDB debug adapter, which is suitable for debugging C, C++, Objective-C, and Swift.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"LLDB: Debug program\",\n  \"adapter\": \"lldb\",\n  \"program\": \"$ZED_WORKTREE_ROOT/target/debug/zed\",\n  \"request\": \"launch\",\n  \"cwd\": \"$ZED_WORKTREE_ROOT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring extension.toml for Zed Extensions\nDESCRIPTION: The basic configuration file required for all Zed extensions. It defines essential metadata including extension ID, name, version, authors, description, and repository URL.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/developing-extensions.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nid = \"my-extension\"\nname = \"My extension\"\nversion = \"0.0.1\"\nschema_version = 1\nauthors = [\"Your Name <you@example.com>\"]\ndescription = \"My cool extension\"\nrepository = \"https://github.com/your-name/my-zed-extension\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Cargo.toml for WebAssembly-based Zed Extensions\nDESCRIPTION: Configuration file for Rust-based extensions that compile to WebAssembly. It specifies the package details, crate type as cdylib for WebAssembly output, and dependency on the zed_extension_api crate.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/developing-extensions.md#2025-04-11_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my-extension\"\nversion = \"0.0.1\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nzed_extension_api = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Basic Zed Keymap Configuration Example\nDESCRIPTION: Example of a custom keymap.json file with basic editor bindings and context-specific project panel actions. Shows how to create global bindings and context-specific bindings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/key-bindings.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"bindings\": {\n      \"ctrl-right\": \"editor::SelectLargerSyntaxNode\",\n      \"ctrl-left\": \"editor::SelectSmallerSyntaxNode\"\n    }\n  },\n  {\n    \"context\": \"ProjectPanel && not_editing\",\n    \"bindings\": {\n      \"o\": \"project_panel::Open\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAI Models with Specific Versions\nDESCRIPTION: Configuration for using alternate OpenAI models in Zed, including specifying dated model releases or preview versions. Allows customizing display names and setting appropriate token limits for different models.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language_models\": {\n    \"openai\": {\n      \"available_models\": [\n        {\n          \"name\": \"gpt-4o-2024-08-06\",\n          \"display_name\": \"GPT 4o Summer 2024\",\n          \"max_tokens\": 128000\n        },\n        {\n          \"name\": \"o1-mini\",\n          \"display_name\": \"o1-mini\",\n          \"max_tokens\": 128000,\n          \"max_completion_tokens\": 20000\n        }\n      ]\n      \"version\": \"1\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VTSLS Inlay Hints Configuration\nDESCRIPTION: Detailed configuration for inlay hints when using VTSLS, including settings for both JavaScript and TypeScript with various hint types.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/typescript.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"vtsls\": {\n      \"settings\": {\n        \"javascript\": {\n          \"inlayHints\": {\n            \"parameterNames\": {\n              \"enabled\": \"all\",\n              \"suppressWhenArgumentMatchesName\": false\n            },\n            \"parameterTypes\": {\n              \"enabled\": true\n            },\n            \"variableTypes\": {\n              \"enabled\": true,\n              \"suppressWhenTypeMatchesName\": true\n            },\n            \"propertyDeclarationTypes\": {\n              \"enabled\": true\n            },\n            \"functionLikeReturnTypes\": {\n              \"enabled\": true\n            },\n            \"enumMemberValues\": {\n              \"enabled\": true\n            }\n          }\n        },\n        \"typescript\": {\n          \"inlayHints\": {\n            \"parameterNames\": {\n              \"enabled\": \"all\",\n              \"suppressWhenArgumentMatchesName\": false\n            },\n            \"parameterTypes\": {\n              \"enabled\": true\n            },\n            \"variableTypes\": {\n              \"enabled\": true,\n              \"suppressWhenTypeMatchesName\": true\n            },\n            \"propertyDeclarationTypes\": {\n              \"enabled\": true\n            },\n            \"functionLikeReturnTypes\": {\n              \"enabled\": true\n            },\n            \"enumMemberValues\": {\n              \"enabled\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Models from Command Line\nDESCRIPTION: Command to download and install a model (mistral in this example) from Ollama's model library to use with Zed assistant.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nollama pull mistral\n```\n\n----------------------------------------\n\nTITLE: Configuring Completion Settings in Zed\nDESCRIPTION: Controls how code completions are processed, including LSP integration and word-based completions\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"completions\": {\n    \"words\": \"fallback\",\n    \"lsp\": true,\n    \"lsp_fetch_timeout_ms\": 0,\n    \"lsp_insert_mode\": \"replace_suffix\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: General Configuration Example for Zed Assistant\nDESCRIPTION: This comprehensive JSON configuration example demonstrates various settings for the Zed assistant, including enabled status, default model, feature-specific models, and panel settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assistant\": {\n    \"enabled\": true,\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"claude-3-7-sonnet\"\n    },\n    \"editor_model\": {\n      \"provider\": \"openai\",\n      \"model\": \"gpt-4o\"\n    },\n    \"inline_assistant_model\": {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-5-sonnet\"\n    },\n    \"commit_message_model\": {\n      \"provider\": \"openai\",\n      \"model\": \"gpt-4o-mini\"\n    },\n    \"thread_summary_model\": {\n      \"provider\": \"google\",\n      \"model\": \"gemini-1.5-flash\"\n    },\n    \"version\": \"2\",\n    \"button\": true,\n    \"default_width\": 480,\n    \"dock\": \"right\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax Highlighting Rules in Tree-sitter\nDESCRIPTION: Demonstrates how to define syntax highlighting rules using Tree-sitter queries in the highlights.scm file. This example shows rules for highlighting strings, object keys, and numbers in JSON.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_2\n\nLANGUAGE: scheme\nCODE:\n```\n(string) @string\n\n(pair\n  key: (string) @property.json_key)\n\n(number) @number\n```\n\n----------------------------------------\n\nTITLE: Implementing Zed Extension in Rust\nDESCRIPTION: Basic implementation of a Zed extension in Rust, showing how to create a custom extension type, implement the Extension trait, and register it with Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/extension_api/README.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse zed_extension_api as zed;\n\nstruct MyExtension {\n    // ... state\n}\n\nimpl zed::Extension for MyExtension {\n    // ...\n}\n\nzed::register_extension!(MyExtension);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom clangd Binary Path in Zed\nDESCRIPTION: This configuration specifies a custom path for the clangd binary and allows for additional command-line arguments. This is useful when you want to use a specific version of clangd not in the default system path.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/cpp.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible Language Server Settings in Zed\nDESCRIPTION: JSON configuration for the Ansible language server in Zed settings. This should be added to the \"lsp\" section in ~/.zed/settings.json and includes settings for the ansible path, execution environment, Python interpreter path, and validation options.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ansible.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  // Note, the Zed Ansible extension prefixes all settings with `ansible`\n  // so instead of using `ansible.ansible.path` use `ansible.path`.\n  \"ansible-language-server\": {\n    \"settings\": {\n      \"ansible\": {\n        \"path\": \"ansible\"\n      },\n      \"executionEnvironment\": {\n        \"enabled\": false\n      },\n      \"python\": {\n        \"interpreterPath\": \"python3\"\n      },\n      \"validation\": {\n        \"enabled\": true,\n        // To enable linting, manually install ansible-lint and make sure it is your PATH\n        \"lint\": {\n          \"enabled\": true,\n          \"path\": \"ansible-lint\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring elm-language-server in Zed Settings\nDESCRIPTION: Example JSON configuration for elm-language-server in Zed's settings.json. Shows how to customize initialization options like disabling ELS diagnostics, updating diagnostics behavior, and setting elm-review diagnostic level.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elm.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"elm-language-server\": {\n      \"initialization_options\": {\n        \"disableElmLSDiagnostics\": true,\n        \"onlyUpdateDiagnosticsOnSave\": false,\n        \"elmReviewDiagnostics\": \"warning\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Tree-sitter Grammars in TOML\nDESCRIPTION: Shows how to register Tree-sitter grammars in the extension.toml file. This includes specifying the repository URL and the Git revision to use for the grammar.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[grammars.gleam]\nrepository = \"https://github.com/gleam-lang/tree-sitter-gleam\"\nrev = \"58b7cac8fc14c92b0677c542610d8738c373fa81\"\n```\n\n----------------------------------------\n\nTITLE: Defining Task Template in JSON for Zed Editor\nDESCRIPTION: This snippet demonstrates how to define a task template in JSON format for the Zed editor. It includes various configuration options such as command execution, environment variables, shell settings, and output control.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/tasks.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"label\": \"Example task\",\n    \"command\": \"for i in {1..5}; do echo \\\"Hello $i/5\\\"; sleep 1; done\",\n    //\"args\": [],\n    // Env overrides for the command, will be appended to the terminal's environment from the settings.\n    \"env\": { \"foo\": \"bar\" },\n    // Current working directory to spawn the command into, defaults to current project root.\n    //\"cwd\": \"/path/to/working/directory\",\n    // Whether to use a new terminal tab or reuse the existing one to spawn the process, defaults to `false`.\n    \"use_new_terminal\": false,\n    // Whether to allow multiple instances of the same task to be run, or rather wait for the existing ones to finish, defaults to `false`.\n    \"allow_concurrent_runs\": false,\n    // What to do with the terminal pane and tab, after the command was started:\n    // * `always` — always show the task's pane, and focus the corresponding tab in it (default)\n    // * `no_focus` — always show the task's pane, add the task's tab in it, but don't focus it\n    // * `never` — do not alter focus, but still add/reuse the task's tab in its pane\n    \"reveal\": \"always\",\n    // What to do with the terminal pane and tab, after the command has finished:\n    // * `never` — Do nothing when the command finishes (default)\n    // * `always` — always hide the terminal tab, hide the pane also if it was the last tab in it\n    // * `on_success` — hide the terminal tab on task success only, otherwise behaves similar to `always`\n    \"hide\": \"never\",\n    // Which shell to use when running a task inside the terminal.\n    // May take 3 values:\n    // 1. (default) Use the system's default terminal configuration in /etc/passwd\n    //      \"shell\": \"system\"\n    // 2. A program:\n    //      \"shell\": {\n    //        \"program\": \"sh\"\n    //      }\n    // 3. A program with arguments:\n    //     \"shell\": {\n    //         \"with_arguments\": {\n    //           \"program\": \"/bin/bash\",\n    //           \"args\": [\"--login\"]\n    //         }\n    //     }\n    \"shell\": \"system\",\n    // Whether to show the task line in the output of the spawned task, defaults to `true`.\n    \"show_summary\": true,\n    // Whether to show the command line in the output of the spawned task, defaults to `true`.\n    \"show_output\": true,\n    // Represents the tags for inline runnable indicators, or spawning multiple tasks at once.\n    \"tags\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-indentation in Tree-sitter\nDESCRIPTION: Demonstrates how to define indentation rules using Tree-sitter queries in the indents.scm file. This example marks the end of arrays and objects for indentation purposes in JSON.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_5\n\nLANGUAGE: scheme\nCODE:\n```\n(array \"]\" @end) @indent\n(object \"}\" @end) @indent\n```\n\n----------------------------------------\n\nTITLE: Implementing Slash Command Behavior in Rust\nDESCRIPTION: Shows how to implement the run_slash_command method for a Zed extension in Rust. It handles the 'echo' and 'pick-one' commands, demonstrating argument processing and return of SlashCommandOutput.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/slash-commands.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl zed::Extension for MyExtension {\n    fn run_slash_command(\n        &self,\n        command: SlashCommand,\n        args: Vec<String>,\n        _worktree: Option<&Worktree>,\n    ) -> Result<SlashCommandOutput, String> {\n        match command.name.as_str() {\n            \"echo\" => {\n                if args.is_empty() {\n                    return Err(\"nothing to echo\".to_string());\n                }\n\n                let text = args.join(\" \");\n\n                Ok(SlashCommandOutput {\n                    sections: vec![SlashCommandOutputSection {\n                        range: (0..text.len()).into(),\n                        label: \"Echo\".to_string(),\n                    }],\n                    text,\n                })\n            }\n            \"pick-one\" => {\n                let Some(selection) = args.first() else {\n                    return Err(\"no option selected\".to_string());\n                };\n\n                match selection.as_str() {\n                    \"option-1\" | \"option-2\" | \"option-3\" => {}\n                    invalid_option => {\n                        return Err(format!(\"{invalid_option} is not a valid option\"));\n                    }\n                }\n\n                let text = format!(\"You chose {selection}.\");\n\n                Ok(SlashCommandOutput {\n                    sections: vec![SlashCommandOutputSection {\n                        range: (0..text.len()).into(),\n                        label: format!(\"Pick One: {selection}\"),\n                    }],\n                    text,\n                })\n            }\n            command => Err(format!(\"unknown slash command: \\\"{command}\\\"\")),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: External Formatter Configuration\nDESCRIPTION: Examples of configuring external formatters including sed for trailing space removal and prettier with file path support.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatter\": {\n    \"external\": {\n      \"command\": \"sed\",\n      \"arguments\": [\"-e\", \"s/ *$//\"]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatter\": {\n    \"external\": {\n      \"command\": \"prettier\",\n      \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing VSCode HTML Language Server Formatting Options in Zed Settings (JSON)\nDESCRIPTION: JSON configuration to customize various formatting options for the VSCode HTML language server in Zed. This snippet demonstrates how to set options like 'indentInnerHtml', 'contentUnformatted', and 'extraLiners' in the Zed settings file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/html.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"lsp\": {\n    \"vscode-html-language-server\": {\n      \"settings\": {\n        \"html\": {\n          \"format\": {\n            // Indent under <html> and <head> (default: false)\n            \"indentInnerHtml\": true,\n            // Disable formatting inside <svg> or <script>\n            \"contentUnformatted\": \"svg,script\",\n            // Add an extra newline before <div> and <p>\n            \"extraLiners\": \"div,p\"\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Disabling Dialyzer in elixir-ls Configuration\nDESCRIPTION: JSON configuration example showing how to disable Dialyzer through elixir-ls workspace settings in Zed editor. This can be useful for improving performance in large projects.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elixir.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"elixir-ls\": {\n    \"settings\": {\n      \"dialyzerEnabled\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Snippets in Zed Editor\nDESCRIPTION: Example configuration for creating a snippet in Zed editor. This snippet defines a 'Log to console' action with a prefix, body, and description. It demonstrates the use of placeholders and tab stops in the snippet body.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/snippets.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Each snippet must have a name and body, but the prefix and description are optional.\n  // The prefix is used to trigger the snippet, but when omitted then the name is used.\n  // Use placeholders like $1, $2 or ${1:defaultValue} to define tab stops.\n  // The $0 determines the final cursor position.\n  // Placeholders with the same value are linked.\n  \"Log to console\": {\n    \"prefix\": \"log\",\n    \"body\": [\"console.info(\\\"Hello, ${1:World}!\\\")\", \"$0\"],\n    \"description\": \"Logs to console\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Connections in Zed Settings (JSON)\nDESCRIPTION: This snippet shows how to configure SSH connections in Zed's settings file. It includes basic connection details like host and project paths.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/remote-development.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Key Binding Syntax Examples in Zed\nDESCRIPTION: Various examples of key binding syntax in Zed, demonstrating key sequences, modifiers, and special character mappings. Shows how to bind combinations of keys and modifiers for different actions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/key-bindings.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"bindings\": {\n   \"cmd-k cmd-s\": \"zed::OpenKeymap\", // matches ⌘-k then ⌘-s\n   \"space e\": \"editor::Complete\", // type space then e\n   \"ç\": \"editor::Complete\", // matches ⌥-c\n   \"shift shift\": \"file_finder::Toggle\", // matches pressing and releasing shift twice\n }\n```\n\n----------------------------------------\n\nTITLE: Registering an Extension in extensions.toml\nDESCRIPTION: Configuration required in the central extensions.toml file to register a new extension for publication. It specifies the submodule path and version number.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/developing-extensions.md#2025-04-11_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[my-extension]\nsubmodule = \"extensions/my-extension\"\nversion = \"0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Runtime Settings\nDESCRIPTION: Example showing how to configure YAML language server settings that can be changed at runtime. Enables alphabetical ordering of keys in maps.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"yaml-language-server\": {\n    \"settings\": {\n      \"yaml\": {\n        \"keyOrdering\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced SSH Connection Configuration in Zed (JSON)\nDESCRIPTION: This snippet demonstrates advanced SSH connection configuration options in Zed, including custom arguments, port, and username settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/remote-development.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }],\n      \"args\": [\"-i\", \"~/.ssh/work_id_file\"],\n      \"port\": 22,\n      \"username\": \"me\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proto Formatting in Zed Settings\nDESCRIPTION: JSON configuration for setting up Proto formatting in Zed, including format on save, tab size, and external formatter settings using clang-format.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/proto.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Proto\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 4,\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"clang-format\",\n          \"arguments\": [\"-style={IndentWidth: 4, ColumnLimit: 0}\"]\n        }\n      }\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature-specific Models in Zed\nDESCRIPTION: This JSON snippet demonstrates how to configure different models for specific features in Zed, such as thread summary, inline assistant, and commit message generation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assistant\": {\n    \"version\": \"2\",\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"claude-3-7-sonnet\"\n    },\n    \"inline_assistant_model\": {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-5-sonnet\"\n    },\n    \"commit_message_model\": {\n      \"provider\": \"openai\",\n      \"model\": \"gpt-4o-mini\"\n    },\n    \"thread_summary_model\": {\n      \"provider\": \"google\",\n      \"model\": \"gemini-2.0-flash\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Overrides in Zed Settings (JSON)\nDESCRIPTION: This JSON snippet shows how to override specific theme attributes in Zed. It demonstrates changing the editor background color and setting comments and doc comments to italic style using the experimental.theme_overrides setting.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/themes.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimental.theme_overrides\": {\n    \"editor.background\": \"#333\",\n    \"syntax\": {\n      \"comment\": {\n        \"font_style\": \"italic\"\n      },\n      \"comment.doc\": {\n        \"font_style\": \"italic\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Mode Settings in Zed (JSON)\nDESCRIPTION: This snippet showcases various Vim mode settings in Zed, including default mode, clipboard usage, find behavior, line numbering, and custom digraphs. It demonstrates how to modify these settings to customize the Vim experience.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vim\": {\n    \"default_mode\": \"insert\",\n    \"use_system_clipboard\": \"never\",\n    \"use_multiline_find\": true,\n    \"use_smartcase_find\": true,\n    \"toggle_relative_line_numbers\": true,\n    \"highlight_on_yank_duration\": 50,\n    \"custom_digraphs\": {\n      \"fz\": \"🧟‍♀️\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Zed Settings for Vim Mode (JSON)\nDESCRIPTION: This snippet illustrates how to configure core Zed settings to enhance the Vim experience. It includes settings for cursor blinking, line numbers, scrollbar, scroll behavior, and command aliases. These settings can be adjusted to fine-tune the editor's behavior for Vim users.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Disable cursor blink\n  \"cursor_blink\": false,\n  // Use relative line numbers\n  \"relative_line_numbers\": true,\n  // Hide the scroll bar\n  \"scrollbar\": { \"show\": \"never\" },\n  // Prevent the buffer from scrolling beyond the last line\n  \"scroll_beyond_last_line\": \"off\",\n  // Allow the cursor to reach the edges of the screen\n  \"vertical_scroll_margin\": 0,\n  \"gutter\": {\n    // Disable line numbers completely:\n    \"line_numbers\": false\n  },\n  \"command_aliases\": {\n    \"W\": \"w\",\n    \"Wq\": \"wq\",\n    \"Q\": \"q\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Metadata in TOML\nDESCRIPTION: Defines the structure of the config.toml file required for each language supported by Zed. This configuration includes the language name, associated grammar, file suffixes, and comment syntax.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nname = \"My Language\"\ngrammar = \"my-language\"\npath_suffixes = [\"myl\"]\nline_comments = [\"# \"]\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Fix on Format for JavaScript\nDESCRIPTION: Settings to enable ESLint's --fix functionality when formatting JavaScript code in Zed. Runs ESLint fixes during code formatting.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Format on Save Configuration\nDESCRIPTION: Configuration options for enabling or disabling format on save functionality.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format_on_save\": \"on\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format_on_save\": \"off\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Language Server Inlay Hints Configuration\nDESCRIPTION: Settings for configuring inlay hints in typescript-language-server, including parameter names, types, and return type hints.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/typescript.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"typescript-language-server\": {\n      \"initialization_options\": {\n        \"preferences\": {\n          \"includeInlayParameterNameHints\": \"all\",\n          \"includeInlayParameterNameHintsWhenArgumentMatchesName\": true,\n          \"includeInlayFunctionParameterTypeHints\": true,\n          \"includeInlayVariableTypeHints\": true,\n          \"includeInlayVariableTypeHintsWhenTypeMatchesName\": true,\n          \"includeInlayPropertyDeclarationTypeHints\": true,\n          \"includeInlayFunctionLikeReturnTypeHints\": true,\n          \"includeInlayEnumMemberValueHints\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kernel Selections in Zed Settings\nDESCRIPTION: JSON configuration to specify default kernels for different programming languages in Zed's settings.json file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jupyter\": {\n    \"kernel_selections\": {\n      \"python\": \"conda-env\",\n      \"typescript\": \"deno\",\n      \"javascript\": \"deno\",\n      \"r\": \"ark\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Working Directory Configuration\nDESCRIPTION: Configuration for ESLint's working directory settings, setting the mode to auto.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"workingDirectory\": {\n          \"mode\": \"auto\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Current Line Highlighting\nDESCRIPTION: Settings for controlling how the current line is highlighted in the editor. Options include no highlight, gutter highlight, line highlight, or full highlight.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"current_line_highlight\": \"none\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"current_line_highlight\": \"gutter\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"current_line_highlight\": \"line\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"current_line_highlight\": \"all\"\n```\n\n----------------------------------------\n\nTITLE: Installing Zed Preview on Linux using Installation Script\nDESCRIPTION: This command downloads and executes the Zed installation script for Linux, installing the preview version.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/getting-started.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Copilot as Edit Prediction Provider in JSON\nDESCRIPTION: This snippet shows how to set GitHub Copilot as the edit prediction provider in the Zed editor's settings.json file. It enables Copilot's code completion functionality.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"copilot\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Formatters Configuration\nDESCRIPTION: Example showing how to configure multiple formatters to run consecutively, combining language server and external formatters.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatter\": [\n    { \"language_server\": { \"name\": \"rust-analyzer\" } },\n    {\n      \"external\": {\n        \"command\": \"sed\",\n        \"arguments\": [\"-e\", \"s/ *$//\"]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Install Extensions Configuration\nDESCRIPTION: Example configuration for automatically installing or preventing installation of specific extensions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_install_extensions\": {\n    \"html\": true,\n    \"dockerfile\": true,\n    \"docker-compose\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding in Zed SSH Connections (JSON)\nDESCRIPTION: This snippet demonstrates how to set up port forwarding in Zed's SSH connection configuration, allowing local access to remote ports.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/remote-development.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [{ \"local_port\": 8080, \"remote_port\": 80 }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lombok Support in Eclipse JDTLS\nDESCRIPTION: Example configuration for enabling Lombok support in the Java with Eclipse JDTLS extension\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/java.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"java\": {\n      \"settings\": {\n        \"java.jdt.ls.lombokSupport.enabled:\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mix as External Formatter for Elixir in Zed\nDESCRIPTION: JSON configuration to set up Mix as an external formatter for Elixir files in Zed editor. This configuration enables automatic formatting on file save using the Mix format command.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elixir.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"format_on_save\": {\n        \"external\": {\n          \"command\": \"mix\",\n          \"arguments\": [\"format\", \"--stdin-filename\", \"{buffer_path}\", \"-\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Settings in Zed\nDESCRIPTION: Comprehensive terminal configuration including appearance, behavior and environment settings\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"alternate_scroll\": \"off\",\n    \"blinking\": \"terminal_controlled\",\n    \"copy_on_select\": false,\n    \"dock\": \"bottom\",\n    \"default_width\": 640,\n    \"default_height\": 320,\n    \"detect_venv\": {\n      \"on\": {\n        \"directories\": [\".env\", \"env\", \".venv\", \"venv\"],\n        \"activate_script\": \"default\"\n      }\n    },\n    \"env\": {},\n    \"font_family\": null,\n    \"font_features\": null,\n    \"font_size\": null,\n    \"line_height\": \"comfortable\",\n    \"option_as_meta\": false,\n    \"button\": true,\n    \"shell\": \"system\",\n    \"toolbar\": {\n      \"breadcrumbs\": true\n    },\n    \"working_directory\": \"current_project_directory\",\n    \"scrollbar\": {\n      \"show\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring X.ai Grok Model in Zed\nDESCRIPTION: This snippet shows how to configure the X.ai Grok model in Zed's settings. It specifies the API URL, available model, and version for the OpenAI provider.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n  \"language_models\": {\n    \"openai\": {\n      \"api_url\": \"https://api.x.ai/v1\",\n      \"available_models\": [\n        {\n          \"name\": \"grok-beta\",\n          \"display_name\": \"X.ai Grok (Beta)\",\n          \"max_tokens\": 131072\n        }\n      ],\n      \"version\": \"1\"\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Light and Dark Themes in Zed Settings (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set up light and dark themes in Zed's settings file. It allows specifying separate themes for light and dark modes, with an option to follow the system mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/themes.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theme\": {\n    \"mode\": \"system\",\n    \"light\": \"One Light\",\n    \"dark\": \"One Dark\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PyRight Virtual Environment in TOML\nDESCRIPTION: PyRight configuration for virtual environment setup using pyproject.toml file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/python.md#2025-04-11_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pyright]\nvenvPath = \".\"\nvenv = \".venv\"\n```\n\n----------------------------------------\n\nTITLE: Python Debug Configuration for Active File\nDESCRIPTION: Configuration for debugging the currently active Python file. This sets up the Python debug adapter to launch the file specified by the $ZED_FILE variable in the context of the project root directory.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"Python: Debug Active File\",\n  \"adapter\": \"python\",\n  \"program\": \"$ZED_FILE\",\n  \"request\": \"launch\",\n  \"cwd\": \"$ZED_WORKTREE_ROOT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Model in Zed Assistant\nDESCRIPTION: This JSON configuration shows how to set the default model for Zed's assistant feature, specifying the provider and model name.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assistant\": {\n    \"version\": \"2\",\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"gpt-4o\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VSCode HTML Language Server for Formatting in Zed Settings (JSON)\nDESCRIPTION: JSON configuration to use the VSCode HTML language server instead of Prettier for auto-formatting HTML in Zed. This snippet shows how to set the 'formatter' option to 'language_server' for the HTML language in the Zed settings file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/html.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"HTML\": {\n      \"formatter\": \"language_server\",\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring PyRight Virtual Environment in JSON\nDESCRIPTION: PyRight configuration for virtual environment setup using pyrightconfig.json file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/python.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"venvPath\": \".\",\n  \"venv\": \".venv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example .clangd Configuration File\nDESCRIPTION: This configuration file for clangd specifies additional include directories and enables strict diagnostics for missing and unused includes. It's typically placed at the root of a project to configure clangd behavior.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/cpp.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCompileFlags:\n  Add:\n    - \"--include-directory=/path/to/include\"\nDiagnostics:\n  MissingIncludes: Strict\n  UnusedIncludes: Strict\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Language Server in Zed IDE (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the Terraform language server in Zed's settings.json file. It shows how to enable experimental features like prefilling required fields.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/terraform.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"terraform-ls\": {\n      \"initialization_options\": {\n        \"experimentalFeatures\": {\n          \"prefillRequiredFields\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom LSP Configuration for Go\nDESCRIPTION: Structure for overriding default gopls initialization options in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/go.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n    \"gopls\": {\n        \"initialization_options\": {\n            \"hints\": {\n                ....\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supermaven as Edit Prediction Provider in JSON\nDESCRIPTION: This snippet demonstrates how to configure Supermaven as the edit prediction provider in the Zed editor's settings.json file. It enables Supermaven's code completion functionality.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"supermaven\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Schema Store Integration\nDESCRIPTION: Configuration to disable automatic schema detection and retrieval from JSON Schema Store.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/yaml.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"schemaStore\": {\n            \"enable\": false\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Erlang Language Server in Zed\nDESCRIPTION: JSON configuration to switch the Erlang language server from the default erlang_ls to erlang-language-platform (elp) in Zed settings. This configuration disables erlang-ls and enables elp while preserving other language settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/erlang.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Erlang\": {\n      \"language_servers\": [\"elp\", \"!erlang-ls\", \"...\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intelephense Language Server in Zed\nDESCRIPTION: JSON configuration to switch from the default phpactor to intelephense language server for PHP in Zed's settings.json file. This configuration disables phpactor and enables intelephense.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/php.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"PHP\": {\n      \"language_servers\": [\"intelephense\", \"!phpactor\", \"...\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Python Path in Zed Settings\nDESCRIPTION: Configuration for specifying Python interpreter path in Zed's settings.json file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/python.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Compile Commands Generation in CMake\nDESCRIPTION: This CMake command enables the generation of a compile_commands.json file, which is needed by clangd to understand how the project should be built. This helps clangd provide accurate code intelligence.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/cpp.md#2025-04-11_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring OmniSharp LSP Binary Path for C# in Zed\nDESCRIPTION: Configuration for specifying the custom path to OmniSharp binary in Zed settings. This allows users to set a specific OmniSharp executable path and provide additional command line arguments.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/csharp.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"omnisharp\": {\n      \"binary\": {\n        \"path\": \"/path/to/OmniSharp\",\n        \"arguments\": [\"optional\", \"additional\", \"args\", \"-lsp\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust-Analyzer Inlay Hints\nDESCRIPTION: Configuration for customizing inlay hint settings in rust-analyzer, including lifetime elision hints and closure return type hints settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rust.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"inlayHints\": {\n          \"maxLength\": null,\n          \"lifetimeElisionHints\": {\n            \"enable\": \"skip_trivial\",\n            \"useParameterNames\": true\n          },\n          \"closureReturnTypeHints\": {\n            \"enable\": \"always\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Outline Panel in Zed (JSON)\nDESCRIPTION: This snippet shows the default configuration for the outline panel in Zed. It includes settings for button visibility, width, docking position, icons, git status, indentation, auto-reveal, auto-fold, indent guides, and scrollbar options.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n\"outline_panel\": {\n  \"button\": true,\n  \"default_width\": 300,\n  \"dock\": \"left\",\n  \"file_icons\": true,\n  \"folder_icons\": true,\n  \"git_status\": true,\n  \"indent_size\": 20,\n  \"auto_reveal_entries\": true,\n  \"auto_fold_dirs\": true,\n  \"indent_guides\": {\n    \"show\": \"always\"\n  },\n  \"scrollbar\": {\n    \"show\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Servers with Custom Command in Zed\nDESCRIPTION: JSON configuration for specifying a custom command to execute a context server, including path, arguments, environment variables, and additional settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/context-servers.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context_servers\": {\n    \"my-context-server\": {\n      \"command\": {\n        \"path\": \"/path/to/my-context-server\",\n        \"args\": [\"run\"],\n        \"env\": {}\n      },\n      \"settings\": {\n        \"enable_something\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StyLua in Zed Settings\nDESCRIPTION: JSON configuration for setting up the StyLua formatter in Zed's settings.json file, specifying the external formatter command and arguments\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/luau.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Luau\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"stylua\",\n          \"arguments\": [\"-\"]\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring clangd Arguments in Zed\nDESCRIPTION: This configuration passes specific command-line arguments to clangd. The example disables function argument placeholders in code completion, changing how function calls appear in the editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/cpp.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": [\"--function-arg-placeholders=0\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Deno Jupyter Kernel for TypeScript REPL\nDESCRIPTION: Shell command to install the Deno Jupyter kernel for TypeScript REPL functionality after installing Deno.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndeno jupyter --install\n```\n\n----------------------------------------\n\nTITLE: Overriding Svelte Language Server Settings in Zed\nDESCRIPTION: Configuration template for overriding default Svelte language server settings in Zed. Allows customization of TypeScript and JavaScript configurations.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/svelte.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"svelte-language-server\": {\n    \"initialization_options\": {\n      \"configuration\": {\n        \"typescript\": {\n          ......\n        },\n        \"javascript\": {\n          ......\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Server Priorities in Zed\nDESCRIPTION: Example showing how to specify language server preferences for PHP. This configuration prioritizes intelephense, disables phpactor, and includes other registered language servers.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"PHP\": {\n      \"language_servers\": [\"intelephense\", \"!phpactor\", \"...\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Vim Mode Context Template\nDESCRIPTION: Template for configuring different vim mode contexts including normal, visual, and insert modes\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"context\": \"VimControl && !menu\",\n    \"bindings\": {\n    }\n  },\n  {\n    \"context\": \"vim_mode == normal && !menu\",\n    \"bindings\": {\n    }\n  },\n  {\n    \"context\": \"vim_mode == insert\",\n    \"bindings\": {\n    }\n  },\n  {\n    \"context\": \"EmptyPane || SharedScreen\",\n    \"bindings\": {\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Zed Extension in Extensions Repository\nDESCRIPTION: This snippet shows the process of updating a Zed extension in the extensions repository. It includes steps to navigate to the extensions repo, update the Zed submodule, and prepare changes for a new PR.\nSOURCE: https://github.com/zed-industries/zed/blob/main/extensions/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Go into your clone of the extensions repo\ncd ../extensions\n\n# Update\ngit checkout main\ngit pull\njust init-submodule extensions/zed\n\n# Update the Zed submodule\ncd extensions/zed\ngit checkout main\ngit pull\ncd -\ngit add extensions.toml extensions/zed\n```\n\n----------------------------------------\n\nTITLE: Configuring LuaLS Settings in luarc.json\nDESCRIPTION: Configuration file for LuaLS (Lua Language Server) settings including runtime version, diagnostics, formatting preferences, and workspace library paths\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/lua.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\",\n  \"diagnostics.severity\": {\n    \"duplicate-set-field\": \"Hint\"\n  },\n  \"format.enable\": true,\n  \"format.defaultConfig\": {\n    \"indent_style\": \"space\",\n    \"indent_size\": \"4\"\n  },\n  \"workspace.library\": [\"../somedir/library\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Cells for REPL Execution\nDESCRIPTION: Demonstrates how to define cells in Python using '# %%' separators for notebook-like execution in Zed's REPL.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# %% Cell 1\nimport time\nimport numpy as np\n\n# %% Cell 2\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Predictions in Zed\nDESCRIPTION: Configuration options for disabling edit predictions in specific language scopes. Can be disabled for comments, strings, or specific programming languages.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"disabled_in\": [\"comment\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"disabled_in\": [\"comment\", \"string\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Go\": {\n      \"edit_predictions_disabled_in\": [\"comment\", \"string\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PyRight LSP Settings in Zed\nDESCRIPTION: Configuration example for PyRight language server settings including strict type checking, workspace diagnostics, and Python interpreter path specification.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/python.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python.analysis\": {\n          \"diagnosticMode\": \"workspace\",\n          \"typeCheckingMode\": \"strict\"\n        },\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Working Directory to Specific Path\nDESCRIPTION: Always uses a specific directory as the terminal's working directory. The path will be shell expanded and falls back to the home directory if invalid.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"working_directory\": {\n      \"always\": {\n        \"directory\": \"~/zed/projects/\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Conda Environment for Python REPL\nDESCRIPTION: Shell commands to install and configure IPyKernel in a Conda environment for Python REPL.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsource activate myenv\nconda install ipykernel\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File Types with Glob Patterns in Zed Settings\nDESCRIPTION: Example JSON configuration for Zed settings that uses glob patterns to override file types. This snippet demonstrates how to assign file extensions to specific language types, including using directory-specific glob patterns for templated HTML files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/globs.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file_types\": {\n    \"C++\": [\"[cC]\"],\n    \"Jinja2\": [\"**/templates/*.html\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternative Models for Inline Assists in Zed\nDESCRIPTION: This JSON configuration shows how to set up additional models for generating alternative inline assists in parallel with the default model in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assistant\": {\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"claude-3-5-sonnet\"\n    },\n    \"inline_alternatives\": [\n      {\n        \"provider\": \"zed.dev\",\n        \"model\": \"gpt-4o\"\n      }\n    ],\n    \"version\": \"2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example clang-format Configuration for C++\nDESCRIPTION: This YAML configuration for clang-format sets formatting rules for C++ code. It uses LLVM style as a base, sets indent width to 4 spaces, and configures pointer alignment to be left-aligned for C++ code.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/cpp.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nBasedOnStyle: LLVM\nIndentWidth: 4\n---\nLanguage: Cpp\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom DeepSeek Models and API Endpoint\nDESCRIPTION: Configuration for customizing DeepSeek models in Zed, allowing specification of model details and customizing the API endpoint. Defines max token limits and output token limits for different models.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language_models\": {\n    \"deepseek\": {\n      \"api_url\": \"https://api.deepseek.com\",\n      \"available_models\": [\n        {\n          \"name\": \"deepseek-chat\",\n          \"display_name\": \"DeepSeek Chat\",\n          \"max_tokens\": 64000\n        },\n        {\n          \"name\": \"deepseek-reasoner\",\n          \"display_name\": \"DeepSeek Reasoner\",\n          \"max_tokens\": 64000,\n          \"max_output_tokens\": 4096\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Language Server for Specific Languages in Zed\nDESCRIPTION: Example showing how to disable language server support for Markdown files, which can improve performance when working with large documentation projects.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Markdown\": {\n      \"enable_language_server\": false\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Advanced Port Forwarding Configuration in Zed (JSON)\nDESCRIPTION: This snippet shows advanced port forwarding configuration in Zed, including setting local and remote host interfaces for forwarded ports.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/remote-development.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [\n        {\n          \"local_port\": 8080,\n          \"remote_port\": 80,\n          \"local_host\": \"0.0.0.0\",\n          \"remote_host\": \"docker-host\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Completely Disabling Edit Predictions\nDESCRIPTION: JSON configuration to completely turn off edit predictions across all providers. This setting disables the feature entirely in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n  \"edit_prediction_provider\": \"none\"\n},\n```\n\n----------------------------------------\n\nTITLE: ESLint Single Rule Configuration on Format\nDESCRIPTION: Configuration to run a specific ESLint rule during format operations while also configuring general ESLint settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  },\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"codeActionOnSave\": {\n          \"rules\": [\"import/order\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP for Proto in Zed\nDESCRIPTION: JSON configuration for setting up the Proto language server in Zed, specifying the binary path for protols.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/proto.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"protobuf-language-server\": {\n    \"binary\": {\n      \"path\": \"protols\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtualenv for Python REPL\nDESCRIPTION: Shell commands to set up IPyKernel in a Python virtual environment for REPL usage.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsource activate myenv\npip install ipykernel\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n```\n\n----------------------------------------\n\nTITLE: ESLint Node Path Configuration\nDESCRIPTION: Settings to configure the nodePath parameter for ESLint integration in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"nodePath\": \".yarn/sdks\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization Settings\nDESCRIPTION: Configuration options for optimizing rust-analyzer performance in large projects by adjusting check settings and diagnostics.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rust.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"diagnostics\": {\n          \"experimental\": {\n            \"enable\": true\n          }\n        },\n        \"checkOnSave\": false,\n        \"cargo\": {\n          \"allTargets\": false\n        },\n        \"check\": {\n          \"workspace\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lexical Language Server for Elixir in Zed\nDESCRIPTION: JSON configuration to switch from the default elixir-ls to lexical language server in Zed editor's settings.json file. This configuration explicitly enables lexical while disabling elixir-ls.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elixir.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\"lexical\", \"!elixir-ls\", \"...\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keybindings for Zed Tasks in JSON\nDESCRIPTION: This snippet demonstrates how to define custom keybindings for Zed tasks in the keymap.json file. It binds the 'echo current file's path' task to the 'alt-g' key combination.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/tasks.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"alt-g\": [\"task::Spawn\", { \"task_name\": \"echo current file's path\" }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Format on Save for Markdown in Zed\nDESCRIPTION: Example showing how to disable the automatic formatting when saving Markdown files, which might be useful for maintaining manual formatting in documentation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"languages\": {\n  \"Markdown\": {\n    \"format_on_save\": \"off\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Keybindings in GPUI JSON Keymap\nDESCRIPTION: This JSON snippet demonstrates how to configure more complex keybindings for a specific context in GPUI. It shows how to map keys to actions with parameters and how to handle modifier keys.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/docs/key_dispatch.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"menu\",\n  \"bindings\": {\n    \"up\": [\"menu::Move\", {\"direction\": \"up\", \"select\": false}],\n    \"down\": [\"menu::Move\", {\"direction\": \"down\", \"select\": false}],\n    \"shift-up\": [\"menu::Move\", {\"direction\": \"up\", \"select\": true}],\n    \"shift-down\": [\"menu::Move\", {\"direction\": \"down\", \"select\": true}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Language Server in Zed\nDESCRIPTION: Example demonstrating how to use nested objects instead of dot-delimited strings when configuring TypeScript language server options, including strict null checks and ECMAScript target version.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"typescript-language-server\": {\n    \"initialization_options\": {\n      // These are not supported (VSCode dotted style):\n      // \"preferences.strictNullChecks\": true,\n      // \"preferences.target\": \"ES2020\"\n      //\n      // These is correct (nested notation):\n      \"preferences\": {\n        \"strictNullChecks\": true,\n        \"target\": \"ES2020\"\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taplo TOML Language Server in Zed\nDESCRIPTION: This TOML snippet demonstrates how to configure the Taplo TOML language server using a .taplo.toml file in the project root. It specifies files to include, and sets formatting options for aligning entries and reordering keys.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/toml.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# .taplo.toml\ninclude = [\"Cargo.toml\", \"some_directory/**/*.toml\"]\n# exclude = [\"Cargo.toml\"]\n\n[formatting]\nalign_entries = true\nreorder_keys = true\n```\n\n----------------------------------------\n\nTITLE: Default Inlay Hints Configuration for Go\nDESCRIPTION: Default initialization options for gopls inlay hints in Zed editor settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/go.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"hints\": {\n    \"assignVariableTypes\": true,\n    \"compositeLiteralFields\": true,\n    \"compositeLiteralTypes\": true,\n    \"constantValues\": true,\n    \"functionTypeParameters\": true,\n    \"parameterNames\": true,\n    \"rangeVariableTypes\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKit LSP in JSON for Swift in Zed\nDESCRIPTION: Instructions for modifying SourceKit LSP behavior by creating a configuration file. The file should be named 'config.json' and placed in the '.sourcekit-lsp' directory under the home directory or project root.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/swift.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Configuration\n\nYou can modify the behavior of SourceKit LSP by creating a `.sourcekit-lsp/config.json` under your home directory or in your project root. See [SourceKit-LSP configuration file](https://github.com/swiftlang/sourcekit-lsp/blob/main/Documentation/Configuration%20File.md) for complete documentation.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Debug Configuration in JSON\nDESCRIPTION: Template for creating a custom debug configuration in the .zed/debug.json file. This configuration defines how Zed should initialize and connect to a debug adapter, including parameters like the adapter type, request type, working directory, and program path.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    // The label for the debug configuration and used to identify the debug session inside the debug panel\n    \"label\": \"Example Start debugger config\",\n    // The debug adapter that Zed should use to debug the program\n    \"adapter\": \"custom\",\n    // Request: defaults to launch\n    //  - launch: Zed will launch the program if specified or shows a debug terminal with the right configuration\n    //  - attach: Zed will attach to a running program to debug it or when the process_id is not specified we will show a process picker (only supported for node currently)\n    \"request\": \"launch\",\n    // cwd: defaults to the current working directory of your project ($ZED_WORKTREE_ROOT)\n    // this field also supports task variables e.g. $ZED_WORKTREE_ROOT\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    // program: The program that you want to debug\n    // this fields also support task variables e.g. $ZED_FILE\n    // Note: this field should only contain the path to the program you want to debug\n    \"program\": \"path_to_program\",\n    // initialize_args: This field should contain all the adapter specific initialization arguments that are directly send to the debug adapter\n    \"initialize_args\": {\n      // \"stopOnEntry\": true // e.g. to stop on the first line of the program (These args are DAP specific)\n    },\n    // connection: the connection that a custom debugger should use\n    \"connection\": \"stdio\",\n    // The cli command used to start the debug adapter e.g. `python3`, `node` or the adapter binary\n    \"command\": \"path_to_cli\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Language Server for Ruby in Zed Settings\nDESCRIPTION: JSON configuration for setting up Tailwind CSS Language Server to work with Ruby and ERB files in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"tailwindcss-language-server\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"tailwindcss-language-server\": {\n      \"settings\": {\n        \"includeLanguages\": {\n          \"erb\": \"html\",\n          \"ruby\": \"html\"\n        },\n        \"experimental\": {\n          \"classRegex\": [\"\\\\bclass:\\\\s*['\\\"]([^'\\\"]*)['\\\"]\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Keybinding for Prefilled Inline Assistant Prompts in Zed\nDESCRIPTION: This JSON configuration demonstrates how to create a custom keybinding that prefills a prompt for the Inline Assistant in Zed. The example binds Ctrl+Shift+Enter to open the Inline Assistant with the prompt \"Build a snake game\" when in full editor mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/inline-assistant.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"context\": \"Editor && mode == full\",\n    \"bindings\": {\n      \"ctrl-shift-enter\": [\n        \"assistant::InlineAssist\",\n        { \"prompt\": \"Build a snake game\" }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Jsonnet Language Server Settings in Zed\nDESCRIPTION: This JSON snippet demonstrates how to configure workspace options for the Jsonnet language server in Zed's settings.json file. It shows an example of enabling support for resolving tanka import paths.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/jsonnet.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"jsonnet-language-server\": {\n      \"settings\": {\n        \"resolve_paths_with_tanka\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Formatting Line Length Configuration\nDESCRIPTION: JSON configuration to customize the maximum line length for Dart code formatting through the LSP settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/dart.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"dart\": {\n      \"settings\": {\n        \"lineLength\": 140\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inlay Hints in Zed\nDESCRIPTION: Settings to enable and configure inlay hints that provide inline code information such as parameter names and inferred types.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"inlay_hints\": {\n  \"enabled\": true,\n  \"show_type_hints\": true,\n  \"show_parameter_hints\": true,\n  \"show_other_hints\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slash Command Argument Completion in Rust\nDESCRIPTION: Demonstrates how to implement the complete_slash_command_argument method for a Zed extension in Rust. It provides argument completions for the 'pick-one' command, returning a list of SlashCommandArgumentCompletion objects.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/slash-commands.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl zed::Extension for MyExtension {\n    fn complete_slash_command_argument(\n        &self,\n        command: SlashCommand,\n        _args: Vec<String>,\n    ) -> Result<Vec<SlashCommandArgumentCompletion>, String> {\n        match command.name.as_str() {\n            \"echo\" => Ok(vec![]),\n            \"pick-one\" => Ok(vec![\n                SlashCommandArgumentCompletion {\n                    label: \"Option One\".to_string(),\n                    new_text: \"option-1\".to_string(),\n                    run_command: true,\n                },\n                SlashCommandArgumentCompletion {\n                    label: \"Option Two\".to_string(),\n                    new_text: \"option-2\".to_string(),\n                    run_command: true,\n                },\n                SlashCommandArgumentCompletion {\n                    label: \"Option Three\".to_string(),\n                    new_text: \"option-3\".to_string(),\n                    run_command: true,\n                },\n            ]),\n            command => Err(format!(\"unknown slash command: \\\"{command}\\\"\")),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Format on Save for C++ in Zed\nDESCRIPTION: This configuration enables automatic formatting of C++ files when saving them in Zed. It also sets the tab size to 2 spaces specifically for C++ files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/cpp.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"C++\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Endpoint in Zed\nDESCRIPTION: This JSON snippet demonstrates how to set up a custom API endpoint for a language model provider in Zed's settings.json file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language_models\": {\n    \"some-provider\": {\n      \"api_url\": \"http://localhost:11434\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Panel Default Settings in Zed\nDESCRIPTION: Default configuration for the project panel, including appearance, behavior, and display options.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project_panel\": {\n    \"button\": true,\n    \"default_width\": 240,\n    \"dock\": \"left\",\n    \"entry_spacing\": \"comfortable\",\n    \"file_icons\": true,\n    \"folder_icons\": true,\n    \"git_status\": true,\n    \"indent_size\": 20,\n    \"auto_reveal_entries\": true,\n    \"auto_fold_dirs\": true,\n    \"scrollbar\": {\n      \"show\": null\n    },\n    \"show_diagnostics\": \"all\",\n    \"indent_guides\": {\n      \"show\": \"always\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Language Server Settings in Zed\nDESCRIPTION: This JSON snippet demonstrates how to configure workspace options for the Kotlin language server in Zed's settings.json file. The example shows how to change the JVM target from the default (1.8) to version 17.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/kotlin.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"kotlin-language-server\": {\n      \"settings\": {\n        \"compiler\": {\n          \"jvm\": {\n            \"target\": \"17\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Java Eclipse JDTLS Settings\nDESCRIPTION: Basic configuration template for Java with Eclipse JDTLS extension showing the structure for settings and initialization options\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/java.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"java\": {\n      \"settings\": {},\n      \"initialization_options\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Thinking Mode for Anthropic Models\nDESCRIPTION: This configuration shows how to enable extended thinking mode for Anthropic models that support it. The snippet demonstrates setting the mode type to 'thinking' and specifying a budget for tokens.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"claude-3-7-sonnet-latest\",\n  \"display_name\": \"claude-3-7-sonnet-thinking\",\n  \"max_tokens\": 200000,\n  \"mode\": {\n    \"type\": \"thinking\",\n    \"budget_tokens\": 4_096\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Text Editing Keybindings Restoration\nDESCRIPTION: Configuration to restore common text editing shortcuts while using vim mode\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Editor && !menu\",\n  \"bindings\": {\n    \"ctrl-c\": \"editor::Copy\",\n    \"ctrl-x\": \"editor::Cut\",\n    \"ctrl-v\": \"editor::Paste\",\n    \"ctrl-y\": \"editor::Undo\",\n    \"ctrl-f\": \"buffer_search::Deploy\",\n    \"ctrl-o\": \"workspace::Open\",\n    \"ctrl-a\": \"editor::SelectAll\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Biome Schema in Zed\nDESCRIPTION: Basic configuration example for biome.json file that must be placed in the workspace root. This snippet shows the minimal required configuration with schema reference.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/biome.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dock Navigation Configuration\nDESCRIPTION: Configuration for enabling ctrl-w based navigation between editor docks\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Dock\",\n  \"bindings\": {\n    \"ctrl-w h\": \"workspace::ActivatePaneLeft\",\n    \"ctrl-w l\": \"workspace::ActivatePaneRight\",\n    \"ctrl-w k\": \"workspace::ActivatePaneUp\",\n    \"ctrl-w j\": \"workspace::ActivatePaneDown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby Language Servers in Zed Settings\nDESCRIPTION: JSON configuration for enabling or disabling specific Ruby language servers in Zed editor settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"!solargraph\", \"!rubocop\", \"...\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Prediction Display Mode\nDESCRIPTION: JSON configuration to set the display mode for edit predictions. Supports 'eager' (default) which shows predictions inline, or 'subtle' which only displays predictions when holding a modifier key.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"edit_predictions\": {\n  \"mode\": \"eager\" | \"subtle\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Theme JSON Schema for Zed Extensions\nDESCRIPTION: This JSON snippet demonstrates the structure of an icon theme definition file. It includes theme name, author information, appearance settings, directory icons, chevron icons, file stem mappings, file suffix mappings, and file icon definitions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/icon-themes.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://zed.dev/schema/icon_themes/v0.2.0.json\",\n  \"name\": \"My Icon Theme\",\n  \"author\": \"Your Name\",\n  \"themes\": [\n    {\n      \"name\": \"My Icon Theme\",\n      \"appearance\": \"dark\",\n      \"directory_icons\": {\n        \"collapsed\": \"./icons/folder.svg\",\n        \"expanded\": \"./icons/folder-open.svg\"\n      },\n      \"chevron_icons\": {\n        \"collapsed\": \"./icons/chevron-right.svg\",\n        \"expanded\": \"./icons/chevron-down.svg\"\n      },\n      \"file_stems\": {\n        \"Makefile\": \"make\"\n      },\n      \"file_suffixes\": {\n        \"mp3\": \"audio\",\n        \"rs\": \"rust\"\n      },\n      \"file_icons\": {\n        \"audio\": { \"path\": \"./icons/audio.svg\" },\n        \"default\": { \"path\": \"./icons/file.svg\" },\n        \"make\": { \"path\": \"./icons/make.svg\" },\n        \"rust\": { \"path\": \"./icons/rust.svg\" }\n        // ...\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Statement-Level Stepping Granularity\nDESCRIPTION: Configuration for setting the debugger stepping granularity to statement level. This allows the program to run until the current statement has finished executing, which can be more fine-grained than line-level stepping.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"stepping_granularity\": \"statement\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rules Customization Configuration\nDESCRIPTION: Settings to customize ESLint rule severities, showing how to set all ESLint messages to display as warnings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"rulesCustomizations\": [\n          { \"rule\": \"*\", \"severity\": \"warn\" }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inlay Hints in JSON\nDESCRIPTION: Settings for code inlay hints including type hints, parameter hints, and display options.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n\"inlay_hints\": {\n  \"enabled\": false,\n  \"show_type_hints\": true,\n  \"show_parameter_hints\": true,\n  \"show_other_hints\": true,\n  \"show_background\": false,\n  \"edit_debounce_ms\": 700,\n  \"scroll_debounce_ms\": 50,\n  \"toggle_on_modifiers_press\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rubocop in Zed Settings\nDESCRIPTION: JSON configuration for enabling unsafe autocorrection in Rubocop within Zed editor settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"rubocop\", \"!solargraph\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"rubocop\": {\n      \"initialization_options\": {\n        \"safeAutocorrect\": false\n      }\n    },\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"enabledFeatures\": {\n          \"diagnostics\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Servers with Database Settings in Zed\nDESCRIPTION: Example JSON configuration showing how to configure a Postgres context server in Zed's settings.json file, including database connection information.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/context-servers.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context_servers\": {\n    \"postgres-context-server\": {\n      \"settings\": {\n        \"database_url\": \"postgresql://postgres@localhost/my_database\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Solargraph to Gemfile\nDESCRIPTION: Ruby code snippet for adding Solargraph to a project's Gemfile as a development dependency.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'solargraph', group: :development\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-modifier Key for Edit Prediction Conflicts\nDESCRIPTION: JSON configuration for keymap that allows using tab key even when there are conflicts. This overrides the default behavior that requires a modifier key in conflict situations.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Editor && edit_prediction_conflict\",\n  \"bindings\": {\n    // Here we bind tab to accept even when there's a language server completion\n    // or the cursor isn't at the correct indentation level\n    \"tab\": \"editor::AcceptEditPrediction\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno Language Server Settings in Zed\nDESCRIPTION: This JSON configuration disables the default language servers for TypeScript and TSX files and enables the Deno language server instead. It also sets the formatter to use the language server for both file types.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/deno.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"deno\": {\n      \"settings\": {\n        \"deno\": {\n          \"enable\": true\n        }\n      }\n    }\n  },\n  \"languages\": {\n    \"TypeScript\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    },\n    \"TSX\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Call Settings in Zed (JSON)\nDESCRIPTION: This snippet demonstrates how to configure call settings in Zed. It includes options for muting the microphone on join and sharing the project when first joining a channel.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n\"calls\": {\n  // Join calls with the microphone live by default\n  \"mute_on_join\": false,\n  // Share your project when you are the first to join a channel\n  \"share_on_join\": false\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Adapter Connection Timeout\nDESCRIPTION: Configuration for setting the timeout duration in milliseconds when connecting to a TCP debug adapter. This helps handle situations where the adapter might not respond in a timely manner.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"timeout\": 3000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Highlighting Theme Overrides in Zed\nDESCRIPTION: Demonstrates how to customize syntax highlighting by overriding default theme settings. This example shows how to make comments italic and change string colors.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"experimental.theme_overrides\": {\n  \"syntax\": {\n    \"comment\": {\n      \"font_style\": \"italic\"\n    },\n    \"string\": {\n      \"color\": \"#00AA00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm File Associations in Zed Settings\nDESCRIPTION: JSON configuration snippet for enabling Helm language support in Zed editor. This snippet should be added to the .zed/settings.json file to associate Helm template files with the Helm language parser.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/helm.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"file_types\": {\n    \"Helm\": [\n      \"**/templates/**/*.tpl\",\n      \"**/templates/**/*.yaml\",\n      \"**/templates/**/*.yml\",\n      \"**/helmfile.d/**/*.yaml\",\n      \"**/helmfile.d/**/*.yml\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Trailing Whitespace Configuration\nDESCRIPTION: JSON configuration to disable automatic removal of trailing whitespace in Markdown files on save.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/markdown.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Markdown\": {\n      \"remove_trailing_whitespace_on_save\": false\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Installing Solargraph Gem\nDESCRIPTION: Shell command for installing the Solargraph gem, which is required for Solargraph language server support in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngem install solargraph\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Completions in Zed Settings\nDESCRIPTION: JSON configuration to disable automatic code completions in Zed. This setting prevents completions from appearing automatically as you type.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"show_completions_on_input\": false\n```\n\n----------------------------------------\n\nTITLE: Custom Completion Snippets Configuration\nDESCRIPTION: Configuration for adding custom code completion snippets to rust-analyzer, including common patterns like Arc::new, Some, Ok, and others.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rust.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"completion\": {\n          \"snippets\": {\n            \"custom\": {\n              \"Arc::new\": {\n                \"postfix\": \"arc\",\n                \"body\": [\"Arc::new(${receiver})\"],\n                \"requires\": \"std::sync::Arc\",\n                \"scope\": \"expr\"\n              },\n              \"Some\": {\n                \"postfix\": \"some\",\n                \"body\": [\"Some(${receiver})\"],\n                \"scope\": \"expr\"\n              },\n              \"Ok\": {\n                \"postfix\": \"ok\",\n                \"body\": [\"Ok(${receiver})\"],\n                \"scope\": \"expr\"\n              },\n              \"Rc::new\": {\n                \"postfix\": \"rc\",\n                \"body\": [\"Rc::new(${receiver})\"],\n                \"requires\": \"std::rc::Rc\",\n                \"scope\": \"expr\"\n              },\n              \"Box::pin\": {\n                \"postfix\": \"boxpin\",\n                \"body\": [\"Box::pin(${receiver})\"],\n                \"requires\": \"std::boxed::Box\",\n                \"scope\": \"expr\"\n              },\n              \"vec!\": {\n                \"postfix\": \"vec\",\n                \"body\": [\"vec![${receiver}]\"],\n                \"description\": \"vec![]\",\n                \"scope\": \"expr\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light and Dark Icon Themes in Zed Settings\nDESCRIPTION: This JSON configuration demonstrates how to set different icon themes for light and dark modes in Zed. The 'mode' property can be set to 'system', 'light', or 'dark' to determine when each theme is applied.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/icon-themes.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon_theme\": {\n    \"mode\": \"system\",\n    \"light\": \"Light Icon Theme\",\n    \"dark\": \"Dark Icon Theme\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Prettier for TypeScript Files\nDESCRIPTION: Configuration to disable Prettier formatting for TypeScript files in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/typescript.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"TypeScript\": {\n      \"prettier\": { \"allowed\": false }\n    }\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Toolchain\nDESCRIPTION: Command to install the Rust programming language toolchain, which is a prerequisite for developing Zed extensions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/extensions/slash-commands-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Keybinding for Edit Predictions\nDESCRIPTION: JSON configuration for keymap that adds a custom keybinding for accepting edit predictions when the default keybindings have been overridden globally.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  // ...\n  {\n    \"context\": \"Editor && edit_prediction_conflict\",\n    \"bindings\": {\n      \"alt-l\": \"editor::AcceptEditPrediction\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Git Status in Project Panel\nDESCRIPTION: Hides Git status indicators for files in the project panel.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"git_status\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace-Level Save Binding Configuration\nDESCRIPTION: Example of configuring a file save command at the Workspace context level\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"ctrl-s\": \"file::Save\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Mode Tab Behavior with Edit Predictions\nDESCRIPTION: Additional JSON configuration for keymap that restores default tab behavior in vim mode contexts when using alt-tab for edit predictions. These bindings are needed when vim_mode is enabled.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"context\": \"(VimControl && !menu) || vim_mode == replace || vim_mode == waiting\",\n    \"bindings\": {\n      \"tab\": \"vim::Tab\"\n    }\n  },\n  {\n    \"context\": \"vim_mode == literal\",\n    \"bindings\": {\n      \"tab\": [\"vim::Literal\", [\"tab\", \"\\u0009\"]]\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Minitest with Rails in Zed Tasks\nDESCRIPTION: JSON configuration for setting up a custom task to run Minitest with Rails in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE:$ZED_ROW\",\n    \"command\": \"bin/rails\",\n    \"args\": [\"test\", \"\\\"$ZED_RELATIVE_FILE:$ZED_ROW\\\"\"],\n    \"tags\": [\"ruby-test\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Git Action Reference Table in Markdown\nDESCRIPTION: A markdown table listing Git-related actions in Zed along with their corresponding keybindings. This table provides a quick reference for users to understand available Git commands and their keyboard shortcuts.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/git.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Action                                 | Keybinding                         |\n| -------------------------------------- | ---------------------------------- |\n| {#action git::Add}                     | {#kb git::Add}                     |\n| {#action git::StageAll}                | {#kb git::StageAll}                |\n| {#action git::UnstageAll}              | {#kb git::UnstageAll}              |\n| {#action git::ToggleStaged}            | {#kb git::ToggleStaged}            |\n| {#action git::StageAndNext}            | {#kb git::StageAndNext}            |\n| {#action git::UnstageAndNext}          | {#kb git::UnstageAndNext}          |\n| {#action git::Commit}                  | {#kb git::Commit}                  |\n| {#action git::ExpandCommitEditor}      | {#kb git::ExpandCommitEditor}      |\n| {#action git::Push}                    | {#kb git::Push}                    |\n| {#action git::ForcePush}               | {#kb git::ForcePush}               |\n| {#action git::Pull}                    | {#kb git::Pull}                    |\n| {#action git::Fetch}                   | {#kb git::Fetch}                   |\n| {#action git::Diff}                    | {#kb git::Diff}                    |\n| {#action git::Restore}                 | {#kb git::Restore}                 |\n| {#action git::RestoreFile}             | {#kb git::RestoreFile}             |\n| {#action git::Branch}                  | {#kb git::Branch}                  |\n| {#action git::Switch}                  | {#kb git::Switch}                  |\n| {#action git::CheckoutBranch}          | {#kb git::CheckoutBranch}          |\n| {#action editor::ToggleGitBlame}       | {#kb editor::ToggleGitBlame}       |\n| {#action editor::ToggleGitBlameInline} | {#kb editor::ToggleGitBlameInline} |\n```\n\n----------------------------------------\n\nTITLE: Configuring Taplo Language Server via Zed LSP Settings\nDESCRIPTION: This JSON snippet shows how to configure Taplo language server options through Zed's LSP settings. It demonstrates setting the 'array_auto_collapse' option to false.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/toml.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"lsp\": {\n    \"taplo\": {\n      \"settings\": {\n        \"array_auto_collapse\": false\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Solargraph in Zed Settings\nDESCRIPTION: JSON configuration for enabling diagnostics and formatting in Solargraph within Zed editor settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"solargraph\": {\n      \"initialization_options\": {\n        \"diagnostics\": true,\n        \"formatting\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Zed Extension Project Structure\nDESCRIPTION: Shell commands for cloning the Zed repository, creating a new extension project, and setting up the initial project structure with necessary configuration files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/extensions/slash-commands-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/zed-industries/zed.git\ncp -RL zed/extensions/slash-commands-example .\n\ncd slash-commands-example/\n\n# Update Cargo.toml to make it standalone\ncat > Cargo.toml << EOF\n[package]\nname = \"slash_commands_example\"\nversion = \"0.1.0\"\nedition = \"2021\"\nlicense = \"Apache-2.0\"\n\n[lib]\npath = \"src/slash_commands_example.rs\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nzed_extension_api = \"0.1.0\"\nEOF\n\ncurl -O https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-APACHE\necho \"# Zed Slash Commands Example Extension\" > README.md\necho \"Cargo.lock\" > .gitignore\necho \"target/\" >> .gitignore\necho \"*.wasm\" >> .gitignore\n\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n\ncd ..\nmv slash-commands-example MY-SUPER-COOL-ZED-EXTENSION\nzed $_\n```\n\n----------------------------------------\n\nTITLE: Configuring next-ls Language Server for Elixir in Zed\nDESCRIPTION: JSON configuration to switch from the default elixir-ls to next-ls language server in Zed editor's settings.json file. This configuration explicitly enables next-ls while disabling elixir-ls.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elixir.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\"next-ls\", \"!elixir-ls\", \"...\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visual Mode Surround Configuration\nDESCRIPTION: Configuration for adding surround functionality in visual mode\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"vim_mode == visual\",\n  \"bindings\": {\n    \"shift-s\": [\"vim::PushAddSurrounds\", {}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Tags Configuration for AWS CloudFormation\nDESCRIPTION: Configuration for supporting AWS CloudFormation custom YAML tags in yaml-language-server settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/yaml.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"customTags\": [\n            \"!And scalar\",\n            \"!And mapping\",\n            \"!And sequence\",\n            \"!If scalar\",\n            \"!If mapping\",\n            \"!If sequence\",\n            \"!Not scalar\",\n            \"!Not mapping\",\n            \"!Not sequence\",\n            \"!Equals scalar\",\n            \"!Equals mapping\",\n            \"!Equals sequence\",\n            \"!Or scalar\",\n            \"!Or mapping\",\n            \"!Or sequence\",\n            \"!FindInMap scalar\",\n            \"!FindInMap mapping\",\n            \"!FindInMap sequence\",\n            \"!Base64 scalar\",\n            \"!Base64 mapping\",\n            \"!Base64 sequence\",\n            \"!Cidr scalar\",\n            \"!Cidr mapping\",\n            \"!Cidr sequence\",\n            \"!Ref scalar\",\n            \"!Ref mapping\",\n            \"!Ref sequence\",\n            \"!Sub scalar\",\n            \"!Sub mapping\",\n            \"!Sub sequence\",\n            \"!GetAtt scalar\",\n            \"!GetAtt mapping\",\n            \"!GetAtt sequence\",\n            \"!GetAZs scalar\",\n            \"!GetAZs mapping\",\n            \"!GetAZs sequence\",\n            \"!ImportValue scalar\",\n            \"!ImportValue mapping\",\n            \"!ImportValue sequence\",\n            \"!Select scalar\",\n            \"!Select mapping\",\n            \"!Select sequence\",\n            \"!Split scalar\",\n            \"!Split mapping\",\n            \"!Split sequence\",\n            \"!Join scalar\",\n            \"!Join mapping\",\n            \"!Join sequence\",\n            \"!Condition scalar\",\n            \"!Condition mapping\",\n            \"!Condition sequence\"\n          ]\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Prediction Conflict Keybinding\nDESCRIPTION: JSON configuration for keymap that customizes the keybinding used when there's a conflict with the tab key. This allows using a different key combination when language server completions are visible.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Editor && edit_prediction_conflict\",\n  \"bindings\": {\n    \"ctrl-enter\": \"editor::AcceptEditPrediction\" // Example of a modified keybinding\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nim Formatter in Zed's settings.json\nDESCRIPTION: This JSON configuration snippet shows how to set up the 'nph' formatter for Nim in Zed's settings.json file. It specifies the external command and arguments to use for formatting Nim code.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/nim.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Nim\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"nph\",\n          \"arguments\": [\"-\"]\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Initialization Options\nDESCRIPTION: Example showing how to configure rust-analyzer initialization options through LSP settings. Sets the check command to clippy.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"rust-analyzer\": {\n    \"initialization_options\": {\n      \"check\": {\n        \"command\": \"clippy\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor Shape\nDESCRIPTION: Settings for customizing the cursor appearance in the editor. Options include bar, block, underline, and hollow shapes.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"cursor_shape\": \"bar\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"cursor_shape\": \"block\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"cursor_shape\": \"underline\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"cursor_shape\": \"hollow\"\n```\n\n----------------------------------------\n\nTITLE: Code Actions Configuration\nDESCRIPTION: Configuration for using code actions as formatters, including ESLint fix and organize imports examples.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatter\": {\n    \"code_actions\": {\n      \"source.fixAll.eslint\": true,\n      \"source.organizeImports\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Slash Commands in TOML Configuration\nDESCRIPTION: Demonstrates how to register slash commands in the extension.toml file. It shows the configuration for two commands: '/echo' and '/pick-one', including their descriptions and argument requirements.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/slash-commands.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[slash_commands.echo]\ndescription = \"echoes the provided input\"\nrequires_argument = true\n\n[slash_commands.pick-one]\ndescription = \"pick one of three options\"\nrequires_argument = true\n```\n\n----------------------------------------\n\nTITLE: Setting Rust-Analyzer Target Directory\nDESCRIPTION: Configuration for specifying the target directory for rust-analyzer compiler output.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rust.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"rust\": {\n          \"analyzerTargetDir\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Network Proxy Configuration in JSON\nDESCRIPTION: Proxy settings supporting various protocols including HTTP, HTTPS, and SOCKS.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxy\": \"http://127.0.0.1:10809\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Predictions Disabled Globs in JSON\nDESCRIPTION: This JSON snippet shows the default configuration for disabling edit predictions on certain file types. It includes a list of glob patterns for files that should be excluded from edit predictions, such as environment files, certificates, and secret files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/model-improvement.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edit_predictions\": {\n    // A list of globs representing files that edit predictions should be disabled for.\n    // There's a sensible default list of globs already included.\n    // Any addition to this list will be merged with the default list.\n    \"disabled_globs\": [\n      \"**/.env*\",\n      \"**/*.pem\",\n      \"**/*.key\",\n      \"**/*.cert\",\n      \"**/*.crt\",\n      \"**/secrets.yml\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context-Specific Edit Prediction Keybinding\nDESCRIPTION: JSON configuration for keymap that sets tab to accept predictions only when not showing language server completions. This provides more granular control over when modifiers are required.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Editor && edit_prediction_conflict && !showing_completions\",\n  \"bindings\": {\n    // Here we don't require a modifier unless there's a language server completion\n    \"tab\": \"editor::AcceptEditPrediction\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LuaLS Formatter in Zed Settings\nDESCRIPTION: Zed editor settings to enable automatic formatting using LuaLS language server\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/lua.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Lua\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": \"language_server\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Server Memory Limits\nDESCRIPTION: Settings to adjust memory limits for TypeScript and JavaScript server processing in large projects.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/typescript.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"vtsls\": {\n      \"settings\": {\n        \"typescript\": { \"tsserver\": { \"maxTsServerMemory\": 16184 } },\n        \"javascript\": { \"tsserver\": { \"maxTsServerMemory\": 16184 } }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Instruction-Level Stepping Granularity\nDESCRIPTION: Configuration for setting the debugger stepping granularity to instruction level. This allows one instruction to execute at a time (e.g., one x86 instruction), providing the most fine-grained stepping control.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"stepping_granularity\": \"instruction\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Disabled Globs for Edit Predictions in JSON\nDESCRIPTION: This JSON configuration demonstrates how users can add custom glob patterns to disable edit predictions for additional files or directories. It shows how to extend the 'disabled_globs' list in the Zed settings.json file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/model-improvement.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edit_predictions\": {\n    \"disabled_globs\": [\"secret_dir/*\", \"**/*.log\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CMake Compile Commands Generation\nDESCRIPTION: CMake configuration to generate compile_commands.json for clangd project analysis\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/c.md#2025-04-11_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring Alt-Tab for Consistent Edit Prediction Keybinding\nDESCRIPTION: JSON configuration for keymap that forces alt-tab to always be used for accepting edit predictions, providing consistent behavior across all contexts. It also restores default tab behavior in various contexts.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"context\": \"Editor && edit_prediction\",\n    \"bindings\": {\n      \"alt-tab\": \"editor::AcceptEditPrediction\"\n    }\n  },\n  // Bind `tab` back to its original behavior.\n  {\n    \"context\": \"Editor\",\n    \"bindings\": {\n      \"tab\": \"editor::Tab\"\n    }\n  },\n  {\n    \"context\": \"Editor && showing_completions\",\n    \"bindings\": {\n      \"tab\": \"editor::ComposeCompletion\"\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Button Visibility\nDESCRIPTION: Configuration for controlling whether the debug button should be displayed in the debugger toolbar. This setting can help streamline the interface if you prefer using keyboard shortcuts instead.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"show_button\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Edit Predictions for a Specific Language\nDESCRIPTION: JSON configuration to disable automatic edit predictions for a specific programming language. This example turns off predictions only for Python files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language\": {\n    \"python\": {\n      \"show_edit_predictions\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StyLua Formatter in Zed Settings\nDESCRIPTION: Zed editor settings to enable automatic formatting using external StyLua formatter with custom arguments\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/lua.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Lua\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"stylua\",\n          \"arguments\": [\n            \"--syntax=Lua54\",\n            \"--respect-ignores\",\n            \"--stdin-filepath\",\n            \"{buffer_path}\",\n            \"-\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Inlay Hints in Zed\nDESCRIPTION: Default initialization options for Svelte inlay hints in Zed. Controls the display of parameter names, types, variable types, property declarations, return types, and enum member values.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/svelte.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"inlayHints\": {\n  \"parameterNames\": {\n    \"enabled\": \"all\",\n    \"suppressWhenArgumentMatchesName\": false\n  },\n  \"parameterTypes\": {\n    \"enabled\": true\n  },\n  \"variableTypes\": {\n    \"enabled\": true,\n    \"suppressWhenTypeMatchesName\": false\n  },\n  \"propertyDeclarationTypes\": {\n    \"enabled\": true\n  },\n  \"functionLikeReturnTypes\": {\n    \"enabled\": true\n  },\n  \"enumMemberValues\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Regal Language Server Rules for Rego\nDESCRIPTION: Example configuration for the Regal language server using .regal/config.yaml. Shows how to customize rule behavior including disabling todo comments, setting line length limits, and ignoring specific files for formatting rules.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rego.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  style:\n    todo-comment:\n      # don't report on todo comments\n      level: ignore\n    line-length:\n      # custom rule configuration\n      max-line-length: 100\n      # warn on too long lines, but don't fail\n      level: warning\n    opa-fmt:\n      # not needed as error is the default, but\n      # being explicit won't hurt\n      level: error\n      # files can be ignored for any individual rule\n      # in this example, test files are ignored\n      ignore:\n        files:\n          - \"*_test.rego\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec in Zed Tasks\nDESCRIPTION: JSON configuration for setting up a custom task to run RSpec tests in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE:$ZED_ROW\",\n    \"command\": \"bundle exec rspec\",\n    \"args\": [\"\\\"$ZED_RELATIVE_FILE:$ZED_ROW\\\"\"],\n    \"tags\": [\"ruby-test\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Server Command in Rust\nDESCRIPTION: Shows how to implement the context_server_command method on a Zed extension to provide command configuration for starting a context server. The method returns command path, arguments, and environment variables.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/context-servers.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl zed::Extension for MyExtension {\n    fn context_server_command(\n        &mut self,\n        context_server_id: &ContextServerId,\n        project: &zed::Project,\n    ) -> Result<zed::Command> {\n        Ok(zed::Command {\n            command: get_path_to_context_server_executable()?,\n            args: get_args_for_context_server()?,\n            env: get_env_for_context_server()?,\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Zed Java LSP Settings\nDESCRIPTION: Basic configuration template for Zed Java extension showing the structure for initialization options in settings.json\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/java.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing clang-format for Proto\nDESCRIPTION: Example of a .clang-format file to customize formatting preferences for Proto files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/proto.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nIndentWidth: 4\nColumnLimit: 120\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Admin Users (JSON)\nDESCRIPTION: This JSON configuration allows specifying custom admin users for local development. It defines an array of GitHub logins for admin users and available channels.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/collab/README.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admins\": [\"yourgithubhere\"],\n  \"channels\": [\"zed\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Zed in Debug Mode with Cargo\nDESCRIPTION: Command to build and run Zed in debug mode using Cargo, which is useful during development.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Edit Prediction Keybinding\nDESCRIPTION: JSON configuration for keymap that adds additional keybinding for accepting edit predictions. This example adds alt-enter as an alternative to the default tab key.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Editor && edit_prediction\",\n  \"bindings\": {\n    // Here we also allow `alt-enter` to accept the prediction\n    \"alt-enter\": \"editor::AcceptEditPrediction\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Toolbar in Zed\nDESCRIPTION: Controls the display of elements in the terminal toolbar, such as breadcrumbs that show the terminal title which can be changed via PROMPT_COMMAND.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"toolbar\": {\n      \"breadcrumbs\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Dart Binary Configuration\nDESCRIPTION: JSON configuration for specifying a custom Dart binary path and arguments in Zed settings, particularly useful when using Flutter Version Management (FVM).\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/dart.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"dart\": {\n      \"binary\": {\n        \"path\": \"/opt/homebrew/bin/fvm\",\n        \"arguments\": [\"dart\", \"language-server\", \"--protocol=lsp\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Format Configuration for Markdown\nDESCRIPTION: JSON configuration to enable automatic formatting of Markdown files on save using Prettier.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/markdown.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Markdown\": {\n      \"format_on_save\": \"on\"\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring quickdraw in Zed Tasks\nDESCRIPTION: JSON configuration for setting up a custom task to run quickdraw tests in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE:$ZED_ROW\",\n    \"command\": \"bundle exec qt\",\n    \"args\": [\"\\\"$ZED_RELATIVE_FILE:$ZED_ROW\\\"\"],\n    \"tags\": [\"ruby-test\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Zed Stable on Linux using Installation Script\nDESCRIPTION: This command downloads and executes the Zed installation script for Linux, installing the stable version.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -f https://zed.dev/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Formatting with shfmt\nDESCRIPTION: Configuration for enabling automatic formatting of Shell Scripts using shfmt on save in Zed editor, including command and argument settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/sh.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Shell Script\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"shfmt\",\n          \"arguments\": [\"--filename\", \"{buffer_path}\", \"--indent\", \"2\"]\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Attach Request with Process ID\nDESCRIPTION: JSON configuration for attaching to a running process with a specified process ID. This is currently supported for JavaScript and LLDB adapters.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"Attach to Process\",\n  \"adapter\": \"javascript\",\n  \"request\": {\n    \"attach\": {\n      \"process_id\": \"12345\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Debug Terminal Configuration\nDESCRIPTION: Configuration for setting up a debug terminal for JavaScript. This spawns a terminal where you can start your program with Node.js, and the debugger will automatically attach to the process. Output appears in the integrated terminal.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"JavaScript: Debug Terminal\",\n  \"adapter\": \"javascript\",\n  \"request\": \"launch\",\n  \"cwd\": \"$ZED_WORKTREE_ROOT\",\n  // \"program\": \"$ZED_FILE\", // optional if you pass this in, you will see the output inside the terminal itself\n  \"initialize_args\": {\n    \"console\": \"integratedTerminal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Settings in Zed\nDESCRIPTION: Default search configuration options including case sensitivity, whole word matching, and regex support\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"search\": {\n  \"whole_word\": false,\n  \"case_sensitive\": false,\n  \"include_ignored\": false,\n  \"regex\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Pane Modifiers in JSON\nDESCRIPTION: Default configuration for active pane styling including magnification, border size, and opacity settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active_pane_modifiers\": {\n    \"magnification\": 1.0,\n    \"border_size\": 0.0,\n    \"inactive_opacity\": 1.0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint-Only Formatter Configuration\nDESCRIPTION: Configuration to use only ESLint for code formatting, without running any other formatters afterward.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"code_actions\": {\n          \"source.fixAll.eslint\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Format on Save for HTML in Zed Settings (JSON)\nDESCRIPTION: JSON configuration to disable the 'format_on_save' option for HTML in Zed. This snippet demonstrates how to set the 'format_on_save' option to 'off' for the HTML language in the Zed settings file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/html.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"HTML\": {\n      \"format_on_save\": \"off\",\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom Binary Path Configuration\nDESCRIPTION: Configuration for specifying a custom rust-analyzer binary path and arguments.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rust.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        \"path\": \"/Users/example/bin/rust-analyzer\",\n        \"args\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Syntax Highlighting in Zed\nDESCRIPTION: Custom theme styling configuration for Svelte directives and modifiers in attributes. Allows customization of colors for directive functions and special attribute modifiers.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/svelte.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"syntax\": {\n  // Styling for directives (e.g., `class:foo` or `on:click`) (the `on` or `class` part of the attribute).\n  \"attribute.function\": {\n    \"color\": \"#ff0000\"\n  },\n  // Styling for modifiers at the end of attributes, e.g. `on:<click|preventDefault|stopPropagation>`\n  \"attribute.special\": {\n    \"color\": \"#00ff00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration for YAML Files\nDESCRIPTION: Configuration for customizing Prettier's YAML formatting behavior using .prettierrc file, specifically for controlling quote style in YAML files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/yaml.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.yaml\", \"*.yml\"],\n      \"options\": {\n        \"singleQuote\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using System Default Shell in Zed Terminal\nDESCRIPTION: Configures the terminal to use the system's default terminal configuration (usually from the /etc/passwd file).\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"shell\": \"system\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Attach Request without Process ID\nDESCRIPTION: JSON configuration for attaching to a process without specifying a process ID. This will prompt the user to select a process from a process picker (currently only supported for Node.js).\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"Attach to Process\",\n  \"adapter\": \"javascript\",\n  \"request\": {\n    \"attach\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Working Directory to Current Project\nDESCRIPTION: Configures the terminal to use the current file's project directory as the working directory. Falls back to the first project directory if unsuccessful.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"working_directory\": \"current_project_directory\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sneak Motion Configuration\nDESCRIPTION: Configuration for enabling Sneak motion navigation feature\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"vim_mode == normal || vim_mode == visual\",\n  \"bindings\": {\n    \"s\": \"vim::PushSneak\",\n    \"shift-s\": \"vim::PushSneakBackward\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XML File Type Extensions in Zed Settings\nDESCRIPTION: Configuration snippet showing how to add custom file extensions to be recognized as XML files in Zed settings. This allows Zed to properly handle additional XML-based file formats like RDF, GPX, and KML.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/xml.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"file_types\": {\n    \"XML\": [\"rdf\", \"gpx\", \"kml\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: ESLint Problems Configuration\nDESCRIPTION: Configuration for ESLint problems display settings, specifically enabling shortenToSingleLine option.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/javascript.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"problems\": {\n          \"shortenToSingleLine\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Linked Edits for Elm in Zed Settings\nDESCRIPTION: Configuration to disable the linked_edits feature for Elm in Zed's settings.json, which works around an upstream issue in elm-language-server.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elm.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Elm\": {\n      \"linked_edits\": false\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing StyLua Formatter via Package Managers\nDESCRIPTION: Commands for installing the StyLua formatter using either Homebrew on macOS or Cargo package manager with specific Lua version features enabled\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/luau.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# macOS via Homebrew\nbrew install stylua\n# Or via Cargo\ncargo install stylua --features lua52,lua53,lua54,luau\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Zed Task Definition\nDESCRIPTION: This snippet shows how to use Zed-specific variables in task definitions. It demonstrates the usage of the $ZED_FILE variable to echo the current file's path.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/tasks.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"echo current file's path\",\n  \"command\": \"echo $ZED_FILE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Shell with Arguments in Zed Terminal\nDESCRIPTION: Sets a specific program with custom arguments to launch as the terminal shell.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"shell\": {\n      \"with_arguments\": {\n        \"program\": \"/bin/bash\",\n        \"args\": [\"--login\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab and Alt-Tab on Linux for Edit Predictions\nDESCRIPTION: JSON configuration for keymap that enables tab and alt-tab keybindings on Linux instead of the default alt-l. This is useful when the window manager doesn't reserve alt-tab.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"context\": \"Editor && edit_prediction\",\n    \"bindings\": {\n      \"tab\": \"editor::AcceptEditPrediction\",\n      // Optional: This makes the default `alt-l` binding do nothing.\n      \"alt-l\": null\n    }\n  },\n  {\n    \"context\": \"Editor && edit_prediction_conflict\",\n    \"bindings\": {\n      \"alt-tab\": \"editor::AcceptEditPrediction\",\n      // Optional: This makes the default `alt-l` binding do nothing.\n      \"alt-l\": null\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Running bootstrap script for database setup on macOS/Linux\nDESCRIPTION: This command runs the bootstrap script to set up the Zed Postgres database and populate it with users. The script requires internet access to fetch user data from the GitHub API.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nscript/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Working Directory to Home Directory\nDESCRIPTION: Always uses this platform's home directory as the terminal's working directory, if it can be found.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"working_directory\": \"always_home\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Digraphs in Vim Mode (JSON)\nDESCRIPTION: This snippet demonstrates how to add custom digraphs in Vim mode, specifically adding a zombie emoji digraph. It allows typing 'ctrl-k f z' to insert a zombie emoji.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vim\": {\n    \"custom_digraphs\": {\n      \"fz\": \"🧟‍♀️\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-QWERTY Keyboard Configuration in Zed\nDESCRIPTION: Configuration example for enabling key equivalent mappings for non-QWERTY keyboards. This setting helps users with non-standard keyboard layouts map keys properly in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/key-bindings.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"use_key_equivalents\": true,\n    \"bindings\": {\n      \"ctrl->\" : \"editor::Indent\" // parsed as ctrl-: when a German QWERTZ keyboard is active\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Font Features in Zed (JSON)\nDESCRIPTION: This snippet demonstrates how to configure OpenType font features for the UI in Zed. It shows examples of disabling font ligatures and setting other OpenType features.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui_font_features\": {\n    \"calt\": false\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui_font_features\": {\n    \"cv01\": 7\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Edit Predictions\nDESCRIPTION: JSON configuration to disable automatic display of edit predictions. This setting prevents predictions from appearing as you type but still allows manual triggering.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"show_edit_predictions\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Shell Program in Zed Terminal\nDESCRIPTION: Sets a specific program to launch as the terminal shell.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"shell\": {\n      \"program\": \"sh\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Prompts Example with Multiple Prompt References\nDESCRIPTION: Shows how to create a modular prompt that references multiple other prompts using the /prompt command, creating a comprehensive but organized instruction set.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/prompting.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTitle: Zed-Flavored Rust\n\n## About Zed\n\n/prompt Zed: Zed (a prompt about what Zed is)\n\n## Rust - Zed Style\n\n/prompt Rust: Async - Async-std (zed doesn't use tokio)\n/prompt Rust: Zed-style Crates (we have some unique conventions)\n/prompt Rust - Workspace deps (bias towards reusing deps from the workspace)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Bar Settings\nDESCRIPTION: Settings for the editor's tab bar including visibility and navigation buttons.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"tab_bar\": {\n  \"show\": true,\n  \"show_nav_history_buttons\": true,\n  \"show_tab_bar_buttons\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Google AI Models in settings.json\nDESCRIPTION: This configuration example shows how to set up custom Google AI models in Zed, including using experimental or specific versions instead of stable releases.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language_models\": {\n    \"google\": {\n      \"available_models\": [\n        {\n          \"name\": \"gemini-1.5-flash-latest\",\n          \"display_name\": \"Gemini 1.5 Flash (Latest)\",\n          \"max_tokens\": 1000000\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting collaboration server with Foreman on macOS/Linux\nDESCRIPTION: This command uses Foreman to start both the Zed collaboration server and the LiveKit development server for testing voice and screenshare features.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforeman start\n# OR\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Enabling Option as Meta Key in Terminal\nDESCRIPTION: Re-interprets the option keys to act like a 'meta' key, similar to Emacs. This is disabled by default.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"option_as_meta\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby LSP in Zed Settings\nDESCRIPTION: JSON configuration for disabling diagnostics in Ruby LSP within Zed editor settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"!solargraph\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"enabledFeatures\": {\n          \"diagnostics\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Shell commands for creating and activating a Python virtual environment in the project directory.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/python.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# create a virtual environment in the .venv directory\npython3 -m venv .venv\n# set up the current shell to use that virtual environment\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Font Features in Zed\nDESCRIPTION: Sets font features for the terminal display. When not set, it defaults to matching the editor's font features. Available on macOS and Windows platforms.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"font_features\": {\n      \"calt\": false\n      // See Buffer Font Features for more features\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Indent Guides in JSON\nDESCRIPTION: Settings for indent guide appearance, including line width, active line width, and coloring options.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"line_width\": 1,\n    \"active_line_width\": 1,\n    \"coloring\": \"fixed\",\n    \"background_coloring\": \"disabled\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Virtual Environment Detection in Terminal\nDESCRIPTION: Default configuration for detecting and activating Python virtual environments in the terminal's working directory.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"detect_venv\": {\n      \"on\": {\n        // Default directories to search for virtual environments, relative\n        // to the current working directory. We recommend overriding this\n        // in your project's settings, rather than globally.\n        \"directories\": [\".env\", \"env\", \".venv\", \"venv\"],\n        // Can also be `csh`, `fish`, and `nushell`\n        \"activate_script\": \"default\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Manifest in TOML\nDESCRIPTION: Required extension.toml configuration file that defines the extension's metadata including id, name, description, version, and other properties.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/extension_api/README.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nid = \"my-extension\"\nname = \"My Extension\"\ndescription = \"...\"\nversion = \"0.0.1\"\nschema_version = 1\nauthors = [\"Your Name <you@example.com>\"]\nrepository = \"https://github.com/your/extension-repository\"\n```\n\n----------------------------------------\n\nTITLE: Preview Tabs Configuration in JSON\nDESCRIPTION: Settings for preview tab behavior including enablement and trigger conditions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"preview_tabs\": {\n  \"enabled\": true,\n  \"enable_preview_from_file_finder\": false,\n  \"enable_preview_from_code_navigation\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Ollama Context Length in settings.json\nDESCRIPTION: Configuration that adjusts the context length (max_tokens) for specific Ollama models based on hardware capabilities. Can be used to limit token usage for machines with less RAM or increase context for more powerful systems.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language_models\": {\n    \"ollama\": {\n      \"api_url\": \"http://localhost:11434\",\n      \"available_models\": [\n        {\n          \"name\": \"qwen2.5-coder\",\n          \"display_name\": \"qwen 2.5 coder 32K\",\n          \"max_tokens\": 32768\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running collaboration server on Windows\nDESCRIPTION: This PowerShell command starts the Zed collaboration server on Windows for testing collaborative features.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\ncargo run --package=collab -- serve all\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Line Height to Custom Value in Zed\nDESCRIPTION: Configures the terminal to use a custom line height value specified by the user.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"line_height\": {\n      \"custom\": 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Missing Edit Prediction Keybinding\nDESCRIPTION: JSON configuration example showing a global keybinding that conflicts with edit predictions and the solution to restore edit prediction functionality by adding a specific binding.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/completions.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Your keymap\n  {\n    \"bindings\": {\n      // Binds `alt-tab` to a different action globally\n      \"alt-tab\": \"menu::SelectNext\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Almond REPL for Scala\nDESCRIPTION: Commands to install OpenJDK, Coursier, and Almond REPL for Scala development. This setup enables interactive Scala programming in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/scala.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install --cask temurin\nbrew install coursier/formulas/coursier && cs setup\ncoursier launch --use-bootstrap almond -- --install\n```\n\n----------------------------------------\n\nTITLE: Disabling System OmniSharp Detection in Zed\nDESCRIPTION: Configuration to disable Zed's automatic detection of system-installed OmniSharp binary. Setting 'ignore_system_version' to true prevents Zed from looking for OmniSharp in the system path.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/csharp.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"omnisharp\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cargo with Full Debug Information\nDESCRIPTION: Commands to override the default debug settings when building Zed to include full debug information necessary for effective debugging.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/debuggers.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --config 'profile.dev.debug=\"full\"'\ncargo build --config 'profile.dev.debug=\"full\"'\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Reveal Entries in Project Panel\nDESCRIPTION: Automatically reveals the corresponding entry in the project panel when a file becomes active. Gitignored entries are never auto-revealed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_reveal_entries\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting System Theme Mode in Zed\nDESCRIPTION: Sets the theme to follow the system's appearance settings, switching between light and dark themes automatically.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mode\": \"system\"\n}\n```\n\n----------------------------------------\n\nTITLE: StyLua Configuration in stylua.toml\nDESCRIPTION: Configuration file for StyLua formatter specifying syntax version, formatting rules, and code style preferences\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/lua.md#2025-04-11_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nsyntax = \"Lua54\"\ncolumn_width = 100\nline_endings = \"Unix\"\nindent_type = \"Spaces\"\nindent_width = 4\nquote_style = \"AutoPreferDouble\"\ncall_parentheses = \"Always\"\ncollapse_simple_statement = \"All\"\n\n[sort_requires]\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Running LiveKit server with explicit path on Windows\nDESCRIPTION: This PowerShell command starts the LiveKit server in development mode on Windows using an explicit path to the executable.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n.\\path\\to\\livekit-serve.exe --dev\n```\n\n----------------------------------------\n\nTITLE: Showing Indent Guides in Project Panel\nDESCRIPTION: Configures the project panel to always show indent guides for nested entries.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"indent_guides\": {\n    \"show\": \"always\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Type Override Settings for C Files\nDESCRIPTION: JSON configuration to override file extensions for C files, particularly useful for legacy projects with uppercase extensions\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/c.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file_types\": {\n    \"C\": [\"C\", \"H\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Keybindings in GPUI JSON Keymap\nDESCRIPTION: This JSON snippet shows how to configure simple keybindings for a specific context in GPUI. It maps keyboard keys to fully-qualified action type names.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/docs/key_dispatch.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"menu\",\n  \"bindings\": {\n    \"up\": \"menu::MoveUp\",\n    \"down\": \"menu::MoveDown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Runnable Scripts in JSON Files (Scheme)\nDESCRIPTION: This scheme snippet from the runnables.scm file for JSON defines rules for detecting runnable scripts in package.json and composer.json files. It captures script names and sets tags for package and composer scripts.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_12\n\nLANGUAGE: scheme\nCODE:\n```\n(\n    (document\n        (object\n            (pair\n                key: (string\n                    (string_content) @_name\n                    (#eq? @_name \"scripts\")\n                )\n                value: (object\n                    (pair\n                        key: (string (string_content) @run @script)\n                    )\n                )\n            )\n        )\n    )\n    (#set! tag package-script)\n    (#set! tag composer-script)\n)\n```\n\n----------------------------------------\n\nTITLE: Subword Motion Configuration\nDESCRIPTION: Key bindings for enabling subword navigation in camelCase and snake_case\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"VimControl && !menu && vim_mode != operator\",\n  \"bindings\": {\n    \"w\": \"vim::NextSubwordStart\",\n    \"b\": \"vim::PreviousSubwordStart\",\n    \"e\": \"vim::NextSubwordEnd\",\n    \"g e\": \"vim::PreviousSubwordEnd\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Zed-Specific SSH Connection Options (JSON)\nDESCRIPTION: This snippet shows Zed-specific SSH connection options, including binary upload preference and a nickname for the connection.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/remote-development.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }],\n      \"upload_binary_over_ssh\": true,\n      \"nickname\": \"lil-linux\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unnecessary Code Fade in Zed (JSON)\nDESCRIPTION: This snippet shows how to configure the fading of unused code in Zed. The setting accepts float values between 0.0 and 0.9, where 0.0 means no fading and 0.9 means maximum fading.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"unnecessary_code_fade\": 0.5\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Entry Spacing in Project Panel\nDESCRIPTION: Configures standard (more compact) spacing between worktree entries in the project panel.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry_spacing\": \"standard\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Comfortable Entry Spacing in Project Panel\nDESCRIPTION: Configures comfortable spacing between worktree entries in the project panel.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry_spacing\": \"comfortable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Mode and Variants in Zed\nDESCRIPTION: Configuration for setting the editor theme mode (dark/light) and specifying which themes to use for each mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-languages.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"theme\": {\n  \"mode\": \"dark\",\n  \"dark\": \"One Dark\",\n  \"light\": \"GitHub Light\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project Panel Dock Position to Left\nDESCRIPTION: Sets the project panel to dock on the left side of the editor window (default).\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dock\": \"left\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Diff File Extensions in Zed\nDESCRIPTION: JSON configuration snippet for adding custom file extensions to be recognized as Diff files in Zed. This example adds the '.dif' extension to be treated as a Diff file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/diff.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"file_types\": {\n    \"Diff\": [\"dif\"]\n  },\n```\n\n----------------------------------------\n\nTITLE: Disabling System Version of clangd in Zed\nDESCRIPTION: This configuration prevents Zed from looking for a system-installed clangd binary. This is useful when you want to ensure Zed doesn't automatically use any clangd version found in the system path.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/cpp.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Toolbar\nDESCRIPTION: Settings for controlling the visibility of toolbar elements.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"toolbar\": {\n  \"breadcrumbs\": true,\n  \"quick_actions\": true,\n  \"selections_menu\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Font Features Configuration\nDESCRIPTION: Example of configuring OpenType font features including ligature settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buffer_font_features\": {\n    \"calt\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rubocop Gem\nDESCRIPTION: Shell command for installing the Rubocop gem, which is required for Rubocop language server support in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngem install rubocop\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Status in Project Panel\nDESCRIPTION: Shows indicators for newly created and updated files based on Git status in the project panel.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"git_status\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Actions in Rust using GPUI\nDESCRIPTION: This snippet shows how to define simple action structs using the GPUI framework. It demonstrates both the verbose and concise ways of declaring actions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/docs/key_dispatch.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nmod menu {\n    #[gpui::action]\n    struct MoveUp;\n\n    #[gpui::action]\n    struct MoveDown;\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nmod menu {\n    actions!(gpui, [MoveUp, MoveDown]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing elm-format for Automatic Formatting in Zed\nDESCRIPTION: Command to globally install elm-format via npm to enable automatic code formatting for Elm in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elm.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g elm-format\n```\n\n----------------------------------------\n\nTITLE: Configuring System Binary Ignore Settings\nDESCRIPTION: Configuration to disable Zed's automatic system binary detection for rust-analyzer.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rust.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Haskell Language Server in Zed settings\nDESCRIPTION: JSON configuration for the Haskell Language Server in Zed's settings.json file. This example sets the formatting provider to 'fourmolu'.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/haskell.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"hls\": {\n      \"initialization_options\": {\n        \"haskell\": {\n          \"formattingProvider\": \"fourmolu\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing inotify Max User Instances in Bash\nDESCRIPTION: This command increases the maximum number of inotify instances a user can create. It's recommended to set this to 1024 or higher for Zed to work properly.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/linux.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl fs.inotify.max_user_instances=1024\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Settings in JSON for Zed\nDESCRIPTION: This JSON snippet shows how to configure telemetry settings in the settings.json file of Zed. It allows users to enable or disable diagnostics and metrics collection.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/telemetry.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"telemetry\": {\n    \"diagnostics\": false,\n    \"metrics\": false\n},\n```\n\n----------------------------------------\n\nTITLE: Verifying shfmt Installation\nDESCRIPTION: Commands to verify the installation and version of shfmt formatter.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/sh.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwhich shfmt\nshfmt --version\n```\n\n----------------------------------------\n\nTITLE: Example custom seed JSON for collaboration server\nDESCRIPTION: This JSON configuration defines admin users for the collaboration server, which is used for authentication when running your own collaboration service.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admins\": [\"nathansobo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Zed Language Format Settings\nDESCRIPTION: JSON configuration for enabling format-on-save and setting tab size for C files in Zed\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/c.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"C\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Action Struct in Rust for GPUI\nDESCRIPTION: This snippet demonstrates how to define a more complex action struct with multiple fields using the GPUI framework.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/docs/key_dispatch.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nmod menu {\n    #[gpui::action]\n    struct Move {\n        direction: Direction,\n        select: bool,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Host Authentication Configuration\nDESCRIPTION: Configuration for pg_hba.conf file to enable trust authentication for local connections.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/windows.md#2025-04-11_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            trust\n# IPv6 local connections:\nhost    all             all             ::1/128                 trust\n```\n\n----------------------------------------\n\nTITLE: Configuring File Types for Ansible in Zed\nDESCRIPTION: JSON configuration for associating YAML files with Ansible language in Zed. This can be added to project settings (.zed/settings.json) or user settings (~/.config/zed/settings.json) to match specific folder structures and naming conventions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ansible.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"file_types\": {\n    \"Ansible\": [\n      \"**.ansible.yml\",\n      \"**.ansible.yaml\",\n      \"**/defaults/*.yml\",\n      \"**/defaults/*.yaml\",\n      \"**/meta/*.yml\",\n      \"**/meta/*.yaml\",\n      \"**/tasks/*.yml\",\n      \"**/tasks/*.yml\",\n      \"**/tasks/*.yaml\",\n      \"**/handlers/*.yml\",\n      \"**/handlers/*.yaml\",\n      \"**/group_vars/*.yml\",\n      \"**/group_vars/*.yaml\",\n      \"**/playbooks/*.yaml\",\n      \"**/playbooks/*.yml\",\n      \"**playbook*.yaml\",\n      \"**playbook*.yml\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Server in Extension (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to configure a language server in the extension.toml file. It specifies the language server name and the languages it applies to.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[language_servers.my-language]\nname = \"My Language LSP\"\nlanguages = [\"My Language\"]\n```\n\n----------------------------------------\n\nTITLE: Setting YAML Formatter to Language Server\nDESCRIPTION: Configuration to use yaml-language-server instead of Prettier for YAML formatting in Zed settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/yaml.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"YAML\": {\n      \"formatter\": \"language_server\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Increasing inotify Max User Watches in Bash\nDESCRIPTION: This command increases the maximum number of watches a user can create. It's recommended to set this to 64000 or higher for Zed to function correctly with multiple open projects and git repositories.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/linux.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl fs.inotify.max_user_watches=64000\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Settings in Zed\nDESCRIPTION: Controls what diagnostic and usage data is collected by Zed\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"telemetry\": {\n  \"diagnostics\": true,\n  \"metrics\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakpoint Persistence\nDESCRIPTION: Configuration for controlling whether breakpoints should be saved across Zed sessions. When enabled (default), breakpoints will be restored when reopening a project.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"save_breakpoints\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Schema Configuration Example\nDESCRIPTION: Example YAML file with an inline schema reference using a modeline comment for GitHub Actions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/yaml.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://json.schemastore.org/github-action.json\nname: Issue Assignment\non:\n  issues:\n    types: [oppened]\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Server Command in Rust Extension\nDESCRIPTION: This Rust code snippet shows how to implement the language_server_command method in a Zed extension. It returns a Command struct with the necessary information to start the language server.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nimpl zed::Extension for MyExtension {\n    fn language_server_command(\n        &mut self,\n        language_server_id: &LanguageServerId,\n        worktree: &zed::Worktree,\n    ) -> Result<zed::Command> {\n        Ok(zed::Command {\n            command: get_path_to_language_server_executable()?,\n            args: get_args_for_language_server()?,\n            env: get_env_for_language_server()?,\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Docker Files in Markdown\nDESCRIPTION: Code references showing the file types supported by Docker extensions in Zed. Includes both Dockerfile and docker-compose.yaml file references.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/docker.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDockerfile\ncompose.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Language-Specific Options in JavaScript (TOML)\nDESCRIPTION: This TOML configuration snippet sets word characters and completion query characters for JavaScript. It also demonstrates how to disable auto-closing of single quotes within strings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\nword_characters = [\"#\", \"$\"]\n\n[overrides.string]\ncompletion_query_characters = [\"-\"]\n\nbrackets = [\n  { start = \"'\", end = \"'\", close = true, newline = false, not_in = [\"string\"] },\n  # other pairs...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Script Settings in Zed\nDESCRIPTION: Basic configuration for Shell Script settings in Zed's settings.json file, including tab size and hard tabs preferences.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/sh.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"languages\": {\n    \"Shell Script\": {\n      \"tab_size\": 2,\n      \"hard_tabs\": false\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring DAP Log Message Formatting in Zed Debugger (JSON)\nDESCRIPTION: This snippet demonstrates how to enable formatting of DAP (Debug Adapter Protocol) messages in the debug adapter logger. It's controlled by the 'debugger.format_dap_log_messages' setting, which is a boolean value defaulting to false. This option is primarily used for DAP development.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"format_dap_log_messages\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading LM Studio Model via CLI\nDESCRIPTION: This command demonstrates how to download a specific model (qwen2.5-coder-7b) using the LM Studio CLI.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nlms get qwen2.5-coder-7b\n```\n\n----------------------------------------\n\nTITLE: Multi-project Workspace Configuration\nDESCRIPTION: Configuration for analyzing multiple Rust projects in the same workspace using linkedProjects setting.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/rust.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"linkedProjects\": [\"./path/to/a/Cargo.toml\", \"./path/to/b/Cargo.toml\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Line-Level Stepping Granularity\nDESCRIPTION: Configuration for setting the debugger stepping granularity to line level (the default). This allows the program to run until the current source line has executed completely.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"stepping_granularity\": \"line\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing IPyKernel for Python REPL\nDESCRIPTION: Shell commands to install and set up IPyKernel for Python in the global environment.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install ipykernel\npython -m ipykernel install --user\n```\n\n----------------------------------------\n\nTITLE: Configuring Godot External Editor Flags for Zed\nDESCRIPTION: The command line flags needed when setting up Zed as an external editor in Godot. These parameters tell Zed how to open files with the correct positioning.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/gdscript.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{project} {file}:{line}:{col}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clangd for C-only Projects\nDESCRIPTION: YAML configuration to force clangd to treat all files as C using the -xc flag\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/c.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCompileFlags:\n  Add: [-xc]\n```\n\n----------------------------------------\n\nTITLE: Defining Language Injections in Markdown (Scheme)\nDESCRIPTION: This code snippet demonstrates how to define language injections for Markdown in the injections.scm file. It captures fenced code blocks and inline content, specifying their languages for proper syntax highlighting.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_6\n\nLANGUAGE: scheme\nCODE:\n```\n(fenced_code_block\n  (info_string\n    (language) @injection.language)\n  (code_fence_content) @injection.content)\n\n((inline) @content\n (#set! injection.language \"markdown-inline\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Tabs\nDESCRIPTION: Detailed configuration for editor tabs including close button position, icons, and behavior.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"tabs\": {\n  \"close_position\": \"right\",\n  \"file_icons\": false,\n  \"git_status\": false,\n  \"activate_on_close\": \"history\",\n  \"show_close_button\": \"hover\",\n  \"show_diagnostics\": \"off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Light Theme Mode in Zed\nDESCRIPTION: Sets the theme to light mode regardless of system settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mode\": \"light\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scrollbar Settings\nDESCRIPTION: Comprehensive scrollbar configuration including visibility, indicators, and axis settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"scrollbar\": {\n  \"show\": \"auto\",\n  \"cursors\": true,\n  \"git_diff\": true,\n  \"search_results\": true,\n  \"selected_text\": true,\n  \"selected_symbol\": true,\n  \"diagnostics\": \"all\",\n  \"axes\": {\n    \"horizontal\": true,\n    \"vertical\": true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Predictions Configuration\nDESCRIPTION: Default configuration for edit predictions including disabled file patterns.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edit_predictions\": {\n    \"disabled_globs\": [\n      \"**/.env*\",\n      \"**/*.pem\",\n      \"**/*.key\",\n      \"**/*.cert\",\n      \"**/*.crt\",\n      \"**/.dev.vars\",\n      \"**/secrets.yml\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bracket Matching in Tree-sitter\nDESCRIPTION: Shows how to define matching brackets using Tree-sitter queries in the brackets.scm file. This example demonstrates matching for brackets, braces, and quotation marks in JSON.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_3\n\nLANGUAGE: scheme\nCODE:\n```\n(\"[\" @open \"]\" @close)\n(\"{\" @open \"}\" @close)\n(\"\\\"\" @open \"\\\"\" @close)\n```\n\n----------------------------------------\n\nTITLE: Verifying gopls Installation\nDESCRIPTION: Commands to verify gopls installation and check its version.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/go.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwhich gopls\ngopls version\n```\n\n----------------------------------------\n\nTITLE: Using Command in a Prompt to Add Dynamic Content\nDESCRIPTION: Demonstrates how to use a slash command within a prompt to insert the contents of a specific file into the prompt, providing project context to the AI.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/prompting.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert Rust engineer. The user has asked you to review their project and answer some questions.\n\nHere is some information about their project:\n\n/file Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier for JSONC Files\nDESCRIPTION: Configuration to prevent Prettier from adding trailing commas in JSONC files by specifying parser and trailing comma options.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/json.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.jsonc\"],\n      \"options\": {\n        \"parser\": \"json\",\n        \"trailingComma\": \"none\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gopls via Go Module Tool\nDESCRIPTION: Command to install or update gopls to the latest version using go's module tool.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/go.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/tools/gopls@latest\n```\n\n----------------------------------------\n\nTITLE: Clang Format Style Configuration\nDESCRIPTION: YAML configuration for setting C code formatting style using clang-format\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/c.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nBasedOnStyle: GNU\nIndentWidth: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Hiding Indent Guides in Project Panel\nDESCRIPTION: Configures the project panel to never show indent guides for nested entries.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"indent_guides\": {\n    \"show\": \"never\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assistant Panel Default Settings in Zed\nDESCRIPTION: Default configuration for the AI assistant panel, including its position, dimensions, and default AI model settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n\"assistant\": {\n  \"version\": \"2\",\n  \"enabled\": true,\n  \"button\": true,\n  \"dock\": \"right\",\n  \"default_width\": 640,\n  \"default_height\": 320,\n  \"default_model\": {\n    \"provider\": \"zed.dev\",\n    \"model\": \"claude-3-7-sonnet-latest\"\n  },\n  \"editor_model\": {\n    \"provider\": \"zed.dev\",\n    \"model\": \"claude-3-7-sonnet-latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Zed Instances Locally (Shell)\nDESCRIPTION: This shell command starts multiple instances of Zed for local testing of collaborative features. The number of instances is determined by the flag (-2, -3, or -4).\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/collab/README.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nscript/zed-local -2\n```\n\n----------------------------------------\n\nTITLE: Verifying shellcheck installation for Bash language support in Zed\nDESCRIPTION: Commands to verify that shellcheck is properly installed and available in your PATH. This verification is important to ensure bash-language-server can use shellcheck for diagnostics.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/bash.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwhich shellcheck\nshellcheck --version\n```\n\n----------------------------------------\n\nTITLE: Installing PHP on Different Operating Systems\nDESCRIPTION: Shell commands to install PHP on various operating systems including macOS, Debian/Ubuntu, CentOS/RHEL, and Arch Linux. The 'which php' command is used to verify the installation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/php.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# brew install php            # macOS\n# sudo apt-get install php    # Debian/Ubuntu\n# yum install php             # CentOS/RHEL\n# pacman -S php               # Arch Linux\nwhich php\n```\n\n----------------------------------------\n\nTITLE: Referencing Keybindings in Zed Documentation\nDESCRIPTION: Markdown syntax for referencing keybindings in the documentation. Uses a custom preprocessor to generate platform-specific keybindings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/README.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{#kb scope::Action}\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled and Interactive Div in Rust\nDESCRIPTION: This snippet defines a Div struct with styling and interactivity. It includes traits for styling and interactions, as well as methods for painting and handling events.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/storybook/docs/thoughts.md#2025-04-11_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Styled, Interactive)]\npub struct Div {\n    declared_style: StyleRefinement,\n    interactions: Interactions\n}\n\npub trait Styled {\n    fn declared_style(&mut self) -> &mut StyleRefinement;\n    fn compute_style(&mut self) -> Style {\n        Style::default().refine(self.declared_style())\n    }\n\n    // All the tailwind classes, modifying self.declared_style()\n}\n\nimpl Style {\n    pub fn paint_background<V>(layout: Layout, cx: &mut PaintContext<V>);\n    pub fn paint_foreground<V>(layout: Layout, cx: &mut PaintContext<V>);\n}\n\npub trait Interactive<V> {\n    fn interactions(&mut self) -> &mut Interactions<V>;\n\n    fn on_click(self, )\n}\n\nstruct Interactions<V> {\n    click: SmallVec<[<Rc<dyn Fn(&mut V, &dyn Any, )>; 1]>,\n}\n```\n\n----------------------------------------\n\nTITLE: Vim Exchange Visual Mode Configuration\nDESCRIPTION: Configuration for enabling vim-exchange functionality in visual mode\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"vim_mode == visual\",\n  \"bindings\": {\n    \"shift-x\": \"vim::Exchange\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zed Stable via Homebrew on macOS\nDESCRIPTION: This command uses Homebrew to install the stable version of Zed on macOS.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask zed\n```\n\n----------------------------------------\n\nTITLE: Installing protobuf-language-server with Go\nDESCRIPTION: Commands to install the protobuf-language-server using Go and verify its installation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/proto.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/lasorda/protobuf-language-server@latest\nwhich protobuf-language-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for WebAssembly Extension\nDESCRIPTION: Cargo.toml configuration required for building the extension as a WebAssembly module, including the zed_extension_api dependency and cdylib crate-type setting.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/extension_api/README.md#2025-04-11_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nzed_extension_api = \"0.3.0\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Zed Server to Staging or Production (Shell)\nDESCRIPTION: These shell commands deploy the Zed Server to either staging or production environments using a deployment script.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/collab/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./script/deploy-collab staging\n```\n\nLANGUAGE: sh\nCODE:\n```\n./script/deploy-collab production\n```\n\n----------------------------------------\n\nTITLE: Running Zed Test Suite\nDESCRIPTION: Command to run all tests in the Zed workspace to ensure everything is functioning correctly.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --workspace\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Zed Icon Theme Extension\nDESCRIPTION: This snippet shows the typical file organization for a Zed icon theme extension. It demonstrates where to place the theme JSON definition file and the associated icon assets.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/icon-themes.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nextension.toml\nicon_themes/\n  my-icon-theme.json\nicons/\n  audio.svg\n  chevron-down.svg\n  chevron-right.svg\n  file.svg\n  folder-open.svg\n  folder.svg\n  rust.svg\n```\n\n----------------------------------------\n\nTITLE: Installing elixir-ls via Homebrew\nDESCRIPTION: Shell command to install the elixir-ls language server using Homebrew package manager, which provides IDE features for Elixir in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elixir.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install elixir-ls\n```\n\n----------------------------------------\n\nTITLE: Referencing Actions in Zed Documentation\nDESCRIPTION: Markdown syntax for referencing actions in the documentation. Renders a human-readable version of the action name and allows for additional context on hover.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/README.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{#action scope::Action}\n```\n\n----------------------------------------\n\nTITLE: Basic Editor Save Binding Configuration\nDESCRIPTION: Example of configuring a basic file save command in the Editor context\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Editor\",\n  \"bindings\": {\n    \"ctrl-s\": \"file::Save\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Debuggers on Compiled Zed Binary\nDESCRIPTION: Commands to launch GDB or LLDB with a compiled Zed binary to begin a debugging session. These commands use the Rust-specific wrappers that provide enhanced Rust debugging support.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/debuggers.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrust-gdb target/debug/zed\nrust-lldb target/debug/zed\n```\n\n----------------------------------------\n\nTITLE: Installing Ark REPL for Linux\nDESCRIPTION: Shell script to download and install the latest Ark binary for Linux X86_64, enabling R REPL functionality in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/r.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Linux X86_64\ncd /tmp\ncurl -L -o ark-latest-linux.zip \\\n    $(curl -s \"https://api.github.com/repos/posit-dev/ark/releases/latest\" \\\n        | jq -r '.assets[] | select(.name | contains(\"linux-x64\") and (contains(\"debug\") | not)) | .browser_download_url'\n    )\nunzip ark-latest-linux.zip ark\nsudo mv /tmp/ark /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: macOS R Installation and Package Setup\nDESCRIPTION: Shell commands for installing R via Homebrew and setting up required packages on macOS with version verification.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/r.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask r\nRscript --version\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"languageserver\")'\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"lintr\")'\nRscript -e 'packageVersion(\"languageserver\")'\nRscript -e 'packageVersion(\"lintr\")'\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Zed Fonts in settings.json\nDESCRIPTION: JSON configuration showing how to set up the legacy Zed Mono and Zed Sans fonts in Zed editor's settings.json file. This example demonstrates how to configure fonts for the UI, buffer, and terminal components after installing the legacy font files.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/fonts.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui_font_family\": \"Zed Sans Extended\",\n  \"buffer_font_family\": \"Zed Mono Extend\",\n  \"terminal\": {\n    \"font-family\": \"Zed Mono Extended\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running collaboration server without LiveKit on macOS/Linux\nDESCRIPTION: This command starts only the Zed collaboration server without LiveKit, suitable for testing collaborative features that don't require voice or screenshare functionality.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p collab -- serve all\n```\n\n----------------------------------------\n\nTITLE: Crate Structure Overview in Markdown\nDESCRIPTION: Lists and describes the main crates that make up the Zed editor, including their purposes and relationships\nSOURCE: https://github.com/zed-industries/zed/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`gpui`](/crates/gpui) is a GPU-accelerated UI framework which provides all of the building blocks for Zed. **We recommend familiarizing yourself with the root level GPUI documentation.**\n- [`editor`](/crates/editor) contains the core `Editor` type that drives both the code editor and all various input fields within Zed. It also handles a display layer for LSP features such as Inlay Hints or code completions.\n- [`project`](/crates/project) manages files and navigation within the filetree. It is also Zed's side of communication with LSP.\n- [`workspace`](/crates/workspace) handles local state serialization and groups projects together.\n- [`vim`](/crates/vim) is a thin implementation of Vim workflow over `editor`.\n- [`lsp`](/crates/lsp) handles communication with external LSP server.\n- [`language`](/crates/language) drives `editor`'s understanding of language - from providing a list of symbols to the syntax map.\n- [`collab`](/crates/collab) is the collaboration server itself, driving the collaboration features such as project sharing.\n- [`rpc`](/crates/rpc) defines messages to be exchanged with collaboration server.\n- [`theme`](/crates/theme) defines the theme system and provides a default theme.\n- [`ui`](/crates/ui) is a collection of UI components and common patterns used throughout Zed.\n- [`cli`](/crates/cli) is the CLI crate which invokes the Zed binary.\n- [`zed`](/crates/zed) is where all things come together, and the `main` entry point for Zed.\n```\n\n----------------------------------------\n\nTITLE: Querying and Updating Language Extension Version in Zed\nDESCRIPTION: This snippet demonstrates how to use Zed's scripts to query the current version of a language extension and update it to a new version. It updates the version in extension.toml and Cargo.toml files, then triggers a cargo check.\nSOURCE: https://github.com/zed-industries/zed/blob/main/extensions/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Output the current version for a given language\n./script/language-extension-version <langname>\n\n# Update the version in `extension.toml` and `Cargo.toml` and trigger a `cargo check`\n./script/language-extension-version <langname> <new_version>\n```\n\n----------------------------------------\n\nTITLE: Registering Context Server in TOML Configuration\nDESCRIPTION: Demonstrates how to register a context server in the extension.toml configuration file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/context-servers.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[context_servers.my-context-server]\n```\n\n----------------------------------------\n\nTITLE: Displaying Jump Commands in Markdown Table\nDESCRIPTION: This snippet shows a markdown table listing commands for jumping to specific positions in a file in Zed's Vim mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Command             | Description                         |\n| ------------------- | ----------------------------------- |\n| `:<number>`         | Jump to a line number               |\n| `:$`                | Jump to the end of the file         |\n| `:/foo` and `:?foo` | Jump to next/prev line matching foo |\n```\n\n----------------------------------------\n\nTITLE: Attaching Debuggers to Running Zed Instances\nDESCRIPTION: Commands to attach GDB or LLDB to an already running Zed process using its process ID, allowing for debugging of active instances.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/debuggers.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrust-gdb -p <pid>\nrust-lldb -p <pid>\n```\n\n----------------------------------------\n\nTITLE: Installing Ark REPL for macOS\nDESCRIPTION: Shell script to download and install the latest Ark binary for macOS, enabling R REPL functionality in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/r.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# macOS\ncd /tmp\ncurl -L -o ark-latest-darwin.zip \\\n    $(curl -s \"https://api.github.com/repos/posit-dev/ark/releases/latest\" | \\\n    jq -r '.assets[] | select(.name | contains(\"darwin-universal\") and (contains(\"debug\") | not)) | .browser_download_url')\nunzip ark-latest-darwin.zip ark\nsudo mv /tmp/ark /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Adding an Extension as a Git Submodule\nDESCRIPTION: Shell commands for adding a Zed extension as a Git submodule to the extensions repository, which is required for publishing an extension.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/developing-extensions.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit submodule add https://github.com/your-username/foobar-zed.git extensions/foobar\ngit add extensions/foobar\n```\n\n----------------------------------------\n\nTITLE: Fetching File-Specific Diagnostics in Zed\nDESCRIPTION: This snippet demonstrates how to invoke the diagnostics tool to get errors and warnings for a specific file in the project. It uses a JSON object with a 'path' property pointing to the target file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/assistant_tools/src/diagnostics_tool/description.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"path\": \"src/main.rs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Jupyter Kernels\nDESCRIPTION: Shell command output showing the list of available Jupyter kernels installed on the system.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ jupyter kernelspec list\nAvailable kernels:\n  ark                   /Users/z/Library/Jupyter/kernels/ark\n  conda-base            /Users/z/Library/Jupyter/kernels/conda-base\n  deno                  /Users/z/Library/Jupyter/kernels/deno\n  python-chatlab-dev    /Users/z/Library/Jupyter/kernels/python-chatlab-dev\n  python3               /Users/z/Library/Jupyter/kernels/python3\n  ruby                  /Users/z/Library/Jupyter/kernels/ruby\n  rust                  /Users/z/Library/Jupyter/kernels/rust\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Theme Mode in Zed\nDESCRIPTION: Sets the theme to dark mode regardless of system settings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mode\": \"dark\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Overrides for JavaScript (Scheme)\nDESCRIPTION: This snippet from the overrides.scm file for JavaScript defines syntactic scopes for strings and template strings. These scopes can be used to override editor settings within specific language constructs.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_7\n\nLANGUAGE: scheme\nCODE:\n```\n[\n  (string)\n  (template_string)\n] @string\n```\n\n----------------------------------------\n\nTITLE: Fetching Project-Wide Diagnostics in Zed\nDESCRIPTION: This snippet shows how to invoke the diagnostics tool to get a summary of errors and warnings across the entire project. It uses an empty JSON object as input to indicate project-wide scope.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/assistant_tools/src/diagnostics_tool/description.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Testing Vim Star Command with Neovim Backed Tests in Rust\nDESCRIPTION: This code demonstrates how to test Zed's Vim emulation against Neovim behavior using the NeovimBackedTestContext. The example tests the '*' command in visual mode, verifying that Zed's implementation matches Neovim's behavior when searching for the selected text.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/vim/README.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[gpui::test]\nasync fn test_visual_star_hash(cx: &mut gpui::TestAppContext) {\n    let mut cx = NeovimBackedTestContext::new(cx).await;\n\n    cx.set_shared_state(\"ˇa.c. abcd a.c. abcd\").await;\n    cx.simulate_shared_keystrokes([\"v\", \"3\", \"l\", \"*\"]).await;\n    cx.assert_shared_state(\"a.c. abcd ˇa.c. abcd\").await;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zed CLI in Development Mode\nDESCRIPTION: Builds and runs the Zed CLI crate in development mode using Cargo.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/linux.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p cli\n```\n\n----------------------------------------\n\nTITLE: Installing shellcheck on different operating systems for Bash language support in Zed\nDESCRIPTION: Commands for installing shellcheck on various operating systems. The shellcheck tool is used by bash-language-server to provide diagnostics for Bash scripts in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/bash.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install shellcheck             # macOS (HomeBrew)\napt-get install shellcheck          # Ubuntu/Debian\npacman -S shellcheck                # ArchLinux\ndnf install shellcheck              # Fedora\nyum install shellcheck              # CentOS/RHEL\nzypper install shellcheck           # openSUSE\nchoco install shellcheck            # Windows (Chocolatey)\n```\n\n----------------------------------------\n\nTITLE: Setting UI Font Fallbacks in Zed (JSON)\nDESCRIPTION: This snippet shows how to set font fallbacks for the UI in Zed. It provides an example of using 'Nerd Font' as a fallback option.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui_font_fallbacks\": [\"Nerd Font\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Deployment Status (Shell)\nDESCRIPTION: This shell command displays information about the currently deployed version of the Zed Server.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/collab/README.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./script/what-is-deployed\n```\n\n----------------------------------------\n\nTITLE: Setting Project Panel Dock Position to Right\nDESCRIPTION: Sets the project panel to dock on the right side of the editor window.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dock\": \"right\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Ollama Server via Command Line\nDESCRIPTION: Command to start the Ollama server if not using the GUI application, which is required before Zed can connect to Ollama models.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nollama serve\n```\n\n----------------------------------------\n\nTITLE: Defining Inclusive Comment Scope in JavaScript (Scheme)\nDESCRIPTION: This scheme snippet from the JavaScript overrides.scm file defines an inclusive scope for comments. This ensures that the comment scope extends to include the delimiters.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_9\n\nLANGUAGE: scheme\nCODE:\n```\n(comment) @comment.inclusive\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic Navigation Commands in Markdown Table\nDESCRIPTION: This snippet shows a markdown table listing commands for navigating diagnostics in Zed's Vim mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                  | Description                    |\n| ------------------------ | ------------------------------ |\n| `:cn[ext]` or `:ln[ext]` | Go to the next diagnostic      |\n| `:cp[rev]` or `:lp[rev]` | Go to the previous diagnostics |\n| `:cc` or `:ll`           | Open the errors page           |\n```\n\n----------------------------------------\n\nTITLE: Configuring Minitest in Zed Tasks\nDESCRIPTION: JSON configuration for setting up a custom task to run plain Minitest in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"label\": \"-Itest $ZED_RELATIVE_FILE -n /$ZED_SYMBOL/\",\n    \"command\": \"bundle exec ruby\",\n    \"args\": [\"-Itest\", \"$ZED_RELATIVE_FILE\", \"-n /$ZED_SYMBOL/\"],\n    \"tags\": [\"ruby-test\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Xcode Command Line Tools Path\nDESCRIPTION: Commands to configure the Xcode command line tools to use the installed copy of Xcode and accept the license agreement.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license accept\n```\n\n----------------------------------------\n\nTITLE: Defining Text Redaction Rules for JSON (Scheme)\nDESCRIPTION: This scheme snippet from the redactions.scm file for JSON defines rules for redacting sensitive information. It marks number and string values in key-value pairs and arrays for redaction during collaboration.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_11\n\nLANGUAGE: scheme\nCODE:\n```\n(pair value: (number) @redact)\n(pair value: (string) @redact)\n(array (number) @redact)\n(array (string) @redact)\n```\n\n----------------------------------------\n\nTITLE: Example Default Prompt Structure in Zed\nDESCRIPTION: Shows the hierarchical structure of a default prompt in Zed, with the main Default prompt and several nested prompts that can be expanded or collapsed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/prompting.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[-] Default\n  [+] Today's date\n  [+] You are an expert\n  [+] Don't add comments\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Reveal Entries in Project Panel\nDESCRIPTION: Prevents automatic revealing of the corresponding entry in the project panel when a file becomes active.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_reveal_entries\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Symbolicating Crash Reports on macOS\nDESCRIPTION: This shell command downloads debug symbols and runs the symbolicate tool to analyze a Zed crash report, providing detailed backtrace information including source files, line numbers, and demangled symbols.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/debugging-crashes.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./script/symbolicate ~/path/zed-XXX-XXX.ips\n```\n\n----------------------------------------\n\nTITLE: Starting LM Studio API Server\nDESCRIPTION: This command shows how to start the LM Studio API server, which is necessary for using LM Studio models with Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/assistant/configuration.md#2025-04-11_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nlms server start\n```\n\n----------------------------------------\n\nTITLE: Defining Text Objects for Navigation (Scheme)\nDESCRIPTION: This scheme snippet from the textobjects.scm file defines rules for navigating by text objects in Vim mode. It includes patterns for functions, method definitions, and comments.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_10\n\nLANGUAGE: scheme\nCODE:\n```\n; include only the content of the method in the function\n(method_definition\n    body: (_\n        \"{\"\n        (_)* @function.inside\n        \"}\")) @function.around\n\n; match function.around for declarations with no body\n(function_signature_item) @function.around\n\n; join all adjacent comments into one\n(comment)+ @comment.around\n```\n\n----------------------------------------\n\nTITLE: Displaying Editing Commands in Markdown Table\nDESCRIPTION: This snippet shows a markdown table listing various editing commands available in Zed's Vim mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           | Description                                             |\n| ----------------- | ------------------------------------------------------- |\n| `:j[oin]`         | Join the current line                                   |\n| `:d[elete][l][p]` | Delete the current line                                 |\n| `:s[ort] [i]`     | Sort the current selection (with i, case-insensitively) |\n| `:y[ank]`         | Yank (copy) the current selection or line               |\n```\n\n----------------------------------------\n\nTITLE: Installing shfmt Formatter\nDESCRIPTION: Commands for installing the shfmt formatter across different operating systems and package managers.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/sh.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install shfmt            # macos (homebrew)\nsudo apt-get install shfmt    # debian/ubuntu\ndnf install shfmt             # fedora\nyum install shfmt             # redhat\npacman -Sy shfmt              # archlinux\nchoco install shfmt           # windows (chocolatey)\n```\n\n----------------------------------------\n\nTITLE: Creating Key Context for Action Binding in GPUI Rust Implementation\nDESCRIPTION: This snippet demonstrates how to create a key context for action binding in a GPUI render function. It uses the 'key_context' method to define a context for keybindings.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/docs/key_dispatch.md#2025-04-11_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl Render for Menu {\n    fn render(&mut self, window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {\n        div()\n            .key_context(\"menu\")\n            .on_action(|this: &mut Menu, move: &MoveUp, window: &mut Window, cx: &mut Context<Menu>| {\n                // ...\n            })\n            .on_action(|this, move: &MoveDown, cx| {\n                // ...\n            })\n            .children(unimplemented!())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Python Virtual Environment Detection in Terminal\nDESCRIPTION: Turns off the automatic detection and activation of Python virtual environments in the terminal.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"detect_venv\": \"off\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Keychain Access in Development Builds\nDESCRIPTION: Command to enable the use of the system keychain in development builds of Zed. By default, development builds use an alternative credential provider to avoid repeated password prompts, but this environment variable forces the use of the real system keychain for testing purposes.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZED_DEVELOPMENT_USE_KEYCHAIN=1\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Line Height to Comfortable in Zed\nDESCRIPTION: Configures the terminal line height to use a comfortable reading value (1.618), which is the default setting.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"line_height\": \"comfortable\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Installation Directory Paths\nDESCRIPTION: File system paths where Zed extensions are installed on different operating systems, including both the installed extensions and their working directories.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/installing-extensions.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- On macOS, extensions are installed in `~/Library/Application Support/Zed/extensions`.\n- On Linux, they are installed in either `$XDG_DATA_HOME/zed/extensions` or `~/.local/share/zed/extensions`.\n```\n\n----------------------------------------\n\nTITLE: Installing elm-review for Code Linting in Zed\nDESCRIPTION: Command to install elm-review via npm to enable code linting support for Elm in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elm.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install elm-review --save-dev\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variable and Launching Zed via CLI\nDESCRIPTION: This snippet demonstrates how to export an environment variable in a shell and then launch Zed, allowing the variable to be available within Zed's environment.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/environment.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export MY_ENV_VAR=hello\n$ zed .\n```\n\n----------------------------------------\n\nTITLE: Running the Zed Theme Importer CLI Tool in Shell\nDESCRIPTION: Command to run the theme_importer package to convert a VS Code theme file to Zed's theme format. It takes a source JSON theme file as input and outputs the converted theme to a specified output file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/theme_importer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p theme_importer -- dark-plus-syntax-color-theme.json --output output-theme.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Mode in Zed\nDESCRIPTION: Specifies the theme using an object that includes the mode, dark, and light themes for the Zed UI.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n\"theme\": {\n  \"mode\": \"system\",\n  \"dark\": \"One Dark\",\n  \"light\": \"One Light\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring tldr in Zed Tasks\nDESCRIPTION: JSON configuration for setting up a custom task to run tldr tests in Zed editor.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE:$ZED_ROW\",\n    \"command\": \"bundle exec tldr\",\n    \"args\": [\"\\\"$ZED_RELATIVE_FILE:$ZED_ROW\\\"\"],\n    \"tags\": [\"ruby-test\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Working Directory to First Project\nDESCRIPTION: Configures the terminal to use the first project's directory in the workspace. Falls back to the platform's home directory if unsuccessful.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"working_directory\": \"first_project_directory\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BINDGEN_EXTRA_CLANG_ARGS Environment Variable\nDESCRIPTION: Commands to set the BINDGEN_EXTRA_CLANG_ARGS environment variable and rebuild Zed to fix 'dispatch/dispatch.h file not found' errors.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nexport BINDGEN_EXTRA_CLANG_ARGS=\"--sysroot=$(xcrun --show-sdk-path)\"\ncargo clean\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Starting multiple Zed instances for testing on macOS/Linux\nDESCRIPTION: This command launches multiple instances of Zed connected to the local collaboration server, each signed in as a different user from the admins configuration.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nscript/zed-local -3\n```\n\n----------------------------------------\n\nTITLE: Installing Haskell Language Server via ghcup\nDESCRIPTION: Commands to install the Haskell Language Server using ghcup and verify its installation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/haskell.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nghcup install hls\nwhich haskell-language-server-wrapper\n```\n\n----------------------------------------\n\nTITLE: JavaScript Debug Configuration for Active File\nDESCRIPTION: Configuration for debugging the currently active JavaScript file. This sets up the debug adapter to launch the file specified by the $ZED_FILE variable in the context of the project root directory.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"JavaScript: Debug Active File\",\n  \"adapter\": \"javascript\",\n  \"program\": \"$ZED_FILE\",\n  \"request\": \"launch\",\n  \"cwd\": \"$ZED_WORKTREE_ROOT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby LSP Gem\nDESCRIPTION: Shell command for installing the Ruby LSP gem, which is required for Ruby LSP support in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ruby.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngem install ruby-lsp\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Line Height to Standard in Zed\nDESCRIPTION: Configures the terminal line height to use a standard value (1.3), which is useful for TUIs, particularly if they use box characters.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"line_height\": \"standard\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Release Build for a Specific Channel\nDESCRIPTION: This script triggers a release build for the specified channel (preview, stable, or nightly). It bumps patch version numbers, creates a new release tag, and initiates the build process.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/releases.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./script/trigger-release {preview|stable}\n```\n\n----------------------------------------\n\nTITLE: Hiding Terminal Button in Status Bar\nDESCRIPTION: Controls the visibility of the terminal button in the status bar. By default, this button is visible.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal\": {\n    \"button\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running bootstrap script on Windows\nDESCRIPTION: This PowerShell command runs the Windows-specific bootstrap script to set up the Zed Postgres database environment.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n.\\script\\bootstrap.ps1\n```\n\n----------------------------------------\n\nTITLE: Cursor Wrapping Configuration\nDESCRIPTION: Configuration for enabling cursor wrapping between lines\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"VimControl && !menu\",\n  \"bindings\": {\n    \"left\": \"vim::WrappingLeft\",\n    \"right\": \"vim::WrappingRight\",\n    \"h\": \"vim::WrappingLeft\",\n    \"l\": \"vim::WrappingRight\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Build Commands\nDESCRIPTION: Shell commands for building and testing Zed using Cargo.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/windows.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --release\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --workspace\n```\n\n----------------------------------------\n\nTITLE: Installing R Language Server Packages\nDESCRIPTION: Commands to install the required R packages languageserver and lintr for enabling language server and linting capabilities in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/r.md#2025-04-11_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ninstall.packages(\"languageserver\")\ninstall.packages(\"lintr\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with Runnable Tag in Zed\nDESCRIPTION: This snippet shows how to define a task with a runnable tag in Zed. The task is tagged with 'rust-test', allowing it to be associated with specific runnable indicators.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/tasks.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"echo current file's path\",\n  \"command\": \"echo $ZED_FILE\",\n  \"tags\": [\"rust-test\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Elixir via Homebrew\nDESCRIPTION: Shell command to install the Elixir programming language using Homebrew package manager, which is a prerequisite for setting up elixir-ls language server.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/elixir.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install elixir\n```\n\n----------------------------------------\n\nTITLE: Journal Configuration in JSON\nDESCRIPTION: Settings for journal functionality including path and time format preferences.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"journal\": {\n  \"path\": \"~\",\n  \"hour_format\": \"hour12\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zed Preview via Homebrew on macOS\nDESCRIPTION: This command uses Homebrew to install the preview version of Zed on macOS.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask zed@preview\n```\n\n----------------------------------------\n\nTITLE: Adding GPUI Dependency in Cargo.toml\nDESCRIPTION: Demonstrates how to add GPUI as a dependency in a Rust project's Cargo.toml file. It specifies the git repository URL for GPUI, which is part of the Zed project.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/README.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ngpui = { git = \"https://github.com/zed-industries/zed\" }\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Command for Collab Dependencies\nDESCRIPTION: Shell command to start collaborative features dependencies using Docker Compose.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/windows.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying File Management Commands in Markdown Table\nDESCRIPTION: This snippet shows a markdown table listing various file and window management commands available in Zed's Vim mode command palette, including their descriptions.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Command        | Description                                          |\n| -------------- | ---------------------------------------------------- |\n| `:w[rite][!]`  | Save the current file                                |\n| `:wq[!]`       | Save the file and close the buffer                   |\n| `:q[uit][!]`   | Close the buffer                                     |\n| `:wa[ll][!]`   | Save all open files                                  |\n| `:wqa[ll][!]`  | Save all open files and close all buffers            |\n| `:qa[ll][!]`   | Close all buffers                                   |\n| `:[e]x[it][!]` | Close the buffer                                     |\n| `:up[date]`    | Save the current file                                |\n| `:cq`          | Quit completely (close all running instances of Zed) |\n| `:vs[plit]`    | Split the pane vertically                            |\n| `:sp[lit]`     | Split the pane horizontally                          |\n| `:new`         | Create a new file in a horizontal split              |\n| `:vne[w]`      | Create a new file in a vertical split                |\n| `:tabedit`     | Create a new file in a new tab                       |\n| `:tabnew`      | Create a new file in a new tab                       |\n| `:tabn[ext]`   | Go to the next tab                                   |\n| `:tabp[rev]`   | Go to previous tab                                   |\n| `:tabc[lose]`  | Close the current tab                                |\n| `:ls`          | Show all buffers                                     |\n```\n\n----------------------------------------\n\nTITLE: Required Visual Studio Components Configuration\nDESCRIPTION: JSON configuration specifying the required Visual Studio components for building Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/windows.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0\",\n  \"components\": [\n    \"Microsoft.VisualStudio.Component.CoreEditor\",\n    \"Microsoft.VisualStudio.Workload.CoreEditor\",\n    \"Microsoft.VisualStudio.Component.VC.Tools.x86.x64\",\n    \"Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions.CMake\",\n    \"Microsoft.VisualStudio.Component.VC.CMake.Project\",\n    \"Microsoft.VisualStudio.Component.Windows11SDK.26100\",\n    \"Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre\"\n  ],\n  \"extensions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dart Installation Commands\nDESCRIPTION: Shell commands to verify Dart installation and version in the system path.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/dart.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwhich dart\ndart --version\n```\n\n----------------------------------------\n\nTITLE: MSYS2 Installation Commands\nDESCRIPTION: Shell commands for installing Zed through MSYS2 package manager.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/windows.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npacman -Syu\npacman -S $MINGW_PACKAGE_PREFIX-zed\n```\n\n----------------------------------------\n\nTITLE: Building Zed in Release Mode with Cargo\nDESCRIPTION: Command to build and run Zed in release mode, which creates an optimized build with better performance.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --release\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Theme Configuration in JSON\nDESCRIPTION: Icon theme settings with support for system, dark, and light modes.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"icon_theme\": {\n  \"mode\": \"system\",\n  \"dark\": \"Zed (Default)\",\n  \"light\": \"Zed (Default)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting multiple Zed instances for testing on Windows\nDESCRIPTION: This PowerShell command uses Node.js to launch multiple instances of Zed connected to the local collaboration server on Windows. Requires node.exe in the system PATH.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nnode .\\script\\zed-local -2\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Zed on Linux\nDESCRIPTION: Executes a script to install necessary system libraries for building Zed on Linux.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/linux.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nscript/linux\n```\n\n----------------------------------------\n\nTITLE: Displaying Ex Commands in Markdown Table\nDESCRIPTION: This snippet presents a markdown table showing various ex commands for opening different panels and windows in Zed, along with their default shortcuts.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                      | Default Shortcut |\n| ---------------------------- | ---------------- |\n| Open the project panel       | `:E[xplore]`     |\n| Open the collaboration panel | `:C[ollab]`      |\n| Open the chat panel          | `:Ch[at]`        |\n| Open the AI panel            | `:A[I]`          |\n| Open the git panel           | `:G[it]`         |\n| Open the notifications panel | `:No[tif]`       |\n| Open the feedback window     | `:fe[edback]`    |\n| Open the diagnostics window  | `:cl[ist]`       |\n| Open the terminal            | `:te[rm]`        |\n| Open the extensions window   | `:Ext[ensions]`  |\n```\n\n----------------------------------------\n\nTITLE: Serving Zed Documentation Locally with mdBook\nDESCRIPTION: Command to serve the Zed documentation locally using mdBook. Requires mdBook to be installed via Cargo.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmdbook serve docs\n```\n\n----------------------------------------\n\nTITLE: Enabling Developer Mode to Improve Build Times\nDESCRIPTION: Command to enable developer mode, which can speed up iteration cycles by preventing macOS from continuously verifying new builds.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo spctl developer-mode enable-terminal\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS\nDESCRIPTION: Command to install the Xcode command line tools which are required for building Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies for Zed Collaborative Features\nDESCRIPTION: Command to install Livekit and Foreman using Homebrew for developing collaborative features of Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install livekit foreman\n```\n\n----------------------------------------\n\nTITLE: Formatting Zed Documentation with Prettier\nDESCRIPTION: Command to format the documentation files using Prettier before committing changes. Ensures consistent formatting across the project.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd docs && pnpm dlx prettier@3.5.0 . --write && cd ..\n```\n\n----------------------------------------\n\nTITLE: Binding Actions to UI Elements in GPUI Rust Implementation\nDESCRIPTION: This code shows how to bind actions to UI elements in a GPUI render function. It demonstrates the use of 'on_action' to handle different action types.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/docs/key_dispatch.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl Render for Menu {\n    fn render(&mut self, window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {\n        div()\n            .on_action(|this: &mut Menu, move: &MoveUp, window: &mut Window, cx: &mut Context<Menu>| {\n                // ...\n            })\n            .on_action(|this, move: &MoveDown, cx| {\n                // ...\n            })\n            .children(unimplemented!())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Extension Auto-Install in Zed Settings (JSON)\nDESCRIPTION: JSON configuration to disable automatic installation of the HTML extension in Zed. This snippet shows how to set the 'auto_install_extensions' option for HTML to false in the Zed settings file.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/html.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_install_extensions\": {\n    \"html\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linux Portal Requirements\nDESCRIPTION: List of required desktop portals for Linux implementation\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/system-requirements.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\norg.freedesktop.portal.FileChooser\norg.freedesktop.portal.OpenURI\norg.freedesktop.portal.Secret, or org.freedesktop.Secrets\n```\n\n----------------------------------------\n\nTITLE: Setting up Zed Postgres Database (Shell)\nDESCRIPTION: This shell command runs a bootstrap script to set up the Zed Postgres database and populate it with initial user data.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/collab/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nscript/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Running Zed Test Suite\nDESCRIPTION: Executes the test suite for the entire Zed workspace using Cargo.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/linux.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --workspace\n```\n\n----------------------------------------\n\nTITLE: Creating a New Database Migration (Shell)\nDESCRIPTION: This shell command creates a new database migration file with the specified name.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/collab/README.md#2025-04-11_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./script/create-migration <name>\n```\n\n----------------------------------------\n\nTITLE: PHP Debug Configuration for Active File\nDESCRIPTION: Configuration for debugging the currently active PHP file. This sets up the PHP debug adapter to launch the file specified by the $ZED_FILE variable in the context of the project root directory.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"PHP: Debug Active File\",\n  \"adapter\": \"php\",\n  \"program\": \"$ZED_FILE\",\n  \"request\": \"launch\",\n  \"cwd\": \"$ZED_WORKTREE_ROOT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zed Evaluation with Cargo\nDESCRIPTION: Command for running the evaluation package from the root of the Zed repository. This uses Cargo to execute the evaluation module.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/eval/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p eval\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tree-sitter Code Structure Output\nDESCRIPTION: This example shows how tree-sitter represents the structure of source code, including classes, methods, and their line ranges. It illustrates the hierarchical nature of the output and how private methods are denoted.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/assistant_tools/src/code_symbols_tool/description.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# class Foo [L123-136]\n## method do_something(arg1, arg2) [L124-126]\n## method process_data(data) [L128-135]\n# class Bar [L145-161]\n## method initialize() [L146-149]\n## method update_state(new_state) [L160]\n## private method _validate_state(state) [L161-162]\n```\n\n----------------------------------------\n\nTITLE: Displaying Set Commands in Markdown Table\nDESCRIPTION: This snippet presents a markdown table showing set commands for modifying editor options locally for the current buffer in Zed's Vim mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                         | Description                                                                                   |\n| ------------------------------- | --------------------------------------------------------------------------------------------- |\n| `:se[t] [no]wrap`               | Lines longer than the width of the window will wrap and displaying continues on the next line |\n| `:se[t] [no]nu[mber]`           | Print the line number in front of each line                                                   |\n| `:se[t] [no]r[elative]nu[mber]` | Changes the displayed number to be relative to the cursor                                     |\n```\n\n----------------------------------------\n\nTITLE: Rust Flags Configuration\nDESCRIPTION: TOML configuration for setting custom Rust flags in .cargo/config.toml.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/windows.md#2025-04-11_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[build]\nrustflags = [\"-C\", \"symbol-mangling-version=v0\", \"--cfg\", \"tokio_unstable\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[target.'cfg(target_os = \"windows\")']\nrustflags = [\n    \"--cfg\",\n    \"windows_slim_errors\",\n    \"-C\",\n    \"target-feature=+crt-static\",\n]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[target.'cfg(all())']\nrustflags = [\"--cfg\", \"gles\"]\n```\n\n----------------------------------------\n\nTITLE: Test Extension Documentation in Markdown\nDESCRIPTION: A markdown documentation header explaining the purpose of the test extension and its origin from the Gleam extension.\nSOURCE: https://github.com/zed-industries/zed/blob/main/extensions/test-extension/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Test Extension\n\nThis is a test extension that we use in the tests for the `extension` crate.\n\nOriginally based off the Gleam extension.\n```\n\n----------------------------------------\n\nTITLE: Extension Directory Listing Commands\nDESCRIPTION: Shell commands to list installed extensions on MacOS and Linux systems.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nls ~/Library/Application\\ Support/Zed/extensions/installed/\n```\n\nLANGUAGE: sh\nCODE:\n```\nls ~/.local/share/zed/extensions/installed\n```\n\n----------------------------------------\n\nTITLE: Requesting Cherry-Pick Bot Action for PR\nDESCRIPTION: This comment can be added to a PR to request the GitHub bot to automatically cherry-pick the changes to a specific version branch once the PR is merged. This is used for backporting fixes to release branches.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/releases.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/cherry-pick v0.XXX.x\n```\n\n----------------------------------------\n\nTITLE: Running Minor Version Bump Script for Zed Releases\nDESCRIPTION: This command runs a script that increments the minor version numbers for Zed and prepares new release branches. After running, it will instruct you to push the tags and branches to the repository.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/releases.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./script/bump-zed-minor-versions\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Fold Directories in Project Panel\nDESCRIPTION: Automatically folds directories that contain only one subdirectory in the project panel.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_fold_dirs\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rust Example for Test Database Creation\nDESCRIPTION: Command to execute a Rust example file that generates a test database. The example files are located in the 'examples' folder and can be run using cargo.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/db/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --example [your-example]\n```\n\n----------------------------------------\n\nTITLE: Triggering Nightly Release Build\nDESCRIPTION: This command triggers a build of the nightly version of Zed from the current state of the main branch. Nightly builds are used primarily by employees for testing the latest changes.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/releases.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./script/trigger-release nightly\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commands in Markdown Table\nDESCRIPTION: This snippet presents a markdown table showing Git-related commands available in Zed's Vim mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Command         | Description                                             |\n| --------------- | ------------------------------------------------------- |\n| `:dif[fupdate]` | View the diff under the cursor (`d o` in normal mode)   |\n| `:rev[ert]`     | Revert the diff under the cursor (`d p` in normal mode) |\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Locale Configuration\nDESCRIPTION: Configuration for postgresql.conf to set proper locale encoding.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/windows.md#2025-04-11_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\n# lc_messages = 'Chinese (Simplified)_China.936' # locale for system error message strings\nlc_messages = 'English_United States.1252'\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table of Zed Subprocessors\nDESCRIPTION: This markdown snippet creates a table listing Zed's subprocessors, their purposes, and locations. It includes various tech companies providing services such as cloud infrastructure, analytics, and AI.\nSOURCE: https://github.com/zed-industries/zed/blob/main/legal/subprocessors.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Subprocessor        | Purpose                  | Location      |\n| ------------------- | ------------------------ | ------------- |\n| Cloudflare          | Cloud Infrastructure     | Worldwide     |\n| Amazon Web Services | Cloud Infrastructure     | United States |\n| DigitalOcean        | Cloud Infrastructure     | United States |\n| Vercel              | Cloud Infrastructure     | United States |\n| ConvertKit          | Email Marketing          | United States |\n| Axiom               | Analytics                | United States |\n| Hex Technologies    | Analytics                | United States |\n| Snowflake           | Analytics                | United States |\n| LiveKit             | Audio/Video Conferencing | United States |\n| GitHub              | Authentication           | United States |\n| Anthropic           | AI Services              | United States |\n| BaseTen             | AI Services              | United States |\n| Fireworks AI        | AI Services              | United States |\n| Google              | AI Services              | United States |\n| OpenAI              | AI Services              | United States |\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose for Zed Collaboration Dependencies\nDESCRIPTION: Brings up all the collaboration dependencies for Zed using Docker Compose in detached mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/linux.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Fold Directories in Project Panel\nDESCRIPTION: Prevents automatic folding of directories that contain only one subdirectory in the project panel.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_fold_dirs\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zed Development Build\nDESCRIPTION: Executes a script to install a local build of Zed on the user's machine.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/linux.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./script/install-linux\n```\n\n----------------------------------------\n\nTITLE: Displaying Replacement Command in Markdown Table\nDESCRIPTION: This snippet presents a markdown table showing the replacement command in Zed's Vim mode, which uses regular expressions for text substitution.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/vim.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Command              | Description                       |\n| -------------------- | --------------------------------- |\n| `:[range]s/foo/bar/` | Replace instances of foo with bar |\n```\n\n----------------------------------------\n\nTITLE: Defining Stylable Trait in Rust\nDESCRIPTION: This snippet defines a Stylable trait with an associated type for Style and a method to apply a style to an object.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/storybook/docs/thoughts.md#2025-04-11_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ntrait Stylable {\n    type Style;\n\n    fn with_style(self, style: Self::Style) -> Self;\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling gopls from Package Managers\nDESCRIPTION: Commands to remove existing gopls installations from various package managers before installing via go tools.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/go.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# MacOS homebrew\nbrew remove gopls\n# Ubuntu\nsudo apt-get remove gopls\nsudo snap remove gopls\n# Arch\nsudo pacman -R gopls\n```\n\n----------------------------------------\n\nTITLE: Custom database seed configuration JSON\nDESCRIPTION: This JSON structure defines custom seed data for the Zed database, specifying admin users and available channels. The usernames in the admins list must correspond to valid GitHub users.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admins\": [\"admin1\", \"admin2\"],\n  \"channels\": [\"zed\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS\nDESCRIPTION: Shows the command to install Xcode command line tools on macOS, which are required for GPUI to work with Metal for rendering.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Creating Personal Data Collection Table in Markdown\nDESCRIPTION: A markdown table showing different categories of personal data collected, examples of collected data, and the third parties with whom the data is shared.\nSOURCE: https://github.com/zed-industries/zed/blob/main/legal/privacy-policy.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Category of personal data     | Examples of data we collect                                   | Categories of third parties with whom we share this data |\n| ----------------------------- | ------------------------------------------------------------- | -------------------------------------------------------- |\n| Profile or contact data       | First and last name<br/>Email address<br/>GitHub username     | Cloud infrastructure providers <br/>Analytics providers  |\n| IP data                       | IP address & derived geolocation data                         | Cloud infrastructure providers <br/>Analytics providers  |\n| Web analytics                 | Interactions<br/>Referrer<br/>Request IDs<br/>Statistics      | Cloud infrastructure providers <br/>Analytics providers  |\n| Photos, videos and recordings | Screenshots<br/>Videos and video recordings you share with us | Cloud infrastructure providers                           |\n| Audio, screenshare data       | Audio and screen sharing during collaboration calls           | Cloud infrastructure providers                           |\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Text Manipulation Tutorial\nDESCRIPTION: A markdown link formatting for a blog post about text manipulation techniques and skills\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/additional-learning-materials.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Text Manipulation Kung Fu for the Aspiring Black Belt](https://zed.dev/blog/text-manipulation)\n```\n\n----------------------------------------\n\nTITLE: Installing Scala and Coursier via Homebrew\nDESCRIPTION: Commands to install Scala and Coursier using Homebrew package manager on macOS. This setup is required for Scala development in Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/scala.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install coursier/formulas/coursier && cs setup\n```\n\n----------------------------------------\n\nTITLE: Viewing default seed data for the database\nDESCRIPTION: This command displays the default database seed configuration used to populate the Zed database with initial content, including admin users and channels.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncat crates/collab/seed.default.json\n```\n\n----------------------------------------\n\nTITLE: Showing Scrollbar in Project Panel\nDESCRIPTION: Configures the project panel to always display a scrollbar.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scrollbar\": {\n    \"show\": \"always\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Zed in Debug Mode\nDESCRIPTION: Uses Cargo to build and run Zed in debug mode.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/linux.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Hiding Scrollbar in Project Panel\nDESCRIPTION: Configures the project panel to never display a scrollbar.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/configuring-zed.md#2025-04-11_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scrollbar\": {\n    \"show\": \"never\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Server Target for Zed Installation\nDESCRIPTION: Sets an environment variable for the remote server target and runs the installation script to work around linker errors.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/linux.md#2025-04-11_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport REMOTE_SERVER_TARGET=x86_64-unknown-linux-gnu; script/install-linux\n```\n\n----------------------------------------\n\nTITLE: Checking File Descriptor Limits in Bash\nDESCRIPTION: This command checks the current limits on file descriptors. It's used to diagnose potential issues with running out of file descriptors when using Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/linux.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nulimit\n```\n\n----------------------------------------\n\nTITLE: Installing CMake via Homebrew\nDESCRIPTION: Command to install the CMake build system using Homebrew, which is required by a Zed dependency.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install cmake\n```\n\n----------------------------------------\n\nTITLE: Verifying OCaml LSP Installation\nDESCRIPTION: Command to verify if ocamllsp (OCaml Language Server Protocol) is properly installed in the system by displaying its help information.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ocaml.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nocamllsp --help\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose for Zed Collab Dependencies\nDESCRIPTION: Command to start all the collaborative dependencies using Docker Compose as an alternative to manual installation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/macos.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Manually reseeding the database with custom seed file\nDESCRIPTION: This command explicitly reseeds the database with a custom seed file, which can be used to add more users to an existing database setup.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nSEED_PATH=./seed.json cargo run -p collab seed\n```\n\n----------------------------------------\n\nTITLE: Installing Ark Kernel for R REPL\nDESCRIPTION: Shell command to install the Ark kernel for R after downloading and placing the binary in the system path.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/repl.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nark --install\n```\n\n----------------------------------------\n\nTITLE: Generating Preview Channel Changes for Release Notes\nDESCRIPTION: This script generates a list of changes that have been made in the Preview channel, which can be used as a starting point for writing release notes for the new Preview release.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/releases.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./script/get-preview-channel-changes\n```\n\n----------------------------------------\n\nTITLE: Launching Zed Editor with OCaml Support\nDESCRIPTION: Command to launch Zed editor with OCaml support from the terminal, targeting the current directory. Requires Zed CLI to be installed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/ocaml.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzed .\n```\n\n----------------------------------------\n\nTITLE: Modifying Cargo.toml Debug Settings from Limited to Full\nDESCRIPTION: Example of changing the debug information level in the project's Cargo.toml from the default 'limited' to 'full' for improved debugging capabilities.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/debuggers.md#2025-04-11_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\ndebug = \"limited\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\ndebug = \"full\"\n```\n\n----------------------------------------\n\nTITLE: Checking inotify System Settings in Bash\nDESCRIPTION: This command checks the current inotify settings using sysctl. It's used to verify if the max_user_instances and max_user_watches are set to appropriate values for Zed to function correctly.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/linux.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsysctl fs.inotify\n```\n\n----------------------------------------\n\nTITLE: Defining Code Outline Structure in Tree-sitter\nDESCRIPTION: Illustrates how to define the structure for the code outline using Tree-sitter queries in the outline.scm file. This example captures object keys for the outline structure in JSON.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/extensions/languages.md#2025-04-11_snippet_4\n\nLANGUAGE: scheme\nCODE:\n```\n(pair\n  key: (string (string_content) @name)) @item\n```\n\n----------------------------------------\n\nTITLE: Defining Hoverable Element Structure in Rust\nDESCRIPTION: This snippet defines a Hoverable struct that wraps another element. It includes an implementation of the Element trait for Hoverable.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/storybook/docs/thoughts.md#2025-04-11_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct Hoverable<E: Element> {\n\n}\n\nimpl<V> Element<V> for Hoverable {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Xcode Command Line Tools Path on macOS\nDESCRIPTION: Demonstrates how to set the Xcode command line tools to use the newly installed copy of Xcode on macOS, ensuring compatibility with GPUI.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/gpui/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n```\n\n----------------------------------------\n\nTITLE: Running LiveKit server with PATH on Windows\nDESCRIPTION: This PowerShell command starts the LiveKit server in development mode on Windows, assuming the livekit-server binary is in the system PATH.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/development/local-collaboration.md#2025-04-11_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nlivekit-server --dev\n```\n\n----------------------------------------\n\nTITLE: Starting Zed Collaboration and LiveKit Servers (Shell)\nDESCRIPTION: This shell command uses Foreman to start the Zed collaboration server and the LiveKit development server simultaneously.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/collab/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforeman start\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown for Zed Multibuffer Demonstration\nDESCRIPTION: This snippet demonstrates how to embed a video using HTML within a Markdown file. The video showcases the multibuffer editing capabilities of Zed.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/multibuffers.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"video\" style=\"position: relative; padding-top: 71.71314741035857%;\">\n  <iframe\n    src=\"https://customer-snccc0j9v3kfzkif.cloudflarestream.com/bda0a6584c19f4b39e58a263c0ae4358/iframe?muted=true&preload=true&loop=true&autoplay=true&poster=https%3A%2F%2Fcustomer-snccc0j9v3kfzkif.cloudflarestream.com%2Fbda0a6584c19f4b39e58a263c0ae4358%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600&controls=false\"\n    style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\"\n    allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\"\n    allowfullscreen=\"true\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: GDB Debug Configuration for Programs\nDESCRIPTION: Configuration for debugging a program using GDB on Linux systems and Intel Macs. This example shows how to debug the Zed application itself using the GDB debug adapter.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"GDB: Debug program\",\n  \"adapter\": \"gdb\",\n  \"program\": \"$ZED_WORKTREE_ROOT/target/debug/zed\",\n  \"request\": \"launch\",\n  \"cwd\": \"$ZED_WORKTREE_ROOT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Search in JavaScript\nDESCRIPTION: A JavaScript function that uses the string.includes() method to check if a needle (search term) exists within a haystack (larger text). Returns true if the needle is found, otherwise returns false.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/semantic_index/fixture/needle.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction searchForNeedle(haystack, needle) {\n  return haystack.includes(needle);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Search in Python\nDESCRIPTION: A simple Python function that checks if a needle (search term) exists within a haystack (larger text). Returns True if the needle is found, otherwise returns False.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/semantic_index/fixture/needle.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef search_for_needle(haystack, needle):\n    if needle in haystack:\n        return True\n    else:\n        return False\n```\n\n----------------------------------------\n\nTITLE: Enabling DAP Communications Logging\nDESCRIPTION: Configuration for enabling logging of Debug Adapter Protocol (DAP) communications between Zed and active debug adapters. This is primarily used for development and troubleshooting of DAP implementations.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/project/src/debugger/README.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debugger\": {\n    \"log_dap_communications\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Zed Schema Generator via Cargo\nDESCRIPTION: Examples of how to run the schema generator tool using Cargo. Shows how to access help documentation and generate specific schema types like theme and icon_theme.\nSOURCE: https://github.com/zed-industries/zed/blob/main/crates/schema_generator/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p schema_generator -- --help\n\ncargo run -p schema_generator -- theme\ncargo run -p schema_generator -- icon_theme\n```\n\n----------------------------------------\n\nTITLE: JSON Schema LSP Settings Configuration\nDESCRIPTION: Configuration for JSON Language Server settings to associate schemas with specific file patterns.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/json.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"lsp\": {\n  \"json-language-server\": {\n    \"settings\": {\n      \"json\": {\n        \"schemas\": [\n          {\n            \"fileMatch\": [\"*/*.luarc.json\"],\n            \"url\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Function Example in Markdown\nDESCRIPTION: Example showing syntax highlighted Python code block in Markdown with a fibonacci function using function decorator.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/markdown.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport functools as ft\n\n@ft.lru_cache(maxsize=500)\ndef fib(n):\n    return n if n < 2 else fib(n - 1) + fib(n - 2)\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Inline Configuration\nDESCRIPTION: Example of inline JSON schema specification for a Lua configuration file using the $schema property.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/json.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing clang-format on Various OS\nDESCRIPTION: Commands to install clang-format on MacOS, Ubuntu, and Fedora for Proto formatting support.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/proto.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# MacOS:\nbrew install clang-format\n# Ubuntu\nsudo apt-get install clang-format\n# Fedora\nsudo dnf install clang-tools-extra\n```\n\n----------------------------------------\n\nTITLE: Installing ProtoLS with Cargo\nDESCRIPTION: Commands to install ProtoLS using Cargo and verify its installation.\nSOURCE: https://github.com/zed-industries/zed/blob/main/docs/src/languages/proto.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install protols\nwhich protols\n```"
  }
]