[
  {
    "owner": "meister03",
    "repo": "discord-hybrid-sharding",
    "content": "TITLE: Setting Up ClusterManager in JavaScript\nDESCRIPTION: Example code for creating a ClusterManager to manage processes/clusters in a file called cluster.js. It shows how to configure options like totalShards, shardsPerClusters, and spawn behavior.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Typescript: import { ClusterManager } from 'discord-hybrid-sharding'\nconst { ClusterManager } = require('discord-hybrid-sharding');\n\nconst manager = new ClusterManager(`${__dirname}/bot.js`, {\n    totalShards: 'auto', // or numeric shard count\n    /// Check below for more options\n    shardsPerClusters: 2, // 2 shards per process\n    // totalClusters: 7,\n    mode: 'process', // you can also choose \"worker\"\n    token: 'YOUR_TOKEN',\n});\n\nmanager.on('clusterCreate', cluster => console.log(`Launched Cluster ${cluster.id}`));\nmanager.spawn({ timeout: -1 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Client with ClusterClient\nDESCRIPTION: Example code showing how to set up a Discord.js client with the ClusterClient to enable broadcasting and communication between clusters. Used in the bot.js file.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Typescript: import { ClusterClient, getInfo } from 'discord-hybrid-sharding'\nconst { ClusterClient, getInfo } = require('discord-hybrid-sharding');\nconst Discord = require('discord.js');\n\nconst client = new Discord.Client({\n    shards: getInfo().SHARD_LIST, // An array of shards that will get spawned\n    shardCount: getInfo().TOTAL_SHARDS, // Total number of shards\n    intents: [],\n});\n\nclient.cluster = new ClusterClient(client); // initialize the Client, so we access the .broadcastEval()\nclient.login('YOUR_TOKEN');\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero Downtime Reclustering in Cluster Manager\nDESCRIPTION: Demonstrates how to implement zero downtime reclustering using ClusterManager and ReClusterManager. Includes setup and configuration for graceful cluster switching.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ClusterManager, ReClusterManager } = require('discord-hybrid-sharding');\nconst manager = new ClusterManager(`${__dirname}/bot.js`, {...});\n\nmanager.extend(\n    new ReClusterManager()\n)\n... ///SOME CODE\n// Start reclustering\nconst optional = {totalShards, totalClusters....}\nmanager.recluster?.start({restartMode: 'gracefulSwitch', ...optional})\n```\n\n----------------------------------------\n\nTITLE: Implementing IPC System in Cluster Manager\nDESCRIPTION: Sets up inter-process communication system in the cluster manager to handle message passing between clusters.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ClusterManager, messageType } = require('discord-hybrid-sharding');\nconst manager = new ClusterManager(`${__dirname}/testbot.js`, {\n    totalShards: 1,\n    totalClusters: 1,\n});\n\nmanager.on('clusterCreate', cluster => {\n    cluster.on('message', message => {\n        console.log(message);\n        if (message._type !== messageType.CUSTOM_REQUEST) return; // Check if the message needs a reply\n        message.reply({ content: 'hello world' });\n    });\n    setInterval(() => {\n        cluster.send({ content: 'I am alive' }); // Send a message to the client\n        cluster.request({ content: 'Are you alive?', alive: true }).then(e => console.log(e)); // Send a message to the client\n    }, 5000);\n});\nmanager.spawn({ timeout: -1 });\n```\n\n----------------------------------------\n\nTITLE: Converting Discord.js Sharding to Clustering System\nDESCRIPTION: Comprehensive changelog showing the transformation of sharding components to clustering, including file renames, functionality changes, and TypeScript conversion. Includes changes to client utilities, core components, and manager classes while making the library dependency-free.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/changes.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- ShardClientUtil.js\n+ ClusterClient.js:\n   -> Change Shard to Cluster\n   -> Add Info Function, which parses out Process.Env or Worker Data\n   -> Remove Broadcast Logic of Discord.js\n   -> Convert to Typescript\n- Shard.js\n+ Cluster.js\n   -> Change Shard to Cluster\n   -> Add new Error Event\n   -> Change Spawn Options\n   -> Convert to Typescript\n- ShardManager.js\n+ ClusterManager.js\n    --> Change Shard to Cluster\n    --> Add Chunk Function\n    --> Add Option to Accept Internal Shard List\n    --> Add private Properties\n    -> Convert to Typescript\n\n+ Util.js\n   --> Copy Discord.js Util Functions for making Library zero Dep\n   -> Convert to Typescript\n\n+ Util.js\n   --> Copy Discord.js Constants for making Library zero Dep\n   -> Convert to Typescript\n\n+ interface ClusterManager, Cluster, ClusterClient\n  --> Handy Event Emitter Typings from @discordjs/rest\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Eval Across Clusters\nDESCRIPTION: Examples showing how to use broadcastEval to execute code across all clusters, such as counting total guilds. Demonstrates both string-based and callback function approaches.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.cluster\n    .broadcastEval(`this.guilds.cache.size`)\n    .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`));\n\n// or with a callback function\nclient.cluster\n    .broadcastEval(c => c.guilds.cache.size)\n    .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Heartbeat System\nDESCRIPTION: Implements a heartbeat system to monitor cluster health and automatically respawn unresponsive clusters.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ClusterManager, HeartbeatManager } = require('discord-hybrid-sharding');\nconst manager = new ClusterManager(`${__dirname}/bot.js`, {...});\n\nmanager.extend(\n    new HeartbeatManager({\n        interval: 2000, // Interval to send a heartbeat\n        maxMissedHeartbeats: 5, // Maximum amount of missed Heartbeats until Cluster will get respawned\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bot Client for Zero Downtime Reclustering\nDESCRIPTION: Shows how to set up the Discord client with ClusterClient integration for zero downtime reclustering, including maintenance mode handling.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ClusterClient, getInfo } = require('discord-hybrid-sharding');\nconst client = new Discord.Client(...)\nclient.cluster = new ClusterClient(client);\n\nif (client.cluster.maintenance) console.log(`Bot on maintenance mode with ${client.cluster.maintenance}`);\n\nclient.cluster.on('ready', () => {\n    // Load Events\n    // Handle Database stuff, to not process outdated data\n});\n\nclient.login(token);\n```\n\n----------------------------------------\n\nTITLE: Implementing IPC System in Bot Client\nDESCRIPTION: Configures the Discord client to handle IPC messages and respond to cluster manager communications.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ClusterClient, getInfo, messageType } = require('discord-hybrid-sharding');\nconst Discord = require('discord.js');\nconst client = new Discord.Client({\n    shards: getInfo().SHARD_LIST, // An array of shards that will get spawned\n    shardCount: getInfo().data.TOTAL_SHARDS, // Total number of shards\n});\n\nclient.cluster = new ClusterClient(client);\nclient.cluster.on('message', message => {\n    console.log(message);\n    if (message._type !== messageType.CUSTOM_REQUEST) return; // Check if the message needs a reply\n    if (message.alive) message.reply({ content: 'Yes I am!' });\n});\nsetInterval(() => {\n    client.cluster.send({ content: 'I am alive as well!' });\n}, 5000);\nclient.login('YOUR_TOKEN');\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Restart Controls\nDESCRIPTION: Shows how to implement restart controls by setting maximum restart limits and intervals for clusters.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst manager = new ClusterManager(`${__dirname}/bot.js`, {\n    ...YourOptions,\n    restarts: {\n        max: 5, // Maximum amount of restarts per cluster\n        interval: 60000 * 60, // Interval to reset restarts\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Cluster Queue\nDESCRIPTION: Demonstrates how to control cluster spawn queue for managing rate limits and spawn order.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst manager = new ClusterManager(`${__dirname}/bot.js`, {\n    totalShards: 8,\n    shardsPerClusters: 2,\n    queue: {\n        auto: false,\n    },\n});\n\nmanager.spawn();\nmanager.queue.next();\n```\n\n----------------------------------------\n\nTITLE: Installing Discord-Hybrid-Sharding Package\nDESCRIPTION: Command to install the Discord-Hybrid-Sharding library via npm.\nSOURCE: https://github.com/meister03/discord-hybrid-sharding/blob/ts-rewrite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nnpm i discord-hybrid-sharding\n```"
  }
]