[
  {
    "owner": "azuread",
    "repo": "microsoft-authentication-library-for-objc",
    "content": "TITLE: Implementing Token Acquisition with MSAL in Swift\nDESCRIPTION: This Swift code demonstrates how to configure MSAL, define scopes, and acquire an authentication token interactively. It initializes a public client application with a client ID and handles the authentication result to extract the access token and account identifier for reuse.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = MSALPublicClientApplicationConfig(clientId: \"<your-client-id-here>\")\nlet scopes = [\"your-scope1-here\", \"your-scope2-here\"]\n        \nif let application = try? MSALPublicClientApplication(configuration: config) {\n            \n\tlet viewController = ... // Pass a reference to the view controller that should be used when getting a token interactively\n\tlet webviewParameters = MSALWebviewParameters(authPresentationViewController: viewController)\n\t\n\tlet interactiveParameters = MSALInteractiveTokenParameters(scopes: scopes, webviewParameters: webviewParameters)\n\tapplication.acquireToken(with: interactiveParameters, completionBlock: { (result, error) in\n                \n\tguard let authResult = result, error == nil else {\n\t\tprint(error!.localizedDescription)\n\t\treturn\n\t}\n                \n\t// Get access token from result\n\tlet accessToken = authResult.accessToken\n                \n\t// You'll want to get the account identifier to retrieve and reuse the account for later acquireToken calls\n\tlet accountIdentifier = authResult.account.identifier\n\t})\n}\nelse {\n\tprint(\"Unable to create application.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Acquisition with MSAL in Objective-C\nDESCRIPTION: This Objective-C code demonstrates how to configure MSAL, define scopes, and acquire an authentication token interactively. It initializes a public client application with error handling and processes the authentication result to extract the access token and account identifier for subsequent use.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nNSError *msalError = nil;\n    \nMSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:@\"<your-client-id-here>\"];\nNSArray<NSString *> *scopes = @[@\"your-scope1-here\", @\"your-scope2-here\"];\n    \nMSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&msalError];\n    \nMSALViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively\nMSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];\n    \nMSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];\n[application acquireTokenWithParameters:interactiveParams completionBlock:^(MSALResult *result, NSError *error) {\n    if (!error)\n    {\n        // You'll want to get the account identifier to retrieve and reuse the account\n        // for later acquireToken calls\n        NSString *accountIdentifier = result.account.identifier;\n            \n        NSString *accessToken = result.accessToken;\n    }\n    else\n    {\n        // Check the error\n    }\n}];\n```\n\n----------------------------------------\n\nTITLE: Extending MSALResult for Proof-of-Possession in Objective-C\nDESCRIPTION: This code snippet shows the extension of MSALResult to include two new properties: authorizationHeader and authenticationScheme. These properties are used for handling Proof-of-Possession (PoP) protected resources, where the accessToken property returns the Signed Http Request without the 'Pop' scheme prefix.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n/**\n The authorization header for the specific authentication scheme . For instance \"Bearer ...\" or \"Pop ...\". For pop resource, this value is the Signed Http Request (SHR) as explained in step 4 which is sent to the resource provided to access the resource\n */\n@property (readonly, nonnull) NSString *authorizationHeader;\n\n/**\n The authentication scheme for the tokens issued. For instance \"Bearer \" or \"Pop\".\n */\n@property (readonly, nonnull) NSString *authenticationScheme;\n```\n\n----------------------------------------\n\nTITLE: Initializing Interactive Token Parameters in MSAL Objective-C\nDESCRIPTION: Creates MSALInteractiveTokenParameters instance for interactive token acquisition. Configures necessary view controller parameters for iOS and macOS platforms.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#if TARGET_OS_IPHONE\n    UIViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively\n    MSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];\n#else\n    MSALWebviewParameters *webParameters = [MSALWebviewParameters new];\n#endif \n\nMSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Scheme for Token Parameters\nDESCRIPTION: Demonstrates how to set the authentication scheme for interactive and silent token parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\ninteractiveParams.authenticationScheme = authScheme\nsilentParams.authenticationScheme = authScheme\n```\n\n----------------------------------------\n\nTITLE: Creating Silent Token Parameters in MSAL Objective-C\nDESCRIPTION: Initializes MSALSilentTokenParameters for silent token acquisition using an existing account.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nNSError *error = nil;\nMSALAccount *account = [application accountForIdentifier:accountIdentifier error:&error];\nif (!account)\n{\n    // handle error\n    return;\n}\n    \nMSALSilentTokenParameters *silentParams = [[MSALSilentTokenParameters alloc] initWithScopes:scopes account:account];\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL for Browser-Delegated Authentication with CocoaPods\nDESCRIPTION: This CocoaPods configuration demonstrates how to install the MSAL library for browser-delegated authentication by adding it to the Podfile. This setup enables standard OAuth2-based authentication flows using browser or web views.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nuse_frameworks!\n \ntarget 'your-target-here' do\n\tpod 'MSAL'\nend\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL for Native Authentication with CocoaPods\nDESCRIPTION: This CocoaPods configuration demonstrates how to install the MSAL library with native authentication capabilities by specifying the native-auth subspec. This setup enables end-to-end customizable authentication flows that don't require a browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nuse_frameworks!\n \ntarget 'your-target-here' do\n\tpod 'MSAL/native-auth'\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing PoP Authentication Scheme in MSAL\nDESCRIPTION: Creates an instance of MSALAuthenticationSchemePop with HTTP method and request URL parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\nMSALAuthenticationSchemePop *authScheme = [[MSALAuthenticationSchemePop alloc] initWithHttpMethod:MSALHttpMethodPOST requestUrl:requestUrl nonce:nil additionalParameters:nil];\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL with Carthage\nDESCRIPTION: This Carthage configuration demonstrates how to install the MSAL library by adding it to the Cartfile. It specifies using the main branch of the MSAL repository for the most current version.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngithub \"AzureAD/microsoft-authentication-library-for-objc\" \"main\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Bearer Authentication in Token Parameters\nDESCRIPTION: Shows the default implementation of MSALTokenParameters initializer with Bearer authentication scheme.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n@implementation MSALTokenParameters\n\n- (instancetype)initWithScopes:(NSArray<NSString *> *)scopes\n{\n    self = [super init];\n    if (self)\n    {\n        _scopes = scopes;\n        _authenticationScheme = [MSALAuthenticationSchemeBearer new];\n    }\n    \n    return self;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Methods Enum for PoP Authentication in MSAL\nDESCRIPTION: Defines the available HTTP methods that can be used with Proof-of-Possession authentication scheme.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\ntypedef NS_ENUM(NSUInteger, MSALHttpMethod)\n{\n    /*\n        Http Method for the pop resource\n    */\n    MSALHttpMethodGET,\n    MSALHttpMethodHEAD,\n    MSALHttpMethodPOST,\n    MSALHttpMethodPUT,\n    MSALHttpMethodDELETE,\n    MSALHttpMethodCONNECT,\n    MSALHttpMethodOPTIONS,\n    MSALHttpMethodTRACE,\n    MSALHttpMethodPATCH\n    \n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WKWebView Content Type for MSAL iOS\nDESCRIPTION: Sets the mobile content type for WKWebView configuration in MSAL iOS to improve web view rendering for authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nSet mobile content type for the WKWebView configuration\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Authorization Tag for Keychain Access in MSAL macOS\nDESCRIPTION: Updates the ACL authorization tag to kSecACLAuthorizationDecrypt for adding trusted applications to keychain items on macOS, enhancing security for keychain access.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\nUpdate ACL authorization tag to kSecACLAuthorizationDecrypt for adding trusted applications to keychain items on OSX.\n```\n\n----------------------------------------\n\nTITLE: Enabling Xcode 11.4 Recommended Settings in MSAL iOS\nDESCRIPTION: Enables recommended Xcode 11.4 settings for MSAL iOS, including localizability analysis, deprecated Objective-C implementations warnings, and implicit retain self warnings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-objc/blob/dev/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\nCLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;\nCLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;\nCLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;\n```"
  }
]