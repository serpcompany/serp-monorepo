[
  {
    "owner": "highcharts",
    "repo": "highcharts-react",
    "content": "TITLE: Basic Highcharts React Integration (JSX)\nDESCRIPTION: Demonstrates the fundamental usage of the `HighchartsReact` component to render a simple chart in a React application. It requires importing `React`, `render` (from `react-dom`), `Highcharts`, and `HighchartsReact`. Chart configuration is defined in an `options` object and passed along with the `Highcharts` instance to the component.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { render } from 'react-dom'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nconst options = {\n  title: {\n    text: 'My chart'\n  },\n  series: [{\n    data: [1, 2, 3]\n  }]\n}\n\nconst App = () => <div>\n  <HighchartsReact\n    highcharts={Highcharts}\n    options={options}\n  />\n</div>\n\nrender(<App />, document.getElementById('root'))\n```\n\n----------------------------------------\n\nTITLE: Highcharts React Integration with TypeScript (TSX)\nDESCRIPTION: Shows how to integrate Highcharts in a React application using TypeScript. It imports necessary types like `Highcharts.Options` for chart configuration and uses `HighchartsReact.Props` for component props and `HighchartsReact.RefObject` with `useRef` to get a reference to the chart instance. Requires `@types/react` and `typescript` as development dependencies.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport * as Highcharts from 'highcharts';\nimport { HighchartsReact } from 'highcharts-react-official';\n\n// The integration exports only a default component that at the same time is a\n// namespace for the related Props interface (HighchartsReact.Props) and\n// RefObject interface (HighchartsReact.RefObject). All other interfaces\n// like Options come from the Highcharts module itself.\n\nconst options: Highcharts.Options = {\n    title: {\n        text: 'My chart'\n    },\n    series: [{\n        type: 'line',\n        data: [1, 2, 3]\n    }]\n};\n\nconst App = (props: HighchartsReact.Props) => {\n  const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n\n  return (\n    <HighchartsReact\n      highcharts={Highcharts}\n      options={options}\n      ref={chartComponentRef}\n      {...props}\n    />\n  );\n};\n// Render your App component into the #root element of the document.\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Configuring HighchartsReact Component Props (JSX)\nDESCRIPTION: Illustrates the various configuration props available for the `HighchartsReact` component. Key props include `options` (Highcharts configuration), `highcharts` (the Highcharts instance), `constructorType` (e.g., 'chart', 'stockChart'), `allowChartUpdate`, `immutable`, `updateArgs`, `containerProps` (for styling the container), and `callback` (a function called after chart creation).\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n  <HighchartsReact\n    options = { this.state.chartOptions }\n    highcharts = { Highcharts }\n    constructorType = { 'mapChart' }\n    allowChartUpdate = { true }\n    immutable = { false }\n    updateArgs = { [true, true, true] }\n    containerProps = {{ className: 'chartContainer' }}\n    callback = { this.chartCallback }\n  />\n```\n\n----------------------------------------\n\nTITLE: Updating Highcharts Options in React Class Component (JSX)\nDESCRIPTION: Demonstrates an optimal pattern for updating Highcharts options within a React class component. It stores the `chartOptions` in the component's state and updates them via `setState`. This ensures that the Highcharts `chart.update()` method is called efficiently only with the changed options. It also shows handling chart events like `mouseOver` to update component state without triggering a chart redraw.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // To avoid unnecessary update keep all options in the state.\n      chartOptions: {\n        xAxis: {\n          categories: ['A', 'B', 'C'],\n        },\n        series: [\n          { data: [1, 2, 3] }\n        ],\n        plotOptions: {\n          series: {\n            point: {\n              events: {\n                mouseOver: this.setHoverData.bind(this)\n              }\n            }\n          }\n        }\n      },\n      hoverData: null\n    };\n  }\n\n  setHoverData = (e) => {\n    // The chart is not updated because `chartOptions` has not changed.\n    this.setState({ hoverData: e.target.category })\n  }\n\n  updateSeries = () => {\n    // The chart is updated only with new options.\n    this.setState({\n      chartOptions: {\n        series: [\n          { data: [Math.random() * 5, 2, 1]}\n        ]\n      }\n    });\n  }\n\n  render() {\n    const { chartOptions, hoverData } = this.state;\n\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={chartOptions}\n        />\n      <h3>Hovering over {hoverData}</h3>\n      <button onClick={this.updateSeries.bind(this)}>Update Series</button>\n      </div>\n    )\n  }\n}\n\nrender(<LineChart />, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Instance (Functional Component) - React JSX\nDESCRIPTION: This React JSX code demonstrates how to obtain a chart instance using the `useRef` hook in a functional component for versions 3.0.0 and later.  It initializes a `chartComponent` ref using `useRef(null)` and then accesses the chart instance via `chartComponent.current.chart` within a `useEffect` hook. The options prop is passed to the HighchartsReact component.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n  const chartComponent = useRef(null);\n  const [options] = useState({...});\n\n  useEffect(() => {\n    const chart = chartComponent.current.chart;\n    ...\n  }, []);\n\n  return <HighchartsReact ref={chartComponent} highcharts={Highcharts} options={options} />;\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Instance (Callback) - React JSX\nDESCRIPTION: This React JSX code shows how to obtain a chart instance using a callback function. The `afterChartCreated` function receives the chart instance and stores it in `this.internalChart`. The `callback` prop of the `HighchartsReact` component is set to `this.afterChartCreated`.  The chart instance can then be used in the component lifecycle.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nafterChartCreated = (chart) => {\n  // Highcharts creates a separate chart instance during export\n  if (!chart.options.chart.forExport) {\n    this.internalChart = chart;\n  }\n}\n\ncomponentDidMount() {\n  // example of use\n  this.internalChart.addSeries({ data: [1, 2, 3] })\n}\n\nrender() {\n  return (\n    <div>\n      <h2>Highcharts</h2>\n      <HighchartsReact\n        highcharts={ Highcharts }\n        options={ options }\n        callback={ this.afterChartCreated }\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Instance (Class Component) - React JSX\nDESCRIPTION: This React JSX code demonstrates how to obtain a chart instance using `React.createRef` in a class component for versions prior to 3.0.0. It defines a `chartRef` using `React.createRef()` and passes it to the `HighchartsReact` component as the `ref` prop. The chart instance can then be accessed via `this.chartRef.current.chart`.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconstructor(props) {\n  super(props)\n  this.chartRef = React.createRef();\n}\n\nrender() {\n  return (\n    <HighchartsReact\n      highcharts={ Highcharts }\n      options={ options }\n      ref={ this.chartRef }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Highcharts StockChart Component (JSX)\nDESCRIPTION: Shows how to create a reusable custom React component (`MyStockChart`) specifically for rendering a Highcharts StockChart. It imports `highcharts/highstock` instead of the standard `highcharts` module and sets the `constructorType` prop of `HighchartsReact` to `'stockChart'`. The component encapsulates the Highcharts configuration.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport Highcharts from 'highcharts/highstock'\nimport HighchartsReact from 'highcharts-react-official'\n\nconst options = {\n  title: {\n    text: 'My stock chart'\n  },\n  series: [{\n    data: [1, 2, 3]\n  }]\n}\n\nconst MyStockChart = () => <HighchartsReact\n  highcharts={Highcharts}\n  constructorType={'stockChart'}\n  options={options}\n/>\n\nexport default MyStockChart\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Highcharts Component (JSX)\nDESCRIPTION: Demonstrates how to import and use a custom chart component (like `MyStockChart` from the previous example) within a parent React application component. This promotes modularity and reusability of chart configurations.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { render } from 'react-dom'\nimport MyStockChart from './components/MyStockChart.jsx'\n\nconst App = () => <div>\n  <MyStockChart />\n</div>\n\nrender(<App />, document.getElementById('root'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Highcharts Modules in Next.js (JSX)\nDESCRIPTION: Provides a workaround for initializing Highcharts modules (e.g., `exporting`) within a Next.js application to avoid errors during server-side rendering. It checks if the `Highcharts` variable is an object (indicating client-side execution where `window` is available) before calling the module initialization function.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsExporting from 'highcharts/modules/exporting'\nimport HighchartsReact from 'highcharts-react-official'\n\nif (typeof Highcharts === 'object') {\n    HighchartsExporting(Highcharts)\n}\n\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Highcharts React Types Separately (TSX)\nDESCRIPTION: Illustrates an alternative method introduced in version 3.2.1 for importing specific types (`HighchartsReactRefObject`, `HighchartsReactProps`) directly from the `highcharts-react-official` package in a TypeScript project, rather than accessing them via the default export's namespace.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport HighchartsReact, { HighchartsReactRefObject, HighchartsReactProps } from 'highcharts-react-official';\n```\n\n----------------------------------------\n\nTITLE: Adding a Module - React JSX\nDESCRIPTION: This React JSX code demonstrates how to import and initialize a Highcharts module, specifically the Gantt module. It imports Highcharts, the Gantt module, and the HighchartsReact component. It then initializes the module using `highchartsGantt(Highcharts)` if the module is a function (for Highcharts versions < 12).\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport Highcharts from 'highcharts'\nimport highchartsGantt from \"highcharts/modules/gantt\"; // The Gantt module\nimport HighchartsReact from 'highcharts-react-official'\n\n// Init the module (only for Highcharts v < 12)\nif (typeof highchartsGantt === 'function') {\n  highchartsGantt(Highcharts);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts and React Wrapper (Bash)\nDESCRIPTION: Installs both the core Highcharts library and the official Highcharts React wrapper package using npm. Use this command if Highcharts is not already present in your project.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install highcharts highcharts-react-official\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts React Wrapper (Bash)\nDESCRIPTION: Installs the official Highcharts React wrapper package (`highcharts-react-official`) using npm. This command assumes the Highcharts library itself is already installed in the project.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install highcharts-react-official\n```\n\n----------------------------------------\n\nTITLE: Installing Highcharts for Examples/Tests (Bash)\nDESCRIPTION: Command to install the core `highcharts` library using npm within the cloned `highcharts-react` repository directory. This is a necessary step before running the examples or tests included in the repository, as Highcharts itself is a peer dependency.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install highcharts\n```\n\n----------------------------------------\n\nTITLE: Building the Demo - Bash\nDESCRIPTION: This command builds the demo for the highcharts-react integration. It utilizes the `npm run build-demo` script to generate the demo files, which can then be viewed in a browser. It is a build command, crucial for creating a working example.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-demo\n```\n\n----------------------------------------\n\nTITLE: Running Tests - Bash\nDESCRIPTION: This command executes the tests for the highcharts-react integration. It runs the test suite to verify the functionality of the integration, including chart rendering and container prop passing. It uses the npm test script.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Cloning the Highcharts React Repository (Bash)\nDESCRIPTION: Provides the necessary commands to clone the official `highcharts-react` GitHub repository using `git` and then install its project dependencies using `npm install` within the cloned directory.\nSOURCE: https://github.com/highcharts/highcharts-react/blob/master/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/highcharts/highcharts-react\ncd highcharts-react\nnpm install\n```"
  }
]