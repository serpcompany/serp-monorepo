[
  {
    "owner": "cucumber",
    "repo": "docs",
    "content": "TITLE: Java Selenium WebDriver Implementation\nDESCRIPTION: Java implementation of the Google search test scenario using Selenium WebDriver and Cucumber step definitions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.java.After;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.ExpectedCondition;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\n\npublic class ExampleSteps {\n\n    private final WebDriver driver = new FirefoxDriver();\n    \n    @Given(\"I am on the Google search page\")\n    public void I_visit_google() {\n        driver.get(\"https://www.google.com\");\n    }\n\n    @When(\"I search for {string}\")\n    public void search_for(String query) {\n        WebElement element = driver.findElement(By.name(\"q\"));\n        // Enter something to search for\n        element.sendKeys(query);\n        // Now submit the form. WebDriver will find the form for us from the element\n        element.submit();\n   }\n\n   @Then(\"the page title should start with {string}\")\n   public void checkTitle(String titleStartsWith) {\n       // Google's search is rendered dynamically with JavaScript\n       // Wait for the page to load timeout after ten seconds\n       new WebDriverWait(driver,10L).until(new ExpectedCondition<Boolean>() {\n           public Boolean apply(WebDriver d) {\n               return d.getTitle().toLowerCase().startsWith(titleStartsWith);\n           }\n       });\n   }\n\n   @After()\n   public void closeBrowser() {\n       driver.quit();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Selenium WebDriver Implementation\nDESCRIPTION: Kotlin implementation of the Google search test scenario using Selenium WebDriver and Cucumber step definitions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.java8.Scenario\nimport io.cucumber.java8.En\nimport org.openqa.selenium.By\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.WebElement\nimport org.openqa.selenium.support.ui.WebDriverWait\n\nclass ExampleSteps: En {\n\n    lateinit var driver: WebDriver\n\n    init {\n        Given(\"I am on the Google search page\") {\n            driver.get(\"https:\\\\www.google.com\")\n        }\n\n        When(\"I search for {string}\") { query: String ->\n            val element: WebElement = driver.findElement(By.name(\"q\"))\n            // Enter something to search for\n            element.sendKeys(query)\n            // Now submit the form. WebDriver will find the form for us from the element\n            element.submit()\n        }\n\n        Then(\"the page title should start with {string}\") { titleStartsWith: String ->\n            // Google's search is rendered dynamically with JavaScript\n            // Wait for the page to load timeout after ten seconds\n            WebDriverWait(driver, 10L).until { d ->\n                d.title.toLowerCase().startsWith(titleStartsWith)\n            }\n        }\n\n        After { scenario: Scenario ->\n            driver.quit()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Gherkin Feature File\nDESCRIPTION: Example feature file showing a basic scenario structure for testing if a day is Friday.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_16\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Is it Friday yet?\n  Everybody wants to know when it's Friday\n\n  Scenario: Sunday isn't Friday\n    Given today is Sunday\n    When I ask whether it's Friday yet\n    Then I should be told \"Nope\"\n```\n\n----------------------------------------\n\nTITLE: Basic Feature File Structure Example in Gherkin\nDESCRIPTION: This example demonstrates the basic structure of a Gherkin feature file with two simple scenarios. It shows proper indentation, comments, and the basic Given-When-Then syntax pattern.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Guess the word\n\n  # The first example has two steps\n  Scenario: Maker starts a game\n    When the Maker starts a game\n    Then the Maker waits for a Breaker to join\n\n  # The second example has three steps\n  Scenario: Breaker joins a game\n    Given the Maker has started a game with the word \"silky\"\n    When the Breaker joins the Maker's game\n    Then the Breaker must guess a word with 5 characters\n```\n\n----------------------------------------\n\nTITLE: JavaScript Selenium WebDriver Implementation\nDESCRIPTION: JavaScript implementation of the Google search test scenario using Selenium WebDriver and Cucumber step definitions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Given, When, Then, AfterAll } = require('cucumber');\nconst { Builder, By, Capabilities, Key } = require('selenium-webdriver');\nconst { expect } = require('chai');\n\nrequire(\"chromedriver\");\n\n// driver setup\nconst capabilities = Capabilities.chrome();\ncapabilities.set('chromeOptions', { \"w3c\": false });\nconst driver = new Builder().withCapabilities(capabilities).build();\n\nGiven('I am on the Google search page', async function () {\n    await driver.get('http://www.google.com');\n});\n\nWhen('I search for {string}', async function (searchTerm) {\n    const element = await driver.findElement(By.name('q'));\n    element.sendKeys(searchTerm, Key.RETURN);\n    element.submit();\n});\n\nThen('the page title should start with {string}', {timeout: 60 * 1000}, async function (searchTerm) {\n    const title = await driver.getTitle();\n    const isTitleStartWithCheese = title.toLowerCase().lastIndexOf(`${searchTerm}`, 0) === 0;\n    expect(isTitleStartWithCheese).to.equal(true);\n});\n\nAfterAll(async function(){\n    await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Rule Keyword Example in Gherkin\nDESCRIPTION: This example shows how to use the Rule keyword (introduced in Gherkin 6) to group scenarios that belong to the same business rule. It demonstrates organizing multiple examples under different business rules within a feature.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\n# -- FILE: features/gherkin.rule_example.feature\nFeature: Highlander\n\n  Rule: There can be only One\n\n    Example: Only One -- More than one alive\n      Given there are 3 ninjas\n      And there are more than one ninja alive\n      When 2 ninjas meet, they will fight\n      Then one ninja dies (but not me)\n      And there is one ninja less alive\n\n    Example: Only One -- One alive\n      Given there is only 1 ninja alive\n      Then he (or she) will live forever ;-)\n\n  Rule: There can be Two (in some cases)\n\n    Example: Two -- Dead and Reborn as Phoenix\n      ...\n```\n\n----------------------------------------\n\nTITLE: Gherkin Data Table Example\nDESCRIPTION: Example of defining a data table in Gherkin syntax for passing lists of values to step definitions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven the following animals:\n  | cow   |\n  | horse |\n  | sheep |\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeStep Hooks in Java\nDESCRIPTION: BeforeStep hooks are invoked before a step. This snippet shows how to implement BeforeStep hooks in Java using both annotated method style and lambda style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n@BeforeStep\npublic void doSomethingBeforeStep(Scenario scenario){\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nBeforeStep((Scenario scenario) -> {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Declarative Style Gherkin Scenario\nDESCRIPTION: Example of Gherkin scenarios written in a declarative style, which focuses on behavior and intent rather than implementation details. This style is more maintainable and resilient to UI changes.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/bdd/better-gherkin.md#2025-04-09_snippet_3\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Subscribers see different articles based on their subscription level\n \nScenario: Free subscribers see only the free articles\n  Given Free Frieda has a free subscription\n  When Free Frieda logs in with her valid credentials\n  Then she sees a Free article\n\nScenario: Subscriber with a paid subscription can access both free and paid articles\n  Given Paid Patty has a basic-level paid subscription\n  When Paid Patty logs in with her valid credentials\n  Then she sees a Free article and a Paid article\n```\n\n----------------------------------------\n\nTITLE: Writing Scenarios in Gherkin Syntax\nDESCRIPTION: Example of a basic Gherkin scenario showing the Given-When-Then structure for testing a word guessing feature.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/overview.md#2025-04-09_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Breaker guesses a word\n  Given the Maker has chosen a word\n  When the Breaker makes a guess\n  Then the Maker is asked to score\n```\n\n----------------------------------------\n\nTITLE: Gherkin Scenario Outline Example\nDESCRIPTION: Shows how to use Scenario Outline for parameterized tests with Examples table.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_8\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario Outline: eating\n  Given there are <start> cucumbers\n  When I eat <eat> cucumbers\n  Then I should have <left> cucumbers\n\n  Examples:\n    | start | eat | left |\n    |    12 |   5 |    7 |\n    |    20 |   5 |   15 |\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Before Hooks with Tag Expressions in Ruby\nDESCRIPTION: Hooks can be conditionally selected for execution based on the tags of the scenario. This snippet shows how to implement conditional Before hooks in Ruby using tag expressions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nBefore('@browser and not @headless') do\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions in Java\nDESCRIPTION: Complete Java implementation of step definitions for the 'Is it Friday yet?' feature. Includes a helper class IsItFriday and step definitions for Given, When, and Then steps using Cucumber annotations.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npackage hellocucumber;\n\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.When;\nimport io.cucumber.java.en.Then;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass IsItFriday {\n    static String isItFriday(String today) {\n        return null;\n    }\n}\n\npublic class Stepdefs {\n    private String today;\n    private String actualAnswer;\n\n    @Given(\"today is Sunday\")\n    public void today_is_Sunday() {\n        today = \"Sunday\";\n    }\n\n    @When(\"I ask whether it's Friday yet\")\n    public void i_ask_whether_it_s_Friday_yet() {\n        actualAnswer = IsItFriday.isItFriday(today);\n    }\n\n    @Then(\"I should be told {string}\")\n    public void i_should_be_told(String expectedAnswer) {\n        assertEquals(expectedAnswer, actualAnswer);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions in JavaScript\nDESCRIPTION: JavaScript implementation of a step definition that matches a Gherkin step and executes the corresponding test code.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/overview.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nWhen(\"{maker} starts a game\", function(maker) {\n  maker.startGameWithWord({ word: \"whale\" })\n})\n```\n\n----------------------------------------\n\nTITLE: Gherkin Data Table Example\nDESCRIPTION: Shows how to use Data Tables for passing structured tabular data.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_10\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven the following users exist:\n  | name   | email              | twitter         |\n  | Aslak  | aslak@cucumber.io  | @aslak_hellesoy |\n  | Julien | julien@cucumber.io | @jbpros         |\n  | Matt   | matt@cucumber.io   | @mattwynne      |\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeAll Hooks in Scala\nDESCRIPTION: BeforeAll hooks run once before any scenario is run. This snippet shows how to implement BeforeAll hooks in Scala.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_38\n\nLANGUAGE: scala\nCODE:\n```\nBeforeAll {\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions in Kotlin\nDESCRIPTION: Kotlin implementation of step definitions for the Friday checker feature. Uses Cucumber annotations and JUnit assertions for test validation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\npackage hellocucumber\n\nimport io.cucumber.java.en.Then\nimport io.cucumber.java.en.Given\nimport io.cucumber.java.en.When\nimport junit.framework.Assert.assertEquals\n\n\nfun isItFriday(today: String) = \"\"\n\n\nclass StepDefs {\n    private lateinit var today: String\n    private lateinit var actualAnswer: String\n\n    @Given(\"today is Sunday\")\n    fun today_is_Sunday() {\n        today = \"Sunday\"\n    }\n\n    @When(\"I ask whether it's Friday yet\")\n    fun i_ask_whether_it_s_Friday_yet() {\n        actualAnswer = isItFriday(today)\n    }\n\n    @Then(\"I should be told {string}\")\n    fun i_should_be_told(expectedAnswer: String) {\n        assertEquals(expectedAnswer, actualAnswer)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Step Definition with Annotation\nDESCRIPTION: A Java step definition using annotation syntax to match a Gherkin step with a parameterized cucumber expression.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\nimport io.cucumber.java.en.Given;\n\npublic class StepDefinitions {\n    @Given(\"I have {int} cukes in my belly\")\n    public void i_have_n_cukes_in_my_belly(int cukes) {\n        System.out.format(\"Cukes: %n\\n\", cukes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Step Definition with Data Table\nDESCRIPTION: Java implementation of a step definition that accepts a data table as a List<String>\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Given(\"the following animals:\")\npublic void the_following_animals(List<String> animals) {\n}\n```\n\n----------------------------------------\n\nTITLE: AfterAll Hook Implementation in Scala\nDESCRIPTION: Defines an AfterAll hook in Scala that runs after all scenarios have been executed.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_43\n\nLANGUAGE: scala\nCODE:\n```\nAfterAll {\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cucumber Project for Ruby\nDESCRIPTION: These shell commands create a new directory for a Ruby-based Cucumber project and initialize the Cucumber file structure.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmkdir hellocucumber\ncd hellocucumber\n```\n\n----------------------------------------\n\nTITLE: Java Step Definition with Lambda\nDESCRIPTION: A Java step definition using Java 8 lambda syntax to define a step that matches a Gherkin step with a parameterized cucumber expression.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\nimport io.cucumber.java8.En;\n\npublic class StepDefinitions implements En {\n    public StepDefinitions() {\n        Given(\"I have {int} cukes in my belly\", (Integer cukes) -> {\n            System.out.format(\"Cukes: %n\\n\", cukes);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cucumber Feature with Example Table\nDESCRIPTION: Gherkin feature file demonstrating scenario outline with examples table to test multiple cases for Friday detection\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_36\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Is it Friday yet?\n  Everybody wants to know when it's Friday\n\n  Scenario Outline: Today is or is not Friday\n    Given today is \"<day>\"\n    When I ask whether it's Friday yet\n    Then I should be told \"<answer>\"\n\n  Examples:\n    | day            | answer |\n    | Friday         | TGIF   |\n    | Sunday         | Nope   |\n    | anything else! | Nope   |\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeAll Hooks in Ruby\nDESCRIPTION: BeforeAll hooks run once before any scenario is run. This snippet shows how to implement BeforeAll hooks in Ruby.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nBeforeAll do\n  # Do something before any scenario is executed\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Cucumber Project with Maven for Java/Kotlin\nDESCRIPTION: This command uses the Maven archetype plugin to generate a new Cucumber project structure. It sets up the necessary directories and files for a basic Cucumber test suite.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn archetype:generate                      \\\n   \"-DarchetypeGroupId=io.cucumber\"           \\\n   \"-DarchetypeArtifactId=cucumber-archetype\" \\\n   \"-DarchetypeVersion={{% version \"cucumberjvm\" %}}\"               \\\n   \"-DgroupId=hellocucumber\"                  \\\n   \"-DartifactId=hellocucumber\"               \\\n   \"-Dpackage=hellocucumber\"                  \\\n   \"-Dversion=1.0.0-SNAPSHOT\"                 \\\n   \"-DinteractiveMode=false\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions in JavaScript\nDESCRIPTION: JavaScript implementation of Cucumber step definitions using Node.js assert module. Defines steps using Cucumber's Given, When, Then functions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst { Given, When, Then } = require('@cucumber/cucumber');\n\nfunction isItFriday(today) {\n  // We'll leave the implementation blank for now\n}\n\nGiven('today is Sunday', function () {\n  this.today = 'Sunday';\n});\n\nWhen('I ask whether it\\'s Friday yet', function () {\n  this.actualAnswer = isItFriday(this.today);\n});\n\nThen('I should be told {string}', function (expectedAnswer) {\n  assert.strictEqual(this.actualAnswer, expectedAnswer);\n});\n```\n\n----------------------------------------\n\nTITLE: Java Expression Example\nDESCRIPTION: A Java step definition demonstrating the use of a Cucumber Expression with a parameter type that transforms input to the correct type.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Given(\"I have {int} cukes in my belly\")\npublic void i_have_n_cukes_in_my_belly(int cukes) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeAll Hooks in JavaScript\nDESCRIPTION: BeforeAll hooks run once before any scenario is run. This snippet shows how to implement BeforeAll hooks in JavaScript.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BeforeAll } = require('@cucumber/cucumber');\n\nBeforeAll(async function () {\n  // perform some shared setup\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber via RubyGems\nDESCRIPTION: Command to install Cucumber directly using RubyGems package manager. This is the simplest installation method for standalone Ruby projects.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngem install cucumber\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition\nDESCRIPTION: A JavaScript implementation of a step definition using the Cucumber.js library to match a Gherkin step with parameters.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Given } = require('cucumber')\n\nGiven('I have {int} cukes in my belly', function (cukes) {\n  console.log(`Cukes: ${cukes}`)\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTableType in Java\nDESCRIPTION: Example of registering a custom Author data table type and using it in step definitions. Shows conversion of table entries to Author objects.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.java.DataTableType;\nimport io.cucumber.java.en.Given;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class StepDefinitions {\n\n    @DataTableType\n    public Author authorEntry(Map<String, String> entry) {\n        return new Author(\n            entry.get(\"firstName\"),\n            entry.get(\"lastName\"),\n            entry.get(\"famousBook\"));\n    }\n\n    @Given(\"There are my favorite authors\")\n    public void these_are_my_favourite_authors(List<Author> authors) {\n        // step implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Step Definition with Custom Parameter Type\nDESCRIPTION: A Java step definition snippet demonstrating how Cucumber uses custom parameter types like 'color' when generating suggestions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n@Given(\"I have {int} {color} balls\")\npublic void i_have_color_balls(int int1, Color color) {\n}\n```\n\n----------------------------------------\n\nTITLE: Java Data Table Collection Types\nDESCRIPTION: Example showing various collection types for handling data tables in Java step definitions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> table\nList<Map<String, String>> table\nMap<String, String> table\nMap<String, List<String>> table\nMap<String, Map<String, String>> table\n```\n\n----------------------------------------\n\nTITLE: Basic Gherkin Scenario Example\nDESCRIPTION: A simple Gherkin scenario demonstrating a step that will be matched with a step definition.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Some cukes\n  Given I have 48 cukes in my belly\n```\n\n----------------------------------------\n\nTITLE: Basic Cucumber Runner with JUnit in Java\nDESCRIPTION: A minimal Java test runner class that uses the Cucumber JUnit runner. This class executes all scenarios in the same package as the runner.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_67\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions()\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Scala Step Definition with Data Table\nDESCRIPTION: Scala implementation of a step definition that accepts a data table as a java.util.List[String]\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\nGiven(\"the following animals:\") { animals: java.util.List[String] =>\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Step Definition with Data Table\nDESCRIPTION: Kotlin implementation of a step definition that accepts a data table as a List<String>\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Given(\"the following animals:\")\nfun the_following_animals(animals: List<String>) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Hooks in Java\nDESCRIPTION: Before hooks run before the first step of each scenario. This snippet shows how to implement Before hooks in Java using both annotated method style and lambda style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void doSomethingBefore() {\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nBefore(() -> {\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Friday Check Logic in Ruby\nDESCRIPTION: This Ruby code snippet implements the logic to check if a given day is Friday and return the appropriate response.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\ndef is_it_friday(day)\n  if day == 'Friday'\n    'TGIF'\n  else\n    'Nope'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Ruby Selenium WebDriver Implementation\nDESCRIPTION: Ruby implementation of the Google search test scenario using Selenium WebDriver and Cucumber step definitions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\nrequire 'selenium-webdriver'\n\nGiven(/^I am on the Google search page$/) do\n  driver = Selenium::WebDriver.for :firefox\n  driver.get \"http://google.com\"\nend\n\nWhen(/^I search for \"([^\"]*)\"$/) do\n  element = driver.find_element(name: \"q\")\n  element.send_keys \"Cheese!\"\n  element.submit\nend\n\nThen(/^the page title should start with \"([^\"]*)\"$/) do\n  wait = Selenium::WebDriver::Wait.new(timeout: 10)\n  wait.until { driver.title.downcase.start_with? \"cheese!\" }\n  puts \"Page title is #{driver.title}\"\n    browser.close\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing JUnit Assertions in Cucumber Java Step Definitions\nDESCRIPTION: Java implementation of a Cucumber step definition using JUnit assertions. This example shows how to use the assertEquals method to verify expected results in a Then step.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/checking-assertions.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport static org.junit.Assert.*;\n\npublic class Example {\n\n    @Then(\"the result should be {int}\")\n    public void the_result_should_be(int expectedResult) {\n        assertEquals(expectedResult, result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing After Hooks in Java\nDESCRIPTION: After hooks run after the last step of each scenario, even when the step result is failed, undefined, pending, or skipped. This snippet shows how to implement After hooks in Java.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@After\npublic void doSomethingAfter(Scenario scenario){\n    // Do something after after scenario\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nAfter((Scenario scenario) -> {\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition for Friday in JavaScript\nDESCRIPTION: This JavaScript code snippet implements the step definition for setting the day to Friday in a Cucumber test.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nGiven('today is Friday', function () {\n  this.today = 'Friday';\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Friday Check Logic in Kotlin\nDESCRIPTION: This Kotlin code snippet implements the logic to check if a given day is Friday and return the appropriate response.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isItFriday(today: String) = if (today == \"Friday\") \"TGIF\" else \"Nope\"\n```\n\n----------------------------------------\n\nTITLE: Gherkin Step Example\nDESCRIPTION: Example of a Gherkin step with a numeric parameter\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven I have 93 cucumbers in my belly\n```\n\n----------------------------------------\n\nTITLE: Implementing After Hooks in JavaScript\nDESCRIPTION: After hooks run after the last step of each scenario, even when the step result is failed, undefined, pending, or skipped. This snippet shows how to implement After hooks in JavaScript.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nAfter(async function (scenario) {\n})\n```\n\n----------------------------------------\n\nTITLE: Using RSpec Expectations in Cucumber Ruby\nDESCRIPTION: Ruby implementation of a Cucumber step definition using RSpec expectations. This example shows how to use RSpec's expectation syntax for assertions in Cucumber steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/checking-assertions.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nGiven /^a nice new bike$/ do\n  expect(bike).to be_shiny\nend\n```\n\n----------------------------------------\n\nTITLE: Running Scenarios with Tags in Kotlin using JUnit\nDESCRIPTION: Shows how to configure a CucumberOptions runner class in Kotlin to only run scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_49\n\nLANGUAGE: kotlin\nCODE:\n```\n@CucumberOptions(tags = \"@smoke and @fast\")\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Gherkin And/But Alternative Syntax\nDESCRIPTION: Shows how to use And/But keywords to make multiple steps more readable.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_3\n\nLANGUAGE: gherkin\nCODE:\n```\nExample: Multiple Givens\n  Given one thing\n  And another thing\n  And yet another thing\n  When I open my eyes\n  Then I should see something\n  But I shouldn't see something else\n```\n\n----------------------------------------\n\nTITLE: Gherkin Background Feature Example\nDESCRIPTION: Complex example showing Background usage in a blog posting feature.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Multiple site support\n  Only blog owners can post to a blog, except administrators,\n  who can post to all blogs.\n\n  Background:\n    Given a global administrator named \"Greg\"\n    And a blog named \"Greg's anti-tax rants\"\n    And a customer named \"Dr. Bill\"\n    And a blog named \"Expensive Therapy\" owned by \"Dr. Bill\"\n\n  Scenario: Dr. Bill posts to his own blog\n    Given I am logged in as Dr. Bill\n    When I try to post to \"Expensive Therapy\"\n    Then I should see \"Your article was published.\"\n\n  Scenario: Dr. Bill tries to post to somebody else's blog, and fails\n    Given I am logged in as Dr. Bill\n    When I try to post to \"Greg's anti-tax rants\"\n    Then I should see \"Hey! That's not your blog!\"\n\n  Scenario: Greg posts to a client's blog\n    Given I am logged in as Greg\n    When I try to post to \"Expensive Therapy\"\n    Then I should see \"Your article was published.\"\n```\n\n----------------------------------------\n\nTITLE: Example User Story for Mobile Banking\nDESCRIPTION: A practical example of a user story for a mobile banking feature, following the standard user story format. It describes a customer's need to view account balances.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/terms/user-story.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAs an mobile bank customer\nI want to see balance on my accounts\nSo that I can make better informed decisions about my spending\n```\n\n----------------------------------------\n\nTITLE: Ignoring Scenarios with Tags in Scala using JUnit\nDESCRIPTION: Shows how to configure a CucumberOptions runner class in Scala to ignore scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_55\n\nLANGUAGE: scala\nCODE:\n```\n@CucumberOptions(tags = \"not @smoke\")\nclass RunCucumberTest {}\n```\n\n----------------------------------------\n\nTITLE: Gherkin Doc String Example\nDESCRIPTION: Demonstrates using Doc Strings for passing multiline text content.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_9\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven a blog post named \"Random\" with Markdown body\n  \"\"\"\n  Some Title, Eh?\n  ===============\n  Here is the first paragraph of my blog post. Lorem ipsum dolor sit amet,\n  consectetur adipiscing elit.\n  \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Chai Assertions in Cucumber JavaScript\nDESCRIPTION: JavaScript implementation of a Cucumber step definition using the Chai assertion library. This example demonstrates how to use Chai's expect syntax for more expressive assertions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/checking-assertions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require('chai')\n\nThen('the result should be {word}', function (expected) {\n  expect(this.actual).to.eql(expected)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic User Story Format in Plain Text\nDESCRIPTION: The standard format for writing user stories that captures the who, what, and why aspects. It follows the 'As an actor, I want a feature, So that benefit' structure.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/terms/user-story.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAs an <actor>\nI want a <feature>\nSo that <benefit>\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Custom Object Factory in Kotlin\nDESCRIPTION: Kotlin test runner configured to use a custom object factory. This is useful when integrating Cucumber with dependency injection frameworks.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_86\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber.class)\n@CucumberOptions(objectFactory = FooFactory.class)\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Example of Tagged Feature in Gherkin\nDESCRIPTION: Shows how to add tags to a Gherkin feature file. Tags can be used to organize features and scenarios and to control which scenarios are run.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_45\n\nLANGUAGE: gherkin\nCODE:\n```\n@billing\nFeature: Verify billing\n\n  @important\n  Scenario: Missing product description\n    Given hello\n\n  Scenario: Several products\n    Given hello\n```\n\n----------------------------------------\n\nTITLE: Cucumber Profile Configuration in YAML\nDESCRIPTION: YAML configuration for setting up Cucumber profiles with different output formats and tag filters\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n## ##YAML Template\nhtml_report: --format progress --format html --out=features_report.html\nbvt: --tags @bvt\n```\n\n----------------------------------------\n\nTITLE: Mobile Banking Acceptance Criteria Example in Gherkin\nDESCRIPTION: A practical example of acceptance criteria for mobile banking using Gherkin syntax. It includes scenarios for both logged-out and logged-in states, testing visibility of account balances.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/terms/user-story.md#2025-04-09_snippet_3\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Some important feature\n\n  Scenario: Do not show balance if not logged in\n    Given I am not logged on to the mobile banking app\n    When I open the mobile banking app\n    Then I can see a login page\n    And I do not see account balance\n\n  Scenario: Show balance on the accounts page after logging in\n    Given I have just logged on to the mobile banking app\n    When I load the accounts page\n    Then I can see account balance for each of my accounts\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition for Friday in Kotlin\nDESCRIPTION: This Kotlin code snippet implements the step definition for setting the day to Friday in a Cucumber test.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\n@Given(\"today is Friday\")\nfun today_is_Friday() {\n    today = \"Friday\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Tagged Examples in Scenario Outline\nDESCRIPTION: Shows how to add tags to specific Examples blocks in a Scenario Outline to run examples conditionally based on tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_47\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario Outline: Steps will run conditionally if tagged\n  Given user is logged in\n  When user clicks <link>\n  Then user will be logged out\n\n  @mobile\n  Examples:\n    | link                  |\n    | logout link on mobile |\n\n  @desktop\n  Examples:\n    | link                   |\n    | logout link on desktop |\n```\n\n----------------------------------------\n\nTITLE: Implementing Debugging Support in Ruby for Cucumber Tests\nDESCRIPTION: A comprehensive Ruby implementation for debugging Cucumber steps, featuring screenshot capture, step pausing, error handling, and integration with Rails logging. This code creates hooks for various debugging scenarios, controlled through environment variables like DEBUG, STEP, LAUNCHY, and FAST.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/debugging.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# rubocop:disable Lint/Debugger\nclass CucumberCounters\n  @error_counter = 0\n  @step_counter = 0\n  @screenshot_counter = 0\n  class << self\n    attr_accessor :error_counter, :step_counter, :screenshot_counter\n  end\nend\n\n# `LAUNCHY=1 cucumber` to open save screenshot after every step\nAfter do |scenario|\n  next unless (ENV['LAUNCHY'] || ENV['CI']) && scenario.failed?\n  puts \"Opening snapshot for #{scenario.name}\"\n  begin\n    save_and_open_screenshot\n  rescue StandardError\n    puts \"Can't save screenshot\"\n  end\n  begin\n    save_and_open_page\n  rescue StandardError\n    puts \"Can't save page\"\n  end\nend\n\n# `FAST=1 cucumber` to stop on first failure\nAfter do |scenario|\n  Cucumber.wants_to_quit = ENV['FAST'] && scenario.failed?\nend\n\n# `DEBUG=1 cucumber` to drop into debugger on failure\nCucumber::Core::Test::Action.class_eval do\n  ## first make sure we don't lose original accept method\n  unless instance_methods.include?(:orig_failed)\n    alias_method :orig_failed, :failed\n  end\n\n  ## wrap original accept method to catch errors in executed step\n  def failed(*args)\n    begin\n      CucumberCounters.error_counter += 1\n      file_name = format('tmp/capybara/error_%03d.png',\n                         CucumberCounters.error_counter)\n      Capybara.page.save_screenshot(file_name, full: true)\n    rescue\n      Rails.logger.info('[Cucumber] Can not make screenshot of failure')\n    end\n    binding.pry if ENV['DEBUG']\n    orig_failed(*args)\n  end\nend\n\n# Store the current scenario name as an instance variable, to make it\n# available to the other hooks.\nBefore do |scenario|\n  case scenario\n  when Cucumber::Ast::Scenario\n    @scenario_name = scenario.name\n  when Cucumber::Ast::OutlineTable::ExampleRow\n    @scenario_name = scenario.scenario_outline.name\n  end\n  Rails.logger.info(\"[Cucumber] starting the #{@scenario_name}\")\nend\n\n# `STEP=1 cucumber` to pause after each step\nAfterStep do |scenario|\n  next unless ENV['STEP']\n  unless defined?(@counter)\n    puts \"Stepping through #{@scenario_name}\"\n    @counter = 0\n  end\n  @counter += 1\n  print \"After step ##{@counter}/#{scenario.send(:steps).try(:count)}: \"\\\n        \"#{scenario.send(:steps).to_a[@counter].try(:name) ||\n        '[RETURN to continue]'}...\"\n  STDIN.getc\nend\n\nAfterStep do |scenario|\n  CucumberCounters.step_counter += 1\n  step = CucumberCounters.step_counter\n  file_name = format('tmp/capybara/step_%03d.png', step)\n  Rails.logger.info(\"[Cucumber] after step: #{@scenario_name}, step: #{step}\")\n  next unless scenario.source_tag_names.include?('@intermittent')\n  begin\n    Capybara.page.save_screenshot(file_name, full: true)\n    Rails.logger.info(\"[Cucumber] Screenshot #{step} saved\")\n  rescue\n    Rails.logger.info(\"[Cucumber] Can not make screenshot of #{step}\")\n  end\nend\n\nAfterStep do\n  begin\n    execute_script \"$(window).unbind('beforeunload')\"\n  rescue => e\n    Rails.logger.error(\"An error was encountered and rescued\")\n    Rails.logger.error(e.backtrace)\n  end\nend\n\ndef dismiss_nav_warning\n  execute_script \"$(window).unbind('beforeunload')\"\n  wait_until_jquery_inactive\nend\n\ndef wait_until_jquery_inactive\n  Capybara.using_wait_time(Capybara.default_max_wait_time) do\n    page.evaluate_script('jQuery.active').zero?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeAll Hooks in Java\nDESCRIPTION: BeforeAll hooks run once before any scenario is run. This snippet shows how to implement BeforeAll hooks in Java using annotated method style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_36\n\nLANGUAGE: java\nCODE:\n```\n@BeforeAll\npublic static void beforeAll() {\n    // Runs before all scenarios\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tags for Development Process Tracking in Gherkin\nDESCRIPTION: Shows how to use tags to track the development process status of a feature.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_59\n\nLANGUAGE: gherkin\nCODE:\n```\n@qa_ready\nFeature: Index projects\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots on Failure with Capybara in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to capture a screenshot using Capybara when a Cucumber scenario fails and attach it to the Cucumber report.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# Available scenario methods: #failed?, #passed?, and #exception\nif scenario.failed?\n  path = \"html-report/#{scenario.__id__}.html\"\n  page.driver.browser.save_screenshot(path)\n  attach(path, \"image/png\")\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeAll Hooks in Kotlin\nDESCRIPTION: BeforeAll hooks run once before any scenario is run. This snippet shows how to implement BeforeAll hooks in Kotlin.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nBeforeAll {\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Profiles with Environment Variables in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up Cucumber profiles with environment variables. It includes profiles for default execution, HTML reporting, BVT (Build Verification Test), and browser-specific settings.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n1. config/cucumber.yml\n   ##YAML Template\n2. ## ie profile executes the browser features with Internet Explorer\n   default: --profile html_report --profile bvt\n   html_report: --format progress --format html --out=features_report.html\n   bvt: --tags @bvt\n   ie: BROWSER=IE\n```\n\n----------------------------------------\n\nTITLE: Implementing After Hooks in Scala\nDESCRIPTION: After hooks run after the last step of each scenario, even when the step result is failed, undefined, pending, or skipped. This snippet shows how to implement After hooks in Scala.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_16\n\nLANGUAGE: scala\nCODE:\n```\nAfter { scenario: Scenario =>\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber with Custom Formatter in Ruby\nDESCRIPTION: Command to run Cucumber with a custom formatter class defined in the features/support directory. The formatter must be specified with the --format flag followed by the formatter's fully qualified class name.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/reporting.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncucumber --format MyModule::CustomFormatter\n```\n\n----------------------------------------\n\nTITLE: Defining Cucumber Scenarios in Gherkin\nDESCRIPTION: This snippet defines two scenarios in Gherkin syntax to test the 'Is it Friday yet?' feature. It includes tests for both Sunday and Friday.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_27\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Is it Friday yet?\n  Everybody wants to know when it's Friday\n\n  Scenario: Sunday isn't Friday\n    Given today is Sunday\n    When I ask whether it's Friday yet\n    Then I should be told \"Nope\"\n\n  Scenario: Friday is Friday\n    Given today is Friday\n    When I ask whether it's Friday yet\n    Then I should be told \"TGIF\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Cucumber Profile for Ruby\nDESCRIPTION: This YAML snippet demonstrates how to set up a Cucumber profile that runs a specific tag and sets an environment variable. It creates a profile named 'baz' that runs tests with the '@mytag' tag and sets the 'FOO' environment variable to 'BAR'.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nbaz: --tags @mytag FOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Implementing After Hooks in Ruby\nDESCRIPTION: After hooks run after the last step of each scenario, even when the step result is failed, undefined, pending, or skipped. This snippet shows how to implement After hooks in Ruby.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nAfter do |scenario|\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nAfter do |s|\n  # Tell Cucumber to quit after this scenario is done - if it failed.\n  Cucumber.wants_to_quit = true if s.failed?\nend\n```\n\n----------------------------------------\n\nTITLE: Running Scenarios with Tags in Java, Kotlin, Scala using JUnit\nDESCRIPTION: Shows how to configure a CucumberOptions runner class to only run scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_48\n\nLANGUAGE: java\nCODE:\n```\n@CucumberOptions(tags = \"@smoke and @fast\")\npublic class RunCucumberTest {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Hooks in Kotlin\nDESCRIPTION: Before hooks run before the first step of each scenario. This snippet shows how to implement Before hooks in Kotlin using lambda style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nBefore { scenario: Scenario ->\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Cucumber Tests in Parallel via CLI in Kotlin\nDESCRIPTION: Command to execute Cucumber tests in parallel using the CLI with Kotlin, specifying the thread count, step definition package, and required Kotlin libraries.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\njava -cp .;<path to cucumber jar folder>/*;<path to kotlin lib folder>/* io.cucumber.core.cli.Main --threads 4 -g parallel parallel\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterStep Hooks in Java\nDESCRIPTION: AfterStep hooks are invoked after a step. This snippet shows how to implement AfterStep hooks in Java using both annotated method style and lambda style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n@AfterStep\npublic void doSomethingAfterStep(Scenario scenario){\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nAfterStep((Scenario scenario) -> {\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Parallel TestNG Runner in Kotlin\nDESCRIPTION: Kotlin implementation of a TestNG runner class that extends AbstractTestNGCucumberTests and enables parallel test execution by overriding the scenarios method and setting the DataProvider parallel option to true.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage parallel\n\nimport org.testng.annotations.DataProvider;\nimport io.cucumber.testng.AbstractTestNGCucumberTests;\n\nclass RunCucumberTest : AbstractTestNGCucumberTests() {\n\t\n\t@DataProvider(parallel = true)\n\toverride fun scenarios(): Array<Array<(Any)>>  {\n\t\treturn super.scenarios()\n\t}\t\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions in Ruby\nDESCRIPTION: Ruby implementation of step definitions using Cucumber's Given/When/Then syntax and RSpec expectations for assertions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nmodule FridayStepHelper\n  def is_it_friday(day)\n  end\nend\nWorld FridayStepHelper\n\nGiven(\"today is Sunday\") do\n  @today = 'Sunday'\nend\n\nWhen(\"I ask whether it's Friday yet\") do\n  @actual_answer = is_it_friday(@today)\nend\n\nThen(\"I should be told {string}\") do |expected_answer|\n  expect(@actual_answer).to eq(expected_answer)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Object Factory for Cucumber in Java\nDESCRIPTION: Custom implementation of Cucumber's ObjectFactory interface. This factory creates a custom Guice injector with application-specific bindings and manages the scenario scope.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.app;\n\nimport io.cucumber.core.backend.ObjectFactory;\nimport io.cucumber.guice.CucumberModules;\nimport io.cucumber.guice.ScenarioScope;\nimport com.example.app.service.impl.ServiceModule;\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.Stage;\n\npublic final class CustomObjectFactory implements ObjectFactory {\n\n    private Injector injector;\n\n    public CustomObjectFactory() {\n        // Create an injector with our service module\n        this.injector =\n          Guice.createInjector( Stage.PRODUCTION, CucumberModules.createScenarioModule(), new ServiceModule());\n    }\n\n    @Override\n    public boolean addClass( Class< ? > clazz ) {\n        return true;\n    }\n\n    @Override\n    public void start() {\n        this.injector.getInstance( ScenarioScope.class ).enterScope();\n    }\n\n    @Override\n    public void stop() {\n        this.injector.getInstance( ScenarioScope.class ).exitScope();\n    }\n\n    @Override\n    public < T > T getInstance( Class< T > clazz ) {\n        return this.injector.getInstance( clazz );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterStep Hooks in Kotlin\nDESCRIPTION: AfterStep hooks are invoked after a step. This snippet shows how to implement AfterStep hooks in Kotlin using lambda style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nAfterStep { scenario: Scenario ->\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Cucumber Rails generator help\nDESCRIPTION: Command to display available options for the Cucumber Rails generator. This shows all available configuration options before running the installation generator.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrails generate cucumber:install --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Dependencies in Gradle (5.0 or newer)\nDESCRIPTION: This Gradle script snippet shows how to add Cucumber dependencies for Java and JUnit to a Gradle project using version 5.0 or newer. It uses the testImplementation configuration and specifies the Maven Central repository.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/java.md#2025-04-09_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    testImplementation 'io.cucumber:cucumber-java:{{% version \"cucumberjvm\" %}}'\n    testImplementation 'io.cucumber:cucumber-junit:{{% version \"cucumberjvm\" %}}'\n}\n\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Default Type Transformers in Java\nDESCRIPTION: Implementation of default transformers using Jackson ObjectMapper for handling anonymous types in Java.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.cucumber.java.DefaultDataTableCellTransformer;\nimport io.cucumber.java.DefaultDataTableEntryTransformer;\nimport io.cucumber.java.DefaultParameterTransformer;\n\nimport java.lang.reflect.Type;\n\npublic class StepDefinitions {\n\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    @DefaultParameterTransformer\n    @DefaultDataTableEntryTransformer\n    @DefaultDataTableCellTransformer\n    public Object transformer(Object fromValue, Type toValueType) {\n        return objectMapper.convertValue(fromValue, objectMapper.constructType(toValueType));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterStep Hooks in JavaScript\nDESCRIPTION: AfterStep hooks are invoked after a step. This snippet shows how to implement AfterStep hooks in JavaScript.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nAfterStep(async function({pickle, pickleStep, gherkinDocument, result, testCaseStartedId, testStepId}) {\n    // doSomething\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Hooks in Ruby\nDESCRIPTION: Before hooks run before the first step of each scenario. This snippet shows how to implement Before hooks in Ruby.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nBefore do\n  # Do something before each scenario\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Dependencies in Gradle (4.10.3 or older)\nDESCRIPTION: This Gradle script snippet demonstrates how to add Cucumber dependencies for Java and JUnit to a Gradle project using version 4.10.3 or older. It also specifies the Maven Central repository.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/java.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    testCompile 'io.cucumber:cucumber-java:{{% version \"cucumberjvm\" %}}'\n    testCompile 'io.cucumber:cucumber-junit:{{% version \"cucumberjvm\" %}}'\n}\n\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Step Definition Implementation - Kotlin\nDESCRIPTION: Kotlin implementation of the CV editing step definition showing employee creation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Given(\"I have a CV and I'm on the edit description page\")\nfun I_have_a_CV_and_Im_on_the_edit_description_page() {\n    val employee = Employee(\"Sally\")\n    employee.createCV()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional After Hooks with Tag Expressions in Kotlin\nDESCRIPTION: Hooks can be conditionally selected for execution based on the tags of the scenario. This snippet shows how to implement conditional After hooks in Kotlin using tag expressions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nAfter (arrayOf(\"@browser and not @headless\")) { scenario: Scenario ->\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kotlin Step Definitions\nDESCRIPTION: Kotlin implementation of step definitions using variables and string comparison for Friday detection\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\npackage hellocucumber\n\nimport io.cucumber.java.en.Then\nimport io.cucumber.java.en.Given\nimport io.cucumber.java.en.When\nimport static org.junit.jupiter.api.Assertions.assertEquals\n\nfun isItFriday(today: String) = if (today == \"Friday\") \"TGIF\" else \"Nope\"\n\n\nclass StepDefs {\n    private lateinit var today: String\n    private lateinit var actualAnswer: String\n\n    @Given(\"today is {string}\")\n    fun today_is(today: String) {\n        this.today = today\n    }\n\n    @When(\"I ask whether it's Friday yet\")\n    fun i_ask_whether_it_s_Friday_yet() {\n        actualAnswer = isItFriday(today)\n    }\n\n    @Then(\"I should be told {string}\")\n    fun i_should_be_told(expectedAnswer: String) {\n        assertEquals(expectedAnswer, actualAnswer)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven POM for Kotlin Cucumber Project\nDESCRIPTION: This XML configuration sets up the necessary dependencies and build plugins for a Kotlin-based Cucumber project. It includes Cucumber, JUnit, and Kotlin dependencies, as well as Maven plugins for compilation and testing.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>hellocucumber</groupId>\n    <artifactId>hellocucumber</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <kotlin.version>1.8.10</kotlin.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>io.cucumber</groupId>\n                <artifactId>cucumber-bom</artifactId>\n                <version>7.11.2</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.junit</groupId>\n                <artifactId>junit-bom</artifactId>\n                <version>5.9.2</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>io.cucumber</groupId>\n            <artifactId>cucumber-java</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.cucumber</groupId>\n            <artifactId>cucumber-junit-platform-engine</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-suite</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-stdlib-jdk8</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-test</artifactId>\n            <version>${kotlin.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>3.0.0</version>\n            </plugin>\n            <plugin>\n                <groupId>org.jetbrains.kotlin</groupId>\n                <artifactId>kotlin-maven-plugin</artifactId>\n                <version>${kotlin.version}</version>\n                <executions>\n                    <execution>\n                        <id>compile</id>\n                        <phase>compile</phase>\n                        <goals>\n                            <goal>compile</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>test-compile</id>\n                        <phase>test-compile</phase>\n                        <goals>\n                            <goal>test-compile</goal>\n                        </goals>\n                        <configuration>\n                            <sourceDirs>\n                                <source>src/test/java</source>\n                                <source>src/test/kotlin</source>\n                            </sourceDirs>\n                        </configuration>\n                    </execution>\n                </executions>\n                <configuration>\n                    <jvmTarget>1.8</jvmTarget>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <executions>\n                    <execution>\n                        <id>compile</id>\n                        <phase>compile</phase>\n                        <goals>\n                            <goal>compile</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>testCompile</id>\n                        <phase>test-compile</phase>\n                        <goals>\n                            <goal>testCompile</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <encoding>UTF-8</encoding>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Gherkin Multiple Given Steps Example\nDESCRIPTION: Demonstrates how to write multiple Given steps using traditional repetitive syntax.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nExample: Multiple Givens\n  Given one thing\n  Given another thing\n  Given yet another thing\n  When I open my eyes\n  Then I should see something\n  Then I shouldn't see something else\n```\n\n----------------------------------------\n\nTITLE: AfterAll Hook Implementation in Ruby\nDESCRIPTION: Defines an AfterAll hook in Ruby that runs after all scenarios have been executed. Used for teardown or cleanup operations.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nAfterAll do\n  # Do something after all scenarios have been executed\nend\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with HTML Reporting in Kotlin\nDESCRIPTION: Kotlin test runner configured with pretty and HTML formatter plugins. This configuration generates formatted console output and an HTML report in the target directory.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_71\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber.class)\n@CucumberOptions(plugin = {\"pretty\", \"html:target/cucumber.html\"})\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Adding Cucumber JUnit Dependencies with Maven\nDESCRIPTION: XML configuration for adding the cucumber-junit dependency to a Maven project. This adds JUnit 4 support for running Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_66\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  [...]\n    <dependency>\n        <groupId>io.cucumber</groupId>\n        <artifactId>cucumber-junit</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n    </dependency>\n  [...]\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Writing Gherkin Scenarios in Norwegian\nDESCRIPTION: Example of a Gherkin feature file written in Norwegian (no) that demonstrates a word guessing game scenario. Shows proper syntax for language header and scenario structure in a non-English language.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_11\n\nLANGUAGE: gherkin\nCODE:\n```\n# language: no\nFunksjonalitet: Gjett et ord\n\n  Eksempel: Ordmaker starter et spill\n    Når Ordmaker starter et spill\n    Så må Ordmaker vente på at Gjetter blir med\n\n  Eksempel: Gjetter blir med\n    Gitt at Ordmaker har startet et spill med ordet \"bløtt\"\n    Når Gjetter blir med på Ordmakers spill\n    Så må Gjetter gjette et ord på 5 bokstaver\n```\n\n----------------------------------------\n\nTITLE: AfterAll Hook Implementation in Kotlin\nDESCRIPTION: Defines an AfterAll hook in Kotlin that runs after all scenarios have been executed.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nAfterAll {\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cucumber Runner in Java\nDESCRIPTION: Java test runner class using JUnit to execute Cucumber tests\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage parallel;\n\nimport io.cucumber.junit.Cucumber;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Step Definition\nDESCRIPTION: A Kotlin implementation of a step definition using the Java8 interface pattern to match a Gherkin step with parameters.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\nimport io.cucumber.java8.En\n\nclass StepDefinitions : En {\n\n    init {\n        Given(\"I have {int} cukes in my belly\") { cukes: Int ->\n                println(\"Cukes: $cukes\")\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Surefire Plugin Configuration\nDESCRIPTION: Maven Surefire plugin configuration for parallel test execution with unlimited threads\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.22.0</version>\n\t<configuration>\n\t\t<parallel>methods</parallel>\n\t\t<useUnlimitedThreads>true</useUnlimitedThreads>\n\t</configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Running Scenarios with Tags in Ruby CLI\nDESCRIPTION: Shows how to use the Ruby CLI to run only scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\n# You can omit the quotes if the expression is a single tag\ncucumber --tags \"@smoke and @fast\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Ruby Step Definitions\nDESCRIPTION: Ruby implementation of step definitions using module helpers and RSpec expectations\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nmodule FridayStepHelper\n  def is_it_friday(day)\n    if day == 'Friday'\n      'TGIF'\n    else\n      'Nope'\n    end  \n  end\nend\n\nWorld FridayStepHelper\n\nGiven(\"today is {string}\") do |given_day|\n  @today = given_day\nend\n\nWhen(\"I ask whether it's Friday yet\") do\n  @actual_answer = is_it_friday(@today)\nend\n\nThen(\"I should be told {string}\") do |expected_answer|\n  expect(@actual_answer).to eq(expected_answer)\nend\n```\n\n----------------------------------------\n\nTITLE: Ruby Step Definition\nDESCRIPTION: A Ruby implementation of a step definition that matches a Gherkin step with an integer parameter.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nGiven('I have {int} cukes in my belly') do |cukes|\n  puts \"Cukes: #{cukes}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Dependency for Gradle\nDESCRIPTION: Shows how to add the Spring dependency to a Gradle project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\ncompile group: 'io.cucumber', name: 'cucumber-spring', version: '{{% version \"cucumberjvm\" %}}'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Scenarios with Tags in Java using JUnit\nDESCRIPTION: Shows how to configure a CucumberOptions runner class to ignore scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_53\n\nLANGUAGE: java\nCODE:\n```\n@CucumberOptions(tags = \"not @smoke\")\npublic class RunCucumberTest {}\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeStep Hooks in JavaScript\nDESCRIPTION: BeforeStep hooks are invoked before a step. This snippet shows how to implement BeforeStep hooks in JavaScript, including how to target specific scenarios with tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nBeforeStep(async function({pickle, pickleStep, gherkinDocument, testCaseStartedId, testStepId}) {\n    // doSomething\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBeforeStep({tags: \"@foo\"}, async function() {\n    // apply this hook to only specific scenarios\n})\n```\n\n----------------------------------------\n\nTITLE: Adding OpenEJB Dependency for Gradle\nDESCRIPTION: Shows how to add the OpenEJB dependency to a Gradle project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_9\n\nLANGUAGE: gradle\nCODE:\n```\ncompile group: 'io.cucumber', name: 'cucumber-openejb', version: '{{% version \"cucumberjvm\" %}}'\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Cucumber Feature Test\nDESCRIPTION: Command to run a specific feature test in Ruby Cucumber by requiring the features directory and specifying the feature file path\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\ncucumber --require features features/authentication/authenticate_user.feature\n```\n\n----------------------------------------\n\nTITLE: Scala Step Definition\nDESCRIPTION: A Scala implementation of a step definition using traits to match a Gherkin step with parameters.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example\nimport io.cucumber.scala.{ScalaDsl, EN}\n\nclass StepDefinitions extends ScalaDsl with EN {\n\n    Given(\"I have {int} cukes in my belly\") { cukes: Int =>\n        println(s\"Cukes: $cukes\")\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeStep Hooks in Kotlin\nDESCRIPTION: BeforeStep hooks are invoked before a step. This snippet shows how to implement BeforeStep hooks in Kotlin using lambda style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nBeforeStep { scenario: Scenario ->\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber-Scala with Maven\nDESCRIPTION: Maven dependency configuration for adding Cucumber-Scala to a project. The scope is set to 'test' as Cucumber is typically used for testing.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/scala.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-scala_2.13</artifactId>\n    <version>{{% version \"cucumberscala\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber with Maven Exec Plugin\nDESCRIPTION: Maven command to execute Cucumber tests using the Exec Maven plugin with test classpath and glue code configuration\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_64\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java                                  \\\n    -Dexec.classpathScope=test                 \\\n    -Dexec.mainClass=io.cucumber.core.cli.Main \\\n    -Dexec.args=\"/path/to/your/feature/files --glue hellocucumber --glue anotherpackage\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Hooks in Scala\nDESCRIPTION: Before hooks run before the first step of each scenario. This snippet shows how to implement Before hooks in Scala.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_8\n\nLANGUAGE: scala\nCODE:\n```\nBefore { scenario: Scenario =>\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Gherkin Shopping List with And Keywords\nDESCRIPTION: Example showing shopping list scenario using And keywords.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: All done\n  Given I am out shopping\n  And I have eggs\n  And I have milk\n  And I have butter\n  When I check my list\n  Then I don't need anything\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Rails generator\nDESCRIPTION: Command to run the Cucumber Rails generator which sets up Cucumber in a Rails project. This configures Cucumber to work with Rails, creating necessary support files and directories.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrails generate cucumber:install\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Cucumber\nDESCRIPTION: Command to run Cucumber.js tests using the local node_modules installation\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\n$ ./node_modules/.bin/cucumber.js\n```\n\n----------------------------------------\n\nTITLE: JavaScript Expression Example with RegEx\nDESCRIPTION: A JavaScript step definition using a regular expression with Cucumber Expression parameter types.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nGiven(/I have {int} cukes in my belly/, function (cukes) {\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber-Scala with Sbt\nDESCRIPTION: Sbt dependency configuration for adding Cucumber-Scala to a Scala project. The dependency is added with Test scope as Cucumber is typically used for testing.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/scala.md#2025-04-09_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\nlibraryDependencies += \"io.cucumber\" %% \"cucumber-scala\" % \"{{% version \"cucumberscala\" %}}\" % Test\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for JavaScript Cucumber Project\nDESCRIPTION: This JSON configuration in package.json sets up the test script to run Cucumber tests. It specifies Cucumber as a development dependency for the project.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hellocucumber\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"cucumber-js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"cucumber\": \"^{{% version \"cucumberjs\" %}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cucumber Runner with JUnit in Kotlin\nDESCRIPTION: A minimal Kotlin test runner class that uses the Cucumber JUnit runner. This class executes all scenarios in the same package as the runner.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_68\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber::class)\n@CucumberOptions()\nclass RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Step Definitions\nDESCRIPTION: JavaScript implementation of step definitions using Cucumber.js with string comparison and assertions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst { Given, When, Then } = require('@cucumber/cucumber');\n\nfunction isItFriday(today) {\n  if (today === \"Friday\") {\n    return \"TGIF\";\n  } else {\n    return \"Nope\";\n  }\n}\n\nGiven('today is {string}', function (givenDay) {\n  this.today = givenDay;\n});\n\nWhen('I ask whether it\\'s Friday yet', function () {\n  this.actualAnswer = isItFriday(this.today);\n});\n\nThen('I should be told {string}', function (expectedAnswer) {\n  assert.strictEqual(this.actualAnswer, expectedAnswer);\n});\n```\n\n----------------------------------------\n\nTITLE: Kotlin Step Definitions Template\nDESCRIPTION: Example of Kotlin step definition class showing the basic structure with pending implementations.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\npackage hellocucumber\n\nimport io.cucumber.java.PendingException\nimport io.cucumber.java.en.Given\nimport io.cucumber.java.en.When\nimport io.cucumber.java.en.Then\nimport org.junit.Assert.*\n\nclass StepDefs {\n    @Given(\"today is Sunday\")\n    @Throws(Exception::class)\n    fun today_is_Sunday() {\n        // Write code here that turns the phrase above into concrete actions\n        throw PendingException()\n    }\n\n    @When(\"I ask whether it's Friday yet\")\n    @Throws(Exception::class)\n    fun i_ask_whether_it_s_Friday_yet() {\n        // Write code here that turns the phrase above into concrete actions\n        throw PendingException()\n    }\n\n    @Then(\"I should be told {string}\")\n    @Throws(Exception::class)\n    fun i_should_be_told(arg1: String) {\n        // Write code here that turns the phrase above into concrete actions\n        throw PendingException()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Tests for JavaScript\nDESCRIPTION: This command runs Cucumber tests for a JavaScript project using NPM.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n# Run via NPM\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Basic Cucumber Runner with JUnit in Scala\nDESCRIPTION: A minimal Scala test runner class that uses the Cucumber JUnit runner. This class executes all scenarios in the same package as the runner.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_69\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(classOf[Cucumber])\n@CucumberOptions()\nclass RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RSpec Mocks in Ruby Cucumber Tests\nDESCRIPTION: Demonstrates how to use RSpec mocks within Cucumber tests using the cucumber/rspec/doubles library. The example shows stubbing a SmartyStreets API response within a temporary scope.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/mocking-and-stubbing-with-cucumber.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'cucumber/rspec/doubles'\n\nRSpec::Mocks.with_temporary_scope do\nstub_resp = {\"city\"=>\"San Francisco\", \"state_abbreviation\"=>\"CA\", \"state\"=>\"California\", \"mailable_city\"=>true}\nSmartyStreets.stub(:get_city_state).with(\"94109\").and_return(stub_resp)\n\nclick_button \"check zip\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions in Java\nDESCRIPTION: Java step definition class that implements the steps defined in feature files with thread ID logging\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage parallel;\n\nimport io.cucumber.java.BeforeStep;\nimport io.cucumber.java.en.Given;\n\npublic class StepDefs {\n\n\t@Given(\"Step from {string} in {string} feature file\")\n\tpublic void step(String scenario, String file) {\n\t\tSystem.out.format(\"Thread ID - %2d - %s from %s feature file.\\n\",\n\t\tThread.currentThread().getId(), scenario,file);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with HTML Reporting in Java\nDESCRIPTION: Java test runner configured with pretty and HTML formatter plugins. This configuration generates formatted console output and an HTML report in the target directory.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_70\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(plugin = {\"pretty\", \"html:target/cucumber.html\"})\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots on Failure with WebDriver in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to capture a screenshot using WebDriver when a Cucumber scenario fails and attach it to the Cucumber report.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nAfter(function (scenario) {\n    if (scenario.result.status === Status.FAILED) {\n        var world = this;\n        return webDriver.takeScreenshot().then(function(screenShot, error) {\n            if (!error) {\n                world.attach(screenShot, \"image/png\");\n            }\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Test Runner in Kotlin\nDESCRIPTION: This Kotlin class sets up the Cucumber test runner with JUnit 5. It configures the test engine, selects the classpath resource, and sets the output format for test results.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage hellocucumber\n\nimport io.cucumber.junit.platform.engine.Constants\nimport org.junit.platform.suite.api.ConfigurationParameter\nimport org.junit.platform.suite.api.IncludeEngines\nimport org.junit.platform.suite.api.SelectClasspathResource\nimport org.junit.platform.suite.api.Suite\n\n@Suite\n@IncludeEngines(\"cucumber\")\n@SelectClasspathResource(\"hellocucumber\")\n@ConfigurationParameter(key = Constants.PLUGIN_PROPERTY_NAME, value = \"pretty\")\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Summary Plugin and Camelcase Snippets in Java\nDESCRIPTION: Java test runner configured to use pretty and summary plugins with camelcase snippet style. This helps generate code snippets for missing step definitions in camelCase format.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_73\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(plugin = {\"pretty\", \"summary\"}, snippets = SnippetType.CAMELCASE)\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modules in World Object in Ruby\nDESCRIPTION: Shows how to include additional modules in the World object to extend functionality without polluting the global Object.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyHelper\n  def some_other_helper\n    ...\n  end\nend\n\nmodule MyOtherHelpers\n  def helper_b\n    ...\n  end\nend\n\nWorld(MyHelper, MyOtherHelpers)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cucumber Runner in Kotlin\nDESCRIPTION: Kotlin test runner class using JUnit to execute Cucumber tests\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage parallel\n\nimport io.cucumber.junit.Cucumber\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber::class)\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Monochrome Output in Java\nDESCRIPTION: Java test runner configured to use monochrome output formatting. This makes console output more readable by removing ANSI colors and applying consistent formatting.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_79\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(monochrome=true)\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ParameterType in Java\nDESCRIPTION: Example of custom Book parameter type registration and usage in step definitions using Java.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.java.ParameterType;\nimport io.cucumber.java.en.Given;\n\npublic class StepDefinitions {\n\n    @ParameterType(\".*\")\n    public Book book(String bookName) {\n    \treturn new Book(bookName);\n    }\t\n\n    @Given(\"{book} is my favorite book\")\n    public void this_is_my_favorite_book(Book book) {\n        // step implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Before Hooks with Tag Expressions in JavaScript\nDESCRIPTION: Hooks can be conditionally selected for execution based on the tags of the scenario. This snippet shows how to implement conditional Before hooks in JavaScript using tag expressions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nBefore({tags: '@browser and not @headless'}, async function () {\n})\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Monochrome Output in Scala\nDESCRIPTION: Scala test runner configured to use monochrome output formatting. This makes console output more readable by removing ANSI colors and applying consistent formatting.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_81\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(classOf[Cucumber])\n@CucumberOptions(monochrome=true)\nclass RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots on Failure with WebDriver in Java\nDESCRIPTION: This snippet demonstrates how to capture a screenshot using WebDriver when a Cucumber scenario fails. It attaches the screenshot to the Cucumber report.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nif (scenario.isFailed()) {\n    byte[] screenshot = ((TakesScreenshot) webDriver).getScreenshotAs(OutputType.BYTES);\n    scenario.attach(screenshot, \"image/png\", \"name\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cucumber-Java Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to add the Cucumber-Java dependency to a Maven project's pom.xml file. It specifies the group ID, artifact ID, version, and test scope for the dependency.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/java.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-java</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Tag Filtering in Java\nDESCRIPTION: Java test runner configured to filter scenarios by tags. This example runs scenarios tagged with @foo but excludes those also tagged with @bar.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_82\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(tags = \"@foo and not @bar\")\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Database Cleaning Configuration in Ruby\nDESCRIPTION: Comprehensive setup for Database Cleaner in Ruby that uses transactions by default but switches to truncation for scenarios tagged with @no-txn. It handles proper cleaning before and after each scenario.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# With this you should be able to tag the stories that need to use truncation.\n# Otherwise, the transaction strategy will be used all the other times.\n\nrequire 'database_cleaner'\nDatabaseCleaner.clean_with :truncation # clean once to ensure clean slate\nDatabaseCleaner.strategy = :transaction # use transactions by default\n\nBefore('@no-txn') do\n  DatabaseCleaner.strategy = :truncation\nend\n\nBefore do\n  DatabaseCleaner.start\nend\n\nAfter do\n  DatabaseCleaner.clean\nend\n\nAfter('@no-txn') do\n  DatabaseCleaner.strategy = :transaction\nend\n```\n\n----------------------------------------\n\nTITLE: Creating WebDriver Factory for Multiple Browsers in Java\nDESCRIPTION: This Java class implements a WebDriverFactory that creates different WebDriver instances based on a system property, supporting multiple browsers.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class WebDriverFactory {\n    public static WebDriver createWebDriver() {\n        String webdriver = System.getProperty(\"browser\", \"firefox\");\n        switch(webdriver) {\n            case \"firefox\":\n                return new FirefoxDriver();\n            case \"chrome\":\n                return new ChromeDriver();\n            default:\n                throw new RuntimeException(\"Unsupported webdriver: \" + webdriver);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Tag Filtering in Scala\nDESCRIPTION: Scala test runner configured to filter scenarios by tags. This example runs scenarios tagged with @foo but excludes those also tagged with @bar.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_84\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(classOf[Cucumber])\n@CucumberOptions(tags = Seq(\"@foo and not @bar\"))\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scenarios with Tags in Scala using JUnit\nDESCRIPTION: Shows how to configure a CucumberOptions runner class in Scala to only run scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_50\n\nLANGUAGE: scala\nCODE:\n```\n@CucumberOptions(tags = \"@smoke and @fast\")\nclass RunCucumberTest {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Around Hooks in Ruby\nDESCRIPTION: Around hooks run 'around' a scenario and can be used to wrap the execution of a scenario in a block. This snippet shows how to implement Around hooks in Ruby to fail fast scenarios taking longer than 0.5 seconds.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nAround('@fast') do |scenario, block|\n  Timeout.timeout(0.5) do\n    block.call\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Custom Object Factory in Java\nDESCRIPTION: Java test runner configured to use a custom object factory. This is useful when integrating Cucumber with dependency injection frameworks.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_85\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(objectFactory = FooFactory.class)\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing After Hooks in Kotlin\nDESCRIPTION: After hooks run after the last step of each scenario, even when the step result is failed, undefined, pending, or skipped. This snippet shows how to implement After hooks in Kotlin.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nAfter { scenario: Scenario ->\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gemfile for Ruby Cucumber Project\nDESCRIPTION: This Ruby code in the Gemfile sets up the necessary dependencies for a Cucumber project in Ruby. It specifies Cucumber and RSpec as test dependencies.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nsource \"https://rubygems.org\"\n\ngroup :test do\n  gem 'cucumber', '~> {{% version \"cucumberruby\" %}}'\n  gem 'rspec', '~> {{% version \"rspec\" %}}'\nend\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Custom Object Factory in Scala\nDESCRIPTION: Scala test runner configured to use a custom object factory. This is useful when integrating Cucumber with dependency injection frameworks.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_87\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(classOf[Cucumber])\n@CucumberOptions(objectFactory = FooFactory.class)\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered Before Hooks in Kotlin\nDESCRIPTION: You can specify an explicit order for hooks if needed. This snippet shows how to implement ordered Before hooks in Kotlin.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nBefore(10) { scenario: Scenario ->\n    // Do something before each scenario\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.cucumber.example\n\nimport io.cucumber.java.AfterAll\nimport io.cucumber.java.BeforeAll\n\n@BeforeAll\nfun beforeAll() {\n   println(\"before all\")\n}\n\n@AfterAll\nfun afterAll() {\n   println(\"after all\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered Before Hooks in Kotlin\nDESCRIPTION: You can specify an explicit order for hooks if needed. This snippet shows how to implement ordered Before hooks in Kotlin.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nBefore(10) { scenario: Scenario ->\n    // Do something before each scenario\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.cucumber.example\n\nimport io.cucumber.java.AfterAll\nimport io.cucumber.java.BeforeAll\n\n@BeforeAll\nfun beforeAll() {\n   println(\"before all\")\n}\n\n@AfterAll\nfun afterAll() {\n   println(\"after all\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Initializing Cucumber for Ruby\nDESCRIPTION: These shell commands install the required gems and initialize the Cucumber file structure for a Ruby project.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nbundle install\ncucumber --init\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Hooks in JavaScript\nDESCRIPTION: Before hooks run before the first step of each scenario. This snippet shows how to import and implement Before hooks in JavaScript.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the Before function\nconst { Before } = require('@cucumber/cucumber')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBefore(async function () {\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterStep Hooks in Ruby\nDESCRIPTION: AfterStep hooks are invoked after a step. This snippet shows how to implement AfterStep hooks in Ruby.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nAfterStep do |scenario|\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered Before Hooks in Java\nDESCRIPTION: You can specify an explicit order for hooks if needed. This snippet shows how to implement ordered Before hooks in Java using both annotated method style and lambda style.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Before(order = 10)\npublic void doSomething(){\n    // Do something before each scenario\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nBefore(10, () -> {\n    // Do something before each scenario\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTableType in Kotlin\nDESCRIPTION: Kotlin implementation of custom Author data table type conversion and step definition usage.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.java.DataTableType\nimport io.cucumber.java.en.Given\nimport kotlin.streams.toList\n\nclass StepDefinitions {\n\n    @DataTableType\n    fun authorEntry(entry: Map<String, String>): Author {\n        return Author(\n                entry[\"firstName\"],\n                entry[\"lastName\"],\n                entry[\"famousBook\"])\n    }\n\n    @Given(\"There are my favorite authors\")\n    fun these_are_my_favourite_authors(authors: List<Author>) {\n        // step implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered Before Hooks in Scala\nDESCRIPTION: You can specify an explicit order for hooks if needed. This snippet shows how to implement ordered Before hooks in Scala.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\nBefore(10) { scenario: Scenario =>\n    // Do something before each scenario\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for JUnit 4 in Cucumber\nDESCRIPTION: Maven configuration showing how to add JUnit 4 and cucumber-junit dependencies to a project's pom.xml file. This setup enables using JUnit 4 assertions in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/checking-assertions.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>{{% version \"junit\" %}}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-junit</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered Before Hooks in Scala\nDESCRIPTION: You can specify an explicit order for hooks if needed. This snippet shows how to implement ordered Before hooks in Scala.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_13\n\nLANGUAGE: scala\nCODE:\n```\nBefore(10) { scenario: Scenario =>\n    // Do something before each scenario\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DocStringType in Java\nDESCRIPTION: Implementation of JSON DocStringType conversion using Jackson ObjectMapper in Java.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.cucumber.java.DocStringType;\nimport io.cucumber.java.en.Given;\n\npublic class StepsDefinitions {\n\n    private static ObjectMapper objectMapper = new ObjectMapper();\n\n    @DocStringType\n    public JsonNode json(String docString) throws JsonProcessingException {\n        return objectMapper.readValue(docString, JsonNode.class);\n    }\n\n    @Given(\"Books are defined by json\")\n    public void books_are_defined_by_json(JsonNode books) {\n        // step implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for Parallel Execution\nDESCRIPTION: XML configuration for the Maven Surefire plugin to enable parallel test execution in a Cucumber project. This should be added to the build section of the POM file.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>2.22.0</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterStep Hooks in Scala\nDESCRIPTION: AfterStep hooks are invoked after a step. This snippet shows how to implement AfterStep hooks in Scala.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_27\n\nLANGUAGE: scala\nCODE:\n```\nAfterStep { scenario: Scenario =>\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda-style Type Definitions in Java\nDESCRIPTION: Example of implementing type definitions using lambda style in Java with Cucumber Java8 interface.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport io.cucumber.java8.En;\n\nimport java.util.Map;\n\npublic class LambdaStepDefinitions implements En {\n    \n    private static ObjectMapper objectMapper = new ObjectMapper();\n\n    public LambdaStepDefinitions() {\n        \n        DataTableType((Map<String, String> entry) -> new Author(\n            entry.get(\"firstName\"),\n            entry.get(\"lastName\"),\n            entry.get(\"famousBook\")\n        ));\n\n        ParameterType(\"book\", \".*\", (String bookName) -> new Book(bookName));\n\n        DocStringType(\"json\", (String docString) -> \n            objectMapper.readValue(docString, JsonNode.class));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Execution for Multiple Runners\nDESCRIPTION: XML configuration for parallel execution of multiple runner classes using the parallel classes strategy with control over thread count in the Maven Surefire or Failsafe plugin.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n<configuration>\n\t<parallel>classes</parallel>\n\t<threadCount>4</threadCount>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional After Hooks with Tag Expressions in Java\nDESCRIPTION: Hooks can be conditionally selected for execution based on the tags of the scenario. This snippet shows how to implement conditional After hooks in Java using tag expressions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n@After(\"@browser and not @headless\")\npublic void doSomethingAfter(Scenario scenario){\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nAfter(\"@browser and not @headless\", (Scenario scenario) -> {\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Step Definitions with Transformers in Kotlin\nDESCRIPTION: Kotlin implementation of parameter and data table transformers using Jackson ObjectMapper\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport io.cucumber.java8.En\nimport java.lang.reflect.Type\n\nclass LambdaStepDefinitions : En {\n    init {\n        val objectMapper = ObjectMapper()\n\n        DefaultParameterTransformer { fromValue: String, toValueType: Type -> \n            objectMapper.convertValue(fromValue, objectMapper.constructType(toValueType)) \n        }\n\n        DefaultDataTableCellTransformer { fromValue, toValueType -> \n            objectMapper.convertValue(fromValue, objectMapper.constructType(toValueType)) \n        }\n\n        DefaultDataTableEntryTransformer { fromValue, toValueType -> \n            objectMapper.convertValue(fromValue, objectMapper.constructType(toValueType))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AfterAll Hook Implementation in Java\nDESCRIPTION: Defines an AfterAll hook in Java using the annotation style that runs after all scenarios have been executed.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_41\n\nLANGUAGE: java\nCODE:\n```\n@AfterAll\npublic static void afterAll() {\n    // Runs after all scenarios\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional After Hooks with Tag Expressions in Scala\nDESCRIPTION: Hooks can be conditionally selected for execution based on the tags of the scenario. This snippet shows how to implement conditional After hooks in Scala using tag expressions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_31\n\nLANGUAGE: scala\nCODE:\n```\nAfter(\"@browser and not @headless\") { scenario: Scenario =>\n\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Type Definition in Ruby\nDESCRIPTION: Examples of defining and using custom parameter types in Ruby, including parameter transformation and step definition usage\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nParameterType(\n  name: 'person',\n  regexp: /[A-Z][a-z]+/,\n  transformer: -> (name) { Person.new(name) }\n)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nThen('the user {person} should have {int} followers') do |person, count|\n  expect(person).to be_a(Person))\nend\n```\n\n----------------------------------------\n\nTITLE: InstallPlugin Hook Implementation in Ruby\nDESCRIPTION: Defines an InstallPlugin hook in Ruby that runs after Cucumber has been configured. Allows for extending Cucumber functionality.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nInstallPlugin do |config, registry|\n  puts \"Features dwell in #{config.feature_dirs}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Tests for Java/Kotlin\nDESCRIPTION: This command runs Cucumber tests using Maven for Java or Kotlin projects.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Adding PicoContainer Dependency for Java/Kotlin\nDESCRIPTION: Demonstrates how to add the PicoContainer dependency to a Maven project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-picocontainer</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Ruby Expression Example with RegEx\nDESCRIPTION: A Ruby step definition using a regular expression with Cucumber Expression parameter types.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nGiven(/I have {int} cukes in my belly/) do |cukes|\nend\n```\n\n----------------------------------------\n\nTITLE: AfterAll Hook Implementation in JavaScript\nDESCRIPTION: Defines an AfterAll hook in JavaScript that runs after all scenarios have been executed. Supports async functions for asynchronous teardown operations.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AfterAll } = require('@cucumber/cucumber');\n\nAfterAll(async function () {\n  // perform some shared setup\n});\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Cucumber Community Page\nDESCRIPTION: This YAML frontmatter defines the metadata for the Cucumber community webpage, specifying the title, subtitle, navigation weight, menu placement, and icon class to be used for display.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Community\nsubtitle: Get in touch with other users and contributors\nweight: 1180\nmenu: main\niconClass: far fa-users\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Dependency for Java/Kotlin\nDESCRIPTION: Demonstrates how to add the Spring dependency to a Maven project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-spring</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Scala Expression Example\nDESCRIPTION: A Scala step definition demonstrating the use of a Cucumber Expression with parameter type transformation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_9\n\nLANGUAGE: scala\nCODE:\n```\nGiven(\"I have {int} cukes in my belly\") { cukes: Int =>\n    println(s\"Cukes: $cukes\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for TestNG in Cucumber\nDESCRIPTION: Maven configuration showing how to add TestNG and cucumber-testng dependencies to a project's pom.xml file. This setup enables using TestNG assertions in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/checking-assertions.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.testng</groupId>\n    <artifactId>testng</artifactId>\n    <version>{{% version \"testng\" %}}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-testng</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Guice Dependency for Gradle\nDESCRIPTION: Shows how to add the Guice dependency to a Gradle project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_7\n\nLANGUAGE: gradle\nCODE:\n```\ncompile group: 'io.cucumber', name: 'cucumber-guice', version: '{{% version \"cucumberjvm\" %}}'\n```\n\n----------------------------------------\n\nTITLE: General Gherkin Acceptance Criteria Template\nDESCRIPTION: A template showing how to structure acceptance criteria using Gherkin syntax. It demonstrates the Feature, Scenario, Given, When, Then format with multiple scenarios.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/terms/user-story.md#2025-04-09_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Some important feature\n\n  Scenario: Get something\n    Given I have something\n    When I do something\n    Then I get something else\n\n  Scenario: Get something different\n    Given I have something\n    And I have also some other thing\n    When I do something different\n    Then I get something different\n```\n\n----------------------------------------\n\nTITLE: Adding Cucumber to a Ruby on Rails project Gemfile\nDESCRIPTION: Code snippet showing how to add cucumber-rails and database_cleaner to a Rails project's Gemfile within the test group. This configures Cucumber specifically for a Rails environment.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ngroup :test do\n  gem 'cucumber-rails', require: false\n  # database_cleaner is not mandatory, but highly recommended\n  gem 'database_cleaner'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Guice Module for Service Bindings in Java\nDESCRIPTION: Example of a Guice module class that configures bindings for application services. This module is used to set up the dependency injection for the custom injector.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.app.service.impl;\n\nimport com.example.app.service.AppService;\nimport com.google.inject.AbstractModule;\n\npublic final class ServiceModule extends AbstractModule {\n    @Override\n    protected void configure() {\n        bind( AppService.class ).to( AppServiceImpl.class );\n        // ... (further bindings)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Scenarios for Transaction Management in Gherkin\nDESCRIPTION: Example of how to tag features or scenarios with @txn to enable transaction management. When tagged, Cucumber will wrap each scenario in a database transaction that gets rolled back after execution.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_19\n\nLANGUAGE: gherkin\nCODE:\n```\n@txn\nFeature: Let's write a lot of stuff to the DB\n\n  Scenario: I clean up after myself\n    Given I write to the DB\n\n  Scenario: And so do I!\n    Given I write to the DB\n```\n\n----------------------------------------\n\nTITLE: Tagging Scenarios for Transaction Management in Gherkin\nDESCRIPTION: Example of how to tag features or scenarios with @txn to enable transaction management. When tagged, Cucumber will wrap each scenario in a database transaction that gets rolled back after execution.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_19\n\nLANGUAGE: gherkin\nCODE:\n```\n@txn\nFeature: Let's write a lot of stuff to the DB\n\n  Scenario: I clean up after myself\n    Given I write to the DB\n\n  Scenario: And so do I!\n    Given I write to the DB\n```\n\n----------------------------------------\n\nTITLE: Implementing abstract step definition with string parameter in Java\nDESCRIPTION: A Java step definition that uses a parameterized string to handle multiple webpage navigation scenarios using a factory pattern to avoid duplication.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/step-organization.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Given(\"I go to the {string} page\")\npublic void i_want_to_open_page(String webpage) {\n  webpageFactory.openPage(webpage);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing abstract step definition with string parameter in JavaScript\nDESCRIPTION: A JavaScript step definition that uses a parameterized string to handle multiple webpage navigation scenarios using a factory pattern to avoid duplication.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/step-organization.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n Given(\"I go to the {string} page\", function (webpage) {\n   webpageFactory.openPage(webpage)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing abstract step definition with string parameter in Ruby\nDESCRIPTION: A Ruby step definition that uses a parameterized string to handle multiple webpage navigation scenarios by calling a helper method to avoid duplication.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/step-organization.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n Given 'I go to the {string} page' do |page|\n   open_web_page page\n end\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition with Custom Injector in Java\nDESCRIPTION: Example of a step definition class using Google Guice for dependency injection. It demonstrates how to inject and use an AppService in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.app;\n\nimport static org.junit.Assert.assertTrue;\n\nimport io.cucumber.java.en.When;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.guice.ScenarioScoped;\nimport com.example.app.service.AppService;\nimport java.util.Objects;\nimport javax.inject.Inject;\n\n@ScenarioScoped\npublic final class StepDefinition {\n\n    private final AppService appService;\n\n    @Inject\n    public StepDefinition( AppService appService ) {\n        this.appService = Objects.requireNonNull( appService, \"appService must not be null\" );\n    }\n\n    @When(\"the application services are started\")\n    public void startServices() {\n        this.appService.startServices();\n    }\n\n    @Then(\"all application services should be running\")\n    public void checkThatApplicationServicesAreRunning() {\n        assertTrue( this.appService.servicesAreRunning() );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing abstract step definition with string parameter in Kotlin\nDESCRIPTION: A Kotlin step definition that uses a parameterized string to handle multiple webpage navigation scenarios using a factory pattern to avoid duplication.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/step-organization.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Given(\"I go to the {string} page\")\nfun `I want to open page`(webpage: String) {\n  webpageFactory.openPage(webpage)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing abstract step definition with string parameter in Golang\nDESCRIPTION: A Golang step definition that uses a parameterized string to handle multiple webpage navigation scenarios using a factory pattern to avoid duplication.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/step-organization.md#2025-04-09_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\ns.Step(`^I go to the \"([^\"]*)\" page$`, goToPage)\n\nfunc goToPage(webpage string) error {\n return webpageFactory.Open(webpage)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UUID Generator in Java\nDESCRIPTION: Creates a custom UUID generator class by implementing the UuidGenerator interface. This class must override the generateId() method to provide custom UUID generation logic.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npackage mypackage.mysubpackage;\nimport io.cucumber.core.eventbus.UuidGenerator;\npublic class MyUuidGenerator implements UuidGenerator {\n  @Override\n  public UUID generateId() {\n      return ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Pending Scenario Output in JavaScript Cucumber\nDESCRIPTION: Shows the command-line output when running a Cucumber test with pending steps in JavaScript. The output displays a scenario with a pending step and subsequent skipped steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nP--\n\nWarnings:\n\n1) Scenario: Sunday is not Friday # features/is_it_friday_yet.feature:4\n   ? Given today is Sunday # features/step_definitions/stepdefs.js:3\n       Pending\n   - When I ask whether it's Friday yet # features/step_definitions/stepdefs.js:8\n   - Then I should be told \"Nope\" # features/step_definitions/stepdefs.js:13\n\n1 Scenario (1 pending)\n3 steps (1 pending, 2 skipped)\n0m00.001s\n```\n\n----------------------------------------\n\nTITLE: Maven Profile Configuration for Cucumber\nDESCRIPTION: XML configuration for setting up Maven profiles to run different Cucumber scenarios based on environment tags\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n    <profiles>\n        <profile>\n          <id>dev</id>\n            <properties>\n                <cucumber.filter.tags>@dev and not @ignore</cucumber.filter.tags>\n            </properties>\n        </profile>\n        <profile>\n          <id>qa</id>\n            <properties>\n                <cucumber.filter.tags>@qa</cucumber.filter.tags>\n            </properties>\n        </profile>\n    </profiles>\n\n    <build>\n        <plugins>\n            ...\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>3.0.0-M4</version>\n                <configuration>\n                    <systemPropertyVariables>\n                       <cucumber.filter.tags>${cucumber.filter.tags}</cucumber.filter.tags>\n                    </systemPropertyVariables>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom World in Ruby\nDESCRIPTION: Demonstrates how to create a custom World object in Ruby to add helper methods and behavior to the test environment.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule CustomWorld\n  def a_helper\n    ...\n  end\nend\n\nWorld(CustomWorld)\n```\n\n----------------------------------------\n\nTITLE: Viewing Pending Scenario Output in Ruby Cucumber\nDESCRIPTION: Shows the command-line output when running a Cucumber test with pending steps in Ruby. The output displays a scenario with a pending step marked as TODO and subsequent skipped steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nFeature: Is it Friday yet?\n  Everybody wants to know when it's Friday\n\n  Scenario: Sunday is not Friday       # features/is_it_friday_yet.feature:4\n    Given today is Sunday              # features/step_definitions/stepdefs.rb:1\n      TODO (Cucumber::Pending)\n      ./features/step_definitions/stepdefs.rb:2:in `\"today is Sunday\"'\n      features/is_it_friday_yet.feature:5:in `Given today is Sunday'\n    When I ask whether it's Friday yet # features/step_definitions/stepdefs.rb:5\n    Then I should be told \"Nope\"       # features/step_definitions/stepdefs.rb:9\n\n1 scenario (1 pending)\n3 steps (2 skipped, 1 pending)\n0m0.073s\n```\n\n----------------------------------------\n\nTITLE: Example Scenario in Gherkin Syntax\nDESCRIPTION: A sample scenario showing how to add a description to a CV in Gherkin format.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: add description\n  Given I have a CV and I'm on the edit description page\n  And I fill in \"Description\" with \"Cucumber BDD tool\"\n  When I press \"Save\"\n  Then I should see \"Cucumber BDD tool\" under \"Descriptions\"\n```\n\n----------------------------------------\n\nTITLE: Kotlin Step Definition Snippet\nDESCRIPTION: An auto-generated Kotlin step definition snippet for an undefined step, showing Cucumber's suggested implementation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n@Given(\"I have {int} red balls\") { balls: Int ->\n}\n```\n\n----------------------------------------\n\nTITLE: Final Implementation of isItFriday Function\nDESCRIPTION: Simple implementations of the isItFriday function that always returns 'Nope' to make the test pass.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nstatic String isItFriday(String today) {\n    return \"Nope\";\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isItFriday(today: String) = \"Nope\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isItFriday(today) {\n  return 'Nope';\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef is_it_friday(day)\n  'Nope'\nend\n```\n\n----------------------------------------\n\nTITLE: Step Definition Implementation - JavaScript\nDESCRIPTION: JavaScript implementation of the CV editing step definition showing employee creation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar { Given } = require('cucumber');\n\nGiven(/^I have a CV and I'm on the edit description page$/, function () {\n  this.employee = new Employee('Sally');\n  this.employee.createCV();\n});\n```\n\n----------------------------------------\n\nTITLE: Ruby Step Definition Snippet\nDESCRIPTION: An auto-generated Ruby step definition snippet for an undefined step, showing Cucumber's suggested implementation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nGiven('I have {int} red balls') do |int1|\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition for Friday in Java\nDESCRIPTION: This Java code snippet implements the step definition for setting the day to Friday in a Cucumber test.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n@Given(\"today is Friday\")\npublic void today_is_Friday() {\n    today = \"Friday\";\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Transactions in Ruby on Rails\nDESCRIPTION: Configures Cucumber to disable transactional fixtures globally in a Ruby on Rails environment. This setting should be placed in the features/support/env.rb file.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nCucumber::Rails::World.use_transactional_fixtures = false\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition Snippet\nDESCRIPTION: An auto-generated JavaScript step definition snippet for an undefined step, showing Cucumber's suggested implementation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nGiven(\"I have {int} red balls\", function (int1) {\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition for Friday in Ruby\nDESCRIPTION: This Ruby code snippet implements the step definition for setting the day to Friday in a Cucumber test.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nGiven(\"today is Friday\") do\n  @today = 'Friday'\nend\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with HTML Reporting in Scala\nDESCRIPTION: Scala test runner configured with pretty and HTML formatter plugins. This configuration generates formatted console output and an HTML report in the target directory.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_72\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(classOf[Cucumber])\n@CucumberOptions(plugin = Seq(\"pretty\", \"html:target/cucumber.html\"))\nclass RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Step Definition with Custom Parameter Type\nDESCRIPTION: A Ruby step definition snippet showing how Cucumber uses custom parameter types in suggestions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nGiven('I have {int} {color} balls') do |int1, color|\nend\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Search Index Generation\nDESCRIPTION: This YAML front matter block specifies metadata for generating a search index. It defines the file type as 'search-index' and sets the output URL to 'index.json'.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/search-index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: \"search-index\"\nurl: \"index.json\"\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Friday Check Logic in Java\nDESCRIPTION: This Java code snippet implements the logic to check if a given day is Friday and return the appropriate response.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nstatic String isItFriday(String today) {\n    return \"Friday\".equals(today) ? \"TGIF\" : \"Nope\";\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Scenarios with Tags in Ruby CLI\nDESCRIPTION: Shows how to use the Ruby CLI to ignore scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\n# You can omit the quotes if the expression is a single tag\ncucumber --tags \"not @smoke\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Step Definition with Custom Parameter Type\nDESCRIPTION: A JavaScript step definition snippet showing how Cucumber uses custom parameter types in suggestions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nGiven(\"I have {int} {color} balls\", function (int1, color) {\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Friday Check Logic in JavaScript\nDESCRIPTION: This JavaScript code snippet implements the logic to check if a given day is Friday and return the appropriate response.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isItFriday(today) {\n  if (today === \"Friday\") {\n    return \"TGIF\";\n  } else {\n    return \"Nope\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scenarios with Tags in JavaScript CLI\nDESCRIPTION: Shows how to use the JavaScript CLI to run only scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\n# You can omit the quotes if the expression is a single tag\n./node_modules/.bin/cucumber.js --tags \"@smoke and @fast\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Step Definitions with Transformers in Java\nDESCRIPTION: Shows how to implement DefaultParameterTransformer, DefaultDataTableCellTransformer, and DefaultDataTableEntryTransformer using Jackson ObjectMapper in Java\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.java8.En;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.lang.reflect.Type;\n\npublic class LambdaStepDefinitions implements En {\n    \n    public LambdaStepDefinitions() {\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        DefaultParameterTransformer((String fromValue, Type toValueType) ->\n            objectMapper.convertValue(fromValue, objectMapper.constructType(toValueType)));\n\n        DefaultDataTableCellTransformer((fromValue, toValueType) ->\n            objectMapper.convertValue(fromValue, objectMapper.constructType(toValueType)));\n\n        DefaultDataTableEntryTransformer((fromValue, toValueType) ->\n            objectMapper.convertValue(fromValue, objectMapper.constructType(toValueType)));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Step Definitions with Variables\nDESCRIPTION: Java implementation of step definitions using variables to handle the Friday detection logic with JUnit assertions\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_37\n\nLANGUAGE: java\nCODE:\n```\npackage hellocucumber;\n\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.When;\nimport io.cucumber.java.en.Then;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass IsItFriday {\n    static String isItFriday(String today) {\n        return \"Friday\".equals(today) ? \"TGIF\" : \"Nope\";\n    }\n}\n\npublic class Stepdefs {\n    private String today;\n    private String actualAnswer;\n\n    @Given(\"today is {string}\")\n    public void today_is(String today) {\n        this.today = today;\n    }\n\n    @When(\"I ask whether it's Friday yet\")\n    public void i_ask_whether_it_s_Friday_yet() {\n        actualAnswer = IsItFriday.isItFriday(today);\n    }\n\n    @Then(\"I should be told {string}\")\n    public void i_should_be_told(String expectedAnswer) {\n        assertEquals(expectedAnswer, actualAnswer);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Step Definition with Custom Parameter Type\nDESCRIPTION: A Kotlin step definition snippet showing how Cucumber uses custom parameter types in suggestions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n@Given(\"I have {int} {color} balls\") { balls: Int, color: Color ->\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Multiple Tags on a Feature in Gherkin\nDESCRIPTION: Shows how to add multiple tags to a Gherkin feature, separated by spaces.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_46\n\nLANGUAGE: gherkin\nCODE:\n```\n@billing @bicker @annoy\nFeature: Verify billing\n```\n\n----------------------------------------\n\nTITLE: Initializing Step Definitions for JavaScript Cucumber Project\nDESCRIPTION: This JavaScript file sets up the basic structure for Cucumber step definitions. It imports necessary assertions and Cucumber functions for defining test steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst { Given, When, Then } = require('@cucumber/cucumber');\n```\n\n----------------------------------------\n\nTITLE: Scala Step Definition with Custom Parameter Type\nDESCRIPTION: A Scala step definition snippet showing how Cucumber uses custom parameter types in suggestions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_20\n\nLANGUAGE: scala\nCODE:\n```\nGiven(\"I have {int} {color} balls\") { (balls: Int, color: Color) =>\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Scenarios with Tags in Kotlin using JUnit\nDESCRIPTION: Shows how to configure a CucumberOptions runner class in Kotlin to ignore scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_54\n\nLANGUAGE: kotlin\nCODE:\n```\n@CucumberOptions(tags = \"not @smoke\")\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example - Java Implementation\nDESCRIPTION: Shows the problematic directory structure with feature-coupled step definitions where each feature has its own step definition file.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfeatures/\n+--edit_work_experience.feature\n+--edit_languages.feature\n+--edit_education.feature\n+--steps/\n   +--edit_work_experience_steps.java\n   +--edit_languages_steps.java\n   +--edit_education_steps.java\n```\n\n----------------------------------------\n\nTITLE: Scala Step Definition Snippet\nDESCRIPTION: An auto-generated Scala step definition snippet for an undefined step, showing Cucumber's suggested implementation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/step-definitions.md#2025-04-09_snippet_15\n\nLANGUAGE: scala\nCODE:\n```\nGiven(\"I have {int} red balls\") { balls: Int =>\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Scenarios with Tags in JavaScript CLI\nDESCRIPTION: Shows how to use the JavaScript CLI to ignore scenarios with specific tags.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\n# You can omit the quotes if the expression is a single tag\n./node_modules/.bin/cucumber.js --tags \"not @smoke\"\n```\n\n----------------------------------------\n\nTITLE: Step Definition Implementation - Java\nDESCRIPTION: Java implementation of the CV editing step definition showing employee creation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    @Given(\"I have a CV and I'm on the edit description page\")\n    public void I_have_a_CV_and_Im_on_the_edit_description_page() {\n        Employee employee = new Employee(\"Sally\");\n        employee.createCV();\n    }\n```\n\n----------------------------------------\n\nTITLE: Gherkin Shopping List with Asterisk\nDESCRIPTION: Alternative version using asterisk (*) notation for list items.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: All done\n  Given I am out shopping\n  * I have eggs\n  * I have milk\n  * I have butter\n  When I check my list\n  Then I don't need anything\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Summary Plugin and Camelcase Snippets in Scala\nDESCRIPTION: Scala test runner configured to use pretty and summary plugins with camelcase snippet style. This helps generate code snippets for missing step definitions in camelCase format.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_75\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(classOf[Cucumber])\n@CucumberOptions(plugin = Seq(\"pretty\", \"summary\"), snippets = CAMELCASE)\nclass RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Step Definition Implementation - Ruby\nDESCRIPTION: Ruby implementation of the CV editing step definition showing employee creation and navigation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nGiven /I have a CV and I'm on the edit description page/ do\n  @employee = Employee.create!(name: 'Sally')\n  @employee.create_cv\n  visits(\"/employees/#{@employee.id}/descriptions/new\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Formatter in Kotlin\nDESCRIPTION: Kotlin configuration for adding the timeline report formatter to visualize thread execution in a Cucumber runner class using the CucumberOptions annotation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n@CucumberOptions(plugin = [\"timeline:<report folder>\"])\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Dry Run Mode in Scala\nDESCRIPTION: Scala test runner configured to run in dry-run mode. This checks if all feature file steps have corresponding step definitions without actually executing the steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_78\n\nLANGUAGE: scala\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(classOf[Cucumber])\n@CucumberOptions(dryRun=true)\nclass RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cucumber Scenario for Google Search\nDESCRIPTION: A Gherkin scenario definition for testing Google search functionality\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Finding some cheese\n   Given I am on the Google search page\n   When I search for \"Cheese!\"\n   Then the page title should start with \"cheese\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Pending Scenario Output in Java Cucumber\nDESCRIPTION: Shows the command-line output when running a Cucumber test with pending steps in Java. The output displays a scenario with a PendingException thrown from a step definition that needs implementation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning hellocucumber.RunCucumberTest\nFeature: Is it Friday yet?\n  Everybody wants to know when it's Friday\n\n  Scenario: Sunday isn't Friday        # hellocucumber/is_it_friday_yet.feature:4\n    Given today is Sunday              # Stepdefs.today_is_Sunday()\n      io.cucumber.java.PendingException: TODO: implement me\n\tat hellocucumber.Stepdefs.today_is_Sunday(StepDefinitions.java:14)\n\tat ?.today is Sunday(classpath:hellocucumber/is_it_friday_yet.feature:5)\n\n    When I ask whether it's Friday yet # Stepdefs.i_ask_whether_it_s_Friday_yet()\n    Then I should be told \"Nope\"       # Stepdefs.i_should_be_told(String)\n\nPending scenarios:\nhellocucumber/is_it_friday_yet.feature:4 # Sunday isn't Friday\n\n1 Scenarios (1 pending)\n3 Steps (2 skipped, 1 pending)\n0m0.188s\n\nio.cucumber.java.PendingException: TODO: implement me\n\tat hellocucumber.Stepdefs.today_is_Sunday(StepDefinitions.java:13)\n\tat ?.today is Sunday(classpath:hellocucumber/is_it_friday_yet.feature:5)\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Tag Filtering in Kotlin\nDESCRIPTION: Kotlin test runner configured to filter scenarios by tags. This example runs scenarios tagged with @foo but excludes those also tagged with @bar.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_83\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber.class)\n@CucumberOptions(tags = \"@foo and not @bar\")\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Creating WebDriver Factory for Multiple Browsers in Kotlin (TODO)\nDESCRIPTION: This Kotlin snippet is a placeholder for converting the Java WebDriverFactory to Kotlin, demonstrating multi-browser support.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// TODO: Convert Java example to Kotlin\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class WebDriverFactory {\n    public static WebDriver createWebDriver() {\n        String webdriver = System.getProperty(\"browser\", \"firefox\");\n        switch(webdriver) {\n            case \"firefox\":\n                return new FirefoxDriver();\n            case \"chrome\":\n                return new ChromeDriver();\n            default:\n                throw new RuntimeException(\"Unsupported webdriver: \" + webdriver);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Pending Scenario Output in Kotlin Cucumber\nDESCRIPTION: Shows the command-line output when running a Cucumber test with pending steps in Kotlin. The output displays a scenario with a PendingException thrown from a step definition that needs implementation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning hellocucumber.RunCucumberTest\nFeature: Is it Friday yet?\n  Everybody wants to know when it's Friday\n\n  Scenario: Sunday isn't Friday        # hellocucumber/is_it_friday_yet.feature:4\n    Given today is Sunday              # StepDefs.today_is_Sunday()\n      io.cucumber.java.PendingException: TODO: implement me\n        at hellocucumber.StepDefs.today_is_Sunday(StepDefs.kt:14)\n        at ✽.today is Sunday(hellocucumber/is_it_friday_yet.feature:5)\n\n    When I ask whether it's Friday yet # StepDefs.i_ask_whether_it_s_Friday_yet()\n    Then I should be told \"Nope\"       # StepDefs.i_should_be_told(String)\n\n1 Scenarios (1 pending)\n3 Steps (2 skipped, 1 pending)\n0m0.107s\n\nio.cucumber.java.PendingException: TODO: implement me\n        at hellocucumber.StepDefs.today_is_Sunday(StepDefs.kt:14)\n        at ✽.today is Sunday(hellocucumber/is_it_friday_yet.feature:5)\n\nTests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.351 sec\n```\n\n----------------------------------------\n\nTITLE: Listing Cucumber Configuration Options in Ruby\nDESCRIPTION: Shows how to list all available Cucumber options when installed as a gem.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\ncucumber --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Browser Support in JavaScript (TODO)\nDESCRIPTION: This JavaScript snippet is a placeholder for implementing multi-browser support in JavaScript Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// TODO\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber with JUnit Output in Jenkins\nDESCRIPTION: Command line instruction for executing Cucumber with JUnit formatter and configuring output to workspace. Used for generating XML reports that Jenkins can interpret and display as HTML.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/continuous-integration.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncucumber -f junit --out WORKSPACE\n```\n\n----------------------------------------\n\nTITLE: Listing Cucumber Configuration Options in Java/Kotlin/Scala\nDESCRIPTION: Demonstrates how to print all available configuration options for Cucumber in Java, Kotlin, or Scala environments.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_90\n\nLANGUAGE: shell\nCODE:\n```\njava io.cucumber.core.cli.Main --help\n```\n\n----------------------------------------\n\nTITLE: Rebuilding CSS from Sass for Cucumber Documentation\nDESCRIPTION: These commands install dependencies and rebuild the cucumber.css file from the modified Sass source. Run these after making changes to the static/css/cucumber.sass file.\nSOURCE: https://github.com/cucumber/docs/blob/main/themes/cucumber-sb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn        # install dependencies\nyarn build  # rebuild cucumber.css\n```\n\n----------------------------------------\n\nTITLE: Ruby Watir Test Example\nDESCRIPTION: Example of using Watir with RSpec for browser automation testing\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"rubygems\"\nrequire \"rspec\"\nrequire \"watir\"\n\ndescribe \"google.com\" do\n  let(:browser) { @browser ||= Watir::Browser.new :firefox }\n  before { browser.goto \"http://google.com\" }\n  browser.text_field(name: \"q\").set \"watir\"\n  browser.button.click\n  browser.div(id: \"resultStats\").wait_until\n  browser.title.should == \"watir - Google Search\"\n  after { browser.close }\nend\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Summary Plugin and Camelcase Snippets in Kotlin\nDESCRIPTION: Kotlin test runner configured to use pretty and summary plugins with camelcase snippet style. This helps generate code snippets for missing step definitions in camelCase format.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_74\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber.class)\n@CucumberOptions(plugin = {\"pretty\", \"summary\"}, snippets = CAMELCASE)\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber with Tags in Java/Kotlin/Scala using Maven\nDESCRIPTION: Shows how to run a subset of scenarios tagged with '@smoke' using Maven in Java, Kotlin, or Scala projects.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\nmvn test -Dcucumber.filter.tags=\"@smoke\"\n```\n\n----------------------------------------\n\nTITLE: Ruby Watir-Cucumber Integration\nDESCRIPTION: Integration of Watir with Cucumber for browser automation testing\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"watir\"\nrequire \"rspec/expectations\"\n\nGiven(/^I have entered \"([^\"]*)\" into the query$/) do |term|\n  @browser ||= Watir::Browser.new :firefox\n  @browser.goto \"google.com\"\n  @browser.text_field(name: \"q\").set term\nend\n\nWhen(/^I click \"([^\"]*)\"$/) do\n @browser.button.click\nend\n\nThen(/^I should see some results$/) do\n  @browser.div(id: \"resultStats\").wait_until_present\n  @browser.close\nend\n```\n\n----------------------------------------\n\nTITLE: Using Tags for External System References in Gherkin\nDESCRIPTION: Shows how to use tags to reference IDs in external systems like requirement management tools or issue trackers.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_58\n\nLANGUAGE: gherkin\nCODE:\n```\n@BJ-x98.77 @BJ-z12.33\nFeature: Convert transaction\n```\n\n----------------------------------------\n\nTITLE: Creating a Parallel TestNG Runner in Java\nDESCRIPTION: Java implementation of a TestNG runner class that extends AbstractTestNGCucumberTests and enables parallel test execution by overriding the scenarios method and setting the DataProvider parallel option to true.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage parallel;\n\nimport org.testng.annotations.DataProvider;\nimport io.cucumber.testng.AbstractTestNGCucumberTests;\n\npublic class RunCucumberTest extends AbstractTestNGCucumberTests{\n\n\t@Override\n\t@DataProvider(parallel = true)\n\tpublic Object[][] scenarios() {\n\t\treturn super.scenarios();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots on Failure with WebDriver in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to take a screenshot using WebDriver when a Cucumber scenario fails and attach it to the Cucumber report.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nif (scenario.isFailed()) {\n    val screenshot = ((TakesScreenshot) webDriver).getScreenshotAs(OutputType.BYTES)\n    scenario.attach(screenshot, \"image/png\", \"name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cucumber Rake Task in Ruby\nDESCRIPTION: Example of setting up a basic Rake task for running Cucumber features with formatter options. This code creates a 'features' task that can be invoked with 'rake features' to run Cucumber tests with the pretty formatter.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/ruby.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\nrequire 'cucumber'\nrequire 'cucumber/rake/task'\n\nCucumber::Rake::Task.new(:features) do |t|\n  t.cucumber_opts = \"--format pretty\" # Any valid command line option can go here.\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring DataProvider Thread Count in Maven\nDESCRIPTION: XML configuration to customize the number of parallel threads for the TestNG DataProvider by setting the dataproviderthreadcount property in the Maven Surefire or Failsafe plugin configuration.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n<configuration>\n\t<properties>\n    \t<property>\n        \t<name>dataproviderthreadcount</name>\n        \t<value>20</value>\n    \t</property>\n\t</properties>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Scenarios Feature File in Gherkin\nDESCRIPTION: Sample feature file containing two basic scenarios for parallel execution demonstration\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Scenarios feature file\n\n  Scenario: Scenario Number One\n    Given Step from 'Scenario 1' in 'scenarios' feature file\n\n  Scenario: Scenario Number Two\n    Given Step from 'Scenario 2' in 'scenarios' feature file\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Dry Run Mode in Java\nDESCRIPTION: Java test runner configured to run in dry-run mode. This checks if all feature file steps have corresponding step definitions without actually executing the steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_76\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(dryRun=true)\npublic class RunCucumberTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Kotlin Step Definitions for CLI Execution\nDESCRIPTION: Command to compile Kotlin step definition classes with the required Cucumber JARs in the classpath for command-line execution of Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkotlinc -cp .;<path to each cucumber jar> -jvm-target 1.8 ./parallel/StepDefs.kt\n```\n\n----------------------------------------\n\nTITLE: Implementing Scenario Outlines Feature File in Gherkin\nDESCRIPTION: Sample feature file demonstrating scenario outline with examples for parallel execution\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Scenario Outlines feature file\n\n  Scenario Outline: <scen_out_row_num>\n    Given Step from '<scen_out_row_num>' in 'scenario-outlines' feature file\n\n    Examples: \n      | scen_out_row_num       |\n      | Scenario Outline Row 1 |\n      | Scenario Outline Row 2 |\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Dry Run Mode in Kotlin\nDESCRIPTION: Kotlin test runner configured to run in dry-run mode. This checks if all feature file steps have corresponding step definitions without actually executing the steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_77\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber.class)\n@CucumberOptions(dryRun=true)\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber with Bundler\nDESCRIPTION: Command to install Cucumber and other dependencies defined in the Gemfile using Bundler. This ensures all gems are installed at the versions specified in the Gemfile.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbundle\n```\n\n----------------------------------------\n\nTITLE: Sample Parallel Execution Output\nDESCRIPTION: Sample console output showing parallel execution of scenarios and scenario outline rows in different threads, with each line displaying the thread ID and the scenario being executed.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nThread ID - 15 - Scenario Outline Row 2 from scenario-outlines feature file.\nThread ID - 14 - Scenario Outline Row 1 from scenario-outlines feature file.\nThread ID - 16 - Scenario 1 from scenarios feature file.\nThread ID - 17 - Scenario 2 from scenarios feature file.\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Standalone Commands\nDESCRIPTION: Basic commands to run Cucumber tests in different languages showing the initial empty test output.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx cucumber-js\n```\n\nLANGUAGE: shell\nCODE:\n```\ncucumber\n```\n\n----------------------------------------\n\nTITLE: Checking Cucumber installation with the help command\nDESCRIPTION: Command to verify Cucumber installation by displaying the help information. This is a good way to confirm that Cucumber was installed correctly and is available to use.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncucumber --help\n```\n\n----------------------------------------\n\nTITLE: Executing Cucumber Tests in Parallel via CLI in Java\nDESCRIPTION: Command to execute Cucumber tests in parallel using the CLI with Java, specifying the thread count and step definition package.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\njava -cp .;<path to cucumber jar folder>/* io.cucumber.core.cli.Main --threads 4 -g parallel parallel\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Browser Support with Capybara in Ruby\nDESCRIPTION: This Ruby code shows how to configure Capybara to support multiple browsers based on a runtime configuration property.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/browser-automation.md#2025-04-09_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nCapybara.register_driver :selenium do |app|\n  browser = (ENV['browser'] || 'firefox').to_sym\n  Capybara::Selenium::Driver.new(app, browser: browser)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding PicoContainer Dependency for Gradle\nDESCRIPTION: Shows how to add the PicoContainer dependency to a Gradle project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\ncompile group: 'io.cucumber', name: 'cucumber-picocontainer', version: '{{% version \"cucumberjvm\" %}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Formatter in Java\nDESCRIPTION: Java configuration for adding the timeline report formatter to visualize thread execution in a Cucumber runner class using the CucumberOptions annotation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n@CucumberOptions(plugin= {\"timeline:<report folder>\"})\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber.js with NPM\nDESCRIPTION: Commands to install Cucumber.js as a development dependency using NPM package manager.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @cucumber/cucumber\n```\n\n----------------------------------------\n\nTITLE: Adding Guice Dependency for Java/Kotlin\nDESCRIPTION: Demonstrates how to add the Guice dependency to a Maven project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-guice</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Formatter in CLI\nDESCRIPTION: Command to execute Cucumber tests with the timeline formatter enabled via CLI, providing visual representation of parallel thread execution.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\njava -cp <classpath> io.cucumber.core.cli.Main -p timeline:<report folder> --threads <thread count> -g <steps package> <path to feature files>\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber.js with Yarn\nDESCRIPTION: Commands to install Cucumber.js as a development dependency using Yarn package manager.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @cucumber/cucumber\n```\n\n----------------------------------------\n\nTITLE: Adding Weld Dependency for Java/Kotlin\nDESCRIPTION: Demonstrates how to add the Weld dependency to a Maven project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-weld</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions in Kotlin\nDESCRIPTION: Kotlin step definition class implementing the steps defined in feature files using Java8 lambda syntax\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage parallel\n\nimport io.cucumber.java8.En\n\nclass StepDefs : En {\t\n\tinit {\n        Given(\"Step from {string} in {string} feature file\") { scenario: String , file: String ->\n            println(\"Thread ID - ${Thread.currentThread().id} - $scenario from $file feature file\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber.js with npm\nDESCRIPTION: This command installs Cucumber.js as a development dependency using npm. It adds @cucumber/cucumber to the project's devDependencies in package.json.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @cucumber/cucumber\n```\n\n----------------------------------------\n\nTITLE: Adding Needle Dependency for Java/Kotlin\nDESCRIPTION: Demonstrates how to add the Needle dependency to a Maven project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-needle</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Failsafe Plugin Configuration\nDESCRIPTION: Maven Failsafe plugin configuration for parallel integration test execution\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-failsafe-plugin</artifactId>\n\t<version>2.22.0</version>\n\t<executions>\n\t\t<execution>\n\t\t\t<goals>\n\t\t\t\t<goal>integration-test</goal>\n\t\t\t\t<goal>verify</goal>\n\t\t\t</goals>\n\t\t\t<configuration>\n\t\t\t\t<parallel>methods</parallel>\n\t\t\t\t<useUnlimitedThreads>true</useUnlimitedThreads>\n\t\t\t</configuration>\n\t\t</execution>\n\t</executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber.js with Yarn\nDESCRIPTION: This command installs Cucumber.js as a development dependency using Yarn. It adds @cucumber/cucumber to the project's devDependencies in package.json.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @cucumber/cucumber\n```\n\n----------------------------------------\n\nTITLE: Database Cleaning with DatabaseCleaner in Ruby\nDESCRIPTION: Sets up Database Cleaner to clean the database before scenarios tagged with @no-txn. It uses truncation strategy to ensure a clean database state before each tagged scenario.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'database_cleaner'\nDatabaseCleaner.clean_with :truncation # clean once to ensure clean slate\nDatabaseCleaner.strategy = :truncation\n\nBefore('@no-txn') do\n  DatabaseCleaner.start\nend\n\nAfter('@no-txn') do\n  DatabaseCleaner.clean\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Cucumber to Gemfile in non-Rails project\nDESCRIPTION: Code snippet showing how to add Cucumber to a Gemfile in a Ruby project that uses Bundler for dependency management. This is the recommended approach for non-Rails projects using Bundler.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'cucumber'\n```\n\n----------------------------------------\n\nTITLE: Initializing Cucumber Project for JavaScript\nDESCRIPTION: These shell commands create a new directory, initialize a Node.js project, and install Cucumber as a development dependency. It sets up the basic structure for a JavaScript-based Cucumber project.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir hellocucumber\ncd hellocucumber\nnpm init --yes\nnpm install --save-dev @cucumber/cucumber\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber with Custom Formatter in Java/Kotlin\nDESCRIPTION: Command to run Cucumber with a custom formatter class in Java or Kotlin. The formatter must be specified with the --format flag followed by the formatter class name.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/reporting.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncucumber --format CustomFormatter\n```\n\n----------------------------------------\n\nTITLE: Initializing Cucumber features directory\nDESCRIPTION: Command to initialize the standard Cucumber directory structure. This creates the features/ directory with the necessary subdirectories and boilerplate files.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncucumber --init\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Options for JavaScript\nDESCRIPTION: This JavaScript configuration file sets the default options for Cucumber, specifically setting the snippet interface to synchronous.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  default: `--format-options '{\"snippetInterface\": \"synchronous\"}'`\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber with Rake in Shell\nDESCRIPTION: Command to run Cucumber features using the Rake task. This simple command invokes the features task defined in the Rakefile.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/ruby.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrake features\n```\n\n----------------------------------------\n\nTITLE: Using Cucumber Profiles in Rake Tasks\nDESCRIPTION: Example of defining multiple Rake tasks that use different Cucumber profiles. This setup creates namespaced tasks for running features with different configurations defined in profiles.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/ruby.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\nrequire 'cucumber'\nrequire 'cucumber/rake/task'\n\nnamespace :features do\n  Cucumber::Rake::Task.new(:non_js) do |t|\n    t.profile = \"webrat\"\n  end\n\n  Cucumber::Rake::Task.new(:selenium) do |t|\n    t.profile = \"selenium\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding OpenEJB Dependency for Java/Kotlin\nDESCRIPTION: Demonstrates how to add the OpenEJB dependency to a Maven project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.cucumber</groupId>\n    <artifactId>cucumber-openejb</artifactId>\n    <version>{{% version \"cucumberjvm\" %}}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Feature File with @wip Tags Example\nDESCRIPTION: Example of a Cucumber feature file with tagged scenarios. The @wip tag is used to mark work-in-progress scenarios that can be selectively run with 'rake cucumber:wip'.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/ruby.md#2025-04-09_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: .  .  .\n\n  Scenario: A\n\n  @wip\n  Scenario: B\n\n  Scenario: C\n```\n\n----------------------------------------\n\nTITLE: Guarding Cucumber Rake Tasks for Production\nDESCRIPTION: Pattern for safely defining Cucumber rake tasks to avoid errors on production systems where Cucumber might not be installed. This uses a begin-rescue block to provide a graceful fallback if Cucumber isn't available.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/ruby.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\n\nbegin\n  require 'cucumber'\n  require 'cucumber/rake/task'\n\n  Cucumber::Rake::Task.new(:features) do |t|\n    t.cucumber_opts = \"--format pretty\"\n  end\n\n  task features: 'db:test:prepare'\nrescue LoadError\n  desc 'Cucumber rake task not available'\n  task :features do\n    abort 'Cucumber rake task is not available. Be sure to install cucumber as a gem or plugin'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Weld Dependency for Gradle\nDESCRIPTION: Shows how to add the Weld dependency to a Gradle project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_11\n\nLANGUAGE: gradle\nCODE:\n```\ncompile group: 'io.cucumber', name: 'cucumber-weld', version: '{{% version \"cucumberjvm\" %}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in Windows Command Prompt\nDESCRIPTION: This command sets the CUCUMBER_PUBLISH_TOKEN environment variable in Windows. The /M flag makes the change system-wide.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/environment-variables.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsetx /M CUCUMBER_PUBLISH_TOKEN \"some-secret-token\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Cucumber Documentation Page with HTML\nDESCRIPTION: This HTML snippet defines the structure of the Cucumber documentation page. It includes sections for the main title, tool descriptions, and community information. The code uses Bootstrap classes for responsive layout and styling.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<section class=\"band py-6 bg-image-cover  band-full-width-content bg-transparent\" style=\"background-image:url(https://static0.smartbear.co/cucumber/media/images/home/cucumber-home-hero-bg.png?ext=.png);\" id=\"\" data-nav-text=\"\">\n    <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n\n<div class=\"row text-center text-md-left py-4 py-md-6 px-4 px-md-6\">\n<div class=\"col-12 col-md-12\">\n<h1 class=\"text-white font-light text-center\">Cucumber Docs</h1>\n\n<p class=\"h5 text-white anti-aliased text-center\">Executable Specifications\nFree, open source, any platform </p>\n</div>\n</div>\n          </div>\n        </div>\n    </div>\n  </div></section>\n```\n\n----------------------------------------\n\nTITLE: Adding Needle Dependency for Gradle\nDESCRIPTION: Shows how to add the Needle dependency to a Gradle project for dependency injection in Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_13\n\nLANGUAGE: gradle\nCODE:\n```\ncompile group: 'io.cucumber', name: 'cucumber-needle', version: '{{% version \"cucumberjvm\" %}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in Bash or Zsh\nDESCRIPTION: This command exports the CUCUMBER_PUBLISH_TOKEN environment variable in Bash or Zsh shells. It sets the variable for the current session.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/environment-variables.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CUCUMBER_PUBLISH_TOKEN=some-secret-token\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for TODO Page in Cucumber Docs\nDESCRIPTION: This YAML snippet defines the front matter for a TODO page in a Cucumber documentation project. It sets the title of the page to 'TODO' and specifies the menu structure, placing the page under a 'todo' section with a parent of 'nothing'.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/_todo/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: TODO\nmenu:\n  todo:\n    parent: nothing\n---\n```\n\n----------------------------------------\n\nTITLE: Running All Ruby Cucumber Tests\nDESCRIPTION: Simple command to run all Cucumber feature tests in Ruby\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\ncucumber\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation for JavaScript\nDESCRIPTION: Commands to check the installed versions of Node.js and npm in the terminal. This ensures that the JavaScript environment is properly set up for the Cucumber tutorial.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Imperative Style Gherkin Scenario\nDESCRIPTION: Example of Gherkin scenarios written in an imperative style, which focuses on implementation details and specific instructions. This style often requires more maintenance when the UI changes.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/bdd/better-gherkin.md#2025-04-09_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Subscribers see different articles based on their subscription level \n\nScenario: Free subscribers see only the free articles\n  Given users with a free subscription can access \"FreeArticle1\" but not \"PaidArticle1\" \n  When I type \"freeFrieda@example.com\" in the email field\n  And I type \"validPassword123\" in the password field\n  And I press the \"Submit\" button\n  Then I see \"FreeArticle1\" on the home page\n  And I do not see \"PaidArticle1\" on the home page\n\nScenario: Subscriber with a paid subscription can access \"FreeArticle1\" and \"PaidArticle1\"\n  Given I am on the login page\n  When I type \"paidPattya@example.com\" in the email field\n  And I type \"validPassword123\" in the password field\n  And I press the \"Submit\" button\n  Then I see \"FreeArticle1\" and \"PaidArticle1\" on the home page  \n```\n\n----------------------------------------\n\nTITLE: Running Java Cucumber CLI\nDESCRIPTION: Basic command to execute Cucumber's Command-Line Interface Runner in Java\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\njava io.cucumber.core.cli.Main\n```\n\n----------------------------------------\n\nTITLE: Verifying Ruby and Bundler Installation\nDESCRIPTION: Commands to check the installed versions of Ruby and Bundler in the terminal. This confirms that the Ruby environment is correctly set up for the Cucumber tutorial.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nruby -v\nbundle -v\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Feature File in Gherkin\nDESCRIPTION: This snippet demonstrates how to structure a basic Cucumber feature file using Gherkin syntax. It includes a feature description, user story components (In order to, As a, I want), and a simple scenario with Given, When, And, and Then steps.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/bdd/who-does-what.md#2025-04-09_snippet_0\n\nLANGUAGE: Gherkin\nCODE:\n```\nFeature: Explaining Cucumber\n  In order to gain an understanding of the Cucumber testing system\n  As a non-programmer\n  I want to have an overview of Cucumber that is understandable by non-geeks\n\n  Scenario: A worker seeks an overview of Cucumber\n    Given I have a coworker who knows a lot about Cucumber\n    When I ask my coworker to give an overview of how Cucumber works\n    And I listen to their explanation\n    Then I should have a basic understanding of Cucumber\n```\n\n----------------------------------------\n\nTITLE: Running Java Cucumber with Classpath\nDESCRIPTION: Complete command for running Cucumber CLI with classpath and glue code specifications\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\njava -cp \"path/to/each/jar:path/to/compiled/.class/files\" io.cucumber.core.cli.Main /path/to/your/feature/files --glue hellocucumber --glue anotherpackage\n```\n\n----------------------------------------\n\nTITLE: Example Test Results Output\nDESCRIPTION: Sample output showing test execution results when no tests are found.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/10-minute-tutorial.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\n\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\n\nResults :\n\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n```\n\nLANGUAGE: shell\nCODE:\n```\n0 Scenarios\n0 steps\n0m00.000s\n```\n\nLANGUAGE: shell\nCODE:\n```\n0 scenarios\n0 steps\n0m0.000s\n```\n\n----------------------------------------\n\nTITLE: Cucumber Runner with Monochrome Output in Kotlin\nDESCRIPTION: Kotlin test runner configured to use monochrome output formatting. This makes console output more readable by removing ANSI colors and applying consistent formatting.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_80\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example\n\nimport io.cucumber.junit.Cucumber\nimport io.cucumber.junit.CucumberOptions\nimport org.junit.runner.RunWith\n\n@RunWith(Cucumber.class)\n@CucumberOptions(monochrome=true)\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Refactoring Gherkin Steps for Clarity\nDESCRIPTION: This snippet shows how to refactor a Gherkin step that describes multiple actions into separate, more focused steps. It demonstrates the use of 'And' to improve readability when multiple steps use the same keyword.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/bdd/who-does-what.md#2025-04-09_snippet_1\n\nLANGUAGE: Gherkin\nCODE:\n```\n\tWhen I fill in the \"Name\" field and the \"Address\" field\n```\n\nLANGUAGE: Gherkin\nCODE:\n```\n\tWhen I fill in the \"Name\" field\n\tAnd I fill in the \"Address\" field\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Scenarios with Specific Options in Ruby\nDESCRIPTION: Demonstrates how to run a specific scenario by line number and format the output as HTML. Also shows how to run scenarios by name.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\ncucumber features/authenticate_user.feature:44 --format html > features.html\n```\n\nLANGUAGE: shell\nCODE:\n```\ncucumber features --name \"Failed login\"\n```\n\n----------------------------------------\n\nTITLE: Maintaining Consistency in Gherkin Steps\nDESCRIPTION: This snippet illustrates the importance of consistency in Gherkin steps. It shows two ways of expressing the same action and recommends choosing one format to use consistently throughout the scenarios.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/bdd/who-does-what.md#2025-04-09_snippet_2\n\nLANGUAGE: Gherkin\nCODE:\n```\n\tGiven I am logged in\n```\n\nLANGUAGE: Gherkin\nCODE:\n```\n\tGiven I have logged in to the site\n```\n\n----------------------------------------\n\nTITLE: Compiling Java Step Definitions for CLI Execution\nDESCRIPTION: Command to compile Java step definition classes with the required Cucumber JARs in the classpath for command-line execution of Cucumber tests.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\njavac -cp .;<path to cucumber jar folder>/* ./parallel/StepDefs.java\n```\n\n----------------------------------------\n\nTITLE: Overly Implementation-Specific Gherkin Steps\nDESCRIPTION: Example of implementation-specific Gherkin steps that focus too much on how a feature is implemented rather than what it does. This approach creates brittle tests that need updating whenever the UI changes.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/bdd/better-gherkin.md#2025-04-09_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\n  Given I visit \"/login\"\n  When I enter \"Bob\" in the \"user name\" field\n    And I enter \"tester\" in the \"password\" field\n    And I press the \"login\" button\n  Then I should see the \"welcome\" page\n```\n\n----------------------------------------\n\nTITLE: Creating Language-Specific Code Blocks in Markdown\nDESCRIPTION: Demonstrates how to wrap code examples in language-specific blocks using Hugo shortcodes for conditional display based on the selected language.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/contributing-to-documentation.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% block \"ruby\" %}}\nPut this in your `hello.rb`:\n\n```ruby\nputs \"hello\"\n```\n{{% /block %}}\n\n{{% block \"javascript\" %}}\nPut this in your `hello.js`:\n\n```javascript\nconsole.log(\"hello\")\n```\n{{% /block %}}\n\n{{% block \"java\" %}}\nPut this in your `Hello.java`:\n```java\nSystem.out.println(\"hello\")\n```\n\n{{% block \"kotlin\" %}}\nPut this in your `Hello.kt`:\n```kotlin\nprintln(\"hello\")\n```\n{{% /block %}}\n\n{{% block \"scala\" %}}\nPut this in your `Hello.scala`:\n```scala\nprintln(\"hello\")\n```\n{{% /block %}}\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Execution Console Output\nDESCRIPTION: Sample console output showing parallel execution of tests using CLI, with each line displaying the thread ID and the scenario being executed.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/parallel-execution.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nThread ID - 11 - Scenario Outline Row 1 from scenario-outlines feature file.\nThread ID - 14 - Scenario 2 from scenarios feature file.\nThread ID - 12 - Scenario Outline Row 2 from scenario-outlines feature file.\nThread ID - 13 - Scenario 1 from scenarios feature file.\n```\n\n----------------------------------------\n\nTITLE: Step Definition Examples using Regex and Cucumber Expressions\nDESCRIPTION: Comparison between regex-based and Cucumber expression-based step definitions, showing date and calculator examples.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/faq.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Given(\"^today is ([0-9]{4}-[0-9]{2}-[0-9]{2})$\")\npublic void today_is(Date date) {\n    calculator = new DateCalculator(date);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@When(\"I add {int} and {int}\")\npublic void adding(int arg1, int arg2) {\n    calc.push(arg1);\n    calc.push(arg2);\n    calc.push(\"+\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Language-Specific Text Fragments in Markdown\nDESCRIPTION: Shows how to use shortcodes to display text fragments conditionally based on the selected programming language.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/contributing-to-documentation.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThe preferred build tool is\n{{% text \"ruby\" %}}Rake{{% /text %}}\n{{% text \"javascript\" %}}Yarn{{% /text %}}\n{{% text \"java,kotlin,scala\" %}}Maven{{% /text %}}.\n```\n\n----------------------------------------\n\nTITLE: Using Behavior-Focused Gherkin Steps\nDESCRIPTION: Example of a concise, behavior-focused Gherkin step that describes what happens rather than how it happens. This approach focuses on the functional requirement rather than implementation details.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/bdd/better-gherkin.md#2025-04-09_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nWhen \"Bob\" logs in\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber with Environment Variables in Ruby\nDESCRIPTION: This snippet shows how to run Cucumber with environment variables from the command line in Ruby. It demonstrates passing a custom environment variable 'FOO' with a value 'BAR' to Cucumber.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/configuration.md#2025-04-09_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ncucumber FOO=BAR --format progress features\n```\n\n----------------------------------------\n\nTITLE: Gherkin Step Example\nDESCRIPTION: Example of writing behavior-focused Gherkin steps that avoid implementation details.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/faq.md#2025-04-09_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nThen the user will be notified\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Options in Java/Kotlin\nDESCRIPTION: Example of configuring the glue path in Cucumber using CucumberOptions annotation to specify package paths for step definitions.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/faq.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@CucumberOptions(glue = {\"<package>\", \"<package>\", \"<etc>\"})\npublic class RunCucumberTest{}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@CucumberOptions(glue = [\"<package>\", \"<package>\", \"<etc>\"])\nclass RunCucumberTest\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example - Kotlin Implementation\nDESCRIPTION: Directory structure showing feature-coupled step definitions in Kotlin.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfeatures/\n+--edit_work_experience.feature\n+--edit_languages.feature\n+--edit_education.feature\n+--steps/\n   +--edit_work_experience_steps.kt\n   +--edit_languages_steps.kt\n   +--edit_education_steps.kt\n```\n\n----------------------------------------\n\nTITLE: Defining SPI for Custom UUID Generator\nDESCRIPTION: Defines the UUID generator as a Service Provider Interface (SPI) by creating a file in the META-INF/services directory containing the fully qualified class name of the custom generator.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/state.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nmypackage.mysubpackage.MyUuidGenerator\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example - JavaScript Implementation\nDESCRIPTION: Directory structure showing feature-coupled step definitions in JavaScript.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfeatures/\n+--edit_work_experience.feature\n+--edit_languages.feature\n+--edit_education.feature\n+--steps/\n   +--edit_work_experience_steps.js\n   +--edit_languages_steps.js\n   +--edit_education_steps.js\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeStep Hooks in Scala\nDESCRIPTION: BeforeStep hooks are invoked before a step. This snippet shows how to implement BeforeStep hooks in Scala.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/api.md#2025-04-09_snippet_22\n\nLANGUAGE: scala\nCODE:\n```\nBeforeStep { scenario: Scenario =>\n    // doSomething\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example - Ruby Implementation\nDESCRIPTION: Directory structure showing feature-coupled step definitions in Ruby.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/guides/anti-patterns.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfeatures/\n+--edit_work_experience.feature\n+--edit_languages.feature\n+--edit_education.feature\n+--steps/\n   +--edit_work_experience_steps.rb\n   +--edit_languages_steps.rb\n   +--edit_education_steps.rb\n```\n\n----------------------------------------\n\nTITLE: Gherkin Rule Level Background Example\nDESCRIPTION: Demonstrates Background usage within a Rule context for overdue tasks.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/reference.md#2025-04-09_snippet_7\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Overdue tasks\n  Let users know when tasks are overdue, even when using other\n  features of the app\n\n  Rule: Users are notified about overdue tasks on first use of the day\n    Background:\n      Given I have overdue tasks\n\n    Example: First use of the day\n      Given I last used the app yesterday\n      When I use the app\n      Then I am notified about overdue tasks\n\n    Example: Already used today\n      Given I last used the app earlier today\n      When I use the app\n      Then I am not notified about overdue tasks\n```\n\n----------------------------------------\n\nTITLE: Updating Gherkin Internationalization Table Commands in Shell\nDESCRIPTION: Commands for updating the Gherkin internationalization table. First, 'yarn upgrade' updates @cucumber/gherkin to get the latest gherkin-languages.json file. Then, 'make layouts/shortcodes/gherkin-i18n-table.html' generates the updated HTML table based on the updated language definitions.\nSOURCE: https://github.com/cucumber/docs/blob/main/layouts/shortcodes/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn upgrade\nmake layouts/shortcodes/gherkin-i18n-table.html \n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the CWT Cucumber documentation page, specifying metadata like title, programming language, implementation status and navigation weight.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/cwt-cucumber.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: cwt-cucumber\nsubtitle: C++\nsvg: installation/cplusplus.svg\nimplementation: unofficial\nweight: 1313\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Blog/Podcast Page with YAML Frontmatter\nDESCRIPTION: YAML frontmatter that specifies the configuration for the Cucumber Blog and Podcast page. It sets the title, subtitle, links to an external URL, and defines the page's weight (order) in navigation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/blog.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Cucumber Blog / Podcast\nsubtitle: Keep up with the latest news\nexternal_url: https://cucumber.io/blog\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Cucumber.ml with Dune\nDESCRIPTION: Commands for building and installing the Cucumber.ml package into your local Opam repository. This uses the Dune build system to compile and install the package, making it available for use in OCaml projects.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/installation/ocaml.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndune build && dune install\n```\n\n----------------------------------------\n\nTITLE: Defining Polyglot Page Support in YAML Front Matter\nDESCRIPTION: Specifies which programming languages should be supported on a page, enabling conditional display of language-specific content.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/contributing-to-documentation.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolyglot:\n- java\n- javascript\n- ruby\n- kotlin\n- scala\n- dotnet\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the sponsors page, defining title, subtitle, weight, menu placement and icon class.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/sponsors/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Sponsors\nsubtitle: Financial supporters of the Cucumber contributors\nweight: 1180\nmenu: main\niconClass: fas fa-money-bill-alt\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Cucumber Docs\nDESCRIPTION: YAML configuration block defining metadata for the contributing documentation page, including supported programming languages and page weight.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/community/contributing.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Contributing\nsubtitle: Help us make Cucumber better\npolyglot:\n - java\n - javascript\n - ruby\n - kotlin\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Cucumber Professional Services Page\nDESCRIPTION: YAML front matter block that defines metadata for a documentation page about Cucumber Professional Services. It specifies the title, subtitle, weight (for ordering), menu placement, and an icon class to be used on the page.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/professional/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Professional Services\nsubtitle: Training, videos and books\nweight: 1122\nmenu: main\niconClass: far fa-comments-dollar\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Cucumber Training Page\nDESCRIPTION: YAML frontmatter metadata block defining properties for the Cucumber School online training page, including title, subtitle, card image path, external URL and navigation weight.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/professional/school.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Online training\nsubtitle: Become a Cucumber expert at your own pace with Cucumber School\ncard_image: /img/cucumber-school-black-128.png\nexternal_url: https://cucumber.io/school\nweight: 6\n---\n```\n\n----------------------------------------\n\nTITLE: Integrating OpenCollective Banner Script for Cucumber Sponsors\nDESCRIPTION: Script tag that loads the OpenCollective banner to display Cucumber project sponsors and financial supporters.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/sponsors/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://opencollective.com/cucumber/banner.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Documentation Page Front Matter in YAML\nDESCRIPTION: This YAML front matter block configures metadata for a Cucumber documentation page. It sets the title, subtitle, weight in the navigation menu, menu placement, and icon class for display purposes.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/cucumber/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Cucumber\nsubtitle: Technical documentation\nweight: 1130\nmenu: main\niconClass: far fa-cogs\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Cucumber Tools Documentation\nDESCRIPTION: This YAML snippet defines the frontmatter for a documentation page about Cucumber tools. It specifies the title, subtitle, weight for ordering, menu placement, and an icon class.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/tools/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Tools\nsubtitle: Simplify your work with Cucumber power tools\nweight: 1180\nmenu: main\niconClass: far fa-tools\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Book Cards in Markdown with Hugo Shortcodes\nDESCRIPTION: This snippet demonstrates how to create a responsive grid of book cards using Hugo shortcodes and Bulma CSS framework columns. Each card includes a title, image, link, and description of a book related to BDD and Cucumber.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/professional/books.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"columns\">\n  <div class=\"column is-one-third\">\n     {{% card \n         title=\"Discovery\"\n         image=\"/img/book-discovery.png\" \n         link=\"https://bddbooks.com/\"\n     %}}\nThis practical guide by Gáspár Nagy and Seb Rose explains good collaboration techniques, illustrated by concrete examples.\n     {{% /card %}}\n  </div>\n  <div class=\"column is-one-third\">\n    {{% card \n        title=\"The Cucumber Book\"\n        image=\"/img/book-cucumber-book.jpg\" \n        link=\"https://www.amazon.com/Cucumber-Book-2e-Matt-Wynne/dp/1680502387\"\n    %}}\nMatt Wynne and Aslak Hellesøy show you how to express your customers' wild ideas as a set of clear, executable specifications that everyone on the team can read.\n    {{% /card %}}\n  </div>\n  <div class=\"column is-one-third\">\n    {{% card \n        title=\"BDD in Action\"\n        image=\"/img/book-bdd-in-action.jpg\" \n        link=\"https://www.manning.com/books/bdd-in-action\"\n    %}}\nBDD in Action by John Ferguson Smart teaches you Behavior-Driven Development and shows you how to integrate it into your existing development process.\n    {{% /card %}}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining the title and subtitle for Gherkin's localization documentation.\nSOURCE: https://github.com/cucumber/docs/blob/main/content/docs/gherkin/languages.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Localisation\nsubtitle: \"Languages in which you can write\"\n---\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Table for Gherkin Dialects using jq\nDESCRIPTION: This jq script transforms Gherkin dialect data into an HTML structure. It creates a collapsible panel for each dialect, containing a table that compares English Gherkin keywords with their equivalents in the target language. The script sorts dialects, handles HTML escaping, and structures the output with proper nesting.\nSOURCE: https://github.com/cucumber/docs/blob/main/layouts/shortcodes/gherkin-i18n-table-jq.txt#2025-04-09_snippet_0\n\nLANGUAGE: jq\nCODE:\n```\n. as $root\n| (\n  [ \n    to_entries | sort_by(.value.name)[]\n    | [\n        \"  <a class=\\\"panel-block\\\" data-target=\\\"#gherkin-dialect-\", (.key|@html), \"-content\\\">\n\", (.value.name|@html), \" (\", (.key|@html), \")\", \"</a>\n\",\n        \"  <div id=\\\"gherkin-dialect-\", (.key|@html), \"-content\\\" class=\\\"panel-block collapsed\\\">\n\",\n        \"   <table class=\\\"table is-size-6\\\">\n\",\n        \"     <thead>\n\",\n        \"      <tr>\n\",\n        \"       <th>English Keyword</th>\n\",\n        \"       <th>\", (.value.name|@html), \" equivalent(s)</th>\n\",\n        \"      </tr>\n\",\n        \"     </thead>\n\",\n        \"     <tbody>\n\"\n      ] + (\n          [ .value\n            | {\"feature\",\"background\",\"scenario\",\"scenarioOutline\",\"examples\",\"given\",\"when\",\"then\",\"and\",\"but\",\"rule\"}\n            | to_entries[]\n            | \"       <tr>\n\",\n              \"         <td><code>\", ([ .key ] | add), \"</code></th>\n\",\n              \"         <td>\", ([ .value[] | \"<code>\", @html, \"</code><br>\"] | add), \"</td>\n\",\n              \"       </tr>\n\"\n          ]\n      ) + [\n        \"     </tbody>\n\",\n        \"   </table>\n\",\n        \"  </div>\n\"\n      ]\n    | add\n  ]\n  | add\n  )\n| \"<div class=\\\"panel collapsible\\\">\n\"\t\n+   .\n+ \"</div>\n\"\n```\n\n----------------------------------------\n\nTITLE: Building CSS from SASS using Yarn\nDESCRIPTION: Commands to install dependencies and rebuild the cucumber.css file from SASS source. First installs required node modules with yarn, then builds the CSS file.\nSOURCE: https://github.com/cucumber/docs/blob/main/themes/cucumber-hugo/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn        # install dependencies\nyarn build  # rebuild cucumber.css\n```"
  }
]