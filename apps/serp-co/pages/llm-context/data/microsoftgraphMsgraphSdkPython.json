[
  {
    "owner": "microsoftgraph",
    "repo": "msgraph-sdk-python",
    "content": "TITLE: Creating a basic Graph client with AuthorizationCodeCredential in Python\nDESCRIPTION: Creates a default Graph client using the AuthorizationCodeCredential for authentication. This client connects to the standard Microsoft Graph API endpoint and uses default HTTP configurations.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import AuthorizationCodeCredential\nfrom msgraph import GraphServiceClient\n\ncredentials = AuthorizationCodeCredential(\n    tenant_id: str,\n    client_id: str,\n    authorization_code: str,\n    redirect_uri: str\n)\nscopes = ['User.Read', 'Mail.ReadWrite']\nclient = GraphServiceClient(credentials=credentials, scopes=scopes)\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data from Microsoft Graph\nDESCRIPTION: Complete example demonstrating how to fetch a user's data using Microsoft Graph API with async/await pattern.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom azure.identity.aio import ClientSecretCredential\nfrom msgraph import GraphServiceClient\n\ncredential = ClientSecretCredential(\n    'tenant_id',\n    'client_id',\n    'client_secret'\n)\nscopes = ['https://graph.microsoft.com/.default']\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n\n# GET /users/{id | userPrincipalName}\nasync def get_user():\n    user = await client.users.by_user_id('userPrincipalName').get()\n    if user:\n        print(user.display_name)\nasyncio.run(get_user())\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Device Code Flow in Microsoft Graph Python SDK\nDESCRIPTION: This snippet demonstrates how to use the Device Code Flow to authenticate with Microsoft Graph. It creates a GraphServiceClient using DeviceCodeCredential, then retrieves and prints user information.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/authentication_samples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import DeviceCodeCredential\nfrom msgraph import GraphServiceClient\n\n# Create a credential object. Used to authenticate requests\ncredential = DeviceCodeCredential(\n    client_id='CLIENT_ID',\n    tenant_id='TENANT_ID',\n    )\n\nscopes = [\"User.Read\"]\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n\n# GET A USER USING THE USER ID (GET /users/{id})\nasync def get_user():\n    user = await client.users_by_id('USER_ID').get()\n    if user:\n        print(user.user_principal_name, user.display_name, user.id)\nasyncio.run(get_user())\n```\n\n----------------------------------------\n\nTITLE: Creating GraphServiceClient with Application Access\nDESCRIPTION: Initializes GraphServiceClient using ClientSecretCredential for application-level access.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import ClientSecretCredential\nfrom msgraph import GraphServiceClient\n\ncredentials = ClientSecretCredential(\n    'TENANT_ID',\n    'CLIENT_ID',\n    'CLIENT_SECRET',\n)\nscopes = ['https://graph.microsoft.com/.default']\nclient = GraphServiceClient(credentials=credentials, scopes=scopes)\n```\n\n----------------------------------------\n\nTITLE: Creating a Graph client with custom HTTPX AsyncClient in Python\nDESCRIPTION: Demonstrates how to create a Graph client using a custom HTTPX AsyncClient instance. This approach allows for more control over the HTTP client configuration used for Graph API requests.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom msgraph import GraphRequestAdapter\nfrom msgraph_core import GraphClientFactory\n\nhttp_client = GraphClientFactory.create_with_default_middleware(client=httpx.AsyncClient())\nrequest_adapter = GraphRequestAdapter(auth_provider, http_client)\nclient = GraphServiceClient(request_adapter=request_adapter)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Client Secret Credentials Flow in Microsoft Graph Python SDK\nDESCRIPTION: This snippet demonstrates the Client Secret Credentials Flow for authentication with Microsoft Graph. It uses ClientSecretCredential to create a GraphServiceClient and fetch user data.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/authentication_samples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import ClientSecretCredential\nfrom msgraph import GraphServiceClient\n\n# Create a credential object. Used to authenticate requests\ncredential = ClientSecretCredential(\n    tenant_id='TENANT_ID',\n    client_id='CLIENT_ID',\n    client_secret='CLIENT_SECRET'\n)\nscopes = ['https://graph.microsoft.com/.default']\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n\n# GET A USER USING THE USER ID (GET /users/{id})\nasync def get_user():\n    user = await client.users.by_user_id('USER_ID').get()\n    if user:\n        print(user.user_principal_name, user.display_name, user.id)\nasyncio.run(get_user())\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceCodeCredential Authentication\nDESCRIPTION: Sets up authentication using DeviceCodeCredential for delegated permissions.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import DeviceCodeCredential\n\ncredential = DeviceCodeCredential(\"client_id\",\n                                  \"tenant_id\")\nscopes = ['https://graph.microsoft.com/.default']\n```\n\n----------------------------------------\n\nTITLE: Retrieving current user information from Microsoft Graph API in Python\nDESCRIPTION: Fetches information about the currently authenticated user using the /me endpoint. This requires delegated permissions and demonstrates a basic GET request with the Graph client.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_me():\n    me = await client.me.get()\n    if me:\n        print(me.user_principal_name, me.display_name, me.id)\nasyncio.run(get_me())\n```\n\n----------------------------------------\n\nTITLE: Retrieving a user's messages from Microsoft Graph API in Python\nDESCRIPTION: Fetches a collection of messages from a specific user's mailbox. The response is deserialized into Message objects provided by the SDK, requiring appropriate mailbox access permissions.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def get_user_messages():\n    messages = await (client.users.by_user_id('USER_ID').messages.get())\n    if messages and messages.value:\n        for msg in messages.value:\n            print(msg.subject, msg.id, msg.from_)\nasyncio.run(get_user_messages())\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Interactive Browser Flow in Microsoft Graph Python SDK\nDESCRIPTION: This snippet shows how to use the Interactive Browser Flow for authentication with Microsoft Graph. It creates a GraphServiceClient using InteractiveBrowserCredential and retrieves user information.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/authentication_samples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom azure.identity import InteractiveBrowserCredential\nfrom msgraph import GraphServiceClient\n\n# Create a credential object. Used to authenticate requests \ncredentials = InteractiveBrowserCredential(\n    client_id=os.getenv('client_id'),\n    tenant_id=os.getenv('tenant_id'),\n)\n\nscopes = [\"User.Read\"]\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n\n# GET A USER USING THE USER ID (GET /users/{id})\nasync def get_user():\n    user = await client.users_by_id('USER_ID').get()\n    if user:\n        print(user.user_principal_name, user.display_name, user.id)\nasyncio.run(get_user())\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific User and Transitive Memberships in Microsoft Graph with Python\nDESCRIPTION: Contains two asynchronous functions: one to retrieve a specific user by ID and another to fetch all transitive memberships (groups) for a user. The second function demonstrates using multiple sequential API calls to resolve group details.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/users_samples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_user():\n    user = await client.users.by_user_id('USER_ID').get()\n    if user:\n        print(user.user_principal_name, user.display_name, user.id)\nasyncio.run(get_user())\n\n# LIST ALL TRANSITIVE MEMBERSHIPS OF A USER (GET /users/{id}/transitiveMemberOf)\n\nasync def get_memberships():\n    memberships = await client.users.by_user_id('USER_ID').transitive_member_of.get()\n    if memberships and memberships.value:\n        for membership in memberships.value:\n            obj = await client.directory_objects.by_directory_object_id(membership.id).get()\n            if obj and obj.odata_type == '#microsoft.graph.group':\n                group = await client.groups.by_group_id(obj.id).get()\n                if group:\n                    print(group.id, group.group_types, group.display_name, group.mail)\nasyncio.run(get_memberships())\n```\n\n----------------------------------------\n\nTITLE: Searching for Users by Name in Microsoft Graph with Python\nDESCRIPTION: Implements a comprehensive user search function that queries Microsoft Graph using a variety of user attributes. It demonstrates using request configuration, headers, and query parameters for advanced search functionality. Uses AzureCliCredential for authentication.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/users_samples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import AzureCliCredential\nfrom msgraph import GraphServiceClient\nfrom msgraph.generated.users.users_request_builder import UsersRequestBuilder\n\n\nasync def find_user(user_name: str, client: GraphServiceClient) -> None:\n    # The query used here is the same when searching for users in Azure AD via web console\n    query_params = UsersRequestBuilder.UsersRequestBuilderGetQueryParameters(\n        search=[\n            f'(\"displayName:{user_name}\" OR \"mail:{user_name}\" OR \"userPrincipalName:{user_name}\" OR \"givenName:{user_name}\" OR \"surName:{user_name}\" OR \"otherMails:{user_name}\")'\n        ],\n    )\n    request_configuration = (\n        UsersRequestBuilder.UsersRequestBuilderGetRequestConfiguration(\n            query_parameters=query_params,\n        )\n    )\n    request_configuration.headers.add(\"ConsistencyLevel\", \"eventual\")\n\n    response = await client.users.get(request_configuration=request_configuration)\n    if response.value:\n        user = response.value[0]\n        print(\n            f\"Found user for {user_name} in the Azure AD with user principal name {user.user_principal_name} and display name {user.display_name}\"\n        )\n    else:\n        print(f\"{user_name} user in the Azure AD not found\")\n\n\ndef main():\n    # Use cli credentials to authenticate against Azure\n    # Before running script do `az login`\n    credential = AzureCliCredential()\n    scopes = [\"https://graph.microsoft.com/.default\"]\n    client = GraphServiceClient(credentials=credential, scopes=scopes)\n    asyncio.run(find_user(\"john\", client))\n\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Sending email via Microsoft Graph API with delegated permissions in Python\nDESCRIPTION: Creates and sends an email using the Microsoft Graph API with delegated user permissions. The example builds an email message with sender, recipient, subject and body, and demonstrates InteractiveBrowserCredential for authentication.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom msgraph import GraphServiceClient\n\nfrom msgraph.generated.users.item.send_mail.send_mail_post_request_body import SendMailPostRequestBody\nfrom msgraph.generated.models.body_type import BodyType\nfrom msgraph.generated.models.message import Message\nfrom msgraph.generated.models.email_address import EmailAddress\nfrom msgraph.generated.models.importance import Importance\nfrom msgraph.generated.models.item_body import ItemBody\nfrom msgraph.generated.models.recipient import Recipient\nfrom msgraph.generated.users.item.messages.messages_request_builder import MessagesRequestBuilder\n\nfrom azure.identity import InteractiveBrowserCredential\n\ncredential = InteractiveBrowserCredential(\n    client_id,\n    authority,\n    tenant_id,\n    redirect_uri\n)\nscopes = ['Mail.Send']\n# alternatively, use \"Mail.Send.Shared\" for a shared mailbox.\n\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n\nasync def send_mail():\n    \n    sender = EmailAddress()\n    sender.address = 'john.doe@outlook.com'\n    sender.name = 'John Doe'\n    \n    from_recipient = Recipient()\n    from_recipient.email_address = sender\n    recipients = []\n\n    recipient_email = EmailAddress()\n    recipient_email.address = 'jane.doe@outlook.com'\n    recipient_email.name = 'Jane Doe'\n    \n    to_recipient = Recipient()\n    to_recipient.email_address = recipient_email\n    recipients.append(to_recipient) \n\n    email_body = ItemBody()\n    email_body.content = 'Dummy content'\n    email_body.content_type = BodyType.Text\n    \n    message = Message()\n    message.subject = 'Test Email'\n    message.from_escaped = from_recipient\n    message.to_recipients = recipients\n    message.body = email_body\n    \n    request_body = SendMailPostRequestBody()\n    request_body.message = message\n    response = await client.me.send_mail.post(request_body)\nasyncio.run(send_mail())\n```\n\n----------------------------------------\n\nTITLE: Sending email from shared mailbox via Microsoft Graph API in Python\nDESCRIPTION: Demonstrates sending an email from a shared mailbox to which the authenticated user has access. This requires the Mail.Send.Shared permission and shows how to set both sender (authenticated user) and from (shared mailbox) properties.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom msgraph import GraphServiceClient\n\nfrom msgraph.generated.models.body_type import BodyType\nfrom msgraph.generated.models.message import Message\nfrom msgraph.generated.models.email_address import EmailAddress\nfrom msgraph.generated.models.item_body import ItemBody\nfrom msgraph.generated.models.recipient import Recipient\nfrom msgraph.generated.users.item.send_mail.send_mail_post_request_body import SendMailPostRequestBody\n\nfrom azure.identity import InteractiveBrowserCredential\n\n# Create a credential object. Used to authenticate requests\ncredential = InteractiveBrowserCredential(\n    client_id,\n    authority, # e.g. https://login.microsoftonline.com/ for public Azure cloud\n    tenant_id,\n    redirect_uri # as configured in your App Registration > Authentication > Platform: Mobile and desktop applications\n)\nscopes = [\"Mail.Send.Shared\"]\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n\n\nasync def send_mail():\n    sender = EmailAddress()\n    sender.address = 'john.doe@outlook.com'\n    sender.name = 'John Doe' # skip to use default\n\n    sender_recipient = Recipient()\n    sender_recipient.email_address = sender\n\n    from_mailbox = EmailAddress()\n    from_mailbox.address = 'your-shared-mailbox@outlook.com'\n    # skip from_mailbox.name = ... to use the default display name of the shared mailbox\n\n    from_recipient = Recipient()\n    from_recipient.email_address = from_mailbox\n\n    recipients = []\n    recipient_email = EmailAddress()\n    recipient_email.address = 'jane.doe@outlook.com'\n    recipient_email.name = 'Jane Doe'\n\n    to_recipient = Recipient()\n    to_recipient.email_address = recipient_email\n    recipients.append(to_recipient)\n\n    email_body = ItemBody()\n    email_body.content = 'Dummy content'\n    email_body.content_type = BodyType.Text\n\n    message = Message()\n    message.subject = 'Test Email'\n    message.sender = sender_recipient\n    message.from_ = from_recipient\n    message.to_recipients = recipients\n    message.body = email_body\n\n    request_body = SendMailPostRequestBody()\n    request_body.message = message\n    response = await client.me.send_mail.post(request_body)\nasyncio.run(send_mail())\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination for Group Members Retrieval using Microsoft Graph SDK in Python\nDESCRIPTION: This code snippet demonstrates how to fetch group members using pagination. It retrieves the initial batch of members, then iterates over subsequent pages using the odata_next_link if more than 100 rows are present. The code prints the display name, email, and ID of each member.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# get group members\nmembers = await client.groups.by_group_id(id).members.get()\nif members:\n    print(f\"########## Members:\")\n    for i in range(len(members.value)):\n        print(f\"display_name: {members.value[i].display_name}, mail: {members.value[i].mail}, id: {members.value[i].id}\")\n\n# iterate over result batches > 100 rows\nwhile members is not None and members.odata_next_link is not None:\n    members = await client.groups.by_group_id(id).members.with_url(members.odata_next_link).get()\n    if members:\n        print(f\"########## Members:\")\n        for i in range(len(members.value)):\n            print(f\"display_name: {members.value[i].display_name}, mail: {members.value[i].mail}, id: {members.value[i].id}\")\n```\n\n----------------------------------------\n\nTITLE: Getting raw HTTP response from Microsoft Graph API in Python\nDESCRIPTION: Demonstrates how to get the raw HTTP response instead of the default deserialized objects. This is useful when you need access to the complete response data or headers.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom kiota_abstractions.native_response_handler import NativeResponseHandler\nfrom kiota_http.middleware.options import ResponseHandlerOption\nfrom msgraph.generated.users.item.messages.messages_request_builder import MessagesRequestBuilder\n\nasync def get_user_messages():\n    request_config = MessagesRequestBuilder.MessagesRequestBuilderGetRequestConfiguration(\n        options=[ResponseHandlerOption(NativeResponseHandler())], )\n    messages = await client.users.by_user_id('USER_ID').messages.get(request_configuration=request_config)\n    print(messages.json())\nasyncio.run(get_user())\n```\n\n----------------------------------------\n\nTITLE: Using query parameters with Microsoft Graph API in Python\nDESCRIPTION: Shows how to specify query parameters such as select, skip, and top when making Graph API requests. This example fetches a limited number of messages with only specific fields returned.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom msgraph.generated.users.item.messages.messages_request_builder import MessagesRequestBuilder\n\nasync def get_5_user_messages():\n    query_params = MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters(\n        select=['subject', 'from'], skip = 2, top=5\n    )\n    request_config = MessagesRequestBuilder.MessagesRequestBuilderGetRequestConfiguration(\n        query_parameters=query_params\n    )\n\n    messages = await (client.users.by_user_id('USER_ID')\n                    .messages\n                    .get(request_configuration=request_config))\n    if messages and messages.value:\n        for msg in messages.value:\n            print(msg.subject)\nasyncio.run(get_5_user_messages())\n```\n\n----------------------------------------\n\nTITLE: Using custom request headers with Microsoft Graph API in Python\nDESCRIPTION: Demonstrates how to pass custom request headers when making Graph API calls. This example sets the 'prefer' header to specify the desired body content type for Outlook messages.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/general_samples.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom msgraph.generated.users.item.messages.messages_request_builder import MessagesRequestBuilder\n\nasync def get_user_messages():\n    request_config = MessagesRequestBuilder.MessagesRequestBuilderGetRequestConfiguration(\n    )\n    request_config.headers.add(\"prefer\", \"outlook.body-content-type=text\")\n\n    messages = await (client.users.by_user_id('USER_ID')\n                    .messages\n                    .get(request_configuration=request_config))\n    if messages and messages.value:\n        for msg in messages.value:\n            print(msg.subject, msg.id, msg.from_)\nasyncio.run(get_user_messages())\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Microsoft Graph API Calls\nDESCRIPTION: Demonstrates how to handle API errors using try-catch blocks when making requests to Microsoft Graph.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom kiota_abstractions.api_error import APIError\nasync def get_user():\n    try:\n        user = await client.users.by_user_id('userID').get()\n        print(user.user_principal_name, user.display_name, user.id)\n    except APIError as e:\n        print(f'Error: {e.error.message}')\nasyncio.run(get_user())\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in msgraph-core vs msgraph-sdk\nDESCRIPTION: Illustrates the changes in authentication setup between msgraph-core and msgraph-sdk. The new SDK introduces an AuthenticationProvider that handles token management, using azure-identity for credentials.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/UPGRADING.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# msgraph-core\nfrom azure.identity import ClientSecretCredential\nfrom msgraph.core import GraphClient\n\ncredential = ClientSecretCredential(tenant_id: str, client_id: str, client_secret: str)\n\n\n# msgraph-sdk\nfrom azure.identity.aio import ClientSecretCredential # async credentials only\nfrom kiota_authentication_azure.azure_identity_authentication_provider import AzureIdentityAuthenticationProvider\n\ncredential=ClientSecretCredential(tenant_id: str, client_id: str, client_secret: str)\nauth_provider = AzureIdentityAuthenticationProvider(credential)\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client in msgraph-core vs msgraph-sdk\nDESCRIPTION: Shows the difference in client initialization between msgraph-core and msgraph-sdk. The new SDK introduces GraphRequestAdapter and GraphServiceClient for more flexible configuration and strongly typed models.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/UPGRADING.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# msgraph-core\nfrom msgraph.core import GraphClient\n\nclient = GraphClient(credential=credential)\n\n\n# msgraph-sdk\nfrom msgraph import GraphRequestAdapter\nfrom msgraph import GraphServiceClient\n\nadapter = GraphRequestAdapter(auth_provider)\nclient = GraphServiceClient(request_adapter)\n```\n\n----------------------------------------\n\nTITLE: Comparing Request Patterns in msgraph-core and msgraph-sdk\nDESCRIPTION: Demonstrates the difference between making requests in msgraph-core using raw URLs and the new fluent request builder pattern in msgraph-sdk. The new pattern leverages method chaining and IDE autocomplete.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/UPGRADING.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# msgraph-core\nresp =client.get('/users/userId/messages')\n\n# msgraph-sdk\nreq = client.users.by_user_id('userId').messages.get()\nresp = asyncio.run(req)\n```\n\n----------------------------------------\n\nTITLE: Comparing Request Mechanism in msgraph-core and msgraph-sdk\nDESCRIPTION: Demonstrates the differences in making requests between msgraph-core and msgraph-sdk. The new SDK uses asynchronous requests by default, requires RequestConfiguration for request setup, and provides strongly typed responses.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/UPGRADING.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# msgraph-core\nresult = client.get('/users/userId/messages',params={'$select': 'subject','$top': '5', '$skip': '1'})\nfor message in result.json()['value']:\n    print message['subject']\n\n# msgraph-sdk\nquery_params = MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters(\n    select=['subject',], skip=1, top=5\n)\nrequest_config = MessagesRequestBuilder.MessagesRequestBuilderGetRequestConfiguration(\n    query_parameters=query_params,\n)\n\nmessages = asyncio.run(client.users.by_user_id('userId').messages.get(request_configuration=request_config))\nfor msg in messages.value:\n    print(msg.subject)\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in msgraph-sdk\nDESCRIPTION: Shows how to handle exceptions in msgraph-sdk. The SDK throws an APIError for any 4xx or 5xx responses from the Graph API, which can be caught and handled appropriately.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/UPGRADING.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom kiota_abstractions.api_error import APIError\ntry:\n    users = asyncio.run(client.users().get())\n\nexcept APIError as e {\n    return f\"Exception occurred: {e.error.message}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft Graph API Client with Client Secret Authentication in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Microsoft Graph API client using ClientSecretCredential authentication. It sets up tenant, client, and secret credentials along with the necessary scopes for API access.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/applications_samples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import ClientSecretCredential\nfrom msgraph import GraphServiceClient\n\n# Create a credential object. Used to authenticate requests\ncredential = ClientSecretCredential(\n    tenant_id='TENANT_ID',\n    client_id='CLIENT_ID',\n    client_secret='CLIENT_SECRET',\n)\nscopes = ['https://graph.microsoft.com/.default']\n\n# Create an API client with the credentials and scopes\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n```\n\n----------------------------------------\n\nTITLE: Listing Applications in a Tenant with Microsoft Graph API in Python\nDESCRIPTION: This snippet shows how to retrieve and list all applications registered in an Azure AD tenant using the Microsoft Graph API. It makes an asynchronous GET request to the /applications endpoint and prints the ID of each application.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/applications_samples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def get_applications():\n    apps = await client.applications.get()\n    if apps and apps.value:\n        for app in apps.value:\n            print(app.id)\nasyncio.run(get_applications())\n```\n\n----------------------------------------\n\nTITLE: Creating a Microsoft Graph API Client with Client Secret Authentication in Python\nDESCRIPTION: Initializes a GraphServiceClient object using ClientSecretCredential for authentication. The client can be used to make authenticated requests to Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/users_samples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import ClientSecretCredential\nfrom msgraph import GraphServiceClient\n\n# Create a credential object. Used to authenticate requests\ncredential = ClientSecretCredential(\n    tenant_id='TENANT_ID',\n    client_id='CLIENT_ID',\n    client_secret='CLIENT_SECRET'\n)\nscopes = ['https://graph.microsoft.com/.default']\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Users from a Microsoft Graph Tenant in Python\nDESCRIPTION: Defines an asynchronous function to fetch all users from a Microsoft Graph tenant using the GET /users endpoint. It iterates through the returned users and prints their ID, display name, and email.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/users_samples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def get_users():\n    users = await client.users.get()\n    if users and users.value:\n        for user in users.value:\n            print(user.id, user.display_name, user.mail)\nasyncio.run(get_users())\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph API Client in Python\nDESCRIPTION: This snippet demonstrates how to create a GraphServiceClient using ClientSecretCredential for authentication. It sets up the necessary credentials and scopes for accessing the Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import ClientSecretCredential\nfrom msgraph import GraphServiceClient\n\n# Create a credential object. Used to authenticate requests\ncredential = ClientSecretCredential(\n    tenant_id='TENANT_ID',\n    client_id='CLIENT_ID',\n    client_secret='CLIENT_SECRET'\n)\nscopes = ['https://graph.microsoft.com/.default']\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n```\n\n----------------------------------------\n\nTITLE: Listing All Groups in Tenant using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves all groups in the tenant using the Microsoft Graph API. It iterates through the groups and prints their IDs and display names.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def get_groups():\n    groups = await client.groups.get()\n    if groups and groups.value:\n        for group in groups.value:\n            print(group.id, group.display_name)\nasyncio.run(get_groups())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Group Details using Microsoft Graph API in Python\nDESCRIPTION: This function fetches details of a specific group using its ID. It prints the group's ID, display name, description, group types, and security status.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_group():\n    group = await client.groups.by_group_id('GROUP_ID').get()\n    if group:\n        print(group.id, group.display_name, group.description, group.group_types,\n            group.security_enabled)\nasyncio.run(get_group())\n```\n\n----------------------------------------\n\nTITLE: Listing Group Members using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves all members of a specific group and prints their display names and email addresses. It uses the group's ID to fetch members and then retrieves user details for each member.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def get_group_members(): \n    members = await client.groups.by_group_id('GROUP_ID').members.get()\n    if members and members.value:\n        for member in members.value:\n            user = await client.users.by_user_id(member.id).get()\n            if user:\n                print(user.display_name, user.mail)\nasyncio.run(get_group_members())\n```\n\n----------------------------------------\n\nTITLE: Listing Group Team SharePoint Sites using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves all SharePoint sites associated with a specific group's team. It prints the site ID and web URL for each site found.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def get_group_sites():\n    sites = await client.groups.by_group_id('GROUP_ID').sites.get()\n    if sites and sites.value:\n        for site in sites.value:\n            print(site.id, site.web_url)\nasyncio.run(get_group_sites())\n```\n\n----------------------------------------\n\nTITLE: Listing Group's Transitive Members using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves all transitive members of a group, including nested group members. It filters for user objects and prints their ID, display name, and email address.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def get_group_transitive_members():\n    members = await client.groups.by_group_id('GROUP_ID').transitive_members.get()\n    if members and members.value:\n        for member in members.value:\n            obj = await client.directory_objects.by_directory_object_id(member.id).get()\n            if obj and obj.odata_type == '#microsoft.graph.user':\n                user = await client.users.by_user_id(obj.id).get()\n                if user:\n                    print(user.id, user.display_name, user.mail)\nasyncio.run(get_group_transitive_members())\n```\n\n----------------------------------------\n\nTITLE: Listing Group Drives using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves all drives associated with a specific group. It prints the drive ID and name for each drive found.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def get_group_drives():\n    drives = await client.groups.by_group_id('GROUP_ID').drives.get()\n    if drives and drives.value:\n        for drive in drives.value:\n            print(drive.id, drive.name)\nasyncio.run(get_group_drives())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Group Drive using Microsoft Graph API in Python\nDESCRIPTION: This function fetches details of a specific drive associated with a group. It prints the drive's ID, type, name, web URL, and items.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/groups_samples.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def get_group_drive():\n    drive = await client.groups.by_group_id(\n        'GROUP_ID'\n        ).drives.by_drive_id(\n            'DRIVE_ID'\n            ).get()\n    if drive:\n        print(drive.id, drive.drive_type, drive.name, drive.web_url, drive.items)\nasyncio.run(get_group_drive())\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft Graph API Client with Azure Identity in Python\nDESCRIPTION: This snippet demonstrates how to create a Microsoft Graph API client using Azure Identity for authentication. It sets up the necessary credentials and scopes for accessing Microsoft Graph services.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/drives_samples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity import ClientSecretCredential\nfrom msgraph import GraphServiceClient \n\n# Create a credential object. Used to authenticate requests\ncredential = ClientSecretCredential(\n    tenant_id='TENANT_ID',\n    client_id='CLIENT_ID',\n    client_secret='CLIENT_SECRET'\n)\nscopes = ['https://graph.microsoft.com/.default']\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n```\n\n----------------------------------------\n\nTITLE: Listing All Drives using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves and prints details of all drives accessible to the authenticated user. It uses the GET /drives endpoint of the Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/drives_samples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def get_drives():\n    drives = await client.drives.get()\n    if drives and drives.value:\n        for drive in drives.value:\n            print(drive.id, drive.drive_type, drive.name, drive.description, drive.web_url)\nasyncio.run(get_drives())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Drive by ID using Microsoft Graph API in Python\nDESCRIPTION: This function fetches and displays details of a specific drive using its ID. It utilizes the GET /drives/{id} endpoint of the Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/drives_samples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_drive():\n    drive = await client.drives.by_drive_id('DRIVE_ID').get()\n    if drive:\n        print(drive.id, drive.drive_type, drive.name, drive.description, drive.web_url)\nasyncio.run(get_drive())\n```\n\n----------------------------------------\n\nTITLE: Listing Items in a Drive using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves and prints details of all items in a specific drive. It uses the GET /drives/{id}/items endpoint of the Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/drives_samples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def get_drive_items():\n    items = await client.drives.by_drive_id('DRIVE_ID').items.get()\n    if items and items.value:\n        for item in items.value:\n            print(item.id, item.name, item.size, item.folder, item.file)\nasyncio.run(get_drive_items())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Item from a Drive using Microsoft Graph API in Python\nDESCRIPTION: This function fetches and displays details of a specific item in a drive using both the drive ID and item ID. It utilizes the GET /drives/{id}/items/{id} endpoint of the Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/drives_samples.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def get_drive_item():\n    item = await client.drives.by_drive_id('DRIVE_ID').items.by_drive_item_id('ITEM_ID').get()\n    if item:\n        print(item.id, item.name, item.size, item.folder, item.file)\nasyncio.run(get_drive_item())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Root Folder of a Drive using Microsoft Graph API in Python\nDESCRIPTION: This function fetches and displays details of the root folder of a specific drive. It uses the GET /drives/{id}/root endpoint of the Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/drives_samples.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def get_drive_root():\n    root = await client.drives.by_drive_id('DRIVE_ID').root.get()\n    if root:\n        print(root.id, root.name, root.folder.child_count, root.root, root.size)\nasyncio.run(get_drive_root())\n```\n\n----------------------------------------\n\nTITLE: Listing Items in Root Folder of a Drive using Microsoft Graph API in Python\nDESCRIPTION: This function retrieves and prints details of all items in the root folder of a specific drive. It utilizes the GET drives/{id}/items/root/children endpoint of the Microsoft Graph API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/drives_samples.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def get_drive():\n    items = await client.drives.by_drive_id('DRIVE_ID').items.by_drive_item_id('root').children.get()\n    if items and items.value:\n        for item in items.value:\n            print(item.id, item.name, item.size, item.folder, item.file)\nasyncio.run(get_drive())\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph SDK Python Package\nDESCRIPTION: Basic pip command to install the Microsoft Graph SDK package.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install msgraph-sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing ClientSecretCredential Authentication\nDESCRIPTION: Sets up authentication using ClientSecretCredential for application permissions with async support.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity.aio import ClientSecretCredential\n\ncredential = ClientSecretCredential(\"tenantID\",\n                                    \"clientID\",\n                                    \"clientSecret\")\nscopes = ['https://graph.microsoft.com/.default']\n```\n\n----------------------------------------\n\nTITLE: Creating GraphServiceClient with Delegated Access\nDESCRIPTION: Initializes GraphServiceClient using DeviceCodeCredential for delegated access.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DeviceCodeCredential\nfrom msgraph import GraphServiceClient\n\ncredentials = DeviceCodeCredential(\n    'CLIENT_ID',\n    'TENANT_ID',\n)\nscopes = ['https://graph.microsoft.com/.default']\nclient = GraphServiceClient(credentials=credentials, scopes=scopes)\n```\n\n----------------------------------------\n\nTITLE: Accessing Current User Data with Delegated Permissions\nDESCRIPTION: Example showing how to access the current user's data using delegated permissions with InteractiveBrowserCredential.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom azure.identity import InteractiveBrowserCredential\nfrom msgraph import GraphServiceClient\n\ncredential = InteractiveBrowserCredential(\n    client_id=os.getenv('client_id'),\n    tenant_id=os.getenv('tenant_id'),\n)\nscopes = [\"User.Read\"]\nclient = GraphServiceClient(credentials=credential, scopes=scopes,)\n\n# GET /me\nasync def me():\n    me = await client.me.get()\n    if me:\n        print(me.display_name)\nasyncio.run(me())\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph Python SDKs\nDESCRIPTION: Shows how to install both msgraph-core and msgraph-sdk using pip. This snippet highlights the difference in package names for the old and new SDKs.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/UPGRADING.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# msgraph-core\npip install msgraph-core\n\n# msgraph-sdk\npip install msgraph-sdk\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Environment Credential Flow in Microsoft Graph Python SDK\nDESCRIPTION: This snippet illustrates the Environment Credential Flow for authentication with Microsoft Graph. It uses EnvironmentCredential to create an asynchronous GraphServiceClient and retrieve user information.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/docs/authentication_samples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom azure.identity.aio import EnvironmentCredential\nfrom msgraph import GraphServiceClient\n\n# Create a credential object. Used to authenticate requests\ncredential = EnvironmentCredential()\nscopes = ['https://graph.microsoft.com/.default']\n\n# Create an API client with the credentials and scopes.\nclient = GraphServiceClient(credentials=credential, scopes=scopes)\n\n# GET A USER USING THE USER ID (GET /users/{id})\nasync def get_user():\n    user = await client.users.by_user_id('USER_ID').get()\n    if user:\n        print(user.user_principal_name, user.display_name, user.id)\nasyncio.run(get_user())\n```\n\n----------------------------------------\n\nTITLE: Version Header Format Markdown\nDESCRIPTION: Example of version header formatting used throughout the changelog\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-python/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.28.0](https://github.com/microsoftgraph/msgraph-sdk-python/compare/v1.27.0...v1.28.0) (2025-04-15)\n```"
  }
]