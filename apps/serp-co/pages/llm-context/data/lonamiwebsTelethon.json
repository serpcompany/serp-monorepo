[
  {
    "owner": "lonamiwebs",
    "repo": "telethon",
    "content": "TITLE: Initializing Telethon Client and Performing Basic Operations\nDESCRIPTION: This comprehensive example demonstrates how to create a Telethon client, get user information, list dialogs, send and receive messages, and handle media files. It uses asynchronous programming patterns, showing common operations like sending markdown-formatted messages and downloading media files.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/quick-start.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient\n\n# Remember to use your own values from my.telegram.org!\napi_id = 12345\napi_hash = '0123456789abcdef0123456789abcdef'\nclient = TelegramClient('anon', api_id, api_hash)\n\nasync def main():\n    # Getting information about yourself\n    me = await client.get_me()\n\n    # \"me\" is a user object. You can pretty-print\n    # any Telegram object with the \"stringify\" method:\n    print(me.stringify())\n\n    # When you print something, you see a representation of it.\n    # You can access all attributes of Telegram objects with\n    # the dot operator. For example, to get the username:\n    username = me.username\n    print(username)\n    print(me.phone)\n\n    # You can print all the dialogs/conversations that you are part of:\n    async for dialog in client.iter_dialogs():\n        print(dialog.name, 'has ID', dialog.id)\n\n    # You can send messages to yourself...\n    await client.send_message('me', 'Hello, myself!')\n    # ...to some chat ID\n    await client.send_message(-100123456, 'Hello, group!')\n    # ...to your contacts\n    await client.send_message('+34600123123', 'Hello, friend!')\n    # ...or even to any username\n    await client.send_message('username', 'Testing Telethon!')\n\n    # You can, of course, use markdown in your messages:\n    message = await client.send_message(\n        'me',\n        'This message has **bold**, `code`, __italics__ and '\n        'a [nice website](https://example.com)!',\n        link_preview=False\n    )\n\n    # Sending a message returns the sent message object, which you can use\n    print(message.raw_text)\n\n    # You can reply to messages directly if you have a message object\n    await message.reply('Cool!')\n\n    # Or send files, songs, documents, albums...\n    await client.send_file('me', '/home/me/Pictures/holidays.jpg')\n\n    # You can print the message history of any chat:\n    async for message in client.iter_messages('me'):\n        print(message.id, message.text)\n\n        # You can download media from messages, too!\n        # The method will return the path where the file was saved.\n        if message.photo:\n            path = await message.download_media()\n            print('File saved to', path)  # printed after download is done\n\nwith client:\n    client.loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing TelegramClient and Handling Events in Python\nDESCRIPTION: This snippet demonstrates how to create a TelegramClient, send a message, download a profile photo, and set up an event handler for new messages containing 'Hello'. It uses the sync version of TelegramClient and the events module.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.sync import TelegramClient, events\n\nwith TelegramClient('name', api_id, api_hash) as client:\n   client.send_message('me', 'Hello, myself!')\n   print(client.download_profile_photo('me'))\n\n   @client.on(events.NewMessage(pattern='(?i).*Hello'))\n   async def handler(event):\n      await event.reply('Hey!')\n\n   client.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Creating a Telegram Client with Telethon\nDESCRIPTION: This snippet demonstrates how to create a TelegramClient instance using Telethon. It requires an api_id and api_hash obtained from Telegram's API development portal.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, events, sync\n\n# These example values won't work. You must get your own api_id and\n# api_hash from https://my.telegram.org, under API Development.\napi_id = 12345\napi_hash = '0123456789abcdef0123456789abcdef'\n\nclient = TelegramClient('session_name', api_id, api_hash)\nclient.start()\n```\n\n----------------------------------------\n\nTITLE: Basic Telethon Authentication\nDESCRIPTION: Basic setup for authenticating with Telegram using Telethon. Requires API ID and hash from my.telegram.org. Uses a context manager to handle client lifecycle.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/signing-in.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient\n\n# Use your own values from my.telegram.org\napi_id = 12345\napi_hash = '0123456789abcdef0123456789abcdef'\n\n# The first parameter is the .session file name (absolute paths allowed)\nwith TelegramClient('anon', api_id, api_hash) as client:\n    client.loop.run_until_complete(client.send_message('me', 'Hello, myself!'))\n```\n\n----------------------------------------\n\nTITLE: Structuring Asynchronous Code in Telethon\nDESCRIPTION: This code demonstrates the recommended pattern for structuring asynchronous code when using Telethon. It shows how to organize code with async functions, call them properly, and maintain the asynchronous flow while keeping code readable and maintainable.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/quick-start.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = ...\n\nasync def do_something(me):\n    ...\n\nasync def main():\n    # Most of your code should go here.\n    # You can of course make and use your own async def (do_something).\n    # They only need to be async if they need to await things.\n    me = await client.get_me()\n    await do_something(me)\n\nwith client:\n    client.loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using TelegramClient in Python\nDESCRIPTION: Basic example of creating a TelegramClient instance and using it to send a message to yourself. The example demonstrates the async pattern used with Telethon, including proper client initialization, async function definition, and running the async code with the event loop.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/modules/client.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient\n\nclient = TelegramClient(name, api_id, api_hash)\n\nasync def main():\n    # Now you can use all client methods listed below, like for example...\n    await client.send_message('me', 'Hello to myself!')\n\nwith client:\n    client.loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Using StringSession for Portable Telethon Client Authentication\nDESCRIPTION: Demonstrates how to use StringSession from telethon.sessions to create a portable string-based session that can be reused without storing a session file on disk. This approach improves portability as the session can be saved as a string and used elsewhere.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/sessions.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.sync import TelegramClient\nfrom telethon.sessions import StringSession\n\nwith TelegramClient(StringSession(string), api_id, api_hash) as client:\n    ...  # use the client\n\n    # Save the string session as a string; you should decide how\n    # you want to save this information (over a socket, remote\n    # database, print it and then paste the string in the code,\n    # etc.); the advantage is that you don't need to save it\n    # on the current disk as a separate file, and can be reused\n    # anywhere else once you log in.\n    string = client.session.save()\n\n# Note that it's also possible to save any other session type\n# as a string by using ``StringSession.save(session_instance)``:\nclient = TelegramClient('sqlite-session', api_id, api_hash)\nstring = StringSession.save(client.session)\n```\n\n----------------------------------------\n\nTITLE: Entity Resolution Examples in Telethon\nDESCRIPTION: Comprehensive example showing different ways to properly resolve entities in Telethon, including username lookup, dialog fetching, participant retrieval, and message history access.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/entities.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# (These examples assume you are inside an \"async def\")\nasync with client:\n    # Does it have a username? Use it!\n    entity = await client.get_entity(username)\n\n    # Do you have a conversation open with them? Get dialogs.\n    await client.get_dialogs()\n\n    # Are they participant of some group? Get them.\n    await client.get_participants('username')\n\n    # Is the entity the original sender of a forwarded message? Get it.\n    await client.get_messages('username', 100)\n\n    # NOW you can use the ID, anywhere!\n    await client.send_message(123456, 'Hi!')\n\n    entity = await client.get_entity(123456)\n    print(entity)\n```\n\n----------------------------------------\n\nTITLE: Installing Telethon via pip in Python\nDESCRIPTION: Commands to upgrade pip and install or upgrade the Telethon library to the latest stable version. This is the recommended installation method for most users.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/installation.rst#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install --upgrade pip\npython3 -m pip install --upgrade telethon\n```\n\n----------------------------------------\n\nTITLE: Getting Different Types of Entities in Telethon (Python)\nDESCRIPTION: Comprehensive example showing various ways to get entities in Telethon. Demonstrates accessing entities through dialogs, usernames, links, phone numbers, IDs, and explicit peer types.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/entities.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# (These examples assume you are inside an \"async def\")\n#\n# Dialogs are the \"conversations you have open\".\n# This method returns a list of Dialog, which\n# has the .entity attribute and other information.\n#\n# This part is IMPORTANT, because it fills the entity cache.\ndialogs = await client.get_dialogs()\n\n# All of these work and do the same.\nusername = await client.get_entity('username')\nusername = await client.get_entity('t.me/username')\nusername = await client.get_entity('https://telegram.dog/username')\n\n# Other kind of entities.\nchannel = await client.get_entity('telegram.me/joinchat/AAAAAEkk2WdoDrB4-Q8-gg')\ncontact = await client.get_entity('+34xxxxxxxxx')\nfriend  = await client.get_entity(friend_id)\n\n# Getting entities through their ID (User, Chat or Channel)\nentity = await client.get_entity(some_id)\n\n# You can be more explicit about the type for said ID by wrapping\n# it inside a Peer instance. This is recommended but not necessary.\nfrom telethon.tl.types import PeerUser, PeerChat, PeerChannel\n\nmy_user    = await client.get_entity(PeerUser(some_id))\nmy_chat    = await client.get_entity(PeerChat(some_id))\nmy_channel = await client.get_entity(PeerChannel(some_id))\n```\n\n----------------------------------------\n\nTITLE: Bot Account Authentication\nDESCRIPTION: Authentication setup for bot accounts using Telethon. Requires API ID, hash and bot token from @BotFather.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/signing-in.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.sync import TelegramClient\n\napi_id = 12345\napi_hash = '0123456789abcdef0123456789abcdef'\nbot_token = '12345:0123456789abcdef0123456789abcdef'\n\n# We have to manually call \"start\" if we want an explicit bot token\nbot = TelegramClient('bot', api_id, api_hash).start(bot_token=bot_token)\n\n# But then we can use the client instance as usual\nwith bot:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Properly Accessing Entity Information in Events\nDESCRIPTION: The correct way to access chat and sender information in event handlers. This demonstrates the difference between using methods (correct) versus properties (incorrect) when accessing entity data.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/updates.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(event):\n    # Good\n    chat = await event.get_chat()\n    sender = await event.get_sender()\n    chat_id = event.chat_id\n    sender_id = event.sender_id\n\n    # BAD. Don't do this\n    chat = event.chat\n    sender = event.sender\n    chat_id = event.chat.id\n    sender_id = event.sender.id\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Requests in Python\nDESCRIPTION: Shows how to send multiple requests at once while preserving the order using the Telethon client.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.messages import SendMessageRequest\nclient([SendMessageRequest(chat, 'Hello 1!'),\n        SendMessageRequest(chat, 'Hello 2!')], ordered=True)\n```\n\n----------------------------------------\n\nTITLE: Threading with Telethon\nDESCRIPTION: Shows how to properly use Telethon with threads by creating and managing event loops correctly.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport threading\n\nasync def actual_work():\n    client = TelegramClient(..., loop=loop)\n    ...  # can use `await` here\n\ndef go():\n    asyncio.run(actual_work())\n\nthreading.Thread(target=go).start()\n```\n\n----------------------------------------\n\nTITLE: Using asyncio with Telethon correctly\nDESCRIPTION: This snippet demonstrates the proper way to structure a Telethon application using asyncio, creating a main async function and using the client as a context manager to ensure proper connection handling.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# It's fine to create the client outside as long as you don't connect\nclient = TelegramClient(...)\n\nasync def main():\n    # Now the client will connect, so the loop must not change from now on.\n    # But as long as you do all the work inside main, including calling\n    # other async functions, things will work.\n    async with client:\n        ....\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Complete Raw API Request Example with Entity Resolution\nDESCRIPTION: A complete example showing how to combine entity resolution with a raw API request. This demonstrates the full pattern from entity resolution to request execution.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresult = await client(SendMessageRequest(\n    await client.get_input_entity('username'), 'Hello there!'\n))\n```\n\n----------------------------------------\n\nTITLE: Basic Telegram Event Handler for Automatic Replies\nDESCRIPTION: A simple example showing how to create an event handler that automatically replies with 'hi!' when a message containing 'hello' is received.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/updates.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, events\n\nclient = TelegramClient('anon', api_id, api_hash)\n\n@client.on(events.NewMessage)\nasync def my_event_handler(event):\n    if 'hello' in event.raw_text:\n        await event.reply('hi!')\n\nclient.start()\nclient.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Performing Actions with Telethon Client\nDESCRIPTION: This code snippet shows various actions that can be performed using the Telethon client, including sending messages, downloading media, and setting up an event handler for incoming messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/README.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(client.get_me().stringify())\n\nclient.send_message('username', 'Hello! Talking to you from Telethon')\nclient.send_file('username', '/home/myself/Pictures/holidays.jpg')\n\nclient.download_profile_photo('me')\nmessages = client.get_messages('username')\nmessages[0].download_media()\n\n@client.on(events.NewMessage(pattern='(?i)hi|hello'))\nasync def handler(event):\n    await event.respond('Hey!')\n```\n\n----------------------------------------\n\nTITLE: Parallel Request Execution with asyncio.gather\nDESCRIPTION: Demonstrates how to execute multiple Telethon operations in parallel using asyncio.gather.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    last, sent, download_path = await asyncio.gather(\n        client.get_messages('telegram', 10),\n        client.send_message('me', 'Using asyncio!'),\n        client.download_profile_photo('telegram')\n    )\n\nloop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Flood Sleep Threshold in Telethon\nDESCRIPTION: Examples of setting different auto-sleep thresholds for handling flood wait errors automatically.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/errors.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.flood_sleep_threshold = 0  # Don't auto-sleep\nclient.flood_sleep_threshold = 24 * 60 * 60  # Sleep always\n```\n\n----------------------------------------\n\nTITLE: Simplified Raw API Request Methods in Telethon\nDESCRIPTION: Shows how Telethon allows simplification of raw API requests by automatically handling entity resolution, supporting both usernames and channel IDs directly.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresult = await client(SendMessageRequest('username', 'Hello there!'))\n# Or even\nresult = await client(SendMessageRequest(PeerChannel(id), 'Hello there!'))\n```\n\n----------------------------------------\n\nTITLE: Sending Files in Telethon\nDESCRIPTION: Shows the updated method for sending files where multiple specific methods were consolidated into a single .send_file() method with a revised parameter order.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\n# New consolidated method to send files\nclient.send_file(recipient, file)\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Requests with asyncio.wait\nDESCRIPTION: Demonstrates how to execute multiple Telethon requests in parallel using asyncio.wait(), which allows the library to automatically handle request batching.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n\n    # Letting the library do it behind the scenes\n    await asyncio.wait([\n        client.send_message('me', 'Hello'),\n        client.send_message('me', ','),\n        client.send_message('me', 'World'),\n        client.send_message('me', '.')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using get_ Methods in Event Handlers in Python\nDESCRIPTION: Demonstrates the difference between properties and methods in event handlers, showing how to properly fetch sender, chat, and button information that may require network calls.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@client.on(events.NewMessage)\nasync def handler(event):\n    # event.input_chat may be None, use event.get_input_chat()\n    chat = await event.get_input_chat()\n    sender = await event.get_sender()\n    buttons = await event.get_buttons()\n\nasync def main():\n    async for message in client.iter_messages('me', 10):\n        # Methods from the client always have these properties ready\n        chat = message.input_chat\n        sender = message.sender\n        buttons = message.buttons\n```\n\n----------------------------------------\n\nTITLE: Using Event Properties for Sending Messages in Telethon (Python)\nDESCRIPTION: Example demonstrating two equivalent ways to send messages using event properties in Telethon. Both approaches use the cached entity information, with the first using the ID and the second using the input_sender property.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/entities.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(event):\n    await client.send_message(event.sender_id, 'Hi')\n    await client.send_message(event.input_sender, 'Hi')\n```\n\n----------------------------------------\n\nTITLE: Fetching Chat and Sender Information in Event Handlers\nDESCRIPTION: Example showing how to properly fetch chat and sender information in Telethon event handlers, which may not be automatically included in all events.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(event):\n    chat = await event.get_chat()\n    sender = await event.get_sender()\n```\n\n----------------------------------------\n\nTITLE: Getting Complete Entity Information in Telethon\nDESCRIPTION: Shows how to retrieve complete user information using client.get_entity() method instead of just the input version. This is useful when you need comprehensive details about a user.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nentity = await client.get_entity('someone')\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Telegram API Tasks Concurrently with asyncio\nDESCRIPTION: Creates multiple background tasks using asyncio's create_task method to perform Telegram operations concurrently. The tasks include fetching messages, sending a message, and downloading a profile photo - all running in the background as long as the loop is running.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nloop.create_task(client.get_messages('telegram', 10))\nloop.create_task(client.send_message('me', 'Using asyncio!'))\nloop.create_task(client.download_profile_photo('telegram'))\n```\n\n----------------------------------------\n\nTITLE: Using StringSession for Portable Session Management in Python\nDESCRIPTION: Shows how to save a Telethon session to a string format using StringSession introduced in v1.2. This allows storing sessions without creating on-disk files, making them portable and easier to manage.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.sessions import StringSession\nstring = StringSession.save(client.session)\n```\n\n----------------------------------------\n\nTITLE: Basic RPC Error Handling in Telethon\nDESCRIPTION: Demonstrates how to import and handle basic RPC errors when using the Telethon takeout feature.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/errors.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import errors\n\ntry:\n    async with client.takeout() as takeout:\n        ...\n\nexcept errors.TakeoutInitDelayError as e:\n    #  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ here we except TAKEOUT_INIT_DELAY\n    print('Must wait', e.seconds, 'before takeout')\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Buttons with Callbacks in Telethon\nDESCRIPTION: Demonstrates how to create inline buttons with callback functions in Telethon. This code shows the simplest way to attach a callback directly when creating a button, which is suitable for small bots.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.custom import Button\n\nasync def callback(event):\n    await event.edit('Thank you!')\n\nbot.send_message(chat, 'Hello!',\n                 buttons=Button.inline('Click me', callback))\n```\n\n----------------------------------------\n\nTITLE: Joining and Leaving Public Channels in Telegram using Telethon\nDESCRIPTION: Demonstrates how to join and leave a public Telegram channel using JoinChannelRequest and LeaveChannelRequest functions from the channels namespace.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/chats-and-channels.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.channels import JoinChannelRequest\nawait client(JoinChannelRequest(channel))\n\n# In the same way, you can also leave such channel\nfrom telethon.tl.functions.channels import LeaveChannelRequest\nawait client(LeaveChannelRequest(input_channel))\n```\n\n----------------------------------------\n\nTITLE: Async/Await Usage Examples with Client\nDESCRIPTION: Shows various examples of using async/await with Telethon client, including correct and incorrect usage patterns.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    # 3. the loop is running here\n    print(\n        client.get_me()  # 4. this will return a coroutine!\n        .username  # 5. this fails, coroutines don't have usernames\n    )\n\nloop.run_until_complete(  # 2. run the loop and the ``main()`` coroutine\n    main()  # 1. calling ``async def\" \"returns\" a coroutine\n)\n```\n\n----------------------------------------\n\nTITLE: Pure AsyncIO Implementation in Telethon\nDESCRIPTION: Shows how to implement Telethon using pure AsyncIO patterns without the sync module, optimized for performance and proper async/await usage.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/compatibility-and-convenience.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom telethon import TelegramClient, events\n\nasync def main():\n    async with TelegramClient(...) as client:\n        print((await client.get_me()).username)\n        #     ^_____________________^ notice these parenthesis\n        #     You want to ``await`` the call, not the username.\n        #\n        message = await client.send_message('me', 'Hi!')\n        await asyncio.sleep(5)\n        await message.delete()\n\n        @client.on(events.NewMessage(pattern='(?i)hi|hello'))\n        async def handler(event):\n            await event.reply('hey')\n\n        await client.run_until_disconnected()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Handler with Template Pattern in Python\nDESCRIPTION: Demonstrates how to create modular event handlers using the template pattern introduced in v1.3. This code registers a handler for new messages containing 'hello' (case insensitive) that responds with 'Hi!' and sends a notification to the user.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# handlers/welcome.py\nfrom telethon import events\n\n@events.register(events.NewMessage('(?i)hello'))\nasync def handler(event):\n    client = event.client\n    await event.respond('Hi!')\n    await client.send_message('me', 'Sent hello to someone')\n```\n\n----------------------------------------\n\nTITLE: Adding Users to Telegram Chats and Channels\nDESCRIPTION: Demonstrates how to add users to both normal chats and channels using AddChatUserRequest and InviteToChannelRequest respectively.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/chats-and-channels.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# For normal chats\nfrom telethon.tl.functions.messages import AddChatUserRequest\n\n# Note that ``user_to_add`` is NOT the name of the parameter.\n# It's the user you want to add (``user_id=user_to_add``).\nawait client(AddChatUserRequest(\n    chat_id,\n    user_to_add,\n    fwd_limit=10  # Allow the user to see the 10 last messages\n))\n\n# For channels (which includes megagroups)\nfrom telethon.tl.functions.channels import InviteToChannelRequest\n\nawait client(InviteToChannelRequest(\n    channel,\n    [users_to_add]\n))\n```\n\n----------------------------------------\n\nTITLE: Using run_until_disconnected in Python\nDESCRIPTION: Shows how to keep a Telethon script running to handle updates by using the run_until_disconnected method, which handles the asyncio event loop for you.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom telethon import TelegramClient\n\nclient = TelegramClient(...)\n...\nclient.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Parallel Requests with MultiError\nDESCRIPTION: Shows how to handle errors when executing multiple requests in parallel using MultiError exception, allowing access to both successful results and exceptions.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.errors import MultiError\n\ntry:\n    await client([\n        SendMessageRequest('me', 'Hello'),\n        SendMessageRequest('me', ''),\n        SendMessageRequest('me', 'World')\n    ], ordered=True)\nexcept MultiError as e:\n    # The first and third requests worked.\n    first = e.results[0]\n    third = e.results[2]\n    # The second request failed.\n    second = e.exceptions[1]\n```\n\n----------------------------------------\n\nTITLE: Downloading Profile Photos in Response to Commands\nDESCRIPTION: An event handler that responds to '.save' commands by downloading the profile photo of a replied-to user. This example demonstrates how to get reply messages and interact with user profiles.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/updates.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@client.on(events.NewMessage(outgoing=True, pattern=r'\\.save'))\nasync def handler(event):\n    if event.is_reply:\n        replied = await event.get_reply_message()\n        sender = replied.sender\n        await client.download_profile_photo(sender)\n        await event.respond('Saved your photo {}'.format(sender.username))\n```\n\n----------------------------------------\n\nTITLE: Handling FloodWaitError in Telethon\nDESCRIPTION: Example of how to catch and handle FloodWaitError in Telethon. The error object contains the number of seconds to wait before making the request again.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    await client.send_message(chat, 'Hi')\nexcept errors.FloodWaitError as e:\n    # e.seconds is how many seconds you have\n    # to wait before making the request again.\n    print('Flood for', e.seconds)\n```\n\n----------------------------------------\n\nTITLE: Using Raw Requests with Automatic Entity Resolution in Telethon (Python)\nDESCRIPTION: Example showing how to use raw API requests in Telethon with automatic entity resolution. The library will automatically resolve 'username' to the appropriate InputPeer.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/entities.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait client(SendMessageRequest('username', 'hello'))\n```\n\n----------------------------------------\n\nTITLE: Custom FloodWaitError Handling in Telethon\nDESCRIPTION: Shows how to implement custom handling of FloodWaitError with explicit error catching and program termination.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/errors.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.errors import FloodWaitError\ntry:\n    ...\nexcept FloodWaitError as e:\n    print('Flood waited for', e.seconds)\n    quit(1)\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Button Layouts with Callback Handling in Telethon\nDESCRIPTION: Demonstrates how to create complex button layouts using nested lists and handle button callbacks with a global state. This example creates a phone number input keyboard with digit buttons and control buttons.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import events\n\nglobal phone = ''\n\n@bot.on(events.CallbackQuery)\nasync def handler(event):\n    global phone\n    if event.data == b'<':\n        phone = phone[:-1]\n    else:\n        phone += event.data.decode('utf-8')\n\n    await event.answer('Phone is now {}'.format(phone))\n\nmarkup = bot.build_reply_markup([\n    [Button.inline('1'), Button.inline('2'), Button.inline('3')],\n    [Button.inline('4'), Button.inline('5'), Button.inline('6')],\n    [Button.inline('7'), Button.inline('8'), Button.inline('9')],\n    [Button.inline('+'), Button.inline('0'), Button.inline('<')],\n])\nbot.send_message(chat, 'Enter a phone', buttons=markup)\n```\n\n----------------------------------------\n\nTITLE: Getting and Printing an Entity in Telethon (Python)\nDESCRIPTION: This code retrieves a Telegram entity by username and prints its string representation. It demonstrates the basic approach to inspect what attributes are available on an entity object.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/strings.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nentity = await client.get_entity('username')\nprint(entity)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to a Telethon Client in Python\nDESCRIPTION: Shows how to import and add pre-defined event handlers to a TelegramClient instance. This pattern allows for modular code organization by separating handler definitions from client initialization.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nfrom telethon import TelegramClient\nimport handlers.welcome\n\nwith TelegramClient(...) as client:\n    # This line adds the handler we defined before for new messages\n    client.add_event_handler(handlers.welcome.handler)\n    client.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Message Class in Python\nDESCRIPTION: Demonstrates how to use the new custom Message class to send, edit, and reply to messages, as well as access sender information.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmsg = client.send_message(chat, 'Hello!')\nmsg.edit('Hello there!')\nmsg.reply('Good day!')\nprint(msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Manually Batching Multiple Requests in Telethon\nDESCRIPTION: Shows how to manually combine multiple requests into a single container for more efficient processing. This sends all requests to Telegram at once, reducing overhead.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    # Manually invoking many requests at once\n    await client([\n        SendMessageRequest('me', 'Hello'),\n        SendMessageRequest('me', ', '),\n        SendMessageRequest('me', 'World'),\n        SendMessageRequest('me', '.')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Stopping Propagation of Updates in Telethon\nDESCRIPTION: Demonstrates how to prevent other handlers from processing an update by raising StopPropagation exception, useful when an event handler should be used exclusively.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.events import StopPropagation\n\n@client.on(events.NewMessage)\nasync def _(event):\n    # ... some conditions\n    await event.delete()\n\n    # Other handlers won't have an event to work with\n    raise StopPropagation\n\n@client.on(events.NewMessage)\nasync def _(event):\n    # Will never be reached, because it is the second handler\n    # in the chain.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using client.disconnected with asyncio in Python\nDESCRIPTION: Demonstrates an alternative approach to keep a Telethon client running by awaiting on the disconnected property, equivalent to run_until_disconnected but with more control.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom telethon import TelegramClient\n\nclient = TelegramClient(...)\n\nasync def main():\n    await client.disconnected\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Button Markup in Telethon\nDESCRIPTION: Shows how to create reusable button markup for better performance in larger bots. By building the reply markup once and reusing it, the callback is only added once instead of every time a message is sent.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmarkup = bot.build_reply_markup(Button.inline('Click me', callback))\nbot.send_message(chat, 'Hello!', buttons=markup)\n```\n\n----------------------------------------\n\nTITLE: Handling FloodWaitError in Telethon\nDESCRIPTION: Shows how to handle FloodWaitError when making requests, including accessing the wait duration and implementing sleep.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/errors.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n...\nfrom telethon import errors\n\ntry:\n    messages = await client.get_messages(chat)\n    print(messages[0].text)\nexcept errors.FloodWaitError as e:\n    print('Have to sleep', e.seconds, 'seconds')\n    time.sleep(e.seconds)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in Telethon Python Library\nDESCRIPTION: Code to enable logging in a Telethon application. This helps with debugging by showing errors that might otherwise be hidden. The logging level can be adjusted to control the amount of information displayed.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(format='[%(levelname) %(asctime)s] %(name)s: %(message)s',\n                    level=logging.WARNING)\n```\n\n----------------------------------------\n\nTITLE: Invoking Raw API Request in Telethon\nDESCRIPTION: Shows how to invoke a raw API request (SendMessageRequest) using the client directly. This approach provides access to all available API methods.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresult = await client(SendMessageRequest(peer, 'Hello there!'))\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers in Separate Files in Python\nDESCRIPTION: Shows how to organize event handlers in separate files using events.register, allowing for better code organization while maintaining access to the client.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# handlers/welcome.py\nfrom telethon import events\n\n@events.register(events.NewMessage('(?i)hello'))\nasync def handler(event):\n    client = event.client\n    await event.respond('Hey!')\n    await client.send_message('me', 'I said hello to someone')\n```\n\n----------------------------------------\n\nTITLE: Sending Photos with BytesIO in Python 3.12+ After imghdr Deprecation\nDESCRIPTION: Example showing how to send image data as a file in newer Python versions after the removal of imghdr support. This demonstrates setting the .name property on a BytesIO object to allow Telethon to correctly detect the file extension.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# before\nimage_data = b'...'\nclient.send_file(chat, image_data)\n\n# after\nfrom io import BytesIO\nimage_data = BytesIO(b'...')\nimage_data.name = 'a.jpg'  # any name, only the extension matters\nclient.send_file(chat, image_data)\n```\n\n----------------------------------------\n\nTITLE: Downloading Media from Messages in Telethon\nDESCRIPTION: Demonstrates the usage of the .download_media() method which replaced the older .download_msg_media() method. The method now supports Message objects directly.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n# New way to download media from messages\nresult = client.download_media(message)\n```\n\n----------------------------------------\n\nTITLE: Finding a Channel from a Migrated Chat in Telethon\nDESCRIPTION: Demonstrates how to find the Channel entity from a Chat that has been migrated to a supergroup/channel using the migrated_to property.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# chat is a Chat\nchannel = await client.get_entity(chat.migrated_to)\n# channel is now a Channel\n```\n\n----------------------------------------\n\nTITLE: Using SenderGetter Methods in Message Class\nDESCRIPTION: Shows the inherited SenderGetter methods available in Message class for handling user information and sender details.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/entities.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage.user_id\nawait message.get_input_sender()\nmessage.user\n# ...etc\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependencies for Telethon\nDESCRIPTION: Commands for apt-based systems to install common dependencies needed for Telethon and its optional components. This includes development libraries and tools for handling media files.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/installation.rst#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\napt update\napt install clang lib{jpeg-turbo,webp}-dev python{,-dev} zlib-dev\npip install -U --user setuptools\npip install -U --user telethon cryptg pillow\n```\n\n----------------------------------------\n\nTITLE: Using ChatGetter Methods in Message Class\nDESCRIPTION: Demonstrates the inherited ChatGetter methods available in Message class, including checking private status, getting chat ID and retrieving chat information.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/entities.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage.is_private\nmessage.chat_id\nawait message.get_chat()\n# ...etc\n```\n\n----------------------------------------\n\nTITLE: Using Conversations to Interact with Telegram Bots in Python\nDESCRIPTION: Demonstrates the Conversation feature introduced in v1.2 to interact with Telegram bots. This example shows how to retrieve bot tokens from @BotFather by navigating through its menu options and extracting code entities.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl import types\n\nwith client.conversation('BotFather') as conv:\n    conv.send_message('/mybots')\n    message = conv.get_response()\n    message.click(0)\n    message = conv.get_edit()\n    message.click(0)\n    message = conv.get_edit()\n    for _, token in message.get_entities_text(types.MessageEntityCode):\n        print(token)\n```\n\n----------------------------------------\n\nTITLE: Using get_entity method with LRU cache\nDESCRIPTION: Example of the get_entity() method which became public in v0.13.3 and uses the @lru_cache() decorator for efficient entity retrieval.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nTelegramClient.get_entity()\n```\n\n----------------------------------------\n\nTITLE: Using a Saved StringSession with Telethon Client\nDESCRIPTION: Demonstrates how to initialize a TelegramClient with a previously generated StringSession. This allows for instant authentication without the need to enter verification codes, making it useful for automation and deployments like Heroku.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/sessions.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstring = '1aaNk8EX-YRfwoRsebUkugFvht6DUPi_Q25UOCzOAqzc...'\nwith TelegramClient(StringSession(string), api_id, api_hash) as client:\n    client.loop.run_until_complete(client.send_message('me', 'Hi'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Attributes in Telethon (Python)\nDESCRIPTION: This snippet demonstrates how to properly access an attribute from a Telethon entity object. Instead of parsing the string representation, it directly accesses the title property.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/strings.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntitle = entity.title\n```\n\n----------------------------------------\n\nTITLE: Increasing Message View Count in Telegram Channels\nDESCRIPTION: Shows how to increment the view count for messages in a channel using GetMessagesViewsRequest. Note that this can only be done once or twice per day per account.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/chats-and-channels.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait client(GetMessagesViewsRequest(\n    peer=channel,\n    id=msg_ids,\n    increment=True\n))\n```\n\n----------------------------------------\n\nTITLE: Using Reversed Iteration with Telethon Client Methods\nDESCRIPTION: Shows how to iterate through messages in reverse order using the reversed() function with client.iter_messages(). This functionality is available after the overhaul of client.iter_* methods.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor message in reversed(client.iter_messages('me')):\n    print(message.text)\n```\n\n----------------------------------------\n\nTITLE: Using TelegramClient with Context Manager in Python\nDESCRIPTION: Demonstrates how to use the TelegramClient inside a with block, which automatically handles starting and disconnecting the client. This simplifies the client usage by managing its lifecycle.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, sync\n\nwith TelegramClient(name, api_id, api_hash) as client:\n    client.send_message('me', 'Hello!')\n```\n\n----------------------------------------\n\nTITLE: Sending voice notes in Telethon\nDESCRIPTION: Example of the send_voice_note() method added in v0.13.3 for sending voice messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n.send_voice_note()\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Photo in Telethon\nDESCRIPTION: Shows how to upload and set a new profile photo using UploadProfilePhotoRequest. Requires a file path to the new photo.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/users.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.photos import UploadProfilePhotoRequest\n\nawait client(UploadProfilePhotoRequest(\n    await client.upload_file('/path/to/some/file')\n))\n```\n\n----------------------------------------\n\nTITLE: Generating a New StringSession for Telethon\nDESCRIPTION: Shows how to generate a new string session using the StringSession class. This snippet creates a temporary client that prints the serialized session string, which can then be used for future authentication without entering phone and code again.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/sessions.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.sync import TelegramClient\nfrom telethon.sessions import StringSession\n\nwith TelegramClient(StringSession(), api_id, api_hash) as client:\n    print(client.session.save())\n```\n\n----------------------------------------\n\nTITLE: Implementing Bot with Telethon (dumbot equivalent)\nDESCRIPTION: This snippet shows how to create the same bot functionality as the dumbot example, but using Telethon. It demonstrates subclassing TelegramClient to create a bot that responds with its own username.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, events\n\nclass Subbot(TelegramClient):\n    def __init__(self, *a, **kw):\n        super().__init__(*a, **kw)\n        self.add_event_handler(self.on_update, events.NewMessage)\n\n    async def connect():\n        await super().connect()\n        self.me = await self.get_me()\n\n    async def on_update(event):\n        await event.reply('i am {}'.format(self.me.username))\n\nbot = Subbot('bot', 11111, 'a1b2c3d4').start(bot_token='TOKEN')\nbot.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Using run_until_disconnected with asyncio in Python\nDESCRIPTION: Shows how to use run_until_disconnected with an explicit asyncio event loop, providing a way to handle updates while maintaining control over the loop.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    await client.run_until_disconnected()\n\nloop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Updating Username in Telethon\nDESCRIPTION: Demonstrates how to update a user's username using UpdateUsernameRequest.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/users.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.account import UpdateUsernameRequest\n\nawait client(UpdateUsernameRequest('new_username'))\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Peer Types in Telethon\nDESCRIPTION: Shows how to manually specify a peer type when Telethon can't automatically determine it from the ID format.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import types\nawait client.send_message(types.PeerChannel(456), 'hello')\n#                         ^^^^^^^^^^^^^^^^^ explicit peer type\n```\n\n----------------------------------------\n\nTITLE: Commenting on Channel Posts with Telethon\nDESCRIPTION: Demonstrates how to comment on a channel post using the comment_to parameter. This code will leave a comment to the channel post with ID 1134 in the specified channel.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.send_message(channel, 'Great update!', comment_to=1134)\n```\n\n----------------------------------------\n\nTITLE: Calling Telegram API Methods in Python using Telethon\nDESCRIPTION: This snippet demonstrates how to call Telegram API methods using Telethon. It includes examples of GetTermsOfServiceUpdate, AcceptTermsOfService, and DeleteAccount methods, which are important for complying with Telegram's Terms of Service when developing applications.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/next-steps.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[:tl:`GetTermsOfServiceUpdate`]\n[:tl:`AcceptTermsOfService`]\n[:tl:`DeleteAccount`]\n```\n\n----------------------------------------\n\nTITLE: MTProto Proxy Configuration\nDESCRIPTION: Setup for using MTProto proxies with Telethon, including connection mode specification and proxy details.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/signing-in.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, connection\n\nclient = TelegramClient(\n    'anon', api_id, api_hash,\n    connection=connection.ConnectionTcpMTProxyRandomizedIntermediate,\n    proxy=('mtproxy.example.com', 2002, 'secret')\n)\n```\n\n----------------------------------------\n\nTITLE: Working with Related Chats in a ChannelFull Object\nDESCRIPTION: Shows how to access the full Chat and Channel objects related to a channel from the chats attribute of a GetFullChannelRequest response.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif full_channel.migrated_from_chat_id:\n    migrated_from_chat = next(c for c in full.chats if c.id == full_channel.migrated_from_chat_id)\n    print(migrated_from_chat.title)\n\nif full_channel.linked_chat_id:\n    linked_group = next(c for c in full.chats if c.id == full_channel.linked_chat_id)\n    print(linked_group.username)\n```\n\n----------------------------------------\n\nTITLE: HTML Formatting with Code Language Support in Telegram\nDESCRIPTION: Example of using HTML formatting in Telegram messages to create preformatted code blocks with language specification. This feature was added in layer 166 and allows for syntax highlighting in supported clients.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre>\n  <code class='language-python'>from telethon import TelegramClient</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Accessing ChatGetter properties from Message objects\nDESCRIPTION: This example shows how to access the chat_id property from a Message object, which inherits from the ChatGetter class, demonstrating the concept of inheritance in the Telethon library.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ChatGetter has a chat_id property, and Message bases ChatGetter.\n# Thus you can use ChatGetter properties and methods from Message\nprint(message.chat_id)\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Requests in Order\nDESCRIPTION: Demonstrates how to execute multiple requests in order while still benefiting from batched execution using the ordered parameter, ensuring sequential processing by the server.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nawait client([\n    SendMessageRequest('me', 'Hello'),\n    SendMessageRequest('me', ', '),\n    SendMessageRequest('me', 'World'),\n    SendMessageRequest('me', '.')\n], ordered=True)\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous API with Telethon\nDESCRIPTION: Demonstrates the transition from asynchronous to synchronous code in Telethon v1.0+ using the magic sync module. Shows both approaches side by side for comparison.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def main():\n  await client.send_message('me', 'Hello!')\n\nasyncio.run(main())\n\n# ...can be rewritten as:\n\nfrom telethon import sync\nclient.send_message('me', 'Hello!')\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to Client in Python\nDESCRIPTION: Demonstrates how to add previously registered event handlers to a Telegram client instance to actually use them in the application.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nfrom telethon import TelegramClient\nimport handlers.welcome\n\nwith TelegramClient(...) as client:\n    client.add_event_handler(handlers.welcome.handler)\n    client.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Setting Different Logging Levels in Telethon\nDESCRIPTION: Examples of different logging levels that can be used with Telethon, from least to most verbose. This allows customizing the amount of information displayed during execution.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlevel=logging.CRITICAL  # won't show errors (same as disabled)\nlevel=logging.ERROR     # will only show errors that you didn't handle\nlevel=logging.WARNING   # will also show messages with medium severity, such as internal Telegram issues\nlevel=logging.INFO      # will also show informational messages, such as connection or disconnections\nlevel=logging.DEBUG     # will show a lot of output to help debugging issues in the library\n```\n\n----------------------------------------\n\nTITLE: Converting Peer Objects to Marked IDs with utils.get_peer_id in Telethon\nDESCRIPTION: Shows how to perform the reverse operation of resolve_id using utils.get_peer_id to convert a peer object like PeerChannel back to its marked ID format.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(utils.get_peer_id(types.PeerChannel(456)))  # -1000000000456\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Telegram Objects in Telethon\nDESCRIPTION: Shows how to use the .stringify() method to pretty print any TLObject returned by Telegram, which is useful for debugging purposes.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\n# Pretty print a Telegram object for debugging\nresult.stringify()\n```\n\n----------------------------------------\n\nTITLE: Scheduling Messages with Timedelta in Python using Telethon\nDESCRIPTION: Example of how to schedule messages to be sent at a later time using Telethon's send_message method with the schedule parameter and Python's timedelta for time calculation.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\n\n# Remind yourself to walk the dog in 10 minutes (after you play with Telethon's update)\nawait client.send_message('me', 'Walk the dog',\n                          schedule=timedelta(minutes=10))\n\n# Remind your friend tomorrow to update Telethon\nawait client.send_message(friend, 'Update Telethon!',\n                          schedule=timedelta(days=1))\n```\n\n----------------------------------------\n\nTITLE: Enabling Sequential Updates Processing in Telethon\nDESCRIPTION: Demonstrates how to configure a Telethon client to process updates sequentially (not in parallel) by setting the sequential_updates parameter when creating the client.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith TelegramClient(..., sequential_updates=True) as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Input Peer Construction\nDESCRIPTION: Shows two methods for creating an InputPeer: manual construction and using get_input_entity().\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.types import InputPeerUser\n\npeer = InputPeerUser(user_id, user_hash)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport telethon\n\nasync def main():\n    peer = await client.get_input_entity('someone')\n\nclient.loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Bot with aiogram\nDESCRIPTION: This snippet demonstrates how to create a bot using the aiogram library. It includes handlers for the /start command, a regex-based handler for cat-related messages, and an echo handler for all other messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom aiogram import Bot, Dispatcher, executor, types\n\nAPI_TOKEN = 'BOT TOKEN HERE'\n\n# Initialize bot and dispatcher\nbot = Bot(token=API_TOKEN)\ndp = Dispatcher(bot)\n\n@dp.message_handler(commands=['start'])\nasync def send_welcome(message: types.Message):\n    \"\"\"\n    This handler will be called when client send `/start` command.\n    \"\"\"\n    await message.reply(\"Hi!\\nI'm EchoBot!\\nPowered by aiogram.\")\n\n@dp.message_handler(regexp='(^cat[s]?$|puss)')\nasync def cats(message: types.Message):\n    with open('data/cats.jpg', 'rb') as photo:\n        await bot.send_photo(message.chat.id, photo, caption='Cats is here 😺',\n                             reply_to_message_id=message.message_id)\n\n@dp.message_handler()\nasync def echo(message: types.Message):\n    await bot.send_message(message.chat.id, message.text)\n\nif __name__ == '__main__':\n    executor.start_polling(dp, skip_updates=True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Channel's Migration Information with GetFullChannelRequest\nDESCRIPTION: Shows how to use GetFullChannelRequest to obtain information about a channel's migration history, particularly the migrated_from_chat_id property.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import functions\nfull = await client(functions.channels.GetFullChannelRequest(your_channel))\nfull_channel = full.full_chat\n# full_channel is a ChannelFull\nprint(full_channel.migrated_from_chat_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers Without Decorators in Python\nDESCRIPTION: Shows how to explicitly add event handlers to a client without using the register decorator, providing more flexibility in certain scenarios.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/updates.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, events\n\nasync def handler(event):\n    ...\n\nwith TelegramClient(...) as client:\n    client.add_event_handler(handler, events.NewMessage)\n    client.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation for Telethon Error Handling\nDESCRIPTION: ReStructuredText documentation that defines the reference sections for Telethon's error handling modules, including common errors and RPC base errors.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/modules/errors.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _telethon-errors:\n\n==========\nAPI Errors\n==========\n\nThese are the base errors that Telegram's API may raise.\n\nSee :ref:`rpc-errors` for a more in-depth explanation on how to handle all\nknown possible errors and learning to determine what a method may raise.\n\n.. automodule:: telethon.errors.common\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\n.. automodule:: telethon.errors.rpcbaseerrors\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Concurrent Task Execution with asyncio\nDESCRIPTION: Demonstrates how to run multiple tasks concurrently using asyncio's create_task and sleep functions.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def hello(delay):\n    await asyncio.sleep(delay)\n    print('hello')\n\nasync def world(delay):\n    await asyncio.sleep(delay)\n    print('world')\n\nasync def main():\n    asyncio.create_task(world(2))\n    asyncio.create_task(hello(delay=1))\n    await asyncio.sleep(3)\n\ntry:\n    asyncio.run(main())\nexcept KeyboardInterrupt:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Telethon Package with pip\nDESCRIPTION: Command to install or upgrade the Telethon library using pip. This is the recommended way to install Telethon before running any of the example scripts.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/telethon_examples/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install --upgrade telethon --user\n```\n\n----------------------------------------\n\nTITLE: Basic Function Invocation in Python Telethon\nDESCRIPTION: Shows the basic pattern for invoking a Telegram API function using Telethon client.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = TelegramClient(...)\nfunction_instance = SomeRequest(...)\n\n# Invoke the request\nreturned_type = await client(function_instance)\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile in Telethon\nDESCRIPTION: Shows how to update user profile information like bio/about section using UpdateProfileRequest. Fields that are not specified will remain unchanged.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/users.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.account import UpdateProfileRequest\n\nawait client(UpdateProfileRequest(\n    about='This is a test from Telethon'\n))\n```\n\n----------------------------------------\n\nTITLE: Verifying Telethon Installation\nDESCRIPTION: Command to verify that Telethon is correctly installed by importing the library and printing its version number. This helps confirm the installation was successful.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/installation.rst#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython3 -c \"import telethon; print(telethon.__version__)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Telethon to Disable Output\nDESCRIPTION: Shows how to configure Python's logging module to suppress Telethon's log messages. Setting the level to CRITICAL will prevent Telethon from logging warning or error messages to stderr.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.CRITICAL)\n```\n\n----------------------------------------\n\nTITLE: String Representation of a Telegram Channel (Python)\nDESCRIPTION: This is the output of printing a Channel entity directly, showing all its attributes in a single line. This demonstrates what fields are available but can be difficult to read.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/strings.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nChannel(id=1066197625, title='Telegram Usernames', photo=ChatPhotoEmpty(), date=datetime.datetime(2016, 12, 16, 15, 15, 43, tzinfo=datetime.timezone.utc), version=0, creator=False, left=True, broadcast=True, verified=True, megagroup=False, restricted=False, signatures=False, min=False, scam=False, has_link=False, has_geo=False, slowmode_enabled=False, access_hash=-6309373984955162244, username='username', restriction_reason=[], admin_rights=None, banned_rights=None, default_banned_rights=None, participants_count=None)\n```\n\n----------------------------------------\n\nTITLE: Automatic Message Deletion based on Content Pattern\nDESCRIPTION: An event handler that automatically deletes messages containing the word 'heck' regardless of case. This example shows how to use case-insensitive regex patterns for content filtering.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/updates.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@client.on(events.NewMessage(pattern=r'(?i).*heck'))\nasync def handler(event):\n    await event.delete()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full User Information in Telethon\nDESCRIPTION: Demonstrates how to fetch complete user information including bio and about information using GetFullUserRequest. Can be used with either user object or username.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/users.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.users import GetFullUserRequest\n\nfull = await client(GetFullUserRequest(user))\n# or even\nfull = await client(GetFullUserRequest('username'))\n\nbio = full.full_user.about\n```\n\n----------------------------------------\n\nTITLE: Basic asyncio Hello World Example\nDESCRIPTION: Demonstrates the basic usage of asyncio by creating a simple coroutine that prints characters with delays.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def main():\n    for char in 'Hello, world!\\n':\n        print(char, end='', flush=True)\n        await asyncio.sleep(0.2)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Converting TLObject to Bytes in Python\nDESCRIPTION: Example showing how to convert a TLObject to bytes using the __bytes__ method instead of the deprecated to_bytes() function.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nbytes(tlobject)\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Attributes in Telethon Entities (Python)\nDESCRIPTION: This snippet demonstrates how to access nested attributes within a Telethon entity, specifically retrieving the year from the date property of a channel entity.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/strings.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchannel_year = entity.date.year\n```\n\n----------------------------------------\n\nTITLE: Joining Private Telegram Chats using Invite Links\nDESCRIPTION: Shows how to join a private Telegram chat or channel using an invite link hash with ImportChatInviteRequest.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/examples/chats-and-channels.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.messages import ImportChatInviteRequest\nupdates = await client(ImportChatInviteRequest('AAAAAEHbEkejzxUjAUCfYg'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Bot with dumbot\nDESCRIPTION: This snippet demonstrates how to create a bot using the dumbot library. It shows a subclassing approach to create a bot that responds with its own username.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dumbot import Bot\n\nclass Subbot(Bot):\n    async def init(self):\n        self.me = await self.getMe()\n\n    async def on_update(self, update):\n        await self.sendMessage(\n            chat_id=update.message.chat.id,\n            text='i am {}'.format(self.me.username)\n        )\n\nSubbot(token).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Connection in Python\nDESCRIPTION: Shows how to change the server IP address that the Telethon client connects to by modifying the session server address.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclient.session.server_address = 'ip'\n```\n\n----------------------------------------\n\nTITLE: Installing Telethon Development Version\nDESCRIPTION: Command to install the latest unreleased development version of Telethon directly from GitHub. This version may contain bugs and is not recommended for production use.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/installation.rst#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install --upgrade https://github.com/LonamiWebs/Telethon/archive/v1.zip\n```\n\n----------------------------------------\n\nTITLE: Telethon Method Synchronization Pattern\nDESCRIPTION: Demonstrates how Telethon's sync module rewrites async methods to handle both synchronous and asynchronous execution.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef new_method():\n    result = original_method()\n    if loop.is_running():\n        # the loop is already running, return the await-able to the user\n        return result\n    else:\n        # the loop is not running yet, so we can run it for the user\n        return loop.run_until_complete(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bot with Telethon (aiogram equivalent)\nDESCRIPTION: This snippet shows how to create the same bot functionality as the aiogram example, but using Telethon. It demonstrates the use of event handlers for the /start command, cat-related messages, and echoing all other messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, events\n\n# Initialize bot and... just the bot!\nbot = TelegramClient('bot', 11111, 'a1b2c3d4').start(bot_token='TOKEN')\n\n@bot.on(events.NewMessage(pattern='/start'))\nasync def send_welcome(event):\n    await event.reply('Howdy, how are you doing?')\n\n@bot.on(events.NewMessage(pattern='(^cat[s]?$|puss)'))\nasync def cats(event):\n    await event.reply('Cats is here 😺', file='data/cats.jpg')\n\n@bot.on(events.NewMessage)\nasync def echo_all(event):\n    await event.reply(event.text)\n\nif __name__ == '__main__':\n    bot.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Client\nDESCRIPTION: Basic syntax for accessing the client instance that created an event\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/events-reference.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nevent.client\n```\n\n----------------------------------------\n\nTITLE: Setting Error Reporting Configuration in Telethon\nDESCRIPTION: Shows how to disable the automatic error reporting feature in Telethon by setting the session's report_errors attribute to False.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nclient.session.report_errors = False\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Bot with Telethon\nDESCRIPTION: This snippet shows how to create the same echo bot functionality using Telethon. It demonstrates the use of event handlers for the /start command and echoing messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, events\n\nbot = TelegramClient('bot', 11111, 'a1b2c3d4').start(bot_token='TOKEN')\n\n@bot.on(events.NewMessage(pattern='/start'))\nasync def start(event):\n    \"\"\"Send a message when the command /start is issued.\"\"\"\n    await event.respond('Hi!')\n    raise events.StopPropagation\n\n@bot.on(events.NewMessage)\nasync def echo(event):\n    \"\"\"Echo the user message.\"\"\"\n    await event.respond(event.text)\n\ndef main():\n    \"\"\"Start the bot.\"\"\"\n    bot.run_until_disconnected()\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Migrating Legacy Telethon Code to AsyncIO\nDESCRIPTION: Shows how to migrate old synchronous Telethon code to the new AsyncIO pattern, including client initialization, connection handling, and event handling changes.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/compatibility-and-convenience.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# 1. Import the client from telethon.sync\nfrom telethon.sync import TelegramClient\n\n# 2. Change this monster...\ntry:\n    assert client.connect()\n    if not client.is_user_authorized():\n        client.send_code_request(phone_number)\n        me = client.sign_in(phone_number, input('Enter code: '))\n\n    ...  # REST OF YOUR CODE\nfinally:\n    client.disconnect()\n\n# ...for this:\nwith client:\n    ...  # REST OF YOUR CODE\n\n# 3. client.idle() no longer exists.\n# Change this...\nclient.idle()\n# ...to this:\nclient.run_until_disconnected()\n\n# 4. client.add_update_handler no longer exists.\n# Change this...\nclient.add_update_handler(handler)\n# ...to this:\nclient.add_event_handler(handler)\n```\n\n----------------------------------------\n\nTITLE: Updated sign_up method signature\nDESCRIPTION: The updated signature for the sign_up method in v0.13, which no longer accepts a phone parameter but requires code and name parameters.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\ndef sign_up(self, code, first_name, last_name='')\n```\n\n----------------------------------------\n\nTITLE: Synchronous Telethon Usage with Context Manager\nDESCRIPTION: Demonstrates convenient synchronous usage of Telethon using the sync module and context manager, including message sending and event handling.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/compatibility-and-convenience.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.sync import TelegramClient\n#            ^~~~~ note this part; it will manage the asyncio loop for you\n\nwith TelegramClient(...) as client:\n    print(client.get_me().username)\n    #     ^ notice the lack of await, or loop.run_until_complete().\n    #       Since there is no loop running, this is done behind the scenes.\n    #\n    message = client.send_message('me', 'Hi!')\n    import time\n    time.sleep(5)\n    message.delete()\n\n    # You can also have an hybrid between a synchronous\n    # part and asynchronous event handlers.\n    #\n    from telethon import events\n    @client.on(events.NewMessage(pattern='(?i)hi|hello'))\n    async def handler(event):\n        await event.reply('hey')\n\n    client.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Bot with Telethon (pyTelegramBotAPI equivalent)\nDESCRIPTION: This snippet shows how to create the same echo bot functionality as the pyTelegramBotAPI example, but using Telethon. It demonstrates the use of event handlers for the /start command and echoing all messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, events\n\nbot = TelegramClient('bot', 11111, 'a1b2c3d4').start(bot_token='TOKEN')\n\n@bot.on(events.NewMessage(pattern='/start'))\nasync def send_welcome(event):\n    await event.reply('Howdy, how are you doing?')\n\n@bot.on(events.NewMessage)\nasync def echo_all(event):\n    await event.reply(event.text)\n\nbot.run_until_disconnected()\n```\n\n----------------------------------------\n\nTITLE: Pong Constructor Example\nDESCRIPTION: Shows how to create a Pong instance with message ID and ping ID parameters.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmy_pong = Pong(\n    msg_id=781875678118,\n    ping_id=48641868471\n)\n```\n\n----------------------------------------\n\nTITLE: Using None return value from ReadThread in Telethon\nDESCRIPTION: Example showing that invoking something from the ReadThread will now return None instead of stopping the thread. This represents a bug fix in version 0.13.5+.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nNone\n```\n\n----------------------------------------\n\nTITLE: Ping Request Implementation\nDESCRIPTION: Demonstrates how to import and use the PingRequest function with proper parameter handling.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions import PingRequest\n\nresponse = await client(PingRequest(\n    ping_id=48641868471\n))\n\nprint(result.stringify())\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Telethon Events\nDESCRIPTION: Basic logging configuration to help with debugging event handlers. This should be added at the top of your file when working with events as exceptions in event handlers are hidden by default.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/updates.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(format='[%(levelname) %(asctime)s] %(name)s: %(message)s',\n                    level=logging.WARNING)\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Bot with pyTelegramBotAPI\nDESCRIPTION: This snippet demonstrates how to create a simple echo bot using the pyTelegramBotAPI library. It includes handlers for the /start command and echoing all messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport telebot\n\nbot = telebot.TeleBot(\"TOKEN\")\n\n@bot.message_handler(commands=['start'])\ndef send_welcome(message):\n    bot.reply_to(message, \"Howdy, how are you doing?\")\n\n@bot.message_handler(func=lambda m: True)\ndef echo_all(message):\n    bot.reply_to(message, message.text)\n\nbot.polling()\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Telethon\nDESCRIPTION: This snippet lists the required Python packages for the Telethon project. It includes cryptg for cryptography, pysocks and python-socks for network socket operations, hachoir for parsing binary files, and pillow for image processing.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/optional-requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\ncryptg\npysocks\npython-socks[asyncio]\nhachoir\npillow\n```\n\n----------------------------------------\n\nTITLE: Using Input Sender with Network Request in Telethon (Python)\nDESCRIPTION: Example showing a more reliable approach for sending messages by first explicitly getting the input sender. This method may make a network request to find the input entity but ensures higher reliability when reusing the entity.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/entities.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(event):\n    # This method may make a network request to find the input sender.\n    # Properties can't make network requests, so we need a method.\n    sender = await event.get_input_sender()\n    await client.send_message(sender, 'Hi')\n    await client.send_message(sender, 'Hi')\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for the Telethon helpers module\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the telethon.helpers module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/modules/helpers.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: telethon.helpers\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for Telethon Utilities\nDESCRIPTION: This ReStructuredText code establishes the documentation structure for the Telethon utilities module. It includes a reference label, section headers, and an automodule directive that automatically documents all members of the telethon.utils module.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/modules/utils.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _telethon-utils:\n\n=========\nUtilities\n=========\n\nThese are the utilities that the library has to offer.\n\n.. automodule:: telethon.utils\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Chaining TelegramClient Start Method with Context Manager\nDESCRIPTION: Shows how to chain the .start() method when using the TelegramClient with a context manager. This approach is useful for bot applications that need to authorize with a token.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nwith TelegramClient(name, api_id, api_hash).start(bot_token=token) as bot:\n    bot.send_message(chat, 'Hello!')\n```\n\n----------------------------------------\n\nTITLE: Installing Telethon via pip\nDESCRIPTION: This command installs the Telethon library using pip3.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip3 install telethon\n```\n\n----------------------------------------\n\nTITLE: Accessing Generator Total Attribute in Telethon API Methods\nDESCRIPTION: Demonstrates how to use the new .total attribute on iterator objects returned by client.iter_* methods. This allows tracking progress through the iteration by calculating the percentage of completion.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nit = client.iter_messages(chat)\nfor i, message in enumerate(it, start=1):\n    percentage = i / it.total\n    print('{:.2%} {}'.format(percentage, message.text))\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Connection Mode in Telethon\nDESCRIPTION: Shows how to configure a Telethon client to use HTTP connection mode, which is useful for certain proxies that only allow HTTP connections. This example demonstrates initializing the client with a custom connection type.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import TelegramClient, sync\nfrom telethon.network import ConnectionHttp\n\nclient = TelegramClient(..., connection=ConnectionHttp)\nwith client:\n    client.send_message('me', 'Hi!')\n```\n\n----------------------------------------\n\nTITLE: Caching Input Peer Version in Telethon\nDESCRIPTION: Demonstrates how to cache the input version of an entity using utils.get_input_peer() to avoid the library having to convert it each time it's used.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import utils\npeer = utils.get_input_peer(entity)\n```\n\n----------------------------------------\n\nTITLE: Invoking Telegram API Requests in Telethon\nDESCRIPTION: Demonstrates the new preferred way to invoke requests directly through the client object as a callable, which is more concise than the older .invoke() method.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\n# New preferred way\nresult = client(SomeRequest())\n\n# Old way\nresult = client.invoke(SomeRequest())\n```\n\n----------------------------------------\n\nTITLE: Authenticating Telethon with Test Phone Numbers in Python\nDESCRIPTION: Completes the Telethon client setup for test servers by configuring both the connection parameters and authentication. Uses a predefined test phone number format and hardcoded verification code based on the data center ID.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/developing/test-servers.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = TelegramClient(None, api_id, api_hash)\nclient.session.set_dc(2, '149.154.167.40', 80)\nclient.start(\n    phone='9996621234', code_callback=lambda: '22222'\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Telethon Client with Test Server Connection in Python\nDESCRIPTION: Configures a TelegramClient to connect to a specific test data center by setting the data center ID, IP address, and port. Uses a None session to ensure generating a new authorization key for the test server connection.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/developing/test-servers.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = TelegramClient(None, api_id, api_hash)\nclient.session.set_dc(dc_id, '149.154.167.40', 80)\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Database Cache in Python\nDESCRIPTION: Example showing how to configure entity caching behavior in Telethon client. Demonstrates disabling entity saving and clearing the cache.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclient.session.entities.enabled = False\nclient.session.save_entities = False\nclient.session.entities.clear_cache(entity=None)\n```\n\n----------------------------------------\n\nTITLE: Telethon Sync Module Import Examples\nDESCRIPTION: Shows different ways to import Telethon's sync module for synchronous-style code execution.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/asyncio.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import sync, ...\n# or\nfrom telethon.sync import ...\n# or\nimport telethon.sync\n```\n\n----------------------------------------\n\nTITLE: Basic Pytest Example for Telethon Testing\nDESCRIPTION: Example showing both synchronous and asynchronous test functions in Pytest. The example demonstrates proper test structure, fixture usage, and assertion patterns. It also shows how to use the pytest.mark.asyncio decorator for testing asynchronous code.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/developing/testing.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom module import my_thing, my_other_thing\n\ndef test_my_thing(fixture):\n    assert my_thing(fixture) == 42\n\n@pytest.mark.asyncio\nasync def test_my_thing(event_loop):\n    assert await my_other_thing(loop=event_loop) == 42\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration\nDESCRIPTION: Example of configuring Telethon to use a proxy server. Shows both dictionary and tuple configuration methods.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/basic/signing-in.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nproxy = {\n    'proxy_type': 'socks5', # (mandatory) protocol to use (see above)\n    'addr': '1.1.1.1',      # (mandatory) proxy IP address\n    'port': 5555,           # (mandatory) proxy port number\n    'username': 'foo',      # (optional) username if the proxy requires auth\n    'password': 'bar',      # (optional) password if the proxy requires auth\n    'rdns': True            # (optional) whether to use remote or local resolve, default remote\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Coroutines with Await in Telethon\nDESCRIPTION: Example showing how to properly handle coroutines in Telethon by using the await keyword. This resolves the common 'coroutine object has no attribute' error.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(event):\n    me = await client.get_me()\n    #    ^^^^^ note the await\n    print(me.username)\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields in Telethon Objects\nDESCRIPTION: Examples of how to access fields in Telethon objects using the dot operator. This demonstrates working with nested objects and lists returned from Telegram API calls.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nme = await client.get_me()\nprint(me.username)\n#       ^ we used the dot operator to access the username attribute\n\nresult = await client(functions.photos.GetUserPhotosRequest(\n    user_id='me',\n    offset=0,\n    max_id=0,\n    limit=100\n))\n\n# Working with list is also pretty basic\nprint(result.photos[0].sizes[-1].type)\n#           ^       ^ ^       ^ ^\n#           |       | |       | \\ type\n#           |       | |       \\ last size\n#           |       | \\ list of sizes\n#  access   |       \\ first photo from the list\n#  the...   \\ list of photos\n#\n# To print all, you could do (or mix-and-match):\nfor photo in result.photos:\n    for size in photo.sizes:\n        print(size.type)\n```\n\n----------------------------------------\n\nTITLE: Message Request Import Examples\nDESCRIPTION: Demonstrates different ways to import Telegram API functions for sending messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/full-api.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl.functions.messages import SendMessageRequest\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon.tl import types, functions\n# We now have access to 'functions.messages.SendMessageRequest'\n```\n\n----------------------------------------\n\nTITLE: Basic TL Syntax Example for Telegram Object Definition\nDESCRIPTION: Demonstrates the standard syntax pattern for defining a Telegram object in the Type Language. The pattern includes the object name, unique ID, argument specifications, and common type.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/developing/understanding-the-type-language.rst#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nname#id argument_name:argument_type = CommonType\n```\n\n----------------------------------------\n\nTITLE: Type Checking Telethon Entities with isinstance (Python)\nDESCRIPTION: This code shows how to use Python's isinstance function to check the type of an entity attribute. This example checks if a channel has no photo by testing if the photo attribute is of type ChatPhotoEmpty.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/strings.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import types\n\nif isinstance(entity.photo, types.ChatPhotoEmpty):\n    print('Channel has no photo')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Comparison with None in Python\nDESCRIPTION: Shows an example of how not to compare variables with None in Python, using the equality operator '==' instead of the identity operator 'is'.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/developing/coding-style.rst#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nif x == None\n```\n\n----------------------------------------\n\nTITLE: Running Telethon Code Generator in Python\nDESCRIPTION: Command to generate the necessary code for the Telethon library. This needs to be run after cloning the repository to generate the required files under telethon/tl/.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/developing/project-structure.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py gen\n```\n\n----------------------------------------\n\nTITLE: Comparing with None in Python\nDESCRIPTION: Demonstrates the correct way to compare variables with None in Python, emphasizing the use of 'is' instead of '==' for identity comparison.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/developing/coding-style.rst#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nif x is None\nif x is not None\n```\n\n----------------------------------------\n\nTITLE: Formatted Output of stringify() for a Channel (Python)\nDESCRIPTION: This is the formatted output from calling stringify() on a Channel entity, showing a multi-line representation with proper indentation that makes the structure clearer.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/strings.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nChannel(\n    id=1066197625,\n    title='Telegram Usernames',\n    photo=ChatPhotoEmpty(\n    ),\n    date=datetime.datetime(2016, 12, 16, 15, 15, 43, tzinfo=datetime.timezone.utc),\n    version=0,\n    creator=False,\n    left=True,\n    broadcast=True,\n    verified=True,\n    megagroup=False,\n    restricted=False,\n    signatures=False,\n    min=False,\n    scam=False,\n    has_link=False,\n    has_geo=False,\n    slowmode_enabled=False,\n    access_hash=-6309373984955162244,\n    username='username',\n    restriction_reason=[\n    ],\n    admin_rights=None,\n    banned_rights=None,\n    default_banned_rights=None,\n    participants_count=None\n)\n```\n\n----------------------------------------\n\nTITLE: Using stringify() for Better Formatting in Telethon (Python)\nDESCRIPTION: This code shows how to use the stringify() method to get a more readable, formatted representation of an entity object that's easier to inspect visually.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/strings.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(entity.stringify())\n```\n\n----------------------------------------\n\nTITLE: Importing Telethon Errors Module\nDESCRIPTION: Code to import the errors module from Telethon. This is necessary to handle specific API errors like FloodWaitError.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/quick-references/faq.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import errors\n```\n\n----------------------------------------\n\nTITLE: Accessing a Channel's Linked Discussion Group in Telethon\nDESCRIPTION: Demonstrates how to access the linked discussion megagroup of a broadcast channel using the linked_chat_id property of a ChannelFull object.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(full_channel.linked_chat_id)  # prints ID of linked discussion group or None\n```\n\n----------------------------------------\n\nTITLE: Converting Usernames to IDs with client.get_peer_id in Telethon\nDESCRIPTION: Demonstrates using client.get_peer_id to convert usernames or other entities that might require API calls to find their identifier.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(await client.get_peer_id('me'))  # your id\n```\n\n----------------------------------------\n\nTITLE: Converting Marked IDs to Real IDs with utils.resolve_id in Telethon\nDESCRIPTION: Demonstrates how to use utils.resolve_id to convert between the \"marked\" identifiers (prefixed with a minus sign) and the real ones, returning a tuple with the real ID and the peer type class.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/chats-vs-channels.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telethon import utils\nreal_id, peer_type = utils.resolve_id(-1000000000456)\n\nprint(real_id)  # 456\nprint(peer_type)  # <class 'telethon.tl.types.PeerChannel'>\n\npeer = peer_type(real_id)\nprint(peer)  # PeerChannel(channel_id=456)\n```\n\n----------------------------------------\n\nTITLE: Using reply_to parameter in message sending methods\nDESCRIPTION: Example showing the reply_to parameter added in v0.13.3 that allows replying to messages when sending new ones.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nreply_to\n```\n\n----------------------------------------\n\nTITLE: Using TelegramClient.is_connected() method\nDESCRIPTION: Example of the is_connected() method that was added to TelegramClient in v0.13.4 to check connection status.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/misc/changelog.rst#2025-04-17_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n.is_connected()\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Telethon Examples\nDESCRIPTION: Shell commands to clone the Telethon repository and run one of the example scripts (gui.py). This demonstrates how to obtain and execute the example files.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/telethon_examples/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/LonamiWebs/Telethon.git\ncd Telethon\ncd telethon_examples\npython3 gui.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Bot with python-telegram-bot\nDESCRIPTION: This snippet demonstrates how to create a simple echo bot using the python-telegram-bot library. It includes handlers for the /start command and echoing text messages.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/concepts/botapi-vs-mtproto.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom telegram.ext import Updater, CommandHandler, MessageHandler, Filters\n\ndef start(update, context):\n    \"\"\"Send a message when the command /start is issued.\"\"\"\n    update.message.reply_text('Hi!')\n\ndef echo(update, context):\n    \"\"\"Echo the user message.\"\"\"\n    update.message.reply_text(update.message.text)\n\ndef main():\n    \"\"\"Start the bot.\"\"\"\n    updater = Updater(\"TOKEN\")\n    dp = updater.dispatcher\n    dp.add_handler(CommandHandler(\"start\", start))\n    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))\n\n    updater.start_polling()\n\n    updater.idle()\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx RTD Theme Dependency\nDESCRIPTION: Specifies the version requirement for the sphinx-rtd-theme package used for documentation styling. Uses a compatible release operator (~=) to allow patch version updates while maintaining major version compatibility.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/readthedocs/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx-rtd-theme~=1.3.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Testing Dependencies\nDESCRIPTION: A requirements list specifying the testing packages needed for the Telethon project. It includes pytest as the main testing framework, pytest-cov for generating code coverage reports, and pytest-asyncio for testing async functions in the codebase.\nSOURCE: https://github.com/LonamiWebs/Telethon/blob/v1/dev-requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npytest\npytest-cov\npytest-asyncio\n```"
  }
]