[
  {
    "owner": "rust-syndication",
    "repo": "rss",
    "content": "TITLE: Reading RSS from a network request in Rust\nDESCRIPTION: Asynchronous function that fetches an RSS feed from a URL using the reqwest crate, then parses the bytes into a Channel object. Returns a Result with either the Channel or an error.\nSOURCE: https://github.com/rust-syndication/rss/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::error::Error;\nuse rss::Channel;\n\nasync fn example_feed() -> Result<Channel, Box<dyn Error>> {\n    let content = reqwest::get(\"http://example.com/feed.xml\")\n        .await?\n        .bytes()\n        .await?;\n    let channel = Channel::read_from(&content[..])?\n    Ok(channel)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RSS channel using builder pattern in Rust\nDESCRIPTION: Example of creating an RSS Channel using the builder pattern. Requires the 'builders' feature which is enabled by default. Sets basic channel properties like title, link, and description.\nSOURCE: https://github.com/rust-syndication/rss/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse rss::ChannelBuilder;\n\nlet channel = ChannelBuilder::default()\n    .title(\"Channel Title\")\n    .link(\"http://example.com\")\n    .description(\"An RSS feed.\")\n    .build()\n    .unwrap();\n```\n\n----------------------------------------\n\nTITLE: Reading RSS from a file in Rust\nDESCRIPTION: Example of reading an RSS feed from a local XML file. The code opens a file, creates a buffered reader, and parses it into a Channel object.\nSOURCE: https://github.com/rust-syndication/rss/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::fs::File;\nuse std::io::BufReader;\nuse rss::Channel;\n\nlet file = File::open(\"example.xml\").unwrap();\nlet channel = Channel::read_from(BufReader::new(file)).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Writing RSS channel to an output in Rust\nDESCRIPTION: Examples of writing an RSS Channel to an output. Demonstrates writing to any Write trait implementor and converting to a string using ToString trait.\nSOURCE: https://github.com/rust-syndication/rss/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse rss::Channel;\n\nlet channel = Channel::default();\nchannel.write_to(::std::io::sink()).unwrap(); // // write to the channel to a writer\nlet string = channel.to_string(); // convert the channel to a string\n```\n\n----------------------------------------\n\nTITLE: Validating RSS channel in Rust\nDESCRIPTION: Example of validating an RSS Channel against the RSS specification. Requires enabling the 'validation' feature to use the Validate trait methods.\nSOURCE: https://github.com/rust-syndication/rss/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse rss::Channel;\nuse rss::validation::Validate;\n\nlet channel = Channel::default();\nchannel.validate().unwrap();\n```\n\n----------------------------------------\n\nTITLE: Adding RSS dependency to Cargo.toml\nDESCRIPTION: Add the RSS library as a dependency in your Cargo.toml file, specifying version 2.0.\nSOURCE: https://github.com/rust-syndication/rss/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nrss = \"2.0\"\n```"
  }
]