[
  {
    "owner": "meteoraag",
    "repo": "dlmm-sdk",
    "content": "TITLE: Markdown Table of DLMM Instance Functions\nDESCRIPTION: Detailed table documenting all available functions in the DLMM SDK, including their descriptions and return types. Functions cover operations like state fetching, liquidity management, swapping, and reward claiming.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Function                                      | Description                                                                                                                   | Return                                                                                             |\n| --------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| `refetchStates`                               | Update onchain state of DLMM instance. It's recommend to call this before interact with the program (Deposit/ Withdraw/ Swap) | `Promise<void>`                                                                                    |\n| `getBinArrays`                                | Retrieves List of Bin Arrays                                                                                                  | `Promise<BinArrayAccount[]>`                                                                       |\n| `getBinArrayForSwap`                          | Retrieves List of Bin Arrays for swap purpose                                                                                 | `Promise<BinArrayAccount[]>`                                                                       |\n| `getFeeInfo`                                  | Retrieves LbPair's fee info including `base fee`, `protocol fee` & `max fee`                                                  | `FeeInfo`                                                                                          |\n| `getDynamicFee`                               | Retrieves LbPair's dynamic fee                                                                                                | `Decimal`                                                                                          |\n| `getBinsAroundActiveBin`                      | retrieves a specified number of bins to the left and right of the active bin and returns them along with the active bin ID.   | `Promise<{ activeBin: number; bins: BinLiquidity[] }>`                                             |\n| `getBinsBetweenMinAndMaxPrice`                | Retrieves a list of bins within a specified price                                                                             | `Promise<{ activeBin: number; bins: BinLiquidity[] }>`                                             |\n| `getBinsBetweenLowerAndUpperBound`            | retrieves a list of bins between a lower and upper bin ID and returns the active bin ID and the list of bins.                 | `Promise<{ activeBin: number; bins: BinLiquidity[] }>`                                             |\n| `toPricePerLamport`                           | Converts a real price of bin to lamport price                                                                                 | `string`                                                                                           |\n| `fromPricePerLamport`                         | converts a price per lamport value to a real price of bin                                                                     | `string`                                                                                           |\n| `getActiveBin`                                | Retrieves the active bin ID and its corresponding price                                                                       | `Promise<{ binId: number; price: string }>`                                                        |\n| `getPriceOfBinByBinId`                        | Get the price of a bin based on its bin ID                                                                                    | `string`                                                                                           |\n| `getBinIdFromPrice`                           | get bin ID based on a given price and a boolean flag indicating whether to round down or up.                                  | `number`                                                                                           |\n| `getPositionsByUserAndLbPair`                 | Retrieves positions by user and LB pair, including active bin and user positions.                                             | `Promise<{ activeBin: { binId: any; price: string; }; userPositions: Array<Position>;}>`           |\n| `initializePositionAndAddLiquidityByStrategy` | Initializes a position and adds liquidity                                                                                     | `Promise<Transaction\\|Transaction[]>`                                                              |\n| `addLiquidityByStrategy`                      | Add liquidity to existing position                                                                                            | `Promise<Transaction\\|Transaction[]>`                                                              |\n| `removeLiquidity`                             | function is used to remove liquidity from a position, with the option to claim rewards and close the position.                | `Promise<Transaction\\|Transaction[]>`                                                              |\n| `closePosition`                               | Closes a position                                                                                                             | `Promise<Transaction\\|Transaction[]>`                                                              |\n| `swapQuote`                                   | Quote for a swap                                                                                                              | `SwapQuote`                                                                                        |\n| `swap`                                        | Swap token within the LbPair                                                                                                  | `Promise<Transaction>`                                                                             |\n| `claimLMReward`                               | Claim rewards for a specific position owned by a specific owner                                                               | `Promise<Transaction>`                                                                             |\n| `claimAllLMRewards`                           | Claim all liquidity mining rewards for a given owner and their positions.                                                     | `Promise<Transaction[]>`                                                                           |\n| `claimSwapFee`                                | Claim swap fees for a specific position owned by a specific owner                                                             | `Promise<Transaction>`                                                                             |\n| `claimAllSwapFee`                             | Claim swap fees for multiple positions owned by a specific owner                                                              | `Promise<Transaction>`                                                                             |\n| `claimAllRewards`                             | Claim swap fees and LM rewards for multiple positions owned by a specific owner                                               | `Promise<Transaction[]>`                                                                           |\n| `syncWithMarketPrice`                         | Sync the pool current active bin to match nearest market price bin                                                            | `Promise<Transaction>`                                                                             |\n| `getPairPubkeyIfExists`                       | Get existing pool address given parameter, if not return null                                                                 | `Promise<PublicKey                                                                       \\| null>` |\n| `getMaxPriceInBinArrays`                      | Get max price of the last bin that has liquidity given bin arrays                                                             | `Promise<string                                                                       \\| null>`    |\n```\n\n----------------------------------------\n\nTITLE: Initializing DLMM Instance\nDESCRIPTION: Creation of DLMM instance for a specific pool or multiple pools using pool addresses\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DLMM from '@meteora-ag/dlmm'\n\nconst USDC_USDT_POOL = new PublicKey('ARwi1S4DaiTG5DX7S4M4ZsrXqpMD1MrTmbu9ue2tpmEq') // You can get your desired pool address from the API https://dlmm-api.meteora.ag/pair/all\nconst dlmmPool = await DLMM.create(connection, USDC_USDT_POOL);\n\n// If you need to create multiple, can consider using `createMultiple`\nconst dlmmPool = await DLMM.createMultiple(connection, [USDC_USDT_POOL, ...]);\n```\n\n----------------------------------------\n\nTITLE: Creating Permissionless Liquidity Pool with Custom Configuration\nDESCRIPTION: New functionality to create launch pools with flexible configurations via createCustomizablePermissionlessLbPair method. Allows more customization compared to standard pool creation.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateCustomizablePermissionlessLbPair();\n```\n\n----------------------------------------\n\nTITLE: Executing Swap Operation\nDESCRIPTION: Performs token swap with quote calculation and execution\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst swapAmount = new BN(0.1 * 10 ** 9);\n// Swap quote\nconst swapYtoX = true;\nconst binArrays = await dlmmPool.getBinArrayForSwap(swapYtoX);\n\nconst swapQuote = await dlmmPool.swapQuote(\n  swapAmount,\n  swapYtoX,\n  new BN(1),\n  binArrays\n);\n\n// Swap\nconst swapTx = await dlmmPool.swap({\n  inToken: dlmmPool.tokenX.publicKey,\n  binArraysPubkey: swapQuote.binArraysPubkey,\n  inAmount: swapAmount,\n  lbPair: dlmmPool.pubkey,\n  user: user.publicKey,\n  minOutAmount: swapQuote.minOutAmount,\n  outToken: dlmmPool.tokenY.publicKey,\n});\n\ntry {\n  const swapTxHash = await sendAndConfirmTransaction(connection, swapTx, [\n    user,\n  ]);\n} catch (error) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Balanced Position\nDESCRIPTION: Creates a balanced liquidity position around the active bin with equal distribution\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst TOTAL_RANGE_INTERVAL = 10; // 10 bins on each side of the active bin\nconst minBinId = activeBin.binId - TOTAL_RANGE_INTERVAL;\nconst maxBinId = activeBin.binId + TOTAL_RANGE_INTERVAL;\n\nconst totalXAmount = new BN(100 * 10 ** baseMint.decimals);\nconst totalYAmount = autoFillYByStrategy(\n  activeBin.binId,\n  dlmmPool.lbPair.binStep,\n  totalXAmount,\n  activeBin.xAmount,\n  activeBin.yAmount,\n  minBinId,\n  maxBinId,\n  StrategyType.Spot // can be StrategyType.Spot, StrategyType.BidAsk, StrategyType.Curve\n);\nconst newBalancePosition = new Keypair();\n\n// Create Position\nconst createPositionTx =\n  await dlmmPool.initializePositionAndAddLiquidityByStrategy({\n    positionPubKey: newBalancePosition.publicKey,\n    user: user.publicKey,\n    totalXAmount,\n    totalYAmount,\n    strategy: {\n      maxBinId,\n      minBinId,\n      strategyType: StrategyType.Spot, // can be StrategyType.Spot, StrategyType.BidAsk, StrategyType.Curve\n    },\n  });\n\ntry {\n  const createBalancePositionTxHash = await sendAndConfirmTransaction(\n    connection,\n    createPositionTx,\n    [user, newBalancePosition]\n  );\n} catch (error) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Imbalanced Position\nDESCRIPTION: Creates an imbalanced liquidity position with custom token amounts\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst TOTAL_RANGE_INTERVAL = 10; // 10 bins on each side of the active bin\nconst minBinId = activeBin.binId - TOTAL_RANGE_INTERVAL;\nconst maxBinId = activeBin.binId + TOTAL_RANGE_INTERVAL;\n\nconst totalXAmount = new BN(100 * 10 ** baseMint.decimals);\nconst totalYAmount = new BN(0.5 * 10 ** 9); // SOL\nconst newImbalancePosition = new Keypair();\n\n// Create Position\nconst createPositionTx =\n  await dlmmPool.initializePositionAndAddLiquidityByStrategy({\n    positionPubKey: newImbalancePosition.publicKey,\n    user: user.publicKey,\n    totalXAmount,\n    totalYAmount,\n    strategy: {\n      maxBinId,\n      minBinId,\n      strategyType: StrategyType.Spot, // can be StrategyType.Spot, StrategyType.BidAsk, StrategyType.Curve\n    },\n  });\n\ntry {\n  const createBalancePositionTxHash = await sendAndConfirmTransaction(\n    connection,\n    createPositionTx,\n    [user, newImbalancePosition]\n  );\n} catch (error) {}\n```\n\n----------------------------------------\n\nTITLE: Creating One-Sided Position\nDESCRIPTION: Creates a one-sided liquidity position with single token\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst TOTAL_RANGE_INTERVAL = 10; // 10 bins on each side of the active bin\nconst minBinId = activeBin.binId;\nconst maxBinId = activeBin.binId + TOTAL_RANGE_INTERVAL * 2;\n\nconst totalXAmount = new BN(100 * 10 ** baseMint.decimals);\nconst totalYAmount = new BN(0);\nconst newOneSidePosition = new Keypair();\n\n// Create Position\nconst createPositionTx =\n  await dlmmPool.initializePositionAndAddLiquidityByStrategy({\n    positionPubKey: newOneSidePosition.publicKey,\n    user: user.publicKey,\n    totalXAmount,\n    totalYAmount,\n    strategy: {\n      maxBinId,\n      minBinId,\n      strategyType: StrategyType.Spot, // can be StrategyType.Spot, StrategyType.BidAsk, StrategyType.Curve\n    },\n  });\n\ntry {\n  const createOneSidePositionTxHash = await sendAndConfirmTransaction(\n    connection,\n    createPositionTx,\n    [user, newOneSidePosition]\n  );\n} catch (error) {}\n```\n\n----------------------------------------\n\nTITLE: Adding Liquidity to Position\nDESCRIPTION: Adds additional liquidity to an existing position\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst TOTAL_RANGE_INTERVAL = 10; // 10 bins on each side of the active bin\nconst minBinId = activeBin.binId - TOTAL_RANGE_INTERVAL;\nconst maxBinId = activeBin.binId + TOTAL_RANGE_INTERVAL;\n\nconst totalXAmount = new BN(100 * 10 ** baseMint.decimals);\nconst totalYAmount = autoFillYByStrategy(\n  activeBin.binId,\n  dlmmPool.lbPair.binStep,\n  totalXAmount,\n  activeBin.xAmount,\n  activeBin.yAmount,\n  minBinId,\n  maxBinId,\n  StrategyType.Spot // can be StrategyType.Spot, StrategyType.BidAsk, StrategyType.Curve\n);\n\n// Add Liquidity to existing position\nconst addLiquidityTx = await dlmmPool.addLiquidityByStrategy({\n  positionPubKey: newBalancePosition.publicKey,\n  user: user.publicKey,\n  totalXAmount,\n  totalYAmount,\n  strategy: {\n    maxBinId,\n    minBinId,\n    strategyType: StrategyType.Spot, // can be StrategyType.Spot, StrategyType.BidAsk, StrategyType.Curve\n  },\n});\n\ntry {\n  const addLiquidityTxHash = await sendAndConfirmTransaction(\n    connection,\n    addLiquidityTx,\n    [user]\n  );\n} catch (error) {}\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity\nDESCRIPTION: Removes liquidity from position with optional claim and close functionality\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst userPosition = userPositions.find(({ publicKey }) =>\n  publicKey.equals(newBalancePosition.publicKey)\n);\n// Remove Liquidity\nconst binIdsToRemove = userPosition.positionData.positionBinData.map(\n  (bin) => bin.binId\n);\nconst removeLiquidityTx = await dlmmPool.removeLiquidity({\n  position: userPosition.publicKey,\n  user: user.publicKey,\n  fromBinId: binIdsToRemove[0],\n  toBinId: binIdsToRemove[binIdsToRemove.length - 1],\n  liquiditiesBpsToRemove: new Array(binIdsToRemove.length).fill(\n    new BN(100 * 100)\n  ), // 100% (range from 0 to 100)\n  shouldClaimAndClose: true, // should claim swap fee and close position together\n});\n\ntry {\n  for (let tx of Array.isArray(removeLiquidityTx)\n    ? removeLiquidityTx\n    : [removeLiquidityTx]) {\n    const removeBalanceLiquidityTxHash = await sendAndConfirmTransaction(\n      connection,\n      tx,\n      [user],\n      { skipPreflight: false, preflightCommitment: \"singleGossip\" }\n    );\n  }\n} catch (error) {}\n```\n\n----------------------------------------\n\nTITLE: Claiming Fees\nDESCRIPTION: Claims accumulated swap fees for positions\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function claimFee(dlmmPool: DLMM) {\n  const claimFeeTxs = await dlmmPool.claimAllSwapFee({\n    owner: user.publicKey,\n    positions: userPositions,\n  });\n\n  try {\n    for (const claimFeeTx of claimFeeTxs) {\n      const claimFeeTxHash = await sendAndConfirmTransaction(\n        connection,\n        claimFeeTx,\n        [user]\n      );\n    }\n  } catch (error) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Position\nDESCRIPTION: Closes an existing position\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst closePositionTx = await dlmmPool.closePosition({\n  owner: user.publicKey,\n  position: newBalancePosition.publicKey,\n});\n\ntry {\n  const closePositionTxHash = await sendAndConfirmTransaction(\n    connection,\n    closePositionTx,\n    [user],\n    { skipPreflight: false, preflightCommitment: \"singleGossip\" }\n  );\n} catch (error) {}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Positions\nDESCRIPTION: Retrieves list of positions for a specific user\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { userPositions } = await dlmmPool.getPositionsByUserAndLbPair(\n  user.publicKey\n);\nconst binData = userPositions[0].positionData.positionBinData;\n```\n\n----------------------------------------\n\nTITLE: Getting Active Bin Information\nDESCRIPTION: Retrieves active bin information including price in lamports and per token\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst activeBin = await dlmmPool.getActiveBin();\nconst activeBinPriceLamport = activeBin.price;\nconst activeBinPricePerToken = dlmmPool.fromPricePerLamport(\n  Number(activeBin.price)\n);\n```\n\n----------------------------------------\n\nTITLE: Quoting Swap with Price Impact\nDESCRIPTION: New swap functionality that considers price impact instead of just minimum amount out for slippage protection\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nswapWithPriceImpact();\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Trading Position\nDESCRIPTION: Method to create an empty trading position with corresponding bin arrays, introduced in v1.1.6\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateEmptyPosition();\n```\n\n----------------------------------------\n\nTITLE: Initializing DLMM Client with Solana Pool Address\nDESCRIPTION: Code to create a DLMM client instance by connecting to a specific DLMM pool on Solana. Uses the Solana RPC endpoint and a pool address to initialize the client, which can then be used to interact with DLMM methods.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/python-client/dlmm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dlmm import DLMM_CLIENT\nfrom solders.pubkey import Pubkey\n\nRPC = \"https://api.devnet.solana.com\"\npool_address = Pubkey.from_string(\"3W2HKgUa96Z69zzG3LK1g8KdcRAWzAttiLiHfYnKuPw5\") # You can get your desired pool address from the API https://dlmm-api.meteora.ag/pair/all\ndlmm = DLMM_CLIENT.create(pool_address, RPC) # Returns DLMM object instance\n```\n\n----------------------------------------\n\nTITLE: Installing DLMM Dependencies\nDESCRIPTION: Installation of required npm packages including DLMM SDK, Anchor, and Solana web3.js\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @meteora-ag/dlmm @coral-xyz/anchor @solana/web3.js\n```\n\n----------------------------------------\n\nTITLE: Installing DLMM SDK and Dependencies with pip\nDESCRIPTION: Command to install the DLMM SDK and the required solders library which provides Solana blockchain functionality.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/python-client/dlmm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dlmm solders\n```\n\n----------------------------------------\n\nTITLE: Running SDK Tests with Anchor and pnpm\nDESCRIPTION: These commands set up and run tests for the SDK using Anchor (a Solana development framework) in localnet mode and pnpm (a package manager). It involves changing directory, starting a local Anchor network, and running the test script.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n1. cd ts-client\n2. anchor localnet -- --features localnet\n3. pnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Quote Tests with Cargo for Commons Package in Rust\nDESCRIPTION: This command runs all tests in the commons package using Cargo, Rust's package manager and build system. It targets all test files within the package.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo t -p commons --test '*'\n```\n\n----------------------------------------\n\nTITLE: Running the DLMM CLI Tool with Help Flag\nDESCRIPTION: Command to run the compiled DLMM CLI tool with the --help flag to display available commands and options. The executable is located in the target/debug directory after building.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntarget/debug/cli --help\n```\n\n----------------------------------------\n\nTITLE: Building the DLMM CLI Tool with Cargo\nDESCRIPTION: Command to build the DLMM CLI tool using Cargo, the Rust package manager and build system. This will compile the project and its dependencies.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Toolchain Version for DLMM CLI\nDESCRIPTION: Specifies the required Rust toolchain version (1.76.0) for the DLMM CLI tool. This is the channel specification needed in the project's toolchain configuration.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchannel = 1.76.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Toolchain for M1 Chip Users\nDESCRIPTION: Special toolchain configuration for users with Apple M1 chips. Specifies both the Rust version (1.76.0) and the target triple (x86_64-apple-darwin) for cross-compilation compatibility.\nSOURCE: https://github.com/meteoraag/dlmm-sdk/blob/main/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nchannel = 1.76.0\ntarget triple = x86_64-apple-darwin\n# Eg: 1.76.0-x86_64-apple-darwin\n```"
  }
]