[
  {
    "owner": "abdolence",
    "repo": "axum-streams-rs",
    "content": "TITLE: Implementing various stream response formats with axum-streams\nDESCRIPTION: Example demonstrating how to create stream responses in different formats (JSON array, JSON lines, CSV, and text) for the axum web framework. Includes a simple data structure and a source stream function that simulates a throttled data stream.\nSOURCE: https://github.com/abdolence/axum-streams-rs/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Deserialize, Serialize)]\nstruct MyTestStructure {\n  some_test_field: String\n}\n\nfn my_source_stream() -> impl Stream<Item=MyTestStructure> {\n  // Simulating a stream with a plain vector and throttling to show how it works\n  stream::iter(vec![\n    MyTestStructure {\n      some_test_field: \"test1\".to_string()\n    }; 1000\n  ]).throttle(std::time::Duration::from_millis(50))\n}\n\nasync fn test_json_array_stream() -> impl IntoResponse {\n  StreamBodyAs::json_array(source_test_stream())\n}\n\nasync fn test_json_nl_stream() -> impl IntoResponse {\n  StreamBodyAs::json_nl(source_test_stream())\n}\n\nasync fn test_csv_stream() -> impl IntoResponse {\n  StreamBodyAs::csv(source_test_stream())\n}\n\nasync fn test_text_stream() -> impl IntoResponse {\n  StreamBodyAs::text(source_test_stream())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing error handling in stream responses\nDESCRIPTION: Example demonstrating how to propagate errors in stream responses. The example includes a custom error type that implements Into<axum::Error> and a source stream that can return Result<T, E> values.\nSOURCE: https://github.com/abdolence/axum-streams-rs/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct MyError {\n    message: String,\n}\n\nimpl Into<axum::Error> for MyError {\n    fn into(self) -> axum::Error {\n        axum::Error::new(self.message)\n    }\n}\n\nfn my_source_stream() -> impl Stream<Item=Result<MyTestStructure, MyError>> {\n  // Simulating a stream with a plain vector and throttling to show how it works\n  stream::iter(vec![\n    Ok(MyTestStructure {\n      some_test_field: \"test1\".to_string()\n    }); 1000\n  ])\n}\n\nasync fn test_json_array_stream() -> impl IntoResponse {\n  // Use _with_errors functions or directly `StreamBodyAs::with_options` \n  // to produce a stream with errors\n  StreamBodyAs::json_array_with_errors(source_test_stream())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring frame size for streaming responses\nDESCRIPTION: Example showing how to configure the buffering options for stream responses. By default, the library produces one HTTP frame per item, but this can be modified to buffer multiple items per frame for better performance.\nSOURCE: https://github.com/abdolence/axum-streams-rs/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nStreamBodyAsOptions::new().buffering_ready_items(1000)\n    .json_array(source_test_stream())\n```\n\n----------------------------------------\n\nTITLE: Creating JSON array responses with envelope structures\nDESCRIPTION: Example showing how to wrap a JSON array inside another object (envelope structure). This is useful when the API needs to include metadata alongside the array data. The example includes structures for both the envelope and array items.\nSOURCE: https://github.com/abdolence/axum-streams-rs/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Deserialize, Serialize)]\nstruct MyEnvelopeStructure {\n    something_else: String,\n    #[serde(skip_serializing_if = \"Vec::is_empty\")]\n    data: Vec<MyItem>\n}\n\n#[derive(Debug, Clone, Deserialize, Serialize)]\nstruct MyItem {\n  some_test_field: String\n}\n```\n\n----------------------------------------\n\nTITLE: Adding axum-streams dependency in Cargo.toml\nDESCRIPTION: Configuration for adding the axum-streams library to a Rust project. Includes all available format features: json, csv, protobuf, text, and arrow.\nSOURCE: https://github.com/abdolence/axum-streams-rs/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naxum-streams = { version = \"0.21\", features=[\"json\", \"csv\", \"protobuf\", \"text\", \"arrow\"] }\n```\n\n----------------------------------------\n\nTITLE: Example JSON structure with envelope object\nDESCRIPTION: An example of the JSON output format when using envelope structures. The JSON shows an object containing a status field and a data array with test items.\nSOURCE: https://github.com/abdolence/axum-streams-rs/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"some_status_field\": \"ok\",\n  \"data\": [\n    {\n      \"some_test_field\": \"test1\"\n    },\n    {\n      \"some_test_field\": \"test2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Issue Report Checklist in Markdown\nDESCRIPTION: A markdown list detailing the key points to check before submitting a bug report, ensuring it's a real, current, non-duplicate, reproducible issue with a minimal example.\nSOURCE: https://github.com/abdolence/axum-streams-rs/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Real, current bug for the latest/supported version\n* No duplicate\n* Reproducible\n* Minimal example\n```"
  }
]